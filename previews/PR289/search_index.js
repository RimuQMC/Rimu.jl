var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21231485775967754 ± 0.0025008858650231026\n   G2(1) = 0.9172608825799492 ± 0.0010810310304620293\n   G2(2) = 0.9820479495798768 ± 0.0005738689863207089\n   G2(3) = 0.9890674779206707 ± 0.0009091015188222402\n   G2(4) = 0.9820479495798768 ± 0.0005738689863207089\n   G2(5) = 0.9172608825799492 ± 0.0010810310304620293\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.09295586953824 ± 0.14954022414476034\n   Replica 2: -3.927214359306953 ± 0.14207705503740523\n   Replica 3: -4.055850634079031 ± 0.12085906335670629\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip970\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip971\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip972\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.75 2211.02,1003.75 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.699 2211.02,746.699 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.643 2211.02,489.643 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.587 2211.02,232.587 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.75 423.181,1003.75 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.699 423.181,746.699 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.643 423.181,489.643 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.587 423.181,232.587 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.85 Q363.608 1253.72 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.51 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.85 Q344.395 1252.1 347.45 1247.51 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M290.043 1017.1 L306.363 1017.1 L306.363 1021.03 L284.418 1021.03 L284.418 1017.1 Q287.08 1014.35 291.664 1009.72 Q296.27 1005.06 297.451 1003.72 Q299.696 1001.2 300.576 999.461 Q301.478 997.702 301.478 996.012 Q301.478 993.257 299.534 991.521 Q297.613 989.785 294.511 989.785 Q292.312 989.785 289.858 990.549 Q287.427 991.313 284.65 992.864 L284.65 988.141 Q287.474 987.007 289.927 986.428 Q292.381 985.85 294.418 985.85 Q299.789 985.85 302.983 988.535 Q306.177 991.22 306.177 995.711 Q306.177 997.84 305.367 999.762 Q304.58 1001.66 302.474 1004.25 Q301.895 1004.92 298.793 1008.14 Q295.691 1011.34 290.043 1017.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 986.475 L334.58 986.475 L334.58 990.41 L320.506 990.41 L320.506 998.882 Q321.524 998.535 322.543 998.373 Q323.562 998.188 324.58 998.188 Q330.367 998.188 333.747 1001.36 Q337.126 1004.53 337.126 1009.95 Q337.126 1015.53 333.654 1018.63 Q330.182 1021.71 323.862 1021.71 Q321.687 1021.71 319.418 1021.34 Q317.173 1020.97 314.765 1020.22 L314.765 1015.53 Q316.849 1016.66 319.071 1017.22 Q321.293 1017.77 323.77 1017.77 Q327.774 1017.77 330.112 1015.66 Q332.45 1013.56 332.45 1009.95 Q332.45 1006.34 330.112 1004.23 Q327.774 1002.12 323.77 1002.12 Q321.895 1002.12 320.02 1002.54 Q318.168 1002.96 316.224 1003.84 L316.224 986.475 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 989.553 Q352.728 989.553 350.899 993.118 Q349.094 996.66 349.094 1003.79 Q349.094 1010.9 350.899 1014.46 Q352.728 1018 356.339 1018 Q359.973 1018 361.779 1014.46 Q363.608 1010.9 363.608 1003.79 Q363.608 996.66 361.779 993.118 Q359.973 989.553 356.339 989.553 M356.339 985.85 Q362.149 985.85 365.205 990.456 Q368.284 995.04 368.284 1003.79 Q368.284 1012.52 365.205 1017.12 Q362.149 1021.71 356.339 1021.71 Q350.529 1021.71 347.45 1017.12 Q344.395 1012.52 344.395 1003.79 Q344.395 995.04 347.45 990.456 Q350.529 985.85 356.339 985.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M286.062 729.419 L304.418 729.419 L304.418 733.354 L290.344 733.354 L290.344 741.826 Q291.363 741.479 292.381 741.317 Q293.4 741.132 294.418 741.132 Q300.205 741.132 303.585 744.303 Q306.964 747.474 306.964 752.891 Q306.964 758.47 303.492 761.571 Q300.02 764.65 293.701 764.65 Q291.525 764.65 289.256 764.28 Q287.011 763.909 284.603 763.169 L284.603 758.47 Q286.687 759.604 288.909 760.159 Q291.131 760.715 293.608 760.715 Q297.613 760.715 299.951 758.608 Q302.288 756.502 302.288 752.891 Q302.288 749.28 299.951 747.173 Q297.613 745.067 293.608 745.067 Q291.733 745.067 289.858 745.483 Q288.006 745.9 286.062 746.78 L286.062 729.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 732.497 Q322.566 732.497 320.737 736.062 Q318.932 739.604 318.932 746.733 Q318.932 753.84 320.737 757.405 Q322.566 760.946 326.177 760.946 Q329.811 760.946 331.617 757.405 Q333.446 753.84 333.446 746.733 Q333.446 739.604 331.617 736.062 Q329.811 732.497 326.177 732.497 M326.177 728.794 Q331.987 728.794 335.043 733.4 Q338.122 737.984 338.122 746.733 Q338.122 755.46 335.043 760.067 Q331.987 764.65 326.177 764.65 Q320.367 764.65 317.288 760.067 Q314.233 755.46 314.233 746.733 Q314.233 737.984 317.288 733.4 Q320.367 728.794 326.177 728.794 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 732.497 Q352.728 732.497 350.899 736.062 Q349.094 739.604 349.094 746.733 Q349.094 753.84 350.899 757.405 Q352.728 760.946 356.339 760.946 Q359.973 760.946 361.779 757.405 Q363.608 753.84 363.608 746.733 Q363.608 739.604 361.779 736.062 Q359.973 732.497 356.339 732.497 M356.339 728.794 Q362.149 728.794 365.205 733.4 Q368.284 737.984 368.284 746.733 Q368.284 755.46 365.205 760.067 Q362.149 764.65 356.339 764.65 Q350.529 764.65 347.45 760.067 Q344.395 755.46 344.395 746.733 Q344.395 737.984 347.45 733.4 Q350.529 728.794 356.339 728.794 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M284.835 472.363 L307.057 472.363 L307.057 474.353 L294.511 506.923 L289.627 506.923 L301.432 476.298 L284.835 476.298 L284.835 472.363 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M316.224 472.363 L334.58 472.363 L334.58 476.298 L320.506 476.298 L320.506 484.77 Q321.524 484.423 322.543 484.261 Q323.562 484.076 324.58 484.076 Q330.367 484.076 333.747 487.247 Q337.126 490.418 337.126 495.835 Q337.126 501.414 333.654 504.515 Q330.182 507.594 323.862 507.594 Q321.687 507.594 319.418 507.224 Q317.173 506.853 314.765 506.113 L314.765 501.414 Q316.849 502.548 319.071 503.103 Q321.293 503.659 323.77 503.659 Q327.774 503.659 330.112 501.552 Q332.45 499.446 332.45 495.835 Q332.45 492.224 330.112 490.117 Q327.774 488.011 323.77 488.011 Q321.895 488.011 320.02 488.427 Q318.168 488.844 316.224 489.724 L316.224 472.363 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 475.441 Q352.728 475.441 350.899 479.006 Q349.094 482.548 349.094 489.677 Q349.094 496.784 350.899 500.349 Q352.728 503.89 356.339 503.89 Q359.973 503.89 361.779 500.349 Q363.608 496.784 363.608 489.677 Q363.608 482.548 361.779 479.006 Q359.973 475.441 356.339 475.441 M356.339 471.738 Q362.149 471.738 365.205 476.344 Q368.284 480.928 368.284 489.677 Q368.284 498.404 365.205 503.011 Q362.149 507.594 356.339 507.594 Q350.529 507.594 347.45 503.011 Q344.395 498.404 344.395 489.677 Q344.395 480.928 347.45 476.344 Q350.529 471.738 356.339 471.738 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M256.664 245.932 L264.303 245.932 L264.303 219.566 L255.992 221.233 L255.992 216.973 L264.256 215.307 L268.932 215.307 L268.932 245.932 L276.571 245.932 L276.571 249.867 L256.664 249.867 L256.664 245.932 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M296.015 218.385 Q292.404 218.385 290.576 221.95 Q288.77 225.492 288.77 232.621 Q288.77 239.728 290.576 243.293 Q292.404 246.834 296.015 246.834 Q299.65 246.834 301.455 243.293 Q303.284 239.728 303.284 232.621 Q303.284 225.492 301.455 221.95 Q299.65 218.385 296.015 218.385 M296.015 214.682 Q301.826 214.682 304.881 219.288 Q307.96 223.871 307.96 232.621 Q307.96 241.348 304.881 245.955 Q301.826 250.538 296.015 250.538 Q290.205 250.538 287.127 245.955 Q284.071 241.348 284.071 232.621 Q284.071 223.871 287.127 219.288 Q290.205 214.682 296.015 214.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M326.177 218.385 Q322.566 218.385 320.737 221.95 Q318.932 225.492 318.932 232.621 Q318.932 239.728 320.737 243.293 Q322.566 246.834 326.177 246.834 Q329.811 246.834 331.617 243.293 Q333.446 239.728 333.446 232.621 Q333.446 225.492 331.617 221.95 Q329.811 218.385 326.177 218.385 M326.177 214.682 Q331.987 214.682 335.043 219.288 Q338.122 223.871 338.122 232.621 Q338.122 241.348 335.043 245.955 Q331.987 250.538 326.177 250.538 Q320.367 250.538 317.288 245.955 Q314.233 241.348 314.233 232.621 Q314.233 223.871 317.288 219.288 Q320.367 214.682 326.177 214.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M356.339 218.385 Q352.728 218.385 350.899 221.95 Q349.094 225.492 349.094 232.621 Q349.094 239.728 350.899 243.293 Q352.728 246.834 356.339 246.834 Q359.973 246.834 361.779 243.293 Q363.608 239.728 363.608 232.621 Q363.608 225.492 361.779 221.95 Q359.973 218.385 356.339 218.385 M356.339 214.682 Q362.149 214.682 365.205 219.288 Q368.284 223.871 368.284 232.621 Q368.284 241.348 365.205 245.955 Q362.149 250.538 356.339 250.538 Q350.529 250.538 347.45 245.955 Q344.395 241.348 344.395 232.621 Q344.395 223.871 347.45 219.288 Q350.529 214.682 356.339 214.682 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip972)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.587 4017.76,232.587 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1248.09 457.691,1247.93 458.259,1247.7 458.828,1247.4 459.396,1247 459.964,1246.5 460.533,1245.89 461.101,1245.27 461.669,1244.56 462.238,1243.77 462.806,1242.9 463.375,1240.91 463.943,1238.84 464.511,1237.72 465.08,1236.49 465.648,1234.12 466.216,1232.69 466.785,1231.15 467.353,1228.46 467.921,1226.66 468.49,1224.76 469.058,1221.65 469.626,1218.43 470.195,1216.07 470.763,1213.56 471.331,1210.9 471.9,1208.05 472.468,1205.02 473.036,1200.8 473.605,1197.42 474.173,1193.76 474.741,1188.88 475.31,1183.8 475.878,1179.58 476.446,1174.17 477.015,1169.62 477.583,1164.87 478.152,1159.86 478.72,1153.6 479.288,1146.14 479.857,1140.51 480.425,1134.63 480.993,1128.67 481.562,1120.37 482.13,1113.66 482.698,1105.78 483.267,1097.6 483.835,1090.3 484.403,1082.71 484.972,1073.98 485.54,1062.96 486.108,1052.8 486.677,1043.52 487.245,1034.15 487.813,1022.46 488.382,1012.96 488.95,1003.28 489.518,993.395 490.087,982.446 490.655,969.503 491.224,957.206 491.792,948 492.36,933.546 492.929,922.428 493.497,912.38 494.065,901.203 494.634,889.075 495.202,880.978 495.77,870.681 496.339,860.574 496.907,850.365 497.475,839.066 498.044,829.727 498.612,820.611 499.18,811.295 499.749,799.964 500.317,785.623 500.885,776.635 501.454,766.657 502.022,756.728 502.59,745.742 503.159,736.891 503.727,726.054 504.295,715.297 504.864,705.67 505.432,695.249 506.001,686.978 506.569,676.692 507.137,666.508 507.706,657.574 508.274,648.587 508.842,638.831 509.411,629.068 509.979,619.433 510.547,609.936 511.116,602.806 511.684,595.692 512.252,586.445 512.821,578.66 513.389,570.705 513.957,560.032 514.526,553.901 515.094,547.706 515.662,541.361 516.231,533.05 516.799,525.841 517.367,519.948 517.936,513.945 518.504,507.32 519.072,500.787 519.641,496.284 520.209,489.599 520.778,484.055 521.346,477.826 521.914,471.338 522.483,465.221 523.051,460.344 523.619,454.547 524.188,446.919 524.756,441.483 525.324,434.985 525.893,429.626 526.461,423.543 527.029,417.698 527.598,411.898 528.166,408.416 528.734,402.032 529.303,395.64 529.871,392.506 530.439,390.705 531.008,385.624 531.576,381.744 532.144,377.971 532.713,370.994 533.281,367.697 533.85,365.369 534.418,362.154 534.986,359.814 535.555,357.548 536.123,355.304 536.691,352.195 537.26,349.132 537.828,346.03 538.396,343.009 538.965,340.154 539.533,335.266 540.101,333.612 540.67,332.028 541.238,328.1 541.806,327.458 542.375,323.909 542.943,322.489 543.511,321.22 544.08,317.852 544.648,314.316 545.216,314.289 545.785,312.945 546.353,313.647 546.921,311.317 547.49,306.801 548.058,305.616 548.627,304.809 549.195,302.747 549.763,302.612 550.332,301.384 550.9,300.477 551.468,297.285 552.037,294.3 552.605,293.34 553.173,291.712 553.742,290.862 554.31,287.899 554.878,287.25 555.447,285.629 556.015,284.049 556.583,282.426 557.152,281.133 557.72,280.654 558.288,278.279 558.857,278.05 559.425,277.731 559.993,277.309 560.562,274.895 561.13,272.751 561.698,272.426 562.267,274.056 562.835,272.844 563.404,271.437 563.972,273.092 564.54,271.447 565.109,271.016 565.677,271.683 566.245,271.166 566.814,270.737 567.382,269.119 567.95,268.644 568.519,267.381 569.087,265.963 569.655,263.58 570.224,264.501 570.792,265.177 571.36,264.93 571.929,263.385 572.497,261.147 573.065,261.008 573.634,258.873 574.202,258.722 574.77,257.663 575.339,255.617 575.907,254.674 576.476,253.998 577.044,255.44 577.612,253.377 578.181,253.619 578.749,255.812 579.317,254.698 579.886,257.924 580.454,256.672 581.022,256.476 581.591,257.26 582.159,257.132 582.727,257.888 583.296,256.381 583.864,254.023 584.432,251.55 585.001,251.66 585.569,250.715 586.137,251.814 586.706,252.6 587.274,251.744 587.842,248.544 588.411,249.817 588.979,249.862 589.547,249.816 590.116,249.69 590.684,249.727 591.253,249.824 591.821,247.483 592.389,242.645 592.958,243.246 593.526,243.857 594.094,244.221 594.663,243.6 595.231,244.099 595.799,244.559 596.368,244.567 596.936,245.701 597.504,243.608 598.073,244.773 598.641,243.868 599.209,242.043 599.778,240.418 600.346,238.848 600.914,238.472 601.483,239.088 602.051,239.659 602.619,238.001 603.188,236.492 603.756,239.29 604.325,239.652 604.893,241.132 605.461,240.719 606.03,243.21 606.598,244.601 607.166,242.941 607.735,243.055 608.303,243.378 608.871,241.701 609.44,238.983 610.008,239.574 610.576,240.124 611.145,241.609 611.713,242.079 612.281,242.398 612.85,243.84 613.418,244.873 613.986,244.97 614.555,245.116 615.123,245.275 615.691,244.249 616.26,245.311 616.828,245.093 617.396,246.101 617.965,245.827 618.533,245.894 619.102,246.804 619.67,246.651 620.238,243.473 620.807,243.584 621.375,245.59 621.943,243.476 622.512,245.482 623.08,245.248 623.648,243.004 624.217,242.11 624.785,244.001 625.353,244.804 625.922,244.907 626.49,245.895 627.058,243.835 627.627,243.928 628.195,244.991 628.763,245.053 629.332,244.992 629.9,244.824 630.468,245.656 631.037,245.205 631.605,244.759 632.173,244.605 632.742,243.303 633.31,239.053 633.879,237.978 634.447,236.168 635.015,236.39 635.584,237.672 636.152,237.144 636.72,235.397 637.289,237.01 637.857,236.165 638.425,236.652 638.994,237.167 639.562,241.586 640.13,239.552 640.699,239.616 641.267,238.567 641.835,236.72 642.404,233.867 642.972,232.2 643.54,232.808 644.109,235.543 644.677,235.897 645.245,237.402 645.814,235.708 646.382,235.015 646.951,232.233 647.519,234.773 648.087,235.19 648.656,236.647 649.224,236.702 649.792,237.871 650.361,240.067 650.929,237.257 651.497,241.621 652.066,242.76 652.634,241.569 653.202,240.705 653.771,240.618 654.339,238.64 654.907,238.486 655.476,239.625 656.044,238.61 656.612,238.798 657.181,238.79 657.749,236.769 658.317,234.646 658.886,235.282 659.454,235.629 660.022,237.007 660.591,236.288 661.159,238.732 661.728,239.708 662.296,239.881 662.864,239.83 663.433,238.705 664.001,236.838 664.569,237.03 665.138,238.291 665.706,241.584 666.274,241.492 666.843,242.57 667.411,242.268 667.979,245.15 668.548,244.774 669.116,245.42 669.684,244.943 670.253,242.411 670.821,242.214 671.389,243.023 671.958,240.663 672.526,237.119 673.094,237.188 673.663,237.286 674.231,235.059 674.799,237.275 675.368,236.318 675.936,237.393 676.505,235.389 677.073,237.575 677.641,237.542 678.21,236.255 678.778,235.181 679.346,238.414 679.915,234.232 680.483,233.394 681.051,232.774 681.62,234.018 682.188,234.152 682.756,232.217 683.325,230.652 683.893,232.228 684.461,231.67 685.03,230.896 685.598,231.34 686.166,232.864 686.735,232.195 687.303,235.552 687.871,236.681 688.44,237.723 689.008,236.627 689.577,235.634 690.145,237.763 690.713,237.936 691.282,239.145 691.85,241.047 692.418,240.809 692.987,241.826 693.555,237.459 694.123,238.452 694.692,239.341 695.26,238.261 695.828,236.094 696.397,236.165 696.965,235.099 697.533,235.345 698.102,235.452 698.67,235.512 699.238,239.497 699.807,239.316 700.375,237.931 700.943,236.72 701.512,236.762 702.08,234.849 702.648,236.001 703.217,235.94 703.785,234.86 704.354,234.972 704.922,234.992 705.49,235.266 706.059,235.308 706.627,235.434 707.195,233.464 707.764,232.697 708.332,232.819 708.9,232.696 709.469,229.588 710.037,231.328 710.605,230.636 711.174,230.855 711.742,231.203 712.31,231.411 712.879,230.47 713.447,231.829 714.015,231.184 714.584,232.444 715.152,232.663 715.72,232 716.289,230.224 716.857,230.621 717.425,230.944 717.994,232.157 718.562,234.304 719.131,234.471 719.699,234.659 720.267,235.672 720.836,235.673 721.404,235.76 721.972,239.733 722.541,238.392 723.109,237.26 723.677,239.195 724.246,237.97 724.814,237.829 725.382,238.788 725.951,239.524 726.519,237.289 727.087,237.208 727.656,236.082 728.224,237.034 728.792,236.868 729.361,237.778 729.929,236.497 730.497,236.524 731.066,236.381 731.634,235.264 732.203,235.343 732.771,236.233 733.339,234.436 733.908,235.59 734.476,233.497 735.044,233.741 735.613,233.975 736.181,234.17 736.749,233.325 737.318,234.47 737.886,234.504 738.454,235.626 739.023,236.697 739.591,237.666 740.159,236.509 740.728,238.439 741.296,238.256 741.864,234.811 742.433,234.736 743.001,233.66 743.569,234.809 744.138,233.949 744.706,233.086 745.274,232.17 745.843,231.297 746.411,229.391 746.98,228.764 747.548,230.219 748.116,228.786 748.685,229.266 749.253,231.562 749.821,231.852 750.39,231.988 750.958,231.389 751.526,233.904 752.095,234.137 752.663,235.108 753.231,235.388 753.8,234.489 754.368,234.534 754.936,233.452 755.505,232.677 756.073,232.992 756.641,232.227 757.21,232.484 757.778,233.592 758.346,233.751 758.915,232.814 759.483,234.864 760.052,235.945 760.62,235.822 761.188,233.69 761.757,232.594 762.325,234.841 762.893,233.721 763.462,233.801 764.03,233.944 764.598,235.064 765.167,234.358 765.735,237.639 766.303,239.543 766.872,238.995 767.44,237.642 768.008,237.47 768.577,238.319 769.145,235.9 769.713,235.722 770.282,233.344 770.85,234.462 771.418,234.347 771.987,238.192 772.555,239.878 773.123,239.433 773.692,240.015 774.26,239.567 774.829,239.325 775.397,236.944 775.965,237.776 776.534,237.463 777.102,237.231 777.67,235.903 778.239,233.707 778.807,231.772 779.375,231.715 779.944,231.932 780.512,229.609 781.08,229.712 781.649,230.137 782.217,230.484 782.785,230.755 783.354,233.115 783.922,232.115 784.49,231.427 785.059,231.585 785.627,233.989 786.195,234.203 786.764,234.202 787.332,233.144 787.9,234.394 788.469,231.306 789.037,230.645 789.606,229.828 790.174,231.236 790.742,232.503 791.311,233.487 791.879,232.545 792.447,234.641 793.016,234.534 793.584,235.538 794.152,234.412 794.721,234.375 795.289,235.191 795.857,232.956 796.426,235.023 796.994,235.869 797.562,237.64 798.131,235.401 798.699,234.153 799.267,234.984 799.836,235.678 800.404,235.532 800.972,232.372 801.541,232.357 802.109,231.52 802.678,231.367 803.246,232.578 803.814,234.904 804.383,236.936 804.951,238.895 805.519,237.531 806.088,235.171 806.656,234.836 807.224,234.749 807.793,233.562 808.361,235.581 808.929,236.474 809.498,235.184 810.066,234.062 810.634,233.025 811.203,232.983 811.771,227.875 812.339,230.244 812.908,231.477 813.476,232.68 814.044,232.808 814.613,233.821 815.181,232.888 815.749,233.74 816.318,234.665 816.886,234.505 817.455,235.527 818.023,233.227 818.591,232.375 819.16,232.61 819.728,233.503 820.296,233.328 820.865,234.493 821.433,233.3 822.001,232.296 822.57,232.301 823.138,234.464 823.706,236.504 824.275,237.261 824.843,236.863 825.411,237.446 825.98,236.059 826.548,234.633 827.116,233.475 827.685,233.436 828.253,233.433 828.821,234.388 829.39,234.295 829.958,234.302 830.526,234.297 831.095,234.373 831.663,235.552 832.232,235.4 832.8,236.181 833.368,237.073 833.937,235.932 834.505,235.917 835.073,233.811 835.642,229.877 836.21,231.118 836.778,232.373 837.347,232.317 837.915,232.556 838.483,232.526 839.052,231.574 839.62,230.536 840.188,230.995 840.757,232.192 841.325,234.363 841.893,234.083 842.462,234.76 843.03,232.557 843.598,232.597 844.167,233.693 844.735,233.524 845.304,233.293 845.872,232.348 846.44,231.517 847.009,231.698 847.577,231.847 848.145,230.919 848.714,229.801 849.282,228.99 849.85,230.362 850.419,229.639 850.987,229.922 851.555,230.208 852.124,229.523 852.692,230.948 853.26,230.089 853.829,230.308 854.397,231.666 854.965,230.597 855.534,232.009 856.102,230.162 856.67,229.446 857.239,229.727 857.807,233.127 858.375,232.904 858.944,231.956 859.512,233.253 860.081,233.181 860.649,234.077 861.217,233.772 861.786,230.646 862.354,231.796 862.922,233.955 863.491,234.029 864.059,235.202 864.627,235.126 865.196,235.982 865.764,236.741 866.332,237.438 866.901,236.967 867.469,236.988 868.037,236.667 868.606,237.368 869.174,236.053 869.742,235.101 870.311,234.97 870.879,233.806 871.447,234.597 872.016,233.456 872.584,233.341 873.152,233.138 873.721,230.037 874.289,230.159 874.858,232.525 875.426,232.615 875.994,232.651 876.563,234.871 877.131,233.643 877.699,235.675 878.268,236.665 878.836,235.184 879.404,235.146 879.973,233.991 880.541,232.13 881.109,231.041 881.678,230.376 882.246,231.702 882.814,233.922 883.383,231.976 883.951,231.219 884.519,230.398 885.088,230.621 885.656,229.588 886.224,228.784 886.793,229.076 887.361,228.411 887.93,229.893 888.498,231.08 889.066,232.21 889.635,231.349 890.203,232.361 890.771,230.371 891.34,230.497 891.908,231.902 892.476,235.078 893.045,234.036 893.613,234.699 894.181,234.45 894.75,234.263 895.318,234.358 895.886,235.221 896.455,235.109 897.023,233.851 897.591,233.754 898.16,233.572 898.728,233.571 899.296,235.563 899.865,234.388 900.433,235.39 901.001,235.33 901.57,235.223 902.138,236.987 902.707,237.003 903.275,235.687 903.843,233.25 904.412,231.134 904.98,231.333 905.548,231.624 906.117,230.655 906.685,228.755 907.253,228.011 907.822,228.629 908.39,231.107 908.958,231.513 909.527,229.78 910.095,231.074 910.663,230.249 911.232,230.528 911.8,230.712 912.368,231.011 912.937,228.956 913.505,230.373 914.073,229.583 914.642,227.703 915.21,228.979 915.779,229.154 916.347,227.337 916.915,228.549 917.484,228.983 918.052,229.482 918.62,229.901 919.189,231.533 919.757,228.74 920.325,230.332 920.894,229.699 921.462,230.114 922.03,230.504 922.599,229.828 923.167,228.254 923.735,228.758 924.304,231.197 924.872,232.477 925.44,233.48 926.009,233.656 926.577,232.553 927.145,231.851 927.714,233.273 928.282,233.612 928.85,233.795 929.419,233.851 929.987,234.84 930.556,236.881 931.124,235.901 931.692,235.74 932.261,236.749 932.829,235.438 933.397,233.468 933.966,233.778 934.534,232.574 935.102,233.74 935.671,234.699 936.239,233.551 936.807,232.739 937.376,232.674 937.944,232.962 938.512,234.949 939.081,235.902 939.649,236.98 940.217,237.878 940.786,237.545 941.354,237.262 941.922,238.079 942.491,238.846 943.059,239.596 943.627,238.14 944.196,234.627 944.764,235.505 945.333,235.376 945.901,236.363 946.469,236.026 947.038,238.773 947.606,238.135 948.174,237.932 948.743,237.725 949.311,236.353 949.879,236.254 950.448,235.607 951.016,234.279 951.584,235.258 952.153,235.15 952.721,237.049 953.289,237.861 953.858,236.503 954.426,237.42 954.994,236.084 955.563,236.836 956.131,235.451 956.699,237.248 957.268,237.865 957.836,238.594 958.405,239.188 958.973,236.709 959.541,234.53 960.11,235.294 960.678,236.979 961.246,238.985 961.815,238.653 962.383,239.281 962.951,237.942 963.52,237.557 964.088,234.905 964.656,232.564 965.225,230.466 965.793,228.567 966.361,230.701 966.93,233.854 967.498,234.631 968.066,234.417 968.635,235.195 969.203,234.798 969.771,232.475 970.34,231.11 970.908,231.155 971.476,232.289 972.045,232.437 972.613,231.442 973.182,229.419 973.75,229.525 974.318,227.653 974.887,226.838 975.455,227.228 976.023,227.436 976.592,226.647 977.16,229.049 977.728,231.49 978.297,231.614 978.865,230.679 979.433,230.876 980.002,230.985 980.57,231.029 981.138,230.249 981.707,231.366 982.275,233.348 982.843,233.536 983.412,234.407 983.98,233.134 984.548,232.036 985.117,230.889 985.685,230.767 986.253,231.032 986.822,232.313 987.39,233.569 987.959,233.652 988.527,230.642 989.095,230.726 989.664,229.887 990.232,228.825 990.8,230.242 991.369,229.434 991.937,229.45 992.505,227.765 993.074,230.397 993.642,231.559 994.21,233.69 994.779,234.867 995.347,234.695 995.915,234.781 996.484,235.818 997.052,234.444 997.62,234.199 998.189,233.294 998.757,231.176 999.325,232.205 999.894,229.977 1000.46,230.242 1001.03,230.331 1001.6,230.5 1002.17,229.822 1002.74,229.024 1003.3,229.424 1003.87,230.678 1004.44,229.698 1005.01,228.936 1005.58,231.504 1006.15,233.669 1006.71,233.259 1007.28,235.462 1007.85,235.289 1008.42,235.134 1008.99,233.86 1009.56,232.714 1010.12,232.879 1010.69,238.158 1011.26,237.604 1011.83,237.194 1012.4,237.723 1012.97,237.692 1013.53,237.276 1014.1,236.988 1014.67,236.558 1015.24,235.258 1015.81,236.149 1016.38,236.852 1016.94,236.492 1017.51,237.106 1018.08,237.771 1018.65,236.42 1019.22,237.414 1019.79,238.032 1020.35,236.474 1020.92,237.056 1021.49,235.451 1022.06,236.016 1022.63,236.631 1023.2,235.225 1023.76,234.101 1024.33,233.99 1024.9,236.674 1025.47,236.161 1026.04,235.886 1026.61,235.554 1027.17,234.238 1027.74,231.218 1028.31,231.02 1028.88,233.12 1029.45,229.939 1030.02,229.074 1030.58,230.049 1031.15,229.047 1031.72,230.175 1032.29,230.306 1032.86,229.594 1033.43,230.598 1033.99,230.792 1034.56,230.873 1035.13,229.855 1035.7,231.924 1036.27,232.642 1036.84,231.443 1037.4,231.21 1037.97,231.276 1038.54,230.335 1039.11,229.395 1039.68,231.629 1040.25,232.424 1040.81,231.073 1041.38,231.168 1041.95,231.195 1042.52,230.25 1043.09,228.476 1043.66,229.586 1044.22,227.651 1044.79,228.069 1045.36,229.032 1045.93,230.341 1046.5,228.386 1047.07,228.847 1047.63,229.028 1048.2,227.138 1048.77,227.328 1049.34,228.878 1049.91,228.265 1050.48,226.573 1051.05,227.139 1051.61,227.659 1052.18,225.129 1052.75,226.649 1053.32,228.238 1053.89,228.83 1054.46,229.042 1055.02,229.482 1055.59,228.759 1056.16,229.024 1056.73,229.368 1057.3,230.649 1057.87,230.891 1058.43,231.026 1059,229.318 1059.57,229.606 1060.14,229.915 1060.71,229.294 1061.28,228.362 1061.84,228.892 1062.41,227.05 1062.98,226.778 1063.55,229.389 1064.12,229.81 1064.69,230.232 1065.25,233.617 1065.82,234.567 1066.39,234.599 1066.96,234.61 1067.53,235.801 1068.1,233.431 1068.66,233.481 1069.23,232.717 1069.8,231.824 1070.37,229.903 1070.94,229.087 1071.51,230.515 1072.07,232.01 1072.64,231.289 1073.21,234.399 1073.78,233.353 1074.35,234.446 1074.92,232.342 1075.48,232.308 1076.05,232.211 1076.62,233.417 1077.19,234.631 1077.76,232.452 1078.33,233.732 1078.89,233.832 1079.46,234.768 1080.03,237.753 1080.6,238.531 1081.17,238.099 1081.74,237.855 1082.3,235.452 1082.87,233.578 1083.44,232.724 1084.01,231.787 1084.58,233.06 1085.15,234.266 1085.71,235.093 1086.28,234.02 1086.85,233.904 1087.42,228.674 1087.99,226.899 1088.56,228.462 1089.12,228.792 1089.69,229.109 1090.26,230.366 1090.83,230.509 1091.4,230.756 1091.97,229.972 1092.53,231.253 1093.1,231.664 1093.67,231.078 1094.24,234.234 1094.81,233.444 1095.38,232.363 1095.94,233.692 1096.51,232.629 1097.08,234.788 1097.65,235.026 1098.22,235.027 1098.79,235.872 1099.35,236.805 1099.92,235.309 1100.49,236.236 1101.06,236.155 1101.63,235.913 1102.2,235.792 1102.76,233.759 1103.33,233.827 1103.9,232.737 1104.47,233.01 1105.04,232.151 1105.61,232.147 1106.17,231.322 1106.74,231.526 1107.31,229.76 1107.88,229.099 1108.45,229.625 1109.02,228.865 1109.58,230.45 1110.15,230.751 1110.72,230.022 1111.29,232.326 1111.86,233.324 1112.43,232.443 1112.99,235.631 1113.56,236.258 1114.13,237.174 1114.7,236.884 1115.27,236.625 1115.84,236.303 1116.4,235.087 1116.97,233.981 1117.54,231.804 1118.11,230.128 1118.68,231.417 1119.25,230.473 1119.81,231.659 1120.38,232.851 1120.95,236.041 1121.52,238.924 1122.09,240.585 1122.66,238.94 1123.23,236.311 1123.79,236.04 1124.36,235.839 1124.93,237.655 1125.5,238.566 1126.07,241.08 1126.64,241.382 1127.2,241.758 1127.77,241.068 1128.34,242.45 1128.91,242.853 1129.48,242.281 1130.05,243.666 1130.61,240.48 1131.18,239.821 1131.75,239.112 1132.32,238.595 1132.89,237.271 1133.46,236.776 1134.02,237.53 1134.59,240.146 1135.16,238.259 1135.73,239.729 1136.3,238.91 1136.87,237.239 1137.43,234.83 1138,236.673 1138.57,236.44 1139.14,239.052 1139.71,237.277 1140.28,237.77 1140.84,235.293 1141.41,237.993 1141.98,237.396 1142.55,236.834 1143.12,236.362 1143.69,233.708 1144.25,231.185 1144.82,230.992 1145.39,230.017 1145.96,230.126 1146.53,230.097 1147.1,229.123 1147.66,230.197 1148.23,229.296 1148.8,229.232 1149.37,226.257 1149.94,227.575 1150.51,226.868 1151.07,225.924 1151.64,228.452 1152.21,228.763 1152.78,227.976 1153.35,229.328 1153.92,229.385 1154.48,229.317 1155.05,228.451 1155.62,224.707 1156.19,222.991 1156.76,223.537 1157.33,225.364 1157.89,224.716 1158.46,225.325 1159.03,224.758 1159.6,225.408 1160.17,225.888 1160.74,227.259 1161.3,227.559 1161.87,225.722 1162.44,226.277 1163.01,224.821 1163.58,220.339 1164.15,223.438 1164.71,225.189 1165.28,227.779 1165.85,228.109 1166.42,228.55 1166.99,231.113 1167.56,231.378 1168.12,231.484 1168.69,229.716 1169.26,230.106 1169.83,229.288 1170.4,229.856 1170.97,230.217 1171.53,230.417 1172.1,231.745 1172.67,231.804 1173.24,227.917 1173.81,226.295 1174.38,224.885 1174.94,226.782 1175.51,229.156 1176.08,228.751 1176.65,229.36 1177.22,228.807 1177.79,228.086 1178.35,228.273 1178.92,228.506 1179.49,227.993 1180.06,227.495 1180.63,226.956 1181.2,227.584 1181.76,229.064 1182.33,231.251 1182.9,232.338 1183.47,231.524 1184.04,230.822 1184.61,232.234 1185.17,233.291 1185.74,235.366 1186.31,238.552 1186.88,235.35 1187.45,236.496 1188.02,237.428 1188.58,238.473 1189.15,236.217 1189.72,237.343 1190.29,237.135 1190.86,238.208 1191.43,238.969 1192,237.63 1192.56,238.286 1193.13,238.902 1193.7,238.335 1194.27,237.825 1194.84,238.828 1195.41,238.563 1195.97,237.032 1196.54,234.553 1197.11,235.612 1197.68,238.285 1198.25,235.909 1198.82,235.624 1199.38,236.627 1199.95,235.463 1200.52,234.504 1201.09,235.315 1201.66,233.138 1202.23,234.172 1202.79,234.056 1203.36,233.927 1203.93,232.726 1204.5,232.747 1205.07,231.783 1205.64,231.951 1206.2,231.021 1206.77,233.117 1207.34,233.859 1207.91,235.798 1208.48,235.665 1209.05,234.595 1209.61,233.29 1210.18,233.12 1210.75,233.281 1211.32,233.313 1211.89,233.437 1212.46,232.524 1213.02,232.65 1213.59,231.609 1214.16,233.807 1214.73,234.795 1215.3,233.538 1215.87,232.514 1216.43,231.632 1217,231.539 1217.57,232.647 1218.14,233.714 1218.71,235.656 1219.28,237.432 1219.84,236.051 1220.41,235.752 1220.98,230.45 1221.55,230.373 1222.12,231.486 1222.69,226.638 1223.25,227.903 1223.82,227.013 1224.39,225.359 1224.96,227.046 1225.53,227.652 1226.1,228.281 1226.66,226.731 1227.23,228.244 1227.8,230.699 1228.37,226.809 1228.94,228.27 1229.51,229.642 1230.07,229.935 1230.64,229.092 1231.21,228.399 1231.78,228.874 1232.35,228.136 1232.92,230.641 1233.48,230.853 1234.05,230.973 1234.62,233.285 1235.19,235.582 1235.76,236.263 1236.33,237.121 1236.89,237.787 1237.46,238.545 1238.03,238.233 1238.6,238.848 1239.17,238.571 1239.74,239.066 1240.3,241.609 1240.87,240.852 1241.44,240.207 1242.01,237.807 1242.58,237.622 1243.15,237.419 1243.71,235.936 1244.28,235.922 1244.85,236.762 1245.42,237.644 1245.99,238.374 1246.56,239.137 1247.12,238.708 1247.69,238.4 1248.26,235.139 1248.83,236.171 1249.4,236.75 1249.97,240.36 1250.53,239.761 1251.1,237.783 1251.67,238.357 1252.24,239.741 1252.81,237.06 1253.38,235.664 1253.94,234.126 1254.51,231.12 1255.08,229.239 1255.65,230.358 1256.22,230.437 1256.79,229.427 1257.35,230.51 1257.92,230.575 1258.49,232.598 1259.06,233.42 1259.63,232.223 1260.2,231.13 1260.76,231.101 1261.33,231.05 1261.9,230.981 1262.47,231.148 1263.04,231.147 1263.61,231.457 1264.18,230.479 1264.74,232.539 1265.31,231.157 1265.88,229.924 1266.45,233.054 1267.02,231.591 1267.59,232.294 1268.15,230.11 1268.72,231.447 1269.29,231.769 1269.86,229.945 1270.43,229.976 1271,232.171 1271.56,233.405 1272.13,234.2 1272.7,232.807 1273.27,231.479 1273.84,232.684 1274.41,233.706 1274.97,234.62 1275.54,235.505 1276.11,235.211 1276.68,234.814 1277.25,234.875 1277.82,235.722 1278.38,235.578 1278.95,235.586 1279.52,235.429 1280.09,234.973 1280.66,235.742 1281.23,237.549 1281.79,237.096 1282.36,234.685 1282.93,234.402 1283.5,235.353 1284.07,236.079 1284.64,233.807 1285.2,232.594 1285.77,231.511 1286.34,231.424 1286.91,230.499 1287.48,231.496 1288.05,231.522 1288.61,229.335 1289.18,230.26 1289.75,230.492 1290.32,229.665 1290.89,230.775 1291.46,229.017 1292.02,229.146 1292.59,229.229 1293.16,230.349 1293.73,232.277 1294.3,231.103 1294.87,232.171 1295.43,232.088 1296,231.991 1296.57,234.038 1297.14,235.856 1297.71,236.658 1298.28,238.329 1298.84,237.696 1299.41,238.482 1299.98,237.872 1300.55,236.3 1301.12,234.887 1301.69,234.364 1302.25,232.192 1302.82,231.031 1303.39,232.063 1303.96,228.171 1304.53,229.36 1305.1,230.392 1305.66,231.465 1306.23,230.64 1306.8,232.695 1307.37,233.699 1307.94,233.424 1308.51,234.205 1309.07,231.91 1309.64,232.122 1310.21,228.944 1310.78,228.108 1311.35,226.246 1311.92,223.741 1312.48,222.214 1313.05,219.895 1313.62,221.815 1314.19,221.415 1314.76,223.444 1315.33,224.11 1315.89,222.769 1316.46,223.602 1317.03,223.453 1317.6,223.171 1318.17,225.035 1318.74,225.776 1319.3,225.374 1319.87,225.886 1320.44,225.547 1321.01,227.157 1321.58,227.554 1322.15,227.786 1322.71,228.288 1323.28,229.744 1323.85,230.189 1324.42,230.47 1324.99,229.944 1325.56,231.085 1326.12,231.469 1326.69,229.552 1327.26,229.826 1327.83,228.417 1328.4,228.902 1328.97,230.134 1329.53,230.69 1330.1,231.068 1330.67,231.187 1331.24,232.435 1331.81,231.378 1332.38,232.675 1332.94,232.824 1333.51,231.937 1334.08,232.272 1334.65,234.472 1335.22,234.209 1335.79,236.313 1336.36,237.421 1336.92,237.121 1337.49,236.919 1338.06,236.811 1338.63,236.629 1339.2,237.599 1339.77,236.282 1340.33,234 1340.9,234.183 1341.47,232.068 1342.04,232.303 1342.61,231.168 1343.18,231.618 1343.74,232.82 1344.31,233.848 1344.88,233.984 1345.45,233.97 1346.02,234.216 1346.59,234.292 1347.15,235.087 1347.72,237.924 1348.29,234.355 1348.86,237.556 1349.43,242.655 1350,243.033 1350.56,242.307 1351.13,242.48 1351.7,241.697 1352.27,241.245 1352.84,238.603 1353.41,239.261 1353.97,237.804 1354.54,236.348 1355.11,236.021 1355.68,234.769 1356.25,232.529 1356.82,233.414 1357.38,233.378 1357.95,231.451 1358.52,228.601 1359.09,228.78 1359.66,230.197 1360.23,230.334 1360.79,232.376 1361.36,230.291 1361.93,230.651 1362.5,228.599 1363.07,228.731 1363.64,229.002 1364.2,229.34 1364.77,227.727 1365.34,230.998 1365.91,230.921 1366.48,230.987 1367.05,232.056 1367.61,228.974 1368.18,229.199 1368.75,230.902 1369.32,232.086 1369.89,233.432 1370.46,234.553 1371.02,235.561 1371.59,237.39 1372.16,238.071 1372.73,235.57 1373.3,234.318 1373.87,234.291 1374.43,233.441 1375,235.266 1375.57,234.801 1376.14,235.677 1376.71,237.378 1377.28,236.996 1377.84,234.7 1378.41,232.416 1378.98,231.449 1379.55,232.886 1380.12,231.817 1380.69,230.958 1381.25,234.027 1381.82,234.088 1382.39,233.812 1382.96,231.526 1383.53,232.559 1384.1,233.442 1384.66,231.271 1385.23,233.42 1385.8,232.373 1386.37,231.633 1386.94,230.837 1387.51,230.916 1388.07,232.029 1388.64,234.949 1389.21,233.661 1389.78,233.486 1390.35,233.586 1390.92,231.464 1391.48,230.53 1392.05,233.76 1392.62,233.458 1393.19,232.487 1393.76,233.18 1394.33,231.081 1394.89,233.121 1395.46,233.069 1396.03,232.831 1396.6,233.827 1397.17,231.883 1397.74,231.827 1398.3,232.002 1398.87,228.922 1399.44,229.3 1400.01,231.619 1400.58,230.721 1401.15,229.818 1401.71,230.05 1402.28,231.036 1402.85,230.074 1403.42,230.28 1403.99,231.128 1404.56,229.98 1405.13,229.07 1405.69,229.191 1406.26,227.952 1406.83,228.012 1407.4,227.261 1407.97,226.84 1408.54,228.27 1409.1,227.4 1409.67,228.981 1410.24,229.369 1410.81,230.801 1411.38,232.13 1411.95,232.216 1412.51,232.185 1413.08,231.36 1413.65,231.613 1414.22,232.9 1414.79,229.96 1415.36,228.936 1415.92,229.275 1416.49,229.538 1417.06,229.913 1417.63,228.283 1418.2,229.731 1418.77,233.252 1419.33,235.329 1419.9,235.269 1420.47,238.238 1421.04,237.918 1421.61,235.374 1422.18,234.518 1422.74,238.443 1423.31,239.073 1423.88,239.814 1424.45,239.24 1425.02,237.697 1425.59,238.405 1426.15,238.014 1426.72,236.678 1427.29,235.207 1427.86,235.19 1428.43,235.001 1429,234.727 1429.56,233.743 1430.13,234.967 1430.7,231.812 1431.27,230.721 1431.84,229.872 1432.41,231.15 1432.97,232.431 1433.54,232.372 1434.11,232.256 1434.68,232.188 1435.25,233.332 1435.82,232.203 1436.38,232.409 1436.95,234.518 1437.52,235.501 1438.09,235.447 1438.66,235.097 1439.23,234.745 1439.79,234.712 1440.36,235.761 1440.93,235.564 1441.5,234.236 1442.07,235.304 1442.64,235.026 1443.2,233.715 1443.77,235.579 1444.34,236.398 1444.91,237.05 1445.48,236.504 1446.05,233.913 1446.61,234.901 1447.18,235.779 1447.75,234.65 1448.32,231.441 1448.89,233.463 1449.46,233.279 1450.02,232.228 1450.59,229.14 1451.16,230.543 1451.73,230.451 1452.3,228.596 1452.87,228.931 1453.43,228.263 1454,228.588 1454.57,230.908 1455.14,232.246 1455.71,229.149 1456.28,228.344 1456.84,226.604 1457.41,232.285 1457.98,230.278 1458.55,228.266 1459.12,230.703 1459.69,232.145 1460.25,232.13 1460.82,234.134 1461.39,235.061 1461.96,234.835 1462.53,232.558 1463.1,232.724 1463.66,234.747 1464.23,233.594 1464.8,232.608 1465.37,232.783 1465.94,232.88 1466.51,232.769 1467.07,233.555 1467.64,235.31 1468.21,233.192 1468.78,232.192 1469.35,231.154 1469.92,232.461 1470.48,231.453 1471.05,231.587 1471.62,233.859 1472.19,232.876 1472.76,233.072 1473.33,234.167 1473.89,234.024 1474.46,232.879 1475.03,234.767 1475.6,233.728 1476.17,233.872 1476.74,231.802 1477.31,229.844 1477.87,228.996 1478.44,231.115 1479.01,231.324 1479.58,230.081 1480.15,230.268 1480.72,233.339 1481.28,233.401 1481.85,234.279 1482.42,233.995 1482.99,234.98 1483.56,234.769 1484.13,234.551 1484.69,234.364 1485.26,235.204 1485.83,236.055 1486.4,236.841 1486.97,238.52 1487.54,236.981 1488.1,236.686 1488.67,235.223 1489.24,234.065 1489.81,231.73 1490.38,232.789 1490.95,232.623 1491.51,233.676 1492.08,235.348 1492.65,235.091 1493.22,236.897 1493.79,234.55 1494.36,236.483 1494.92,234.965 1495.49,234.602 1496.06,235.342 1496.63,237.071 1497.2,235.557 1497.77,235.011 1498.33,233.848 1498.9,232.596 1499.47,231.476 1500.04,232.482 1500.61,231.419 1501.18,228.283 1501.74,229.669 1502.31,230.719 1502.88,229.677 1503.45,229.591 1504.02,229.782 1504.59,229.008 1505.15,230.095 1505.72,229.396 1506.29,227.578 1506.86,228.111 1507.43,228.321 1508,227.526 1508.56,228.782 1509.13,231.082 1509.7,232.203 1510.27,233.279 1510.84,234.058 1511.41,234.161 1511.97,233.953 1512.54,233.825 1513.11,234.693 1513.68,233.664 1514.25,233.683 1514.82,233.45 1515.38,233.494 1515.95,232.163 1516.52,232.258 1517.09,232.406 1517.66,233.275 1518.23,233.369 1518.79,233.436 1519.36,234.31 1519.93,235.26 1520.5,234.121 1521.07,235.291 1521.64,232.029 1522.2,231.06 1522.77,234.216 1523.34,235.314 1523.91,234.893 1524.48,234.886 1525.05,235.54 1525.61,235.397 1526.18,235.13 1526.75,235.888 1527.32,235.793 1527.89,233.449 1528.46,236.211 1529.02,234.896 1529.59,235.676 1530.16,235.293 1530.73,235.922 1531.3,236.577 1531.87,234.136 1532.43,234.844 1533,233.708 1533.57,233.691 1534.14,232.34 1534.71,232.269 1535.28,232.067 1535.84,231.173 1536.41,231.26 1536.98,229.955 1537.55,229.921 1538.12,228.82 1538.69,226.826 1539.25,227.267 1539.82,224.559 1540.39,224.096 1540.96,225.874 1541.53,226.199 1542.1,225.557 1542.66,228.014 1543.23,229.405 1543.8,228.455 1544.37,228.835 1544.94,229.347 1545.51,226.466 1546.08,225.952 1546.64,226.44 1547.21,226.152 1547.78,226.703 1548.35,228.126 1548.92,227.29 1549.49,228.702 1550.05,231.176 1550.62,231.292 1551.19,232.364 1551.76,233.623 1552.33,233.769 1552.9,231.893 1553.46,233.074 1554.03,233.989 1554.6,233.035 1555.17,230.132 1555.74,229.223 1556.31,228.346 1556.87,227.774 1557.44,227.308 1558.01,227.79 1558.58,227.192 1559.15,227.52 1559.72,228.149 1560.28,230.75 1560.85,231.09 1561.42,231.119 1561.99,233.512 1562.56,233.636 1563.13,233.558 1563.69,231.563 1564.26,233.8 1564.83,234.684 1565.4,235.424 1565.97,237.473 1566.54,237.415 1567.1,237.115 1567.67,236.779 1568.24,236.595 1568.81,237.17 1569.38,236.778 1569.95,235.598 1570.51,238.554 1571.08,239.313 1571.65,238.795 1572.22,237.375 1572.79,235.846 1573.36,235.642 1573.92,236.439 1574.49,236.14 1575.06,233.993 1575.63,235.099 1576.2,235.864 1576.77,234.529 1577.33,232.507 1577.9,231.41 1578.47,232.425 1579.04,233.472 1579.61,231.574 1580.18,232.587 1580.74,233.39 1581.31,234.397 1581.88,234.35 1582.45,233.012 1583.02,233.022 1583.59,234.104 1584.15,233.067 1584.72,233.015 1585.29,233.917 1585.86,233.128 1586.43,233.251 1587,233.101 1587.56,230.985 1588.13,231.29 1588.7,232.26 1589.27,232.114 1589.84,232.155 1590.41,232.283 1590.97,233.356 1591.54,235.19 1592.11,235.126 1592.68,235.02 1593.25,233.721 1593.82,233.792 1594.38,232.767 1594.95,232.889 1595.52,232.933 1596.09,234.044 1596.66,232.68 1597.23,232.455 1597.79,233.395 1598.36,235.388 1598.93,237.262 1599.5,236.987 1600.07,236.622 1600.64,235.148 1601.2,230.762 1601.77,231.776 1602.34,231.611 1602.91,230.538 1603.48,231.649 1604.05,230.626 1604.61,230.432 1605.18,229.378 1605.75,230.58 1606.32,230.621 1606.89,230.752 1607.46,230.865 1608.02,229.905 1608.59,231.275 1609.16,231.119 1609.73,231.219 1610.3,231.205 1610.87,231.352 1611.43,232.186 1612,232.436 1612.57,232.406 1613.14,231.668 1613.71,234.719 1614.28,234.611 1614.84,234.491 1615.41,234.162 1615.98,235.091 1616.55,233.077 1617.12,234.009 1617.69,232.848 1618.26,234.907 1618.82,237.675 1619.39,237.481 1619.96,238.144 1620.53,237.786 1621.1,236.407 1621.67,236.008 1622.23,234.529 1622.8,236.525 1623.37,237.227 1623.94,235.766 1624.51,235.458 1625.08,235.284 1625.64,236.116 1626.21,235.762 1626.78,235.452 1627.35,235.19 1627.92,233.918 1628.49,233.552 1629.05,230.212 1629.62,231.227 1630.19,232.239 1630.76,231.301 1631.33,231.16 1631.9,232.13 1632.46,232.942 1633.03,229.898 1633.6,229.885 1634.17,229.873 1634.74,231.035 1635.31,233.129 1635.87,230.925 1636.44,232.905 1637.01,232.837 1637.58,231.774 1638.15,230.711 1638.72,228.716 1639.28,230.074 1639.85,230.04 1640.42,231.106 1640.99,232.069 1641.56,232.035 1642.13,232.103 1642.69,231.128 1643.26,228.999 1643.83,228.421 1644.4,228.692 1644.97,230.988 1645.54,233.247 1646.1,234 1646.67,232.892 1647.24,233.919 1647.81,232.717 1648.38,232.759 1648.95,231.657 1649.51,230.587 1650.08,229.639 1650.65,233.897 1651.22,234.938 1651.79,234.822 1652.36,234.673 1652.92,233.43 1653.49,232.272 1654.06,234.466 1654.63,233.991 1655.2,232.757 1655.77,234.663 1656.33,233.134 1656.9,234.919 1657.47,233.607 1658.04,233.545 1658.61,233.173 1659.18,234.017 1659.74,232.864 1660.31,234.94 1660.88,232.774 1661.45,232.602 1662.02,230.423 1662.59,230.729 1663.15,229.735 1663.72,225.939 1664.29,226.322 1664.86,226.169 1665.43,227.586 1666,229.971 1666.56,230.011 1667.13,229.242 1667.7,229.29 1668.27,229.438 1668.84,227.358 1669.41,227.857 1669.97,225.026 1670.54,224.567 1671.11,223.076 1671.68,224.931 1672.25,225.53 1672.82,225.273 1673.38,225.794 1673.95,225.346 1674.52,225.836 1675.09,229.367 1675.66,230.591 1676.23,231.789 1676.79,233.986 1677.36,233.123 1677.93,233.226 1678.5,233.219 1679.07,234.315 1679.64,235.451 1680.2,237.17 1680.77,236.05 1681.34,237.951 1681.91,236.554 1682.48,238.346 1683.05,238.839 1683.61,238.645 1684.18,236.123 1684.75,235.799 1685.32,237.64 1685.89,237.18 1686.46,235.66 1687.02,233.437 1687.59,233.268 1688.16,234.408 1688.73,233.059 1689.3,232.862 1689.87,232.644 1690.44,232.395 1691,232.547 1691.57,232.718 1692.14,233.514 1692.71,231.364 1693.28,232.579 1693.85,231.626 1694.41,231.583 1694.98,230.565 1695.55,229.666 1696.12,227.813 1696.69,228.168 1697.26,229.579 1697.82,230.852 1698.39,230.192 1698.96,231.438 1699.53,231.683 1700.1,231.782 1700.67,231.959 1701.23,232.896 1701.8,234.035 1702.37,234.154 1702.94,232.154 1703.51,233.076 1704.08,232.05 1704.64,231.312 1705.21,232.387 1705.78,232.342 1706.35,232.23 1706.92,231.328 1707.49,232.213 1708.05,234.078 1708.62,235.236 1709.19,234.154 1709.76,234.006 1710.33,234.885 1710.9,235.861 1711.46,231.505 1712.03,230.587 1712.6,231.004 1713.17,232.373 1713.74,232.41 1714.31,232.479 1714.87,233.531 1715.44,233.366 1716.01,233.339 1716.58,234.206 1717.15,232.981 1717.72,232.864 1718.28,232.763 1718.85,230.702 1719.42,229.787 1719.99,228.909 1720.56,230.261 1721.13,230.371 1721.69,234.573 1722.26,234.588 1722.83,237.777 1723.4,235.209 1723.97,235.999 1724.54,236.797 1725.1,236.673 1725.67,235.351 1726.24,236.341 1726.81,236.042 1727.38,234.984 1727.95,234.649 1728.51,233.444 1729.08,233.278 1729.65,234.108 1730.22,232.97 1730.79,235.137 1731.36,233.855 1731.92,235.051 1732.49,235.94 1733.06,235.692 1733.63,235.24 1734.2,234.212 1734.77,231.885 1735.33,230.747 1735.9,230.857 1736.47,230.999 1737.04,231.13 1737.61,232.228 1738.18,233.203 1738.74,232.974 1739.31,231.87 1739.88,230.976 1740.45,231.102 1741.02,231.275 1741.59,231.211 1742.15,232.331 1742.72,233.413 1743.29,233.438 1743.86,232.286 1744.43,233.411 1745,233.635 1745.56,232.459 1746.13,231.223 1746.7,230.256 1747.27,231.233 1747.84,230.276 1748.41,231.44 1748.97,233.644 1749.54,236.677 1750.11,236.616 1750.68,237.167 1751.25,235.67 1751.82,232.135 1752.38,233.156 1752.95,232.001 1753.52,230.894 1754.09,231.872 1754.66,231.905 1755.23,235.924 1755.79,236.872 1756.36,235.329 1756.93,235.082 1757.5,235.014 1758.07,234.864 1758.64,234.523 1759.21,235.065 1759.77,234.788 1760.34,235.66 1760.91,233.245 1761.48,231.454 1762.05,232.469 1762.62,232.271 1763.18,231.917 1763.75,232.802 1764.32,232.71 1764.89,230.432 1765.46,229.825 1766.03,225.919 1766.59,225.161 1767.16,225.722 1767.73,227.23 1768.3,227.804 1768.87,228.241 1769.44,228.698 1770,228.98 1770.57,229.103 1771.14,228.134 1771.71,226.313 1772.28,229.842 1772.85,230.104 1773.41,229.092 1773.98,231.501 1774.55,231.798 1775.12,230.837 1775.69,229.801 1776.26,229.979 1776.82,231.428 1777.39,232.642 1777.96,232.489 1778.53,231.345 1779.1,230.468 1779.67,230.591 1780.23,232.844 1780.8,235.902 1781.37,234.513 1781.94,234.292 1782.51,235.036 1783.08,234.977 1783.64,233.871 1784.21,231.635 1784.78,231.844 1785.35,230.98 1785.92,229.151 1786.49,228.461 1787.05,229.855 1787.62,228.961 1788.19,229.41 1788.76,229.647 1789.33,229.881 1789.9,231.056 1790.46,230.091 1791.03,232.424 1791.6,232.368 1792.17,233.41 1792.74,233.231 1793.31,234.308 1793.87,233.191 1794.44,231.229 1795.01,233.494 1795.58,232.64 1796.15,232.813 1796.72,232.037 1797.28,232.1 1797.85,231.197 1798.42,232.328 1798.99,232.436 1799.56,233.677 1800.13,234.685 1800.69,233.596 1801.26,234.652 1801.83,232.349 1802.4,231.437 1802.97,232.577 1803.54,233.965 1804.1,235.062 1804.67,235.217 1805.24,233.825 1805.81,234.907 1806.38,234.058 1806.95,230.88 1807.51,232.917 1808.08,233.986 1808.65,234.675 1809.22,234.601 1809.79,233.37 1810.36,235.254 1810.92,233.853 1811.49,233.641 1812.06,234.583 1812.63,231.476 1813.2,232.787 1813.77,234.882 1814.33,232.542 1814.9,230.338 1815.47,231.598 1816.04,234.006 1816.61,232.768 1817.18,234.919 1817.74,234.72 1818.31,230.623 1818.88,228.669 1819.45,230.084 1820.02,228.538 1820.59,229.85 1821.15,232.127 1821.72,232.276 1822.29,230.305 1822.86,233.634 1823.43,236.756 1824,235.492 1824.56,235.277 1825.13,233.095 1825.7,229.121 1826.27,228.326 1826.84,228.818 1827.41,228.336 1827.97,229.873 1828.54,230.02 1829.11,229.338 1829.68,230.47 1830.25,234.781 1830.82,233.577 1831.39,229.521 1831.95,233.848 1832.52,232.987 1833.09,230.128 1833.66,230.193 1834.23,231.365 1834.8,232.614 1835.36,231.543 1835.93,230.698 1836.5,232.032 1837.07,234.145 1837.64,231.872 1838.21,230.912 1838.77,231.142 1839.34,233.169 1839.91,235.277 1840.48,237.3 1841.05,235.871 1841.62,236.792 1842.18,236.678 1842.75,237.281 1843.32,237.921 1843.89,236.51 1844.46,235.316 1845.03,238.084 1845.59,237.643 1846.16,238.249 1846.73,237.932 1847.3,237.61 1847.87,237.324 1848.44,235.977 1849,236.847 1849.57,238.604 1850.14,238.486 1850.71,237.059 1851.28,237.687 1851.85,237.266 1852.41,236.784 1852.98,237.635 1853.55,236.162 1854.12,234.701 1854.69,235.669 1855.26,235.601 1855.82,234.993 1856.39,233.747 1856.96,233.466 1857.53,233.585 1858.1,233.194 1858.67,232.023 1859.23,230.886 1859.8,229.868 1860.37,230.072 1860.94,230.341 1861.51,232.417 1862.08,232.468 1862.64,231.352 1863.21,231.468 1863.78,231.606 1864.35,230.88 1864.92,232.859 1865.49,232.71 1866.05,234.715 1866.62,235.593 1867.19,233.415 1867.76,231.583 1868.33,230.585 1868.9,228.618 1869.46,227.827 1870.03,228.043 1870.6,228.291 1871.17,227.544 1871.74,228.778 1872.31,231.049 1872.87,231.372 1873.44,231.412 1874.01,233.483 1874.58,233.441 1875.15,232.344 1875.72,233.227 1876.28,231.002 1876.85,231.221 1877.42,231.377 1877.99,231.299 1878.56,230.371 1879.13,230.69 1879.69,229.711 1880.26,228.694 1880.83,228.974 1881.4,229.462 1881.97,231.649 1882.54,230.64 1883.1,230.686 1883.67,231.962 1884.24,233.026 1884.81,231.044 1885.38,231.172 1885.95,231.188 1886.51,231.505 1887.08,231.491 1887.65,231.612 1888.22,232.799 1888.79,233.844 1889.36,233.881 1889.92,232.635 1890.49,231.464 1891.06,230.473 1891.63,229.581 1892.2,229.773 1892.77,227.996 1893.33,227.362 1893.9,228.661 1894.47,230.078 1895.04,233.464 1895.61,233.375 1896.18,232.126 1896.74,234.298 1897.31,233.429 1897.88,231.348 1898.45,228.324 1899.02,227.783 1899.59,229.2 1900.16,228.507 1900.72,230.849 1901.29,233.334 1901.86,236.43 1902.43,237.385 1903,238.144 1903.57,235.74 1904.13,235.659 1904.7,235.372 1905.27,235.448 1905.84,236.186 1906.41,236.932 1906.98,236.461 1907.54,235.113 1908.11,233.008 1908.68,234.038 1909.25,231.941 1909.82,233.096 1910.39,232.263 1910.95,232.426 1911.52,233.397 1912.09,232.405 1912.66,231.595 1913.23,230.711 1913.8,230.959 1914.36,230.88 1914.93,233.21 1915.5,235.291 1916.07,237.14 1916.64,235.698 1917.21,233.532 1917.77,230.391 1918.34,230.755 1918.91,232.095 1919.48,234.265 1920.05,234.438 1920.62,231.446 1921.18,233.715 1921.75,234.513 1922.32,232.281 1922.89,233.349 1923.46,233.142 1924.03,232.872 1924.59,230.91 1925.16,232.191 1925.73,232.165 1926.3,232.274 1926.87,230.32 1927.44,230.519 1928,232.634 1928.57,232.625 1929.14,232.763 1929.71,232.447 1930.28,235.413 1930.85,233.023 1931.41,231.982 1931.98,229.793 1932.55,233.069 1933.12,234.134 1933.69,232.82 1934.26,233.828 1934.82,232.691 1935.39,230.38 1935.96,231.585 1936.53,233.809 1937.1,230.982 1937.67,231.145 1938.23,232.519 1938.8,231.542 1939.37,231.595 1939.94,228.362 1940.51,229.667 1941.08,232.047 1941.64,232.966 1942.21,231.805 1942.78,230.796 1943.35,230.855 1943.92,231.975 1944.49,234.275 1945.05,235.252 1945.62,234.25 1946.19,235.367 1946.76,237.137 1947.33,237.633 1947.9,236.284 1948.46,237.228 1949.03,234.627 1949.6,231.416 1950.17,231.611 1950.74,231.775 1951.31,231.79 1951.87,231.408 1952.44,232.61 1953.01,232.506 1953.58,232.447 1954.15,231.432 1954.72,230.428 1955.28,230.473 1955.85,231.624 1956.42,230.549 1956.99,233.854 1957.56,232.65 1958.13,231.612 1958.69,231.604 1959.26,233.665 1959.83,235.694 1960.4,236.415 1960.97,237.264 1961.54,236.08 1962.1,236.94 1962.67,237.699 1963.24,238.161 1963.81,236.53 1964.38,236.336 1964.95,232.886 1965.51,231.738 1966.08,233.801 1966.65,234.762 1967.22,231.575 1967.79,231.624 1968.36,230.489 1968.92,229.531 1969.49,230.739 1970.06,228.801 1970.63,228.689 1971.2,230.027 1971.77,230.019 1972.34,229.281 1972.9,229.661 1973.47,229.838 1974.04,229.987 1974.61,229.261 1975.18,227.448 1975.75,229.689 1976.31,229.962 1976.88,228.987 1977.45,229.382 1978.02,229.649 1978.59,232.025 1979.16,233.076 1979.72,231.91 1980.29,232.083 1980.86,232.061 1981.43,231.421 1982,231.492 1982.57,232.857 1983.13,231.894 1983.7,230.897 1984.27,230.991 1984.84,230.112 1985.41,228.156 1985.98,231.556 1986.54,232.472 1987.11,233.585 1987.68,234.593 1988.25,234.593 1988.82,233.207 1989.39,233.327 1989.95,234.369 1990.52,233.239 1991.09,233.24 1991.66,236.378 1992.23,236.074 1992.8,235.055 1993.36,236.8 1993.93,238.401 1994.5,234.68 1995.07,234.586 1995.64,235.612 1996.21,237.39 1996.77,237.161 1997.34,234.657 1997.91,236.495 1998.48,236.207 1999.05,235.866 1999.62,234.367 2000.18,237.005 2000.75,238.661 2001.32,237.991 2001.89,236.689 2002.46,237.402 2003.03,234.829 2003.59,233.692 2004.16,233.623 2004.73,233.289 2005.3,234.048 2005.87,234.007 2006.44,234.838 2007,234.618 2007.57,235.363 2008.14,234.945 2008.71,233.654 2009.28,235.506 2009.85,237.275 2010.41,235.986 2010.98,235.74 2011.55,233.401 2012.12,233.078 2012.69,231.838 2013.26,229.657 2013.82,231.947 2014.39,231.836 2014.96,231.692 2015.53,231.465 2016.1,232.538 2016.67,230.155 2017.23,228.145 2017.8,229.343 2018.37,230.543 2018.94,229.773 2019.51,228.873 2020.08,230.143 2020.64,232.494 2021.21,231.412 2021.78,230.346 2022.35,230.317 2022.92,229.438 2023.49,228.651 2024.05,229.225 2024.62,228.369 2025.19,227.789 2025.76,229.082 2026.33,230.489 2026.9,231.981 2027.46,232.995 2028.03,231.89 2028.6,230.68 2029.17,229.772 2029.74,232.148 2030.31,232.179 2030.87,231.202 2031.44,232.082 2032.01,233.212 2032.58,234.263 2033.15,236.231 2033.72,233.894 2034.28,232.888 2034.85,233.594 2035.42,232.232 2035.99,232.04 2036.56,232.04 2037.13,234.388 2037.69,234.254 2038.26,234.13 2038.83,237.253 2039.4,235.836 2039.97,235.557 2040.54,235.307 2041.11,236.036 2041.67,236.676 2042.24,236.311 2042.81,236.076 2043.38,236.897 2043.95,237.783 2044.52,238.35 2045.08,236.942 2045.65,235.569 2046.22,236.187 2046.79,235.775 2047.36,237.44 2047.93,235.116 2048.49,235.912 2049.06,234.906 2049.63,232.634 2050.2,232.354 2050.77,231.224 2051.34,230.294 2051.9,230.276 2052.47,229.561 2053.04,228.597 2053.61,228.981 2054.18,232.104 2054.75,232.038 2055.31,231.729 2055.88,231.664 2056.45,232.434 2057.02,232.314 2057.59,233.196 2058.16,232.919 2058.72,234.04 2059.29,235.999 2059.86,237.806 2060.43,237.25 2061,236.791 2061.57,235.282 2062.13,233.927 2062.7,233.832 2063.27,232.514 2063.84,234.589 2064.41,233.166 2064.98,232.79 2065.54,233.946 2066.11,231.796 2066.68,232.662 2067.25,233.728 2067.82,233.687 2068.39,231.398 2068.95,230.242 2069.52,229.321 2070.09,229.177 2070.66,227.395 2071.23,227.623 2071.8,228.729 2072.36,226.783 2072.93,225.96 2073.5,226.256 2074.07,227.637 2074.64,228.807 2075.21,227.732 2075.77,228.183 2076.34,227.51 2076.91,226.003 2077.48,225.423 2078.05,225.982 2078.62,228.266 2079.18,228.653 2079.75,230.092 2080.32,231.389 2080.89,230.377 2081.46,230.615 2082.03,230.53 2082.59,231.647 2083.16,232.841 2083.73,233.881 2084.3,232.863 2084.87,233.802 2085.44,232.871 2086,231.737 2086.57,229.749 2087.14,229.168 2087.71,230.568 2088.28,229.875 2088.85,230.094 2089.41,230.207 2089.98,231.477 2090.55,232.58 2091.12,233.556 2091.69,233.557 2092.26,230.124 2092.82,229.331 2093.39,228.503 2093.96,229.914 2094.53,231.298 2095.1,232.583 2095.67,232.947 2096.23,231.851 2096.8,232.827 2097.37,231.754 2097.94,232.793 2098.51,232.763 2099.08,231.612 2099.64,232.686 2100.21,231.656 2100.78,232.771 2101.35,233.842 2101.92,232.529 2102.49,232.707 2103.05,233.639 2103.62,229.548 2104.19,231.756 2104.76,235.939 2105.33,236.823 2105.9,235.479 2106.46,233.232 2107.03,232.996 2107.6,231.967 2108.17,233.957 2108.74,235.848 2109.31,234.627 2109.87,233.63 2110.44,235.757 2111.01,235.857 2111.58,236.632 2112.15,235.48 2112.72,234.26 2113.29,235.317 2113.85,230.873 2114.42,229.808 2114.99,228.948 2115.56,231.575 2116.13,229.591 2116.7,230.058 2117.26,231.427 2117.83,231.518 2118.4,232.578 2118.97,232.516 2119.54,234.765 2120.11,233.553 2120.67,236.473 2121.24,236.293 2121.81,238.182 2122.38,235.624 2122.95,231.447 2123.52,233.347 2124.08,234.273 2124.65,234.941 2125.22,235.031 2125.79,235.021 2126.36,235.669 2126.93,235.438 2127.49,234.015 2128.06,233.053 2128.63,231.9 2129.2,231.793 2129.77,231.889 2130.34,232.9 2130.9,232.889 2131.47,233.942 2132.04,236.025 2132.61,236.593 2133.18,235.463 2133.75,236.142 2134.31,235.907 2134.88,236.483 2135.45,234.898 2136.02,234.749 2136.59,234.542 2137.16,235.362 2137.72,233.941 2138.29,232.679 2138.86,231.597 2139.43,231.503 2140,229.239 2140.57,228.532 2141.13,227.897 2141.7,228.214 2142.27,227.501 2142.84,226.878 2143.41,226.097 2143.98,226.45 2144.54,226.81 2145.11,227.14 2145.68,227.648 2146.25,227.897 2146.82,228.345 2147.39,229.503 2147.95,229.619 2148.52,229.681 2149.09,228.745 2149.66,227.087 2150.23,225.36 2150.8,225.914 2151.36,228.464 2151.93,226.63 2152.5,227.292 2153.07,226.739 2153.64,227.276 2154.21,226.95 2154.77,227.488 2155.34,228.866 2155.91,229.178 2156.48,228.523 2157.05,227.873 2157.62,228.268 2158.18,225.741 2158.75,228.345 2159.32,229.882 2159.89,230.277 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.041 ± 0.022\n  with uncertainty of ± 0.002033708321916203\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01862 ± (0.00242106, 0.00239235) (MC)\n  95% confidence interval: [-4.02345, -4.01364] (MC)\n  linear error propagation: -4.01866 ± 0.00250507\n  |δ_y| = |0.00180892| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0186205101508286, val_l = 0.004834332450943002, val_u = 0.004981704894123418)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip000\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip001\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip000)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip002\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.12 2211.02,1142.12 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,973.075 2211.02,973.075 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,804.032 2211.02,804.032 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,634.989 2211.02,634.989 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,465.945 2211.02,465.945 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,296.902 2211.02,296.902 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.12 365.751,1142.12 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,973.075 365.751,973.075 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,804.032 365.751,804.032 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,634.989 365.751,634.989 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,465.945 365.751,465.945 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,296.902 365.751,296.902 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M298.909 1127.92 Q295.298 1127.92 293.469 1131.48 Q291.664 1135.02 291.664 1142.15 Q291.664 1149.26 293.469 1152.82 Q295.298 1156.37 298.909 1156.37 Q302.543 1156.37 304.349 1152.82 Q306.177 1149.26 306.177 1142.15 Q306.177 1135.02 304.349 1131.48 Q302.543 1127.92 298.909 1127.92 M298.909 1124.21 Q304.719 1124.21 307.775 1128.82 Q310.853 1133.4 310.853 1142.15 Q310.853 1150.88 307.775 1155.49 Q304.719 1160.07 298.909 1160.07 Q293.099 1160.07 290.02 1155.49 Q286.964 1150.88 286.964 1142.15 Q286.964 1133.4 290.02 1128.82 Q293.099 1124.21 298.909 1124.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M259.557 986.42 L267.196 986.42 L267.196 960.054 L258.886 961.721 L258.886 957.462 L267.15 955.795 L271.826 955.795 L271.826 986.42 L279.465 986.42 L279.465 990.355 L259.557 990.355 L259.557 986.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 958.874 Q295.298 958.874 293.469 962.439 Q291.664 965.98 291.664 973.11 Q291.664 980.216 293.469 983.781 Q295.298 987.323 298.909 987.323 Q302.543 987.323 304.349 983.781 Q306.177 980.216 306.177 973.11 Q306.177 965.98 304.349 962.439 Q302.543 958.874 298.909 958.874 M298.909 955.17 Q304.719 955.17 307.775 959.777 Q310.853 964.36 310.853 973.11 Q310.853 981.837 307.775 986.443 Q304.719 991.026 298.909 991.026 Q293.099 991.026 290.02 986.443 Q286.964 981.837 286.964 973.11 Q286.964 964.36 290.02 959.777 Q293.099 955.17 298.909 955.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M262.775 817.377 L279.094 817.377 L279.094 821.312 L257.15 821.312 L257.15 817.377 Q259.812 814.622 264.395 809.993 Q269.002 805.34 270.182 803.997 Q272.428 801.474 273.307 799.738 Q274.21 797.979 274.21 796.289 Q274.21 793.534 272.266 791.798 Q270.344 790.062 267.242 790.062 Q265.043 790.062 262.59 790.826 Q260.159 791.59 257.381 793.141 L257.381 788.419 Q260.205 787.284 262.659 786.706 Q265.113 786.127 267.15 786.127 Q272.52 786.127 275.715 788.812 Q278.909 791.497 278.909 795.988 Q278.909 798.118 278.099 800.039 Q277.312 801.937 275.205 804.53 Q274.627 805.201 271.525 808.418 Q268.423 811.613 262.775 817.377 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 789.831 Q295.298 789.831 293.469 793.395 Q291.664 796.937 291.664 804.067 Q291.664 811.173 293.469 814.738 Q295.298 818.28 298.909 818.28 Q302.543 818.28 304.349 814.738 Q306.177 811.173 306.177 804.067 Q306.177 796.937 304.349 793.395 Q302.543 789.831 298.909 789.831 M298.909 786.127 Q304.719 786.127 307.775 790.733 Q310.853 795.317 310.853 804.067 Q310.853 812.793 307.775 817.4 Q304.719 821.983 298.909 821.983 Q293.099 821.983 290.02 817.4 Q286.964 812.793 286.964 804.067 Q286.964 795.317 290.02 790.733 Q293.099 786.127 298.909 786.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M272.914 633.634 Q276.27 634.352 278.145 636.621 Q280.043 638.889 280.043 642.222 Q280.043 647.338 276.525 650.139 Q273.006 652.94 266.525 652.94 Q264.349 652.94 262.034 652.5 Q259.742 652.083 257.289 651.227 L257.289 646.713 Q259.233 647.847 261.548 648.426 Q263.863 649.005 266.386 649.005 Q270.784 649.005 273.076 647.269 Q275.39 645.533 275.39 642.222 Q275.39 639.167 273.238 637.454 Q271.108 635.718 267.289 635.718 L263.261 635.718 L263.261 631.875 L267.474 631.875 Q270.923 631.875 272.752 630.509 Q274.58 629.121 274.58 626.528 Q274.58 623.866 272.682 622.454 Q270.807 621.019 267.289 621.019 Q265.367 621.019 263.168 621.435 Q260.969 621.852 258.33 622.732 L258.33 618.565 Q260.992 617.824 263.307 617.454 Q265.645 617.084 267.705 617.084 Q273.029 617.084 276.131 619.514 Q279.233 621.922 279.233 626.042 Q279.233 628.912 277.59 630.903 Q275.946 632.871 272.914 633.634 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 620.787 Q295.298 620.787 293.469 624.352 Q291.664 627.894 291.664 635.023 Q291.664 642.13 293.469 645.695 Q295.298 649.236 298.909 649.236 Q302.543 649.236 304.349 645.695 Q306.177 642.13 306.177 635.023 Q306.177 627.894 304.349 624.352 Q302.543 620.787 298.909 620.787 M298.909 617.084 Q304.719 617.084 307.775 621.69 Q310.853 626.273 310.853 635.023 Q310.853 643.75 307.775 648.357 Q304.719 652.94 298.909 652.94 Q293.099 652.94 290.02 648.357 Q286.964 643.75 286.964 635.023 Q286.964 626.273 290.02 621.69 Q293.099 617.084 298.909 617.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M271.594 452.739 L259.789 471.188 L271.594 471.188 L271.594 452.739 M270.367 448.665 L276.247 448.665 L276.247 471.188 L281.177 471.188 L281.177 475.077 L276.247 475.077 L276.247 483.225 L271.594 483.225 L271.594 475.077 L255.992 475.077 L255.992 470.563 L270.367 448.665 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 451.744 Q295.298 451.744 293.469 455.309 Q291.664 458.851 291.664 465.98 Q291.664 473.087 293.469 476.651 Q295.298 480.193 298.909 480.193 Q302.543 480.193 304.349 476.651 Q306.177 473.087 306.177 465.98 Q306.177 458.851 304.349 455.309 Q302.543 451.744 298.909 451.744 M298.909 448.04 Q304.719 448.04 307.775 452.647 Q310.853 457.23 310.853 465.98 Q310.853 474.707 307.775 479.313 Q304.719 483.897 298.909 483.897 Q293.099 483.897 290.02 479.313 Q286.964 474.707 286.964 465.98 Q286.964 457.23 290.02 452.647 Q293.099 448.04 298.909 448.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M258.793 279.622 L277.15 279.622 L277.15 283.557 L263.076 283.557 L263.076 292.029 Q264.094 291.682 265.113 291.52 Q266.131 291.335 267.15 291.335 Q272.937 291.335 276.316 294.506 Q279.696 297.678 279.696 303.094 Q279.696 308.673 276.224 311.775 Q272.752 314.853 266.432 314.853 Q264.256 314.853 261.988 314.483 Q259.742 314.113 257.335 313.372 L257.335 308.673 Q259.418 309.807 261.641 310.363 Q263.863 310.918 266.34 310.918 Q270.344 310.918 272.682 308.812 Q275.02 306.705 275.02 303.094 Q275.02 299.483 272.682 297.377 Q270.344 295.27 266.34 295.27 Q264.465 295.27 262.59 295.687 Q260.738 296.104 258.793 296.983 L258.793 279.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M298.909 282.701 Q295.298 282.701 293.469 286.266 Q291.664 289.807 291.664 296.937 Q291.664 304.043 293.469 307.608 Q295.298 311.15 298.909 311.15 Q302.543 311.15 304.349 307.608 Q306.177 304.043 306.177 296.937 Q306.177 289.807 304.349 286.266 Q302.543 282.701 298.909 282.701 M298.909 278.997 Q304.719 278.997 307.775 283.604 Q310.853 288.187 310.853 296.937 Q310.853 305.664 307.775 310.27 Q304.719 314.853 298.909 314.853 Q293.099 314.853 290.02 310.27 Q286.964 305.664 286.964 296.937 Q286.964 288.187 290.02 283.604 Q293.099 278.997 298.909 278.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip002)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1017.56 400.199,903.134 400.786,926.956 401.372,940.602 401.958,838.742 402.545,745.397 403.131,658.088 403.718,581.746 404.304,514.01 404.891,455.932 405.477,398.086 406.063,345.862 406.65,298.895 407.236,256.845 407.823,292.581 408.409,322.282 408.995,287.094 409.582,255.955 410.168,282.8 410.755,256.034 411.341,232.552 411.927,256.147 412.514,237.591 413.1,219.895 413.687,243.696 414.273,264.098 414.86,252.528 415.446,243.13 416.032,235.421 416.619,230.208 417.205,226.909 417.792,248.625 418.378,247.389 418.964,249.369 419.551,272.598 420.137,294.727 420.724,298.239 421.31,318.568 421.896,322.115 422.483,326.682 423.069,332.819 423.656,352.963 424.242,384.648 424.829,391.378 425.415,399.232 426.001,406.103 426.588,434.662 427.174,445.151 427.761,464.552 428.347,484.347 428.933,494.893 429.52,506.338 430.106,524.981 430.693,557.893 431.279,582.423 431.865,599.347 432.452,615.577 433.038,644.067 433.625,658.397 434.211,672.775 434.798,687.293 435.384,706.216 435.97,733.568 436.557,756.486 437.143,764.699 437.73,794.821 438.316,809.941 438.902,820.245 439.489,834.528 440.075,851.868 440.662,854.073 441.248,864.034 441.835,873.104 442.421,882.326 443.007,894.948 443.594,901.056 444.18,906.411 444.767,912.353 445.353,924.311 445.939,944.877 446.526,949.847 447.112,957.615 447.699,965.238 448.285,975.696 448.871,980.501 449.458,990.508 450.044,1000.3 450.631,1007.28 451.217,1016.27 451.804,1020.13 452.39,1028.86 452.976,1037.4 453.563,1043.16 454.149,1049.13 454.736,1056.92 455.322,1064.81 455.908,1072.51 456.495,1080.02 457.081,1082.68 457.668,1085.44 458.254,1092.7 458.84,1097.13 459.427,1102.02 460.013,1112.41 460.6,1114.05 461.186,1115.96 461.773,1118.28 462.359,1124.46 462.945,1128.71 463.532,1130.64 464.118,1132.91 464.705,1136.45 465.291,1139.95 465.877,1139.92 466.464,1143.91 467.05,1146.02 467.637,1149.45 468.223,1153.46 468.809,1156.96 469.396,1158.45 469.982,1161.63 470.569,1168.05 471.155,1170.91 471.742,1175.66 472.328,1178.65 472.914,1182.96 473.501,1187 474.087,1191.09 474.674,1191.55 475.26,1196.77 475.846,1202.13 476.433,1202.44 477.019,1200.73 477.606,1204.25 478.192,1205.99 478.778,1207.66 479.365,1214.39 479.951,1215.58 480.538,1215.37 481.124,1216.57 481.711,1216.51 482.297,1216.41 482.883,1216.32 483.47,1217.61 484.056,1218.91 484.643,1220.34 485.229,1221.73 485.815,1222.94 486.402,1227.26 486.988,1226.87 487.575,1226.43 488.161,1229.5 488.748,1227.81 489.334,1230.43 489.92,1230 490.507,1229.39 491.093,1231.89 491.68,1234.71 492.266,1232.51 492.852,1232.23 493.439,1229.01 494.025,1230.17 494.612,1234.57 495.198,1234.25 495.784,1233.42 496.371,1234.43 496.957,1232.71 497.544,1232.57 498.13,1232 498.717,1234.73 499.303,1237.24 499.889,1236.93 500.476,1237.6 501.062,1237.21 501.649,1239.84 502.235,1239.27 502.821,1240.08 503.408,1240.88 503.994,1241.78 504.581,1242.26 505.167,1241.63 505.753,1243.67 506.34,1242.76 506.926,1241.99 507.513,1241.37 508.099,1243.54 508.686,1245.4 509.272,1244.78 509.858,1241.43 510.445,1242.01 511.031,1242.9 511.618,1239.55 512.204,1240.75 512.79,1240.31 513.377,1238.35 513.963,1238.03 514.55,1237.59 515.136,1238.82 515.722,1238.5 516.309,1239.29 516.895,1240.33 517.482,1242.74 518.068,1240.63 518.655,1238.84 519.241,1238.31 519.827,1239.59 520.414,1241.86 521,1241.29 521.587,1243.47 522.173,1242.98 522.759,1243.74 523.346,1245.88 523.932,1246.56 524.519,1246.9 525.105,1244.36 525.691,1246.58 526.278,1245.69 526.864,1242.13 527.451,1243.04 528.037,1238.02 528.624,1239.07 529.21,1238.69 529.796,1236.98 530.383,1236.5 530.969,1234.81 531.556,1236.2 532.142,1238.8 532.728,1241.62 533.315,1240.96 533.901,1241.75 534.488,1239.77 535.074,1238.18 535.661,1238.82 536.247,1242.68 536.833,1240.52 537.42,1240 538.006,1239.61 538.593,1239.32 539.179,1238.82 539.765,1238.23 540.352,1240.96 540.938,1247.14 541.525,1246.06 542.111,1244.95 542.697,1244.16 543.284,1244.69 543.87,1243.72 544.457,1242.79 545.043,1242.47 545.63,1240.61 546.216,1243.1 546.802,1241.23 547.389,1242.14 547.975,1244.31 548.562,1246.26 549.148,1248.17 549.734,1248.52 550.321,1247.53 550.907,1246.59 551.494,1248.64 552.08,1250.53 552.666,1246.65 553.253,1245.99 553.839,1243.8 554.426,1244.13 555.012,1240.55 555.599,1238.38 556.185,1240.31 556.771,1239.88 557.358,1239.17 557.944,1241.15 558.531,1244.59 559.117,1243.62 559.703,1242.69 560.29,1240.49 560.876,1239.61 561.463,1238.93 562.049,1236.72 562.635,1235.02 563.222,1234.56 563.808,1234.03 564.395,1233.48 564.981,1234.54 565.568,1232.79 566.154,1232.75 566.74,1231.05 567.327,1231.06 567.913,1230.62 568.5,1229.03 569.086,1228.87 569.672,1232.81 570.259,1232.37 570.845,1229.36 571.432,1231.88 572.018,1228.87 572.605,1228.85 573.191,1231.56 573.777,1232.49 574.364,1229.68 574.95,1228.29 575.537,1227.82 576.123,1226.15 576.709,1228.6 577.296,1228.18 577.882,1226.43 578.469,1226.02 579.055,1225.77 579.641,1225.67 580.228,1224.22 580.814,1224.49 581.401,1224.76 581.987,1224.64 582.574,1226.09 583.16,1231.56 583.746,1232.84 584.333,1235.14 584.919,1234.74 585.506,1232.91 586.092,1233.49 586.678,1235.72 587.265,1233.48 587.851,1234.5 588.438,1233.75 589.024,1232.95 589.61,1226.86 590.197,1229.37 590.783,1229.1 591.37,1230.33 591.956,1232.67 592.543,1236.39 593.129,1238.6 593.715,1237.79 594.302,1234.11 594.888,1233.56 595.475,1231.44 596.061,1233.6 596.647,1234.45 597.234,1238.12 597.82,1234.72 598.407,1234.1 598.993,1232.07 599.579,1231.89 600.166,1230.21 600.752,1227.1 601.339,1230.7 601.925,1224.68 602.512,1222.9 603.098,1224.24 603.684,1225.17 604.271,1225.08 604.857,1227.54 605.444,1227.58 606.03,1225.89 606.616,1227.08 607.203,1226.66 607.789,1226.51 608.376,1229.07 608.962,1231.82 609.548,1230.91 610.135,1230.37 610.721,1228.44 611.308,1229.29 611.894,1225.9 612.481,1224.42 613.067,1223.99 613.653,1223.87 614.24,1225.2 614.826,1227.55 615.413,1227.18 615.999,1225.37 616.585,1220.77 617.172,1220.65 617.758,1218.96 618.345,1219.1 618.931,1214.94 619.518,1215.12 620.104,1213.92 620.69,1214.23 621.277,1217.33 621.863,1217.34 622.45,1215.99 623.036,1218.91 623.622,1223.48 624.209,1223.27 624.795,1223.01 625.382,1225.89 625.968,1222.84 626.554,1224 627.141,1222.46 627.727,1225.03 628.314,1222.01 628.9,1221.92 629.487,1223.53 630.073,1224.88 630.659,1220.45 631.246,1225.93 631.832,1227.01 632.419,1227.82 633.005,1226.15 633.591,1225.93 634.178,1228.49 634.764,1230.59 635.351,1228.53 635.937,1229.29 636.523,1230.35 637.11,1229.8 637.696,1227.79 638.283,1228.68 638.869,1224.18 639.456,1222.58 640.042,1221.07 640.628,1222.41 641.215,1223.64 641.801,1220.69 642.388,1220.33 642.974,1218.55 643.56,1215.81 644.147,1215.91 644.733,1214.31 645.32,1219.97 645.906,1218.5 646.492,1217.15 647.079,1218.43 647.665,1221.2 648.252,1221.01 648.838,1222.35 649.425,1221.95 650.011,1221.74 650.597,1221.58 651.184,1216.13 651.77,1216.19 652.357,1217.88 652.943,1219.37 653.529,1219.21 654.116,1221.67 654.702,1220.06 655.289,1220.06 655.875,1221.42 656.462,1221.21 657.048,1221.12 657.634,1220.69 658.221,1220.56 658.807,1220.32 659.394,1222.89 659.98,1223.9 660.566,1223.73 661.153,1223.89 661.739,1228.05 662.326,1225.8 662.912,1226.76 663.498,1226.52 664.085,1226.1 664.671,1225.86 665.258,1227.15 665.844,1225.38 666.431,1226.27 667.017,1224.62 667.603,1224.33 668.19,1225.21 668.776,1227.61 669.363,1227.14 669.949,1226.76 670.535,1225.17 671.122,1222.3 671.708,1222.03 672.295,1221.73 672.881,1220.31 673.467,1220.23 674.054,1220.03 674.64,1214.59 675.227,1216.22 675.813,1217.59 676.4,1214.85 676.986,1216.33 677.572,1216.38 678.159,1214.95 678.745,1213.79 679.332,1216.62 679.918,1216.61 680.504,1218.01 681.091,1216.63 681.677,1216.74 682.264,1215.4 682.85,1216.99 683.436,1216.85 684.023,1216.94 684.609,1218.34 685.196,1218.16 685.782,1216.89 686.369,1219.21 686.955,1217.61 687.541,1220.35 688.128,1220 688.714,1219.65 689.301,1219.35 689.887,1220.45 690.473,1218.89 691.06,1218.79 691.646,1217.23 692.233,1215.71 692.819,1214.3 693.405,1215.72 693.992,1213.02 694.578,1213.11 695.165,1217.6 695.751,1217.64 696.338,1219.03 696.924,1217.46 697.51,1218.56 698.097,1219.68 698.683,1220.89 699.27,1222.08 699.856,1224.66 700.442,1225.58 701.029,1223.74 701.615,1225.72 702.202,1225.17 702.788,1222.19 703.375,1221.83 703.961,1221.66 704.547,1222.48 705.134,1219.14 705.72,1218.79 706.307,1217.45 706.893,1217 707.479,1218.14 708.066,1218.03 708.652,1219.43 709.239,1220.45 709.825,1220.02 710.411,1221.04 710.998,1220.7 711.584,1219.22 712.171,1218.98 712.757,1220.21 713.344,1217.45 713.93,1215.93 714.516,1216.01 715.103,1218.79 715.689,1220.23 716.276,1217.21 716.862,1218.66 717.448,1218.52 718.035,1218.3 718.621,1216.76 719.208,1217.64 719.794,1213.18 720.38,1210.48 720.967,1211.03 721.553,1212.69 722.14,1212.79 722.726,1211.51 723.313,1214.62 723.899,1214.77 724.485,1217.89 725.072,1216.37 725.658,1216.47 726.245,1211.25 726.831,1208.82 727.417,1209.23 728.004,1208.27 728.59,1208.68 729.177,1208.82 729.763,1211.85 730.349,1210.61 730.936,1210.9 731.522,1211.08 732.109,1212.75 732.695,1215.61 733.282,1218.18 733.868,1218.28 734.454,1218.01 735.041,1221.14 735.627,1221.08 736.214,1220.59 736.8,1220.19 737.386,1219.88 737.973,1216.76 738.559,1218.09 739.146,1219.03 739.732,1218.84 740.318,1215.65 740.905,1215.32 741.491,1215.28 742.078,1216.66 742.664,1214.96 743.251,1219.06 743.837,1219.98 744.423,1221.12 745.01,1219.31 745.596,1217.65 746.183,1216.33 746.769,1217.57 747.355,1214.76 747.942,1214.85 748.528,1213.45 749.115,1214.88 749.701,1214.88 750.288,1213.74 750.874,1216.67 751.46,1213.89 752.047,1212.69 752.633,1210.21 753.22,1213.1 753.806,1214.7 754.392,1213.54 754.979,1212.54 755.565,1212.66 756.152,1216.83 756.738,1216.85 757.324,1217.98 757.911,1218.21 758.497,1216.62 759.084,1213.5 759.67,1210.7 760.257,1207.94 760.843,1209.62 761.429,1212.67 762.016,1213.05 762.602,1213.11 763.189,1214.64 763.775,1211.91 764.361,1210.62 764.948,1212.26 765.534,1213.7 766.121,1215.05 766.707,1215.1 767.293,1221.92 767.88,1218.88 768.466,1217.29 769.053,1215.71 769.639,1215.53 770.226,1214.17 770.812,1215.39 771.398,1214.24 771.985,1212.96 772.571,1213.12 773.158,1211.7 773.744,1214.71 774.33,1215.84 774.917,1215.53 775.503,1214.33 776.09,1214.54 776.676,1212.95 777.262,1214.51 777.849,1215.84 778.435,1215.84 779.022,1212.94 779.608,1210.15 780.195,1209.02 780.781,1209.44 781.367,1208.54 781.954,1210.28 782.54,1212.1 783.127,1213.61 783.713,1213.64 784.299,1213.62 784.886,1212.31 785.472,1212.39 786.059,1212.34 786.645,1212.3 787.232,1212.15 787.818,1210.52 788.404,1210.64 788.991,1209.52 789.577,1208.22 790.164,1209.64 790.75,1209.57 791.336,1212.32 791.923,1217.56 792.509,1215.97 793.096,1214.32 793.682,1214.41 794.268,1214.09 794.855,1214.13 795.441,1215.41 796.028,1216.83 796.614,1216.27 797.201,1214.7 797.787,1211.8 798.373,1212.13 798.96,1211.18 799.546,1214.08 800.133,1214.03 800.719,1212.56 801.305,1212.75 801.892,1213.04 802.478,1214.29 803.065,1215.41 803.651,1215.2 804.237,1215.02 804.824,1216.28 805.41,1217.82 805.997,1218.98 806.583,1217.24 807.17,1218.27 807.756,1217.97 808.342,1217.65 808.929,1218.63 809.515,1216.8 810.102,1218 810.688,1217.77 811.274,1216.01 811.861,1217.47 812.447,1215.63 813.034,1218.12 813.62,1219.14 814.206,1218.85 814.793,1214.36 815.379,1214.65 815.966,1215.91 816.552,1214.19 817.139,1214.27 817.725,1213.05 818.311,1213.42 818.898,1217.58 819.484,1216.09 820.071,1213.21 820.657,1213.08 821.243,1211.46 821.83,1211.5 822.416,1210.28 823.003,1209.17 823.589,1208.12 824.175,1208.63 824.762,1208.48 825.348,1208.8 825.935,1207.75 826.521,1209.39 827.108,1210.58 827.694,1210.69 828.28,1212.19 828.867,1211.1 829.453,1212.58 830.04,1212.71 830.626,1212.96 831.212,1217.1 831.799,1217.01 832.385,1213.9 832.972,1213.78 833.558,1213.73 834.145,1210.75 834.731,1212.34 835.317,1209.58 835.904,1208.17 836.49,1210.05 837.077,1210.03 837.663,1211.52 838.249,1213.98 838.836,1215.45 839.422,1216.38 840.009,1214.66 840.595,1211.71 841.181,1214.29 841.768,1215.32 842.354,1216.45 842.941,1216.21 843.527,1217.64 844.114,1218.8 844.7,1218.51 845.286,1219.49 845.873,1217.62 846.459,1216.1 847.046,1214.62 847.632,1215.79 848.218,1214.46 848.805,1217.14 849.391,1217.03 849.978,1215.2 850.564,1210.95 851.15,1212.29 851.737,1211.36 852.323,1211.64 852.91,1211.84 853.496,1211.67 854.083,1210.46 854.669,1210.54 855.255,1212.17 855.842,1212.26 856.428,1212.48 857.015,1212.45 857.601,1209.75 858.187,1211.25 858.774,1209.86 859.36,1209.86 859.947,1209.93 860.533,1207.49 861.119,1207.35 861.706,1209.01 862.292,1212.2 862.879,1215.02 863.465,1214.79 864.052,1214.44 864.638,1215.76 865.224,1218.35 865.811,1219.45 866.397,1218.74 866.984,1215.53 867.57,1215.02 868.156,1217.37 868.743,1215.71 869.329,1216.86 869.916,1216.55 870.502,1216.36 871.089,1216 871.675,1218.79 872.261,1216.99 872.848,1218.11 873.434,1220.7 874.021,1219.12 874.607,1218.99 875.193,1221.5 875.78,1220.02 876.366,1219.55 876.953,1218.98 877.539,1218.5 878.125,1216.38 878.712,1220.15 879.298,1218.12 879.885,1219.03 880.471,1218.55 881.058,1218.09 881.644,1219.05 882.23,1221.22 882.817,1220.67 883.403,1217.5 883.99,1215.82 884.576,1214.48 885.162,1214.22 885.749,1215.67 886.335,1216.61 886.922,1214.73 887.508,1214.25 888.094,1213.98 888.681,1213.87 889.267,1212.51 889.854,1209.7 890.44,1210.91 891.027,1211.04 891.613,1209.6 892.199,1211.25 892.786,1213.83 893.372,1213.39 893.959,1214.97 894.545,1213.41 895.131,1212.09 895.718,1213.57 896.304,1214.64 896.891,1214.72 897.477,1214.33 898.063,1211.65 898.65,1210.31 899.236,1208.77 899.823,1207.44 900.409,1207.75 900.996,1208 901.582,1206.78 902.168,1205.6 902.755,1204.42 903.341,1206.2 903.928,1210.79 904.514,1209.55 905.1,1209.65 905.687,1208.25 906.273,1208.6 906.86,1204.81 907.446,1205.51 908.032,1205.63 908.619,1205.77 909.205,1207.48 909.792,1207.52 910.378,1208.29 910.965,1210 911.551,1208.64 912.137,1208.71 912.724,1206.09 913.31,1204.88 913.897,1206.57 914.483,1205.23 915.069,1206.9 915.656,1205.8 916.242,1207.55 916.829,1205.05 917.415,1204.1 918.002,1202.98 918.588,1202.02 919.174,1205.19 919.761,1208.01 920.347,1206.93 920.934,1204.59 921.52,1201.77 922.106,1202.05 922.693,1201.04 923.279,1202.67 923.866,1203.05 924.452,1206.49 925.038,1209.57 925.625,1212.38 926.211,1214.98 926.798,1212.23 927.384,1208.05 927.971,1206.97 928.557,1207.21 929.143,1206.11 929.73,1206.58 930.316,1209.64 930.903,1211.47 931.489,1211.45 932.075,1209.97 932.662,1209.78 933.248,1211.12 933.835,1213.85 934.421,1213.8 935.007,1216.38 935.594,1217.6 936.18,1217.23 936.767,1217.09 937.353,1218.28 937.94,1215.22 938.526,1212.05 939.112,1211.91 939.699,1213.19 940.285,1212.98 940.872,1212.88 941.458,1212.86 942.044,1213.95 942.631,1212.51 943.217,1209.88 943.804,1209.61 944.39,1208.42 944.976,1210.08 945.563,1211.54 946.149,1213.09 946.736,1213.3 947.322,1212.99 947.909,1211.31 948.495,1209.63 949.081,1209.5 949.668,1213.51 950.254,1213.44 950.841,1214.62 951.427,1216.11 952.013,1214.31 952.6,1215.45 953.186,1215.52 953.773,1217.85 954.359,1214.46 954.945,1212.96 955.532,1210.13 956.118,1208.52 956.705,1208.69 957.291,1208.52 957.878,1207.06 958.464,1208.83 959.05,1209.11 959.637,1210.28 960.223,1213.1 960.81,1211.76 961.396,1214.75 961.982,1214.47 962.569,1214.41 963.155,1214.24 963.742,1215.2 964.328,1216.34 964.915,1215.9 965.501,1214.31 966.087,1215.67 966.674,1216.77 967.26,1213.42 967.847,1210.55 968.433,1211.07 969.019,1208.09 969.606,1208.25 970.192,1208.39 970.779,1210.03 971.365,1211.54 971.951,1211.31 972.538,1204.2 973.124,1204.8 973.711,1205.22 974.297,1204.39 974.884,1204.29 975.47,1204.72 976.056,1204.98 976.643,1205.45 977.229,1207.09 977.816,1205.82 978.402,1204.78 978.988,1205.15 979.575,1204.23 980.161,1203.21 980.748,1204.89 981.334,1203.45 981.92,1202.49 982.507,1204.45 983.093,1203.56 983.68,1205.61 984.266,1204.77 984.853,1203.85 985.439,1205.64 986.025,1207.08 986.612,1207.19 987.198,1203.54 987.785,1204.12 988.371,1204.4 988.957,1204.76 989.544,1206.45 990.13,1210.46 990.717,1210.76 991.303,1207.99 991.889,1212.23 992.476,1213.46 993.062,1212.25 993.649,1213.66 994.235,1212.24 994.822,1212.13 995.408,1213.14 995.994,1211.88 996.581,1211.67 997.167,1211.61 997.754,1213.02 998.34,1210.32 998.926,1209.37 999.513,1210.98 1000.1,1211.32 1000.69,1211.27 1001.27,1212.56 1001.86,1213.88 1002.44,1210.97 1003.03,1209.93 1003.62,1211.75 1004.2,1211.66 1004.79,1211.66 1005.38,1212.96 1005.96,1215.39 1006.55,1214.02 1007.14,1216.68 1007.72,1216.25 1008.31,1215.09 1008.9,1213.43 1009.48,1216.1 1010.07,1215.6 1010.65,1215.45 1011.24,1218.07 1011.83,1217.96 1012.41,1216.03 1013,1216.94 1013.59,1219.32 1014.17,1218.72 1014.76,1218.17 1015.35,1221.67 1015.93,1219.84 1016.52,1217.87 1017.11,1217.2 1017.69,1217.01 1018.28,1216.52 1018.86,1217.57 1019.45,1217.31 1020.04,1216.95 1020.62,1215.32 1021.21,1215.04 1021.8,1214.91 1022.38,1217.23 1022.97,1216.93 1023.56,1216.6 1024.14,1217.5 1024.73,1218.83 1025.32,1218.23 1025.9,1220.79 1026.49,1221.3 1027.07,1217.97 1027.66,1217.49 1028.25,1216.99 1028.83,1212.52 1029.42,1211.21 1030.01,1211.12 1030.59,1211.05 1031.18,1209.4 1031.77,1212.5 1032.35,1212.41 1032.94,1213.41 1033.52,1214.6 1034.11,1217.2 1034.7,1218.36 1035.28,1216.54 1035.87,1214.59 1036.46,1215.57 1037.04,1211.43 1037.63,1212.79 1038.22,1211.3 1038.8,1214.08 1039.39,1214.13 1039.98,1214.27 1040.56,1212.66 1041.15,1211.01 1041.73,1213.88 1042.32,1212.16 1042.91,1212 1043.49,1210.71 1044.08,1206.63 1044.67,1205.45 1045.25,1205.87 1045.84,1206.06 1046.43,1209.16 1047.01,1211.6 1047.6,1212.72 1048.19,1213.97 1048.77,1212.28 1049.36,1210.65 1049.94,1209.5 1050.53,1210.87 1051.12,1210.99 1051.7,1217.96 1052.29,1220.44 1052.88,1218.5 1053.46,1218.17 1054.05,1217.84 1054.64,1216.25 1055.22,1216.12 1055.81,1215.84 1056.39,1216.94 1056.98,1215.29 1057.57,1214.78 1058.15,1215.59 1058.74,1211.39 1059.33,1212.41 1059.91,1213.84 1060.5,1212.06 1061.09,1213.46 1061.67,1210.56 1062.26,1210.18 1062.85,1210.11 1063.43,1208.91 1064.02,1207.57 1064.6,1209.47 1065.19,1208.16 1065.78,1208.17 1066.36,1208.4 1066.95,1208.48 1067.54,1211.12 1068.12,1211 1068.71,1212.43 1069.3,1212.06 1069.88,1213.2 1070.47,1213.22 1071.06,1214.34 1071.64,1214.1 1072.23,1216.49 1072.81,1217.45 1073.4,1216.84 1073.99,1217.93 1074.57,1215.91 1075.16,1215.56 1075.75,1216.59 1076.33,1213.57 1076.92,1212.23 1077.51,1213.4 1078.09,1209.12 1078.68,1208.19 1079.26,1206.86 1079.85,1207.13 1080.44,1207.37 1081.02,1207.69 1081.61,1209.23 1082.2,1210.65 1082.78,1213.54 1083.37,1215.8 1083.96,1214.14 1084.54,1215.44 1085.13,1213.9 1085.72,1212.33 1086.3,1208.04 1086.89,1204.06 1087.47,1201.65 1088.06,1203.66 1088.65,1207.03 1089.23,1207.3 1089.82,1207.48 1090.41,1204.95 1090.99,1203.59 1091.58,1200.03 1092.17,1199.4 1092.75,1198.66 1093.34,1199.35 1093.93,1197.26 1094.51,1196.45 1095.1,1196.95 1095.68,1194.82 1096.27,1198.84 1096.86,1199.52 1097.44,1200.29 1098.03,1200.81 1098.62,1202.44 1099.2,1202.99 1099.79,1201.86 1100.38,1198.2 1100.96,1200.55 1101.55,1198.41 1102.14,1199.33 1102.72,1201.42 1103.31,1204.54 1103.89,1202 1104.48,1202.2 1105.07,1198.58 1105.65,1200.8 1106.24,1200.02 1106.83,1203.21 1107.41,1199.51 1108,1200.17 1108.59,1200.8 1109.17,1201.32 1109.76,1204.79 1110.34,1208.15 1110.93,1208.44 1111.52,1209.79 1112.1,1209.71 1112.69,1209.81 1113.28,1211.18 1113.86,1209.84 1114.45,1211.11 1115.04,1211.28 1115.62,1215.34 1116.21,1213.75 1116.8,1214.82 1117.38,1216.23 1117.97,1213.03 1118.55,1212.72 1119.14,1213.87 1119.73,1212.19 1120.31,1212.2 1120.9,1212.37 1121.49,1213.62 1122.07,1218.72 1122.66,1221.21 1123.25,1220.73 1123.83,1218.54 1124.42,1219.59 1125.01,1218.99 1125.59,1219.93 1126.18,1219.27 1126.76,1218.82 1127.35,1217.17 1127.94,1216.91 1128.52,1219.49 1129.11,1218.93 1129.7,1221.03 1130.28,1227.19 1130.87,1223.4 1131.46,1221.31 1132.04,1218.05 1132.63,1217.73 1133.21,1217.26 1133.8,1213.94 1134.39,1213.62 1134.97,1213.51 1135.56,1215.91 1136.15,1215.46 1136.73,1216.62 1137.32,1215.95 1137.91,1215.54 1138.49,1215.33 1139.08,1213.61 1139.67,1213.55 1140.25,1218.77 1140.84,1221.06 1141.42,1223.1 1142.01,1220.78 1142.6,1217.76 1143.18,1218.39 1143.77,1217.68 1144.36,1218.5 1144.94,1219.56 1145.53,1219.43 1146.12,1219.23 1146.7,1220.03 1147.29,1220.81 1147.88,1221.66 1148.46,1220.97 1149.05,1219.13 1149.63,1216.29 1150.22,1214.87 1150.81,1215.97 1151.39,1216.94 1151.98,1215.09 1152.57,1213.68 1153.15,1210.88 1153.74,1206.51 1154.33,1210.67 1154.91,1209.05 1155.5,1207.69 1156.09,1206.16 1156.67,1209.04 1157.26,1207.43 1157.84,1207.58 1158.43,1206.02 1159.02,1204.84 1159.6,1206.48 1160.19,1205.46 1160.78,1204.48 1161.36,1205.08 1161.95,1205.62 1162.54,1204.12 1163.12,1204.32 1163.71,1206.22 1164.29,1209.44 1164.88,1207.97 1165.47,1204.29 1166.05,1207.34 1166.64,1207.63 1167.23,1206.2 1167.81,1207.66 1168.4,1208.88 1168.99,1207.74 1169.57,1210.59 1170.16,1209.19 1170.75,1209.3 1171.33,1209.44 1171.92,1211.01 1172.5,1210.98 1173.09,1212.27 1173.68,1212.07 1174.26,1213.33 1174.85,1210.56 1175.44,1209.55 1176.02,1206.91 1176.61,1207 1177.2,1208.36 1177.78,1210.06 1178.37,1210.27 1178.96,1210.04 1179.54,1209.98 1180.13,1209.79 1180.71,1211 1181.3,1210.83 1181.89,1212.22 1182.47,1209.3 1183.06,1207.94 1183.65,1209.57 1184.23,1210.92 1184.82,1212.1 1185.41,1212.25 1185.99,1210.8 1186.58,1209.36 1187.16,1206.72 1187.75,1204.25 1188.34,1205.98 1188.92,1206.29 1189.51,1213.33 1190.1,1213.49 1190.68,1212.05 1191.27,1218.56 1191.86,1217.03 1192.44,1218.34 1193.03,1220.69 1193.62,1218.63 1194.2,1217.97 1194.79,1217.26 1195.37,1219.44 1195.96,1217.58 1196.55,1214.41 1197.13,1219.65 1197.72,1217.86 1198.31,1216.14 1198.89,1215.82 1199.48,1217.02 1200.07,1218.04 1200.65,1217.51 1201.24,1218.59 1201.83,1215.36 1202.41,1215.13 1203,1215.01 1203.58,1211.96 1204.17,1208.85 1204.76,1207.85 1205.34,1206.6 1205.93,1205.59 1206.52,1204.43 1207.1,1204.69 1207.69,1203.71 1208.28,1203.92 1208.86,1203.09 1209.45,1199.49 1210.03,1200.27 1210.62,1200.92 1211.21,1203.96 1211.79,1204.07 1212.38,1204.22 1212.97,1206.09 1213.55,1206.02 1214.14,1204.8 1214.73,1203.5 1215.31,1202.38 1215.9,1201.2 1216.49,1201.6 1217.07,1201.86 1217.66,1206.1 1218.24,1204.64 1218.83,1203.77 1219.42,1198.79 1220,1199.39 1220.59,1201.87 1221.18,1200.96 1221.76,1198.94 1222.35,1202.37 1222.94,1204.13 1223.52,1206.12 1224.11,1210.11 1224.7,1212.67 1225.28,1211.26 1225.87,1211.21 1226.45,1212.62 1227.04,1211.25 1227.63,1211.22 1228.21,1208.56 1228.8,1207.46 1229.39,1209.04 1229.97,1210.52 1230.56,1210.59 1231.15,1210.7 1231.73,1210.83 1232.32,1210.65 1232.91,1210.69 1233.49,1210.31 1234.08,1211.65 1234.66,1208.95 1235.25,1210.8 1235.84,1212.49 1236.42,1208.36 1237.01,1210.31 1237.6,1209.4 1238.18,1212.33 1238.77,1210.61 1239.36,1210.2 1239.94,1212.67 1240.53,1212.7 1241.11,1209.82 1241.7,1208.18 1242.29,1207.09 1242.87,1208.92 1243.46,1210.69 1244.05,1209.11 1244.63,1207.73 1245.22,1206.47 1245.81,1205.23 1246.39,1205.55 1246.98,1206.01 1247.57,1205.87 1248.15,1204.67 1248.74,1204.79 1249.32,1204.7 1249.91,1204.83 1250.5,1205.37 1251.08,1204.27 1251.67,1201.75 1252.26,1202.23 1252.84,1205.36 1253.43,1205.68 1254.02,1204.36 1254.6,1203.31 1255.19,1206.27 1255.78,1207.87 1256.36,1209.32 1256.95,1209.46 1257.53,1210.73 1258.12,1209.45 1258.71,1209.45 1259.29,1212.4 1259.88,1211.25 1260.47,1211 1261.05,1212.16 1261.64,1210.75 1262.23,1213.15 1262.81,1213.07 1263.4,1213.05 1263.98,1211.64 1264.57,1209.12 1265.16,1210.7 1265.74,1209.31 1266.33,1209.43 1266.92,1209.57 1267.5,1206.84 1268.09,1204.36 1268.68,1203.19 1269.26,1200.83 1269.85,1201.54 1270.44,1200.34 1271.02,1201.01 1271.61,1202.99 1272.19,1204.79 1272.78,1205.43 1273.37,1208.3 1273.95,1209.87 1274.54,1208.53 1275.13,1213.75 1275.71,1212.28 1276.3,1210.98 1276.89,1209.6 1277.47,1210.73 1278.06,1208.03 1278.65,1206.68 1279.23,1207.02 1279.82,1205.95 1280.4,1208.99 1280.99,1208.72 1281.58,1212.99 1282.16,1214.2 1282.75,1216.8 1283.34,1220.31 1283.92,1222.57 1284.51,1225.91 1285.1,1223.7 1285.68,1224.51 1286.27,1222.11 1286.86,1221.46 1287.44,1223.47 1288.03,1222.62 1288.61,1223.05 1289.2,1223.66 1289.79,1221.43 1290.37,1220.64 1290.96,1221.36 1291.55,1220.86 1292.13,1221.49 1292.72,1219.53 1293.31,1219.14 1293.89,1218.96 1294.48,1218.42 1295.06,1216.59 1295.65,1216.06 1296.24,1215.75 1296.82,1216.51 1297.41,1215.05 1298,1214.58 1298.58,1217.17 1299.17,1216.89 1299.76,1218.84 1300.34,1218.3 1300.93,1216.75 1301.52,1216.07 1302.1,1215.62 1302.69,1215.5 1303.27,1213.86 1303.86,1215.28 1304.45,1213.58 1305.03,1213.37 1305.62,1214.56 1306.21,1214.12 1306.79,1211.18 1307.38,1211.48 1307.97,1208.61 1308.55,1207.02 1309.14,1207.3 1309.73,1207.45 1310.31,1207.48 1310.9,1207.61 1311.48,1206.2 1312.07,1207.84 1312.66,1210.81 1313.24,1210.53 1313.83,1213.33 1314.42,1213.03 1315,1214.55 1315.59,1213.99 1316.18,1212.4 1316.76,1211.02 1317.35,1210.8 1317.93,1210.78 1318.52,1210.42 1319.11,1210.27 1319.69,1209.16 1320.28,1205.27 1320.87,1209.93 1321.45,1205.58 1322.04,1198.56 1322.63,1197.78 1323.21,1198.49 1323.8,1198 1324.39,1198.79 1324.97,1199.17 1325.56,1202.51 1326.14,1201.46 1326.73,1203.25 1327.32,1205.07 1327.9,1205.42 1328.49,1207.01 1329.08,1209.96 1329.66,1208.77 1330.25,1208.8 1330.84,1211.36 1331.42,1215.21 1332.01,1215.07 1332.6,1213.28 1333.18,1213.16 1333.77,1210.48 1334.35,1213.28 1334.94,1212.86 1335.53,1215.65 1336.11,1215.58 1336.7,1215.32 1337.29,1214.96 1337.87,1217.2 1338.46,1212.96 1339.05,1213.1 1339.63,1213.06 1340.22,1211.67 1340.8,1215.81 1341.39,1215.6 1341.98,1213.41 1342.56,1211.87 1343.15,1210.08 1343.74,1208.55 1344.32,1207.14 1344.91,1204.6 1345.5,1203.55 1346.08,1206.78 1346.67,1208.38 1347.26,1208.37 1347.84,1209.47 1348.43,1206.99 1349.01,1207.55 1349.6,1206.31 1350.19,1203.94 1350.77,1204.33 1351.36,1207.3 1351.95,1210.32 1352.53,1211.62 1353.12,1209.72 1353.71,1211.14 1354.29,1212.32 1354.88,1208.24 1355.47,1208.12 1356.05,1208.45 1356.64,1211.49 1357.22,1210.13 1357.81,1208.95 1358.4,1211.84 1358.98,1208.99 1359.57,1210.37 1360.16,1211.37 1360.74,1212.46 1361.33,1212.4 1361.92,1210.95 1362.5,1207.05 1363.09,1208.72 1363.68,1208.92 1364.26,1208.76 1364.85,1211.58 1365.43,1212.86 1366.02,1208.59 1366.61,1208.96 1367.19,1210.24 1367.78,1209.32 1368.37,1212.11 1368.95,1209.42 1369.54,1209.47 1370.13,1209.78 1370.71,1208.44 1371.3,1211.01 1371.88,1211.11 1372.47,1210.89 1373.06,1215.03 1373.64,1214.62 1374.23,1211.6 1374.82,1212.83 1375.4,1214.09 1375.99,1213.85 1376.58,1212.6 1377.16,1213.93 1377.75,1213.72 1378.34,1212.64 1378.92,1214.22 1379.51,1215.5 1380.09,1215.44 1380.68,1217.18 1381.27,1217.22 1381.85,1218.34 1382.44,1219.04 1383.03,1217.29 1383.61,1218.56 1384.2,1216.59 1384.79,1216.16 1385.37,1214.33 1385.96,1212.6 1386.55,1212.49 1387.13,1212.54 1387.72,1213.66 1388.3,1213.35 1388.89,1211.65 1389.48,1215.58 1390.06,1217.02 1390.65,1216.67 1391.24,1216.4 1391.82,1215.98 1392.41,1218.23 1393,1216.41 1393.58,1211.76 1394.17,1208.95 1394.75,1208.96 1395.34,1204.89 1395.93,1205.18 1396.51,1208.46 1397.1,1209.54 1397.69,1204.2 1398.27,1203.2 1398.86,1202.03 1399.45,1202.61 1400.03,1204.52 1400.62,1203.43 1401.21,1203.8 1401.79,1205.46 1402.38,1207.33 1402.96,1207.28 1403.55,1207.47 1404.14,1207.77 1404.72,1209.04 1405.31,1207.37 1405.9,1211.54 1406.48,1213.02 1407.07,1214.21 1407.66,1212.57 1408.24,1210.89 1408.83,1210.97 1409.42,1211.13 1410,1211.23 1410.59,1209.71 1411.17,1211.2 1411.76,1210.94 1412.35,1208.11 1412.93,1206.74 1413.52,1206.73 1414.11,1207.13 1414.69,1207.53 1415.28,1207.52 1415.87,1206.06 1416.45,1206.24 1417.04,1207.94 1417.63,1206.46 1418.21,1206.77 1418.8,1208.46 1419.38,1205.93 1419.97,1204.75 1420.56,1203.77 1421.14,1204.39 1421.73,1207.77 1422.32,1206.41 1422.9,1205.16 1423.49,1206.6 1424.08,1210.85 1424.66,1208.17 1425.25,1208.39 1425.83,1209.79 1426.42,1213.93 1427.01,1212.14 1427.59,1212.32 1428.18,1214.86 1428.77,1214.51 1429.35,1215.5 1429.94,1215.18 1430.53,1212.18 1431.11,1210.43 1431.7,1214.59 1432.29,1215.76 1432.87,1218.19 1433.46,1210.75 1434.04,1213.45 1434.63,1216.2 1435.22,1213.05 1435.8,1211.17 1436.39,1211.2 1436.98,1208.52 1437.56,1207.24 1438.15,1207.47 1438.74,1210.47 1439.32,1210.25 1439.91,1207.53 1440.5,1209.02 1441.08,1210.32 1441.67,1210.08 1442.25,1209.95 1442.84,1210.09 1443.43,1209.03 1444.01,1206.65 1444.6,1209.42 1445.19,1210.75 1445.77,1212.15 1446.36,1210.43 1446.95,1211.79 1447.53,1211.64 1448.12,1208.62 1448.7,1209.9 1449.29,1209.63 1449.88,1208.15 1450.46,1208.3 1451.05,1209.8 1451.64,1207.25 1452.22,1208.59 1452.81,1208.37 1453.4,1211.11 1453.98,1213.76 1454.57,1214.96 1455.16,1212.22 1455.74,1211.98 1456.33,1213.68 1456.91,1213.49 1457.5,1209.44 1458.09,1209.33 1458.67,1208.13 1459.26,1208.47 1459.85,1207.11 1460.43,1207.33 1461.02,1207.57 1461.61,1207.77 1462.19,1206.59 1462.78,1205.38 1463.37,1204.23 1463.95,1201.85 1464.54,1203.77 1465.12,1204.05 1465.71,1205.91 1466.3,1207.4 1466.88,1210.49 1467.47,1209.1 1468.06,1209.31 1468.64,1207.9 1469.23,1205.62 1469.82,1205.9 1470.4,1203.4 1470.99,1206.44 1471.57,1203.79 1472.16,1205.73 1472.75,1206.16 1473.33,1205.11 1473.92,1202.71 1474.51,1204.63 1475.09,1205.29 1475.68,1206.78 1476.27,1208.43 1476.85,1209.93 1477.44,1208.61 1478.03,1210.04 1478.61,1214.27 1479.2,1212.53 1479.78,1211.2 1480.37,1212.64 1480.96,1212.83 1481.54,1212.66 1482.13,1213.77 1482.72,1212.41 1483.3,1213.41 1483.89,1215.92 1484.48,1215.34 1485.06,1215.18 1485.65,1216.35 1486.24,1214.81 1486.82,1211.83 1487.41,1210.36 1487.99,1208.93 1488.58,1207.87 1489.17,1207.69 1489.75,1207.93 1490.34,1208.06 1490.93,1206.86 1491.51,1208.19 1492.1,1208.14 1492.69,1208.42 1493.27,1208.34 1493.86,1210.1 1494.45,1209.99 1495.03,1209.8 1495.62,1208.63 1496.2,1208.49 1496.79,1208.38 1497.38,1207.18 1497.96,1205.86 1498.55,1207.32 1499.14,1205.71 1499.72,1210.02 1500.31,1211.33 1500.9,1207.14 1501.48,1205.62 1502.07,1206.11 1502.65,1206.06 1503.24,1205.12 1503.83,1205.24 1504.41,1205.52 1505,1204.43 1505.59,1204.47 1506.17,1207.54 1506.76,1203.8 1507.35,1205.48 1507.93,1204.37 1508.52,1204.8 1509.11,1203.88 1509.69,1202.92 1510.28,1206.09 1510.86,1205.1 1511.45,1206.57 1512.04,1206.56 1512.62,1208.35 1513.21,1208.45 1513.8,1208.73 1514.38,1209.94 1514.97,1209.86 1515.56,1211.64 1516.14,1211.76 1516.73,1213.3 1517.32,1216.06 1517.9,1215.62 1518.49,1219.37 1519.07,1220.2 1519.66,1218.05 1520.25,1217.8 1520.83,1218.82 1521.42,1215.72 1522.01,1213.99 1522.59,1215.34 1523.18,1214.94 1523.77,1214.35 1524.35,1218.29 1524.94,1219.13 1525.52,1218.66 1526.11,1219.2 1526.7,1218.64 1527.28,1216.89 1527.87,1218.12 1528.46,1216.38 1529.04,1213.17 1529.63,1213.05 1530.22,1211.65 1530.8,1209.96 1531.39,1209.74 1531.98,1212.23 1532.56,1210.66 1533.15,1209.42 1533.73,1210.66 1534.32,1214.54 1534.91,1215.82 1535.49,1217.08 1536.08,1217.96 1536.67,1218.71 1537.25,1218.2 1537.84,1219.12 1538.43,1218.83 1539.01,1218.12 1539.6,1214.76 1540.19,1214.35 1540.77,1214.35 1541.36,1211.18 1541.94,1210.99 1542.53,1211.07 1543.12,1213.72 1543.7,1210.75 1544.29,1209.53 1544.88,1208.47 1545.46,1205.64 1546.05,1205.59 1546.64,1205.87 1547.22,1206.2 1547.81,1206.34 1548.4,1205.46 1548.98,1205.87 1549.57,1207.34 1550.15,1203.28 1550.74,1202.1 1551.33,1202.62 1551.91,1204.37 1552.5,1206.31 1553.09,1206.49 1553.67,1205.34 1554.26,1205.64 1554.85,1208.43 1555.43,1206.91 1556.02,1205.82 1556.6,1207.53 1557.19,1210.19 1557.78,1211.66 1558.36,1210.33 1558.95,1208.93 1559.54,1211.45 1560.12,1210.12 1560.71,1209.04 1561.3,1207.67 1561.88,1207.69 1562.47,1209.44 1563.06,1209.41 1563.64,1207.95 1564.23,1209.3 1564.81,1209.36 1565.4,1208.14 1565.99,1209.16 1566.57,1208.98 1567.16,1209.17 1567.75,1211.99 1568.33,1211.62 1568.92,1210.36 1569.51,1210.56 1570.09,1210.52 1570.68,1210.36 1571.27,1208.93 1571.85,1206.44 1572.44,1206.46 1573.02,1206.53 1573.61,1208.22 1574.2,1208.09 1574.78,1209.43 1575.37,1209.27 1575.96,1209.2 1576.54,1207.7 1577.13,1209.49 1577.72,1209.79 1578.3,1208.53 1578.89,1205.83 1579.47,1203.24 1580.06,1203.48 1580.65,1203.86 1581.23,1205.74 1581.82,1211.55 1582.41,1210.24 1582.99,1210.49 1583.58,1211.95 1584.17,1210.51 1584.75,1211.91 1585.34,1212.22 1585.93,1213.69 1586.51,1212.16 1587.1,1212.16 1587.68,1212.04 1588.27,1211.94 1588.86,1213.27 1589.44,1211.5 1590.03,1211.75 1590.62,1211.65 1591.2,1211.71 1591.79,1211.54 1592.38,1210.46 1592.96,1210.13 1593.55,1210.18 1594.14,1211.17 1594.72,1207.1 1595.31,1207.19 1595.89,1207.3 1596.48,1207.69 1597.07,1206.4 1597.65,1209.04 1598.24,1207.77 1598.83,1209.3 1599.41,1206.52 1600,1202.74 1600.59,1202.86 1601.17,1201.84 1601.76,1202.18 1602.34,1203.9 1602.93,1204.33 1603.52,1206.23 1604.1,1203.5 1604.69,1202.45 1605.28,1204.29 1605.86,1204.62 1606.45,1204.78 1607.04,1203.59 1607.62,1203.97 1608.21,1204.31 1608.8,1204.58 1609.38,1206.23 1609.97,1206.68 1610.55,1211.13 1611.14,1209.84 1611.73,1208.52 1612.31,1209.78 1612.9,1210.01 1613.49,1208.74 1614.07,1207.67 1614.66,1211.74 1615.25,1211.82 1615.83,1211.91 1616.42,1210.43 1617.01,1207.66 1617.59,1210.6 1618.18,1207.99 1618.76,1208.07 1619.35,1209.49 1619.94,1210.94 1620.52,1213.66 1621.11,1211.94 1621.7,1212.05 1622.28,1210.69 1622.87,1209.44 1623.46,1209.5 1624.04,1209.42 1624.63,1210.74 1625.22,1213.63 1625.8,1214.5 1626.39,1214.24 1626.97,1211.27 1627.56,1208.29 1628.15,1207.26 1628.73,1208.71 1629.32,1207.32 1629.91,1208.9 1630.49,1208.84 1631.08,1210.31 1631.67,1211.77 1632.25,1213.09 1632.84,1207.46 1633.42,1206.03 1634.01,1206.12 1634.6,1206.27 1635.18,1207.88 1635.77,1209.41 1636.36,1206.47 1636.94,1207.06 1637.53,1208.68 1638.12,1206.12 1638.7,1208.12 1639.29,1205.7 1639.88,1207.41 1640.46,1207.46 1641.05,1207.94 1641.63,1206.79 1642.22,1208.3 1642.81,1205.5 1643.39,1208.35 1643.98,1208.58 1644.57,1211.5 1645.15,1211.14 1645.74,1212.52 1646.33,1217.67 1646.91,1217.33 1647.5,1217.7 1648.09,1215.98 1648.67,1212.92 1649.26,1212.94 1649.84,1214.03 1650.43,1214.05 1651.02,1213.94 1651.6,1216.81 1652.19,1216.28 1652.78,1220.18 1653.36,1220.99 1653.95,1223.18 1654.54,1220.96 1655.12,1220.36 1655.71,1220.89 1656.29,1220.39 1656.88,1221.16 1657.47,1220.7 1658.05,1216.16 1658.64,1214.61 1659.23,1213.06 1659.81,1210.13 1660.4,1211.25 1660.99,1211.1 1661.57,1211.09 1662.16,1209.6 1662.75,1208.03 1663.33,1205.64 1663.92,1207.03 1664.5,1204.37 1665.09,1206.12 1665.68,1203.6 1666.26,1202.78 1666.85,1202.88 1667.44,1206.11 1668.02,1206.46 1668.61,1203.89 1669.2,1204.38 1669.78,1206.31 1670.37,1209.21 1670.96,1209.42 1671.54,1207.87 1672.13,1209.63 1672.71,1209.88 1673.3,1210.17 1673.89,1210.5 1674.47,1210.3 1675.06,1210.07 1675.65,1209 1676.23,1211.86 1676.82,1210.27 1677.41,1211.54 1677.99,1211.63 1678.58,1213.02 1679.17,1214.27 1679.75,1216.83 1680.34,1216.48 1680.92,1214.71 1681.51,1213.08 1682.1,1214.01 1682.68,1212.41 1683.27,1212.11 1683.86,1212 1684.44,1211.78 1685.03,1210.54 1685.62,1209.01 1686.2,1208.81 1686.79,1211.45 1687.37,1210.22 1687.96,1211.59 1688.55,1212.59 1689.13,1211.18 1689.72,1211.25 1690.31,1211.41 1690.89,1212.63 1691.48,1211.47 1692.07,1208.98 1692.65,1207.38 1693.24,1208.77 1693.83,1208.92 1694.41,1207.71 1695,1206.33 1695.58,1212.1 1696.17,1213.35 1696.76,1212.85 1697.34,1211.05 1697.93,1211.01 1698.52,1210.92 1699.1,1209.51 1699.69,1209.71 1700.28,1209.73 1700.86,1208.54 1701.45,1210.14 1702.04,1210.29 1702.62,1210.42 1703.21,1213.18 1703.79,1214.45 1704.38,1215.7 1704.97,1213.99 1705.55,1213.9 1706.14,1208.32 1706.73,1208.25 1707.31,1203.9 1707.9,1207.23 1708.49,1206.09 1709.07,1204.93 1709.66,1204.99 1710.24,1206.66 1710.83,1205.25 1711.42,1205.56 1712,1206.89 1712.59,1207.28 1713.18,1208.84 1713.76,1209.04 1714.35,1207.91 1714.94,1209.4 1715.52,1206.47 1716.11,1208.13 1716.7,1206.49 1717.28,1205.23 1717.87,1205.47 1718.45,1206 1719.04,1207.31 1719.63,1210.39 1720.21,1211.93 1720.8,1211.84 1721.39,1211.69 1721.97,1211.56 1722.56,1210.12 1723.15,1208.83 1723.73,1209.12 1724.32,1210.59 1724.91,1211.8 1725.49,1211.68 1726.08,1211.48 1726.66,1211.61 1727.25,1210.14 1727.84,1208.7 1728.42,1208.64 1729.01,1210.16 1729.6,1208.66 1730.18,1208.34 1730.77,1209.89 1731.36,1211.55 1731.94,1212.88 1732.53,1211.63 1733.11,1212.95 1733.7,1211.45 1734.29,1208.53 1734.87,1204.42 1735.46,1204.39 1736.05,1203.55 1736.63,1205.44 1737.22,1210.11 1737.81,1208.75 1738.39,1210.28 1738.98,1211.78 1739.57,1210.52 1740.15,1210.49 1740.74,1205.11 1741.32,1203.75 1741.91,1205.71 1742.5,1205.97 1743.08,1206 1743.67,1206.13 1744.26,1206.53 1744.84,1205.75 1745.43,1206.06 1746.02,1204.83 1746.6,1207.99 1747.19,1210.38 1747.78,1209.05 1748.36,1209.32 1748.95,1209.8 1749.53,1208.63 1750.12,1208.75 1750.71,1211.8 1751.29,1212.67 1751.88,1217.95 1752.47,1219.14 1753.05,1218.59 1753.64,1216.76 1754.23,1216.13 1754.81,1215.67 1755.4,1215.18 1755.99,1214.9 1756.57,1214.83 1757.16,1216.22 1757.74,1218.76 1758.33,1214.22 1758.92,1213.94 1759.5,1215.36 1760.09,1212.22 1760.68,1211.85 1761.26,1213.16 1761.85,1214.59 1762.44,1214.43 1763.02,1212.56 1763.61,1210.96 1764.19,1211.16 1764.78,1212.7 1765.37,1213.91 1765.95,1213.8 1766.54,1210.83 1767.13,1206.71 1767.71,1208.5 1768.3,1208.74 1768.89,1207.7 1769.47,1207.71 1770.06,1209.14 1770.65,1212.1 1771.23,1211.85 1771.82,1213.02 1772.4,1215.51 1772.99,1216.53 1773.58,1214.77 1774.16,1216.04 1774.75,1215.53 1775.34,1215.3 1775.92,1215.06 1776.51,1213.56 1777.1,1214.89 1777.68,1211.83 1778.27,1211.91 1778.86,1210.52 1779.44,1210.74 1780.03,1209.28 1780.61,1210.73 1781.2,1213.35 1781.79,1210.34 1782.37,1211.47 1782.96,1211.23 1783.55,1212.27 1784.13,1212.2 1784.72,1213.42 1785.31,1211.94 1785.89,1211.8 1786.48,1210.14 1787.06,1208.76 1787.65,1210.17 1788.24,1208.72 1788.82,1211.76 1789.41,1212.99 1790,1211.49 1790.58,1209.63 1791.17,1208.12 1791.76,1207.84 1792.34,1209.64 1792.93,1208.16 1793.52,1209.24 1794.1,1213.46 1794.69,1210.78 1795.27,1209.33 1795.86,1208.37 1796.45,1208.41 1797.03,1210.01 1797.62,1207.46 1798.21,1209.27 1798.79,1209.53 1799.38,1208.23 1799.97,1212.35 1800.55,1210.62 1801.14,1207.8 1801.73,1210.88 1802.31,1213.84 1802.9,1212.21 1803.48,1209 1804.07,1210.63 1804.66,1207.74 1805.24,1207.94 1805.83,1213.38 1806.42,1216.05 1807,1214.26 1807.59,1216.39 1808.18,1214.74 1808.76,1211.76 1809.35,1211.58 1809.94,1214.23 1810.52,1209.82 1811.11,1205.6 1811.69,1207.19 1812.28,1207.4 1812.87,1210.26 1813.45,1215.57 1814.04,1216.73 1814.63,1216.18 1815.21,1216.92 1815.8,1214.98 1816.39,1214.85 1816.97,1215.83 1817.56,1214.4 1818.14,1208.68 1818.73,1210.24 1819.32,1215.65 1819.9,1209.93 1820.49,1211.05 1821.08,1214.87 1821.66,1214.85 1822.25,1213.34 1822.84,1211.7 1823.42,1213.13 1824.01,1214.29 1824.6,1212.56 1825.18,1209.73 1825.77,1212.74 1826.35,1214.05 1826.94,1213.79 1827.53,1211.11 1828.11,1208.26 1828.7,1205.46 1829.29,1207.26 1829.87,1205.94 1830.46,1205.98 1831.05,1205.06 1831.63,1204.07 1832.22,1205.83 1832.81,1207.34 1833.39,1203.54 1833.98,1203.99 1834.56,1203.04 1835.15,1203.31 1835.74,1203.61 1836.32,1203.86 1836.91,1205.55 1837.5,1204.29 1838.08,1201.81 1838.67,1201.81 1839.26,1203.58 1839.84,1202.61 1840.43,1203.05 1841.01,1203.57 1841.6,1202.31 1842.19,1204.17 1842.77,1206.04 1843.36,1204.68 1843.95,1204.69 1844.53,1205.43 1845.12,1207.04 1845.71,1207.38 1846.29,1207.2 1846.88,1207.7 1847.47,1209.26 1848.05,1210.79 1848.64,1212.2 1849.22,1212 1849.81,1211.71 1850.4,1208.98 1850.98,1208.92 1851.57,1210.42 1852.16,1210.3 1852.74,1210.14 1853.33,1211.14 1853.92,1208.53 1854.5,1208.72 1855.09,1206.03 1855.68,1204.79 1856.26,1207.64 1856.85,1210.07 1857.43,1211.44 1858.02,1214.12 1858.61,1215.28 1859.19,1215.12 1859.78,1214.91 1860.37,1216.02 1860.95,1214.5 1861.54,1211.56 1862.13,1211.17 1862.71,1211.15 1863.3,1208.4 1863.88,1208.43 1864.47,1209.88 1865.06,1208.71 1865.64,1211.67 1866.23,1211.42 1866.82,1211.25 1867.4,1211.38 1867.99,1212.66 1868.58,1212.29 1869.16,1213.65 1869.75,1215.09 1870.34,1214.82 1870.92,1214.26 1871.51,1211.41 1872.09,1212.79 1872.68,1212.78 1873.27,1211.12 1873.85,1209.71 1874.44,1212.35 1875.03,1212.22 1875.61,1212.24 1876.2,1211.85 1876.79,1211.9 1877.37,1211.76 1877.96,1210.2 1878.55,1208.79 1879.13,1208.71 1879.72,1210.34 1880.3,1211.91 1880.89,1213.27 1881.48,1214.52 1882.06,1214.34 1882.65,1216.79 1883.24,1217.76 1883.82,1216.16 1884.41,1214.37 1885,1209.89 1885.58,1209.99 1886.17,1211.65 1886.76,1208.74 1887.34,1209.87 1887.93,1212.63 1888.51,1216.71 1889.1,1217.55 1889.69,1215.78 1890.27,1216.8 1890.86,1213.77 1891.45,1210.48 1892.03,1206.3 1892.62,1204.91 1893.21,1203.76 1893.79,1206.86 1894.38,1206.88 1894.96,1207.19 1895.55,1207.01 1896.14,1205.94 1896.72,1204.84 1897.31,1205.36 1897.9,1207.07 1898.48,1209.84 1899.07,1208.44 1899.66,1211.22 1900.24,1209.69 1900.83,1210.79 1901.42,1210.58 1902,1209.28 1902.59,1210.59 1903.17,1211.68 1903.76,1212.89 1904.35,1212.61 1904.93,1212.76 1905.52,1209.68 1906.11,1206.87 1906.69,1204.31 1907.28,1206.13 1907.87,1208.96 1908.45,1213.14 1909.04,1212.71 1909.63,1210.97 1910.21,1208.07 1910.8,1207.79 1911.38,1211.76 1911.97,1208.74 1912.56,1207.64 1913.14,1210.58 1913.73,1209.16 1914.32,1209.42 1914.9,1209.77 1915.49,1212.39 1916.08,1210.72 1916.66,1210.76 1917.25,1210.63 1917.83,1213.25 1918.42,1213.05 1919.01,1210.27 1919.59,1210.28 1920.18,1210.09 1920.77,1210.51 1921.35,1206.53 1921.94,1209.67 1922.53,1211.05 1923.11,1214 1923.7,1209.68 1924.29,1208.24 1924.87,1209.96 1925.46,1208.6 1926.04,1210.1 1926.63,1213.19 1927.22,1211.63 1927.8,1208.68 1928.39,1212.44 1928.98,1212.26 1929.56,1210.46 1930.15,1211.77 1930.74,1211.73 1931.32,1216.08 1931.91,1214.44 1932.5,1211.33 1933.08,1210.11 1933.67,1211.66 1934.25,1213.03 1934.84,1213 1935.43,1211.55 1936.01,1208.48 1936.6,1207.12 1937.19,1208.4 1937.77,1206.85 1938.36,1204.39 1938.95,1203.61 1939.53,1205.29 1940.12,1203.92 1940.71,1207.3 1941.29,1211.55 1941.88,1211.32 1942.46,1211.13 1943.05,1211.13 1943.64,1211.66 1944.22,1210.08 1944.81,1210.22 1945.4,1210.3 1945.98,1211.67 1946.57,1213.04 1947.16,1213.04 1947.74,1211.55 1948.33,1213.02 1948.91,1208.64 1949.5,1210.22 1950.09,1211.61 1950.67,1211.65 1951.26,1208.91 1951.85,1206.15 1952.43,1205.1 1953.02,1203.86 1953.61,1205.33 1954.19,1204.08 1954.78,1202.94 1955.37,1202.18 1955.95,1204.23 1956.54,1204.39 1957.12,1208.93 1957.71,1210.46 1958.3,1207.72 1958.88,1206.39 1959.47,1210.61 1960.06,1210.57 1960.64,1212.12 1961.23,1213.46 1961.82,1211.92 1962.4,1214.56 1962.99,1214.81 1963.58,1213.12 1964.16,1213.2 1964.75,1214.26 1965.33,1213.83 1965.92,1213.68 1966.51,1213.55 1967.09,1214.59 1967.68,1217.1 1968.27,1214.24 1968.85,1213.95 1969.44,1215.32 1970.03,1214.89 1970.61,1214.62 1971.2,1211.51 1971.78,1210.11 1972.37,1211.67 1972.96,1211.45 1973.54,1211.49 1974.13,1212.37 1974.72,1212.3 1975.3,1210.5 1975.89,1211.78 1976.48,1213.14 1977.06,1213.06 1977.65,1214.28 1978.24,1216.96 1978.82,1212.52 1979.41,1211.32 1979.99,1209.83 1980.58,1208.45 1981.17,1208.4 1981.75,1210.21 1982.34,1210.03 1982.93,1208.61 1983.51,1210.08 1984.1,1210.06 1984.69,1205.83 1985.27,1206.14 1985.86,1207.41 1986.45,1205 1987.03,1202.73 1987.62,1207.59 1988.2,1207.66 1988.79,1206.23 1989.38,1203.76 1989.96,1203.94 1990.55,1207.19 1991.14,1204.66 1991.72,1204.94 1992.31,1205.31 1992.9,1207.24 1993.48,1203.64 1994.07,1201.29 1994.65,1202.03 1995.24,1203.65 1995.83,1202.58 1996.41,1205.92 1997,1207.38 1997.59,1207.45 1998.17,1207.87 1998.76,1206.83 1999.35,1206.85 1999.93,1205.69 2000.52,1205.93 2001.11,1204.87 2001.69,1205.36 2002.28,1207.04 2002.86,1204.52 2003.45,1202.06 2004.04,1203.67 2004.62,1203.91 2005.21,1206.97 2005.8,1207.39 2006.38,1209.04 2006.97,1211.98 2007.56,1208.99 2008.14,1209.15 2008.73,1209.37 2009.32,1209.69 2009.9,1208.28 2010.49,1211.48 2011.07,1214.23 2011.66,1212.75 2012.25,1211.22 2012.83,1212.31 2013.42,1213.59 2014.01,1211.99 2014.59,1208.9 2015.18,1210.35 2015.77,1211.81 2016.35,1211.91 2016.94,1213.14 2017.53,1214.28 2018.11,1213.62 2018.7,1214.85 2019.28,1215.73 2019.87,1214.13 2020.46,1212.34 2021.04,1210.4 2021.63,1209.05 2022.22,1210.52 2022.8,1212.16 2023.39,1213.43 2023.98,1210.32 2024.56,1210.29 2025.15,1211.61 2025.73,1210.47 2026.32,1208.97 2026.91,1207.54 2027.49,1204.85 2028.08,1207.89 2028.67,1209.21 2029.25,1208.25 2029.84,1210.05 2030.43,1210.32 2031.01,1210.34 2031.6,1207.2 2032.19,1207.33 2032.77,1207.45 2033.36,1203.21 2033.94,1205 2034.53,1205.29 2035.12,1205.54 2035.7,1204.49 2036.29,1203.54 2036.88,1203.92 2037.46,1204.14 2038.05,1202.94 2038.64,1201.63 2039.22,1200.73 2039.81,1202.48 2040.4,1204.21 2040.98,1203.3 2041.57,1203.76 2042.15,1201.44 2042.74,1204.44 2043.33,1203.3 2043.91,1204.57 2044.5,1207.56 2045.09,1207.93 2045.67,1209.45 2046.26,1210.73 2046.85,1210.82 2047.43,1211.83 2048.02,1213.2 2048.6,1212.79 2049.19,1208.71 2049.78,1208.81 2050.36,1209.24 2050.95,1209.35 2051.54,1208.34 2052.12,1208.5 2052.71,1207.33 2053.3,1207.68 2053.88,1206.17 2054.47,1203.5 2055.06,1200.97 2055.64,1201.59 2056.23,1202.08 2056.81,1204 2057.4,1205.75 2057.99,1205.84 2058.57,1207.58 2059.16,1204.8 2059.75,1206.65 2060.33,1207.14 2060.92,1205.59 2061.51,1208.44 2062.09,1207.29 2062.68,1205.86 2063.27,1205.89 2063.85,1208.93 2064.44,1210.51 2065.02,1211.8 2065.61,1212.08 2066.2,1214.55 2066.78,1214.38 2067.37,1213.03 2067.96,1215.73 2068.54,1216.98 2069.13,1216.76 2069.72,1215.09 2070.3,1213.65 2070.89,1215.19 2071.48,1214.71 2072.06,1215.73 2072.65,1217.87 2073.23,1218.82 2073.82,1218.26 2074.41,1215.39 2074.99,1214.98 2075.58,1213.16 2076.17,1211.49 2076.75,1212.88 2077.34,1212.62 2077.93,1212.78 2078.51,1211.34 2079.1,1209.76 2079.68,1208.36 2080.27,1209.69 2080.86,1208.42 2081.44,1209.64 2082.03,1211.16 2082.62,1213.84 2083.2,1214.69 2083.79,1212.91 2084.38,1213.89 2084.96,1213.67 2085.55,1213.58 2086.14,1211.94 2086.72,1210.49 2087.31,1209.18 2087.89,1209.16 2088.48,1213.73 2089.07,1214.86 2089.65,1216.05 2090.24,1214.27 2090.83,1212.49 2091.41,1210.8 2092,1210.31 2092.59,1211.77 2093.17,1210.48 2093.76,1211.92 2094.35,1210.54 2094.93,1210.58 2095.52,1212.12 2096.1,1210.7 2096.69,1212.08 2097.28,1210.61 2097.86,1209.17 2098.45,1210.9 2099.04,1210.66 2099.62,1209.41 2100.21,1214.86 2100.8,1211.98 2101.38,1206.39 2101.97,1205.11 2102.55,1206.81 2103.14,1209.75 2103.73,1210.05 2104.31,1211.42 2104.9,1208.77 2105.49,1206.19 2106.07,1207.74 2106.66,1209.03 2107.25,1206.14 2107.83,1205.92 2108.42,1204.79 2109.01,1206.24 2109.59,1207.8 2110.18,1206.34 2110.76,1212.23 2111.35,1213.7 2111.94,1214.92 2112.52,1211.5 2113.11,1214.19 2113.7,1213.64 2114.28,1211.87 2114.87,1211.78 2115.46,1210.39 2116.04,1210.47 2116.63,1207.45 2117.22,1209.03 2117.8,1205.07 2118.39,1205.21 2118.97,1202.57 2119.56,1205.87 2120.15,1211.4 2120.73,1208.88 2121.32,1207.61 2121.91,1206.67 2122.49,1206.49 2123.08,1206.44 2123.67,1205.5 2124.25,1205.73 2124.84,1207.57 2125.42,1208.82 2126.01,1210.36 2126.6,1210.52 2127.18,1210.41 2127.77,1209.07 2128.36,1209.08 2128.94,1207.66 2129.53,1204.82 2130.12,1203.97 2130.7,1205.38 2131.29,1204.39 2131.88,1204.62 2132.46,1203.75 2133.05,1205.78 2133.63,1205.92 2134.22,1206.14 2134.81,1204.99 2135.39,1206.83 2135.98,1208.48 2136.57,1209.93 2137.15,1210.09 2137.74,1213.14 2138.33,1214.18 2138.91,1215.13 2139.5,1214.83 2140.09,1215.9 2140.67,1216.86 2141.26,1218.06 2141.84,1217.75 2142.43,1217.44 2143.02,1217.15 2143.6,1216.61 2144.19,1216.41 2144.78,1215.93 2145.36,1214.5 2145.95,1214.42 2146.54,1214.42 2147.12,1215.75 2147.71,1218.06 2148.3,1220.51 2148.88,1219.96 2149.47,1216.73 2150.05,1219.29 2150.64,1218.56 2151.23,1219.44 2151.81,1218.87 2152.4,1219.45 2152.99,1218.88 2153.57,1217.17 2154.16,1216.85 2154.75,1217.82 2155.33,1218.79 2155.92,1218.39 2156.5,1221.87 2157.09,1218.58 2157.68,1216.63 2158.26,1216.18 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1210.81 L986.612 1210.81 L987.198 1210.81 L987.785 1210.81 L988.371 1210.81 L988.957 1210.81 L989.544 1210.81 L990.13 1210.81 L990.717 1210.81 L991.303 1210.81 L991.889 1210.81 L992.476 1210.81 L993.062 1210.81 L993.649 1210.81 L994.235 1210.81 L994.822 1210.81 L995.408 1210.81 L995.994 1210.81 L996.581 1210.81 L997.167 1210.81 L997.754 1210.81 L998.34 1210.81 L998.926 1210.81 L999.513 1210.81 L1000.1 1210.81 L1000.69 1210.81 L1001.27 1210.81 L1001.86 1210.81 L1002.44 1210.81 L1003.03 1210.81 L1003.62 1210.81 L1004.2 1210.81 L1004.79 1210.81 L1005.38 1210.81 L1005.96 1210.81 L1006.55 1210.81 L1007.14 1210.81 L1007.72 1210.81 L1008.31 1210.81 L1008.9 1210.81 L1009.48 1210.81 L1010.07 1210.81 L1010.65 1210.81 L1011.24 1210.81 L1011.83 1210.81 L1012.41 1210.81 L1013 1210.81 L1013.59 1210.81 L1014.17 1210.81 L1014.76 1210.81 L1015.35 1210.81 L1015.93 1210.81 L1016.52 1210.81 L1017.11 1210.81 L1017.69 1210.81 L1018.28 1210.81 L1018.86 1210.81 L1019.45 1210.81 L1020.04 1210.81 L1020.62 1210.81 L1021.21 1210.81 L1021.8 1210.81 L1022.38 1210.81 L1022.97 1210.81 L1023.56 1210.81 L1024.14 1210.81 L1024.73 1210.81 L1025.32 1210.81 L1025.9 1210.81 L1026.49 1210.81 L1027.07 1210.81 L1027.66 1210.81 L1028.25 1210.81 L1028.83 1210.81 L1029.42 1210.81 L1030.01 1210.81 L1030.59 1210.81 L1031.18 1210.81 L1031.77 1210.81 L1032.35 1210.81 L1032.94 1210.81 L1033.52 1210.81 L1034.11 1210.81 L1034.7 1210.81 L1035.28 1210.81 L1035.87 1210.81 L1036.46 1210.81 L1037.04 1210.81 L1037.63 1210.81 L1038.22 1210.81 L1038.8 1210.81 L1039.39 1210.81 L1039.98 1210.81 L1040.56 1210.81 L1041.15 1210.81 L1041.73 1210.81 L1042.32 1210.81 L1042.91 1210.81 L1043.49 1210.81 L1044.08 1210.81 L1044.67 1210.81 L1045.25 1210.81 L1045.84 1210.81 L1046.43 1210.81 L1047.01 1210.81 L1047.6 1210.81 L1048.19 1210.81 L1048.77 1210.81 L1049.36 1210.81 L1049.94 1210.81 L1050.53 1210.81 L1051.12 1210.81 L1051.7 1210.81 L1052.29 1210.81 L1052.88 1210.81 L1053.46 1210.81 L1054.05 1210.81 L1054.64 1210.81 L1055.22 1210.81 L1055.81 1210.81 L1056.39 1210.81 L1056.98 1210.81 L1057.57 1210.81 L1058.15 1210.81 L1058.74 1210.81 L1059.33 1210.81 L1059.91 1210.81 L1060.5 1210.81 L1061.09 1210.81 L1061.67 1210.81 L1062.26 1210.81 L1062.85 1210.81 L1063.43 1210.81 L1064.02 1210.81 L1064.6 1210.81 L1065.19 1210.81 L1065.78 1210.81 L1066.36 1210.81 L1066.95 1210.81 L1067.54 1210.81 L1068.12 1210.81 L1068.71 1210.81 L1069.3 1210.81 L1069.88 1210.81 L1070.47 1210.81 L1071.06 1210.81 L1071.64 1210.81 L1072.23 1210.81 L1072.81 1210.81 L1073.4 1210.81 L1073.99 1210.81 L1074.57 1210.81 L1075.16 1210.81 L1075.75 1210.81 L1076.33 1210.81 L1076.92 1210.81 L1077.51 1210.81 L1078.09 1210.81 L1078.68 1210.81 L1079.26 1210.81 L1079.85 1210.81 L1080.44 1210.81 L1081.02 1210.81 L1081.61 1210.81 L1082.2 1210.81 L1082.78 1210.81 L1083.37 1210.81 L1083.96 1210.81 L1084.54 1210.81 L1085.13 1210.81 L1085.72 1210.81 L1086.3 1210.81 L1086.89 1210.81 L1087.47 1210.81 L1088.06 1210.81 L1088.65 1210.81 L1089.23 1210.81 L1089.82 1210.81 L1090.41 1210.81 L1090.99 1210.81 L1091.58 1210.81 L1092.17 1210.81 L1092.75 1210.81 L1093.34 1210.81 L1093.93 1210.81 L1094.51 1210.81 L1095.1 1210.81 L1095.68 1210.81 L1096.27 1210.81 L1096.86 1210.81 L1097.44 1210.81 L1098.03 1210.81 L1098.62 1210.81 L1099.2 1210.81 L1099.79 1210.81 L1100.38 1210.81 L1100.96 1210.81 L1101.55 1210.81 L1102.14 1210.81 L1102.72 1210.81 L1103.31 1210.81 L1103.89 1210.81 L1104.48 1210.81 L1105.07 1210.81 L1105.65 1210.81 L1106.24 1210.81 L1106.83 1210.81 L1107.41 1210.81 L1108 1210.81 L1108.59 1210.81 L1109.17 1210.81 L1109.76 1210.81 L1110.34 1210.81 L1110.93 1210.81 L1111.52 1210.81 L1112.1 1210.81 L1112.69 1210.81 L1113.28 1210.81 L1113.86 1210.81 L1114.45 1210.81 L1115.04 1210.81 L1115.62 1210.81 L1116.21 1210.81 L1116.8 1210.81 L1117.38 1210.81 L1117.97 1210.81 L1118.55 1210.81 L1119.14 1210.81 L1119.73 1210.81 L1120.31 1210.81 L1120.9 1210.81 L1121.49 1210.81 L1122.07 1210.81 L1122.66 1210.81 L1123.25 1210.81 L1123.83 1210.81 L1124.42 1210.81 L1125.01 1210.81 L1125.59 1210.81 L1126.18 1210.81 L1126.76 1210.81 L1127.35 1210.81 L1127.94 1210.81 L1128.52 1210.81 L1129.11 1210.81 L1129.7 1210.81 L1130.28 1210.81 L1130.87 1210.81 L1131.46 1210.81 L1132.04 1210.81 L1132.63 1210.81 L1133.21 1210.81 L1133.8 1210.81 L1134.39 1210.81 L1134.97 1210.81 L1135.56 1210.81 L1136.15 1210.81 L1136.73 1210.81 L1137.32 1210.81 L1137.91 1210.81 L1138.49 1210.81 L1139.08 1210.81 L1139.67 1210.81 L1140.25 1210.81 L1140.84 1210.81 L1141.42 1210.81 L1142.01 1210.81 L1142.6 1210.81 L1143.18 1210.81 L1143.77 1210.81 L1144.36 1210.81 L1144.94 1210.81 L1145.53 1210.81 L1146.12 1210.81 L1146.7 1210.81 L1147.29 1210.81 L1147.88 1210.81 L1148.46 1210.81 L1149.05 1210.81 L1149.63 1210.81 L1150.22 1210.81 L1150.81 1210.81 L1151.39 1210.81 L1151.98 1210.81 L1152.57 1210.81 L1153.15 1210.81 L1153.74 1210.81 L1154.33 1210.81 L1154.91 1210.81 L1155.5 1210.81 L1156.09 1210.81 L1156.67 1210.81 L1157.26 1210.81 L1157.84 1210.81 L1158.43 1210.81 L1159.02 1210.81 L1159.6 1210.81 L1160.19 1210.81 L1160.78 1210.81 L1161.36 1210.81 L1161.95 1210.81 L1162.54 1210.81 L1163.12 1210.81 L1163.71 1210.81 L1164.29 1210.81 L1164.88 1210.81 L1165.47 1210.81 L1166.05 1210.81 L1166.64 1210.81 L1167.23 1210.81 L1167.81 1210.81 L1168.4 1210.81 L1168.99 1210.81 L1169.57 1210.81 L1170.16 1210.81 L1170.75 1210.81 L1171.33 1210.81 L1171.92 1210.81 L1172.5 1210.81 L1173.09 1210.81 L1173.68 1210.81 L1174.26 1210.81 L1174.85 1210.81 L1175.44 1210.81 L1176.02 1210.81 L1176.61 1210.81 L1177.2 1210.81 L1177.78 1210.81 L1178.37 1210.81 L1178.96 1210.81 L1179.54 1210.81 L1180.13 1210.81 L1180.71 1210.81 L1181.3 1210.81 L1181.89 1210.81 L1182.47 1210.81 L1183.06 1210.81 L1183.65 1210.81 L1184.23 1210.81 L1184.82 1210.81 L1185.41 1210.81 L1185.99 1210.81 L1186.58 1210.81 L1187.16 1210.81 L1187.75 1210.81 L1188.34 1210.81 L1188.92 1210.81 L1189.51 1210.81 L1190.1 1210.81 L1190.68 1210.81 L1191.27 1210.81 L1191.86 1210.81 L1192.44 1210.81 L1193.03 1210.81 L1193.62 1210.81 L1194.2 1210.81 L1194.79 1210.81 L1195.37 1210.81 L1195.96 1210.81 L1196.55 1210.81 L1197.13 1210.81 L1197.72 1210.81 L1198.31 1210.81 L1198.89 1210.81 L1199.48 1210.81 L1200.07 1210.81 L1200.65 1210.81 L1201.24 1210.81 L1201.83 1210.81 L1202.41 1210.81 L1203 1210.81 L1203.58 1210.81 L1204.17 1210.81 L1204.76 1210.81 L1205.34 1210.81 L1205.93 1210.81 L1206.52 1210.81 L1207.1 1210.81 L1207.69 1210.81 L1208.28 1210.81 L1208.86 1210.81 L1209.45 1210.81 L1210.03 1210.81 L1210.62 1210.81 L1211.21 1210.81 L1211.79 1210.81 L1212.38 1210.81 L1212.97 1210.81 L1213.55 1210.81 L1214.14 1210.81 L1214.73 1210.81 L1215.31 1210.81 L1215.9 1210.81 L1216.49 1210.81 L1217.07 1210.81 L1217.66 1210.81 L1218.24 1210.81 L1218.83 1210.81 L1219.42 1210.81 L1220 1210.81 L1220.59 1210.81 L1221.18 1210.81 L1221.76 1210.81 L1222.35 1210.81 L1222.94 1210.81 L1223.52 1210.81 L1224.11 1210.81 L1224.7 1210.81 L1225.28 1210.81 L1225.87 1210.81 L1226.45 1210.81 L1227.04 1210.81 L1227.63 1210.81 L1228.21 1210.81 L1228.8 1210.81 L1229.39 1210.81 L1229.97 1210.81 L1230.56 1210.81 L1231.15 1210.81 L1231.73 1210.81 L1232.32 1210.81 L1232.91 1210.81 L1233.49 1210.81 L1234.08 1210.81 L1234.66 1210.81 L1235.25 1210.81 L1235.84 1210.81 L1236.42 1210.81 L1237.01 1210.81 L1237.6 1210.81 L1238.18 1210.81 L1238.77 1210.81 L1239.36 1210.81 L1239.94 1210.81 L1240.53 1210.81 L1241.11 1210.81 L1241.7 1210.81 L1242.29 1210.81 L1242.87 1210.81 L1243.46 1210.81 L1244.05 1210.81 L1244.63 1210.81 L1245.22 1210.81 L1245.81 1210.81 L1246.39 1210.81 L1246.98 1210.81 L1247.57 1210.81 L1248.15 1210.81 L1248.74 1210.81 L1249.32 1210.81 L1249.91 1210.81 L1250.5 1210.81 L1251.08 1210.81 L1251.67 1210.81 L1252.26 1210.81 L1252.84 1210.81 L1253.43 1210.81 L1254.02 1210.81 L1254.6 1210.81 L1255.19 1210.81 L1255.78 1210.81 L1256.36 1210.81 L1256.95 1210.81 L1257.53 1210.81 L1258.12 1210.81 L1258.71 1210.81 L1259.29 1210.81 L1259.88 1210.81 L1260.47 1210.81 L1261.05 1210.81 L1261.64 1210.81 L1262.23 1210.81 L1262.81 1210.81 L1263.4 1210.81 L1263.98 1210.81 L1264.57 1210.81 L1265.16 1210.81 L1265.74 1210.81 L1266.33 1210.81 L1266.92 1210.81 L1267.5 1210.81 L1268.09 1210.81 L1268.68 1210.81 L1269.26 1210.81 L1269.85 1210.81 L1270.44 1210.81 L1271.02 1210.81 L1271.61 1210.81 L1272.19 1210.81 L1272.78 1210.81 L1273.37 1210.81 L1273.95 1210.81 L1274.54 1210.81 L1275.13 1210.81 L1275.71 1210.81 L1276.3 1210.81 L1276.89 1210.81 L1277.47 1210.81 L1278.06 1210.81 L1278.65 1210.81 L1279.23 1210.81 L1279.82 1210.81 L1280.4 1210.81 L1280.99 1210.81 L1281.58 1210.81 L1282.16 1210.81 L1282.75 1210.81 L1283.34 1210.81 L1283.92 1210.81 L1284.51 1210.81 L1285.1 1210.81 L1285.68 1210.81 L1286.27 1210.81 L1286.86 1210.81 L1287.44 1210.81 L1288.03 1210.81 L1288.61 1210.81 L1289.2 1210.81 L1289.79 1210.81 L1290.37 1210.81 L1290.96 1210.81 L1291.55 1210.81 L1292.13 1210.81 L1292.72 1210.81 L1293.31 1210.81 L1293.89 1210.81 L1294.48 1210.81 L1295.06 1210.81 L1295.65 1210.81 L1296.24 1210.81 L1296.82 1210.81 L1297.41 1210.81 L1298 1210.81 L1298.58 1210.81 L1299.17 1210.81 L1299.76 1210.81 L1300.34 1210.81 L1300.93 1210.81 L1301.52 1210.81 L1302.1 1210.81 L1302.69 1210.81 L1303.27 1210.81 L1303.86 1210.81 L1304.45 1210.81 L1305.03 1210.81 L1305.62 1210.81 L1306.21 1210.81 L1306.79 1210.81 L1307.38 1210.81 L1307.97 1210.81 L1308.55 1210.81 L1309.14 1210.81 L1309.73 1210.81 L1310.31 1210.81 L1310.9 1210.81 L1311.48 1210.81 L1312.07 1210.81 L1312.66 1210.81 L1313.24 1210.81 L1313.83 1210.81 L1314.42 1210.81 L1315 1210.81 L1315.59 1210.81 L1316.18 1210.81 L1316.76 1210.81 L1317.35 1210.81 L1317.93 1210.81 L1318.52 1210.81 L1319.11 1210.81 L1319.69 1210.81 L1320.28 1210.81 L1320.87 1210.81 L1321.45 1210.81 L1322.04 1210.81 L1322.63 1210.81 L1323.21 1210.81 L1323.8 1210.81 L1324.39 1210.81 L1324.97 1210.81 L1325.56 1210.81 L1326.14 1210.81 L1326.73 1210.81 L1327.32 1210.81 L1327.9 1210.81 L1328.49 1210.81 L1329.08 1210.81 L1329.66 1210.81 L1330.25 1210.81 L1330.84 1210.81 L1331.42 1210.81 L1332.01 1210.81 L1332.6 1210.81 L1333.18 1210.81 L1333.77 1210.81 L1334.35 1210.81 L1334.94 1210.81 L1335.53 1210.81 L1336.11 1210.81 L1336.7 1210.81 L1337.29 1210.81 L1337.87 1210.81 L1338.46 1210.81 L1339.05 1210.81 L1339.63 1210.81 L1340.22 1210.81 L1340.8 1210.81 L1341.39 1210.81 L1341.98 1210.81 L1342.56 1210.81 L1343.15 1210.81 L1343.74 1210.81 L1344.32 1210.81 L1344.91 1210.81 L1345.5 1210.81 L1346.08 1210.81 L1346.67 1210.81 L1347.26 1210.81 L1347.84 1210.81 L1348.43 1210.81 L1349.01 1210.81 L1349.6 1210.81 L1350.19 1210.81 L1350.77 1210.81 L1351.36 1210.81 L1351.95 1210.81 L1352.53 1210.81 L1353.12 1210.81 L1353.71 1210.81 L1354.29 1210.81 L1354.88 1210.81 L1355.47 1210.81 L1356.05 1210.81 L1356.64 1210.81 L1357.22 1210.81 L1357.81 1210.81 L1358.4 1210.81 L1358.98 1210.81 L1359.57 1210.81 L1360.16 1210.81 L1360.74 1210.81 L1361.33 1210.81 L1361.92 1210.81 L1362.5 1210.81 L1363.09 1210.81 L1363.68 1210.81 L1364.26 1210.81 L1364.85 1210.81 L1365.43 1210.81 L1366.02 1210.81 L1366.61 1210.81 L1367.19 1210.81 L1367.78 1210.81 L1368.37 1210.81 L1368.95 1210.81 L1369.54 1210.81 L1370.13 1210.81 L1370.71 1210.81 L1371.3 1210.81 L1371.88 1210.81 L1372.47 1210.81 L1373.06 1210.81 L1373.64 1210.81 L1374.23 1210.81 L1374.82 1210.81 L1375.4 1210.81 L1375.99 1210.81 L1376.58 1210.81 L1377.16 1210.81 L1377.75 1210.81 L1378.34 1210.81 L1378.92 1210.81 L1379.51 1210.81 L1380.09 1210.81 L1380.68 1210.81 L1381.27 1210.81 L1381.85 1210.81 L1382.44 1210.81 L1383.03 1210.81 L1383.61 1210.81 L1384.2 1210.81 L1384.79 1210.81 L1385.37 1210.81 L1385.96 1210.81 L1386.55 1210.81 L1387.13 1210.81 L1387.72 1210.81 L1388.3 1210.81 L1388.89 1210.81 L1389.48 1210.81 L1390.06 1210.81 L1390.65 1210.81 L1391.24 1210.81 L1391.82 1210.81 L1392.41 1210.81 L1393 1210.81 L1393.58 1210.81 L1394.17 1210.81 L1394.75 1210.81 L1395.34 1210.81 L1395.93 1210.81 L1396.51 1210.81 L1397.1 1210.81 L1397.69 1210.81 L1398.27 1210.81 L1398.86 1210.81 L1399.45 1210.81 L1400.03 1210.81 L1400.62 1210.81 L1401.21 1210.81 L1401.79 1210.81 L1402.38 1210.81 L1402.96 1210.81 L1403.55 1210.81 L1404.14 1210.81 L1404.72 1210.81 L1405.31 1210.81 L1405.9 1210.81 L1406.48 1210.81 L1407.07 1210.81 L1407.66 1210.81 L1408.24 1210.81 L1408.83 1210.81 L1409.42 1210.81 L1410 1210.81 L1410.59 1210.81 L1411.17 1210.81 L1411.76 1210.81 L1412.35 1210.81 L1412.93 1210.81 L1413.52 1210.81 L1414.11 1210.81 L1414.69 1210.81 L1415.28 1210.81 L1415.87 1210.81 L1416.45 1210.81 L1417.04 1210.81 L1417.63 1210.81 L1418.21 1210.81 L1418.8 1210.81 L1419.38 1210.81 L1419.97 1210.81 L1420.56 1210.81 L1421.14 1210.81 L1421.73 1210.81 L1422.32 1210.81 L1422.9 1210.81 L1423.49 1210.81 L1424.08 1210.81 L1424.66 1210.81 L1425.25 1210.81 L1425.83 1210.81 L1426.42 1210.81 L1427.01 1210.81 L1427.59 1210.81 L1428.18 1210.81 L1428.77 1210.81 L1429.35 1210.81 L1429.94 1210.81 L1430.53 1210.81 L1431.11 1210.81 L1431.7 1210.81 L1432.29 1210.81 L1432.87 1210.81 L1433.46 1210.81 L1434.04 1210.81 L1434.63 1210.81 L1435.22 1210.81 L1435.8 1210.81 L1436.39 1210.81 L1436.98 1210.81 L1437.56 1210.81 L1438.15 1210.81 L1438.74 1210.81 L1439.32 1210.81 L1439.91 1210.81 L1440.5 1210.81 L1441.08 1210.81 L1441.67 1210.81 L1442.25 1210.81 L1442.84 1210.81 L1443.43 1210.81 L1444.01 1210.81 L1444.6 1210.81 L1445.19 1210.81 L1445.77 1210.81 L1446.36 1210.81 L1446.95 1210.81 L1447.53 1210.81 L1448.12 1210.81 L1448.7 1210.81 L1449.29 1210.81 L1449.88 1210.81 L1450.46 1210.81 L1451.05 1210.81 L1451.64 1210.81 L1452.22 1210.81 L1452.81 1210.81 L1453.4 1210.81 L1453.98 1210.81 L1454.57 1210.81 L1455.16 1210.81 L1455.74 1210.81 L1456.33 1210.81 L1456.91 1210.81 L1457.5 1210.81 L1458.09 1210.81 L1458.67 1210.81 L1459.26 1210.81 L1459.85 1210.81 L1460.43 1210.81 L1461.02 1210.81 L1461.61 1210.81 L1462.19 1210.81 L1462.78 1210.81 L1463.37 1210.81 L1463.95 1210.81 L1464.54 1210.81 L1465.12 1210.81 L1465.71 1210.81 L1466.3 1210.81 L1466.88 1210.81 L1467.47 1210.81 L1468.06 1210.81 L1468.64 1210.81 L1469.23 1210.81 L1469.82 1210.81 L1470.4 1210.81 L1470.99 1210.81 L1471.57 1210.81 L1472.16 1210.81 L1472.75 1210.81 L1473.33 1210.81 L1473.92 1210.81 L1474.51 1210.81 L1475.09 1210.81 L1475.68 1210.81 L1476.27 1210.81 L1476.85 1210.81 L1477.44 1210.81 L1478.03 1210.81 L1478.61 1210.81 L1479.2 1210.81 L1479.78 1210.81 L1480.37 1210.81 L1480.96 1210.81 L1481.54 1210.81 L1482.13 1210.81 L1482.72 1210.81 L1483.3 1210.81 L1483.89 1210.81 L1484.48 1210.81 L1485.06 1210.81 L1485.65 1210.81 L1486.24 1210.81 L1486.82 1210.81 L1487.41 1210.81 L1487.99 1210.81 L1488.58 1210.81 L1489.17 1210.81 L1489.75 1210.81 L1490.34 1210.81 L1490.93 1210.81 L1491.51 1210.81 L1492.1 1210.81 L1492.69 1210.81 L1493.27 1210.81 L1493.86 1210.81 L1494.45 1210.81 L1495.03 1210.81 L1495.62 1210.81 L1496.2 1210.81 L1496.79 1210.81 L1497.38 1210.81 L1497.96 1210.81 L1498.55 1210.81 L1499.14 1210.81 L1499.72 1210.81 L1500.31 1210.81 L1500.9 1210.81 L1501.48 1210.81 L1502.07 1210.81 L1502.65 1210.81 L1503.24 1210.81 L1503.83 1210.81 L1504.41 1210.81 L1505 1210.81 L1505.59 1210.81 L1506.17 1210.81 L1506.76 1210.81 L1507.35 1210.81 L1507.93 1210.81 L1508.52 1210.81 L1509.11 1210.81 L1509.69 1210.81 L1510.28 1210.81 L1510.86 1210.81 L1511.45 1210.81 L1512.04 1210.81 L1512.62 1210.81 L1513.21 1210.81 L1513.8 1210.81 L1514.38 1210.81 L1514.97 1210.81 L1515.56 1210.81 L1516.14 1210.81 L1516.73 1210.81 L1517.32 1210.81 L1517.9 1210.81 L1518.49 1210.81 L1519.07 1210.81 L1519.66 1210.81 L1520.25 1210.81 L1520.83 1210.81 L1521.42 1210.81 L1522.01 1210.81 L1522.59 1210.81 L1523.18 1210.81 L1523.77 1210.81 L1524.35 1210.81 L1524.94 1210.81 L1525.52 1210.81 L1526.11 1210.81 L1526.7 1210.81 L1527.28 1210.81 L1527.87 1210.81 L1528.46 1210.81 L1529.04 1210.81 L1529.63 1210.81 L1530.22 1210.81 L1530.8 1210.81 L1531.39 1210.81 L1531.98 1210.81 L1532.56 1210.81 L1533.15 1210.81 L1533.73 1210.81 L1534.32 1210.81 L1534.91 1210.81 L1535.49 1210.81 L1536.08 1210.81 L1536.67 1210.81 L1537.25 1210.81 L1537.84 1210.81 L1538.43 1210.81 L1539.01 1210.81 L1539.6 1210.81 L1540.19 1210.81 L1540.77 1210.81 L1541.36 1210.81 L1541.94 1210.81 L1542.53 1210.81 L1543.12 1210.81 L1543.7 1210.81 L1544.29 1210.81 L1544.88 1210.81 L1545.46 1210.81 L1546.05 1210.81 L1546.64 1210.81 L1547.22 1210.81 L1547.81 1210.81 L1548.4 1210.81 L1548.98 1210.81 L1549.57 1210.81 L1550.15 1210.81 L1550.74 1210.81 L1551.33 1210.81 L1551.91 1210.81 L1552.5 1210.81 L1553.09 1210.81 L1553.67 1210.81 L1554.26 1210.81 L1554.85 1210.81 L1555.43 1210.81 L1556.02 1210.81 L1556.6 1210.81 L1557.19 1210.81 L1557.78 1210.81 L1558.36 1210.81 L1558.95 1210.81 L1559.54 1210.81 L1560.12 1210.81 L1560.71 1210.81 L1561.3 1210.81 L1561.88 1210.81 L1562.47 1210.81 L1563.06 1210.81 L1563.64 1210.81 L1564.23 1210.81 L1564.81 1210.81 L1565.4 1210.81 L1565.99 1210.81 L1566.57 1210.81 L1567.16 1210.81 L1567.75 1210.81 L1568.33 1210.81 L1568.92 1210.81 L1569.51 1210.81 L1570.09 1210.81 L1570.68 1210.81 L1571.27 1210.81 L1571.85 1210.81 L1572.44 1210.81 L1573.02 1210.81 L1573.61 1210.81 L1574.2 1210.81 L1574.78 1210.81 L1575.37 1210.81 L1575.96 1210.81 L1576.54 1210.81 L1577.13 1210.81 L1577.72 1210.81 L1578.3 1210.81 L1578.89 1210.81 L1579.47 1210.81 L1580.06 1210.81 L1580.65 1210.81 L1581.23 1210.81 L1581.82 1210.81 L1582.41 1210.81 L1582.99 1210.81 L1583.58 1210.81 L1584.17 1210.81 L1584.75 1210.81 L1585.34 1210.81 L1585.93 1210.81 L1586.51 1210.81 L1587.1 1210.81 L1587.68 1210.81 L1588.27 1210.81 L1588.86 1210.81 L1589.44 1210.81 L1590.03 1210.81 L1590.62 1210.81 L1591.2 1210.81 L1591.79 1210.81 L1592.38 1210.81 L1592.96 1210.81 L1593.55 1210.81 L1594.14 1210.81 L1594.72 1210.81 L1595.31 1210.81 L1595.89 1210.81 L1596.48 1210.81 L1597.07 1210.81 L1597.65 1210.81 L1598.24 1210.81 L1598.83 1210.81 L1599.41 1210.81 L1600 1210.81 L1600.59 1210.81 L1601.17 1210.81 L1601.76 1210.81 L1602.34 1210.81 L1602.93 1210.81 L1603.52 1210.81 L1604.1 1210.81 L1604.69 1210.81 L1605.28 1210.81 L1605.86 1210.81 L1606.45 1210.81 L1607.04 1210.81 L1607.62 1210.81 L1608.21 1210.81 L1608.8 1210.81 L1609.38 1210.81 L1609.97 1210.81 L1610.55 1210.81 L1611.14 1210.81 L1611.73 1210.81 L1612.31 1210.81 L1612.9 1210.81 L1613.49 1210.81 L1614.07 1210.81 L1614.66 1210.81 L1615.25 1210.81 L1615.83 1210.81 L1616.42 1210.81 L1617.01 1210.81 L1617.59 1210.81 L1618.18 1210.81 L1618.76 1210.81 L1619.35 1210.81 L1619.94 1210.81 L1620.52 1210.81 L1621.11 1210.81 L1621.7 1210.81 L1622.28 1210.81 L1622.87 1210.81 L1623.46 1210.81 L1624.04 1210.81 L1624.63 1210.81 L1625.22 1210.81 L1625.8 1210.81 L1626.39 1210.81 L1626.97 1210.81 L1627.56 1210.81 L1628.15 1210.81 L1628.73 1210.81 L1629.32 1210.81 L1629.91 1210.81 L1630.49 1210.81 L1631.08 1210.81 L1631.67 1210.81 L1632.25 1210.81 L1632.84 1210.81 L1633.42 1210.81 L1634.01 1210.81 L1634.6 1210.81 L1635.18 1210.81 L1635.77 1210.81 L1636.36 1210.81 L1636.94 1210.81 L1637.53 1210.81 L1638.12 1210.81 L1638.7 1210.81 L1639.29 1210.81 L1639.88 1210.81 L1640.46 1210.81 L1641.05 1210.81 L1641.63 1210.81 L1642.22 1210.81 L1642.81 1210.81 L1643.39 1210.81 L1643.98 1210.81 L1644.57 1210.81 L1645.15 1210.81 L1645.74 1210.81 L1646.33 1210.81 L1646.91 1210.81 L1647.5 1210.81 L1648.09 1210.81 L1648.67 1210.81 L1649.26 1210.81 L1649.84 1210.81 L1650.43 1210.81 L1651.02 1210.81 L1651.6 1210.81 L1652.19 1210.81 L1652.78 1210.81 L1653.36 1210.81 L1653.95 1210.81 L1654.54 1210.81 L1655.12 1210.81 L1655.71 1210.81 L1656.29 1210.81 L1656.88 1210.81 L1657.47 1210.81 L1658.05 1210.81 L1658.64 1210.81 L1659.23 1210.81 L1659.81 1210.81 L1660.4 1210.81 L1660.99 1210.81 L1661.57 1210.81 L1662.16 1210.81 L1662.75 1210.81 L1663.33 1210.81 L1663.92 1210.81 L1664.5 1210.81 L1665.09 1210.81 L1665.68 1210.81 L1666.26 1210.81 L1666.85 1210.81 L1667.44 1210.81 L1668.02 1210.81 L1668.61 1210.81 L1669.2 1210.81 L1669.78 1210.81 L1670.37 1210.81 L1670.96 1210.81 L1671.54 1210.81 L1672.13 1210.81 L1672.71 1210.81 L1673.3 1210.81 L1673.89 1210.81 L1674.47 1210.81 L1675.06 1210.81 L1675.65 1210.81 L1676.23 1210.81 L1676.82 1210.81 L1677.41 1210.81 L1677.99 1210.81 L1678.58 1210.81 L1679.17 1210.81 L1679.75 1210.81 L1680.34 1210.81 L1680.92 1210.81 L1681.51 1210.81 L1682.1 1210.81 L1682.68 1210.81 L1683.27 1210.81 L1683.86 1210.81 L1684.44 1210.81 L1685.03 1210.81 L1685.62 1210.81 L1686.2 1210.81 L1686.79 1210.81 L1687.37 1210.81 L1687.96 1210.81 L1688.55 1210.81 L1689.13 1210.81 L1689.72 1210.81 L1690.31 1210.81 L1690.89 1210.81 L1691.48 1210.81 L1692.07 1210.81 L1692.65 1210.81 L1693.24 1210.81 L1693.83 1210.81 L1694.41 1210.81 L1695 1210.81 L1695.58 1210.81 L1696.17 1210.81 L1696.76 1210.81 L1697.34 1210.81 L1697.93 1210.81 L1698.52 1210.81 L1699.1 1210.81 L1699.69 1210.81 L1700.28 1210.81 L1700.86 1210.81 L1701.45 1210.81 L1702.04 1210.81 L1702.62 1210.81 L1703.21 1210.81 L1703.79 1210.81 L1704.38 1210.81 L1704.97 1210.81 L1705.55 1210.81 L1706.14 1210.81 L1706.73 1210.81 L1707.31 1210.81 L1707.9 1210.81 L1708.49 1210.81 L1709.07 1210.81 L1709.66 1210.81 L1710.24 1210.81 L1710.83 1210.81 L1711.42 1210.81 L1712 1210.81 L1712.59 1210.81 L1713.18 1210.81 L1713.76 1210.81 L1714.35 1210.81 L1714.94 1210.81 L1715.52 1210.81 L1716.11 1210.81 L1716.7 1210.81 L1717.28 1210.81 L1717.87 1210.81 L1718.45 1210.81 L1719.04 1210.81 L1719.63 1210.81 L1720.21 1210.81 L1720.8 1210.81 L1721.39 1210.81 L1721.97 1210.81 L1722.56 1210.81 L1723.15 1210.81 L1723.73 1210.81 L1724.32 1210.81 L1724.91 1210.81 L1725.49 1210.81 L1726.08 1210.81 L1726.66 1210.81 L1727.25 1210.81 L1727.84 1210.81 L1728.42 1210.81 L1729.01 1210.81 L1729.6 1210.81 L1730.18 1210.81 L1730.77 1210.81 L1731.36 1210.81 L1731.94 1210.81 L1732.53 1210.81 L1733.11 1210.81 L1733.7 1210.81 L1734.29 1210.81 L1734.87 1210.81 L1735.46 1210.81 L1736.05 1210.81 L1736.63 1210.81 L1737.22 1210.81 L1737.81 1210.81 L1738.39 1210.81 L1738.98 1210.81 L1739.57 1210.81 L1740.15 1210.81 L1740.74 1210.81 L1741.32 1210.81 L1741.91 1210.81 L1742.5 1210.81 L1743.08 1210.81 L1743.67 1210.81 L1744.26 1210.81 L1744.84 1210.81 L1745.43 1210.81 L1746.02 1210.81 L1746.6 1210.81 L1747.19 1210.81 L1747.78 1210.81 L1748.36 1210.81 L1748.95 1210.81 L1749.53 1210.81 L1750.12 1210.81 L1750.71 1210.81 L1751.29 1210.81 L1751.88 1210.81 L1752.47 1210.81 L1753.05 1210.81 L1753.64 1210.81 L1754.23 1210.81 L1754.81 1210.81 L1755.4 1210.81 L1755.99 1210.81 L1756.57 1210.81 L1757.16 1210.81 L1757.74 1210.81 L1758.33 1210.81 L1758.92 1210.81 L1759.5 1210.81 L1760.09 1210.81 L1760.68 1210.81 L1761.26 1210.81 L1761.85 1210.81 L1762.44 1210.81 L1763.02 1210.81 L1763.61 1210.81 L1764.19 1210.81 L1764.78 1210.81 L1765.37 1210.81 L1765.95 1210.81 L1766.54 1210.81 L1767.13 1210.81 L1767.71 1210.81 L1768.3 1210.81 L1768.89 1210.81 L1769.47 1210.81 L1770.06 1210.81 L1770.65 1210.81 L1771.23 1210.81 L1771.82 1210.81 L1772.4 1210.81 L1772.99 1210.81 L1773.58 1210.81 L1774.16 1210.81 L1774.75 1210.81 L1775.34 1210.81 L1775.92 1210.81 L1776.51 1210.81 L1777.1 1210.81 L1777.68 1210.81 L1778.27 1210.81 L1778.86 1210.81 L1779.44 1210.81 L1780.03 1210.81 L1780.61 1210.81 L1781.2 1210.81 L1781.79 1210.81 L1782.37 1210.81 L1782.96 1210.81 L1783.55 1210.81 L1784.13 1210.81 L1784.72 1210.81 L1785.31 1210.81 L1785.89 1210.81 L1786.48 1210.81 L1787.06 1210.81 L1787.65 1210.81 L1788.24 1210.81 L1788.82 1210.81 L1789.41 1210.81 L1790 1210.81 L1790.58 1210.81 L1791.17 1210.81 L1791.76 1210.81 L1792.34 1210.81 L1792.93 1210.81 L1793.52 1210.81 L1794.1 1210.81 L1794.69 1210.81 L1795.27 1210.81 L1795.86 1210.81 L1796.45 1210.81 L1797.03 1210.81 L1797.62 1210.81 L1798.21 1210.81 L1798.79 1210.81 L1799.38 1210.81 L1799.97 1210.81 L1800.55 1210.81 L1801.14 1210.81 L1801.73 1210.81 L1802.31 1210.81 L1802.9 1210.81 L1803.48 1210.81 L1804.07 1210.81 L1804.66 1210.81 L1805.24 1210.81 L1805.83 1210.81 L1806.42 1210.81 L1807 1210.81 L1807.59 1210.81 L1808.18 1210.81 L1808.76 1210.81 L1809.35 1210.81 L1809.94 1210.81 L1810.52 1210.81 L1811.11 1210.81 L1811.69 1210.81 L1812.28 1210.81 L1812.87 1210.81 L1813.45 1210.81 L1814.04 1210.81 L1814.63 1210.81 L1815.21 1210.81 L1815.8 1210.81 L1816.39 1210.81 L1816.97 1210.81 L1817.56 1210.81 L1818.14 1210.81 L1818.73 1210.81 L1819.32 1210.81 L1819.9 1210.81 L1820.49 1210.81 L1821.08 1210.81 L1821.66 1210.81 L1822.25 1210.81 L1822.84 1210.81 L1823.42 1210.81 L1824.01 1210.81 L1824.6 1210.81 L1825.18 1210.81 L1825.77 1210.81 L1826.35 1210.81 L1826.94 1210.81 L1827.53 1210.81 L1828.11 1210.81 L1828.7 1210.81 L1829.29 1210.81 L1829.87 1210.81 L1830.46 1210.81 L1831.05 1210.81 L1831.63 1210.81 L1832.22 1210.81 L1832.81 1210.81 L1833.39 1210.81 L1833.98 1210.81 L1834.56 1210.81 L1835.15 1210.81 L1835.74 1210.81 L1836.32 1210.81 L1836.91 1210.81 L1837.5 1210.81 L1838.08 1210.81 L1838.67 1210.81 L1839.26 1210.81 L1839.84 1210.81 L1840.43 1210.81 L1841.01 1210.81 L1841.6 1210.81 L1842.19 1210.81 L1842.77 1210.81 L1843.36 1210.81 L1843.95 1210.81 L1844.53 1210.81 L1845.12 1210.81 L1845.71 1210.81 L1846.29 1210.81 L1846.88 1210.81 L1847.47 1210.81 L1848.05 1210.81 L1848.64 1210.81 L1849.22 1210.81 L1849.81 1210.81 L1850.4 1210.81 L1850.98 1210.81 L1851.57 1210.81 L1852.16 1210.81 L1852.74 1210.81 L1853.33 1210.81 L1853.92 1210.81 L1854.5 1210.81 L1855.09 1210.81 L1855.68 1210.81 L1856.26 1210.81 L1856.85 1210.81 L1857.43 1210.81 L1858.02 1210.81 L1858.61 1210.81 L1859.19 1210.81 L1859.78 1210.81 L1860.37 1210.81 L1860.95 1210.81 L1861.54 1210.81 L1862.13 1210.81 L1862.71 1210.81 L1863.3 1210.81 L1863.88 1210.81 L1864.47 1210.81 L1865.06 1210.81 L1865.64 1210.81 L1866.23 1210.81 L1866.82 1210.81 L1867.4 1210.81 L1867.99 1210.81 L1868.58 1210.81 L1869.16 1210.81 L1869.75 1210.81 L1870.34 1210.81 L1870.92 1210.81 L1871.51 1210.81 L1872.09 1210.81 L1872.68 1210.81 L1873.27 1210.81 L1873.85 1210.81 L1874.44 1210.81 L1875.03 1210.81 L1875.61 1210.81 L1876.2 1210.81 L1876.79 1210.81 L1877.37 1210.81 L1877.96 1210.81 L1878.55 1210.81 L1879.13 1210.81 L1879.72 1210.81 L1880.3 1210.81 L1880.89 1210.81 L1881.48 1210.81 L1882.06 1210.81 L1882.65 1210.81 L1883.24 1210.81 L1883.82 1210.81 L1884.41 1210.81 L1885 1210.81 L1885.58 1210.81 L1886.17 1210.81 L1886.76 1210.81 L1887.34 1210.81 L1887.93 1210.81 L1888.51 1210.81 L1889.1 1210.81 L1889.69 1210.81 L1890.27 1210.81 L1890.86 1210.81 L1891.45 1210.81 L1892.03 1210.81 L1892.62 1210.81 L1893.21 1210.81 L1893.79 1210.81 L1894.38 1210.81 L1894.96 1210.81 L1895.55 1210.81 L1896.14 1210.81 L1896.72 1210.81 L1897.31 1210.81 L1897.9 1210.81 L1898.48 1210.81 L1899.07 1210.81 L1899.66 1210.81 L1900.24 1210.81 L1900.83 1210.81 L1901.42 1210.81 L1902 1210.81 L1902.59 1210.81 L1903.17 1210.81 L1903.76 1210.81 L1904.35 1210.81 L1904.93 1210.81 L1905.52 1210.81 L1906.11 1210.81 L1906.69 1210.81 L1907.28 1210.81 L1907.87 1210.81 L1908.45 1210.81 L1909.04 1210.81 L1909.63 1210.81 L1910.21 1210.81 L1910.8 1210.81 L1911.38 1210.81 L1911.97 1210.81 L1912.56 1210.81 L1913.14 1210.81 L1913.73 1210.81 L1914.32 1210.81 L1914.9 1210.81 L1915.49 1210.81 L1916.08 1210.81 L1916.66 1210.81 L1917.25 1210.81 L1917.83 1210.81 L1918.42 1210.81 L1919.01 1210.81 L1919.59 1210.81 L1920.18 1210.81 L1920.77 1210.81 L1921.35 1210.81 L1921.94 1210.81 L1922.53 1210.81 L1923.11 1210.81 L1923.7 1210.81 L1924.29 1210.81 L1924.87 1210.81 L1925.46 1210.81 L1926.04 1210.81 L1926.63 1210.81 L1927.22 1210.81 L1927.8 1210.81 L1928.39 1210.81 L1928.98 1210.81 L1929.56 1210.81 L1930.15 1210.81 L1930.74 1210.81 L1931.32 1210.81 L1931.91 1210.81 L1932.5 1210.81 L1933.08 1210.81 L1933.67 1210.81 L1934.25 1210.81 L1934.84 1210.81 L1935.43 1210.81 L1936.01 1210.81 L1936.6 1210.81 L1937.19 1210.81 L1937.77 1210.81 L1938.36 1210.81 L1938.95 1210.81 L1939.53 1210.81 L1940.12 1210.81 L1940.71 1210.81 L1941.29 1210.81 L1941.88 1210.81 L1942.46 1210.81 L1943.05 1210.81 L1943.64 1210.81 L1944.22 1210.81 L1944.81 1210.81 L1945.4 1210.81 L1945.98 1210.81 L1946.57 1210.81 L1947.16 1210.81 L1947.74 1210.81 L1948.33 1210.81 L1948.91 1210.81 L1949.5 1210.81 L1950.09 1210.81 L1950.67 1210.81 L1951.26 1210.81 L1951.85 1210.81 L1952.43 1210.81 L1953.02 1210.81 L1953.61 1210.81 L1954.19 1210.81 L1954.78 1210.81 L1955.37 1210.81 L1955.95 1210.81 L1956.54 1210.81 L1957.12 1210.81 L1957.71 1210.81 L1958.3 1210.81 L1958.88 1210.81 L1959.47 1210.81 L1960.06 1210.81 L1960.64 1210.81 L1961.23 1210.81 L1961.82 1210.81 L1962.4 1210.81 L1962.99 1210.81 L1963.58 1210.81 L1964.16 1210.81 L1964.75 1210.81 L1965.33 1210.81 L1965.92 1210.81 L1966.51 1210.81 L1967.09 1210.81 L1967.68 1210.81 L1968.27 1210.81 L1968.85 1210.81 L1969.44 1210.81 L1970.03 1210.81 L1970.61 1210.81 L1971.2 1210.81 L1971.78 1210.81 L1972.37 1210.81 L1972.96 1210.81 L1973.54 1210.81 L1974.13 1210.81 L1974.72 1210.81 L1975.3 1210.81 L1975.89 1210.81 L1976.48 1210.81 L1977.06 1210.81 L1977.65 1210.81 L1978.24 1210.81 L1978.82 1210.81 L1979.41 1210.81 L1979.99 1210.81 L1980.58 1210.81 L1981.17 1210.81 L1981.75 1210.81 L1982.34 1210.81 L1982.93 1210.81 L1983.51 1210.81 L1984.1 1210.81 L1984.69 1210.81 L1985.27 1210.81 L1985.86 1210.81 L1986.45 1210.81 L1987.03 1210.81 L1987.62 1210.81 L1988.2 1210.81 L1988.79 1210.81 L1989.38 1210.81 L1989.96 1210.81 L1990.55 1210.81 L1991.14 1210.81 L1991.72 1210.81 L1992.31 1210.81 L1992.9 1210.81 L1993.48 1210.81 L1994.07 1210.81 L1994.65 1210.81 L1995.24 1210.81 L1995.83 1210.81 L1996.41 1210.81 L1997 1210.81 L1997.59 1210.81 L1998.17 1210.81 L1998.76 1210.81 L1999.35 1210.81 L1999.93 1210.81 L2000.52 1210.81 L2001.11 1210.81 L2001.69 1210.81 L2002.28 1210.81 L2002.86 1210.81 L2003.45 1210.81 L2004.04 1210.81 L2004.62 1210.81 L2005.21 1210.81 L2005.8 1210.81 L2006.38 1210.81 L2006.97 1210.81 L2007.56 1210.81 L2008.14 1210.81 L2008.73 1210.81 L2009.32 1210.81 L2009.9 1210.81 L2010.49 1210.81 L2011.07 1210.81 L2011.66 1210.81 L2012.25 1210.81 L2012.83 1210.81 L2013.42 1210.81 L2014.01 1210.81 L2014.59 1210.81 L2015.18 1210.81 L2015.77 1210.81 L2016.35 1210.81 L2016.94 1210.81 L2017.53 1210.81 L2018.11 1210.81 L2018.7 1210.81 L2019.28 1210.81 L2019.87 1210.81 L2020.46 1210.81 L2021.04 1210.81 L2021.63 1210.81 L2022.22 1210.81 L2022.8 1210.81 L2023.39 1210.81 L2023.98 1210.81 L2024.56 1210.81 L2025.15 1210.81 L2025.73 1210.81 L2026.32 1210.81 L2026.91 1210.81 L2027.49 1210.81 L2028.08 1210.81 L2028.67 1210.81 L2029.25 1210.81 L2029.84 1210.81 L2030.43 1210.81 L2031.01 1210.81 L2031.6 1210.81 L2032.19 1210.81 L2032.77 1210.81 L2033.36 1210.81 L2033.94 1210.81 L2034.53 1210.81 L2035.12 1210.81 L2035.7 1210.81 L2036.29 1210.81 L2036.88 1210.81 L2037.46 1210.81 L2038.05 1210.81 L2038.64 1210.81 L2039.22 1210.81 L2039.81 1210.81 L2040.4 1210.81 L2040.98 1210.81 L2041.57 1210.81 L2042.15 1210.81 L2042.74 1210.81 L2043.33 1210.81 L2043.91 1210.81 L2044.5 1210.81 L2045.09 1210.81 L2045.67 1210.81 L2046.26 1210.81 L2046.85 1210.81 L2047.43 1210.81 L2048.02 1210.81 L2048.6 1210.81 L2049.19 1210.81 L2049.78 1210.81 L2050.36 1210.81 L2050.95 1210.81 L2051.54 1210.81 L2052.12 1210.81 L2052.71 1210.81 L2053.3 1210.81 L2053.88 1210.81 L2054.47 1210.81 L2055.06 1210.81 L2055.64 1210.81 L2056.23 1210.81 L2056.81 1210.81 L2057.4 1210.81 L2057.99 1210.81 L2058.57 1210.81 L2059.16 1210.81 L2059.75 1210.81 L2060.33 1210.81 L2060.92 1210.81 L2061.51 1210.81 L2062.09 1210.81 L2062.68 1210.81 L2063.27 1210.81 L2063.85 1210.81 L2064.44 1210.81 L2065.02 1210.81 L2065.61 1210.81 L2066.2 1210.81 L2066.78 1210.81 L2067.37 1210.81 L2067.96 1210.81 L2068.54 1210.81 L2069.13 1210.81 L2069.72 1210.81 L2070.3 1210.81 L2070.89 1210.81 L2071.48 1210.81 L2072.06 1210.81 L2072.65 1210.81 L2073.23 1210.81 L2073.82 1210.81 L2074.41 1210.81 L2074.99 1210.81 L2075.58 1210.81 L2076.17 1210.81 L2076.75 1210.81 L2077.34 1210.81 L2077.93 1210.81 L2078.51 1210.81 L2079.1 1210.81 L2079.68 1210.81 L2080.27 1210.81 L2080.86 1210.81 L2081.44 1210.81 L2082.03 1210.81 L2082.62 1210.81 L2083.2 1210.81 L2083.79 1210.81 L2084.38 1210.81 L2084.96 1210.81 L2085.55 1210.81 L2086.14 1210.81 L2086.72 1210.81 L2087.31 1210.81 L2087.89 1210.81 L2088.48 1210.81 L2089.07 1210.81 L2089.65 1210.81 L2090.24 1210.81 L2090.83 1210.81 L2091.41 1210.81 L2092 1210.81 L2092.59 1210.81 L2093.17 1210.81 L2093.76 1210.81 L2094.35 1210.81 L2094.93 1210.81 L2095.52 1210.81 L2096.1 1210.81 L2096.69 1210.81 L2097.28 1210.81 L2097.86 1210.81 L2098.45 1210.81 L2099.04 1210.81 L2099.62 1210.81 L2100.21 1210.81 L2100.8 1210.81 L2101.38 1210.81 L2101.97 1210.81 L2102.55 1210.81 L2103.14 1210.81 L2103.73 1210.81 L2104.31 1210.81 L2104.9 1210.81 L2105.49 1210.81 L2106.07 1210.81 L2106.66 1210.81 L2107.25 1210.81 L2107.83 1210.81 L2108.42 1210.81 L2109.01 1210.81 L2109.59 1210.81 L2110.18 1210.81 L2110.76 1210.81 L2111.35 1210.81 L2111.94 1210.81 L2112.52 1210.81 L2113.11 1210.81 L2113.7 1210.81 L2114.28 1210.81 L2114.87 1210.81 L2115.46 1210.81 L2116.04 1210.81 L2116.63 1210.81 L2117.22 1210.81 L2117.8 1210.81 L2118.39 1210.81 L2118.97 1210.81 L2119.56 1210.81 L2120.15 1210.81 L2120.73 1210.81 L2121.32 1210.81 L2121.91 1210.81 L2122.49 1210.81 L2123.08 1210.81 L2123.67 1210.81 L2124.25 1210.81 L2124.84 1210.81 L2125.42 1210.81 L2126.01 1210.81 L2126.6 1210.81 L2127.18 1210.81 L2127.77 1210.81 L2128.36 1210.81 L2128.94 1210.81 L2129.53 1210.81 L2130.12 1210.81 L2130.7 1210.81 L2131.29 1210.81 L2131.88 1210.81 L2132.46 1210.81 L2133.05 1210.81 L2133.63 1210.81 L2134.22 1210.81 L2134.81 1210.81 L2135.39 1210.81 L2135.98 1210.81 L2136.57 1210.81 L2137.15 1210.81 L2137.74 1210.81 L2138.33 1210.81 L2138.91 1210.81 L2139.5 1210.81 L2140.09 1210.81 L2140.67 1210.81 L2141.26 1210.81 L2141.84 1210.81 L2142.43 1210.81 L2143.02 1210.81 L2143.6 1210.81 L2144.19 1210.81 L2144.78 1210.81 L2145.36 1210.81 L2145.95 1210.81 L2146.54 1210.81 L2147.12 1210.81 L2147.71 1210.81 L2148.3 1210.81 L2148.88 1210.81 L2149.47 1210.81 L2150.05 1210.81 L2150.64 1210.81 L2151.23 1210.81 L2151.81 1210.81 L2152.4 1210.81 L2152.99 1210.81 L2153.57 1210.81 L2154.16 1210.81 L2154.75 1210.81 L2155.33 1210.81 L2155.92 1210.81 L2156.5 1210.81 L2157.09 1210.81 L2157.68 1210.81 L2158.26 1210.81 L2158.26 1210.05 L2157.68 1210.05 L2157.09 1210.05 L2156.5 1210.05 L2155.92 1210.05 L2155.33 1210.05 L2154.75 1210.05 L2154.16 1210.05 L2153.57 1210.05 L2152.99 1210.05 L2152.4 1210.05 L2151.81 1210.05 L2151.23 1210.05 L2150.64 1210.05 L2150.05 1210.05 L2149.47 1210.05 L2148.88 1210.05 L2148.3 1210.05 L2147.71 1210.05 L2147.12 1210.05 L2146.54 1210.05 L2145.95 1210.05 L2145.36 1210.05 L2144.78 1210.05 L2144.19 1210.05 L2143.6 1210.05 L2143.02 1210.05 L2142.43 1210.05 L2141.84 1210.05 L2141.26 1210.05 L2140.67 1210.05 L2140.09 1210.05 L2139.5 1210.05 L2138.91 1210.05 L2138.33 1210.05 L2137.74 1210.05 L2137.15 1210.05 L2136.57 1210.05 L2135.98 1210.05 L2135.39 1210.05 L2134.81 1210.05 L2134.22 1210.05 L2133.63 1210.05 L2133.05 1210.05 L2132.46 1210.05 L2131.88 1210.05 L2131.29 1210.05 L2130.7 1210.05 L2130.12 1210.05 L2129.53 1210.05 L2128.94 1210.05 L2128.36 1210.05 L2127.77 1210.05 L2127.18 1210.05 L2126.6 1210.05 L2126.01 1210.05 L2125.42 1210.05 L2124.84 1210.05 L2124.25 1210.05 L2123.67 1210.05 L2123.08 1210.05 L2122.49 1210.05 L2121.91 1210.05 L2121.32 1210.05 L2120.73 1210.05 L2120.15 1210.05 L2119.56 1210.05 L2118.97 1210.05 L2118.39 1210.05 L2117.8 1210.05 L2117.22 1210.05 L2116.63 1210.05 L2116.04 1210.05 L2115.46 1210.05 L2114.87 1210.05 L2114.28 1210.05 L2113.7 1210.05 L2113.11 1210.05 L2112.52 1210.05 L2111.94 1210.05 L2111.35 1210.05 L2110.76 1210.05 L2110.18 1210.05 L2109.59 1210.05 L2109.01 1210.05 L2108.42 1210.05 L2107.83 1210.05 L2107.25 1210.05 L2106.66 1210.05 L2106.07 1210.05 L2105.49 1210.05 L2104.9 1210.05 L2104.31 1210.05 L2103.73 1210.05 L2103.14 1210.05 L2102.55 1210.05 L2101.97 1210.05 L2101.38 1210.05 L2100.8 1210.05 L2100.21 1210.05 L2099.62 1210.05 L2099.04 1210.05 L2098.45 1210.05 L2097.86 1210.05 L2097.28 1210.05 L2096.69 1210.05 L2096.1 1210.05 L2095.52 1210.05 L2094.93 1210.05 L2094.35 1210.05 L2093.76 1210.05 L2093.17 1210.05 L2092.59 1210.05 L2092 1210.05 L2091.41 1210.05 L2090.83 1210.05 L2090.24 1210.05 L2089.65 1210.05 L2089.07 1210.05 L2088.48 1210.05 L2087.89 1210.05 L2087.31 1210.05 L2086.72 1210.05 L2086.14 1210.05 L2085.55 1210.05 L2084.96 1210.05 L2084.38 1210.05 L2083.79 1210.05 L2083.2 1210.05 L2082.62 1210.05 L2082.03 1210.05 L2081.44 1210.05 L2080.86 1210.05 L2080.27 1210.05 L2079.68 1210.05 L2079.1 1210.05 L2078.51 1210.05 L2077.93 1210.05 L2077.34 1210.05 L2076.75 1210.05 L2076.17 1210.05 L2075.58 1210.05 L2074.99 1210.05 L2074.41 1210.05 L2073.82 1210.05 L2073.23 1210.05 L2072.65 1210.05 L2072.06 1210.05 L2071.48 1210.05 L2070.89 1210.05 L2070.3 1210.05 L2069.72 1210.05 L2069.13 1210.05 L2068.54 1210.05 L2067.96 1210.05 L2067.37 1210.05 L2066.78 1210.05 L2066.2 1210.05 L2065.61 1210.05 L2065.02 1210.05 L2064.44 1210.05 L2063.85 1210.05 L2063.27 1210.05 L2062.68 1210.05 L2062.09 1210.05 L2061.51 1210.05 L2060.92 1210.05 L2060.33 1210.05 L2059.75 1210.05 L2059.16 1210.05 L2058.57 1210.05 L2057.99 1210.05 L2057.4 1210.05 L2056.81 1210.05 L2056.23 1210.05 L2055.64 1210.05 L2055.06 1210.05 L2054.47 1210.05 L2053.88 1210.05 L2053.3 1210.05 L2052.71 1210.05 L2052.12 1210.05 L2051.54 1210.05 L2050.95 1210.05 L2050.36 1210.05 L2049.78 1210.05 L2049.19 1210.05 L2048.6 1210.05 L2048.02 1210.05 L2047.43 1210.05 L2046.85 1210.05 L2046.26 1210.05 L2045.67 1210.05 L2045.09 1210.05 L2044.5 1210.05 L2043.91 1210.05 L2043.33 1210.05 L2042.74 1210.05 L2042.15 1210.05 L2041.57 1210.05 L2040.98 1210.05 L2040.4 1210.05 L2039.81 1210.05 L2039.22 1210.05 L2038.64 1210.05 L2038.05 1210.05 L2037.46 1210.05 L2036.88 1210.05 L2036.29 1210.05 L2035.7 1210.05 L2035.12 1210.05 L2034.53 1210.05 L2033.94 1210.05 L2033.36 1210.05 L2032.77 1210.05 L2032.19 1210.05 L2031.6 1210.05 L2031.01 1210.05 L2030.43 1210.05 L2029.84 1210.05 L2029.25 1210.05 L2028.67 1210.05 L2028.08 1210.05 L2027.49 1210.05 L2026.91 1210.05 L2026.32 1210.05 L2025.73 1210.05 L2025.15 1210.05 L2024.56 1210.05 L2023.98 1210.05 L2023.39 1210.05 L2022.8 1210.05 L2022.22 1210.05 L2021.63 1210.05 L2021.04 1210.05 L2020.46 1210.05 L2019.87 1210.05 L2019.28 1210.05 L2018.7 1210.05 L2018.11 1210.05 L2017.53 1210.05 L2016.94 1210.05 L2016.35 1210.05 L2015.77 1210.05 L2015.18 1210.05 L2014.59 1210.05 L2014.01 1210.05 L2013.42 1210.05 L2012.83 1210.05 L2012.25 1210.05 L2011.66 1210.05 L2011.07 1210.05 L2010.49 1210.05 L2009.9 1210.05 L2009.32 1210.05 L2008.73 1210.05 L2008.14 1210.05 L2007.56 1210.05 L2006.97 1210.05 L2006.38 1210.05 L2005.8 1210.05 L2005.21 1210.05 L2004.62 1210.05 L2004.04 1210.05 L2003.45 1210.05 L2002.86 1210.05 L2002.28 1210.05 L2001.69 1210.05 L2001.11 1210.05 L2000.52 1210.05 L1999.93 1210.05 L1999.35 1210.05 L1998.76 1210.05 L1998.17 1210.05 L1997.59 1210.05 L1997 1210.05 L1996.41 1210.05 L1995.83 1210.05 L1995.24 1210.05 L1994.65 1210.05 L1994.07 1210.05 L1993.48 1210.05 L1992.9 1210.05 L1992.31 1210.05 L1991.72 1210.05 L1991.14 1210.05 L1990.55 1210.05 L1989.96 1210.05 L1989.38 1210.05 L1988.79 1210.05 L1988.2 1210.05 L1987.62 1210.05 L1987.03 1210.05 L1986.45 1210.05 L1985.86 1210.05 L1985.27 1210.05 L1984.69 1210.05 L1984.1 1210.05 L1983.51 1210.05 L1982.93 1210.05 L1982.34 1210.05 L1981.75 1210.05 L1981.17 1210.05 L1980.58 1210.05 L1979.99 1210.05 L1979.41 1210.05 L1978.82 1210.05 L1978.24 1210.05 L1977.65 1210.05 L1977.06 1210.05 L1976.48 1210.05 L1975.89 1210.05 L1975.3 1210.05 L1974.72 1210.05 L1974.13 1210.05 L1973.54 1210.05 L1972.96 1210.05 L1972.37 1210.05 L1971.78 1210.05 L1971.2 1210.05 L1970.61 1210.05 L1970.03 1210.05 L1969.44 1210.05 L1968.85 1210.05 L1968.27 1210.05 L1967.68 1210.05 L1967.09 1210.05 L1966.51 1210.05 L1965.92 1210.05 L1965.33 1210.05 L1964.75 1210.05 L1964.16 1210.05 L1963.58 1210.05 L1962.99 1210.05 L1962.4 1210.05 L1961.82 1210.05 L1961.23 1210.05 L1960.64 1210.05 L1960.06 1210.05 L1959.47 1210.05 L1958.88 1210.05 L1958.3 1210.05 L1957.71 1210.05 L1957.12 1210.05 L1956.54 1210.05 L1955.95 1210.05 L1955.37 1210.05 L1954.78 1210.05 L1954.19 1210.05 L1953.61 1210.05 L1953.02 1210.05 L1952.43 1210.05 L1951.85 1210.05 L1951.26 1210.05 L1950.67 1210.05 L1950.09 1210.05 L1949.5 1210.05 L1948.91 1210.05 L1948.33 1210.05 L1947.74 1210.05 L1947.16 1210.05 L1946.57 1210.05 L1945.98 1210.05 L1945.4 1210.05 L1944.81 1210.05 L1944.22 1210.05 L1943.64 1210.05 L1943.05 1210.05 L1942.46 1210.05 L1941.88 1210.05 L1941.29 1210.05 L1940.71 1210.05 L1940.12 1210.05 L1939.53 1210.05 L1938.95 1210.05 L1938.36 1210.05 L1937.77 1210.05 L1937.19 1210.05 L1936.6 1210.05 L1936.01 1210.05 L1935.43 1210.05 L1934.84 1210.05 L1934.25 1210.05 L1933.67 1210.05 L1933.08 1210.05 L1932.5 1210.05 L1931.91 1210.05 L1931.32 1210.05 L1930.74 1210.05 L1930.15 1210.05 L1929.56 1210.05 L1928.98 1210.05 L1928.39 1210.05 L1927.8 1210.05 L1927.22 1210.05 L1926.63 1210.05 L1926.04 1210.05 L1925.46 1210.05 L1924.87 1210.05 L1924.29 1210.05 L1923.7 1210.05 L1923.11 1210.05 L1922.53 1210.05 L1921.94 1210.05 L1921.35 1210.05 L1920.77 1210.05 L1920.18 1210.05 L1919.59 1210.05 L1919.01 1210.05 L1918.42 1210.05 L1917.83 1210.05 L1917.25 1210.05 L1916.66 1210.05 L1916.08 1210.05 L1915.49 1210.05 L1914.9 1210.05 L1914.32 1210.05 L1913.73 1210.05 L1913.14 1210.05 L1912.56 1210.05 L1911.97 1210.05 L1911.38 1210.05 L1910.8 1210.05 L1910.21 1210.05 L1909.63 1210.05 L1909.04 1210.05 L1908.45 1210.05 L1907.87 1210.05 L1907.28 1210.05 L1906.69 1210.05 L1906.11 1210.05 L1905.52 1210.05 L1904.93 1210.05 L1904.35 1210.05 L1903.76 1210.05 L1903.17 1210.05 L1902.59 1210.05 L1902 1210.05 L1901.42 1210.05 L1900.83 1210.05 L1900.24 1210.05 L1899.66 1210.05 L1899.07 1210.05 L1898.48 1210.05 L1897.9 1210.05 L1897.31 1210.05 L1896.72 1210.05 L1896.14 1210.05 L1895.55 1210.05 L1894.96 1210.05 L1894.38 1210.05 L1893.79 1210.05 L1893.21 1210.05 L1892.62 1210.05 L1892.03 1210.05 L1891.45 1210.05 L1890.86 1210.05 L1890.27 1210.05 L1889.69 1210.05 L1889.1 1210.05 L1888.51 1210.05 L1887.93 1210.05 L1887.34 1210.05 L1886.76 1210.05 L1886.17 1210.05 L1885.58 1210.05 L1885 1210.05 L1884.41 1210.05 L1883.82 1210.05 L1883.24 1210.05 L1882.65 1210.05 L1882.06 1210.05 L1881.48 1210.05 L1880.89 1210.05 L1880.3 1210.05 L1879.72 1210.05 L1879.13 1210.05 L1878.55 1210.05 L1877.96 1210.05 L1877.37 1210.05 L1876.79 1210.05 L1876.2 1210.05 L1875.61 1210.05 L1875.03 1210.05 L1874.44 1210.05 L1873.85 1210.05 L1873.27 1210.05 L1872.68 1210.05 L1872.09 1210.05 L1871.51 1210.05 L1870.92 1210.05 L1870.34 1210.05 L1869.75 1210.05 L1869.16 1210.05 L1868.58 1210.05 L1867.99 1210.05 L1867.4 1210.05 L1866.82 1210.05 L1866.23 1210.05 L1865.64 1210.05 L1865.06 1210.05 L1864.47 1210.05 L1863.88 1210.05 L1863.3 1210.05 L1862.71 1210.05 L1862.13 1210.05 L1861.54 1210.05 L1860.95 1210.05 L1860.37 1210.05 L1859.78 1210.05 L1859.19 1210.05 L1858.61 1210.05 L1858.02 1210.05 L1857.43 1210.05 L1856.85 1210.05 L1856.26 1210.05 L1855.68 1210.05 L1855.09 1210.05 L1854.5 1210.05 L1853.92 1210.05 L1853.33 1210.05 L1852.74 1210.05 L1852.16 1210.05 L1851.57 1210.05 L1850.98 1210.05 L1850.4 1210.05 L1849.81 1210.05 L1849.22 1210.05 L1848.64 1210.05 L1848.05 1210.05 L1847.47 1210.05 L1846.88 1210.05 L1846.29 1210.05 L1845.71 1210.05 L1845.12 1210.05 L1844.53 1210.05 L1843.95 1210.05 L1843.36 1210.05 L1842.77 1210.05 L1842.19 1210.05 L1841.6 1210.05 L1841.01 1210.05 L1840.43 1210.05 L1839.84 1210.05 L1839.26 1210.05 L1838.67 1210.05 L1838.08 1210.05 L1837.5 1210.05 L1836.91 1210.05 L1836.32 1210.05 L1835.74 1210.05 L1835.15 1210.05 L1834.56 1210.05 L1833.98 1210.05 L1833.39 1210.05 L1832.81 1210.05 L1832.22 1210.05 L1831.63 1210.05 L1831.05 1210.05 L1830.46 1210.05 L1829.87 1210.05 L1829.29 1210.05 L1828.7 1210.05 L1828.11 1210.05 L1827.53 1210.05 L1826.94 1210.05 L1826.35 1210.05 L1825.77 1210.05 L1825.18 1210.05 L1824.6 1210.05 L1824.01 1210.05 L1823.42 1210.05 L1822.84 1210.05 L1822.25 1210.05 L1821.66 1210.05 L1821.08 1210.05 L1820.49 1210.05 L1819.9 1210.05 L1819.32 1210.05 L1818.73 1210.05 L1818.14 1210.05 L1817.56 1210.05 L1816.97 1210.05 L1816.39 1210.05 L1815.8 1210.05 L1815.21 1210.05 L1814.63 1210.05 L1814.04 1210.05 L1813.45 1210.05 L1812.87 1210.05 L1812.28 1210.05 L1811.69 1210.05 L1811.11 1210.05 L1810.52 1210.05 L1809.94 1210.05 L1809.35 1210.05 L1808.76 1210.05 L1808.18 1210.05 L1807.59 1210.05 L1807 1210.05 L1806.42 1210.05 L1805.83 1210.05 L1805.24 1210.05 L1804.66 1210.05 L1804.07 1210.05 L1803.48 1210.05 L1802.9 1210.05 L1802.31 1210.05 L1801.73 1210.05 L1801.14 1210.05 L1800.55 1210.05 L1799.97 1210.05 L1799.38 1210.05 L1798.79 1210.05 L1798.21 1210.05 L1797.62 1210.05 L1797.03 1210.05 L1796.45 1210.05 L1795.86 1210.05 L1795.27 1210.05 L1794.69 1210.05 L1794.1 1210.05 L1793.52 1210.05 L1792.93 1210.05 L1792.34 1210.05 L1791.76 1210.05 L1791.17 1210.05 L1790.58 1210.05 L1790 1210.05 L1789.41 1210.05 L1788.82 1210.05 L1788.24 1210.05 L1787.65 1210.05 L1787.06 1210.05 L1786.48 1210.05 L1785.89 1210.05 L1785.31 1210.05 L1784.72 1210.05 L1784.13 1210.05 L1783.55 1210.05 L1782.96 1210.05 L1782.37 1210.05 L1781.79 1210.05 L1781.2 1210.05 L1780.61 1210.05 L1780.03 1210.05 L1779.44 1210.05 L1778.86 1210.05 L1778.27 1210.05 L1777.68 1210.05 L1777.1 1210.05 L1776.51 1210.05 L1775.92 1210.05 L1775.34 1210.05 L1774.75 1210.05 L1774.16 1210.05 L1773.58 1210.05 L1772.99 1210.05 L1772.4 1210.05 L1771.82 1210.05 L1771.23 1210.05 L1770.65 1210.05 L1770.06 1210.05 L1769.47 1210.05 L1768.89 1210.05 L1768.3 1210.05 L1767.71 1210.05 L1767.13 1210.05 L1766.54 1210.05 L1765.95 1210.05 L1765.37 1210.05 L1764.78 1210.05 L1764.19 1210.05 L1763.61 1210.05 L1763.02 1210.05 L1762.44 1210.05 L1761.85 1210.05 L1761.26 1210.05 L1760.68 1210.05 L1760.09 1210.05 L1759.5 1210.05 L1758.92 1210.05 L1758.33 1210.05 L1757.74 1210.05 L1757.16 1210.05 L1756.57 1210.05 L1755.99 1210.05 L1755.4 1210.05 L1754.81 1210.05 L1754.23 1210.05 L1753.64 1210.05 L1753.05 1210.05 L1752.47 1210.05 L1751.88 1210.05 L1751.29 1210.05 L1750.71 1210.05 L1750.12 1210.05 L1749.53 1210.05 L1748.95 1210.05 L1748.36 1210.05 L1747.78 1210.05 L1747.19 1210.05 L1746.6 1210.05 L1746.02 1210.05 L1745.43 1210.05 L1744.84 1210.05 L1744.26 1210.05 L1743.67 1210.05 L1743.08 1210.05 L1742.5 1210.05 L1741.91 1210.05 L1741.32 1210.05 L1740.74 1210.05 L1740.15 1210.05 L1739.57 1210.05 L1738.98 1210.05 L1738.39 1210.05 L1737.81 1210.05 L1737.22 1210.05 L1736.63 1210.05 L1736.05 1210.05 L1735.46 1210.05 L1734.87 1210.05 L1734.29 1210.05 L1733.7 1210.05 L1733.11 1210.05 L1732.53 1210.05 L1731.94 1210.05 L1731.36 1210.05 L1730.77 1210.05 L1730.18 1210.05 L1729.6 1210.05 L1729.01 1210.05 L1728.42 1210.05 L1727.84 1210.05 L1727.25 1210.05 L1726.66 1210.05 L1726.08 1210.05 L1725.49 1210.05 L1724.91 1210.05 L1724.32 1210.05 L1723.73 1210.05 L1723.15 1210.05 L1722.56 1210.05 L1721.97 1210.05 L1721.39 1210.05 L1720.8 1210.05 L1720.21 1210.05 L1719.63 1210.05 L1719.04 1210.05 L1718.45 1210.05 L1717.87 1210.05 L1717.28 1210.05 L1716.7 1210.05 L1716.11 1210.05 L1715.52 1210.05 L1714.94 1210.05 L1714.35 1210.05 L1713.76 1210.05 L1713.18 1210.05 L1712.59 1210.05 L1712 1210.05 L1711.42 1210.05 L1710.83 1210.05 L1710.24 1210.05 L1709.66 1210.05 L1709.07 1210.05 L1708.49 1210.05 L1707.9 1210.05 L1707.31 1210.05 L1706.73 1210.05 L1706.14 1210.05 L1705.55 1210.05 L1704.97 1210.05 L1704.38 1210.05 L1703.79 1210.05 L1703.21 1210.05 L1702.62 1210.05 L1702.04 1210.05 L1701.45 1210.05 L1700.86 1210.05 L1700.28 1210.05 L1699.69 1210.05 L1699.1 1210.05 L1698.52 1210.05 L1697.93 1210.05 L1697.34 1210.05 L1696.76 1210.05 L1696.17 1210.05 L1695.58 1210.05 L1695 1210.05 L1694.41 1210.05 L1693.83 1210.05 L1693.24 1210.05 L1692.65 1210.05 L1692.07 1210.05 L1691.48 1210.05 L1690.89 1210.05 L1690.31 1210.05 L1689.72 1210.05 L1689.13 1210.05 L1688.55 1210.05 L1687.96 1210.05 L1687.37 1210.05 L1686.79 1210.05 L1686.2 1210.05 L1685.62 1210.05 L1685.03 1210.05 L1684.44 1210.05 L1683.86 1210.05 L1683.27 1210.05 L1682.68 1210.05 L1682.1 1210.05 L1681.51 1210.05 L1680.92 1210.05 L1680.34 1210.05 L1679.75 1210.05 L1679.17 1210.05 L1678.58 1210.05 L1677.99 1210.05 L1677.41 1210.05 L1676.82 1210.05 L1676.23 1210.05 L1675.65 1210.05 L1675.06 1210.05 L1674.47 1210.05 L1673.89 1210.05 L1673.3 1210.05 L1672.71 1210.05 L1672.13 1210.05 L1671.54 1210.05 L1670.96 1210.05 L1670.37 1210.05 L1669.78 1210.05 L1669.2 1210.05 L1668.61 1210.05 L1668.02 1210.05 L1667.44 1210.05 L1666.85 1210.05 L1666.26 1210.05 L1665.68 1210.05 L1665.09 1210.05 L1664.5 1210.05 L1663.92 1210.05 L1663.33 1210.05 L1662.75 1210.05 L1662.16 1210.05 L1661.57 1210.05 L1660.99 1210.05 L1660.4 1210.05 L1659.81 1210.05 L1659.23 1210.05 L1658.64 1210.05 L1658.05 1210.05 L1657.47 1210.05 L1656.88 1210.05 L1656.29 1210.05 L1655.71 1210.05 L1655.12 1210.05 L1654.54 1210.05 L1653.95 1210.05 L1653.36 1210.05 L1652.78 1210.05 L1652.19 1210.05 L1651.6 1210.05 L1651.02 1210.05 L1650.43 1210.05 L1649.84 1210.05 L1649.26 1210.05 L1648.67 1210.05 L1648.09 1210.05 L1647.5 1210.05 L1646.91 1210.05 L1646.33 1210.05 L1645.74 1210.05 L1645.15 1210.05 L1644.57 1210.05 L1643.98 1210.05 L1643.39 1210.05 L1642.81 1210.05 L1642.22 1210.05 L1641.63 1210.05 L1641.05 1210.05 L1640.46 1210.05 L1639.88 1210.05 L1639.29 1210.05 L1638.7 1210.05 L1638.12 1210.05 L1637.53 1210.05 L1636.94 1210.05 L1636.36 1210.05 L1635.77 1210.05 L1635.18 1210.05 L1634.6 1210.05 L1634.01 1210.05 L1633.42 1210.05 L1632.84 1210.05 L1632.25 1210.05 L1631.67 1210.05 L1631.08 1210.05 L1630.49 1210.05 L1629.91 1210.05 L1629.32 1210.05 L1628.73 1210.05 L1628.15 1210.05 L1627.56 1210.05 L1626.97 1210.05 L1626.39 1210.05 L1625.8 1210.05 L1625.22 1210.05 L1624.63 1210.05 L1624.04 1210.05 L1623.46 1210.05 L1622.87 1210.05 L1622.28 1210.05 L1621.7 1210.05 L1621.11 1210.05 L1620.52 1210.05 L1619.94 1210.05 L1619.35 1210.05 L1618.76 1210.05 L1618.18 1210.05 L1617.59 1210.05 L1617.01 1210.05 L1616.42 1210.05 L1615.83 1210.05 L1615.25 1210.05 L1614.66 1210.05 L1614.07 1210.05 L1613.49 1210.05 L1612.9 1210.05 L1612.31 1210.05 L1611.73 1210.05 L1611.14 1210.05 L1610.55 1210.05 L1609.97 1210.05 L1609.38 1210.05 L1608.8 1210.05 L1608.21 1210.05 L1607.62 1210.05 L1607.04 1210.05 L1606.45 1210.05 L1605.86 1210.05 L1605.28 1210.05 L1604.69 1210.05 L1604.1 1210.05 L1603.52 1210.05 L1602.93 1210.05 L1602.34 1210.05 L1601.76 1210.05 L1601.17 1210.05 L1600.59 1210.05 L1600 1210.05 L1599.41 1210.05 L1598.83 1210.05 L1598.24 1210.05 L1597.65 1210.05 L1597.07 1210.05 L1596.48 1210.05 L1595.89 1210.05 L1595.31 1210.05 L1594.72 1210.05 L1594.14 1210.05 L1593.55 1210.05 L1592.96 1210.05 L1592.38 1210.05 L1591.79 1210.05 L1591.2 1210.05 L1590.62 1210.05 L1590.03 1210.05 L1589.44 1210.05 L1588.86 1210.05 L1588.27 1210.05 L1587.68 1210.05 L1587.1 1210.05 L1586.51 1210.05 L1585.93 1210.05 L1585.34 1210.05 L1584.75 1210.05 L1584.17 1210.05 L1583.58 1210.05 L1582.99 1210.05 L1582.41 1210.05 L1581.82 1210.05 L1581.23 1210.05 L1580.65 1210.05 L1580.06 1210.05 L1579.47 1210.05 L1578.89 1210.05 L1578.3 1210.05 L1577.72 1210.05 L1577.13 1210.05 L1576.54 1210.05 L1575.96 1210.05 L1575.37 1210.05 L1574.78 1210.05 L1574.2 1210.05 L1573.61 1210.05 L1573.02 1210.05 L1572.44 1210.05 L1571.85 1210.05 L1571.27 1210.05 L1570.68 1210.05 L1570.09 1210.05 L1569.51 1210.05 L1568.92 1210.05 L1568.33 1210.05 L1567.75 1210.05 L1567.16 1210.05 L1566.57 1210.05 L1565.99 1210.05 L1565.4 1210.05 L1564.81 1210.05 L1564.23 1210.05 L1563.64 1210.05 L1563.06 1210.05 L1562.47 1210.05 L1561.88 1210.05 L1561.3 1210.05 L1560.71 1210.05 L1560.12 1210.05 L1559.54 1210.05 L1558.95 1210.05 L1558.36 1210.05 L1557.78 1210.05 L1557.19 1210.05 L1556.6 1210.05 L1556.02 1210.05 L1555.43 1210.05 L1554.85 1210.05 L1554.26 1210.05 L1553.67 1210.05 L1553.09 1210.05 L1552.5 1210.05 L1551.91 1210.05 L1551.33 1210.05 L1550.74 1210.05 L1550.15 1210.05 L1549.57 1210.05 L1548.98 1210.05 L1548.4 1210.05 L1547.81 1210.05 L1547.22 1210.05 L1546.64 1210.05 L1546.05 1210.05 L1545.46 1210.05 L1544.88 1210.05 L1544.29 1210.05 L1543.7 1210.05 L1543.12 1210.05 L1542.53 1210.05 L1541.94 1210.05 L1541.36 1210.05 L1540.77 1210.05 L1540.19 1210.05 L1539.6 1210.05 L1539.01 1210.05 L1538.43 1210.05 L1537.84 1210.05 L1537.25 1210.05 L1536.67 1210.05 L1536.08 1210.05 L1535.49 1210.05 L1534.91 1210.05 L1534.32 1210.05 L1533.73 1210.05 L1533.15 1210.05 L1532.56 1210.05 L1531.98 1210.05 L1531.39 1210.05 L1530.8 1210.05 L1530.22 1210.05 L1529.63 1210.05 L1529.04 1210.05 L1528.46 1210.05 L1527.87 1210.05 L1527.28 1210.05 L1526.7 1210.05 L1526.11 1210.05 L1525.52 1210.05 L1524.94 1210.05 L1524.35 1210.05 L1523.77 1210.05 L1523.18 1210.05 L1522.59 1210.05 L1522.01 1210.05 L1521.42 1210.05 L1520.83 1210.05 L1520.25 1210.05 L1519.66 1210.05 L1519.07 1210.05 L1518.49 1210.05 L1517.9 1210.05 L1517.32 1210.05 L1516.73 1210.05 L1516.14 1210.05 L1515.56 1210.05 L1514.97 1210.05 L1514.38 1210.05 L1513.8 1210.05 L1513.21 1210.05 L1512.62 1210.05 L1512.04 1210.05 L1511.45 1210.05 L1510.86 1210.05 L1510.28 1210.05 L1509.69 1210.05 L1509.11 1210.05 L1508.52 1210.05 L1507.93 1210.05 L1507.35 1210.05 L1506.76 1210.05 L1506.17 1210.05 L1505.59 1210.05 L1505 1210.05 L1504.41 1210.05 L1503.83 1210.05 L1503.24 1210.05 L1502.65 1210.05 L1502.07 1210.05 L1501.48 1210.05 L1500.9 1210.05 L1500.31 1210.05 L1499.72 1210.05 L1499.14 1210.05 L1498.55 1210.05 L1497.96 1210.05 L1497.38 1210.05 L1496.79 1210.05 L1496.2 1210.05 L1495.62 1210.05 L1495.03 1210.05 L1494.45 1210.05 L1493.86 1210.05 L1493.27 1210.05 L1492.69 1210.05 L1492.1 1210.05 L1491.51 1210.05 L1490.93 1210.05 L1490.34 1210.05 L1489.75 1210.05 L1489.17 1210.05 L1488.58 1210.05 L1487.99 1210.05 L1487.41 1210.05 L1486.82 1210.05 L1486.24 1210.05 L1485.65 1210.05 L1485.06 1210.05 L1484.48 1210.05 L1483.89 1210.05 L1483.3 1210.05 L1482.72 1210.05 L1482.13 1210.05 L1481.54 1210.05 L1480.96 1210.05 L1480.37 1210.05 L1479.78 1210.05 L1479.2 1210.05 L1478.61 1210.05 L1478.03 1210.05 L1477.44 1210.05 L1476.85 1210.05 L1476.27 1210.05 L1475.68 1210.05 L1475.09 1210.05 L1474.51 1210.05 L1473.92 1210.05 L1473.33 1210.05 L1472.75 1210.05 L1472.16 1210.05 L1471.57 1210.05 L1470.99 1210.05 L1470.4 1210.05 L1469.82 1210.05 L1469.23 1210.05 L1468.64 1210.05 L1468.06 1210.05 L1467.47 1210.05 L1466.88 1210.05 L1466.3 1210.05 L1465.71 1210.05 L1465.12 1210.05 L1464.54 1210.05 L1463.95 1210.05 L1463.37 1210.05 L1462.78 1210.05 L1462.19 1210.05 L1461.61 1210.05 L1461.02 1210.05 L1460.43 1210.05 L1459.85 1210.05 L1459.26 1210.05 L1458.67 1210.05 L1458.09 1210.05 L1457.5 1210.05 L1456.91 1210.05 L1456.33 1210.05 L1455.74 1210.05 L1455.16 1210.05 L1454.57 1210.05 L1453.98 1210.05 L1453.4 1210.05 L1452.81 1210.05 L1452.22 1210.05 L1451.64 1210.05 L1451.05 1210.05 L1450.46 1210.05 L1449.88 1210.05 L1449.29 1210.05 L1448.7 1210.05 L1448.12 1210.05 L1447.53 1210.05 L1446.95 1210.05 L1446.36 1210.05 L1445.77 1210.05 L1445.19 1210.05 L1444.6 1210.05 L1444.01 1210.05 L1443.43 1210.05 L1442.84 1210.05 L1442.25 1210.05 L1441.67 1210.05 L1441.08 1210.05 L1440.5 1210.05 L1439.91 1210.05 L1439.32 1210.05 L1438.74 1210.05 L1438.15 1210.05 L1437.56 1210.05 L1436.98 1210.05 L1436.39 1210.05 L1435.8 1210.05 L1435.22 1210.05 L1434.63 1210.05 L1434.04 1210.05 L1433.46 1210.05 L1432.87 1210.05 L1432.29 1210.05 L1431.7 1210.05 L1431.11 1210.05 L1430.53 1210.05 L1429.94 1210.05 L1429.35 1210.05 L1428.77 1210.05 L1428.18 1210.05 L1427.59 1210.05 L1427.01 1210.05 L1426.42 1210.05 L1425.83 1210.05 L1425.25 1210.05 L1424.66 1210.05 L1424.08 1210.05 L1423.49 1210.05 L1422.9 1210.05 L1422.32 1210.05 L1421.73 1210.05 L1421.14 1210.05 L1420.56 1210.05 L1419.97 1210.05 L1419.38 1210.05 L1418.8 1210.05 L1418.21 1210.05 L1417.63 1210.05 L1417.04 1210.05 L1416.45 1210.05 L1415.87 1210.05 L1415.28 1210.05 L1414.69 1210.05 L1414.11 1210.05 L1413.52 1210.05 L1412.93 1210.05 L1412.35 1210.05 L1411.76 1210.05 L1411.17 1210.05 L1410.59 1210.05 L1410 1210.05 L1409.42 1210.05 L1408.83 1210.05 L1408.24 1210.05 L1407.66 1210.05 L1407.07 1210.05 L1406.48 1210.05 L1405.9 1210.05 L1405.31 1210.05 L1404.72 1210.05 L1404.14 1210.05 L1403.55 1210.05 L1402.96 1210.05 L1402.38 1210.05 L1401.79 1210.05 L1401.21 1210.05 L1400.62 1210.05 L1400.03 1210.05 L1399.45 1210.05 L1398.86 1210.05 L1398.27 1210.05 L1397.69 1210.05 L1397.1 1210.05 L1396.51 1210.05 L1395.93 1210.05 L1395.34 1210.05 L1394.75 1210.05 L1394.17 1210.05 L1393.58 1210.05 L1393 1210.05 L1392.41 1210.05 L1391.82 1210.05 L1391.24 1210.05 L1390.65 1210.05 L1390.06 1210.05 L1389.48 1210.05 L1388.89 1210.05 L1388.3 1210.05 L1387.72 1210.05 L1387.13 1210.05 L1386.55 1210.05 L1385.96 1210.05 L1385.37 1210.05 L1384.79 1210.05 L1384.2 1210.05 L1383.61 1210.05 L1383.03 1210.05 L1382.44 1210.05 L1381.85 1210.05 L1381.27 1210.05 L1380.68 1210.05 L1380.09 1210.05 L1379.51 1210.05 L1378.92 1210.05 L1378.34 1210.05 L1377.75 1210.05 L1377.16 1210.05 L1376.58 1210.05 L1375.99 1210.05 L1375.4 1210.05 L1374.82 1210.05 L1374.23 1210.05 L1373.64 1210.05 L1373.06 1210.05 L1372.47 1210.05 L1371.88 1210.05 L1371.3 1210.05 L1370.71 1210.05 L1370.13 1210.05 L1369.54 1210.05 L1368.95 1210.05 L1368.37 1210.05 L1367.78 1210.05 L1367.19 1210.05 L1366.61 1210.05 L1366.02 1210.05 L1365.43 1210.05 L1364.85 1210.05 L1364.26 1210.05 L1363.68 1210.05 L1363.09 1210.05 L1362.5 1210.05 L1361.92 1210.05 L1361.33 1210.05 L1360.74 1210.05 L1360.16 1210.05 L1359.57 1210.05 L1358.98 1210.05 L1358.4 1210.05 L1357.81 1210.05 L1357.22 1210.05 L1356.64 1210.05 L1356.05 1210.05 L1355.47 1210.05 L1354.88 1210.05 L1354.29 1210.05 L1353.71 1210.05 L1353.12 1210.05 L1352.53 1210.05 L1351.95 1210.05 L1351.36 1210.05 L1350.77 1210.05 L1350.19 1210.05 L1349.6 1210.05 L1349.01 1210.05 L1348.43 1210.05 L1347.84 1210.05 L1347.26 1210.05 L1346.67 1210.05 L1346.08 1210.05 L1345.5 1210.05 L1344.91 1210.05 L1344.32 1210.05 L1343.74 1210.05 L1343.15 1210.05 L1342.56 1210.05 L1341.98 1210.05 L1341.39 1210.05 L1340.8 1210.05 L1340.22 1210.05 L1339.63 1210.05 L1339.05 1210.05 L1338.46 1210.05 L1337.87 1210.05 L1337.29 1210.05 L1336.7 1210.05 L1336.11 1210.05 L1335.53 1210.05 L1334.94 1210.05 L1334.35 1210.05 L1333.77 1210.05 L1333.18 1210.05 L1332.6 1210.05 L1332.01 1210.05 L1331.42 1210.05 L1330.84 1210.05 L1330.25 1210.05 L1329.66 1210.05 L1329.08 1210.05 L1328.49 1210.05 L1327.9 1210.05 L1327.32 1210.05 L1326.73 1210.05 L1326.14 1210.05 L1325.56 1210.05 L1324.97 1210.05 L1324.39 1210.05 L1323.8 1210.05 L1323.21 1210.05 L1322.63 1210.05 L1322.04 1210.05 L1321.45 1210.05 L1320.87 1210.05 L1320.28 1210.05 L1319.69 1210.05 L1319.11 1210.05 L1318.52 1210.05 L1317.93 1210.05 L1317.35 1210.05 L1316.76 1210.05 L1316.18 1210.05 L1315.59 1210.05 L1315 1210.05 L1314.42 1210.05 L1313.83 1210.05 L1313.24 1210.05 L1312.66 1210.05 L1312.07 1210.05 L1311.48 1210.05 L1310.9 1210.05 L1310.31 1210.05 L1309.73 1210.05 L1309.14 1210.05 L1308.55 1210.05 L1307.97 1210.05 L1307.38 1210.05 L1306.79 1210.05 L1306.21 1210.05 L1305.62 1210.05 L1305.03 1210.05 L1304.45 1210.05 L1303.86 1210.05 L1303.27 1210.05 L1302.69 1210.05 L1302.1 1210.05 L1301.52 1210.05 L1300.93 1210.05 L1300.34 1210.05 L1299.76 1210.05 L1299.17 1210.05 L1298.58 1210.05 L1298 1210.05 L1297.41 1210.05 L1296.82 1210.05 L1296.24 1210.05 L1295.65 1210.05 L1295.06 1210.05 L1294.48 1210.05 L1293.89 1210.05 L1293.31 1210.05 L1292.72 1210.05 L1292.13 1210.05 L1291.55 1210.05 L1290.96 1210.05 L1290.37 1210.05 L1289.79 1210.05 L1289.2 1210.05 L1288.61 1210.05 L1288.03 1210.05 L1287.44 1210.05 L1286.86 1210.05 L1286.27 1210.05 L1285.68 1210.05 L1285.1 1210.05 L1284.51 1210.05 L1283.92 1210.05 L1283.34 1210.05 L1282.75 1210.05 L1282.16 1210.05 L1281.58 1210.05 L1280.99 1210.05 L1280.4 1210.05 L1279.82 1210.05 L1279.23 1210.05 L1278.65 1210.05 L1278.06 1210.05 L1277.47 1210.05 L1276.89 1210.05 L1276.3 1210.05 L1275.71 1210.05 L1275.13 1210.05 L1274.54 1210.05 L1273.95 1210.05 L1273.37 1210.05 L1272.78 1210.05 L1272.19 1210.05 L1271.61 1210.05 L1271.02 1210.05 L1270.44 1210.05 L1269.85 1210.05 L1269.26 1210.05 L1268.68 1210.05 L1268.09 1210.05 L1267.5 1210.05 L1266.92 1210.05 L1266.33 1210.05 L1265.74 1210.05 L1265.16 1210.05 L1264.57 1210.05 L1263.98 1210.05 L1263.4 1210.05 L1262.81 1210.05 L1262.23 1210.05 L1261.64 1210.05 L1261.05 1210.05 L1260.47 1210.05 L1259.88 1210.05 L1259.29 1210.05 L1258.71 1210.05 L1258.12 1210.05 L1257.53 1210.05 L1256.95 1210.05 L1256.36 1210.05 L1255.78 1210.05 L1255.19 1210.05 L1254.6 1210.05 L1254.02 1210.05 L1253.43 1210.05 L1252.84 1210.05 L1252.26 1210.05 L1251.67 1210.05 L1251.08 1210.05 L1250.5 1210.05 L1249.91 1210.05 L1249.32 1210.05 L1248.74 1210.05 L1248.15 1210.05 L1247.57 1210.05 L1246.98 1210.05 L1246.39 1210.05 L1245.81 1210.05 L1245.22 1210.05 L1244.63 1210.05 L1244.05 1210.05 L1243.46 1210.05 L1242.87 1210.05 L1242.29 1210.05 L1241.7 1210.05 L1241.11 1210.05 L1240.53 1210.05 L1239.94 1210.05 L1239.36 1210.05 L1238.77 1210.05 L1238.18 1210.05 L1237.6 1210.05 L1237.01 1210.05 L1236.42 1210.05 L1235.84 1210.05 L1235.25 1210.05 L1234.66 1210.05 L1234.08 1210.05 L1233.49 1210.05 L1232.91 1210.05 L1232.32 1210.05 L1231.73 1210.05 L1231.15 1210.05 L1230.56 1210.05 L1229.97 1210.05 L1229.39 1210.05 L1228.8 1210.05 L1228.21 1210.05 L1227.63 1210.05 L1227.04 1210.05 L1226.45 1210.05 L1225.87 1210.05 L1225.28 1210.05 L1224.7 1210.05 L1224.11 1210.05 L1223.52 1210.05 L1222.94 1210.05 L1222.35 1210.05 L1221.76 1210.05 L1221.18 1210.05 L1220.59 1210.05 L1220 1210.05 L1219.42 1210.05 L1218.83 1210.05 L1218.24 1210.05 L1217.66 1210.05 L1217.07 1210.05 L1216.49 1210.05 L1215.9 1210.05 L1215.31 1210.05 L1214.73 1210.05 L1214.14 1210.05 L1213.55 1210.05 L1212.97 1210.05 L1212.38 1210.05 L1211.79 1210.05 L1211.21 1210.05 L1210.62 1210.05 L1210.03 1210.05 L1209.45 1210.05 L1208.86 1210.05 L1208.28 1210.05 L1207.69 1210.05 L1207.1 1210.05 L1206.52 1210.05 L1205.93 1210.05 L1205.34 1210.05 L1204.76 1210.05 L1204.17 1210.05 L1203.58 1210.05 L1203 1210.05 L1202.41 1210.05 L1201.83 1210.05 L1201.24 1210.05 L1200.65 1210.05 L1200.07 1210.05 L1199.48 1210.05 L1198.89 1210.05 L1198.31 1210.05 L1197.72 1210.05 L1197.13 1210.05 L1196.55 1210.05 L1195.96 1210.05 L1195.37 1210.05 L1194.79 1210.05 L1194.2 1210.05 L1193.62 1210.05 L1193.03 1210.05 L1192.44 1210.05 L1191.86 1210.05 L1191.27 1210.05 L1190.68 1210.05 L1190.1 1210.05 L1189.51 1210.05 L1188.92 1210.05 L1188.34 1210.05 L1187.75 1210.05 L1187.16 1210.05 L1186.58 1210.05 L1185.99 1210.05 L1185.41 1210.05 L1184.82 1210.05 L1184.23 1210.05 L1183.65 1210.05 L1183.06 1210.05 L1182.47 1210.05 L1181.89 1210.05 L1181.3 1210.05 L1180.71 1210.05 L1180.13 1210.05 L1179.54 1210.05 L1178.96 1210.05 L1178.37 1210.05 L1177.78 1210.05 L1177.2 1210.05 L1176.61 1210.05 L1176.02 1210.05 L1175.44 1210.05 L1174.85 1210.05 L1174.26 1210.05 L1173.68 1210.05 L1173.09 1210.05 L1172.5 1210.05 L1171.92 1210.05 L1171.33 1210.05 L1170.75 1210.05 L1170.16 1210.05 L1169.57 1210.05 L1168.99 1210.05 L1168.4 1210.05 L1167.81 1210.05 L1167.23 1210.05 L1166.64 1210.05 L1166.05 1210.05 L1165.47 1210.05 L1164.88 1210.05 L1164.29 1210.05 L1163.71 1210.05 L1163.12 1210.05 L1162.54 1210.05 L1161.95 1210.05 L1161.36 1210.05 L1160.78 1210.05 L1160.19 1210.05 L1159.6 1210.05 L1159.02 1210.05 L1158.43 1210.05 L1157.84 1210.05 L1157.26 1210.05 L1156.67 1210.05 L1156.09 1210.05 L1155.5 1210.05 L1154.91 1210.05 L1154.33 1210.05 L1153.74 1210.05 L1153.15 1210.05 L1152.57 1210.05 L1151.98 1210.05 L1151.39 1210.05 L1150.81 1210.05 L1150.22 1210.05 L1149.63 1210.05 L1149.05 1210.05 L1148.46 1210.05 L1147.88 1210.05 L1147.29 1210.05 L1146.7 1210.05 L1146.12 1210.05 L1145.53 1210.05 L1144.94 1210.05 L1144.36 1210.05 L1143.77 1210.05 L1143.18 1210.05 L1142.6 1210.05 L1142.01 1210.05 L1141.42 1210.05 L1140.84 1210.05 L1140.25 1210.05 L1139.67 1210.05 L1139.08 1210.05 L1138.49 1210.05 L1137.91 1210.05 L1137.32 1210.05 L1136.73 1210.05 L1136.15 1210.05 L1135.56 1210.05 L1134.97 1210.05 L1134.39 1210.05 L1133.8 1210.05 L1133.21 1210.05 L1132.63 1210.05 L1132.04 1210.05 L1131.46 1210.05 L1130.87 1210.05 L1130.28 1210.05 L1129.7 1210.05 L1129.11 1210.05 L1128.52 1210.05 L1127.94 1210.05 L1127.35 1210.05 L1126.76 1210.05 L1126.18 1210.05 L1125.59 1210.05 L1125.01 1210.05 L1124.42 1210.05 L1123.83 1210.05 L1123.25 1210.05 L1122.66 1210.05 L1122.07 1210.05 L1121.49 1210.05 L1120.9 1210.05 L1120.31 1210.05 L1119.73 1210.05 L1119.14 1210.05 L1118.55 1210.05 L1117.97 1210.05 L1117.38 1210.05 L1116.8 1210.05 L1116.21 1210.05 L1115.62 1210.05 L1115.04 1210.05 L1114.45 1210.05 L1113.86 1210.05 L1113.28 1210.05 L1112.69 1210.05 L1112.1 1210.05 L1111.52 1210.05 L1110.93 1210.05 L1110.34 1210.05 L1109.76 1210.05 L1109.17 1210.05 L1108.59 1210.05 L1108 1210.05 L1107.41 1210.05 L1106.83 1210.05 L1106.24 1210.05 L1105.65 1210.05 L1105.07 1210.05 L1104.48 1210.05 L1103.89 1210.05 L1103.31 1210.05 L1102.72 1210.05 L1102.14 1210.05 L1101.55 1210.05 L1100.96 1210.05 L1100.38 1210.05 L1099.79 1210.05 L1099.2 1210.05 L1098.62 1210.05 L1098.03 1210.05 L1097.44 1210.05 L1096.86 1210.05 L1096.27 1210.05 L1095.68 1210.05 L1095.1 1210.05 L1094.51 1210.05 L1093.93 1210.05 L1093.34 1210.05 L1092.75 1210.05 L1092.17 1210.05 L1091.58 1210.05 L1090.99 1210.05 L1090.41 1210.05 L1089.82 1210.05 L1089.23 1210.05 L1088.65 1210.05 L1088.06 1210.05 L1087.47 1210.05 L1086.89 1210.05 L1086.3 1210.05 L1085.72 1210.05 L1085.13 1210.05 L1084.54 1210.05 L1083.96 1210.05 L1083.37 1210.05 L1082.78 1210.05 L1082.2 1210.05 L1081.61 1210.05 L1081.02 1210.05 L1080.44 1210.05 L1079.85 1210.05 L1079.26 1210.05 L1078.68 1210.05 L1078.09 1210.05 L1077.51 1210.05 L1076.92 1210.05 L1076.33 1210.05 L1075.75 1210.05 L1075.16 1210.05 L1074.57 1210.05 L1073.99 1210.05 L1073.4 1210.05 L1072.81 1210.05 L1072.23 1210.05 L1071.64 1210.05 L1071.06 1210.05 L1070.47 1210.05 L1069.88 1210.05 L1069.3 1210.05 L1068.71 1210.05 L1068.12 1210.05 L1067.54 1210.05 L1066.95 1210.05 L1066.36 1210.05 L1065.78 1210.05 L1065.19 1210.05 L1064.6 1210.05 L1064.02 1210.05 L1063.43 1210.05 L1062.85 1210.05 L1062.26 1210.05 L1061.67 1210.05 L1061.09 1210.05 L1060.5 1210.05 L1059.91 1210.05 L1059.33 1210.05 L1058.74 1210.05 L1058.15 1210.05 L1057.57 1210.05 L1056.98 1210.05 L1056.39 1210.05 L1055.81 1210.05 L1055.22 1210.05 L1054.64 1210.05 L1054.05 1210.05 L1053.46 1210.05 L1052.88 1210.05 L1052.29 1210.05 L1051.7 1210.05 L1051.12 1210.05 L1050.53 1210.05 L1049.94 1210.05 L1049.36 1210.05 L1048.77 1210.05 L1048.19 1210.05 L1047.6 1210.05 L1047.01 1210.05 L1046.43 1210.05 L1045.84 1210.05 L1045.25 1210.05 L1044.67 1210.05 L1044.08 1210.05 L1043.49 1210.05 L1042.91 1210.05 L1042.32 1210.05 L1041.73 1210.05 L1041.15 1210.05 L1040.56 1210.05 L1039.98 1210.05 L1039.39 1210.05 L1038.8 1210.05 L1038.22 1210.05 L1037.63 1210.05 L1037.04 1210.05 L1036.46 1210.05 L1035.87 1210.05 L1035.28 1210.05 L1034.7 1210.05 L1034.11 1210.05 L1033.52 1210.05 L1032.94 1210.05 L1032.35 1210.05 L1031.77 1210.05 L1031.18 1210.05 L1030.59 1210.05 L1030.01 1210.05 L1029.42 1210.05 L1028.83 1210.05 L1028.25 1210.05 L1027.66 1210.05 L1027.07 1210.05 L1026.49 1210.05 L1025.9 1210.05 L1025.32 1210.05 L1024.73 1210.05 L1024.14 1210.05 L1023.56 1210.05 L1022.97 1210.05 L1022.38 1210.05 L1021.8 1210.05 L1021.21 1210.05 L1020.62 1210.05 L1020.04 1210.05 L1019.45 1210.05 L1018.86 1210.05 L1018.28 1210.05 L1017.69 1210.05 L1017.11 1210.05 L1016.52 1210.05 L1015.93 1210.05 L1015.35 1210.05 L1014.76 1210.05 L1014.17 1210.05 L1013.59 1210.05 L1013 1210.05 L1012.41 1210.05 L1011.83 1210.05 L1011.24 1210.05 L1010.65 1210.05 L1010.07 1210.05 L1009.48 1210.05 L1008.9 1210.05 L1008.31 1210.05 L1007.72 1210.05 L1007.14 1210.05 L1006.55 1210.05 L1005.96 1210.05 L1005.38 1210.05 L1004.79 1210.05 L1004.2 1210.05 L1003.62 1210.05 L1003.03 1210.05 L1002.44 1210.05 L1001.86 1210.05 L1001.27 1210.05 L1000.69 1210.05 L1000.1 1210.05 L999.513 1210.05 L998.926 1210.05 L998.34 1210.05 L997.754 1210.05 L997.167 1210.05 L996.581 1210.05 L995.994 1210.05 L995.408 1210.05 L994.822 1210.05 L994.235 1210.05 L993.649 1210.05 L993.062 1210.05 L992.476 1210.05 L991.889 1210.05 L991.303 1210.05 L990.717 1210.05 L990.13 1210.05 L989.544 1210.05 L988.957 1210.05 L988.371 1210.05 L987.785 1210.05 L987.198 1210.05 L986.612 1210.05 L986.025 1210.05  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.43 986.612,1210.43 987.198,1210.43 987.785,1210.43 988.371,1210.43 988.957,1210.43 989.544,1210.43 990.13,1210.43 990.717,1210.43 991.303,1210.43 991.889,1210.43 992.476,1210.43 993.062,1210.43 993.649,1210.43 994.235,1210.43 994.822,1210.43 995.408,1210.43 995.994,1210.43 996.581,1210.43 997.167,1210.43 997.754,1210.43 998.34,1210.43 998.926,1210.43 999.513,1210.43 1000.1,1210.43 1000.69,1210.43 1001.27,1210.43 1001.86,1210.43 1002.44,1210.43 1003.03,1210.43 1003.62,1210.43 1004.2,1210.43 1004.79,1210.43 1005.38,1210.43 1005.96,1210.43 1006.55,1210.43 1007.14,1210.43 1007.72,1210.43 1008.31,1210.43 1008.9,1210.43 1009.48,1210.43 1010.07,1210.43 1010.65,1210.43 1011.24,1210.43 1011.83,1210.43 1012.41,1210.43 1013,1210.43 1013.59,1210.43 1014.17,1210.43 1014.76,1210.43 1015.35,1210.43 1015.93,1210.43 1016.52,1210.43 1017.11,1210.43 1017.69,1210.43 1018.28,1210.43 1018.86,1210.43 1019.45,1210.43 1020.04,1210.43 1020.62,1210.43 1021.21,1210.43 1021.8,1210.43 1022.38,1210.43 1022.97,1210.43 1023.56,1210.43 1024.14,1210.43 1024.73,1210.43 1025.32,1210.43 1025.9,1210.43 1026.49,1210.43 1027.07,1210.43 1027.66,1210.43 1028.25,1210.43 1028.83,1210.43 1029.42,1210.43 1030.01,1210.43 1030.59,1210.43 1031.18,1210.43 1031.77,1210.43 1032.35,1210.43 1032.94,1210.43 1033.52,1210.43 1034.11,1210.43 1034.7,1210.43 1035.28,1210.43 1035.87,1210.43 1036.46,1210.43 1037.04,1210.43 1037.63,1210.43 1038.22,1210.43 1038.8,1210.43 1039.39,1210.43 1039.98,1210.43 1040.56,1210.43 1041.15,1210.43 1041.73,1210.43 1042.32,1210.43 1042.91,1210.43 1043.49,1210.43 1044.08,1210.43 1044.67,1210.43 1045.25,1210.43 1045.84,1210.43 1046.43,1210.43 1047.01,1210.43 1047.6,1210.43 1048.19,1210.43 1048.77,1210.43 1049.36,1210.43 1049.94,1210.43 1050.53,1210.43 1051.12,1210.43 1051.7,1210.43 1052.29,1210.43 1052.88,1210.43 1053.46,1210.43 1054.05,1210.43 1054.64,1210.43 1055.22,1210.43 1055.81,1210.43 1056.39,1210.43 1056.98,1210.43 1057.57,1210.43 1058.15,1210.43 1058.74,1210.43 1059.33,1210.43 1059.91,1210.43 1060.5,1210.43 1061.09,1210.43 1061.67,1210.43 1062.26,1210.43 1062.85,1210.43 1063.43,1210.43 1064.02,1210.43 1064.6,1210.43 1065.19,1210.43 1065.78,1210.43 1066.36,1210.43 1066.95,1210.43 1067.54,1210.43 1068.12,1210.43 1068.71,1210.43 1069.3,1210.43 1069.88,1210.43 1070.47,1210.43 1071.06,1210.43 1071.64,1210.43 1072.23,1210.43 1072.81,1210.43 1073.4,1210.43 1073.99,1210.43 1074.57,1210.43 1075.16,1210.43 1075.75,1210.43 1076.33,1210.43 1076.92,1210.43 1077.51,1210.43 1078.09,1210.43 1078.68,1210.43 1079.26,1210.43 1079.85,1210.43 1080.44,1210.43 1081.02,1210.43 1081.61,1210.43 1082.2,1210.43 1082.78,1210.43 1083.37,1210.43 1083.96,1210.43 1084.54,1210.43 1085.13,1210.43 1085.72,1210.43 1086.3,1210.43 1086.89,1210.43 1087.47,1210.43 1088.06,1210.43 1088.65,1210.43 1089.23,1210.43 1089.82,1210.43 1090.41,1210.43 1090.99,1210.43 1091.58,1210.43 1092.17,1210.43 1092.75,1210.43 1093.34,1210.43 1093.93,1210.43 1094.51,1210.43 1095.1,1210.43 1095.68,1210.43 1096.27,1210.43 1096.86,1210.43 1097.44,1210.43 1098.03,1210.43 1098.62,1210.43 1099.2,1210.43 1099.79,1210.43 1100.38,1210.43 1100.96,1210.43 1101.55,1210.43 1102.14,1210.43 1102.72,1210.43 1103.31,1210.43 1103.89,1210.43 1104.48,1210.43 1105.07,1210.43 1105.65,1210.43 1106.24,1210.43 1106.83,1210.43 1107.41,1210.43 1108,1210.43 1108.59,1210.43 1109.17,1210.43 1109.76,1210.43 1110.34,1210.43 1110.93,1210.43 1111.52,1210.43 1112.1,1210.43 1112.69,1210.43 1113.28,1210.43 1113.86,1210.43 1114.45,1210.43 1115.04,1210.43 1115.62,1210.43 1116.21,1210.43 1116.8,1210.43 1117.38,1210.43 1117.97,1210.43 1118.55,1210.43 1119.14,1210.43 1119.73,1210.43 1120.31,1210.43 1120.9,1210.43 1121.49,1210.43 1122.07,1210.43 1122.66,1210.43 1123.25,1210.43 1123.83,1210.43 1124.42,1210.43 1125.01,1210.43 1125.59,1210.43 1126.18,1210.43 1126.76,1210.43 1127.35,1210.43 1127.94,1210.43 1128.52,1210.43 1129.11,1210.43 1129.7,1210.43 1130.28,1210.43 1130.87,1210.43 1131.46,1210.43 1132.04,1210.43 1132.63,1210.43 1133.21,1210.43 1133.8,1210.43 1134.39,1210.43 1134.97,1210.43 1135.56,1210.43 1136.15,1210.43 1136.73,1210.43 1137.32,1210.43 1137.91,1210.43 1138.49,1210.43 1139.08,1210.43 1139.67,1210.43 1140.25,1210.43 1140.84,1210.43 1141.42,1210.43 1142.01,1210.43 1142.6,1210.43 1143.18,1210.43 1143.77,1210.43 1144.36,1210.43 1144.94,1210.43 1145.53,1210.43 1146.12,1210.43 1146.7,1210.43 1147.29,1210.43 1147.88,1210.43 1148.46,1210.43 1149.05,1210.43 1149.63,1210.43 1150.22,1210.43 1150.81,1210.43 1151.39,1210.43 1151.98,1210.43 1152.57,1210.43 1153.15,1210.43 1153.74,1210.43 1154.33,1210.43 1154.91,1210.43 1155.5,1210.43 1156.09,1210.43 1156.67,1210.43 1157.26,1210.43 1157.84,1210.43 1158.43,1210.43 1159.02,1210.43 1159.6,1210.43 1160.19,1210.43 1160.78,1210.43 1161.36,1210.43 1161.95,1210.43 1162.54,1210.43 1163.12,1210.43 1163.71,1210.43 1164.29,1210.43 1164.88,1210.43 1165.47,1210.43 1166.05,1210.43 1166.64,1210.43 1167.23,1210.43 1167.81,1210.43 1168.4,1210.43 1168.99,1210.43 1169.57,1210.43 1170.16,1210.43 1170.75,1210.43 1171.33,1210.43 1171.92,1210.43 1172.5,1210.43 1173.09,1210.43 1173.68,1210.43 1174.26,1210.43 1174.85,1210.43 1175.44,1210.43 1176.02,1210.43 1176.61,1210.43 1177.2,1210.43 1177.78,1210.43 1178.37,1210.43 1178.96,1210.43 1179.54,1210.43 1180.13,1210.43 1180.71,1210.43 1181.3,1210.43 1181.89,1210.43 1182.47,1210.43 1183.06,1210.43 1183.65,1210.43 1184.23,1210.43 1184.82,1210.43 1185.41,1210.43 1185.99,1210.43 1186.58,1210.43 1187.16,1210.43 1187.75,1210.43 1188.34,1210.43 1188.92,1210.43 1189.51,1210.43 1190.1,1210.43 1190.68,1210.43 1191.27,1210.43 1191.86,1210.43 1192.44,1210.43 1193.03,1210.43 1193.62,1210.43 1194.2,1210.43 1194.79,1210.43 1195.37,1210.43 1195.96,1210.43 1196.55,1210.43 1197.13,1210.43 1197.72,1210.43 1198.31,1210.43 1198.89,1210.43 1199.48,1210.43 1200.07,1210.43 1200.65,1210.43 1201.24,1210.43 1201.83,1210.43 1202.41,1210.43 1203,1210.43 1203.58,1210.43 1204.17,1210.43 1204.76,1210.43 1205.34,1210.43 1205.93,1210.43 1206.52,1210.43 1207.1,1210.43 1207.69,1210.43 1208.28,1210.43 1208.86,1210.43 1209.45,1210.43 1210.03,1210.43 1210.62,1210.43 1211.21,1210.43 1211.79,1210.43 1212.38,1210.43 1212.97,1210.43 1213.55,1210.43 1214.14,1210.43 1214.73,1210.43 1215.31,1210.43 1215.9,1210.43 1216.49,1210.43 1217.07,1210.43 1217.66,1210.43 1218.24,1210.43 1218.83,1210.43 1219.42,1210.43 1220,1210.43 1220.59,1210.43 1221.18,1210.43 1221.76,1210.43 1222.35,1210.43 1222.94,1210.43 1223.52,1210.43 1224.11,1210.43 1224.7,1210.43 1225.28,1210.43 1225.87,1210.43 1226.45,1210.43 1227.04,1210.43 1227.63,1210.43 1228.21,1210.43 1228.8,1210.43 1229.39,1210.43 1229.97,1210.43 1230.56,1210.43 1231.15,1210.43 1231.73,1210.43 1232.32,1210.43 1232.91,1210.43 1233.49,1210.43 1234.08,1210.43 1234.66,1210.43 1235.25,1210.43 1235.84,1210.43 1236.42,1210.43 1237.01,1210.43 1237.6,1210.43 1238.18,1210.43 1238.77,1210.43 1239.36,1210.43 1239.94,1210.43 1240.53,1210.43 1241.11,1210.43 1241.7,1210.43 1242.29,1210.43 1242.87,1210.43 1243.46,1210.43 1244.05,1210.43 1244.63,1210.43 1245.22,1210.43 1245.81,1210.43 1246.39,1210.43 1246.98,1210.43 1247.57,1210.43 1248.15,1210.43 1248.74,1210.43 1249.32,1210.43 1249.91,1210.43 1250.5,1210.43 1251.08,1210.43 1251.67,1210.43 1252.26,1210.43 1252.84,1210.43 1253.43,1210.43 1254.02,1210.43 1254.6,1210.43 1255.19,1210.43 1255.78,1210.43 1256.36,1210.43 1256.95,1210.43 1257.53,1210.43 1258.12,1210.43 1258.71,1210.43 1259.29,1210.43 1259.88,1210.43 1260.47,1210.43 1261.05,1210.43 1261.64,1210.43 1262.23,1210.43 1262.81,1210.43 1263.4,1210.43 1263.98,1210.43 1264.57,1210.43 1265.16,1210.43 1265.74,1210.43 1266.33,1210.43 1266.92,1210.43 1267.5,1210.43 1268.09,1210.43 1268.68,1210.43 1269.26,1210.43 1269.85,1210.43 1270.44,1210.43 1271.02,1210.43 1271.61,1210.43 1272.19,1210.43 1272.78,1210.43 1273.37,1210.43 1273.95,1210.43 1274.54,1210.43 1275.13,1210.43 1275.71,1210.43 1276.3,1210.43 1276.89,1210.43 1277.47,1210.43 1278.06,1210.43 1278.65,1210.43 1279.23,1210.43 1279.82,1210.43 1280.4,1210.43 1280.99,1210.43 1281.58,1210.43 1282.16,1210.43 1282.75,1210.43 1283.34,1210.43 1283.92,1210.43 1284.51,1210.43 1285.1,1210.43 1285.68,1210.43 1286.27,1210.43 1286.86,1210.43 1287.44,1210.43 1288.03,1210.43 1288.61,1210.43 1289.2,1210.43 1289.79,1210.43 1290.37,1210.43 1290.96,1210.43 1291.55,1210.43 1292.13,1210.43 1292.72,1210.43 1293.31,1210.43 1293.89,1210.43 1294.48,1210.43 1295.06,1210.43 1295.65,1210.43 1296.24,1210.43 1296.82,1210.43 1297.41,1210.43 1298,1210.43 1298.58,1210.43 1299.17,1210.43 1299.76,1210.43 1300.34,1210.43 1300.93,1210.43 1301.52,1210.43 1302.1,1210.43 1302.69,1210.43 1303.27,1210.43 1303.86,1210.43 1304.45,1210.43 1305.03,1210.43 1305.62,1210.43 1306.21,1210.43 1306.79,1210.43 1307.38,1210.43 1307.97,1210.43 1308.55,1210.43 1309.14,1210.43 1309.73,1210.43 1310.31,1210.43 1310.9,1210.43 1311.48,1210.43 1312.07,1210.43 1312.66,1210.43 1313.24,1210.43 1313.83,1210.43 1314.42,1210.43 1315,1210.43 1315.59,1210.43 1316.18,1210.43 1316.76,1210.43 1317.35,1210.43 1317.93,1210.43 1318.52,1210.43 1319.11,1210.43 1319.69,1210.43 1320.28,1210.43 1320.87,1210.43 1321.45,1210.43 1322.04,1210.43 1322.63,1210.43 1323.21,1210.43 1323.8,1210.43 1324.39,1210.43 1324.97,1210.43 1325.56,1210.43 1326.14,1210.43 1326.73,1210.43 1327.32,1210.43 1327.9,1210.43 1328.49,1210.43 1329.08,1210.43 1329.66,1210.43 1330.25,1210.43 1330.84,1210.43 1331.42,1210.43 1332.01,1210.43 1332.6,1210.43 1333.18,1210.43 1333.77,1210.43 1334.35,1210.43 1334.94,1210.43 1335.53,1210.43 1336.11,1210.43 1336.7,1210.43 1337.29,1210.43 1337.87,1210.43 1338.46,1210.43 1339.05,1210.43 1339.63,1210.43 1340.22,1210.43 1340.8,1210.43 1341.39,1210.43 1341.98,1210.43 1342.56,1210.43 1343.15,1210.43 1343.74,1210.43 1344.32,1210.43 1344.91,1210.43 1345.5,1210.43 1346.08,1210.43 1346.67,1210.43 1347.26,1210.43 1347.84,1210.43 1348.43,1210.43 1349.01,1210.43 1349.6,1210.43 1350.19,1210.43 1350.77,1210.43 1351.36,1210.43 1351.95,1210.43 1352.53,1210.43 1353.12,1210.43 1353.71,1210.43 1354.29,1210.43 1354.88,1210.43 1355.47,1210.43 1356.05,1210.43 1356.64,1210.43 1357.22,1210.43 1357.81,1210.43 1358.4,1210.43 1358.98,1210.43 1359.57,1210.43 1360.16,1210.43 1360.74,1210.43 1361.33,1210.43 1361.92,1210.43 1362.5,1210.43 1363.09,1210.43 1363.68,1210.43 1364.26,1210.43 1364.85,1210.43 1365.43,1210.43 1366.02,1210.43 1366.61,1210.43 1367.19,1210.43 1367.78,1210.43 1368.37,1210.43 1368.95,1210.43 1369.54,1210.43 1370.13,1210.43 1370.71,1210.43 1371.3,1210.43 1371.88,1210.43 1372.47,1210.43 1373.06,1210.43 1373.64,1210.43 1374.23,1210.43 1374.82,1210.43 1375.4,1210.43 1375.99,1210.43 1376.58,1210.43 1377.16,1210.43 1377.75,1210.43 1378.34,1210.43 1378.92,1210.43 1379.51,1210.43 1380.09,1210.43 1380.68,1210.43 1381.27,1210.43 1381.85,1210.43 1382.44,1210.43 1383.03,1210.43 1383.61,1210.43 1384.2,1210.43 1384.79,1210.43 1385.37,1210.43 1385.96,1210.43 1386.55,1210.43 1387.13,1210.43 1387.72,1210.43 1388.3,1210.43 1388.89,1210.43 1389.48,1210.43 1390.06,1210.43 1390.65,1210.43 1391.24,1210.43 1391.82,1210.43 1392.41,1210.43 1393,1210.43 1393.58,1210.43 1394.17,1210.43 1394.75,1210.43 1395.34,1210.43 1395.93,1210.43 1396.51,1210.43 1397.1,1210.43 1397.69,1210.43 1398.27,1210.43 1398.86,1210.43 1399.45,1210.43 1400.03,1210.43 1400.62,1210.43 1401.21,1210.43 1401.79,1210.43 1402.38,1210.43 1402.96,1210.43 1403.55,1210.43 1404.14,1210.43 1404.72,1210.43 1405.31,1210.43 1405.9,1210.43 1406.48,1210.43 1407.07,1210.43 1407.66,1210.43 1408.24,1210.43 1408.83,1210.43 1409.42,1210.43 1410,1210.43 1410.59,1210.43 1411.17,1210.43 1411.76,1210.43 1412.35,1210.43 1412.93,1210.43 1413.52,1210.43 1414.11,1210.43 1414.69,1210.43 1415.28,1210.43 1415.87,1210.43 1416.45,1210.43 1417.04,1210.43 1417.63,1210.43 1418.21,1210.43 1418.8,1210.43 1419.38,1210.43 1419.97,1210.43 1420.56,1210.43 1421.14,1210.43 1421.73,1210.43 1422.32,1210.43 1422.9,1210.43 1423.49,1210.43 1424.08,1210.43 1424.66,1210.43 1425.25,1210.43 1425.83,1210.43 1426.42,1210.43 1427.01,1210.43 1427.59,1210.43 1428.18,1210.43 1428.77,1210.43 1429.35,1210.43 1429.94,1210.43 1430.53,1210.43 1431.11,1210.43 1431.7,1210.43 1432.29,1210.43 1432.87,1210.43 1433.46,1210.43 1434.04,1210.43 1434.63,1210.43 1435.22,1210.43 1435.8,1210.43 1436.39,1210.43 1436.98,1210.43 1437.56,1210.43 1438.15,1210.43 1438.74,1210.43 1439.32,1210.43 1439.91,1210.43 1440.5,1210.43 1441.08,1210.43 1441.67,1210.43 1442.25,1210.43 1442.84,1210.43 1443.43,1210.43 1444.01,1210.43 1444.6,1210.43 1445.19,1210.43 1445.77,1210.43 1446.36,1210.43 1446.95,1210.43 1447.53,1210.43 1448.12,1210.43 1448.7,1210.43 1449.29,1210.43 1449.88,1210.43 1450.46,1210.43 1451.05,1210.43 1451.64,1210.43 1452.22,1210.43 1452.81,1210.43 1453.4,1210.43 1453.98,1210.43 1454.57,1210.43 1455.16,1210.43 1455.74,1210.43 1456.33,1210.43 1456.91,1210.43 1457.5,1210.43 1458.09,1210.43 1458.67,1210.43 1459.26,1210.43 1459.85,1210.43 1460.43,1210.43 1461.02,1210.43 1461.61,1210.43 1462.19,1210.43 1462.78,1210.43 1463.37,1210.43 1463.95,1210.43 1464.54,1210.43 1465.12,1210.43 1465.71,1210.43 1466.3,1210.43 1466.88,1210.43 1467.47,1210.43 1468.06,1210.43 1468.64,1210.43 1469.23,1210.43 1469.82,1210.43 1470.4,1210.43 1470.99,1210.43 1471.57,1210.43 1472.16,1210.43 1472.75,1210.43 1473.33,1210.43 1473.92,1210.43 1474.51,1210.43 1475.09,1210.43 1475.68,1210.43 1476.27,1210.43 1476.85,1210.43 1477.44,1210.43 1478.03,1210.43 1478.61,1210.43 1479.2,1210.43 1479.78,1210.43 1480.37,1210.43 1480.96,1210.43 1481.54,1210.43 1482.13,1210.43 1482.72,1210.43 1483.3,1210.43 1483.89,1210.43 1484.48,1210.43 1485.06,1210.43 1485.65,1210.43 1486.24,1210.43 1486.82,1210.43 1487.41,1210.43 1487.99,1210.43 1488.58,1210.43 1489.17,1210.43 1489.75,1210.43 1490.34,1210.43 1490.93,1210.43 1491.51,1210.43 1492.1,1210.43 1492.69,1210.43 1493.27,1210.43 1493.86,1210.43 1494.45,1210.43 1495.03,1210.43 1495.62,1210.43 1496.2,1210.43 1496.79,1210.43 1497.38,1210.43 1497.96,1210.43 1498.55,1210.43 1499.14,1210.43 1499.72,1210.43 1500.31,1210.43 1500.9,1210.43 1501.48,1210.43 1502.07,1210.43 1502.65,1210.43 1503.24,1210.43 1503.83,1210.43 1504.41,1210.43 1505,1210.43 1505.59,1210.43 1506.17,1210.43 1506.76,1210.43 1507.35,1210.43 1507.93,1210.43 1508.52,1210.43 1509.11,1210.43 1509.69,1210.43 1510.28,1210.43 1510.86,1210.43 1511.45,1210.43 1512.04,1210.43 1512.62,1210.43 1513.21,1210.43 1513.8,1210.43 1514.38,1210.43 1514.97,1210.43 1515.56,1210.43 1516.14,1210.43 1516.73,1210.43 1517.32,1210.43 1517.9,1210.43 1518.49,1210.43 1519.07,1210.43 1519.66,1210.43 1520.25,1210.43 1520.83,1210.43 1521.42,1210.43 1522.01,1210.43 1522.59,1210.43 1523.18,1210.43 1523.77,1210.43 1524.35,1210.43 1524.94,1210.43 1525.52,1210.43 1526.11,1210.43 1526.7,1210.43 1527.28,1210.43 1527.87,1210.43 1528.46,1210.43 1529.04,1210.43 1529.63,1210.43 1530.22,1210.43 1530.8,1210.43 1531.39,1210.43 1531.98,1210.43 1532.56,1210.43 1533.15,1210.43 1533.73,1210.43 1534.32,1210.43 1534.91,1210.43 1535.49,1210.43 1536.08,1210.43 1536.67,1210.43 1537.25,1210.43 1537.84,1210.43 1538.43,1210.43 1539.01,1210.43 1539.6,1210.43 1540.19,1210.43 1540.77,1210.43 1541.36,1210.43 1541.94,1210.43 1542.53,1210.43 1543.12,1210.43 1543.7,1210.43 1544.29,1210.43 1544.88,1210.43 1545.46,1210.43 1546.05,1210.43 1546.64,1210.43 1547.22,1210.43 1547.81,1210.43 1548.4,1210.43 1548.98,1210.43 1549.57,1210.43 1550.15,1210.43 1550.74,1210.43 1551.33,1210.43 1551.91,1210.43 1552.5,1210.43 1553.09,1210.43 1553.67,1210.43 1554.26,1210.43 1554.85,1210.43 1555.43,1210.43 1556.02,1210.43 1556.6,1210.43 1557.19,1210.43 1557.78,1210.43 1558.36,1210.43 1558.95,1210.43 1559.54,1210.43 1560.12,1210.43 1560.71,1210.43 1561.3,1210.43 1561.88,1210.43 1562.47,1210.43 1563.06,1210.43 1563.64,1210.43 1564.23,1210.43 1564.81,1210.43 1565.4,1210.43 1565.99,1210.43 1566.57,1210.43 1567.16,1210.43 1567.75,1210.43 1568.33,1210.43 1568.92,1210.43 1569.51,1210.43 1570.09,1210.43 1570.68,1210.43 1571.27,1210.43 1571.85,1210.43 1572.44,1210.43 1573.02,1210.43 1573.61,1210.43 1574.2,1210.43 1574.78,1210.43 1575.37,1210.43 1575.96,1210.43 1576.54,1210.43 1577.13,1210.43 1577.72,1210.43 1578.3,1210.43 1578.89,1210.43 1579.47,1210.43 1580.06,1210.43 1580.65,1210.43 1581.23,1210.43 1581.82,1210.43 1582.41,1210.43 1582.99,1210.43 1583.58,1210.43 1584.17,1210.43 1584.75,1210.43 1585.34,1210.43 1585.93,1210.43 1586.51,1210.43 1587.1,1210.43 1587.68,1210.43 1588.27,1210.43 1588.86,1210.43 1589.44,1210.43 1590.03,1210.43 1590.62,1210.43 1591.2,1210.43 1591.79,1210.43 1592.38,1210.43 1592.96,1210.43 1593.55,1210.43 1594.14,1210.43 1594.72,1210.43 1595.31,1210.43 1595.89,1210.43 1596.48,1210.43 1597.07,1210.43 1597.65,1210.43 1598.24,1210.43 1598.83,1210.43 1599.41,1210.43 1600,1210.43 1600.59,1210.43 1601.17,1210.43 1601.76,1210.43 1602.34,1210.43 1602.93,1210.43 1603.52,1210.43 1604.1,1210.43 1604.69,1210.43 1605.28,1210.43 1605.86,1210.43 1606.45,1210.43 1607.04,1210.43 1607.62,1210.43 1608.21,1210.43 1608.8,1210.43 1609.38,1210.43 1609.97,1210.43 1610.55,1210.43 1611.14,1210.43 1611.73,1210.43 1612.31,1210.43 1612.9,1210.43 1613.49,1210.43 1614.07,1210.43 1614.66,1210.43 1615.25,1210.43 1615.83,1210.43 1616.42,1210.43 1617.01,1210.43 1617.59,1210.43 1618.18,1210.43 1618.76,1210.43 1619.35,1210.43 1619.94,1210.43 1620.52,1210.43 1621.11,1210.43 1621.7,1210.43 1622.28,1210.43 1622.87,1210.43 1623.46,1210.43 1624.04,1210.43 1624.63,1210.43 1625.22,1210.43 1625.8,1210.43 1626.39,1210.43 1626.97,1210.43 1627.56,1210.43 1628.15,1210.43 1628.73,1210.43 1629.32,1210.43 1629.91,1210.43 1630.49,1210.43 1631.08,1210.43 1631.67,1210.43 1632.25,1210.43 1632.84,1210.43 1633.42,1210.43 1634.01,1210.43 1634.6,1210.43 1635.18,1210.43 1635.77,1210.43 1636.36,1210.43 1636.94,1210.43 1637.53,1210.43 1638.12,1210.43 1638.7,1210.43 1639.29,1210.43 1639.88,1210.43 1640.46,1210.43 1641.05,1210.43 1641.63,1210.43 1642.22,1210.43 1642.81,1210.43 1643.39,1210.43 1643.98,1210.43 1644.57,1210.43 1645.15,1210.43 1645.74,1210.43 1646.33,1210.43 1646.91,1210.43 1647.5,1210.43 1648.09,1210.43 1648.67,1210.43 1649.26,1210.43 1649.84,1210.43 1650.43,1210.43 1651.02,1210.43 1651.6,1210.43 1652.19,1210.43 1652.78,1210.43 1653.36,1210.43 1653.95,1210.43 1654.54,1210.43 1655.12,1210.43 1655.71,1210.43 1656.29,1210.43 1656.88,1210.43 1657.47,1210.43 1658.05,1210.43 1658.64,1210.43 1659.23,1210.43 1659.81,1210.43 1660.4,1210.43 1660.99,1210.43 1661.57,1210.43 1662.16,1210.43 1662.75,1210.43 1663.33,1210.43 1663.92,1210.43 1664.5,1210.43 1665.09,1210.43 1665.68,1210.43 1666.26,1210.43 1666.85,1210.43 1667.44,1210.43 1668.02,1210.43 1668.61,1210.43 1669.2,1210.43 1669.78,1210.43 1670.37,1210.43 1670.96,1210.43 1671.54,1210.43 1672.13,1210.43 1672.71,1210.43 1673.3,1210.43 1673.89,1210.43 1674.47,1210.43 1675.06,1210.43 1675.65,1210.43 1676.23,1210.43 1676.82,1210.43 1677.41,1210.43 1677.99,1210.43 1678.58,1210.43 1679.17,1210.43 1679.75,1210.43 1680.34,1210.43 1680.92,1210.43 1681.51,1210.43 1682.1,1210.43 1682.68,1210.43 1683.27,1210.43 1683.86,1210.43 1684.44,1210.43 1685.03,1210.43 1685.62,1210.43 1686.2,1210.43 1686.79,1210.43 1687.37,1210.43 1687.96,1210.43 1688.55,1210.43 1689.13,1210.43 1689.72,1210.43 1690.31,1210.43 1690.89,1210.43 1691.48,1210.43 1692.07,1210.43 1692.65,1210.43 1693.24,1210.43 1693.83,1210.43 1694.41,1210.43 1695,1210.43 1695.58,1210.43 1696.17,1210.43 1696.76,1210.43 1697.34,1210.43 1697.93,1210.43 1698.52,1210.43 1699.1,1210.43 1699.69,1210.43 1700.28,1210.43 1700.86,1210.43 1701.45,1210.43 1702.04,1210.43 1702.62,1210.43 1703.21,1210.43 1703.79,1210.43 1704.38,1210.43 1704.97,1210.43 1705.55,1210.43 1706.14,1210.43 1706.73,1210.43 1707.31,1210.43 1707.9,1210.43 1708.49,1210.43 1709.07,1210.43 1709.66,1210.43 1710.24,1210.43 1710.83,1210.43 1711.42,1210.43 1712,1210.43 1712.59,1210.43 1713.18,1210.43 1713.76,1210.43 1714.35,1210.43 1714.94,1210.43 1715.52,1210.43 1716.11,1210.43 1716.7,1210.43 1717.28,1210.43 1717.87,1210.43 1718.45,1210.43 1719.04,1210.43 1719.63,1210.43 1720.21,1210.43 1720.8,1210.43 1721.39,1210.43 1721.97,1210.43 1722.56,1210.43 1723.15,1210.43 1723.73,1210.43 1724.32,1210.43 1724.91,1210.43 1725.49,1210.43 1726.08,1210.43 1726.66,1210.43 1727.25,1210.43 1727.84,1210.43 1728.42,1210.43 1729.01,1210.43 1729.6,1210.43 1730.18,1210.43 1730.77,1210.43 1731.36,1210.43 1731.94,1210.43 1732.53,1210.43 1733.11,1210.43 1733.7,1210.43 1734.29,1210.43 1734.87,1210.43 1735.46,1210.43 1736.05,1210.43 1736.63,1210.43 1737.22,1210.43 1737.81,1210.43 1738.39,1210.43 1738.98,1210.43 1739.57,1210.43 1740.15,1210.43 1740.74,1210.43 1741.32,1210.43 1741.91,1210.43 1742.5,1210.43 1743.08,1210.43 1743.67,1210.43 1744.26,1210.43 1744.84,1210.43 1745.43,1210.43 1746.02,1210.43 1746.6,1210.43 1747.19,1210.43 1747.78,1210.43 1748.36,1210.43 1748.95,1210.43 1749.53,1210.43 1750.12,1210.43 1750.71,1210.43 1751.29,1210.43 1751.88,1210.43 1752.47,1210.43 1753.05,1210.43 1753.64,1210.43 1754.23,1210.43 1754.81,1210.43 1755.4,1210.43 1755.99,1210.43 1756.57,1210.43 1757.16,1210.43 1757.74,1210.43 1758.33,1210.43 1758.92,1210.43 1759.5,1210.43 1760.09,1210.43 1760.68,1210.43 1761.26,1210.43 1761.85,1210.43 1762.44,1210.43 1763.02,1210.43 1763.61,1210.43 1764.19,1210.43 1764.78,1210.43 1765.37,1210.43 1765.95,1210.43 1766.54,1210.43 1767.13,1210.43 1767.71,1210.43 1768.3,1210.43 1768.89,1210.43 1769.47,1210.43 1770.06,1210.43 1770.65,1210.43 1771.23,1210.43 1771.82,1210.43 1772.4,1210.43 1772.99,1210.43 1773.58,1210.43 1774.16,1210.43 1774.75,1210.43 1775.34,1210.43 1775.92,1210.43 1776.51,1210.43 1777.1,1210.43 1777.68,1210.43 1778.27,1210.43 1778.86,1210.43 1779.44,1210.43 1780.03,1210.43 1780.61,1210.43 1781.2,1210.43 1781.79,1210.43 1782.37,1210.43 1782.96,1210.43 1783.55,1210.43 1784.13,1210.43 1784.72,1210.43 1785.31,1210.43 1785.89,1210.43 1786.48,1210.43 1787.06,1210.43 1787.65,1210.43 1788.24,1210.43 1788.82,1210.43 1789.41,1210.43 1790,1210.43 1790.58,1210.43 1791.17,1210.43 1791.76,1210.43 1792.34,1210.43 1792.93,1210.43 1793.52,1210.43 1794.1,1210.43 1794.69,1210.43 1795.27,1210.43 1795.86,1210.43 1796.45,1210.43 1797.03,1210.43 1797.62,1210.43 1798.21,1210.43 1798.79,1210.43 1799.38,1210.43 1799.97,1210.43 1800.55,1210.43 1801.14,1210.43 1801.73,1210.43 1802.31,1210.43 1802.9,1210.43 1803.48,1210.43 1804.07,1210.43 1804.66,1210.43 1805.24,1210.43 1805.83,1210.43 1806.42,1210.43 1807,1210.43 1807.59,1210.43 1808.18,1210.43 1808.76,1210.43 1809.35,1210.43 1809.94,1210.43 1810.52,1210.43 1811.11,1210.43 1811.69,1210.43 1812.28,1210.43 1812.87,1210.43 1813.45,1210.43 1814.04,1210.43 1814.63,1210.43 1815.21,1210.43 1815.8,1210.43 1816.39,1210.43 1816.97,1210.43 1817.56,1210.43 1818.14,1210.43 1818.73,1210.43 1819.32,1210.43 1819.9,1210.43 1820.49,1210.43 1821.08,1210.43 1821.66,1210.43 1822.25,1210.43 1822.84,1210.43 1823.42,1210.43 1824.01,1210.43 1824.6,1210.43 1825.18,1210.43 1825.77,1210.43 1826.35,1210.43 1826.94,1210.43 1827.53,1210.43 1828.11,1210.43 1828.7,1210.43 1829.29,1210.43 1829.87,1210.43 1830.46,1210.43 1831.05,1210.43 1831.63,1210.43 1832.22,1210.43 1832.81,1210.43 1833.39,1210.43 1833.98,1210.43 1834.56,1210.43 1835.15,1210.43 1835.74,1210.43 1836.32,1210.43 1836.91,1210.43 1837.5,1210.43 1838.08,1210.43 1838.67,1210.43 1839.26,1210.43 1839.84,1210.43 1840.43,1210.43 1841.01,1210.43 1841.6,1210.43 1842.19,1210.43 1842.77,1210.43 1843.36,1210.43 1843.95,1210.43 1844.53,1210.43 1845.12,1210.43 1845.71,1210.43 1846.29,1210.43 1846.88,1210.43 1847.47,1210.43 1848.05,1210.43 1848.64,1210.43 1849.22,1210.43 1849.81,1210.43 1850.4,1210.43 1850.98,1210.43 1851.57,1210.43 1852.16,1210.43 1852.74,1210.43 1853.33,1210.43 1853.92,1210.43 1854.5,1210.43 1855.09,1210.43 1855.68,1210.43 1856.26,1210.43 1856.85,1210.43 1857.43,1210.43 1858.02,1210.43 1858.61,1210.43 1859.19,1210.43 1859.78,1210.43 1860.37,1210.43 1860.95,1210.43 1861.54,1210.43 1862.13,1210.43 1862.71,1210.43 1863.3,1210.43 1863.88,1210.43 1864.47,1210.43 1865.06,1210.43 1865.64,1210.43 1866.23,1210.43 1866.82,1210.43 1867.4,1210.43 1867.99,1210.43 1868.58,1210.43 1869.16,1210.43 1869.75,1210.43 1870.34,1210.43 1870.92,1210.43 1871.51,1210.43 1872.09,1210.43 1872.68,1210.43 1873.27,1210.43 1873.85,1210.43 1874.44,1210.43 1875.03,1210.43 1875.61,1210.43 1876.2,1210.43 1876.79,1210.43 1877.37,1210.43 1877.96,1210.43 1878.55,1210.43 1879.13,1210.43 1879.72,1210.43 1880.3,1210.43 1880.89,1210.43 1881.48,1210.43 1882.06,1210.43 1882.65,1210.43 1883.24,1210.43 1883.82,1210.43 1884.41,1210.43 1885,1210.43 1885.58,1210.43 1886.17,1210.43 1886.76,1210.43 1887.34,1210.43 1887.93,1210.43 1888.51,1210.43 1889.1,1210.43 1889.69,1210.43 1890.27,1210.43 1890.86,1210.43 1891.45,1210.43 1892.03,1210.43 1892.62,1210.43 1893.21,1210.43 1893.79,1210.43 1894.38,1210.43 1894.96,1210.43 1895.55,1210.43 1896.14,1210.43 1896.72,1210.43 1897.31,1210.43 1897.9,1210.43 1898.48,1210.43 1899.07,1210.43 1899.66,1210.43 1900.24,1210.43 1900.83,1210.43 1901.42,1210.43 1902,1210.43 1902.59,1210.43 1903.17,1210.43 1903.76,1210.43 1904.35,1210.43 1904.93,1210.43 1905.52,1210.43 1906.11,1210.43 1906.69,1210.43 1907.28,1210.43 1907.87,1210.43 1908.45,1210.43 1909.04,1210.43 1909.63,1210.43 1910.21,1210.43 1910.8,1210.43 1911.38,1210.43 1911.97,1210.43 1912.56,1210.43 1913.14,1210.43 1913.73,1210.43 1914.32,1210.43 1914.9,1210.43 1915.49,1210.43 1916.08,1210.43 1916.66,1210.43 1917.25,1210.43 1917.83,1210.43 1918.42,1210.43 1919.01,1210.43 1919.59,1210.43 1920.18,1210.43 1920.77,1210.43 1921.35,1210.43 1921.94,1210.43 1922.53,1210.43 1923.11,1210.43 1923.7,1210.43 1924.29,1210.43 1924.87,1210.43 1925.46,1210.43 1926.04,1210.43 1926.63,1210.43 1927.22,1210.43 1927.8,1210.43 1928.39,1210.43 1928.98,1210.43 1929.56,1210.43 1930.15,1210.43 1930.74,1210.43 1931.32,1210.43 1931.91,1210.43 1932.5,1210.43 1933.08,1210.43 1933.67,1210.43 1934.25,1210.43 1934.84,1210.43 1935.43,1210.43 1936.01,1210.43 1936.6,1210.43 1937.19,1210.43 1937.77,1210.43 1938.36,1210.43 1938.95,1210.43 1939.53,1210.43 1940.12,1210.43 1940.71,1210.43 1941.29,1210.43 1941.88,1210.43 1942.46,1210.43 1943.05,1210.43 1943.64,1210.43 1944.22,1210.43 1944.81,1210.43 1945.4,1210.43 1945.98,1210.43 1946.57,1210.43 1947.16,1210.43 1947.74,1210.43 1948.33,1210.43 1948.91,1210.43 1949.5,1210.43 1950.09,1210.43 1950.67,1210.43 1951.26,1210.43 1951.85,1210.43 1952.43,1210.43 1953.02,1210.43 1953.61,1210.43 1954.19,1210.43 1954.78,1210.43 1955.37,1210.43 1955.95,1210.43 1956.54,1210.43 1957.12,1210.43 1957.71,1210.43 1958.3,1210.43 1958.88,1210.43 1959.47,1210.43 1960.06,1210.43 1960.64,1210.43 1961.23,1210.43 1961.82,1210.43 1962.4,1210.43 1962.99,1210.43 1963.58,1210.43 1964.16,1210.43 1964.75,1210.43 1965.33,1210.43 1965.92,1210.43 1966.51,1210.43 1967.09,1210.43 1967.68,1210.43 1968.27,1210.43 1968.85,1210.43 1969.44,1210.43 1970.03,1210.43 1970.61,1210.43 1971.2,1210.43 1971.78,1210.43 1972.37,1210.43 1972.96,1210.43 1973.54,1210.43 1974.13,1210.43 1974.72,1210.43 1975.3,1210.43 1975.89,1210.43 1976.48,1210.43 1977.06,1210.43 1977.65,1210.43 1978.24,1210.43 1978.82,1210.43 1979.41,1210.43 1979.99,1210.43 1980.58,1210.43 1981.17,1210.43 1981.75,1210.43 1982.34,1210.43 1982.93,1210.43 1983.51,1210.43 1984.1,1210.43 1984.69,1210.43 1985.27,1210.43 1985.86,1210.43 1986.45,1210.43 1987.03,1210.43 1987.62,1210.43 1988.2,1210.43 1988.79,1210.43 1989.38,1210.43 1989.96,1210.43 1990.55,1210.43 1991.14,1210.43 1991.72,1210.43 1992.31,1210.43 1992.9,1210.43 1993.48,1210.43 1994.07,1210.43 1994.65,1210.43 1995.24,1210.43 1995.83,1210.43 1996.41,1210.43 1997,1210.43 1997.59,1210.43 1998.17,1210.43 1998.76,1210.43 1999.35,1210.43 1999.93,1210.43 2000.52,1210.43 2001.11,1210.43 2001.69,1210.43 2002.28,1210.43 2002.86,1210.43 2003.45,1210.43 2004.04,1210.43 2004.62,1210.43 2005.21,1210.43 2005.8,1210.43 2006.38,1210.43 2006.97,1210.43 2007.56,1210.43 2008.14,1210.43 2008.73,1210.43 2009.32,1210.43 2009.9,1210.43 2010.49,1210.43 2011.07,1210.43 2011.66,1210.43 2012.25,1210.43 2012.83,1210.43 2013.42,1210.43 2014.01,1210.43 2014.59,1210.43 2015.18,1210.43 2015.77,1210.43 2016.35,1210.43 2016.94,1210.43 2017.53,1210.43 2018.11,1210.43 2018.7,1210.43 2019.28,1210.43 2019.87,1210.43 2020.46,1210.43 2021.04,1210.43 2021.63,1210.43 2022.22,1210.43 2022.8,1210.43 2023.39,1210.43 2023.98,1210.43 2024.56,1210.43 2025.15,1210.43 2025.73,1210.43 2026.32,1210.43 2026.91,1210.43 2027.49,1210.43 2028.08,1210.43 2028.67,1210.43 2029.25,1210.43 2029.84,1210.43 2030.43,1210.43 2031.01,1210.43 2031.6,1210.43 2032.19,1210.43 2032.77,1210.43 2033.36,1210.43 2033.94,1210.43 2034.53,1210.43 2035.12,1210.43 2035.7,1210.43 2036.29,1210.43 2036.88,1210.43 2037.46,1210.43 2038.05,1210.43 2038.64,1210.43 2039.22,1210.43 2039.81,1210.43 2040.4,1210.43 2040.98,1210.43 2041.57,1210.43 2042.15,1210.43 2042.74,1210.43 2043.33,1210.43 2043.91,1210.43 2044.5,1210.43 2045.09,1210.43 2045.67,1210.43 2046.26,1210.43 2046.85,1210.43 2047.43,1210.43 2048.02,1210.43 2048.6,1210.43 2049.19,1210.43 2049.78,1210.43 2050.36,1210.43 2050.95,1210.43 2051.54,1210.43 2052.12,1210.43 2052.71,1210.43 2053.3,1210.43 2053.88,1210.43 2054.47,1210.43 2055.06,1210.43 2055.64,1210.43 2056.23,1210.43 2056.81,1210.43 2057.4,1210.43 2057.99,1210.43 2058.57,1210.43 2059.16,1210.43 2059.75,1210.43 2060.33,1210.43 2060.92,1210.43 2061.51,1210.43 2062.09,1210.43 2062.68,1210.43 2063.27,1210.43 2063.85,1210.43 2064.44,1210.43 2065.02,1210.43 2065.61,1210.43 2066.2,1210.43 2066.78,1210.43 2067.37,1210.43 2067.96,1210.43 2068.54,1210.43 2069.13,1210.43 2069.72,1210.43 2070.3,1210.43 2070.89,1210.43 2071.48,1210.43 2072.06,1210.43 2072.65,1210.43 2073.23,1210.43 2073.82,1210.43 2074.41,1210.43 2074.99,1210.43 2075.58,1210.43 2076.17,1210.43 2076.75,1210.43 2077.34,1210.43 2077.93,1210.43 2078.51,1210.43 2079.1,1210.43 2079.68,1210.43 2080.27,1210.43 2080.86,1210.43 2081.44,1210.43 2082.03,1210.43 2082.62,1210.43 2083.2,1210.43 2083.79,1210.43 2084.38,1210.43 2084.96,1210.43 2085.55,1210.43 2086.14,1210.43 2086.72,1210.43 2087.31,1210.43 2087.89,1210.43 2088.48,1210.43 2089.07,1210.43 2089.65,1210.43 2090.24,1210.43 2090.83,1210.43 2091.41,1210.43 2092,1210.43 2092.59,1210.43 2093.17,1210.43 2093.76,1210.43 2094.35,1210.43 2094.93,1210.43 2095.52,1210.43 2096.1,1210.43 2096.69,1210.43 2097.28,1210.43 2097.86,1210.43 2098.45,1210.43 2099.04,1210.43 2099.62,1210.43 2100.21,1210.43 2100.8,1210.43 2101.38,1210.43 2101.97,1210.43 2102.55,1210.43 2103.14,1210.43 2103.73,1210.43 2104.31,1210.43 2104.9,1210.43 2105.49,1210.43 2106.07,1210.43 2106.66,1210.43 2107.25,1210.43 2107.83,1210.43 2108.42,1210.43 2109.01,1210.43 2109.59,1210.43 2110.18,1210.43 2110.76,1210.43 2111.35,1210.43 2111.94,1210.43 2112.52,1210.43 2113.11,1210.43 2113.7,1210.43 2114.28,1210.43 2114.87,1210.43 2115.46,1210.43 2116.04,1210.43 2116.63,1210.43 2117.22,1210.43 2117.8,1210.43 2118.39,1210.43 2118.97,1210.43 2119.56,1210.43 2120.15,1210.43 2120.73,1210.43 2121.32,1210.43 2121.91,1210.43 2122.49,1210.43 2123.08,1210.43 2123.67,1210.43 2124.25,1210.43 2124.84,1210.43 2125.42,1210.43 2126.01,1210.43 2126.6,1210.43 2127.18,1210.43 2127.77,1210.43 2128.36,1210.43 2128.94,1210.43 2129.53,1210.43 2130.12,1210.43 2130.7,1210.43 2131.29,1210.43 2131.88,1210.43 2132.46,1210.43 2133.05,1210.43 2133.63,1210.43 2134.22,1210.43 2134.81,1210.43 2135.39,1210.43 2135.98,1210.43 2136.57,1210.43 2137.15,1210.43 2137.74,1210.43 2138.33,1210.43 2138.91,1210.43 2139.5,1210.43 2140.09,1210.43 2140.67,1210.43 2141.26,1210.43 2141.84,1210.43 2142.43,1210.43 2143.02,1210.43 2143.6,1210.43 2144.19,1210.43 2144.78,1210.43 2145.36,1210.43 2145.95,1210.43 2146.54,1210.43 2147.12,1210.43 2147.71,1210.43 2148.3,1210.43 2148.88,1210.43 2149.47,1210.43 2150.05,1210.43 2150.64,1210.43 2151.23,1210.43 2151.81,1210.43 2152.4,1210.43 2152.99,1210.43 2153.57,1210.43 2154.16,1210.43 2154.75,1210.43 2155.33,1210.43 2155.92,1210.43 2156.5,1210.43 2157.09,1210.43 2157.68,1210.43 2158.26,1210.43 \"/>\n<path clip-path=\"url(#clip002)\" d=\"M986.025 1210.13 L986.612 1210.13 L987.198 1210.13 L987.785 1210.13 L988.371 1210.13 L988.957 1210.13 L989.544 1210.13 L990.13 1210.13 L990.717 1210.13 L991.303 1210.13 L991.889 1210.13 L992.476 1210.13 L993.062 1210.13 L993.649 1210.13 L994.235 1210.13 L994.822 1210.13 L995.408 1210.13 L995.994 1210.13 L996.581 1210.13 L997.167 1210.13 L997.754 1210.13 L998.34 1210.13 L998.926 1210.13 L999.513 1210.13 L1000.1 1210.13 L1000.69 1210.13 L1001.27 1210.13 L1001.86 1210.13 L1002.44 1210.13 L1003.03 1210.13 L1003.62 1210.13 L1004.2 1210.13 L1004.79 1210.13 L1005.38 1210.13 L1005.96 1210.13 L1006.55 1210.13 L1007.14 1210.13 L1007.72 1210.13 L1008.31 1210.13 L1008.9 1210.13 L1009.48 1210.13 L1010.07 1210.13 L1010.65 1210.13 L1011.24 1210.13 L1011.83 1210.13 L1012.41 1210.13 L1013 1210.13 L1013.59 1210.13 L1014.17 1210.13 L1014.76 1210.13 L1015.35 1210.13 L1015.93 1210.13 L1016.52 1210.13 L1017.11 1210.13 L1017.69 1210.13 L1018.28 1210.13 L1018.86 1210.13 L1019.45 1210.13 L1020.04 1210.13 L1020.62 1210.13 L1021.21 1210.13 L1021.8 1210.13 L1022.38 1210.13 L1022.97 1210.13 L1023.56 1210.13 L1024.14 1210.13 L1024.73 1210.13 L1025.32 1210.13 L1025.9 1210.13 L1026.49 1210.13 L1027.07 1210.13 L1027.66 1210.13 L1028.25 1210.13 L1028.83 1210.13 L1029.42 1210.13 L1030.01 1210.13 L1030.59 1210.13 L1031.18 1210.13 L1031.77 1210.13 L1032.35 1210.13 L1032.94 1210.13 L1033.52 1210.13 L1034.11 1210.13 L1034.7 1210.13 L1035.28 1210.13 L1035.87 1210.13 L1036.46 1210.13 L1037.04 1210.13 L1037.63 1210.13 L1038.22 1210.13 L1038.8 1210.13 L1039.39 1210.13 L1039.98 1210.13 L1040.56 1210.13 L1041.15 1210.13 L1041.73 1210.13 L1042.32 1210.13 L1042.91 1210.13 L1043.49 1210.13 L1044.08 1210.13 L1044.67 1210.13 L1045.25 1210.13 L1045.84 1210.13 L1046.43 1210.13 L1047.01 1210.13 L1047.6 1210.13 L1048.19 1210.13 L1048.77 1210.13 L1049.36 1210.13 L1049.94 1210.13 L1050.53 1210.13 L1051.12 1210.13 L1051.7 1210.13 L1052.29 1210.13 L1052.88 1210.13 L1053.46 1210.13 L1054.05 1210.13 L1054.64 1210.13 L1055.22 1210.13 L1055.81 1210.13 L1056.39 1210.13 L1056.98 1210.13 L1057.57 1210.13 L1058.15 1210.13 L1058.74 1210.13 L1059.33 1210.13 L1059.91 1210.13 L1060.5 1210.13 L1061.09 1210.13 L1061.67 1210.13 L1062.26 1210.13 L1062.85 1210.13 L1063.43 1210.13 L1064.02 1210.13 L1064.6 1210.13 L1065.19 1210.13 L1065.78 1210.13 L1066.36 1210.13 L1066.95 1210.13 L1067.54 1210.13 L1068.12 1210.13 L1068.71 1210.13 L1069.3 1210.13 L1069.88 1210.13 L1070.47 1210.13 L1071.06 1210.13 L1071.64 1210.13 L1072.23 1210.13 L1072.81 1210.13 L1073.4 1210.13 L1073.99 1210.13 L1074.57 1210.13 L1075.16 1210.13 L1075.75 1210.13 L1076.33 1210.13 L1076.92 1210.13 L1077.51 1210.13 L1078.09 1210.13 L1078.68 1210.13 L1079.26 1210.13 L1079.85 1210.13 L1080.44 1210.13 L1081.02 1210.13 L1081.61 1210.13 L1082.2 1210.13 L1082.78 1210.13 L1083.37 1210.13 L1083.96 1210.13 L1084.54 1210.13 L1085.13 1210.13 L1085.72 1210.13 L1086.3 1210.13 L1086.89 1210.13 L1087.47 1210.13 L1088.06 1210.13 L1088.65 1210.13 L1089.23 1210.13 L1089.82 1210.13 L1090.41 1210.13 L1090.99 1210.13 L1091.58 1210.13 L1092.17 1210.13 L1092.75 1210.13 L1093.34 1210.13 L1093.93 1210.13 L1094.51 1210.13 L1095.1 1210.13 L1095.68 1210.13 L1096.27 1210.13 L1096.86 1210.13 L1097.44 1210.13 L1098.03 1210.13 L1098.62 1210.13 L1099.2 1210.13 L1099.79 1210.13 L1100.38 1210.13 L1100.96 1210.13 L1101.55 1210.13 L1102.14 1210.13 L1102.72 1210.13 L1103.31 1210.13 L1103.89 1210.13 L1104.48 1210.13 L1105.07 1210.13 L1105.65 1210.13 L1106.24 1210.13 L1106.83 1210.13 L1107.41 1210.13 L1108 1210.13 L1108.59 1210.13 L1109.17 1210.13 L1109.76 1210.13 L1110.34 1210.13 L1110.93 1210.13 L1111.52 1210.13 L1112.1 1210.13 L1112.69 1210.13 L1113.28 1210.13 L1113.86 1210.13 L1114.45 1210.13 L1115.04 1210.13 L1115.62 1210.13 L1116.21 1210.13 L1116.8 1210.13 L1117.38 1210.13 L1117.97 1210.13 L1118.55 1210.13 L1119.14 1210.13 L1119.73 1210.13 L1120.31 1210.13 L1120.9 1210.13 L1121.49 1210.13 L1122.07 1210.13 L1122.66 1210.13 L1123.25 1210.13 L1123.83 1210.13 L1124.42 1210.13 L1125.01 1210.13 L1125.59 1210.13 L1126.18 1210.13 L1126.76 1210.13 L1127.35 1210.13 L1127.94 1210.13 L1128.52 1210.13 L1129.11 1210.13 L1129.7 1210.13 L1130.28 1210.13 L1130.87 1210.13 L1131.46 1210.13 L1132.04 1210.13 L1132.63 1210.13 L1133.21 1210.13 L1133.8 1210.13 L1134.39 1210.13 L1134.97 1210.13 L1135.56 1210.13 L1136.15 1210.13 L1136.73 1210.13 L1137.32 1210.13 L1137.91 1210.13 L1138.49 1210.13 L1139.08 1210.13 L1139.67 1210.13 L1140.25 1210.13 L1140.84 1210.13 L1141.42 1210.13 L1142.01 1210.13 L1142.6 1210.13 L1143.18 1210.13 L1143.77 1210.13 L1144.36 1210.13 L1144.94 1210.13 L1145.53 1210.13 L1146.12 1210.13 L1146.7 1210.13 L1147.29 1210.13 L1147.88 1210.13 L1148.46 1210.13 L1149.05 1210.13 L1149.63 1210.13 L1150.22 1210.13 L1150.81 1210.13 L1151.39 1210.13 L1151.98 1210.13 L1152.57 1210.13 L1153.15 1210.13 L1153.74 1210.13 L1154.33 1210.13 L1154.91 1210.13 L1155.5 1210.13 L1156.09 1210.13 L1156.67 1210.13 L1157.26 1210.13 L1157.84 1210.13 L1158.43 1210.13 L1159.02 1210.13 L1159.6 1210.13 L1160.19 1210.13 L1160.78 1210.13 L1161.36 1210.13 L1161.95 1210.13 L1162.54 1210.13 L1163.12 1210.13 L1163.71 1210.13 L1164.29 1210.13 L1164.88 1210.13 L1165.47 1210.13 L1166.05 1210.13 L1166.64 1210.13 L1167.23 1210.13 L1167.81 1210.13 L1168.4 1210.13 L1168.99 1210.13 L1169.57 1210.13 L1170.16 1210.13 L1170.75 1210.13 L1171.33 1210.13 L1171.92 1210.13 L1172.5 1210.13 L1173.09 1210.13 L1173.68 1210.13 L1174.26 1210.13 L1174.85 1210.13 L1175.44 1210.13 L1176.02 1210.13 L1176.61 1210.13 L1177.2 1210.13 L1177.78 1210.13 L1178.37 1210.13 L1178.96 1210.13 L1179.54 1210.13 L1180.13 1210.13 L1180.71 1210.13 L1181.3 1210.13 L1181.89 1210.13 L1182.47 1210.13 L1183.06 1210.13 L1183.65 1210.13 L1184.23 1210.13 L1184.82 1210.13 L1185.41 1210.13 L1185.99 1210.13 L1186.58 1210.13 L1187.16 1210.13 L1187.75 1210.13 L1188.34 1210.13 L1188.92 1210.13 L1189.51 1210.13 L1190.1 1210.13 L1190.68 1210.13 L1191.27 1210.13 L1191.86 1210.13 L1192.44 1210.13 L1193.03 1210.13 L1193.62 1210.13 L1194.2 1210.13 L1194.79 1210.13 L1195.37 1210.13 L1195.96 1210.13 L1196.55 1210.13 L1197.13 1210.13 L1197.72 1210.13 L1198.31 1210.13 L1198.89 1210.13 L1199.48 1210.13 L1200.07 1210.13 L1200.65 1210.13 L1201.24 1210.13 L1201.83 1210.13 L1202.41 1210.13 L1203 1210.13 L1203.58 1210.13 L1204.17 1210.13 L1204.76 1210.13 L1205.34 1210.13 L1205.93 1210.13 L1206.52 1210.13 L1207.1 1210.13 L1207.69 1210.13 L1208.28 1210.13 L1208.86 1210.13 L1209.45 1210.13 L1210.03 1210.13 L1210.62 1210.13 L1211.21 1210.13 L1211.79 1210.13 L1212.38 1210.13 L1212.97 1210.13 L1213.55 1210.13 L1214.14 1210.13 L1214.73 1210.13 L1215.31 1210.13 L1215.9 1210.13 L1216.49 1210.13 L1217.07 1210.13 L1217.66 1210.13 L1218.24 1210.13 L1218.83 1210.13 L1219.42 1210.13 L1220 1210.13 L1220.59 1210.13 L1221.18 1210.13 L1221.76 1210.13 L1222.35 1210.13 L1222.94 1210.13 L1223.52 1210.13 L1224.11 1210.13 L1224.7 1210.13 L1225.28 1210.13 L1225.87 1210.13 L1226.45 1210.13 L1227.04 1210.13 L1227.63 1210.13 L1228.21 1210.13 L1228.8 1210.13 L1229.39 1210.13 L1229.97 1210.13 L1230.56 1210.13 L1231.15 1210.13 L1231.73 1210.13 L1232.32 1210.13 L1232.91 1210.13 L1233.49 1210.13 L1234.08 1210.13 L1234.66 1210.13 L1235.25 1210.13 L1235.84 1210.13 L1236.42 1210.13 L1237.01 1210.13 L1237.6 1210.13 L1238.18 1210.13 L1238.77 1210.13 L1239.36 1210.13 L1239.94 1210.13 L1240.53 1210.13 L1241.11 1210.13 L1241.7 1210.13 L1242.29 1210.13 L1242.87 1210.13 L1243.46 1210.13 L1244.05 1210.13 L1244.63 1210.13 L1245.22 1210.13 L1245.81 1210.13 L1246.39 1210.13 L1246.98 1210.13 L1247.57 1210.13 L1248.15 1210.13 L1248.74 1210.13 L1249.32 1210.13 L1249.91 1210.13 L1250.5 1210.13 L1251.08 1210.13 L1251.67 1210.13 L1252.26 1210.13 L1252.84 1210.13 L1253.43 1210.13 L1254.02 1210.13 L1254.6 1210.13 L1255.19 1210.13 L1255.78 1210.13 L1256.36 1210.13 L1256.95 1210.13 L1257.53 1210.13 L1258.12 1210.13 L1258.71 1210.13 L1259.29 1210.13 L1259.88 1210.13 L1260.47 1210.13 L1261.05 1210.13 L1261.64 1210.13 L1262.23 1210.13 L1262.81 1210.13 L1263.4 1210.13 L1263.98 1210.13 L1264.57 1210.13 L1265.16 1210.13 L1265.74 1210.13 L1266.33 1210.13 L1266.92 1210.13 L1267.5 1210.13 L1268.09 1210.13 L1268.68 1210.13 L1269.26 1210.13 L1269.85 1210.13 L1270.44 1210.13 L1271.02 1210.13 L1271.61 1210.13 L1272.19 1210.13 L1272.78 1210.13 L1273.37 1210.13 L1273.95 1210.13 L1274.54 1210.13 L1275.13 1210.13 L1275.71 1210.13 L1276.3 1210.13 L1276.89 1210.13 L1277.47 1210.13 L1278.06 1210.13 L1278.65 1210.13 L1279.23 1210.13 L1279.82 1210.13 L1280.4 1210.13 L1280.99 1210.13 L1281.58 1210.13 L1282.16 1210.13 L1282.75 1210.13 L1283.34 1210.13 L1283.92 1210.13 L1284.51 1210.13 L1285.1 1210.13 L1285.68 1210.13 L1286.27 1210.13 L1286.86 1210.13 L1287.44 1210.13 L1288.03 1210.13 L1288.61 1210.13 L1289.2 1210.13 L1289.79 1210.13 L1290.37 1210.13 L1290.96 1210.13 L1291.55 1210.13 L1292.13 1210.13 L1292.72 1210.13 L1293.31 1210.13 L1293.89 1210.13 L1294.48 1210.13 L1295.06 1210.13 L1295.65 1210.13 L1296.24 1210.13 L1296.82 1210.13 L1297.41 1210.13 L1298 1210.13 L1298.58 1210.13 L1299.17 1210.13 L1299.76 1210.13 L1300.34 1210.13 L1300.93 1210.13 L1301.52 1210.13 L1302.1 1210.13 L1302.69 1210.13 L1303.27 1210.13 L1303.86 1210.13 L1304.45 1210.13 L1305.03 1210.13 L1305.62 1210.13 L1306.21 1210.13 L1306.79 1210.13 L1307.38 1210.13 L1307.97 1210.13 L1308.55 1210.13 L1309.14 1210.13 L1309.73 1210.13 L1310.31 1210.13 L1310.9 1210.13 L1311.48 1210.13 L1312.07 1210.13 L1312.66 1210.13 L1313.24 1210.13 L1313.83 1210.13 L1314.42 1210.13 L1315 1210.13 L1315.59 1210.13 L1316.18 1210.13 L1316.76 1210.13 L1317.35 1210.13 L1317.93 1210.13 L1318.52 1210.13 L1319.11 1210.13 L1319.69 1210.13 L1320.28 1210.13 L1320.87 1210.13 L1321.45 1210.13 L1322.04 1210.13 L1322.63 1210.13 L1323.21 1210.13 L1323.8 1210.13 L1324.39 1210.13 L1324.97 1210.13 L1325.56 1210.13 L1326.14 1210.13 L1326.73 1210.13 L1327.32 1210.13 L1327.9 1210.13 L1328.49 1210.13 L1329.08 1210.13 L1329.66 1210.13 L1330.25 1210.13 L1330.84 1210.13 L1331.42 1210.13 L1332.01 1210.13 L1332.6 1210.13 L1333.18 1210.13 L1333.77 1210.13 L1334.35 1210.13 L1334.94 1210.13 L1335.53 1210.13 L1336.11 1210.13 L1336.7 1210.13 L1337.29 1210.13 L1337.87 1210.13 L1338.46 1210.13 L1339.05 1210.13 L1339.63 1210.13 L1340.22 1210.13 L1340.8 1210.13 L1341.39 1210.13 L1341.98 1210.13 L1342.56 1210.13 L1343.15 1210.13 L1343.74 1210.13 L1344.32 1210.13 L1344.91 1210.13 L1345.5 1210.13 L1346.08 1210.13 L1346.67 1210.13 L1347.26 1210.13 L1347.84 1210.13 L1348.43 1210.13 L1349.01 1210.13 L1349.6 1210.13 L1350.19 1210.13 L1350.77 1210.13 L1351.36 1210.13 L1351.95 1210.13 L1352.53 1210.13 L1353.12 1210.13 L1353.71 1210.13 L1354.29 1210.13 L1354.88 1210.13 L1355.47 1210.13 L1356.05 1210.13 L1356.64 1210.13 L1357.22 1210.13 L1357.81 1210.13 L1358.4 1210.13 L1358.98 1210.13 L1359.57 1210.13 L1360.16 1210.13 L1360.74 1210.13 L1361.33 1210.13 L1361.92 1210.13 L1362.5 1210.13 L1363.09 1210.13 L1363.68 1210.13 L1364.26 1210.13 L1364.85 1210.13 L1365.43 1210.13 L1366.02 1210.13 L1366.61 1210.13 L1367.19 1210.13 L1367.78 1210.13 L1368.37 1210.13 L1368.95 1210.13 L1369.54 1210.13 L1370.13 1210.13 L1370.71 1210.13 L1371.3 1210.13 L1371.88 1210.13 L1372.47 1210.13 L1373.06 1210.13 L1373.64 1210.13 L1374.23 1210.13 L1374.82 1210.13 L1375.4 1210.13 L1375.99 1210.13 L1376.58 1210.13 L1377.16 1210.13 L1377.75 1210.13 L1378.34 1210.13 L1378.92 1210.13 L1379.51 1210.13 L1380.09 1210.13 L1380.68 1210.13 L1381.27 1210.13 L1381.85 1210.13 L1382.44 1210.13 L1383.03 1210.13 L1383.61 1210.13 L1384.2 1210.13 L1384.79 1210.13 L1385.37 1210.13 L1385.96 1210.13 L1386.55 1210.13 L1387.13 1210.13 L1387.72 1210.13 L1388.3 1210.13 L1388.89 1210.13 L1389.48 1210.13 L1390.06 1210.13 L1390.65 1210.13 L1391.24 1210.13 L1391.82 1210.13 L1392.41 1210.13 L1393 1210.13 L1393.58 1210.13 L1394.17 1210.13 L1394.75 1210.13 L1395.34 1210.13 L1395.93 1210.13 L1396.51 1210.13 L1397.1 1210.13 L1397.69 1210.13 L1398.27 1210.13 L1398.86 1210.13 L1399.45 1210.13 L1400.03 1210.13 L1400.62 1210.13 L1401.21 1210.13 L1401.79 1210.13 L1402.38 1210.13 L1402.96 1210.13 L1403.55 1210.13 L1404.14 1210.13 L1404.72 1210.13 L1405.31 1210.13 L1405.9 1210.13 L1406.48 1210.13 L1407.07 1210.13 L1407.66 1210.13 L1408.24 1210.13 L1408.83 1210.13 L1409.42 1210.13 L1410 1210.13 L1410.59 1210.13 L1411.17 1210.13 L1411.76 1210.13 L1412.35 1210.13 L1412.93 1210.13 L1413.52 1210.13 L1414.11 1210.13 L1414.69 1210.13 L1415.28 1210.13 L1415.87 1210.13 L1416.45 1210.13 L1417.04 1210.13 L1417.63 1210.13 L1418.21 1210.13 L1418.8 1210.13 L1419.38 1210.13 L1419.97 1210.13 L1420.56 1210.13 L1421.14 1210.13 L1421.73 1210.13 L1422.32 1210.13 L1422.9 1210.13 L1423.49 1210.13 L1424.08 1210.13 L1424.66 1210.13 L1425.25 1210.13 L1425.83 1210.13 L1426.42 1210.13 L1427.01 1210.13 L1427.59 1210.13 L1428.18 1210.13 L1428.77 1210.13 L1429.35 1210.13 L1429.94 1210.13 L1430.53 1210.13 L1431.11 1210.13 L1431.7 1210.13 L1432.29 1210.13 L1432.87 1210.13 L1433.46 1210.13 L1434.04 1210.13 L1434.63 1210.13 L1435.22 1210.13 L1435.8 1210.13 L1436.39 1210.13 L1436.98 1210.13 L1437.56 1210.13 L1438.15 1210.13 L1438.74 1210.13 L1439.32 1210.13 L1439.91 1210.13 L1440.5 1210.13 L1441.08 1210.13 L1441.67 1210.13 L1442.25 1210.13 L1442.84 1210.13 L1443.43 1210.13 L1444.01 1210.13 L1444.6 1210.13 L1445.19 1210.13 L1445.77 1210.13 L1446.36 1210.13 L1446.95 1210.13 L1447.53 1210.13 L1448.12 1210.13 L1448.7 1210.13 L1449.29 1210.13 L1449.88 1210.13 L1450.46 1210.13 L1451.05 1210.13 L1451.64 1210.13 L1452.22 1210.13 L1452.81 1210.13 L1453.4 1210.13 L1453.98 1210.13 L1454.57 1210.13 L1455.16 1210.13 L1455.74 1210.13 L1456.33 1210.13 L1456.91 1210.13 L1457.5 1210.13 L1458.09 1210.13 L1458.67 1210.13 L1459.26 1210.13 L1459.85 1210.13 L1460.43 1210.13 L1461.02 1210.13 L1461.61 1210.13 L1462.19 1210.13 L1462.78 1210.13 L1463.37 1210.13 L1463.95 1210.13 L1464.54 1210.13 L1465.12 1210.13 L1465.71 1210.13 L1466.3 1210.13 L1466.88 1210.13 L1467.47 1210.13 L1468.06 1210.13 L1468.64 1210.13 L1469.23 1210.13 L1469.82 1210.13 L1470.4 1210.13 L1470.99 1210.13 L1471.57 1210.13 L1472.16 1210.13 L1472.75 1210.13 L1473.33 1210.13 L1473.92 1210.13 L1474.51 1210.13 L1475.09 1210.13 L1475.68 1210.13 L1476.27 1210.13 L1476.85 1210.13 L1477.44 1210.13 L1478.03 1210.13 L1478.61 1210.13 L1479.2 1210.13 L1479.78 1210.13 L1480.37 1210.13 L1480.96 1210.13 L1481.54 1210.13 L1482.13 1210.13 L1482.72 1210.13 L1483.3 1210.13 L1483.89 1210.13 L1484.48 1210.13 L1485.06 1210.13 L1485.65 1210.13 L1486.24 1210.13 L1486.82 1210.13 L1487.41 1210.13 L1487.99 1210.13 L1488.58 1210.13 L1489.17 1210.13 L1489.75 1210.13 L1490.34 1210.13 L1490.93 1210.13 L1491.51 1210.13 L1492.1 1210.13 L1492.69 1210.13 L1493.27 1210.13 L1493.86 1210.13 L1494.45 1210.13 L1495.03 1210.13 L1495.62 1210.13 L1496.2 1210.13 L1496.79 1210.13 L1497.38 1210.13 L1497.96 1210.13 L1498.55 1210.13 L1499.14 1210.13 L1499.72 1210.13 L1500.31 1210.13 L1500.9 1210.13 L1501.48 1210.13 L1502.07 1210.13 L1502.65 1210.13 L1503.24 1210.13 L1503.83 1210.13 L1504.41 1210.13 L1505 1210.13 L1505.59 1210.13 L1506.17 1210.13 L1506.76 1210.13 L1507.35 1210.13 L1507.93 1210.13 L1508.52 1210.13 L1509.11 1210.13 L1509.69 1210.13 L1510.28 1210.13 L1510.86 1210.13 L1511.45 1210.13 L1512.04 1210.13 L1512.62 1210.13 L1513.21 1210.13 L1513.8 1210.13 L1514.38 1210.13 L1514.97 1210.13 L1515.56 1210.13 L1516.14 1210.13 L1516.73 1210.13 L1517.32 1210.13 L1517.9 1210.13 L1518.49 1210.13 L1519.07 1210.13 L1519.66 1210.13 L1520.25 1210.13 L1520.83 1210.13 L1521.42 1210.13 L1522.01 1210.13 L1522.59 1210.13 L1523.18 1210.13 L1523.77 1210.13 L1524.35 1210.13 L1524.94 1210.13 L1525.52 1210.13 L1526.11 1210.13 L1526.7 1210.13 L1527.28 1210.13 L1527.87 1210.13 L1528.46 1210.13 L1529.04 1210.13 L1529.63 1210.13 L1530.22 1210.13 L1530.8 1210.13 L1531.39 1210.13 L1531.98 1210.13 L1532.56 1210.13 L1533.15 1210.13 L1533.73 1210.13 L1534.32 1210.13 L1534.91 1210.13 L1535.49 1210.13 L1536.08 1210.13 L1536.67 1210.13 L1537.25 1210.13 L1537.84 1210.13 L1538.43 1210.13 L1539.01 1210.13 L1539.6 1210.13 L1540.19 1210.13 L1540.77 1210.13 L1541.36 1210.13 L1541.94 1210.13 L1542.53 1210.13 L1543.12 1210.13 L1543.7 1210.13 L1544.29 1210.13 L1544.88 1210.13 L1545.46 1210.13 L1546.05 1210.13 L1546.64 1210.13 L1547.22 1210.13 L1547.81 1210.13 L1548.4 1210.13 L1548.98 1210.13 L1549.57 1210.13 L1550.15 1210.13 L1550.74 1210.13 L1551.33 1210.13 L1551.91 1210.13 L1552.5 1210.13 L1553.09 1210.13 L1553.67 1210.13 L1554.26 1210.13 L1554.85 1210.13 L1555.43 1210.13 L1556.02 1210.13 L1556.6 1210.13 L1557.19 1210.13 L1557.78 1210.13 L1558.36 1210.13 L1558.95 1210.13 L1559.54 1210.13 L1560.12 1210.13 L1560.71 1210.13 L1561.3 1210.13 L1561.88 1210.13 L1562.47 1210.13 L1563.06 1210.13 L1563.64 1210.13 L1564.23 1210.13 L1564.81 1210.13 L1565.4 1210.13 L1565.99 1210.13 L1566.57 1210.13 L1567.16 1210.13 L1567.75 1210.13 L1568.33 1210.13 L1568.92 1210.13 L1569.51 1210.13 L1570.09 1210.13 L1570.68 1210.13 L1571.27 1210.13 L1571.85 1210.13 L1572.44 1210.13 L1573.02 1210.13 L1573.61 1210.13 L1574.2 1210.13 L1574.78 1210.13 L1575.37 1210.13 L1575.96 1210.13 L1576.54 1210.13 L1577.13 1210.13 L1577.72 1210.13 L1578.3 1210.13 L1578.89 1210.13 L1579.47 1210.13 L1580.06 1210.13 L1580.65 1210.13 L1581.23 1210.13 L1581.82 1210.13 L1582.41 1210.13 L1582.99 1210.13 L1583.58 1210.13 L1584.17 1210.13 L1584.75 1210.13 L1585.34 1210.13 L1585.93 1210.13 L1586.51 1210.13 L1587.1 1210.13 L1587.68 1210.13 L1588.27 1210.13 L1588.86 1210.13 L1589.44 1210.13 L1590.03 1210.13 L1590.62 1210.13 L1591.2 1210.13 L1591.79 1210.13 L1592.38 1210.13 L1592.96 1210.13 L1593.55 1210.13 L1594.14 1210.13 L1594.72 1210.13 L1595.31 1210.13 L1595.89 1210.13 L1596.48 1210.13 L1597.07 1210.13 L1597.65 1210.13 L1598.24 1210.13 L1598.83 1210.13 L1599.41 1210.13 L1600 1210.13 L1600.59 1210.13 L1601.17 1210.13 L1601.76 1210.13 L1602.34 1210.13 L1602.93 1210.13 L1603.52 1210.13 L1604.1 1210.13 L1604.69 1210.13 L1605.28 1210.13 L1605.86 1210.13 L1606.45 1210.13 L1607.04 1210.13 L1607.62 1210.13 L1608.21 1210.13 L1608.8 1210.13 L1609.38 1210.13 L1609.97 1210.13 L1610.55 1210.13 L1611.14 1210.13 L1611.73 1210.13 L1612.31 1210.13 L1612.9 1210.13 L1613.49 1210.13 L1614.07 1210.13 L1614.66 1210.13 L1615.25 1210.13 L1615.83 1210.13 L1616.42 1210.13 L1617.01 1210.13 L1617.59 1210.13 L1618.18 1210.13 L1618.76 1210.13 L1619.35 1210.13 L1619.94 1210.13 L1620.52 1210.13 L1621.11 1210.13 L1621.7 1210.13 L1622.28 1210.13 L1622.87 1210.13 L1623.46 1210.13 L1624.04 1210.13 L1624.63 1210.13 L1625.22 1210.13 L1625.8 1210.13 L1626.39 1210.13 L1626.97 1210.13 L1627.56 1210.13 L1628.15 1210.13 L1628.73 1210.13 L1629.32 1210.13 L1629.91 1210.13 L1630.49 1210.13 L1631.08 1210.13 L1631.67 1210.13 L1632.25 1210.13 L1632.84 1210.13 L1633.42 1210.13 L1634.01 1210.13 L1634.6 1210.13 L1635.18 1210.13 L1635.77 1210.13 L1636.36 1210.13 L1636.94 1210.13 L1637.53 1210.13 L1638.12 1210.13 L1638.7 1210.13 L1639.29 1210.13 L1639.88 1210.13 L1640.46 1210.13 L1641.05 1210.13 L1641.63 1210.13 L1642.22 1210.13 L1642.81 1210.13 L1643.39 1210.13 L1643.98 1210.13 L1644.57 1210.13 L1645.15 1210.13 L1645.74 1210.13 L1646.33 1210.13 L1646.91 1210.13 L1647.5 1210.13 L1648.09 1210.13 L1648.67 1210.13 L1649.26 1210.13 L1649.84 1210.13 L1650.43 1210.13 L1651.02 1210.13 L1651.6 1210.13 L1652.19 1210.13 L1652.78 1210.13 L1653.36 1210.13 L1653.95 1210.13 L1654.54 1210.13 L1655.12 1210.13 L1655.71 1210.13 L1656.29 1210.13 L1656.88 1210.13 L1657.47 1210.13 L1658.05 1210.13 L1658.64 1210.13 L1659.23 1210.13 L1659.81 1210.13 L1660.4 1210.13 L1660.99 1210.13 L1661.57 1210.13 L1662.16 1210.13 L1662.75 1210.13 L1663.33 1210.13 L1663.92 1210.13 L1664.5 1210.13 L1665.09 1210.13 L1665.68 1210.13 L1666.26 1210.13 L1666.85 1210.13 L1667.44 1210.13 L1668.02 1210.13 L1668.61 1210.13 L1669.2 1210.13 L1669.78 1210.13 L1670.37 1210.13 L1670.96 1210.13 L1671.54 1210.13 L1672.13 1210.13 L1672.71 1210.13 L1673.3 1210.13 L1673.89 1210.13 L1674.47 1210.13 L1675.06 1210.13 L1675.65 1210.13 L1676.23 1210.13 L1676.82 1210.13 L1677.41 1210.13 L1677.99 1210.13 L1678.58 1210.13 L1679.17 1210.13 L1679.75 1210.13 L1680.34 1210.13 L1680.92 1210.13 L1681.51 1210.13 L1682.1 1210.13 L1682.68 1210.13 L1683.27 1210.13 L1683.86 1210.13 L1684.44 1210.13 L1685.03 1210.13 L1685.62 1210.13 L1686.2 1210.13 L1686.79 1210.13 L1687.37 1210.13 L1687.96 1210.13 L1688.55 1210.13 L1689.13 1210.13 L1689.72 1210.13 L1690.31 1210.13 L1690.89 1210.13 L1691.48 1210.13 L1692.07 1210.13 L1692.65 1210.13 L1693.24 1210.13 L1693.83 1210.13 L1694.41 1210.13 L1695 1210.13 L1695.58 1210.13 L1696.17 1210.13 L1696.76 1210.13 L1697.34 1210.13 L1697.93 1210.13 L1698.52 1210.13 L1699.1 1210.13 L1699.69 1210.13 L1700.28 1210.13 L1700.86 1210.13 L1701.45 1210.13 L1702.04 1210.13 L1702.62 1210.13 L1703.21 1210.13 L1703.79 1210.13 L1704.38 1210.13 L1704.97 1210.13 L1705.55 1210.13 L1706.14 1210.13 L1706.73 1210.13 L1707.31 1210.13 L1707.9 1210.13 L1708.49 1210.13 L1709.07 1210.13 L1709.66 1210.13 L1710.24 1210.13 L1710.83 1210.13 L1711.42 1210.13 L1712 1210.13 L1712.59 1210.13 L1713.18 1210.13 L1713.76 1210.13 L1714.35 1210.13 L1714.94 1210.13 L1715.52 1210.13 L1716.11 1210.13 L1716.7 1210.13 L1717.28 1210.13 L1717.87 1210.13 L1718.45 1210.13 L1719.04 1210.13 L1719.63 1210.13 L1720.21 1210.13 L1720.8 1210.13 L1721.39 1210.13 L1721.97 1210.13 L1722.56 1210.13 L1723.15 1210.13 L1723.73 1210.13 L1724.32 1210.13 L1724.91 1210.13 L1725.49 1210.13 L1726.08 1210.13 L1726.66 1210.13 L1727.25 1210.13 L1727.84 1210.13 L1728.42 1210.13 L1729.01 1210.13 L1729.6 1210.13 L1730.18 1210.13 L1730.77 1210.13 L1731.36 1210.13 L1731.94 1210.13 L1732.53 1210.13 L1733.11 1210.13 L1733.7 1210.13 L1734.29 1210.13 L1734.87 1210.13 L1735.46 1210.13 L1736.05 1210.13 L1736.63 1210.13 L1737.22 1210.13 L1737.81 1210.13 L1738.39 1210.13 L1738.98 1210.13 L1739.57 1210.13 L1740.15 1210.13 L1740.74 1210.13 L1741.32 1210.13 L1741.91 1210.13 L1742.5 1210.13 L1743.08 1210.13 L1743.67 1210.13 L1744.26 1210.13 L1744.84 1210.13 L1745.43 1210.13 L1746.02 1210.13 L1746.6 1210.13 L1747.19 1210.13 L1747.78 1210.13 L1748.36 1210.13 L1748.95 1210.13 L1749.53 1210.13 L1750.12 1210.13 L1750.71 1210.13 L1751.29 1210.13 L1751.88 1210.13 L1752.47 1210.13 L1753.05 1210.13 L1753.64 1210.13 L1754.23 1210.13 L1754.81 1210.13 L1755.4 1210.13 L1755.99 1210.13 L1756.57 1210.13 L1757.16 1210.13 L1757.74 1210.13 L1758.33 1210.13 L1758.92 1210.13 L1759.5 1210.13 L1760.09 1210.13 L1760.68 1210.13 L1761.26 1210.13 L1761.85 1210.13 L1762.44 1210.13 L1763.02 1210.13 L1763.61 1210.13 L1764.19 1210.13 L1764.78 1210.13 L1765.37 1210.13 L1765.95 1210.13 L1766.54 1210.13 L1767.13 1210.13 L1767.71 1210.13 L1768.3 1210.13 L1768.89 1210.13 L1769.47 1210.13 L1770.06 1210.13 L1770.65 1210.13 L1771.23 1210.13 L1771.82 1210.13 L1772.4 1210.13 L1772.99 1210.13 L1773.58 1210.13 L1774.16 1210.13 L1774.75 1210.13 L1775.34 1210.13 L1775.92 1210.13 L1776.51 1210.13 L1777.1 1210.13 L1777.68 1210.13 L1778.27 1210.13 L1778.86 1210.13 L1779.44 1210.13 L1780.03 1210.13 L1780.61 1210.13 L1781.2 1210.13 L1781.79 1210.13 L1782.37 1210.13 L1782.96 1210.13 L1783.55 1210.13 L1784.13 1210.13 L1784.72 1210.13 L1785.31 1210.13 L1785.89 1210.13 L1786.48 1210.13 L1787.06 1210.13 L1787.65 1210.13 L1788.24 1210.13 L1788.82 1210.13 L1789.41 1210.13 L1790 1210.13 L1790.58 1210.13 L1791.17 1210.13 L1791.76 1210.13 L1792.34 1210.13 L1792.93 1210.13 L1793.52 1210.13 L1794.1 1210.13 L1794.69 1210.13 L1795.27 1210.13 L1795.86 1210.13 L1796.45 1210.13 L1797.03 1210.13 L1797.62 1210.13 L1798.21 1210.13 L1798.79 1210.13 L1799.38 1210.13 L1799.97 1210.13 L1800.55 1210.13 L1801.14 1210.13 L1801.73 1210.13 L1802.31 1210.13 L1802.9 1210.13 L1803.48 1210.13 L1804.07 1210.13 L1804.66 1210.13 L1805.24 1210.13 L1805.83 1210.13 L1806.42 1210.13 L1807 1210.13 L1807.59 1210.13 L1808.18 1210.13 L1808.76 1210.13 L1809.35 1210.13 L1809.94 1210.13 L1810.52 1210.13 L1811.11 1210.13 L1811.69 1210.13 L1812.28 1210.13 L1812.87 1210.13 L1813.45 1210.13 L1814.04 1210.13 L1814.63 1210.13 L1815.21 1210.13 L1815.8 1210.13 L1816.39 1210.13 L1816.97 1210.13 L1817.56 1210.13 L1818.14 1210.13 L1818.73 1210.13 L1819.32 1210.13 L1819.9 1210.13 L1820.49 1210.13 L1821.08 1210.13 L1821.66 1210.13 L1822.25 1210.13 L1822.84 1210.13 L1823.42 1210.13 L1824.01 1210.13 L1824.6 1210.13 L1825.18 1210.13 L1825.77 1210.13 L1826.35 1210.13 L1826.94 1210.13 L1827.53 1210.13 L1828.11 1210.13 L1828.7 1210.13 L1829.29 1210.13 L1829.87 1210.13 L1830.46 1210.13 L1831.05 1210.13 L1831.63 1210.13 L1832.22 1210.13 L1832.81 1210.13 L1833.39 1210.13 L1833.98 1210.13 L1834.56 1210.13 L1835.15 1210.13 L1835.74 1210.13 L1836.32 1210.13 L1836.91 1210.13 L1837.5 1210.13 L1838.08 1210.13 L1838.67 1210.13 L1839.26 1210.13 L1839.84 1210.13 L1840.43 1210.13 L1841.01 1210.13 L1841.6 1210.13 L1842.19 1210.13 L1842.77 1210.13 L1843.36 1210.13 L1843.95 1210.13 L1844.53 1210.13 L1845.12 1210.13 L1845.71 1210.13 L1846.29 1210.13 L1846.88 1210.13 L1847.47 1210.13 L1848.05 1210.13 L1848.64 1210.13 L1849.22 1210.13 L1849.81 1210.13 L1850.4 1210.13 L1850.98 1210.13 L1851.57 1210.13 L1852.16 1210.13 L1852.74 1210.13 L1853.33 1210.13 L1853.92 1210.13 L1854.5 1210.13 L1855.09 1210.13 L1855.68 1210.13 L1856.26 1210.13 L1856.85 1210.13 L1857.43 1210.13 L1858.02 1210.13 L1858.61 1210.13 L1859.19 1210.13 L1859.78 1210.13 L1860.37 1210.13 L1860.95 1210.13 L1861.54 1210.13 L1862.13 1210.13 L1862.71 1210.13 L1863.3 1210.13 L1863.88 1210.13 L1864.47 1210.13 L1865.06 1210.13 L1865.64 1210.13 L1866.23 1210.13 L1866.82 1210.13 L1867.4 1210.13 L1867.99 1210.13 L1868.58 1210.13 L1869.16 1210.13 L1869.75 1210.13 L1870.34 1210.13 L1870.92 1210.13 L1871.51 1210.13 L1872.09 1210.13 L1872.68 1210.13 L1873.27 1210.13 L1873.85 1210.13 L1874.44 1210.13 L1875.03 1210.13 L1875.61 1210.13 L1876.2 1210.13 L1876.79 1210.13 L1877.37 1210.13 L1877.96 1210.13 L1878.55 1210.13 L1879.13 1210.13 L1879.72 1210.13 L1880.3 1210.13 L1880.89 1210.13 L1881.48 1210.13 L1882.06 1210.13 L1882.65 1210.13 L1883.24 1210.13 L1883.82 1210.13 L1884.41 1210.13 L1885 1210.13 L1885.58 1210.13 L1886.17 1210.13 L1886.76 1210.13 L1887.34 1210.13 L1887.93 1210.13 L1888.51 1210.13 L1889.1 1210.13 L1889.69 1210.13 L1890.27 1210.13 L1890.86 1210.13 L1891.45 1210.13 L1892.03 1210.13 L1892.62 1210.13 L1893.21 1210.13 L1893.79 1210.13 L1894.38 1210.13 L1894.96 1210.13 L1895.55 1210.13 L1896.14 1210.13 L1896.72 1210.13 L1897.31 1210.13 L1897.9 1210.13 L1898.48 1210.13 L1899.07 1210.13 L1899.66 1210.13 L1900.24 1210.13 L1900.83 1210.13 L1901.42 1210.13 L1902 1210.13 L1902.59 1210.13 L1903.17 1210.13 L1903.76 1210.13 L1904.35 1210.13 L1904.93 1210.13 L1905.52 1210.13 L1906.11 1210.13 L1906.69 1210.13 L1907.28 1210.13 L1907.87 1210.13 L1908.45 1210.13 L1909.04 1210.13 L1909.63 1210.13 L1910.21 1210.13 L1910.8 1210.13 L1911.38 1210.13 L1911.97 1210.13 L1912.56 1210.13 L1913.14 1210.13 L1913.73 1210.13 L1914.32 1210.13 L1914.9 1210.13 L1915.49 1210.13 L1916.08 1210.13 L1916.66 1210.13 L1917.25 1210.13 L1917.83 1210.13 L1918.42 1210.13 L1919.01 1210.13 L1919.59 1210.13 L1920.18 1210.13 L1920.77 1210.13 L1921.35 1210.13 L1921.94 1210.13 L1922.53 1210.13 L1923.11 1210.13 L1923.7 1210.13 L1924.29 1210.13 L1924.87 1210.13 L1925.46 1210.13 L1926.04 1210.13 L1926.63 1210.13 L1927.22 1210.13 L1927.8 1210.13 L1928.39 1210.13 L1928.98 1210.13 L1929.56 1210.13 L1930.15 1210.13 L1930.74 1210.13 L1931.32 1210.13 L1931.91 1210.13 L1932.5 1210.13 L1933.08 1210.13 L1933.67 1210.13 L1934.25 1210.13 L1934.84 1210.13 L1935.43 1210.13 L1936.01 1210.13 L1936.6 1210.13 L1937.19 1210.13 L1937.77 1210.13 L1938.36 1210.13 L1938.95 1210.13 L1939.53 1210.13 L1940.12 1210.13 L1940.71 1210.13 L1941.29 1210.13 L1941.88 1210.13 L1942.46 1210.13 L1943.05 1210.13 L1943.64 1210.13 L1944.22 1210.13 L1944.81 1210.13 L1945.4 1210.13 L1945.98 1210.13 L1946.57 1210.13 L1947.16 1210.13 L1947.74 1210.13 L1948.33 1210.13 L1948.91 1210.13 L1949.5 1210.13 L1950.09 1210.13 L1950.67 1210.13 L1951.26 1210.13 L1951.85 1210.13 L1952.43 1210.13 L1953.02 1210.13 L1953.61 1210.13 L1954.19 1210.13 L1954.78 1210.13 L1955.37 1210.13 L1955.95 1210.13 L1956.54 1210.13 L1957.12 1210.13 L1957.71 1210.13 L1958.3 1210.13 L1958.88 1210.13 L1959.47 1210.13 L1960.06 1210.13 L1960.64 1210.13 L1961.23 1210.13 L1961.82 1210.13 L1962.4 1210.13 L1962.99 1210.13 L1963.58 1210.13 L1964.16 1210.13 L1964.75 1210.13 L1965.33 1210.13 L1965.92 1210.13 L1966.51 1210.13 L1967.09 1210.13 L1967.68 1210.13 L1968.27 1210.13 L1968.85 1210.13 L1969.44 1210.13 L1970.03 1210.13 L1970.61 1210.13 L1971.2 1210.13 L1971.78 1210.13 L1972.37 1210.13 L1972.96 1210.13 L1973.54 1210.13 L1974.13 1210.13 L1974.72 1210.13 L1975.3 1210.13 L1975.89 1210.13 L1976.48 1210.13 L1977.06 1210.13 L1977.65 1210.13 L1978.24 1210.13 L1978.82 1210.13 L1979.41 1210.13 L1979.99 1210.13 L1980.58 1210.13 L1981.17 1210.13 L1981.75 1210.13 L1982.34 1210.13 L1982.93 1210.13 L1983.51 1210.13 L1984.1 1210.13 L1984.69 1210.13 L1985.27 1210.13 L1985.86 1210.13 L1986.45 1210.13 L1987.03 1210.13 L1987.62 1210.13 L1988.2 1210.13 L1988.79 1210.13 L1989.38 1210.13 L1989.96 1210.13 L1990.55 1210.13 L1991.14 1210.13 L1991.72 1210.13 L1992.31 1210.13 L1992.9 1210.13 L1993.48 1210.13 L1994.07 1210.13 L1994.65 1210.13 L1995.24 1210.13 L1995.83 1210.13 L1996.41 1210.13 L1997 1210.13 L1997.59 1210.13 L1998.17 1210.13 L1998.76 1210.13 L1999.35 1210.13 L1999.93 1210.13 L2000.52 1210.13 L2001.11 1210.13 L2001.69 1210.13 L2002.28 1210.13 L2002.86 1210.13 L2003.45 1210.13 L2004.04 1210.13 L2004.62 1210.13 L2005.21 1210.13 L2005.8 1210.13 L2006.38 1210.13 L2006.97 1210.13 L2007.56 1210.13 L2008.14 1210.13 L2008.73 1210.13 L2009.32 1210.13 L2009.9 1210.13 L2010.49 1210.13 L2011.07 1210.13 L2011.66 1210.13 L2012.25 1210.13 L2012.83 1210.13 L2013.42 1210.13 L2014.01 1210.13 L2014.59 1210.13 L2015.18 1210.13 L2015.77 1210.13 L2016.35 1210.13 L2016.94 1210.13 L2017.53 1210.13 L2018.11 1210.13 L2018.7 1210.13 L2019.28 1210.13 L2019.87 1210.13 L2020.46 1210.13 L2021.04 1210.13 L2021.63 1210.13 L2022.22 1210.13 L2022.8 1210.13 L2023.39 1210.13 L2023.98 1210.13 L2024.56 1210.13 L2025.15 1210.13 L2025.73 1210.13 L2026.32 1210.13 L2026.91 1210.13 L2027.49 1210.13 L2028.08 1210.13 L2028.67 1210.13 L2029.25 1210.13 L2029.84 1210.13 L2030.43 1210.13 L2031.01 1210.13 L2031.6 1210.13 L2032.19 1210.13 L2032.77 1210.13 L2033.36 1210.13 L2033.94 1210.13 L2034.53 1210.13 L2035.12 1210.13 L2035.7 1210.13 L2036.29 1210.13 L2036.88 1210.13 L2037.46 1210.13 L2038.05 1210.13 L2038.64 1210.13 L2039.22 1210.13 L2039.81 1210.13 L2040.4 1210.13 L2040.98 1210.13 L2041.57 1210.13 L2042.15 1210.13 L2042.74 1210.13 L2043.33 1210.13 L2043.91 1210.13 L2044.5 1210.13 L2045.09 1210.13 L2045.67 1210.13 L2046.26 1210.13 L2046.85 1210.13 L2047.43 1210.13 L2048.02 1210.13 L2048.6 1210.13 L2049.19 1210.13 L2049.78 1210.13 L2050.36 1210.13 L2050.95 1210.13 L2051.54 1210.13 L2052.12 1210.13 L2052.71 1210.13 L2053.3 1210.13 L2053.88 1210.13 L2054.47 1210.13 L2055.06 1210.13 L2055.64 1210.13 L2056.23 1210.13 L2056.81 1210.13 L2057.4 1210.13 L2057.99 1210.13 L2058.57 1210.13 L2059.16 1210.13 L2059.75 1210.13 L2060.33 1210.13 L2060.92 1210.13 L2061.51 1210.13 L2062.09 1210.13 L2062.68 1210.13 L2063.27 1210.13 L2063.85 1210.13 L2064.44 1210.13 L2065.02 1210.13 L2065.61 1210.13 L2066.2 1210.13 L2066.78 1210.13 L2067.37 1210.13 L2067.96 1210.13 L2068.54 1210.13 L2069.13 1210.13 L2069.72 1210.13 L2070.3 1210.13 L2070.89 1210.13 L2071.48 1210.13 L2072.06 1210.13 L2072.65 1210.13 L2073.23 1210.13 L2073.82 1210.13 L2074.41 1210.13 L2074.99 1210.13 L2075.58 1210.13 L2076.17 1210.13 L2076.75 1210.13 L2077.34 1210.13 L2077.93 1210.13 L2078.51 1210.13 L2079.1 1210.13 L2079.68 1210.13 L2080.27 1210.13 L2080.86 1210.13 L2081.44 1210.13 L2082.03 1210.13 L2082.62 1210.13 L2083.2 1210.13 L2083.79 1210.13 L2084.38 1210.13 L2084.96 1210.13 L2085.55 1210.13 L2086.14 1210.13 L2086.72 1210.13 L2087.31 1210.13 L2087.89 1210.13 L2088.48 1210.13 L2089.07 1210.13 L2089.65 1210.13 L2090.24 1210.13 L2090.83 1210.13 L2091.41 1210.13 L2092 1210.13 L2092.59 1210.13 L2093.17 1210.13 L2093.76 1210.13 L2094.35 1210.13 L2094.93 1210.13 L2095.52 1210.13 L2096.1 1210.13 L2096.69 1210.13 L2097.28 1210.13 L2097.86 1210.13 L2098.45 1210.13 L2099.04 1210.13 L2099.62 1210.13 L2100.21 1210.13 L2100.8 1210.13 L2101.38 1210.13 L2101.97 1210.13 L2102.55 1210.13 L2103.14 1210.13 L2103.73 1210.13 L2104.31 1210.13 L2104.9 1210.13 L2105.49 1210.13 L2106.07 1210.13 L2106.66 1210.13 L2107.25 1210.13 L2107.83 1210.13 L2108.42 1210.13 L2109.01 1210.13 L2109.59 1210.13 L2110.18 1210.13 L2110.76 1210.13 L2111.35 1210.13 L2111.94 1210.13 L2112.52 1210.13 L2113.11 1210.13 L2113.7 1210.13 L2114.28 1210.13 L2114.87 1210.13 L2115.46 1210.13 L2116.04 1210.13 L2116.63 1210.13 L2117.22 1210.13 L2117.8 1210.13 L2118.39 1210.13 L2118.97 1210.13 L2119.56 1210.13 L2120.15 1210.13 L2120.73 1210.13 L2121.32 1210.13 L2121.91 1210.13 L2122.49 1210.13 L2123.08 1210.13 L2123.67 1210.13 L2124.25 1210.13 L2124.84 1210.13 L2125.42 1210.13 L2126.01 1210.13 L2126.6 1210.13 L2127.18 1210.13 L2127.77 1210.13 L2128.36 1210.13 L2128.94 1210.13 L2129.53 1210.13 L2130.12 1210.13 L2130.7 1210.13 L2131.29 1210.13 L2131.88 1210.13 L2132.46 1210.13 L2133.05 1210.13 L2133.63 1210.13 L2134.22 1210.13 L2134.81 1210.13 L2135.39 1210.13 L2135.98 1210.13 L2136.57 1210.13 L2137.15 1210.13 L2137.74 1210.13 L2138.33 1210.13 L2138.91 1210.13 L2139.5 1210.13 L2140.09 1210.13 L2140.67 1210.13 L2141.26 1210.13 L2141.84 1210.13 L2142.43 1210.13 L2143.02 1210.13 L2143.6 1210.13 L2144.19 1210.13 L2144.78 1210.13 L2145.36 1210.13 L2145.95 1210.13 L2146.54 1210.13 L2147.12 1210.13 L2147.71 1210.13 L2148.3 1210.13 L2148.88 1210.13 L2149.47 1210.13 L2150.05 1210.13 L2150.64 1210.13 L2151.23 1210.13 L2151.81 1210.13 L2152.4 1210.13 L2152.99 1210.13 L2153.57 1210.13 L2154.16 1210.13 L2154.75 1210.13 L2155.33 1210.13 L2155.92 1210.13 L2156.5 1210.13 L2157.09 1210.13 L2157.68 1210.13 L2158.26 1210.13 L2158.26 1209.97 L2157.68 1209.97 L2157.09 1209.97 L2156.5 1209.97 L2155.92 1209.97 L2155.33 1209.97 L2154.75 1209.97 L2154.16 1209.97 L2153.57 1209.97 L2152.99 1209.97 L2152.4 1209.97 L2151.81 1209.97 L2151.23 1209.97 L2150.64 1209.97 L2150.05 1209.97 L2149.47 1209.97 L2148.88 1209.97 L2148.3 1209.97 L2147.71 1209.97 L2147.12 1209.97 L2146.54 1209.97 L2145.95 1209.97 L2145.36 1209.97 L2144.78 1209.97 L2144.19 1209.97 L2143.6 1209.97 L2143.02 1209.97 L2142.43 1209.97 L2141.84 1209.97 L2141.26 1209.97 L2140.67 1209.97 L2140.09 1209.97 L2139.5 1209.97 L2138.91 1209.97 L2138.33 1209.97 L2137.74 1209.97 L2137.15 1209.97 L2136.57 1209.97 L2135.98 1209.97 L2135.39 1209.97 L2134.81 1209.97 L2134.22 1209.97 L2133.63 1209.97 L2133.05 1209.97 L2132.46 1209.97 L2131.88 1209.97 L2131.29 1209.97 L2130.7 1209.97 L2130.12 1209.97 L2129.53 1209.97 L2128.94 1209.97 L2128.36 1209.97 L2127.77 1209.97 L2127.18 1209.97 L2126.6 1209.97 L2126.01 1209.97 L2125.42 1209.97 L2124.84 1209.97 L2124.25 1209.97 L2123.67 1209.97 L2123.08 1209.97 L2122.49 1209.97 L2121.91 1209.97 L2121.32 1209.97 L2120.73 1209.97 L2120.15 1209.97 L2119.56 1209.97 L2118.97 1209.97 L2118.39 1209.97 L2117.8 1209.97 L2117.22 1209.97 L2116.63 1209.97 L2116.04 1209.97 L2115.46 1209.97 L2114.87 1209.97 L2114.28 1209.97 L2113.7 1209.97 L2113.11 1209.97 L2112.52 1209.97 L2111.94 1209.97 L2111.35 1209.97 L2110.76 1209.97 L2110.18 1209.97 L2109.59 1209.97 L2109.01 1209.97 L2108.42 1209.97 L2107.83 1209.97 L2107.25 1209.97 L2106.66 1209.97 L2106.07 1209.97 L2105.49 1209.97 L2104.9 1209.97 L2104.31 1209.97 L2103.73 1209.97 L2103.14 1209.97 L2102.55 1209.97 L2101.97 1209.97 L2101.38 1209.97 L2100.8 1209.97 L2100.21 1209.97 L2099.62 1209.97 L2099.04 1209.97 L2098.45 1209.97 L2097.86 1209.97 L2097.28 1209.97 L2096.69 1209.97 L2096.1 1209.97 L2095.52 1209.97 L2094.93 1209.97 L2094.35 1209.97 L2093.76 1209.97 L2093.17 1209.97 L2092.59 1209.97 L2092 1209.97 L2091.41 1209.97 L2090.83 1209.97 L2090.24 1209.97 L2089.65 1209.97 L2089.07 1209.97 L2088.48 1209.97 L2087.89 1209.97 L2087.31 1209.97 L2086.72 1209.97 L2086.14 1209.97 L2085.55 1209.97 L2084.96 1209.97 L2084.38 1209.97 L2083.79 1209.97 L2083.2 1209.97 L2082.62 1209.97 L2082.03 1209.97 L2081.44 1209.97 L2080.86 1209.97 L2080.27 1209.97 L2079.68 1209.97 L2079.1 1209.97 L2078.51 1209.97 L2077.93 1209.97 L2077.34 1209.97 L2076.75 1209.97 L2076.17 1209.97 L2075.58 1209.97 L2074.99 1209.97 L2074.41 1209.97 L2073.82 1209.97 L2073.23 1209.97 L2072.65 1209.97 L2072.06 1209.97 L2071.48 1209.97 L2070.89 1209.97 L2070.3 1209.97 L2069.72 1209.97 L2069.13 1209.97 L2068.54 1209.97 L2067.96 1209.97 L2067.37 1209.97 L2066.78 1209.97 L2066.2 1209.97 L2065.61 1209.97 L2065.02 1209.97 L2064.44 1209.97 L2063.85 1209.97 L2063.27 1209.97 L2062.68 1209.97 L2062.09 1209.97 L2061.51 1209.97 L2060.92 1209.97 L2060.33 1209.97 L2059.75 1209.97 L2059.16 1209.97 L2058.57 1209.97 L2057.99 1209.97 L2057.4 1209.97 L2056.81 1209.97 L2056.23 1209.97 L2055.64 1209.97 L2055.06 1209.97 L2054.47 1209.97 L2053.88 1209.97 L2053.3 1209.97 L2052.71 1209.97 L2052.12 1209.97 L2051.54 1209.97 L2050.95 1209.97 L2050.36 1209.97 L2049.78 1209.97 L2049.19 1209.97 L2048.6 1209.97 L2048.02 1209.97 L2047.43 1209.97 L2046.85 1209.97 L2046.26 1209.97 L2045.67 1209.97 L2045.09 1209.97 L2044.5 1209.97 L2043.91 1209.97 L2043.33 1209.97 L2042.74 1209.97 L2042.15 1209.97 L2041.57 1209.97 L2040.98 1209.97 L2040.4 1209.97 L2039.81 1209.97 L2039.22 1209.97 L2038.64 1209.97 L2038.05 1209.97 L2037.46 1209.97 L2036.88 1209.97 L2036.29 1209.97 L2035.7 1209.97 L2035.12 1209.97 L2034.53 1209.97 L2033.94 1209.97 L2033.36 1209.97 L2032.77 1209.97 L2032.19 1209.97 L2031.6 1209.97 L2031.01 1209.97 L2030.43 1209.97 L2029.84 1209.97 L2029.25 1209.97 L2028.67 1209.97 L2028.08 1209.97 L2027.49 1209.97 L2026.91 1209.97 L2026.32 1209.97 L2025.73 1209.97 L2025.15 1209.97 L2024.56 1209.97 L2023.98 1209.97 L2023.39 1209.97 L2022.8 1209.97 L2022.22 1209.97 L2021.63 1209.97 L2021.04 1209.97 L2020.46 1209.97 L2019.87 1209.97 L2019.28 1209.97 L2018.7 1209.97 L2018.11 1209.97 L2017.53 1209.97 L2016.94 1209.97 L2016.35 1209.97 L2015.77 1209.97 L2015.18 1209.97 L2014.59 1209.97 L2014.01 1209.97 L2013.42 1209.97 L2012.83 1209.97 L2012.25 1209.97 L2011.66 1209.97 L2011.07 1209.97 L2010.49 1209.97 L2009.9 1209.97 L2009.32 1209.97 L2008.73 1209.97 L2008.14 1209.97 L2007.56 1209.97 L2006.97 1209.97 L2006.38 1209.97 L2005.8 1209.97 L2005.21 1209.97 L2004.62 1209.97 L2004.04 1209.97 L2003.45 1209.97 L2002.86 1209.97 L2002.28 1209.97 L2001.69 1209.97 L2001.11 1209.97 L2000.52 1209.97 L1999.93 1209.97 L1999.35 1209.97 L1998.76 1209.97 L1998.17 1209.97 L1997.59 1209.97 L1997 1209.97 L1996.41 1209.97 L1995.83 1209.97 L1995.24 1209.97 L1994.65 1209.97 L1994.07 1209.97 L1993.48 1209.97 L1992.9 1209.97 L1992.31 1209.97 L1991.72 1209.97 L1991.14 1209.97 L1990.55 1209.97 L1989.96 1209.97 L1989.38 1209.97 L1988.79 1209.97 L1988.2 1209.97 L1987.62 1209.97 L1987.03 1209.97 L1986.45 1209.97 L1985.86 1209.97 L1985.27 1209.97 L1984.69 1209.97 L1984.1 1209.97 L1983.51 1209.97 L1982.93 1209.97 L1982.34 1209.97 L1981.75 1209.97 L1981.17 1209.97 L1980.58 1209.97 L1979.99 1209.97 L1979.41 1209.97 L1978.82 1209.97 L1978.24 1209.97 L1977.65 1209.97 L1977.06 1209.97 L1976.48 1209.97 L1975.89 1209.97 L1975.3 1209.97 L1974.72 1209.97 L1974.13 1209.97 L1973.54 1209.97 L1972.96 1209.97 L1972.37 1209.97 L1971.78 1209.97 L1971.2 1209.97 L1970.61 1209.97 L1970.03 1209.97 L1969.44 1209.97 L1968.85 1209.97 L1968.27 1209.97 L1967.68 1209.97 L1967.09 1209.97 L1966.51 1209.97 L1965.92 1209.97 L1965.33 1209.97 L1964.75 1209.97 L1964.16 1209.97 L1963.58 1209.97 L1962.99 1209.97 L1962.4 1209.97 L1961.82 1209.97 L1961.23 1209.97 L1960.64 1209.97 L1960.06 1209.97 L1959.47 1209.97 L1958.88 1209.97 L1958.3 1209.97 L1957.71 1209.97 L1957.12 1209.97 L1956.54 1209.97 L1955.95 1209.97 L1955.37 1209.97 L1954.78 1209.97 L1954.19 1209.97 L1953.61 1209.97 L1953.02 1209.97 L1952.43 1209.97 L1951.85 1209.97 L1951.26 1209.97 L1950.67 1209.97 L1950.09 1209.97 L1949.5 1209.97 L1948.91 1209.97 L1948.33 1209.97 L1947.74 1209.97 L1947.16 1209.97 L1946.57 1209.97 L1945.98 1209.97 L1945.4 1209.97 L1944.81 1209.97 L1944.22 1209.97 L1943.64 1209.97 L1943.05 1209.97 L1942.46 1209.97 L1941.88 1209.97 L1941.29 1209.97 L1940.71 1209.97 L1940.12 1209.97 L1939.53 1209.97 L1938.95 1209.97 L1938.36 1209.97 L1937.77 1209.97 L1937.19 1209.97 L1936.6 1209.97 L1936.01 1209.97 L1935.43 1209.97 L1934.84 1209.97 L1934.25 1209.97 L1933.67 1209.97 L1933.08 1209.97 L1932.5 1209.97 L1931.91 1209.97 L1931.32 1209.97 L1930.74 1209.97 L1930.15 1209.97 L1929.56 1209.97 L1928.98 1209.97 L1928.39 1209.97 L1927.8 1209.97 L1927.22 1209.97 L1926.63 1209.97 L1926.04 1209.97 L1925.46 1209.97 L1924.87 1209.97 L1924.29 1209.97 L1923.7 1209.97 L1923.11 1209.97 L1922.53 1209.97 L1921.94 1209.97 L1921.35 1209.97 L1920.77 1209.97 L1920.18 1209.97 L1919.59 1209.97 L1919.01 1209.97 L1918.42 1209.97 L1917.83 1209.97 L1917.25 1209.97 L1916.66 1209.97 L1916.08 1209.97 L1915.49 1209.97 L1914.9 1209.97 L1914.32 1209.97 L1913.73 1209.97 L1913.14 1209.97 L1912.56 1209.97 L1911.97 1209.97 L1911.38 1209.97 L1910.8 1209.97 L1910.21 1209.97 L1909.63 1209.97 L1909.04 1209.97 L1908.45 1209.97 L1907.87 1209.97 L1907.28 1209.97 L1906.69 1209.97 L1906.11 1209.97 L1905.52 1209.97 L1904.93 1209.97 L1904.35 1209.97 L1903.76 1209.97 L1903.17 1209.97 L1902.59 1209.97 L1902 1209.97 L1901.42 1209.97 L1900.83 1209.97 L1900.24 1209.97 L1899.66 1209.97 L1899.07 1209.97 L1898.48 1209.97 L1897.9 1209.97 L1897.31 1209.97 L1896.72 1209.97 L1896.14 1209.97 L1895.55 1209.97 L1894.96 1209.97 L1894.38 1209.97 L1893.79 1209.97 L1893.21 1209.97 L1892.62 1209.97 L1892.03 1209.97 L1891.45 1209.97 L1890.86 1209.97 L1890.27 1209.97 L1889.69 1209.97 L1889.1 1209.97 L1888.51 1209.97 L1887.93 1209.97 L1887.34 1209.97 L1886.76 1209.97 L1886.17 1209.97 L1885.58 1209.97 L1885 1209.97 L1884.41 1209.97 L1883.82 1209.97 L1883.24 1209.97 L1882.65 1209.97 L1882.06 1209.97 L1881.48 1209.97 L1880.89 1209.97 L1880.3 1209.97 L1879.72 1209.97 L1879.13 1209.97 L1878.55 1209.97 L1877.96 1209.97 L1877.37 1209.97 L1876.79 1209.97 L1876.2 1209.97 L1875.61 1209.97 L1875.03 1209.97 L1874.44 1209.97 L1873.85 1209.97 L1873.27 1209.97 L1872.68 1209.97 L1872.09 1209.97 L1871.51 1209.97 L1870.92 1209.97 L1870.34 1209.97 L1869.75 1209.97 L1869.16 1209.97 L1868.58 1209.97 L1867.99 1209.97 L1867.4 1209.97 L1866.82 1209.97 L1866.23 1209.97 L1865.64 1209.97 L1865.06 1209.97 L1864.47 1209.97 L1863.88 1209.97 L1863.3 1209.97 L1862.71 1209.97 L1862.13 1209.97 L1861.54 1209.97 L1860.95 1209.97 L1860.37 1209.97 L1859.78 1209.97 L1859.19 1209.97 L1858.61 1209.97 L1858.02 1209.97 L1857.43 1209.97 L1856.85 1209.97 L1856.26 1209.97 L1855.68 1209.97 L1855.09 1209.97 L1854.5 1209.97 L1853.92 1209.97 L1853.33 1209.97 L1852.74 1209.97 L1852.16 1209.97 L1851.57 1209.97 L1850.98 1209.97 L1850.4 1209.97 L1849.81 1209.97 L1849.22 1209.97 L1848.64 1209.97 L1848.05 1209.97 L1847.47 1209.97 L1846.88 1209.97 L1846.29 1209.97 L1845.71 1209.97 L1845.12 1209.97 L1844.53 1209.97 L1843.95 1209.97 L1843.36 1209.97 L1842.77 1209.97 L1842.19 1209.97 L1841.6 1209.97 L1841.01 1209.97 L1840.43 1209.97 L1839.84 1209.97 L1839.26 1209.97 L1838.67 1209.97 L1838.08 1209.97 L1837.5 1209.97 L1836.91 1209.97 L1836.32 1209.97 L1835.74 1209.97 L1835.15 1209.97 L1834.56 1209.97 L1833.98 1209.97 L1833.39 1209.97 L1832.81 1209.97 L1832.22 1209.97 L1831.63 1209.97 L1831.05 1209.97 L1830.46 1209.97 L1829.87 1209.97 L1829.29 1209.97 L1828.7 1209.97 L1828.11 1209.97 L1827.53 1209.97 L1826.94 1209.97 L1826.35 1209.97 L1825.77 1209.97 L1825.18 1209.97 L1824.6 1209.97 L1824.01 1209.97 L1823.42 1209.97 L1822.84 1209.97 L1822.25 1209.97 L1821.66 1209.97 L1821.08 1209.97 L1820.49 1209.97 L1819.9 1209.97 L1819.32 1209.97 L1818.73 1209.97 L1818.14 1209.97 L1817.56 1209.97 L1816.97 1209.97 L1816.39 1209.97 L1815.8 1209.97 L1815.21 1209.97 L1814.63 1209.97 L1814.04 1209.97 L1813.45 1209.97 L1812.87 1209.97 L1812.28 1209.97 L1811.69 1209.97 L1811.11 1209.97 L1810.52 1209.97 L1809.94 1209.97 L1809.35 1209.97 L1808.76 1209.97 L1808.18 1209.97 L1807.59 1209.97 L1807 1209.97 L1806.42 1209.97 L1805.83 1209.97 L1805.24 1209.97 L1804.66 1209.97 L1804.07 1209.97 L1803.48 1209.97 L1802.9 1209.97 L1802.31 1209.97 L1801.73 1209.97 L1801.14 1209.97 L1800.55 1209.97 L1799.97 1209.97 L1799.38 1209.97 L1798.79 1209.97 L1798.21 1209.97 L1797.62 1209.97 L1797.03 1209.97 L1796.45 1209.97 L1795.86 1209.97 L1795.27 1209.97 L1794.69 1209.97 L1794.1 1209.97 L1793.52 1209.97 L1792.93 1209.97 L1792.34 1209.97 L1791.76 1209.97 L1791.17 1209.97 L1790.58 1209.97 L1790 1209.97 L1789.41 1209.97 L1788.82 1209.97 L1788.24 1209.97 L1787.65 1209.97 L1787.06 1209.97 L1786.48 1209.97 L1785.89 1209.97 L1785.31 1209.97 L1784.72 1209.97 L1784.13 1209.97 L1783.55 1209.97 L1782.96 1209.97 L1782.37 1209.97 L1781.79 1209.97 L1781.2 1209.97 L1780.61 1209.97 L1780.03 1209.97 L1779.44 1209.97 L1778.86 1209.97 L1778.27 1209.97 L1777.68 1209.97 L1777.1 1209.97 L1776.51 1209.97 L1775.92 1209.97 L1775.34 1209.97 L1774.75 1209.97 L1774.16 1209.97 L1773.58 1209.97 L1772.99 1209.97 L1772.4 1209.97 L1771.82 1209.97 L1771.23 1209.97 L1770.65 1209.97 L1770.06 1209.97 L1769.47 1209.97 L1768.89 1209.97 L1768.3 1209.97 L1767.71 1209.97 L1767.13 1209.97 L1766.54 1209.97 L1765.95 1209.97 L1765.37 1209.97 L1764.78 1209.97 L1764.19 1209.97 L1763.61 1209.97 L1763.02 1209.97 L1762.44 1209.97 L1761.85 1209.97 L1761.26 1209.97 L1760.68 1209.97 L1760.09 1209.97 L1759.5 1209.97 L1758.92 1209.97 L1758.33 1209.97 L1757.74 1209.97 L1757.16 1209.97 L1756.57 1209.97 L1755.99 1209.97 L1755.4 1209.97 L1754.81 1209.97 L1754.23 1209.97 L1753.64 1209.97 L1753.05 1209.97 L1752.47 1209.97 L1751.88 1209.97 L1751.29 1209.97 L1750.71 1209.97 L1750.12 1209.97 L1749.53 1209.97 L1748.95 1209.97 L1748.36 1209.97 L1747.78 1209.97 L1747.19 1209.97 L1746.6 1209.97 L1746.02 1209.97 L1745.43 1209.97 L1744.84 1209.97 L1744.26 1209.97 L1743.67 1209.97 L1743.08 1209.97 L1742.5 1209.97 L1741.91 1209.97 L1741.32 1209.97 L1740.74 1209.97 L1740.15 1209.97 L1739.57 1209.97 L1738.98 1209.97 L1738.39 1209.97 L1737.81 1209.97 L1737.22 1209.97 L1736.63 1209.97 L1736.05 1209.97 L1735.46 1209.97 L1734.87 1209.97 L1734.29 1209.97 L1733.7 1209.97 L1733.11 1209.97 L1732.53 1209.97 L1731.94 1209.97 L1731.36 1209.97 L1730.77 1209.97 L1730.18 1209.97 L1729.6 1209.97 L1729.01 1209.97 L1728.42 1209.97 L1727.84 1209.97 L1727.25 1209.97 L1726.66 1209.97 L1726.08 1209.97 L1725.49 1209.97 L1724.91 1209.97 L1724.32 1209.97 L1723.73 1209.97 L1723.15 1209.97 L1722.56 1209.97 L1721.97 1209.97 L1721.39 1209.97 L1720.8 1209.97 L1720.21 1209.97 L1719.63 1209.97 L1719.04 1209.97 L1718.45 1209.97 L1717.87 1209.97 L1717.28 1209.97 L1716.7 1209.97 L1716.11 1209.97 L1715.52 1209.97 L1714.94 1209.97 L1714.35 1209.97 L1713.76 1209.97 L1713.18 1209.97 L1712.59 1209.97 L1712 1209.97 L1711.42 1209.97 L1710.83 1209.97 L1710.24 1209.97 L1709.66 1209.97 L1709.07 1209.97 L1708.49 1209.97 L1707.9 1209.97 L1707.31 1209.97 L1706.73 1209.97 L1706.14 1209.97 L1705.55 1209.97 L1704.97 1209.97 L1704.38 1209.97 L1703.79 1209.97 L1703.21 1209.97 L1702.62 1209.97 L1702.04 1209.97 L1701.45 1209.97 L1700.86 1209.97 L1700.28 1209.97 L1699.69 1209.97 L1699.1 1209.97 L1698.52 1209.97 L1697.93 1209.97 L1697.34 1209.97 L1696.76 1209.97 L1696.17 1209.97 L1695.58 1209.97 L1695 1209.97 L1694.41 1209.97 L1693.83 1209.97 L1693.24 1209.97 L1692.65 1209.97 L1692.07 1209.97 L1691.48 1209.97 L1690.89 1209.97 L1690.31 1209.97 L1689.72 1209.97 L1689.13 1209.97 L1688.55 1209.97 L1687.96 1209.97 L1687.37 1209.97 L1686.79 1209.97 L1686.2 1209.97 L1685.62 1209.97 L1685.03 1209.97 L1684.44 1209.97 L1683.86 1209.97 L1683.27 1209.97 L1682.68 1209.97 L1682.1 1209.97 L1681.51 1209.97 L1680.92 1209.97 L1680.34 1209.97 L1679.75 1209.97 L1679.17 1209.97 L1678.58 1209.97 L1677.99 1209.97 L1677.41 1209.97 L1676.82 1209.97 L1676.23 1209.97 L1675.65 1209.97 L1675.06 1209.97 L1674.47 1209.97 L1673.89 1209.97 L1673.3 1209.97 L1672.71 1209.97 L1672.13 1209.97 L1671.54 1209.97 L1670.96 1209.97 L1670.37 1209.97 L1669.78 1209.97 L1669.2 1209.97 L1668.61 1209.97 L1668.02 1209.97 L1667.44 1209.97 L1666.85 1209.97 L1666.26 1209.97 L1665.68 1209.97 L1665.09 1209.97 L1664.5 1209.97 L1663.92 1209.97 L1663.33 1209.97 L1662.75 1209.97 L1662.16 1209.97 L1661.57 1209.97 L1660.99 1209.97 L1660.4 1209.97 L1659.81 1209.97 L1659.23 1209.97 L1658.64 1209.97 L1658.05 1209.97 L1657.47 1209.97 L1656.88 1209.97 L1656.29 1209.97 L1655.71 1209.97 L1655.12 1209.97 L1654.54 1209.97 L1653.95 1209.97 L1653.36 1209.97 L1652.78 1209.97 L1652.19 1209.97 L1651.6 1209.97 L1651.02 1209.97 L1650.43 1209.97 L1649.84 1209.97 L1649.26 1209.97 L1648.67 1209.97 L1648.09 1209.97 L1647.5 1209.97 L1646.91 1209.97 L1646.33 1209.97 L1645.74 1209.97 L1645.15 1209.97 L1644.57 1209.97 L1643.98 1209.97 L1643.39 1209.97 L1642.81 1209.97 L1642.22 1209.97 L1641.63 1209.97 L1641.05 1209.97 L1640.46 1209.97 L1639.88 1209.97 L1639.29 1209.97 L1638.7 1209.97 L1638.12 1209.97 L1637.53 1209.97 L1636.94 1209.97 L1636.36 1209.97 L1635.77 1209.97 L1635.18 1209.97 L1634.6 1209.97 L1634.01 1209.97 L1633.42 1209.97 L1632.84 1209.97 L1632.25 1209.97 L1631.67 1209.97 L1631.08 1209.97 L1630.49 1209.97 L1629.91 1209.97 L1629.32 1209.97 L1628.73 1209.97 L1628.15 1209.97 L1627.56 1209.97 L1626.97 1209.97 L1626.39 1209.97 L1625.8 1209.97 L1625.22 1209.97 L1624.63 1209.97 L1624.04 1209.97 L1623.46 1209.97 L1622.87 1209.97 L1622.28 1209.97 L1621.7 1209.97 L1621.11 1209.97 L1620.52 1209.97 L1619.94 1209.97 L1619.35 1209.97 L1618.76 1209.97 L1618.18 1209.97 L1617.59 1209.97 L1617.01 1209.97 L1616.42 1209.97 L1615.83 1209.97 L1615.25 1209.97 L1614.66 1209.97 L1614.07 1209.97 L1613.49 1209.97 L1612.9 1209.97 L1612.31 1209.97 L1611.73 1209.97 L1611.14 1209.97 L1610.55 1209.97 L1609.97 1209.97 L1609.38 1209.97 L1608.8 1209.97 L1608.21 1209.97 L1607.62 1209.97 L1607.04 1209.97 L1606.45 1209.97 L1605.86 1209.97 L1605.28 1209.97 L1604.69 1209.97 L1604.1 1209.97 L1603.52 1209.97 L1602.93 1209.97 L1602.34 1209.97 L1601.76 1209.97 L1601.17 1209.97 L1600.59 1209.97 L1600 1209.97 L1599.41 1209.97 L1598.83 1209.97 L1598.24 1209.97 L1597.65 1209.97 L1597.07 1209.97 L1596.48 1209.97 L1595.89 1209.97 L1595.31 1209.97 L1594.72 1209.97 L1594.14 1209.97 L1593.55 1209.97 L1592.96 1209.97 L1592.38 1209.97 L1591.79 1209.97 L1591.2 1209.97 L1590.62 1209.97 L1590.03 1209.97 L1589.44 1209.97 L1588.86 1209.97 L1588.27 1209.97 L1587.68 1209.97 L1587.1 1209.97 L1586.51 1209.97 L1585.93 1209.97 L1585.34 1209.97 L1584.75 1209.97 L1584.17 1209.97 L1583.58 1209.97 L1582.99 1209.97 L1582.41 1209.97 L1581.82 1209.97 L1581.23 1209.97 L1580.65 1209.97 L1580.06 1209.97 L1579.47 1209.97 L1578.89 1209.97 L1578.3 1209.97 L1577.72 1209.97 L1577.13 1209.97 L1576.54 1209.97 L1575.96 1209.97 L1575.37 1209.97 L1574.78 1209.97 L1574.2 1209.97 L1573.61 1209.97 L1573.02 1209.97 L1572.44 1209.97 L1571.85 1209.97 L1571.27 1209.97 L1570.68 1209.97 L1570.09 1209.97 L1569.51 1209.97 L1568.92 1209.97 L1568.33 1209.97 L1567.75 1209.97 L1567.16 1209.97 L1566.57 1209.97 L1565.99 1209.97 L1565.4 1209.97 L1564.81 1209.97 L1564.23 1209.97 L1563.64 1209.97 L1563.06 1209.97 L1562.47 1209.97 L1561.88 1209.97 L1561.3 1209.97 L1560.71 1209.97 L1560.12 1209.97 L1559.54 1209.97 L1558.95 1209.97 L1558.36 1209.97 L1557.78 1209.97 L1557.19 1209.97 L1556.6 1209.97 L1556.02 1209.97 L1555.43 1209.97 L1554.85 1209.97 L1554.26 1209.97 L1553.67 1209.97 L1553.09 1209.97 L1552.5 1209.97 L1551.91 1209.97 L1551.33 1209.97 L1550.74 1209.97 L1550.15 1209.97 L1549.57 1209.97 L1548.98 1209.97 L1548.4 1209.97 L1547.81 1209.97 L1547.22 1209.97 L1546.64 1209.97 L1546.05 1209.97 L1545.46 1209.97 L1544.88 1209.97 L1544.29 1209.97 L1543.7 1209.97 L1543.12 1209.97 L1542.53 1209.97 L1541.94 1209.97 L1541.36 1209.97 L1540.77 1209.97 L1540.19 1209.97 L1539.6 1209.97 L1539.01 1209.97 L1538.43 1209.97 L1537.84 1209.97 L1537.25 1209.97 L1536.67 1209.97 L1536.08 1209.97 L1535.49 1209.97 L1534.91 1209.97 L1534.32 1209.97 L1533.73 1209.97 L1533.15 1209.97 L1532.56 1209.97 L1531.98 1209.97 L1531.39 1209.97 L1530.8 1209.97 L1530.22 1209.97 L1529.63 1209.97 L1529.04 1209.97 L1528.46 1209.97 L1527.87 1209.97 L1527.28 1209.97 L1526.7 1209.97 L1526.11 1209.97 L1525.52 1209.97 L1524.94 1209.97 L1524.35 1209.97 L1523.77 1209.97 L1523.18 1209.97 L1522.59 1209.97 L1522.01 1209.97 L1521.42 1209.97 L1520.83 1209.97 L1520.25 1209.97 L1519.66 1209.97 L1519.07 1209.97 L1518.49 1209.97 L1517.9 1209.97 L1517.32 1209.97 L1516.73 1209.97 L1516.14 1209.97 L1515.56 1209.97 L1514.97 1209.97 L1514.38 1209.97 L1513.8 1209.97 L1513.21 1209.97 L1512.62 1209.97 L1512.04 1209.97 L1511.45 1209.97 L1510.86 1209.97 L1510.28 1209.97 L1509.69 1209.97 L1509.11 1209.97 L1508.52 1209.97 L1507.93 1209.97 L1507.35 1209.97 L1506.76 1209.97 L1506.17 1209.97 L1505.59 1209.97 L1505 1209.97 L1504.41 1209.97 L1503.83 1209.97 L1503.24 1209.97 L1502.65 1209.97 L1502.07 1209.97 L1501.48 1209.97 L1500.9 1209.97 L1500.31 1209.97 L1499.72 1209.97 L1499.14 1209.97 L1498.55 1209.97 L1497.96 1209.97 L1497.38 1209.97 L1496.79 1209.97 L1496.2 1209.97 L1495.62 1209.97 L1495.03 1209.97 L1494.45 1209.97 L1493.86 1209.97 L1493.27 1209.97 L1492.69 1209.97 L1492.1 1209.97 L1491.51 1209.97 L1490.93 1209.97 L1490.34 1209.97 L1489.75 1209.97 L1489.17 1209.97 L1488.58 1209.97 L1487.99 1209.97 L1487.41 1209.97 L1486.82 1209.97 L1486.24 1209.97 L1485.65 1209.97 L1485.06 1209.97 L1484.48 1209.97 L1483.89 1209.97 L1483.3 1209.97 L1482.72 1209.97 L1482.13 1209.97 L1481.54 1209.97 L1480.96 1209.97 L1480.37 1209.97 L1479.78 1209.97 L1479.2 1209.97 L1478.61 1209.97 L1478.03 1209.97 L1477.44 1209.97 L1476.85 1209.97 L1476.27 1209.97 L1475.68 1209.97 L1475.09 1209.97 L1474.51 1209.97 L1473.92 1209.97 L1473.33 1209.97 L1472.75 1209.97 L1472.16 1209.97 L1471.57 1209.97 L1470.99 1209.97 L1470.4 1209.97 L1469.82 1209.97 L1469.23 1209.97 L1468.64 1209.97 L1468.06 1209.97 L1467.47 1209.97 L1466.88 1209.97 L1466.3 1209.97 L1465.71 1209.97 L1465.12 1209.97 L1464.54 1209.97 L1463.95 1209.97 L1463.37 1209.97 L1462.78 1209.97 L1462.19 1209.97 L1461.61 1209.97 L1461.02 1209.97 L1460.43 1209.97 L1459.85 1209.97 L1459.26 1209.97 L1458.67 1209.97 L1458.09 1209.97 L1457.5 1209.97 L1456.91 1209.97 L1456.33 1209.97 L1455.74 1209.97 L1455.16 1209.97 L1454.57 1209.97 L1453.98 1209.97 L1453.4 1209.97 L1452.81 1209.97 L1452.22 1209.97 L1451.64 1209.97 L1451.05 1209.97 L1450.46 1209.97 L1449.88 1209.97 L1449.29 1209.97 L1448.7 1209.97 L1448.12 1209.97 L1447.53 1209.97 L1446.95 1209.97 L1446.36 1209.97 L1445.77 1209.97 L1445.19 1209.97 L1444.6 1209.97 L1444.01 1209.97 L1443.43 1209.97 L1442.84 1209.97 L1442.25 1209.97 L1441.67 1209.97 L1441.08 1209.97 L1440.5 1209.97 L1439.91 1209.97 L1439.32 1209.97 L1438.74 1209.97 L1438.15 1209.97 L1437.56 1209.97 L1436.98 1209.97 L1436.39 1209.97 L1435.8 1209.97 L1435.22 1209.97 L1434.63 1209.97 L1434.04 1209.97 L1433.46 1209.97 L1432.87 1209.97 L1432.29 1209.97 L1431.7 1209.97 L1431.11 1209.97 L1430.53 1209.97 L1429.94 1209.97 L1429.35 1209.97 L1428.77 1209.97 L1428.18 1209.97 L1427.59 1209.97 L1427.01 1209.97 L1426.42 1209.97 L1425.83 1209.97 L1425.25 1209.97 L1424.66 1209.97 L1424.08 1209.97 L1423.49 1209.97 L1422.9 1209.97 L1422.32 1209.97 L1421.73 1209.97 L1421.14 1209.97 L1420.56 1209.97 L1419.97 1209.97 L1419.38 1209.97 L1418.8 1209.97 L1418.21 1209.97 L1417.63 1209.97 L1417.04 1209.97 L1416.45 1209.97 L1415.87 1209.97 L1415.28 1209.97 L1414.69 1209.97 L1414.11 1209.97 L1413.52 1209.97 L1412.93 1209.97 L1412.35 1209.97 L1411.76 1209.97 L1411.17 1209.97 L1410.59 1209.97 L1410 1209.97 L1409.42 1209.97 L1408.83 1209.97 L1408.24 1209.97 L1407.66 1209.97 L1407.07 1209.97 L1406.48 1209.97 L1405.9 1209.97 L1405.31 1209.97 L1404.72 1209.97 L1404.14 1209.97 L1403.55 1209.97 L1402.96 1209.97 L1402.38 1209.97 L1401.79 1209.97 L1401.21 1209.97 L1400.62 1209.97 L1400.03 1209.97 L1399.45 1209.97 L1398.86 1209.97 L1398.27 1209.97 L1397.69 1209.97 L1397.1 1209.97 L1396.51 1209.97 L1395.93 1209.97 L1395.34 1209.97 L1394.75 1209.97 L1394.17 1209.97 L1393.58 1209.97 L1393 1209.97 L1392.41 1209.97 L1391.82 1209.97 L1391.24 1209.97 L1390.65 1209.97 L1390.06 1209.97 L1389.48 1209.97 L1388.89 1209.97 L1388.3 1209.97 L1387.72 1209.97 L1387.13 1209.97 L1386.55 1209.97 L1385.96 1209.97 L1385.37 1209.97 L1384.79 1209.97 L1384.2 1209.97 L1383.61 1209.97 L1383.03 1209.97 L1382.44 1209.97 L1381.85 1209.97 L1381.27 1209.97 L1380.68 1209.97 L1380.09 1209.97 L1379.51 1209.97 L1378.92 1209.97 L1378.34 1209.97 L1377.75 1209.97 L1377.16 1209.97 L1376.58 1209.97 L1375.99 1209.97 L1375.4 1209.97 L1374.82 1209.97 L1374.23 1209.97 L1373.64 1209.97 L1373.06 1209.97 L1372.47 1209.97 L1371.88 1209.97 L1371.3 1209.97 L1370.71 1209.97 L1370.13 1209.97 L1369.54 1209.97 L1368.95 1209.97 L1368.37 1209.97 L1367.78 1209.97 L1367.19 1209.97 L1366.61 1209.97 L1366.02 1209.97 L1365.43 1209.97 L1364.85 1209.97 L1364.26 1209.97 L1363.68 1209.97 L1363.09 1209.97 L1362.5 1209.97 L1361.92 1209.97 L1361.33 1209.97 L1360.74 1209.97 L1360.16 1209.97 L1359.57 1209.97 L1358.98 1209.97 L1358.4 1209.97 L1357.81 1209.97 L1357.22 1209.97 L1356.64 1209.97 L1356.05 1209.97 L1355.47 1209.97 L1354.88 1209.97 L1354.29 1209.97 L1353.71 1209.97 L1353.12 1209.97 L1352.53 1209.97 L1351.95 1209.97 L1351.36 1209.97 L1350.77 1209.97 L1350.19 1209.97 L1349.6 1209.97 L1349.01 1209.97 L1348.43 1209.97 L1347.84 1209.97 L1347.26 1209.97 L1346.67 1209.97 L1346.08 1209.97 L1345.5 1209.97 L1344.91 1209.97 L1344.32 1209.97 L1343.74 1209.97 L1343.15 1209.97 L1342.56 1209.97 L1341.98 1209.97 L1341.39 1209.97 L1340.8 1209.97 L1340.22 1209.97 L1339.63 1209.97 L1339.05 1209.97 L1338.46 1209.97 L1337.87 1209.97 L1337.29 1209.97 L1336.7 1209.97 L1336.11 1209.97 L1335.53 1209.97 L1334.94 1209.97 L1334.35 1209.97 L1333.77 1209.97 L1333.18 1209.97 L1332.6 1209.97 L1332.01 1209.97 L1331.42 1209.97 L1330.84 1209.97 L1330.25 1209.97 L1329.66 1209.97 L1329.08 1209.97 L1328.49 1209.97 L1327.9 1209.97 L1327.32 1209.97 L1326.73 1209.97 L1326.14 1209.97 L1325.56 1209.97 L1324.97 1209.97 L1324.39 1209.97 L1323.8 1209.97 L1323.21 1209.97 L1322.63 1209.97 L1322.04 1209.97 L1321.45 1209.97 L1320.87 1209.97 L1320.28 1209.97 L1319.69 1209.97 L1319.11 1209.97 L1318.52 1209.97 L1317.93 1209.97 L1317.35 1209.97 L1316.76 1209.97 L1316.18 1209.97 L1315.59 1209.97 L1315 1209.97 L1314.42 1209.97 L1313.83 1209.97 L1313.24 1209.97 L1312.66 1209.97 L1312.07 1209.97 L1311.48 1209.97 L1310.9 1209.97 L1310.31 1209.97 L1309.73 1209.97 L1309.14 1209.97 L1308.55 1209.97 L1307.97 1209.97 L1307.38 1209.97 L1306.79 1209.97 L1306.21 1209.97 L1305.62 1209.97 L1305.03 1209.97 L1304.45 1209.97 L1303.86 1209.97 L1303.27 1209.97 L1302.69 1209.97 L1302.1 1209.97 L1301.52 1209.97 L1300.93 1209.97 L1300.34 1209.97 L1299.76 1209.97 L1299.17 1209.97 L1298.58 1209.97 L1298 1209.97 L1297.41 1209.97 L1296.82 1209.97 L1296.24 1209.97 L1295.65 1209.97 L1295.06 1209.97 L1294.48 1209.97 L1293.89 1209.97 L1293.31 1209.97 L1292.72 1209.97 L1292.13 1209.97 L1291.55 1209.97 L1290.96 1209.97 L1290.37 1209.97 L1289.79 1209.97 L1289.2 1209.97 L1288.61 1209.97 L1288.03 1209.97 L1287.44 1209.97 L1286.86 1209.97 L1286.27 1209.97 L1285.68 1209.97 L1285.1 1209.97 L1284.51 1209.97 L1283.92 1209.97 L1283.34 1209.97 L1282.75 1209.97 L1282.16 1209.97 L1281.58 1209.97 L1280.99 1209.97 L1280.4 1209.97 L1279.82 1209.97 L1279.23 1209.97 L1278.65 1209.97 L1278.06 1209.97 L1277.47 1209.97 L1276.89 1209.97 L1276.3 1209.97 L1275.71 1209.97 L1275.13 1209.97 L1274.54 1209.97 L1273.95 1209.97 L1273.37 1209.97 L1272.78 1209.97 L1272.19 1209.97 L1271.61 1209.97 L1271.02 1209.97 L1270.44 1209.97 L1269.85 1209.97 L1269.26 1209.97 L1268.68 1209.97 L1268.09 1209.97 L1267.5 1209.97 L1266.92 1209.97 L1266.33 1209.97 L1265.74 1209.97 L1265.16 1209.97 L1264.57 1209.97 L1263.98 1209.97 L1263.4 1209.97 L1262.81 1209.97 L1262.23 1209.97 L1261.64 1209.97 L1261.05 1209.97 L1260.47 1209.97 L1259.88 1209.97 L1259.29 1209.97 L1258.71 1209.97 L1258.12 1209.97 L1257.53 1209.97 L1256.95 1209.97 L1256.36 1209.97 L1255.78 1209.97 L1255.19 1209.97 L1254.6 1209.97 L1254.02 1209.97 L1253.43 1209.97 L1252.84 1209.97 L1252.26 1209.97 L1251.67 1209.97 L1251.08 1209.97 L1250.5 1209.97 L1249.91 1209.97 L1249.32 1209.97 L1248.74 1209.97 L1248.15 1209.97 L1247.57 1209.97 L1246.98 1209.97 L1246.39 1209.97 L1245.81 1209.97 L1245.22 1209.97 L1244.63 1209.97 L1244.05 1209.97 L1243.46 1209.97 L1242.87 1209.97 L1242.29 1209.97 L1241.7 1209.97 L1241.11 1209.97 L1240.53 1209.97 L1239.94 1209.97 L1239.36 1209.97 L1238.77 1209.97 L1238.18 1209.97 L1237.6 1209.97 L1237.01 1209.97 L1236.42 1209.97 L1235.84 1209.97 L1235.25 1209.97 L1234.66 1209.97 L1234.08 1209.97 L1233.49 1209.97 L1232.91 1209.97 L1232.32 1209.97 L1231.73 1209.97 L1231.15 1209.97 L1230.56 1209.97 L1229.97 1209.97 L1229.39 1209.97 L1228.8 1209.97 L1228.21 1209.97 L1227.63 1209.97 L1227.04 1209.97 L1226.45 1209.97 L1225.87 1209.97 L1225.28 1209.97 L1224.7 1209.97 L1224.11 1209.97 L1223.52 1209.97 L1222.94 1209.97 L1222.35 1209.97 L1221.76 1209.97 L1221.18 1209.97 L1220.59 1209.97 L1220 1209.97 L1219.42 1209.97 L1218.83 1209.97 L1218.24 1209.97 L1217.66 1209.97 L1217.07 1209.97 L1216.49 1209.97 L1215.9 1209.97 L1215.31 1209.97 L1214.73 1209.97 L1214.14 1209.97 L1213.55 1209.97 L1212.97 1209.97 L1212.38 1209.97 L1211.79 1209.97 L1211.21 1209.97 L1210.62 1209.97 L1210.03 1209.97 L1209.45 1209.97 L1208.86 1209.97 L1208.28 1209.97 L1207.69 1209.97 L1207.1 1209.97 L1206.52 1209.97 L1205.93 1209.97 L1205.34 1209.97 L1204.76 1209.97 L1204.17 1209.97 L1203.58 1209.97 L1203 1209.97 L1202.41 1209.97 L1201.83 1209.97 L1201.24 1209.97 L1200.65 1209.97 L1200.07 1209.97 L1199.48 1209.97 L1198.89 1209.97 L1198.31 1209.97 L1197.72 1209.97 L1197.13 1209.97 L1196.55 1209.97 L1195.96 1209.97 L1195.37 1209.97 L1194.79 1209.97 L1194.2 1209.97 L1193.62 1209.97 L1193.03 1209.97 L1192.44 1209.97 L1191.86 1209.97 L1191.27 1209.97 L1190.68 1209.97 L1190.1 1209.97 L1189.51 1209.97 L1188.92 1209.97 L1188.34 1209.97 L1187.75 1209.97 L1187.16 1209.97 L1186.58 1209.97 L1185.99 1209.97 L1185.41 1209.97 L1184.82 1209.97 L1184.23 1209.97 L1183.65 1209.97 L1183.06 1209.97 L1182.47 1209.97 L1181.89 1209.97 L1181.3 1209.97 L1180.71 1209.97 L1180.13 1209.97 L1179.54 1209.97 L1178.96 1209.97 L1178.37 1209.97 L1177.78 1209.97 L1177.2 1209.97 L1176.61 1209.97 L1176.02 1209.97 L1175.44 1209.97 L1174.85 1209.97 L1174.26 1209.97 L1173.68 1209.97 L1173.09 1209.97 L1172.5 1209.97 L1171.92 1209.97 L1171.33 1209.97 L1170.75 1209.97 L1170.16 1209.97 L1169.57 1209.97 L1168.99 1209.97 L1168.4 1209.97 L1167.81 1209.97 L1167.23 1209.97 L1166.64 1209.97 L1166.05 1209.97 L1165.47 1209.97 L1164.88 1209.97 L1164.29 1209.97 L1163.71 1209.97 L1163.12 1209.97 L1162.54 1209.97 L1161.95 1209.97 L1161.36 1209.97 L1160.78 1209.97 L1160.19 1209.97 L1159.6 1209.97 L1159.02 1209.97 L1158.43 1209.97 L1157.84 1209.97 L1157.26 1209.97 L1156.67 1209.97 L1156.09 1209.97 L1155.5 1209.97 L1154.91 1209.97 L1154.33 1209.97 L1153.74 1209.97 L1153.15 1209.97 L1152.57 1209.97 L1151.98 1209.97 L1151.39 1209.97 L1150.81 1209.97 L1150.22 1209.97 L1149.63 1209.97 L1149.05 1209.97 L1148.46 1209.97 L1147.88 1209.97 L1147.29 1209.97 L1146.7 1209.97 L1146.12 1209.97 L1145.53 1209.97 L1144.94 1209.97 L1144.36 1209.97 L1143.77 1209.97 L1143.18 1209.97 L1142.6 1209.97 L1142.01 1209.97 L1141.42 1209.97 L1140.84 1209.97 L1140.25 1209.97 L1139.67 1209.97 L1139.08 1209.97 L1138.49 1209.97 L1137.91 1209.97 L1137.32 1209.97 L1136.73 1209.97 L1136.15 1209.97 L1135.56 1209.97 L1134.97 1209.97 L1134.39 1209.97 L1133.8 1209.97 L1133.21 1209.97 L1132.63 1209.97 L1132.04 1209.97 L1131.46 1209.97 L1130.87 1209.97 L1130.28 1209.97 L1129.7 1209.97 L1129.11 1209.97 L1128.52 1209.97 L1127.94 1209.97 L1127.35 1209.97 L1126.76 1209.97 L1126.18 1209.97 L1125.59 1209.97 L1125.01 1209.97 L1124.42 1209.97 L1123.83 1209.97 L1123.25 1209.97 L1122.66 1209.97 L1122.07 1209.97 L1121.49 1209.97 L1120.9 1209.97 L1120.31 1209.97 L1119.73 1209.97 L1119.14 1209.97 L1118.55 1209.97 L1117.97 1209.97 L1117.38 1209.97 L1116.8 1209.97 L1116.21 1209.97 L1115.62 1209.97 L1115.04 1209.97 L1114.45 1209.97 L1113.86 1209.97 L1113.28 1209.97 L1112.69 1209.97 L1112.1 1209.97 L1111.52 1209.97 L1110.93 1209.97 L1110.34 1209.97 L1109.76 1209.97 L1109.17 1209.97 L1108.59 1209.97 L1108 1209.97 L1107.41 1209.97 L1106.83 1209.97 L1106.24 1209.97 L1105.65 1209.97 L1105.07 1209.97 L1104.48 1209.97 L1103.89 1209.97 L1103.31 1209.97 L1102.72 1209.97 L1102.14 1209.97 L1101.55 1209.97 L1100.96 1209.97 L1100.38 1209.97 L1099.79 1209.97 L1099.2 1209.97 L1098.62 1209.97 L1098.03 1209.97 L1097.44 1209.97 L1096.86 1209.97 L1096.27 1209.97 L1095.68 1209.97 L1095.1 1209.97 L1094.51 1209.97 L1093.93 1209.97 L1093.34 1209.97 L1092.75 1209.97 L1092.17 1209.97 L1091.58 1209.97 L1090.99 1209.97 L1090.41 1209.97 L1089.82 1209.97 L1089.23 1209.97 L1088.65 1209.97 L1088.06 1209.97 L1087.47 1209.97 L1086.89 1209.97 L1086.3 1209.97 L1085.72 1209.97 L1085.13 1209.97 L1084.54 1209.97 L1083.96 1209.97 L1083.37 1209.97 L1082.78 1209.97 L1082.2 1209.97 L1081.61 1209.97 L1081.02 1209.97 L1080.44 1209.97 L1079.85 1209.97 L1079.26 1209.97 L1078.68 1209.97 L1078.09 1209.97 L1077.51 1209.97 L1076.92 1209.97 L1076.33 1209.97 L1075.75 1209.97 L1075.16 1209.97 L1074.57 1209.97 L1073.99 1209.97 L1073.4 1209.97 L1072.81 1209.97 L1072.23 1209.97 L1071.64 1209.97 L1071.06 1209.97 L1070.47 1209.97 L1069.88 1209.97 L1069.3 1209.97 L1068.71 1209.97 L1068.12 1209.97 L1067.54 1209.97 L1066.95 1209.97 L1066.36 1209.97 L1065.78 1209.97 L1065.19 1209.97 L1064.6 1209.97 L1064.02 1209.97 L1063.43 1209.97 L1062.85 1209.97 L1062.26 1209.97 L1061.67 1209.97 L1061.09 1209.97 L1060.5 1209.97 L1059.91 1209.97 L1059.33 1209.97 L1058.74 1209.97 L1058.15 1209.97 L1057.57 1209.97 L1056.98 1209.97 L1056.39 1209.97 L1055.81 1209.97 L1055.22 1209.97 L1054.64 1209.97 L1054.05 1209.97 L1053.46 1209.97 L1052.88 1209.97 L1052.29 1209.97 L1051.7 1209.97 L1051.12 1209.97 L1050.53 1209.97 L1049.94 1209.97 L1049.36 1209.97 L1048.77 1209.97 L1048.19 1209.97 L1047.6 1209.97 L1047.01 1209.97 L1046.43 1209.97 L1045.84 1209.97 L1045.25 1209.97 L1044.67 1209.97 L1044.08 1209.97 L1043.49 1209.97 L1042.91 1209.97 L1042.32 1209.97 L1041.73 1209.97 L1041.15 1209.97 L1040.56 1209.97 L1039.98 1209.97 L1039.39 1209.97 L1038.8 1209.97 L1038.22 1209.97 L1037.63 1209.97 L1037.04 1209.97 L1036.46 1209.97 L1035.87 1209.97 L1035.28 1209.97 L1034.7 1209.97 L1034.11 1209.97 L1033.52 1209.97 L1032.94 1209.97 L1032.35 1209.97 L1031.77 1209.97 L1031.18 1209.97 L1030.59 1209.97 L1030.01 1209.97 L1029.42 1209.97 L1028.83 1209.97 L1028.25 1209.97 L1027.66 1209.97 L1027.07 1209.97 L1026.49 1209.97 L1025.9 1209.97 L1025.32 1209.97 L1024.73 1209.97 L1024.14 1209.97 L1023.56 1209.97 L1022.97 1209.97 L1022.38 1209.97 L1021.8 1209.97 L1021.21 1209.97 L1020.62 1209.97 L1020.04 1209.97 L1019.45 1209.97 L1018.86 1209.97 L1018.28 1209.97 L1017.69 1209.97 L1017.11 1209.97 L1016.52 1209.97 L1015.93 1209.97 L1015.35 1209.97 L1014.76 1209.97 L1014.17 1209.97 L1013.59 1209.97 L1013 1209.97 L1012.41 1209.97 L1011.83 1209.97 L1011.24 1209.97 L1010.65 1209.97 L1010.07 1209.97 L1009.48 1209.97 L1008.9 1209.97 L1008.31 1209.97 L1007.72 1209.97 L1007.14 1209.97 L1006.55 1209.97 L1005.96 1209.97 L1005.38 1209.97 L1004.79 1209.97 L1004.2 1209.97 L1003.62 1209.97 L1003.03 1209.97 L1002.44 1209.97 L1001.86 1209.97 L1001.27 1209.97 L1000.69 1209.97 L1000.1 1209.97 L999.513 1209.97 L998.926 1209.97 L998.34 1209.97 L997.754 1209.97 L997.167 1209.97 L996.581 1209.97 L995.994 1209.97 L995.408 1209.97 L994.822 1209.97 L994.235 1209.97 L993.649 1209.97 L993.062 1209.97 L992.476 1209.97 L991.889 1209.97 L991.303 1209.97 L990.717 1209.97 L990.13 1209.97 L989.544 1209.97 L988.957 1209.97 L988.371 1209.97 L987.785 1209.97 L987.198 1209.97 L986.612 1209.97 L986.025 1209.97  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.05 986.612,1210.05 987.198,1210.05 987.785,1210.05 988.371,1210.05 988.957,1210.05 989.544,1210.05 990.13,1210.05 990.717,1210.05 991.303,1210.05 991.889,1210.05 992.476,1210.05 993.062,1210.05 993.649,1210.05 994.235,1210.05 994.822,1210.05 995.408,1210.05 995.994,1210.05 996.581,1210.05 997.167,1210.05 997.754,1210.05 998.34,1210.05 998.926,1210.05 999.513,1210.05 1000.1,1210.05 1000.69,1210.05 1001.27,1210.05 1001.86,1210.05 1002.44,1210.05 1003.03,1210.05 1003.62,1210.05 1004.2,1210.05 1004.79,1210.05 1005.38,1210.05 1005.96,1210.05 1006.55,1210.05 1007.14,1210.05 1007.72,1210.05 1008.31,1210.05 1008.9,1210.05 1009.48,1210.05 1010.07,1210.05 1010.65,1210.05 1011.24,1210.05 1011.83,1210.05 1012.41,1210.05 1013,1210.05 1013.59,1210.05 1014.17,1210.05 1014.76,1210.05 1015.35,1210.05 1015.93,1210.05 1016.52,1210.05 1017.11,1210.05 1017.69,1210.05 1018.28,1210.05 1018.86,1210.05 1019.45,1210.05 1020.04,1210.05 1020.62,1210.05 1021.21,1210.05 1021.8,1210.05 1022.38,1210.05 1022.97,1210.05 1023.56,1210.05 1024.14,1210.05 1024.73,1210.05 1025.32,1210.05 1025.9,1210.05 1026.49,1210.05 1027.07,1210.05 1027.66,1210.05 1028.25,1210.05 1028.83,1210.05 1029.42,1210.05 1030.01,1210.05 1030.59,1210.05 1031.18,1210.05 1031.77,1210.05 1032.35,1210.05 1032.94,1210.05 1033.52,1210.05 1034.11,1210.05 1034.7,1210.05 1035.28,1210.05 1035.87,1210.05 1036.46,1210.05 1037.04,1210.05 1037.63,1210.05 1038.22,1210.05 1038.8,1210.05 1039.39,1210.05 1039.98,1210.05 1040.56,1210.05 1041.15,1210.05 1041.73,1210.05 1042.32,1210.05 1042.91,1210.05 1043.49,1210.05 1044.08,1210.05 1044.67,1210.05 1045.25,1210.05 1045.84,1210.05 1046.43,1210.05 1047.01,1210.05 1047.6,1210.05 1048.19,1210.05 1048.77,1210.05 1049.36,1210.05 1049.94,1210.05 1050.53,1210.05 1051.12,1210.05 1051.7,1210.05 1052.29,1210.05 1052.88,1210.05 1053.46,1210.05 1054.05,1210.05 1054.64,1210.05 1055.22,1210.05 1055.81,1210.05 1056.39,1210.05 1056.98,1210.05 1057.57,1210.05 1058.15,1210.05 1058.74,1210.05 1059.33,1210.05 1059.91,1210.05 1060.5,1210.05 1061.09,1210.05 1061.67,1210.05 1062.26,1210.05 1062.85,1210.05 1063.43,1210.05 1064.02,1210.05 1064.6,1210.05 1065.19,1210.05 1065.78,1210.05 1066.36,1210.05 1066.95,1210.05 1067.54,1210.05 1068.12,1210.05 1068.71,1210.05 1069.3,1210.05 1069.88,1210.05 1070.47,1210.05 1071.06,1210.05 1071.64,1210.05 1072.23,1210.05 1072.81,1210.05 1073.4,1210.05 1073.99,1210.05 1074.57,1210.05 1075.16,1210.05 1075.75,1210.05 1076.33,1210.05 1076.92,1210.05 1077.51,1210.05 1078.09,1210.05 1078.68,1210.05 1079.26,1210.05 1079.85,1210.05 1080.44,1210.05 1081.02,1210.05 1081.61,1210.05 1082.2,1210.05 1082.78,1210.05 1083.37,1210.05 1083.96,1210.05 1084.54,1210.05 1085.13,1210.05 1085.72,1210.05 1086.3,1210.05 1086.89,1210.05 1087.47,1210.05 1088.06,1210.05 1088.65,1210.05 1089.23,1210.05 1089.82,1210.05 1090.41,1210.05 1090.99,1210.05 1091.58,1210.05 1092.17,1210.05 1092.75,1210.05 1093.34,1210.05 1093.93,1210.05 1094.51,1210.05 1095.1,1210.05 1095.68,1210.05 1096.27,1210.05 1096.86,1210.05 1097.44,1210.05 1098.03,1210.05 1098.62,1210.05 1099.2,1210.05 1099.79,1210.05 1100.38,1210.05 1100.96,1210.05 1101.55,1210.05 1102.14,1210.05 1102.72,1210.05 1103.31,1210.05 1103.89,1210.05 1104.48,1210.05 1105.07,1210.05 1105.65,1210.05 1106.24,1210.05 1106.83,1210.05 1107.41,1210.05 1108,1210.05 1108.59,1210.05 1109.17,1210.05 1109.76,1210.05 1110.34,1210.05 1110.93,1210.05 1111.52,1210.05 1112.1,1210.05 1112.69,1210.05 1113.28,1210.05 1113.86,1210.05 1114.45,1210.05 1115.04,1210.05 1115.62,1210.05 1116.21,1210.05 1116.8,1210.05 1117.38,1210.05 1117.97,1210.05 1118.55,1210.05 1119.14,1210.05 1119.73,1210.05 1120.31,1210.05 1120.9,1210.05 1121.49,1210.05 1122.07,1210.05 1122.66,1210.05 1123.25,1210.05 1123.83,1210.05 1124.42,1210.05 1125.01,1210.05 1125.59,1210.05 1126.18,1210.05 1126.76,1210.05 1127.35,1210.05 1127.94,1210.05 1128.52,1210.05 1129.11,1210.05 1129.7,1210.05 1130.28,1210.05 1130.87,1210.05 1131.46,1210.05 1132.04,1210.05 1132.63,1210.05 1133.21,1210.05 1133.8,1210.05 1134.39,1210.05 1134.97,1210.05 1135.56,1210.05 1136.15,1210.05 1136.73,1210.05 1137.32,1210.05 1137.91,1210.05 1138.49,1210.05 1139.08,1210.05 1139.67,1210.05 1140.25,1210.05 1140.84,1210.05 1141.42,1210.05 1142.01,1210.05 1142.6,1210.05 1143.18,1210.05 1143.77,1210.05 1144.36,1210.05 1144.94,1210.05 1145.53,1210.05 1146.12,1210.05 1146.7,1210.05 1147.29,1210.05 1147.88,1210.05 1148.46,1210.05 1149.05,1210.05 1149.63,1210.05 1150.22,1210.05 1150.81,1210.05 1151.39,1210.05 1151.98,1210.05 1152.57,1210.05 1153.15,1210.05 1153.74,1210.05 1154.33,1210.05 1154.91,1210.05 1155.5,1210.05 1156.09,1210.05 1156.67,1210.05 1157.26,1210.05 1157.84,1210.05 1158.43,1210.05 1159.02,1210.05 1159.6,1210.05 1160.19,1210.05 1160.78,1210.05 1161.36,1210.05 1161.95,1210.05 1162.54,1210.05 1163.12,1210.05 1163.71,1210.05 1164.29,1210.05 1164.88,1210.05 1165.47,1210.05 1166.05,1210.05 1166.64,1210.05 1167.23,1210.05 1167.81,1210.05 1168.4,1210.05 1168.99,1210.05 1169.57,1210.05 1170.16,1210.05 1170.75,1210.05 1171.33,1210.05 1171.92,1210.05 1172.5,1210.05 1173.09,1210.05 1173.68,1210.05 1174.26,1210.05 1174.85,1210.05 1175.44,1210.05 1176.02,1210.05 1176.61,1210.05 1177.2,1210.05 1177.78,1210.05 1178.37,1210.05 1178.96,1210.05 1179.54,1210.05 1180.13,1210.05 1180.71,1210.05 1181.3,1210.05 1181.89,1210.05 1182.47,1210.05 1183.06,1210.05 1183.65,1210.05 1184.23,1210.05 1184.82,1210.05 1185.41,1210.05 1185.99,1210.05 1186.58,1210.05 1187.16,1210.05 1187.75,1210.05 1188.34,1210.05 1188.92,1210.05 1189.51,1210.05 1190.1,1210.05 1190.68,1210.05 1191.27,1210.05 1191.86,1210.05 1192.44,1210.05 1193.03,1210.05 1193.62,1210.05 1194.2,1210.05 1194.79,1210.05 1195.37,1210.05 1195.96,1210.05 1196.55,1210.05 1197.13,1210.05 1197.72,1210.05 1198.31,1210.05 1198.89,1210.05 1199.48,1210.05 1200.07,1210.05 1200.65,1210.05 1201.24,1210.05 1201.83,1210.05 1202.41,1210.05 1203,1210.05 1203.58,1210.05 1204.17,1210.05 1204.76,1210.05 1205.34,1210.05 1205.93,1210.05 1206.52,1210.05 1207.1,1210.05 1207.69,1210.05 1208.28,1210.05 1208.86,1210.05 1209.45,1210.05 1210.03,1210.05 1210.62,1210.05 1211.21,1210.05 1211.79,1210.05 1212.38,1210.05 1212.97,1210.05 1213.55,1210.05 1214.14,1210.05 1214.73,1210.05 1215.31,1210.05 1215.9,1210.05 1216.49,1210.05 1217.07,1210.05 1217.66,1210.05 1218.24,1210.05 1218.83,1210.05 1219.42,1210.05 1220,1210.05 1220.59,1210.05 1221.18,1210.05 1221.76,1210.05 1222.35,1210.05 1222.94,1210.05 1223.52,1210.05 1224.11,1210.05 1224.7,1210.05 1225.28,1210.05 1225.87,1210.05 1226.45,1210.05 1227.04,1210.05 1227.63,1210.05 1228.21,1210.05 1228.8,1210.05 1229.39,1210.05 1229.97,1210.05 1230.56,1210.05 1231.15,1210.05 1231.73,1210.05 1232.32,1210.05 1232.91,1210.05 1233.49,1210.05 1234.08,1210.05 1234.66,1210.05 1235.25,1210.05 1235.84,1210.05 1236.42,1210.05 1237.01,1210.05 1237.6,1210.05 1238.18,1210.05 1238.77,1210.05 1239.36,1210.05 1239.94,1210.05 1240.53,1210.05 1241.11,1210.05 1241.7,1210.05 1242.29,1210.05 1242.87,1210.05 1243.46,1210.05 1244.05,1210.05 1244.63,1210.05 1245.22,1210.05 1245.81,1210.05 1246.39,1210.05 1246.98,1210.05 1247.57,1210.05 1248.15,1210.05 1248.74,1210.05 1249.32,1210.05 1249.91,1210.05 1250.5,1210.05 1251.08,1210.05 1251.67,1210.05 1252.26,1210.05 1252.84,1210.05 1253.43,1210.05 1254.02,1210.05 1254.6,1210.05 1255.19,1210.05 1255.78,1210.05 1256.36,1210.05 1256.95,1210.05 1257.53,1210.05 1258.12,1210.05 1258.71,1210.05 1259.29,1210.05 1259.88,1210.05 1260.47,1210.05 1261.05,1210.05 1261.64,1210.05 1262.23,1210.05 1262.81,1210.05 1263.4,1210.05 1263.98,1210.05 1264.57,1210.05 1265.16,1210.05 1265.74,1210.05 1266.33,1210.05 1266.92,1210.05 1267.5,1210.05 1268.09,1210.05 1268.68,1210.05 1269.26,1210.05 1269.85,1210.05 1270.44,1210.05 1271.02,1210.05 1271.61,1210.05 1272.19,1210.05 1272.78,1210.05 1273.37,1210.05 1273.95,1210.05 1274.54,1210.05 1275.13,1210.05 1275.71,1210.05 1276.3,1210.05 1276.89,1210.05 1277.47,1210.05 1278.06,1210.05 1278.65,1210.05 1279.23,1210.05 1279.82,1210.05 1280.4,1210.05 1280.99,1210.05 1281.58,1210.05 1282.16,1210.05 1282.75,1210.05 1283.34,1210.05 1283.92,1210.05 1284.51,1210.05 1285.1,1210.05 1285.68,1210.05 1286.27,1210.05 1286.86,1210.05 1287.44,1210.05 1288.03,1210.05 1288.61,1210.05 1289.2,1210.05 1289.79,1210.05 1290.37,1210.05 1290.96,1210.05 1291.55,1210.05 1292.13,1210.05 1292.72,1210.05 1293.31,1210.05 1293.89,1210.05 1294.48,1210.05 1295.06,1210.05 1295.65,1210.05 1296.24,1210.05 1296.82,1210.05 1297.41,1210.05 1298,1210.05 1298.58,1210.05 1299.17,1210.05 1299.76,1210.05 1300.34,1210.05 1300.93,1210.05 1301.52,1210.05 1302.1,1210.05 1302.69,1210.05 1303.27,1210.05 1303.86,1210.05 1304.45,1210.05 1305.03,1210.05 1305.62,1210.05 1306.21,1210.05 1306.79,1210.05 1307.38,1210.05 1307.97,1210.05 1308.55,1210.05 1309.14,1210.05 1309.73,1210.05 1310.31,1210.05 1310.9,1210.05 1311.48,1210.05 1312.07,1210.05 1312.66,1210.05 1313.24,1210.05 1313.83,1210.05 1314.42,1210.05 1315,1210.05 1315.59,1210.05 1316.18,1210.05 1316.76,1210.05 1317.35,1210.05 1317.93,1210.05 1318.52,1210.05 1319.11,1210.05 1319.69,1210.05 1320.28,1210.05 1320.87,1210.05 1321.45,1210.05 1322.04,1210.05 1322.63,1210.05 1323.21,1210.05 1323.8,1210.05 1324.39,1210.05 1324.97,1210.05 1325.56,1210.05 1326.14,1210.05 1326.73,1210.05 1327.32,1210.05 1327.9,1210.05 1328.49,1210.05 1329.08,1210.05 1329.66,1210.05 1330.25,1210.05 1330.84,1210.05 1331.42,1210.05 1332.01,1210.05 1332.6,1210.05 1333.18,1210.05 1333.77,1210.05 1334.35,1210.05 1334.94,1210.05 1335.53,1210.05 1336.11,1210.05 1336.7,1210.05 1337.29,1210.05 1337.87,1210.05 1338.46,1210.05 1339.05,1210.05 1339.63,1210.05 1340.22,1210.05 1340.8,1210.05 1341.39,1210.05 1341.98,1210.05 1342.56,1210.05 1343.15,1210.05 1343.74,1210.05 1344.32,1210.05 1344.91,1210.05 1345.5,1210.05 1346.08,1210.05 1346.67,1210.05 1347.26,1210.05 1347.84,1210.05 1348.43,1210.05 1349.01,1210.05 1349.6,1210.05 1350.19,1210.05 1350.77,1210.05 1351.36,1210.05 1351.95,1210.05 1352.53,1210.05 1353.12,1210.05 1353.71,1210.05 1354.29,1210.05 1354.88,1210.05 1355.47,1210.05 1356.05,1210.05 1356.64,1210.05 1357.22,1210.05 1357.81,1210.05 1358.4,1210.05 1358.98,1210.05 1359.57,1210.05 1360.16,1210.05 1360.74,1210.05 1361.33,1210.05 1361.92,1210.05 1362.5,1210.05 1363.09,1210.05 1363.68,1210.05 1364.26,1210.05 1364.85,1210.05 1365.43,1210.05 1366.02,1210.05 1366.61,1210.05 1367.19,1210.05 1367.78,1210.05 1368.37,1210.05 1368.95,1210.05 1369.54,1210.05 1370.13,1210.05 1370.71,1210.05 1371.3,1210.05 1371.88,1210.05 1372.47,1210.05 1373.06,1210.05 1373.64,1210.05 1374.23,1210.05 1374.82,1210.05 1375.4,1210.05 1375.99,1210.05 1376.58,1210.05 1377.16,1210.05 1377.75,1210.05 1378.34,1210.05 1378.92,1210.05 1379.51,1210.05 1380.09,1210.05 1380.68,1210.05 1381.27,1210.05 1381.85,1210.05 1382.44,1210.05 1383.03,1210.05 1383.61,1210.05 1384.2,1210.05 1384.79,1210.05 1385.37,1210.05 1385.96,1210.05 1386.55,1210.05 1387.13,1210.05 1387.72,1210.05 1388.3,1210.05 1388.89,1210.05 1389.48,1210.05 1390.06,1210.05 1390.65,1210.05 1391.24,1210.05 1391.82,1210.05 1392.41,1210.05 1393,1210.05 1393.58,1210.05 1394.17,1210.05 1394.75,1210.05 1395.34,1210.05 1395.93,1210.05 1396.51,1210.05 1397.1,1210.05 1397.69,1210.05 1398.27,1210.05 1398.86,1210.05 1399.45,1210.05 1400.03,1210.05 1400.62,1210.05 1401.21,1210.05 1401.79,1210.05 1402.38,1210.05 1402.96,1210.05 1403.55,1210.05 1404.14,1210.05 1404.72,1210.05 1405.31,1210.05 1405.9,1210.05 1406.48,1210.05 1407.07,1210.05 1407.66,1210.05 1408.24,1210.05 1408.83,1210.05 1409.42,1210.05 1410,1210.05 1410.59,1210.05 1411.17,1210.05 1411.76,1210.05 1412.35,1210.05 1412.93,1210.05 1413.52,1210.05 1414.11,1210.05 1414.69,1210.05 1415.28,1210.05 1415.87,1210.05 1416.45,1210.05 1417.04,1210.05 1417.63,1210.05 1418.21,1210.05 1418.8,1210.05 1419.38,1210.05 1419.97,1210.05 1420.56,1210.05 1421.14,1210.05 1421.73,1210.05 1422.32,1210.05 1422.9,1210.05 1423.49,1210.05 1424.08,1210.05 1424.66,1210.05 1425.25,1210.05 1425.83,1210.05 1426.42,1210.05 1427.01,1210.05 1427.59,1210.05 1428.18,1210.05 1428.77,1210.05 1429.35,1210.05 1429.94,1210.05 1430.53,1210.05 1431.11,1210.05 1431.7,1210.05 1432.29,1210.05 1432.87,1210.05 1433.46,1210.05 1434.04,1210.05 1434.63,1210.05 1435.22,1210.05 1435.8,1210.05 1436.39,1210.05 1436.98,1210.05 1437.56,1210.05 1438.15,1210.05 1438.74,1210.05 1439.32,1210.05 1439.91,1210.05 1440.5,1210.05 1441.08,1210.05 1441.67,1210.05 1442.25,1210.05 1442.84,1210.05 1443.43,1210.05 1444.01,1210.05 1444.6,1210.05 1445.19,1210.05 1445.77,1210.05 1446.36,1210.05 1446.95,1210.05 1447.53,1210.05 1448.12,1210.05 1448.7,1210.05 1449.29,1210.05 1449.88,1210.05 1450.46,1210.05 1451.05,1210.05 1451.64,1210.05 1452.22,1210.05 1452.81,1210.05 1453.4,1210.05 1453.98,1210.05 1454.57,1210.05 1455.16,1210.05 1455.74,1210.05 1456.33,1210.05 1456.91,1210.05 1457.5,1210.05 1458.09,1210.05 1458.67,1210.05 1459.26,1210.05 1459.85,1210.05 1460.43,1210.05 1461.02,1210.05 1461.61,1210.05 1462.19,1210.05 1462.78,1210.05 1463.37,1210.05 1463.95,1210.05 1464.54,1210.05 1465.12,1210.05 1465.71,1210.05 1466.3,1210.05 1466.88,1210.05 1467.47,1210.05 1468.06,1210.05 1468.64,1210.05 1469.23,1210.05 1469.82,1210.05 1470.4,1210.05 1470.99,1210.05 1471.57,1210.05 1472.16,1210.05 1472.75,1210.05 1473.33,1210.05 1473.92,1210.05 1474.51,1210.05 1475.09,1210.05 1475.68,1210.05 1476.27,1210.05 1476.85,1210.05 1477.44,1210.05 1478.03,1210.05 1478.61,1210.05 1479.2,1210.05 1479.78,1210.05 1480.37,1210.05 1480.96,1210.05 1481.54,1210.05 1482.13,1210.05 1482.72,1210.05 1483.3,1210.05 1483.89,1210.05 1484.48,1210.05 1485.06,1210.05 1485.65,1210.05 1486.24,1210.05 1486.82,1210.05 1487.41,1210.05 1487.99,1210.05 1488.58,1210.05 1489.17,1210.05 1489.75,1210.05 1490.34,1210.05 1490.93,1210.05 1491.51,1210.05 1492.1,1210.05 1492.69,1210.05 1493.27,1210.05 1493.86,1210.05 1494.45,1210.05 1495.03,1210.05 1495.62,1210.05 1496.2,1210.05 1496.79,1210.05 1497.38,1210.05 1497.96,1210.05 1498.55,1210.05 1499.14,1210.05 1499.72,1210.05 1500.31,1210.05 1500.9,1210.05 1501.48,1210.05 1502.07,1210.05 1502.65,1210.05 1503.24,1210.05 1503.83,1210.05 1504.41,1210.05 1505,1210.05 1505.59,1210.05 1506.17,1210.05 1506.76,1210.05 1507.35,1210.05 1507.93,1210.05 1508.52,1210.05 1509.11,1210.05 1509.69,1210.05 1510.28,1210.05 1510.86,1210.05 1511.45,1210.05 1512.04,1210.05 1512.62,1210.05 1513.21,1210.05 1513.8,1210.05 1514.38,1210.05 1514.97,1210.05 1515.56,1210.05 1516.14,1210.05 1516.73,1210.05 1517.32,1210.05 1517.9,1210.05 1518.49,1210.05 1519.07,1210.05 1519.66,1210.05 1520.25,1210.05 1520.83,1210.05 1521.42,1210.05 1522.01,1210.05 1522.59,1210.05 1523.18,1210.05 1523.77,1210.05 1524.35,1210.05 1524.94,1210.05 1525.52,1210.05 1526.11,1210.05 1526.7,1210.05 1527.28,1210.05 1527.87,1210.05 1528.46,1210.05 1529.04,1210.05 1529.63,1210.05 1530.22,1210.05 1530.8,1210.05 1531.39,1210.05 1531.98,1210.05 1532.56,1210.05 1533.15,1210.05 1533.73,1210.05 1534.32,1210.05 1534.91,1210.05 1535.49,1210.05 1536.08,1210.05 1536.67,1210.05 1537.25,1210.05 1537.84,1210.05 1538.43,1210.05 1539.01,1210.05 1539.6,1210.05 1540.19,1210.05 1540.77,1210.05 1541.36,1210.05 1541.94,1210.05 1542.53,1210.05 1543.12,1210.05 1543.7,1210.05 1544.29,1210.05 1544.88,1210.05 1545.46,1210.05 1546.05,1210.05 1546.64,1210.05 1547.22,1210.05 1547.81,1210.05 1548.4,1210.05 1548.98,1210.05 1549.57,1210.05 1550.15,1210.05 1550.74,1210.05 1551.33,1210.05 1551.91,1210.05 1552.5,1210.05 1553.09,1210.05 1553.67,1210.05 1554.26,1210.05 1554.85,1210.05 1555.43,1210.05 1556.02,1210.05 1556.6,1210.05 1557.19,1210.05 1557.78,1210.05 1558.36,1210.05 1558.95,1210.05 1559.54,1210.05 1560.12,1210.05 1560.71,1210.05 1561.3,1210.05 1561.88,1210.05 1562.47,1210.05 1563.06,1210.05 1563.64,1210.05 1564.23,1210.05 1564.81,1210.05 1565.4,1210.05 1565.99,1210.05 1566.57,1210.05 1567.16,1210.05 1567.75,1210.05 1568.33,1210.05 1568.92,1210.05 1569.51,1210.05 1570.09,1210.05 1570.68,1210.05 1571.27,1210.05 1571.85,1210.05 1572.44,1210.05 1573.02,1210.05 1573.61,1210.05 1574.2,1210.05 1574.78,1210.05 1575.37,1210.05 1575.96,1210.05 1576.54,1210.05 1577.13,1210.05 1577.72,1210.05 1578.3,1210.05 1578.89,1210.05 1579.47,1210.05 1580.06,1210.05 1580.65,1210.05 1581.23,1210.05 1581.82,1210.05 1582.41,1210.05 1582.99,1210.05 1583.58,1210.05 1584.17,1210.05 1584.75,1210.05 1585.34,1210.05 1585.93,1210.05 1586.51,1210.05 1587.1,1210.05 1587.68,1210.05 1588.27,1210.05 1588.86,1210.05 1589.44,1210.05 1590.03,1210.05 1590.62,1210.05 1591.2,1210.05 1591.79,1210.05 1592.38,1210.05 1592.96,1210.05 1593.55,1210.05 1594.14,1210.05 1594.72,1210.05 1595.31,1210.05 1595.89,1210.05 1596.48,1210.05 1597.07,1210.05 1597.65,1210.05 1598.24,1210.05 1598.83,1210.05 1599.41,1210.05 1600,1210.05 1600.59,1210.05 1601.17,1210.05 1601.76,1210.05 1602.34,1210.05 1602.93,1210.05 1603.52,1210.05 1604.1,1210.05 1604.69,1210.05 1605.28,1210.05 1605.86,1210.05 1606.45,1210.05 1607.04,1210.05 1607.62,1210.05 1608.21,1210.05 1608.8,1210.05 1609.38,1210.05 1609.97,1210.05 1610.55,1210.05 1611.14,1210.05 1611.73,1210.05 1612.31,1210.05 1612.9,1210.05 1613.49,1210.05 1614.07,1210.05 1614.66,1210.05 1615.25,1210.05 1615.83,1210.05 1616.42,1210.05 1617.01,1210.05 1617.59,1210.05 1618.18,1210.05 1618.76,1210.05 1619.35,1210.05 1619.94,1210.05 1620.52,1210.05 1621.11,1210.05 1621.7,1210.05 1622.28,1210.05 1622.87,1210.05 1623.46,1210.05 1624.04,1210.05 1624.63,1210.05 1625.22,1210.05 1625.8,1210.05 1626.39,1210.05 1626.97,1210.05 1627.56,1210.05 1628.15,1210.05 1628.73,1210.05 1629.32,1210.05 1629.91,1210.05 1630.49,1210.05 1631.08,1210.05 1631.67,1210.05 1632.25,1210.05 1632.84,1210.05 1633.42,1210.05 1634.01,1210.05 1634.6,1210.05 1635.18,1210.05 1635.77,1210.05 1636.36,1210.05 1636.94,1210.05 1637.53,1210.05 1638.12,1210.05 1638.7,1210.05 1639.29,1210.05 1639.88,1210.05 1640.46,1210.05 1641.05,1210.05 1641.63,1210.05 1642.22,1210.05 1642.81,1210.05 1643.39,1210.05 1643.98,1210.05 1644.57,1210.05 1645.15,1210.05 1645.74,1210.05 1646.33,1210.05 1646.91,1210.05 1647.5,1210.05 1648.09,1210.05 1648.67,1210.05 1649.26,1210.05 1649.84,1210.05 1650.43,1210.05 1651.02,1210.05 1651.6,1210.05 1652.19,1210.05 1652.78,1210.05 1653.36,1210.05 1653.95,1210.05 1654.54,1210.05 1655.12,1210.05 1655.71,1210.05 1656.29,1210.05 1656.88,1210.05 1657.47,1210.05 1658.05,1210.05 1658.64,1210.05 1659.23,1210.05 1659.81,1210.05 1660.4,1210.05 1660.99,1210.05 1661.57,1210.05 1662.16,1210.05 1662.75,1210.05 1663.33,1210.05 1663.92,1210.05 1664.5,1210.05 1665.09,1210.05 1665.68,1210.05 1666.26,1210.05 1666.85,1210.05 1667.44,1210.05 1668.02,1210.05 1668.61,1210.05 1669.2,1210.05 1669.78,1210.05 1670.37,1210.05 1670.96,1210.05 1671.54,1210.05 1672.13,1210.05 1672.71,1210.05 1673.3,1210.05 1673.89,1210.05 1674.47,1210.05 1675.06,1210.05 1675.65,1210.05 1676.23,1210.05 1676.82,1210.05 1677.41,1210.05 1677.99,1210.05 1678.58,1210.05 1679.17,1210.05 1679.75,1210.05 1680.34,1210.05 1680.92,1210.05 1681.51,1210.05 1682.1,1210.05 1682.68,1210.05 1683.27,1210.05 1683.86,1210.05 1684.44,1210.05 1685.03,1210.05 1685.62,1210.05 1686.2,1210.05 1686.79,1210.05 1687.37,1210.05 1687.96,1210.05 1688.55,1210.05 1689.13,1210.05 1689.72,1210.05 1690.31,1210.05 1690.89,1210.05 1691.48,1210.05 1692.07,1210.05 1692.65,1210.05 1693.24,1210.05 1693.83,1210.05 1694.41,1210.05 1695,1210.05 1695.58,1210.05 1696.17,1210.05 1696.76,1210.05 1697.34,1210.05 1697.93,1210.05 1698.52,1210.05 1699.1,1210.05 1699.69,1210.05 1700.28,1210.05 1700.86,1210.05 1701.45,1210.05 1702.04,1210.05 1702.62,1210.05 1703.21,1210.05 1703.79,1210.05 1704.38,1210.05 1704.97,1210.05 1705.55,1210.05 1706.14,1210.05 1706.73,1210.05 1707.31,1210.05 1707.9,1210.05 1708.49,1210.05 1709.07,1210.05 1709.66,1210.05 1710.24,1210.05 1710.83,1210.05 1711.42,1210.05 1712,1210.05 1712.59,1210.05 1713.18,1210.05 1713.76,1210.05 1714.35,1210.05 1714.94,1210.05 1715.52,1210.05 1716.11,1210.05 1716.7,1210.05 1717.28,1210.05 1717.87,1210.05 1718.45,1210.05 1719.04,1210.05 1719.63,1210.05 1720.21,1210.05 1720.8,1210.05 1721.39,1210.05 1721.97,1210.05 1722.56,1210.05 1723.15,1210.05 1723.73,1210.05 1724.32,1210.05 1724.91,1210.05 1725.49,1210.05 1726.08,1210.05 1726.66,1210.05 1727.25,1210.05 1727.84,1210.05 1728.42,1210.05 1729.01,1210.05 1729.6,1210.05 1730.18,1210.05 1730.77,1210.05 1731.36,1210.05 1731.94,1210.05 1732.53,1210.05 1733.11,1210.05 1733.7,1210.05 1734.29,1210.05 1734.87,1210.05 1735.46,1210.05 1736.05,1210.05 1736.63,1210.05 1737.22,1210.05 1737.81,1210.05 1738.39,1210.05 1738.98,1210.05 1739.57,1210.05 1740.15,1210.05 1740.74,1210.05 1741.32,1210.05 1741.91,1210.05 1742.5,1210.05 1743.08,1210.05 1743.67,1210.05 1744.26,1210.05 1744.84,1210.05 1745.43,1210.05 1746.02,1210.05 1746.6,1210.05 1747.19,1210.05 1747.78,1210.05 1748.36,1210.05 1748.95,1210.05 1749.53,1210.05 1750.12,1210.05 1750.71,1210.05 1751.29,1210.05 1751.88,1210.05 1752.47,1210.05 1753.05,1210.05 1753.64,1210.05 1754.23,1210.05 1754.81,1210.05 1755.4,1210.05 1755.99,1210.05 1756.57,1210.05 1757.16,1210.05 1757.74,1210.05 1758.33,1210.05 1758.92,1210.05 1759.5,1210.05 1760.09,1210.05 1760.68,1210.05 1761.26,1210.05 1761.85,1210.05 1762.44,1210.05 1763.02,1210.05 1763.61,1210.05 1764.19,1210.05 1764.78,1210.05 1765.37,1210.05 1765.95,1210.05 1766.54,1210.05 1767.13,1210.05 1767.71,1210.05 1768.3,1210.05 1768.89,1210.05 1769.47,1210.05 1770.06,1210.05 1770.65,1210.05 1771.23,1210.05 1771.82,1210.05 1772.4,1210.05 1772.99,1210.05 1773.58,1210.05 1774.16,1210.05 1774.75,1210.05 1775.34,1210.05 1775.92,1210.05 1776.51,1210.05 1777.1,1210.05 1777.68,1210.05 1778.27,1210.05 1778.86,1210.05 1779.44,1210.05 1780.03,1210.05 1780.61,1210.05 1781.2,1210.05 1781.79,1210.05 1782.37,1210.05 1782.96,1210.05 1783.55,1210.05 1784.13,1210.05 1784.72,1210.05 1785.31,1210.05 1785.89,1210.05 1786.48,1210.05 1787.06,1210.05 1787.65,1210.05 1788.24,1210.05 1788.82,1210.05 1789.41,1210.05 1790,1210.05 1790.58,1210.05 1791.17,1210.05 1791.76,1210.05 1792.34,1210.05 1792.93,1210.05 1793.52,1210.05 1794.1,1210.05 1794.69,1210.05 1795.27,1210.05 1795.86,1210.05 1796.45,1210.05 1797.03,1210.05 1797.62,1210.05 1798.21,1210.05 1798.79,1210.05 1799.38,1210.05 1799.97,1210.05 1800.55,1210.05 1801.14,1210.05 1801.73,1210.05 1802.31,1210.05 1802.9,1210.05 1803.48,1210.05 1804.07,1210.05 1804.66,1210.05 1805.24,1210.05 1805.83,1210.05 1806.42,1210.05 1807,1210.05 1807.59,1210.05 1808.18,1210.05 1808.76,1210.05 1809.35,1210.05 1809.94,1210.05 1810.52,1210.05 1811.11,1210.05 1811.69,1210.05 1812.28,1210.05 1812.87,1210.05 1813.45,1210.05 1814.04,1210.05 1814.63,1210.05 1815.21,1210.05 1815.8,1210.05 1816.39,1210.05 1816.97,1210.05 1817.56,1210.05 1818.14,1210.05 1818.73,1210.05 1819.32,1210.05 1819.9,1210.05 1820.49,1210.05 1821.08,1210.05 1821.66,1210.05 1822.25,1210.05 1822.84,1210.05 1823.42,1210.05 1824.01,1210.05 1824.6,1210.05 1825.18,1210.05 1825.77,1210.05 1826.35,1210.05 1826.94,1210.05 1827.53,1210.05 1828.11,1210.05 1828.7,1210.05 1829.29,1210.05 1829.87,1210.05 1830.46,1210.05 1831.05,1210.05 1831.63,1210.05 1832.22,1210.05 1832.81,1210.05 1833.39,1210.05 1833.98,1210.05 1834.56,1210.05 1835.15,1210.05 1835.74,1210.05 1836.32,1210.05 1836.91,1210.05 1837.5,1210.05 1838.08,1210.05 1838.67,1210.05 1839.26,1210.05 1839.84,1210.05 1840.43,1210.05 1841.01,1210.05 1841.6,1210.05 1842.19,1210.05 1842.77,1210.05 1843.36,1210.05 1843.95,1210.05 1844.53,1210.05 1845.12,1210.05 1845.71,1210.05 1846.29,1210.05 1846.88,1210.05 1847.47,1210.05 1848.05,1210.05 1848.64,1210.05 1849.22,1210.05 1849.81,1210.05 1850.4,1210.05 1850.98,1210.05 1851.57,1210.05 1852.16,1210.05 1852.74,1210.05 1853.33,1210.05 1853.92,1210.05 1854.5,1210.05 1855.09,1210.05 1855.68,1210.05 1856.26,1210.05 1856.85,1210.05 1857.43,1210.05 1858.02,1210.05 1858.61,1210.05 1859.19,1210.05 1859.78,1210.05 1860.37,1210.05 1860.95,1210.05 1861.54,1210.05 1862.13,1210.05 1862.71,1210.05 1863.3,1210.05 1863.88,1210.05 1864.47,1210.05 1865.06,1210.05 1865.64,1210.05 1866.23,1210.05 1866.82,1210.05 1867.4,1210.05 1867.99,1210.05 1868.58,1210.05 1869.16,1210.05 1869.75,1210.05 1870.34,1210.05 1870.92,1210.05 1871.51,1210.05 1872.09,1210.05 1872.68,1210.05 1873.27,1210.05 1873.85,1210.05 1874.44,1210.05 1875.03,1210.05 1875.61,1210.05 1876.2,1210.05 1876.79,1210.05 1877.37,1210.05 1877.96,1210.05 1878.55,1210.05 1879.13,1210.05 1879.72,1210.05 1880.3,1210.05 1880.89,1210.05 1881.48,1210.05 1882.06,1210.05 1882.65,1210.05 1883.24,1210.05 1883.82,1210.05 1884.41,1210.05 1885,1210.05 1885.58,1210.05 1886.17,1210.05 1886.76,1210.05 1887.34,1210.05 1887.93,1210.05 1888.51,1210.05 1889.1,1210.05 1889.69,1210.05 1890.27,1210.05 1890.86,1210.05 1891.45,1210.05 1892.03,1210.05 1892.62,1210.05 1893.21,1210.05 1893.79,1210.05 1894.38,1210.05 1894.96,1210.05 1895.55,1210.05 1896.14,1210.05 1896.72,1210.05 1897.31,1210.05 1897.9,1210.05 1898.48,1210.05 1899.07,1210.05 1899.66,1210.05 1900.24,1210.05 1900.83,1210.05 1901.42,1210.05 1902,1210.05 1902.59,1210.05 1903.17,1210.05 1903.76,1210.05 1904.35,1210.05 1904.93,1210.05 1905.52,1210.05 1906.11,1210.05 1906.69,1210.05 1907.28,1210.05 1907.87,1210.05 1908.45,1210.05 1909.04,1210.05 1909.63,1210.05 1910.21,1210.05 1910.8,1210.05 1911.38,1210.05 1911.97,1210.05 1912.56,1210.05 1913.14,1210.05 1913.73,1210.05 1914.32,1210.05 1914.9,1210.05 1915.49,1210.05 1916.08,1210.05 1916.66,1210.05 1917.25,1210.05 1917.83,1210.05 1918.42,1210.05 1919.01,1210.05 1919.59,1210.05 1920.18,1210.05 1920.77,1210.05 1921.35,1210.05 1921.94,1210.05 1922.53,1210.05 1923.11,1210.05 1923.7,1210.05 1924.29,1210.05 1924.87,1210.05 1925.46,1210.05 1926.04,1210.05 1926.63,1210.05 1927.22,1210.05 1927.8,1210.05 1928.39,1210.05 1928.98,1210.05 1929.56,1210.05 1930.15,1210.05 1930.74,1210.05 1931.32,1210.05 1931.91,1210.05 1932.5,1210.05 1933.08,1210.05 1933.67,1210.05 1934.25,1210.05 1934.84,1210.05 1935.43,1210.05 1936.01,1210.05 1936.6,1210.05 1937.19,1210.05 1937.77,1210.05 1938.36,1210.05 1938.95,1210.05 1939.53,1210.05 1940.12,1210.05 1940.71,1210.05 1941.29,1210.05 1941.88,1210.05 1942.46,1210.05 1943.05,1210.05 1943.64,1210.05 1944.22,1210.05 1944.81,1210.05 1945.4,1210.05 1945.98,1210.05 1946.57,1210.05 1947.16,1210.05 1947.74,1210.05 1948.33,1210.05 1948.91,1210.05 1949.5,1210.05 1950.09,1210.05 1950.67,1210.05 1951.26,1210.05 1951.85,1210.05 1952.43,1210.05 1953.02,1210.05 1953.61,1210.05 1954.19,1210.05 1954.78,1210.05 1955.37,1210.05 1955.95,1210.05 1956.54,1210.05 1957.12,1210.05 1957.71,1210.05 1958.3,1210.05 1958.88,1210.05 1959.47,1210.05 1960.06,1210.05 1960.64,1210.05 1961.23,1210.05 1961.82,1210.05 1962.4,1210.05 1962.99,1210.05 1963.58,1210.05 1964.16,1210.05 1964.75,1210.05 1965.33,1210.05 1965.92,1210.05 1966.51,1210.05 1967.09,1210.05 1967.68,1210.05 1968.27,1210.05 1968.85,1210.05 1969.44,1210.05 1970.03,1210.05 1970.61,1210.05 1971.2,1210.05 1971.78,1210.05 1972.37,1210.05 1972.96,1210.05 1973.54,1210.05 1974.13,1210.05 1974.72,1210.05 1975.3,1210.05 1975.89,1210.05 1976.48,1210.05 1977.06,1210.05 1977.65,1210.05 1978.24,1210.05 1978.82,1210.05 1979.41,1210.05 1979.99,1210.05 1980.58,1210.05 1981.17,1210.05 1981.75,1210.05 1982.34,1210.05 1982.93,1210.05 1983.51,1210.05 1984.1,1210.05 1984.69,1210.05 1985.27,1210.05 1985.86,1210.05 1986.45,1210.05 1987.03,1210.05 1987.62,1210.05 1988.2,1210.05 1988.79,1210.05 1989.38,1210.05 1989.96,1210.05 1990.55,1210.05 1991.14,1210.05 1991.72,1210.05 1992.31,1210.05 1992.9,1210.05 1993.48,1210.05 1994.07,1210.05 1994.65,1210.05 1995.24,1210.05 1995.83,1210.05 1996.41,1210.05 1997,1210.05 1997.59,1210.05 1998.17,1210.05 1998.76,1210.05 1999.35,1210.05 1999.93,1210.05 2000.52,1210.05 2001.11,1210.05 2001.69,1210.05 2002.28,1210.05 2002.86,1210.05 2003.45,1210.05 2004.04,1210.05 2004.62,1210.05 2005.21,1210.05 2005.8,1210.05 2006.38,1210.05 2006.97,1210.05 2007.56,1210.05 2008.14,1210.05 2008.73,1210.05 2009.32,1210.05 2009.9,1210.05 2010.49,1210.05 2011.07,1210.05 2011.66,1210.05 2012.25,1210.05 2012.83,1210.05 2013.42,1210.05 2014.01,1210.05 2014.59,1210.05 2015.18,1210.05 2015.77,1210.05 2016.35,1210.05 2016.94,1210.05 2017.53,1210.05 2018.11,1210.05 2018.7,1210.05 2019.28,1210.05 2019.87,1210.05 2020.46,1210.05 2021.04,1210.05 2021.63,1210.05 2022.22,1210.05 2022.8,1210.05 2023.39,1210.05 2023.98,1210.05 2024.56,1210.05 2025.15,1210.05 2025.73,1210.05 2026.32,1210.05 2026.91,1210.05 2027.49,1210.05 2028.08,1210.05 2028.67,1210.05 2029.25,1210.05 2029.84,1210.05 2030.43,1210.05 2031.01,1210.05 2031.6,1210.05 2032.19,1210.05 2032.77,1210.05 2033.36,1210.05 2033.94,1210.05 2034.53,1210.05 2035.12,1210.05 2035.7,1210.05 2036.29,1210.05 2036.88,1210.05 2037.46,1210.05 2038.05,1210.05 2038.64,1210.05 2039.22,1210.05 2039.81,1210.05 2040.4,1210.05 2040.98,1210.05 2041.57,1210.05 2042.15,1210.05 2042.74,1210.05 2043.33,1210.05 2043.91,1210.05 2044.5,1210.05 2045.09,1210.05 2045.67,1210.05 2046.26,1210.05 2046.85,1210.05 2047.43,1210.05 2048.02,1210.05 2048.6,1210.05 2049.19,1210.05 2049.78,1210.05 2050.36,1210.05 2050.95,1210.05 2051.54,1210.05 2052.12,1210.05 2052.71,1210.05 2053.3,1210.05 2053.88,1210.05 2054.47,1210.05 2055.06,1210.05 2055.64,1210.05 2056.23,1210.05 2056.81,1210.05 2057.4,1210.05 2057.99,1210.05 2058.57,1210.05 2059.16,1210.05 2059.75,1210.05 2060.33,1210.05 2060.92,1210.05 2061.51,1210.05 2062.09,1210.05 2062.68,1210.05 2063.27,1210.05 2063.85,1210.05 2064.44,1210.05 2065.02,1210.05 2065.61,1210.05 2066.2,1210.05 2066.78,1210.05 2067.37,1210.05 2067.96,1210.05 2068.54,1210.05 2069.13,1210.05 2069.72,1210.05 2070.3,1210.05 2070.89,1210.05 2071.48,1210.05 2072.06,1210.05 2072.65,1210.05 2073.23,1210.05 2073.82,1210.05 2074.41,1210.05 2074.99,1210.05 2075.58,1210.05 2076.17,1210.05 2076.75,1210.05 2077.34,1210.05 2077.93,1210.05 2078.51,1210.05 2079.1,1210.05 2079.68,1210.05 2080.27,1210.05 2080.86,1210.05 2081.44,1210.05 2082.03,1210.05 2082.62,1210.05 2083.2,1210.05 2083.79,1210.05 2084.38,1210.05 2084.96,1210.05 2085.55,1210.05 2086.14,1210.05 2086.72,1210.05 2087.31,1210.05 2087.89,1210.05 2088.48,1210.05 2089.07,1210.05 2089.65,1210.05 2090.24,1210.05 2090.83,1210.05 2091.41,1210.05 2092,1210.05 2092.59,1210.05 2093.17,1210.05 2093.76,1210.05 2094.35,1210.05 2094.93,1210.05 2095.52,1210.05 2096.1,1210.05 2096.69,1210.05 2097.28,1210.05 2097.86,1210.05 2098.45,1210.05 2099.04,1210.05 2099.62,1210.05 2100.21,1210.05 2100.8,1210.05 2101.38,1210.05 2101.97,1210.05 2102.55,1210.05 2103.14,1210.05 2103.73,1210.05 2104.31,1210.05 2104.9,1210.05 2105.49,1210.05 2106.07,1210.05 2106.66,1210.05 2107.25,1210.05 2107.83,1210.05 2108.42,1210.05 2109.01,1210.05 2109.59,1210.05 2110.18,1210.05 2110.76,1210.05 2111.35,1210.05 2111.94,1210.05 2112.52,1210.05 2113.11,1210.05 2113.7,1210.05 2114.28,1210.05 2114.87,1210.05 2115.46,1210.05 2116.04,1210.05 2116.63,1210.05 2117.22,1210.05 2117.8,1210.05 2118.39,1210.05 2118.97,1210.05 2119.56,1210.05 2120.15,1210.05 2120.73,1210.05 2121.32,1210.05 2121.91,1210.05 2122.49,1210.05 2123.08,1210.05 2123.67,1210.05 2124.25,1210.05 2124.84,1210.05 2125.42,1210.05 2126.01,1210.05 2126.6,1210.05 2127.18,1210.05 2127.77,1210.05 2128.36,1210.05 2128.94,1210.05 2129.53,1210.05 2130.12,1210.05 2130.7,1210.05 2131.29,1210.05 2131.88,1210.05 2132.46,1210.05 2133.05,1210.05 2133.63,1210.05 2134.22,1210.05 2134.81,1210.05 2135.39,1210.05 2135.98,1210.05 2136.57,1210.05 2137.15,1210.05 2137.74,1210.05 2138.33,1210.05 2138.91,1210.05 2139.5,1210.05 2140.09,1210.05 2140.67,1210.05 2141.26,1210.05 2141.84,1210.05 2142.43,1210.05 2143.02,1210.05 2143.6,1210.05 2144.19,1210.05 2144.78,1210.05 2145.36,1210.05 2145.95,1210.05 2146.54,1210.05 2147.12,1210.05 2147.71,1210.05 2148.3,1210.05 2148.88,1210.05 2149.47,1210.05 2150.05,1210.05 2150.64,1210.05 2151.23,1210.05 2151.81,1210.05 2152.4,1210.05 2152.99,1210.05 2153.57,1210.05 2154.16,1210.05 2154.75,1210.05 2155.33,1210.05 2155.92,1210.05 2156.5,1210.05 2157.09,1210.05 2157.68,1210.05 2158.26,1210.05 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.56,1191.14 1399.89,899.083 \"/>\n<polyline clip-path=\"url(#clip002)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.33 985.439,1191.14 2158.26,1191.14 2158.26,1228.33 985.439,1228.33 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip003\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip000)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip000)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip000)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip003)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-2481.81 163.232,-3678.7 163.792,-4775.54 164.351,-5801.44 164.91,-6698.49 165.469,-7494.41 166.029,-8176.84 166.588,-8856.55 167.147,-9470.2 167.706,-10022.1 168.266,-10516.2 168.825,-10096.3 169.384,-9747.27 169.943,-10160.7 170.503,-10526.6 171.062,-10211.2 171.621,-10525.7 172.18,-10801.6 172.74,-10524.4 173.299,-10742.4 173.858,-10950.3 174.417,-10670.7 174.977,-10430.9 175.536,-10566.9 176.095,-10677.3 176.655,-10767.9 177.214,-10829.2 177.773,-10867.9 178.332,-10612.8 178.892,-10627.3 179.451,-10604 180.01,-10331.1 180.569,-10071 181.129,-10029.8 181.688,-9790.92 182.247,-9749.23 182.806,-9695.57 183.366,-9623.46 183.925,-9386.76 184.484,-9014.45 185.043,-8935.37 185.603,-8843.08 186.162,-8762.34 186.721,-8426.77 187.28,-8303.52 187.84,-8075.56 188.399,-7842.96 188.958,-7719.04 189.517,-7584.55 190.077,-7365.5 190.636,-6978.77 191.195,-6690.54 191.754,-6491.67 192.314,-6300.96 192.873,-5966.2 193.432,-5797.82 193.991,-5628.87 194.551,-5458.28 195.11,-5235.93 195.669,-4914.53 196.228,-4645.23 196.788,-4548.74 197.347,-4194.79 197.906,-4017.12 198.465,-3896.05 199.025,-3728.23 199.584,-3524.47 200.143,-3498.56 200.702,-3381.51 201.262,-3274.94 201.821,-3166.58 202.38,-3018.26 202.939,-2946.5 203.499,-2883.57 204.058,-2813.75 204.617,-2673.24 205.176,-2431.58 205.736,-2373.19 206.295,-2281.91 206.854,-2192.34 207.413,-2069.45 207.973,-2012.99 208.532,-1895.41 209.091,-1780.4 209.65,-1698.28 210.21,-1592.73 210.769,-1547.39 211.328,-1444.8 211.887,-1344.36 212.447,-1276.74 213.006,-1206.54 213.565,-1115.07 214.124,-1022.37 214.684,-931.853 215.243,-843.61 215.802,-812.341 216.361,-779.922 216.921,-694.573 217.48,-642.592 218.039,-585.079 218.598,-463.038 219.158,-443.717 219.717,-421.362 220.276,-394.094 220.835,-321.412 221.395,-271.488 221.954,-248.762 222.513,-222.122 223.072,-180.591 223.632,-139.468 224.191,-139.782 224.75,-92.8456 225.309,-68.1477 225.869,-27.8281 226.428,19.3426 226.987,60.454 227.546,77.9977 228.106,115.378 228.665,190.719 229.224,224.326 229.783,280.19 230.343,315.363 230.902,365.937 231.461,413.394 232.02,461.447 232.58,466.888 233.139,528.215 233.698,591.191 234.257,594.911 234.817,574.78 235.376,616.078 235.935,636.569 236.494,656.181 237.054,735.318 237.613,749.314 238.172,746.747 238.731,760.883 239.291,760.23 239.85,758.97 240.409,758.006 240.968,773.169 241.528,788.402 242.087,805.237 242.646,821.519 243.205,835.761 243.765,886.467 244.324,881.97 244.883,876.761 245.442,912.846 246.002,893.012 246.561,923.752 247.12,918.742 247.679,911.575 248.239,940.923 248.798,974.067 249.357,948.221 249.916,944.906 250.476,907.026 251.035,920.748 251.594,972.351 252.153,968.654 252.713,958.926 253.272,970.709 253.831,950.523 254.39,948.878 254.95,942.177 255.509,974.251 256.068,1003.74 256.627,1000.15 257.187,1008.05 257.746,1003.43 258.305,1034.33 258.864,1027.57 259.424,1037.18 259.983,1046.57 260.542,1057.18 261.101,1062.78 261.661,1055.35 262.22,1079.36 262.779,1068.68 263.338,1059.57 263.898,1052.26 264.457,1077.86 265.016,1099.71 265.575,1092.38 266.135,1053.06 266.694,1059.88 267.253,1070.26 267.812,1030.89 268.372,1045.07 268.931,1039.89 269.49,1016.86 270.049,1013.01 270.609,1007.88 271.168,1022.33 271.727,1018.6 272.286,1027.87 272.846,1040.05 273.405,1068.34 273.964,1043.64 274.523,1022.61 275.083,1016.4 275.642,1031.37 276.201,1058.03 276.76,1051.34 277.32,1077.01 277.879,1071.22 278.438,1080.14 278.997,1105.32 279.557,1113.33 280.116,1117.31 280.675,1087.39 281.234,1113.48 281.794,1103.09 282.353,1061.19 282.912,1071.89 283.471,1012.93 284.031,1025.22 284.59,1020.84 285.149,1000.71 285.708,995.058 286.268,975.177 286.827,991.599 287.386,1022.16 287.945,1055.23 288.505,1047.54 289.064,1056.76 289.623,1033.46 290.182,1014.84 290.742,1022.35 291.301,1067.69 291.86,1042.32 292.419,1036.23 292.979,1031.57 293.538,1028.23 294.097,1022.31 294.656,1015.4 295.216,1047.52 295.775,1120.08 296.334,1107.38 296.893,1094.35 297.453,1085.04 298.012,1091.32 298.571,1079.95 299.13,1069.03 299.69,1065.18 300.249,1043.36 300.808,1072.66 301.368,1050.67 301.927,1061.31 302.486,1086.86 303.045,1109.77 303.605,1132.24 304.164,1136.28 304.723,1124.67 305.282,1113.6 305.842,1137.7 306.401,1159.92 306.96,1114.38 307.519,1106.55 308.079,1080.86 308.638,1084.76 309.197,1042.61 309.756,1017.14 310.316,1039.86 310.875,1034.83 311.434,1026.44 311.993,1049.77 312.553,1090.12 313.112,1078.75 313.671,1067.86 314.23,1041.91 314.79,1031.65 315.349,1023.61 315.908,997.61 316.467,977.635 317.027,972.27 317.586,966.08 318.145,959.647 318.704,972.064 319.264,951.509 319.823,951.022 320.382,931.041 320.941,931.208 321.501,926.026 322.06,907.348 322.619,905.363 323.178,951.704 323.738,946.548 324.297,911.134 324.856,940.815 325.415,905.435 325.975,905.157 326.534,936.998 327.093,947.989 327.652,914.923 328.212,898.57 328.771,893.129 329.33,873.516 329.889,902.252 330.449,897.262 331.008,876.794 331.567,871.95 332.126,869.035 332.686,867.863 333.245,850.773 333.804,853.91 334.363,857.098 334.923,855.769 335.482,872.789 336.041,937.025 336.6,952.056 337.16,979.047 337.719,974.421 338.278,952.948 338.837,959.74 339.397,985.962 339.956,959.572 340.515,971.575 341.074,962.761 341.634,953.362 342.193,881.814 342.752,911.339 343.311,908.152 343.871,922.625 344.43,950.019 344.989,993.837 345.548,1019.73 346.108,1010.27 346.667,967.011 347.226,960.505 347.785,935.659 348.345,960.98 348.904,970.959 349.463,1014.12 350.022,974.138 350.582,966.88 351.141,943.036 351.7,940.911 352.259,921.112 352.819,884.65 353.378,926.879 353.937,856.189 354.496,835.259 355.056,851.051 355.615,861.999 356.174,860.861 356.733,889.765 357.293,890.32 357.852,870.431 358.411,884.341 358.97,879.499 359.53,877.699 360.089,907.796 360.648,940.073 361.207,929.38 361.767,923.063 362.326,900.318 362.885,910.328 363.444,870.466 364.004,853.087 364.563,848.134 365.122,846.68 365.681,862.28 366.241,889.964 366.8,885.604 367.359,864.256 367.918,810.199 368.478,808.869 369.037,788.949 369.596,790.665 370.155,741.732 370.715,743.826 371.274,729.723 371.833,733.341 372.392,769.851 372.952,769.933 373.511,754.063 374.07,788.36 374.629,842.068 375.189,839.576 375.748,836.589 376.307,870.361 376.866,834.545 377.426,848.236 377.985,830.076 378.544,860.29 379.103,824.838 379.663,823.816 380.222,842.641 380.781,858.485 381.34,806.518 381.9,870.875 382.459,883.593 383.018,893.11 383.577,873.43 384.137,870.875 384.696,900.906 385.255,925.674 385.814,901.452 386.374,910.358 386.933,922.817 387.492,916.356 388.051,892.73 388.611,903.19 389.17,850.326 389.729,831.552 390.288,813.781 390.848,829.542 391.407,844 391.966,809.359 392.525,805.021 393.085,784.189 393.644,751.951 394.203,753.112 394.762,734.383 395.322,800.841 395.881,783.596 396.44,767.677 396.999,782.707 397.559,815.267 398.118,813.053 398.677,828.794 399.236,824.137 399.796,821.585 400.355,819.745 400.914,755.727 401.473,756.457 402.033,776.335 402.592,793.849 403.151,791.9 403.71,820.871 404.27,801.96 404.829,801.86 405.388,817.89 405.947,815.417 406.507,814.372 407.066,809.291 407.625,807.799 408.184,804.965 408.744,835.195 409.303,847.026 409.862,845.068 410.421,846.931 410.981,895.821 411.54,869.371 412.099,880.657 412.658,877.812 413.218,872.868 413.777,870.027 414.336,885.196 414.895,864.459 415.455,874.843 416.014,855.429 416.573,852.027 417.132,862.447 417.692,890.584 418.251,885.066 418.81,880.594 419.369,862 419.929,828.264 420.488,825.095 421.047,821.542 421.606,804.898 422.166,803.933 422.725,801.592 423.284,737.676 423.843,756.724 424.403,772.867 424.962,740.739 425.521,758.118 426.08,758.692 426.64,741.855 427.199,728.262 427.758,761.535 428.318,761.366 428.877,777.756 429.436,761.612 429.995,762.853 430.555,747.113 431.114,765.794 431.673,764.156 432.232,765.203 432.792,781.692 433.351,779.604 433.91,764.691 434.469,791.957 435.029,773.144 435.588,805.278 436.147,801.145 436.706,797.103 437.266,793.587 437.825,806.44 438.384,788.132 438.943,787.008 439.503,768.698 440.062,750.814 440.621,734.2 441.18,750.94 441.74,719.159 442.299,720.244 442.858,773.004 443.417,773.496 443.977,789.812 444.536,771.352 445.095,784.239 445.654,797.433 446.214,811.713 446.773,825.59 447.332,855.982 447.891,866.816 448.451,845.121 449.01,868.368 449.569,862.004 450.128,826.912 450.688,822.661 451.247,820.757 451.806,830.368 452.365,791.084 452.925,787.008 453.484,771.196 454.043,765.98 454.602,779.324 455.162,778.017 455.721,794.5 456.28,806.446 456.839,801.463 457.399,813.399 457.958,809.459 458.517,792.014 459.076,789.192 459.636,803.609 460.195,771.188 460.754,753.398 461.313,754.306 461.873,786.972 462.432,803.919 462.991,768.461 463.55,785.442 464.11,783.832 464.669,781.208 465.228,763.091 465.787,773.482 466.347,721.047 466.906,689.283 467.465,695.823 468.024,715.287 468.584,716.444 469.143,701.474 469.702,738.004 470.261,739.791 470.821,776.371 471.38,758.492 471.939,759.732 472.498,698.352 473.058,669.877 473.617,674.675 474.176,663.316 474.735,668.125 475.295,669.805 475.854,705.439 476.413,690.915 476.972,694.271 477.532,696.434 478.091,716.01 478.65,749.671 479.209,779.837 479.769,780.98 480.328,777.84 480.887,814.586 481.446,813.887 482.006,808.1 482.565,803.401 483.124,799.78 483.683,763.167 484.243,778.763 484.802,789.757 485.361,787.619 485.92,750.025 486.48,746.219 487.039,745.737 487.598,761.934 488.157,742.027 488.717,790.164 489.276,800.961 489.835,814.402 490.394,793.104 490.954,773.572 491.513,758.079 492.072,772.659 492.631,739.598 493.191,740.647 493.75,724.187 494.309,741.053 494.868,741.073 495.428,727.636 495.987,762.109 496.546,729.374 497.105,715.245 497.665,686.194 498.224,720.063 498.783,738.9 499.342,725.293 499.902,713.59 500.461,714.939 501.02,763.894 501.579,764.206 502.139,777.457 502.698,780.198 503.257,761.498 503.816,724.791 504.376,691.947 504.935,659.545 505.494,679.219 506.053,715.024 506.613,719.51 507.172,720.198 507.731,738.264 508.29,706.081 508.85,691.03 509.409,710.224 509.968,727.135 510.527,743.048 511.087,743.567 511.646,823.802 512.205,788.03 512.764,769.361 513.324,750.744 513.883,748.696 514.442,732.642 515.001,746.986 515.561,733.459 516.12,718.499 516.679,720.38 517.238,703.639 517.798,739.046 518.357,752.284 518.916,748.639 519.475,734.556 520.035,737.03 520.594,718.412 521.153,736.654 521.712,752.259 522.272,752.277 522.831,718.242 523.39,685.4 523.949,672.206 524.509,677.063 525.068,666.513 525.627,686.952 526.186,708.425 526.746,726.072 527.305,726.415 527.864,726.195 528.423,710.864 528.983,711.774 529.542,711.137 530.101,710.68 530.66,708.947 531.22,689.762 531.779,691.247 532.338,678.032 532.897,662.798 533.457,679.472 534.016,678.67 534.575,710.911 535.134,772.497 535.694,753.819 536.253,734.494 536.812,735.454 537.371,731.772 537.931,732.255 538.49,747.269 539.049,763.911 539.608,757.329 540.168,738.966 540.727,704.847 541.286,708.709 541.845,697.561 542.405,731.654 542.964,731.037 543.523,713.747 544.082,716.062 544.642,719.427 545.201,734.098 545.76,747.263 546.319,744.754 546.879,742.681 547.438,757.517 547.997,775.618 548.556,789.225 549.116,768.764 549.675,780.817 550.234,777.286 550.793,773.603 551.353,785.103 551.912,763.65 552.471,777.67 553.031,774.992 553.59,754.315 554.149,771.434 554.708,749.823 555.268,779.064 555.827,791.068 556.386,787.629 556.945,734.968 557.505,738.323 558.064,753.165 558.623,732.911 559.182,733.843 559.742,719.519 560.301,723.87 560.86,772.772 561.419,755.264 561.979,721.471 562.538,719.872 563.097,700.904 563.656,701.289 564.216,686.973 564.775,673.913 565.334,661.593 565.893,667.541 566.453,665.862 567.012,669.572 567.571,657.209 568.13,676.545 568.69,690.52 569.249,691.808 569.808,709.456 570.367,696.595 570.927,713.986 571.486,715.533 572.045,718.498 572.604,767.163 573.164,766.024 573.723,729.52 574.282,728.121 574.841,727.556 575.401,692.498 575.96,711.172 576.519,678.754 577.078,662.138 577.638,684.29 578.197,684.099 578.756,701.537 579.315,730.455 579.875,747.753 580.434,758.698 580.993,738.504 581.552,703.771 582.112,734.054 582.671,746.156 583.23,759.501 583.789,756.67 584.349,773.514 584.908,787.075 585.467,783.668 586.026,795.185 586.586,773.199 587.145,755.352 587.704,738.016 588.263,751.7 588.823,736.14 589.382,767.543 589.941,766.25 590.5,744.766 591.06,694.879 591.619,710.554 592.178,699.649 592.737,702.926 593.297,705.302 593.856,703.283 594.415,689.101 594.974,690.05 595.534,709.144 596.093,710.273 596.652,712.788 597.211,712.501 597.771,680.735 598.33,698.375 598.889,681.996 599.448,682.077 600.008,682.915 600.567,654.203 601.126,652.58 601.685,672.038 602.245,709.565 602.804,742.703 603.363,740.012 603.922,735.811 604.482,751.372 605.041,781.83 605.6,794.688 606.159,786.408 606.719,748.66 607.278,742.725 607.837,770.328 608.396,750.841 608.956,764.283 609.515,760.618 610.074,758.367 610.633,754.243 611.193,787.031 611.752,765.875 612.311,778.992 612.87,809.435 613.43,790.906 613.989,789.271 614.548,818.856 615.107,801.455 615.667,795.882 616.226,789.159 616.785,783.53 617.344,758.679 617.904,802.921 618.463,779.095 619.022,789.742 619.581,784.107 620.141,778.729 620.7,790.012 621.259,815.588 621.818,809.019 622.378,771.845 622.937,752.105 623.496,736.327 624.055,733.28 624.615,750.345 625.174,761.409 625.733,739.22 626.292,733.665 626.852,730.452 627.411,729.2 627.97,713.185 628.529,680.221 629.089,694.387 629.648,695.918 630.207,678.976 630.766,698.431 631.326,728.652 631.885,723.483 632.444,742.102 633.003,723.728 633.563,708.229 634.122,725.693 634.681,738.205 635.24,739.189 635.8,734.62 636.359,703.128 636.918,687.337 637.477,669.252 638.037,653.67 638.596,657.303 639.155,660.246 639.714,645.861 640.274,631.998 640.833,618.154 641.392,639.079 641.951,692.935 642.511,678.435 643.07,679.575 643.629,663.104 644.188,667.258 644.748,622.688 645.307,630.891 645.866,632.378 646.425,634 646.985,654.13 647.544,654.54 648.103,663.63 648.662,683.681 649.222,667.684 649.781,668.578 650.34,637.747 650.899,623.506 651.459,643.373 652.018,627.639 652.577,647.28 653.136,634.302 653.696,654.895 654.255,625.578 654.814,614.365 655.373,601.171 655.933,589.887 656.492,627.117 657.051,660.303 657.61,647.62 658.17,620.138 658.729,586.983 659.288,590.273 659.847,578.419 660.407,597.573 660.966,602.014 661.525,642.433 662.084,678.657 662.644,711.696 663.203,742.204 663.762,709.899 664.321,660.791 664.881,648.143 665.44,650.877 665.999,638.029 666.558,643.491 667.118,679.457 667.677,701.003 668.236,700.749 668.795,683.329 669.355,681.085 669.914,696.814 670.473,728.99 671.032,728.296 671.592,758.633 672.151,772.942 672.71,768.593 673.269,766.992 673.829,780.942 674.388,745.089 674.947,707.787 675.506,706.174 676.066,721.182 676.625,718.674 677.184,717.492 677.743,717.299 678.303,730.052 678.862,713.192 679.421,682.326 679.981,679.133 680.54,665.091 681.099,684.616 681.658,701.751 682.218,719.978 682.777,722.429 683.336,718.826 683.895,699.119 684.455,679.402 685.014,677.797 685.573,724.89 686.132,724.169 686.692,737.934 687.251,755.462 687.81,734.344 688.369,747.776 688.929,748.505 689.488,775.92 690.047,736.057 690.606,718.446 691.166,685.175 691.725,666.248 692.284,668.264 692.843,666.245 693.403,649.176 693.962,669.888 694.521,673.195 695.08,686.972 695.64,720.124 696.199,704.358 696.758,739.55 697.317,736.177 697.877,735.507 698.436,733.554 698.995,744.846 699.554,758.246 700.114,753.059 700.673,734.314 701.232,750.319 701.791,763.189 702.351,723.931 702.91,690.128 703.469,696.261 704.028,661.266 704.588,663.119 705.147,664.734 705.706,684.068 706.265,701.744 706.825,699.105 707.384,615.567 707.943,622.61 708.502,627.556 709.062,617.741 709.621,616.648 710.18,621.653 710.739,624.764 711.299,630.199 711.858,649.528 712.417,634.618 712.976,622.395 713.536,626.758 714.095,615.842 714.654,603.91 715.213,623.693 715.773,606.761 716.332,595.484 716.891,618.471 717.45,608.044 718.01,632.054 718.569,622.228 719.128,611.449 719.687,632.433 720.247,649.369 720.806,650.641 721.365,607.784 721.924,614.644 722.484,617.893 723.043,622.11 723.602,641.991 724.161,689.095 724.721,692.632 725.28,660.03 725.839,709.945 726.398,724.37 726.958,710.118 727.517,726.648 728.076,710.01 728.635,708.705 729.195,720.607 729.754,705.728 730.313,703.3 730.872,702.576 731.432,719.124 731.991,687.406 732.55,676.295 733.109,695.167 733.669,699.189 734.228,698.57 734.787,713.79 735.346,729.259 735.906,695.106 736.465,682.868 737.024,704.2 737.583,703.177 738.143,703.189 738.702,718.478 739.261,747.083 739.82,730.921 740.38,762.221 740.939,757.185 741.498,743.459 742.057,723.984 742.617,755.398 743.176,749.456 743.735,747.757 744.294,778.525 744.854,777.218 745.413,754.519 745.972,765.294 746.531,793.162 747.091,786.146 747.65,779.658 748.209,820.821 748.768,799.322 749.328,776.221 749.887,768.267 750.446,766.105 751.005,760.273 751.565,772.593 752.124,769.61 752.683,765.312 753.242,746.156 753.802,742.952 754.361,741.349 754.92,768.695 755.479,765.179 756.039,761.24 756.598,771.824 757.157,787.481 757.716,780.454 758.276,810.504 758.835,816.481 759.394,777.289 759.953,771.66 760.513,765.871 761.072,713.286 761.631,697.961 762.19,696.84 762.75,696.055 763.309,676.603 763.868,713.045 764.427,711.983 764.987,723.766 765.546,737.799 766.105,768.26 766.664,781.919 767.224,760.552 767.783,737.654 768.342,749.18 768.901,700.547 769.461,716.5 770.02,699.013 770.579,731.619 771.138,732.238 771.698,733.85 772.257,714.946 772.816,695.527 773.375,729.284 773.935,709.133 774.494,707.201 775.053,692.035 775.612,644.145 776.172,630.21 776.731,635.216 777.29,637.378 777.849,673.773 778.409,702.481 778.968,715.646 779.527,730.369 780.086,710.54 780.646,691.377 781.205,677.786 781.764,693.963 782.323,695.344 782.883,777.275 783.442,806.337 784.001,783.561 784.56,779.654 785.12,775.848 785.679,757.168 786.238,755.592 786.797,752.353 787.357,765.249 787.916,745.909 788.475,739.849 789.034,749.355 789.594,700.062 790.153,712.035 790.712,728.81 791.271,707.911 791.831,724.335 792.39,690.263 792.949,685.817 793.508,685.044 794.068,670.94 794.627,655.158 795.186,677.517 795.745,662.019 796.305,662.17 796.864,664.888 797.423,665.777 797.982,696.897 798.542,695.45 799.101,712.265 799.66,707.91 800.219,721.332 800.779,721.518 801.338,734.659 801.897,731.839 802.456,759.953 803.016,771.212 803.575,764.014 804.134,776.865 804.693,753.099 805.253,749.028 805.812,761.072 806.371,725.584 806.931,709.94 807.49,723.595 808.049,673.313 808.608,662.46 809.168,646.823 809.727,649.998 810.286,652.762 810.845,656.602 811.405,674.684 811.964,691.381 812.523,725.269 813.082,751.887 813.642,732.374 814.201,747.592 814.76,729.578 815.319,711.067 815.879,660.607 816.438,613.882 816.997,585.554 817.556,609.18 818.116,648.852 818.675,651.99 819.234,654.108 819.793,624.352 820.353,608.335 820.912,566.578 821.471,559.149 822.03,550.432 822.59,558.549 823.149,533.938 823.708,524.467 824.267,530.388 824.827,505.312 825.386,552.569 825.945,560.573 826.504,569.584 827.064,575.758 827.623,594.875 828.182,601.265 828.741,588.029 829.301,545.01 829.86,572.6 830.419,547.532 830.978,558.304 831.538,582.824 832.097,619.493 832.656,589.655 833.215,592.071 833.775,549.497 834.334,575.619 834.893,566.371 835.452,603.955 836.012,560.393 836.571,568.176 837.13,575.58 837.689,581.724 838.249,622.491 838.808,661.918 839.367,665.388 839.926,681.215 840.486,680.298 841.045,681.514 841.604,697.591 842.163,681.778 842.723,696.68 843.282,698.696 843.841,746.414 844.4,727.704 844.96,740.327 845.519,756.884 846.078,719.296 846.637,715.688 847.197,729.225 847.756,709.416 848.315,709.518 848.874,711.581 849.434,726.192 849.993,786.141 850.552,815.395 851.111,809.82 851.671,784.02 852.23,796.393 852.789,789.278 853.348,800.402 853.908,792.633 854.467,787.326 855.026,767.91 855.585,764.839 856.145,795.18 856.704,788.6 857.263,813.353 857.822,885.705 858.382,841.128 858.941,816.551 859.5,778.247 860.059,774.56 860.619,769.01 861.178,729.967 861.737,726.243 862.296,724.951 862.856,753.101 863.415,747.857 863.974,761.481 864.533,753.582 865.093,748.75 865.652,746.321 866.211,726.091 866.77,725.43 867.33,786.783 867.889,813.648 868.448,837.668 869.007,810.333 869.567,774.87 870.126,782.276 870.685,773.903 871.244,783.59 871.804,796.069 872.363,794.515 872.922,792.19 873.481,801.511 874.041,810.729 874.6,820.757 875.159,812.651 875.718,790.948 876.278,757.646 876.837,740.933 877.396,753.845 877.955,765.225 878.515,743.528 879.074,726.978 879.633,693.992 880.192,642.699 880.752,691.531 881.311,672.562 881.87,656.593 882.429,638.529 882.989,672.432 883.548,653.496 884.107,655.304 884.666,636.905 885.226,623.086 885.785,642.345 886.344,630.377 886.903,618.847 887.463,625.881 888.022,632.183 888.581,614.657 889.14,616.932 889.7,639.336 890.259,677.148 890.818,659.806 891.377,616.552 891.937,652.414 892.496,655.891 893.055,639.084 893.614,656.24 894.174,670.501 894.733,657.099 895.292,690.622 895.851,674.147 896.411,675.478 896.97,677.069 897.529,695.6 898.088,695.223 898.648,710.357 899.207,707.962 899.766,722.8 900.325,690.262 900.885,678.4 901.444,647.371 902.003,648.474 902.562,664.431 903.122,684.408 903.681,686.877 904.24,684.174 904.799,683.444 905.359,681.264 905.918,695.401 906.477,693.432 907.036,709.812 907.596,675.473 908.155,659.493 908.714,678.654 909.273,694.505 909.833,708.421 910.392,710.187 910.951,693.053 911.51,676.205 912.07,645.177 912.629,616.129 913.188,636.488 913.747,640.145 914.307,722.772 914.866,724.653 915.425,707.821 915.984,784.315 916.544,766.318 917.103,781.717 917.662,809.34 918.221,785.14 918.781,777.348 919.34,768.996 919.899,794.638 920.458,772.711 921.018,735.464 921.577,797.14 922.136,776.007 922.695,755.783 923.255,752.088 923.814,766.16 924.373,778.119 924.932,771.951 925.492,784.678 926.051,746.694 926.61,743.951 927.169,742.598 927.729,706.672 928.288,670.176 928.847,658.486 929.406,643.772 929.966,631.823 930.525,618.189 931.084,621.297 931.644,609.791 932.203,612.234 932.762,602.538 933.321,560.141 933.881,569.369 934.44,577.05 934.999,612.759 935.558,614.072 936.118,615.723 936.677,637.692 937.236,636.89 937.795,622.557 938.355,607.299 938.914,594.161 939.473,580.267 940.032,585.038 940.592,588.023 941.151,637.848 941.71,620.732 942.269,610.465 942.829,551.944 943.388,559.036 943.947,588.175 944.506,577.469 945.066,553.738 945.625,594.01 946.184,614.721 946.743,638.065 947.303,684.965 947.862,715.013 948.421,698.447 948.98,697.889 949.54,714.444 950.099,698.379 950.658,698.002 951.217,666.761 951.777,653.802 952.336,672.413 952.895,689.748 953.454,690.643 954.014,691.912 954.573,693.472 955.132,691.332 955.691,691.803 956.251,687.364 956.81,703.101 957.369,671.315 957.928,693.105 958.488,712.932 959.047,664.479 959.606,687.384 960.165,676.616 960.725,711.092 961.284,690.811 961.843,686.098 962.402,715.048 962.962,715.378 963.521,681.636 964.08,662.305 964.639,649.502 965.199,670.994 965.758,691.852 966.317,673.209 966.876,657.053 967.436,642.269 967.995,627.669 968.554,631.409 969.113,636.868 969.673,635.212 970.232,621.115 970.791,622.423 971.35,621.378 971.91,622.93 972.469,629.259 973.028,616.366 973.587,586.789 974.147,592.423 974.706,629.159 975.265,632.982 975.824,617.381 976.384,605.059 976.943,639.866 977.502,658.617 978.061,675.684 978.621,677.388 979.18,692.3 979.739,677.26 980.298,677.184 980.858,711.913 981.417,698.383 981.976,695.453 982.535,709.098 983.095,692.55 983.654,720.739 984.213,719.823 984.772,719.576 985.332,703.006 985.891,673.335 986.45,691.925 987.009,675.564 987.569,677.008 988.128,678.689 988.687,646.586 989.246,617.406 989.806,603.72 990.365,575.989 990.924,584.238 991.483,570.192 992.043,578.039 992.602,601.297 993.161,622.475 993.72,630.024 994.28,663.733 994.839,682.145 995.398,666.37 995.957,727.746 996.517,710.433 997.076,695.201 997.635,678.997 998.194,692.317 998.754,660.56 999.313,644.695 999.872,648.682 1000.43,636.104 1000.99,671.798 1001.55,668.667 1002.11,718.797 1002.67,733.055 1003.23,763.63 1003.79,804.782 1004.35,831.345 1004.91,870.687 1005.46,844.674 1006.02,854.221 1006.58,825.986 1007.14,818.392 1007.7,841.94 1008.26,831.953 1008.82,837.051 1009.38,844.258 1009.94,818.02 1010.5,808.75 1011.06,817.135 1011.62,811.343 1012.18,818.719 1012.73,795.655 1013.29,791.105 1013.85,789.01 1014.41,782.625 1014.97,761.078 1015.53,754.956 1016.09,751.273 1016.65,760.206 1017.21,743.063 1017.77,737.486 1018.33,767.982 1018.89,764.618 1019.45,787.612 1020.01,781.269 1020.56,763.041 1021.12,755.06 1021.68,749.702 1022.24,748.288 1022.8,729.063 1023.36,745.768 1023.92,725.709 1024.48,723.333 1025.04,737.232 1025.6,732.149 1026.16,697.549 1026.72,701.124 1027.28,667.369 1027.83,648.674 1028.39,651.928 1028.95,653.719 1029.51,654.078 1030.07,655.65 1030.63,639.048 1031.19,658.343 1031.75,693.252 1032.31,689.933 1032.87,722.805 1033.43,719.253 1033.99,737.215 1034.55,730.57 1035.1,711.924 1035.66,695.636 1036.22,693.106 1036.78,692.896 1037.34,688.579 1037.9,686.884 1038.46,673.798 1039.02,628.124 1039.58,682.929 1040.14,631.751 1040.7,549.247 1041.26,540.098 1041.82,548.411 1042.38,542.639 1042.93,552.019 1043.49,556.38 1044.05,595.637 1044.61,583.337 1045.17,604.373 1045.73,625.803 1046.29,629.823 1046.85,648.545 1047.41,683.221 1047.97,669.276 1048.53,669.591 1049.09,699.722 1049.65,744.876 1050.2,743.306 1050.76,722.202 1051.32,720.79 1051.88,689.325 1052.44,722.223 1053,717.275 1053.56,750.127 1054.12,749.277 1054.68,746.205 1055.24,742.013 1055.8,768.33 1056.36,718.427 1056.92,720.128 1057.48,719.618 1058.03,703.266 1058.59,751.924 1059.15,749.507 1059.71,723.774 1060.27,705.64 1060.83,684.577 1061.39,666.617 1061.95,650.082 1062.51,620.229 1063.07,607.947 1063.63,645.84 1064.19,664.688 1064.75,664.575 1065.3,677.466 1065.86,648.381 1066.42,654.905 1066.98,640.375 1067.54,612.508 1068.1,617.061 1068.66,652.006 1069.22,687.397 1069.78,702.682 1070.34,680.385 1070.9,697.142 1071.46,710.901 1072.02,663.043 1072.57,661.625 1073.13,665.521 1073.69,701.186 1074.25,685.233 1074.81,671.313 1075.37,705.259 1075.93,671.804 1076.49,688.058 1077.05,699.785 1077.61,712.612 1078.17,711.898 1078.73,694.888 1079.29,648.998 1079.85,668.61 1080.4,671.028 1080.96,669.18 1081.52,702.314 1082.08,717.357 1082.64,667.108 1083.2,671.509 1083.76,686.544 1084.32,675.651 1084.88,708.539 1085.44,676.868 1086,677.521 1086.56,681.117 1087.12,665.335 1087.67,695.605 1088.23,696.7 1088.79,694.178 1089.35,742.813 1089.91,738.012 1090.47,702.544 1091.03,716.976 1091.59,731.755 1092.15,728.967 1092.71,714.228 1093.27,729.85 1093.83,727.377 1094.39,714.757 1094.94,733.265 1095.5,748.372 1096.06,747.558 1096.62,768.055 1097.18,768.549 1097.74,781.732 1098.3,789.973 1098.86,769.312 1099.42,784.298 1099.98,761.084 1100.54,756.1 1101.1,734.572 1101.66,714.2 1102.22,712.987 1102.77,713.59 1103.33,726.713 1103.89,723.109 1104.45,703.128 1105.01,749.312 1105.57,766.217 1106.13,762.024 1106.69,758.91 1107.25,753.96 1107.81,780.394 1108.37,758.97 1108.93,704.412 1109.49,671.405 1110.04,671.512 1110.6,623.684 1111.16,627.007 1111.72,665.616 1112.28,678.278 1112.84,615.578 1113.4,603.765 1113.96,589.991 1114.52,596.869 1115.08,619.266 1115.64,606.46 1116.2,610.852 1116.76,630.337 1117.31,652.326 1117.87,651.778 1118.43,653.963 1118.99,657.549 1119.55,672.421 1120.11,652.734 1120.67,701.77 1121.23,719.187 1121.79,733.121 1122.35,713.845 1122.91,694.113 1123.47,695.09 1124.03,696.982 1124.59,698.169 1125.14,680.241 1125.7,697.819 1126.26,694.697 1126.82,661.471 1127.38,645.341 1127.94,645.288 1128.5,649.944 1129.06,654.722 1129.62,654.579 1130.18,637.341 1130.74,639.473 1131.3,659.53 1131.86,642.152 1132.41,645.697 1132.97,665.649 1133.53,635.862 1134.09,621.985 1134.65,610.489 1135.21,617.749 1135.77,657.471 1136.33,641.46 1136.89,626.872 1137.45,643.719 1138.01,693.699 1138.57,662.175 1139.13,664.817 1139.68,681.172 1140.24,729.862 1140.8,708.871 1141.36,710.951 1141.92,740.756 1142.48,736.739 1143.04,748.342 1143.6,744.578 1144.16,709.343 1144.72,688.785 1145.28,737.633 1145.84,751.334 1146.4,779.93 1146.96,692.501 1147.51,724.183 1148.07,756.519 1148.63,719.539 1149.19,697.424 1149.75,697.802 1150.31,666.332 1150.87,651.208 1151.43,654.022 1151.99,689.244 1152.55,686.637 1153.11,654.67 1153.67,672.203 1154.23,687.443 1154.78,684.68 1155.34,683.085 1155.9,684.747 1156.46,672.305 1157.02,644.281 1157.58,676.889 1158.14,692.463 1158.7,708.928 1159.26,688.782 1159.82,704.707 1160.38,702.948 1160.94,667.429 1161.5,682.542 1162.05,679.361 1162.61,661.941 1163.17,663.714 1163.73,681.327 1164.29,651.435 1164.85,667.168 1165.41,664.545 1165.97,696.78 1166.53,727.841 1167.09,742.02 1167.65,709.794 1168.21,706.959 1168.77,726.915 1169.33,724.743 1169.88,677.09 1170.44,675.874 1171,661.775 1171.56,665.723 1172.12,649.739 1172.68,652.325 1173.24,655.101 1173.8,657.449 1174.36,643.618 1174.92,629.362 1175.48,615.855 1176.04,587.937 1176.6,610.484 1177.15,613.779 1177.71,635.646 1178.27,653.129 1178.83,689.488 1179.39,673.062 1179.95,675.626 1180.51,659.002 1181.07,632.261 1181.63,635.468 1182.19,606.124 1182.75,641.902 1183.31,610.745 1183.87,633.532 1184.43,638.53 1184.98,626.21 1185.54,598.013 1186.1,620.576 1186.66,628.292 1187.22,645.907 1187.78,665.259 1188.34,682.899 1188.9,667.397 1189.46,684.171 1190.02,733.843 1190.58,713.388 1191.14,697.786 1191.7,714.743 1192.25,716.989 1192.81,714.91 1193.37,727.938 1193.93,711.96 1194.49,723.726 1195.05,753.254 1195.61,746.44 1196.17,744.521 1196.73,758.313 1197.29,740.162 1197.85,705.167 1198.41,687.974 1198.97,671.128 1199.52,658.625 1200.08,656.538 1200.64,659.339 1201.2,660.931 1201.76,646.847 1202.32,662.449 1202.88,661.803 1203.44,665.148 1204,664.179 1204.56,684.895 1205.12,683.528 1205.68,681.296 1206.24,667.642 1206.8,665.949 1207.35,664.659 1207.91,650.6 1208.47,635.056 1209.03,652.215 1209.59,633.27 1210.15,683.902 1210.71,699.333 1211.27,650.051 1211.83,632.201 1212.39,638.009 1212.95,637.414 1213.51,626.358 1214.07,627.714 1214.62,631.064 1215.18,618.289 1215.74,618.765 1216.3,654.8 1216.86,610.897 1217.42,630.56 1217.98,617.528 1218.54,622.623 1219.1,611.838 1219.66,600.444 1220.22,637.789 1220.78,626.136 1221.34,643.373 1221.89,643.288 1222.45,664.25 1223.01,665.446 1223.57,668.737 1224.13,682.972 1224.69,682.036 1225.25,702.977 1225.81,704.324 1226.37,722.456 1226.93,754.898 1227.49,749.769 1228.05,793.815 1228.61,803.528 1229.17,778.314 1229.72,775.301 1230.28,787.313 1230.84,750.962 1231.4,730.541 1231.96,746.435 1232.52,741.749 1233.08,734.861 1233.64,781.063 1234.2,791.015 1234.76,785.4 1235.32,791.818 1235.88,785.164 1236.44,764.658 1236.99,779.144 1237.55,758.624 1238.11,720.926 1238.67,719.537 1239.23,703.052 1239.79,683.26 1240.35,680.633 1240.91,709.846 1241.47,691.452 1242.03,676.86 1242.59,691.481 1243.15,737.064 1243.71,752.105 1244.26,766.911 1244.82,777.207 1245.38,786.002 1245.94,780.068 1246.5,790.915 1247.06,787.439 1247.62,779.138 1248.18,739.621 1248.74,734.849 1249.3,734.853 1249.86,697.59 1250.42,695.349 1250.98,696.259 1251.54,727.403 1252.09,692.455 1252.65,678.114 1253.21,665.773 1253.77,632.478 1254.33,631.879 1254.89,635.134 1255.45,639.059 1256.01,640.665 1256.57,630.327 1257.13,635.114 1257.69,652.473 1258.25,604.745 1258.81,590.862 1259.36,596.988 1259.92,617.566 1260.48,640.285 1261.04,642.492 1261.6,628.942 1262.16,632.485 1262.72,665.301 1263.28,647.403 1263.84,634.537 1264.4,654.613 1264.96,685.924 1265.52,703.229 1266.08,687.602 1266.63,671.147 1267.19,700.777 1267.75,685.13 1268.31,672.465 1268.87,656.331 1269.43,656.509 1269.99,677.087 1270.55,676.798 1271.11,659.579 1271.67,675.485 1272.23,676.157 1272.79,661.783 1273.35,673.825 1273.91,671.714 1274.46,673.884 1275.02,707.049 1275.58,702.749 1276.14,687.879 1276.7,690.275 1277.26,689.77 1277.82,687.89 1278.38,671.069 1278.94,641.869 1279.5,642.08 1280.06,642.96 1280.62,662.727 1281.18,661.25 1281.73,677.053 1282.29,675.074 1282.85,674.282 1283.41,656.64 1283.97,677.721 1284.53,681.231 1285.09,666.452 1285.65,634.728 1286.21,604.211 1286.77,607.125 1287.33,611.527 1287.89,633.592 1288.45,701.961 1289,686.568 1289.56,689.414 1290.12,706.603 1290.68,689.741 1291.24,706.142 1291.8,709.804 1292.36,727.034 1292.92,709.118 1293.48,709.093 1294.04,707.654 1294.6,706.433 1295.16,722.074 1295.72,701.335 1296.28,704.199 1296.83,703.088 1297.39,703.73 1297.95,701.834 1298.51,689.078 1299.07,685.271 1299.63,685.785 1300.19,697.462 1300.75,649.628 1301.31,650.682 1301.87,651.939 1302.43,656.556 1302.99,641.391 1303.55,672.402 1304.1,657.549 1304.66,675.421 1305.22,642.856 1305.78,598.342 1306.34,599.83 1306.9,587.81 1307.46,591.771 1308.02,611.981 1308.58,617.122 1309.14,639.438 1309.7,607.277 1310.26,594.942 1310.82,616.63 1311.38,620.51 1311.93,622.379 1312.49,608.378 1313.05,612.885 1313.61,616.802 1314.17,620.062 1314.73,639.345 1315.29,644.712 1315.85,697.025 1316.41,681.789 1316.97,666.263 1317.53,681.142 1318.09,683.763 1318.65,668.929 1319.2,656.272 1319.76,704.091 1320.32,705.123 1320.88,706.154 1321.44,688.703 1322,656.194 1322.56,690.752 1323.12,660.079 1323.68,661.047 1324.24,677.719 1324.8,694.713 1325.36,726.645 1325.92,706.499 1326.47,707.813 1327.03,691.831 1327.59,677.114 1328.15,677.81 1328.71,676.911 1329.27,692.413 1329.83,726.347 1330.39,736.536 1330.95,733.554 1331.51,698.671 1332.07,663.572 1332.63,651.481 1333.19,668.525 1333.75,652.231 1334.3,670.781 1334.86,670.075 1335.42,687.389 1335.98,704.507 1336.54,720.039 1337.1,653.882 1337.66,637.044 1338.22,638.142 1338.78,639.813 1339.34,658.783 1339.9,676.775 1340.46,642.268 1341.02,649.191 1341.57,668.217 1342.13,638.081 1342.69,661.582 1343.25,633.224 1343.81,653.219 1344.37,653.891 1344.93,659.462 1345.49,645.963 1346.05,663.706 1346.61,630.862 1347.17,664.311 1347.73,666.962 1348.29,701.268 1348.84,697.127 1349.4,713.342 1349.96,773.776 1350.52,769.823 1351.08,774.158 1351.64,753.911 1352.2,718.007 1352.76,718.184 1353.32,731.06 1353.88,731.341 1354.44,730.029 1355,763.66 1355.56,757.439 1356.12,803.257 1356.67,812.778 1357.23,838.551 1357.79,812.472 1358.35,805.45 1358.91,811.652 1359.47,805.751 1360.03,814.859 1360.59,809.409 1361.15,756.108 1361.71,737.855 1362.27,719.601 1362.83,685.208 1363.39,698.389 1363.94,696.611 1364.5,696.52 1365.06,679.028 1365.62,660.55 1366.18,632.455 1366.74,648.769 1367.3,617.591 1367.86,638.057 1368.42,608.443 1368.98,598.842 1369.54,599.99 1370.1,638.04 1370.66,642.07 1371.21,611.938 1371.77,617.656 1372.33,640.294 1372.89,674.45 1373.45,676.857 1374.01,658.649 1374.57,679.37 1375.13,682.328 1375.69,685.68 1376.25,689.585 1376.81,687.255 1377.37,684.567 1377.93,671.977 1378.49,705.576 1379.04,686.821 1379.6,701.837 1380.16,702.813 1380.72,719.145 1381.28,733.903 1381.84,763.9 1382.4,759.799 1382.96,739.002 1383.52,719.911 1384.08,730.833 1384.64,711.957 1385.2,708.454 1385.76,707.174 1386.31,704.634 1386.87,690.067 1387.43,672.006 1387.99,669.671 1388.55,700.732 1389.11,686.333 1389.67,702.358 1390.23,714.139 1390.79,697.606 1391.35,698.369 1391.91,700.218 1392.47,714.539 1393.03,700.989 1393.58,671.681 1394.14,652.938 1394.7,669.207 1395.26,671.056 1395.82,656.737 1396.38,640.599 1396.94,708.329 1397.5,723.105 1398.06,717.165 1398.62,696.08 1399.18,695.577 1399.74,694.536 1400.3,677.979 1400.86,680.289 1401.41,680.479 1401.97,666.556 1402.53,685.384 1403.09,687.117 1403.65,688.618 1404.21,721.034 1404.77,736.001 1405.33,750.654 1405.89,730.546 1406.45,729.532 1407.01,663.982 1407.57,663.139 1408.13,612.075 1408.68,651.089 1409.24,637.795 1409.8,624.111 1410.36,624.772 1410.92,644.41 1411.48,627.897 1412.04,631.467 1412.6,647.121 1413.16,651.682 1413.72,670.059 1414.28,672.418 1414.84,659.097 1415.4,676.587 1415.95,642.266 1416.51,661.719 1417.07,642.435 1417.63,627.623 1418.19,630.505 1418.75,636.687 1419.31,652.1 1419.87,688.301 1420.43,706.429 1420.99,705.268 1421.55,703.572 1422.11,702.004 1422.67,685.15 1423.23,669.904 1423.78,673.314 1424.34,690.6 1424.9,704.893 1425.46,703.417 1426.02,701.142 1426.58,702.559 1427.14,685.339 1427.7,668.367 1428.26,667.707 1428.82,685.611 1429.38,667.974 1429.94,664.184 1430.5,682.404 1431.05,701.912 1431.61,717.548 1432.17,702.896 1432.73,718.37 1433.29,700.764 1433.85,666.376 1434.41,618.127 1434.97,617.819 1435.53,607.85 1436.09,630.115 1436.65,684.957 1437.21,668.995 1437.77,687.029 1438.33,704.647 1438.88,689.774 1439.44,689.461 1440,626.246 1440.56,610.213 1441.12,633.29 1441.68,636.352 1442.24,636.644 1442.8,638.268 1443.36,642.951 1443.92,633.781 1444.48,637.39 1445.04,622.929 1445.6,660.113 1446.15,688.139 1446.71,672.501 1447.27,675.661 1447.83,681.34 1448.39,667.599 1448.95,668.972 1449.51,704.806 1450.07,715.017 1450.63,777.162 1451.19,791.083 1451.75,784.598 1452.31,763.083 1452.87,755.723 1453.42,750.348 1453.98,744.502 1454.54,741.282 1455.1,740.463 1455.66,756.754 1456.22,786.677 1456.78,733.223 1457.34,729.949 1457.9,746.627 1458.46,709.811 1459.02,705.48 1459.58,720.847 1460.14,737.685 1460.7,735.75 1461.25,713.756 1461.81,694.987 1462.37,697.368 1462.93,715.432 1463.49,729.619 1464.05,728.338 1464.61,693.462 1465.17,645.093 1465.73,666.023 1466.29,668.914 1466.85,656.632 1467.41,656.817 1467.97,673.536 1468.52,708.391 1469.08,705.39 1469.64,719.227 1470.2,748.49 1470.76,760.385 1471.32,739.755 1471.88,754.645 1472.44,748.703 1473,745.971 1473.56,743.196 1474.12,725.54 1474.68,741.193 1475.24,705.238 1475.79,706.167 1476.35,689.818 1476.91,692.379 1477.47,675.192 1478.03,692.281 1478.59,723.006 1479.15,687.729 1479.71,700.912 1480.27,698.169 1480.83,710.329 1481.39,709.517 1481.95,723.889 1482.51,706.506 1483.07,704.872 1483.62,685.348 1484.18,669.098 1484.74,685.65 1485.3,668.664 1485.86,704.355 1486.42,718.791 1486.98,701.196 1487.54,679.3 1488.1,661.546 1488.66,658.339 1489.22,679.505 1489.78,662.035 1490.34,674.734 1490.89,724.364 1491.45,692.801 1492.01,675.833 1492.57,664.514 1493.13,665.037 1493.69,683.851 1494.25,653.855 1494.81,675.155 1495.37,678.116 1495.93,662.914 1496.49,711.306 1497.05,690.988 1497.61,657.856 1498.16,694.074 1498.72,728.791 1499.28,709.652 1499.84,671.993 1500.4,691.093 1500.96,657.087 1501.52,659.5 1502.08,723.425 1502.64,754.753 1503.2,733.732 1503.76,758.795 1504.32,739.429 1504.88,704.428 1505.44,702.223 1505.99,733.356 1506.55,681.613 1507.11,631.95 1507.67,650.661 1508.23,653.155 1508.79,686.772 1509.35,749.16 1509.91,762.721 1510.47,756.306 1511.03,765.043 1511.59,742.212 1512.15,740.728 1512.71,752.245 1513.26,735.454 1513.82,668.138 1514.38,686.481 1514.94,750.041 1515.5,682.838 1516.06,696.024 1516.62,740.926 1517.18,740.666 1517.74,722.957 1518.3,703.657 1518.86,720.527 1519.42,734.153 1519.98,713.735 1520.53,680.578 1521.09,715.936 1521.65,731.278 1522.21,728.169 1522.77,696.684 1523.33,663.216 1523.89,630.384 1524.45,651.543 1525.01,635.948 1525.57,636.444 1526.13,625.643 1526.69,614.038 1527.25,634.732 1527.81,652.406 1528.36,607.756 1528.92,613.038 1529.48,601.866 1530.04,605.131 1530.6,608.571 1531.16,611.55 1531.72,631.396 1532.28,616.588 1532.84,587.434 1533.4,587.432 1533.96,608.221 1534.52,596.892 1535.08,601.973 1535.63,608.16 1536.19,593.383 1536.75,615.14 1537.31,637.114 1537.87,621.171 1538.43,621.289 1538.99,629.963 1539.55,648.89 1540.11,652.966 1540.67,650.816 1541.23,656.685 1541.79,674.952 1542.35,693.032 1542.9,709.571 1543.46,707.205 1544.02,703.748 1544.58,671.754 1545.14,671.001 1545.7,688.62 1546.26,687.178 1546.82,685.352 1547.38,697.081 1547.94,666.429 1548.5,668.701 1549.06,637.021 1549.62,622.487 1550.18,655.946 1550.73,684.566 1551.29,700.597 1551.85,732.122 1552.41,745.769 1552.97,743.842 1553.53,741.36 1554.09,754.404 1554.65,736.585 1555.21,702.061 1555.77,697.438 1556.33,697.188 1556.89,664.906 1557.45,665.294 1558,682.325 1558.56,668.484 1559.12,703.348 1559.68,700.389 1560.24,698.353 1560.8,699.959 1561.36,714.95 1561.92,710.621 1562.48,726.603 1563.04,743.473 1563.6,740.277 1564.16,733.718 1564.72,700.277 1565.28,716.446 1565.83,716.334 1566.39,696.826 1566.95,680.249 1567.51,711.333 1568.07,709.799 1568.63,709.992 1569.19,705.433 1569.75,705.986 1570.31,704.409 1570.87,686.006 1571.43,669.462 1571.99,668.495 1572.55,687.745 1573.1,706.182 1573.66,722.121 1574.22,736.794 1574.78,734.713 1575.34,763.483 1575.9,774.843 1576.46,756.081 1577.02,735.019 1577.58,682.456 1578.14,683.59 1578.7,703.043 1579.26,668.928 1579.82,682.107 1580.37,714.653 1580.93,762.568 1581.49,772.378 1582.05,751.613 1582.61,763.547 1583.17,727.983 1583.73,689.37 1584.29,640.228 1584.85,623.916 1585.41,610.412 1585.97,646.739 1586.53,647.047 1587.09,650.627 1587.65,648.56 1588.2,636.014 1588.76,623.086 1589.32,629.202 1589.88,649.307 1590.44,681.767 1591,665.385 1591.56,698.004 1592.12,680.002 1592.68,692.973 1593.24,690.507 1593.8,675.236 1594.36,690.634 1594.92,703.453 1595.47,717.668 1596.03,714.347 1596.59,716.087 1597.15,679.917 1597.71,646.869 1598.27,616.777 1598.83,638.173 1599.39,671.43 1599.95,720.626 1600.51,715.571 1601.07,695.037 1601.63,660.964 1602.19,657.719 1602.74,704.319 1603.3,668.91 1603.86,655.962 1604.42,690.566 1604.98,673.823 1605.54,676.854 1606.1,680.949 1606.66,711.763 1607.22,692.112 1607.78,692.639 1608.34,691.049 1608.9,721.907 1609.46,719.481 1610.02,686.813 1610.57,686.945 1611.13,684.76 1611.69,689.673 1612.25,642.904 1612.81,679.768 1613.37,696.038 1613.93,730.676 1614.49,679.963 1615.05,663.002 1615.61,683.263 1616.17,667.28 1616.73,684.826 1617.29,721.194 1617.84,702.903 1618.4,668.155 1618.96,712.338 1619.52,710.258 1620.08,689.062 1620.64,704.486 1621.2,703.964 1621.76,755.106 1622.32,735.91 1622.88,699.354 1623.44,685.043 1624,703.218 1624.56,719.35 1625.11,718.965 1625.67,701.868 1626.23,665.787 1626.79,649.826 1627.35,664.836 1627.91,646.675 1628.47,617.806 1629.03,608.553 1629.59,628.335 1630.15,612.248 1630.71,651.944 1631.27,701.95 1631.83,699.247 1632.39,696.96 1632.94,696.977 1633.5,703.24 1634.06,684.663 1634.62,686.306 1635.18,687.251 1635.74,703.287 1636.3,719.447 1636.86,719.403 1637.42,701.933 1637.98,719.152 1638.54,667.704 1639.1,686.308 1639.66,702.647 1640.21,703.078 1640.77,670.887 1641.33,638.496 1641.89,626.132 1642.45,611.512 1643.01,628.8 1643.57,614.114 1644.13,600.747 1644.69,591.844 1645.25,615.938 1645.81,617.79 1646.37,671.119 1646.93,689.121 1647.48,656.863 1648.04,641.312 1648.6,690.903 1649.16,690.442 1649.72,708.603 1650.28,724.313 1650.84,706.254 1651.4,737.292 1651.96,740.227 1652.52,720.393 1653.08,721.323 1653.64,733.711 1654.2,728.752 1654.76,726.883 1655.31,725.386 1655.87,737.6 1656.43,767.088 1656.99,733.488 1657.55,730.078 1658.11,746.22 1658.67,741.118 1659.23,737.922 1659.79,701.429 1660.35,685.034 1660.91,703.264 1661.47,700.743 1662.03,701.258 1662.58,711.489 1663.14,710.731 1663.7,689.566 1664.26,704.659 1664.82,720.578 1665.38,719.619 1665.94,733.933 1666.5,765.424 1667.06,713.345 1667.62,699.23 1668.18,681.718 1668.74,665.484 1669.3,664.866 1669.85,686.122 1670.41,684.036 1670.97,667.373 1671.53,684.655 1672.09,684.437 1672.65,634.653 1673.21,638.292 1673.77,653.315 1674.33,624.956 1674.89,598.296 1675.45,655.374 1676.01,656.208 1676.57,639.384 1677.13,610.314 1677.68,612.442 1678.24,650.636 1678.8,620.938 1679.36,624.281 1679.92,628.558 1680.48,651.228 1681.04,608.969 1681.6,581.357 1682.16,590.091 1682.72,609.04 1683.28,596.488 1683.84,635.695 1684.4,652.951 1684.95,653.698 1685.51,658.643 1686.07,646.454 1686.63,646.648 1687.19,633.076 1687.75,635.868 1688.31,623.459 1688.87,629.203 1689.43,648.856 1689.99,619.284 1690.55,590.388 1691.11,609.343 1691.67,612.177 1692.23,648.147 1692.78,652.975 1693.34,672.379 1693.9,706.923 1694.46,671.786 1695.02,673.736 1695.58,676.235 1696.14,680.093 1696.7,663.537 1697.26,701.063 1697.82,733.391 1698.38,715.952 1698.94,698.082 1699.5,710.828 1700.05,725.83 1700.61,707.03 1701.17,670.761 1701.73,687.833 1702.29,704.974 1702.85,706.124 1703.41,720.636 1703.97,733.977 1704.53,726.178 1705.09,740.659 1705.65,751.06 1706.21,732.235 1706.77,711.199 1707.32,688.368 1707.88,672.574 1708.44,689.856 1709,709.121 1709.56,723.991 1710.12,687.467 1710.68,687.109 1711.24,702.625 1711.8,689.189 1712.36,671.536 1712.92,654.75 1713.48,623.133 1714.04,658.93 1714.6,674.4 1715.15,663.18 1715.71,684.331 1716.27,687.468 1716.83,687.638 1717.39,650.773 1717.95,652.341 1718.51,653.769 1719.07,603.915 1719.63,624.891 1720.19,628.299 1720.75,631.332 1721.31,618.971 1721.87,607.767 1722.42,612.285 1722.98,614.845 1723.54,600.772 1724.1,585.401 1724.66,574.82 1725.22,595.335 1725.78,615.706 1726.34,605.007 1726.9,610.402 1727.46,583.079 1728.02,618.331 1728.58,604.961 1729.14,619.838 1729.69,654.978 1730.25,659.373 1730.81,677.255 1731.37,692.308 1731.93,693.288 1732.49,705.253 1733.05,721.334 1733.61,716.519 1734.17,668.515 1734.73,669.698 1735.29,674.727 1735.85,676.026 1736.41,664.18 1736.97,666.122 1737.52,652.295 1738.08,656.471 1738.64,638.683 1739.2,607.283 1739.76,577.626 1740.32,584.817 1740.88,590.638 1741.44,613.193 1742,633.762 1742.56,634.85 1743.12,655.26 1743.68,622.54 1744.24,644.368 1744.79,650.119 1745.35,631.825 1745.91,665.311 1746.47,651.902 1747.03,635.066 1747.59,635.363 1748.15,671.099 1748.71,689.657 1749.27,704.866 1749.83,708.127 1750.39,737.158 1750.95,735.179 1751.51,719.356 1752.06,751.077 1752.62,765.754 1753.18,763.157 1753.74,743.463 1754.3,726.631 1754.86,744.667 1755.42,739.085 1755.98,751.007 1756.54,776.198 1757.1,787.303 1757.66,780.76 1758.22,746.983 1758.78,742.228 1759.34,720.835 1759.89,701.2 1760.45,717.493 1761.01,714.424 1761.57,716.378 1762.13,699.429 1762.69,680.908 1763.25,664.414 1763.81,680.071 1764.37,665.175 1764.93,679.499 1765.49,697.278 1766.05,728.82 1766.61,738.825 1767.16,717.872 1767.72,729.395 1768.28,726.78 1768.84,725.775 1769.4,706.523 1769.96,689.487 1770.52,674.097 1771.08,673.779 1771.64,727.57 1772.2,740.784 1772.76,754.805 1773.32,733.885 1773.88,712.935 1774.43,693.087 1774.99,687.361 1775.55,704.515 1776.11,689.364 1776.67,706.202 1777.23,690.081 1777.79,690.491 1778.35,708.582 1778.91,691.955 1779.47,708.154 1780.03,690.878 1780.59,673.923 1781.15,694.247 1781.71,691.46 1782.26,676.71 1782.82,740.813 1783.38,707.012 1783.94,641.258 1784.5,626.234 1785.06,646.178 1785.62,680.76 1786.18,684.283 1786.74,700.368 1787.3,669.186 1787.86,638.886 1788.42,657.176 1788.98,672.285 1789.53,638.356 1790.09,635.802 1790.65,622.522 1791.21,639.491 1791.77,657.876 1792.33,640.657 1792.89,709.901 1793.45,727.187 1794.01,741.551 1794.57,701.352 1795.13,732.88 1795.69,726.463 1796.25,705.709 1796.8,704.634 1797.36,688.258 1797.92,689.245 1798.48,653.768 1799.04,672.243 1799.6,625.802 1800.16,627.438 1800.72,596.39 1801.28,635.144 1801.84,700.101 1802.4,670.51 1802.96,655.668 1803.52,644.595 1804.08,642.436 1804.63,641.841 1805.19,630.841 1805.75,633.539 1806.31,655.136 1806.87,669.87 1807.43,687.912 1807.99,689.799 1808.55,688.534 1809.11,672.817 1809.67,672.896 1810.23,656.192 1810.79,622.857 1811.35,612.808 1811.9,629.44 1812.46,617.82 1813.02,620.426 1813.58,610.295 1814.14,634.144 1814.7,635.781 1815.26,638.39 1815.82,624.822 1816.38,646.411 1816.94,665.889 1817.5,682.913 1818.06,684.704 1818.62,720.642 1819.18,732.78 1819.73,744.01 1820.29,740.481 1820.85,753.009 1821.41,764.347 1821.97,778.344 1822.53,774.813 1823.09,771.063 1823.65,767.678 1824.21,761.386 1824.77,758.995 1825.33,753.418 1825.89,736.528 1826.45,735.663 1827,735.6 1827.56,751.207 1828.12,778.405 1828.68,807.154 1829.24,800.706 1829.8,762.787 1830.36,792.82 1830.92,784.285 1831.48,794.575 1832.04,787.958 1832.6,794.711 1833.16,788.018 1833.72,767.956 1834.27,764.2 1834.83,775.537 1835.39,786.998 1835.95,782.251 1836.51,823.204 1837.07,784.484 1837.63,761.649 1838.19,756.276 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 693.169 L720.806 693.169 L721.365 693.169 L721.924 693.169 L722.484 693.169 L723.043 693.169 L723.602 693.169 L724.161 693.169 L724.721 693.169 L725.28 693.169 L725.839 693.169 L726.398 693.169 L726.958 693.169 L727.517 693.169 L728.076 693.169 L728.635 693.169 L729.195 693.169 L729.754 693.169 L730.313 693.169 L730.872 693.169 L731.432 693.169 L731.991 693.169 L732.55 693.169 L733.109 693.169 L733.669 693.169 L734.228 693.169 L734.787 693.169 L735.346 693.169 L735.906 693.169 L736.465 693.169 L737.024 693.169 L737.583 693.169 L738.143 693.169 L738.702 693.169 L739.261 693.169 L739.82 693.169 L740.38 693.169 L740.939 693.169 L741.498 693.169 L742.057 693.169 L742.617 693.169 L743.176 693.169 L743.735 693.169 L744.294 693.169 L744.854 693.169 L745.413 693.169 L745.972 693.169 L746.531 693.169 L747.091 693.169 L747.65 693.169 L748.209 693.169 L748.768 693.169 L749.328 693.169 L749.887 693.169 L750.446 693.169 L751.005 693.169 L751.565 693.169 L752.124 693.169 L752.683 693.169 L753.242 693.169 L753.802 693.169 L754.361 693.169 L754.92 693.169 L755.479 693.169 L756.039 693.169 L756.598 693.169 L757.157 693.169 L757.716 693.169 L758.276 693.169 L758.835 693.169 L759.394 693.169 L759.953 693.169 L760.513 693.169 L761.072 693.169 L761.631 693.169 L762.19 693.169 L762.75 693.169 L763.309 693.169 L763.868 693.169 L764.427 693.169 L764.987 693.169 L765.546 693.169 L766.105 693.169 L766.664 693.169 L767.224 693.169 L767.783 693.169 L768.342 693.169 L768.901 693.169 L769.461 693.169 L770.02 693.169 L770.579 693.169 L771.138 693.169 L771.698 693.169 L772.257 693.169 L772.816 693.169 L773.375 693.169 L773.935 693.169 L774.494 693.169 L775.053 693.169 L775.612 693.169 L776.172 693.169 L776.731 693.169 L777.29 693.169 L777.849 693.169 L778.409 693.169 L778.968 693.169 L779.527 693.169 L780.086 693.169 L780.646 693.169 L781.205 693.169 L781.764 693.169 L782.323 693.169 L782.883 693.169 L783.442 693.169 L784.001 693.169 L784.56 693.169 L785.12 693.169 L785.679 693.169 L786.238 693.169 L786.797 693.169 L787.357 693.169 L787.916 693.169 L788.475 693.169 L789.034 693.169 L789.594 693.169 L790.153 693.169 L790.712 693.169 L791.271 693.169 L791.831 693.169 L792.39 693.169 L792.949 693.169 L793.508 693.169 L794.068 693.169 L794.627 693.169 L795.186 693.169 L795.745 693.169 L796.305 693.169 L796.864 693.169 L797.423 693.169 L797.982 693.169 L798.542 693.169 L799.101 693.169 L799.66 693.169 L800.219 693.169 L800.779 693.169 L801.338 693.169 L801.897 693.169 L802.456 693.169 L803.016 693.169 L803.575 693.169 L804.134 693.169 L804.693 693.169 L805.253 693.169 L805.812 693.169 L806.371 693.169 L806.931 693.169 L807.49 693.169 L808.049 693.169 L808.608 693.169 L809.168 693.169 L809.727 693.169 L810.286 693.169 L810.845 693.169 L811.405 693.169 L811.964 693.169 L812.523 693.169 L813.082 693.169 L813.642 693.169 L814.201 693.169 L814.76 693.169 L815.319 693.169 L815.879 693.169 L816.438 693.169 L816.997 693.169 L817.556 693.169 L818.116 693.169 L818.675 693.169 L819.234 693.169 L819.793 693.169 L820.353 693.169 L820.912 693.169 L821.471 693.169 L822.03 693.169 L822.59 693.169 L823.149 693.169 L823.708 693.169 L824.267 693.169 L824.827 693.169 L825.386 693.169 L825.945 693.169 L826.504 693.169 L827.064 693.169 L827.623 693.169 L828.182 693.169 L828.741 693.169 L829.301 693.169 L829.86 693.169 L830.419 693.169 L830.978 693.169 L831.538 693.169 L832.097 693.169 L832.656 693.169 L833.215 693.169 L833.775 693.169 L834.334 693.169 L834.893 693.169 L835.452 693.169 L836.012 693.169 L836.571 693.169 L837.13 693.169 L837.689 693.169 L838.249 693.169 L838.808 693.169 L839.367 693.169 L839.926 693.169 L840.486 693.169 L841.045 693.169 L841.604 693.169 L842.163 693.169 L842.723 693.169 L843.282 693.169 L843.841 693.169 L844.4 693.169 L844.96 693.169 L845.519 693.169 L846.078 693.169 L846.637 693.169 L847.197 693.169 L847.756 693.169 L848.315 693.169 L848.874 693.169 L849.434 693.169 L849.993 693.169 L850.552 693.169 L851.111 693.169 L851.671 693.169 L852.23 693.169 L852.789 693.169 L853.348 693.169 L853.908 693.169 L854.467 693.169 L855.026 693.169 L855.585 693.169 L856.145 693.169 L856.704 693.169 L857.263 693.169 L857.822 693.169 L858.382 693.169 L858.941 693.169 L859.5 693.169 L860.059 693.169 L860.619 693.169 L861.178 693.169 L861.737 693.169 L862.296 693.169 L862.856 693.169 L863.415 693.169 L863.974 693.169 L864.533 693.169 L865.093 693.169 L865.652 693.169 L866.211 693.169 L866.77 693.169 L867.33 693.169 L867.889 693.169 L868.448 693.169 L869.007 693.169 L869.567 693.169 L870.126 693.169 L870.685 693.169 L871.244 693.169 L871.804 693.169 L872.363 693.169 L872.922 693.169 L873.481 693.169 L874.041 693.169 L874.6 693.169 L875.159 693.169 L875.718 693.169 L876.278 693.169 L876.837 693.169 L877.396 693.169 L877.955 693.169 L878.515 693.169 L879.074 693.169 L879.633 693.169 L880.192 693.169 L880.752 693.169 L881.311 693.169 L881.87 693.169 L882.429 693.169 L882.989 693.169 L883.548 693.169 L884.107 693.169 L884.666 693.169 L885.226 693.169 L885.785 693.169 L886.344 693.169 L886.903 693.169 L887.463 693.169 L888.022 693.169 L888.581 693.169 L889.14 693.169 L889.7 693.169 L890.259 693.169 L890.818 693.169 L891.377 693.169 L891.937 693.169 L892.496 693.169 L893.055 693.169 L893.614 693.169 L894.174 693.169 L894.733 693.169 L895.292 693.169 L895.851 693.169 L896.411 693.169 L896.97 693.169 L897.529 693.169 L898.088 693.169 L898.648 693.169 L899.207 693.169 L899.766 693.169 L900.325 693.169 L900.885 693.169 L901.444 693.169 L902.003 693.169 L902.562 693.169 L903.122 693.169 L903.681 693.169 L904.24 693.169 L904.799 693.169 L905.359 693.169 L905.918 693.169 L906.477 693.169 L907.036 693.169 L907.596 693.169 L908.155 693.169 L908.714 693.169 L909.273 693.169 L909.833 693.169 L910.392 693.169 L910.951 693.169 L911.51 693.169 L912.07 693.169 L912.629 693.169 L913.188 693.169 L913.747 693.169 L914.307 693.169 L914.866 693.169 L915.425 693.169 L915.984 693.169 L916.544 693.169 L917.103 693.169 L917.662 693.169 L918.221 693.169 L918.781 693.169 L919.34 693.169 L919.899 693.169 L920.458 693.169 L921.018 693.169 L921.577 693.169 L922.136 693.169 L922.695 693.169 L923.255 693.169 L923.814 693.169 L924.373 693.169 L924.932 693.169 L925.492 693.169 L926.051 693.169 L926.61 693.169 L927.169 693.169 L927.729 693.169 L928.288 693.169 L928.847 693.169 L929.406 693.169 L929.966 693.169 L930.525 693.169 L931.084 693.169 L931.644 693.169 L932.203 693.169 L932.762 693.169 L933.321 693.169 L933.881 693.169 L934.44 693.169 L934.999 693.169 L935.558 693.169 L936.118 693.169 L936.677 693.169 L937.236 693.169 L937.795 693.169 L938.355 693.169 L938.914 693.169 L939.473 693.169 L940.032 693.169 L940.592 693.169 L941.151 693.169 L941.71 693.169 L942.269 693.169 L942.829 693.169 L943.388 693.169 L943.947 693.169 L944.506 693.169 L945.066 693.169 L945.625 693.169 L946.184 693.169 L946.743 693.169 L947.303 693.169 L947.862 693.169 L948.421 693.169 L948.98 693.169 L949.54 693.169 L950.099 693.169 L950.658 693.169 L951.217 693.169 L951.777 693.169 L952.336 693.169 L952.895 693.169 L953.454 693.169 L954.014 693.169 L954.573 693.169 L955.132 693.169 L955.691 693.169 L956.251 693.169 L956.81 693.169 L957.369 693.169 L957.928 693.169 L958.488 693.169 L959.047 693.169 L959.606 693.169 L960.165 693.169 L960.725 693.169 L961.284 693.169 L961.843 693.169 L962.402 693.169 L962.962 693.169 L963.521 693.169 L964.08 693.169 L964.639 693.169 L965.199 693.169 L965.758 693.169 L966.317 693.169 L966.876 693.169 L967.436 693.169 L967.995 693.169 L968.554 693.169 L969.113 693.169 L969.673 693.169 L970.232 693.169 L970.791 693.169 L971.35 693.169 L971.91 693.169 L972.469 693.169 L973.028 693.169 L973.587 693.169 L974.147 693.169 L974.706 693.169 L975.265 693.169 L975.824 693.169 L976.384 693.169 L976.943 693.169 L977.502 693.169 L978.061 693.169 L978.621 693.169 L979.18 693.169 L979.739 693.169 L980.298 693.169 L980.858 693.169 L981.417 693.169 L981.976 693.169 L982.535 693.169 L983.095 693.169 L983.654 693.169 L984.213 693.169 L984.772 693.169 L985.332 693.169 L985.891 693.169 L986.45 693.169 L987.009 693.169 L987.569 693.169 L988.128 693.169 L988.687 693.169 L989.246 693.169 L989.806 693.169 L990.365 693.169 L990.924 693.169 L991.483 693.169 L992.043 693.169 L992.602 693.169 L993.161 693.169 L993.72 693.169 L994.28 693.169 L994.839 693.169 L995.398 693.169 L995.957 693.169 L996.517 693.169 L997.076 693.169 L997.635 693.169 L998.194 693.169 L998.754 693.169 L999.313 693.169 L999.872 693.169 L1000.43 693.169 L1000.99 693.169 L1001.55 693.169 L1002.11 693.169 L1002.67 693.169 L1003.23 693.169 L1003.79 693.169 L1004.35 693.169 L1004.91 693.169 L1005.46 693.169 L1006.02 693.169 L1006.58 693.169 L1007.14 693.169 L1007.7 693.169 L1008.26 693.169 L1008.82 693.169 L1009.38 693.169 L1009.94 693.169 L1010.5 693.169 L1011.06 693.169 L1011.62 693.169 L1012.18 693.169 L1012.73 693.169 L1013.29 693.169 L1013.85 693.169 L1014.41 693.169 L1014.97 693.169 L1015.53 693.169 L1016.09 693.169 L1016.65 693.169 L1017.21 693.169 L1017.77 693.169 L1018.33 693.169 L1018.89 693.169 L1019.45 693.169 L1020.01 693.169 L1020.56 693.169 L1021.12 693.169 L1021.68 693.169 L1022.24 693.169 L1022.8 693.169 L1023.36 693.169 L1023.92 693.169 L1024.48 693.169 L1025.04 693.169 L1025.6 693.169 L1026.16 693.169 L1026.72 693.169 L1027.28 693.169 L1027.83 693.169 L1028.39 693.169 L1028.95 693.169 L1029.51 693.169 L1030.07 693.169 L1030.63 693.169 L1031.19 693.169 L1031.75 693.169 L1032.31 693.169 L1032.87 693.169 L1033.43 693.169 L1033.99 693.169 L1034.55 693.169 L1035.1 693.169 L1035.66 693.169 L1036.22 693.169 L1036.78 693.169 L1037.34 693.169 L1037.9 693.169 L1038.46 693.169 L1039.02 693.169 L1039.58 693.169 L1040.14 693.169 L1040.7 693.169 L1041.26 693.169 L1041.82 693.169 L1042.38 693.169 L1042.93 693.169 L1043.49 693.169 L1044.05 693.169 L1044.61 693.169 L1045.17 693.169 L1045.73 693.169 L1046.29 693.169 L1046.85 693.169 L1047.41 693.169 L1047.97 693.169 L1048.53 693.169 L1049.09 693.169 L1049.65 693.169 L1050.2 693.169 L1050.76 693.169 L1051.32 693.169 L1051.88 693.169 L1052.44 693.169 L1053 693.169 L1053.56 693.169 L1054.12 693.169 L1054.68 693.169 L1055.24 693.169 L1055.8 693.169 L1056.36 693.169 L1056.92 693.169 L1057.48 693.169 L1058.03 693.169 L1058.59 693.169 L1059.15 693.169 L1059.71 693.169 L1060.27 693.169 L1060.83 693.169 L1061.39 693.169 L1061.95 693.169 L1062.51 693.169 L1063.07 693.169 L1063.63 693.169 L1064.19 693.169 L1064.75 693.169 L1065.3 693.169 L1065.86 693.169 L1066.42 693.169 L1066.98 693.169 L1067.54 693.169 L1068.1 693.169 L1068.66 693.169 L1069.22 693.169 L1069.78 693.169 L1070.34 693.169 L1070.9 693.169 L1071.46 693.169 L1072.02 693.169 L1072.57 693.169 L1073.13 693.169 L1073.69 693.169 L1074.25 693.169 L1074.81 693.169 L1075.37 693.169 L1075.93 693.169 L1076.49 693.169 L1077.05 693.169 L1077.61 693.169 L1078.17 693.169 L1078.73 693.169 L1079.29 693.169 L1079.85 693.169 L1080.4 693.169 L1080.96 693.169 L1081.52 693.169 L1082.08 693.169 L1082.64 693.169 L1083.2 693.169 L1083.76 693.169 L1084.32 693.169 L1084.88 693.169 L1085.44 693.169 L1086 693.169 L1086.56 693.169 L1087.12 693.169 L1087.67 693.169 L1088.23 693.169 L1088.79 693.169 L1089.35 693.169 L1089.91 693.169 L1090.47 693.169 L1091.03 693.169 L1091.59 693.169 L1092.15 693.169 L1092.71 693.169 L1093.27 693.169 L1093.83 693.169 L1094.39 693.169 L1094.94 693.169 L1095.5 693.169 L1096.06 693.169 L1096.62 693.169 L1097.18 693.169 L1097.74 693.169 L1098.3 693.169 L1098.86 693.169 L1099.42 693.169 L1099.98 693.169 L1100.54 693.169 L1101.1 693.169 L1101.66 693.169 L1102.22 693.169 L1102.77 693.169 L1103.33 693.169 L1103.89 693.169 L1104.45 693.169 L1105.01 693.169 L1105.57 693.169 L1106.13 693.169 L1106.69 693.169 L1107.25 693.169 L1107.81 693.169 L1108.37 693.169 L1108.93 693.169 L1109.49 693.169 L1110.04 693.169 L1110.6 693.169 L1111.16 693.169 L1111.72 693.169 L1112.28 693.169 L1112.84 693.169 L1113.4 693.169 L1113.96 693.169 L1114.52 693.169 L1115.08 693.169 L1115.64 693.169 L1116.2 693.169 L1116.76 693.169 L1117.31 693.169 L1117.87 693.169 L1118.43 693.169 L1118.99 693.169 L1119.55 693.169 L1120.11 693.169 L1120.67 693.169 L1121.23 693.169 L1121.79 693.169 L1122.35 693.169 L1122.91 693.169 L1123.47 693.169 L1124.03 693.169 L1124.59 693.169 L1125.14 693.169 L1125.7 693.169 L1126.26 693.169 L1126.82 693.169 L1127.38 693.169 L1127.94 693.169 L1128.5 693.169 L1129.06 693.169 L1129.62 693.169 L1130.18 693.169 L1130.74 693.169 L1131.3 693.169 L1131.86 693.169 L1132.41 693.169 L1132.97 693.169 L1133.53 693.169 L1134.09 693.169 L1134.65 693.169 L1135.21 693.169 L1135.77 693.169 L1136.33 693.169 L1136.89 693.169 L1137.45 693.169 L1138.01 693.169 L1138.57 693.169 L1139.13 693.169 L1139.68 693.169 L1140.24 693.169 L1140.8 693.169 L1141.36 693.169 L1141.92 693.169 L1142.48 693.169 L1143.04 693.169 L1143.6 693.169 L1144.16 693.169 L1144.72 693.169 L1145.28 693.169 L1145.84 693.169 L1146.4 693.169 L1146.96 693.169 L1147.51 693.169 L1148.07 693.169 L1148.63 693.169 L1149.19 693.169 L1149.75 693.169 L1150.31 693.169 L1150.87 693.169 L1151.43 693.169 L1151.99 693.169 L1152.55 693.169 L1153.11 693.169 L1153.67 693.169 L1154.23 693.169 L1154.78 693.169 L1155.34 693.169 L1155.9 693.169 L1156.46 693.169 L1157.02 693.169 L1157.58 693.169 L1158.14 693.169 L1158.7 693.169 L1159.26 693.169 L1159.82 693.169 L1160.38 693.169 L1160.94 693.169 L1161.5 693.169 L1162.05 693.169 L1162.61 693.169 L1163.17 693.169 L1163.73 693.169 L1164.29 693.169 L1164.85 693.169 L1165.41 693.169 L1165.97 693.169 L1166.53 693.169 L1167.09 693.169 L1167.65 693.169 L1168.21 693.169 L1168.77 693.169 L1169.33 693.169 L1169.88 693.169 L1170.44 693.169 L1171 693.169 L1171.56 693.169 L1172.12 693.169 L1172.68 693.169 L1173.24 693.169 L1173.8 693.169 L1174.36 693.169 L1174.92 693.169 L1175.48 693.169 L1176.04 693.169 L1176.6 693.169 L1177.15 693.169 L1177.71 693.169 L1178.27 693.169 L1178.83 693.169 L1179.39 693.169 L1179.95 693.169 L1180.51 693.169 L1181.07 693.169 L1181.63 693.169 L1182.19 693.169 L1182.75 693.169 L1183.31 693.169 L1183.87 693.169 L1184.43 693.169 L1184.98 693.169 L1185.54 693.169 L1186.1 693.169 L1186.66 693.169 L1187.22 693.169 L1187.78 693.169 L1188.34 693.169 L1188.9 693.169 L1189.46 693.169 L1190.02 693.169 L1190.58 693.169 L1191.14 693.169 L1191.7 693.169 L1192.25 693.169 L1192.81 693.169 L1193.37 693.169 L1193.93 693.169 L1194.49 693.169 L1195.05 693.169 L1195.61 693.169 L1196.17 693.169 L1196.73 693.169 L1197.29 693.169 L1197.85 693.169 L1198.41 693.169 L1198.97 693.169 L1199.52 693.169 L1200.08 693.169 L1200.64 693.169 L1201.2 693.169 L1201.76 693.169 L1202.32 693.169 L1202.88 693.169 L1203.44 693.169 L1204 693.169 L1204.56 693.169 L1205.12 693.169 L1205.68 693.169 L1206.24 693.169 L1206.8 693.169 L1207.35 693.169 L1207.91 693.169 L1208.47 693.169 L1209.03 693.169 L1209.59 693.169 L1210.15 693.169 L1210.71 693.169 L1211.27 693.169 L1211.83 693.169 L1212.39 693.169 L1212.95 693.169 L1213.51 693.169 L1214.07 693.169 L1214.62 693.169 L1215.18 693.169 L1215.74 693.169 L1216.3 693.169 L1216.86 693.169 L1217.42 693.169 L1217.98 693.169 L1218.54 693.169 L1219.1 693.169 L1219.66 693.169 L1220.22 693.169 L1220.78 693.169 L1221.34 693.169 L1221.89 693.169 L1222.45 693.169 L1223.01 693.169 L1223.57 693.169 L1224.13 693.169 L1224.69 693.169 L1225.25 693.169 L1225.81 693.169 L1226.37 693.169 L1226.93 693.169 L1227.49 693.169 L1228.05 693.169 L1228.61 693.169 L1229.17 693.169 L1229.72 693.169 L1230.28 693.169 L1230.84 693.169 L1231.4 693.169 L1231.96 693.169 L1232.52 693.169 L1233.08 693.169 L1233.64 693.169 L1234.2 693.169 L1234.76 693.169 L1235.32 693.169 L1235.88 693.169 L1236.44 693.169 L1236.99 693.169 L1237.55 693.169 L1238.11 693.169 L1238.67 693.169 L1239.23 693.169 L1239.79 693.169 L1240.35 693.169 L1240.91 693.169 L1241.47 693.169 L1242.03 693.169 L1242.59 693.169 L1243.15 693.169 L1243.71 693.169 L1244.26 693.169 L1244.82 693.169 L1245.38 693.169 L1245.94 693.169 L1246.5 693.169 L1247.06 693.169 L1247.62 693.169 L1248.18 693.169 L1248.74 693.169 L1249.3 693.169 L1249.86 693.169 L1250.42 693.169 L1250.98 693.169 L1251.54 693.169 L1252.09 693.169 L1252.65 693.169 L1253.21 693.169 L1253.77 693.169 L1254.33 693.169 L1254.89 693.169 L1255.45 693.169 L1256.01 693.169 L1256.57 693.169 L1257.13 693.169 L1257.69 693.169 L1258.25 693.169 L1258.81 693.169 L1259.36 693.169 L1259.92 693.169 L1260.48 693.169 L1261.04 693.169 L1261.6 693.169 L1262.16 693.169 L1262.72 693.169 L1263.28 693.169 L1263.84 693.169 L1264.4 693.169 L1264.96 693.169 L1265.52 693.169 L1266.08 693.169 L1266.63 693.169 L1267.19 693.169 L1267.75 693.169 L1268.31 693.169 L1268.87 693.169 L1269.43 693.169 L1269.99 693.169 L1270.55 693.169 L1271.11 693.169 L1271.67 693.169 L1272.23 693.169 L1272.79 693.169 L1273.35 693.169 L1273.91 693.169 L1274.46 693.169 L1275.02 693.169 L1275.58 693.169 L1276.14 693.169 L1276.7 693.169 L1277.26 693.169 L1277.82 693.169 L1278.38 693.169 L1278.94 693.169 L1279.5 693.169 L1280.06 693.169 L1280.62 693.169 L1281.18 693.169 L1281.73 693.169 L1282.29 693.169 L1282.85 693.169 L1283.41 693.169 L1283.97 693.169 L1284.53 693.169 L1285.09 693.169 L1285.65 693.169 L1286.21 693.169 L1286.77 693.169 L1287.33 693.169 L1287.89 693.169 L1288.45 693.169 L1289 693.169 L1289.56 693.169 L1290.12 693.169 L1290.68 693.169 L1291.24 693.169 L1291.8 693.169 L1292.36 693.169 L1292.92 693.169 L1293.48 693.169 L1294.04 693.169 L1294.6 693.169 L1295.16 693.169 L1295.72 693.169 L1296.28 693.169 L1296.83 693.169 L1297.39 693.169 L1297.95 693.169 L1298.51 693.169 L1299.07 693.169 L1299.63 693.169 L1300.19 693.169 L1300.75 693.169 L1301.31 693.169 L1301.87 693.169 L1302.43 693.169 L1302.99 693.169 L1303.55 693.169 L1304.1 693.169 L1304.66 693.169 L1305.22 693.169 L1305.78 693.169 L1306.34 693.169 L1306.9 693.169 L1307.46 693.169 L1308.02 693.169 L1308.58 693.169 L1309.14 693.169 L1309.7 693.169 L1310.26 693.169 L1310.82 693.169 L1311.38 693.169 L1311.93 693.169 L1312.49 693.169 L1313.05 693.169 L1313.61 693.169 L1314.17 693.169 L1314.73 693.169 L1315.29 693.169 L1315.85 693.169 L1316.41 693.169 L1316.97 693.169 L1317.53 693.169 L1318.09 693.169 L1318.65 693.169 L1319.2 693.169 L1319.76 693.169 L1320.32 693.169 L1320.88 693.169 L1321.44 693.169 L1322 693.169 L1322.56 693.169 L1323.12 693.169 L1323.68 693.169 L1324.24 693.169 L1324.8 693.169 L1325.36 693.169 L1325.92 693.169 L1326.47 693.169 L1327.03 693.169 L1327.59 693.169 L1328.15 693.169 L1328.71 693.169 L1329.27 693.169 L1329.83 693.169 L1330.39 693.169 L1330.95 693.169 L1331.51 693.169 L1332.07 693.169 L1332.63 693.169 L1333.19 693.169 L1333.75 693.169 L1334.3 693.169 L1334.86 693.169 L1335.42 693.169 L1335.98 693.169 L1336.54 693.169 L1337.1 693.169 L1337.66 693.169 L1338.22 693.169 L1338.78 693.169 L1339.34 693.169 L1339.9 693.169 L1340.46 693.169 L1341.02 693.169 L1341.57 693.169 L1342.13 693.169 L1342.69 693.169 L1343.25 693.169 L1343.81 693.169 L1344.37 693.169 L1344.93 693.169 L1345.49 693.169 L1346.05 693.169 L1346.61 693.169 L1347.17 693.169 L1347.73 693.169 L1348.29 693.169 L1348.84 693.169 L1349.4 693.169 L1349.96 693.169 L1350.52 693.169 L1351.08 693.169 L1351.64 693.169 L1352.2 693.169 L1352.76 693.169 L1353.32 693.169 L1353.88 693.169 L1354.44 693.169 L1355 693.169 L1355.56 693.169 L1356.12 693.169 L1356.67 693.169 L1357.23 693.169 L1357.79 693.169 L1358.35 693.169 L1358.91 693.169 L1359.47 693.169 L1360.03 693.169 L1360.59 693.169 L1361.15 693.169 L1361.71 693.169 L1362.27 693.169 L1362.83 693.169 L1363.39 693.169 L1363.94 693.169 L1364.5 693.169 L1365.06 693.169 L1365.62 693.169 L1366.18 693.169 L1366.74 693.169 L1367.3 693.169 L1367.86 693.169 L1368.42 693.169 L1368.98 693.169 L1369.54 693.169 L1370.1 693.169 L1370.66 693.169 L1371.21 693.169 L1371.77 693.169 L1372.33 693.169 L1372.89 693.169 L1373.45 693.169 L1374.01 693.169 L1374.57 693.169 L1375.13 693.169 L1375.69 693.169 L1376.25 693.169 L1376.81 693.169 L1377.37 693.169 L1377.93 693.169 L1378.49 693.169 L1379.04 693.169 L1379.6 693.169 L1380.16 693.169 L1380.72 693.169 L1381.28 693.169 L1381.84 693.169 L1382.4 693.169 L1382.96 693.169 L1383.52 693.169 L1384.08 693.169 L1384.64 693.169 L1385.2 693.169 L1385.76 693.169 L1386.31 693.169 L1386.87 693.169 L1387.43 693.169 L1387.99 693.169 L1388.55 693.169 L1389.11 693.169 L1389.67 693.169 L1390.23 693.169 L1390.79 693.169 L1391.35 693.169 L1391.91 693.169 L1392.47 693.169 L1393.03 693.169 L1393.58 693.169 L1394.14 693.169 L1394.7 693.169 L1395.26 693.169 L1395.82 693.169 L1396.38 693.169 L1396.94 693.169 L1397.5 693.169 L1398.06 693.169 L1398.62 693.169 L1399.18 693.169 L1399.74 693.169 L1400.3 693.169 L1400.86 693.169 L1401.41 693.169 L1401.97 693.169 L1402.53 693.169 L1403.09 693.169 L1403.65 693.169 L1404.21 693.169 L1404.77 693.169 L1405.33 693.169 L1405.89 693.169 L1406.45 693.169 L1407.01 693.169 L1407.57 693.169 L1408.13 693.169 L1408.68 693.169 L1409.24 693.169 L1409.8 693.169 L1410.36 693.169 L1410.92 693.169 L1411.48 693.169 L1412.04 693.169 L1412.6 693.169 L1413.16 693.169 L1413.72 693.169 L1414.28 693.169 L1414.84 693.169 L1415.4 693.169 L1415.95 693.169 L1416.51 693.169 L1417.07 693.169 L1417.63 693.169 L1418.19 693.169 L1418.75 693.169 L1419.31 693.169 L1419.87 693.169 L1420.43 693.169 L1420.99 693.169 L1421.55 693.169 L1422.11 693.169 L1422.67 693.169 L1423.23 693.169 L1423.78 693.169 L1424.34 693.169 L1424.9 693.169 L1425.46 693.169 L1426.02 693.169 L1426.58 693.169 L1427.14 693.169 L1427.7 693.169 L1428.26 693.169 L1428.82 693.169 L1429.38 693.169 L1429.94 693.169 L1430.5 693.169 L1431.05 693.169 L1431.61 693.169 L1432.17 693.169 L1432.73 693.169 L1433.29 693.169 L1433.85 693.169 L1434.41 693.169 L1434.97 693.169 L1435.53 693.169 L1436.09 693.169 L1436.65 693.169 L1437.21 693.169 L1437.77 693.169 L1438.33 693.169 L1438.88 693.169 L1439.44 693.169 L1440 693.169 L1440.56 693.169 L1441.12 693.169 L1441.68 693.169 L1442.24 693.169 L1442.8 693.169 L1443.36 693.169 L1443.92 693.169 L1444.48 693.169 L1445.04 693.169 L1445.6 693.169 L1446.15 693.169 L1446.71 693.169 L1447.27 693.169 L1447.83 693.169 L1448.39 693.169 L1448.95 693.169 L1449.51 693.169 L1450.07 693.169 L1450.63 693.169 L1451.19 693.169 L1451.75 693.169 L1452.31 693.169 L1452.87 693.169 L1453.42 693.169 L1453.98 693.169 L1454.54 693.169 L1455.1 693.169 L1455.66 693.169 L1456.22 693.169 L1456.78 693.169 L1457.34 693.169 L1457.9 693.169 L1458.46 693.169 L1459.02 693.169 L1459.58 693.169 L1460.14 693.169 L1460.7 693.169 L1461.25 693.169 L1461.81 693.169 L1462.37 693.169 L1462.93 693.169 L1463.49 693.169 L1464.05 693.169 L1464.61 693.169 L1465.17 693.169 L1465.73 693.169 L1466.29 693.169 L1466.85 693.169 L1467.41 693.169 L1467.97 693.169 L1468.52 693.169 L1469.08 693.169 L1469.64 693.169 L1470.2 693.169 L1470.76 693.169 L1471.32 693.169 L1471.88 693.169 L1472.44 693.169 L1473 693.169 L1473.56 693.169 L1474.12 693.169 L1474.68 693.169 L1475.24 693.169 L1475.79 693.169 L1476.35 693.169 L1476.91 693.169 L1477.47 693.169 L1478.03 693.169 L1478.59 693.169 L1479.15 693.169 L1479.71 693.169 L1480.27 693.169 L1480.83 693.169 L1481.39 693.169 L1481.95 693.169 L1482.51 693.169 L1483.07 693.169 L1483.62 693.169 L1484.18 693.169 L1484.74 693.169 L1485.3 693.169 L1485.86 693.169 L1486.42 693.169 L1486.98 693.169 L1487.54 693.169 L1488.1 693.169 L1488.66 693.169 L1489.22 693.169 L1489.78 693.169 L1490.34 693.169 L1490.89 693.169 L1491.45 693.169 L1492.01 693.169 L1492.57 693.169 L1493.13 693.169 L1493.69 693.169 L1494.25 693.169 L1494.81 693.169 L1495.37 693.169 L1495.93 693.169 L1496.49 693.169 L1497.05 693.169 L1497.61 693.169 L1498.16 693.169 L1498.72 693.169 L1499.28 693.169 L1499.84 693.169 L1500.4 693.169 L1500.96 693.169 L1501.52 693.169 L1502.08 693.169 L1502.64 693.169 L1503.2 693.169 L1503.76 693.169 L1504.32 693.169 L1504.88 693.169 L1505.44 693.169 L1505.99 693.169 L1506.55 693.169 L1507.11 693.169 L1507.67 693.169 L1508.23 693.169 L1508.79 693.169 L1509.35 693.169 L1509.91 693.169 L1510.47 693.169 L1511.03 693.169 L1511.59 693.169 L1512.15 693.169 L1512.71 693.169 L1513.26 693.169 L1513.82 693.169 L1514.38 693.169 L1514.94 693.169 L1515.5 693.169 L1516.06 693.169 L1516.62 693.169 L1517.18 693.169 L1517.74 693.169 L1518.3 693.169 L1518.86 693.169 L1519.42 693.169 L1519.98 693.169 L1520.53 693.169 L1521.09 693.169 L1521.65 693.169 L1522.21 693.169 L1522.77 693.169 L1523.33 693.169 L1523.89 693.169 L1524.45 693.169 L1525.01 693.169 L1525.57 693.169 L1526.13 693.169 L1526.69 693.169 L1527.25 693.169 L1527.81 693.169 L1528.36 693.169 L1528.92 693.169 L1529.48 693.169 L1530.04 693.169 L1530.6 693.169 L1531.16 693.169 L1531.72 693.169 L1532.28 693.169 L1532.84 693.169 L1533.4 693.169 L1533.96 693.169 L1534.52 693.169 L1535.08 693.169 L1535.63 693.169 L1536.19 693.169 L1536.75 693.169 L1537.31 693.169 L1537.87 693.169 L1538.43 693.169 L1538.99 693.169 L1539.55 693.169 L1540.11 693.169 L1540.67 693.169 L1541.23 693.169 L1541.79 693.169 L1542.35 693.169 L1542.9 693.169 L1543.46 693.169 L1544.02 693.169 L1544.58 693.169 L1545.14 693.169 L1545.7 693.169 L1546.26 693.169 L1546.82 693.169 L1547.38 693.169 L1547.94 693.169 L1548.5 693.169 L1549.06 693.169 L1549.62 693.169 L1550.18 693.169 L1550.73 693.169 L1551.29 693.169 L1551.85 693.169 L1552.41 693.169 L1552.97 693.169 L1553.53 693.169 L1554.09 693.169 L1554.65 693.169 L1555.21 693.169 L1555.77 693.169 L1556.33 693.169 L1556.89 693.169 L1557.45 693.169 L1558 693.169 L1558.56 693.169 L1559.12 693.169 L1559.68 693.169 L1560.24 693.169 L1560.8 693.169 L1561.36 693.169 L1561.92 693.169 L1562.48 693.169 L1563.04 693.169 L1563.6 693.169 L1564.16 693.169 L1564.72 693.169 L1565.28 693.169 L1565.83 693.169 L1566.39 693.169 L1566.95 693.169 L1567.51 693.169 L1568.07 693.169 L1568.63 693.169 L1569.19 693.169 L1569.75 693.169 L1570.31 693.169 L1570.87 693.169 L1571.43 693.169 L1571.99 693.169 L1572.55 693.169 L1573.1 693.169 L1573.66 693.169 L1574.22 693.169 L1574.78 693.169 L1575.34 693.169 L1575.9 693.169 L1576.46 693.169 L1577.02 693.169 L1577.58 693.169 L1578.14 693.169 L1578.7 693.169 L1579.26 693.169 L1579.82 693.169 L1580.37 693.169 L1580.93 693.169 L1581.49 693.169 L1582.05 693.169 L1582.61 693.169 L1583.17 693.169 L1583.73 693.169 L1584.29 693.169 L1584.85 693.169 L1585.41 693.169 L1585.97 693.169 L1586.53 693.169 L1587.09 693.169 L1587.65 693.169 L1588.2 693.169 L1588.76 693.169 L1589.32 693.169 L1589.88 693.169 L1590.44 693.169 L1591 693.169 L1591.56 693.169 L1592.12 693.169 L1592.68 693.169 L1593.24 693.169 L1593.8 693.169 L1594.36 693.169 L1594.92 693.169 L1595.47 693.169 L1596.03 693.169 L1596.59 693.169 L1597.15 693.169 L1597.71 693.169 L1598.27 693.169 L1598.83 693.169 L1599.39 693.169 L1599.95 693.169 L1600.51 693.169 L1601.07 693.169 L1601.63 693.169 L1602.19 693.169 L1602.74 693.169 L1603.3 693.169 L1603.86 693.169 L1604.42 693.169 L1604.98 693.169 L1605.54 693.169 L1606.1 693.169 L1606.66 693.169 L1607.22 693.169 L1607.78 693.169 L1608.34 693.169 L1608.9 693.169 L1609.46 693.169 L1610.02 693.169 L1610.57 693.169 L1611.13 693.169 L1611.69 693.169 L1612.25 693.169 L1612.81 693.169 L1613.37 693.169 L1613.93 693.169 L1614.49 693.169 L1615.05 693.169 L1615.61 693.169 L1616.17 693.169 L1616.73 693.169 L1617.29 693.169 L1617.84 693.169 L1618.4 693.169 L1618.96 693.169 L1619.52 693.169 L1620.08 693.169 L1620.64 693.169 L1621.2 693.169 L1621.76 693.169 L1622.32 693.169 L1622.88 693.169 L1623.44 693.169 L1624 693.169 L1624.56 693.169 L1625.11 693.169 L1625.67 693.169 L1626.23 693.169 L1626.79 693.169 L1627.35 693.169 L1627.91 693.169 L1628.47 693.169 L1629.03 693.169 L1629.59 693.169 L1630.15 693.169 L1630.71 693.169 L1631.27 693.169 L1631.83 693.169 L1632.39 693.169 L1632.94 693.169 L1633.5 693.169 L1634.06 693.169 L1634.62 693.169 L1635.18 693.169 L1635.74 693.169 L1636.3 693.169 L1636.86 693.169 L1637.42 693.169 L1637.98 693.169 L1638.54 693.169 L1639.1 693.169 L1639.66 693.169 L1640.21 693.169 L1640.77 693.169 L1641.33 693.169 L1641.89 693.169 L1642.45 693.169 L1643.01 693.169 L1643.57 693.169 L1644.13 693.169 L1644.69 693.169 L1645.25 693.169 L1645.81 693.169 L1646.37 693.169 L1646.93 693.169 L1647.48 693.169 L1648.04 693.169 L1648.6 693.169 L1649.16 693.169 L1649.72 693.169 L1650.28 693.169 L1650.84 693.169 L1651.4 693.169 L1651.96 693.169 L1652.52 693.169 L1653.08 693.169 L1653.64 693.169 L1654.2 693.169 L1654.76 693.169 L1655.31 693.169 L1655.87 693.169 L1656.43 693.169 L1656.99 693.169 L1657.55 693.169 L1658.11 693.169 L1658.67 693.169 L1659.23 693.169 L1659.79 693.169 L1660.35 693.169 L1660.91 693.169 L1661.47 693.169 L1662.03 693.169 L1662.58 693.169 L1663.14 693.169 L1663.7 693.169 L1664.26 693.169 L1664.82 693.169 L1665.38 693.169 L1665.94 693.169 L1666.5 693.169 L1667.06 693.169 L1667.62 693.169 L1668.18 693.169 L1668.74 693.169 L1669.3 693.169 L1669.85 693.169 L1670.41 693.169 L1670.97 693.169 L1671.53 693.169 L1672.09 693.169 L1672.65 693.169 L1673.21 693.169 L1673.77 693.169 L1674.33 693.169 L1674.89 693.169 L1675.45 693.169 L1676.01 693.169 L1676.57 693.169 L1677.13 693.169 L1677.68 693.169 L1678.24 693.169 L1678.8 693.169 L1679.36 693.169 L1679.92 693.169 L1680.48 693.169 L1681.04 693.169 L1681.6 693.169 L1682.16 693.169 L1682.72 693.169 L1683.28 693.169 L1683.84 693.169 L1684.4 693.169 L1684.95 693.169 L1685.51 693.169 L1686.07 693.169 L1686.63 693.169 L1687.19 693.169 L1687.75 693.169 L1688.31 693.169 L1688.87 693.169 L1689.43 693.169 L1689.99 693.169 L1690.55 693.169 L1691.11 693.169 L1691.67 693.169 L1692.23 693.169 L1692.78 693.169 L1693.34 693.169 L1693.9 693.169 L1694.46 693.169 L1695.02 693.169 L1695.58 693.169 L1696.14 693.169 L1696.7 693.169 L1697.26 693.169 L1697.82 693.169 L1698.38 693.169 L1698.94 693.169 L1699.5 693.169 L1700.05 693.169 L1700.61 693.169 L1701.17 693.169 L1701.73 693.169 L1702.29 693.169 L1702.85 693.169 L1703.41 693.169 L1703.97 693.169 L1704.53 693.169 L1705.09 693.169 L1705.65 693.169 L1706.21 693.169 L1706.77 693.169 L1707.32 693.169 L1707.88 693.169 L1708.44 693.169 L1709 693.169 L1709.56 693.169 L1710.12 693.169 L1710.68 693.169 L1711.24 693.169 L1711.8 693.169 L1712.36 693.169 L1712.92 693.169 L1713.48 693.169 L1714.04 693.169 L1714.6 693.169 L1715.15 693.169 L1715.71 693.169 L1716.27 693.169 L1716.83 693.169 L1717.39 693.169 L1717.95 693.169 L1718.51 693.169 L1719.07 693.169 L1719.63 693.169 L1720.19 693.169 L1720.75 693.169 L1721.31 693.169 L1721.87 693.169 L1722.42 693.169 L1722.98 693.169 L1723.54 693.169 L1724.1 693.169 L1724.66 693.169 L1725.22 693.169 L1725.78 693.169 L1726.34 693.169 L1726.9 693.169 L1727.46 693.169 L1728.02 693.169 L1728.58 693.169 L1729.14 693.169 L1729.69 693.169 L1730.25 693.169 L1730.81 693.169 L1731.37 693.169 L1731.93 693.169 L1732.49 693.169 L1733.05 693.169 L1733.61 693.169 L1734.17 693.169 L1734.73 693.169 L1735.29 693.169 L1735.85 693.169 L1736.41 693.169 L1736.97 693.169 L1737.52 693.169 L1738.08 693.169 L1738.64 693.169 L1739.2 693.169 L1739.76 693.169 L1740.32 693.169 L1740.88 693.169 L1741.44 693.169 L1742 693.169 L1742.56 693.169 L1743.12 693.169 L1743.68 693.169 L1744.24 693.169 L1744.79 693.169 L1745.35 693.169 L1745.91 693.169 L1746.47 693.169 L1747.03 693.169 L1747.59 693.169 L1748.15 693.169 L1748.71 693.169 L1749.27 693.169 L1749.83 693.169 L1750.39 693.169 L1750.95 693.169 L1751.51 693.169 L1752.06 693.169 L1752.62 693.169 L1753.18 693.169 L1753.74 693.169 L1754.3 693.169 L1754.86 693.169 L1755.42 693.169 L1755.98 693.169 L1756.54 693.169 L1757.1 693.169 L1757.66 693.169 L1758.22 693.169 L1758.78 693.169 L1759.34 693.169 L1759.89 693.169 L1760.45 693.169 L1761.01 693.169 L1761.57 693.169 L1762.13 693.169 L1762.69 693.169 L1763.25 693.169 L1763.81 693.169 L1764.37 693.169 L1764.93 693.169 L1765.49 693.169 L1766.05 693.169 L1766.61 693.169 L1767.16 693.169 L1767.72 693.169 L1768.28 693.169 L1768.84 693.169 L1769.4 693.169 L1769.96 693.169 L1770.52 693.169 L1771.08 693.169 L1771.64 693.169 L1772.2 693.169 L1772.76 693.169 L1773.32 693.169 L1773.88 693.169 L1774.43 693.169 L1774.99 693.169 L1775.55 693.169 L1776.11 693.169 L1776.67 693.169 L1777.23 693.169 L1777.79 693.169 L1778.35 693.169 L1778.91 693.169 L1779.47 693.169 L1780.03 693.169 L1780.59 693.169 L1781.15 693.169 L1781.71 693.169 L1782.26 693.169 L1782.82 693.169 L1783.38 693.169 L1783.94 693.169 L1784.5 693.169 L1785.06 693.169 L1785.62 693.169 L1786.18 693.169 L1786.74 693.169 L1787.3 693.169 L1787.86 693.169 L1788.42 693.169 L1788.98 693.169 L1789.53 693.169 L1790.09 693.169 L1790.65 693.169 L1791.21 693.169 L1791.77 693.169 L1792.33 693.169 L1792.89 693.169 L1793.45 693.169 L1794.01 693.169 L1794.57 693.169 L1795.13 693.169 L1795.69 693.169 L1796.25 693.169 L1796.8 693.169 L1797.36 693.169 L1797.92 693.169 L1798.48 693.169 L1799.04 693.169 L1799.6 693.169 L1800.16 693.169 L1800.72 693.169 L1801.28 693.169 L1801.84 693.169 L1802.4 693.169 L1802.96 693.169 L1803.52 693.169 L1804.08 693.169 L1804.63 693.169 L1805.19 693.169 L1805.75 693.169 L1806.31 693.169 L1806.87 693.169 L1807.43 693.169 L1807.99 693.169 L1808.55 693.169 L1809.11 693.169 L1809.67 693.169 L1810.23 693.169 L1810.79 693.169 L1811.35 693.169 L1811.9 693.169 L1812.46 693.169 L1813.02 693.169 L1813.58 693.169 L1814.14 693.169 L1814.7 693.169 L1815.26 693.169 L1815.82 693.169 L1816.38 693.169 L1816.94 693.169 L1817.5 693.169 L1818.06 693.169 L1818.62 693.169 L1819.18 693.169 L1819.73 693.169 L1820.29 693.169 L1820.85 693.169 L1821.41 693.169 L1821.97 693.169 L1822.53 693.169 L1823.09 693.169 L1823.65 693.169 L1824.21 693.169 L1824.77 693.169 L1825.33 693.169 L1825.89 693.169 L1826.45 693.169 L1827 693.169 L1827.56 693.169 L1828.12 693.169 L1828.68 693.169 L1829.24 693.169 L1829.8 693.169 L1830.36 693.169 L1830.92 693.169 L1831.48 693.169 L1832.04 693.169 L1832.6 693.169 L1833.16 693.169 L1833.72 693.169 L1834.27 693.169 L1834.83 693.169 L1835.39 693.169 L1835.95 693.169 L1836.51 693.169 L1837.07 693.169 L1837.63 693.169 L1838.19 693.169 L1838.19 684.245 L1837.63 684.245 L1837.07 684.245 L1836.51 684.245 L1835.95 684.245 L1835.39 684.245 L1834.83 684.245 L1834.27 684.245 L1833.72 684.245 L1833.16 684.245 L1832.6 684.245 L1832.04 684.245 L1831.48 684.245 L1830.92 684.245 L1830.36 684.245 L1829.8 684.245 L1829.24 684.245 L1828.68 684.245 L1828.12 684.245 L1827.56 684.245 L1827 684.245 L1826.45 684.245 L1825.89 684.245 L1825.33 684.245 L1824.77 684.245 L1824.21 684.245 L1823.65 684.245 L1823.09 684.245 L1822.53 684.245 L1821.97 684.245 L1821.41 684.245 L1820.85 684.245 L1820.29 684.245 L1819.73 684.245 L1819.18 684.245 L1818.62 684.245 L1818.06 684.245 L1817.5 684.245 L1816.94 684.245 L1816.38 684.245 L1815.82 684.245 L1815.26 684.245 L1814.7 684.245 L1814.14 684.245 L1813.58 684.245 L1813.02 684.245 L1812.46 684.245 L1811.9 684.245 L1811.35 684.245 L1810.79 684.245 L1810.23 684.245 L1809.67 684.245 L1809.11 684.245 L1808.55 684.245 L1807.99 684.245 L1807.43 684.245 L1806.87 684.245 L1806.31 684.245 L1805.75 684.245 L1805.19 684.245 L1804.63 684.245 L1804.08 684.245 L1803.52 684.245 L1802.96 684.245 L1802.4 684.245 L1801.84 684.245 L1801.28 684.245 L1800.72 684.245 L1800.16 684.245 L1799.6 684.245 L1799.04 684.245 L1798.48 684.245 L1797.92 684.245 L1797.36 684.245 L1796.8 684.245 L1796.25 684.245 L1795.69 684.245 L1795.13 684.245 L1794.57 684.245 L1794.01 684.245 L1793.45 684.245 L1792.89 684.245 L1792.33 684.245 L1791.77 684.245 L1791.21 684.245 L1790.65 684.245 L1790.09 684.245 L1789.53 684.245 L1788.98 684.245 L1788.42 684.245 L1787.86 684.245 L1787.3 684.245 L1786.74 684.245 L1786.18 684.245 L1785.62 684.245 L1785.06 684.245 L1784.5 684.245 L1783.94 684.245 L1783.38 684.245 L1782.82 684.245 L1782.26 684.245 L1781.71 684.245 L1781.15 684.245 L1780.59 684.245 L1780.03 684.245 L1779.47 684.245 L1778.91 684.245 L1778.35 684.245 L1777.79 684.245 L1777.23 684.245 L1776.67 684.245 L1776.11 684.245 L1775.55 684.245 L1774.99 684.245 L1774.43 684.245 L1773.88 684.245 L1773.32 684.245 L1772.76 684.245 L1772.2 684.245 L1771.64 684.245 L1771.08 684.245 L1770.52 684.245 L1769.96 684.245 L1769.4 684.245 L1768.84 684.245 L1768.28 684.245 L1767.72 684.245 L1767.16 684.245 L1766.61 684.245 L1766.05 684.245 L1765.49 684.245 L1764.93 684.245 L1764.37 684.245 L1763.81 684.245 L1763.25 684.245 L1762.69 684.245 L1762.13 684.245 L1761.57 684.245 L1761.01 684.245 L1760.45 684.245 L1759.89 684.245 L1759.34 684.245 L1758.78 684.245 L1758.22 684.245 L1757.66 684.245 L1757.1 684.245 L1756.54 684.245 L1755.98 684.245 L1755.42 684.245 L1754.86 684.245 L1754.3 684.245 L1753.74 684.245 L1753.18 684.245 L1752.62 684.245 L1752.06 684.245 L1751.51 684.245 L1750.95 684.245 L1750.39 684.245 L1749.83 684.245 L1749.27 684.245 L1748.71 684.245 L1748.15 684.245 L1747.59 684.245 L1747.03 684.245 L1746.47 684.245 L1745.91 684.245 L1745.35 684.245 L1744.79 684.245 L1744.24 684.245 L1743.68 684.245 L1743.12 684.245 L1742.56 684.245 L1742 684.245 L1741.44 684.245 L1740.88 684.245 L1740.32 684.245 L1739.76 684.245 L1739.2 684.245 L1738.64 684.245 L1738.08 684.245 L1737.52 684.245 L1736.97 684.245 L1736.41 684.245 L1735.85 684.245 L1735.29 684.245 L1734.73 684.245 L1734.17 684.245 L1733.61 684.245 L1733.05 684.245 L1732.49 684.245 L1731.93 684.245 L1731.37 684.245 L1730.81 684.245 L1730.25 684.245 L1729.69 684.245 L1729.14 684.245 L1728.58 684.245 L1728.02 684.245 L1727.46 684.245 L1726.9 684.245 L1726.34 684.245 L1725.78 684.245 L1725.22 684.245 L1724.66 684.245 L1724.1 684.245 L1723.54 684.245 L1722.98 684.245 L1722.42 684.245 L1721.87 684.245 L1721.31 684.245 L1720.75 684.245 L1720.19 684.245 L1719.63 684.245 L1719.07 684.245 L1718.51 684.245 L1717.95 684.245 L1717.39 684.245 L1716.83 684.245 L1716.27 684.245 L1715.71 684.245 L1715.15 684.245 L1714.6 684.245 L1714.04 684.245 L1713.48 684.245 L1712.92 684.245 L1712.36 684.245 L1711.8 684.245 L1711.24 684.245 L1710.68 684.245 L1710.12 684.245 L1709.56 684.245 L1709 684.245 L1708.44 684.245 L1707.88 684.245 L1707.32 684.245 L1706.77 684.245 L1706.21 684.245 L1705.65 684.245 L1705.09 684.245 L1704.53 684.245 L1703.97 684.245 L1703.41 684.245 L1702.85 684.245 L1702.29 684.245 L1701.73 684.245 L1701.17 684.245 L1700.61 684.245 L1700.05 684.245 L1699.5 684.245 L1698.94 684.245 L1698.38 684.245 L1697.82 684.245 L1697.26 684.245 L1696.7 684.245 L1696.14 684.245 L1695.58 684.245 L1695.02 684.245 L1694.46 684.245 L1693.9 684.245 L1693.34 684.245 L1692.78 684.245 L1692.23 684.245 L1691.67 684.245 L1691.11 684.245 L1690.55 684.245 L1689.99 684.245 L1689.43 684.245 L1688.87 684.245 L1688.31 684.245 L1687.75 684.245 L1687.19 684.245 L1686.63 684.245 L1686.07 684.245 L1685.51 684.245 L1684.95 684.245 L1684.4 684.245 L1683.84 684.245 L1683.28 684.245 L1682.72 684.245 L1682.16 684.245 L1681.6 684.245 L1681.04 684.245 L1680.48 684.245 L1679.92 684.245 L1679.36 684.245 L1678.8 684.245 L1678.24 684.245 L1677.68 684.245 L1677.13 684.245 L1676.57 684.245 L1676.01 684.245 L1675.45 684.245 L1674.89 684.245 L1674.33 684.245 L1673.77 684.245 L1673.21 684.245 L1672.65 684.245 L1672.09 684.245 L1671.53 684.245 L1670.97 684.245 L1670.41 684.245 L1669.85 684.245 L1669.3 684.245 L1668.74 684.245 L1668.18 684.245 L1667.62 684.245 L1667.06 684.245 L1666.5 684.245 L1665.94 684.245 L1665.38 684.245 L1664.82 684.245 L1664.26 684.245 L1663.7 684.245 L1663.14 684.245 L1662.58 684.245 L1662.03 684.245 L1661.47 684.245 L1660.91 684.245 L1660.35 684.245 L1659.79 684.245 L1659.23 684.245 L1658.67 684.245 L1658.11 684.245 L1657.55 684.245 L1656.99 684.245 L1656.43 684.245 L1655.87 684.245 L1655.31 684.245 L1654.76 684.245 L1654.2 684.245 L1653.64 684.245 L1653.08 684.245 L1652.52 684.245 L1651.96 684.245 L1651.4 684.245 L1650.84 684.245 L1650.28 684.245 L1649.72 684.245 L1649.16 684.245 L1648.6 684.245 L1648.04 684.245 L1647.48 684.245 L1646.93 684.245 L1646.37 684.245 L1645.81 684.245 L1645.25 684.245 L1644.69 684.245 L1644.13 684.245 L1643.57 684.245 L1643.01 684.245 L1642.45 684.245 L1641.89 684.245 L1641.33 684.245 L1640.77 684.245 L1640.21 684.245 L1639.66 684.245 L1639.1 684.245 L1638.54 684.245 L1637.98 684.245 L1637.42 684.245 L1636.86 684.245 L1636.3 684.245 L1635.74 684.245 L1635.18 684.245 L1634.62 684.245 L1634.06 684.245 L1633.5 684.245 L1632.94 684.245 L1632.39 684.245 L1631.83 684.245 L1631.27 684.245 L1630.71 684.245 L1630.15 684.245 L1629.59 684.245 L1629.03 684.245 L1628.47 684.245 L1627.91 684.245 L1627.35 684.245 L1626.79 684.245 L1626.23 684.245 L1625.67 684.245 L1625.11 684.245 L1624.56 684.245 L1624 684.245 L1623.44 684.245 L1622.88 684.245 L1622.32 684.245 L1621.76 684.245 L1621.2 684.245 L1620.64 684.245 L1620.08 684.245 L1619.52 684.245 L1618.96 684.245 L1618.4 684.245 L1617.84 684.245 L1617.29 684.245 L1616.73 684.245 L1616.17 684.245 L1615.61 684.245 L1615.05 684.245 L1614.49 684.245 L1613.93 684.245 L1613.37 684.245 L1612.81 684.245 L1612.25 684.245 L1611.69 684.245 L1611.13 684.245 L1610.57 684.245 L1610.02 684.245 L1609.46 684.245 L1608.9 684.245 L1608.34 684.245 L1607.78 684.245 L1607.22 684.245 L1606.66 684.245 L1606.1 684.245 L1605.54 684.245 L1604.98 684.245 L1604.42 684.245 L1603.86 684.245 L1603.3 684.245 L1602.74 684.245 L1602.19 684.245 L1601.63 684.245 L1601.07 684.245 L1600.51 684.245 L1599.95 684.245 L1599.39 684.245 L1598.83 684.245 L1598.27 684.245 L1597.71 684.245 L1597.15 684.245 L1596.59 684.245 L1596.03 684.245 L1595.47 684.245 L1594.92 684.245 L1594.36 684.245 L1593.8 684.245 L1593.24 684.245 L1592.68 684.245 L1592.12 684.245 L1591.56 684.245 L1591 684.245 L1590.44 684.245 L1589.88 684.245 L1589.32 684.245 L1588.76 684.245 L1588.2 684.245 L1587.65 684.245 L1587.09 684.245 L1586.53 684.245 L1585.97 684.245 L1585.41 684.245 L1584.85 684.245 L1584.29 684.245 L1583.73 684.245 L1583.17 684.245 L1582.61 684.245 L1582.05 684.245 L1581.49 684.245 L1580.93 684.245 L1580.37 684.245 L1579.82 684.245 L1579.26 684.245 L1578.7 684.245 L1578.14 684.245 L1577.58 684.245 L1577.02 684.245 L1576.46 684.245 L1575.9 684.245 L1575.34 684.245 L1574.78 684.245 L1574.22 684.245 L1573.66 684.245 L1573.1 684.245 L1572.55 684.245 L1571.99 684.245 L1571.43 684.245 L1570.87 684.245 L1570.31 684.245 L1569.75 684.245 L1569.19 684.245 L1568.63 684.245 L1568.07 684.245 L1567.51 684.245 L1566.95 684.245 L1566.39 684.245 L1565.83 684.245 L1565.28 684.245 L1564.72 684.245 L1564.16 684.245 L1563.6 684.245 L1563.04 684.245 L1562.48 684.245 L1561.92 684.245 L1561.36 684.245 L1560.8 684.245 L1560.24 684.245 L1559.68 684.245 L1559.12 684.245 L1558.56 684.245 L1558 684.245 L1557.45 684.245 L1556.89 684.245 L1556.33 684.245 L1555.77 684.245 L1555.21 684.245 L1554.65 684.245 L1554.09 684.245 L1553.53 684.245 L1552.97 684.245 L1552.41 684.245 L1551.85 684.245 L1551.29 684.245 L1550.73 684.245 L1550.18 684.245 L1549.62 684.245 L1549.06 684.245 L1548.5 684.245 L1547.94 684.245 L1547.38 684.245 L1546.82 684.245 L1546.26 684.245 L1545.7 684.245 L1545.14 684.245 L1544.58 684.245 L1544.02 684.245 L1543.46 684.245 L1542.9 684.245 L1542.35 684.245 L1541.79 684.245 L1541.23 684.245 L1540.67 684.245 L1540.11 684.245 L1539.55 684.245 L1538.99 684.245 L1538.43 684.245 L1537.87 684.245 L1537.31 684.245 L1536.75 684.245 L1536.19 684.245 L1535.63 684.245 L1535.08 684.245 L1534.52 684.245 L1533.96 684.245 L1533.4 684.245 L1532.84 684.245 L1532.28 684.245 L1531.72 684.245 L1531.16 684.245 L1530.6 684.245 L1530.04 684.245 L1529.48 684.245 L1528.92 684.245 L1528.36 684.245 L1527.81 684.245 L1527.25 684.245 L1526.69 684.245 L1526.13 684.245 L1525.57 684.245 L1525.01 684.245 L1524.45 684.245 L1523.89 684.245 L1523.33 684.245 L1522.77 684.245 L1522.21 684.245 L1521.65 684.245 L1521.09 684.245 L1520.53 684.245 L1519.98 684.245 L1519.42 684.245 L1518.86 684.245 L1518.3 684.245 L1517.74 684.245 L1517.18 684.245 L1516.62 684.245 L1516.06 684.245 L1515.5 684.245 L1514.94 684.245 L1514.38 684.245 L1513.82 684.245 L1513.26 684.245 L1512.71 684.245 L1512.15 684.245 L1511.59 684.245 L1511.03 684.245 L1510.47 684.245 L1509.91 684.245 L1509.35 684.245 L1508.79 684.245 L1508.23 684.245 L1507.67 684.245 L1507.11 684.245 L1506.55 684.245 L1505.99 684.245 L1505.44 684.245 L1504.88 684.245 L1504.32 684.245 L1503.76 684.245 L1503.2 684.245 L1502.64 684.245 L1502.08 684.245 L1501.52 684.245 L1500.96 684.245 L1500.4 684.245 L1499.84 684.245 L1499.28 684.245 L1498.72 684.245 L1498.16 684.245 L1497.61 684.245 L1497.05 684.245 L1496.49 684.245 L1495.93 684.245 L1495.37 684.245 L1494.81 684.245 L1494.25 684.245 L1493.69 684.245 L1493.13 684.245 L1492.57 684.245 L1492.01 684.245 L1491.45 684.245 L1490.89 684.245 L1490.34 684.245 L1489.78 684.245 L1489.22 684.245 L1488.66 684.245 L1488.1 684.245 L1487.54 684.245 L1486.98 684.245 L1486.42 684.245 L1485.86 684.245 L1485.3 684.245 L1484.74 684.245 L1484.18 684.245 L1483.62 684.245 L1483.07 684.245 L1482.51 684.245 L1481.95 684.245 L1481.39 684.245 L1480.83 684.245 L1480.27 684.245 L1479.71 684.245 L1479.15 684.245 L1478.59 684.245 L1478.03 684.245 L1477.47 684.245 L1476.91 684.245 L1476.35 684.245 L1475.79 684.245 L1475.24 684.245 L1474.68 684.245 L1474.12 684.245 L1473.56 684.245 L1473 684.245 L1472.44 684.245 L1471.88 684.245 L1471.32 684.245 L1470.76 684.245 L1470.2 684.245 L1469.64 684.245 L1469.08 684.245 L1468.52 684.245 L1467.97 684.245 L1467.41 684.245 L1466.85 684.245 L1466.29 684.245 L1465.73 684.245 L1465.17 684.245 L1464.61 684.245 L1464.05 684.245 L1463.49 684.245 L1462.93 684.245 L1462.37 684.245 L1461.81 684.245 L1461.25 684.245 L1460.7 684.245 L1460.14 684.245 L1459.58 684.245 L1459.02 684.245 L1458.46 684.245 L1457.9 684.245 L1457.34 684.245 L1456.78 684.245 L1456.22 684.245 L1455.66 684.245 L1455.1 684.245 L1454.54 684.245 L1453.98 684.245 L1453.42 684.245 L1452.87 684.245 L1452.31 684.245 L1451.75 684.245 L1451.19 684.245 L1450.63 684.245 L1450.07 684.245 L1449.51 684.245 L1448.95 684.245 L1448.39 684.245 L1447.83 684.245 L1447.27 684.245 L1446.71 684.245 L1446.15 684.245 L1445.6 684.245 L1445.04 684.245 L1444.48 684.245 L1443.92 684.245 L1443.36 684.245 L1442.8 684.245 L1442.24 684.245 L1441.68 684.245 L1441.12 684.245 L1440.56 684.245 L1440 684.245 L1439.44 684.245 L1438.88 684.245 L1438.33 684.245 L1437.77 684.245 L1437.21 684.245 L1436.65 684.245 L1436.09 684.245 L1435.53 684.245 L1434.97 684.245 L1434.41 684.245 L1433.85 684.245 L1433.29 684.245 L1432.73 684.245 L1432.17 684.245 L1431.61 684.245 L1431.05 684.245 L1430.5 684.245 L1429.94 684.245 L1429.38 684.245 L1428.82 684.245 L1428.26 684.245 L1427.7 684.245 L1427.14 684.245 L1426.58 684.245 L1426.02 684.245 L1425.46 684.245 L1424.9 684.245 L1424.34 684.245 L1423.78 684.245 L1423.23 684.245 L1422.67 684.245 L1422.11 684.245 L1421.55 684.245 L1420.99 684.245 L1420.43 684.245 L1419.87 684.245 L1419.31 684.245 L1418.75 684.245 L1418.19 684.245 L1417.63 684.245 L1417.07 684.245 L1416.51 684.245 L1415.95 684.245 L1415.4 684.245 L1414.84 684.245 L1414.28 684.245 L1413.72 684.245 L1413.16 684.245 L1412.6 684.245 L1412.04 684.245 L1411.48 684.245 L1410.92 684.245 L1410.36 684.245 L1409.8 684.245 L1409.24 684.245 L1408.68 684.245 L1408.13 684.245 L1407.57 684.245 L1407.01 684.245 L1406.45 684.245 L1405.89 684.245 L1405.33 684.245 L1404.77 684.245 L1404.21 684.245 L1403.65 684.245 L1403.09 684.245 L1402.53 684.245 L1401.97 684.245 L1401.41 684.245 L1400.86 684.245 L1400.3 684.245 L1399.74 684.245 L1399.18 684.245 L1398.62 684.245 L1398.06 684.245 L1397.5 684.245 L1396.94 684.245 L1396.38 684.245 L1395.82 684.245 L1395.26 684.245 L1394.7 684.245 L1394.14 684.245 L1393.58 684.245 L1393.03 684.245 L1392.47 684.245 L1391.91 684.245 L1391.35 684.245 L1390.79 684.245 L1390.23 684.245 L1389.67 684.245 L1389.11 684.245 L1388.55 684.245 L1387.99 684.245 L1387.43 684.245 L1386.87 684.245 L1386.31 684.245 L1385.76 684.245 L1385.2 684.245 L1384.64 684.245 L1384.08 684.245 L1383.52 684.245 L1382.96 684.245 L1382.4 684.245 L1381.84 684.245 L1381.28 684.245 L1380.72 684.245 L1380.16 684.245 L1379.6 684.245 L1379.04 684.245 L1378.49 684.245 L1377.93 684.245 L1377.37 684.245 L1376.81 684.245 L1376.25 684.245 L1375.69 684.245 L1375.13 684.245 L1374.57 684.245 L1374.01 684.245 L1373.45 684.245 L1372.89 684.245 L1372.33 684.245 L1371.77 684.245 L1371.21 684.245 L1370.66 684.245 L1370.1 684.245 L1369.54 684.245 L1368.98 684.245 L1368.42 684.245 L1367.86 684.245 L1367.3 684.245 L1366.74 684.245 L1366.18 684.245 L1365.62 684.245 L1365.06 684.245 L1364.5 684.245 L1363.94 684.245 L1363.39 684.245 L1362.83 684.245 L1362.27 684.245 L1361.71 684.245 L1361.15 684.245 L1360.59 684.245 L1360.03 684.245 L1359.47 684.245 L1358.91 684.245 L1358.35 684.245 L1357.79 684.245 L1357.23 684.245 L1356.67 684.245 L1356.12 684.245 L1355.56 684.245 L1355 684.245 L1354.44 684.245 L1353.88 684.245 L1353.32 684.245 L1352.76 684.245 L1352.2 684.245 L1351.64 684.245 L1351.08 684.245 L1350.52 684.245 L1349.96 684.245 L1349.4 684.245 L1348.84 684.245 L1348.29 684.245 L1347.73 684.245 L1347.17 684.245 L1346.61 684.245 L1346.05 684.245 L1345.49 684.245 L1344.93 684.245 L1344.37 684.245 L1343.81 684.245 L1343.25 684.245 L1342.69 684.245 L1342.13 684.245 L1341.57 684.245 L1341.02 684.245 L1340.46 684.245 L1339.9 684.245 L1339.34 684.245 L1338.78 684.245 L1338.22 684.245 L1337.66 684.245 L1337.1 684.245 L1336.54 684.245 L1335.98 684.245 L1335.42 684.245 L1334.86 684.245 L1334.3 684.245 L1333.75 684.245 L1333.19 684.245 L1332.63 684.245 L1332.07 684.245 L1331.51 684.245 L1330.95 684.245 L1330.39 684.245 L1329.83 684.245 L1329.27 684.245 L1328.71 684.245 L1328.15 684.245 L1327.59 684.245 L1327.03 684.245 L1326.47 684.245 L1325.92 684.245 L1325.36 684.245 L1324.8 684.245 L1324.24 684.245 L1323.68 684.245 L1323.12 684.245 L1322.56 684.245 L1322 684.245 L1321.44 684.245 L1320.88 684.245 L1320.32 684.245 L1319.76 684.245 L1319.2 684.245 L1318.65 684.245 L1318.09 684.245 L1317.53 684.245 L1316.97 684.245 L1316.41 684.245 L1315.85 684.245 L1315.29 684.245 L1314.73 684.245 L1314.17 684.245 L1313.61 684.245 L1313.05 684.245 L1312.49 684.245 L1311.93 684.245 L1311.38 684.245 L1310.82 684.245 L1310.26 684.245 L1309.7 684.245 L1309.14 684.245 L1308.58 684.245 L1308.02 684.245 L1307.46 684.245 L1306.9 684.245 L1306.34 684.245 L1305.78 684.245 L1305.22 684.245 L1304.66 684.245 L1304.1 684.245 L1303.55 684.245 L1302.99 684.245 L1302.43 684.245 L1301.87 684.245 L1301.31 684.245 L1300.75 684.245 L1300.19 684.245 L1299.63 684.245 L1299.07 684.245 L1298.51 684.245 L1297.95 684.245 L1297.39 684.245 L1296.83 684.245 L1296.28 684.245 L1295.72 684.245 L1295.16 684.245 L1294.6 684.245 L1294.04 684.245 L1293.48 684.245 L1292.92 684.245 L1292.36 684.245 L1291.8 684.245 L1291.24 684.245 L1290.68 684.245 L1290.12 684.245 L1289.56 684.245 L1289 684.245 L1288.45 684.245 L1287.89 684.245 L1287.33 684.245 L1286.77 684.245 L1286.21 684.245 L1285.65 684.245 L1285.09 684.245 L1284.53 684.245 L1283.97 684.245 L1283.41 684.245 L1282.85 684.245 L1282.29 684.245 L1281.73 684.245 L1281.18 684.245 L1280.62 684.245 L1280.06 684.245 L1279.5 684.245 L1278.94 684.245 L1278.38 684.245 L1277.82 684.245 L1277.26 684.245 L1276.7 684.245 L1276.14 684.245 L1275.58 684.245 L1275.02 684.245 L1274.46 684.245 L1273.91 684.245 L1273.35 684.245 L1272.79 684.245 L1272.23 684.245 L1271.67 684.245 L1271.11 684.245 L1270.55 684.245 L1269.99 684.245 L1269.43 684.245 L1268.87 684.245 L1268.31 684.245 L1267.75 684.245 L1267.19 684.245 L1266.63 684.245 L1266.08 684.245 L1265.52 684.245 L1264.96 684.245 L1264.4 684.245 L1263.84 684.245 L1263.28 684.245 L1262.72 684.245 L1262.16 684.245 L1261.6 684.245 L1261.04 684.245 L1260.48 684.245 L1259.92 684.245 L1259.36 684.245 L1258.81 684.245 L1258.25 684.245 L1257.69 684.245 L1257.13 684.245 L1256.57 684.245 L1256.01 684.245 L1255.45 684.245 L1254.89 684.245 L1254.33 684.245 L1253.77 684.245 L1253.21 684.245 L1252.65 684.245 L1252.09 684.245 L1251.54 684.245 L1250.98 684.245 L1250.42 684.245 L1249.86 684.245 L1249.3 684.245 L1248.74 684.245 L1248.18 684.245 L1247.62 684.245 L1247.06 684.245 L1246.5 684.245 L1245.94 684.245 L1245.38 684.245 L1244.82 684.245 L1244.26 684.245 L1243.71 684.245 L1243.15 684.245 L1242.59 684.245 L1242.03 684.245 L1241.47 684.245 L1240.91 684.245 L1240.35 684.245 L1239.79 684.245 L1239.23 684.245 L1238.67 684.245 L1238.11 684.245 L1237.55 684.245 L1236.99 684.245 L1236.44 684.245 L1235.88 684.245 L1235.32 684.245 L1234.76 684.245 L1234.2 684.245 L1233.64 684.245 L1233.08 684.245 L1232.52 684.245 L1231.96 684.245 L1231.4 684.245 L1230.84 684.245 L1230.28 684.245 L1229.72 684.245 L1229.17 684.245 L1228.61 684.245 L1228.05 684.245 L1227.49 684.245 L1226.93 684.245 L1226.37 684.245 L1225.81 684.245 L1225.25 684.245 L1224.69 684.245 L1224.13 684.245 L1223.57 684.245 L1223.01 684.245 L1222.45 684.245 L1221.89 684.245 L1221.34 684.245 L1220.78 684.245 L1220.22 684.245 L1219.66 684.245 L1219.1 684.245 L1218.54 684.245 L1217.98 684.245 L1217.42 684.245 L1216.86 684.245 L1216.3 684.245 L1215.74 684.245 L1215.18 684.245 L1214.62 684.245 L1214.07 684.245 L1213.51 684.245 L1212.95 684.245 L1212.39 684.245 L1211.83 684.245 L1211.27 684.245 L1210.71 684.245 L1210.15 684.245 L1209.59 684.245 L1209.03 684.245 L1208.47 684.245 L1207.91 684.245 L1207.35 684.245 L1206.8 684.245 L1206.24 684.245 L1205.68 684.245 L1205.12 684.245 L1204.56 684.245 L1204 684.245 L1203.44 684.245 L1202.88 684.245 L1202.32 684.245 L1201.76 684.245 L1201.2 684.245 L1200.64 684.245 L1200.08 684.245 L1199.52 684.245 L1198.97 684.245 L1198.41 684.245 L1197.85 684.245 L1197.29 684.245 L1196.73 684.245 L1196.17 684.245 L1195.61 684.245 L1195.05 684.245 L1194.49 684.245 L1193.93 684.245 L1193.37 684.245 L1192.81 684.245 L1192.25 684.245 L1191.7 684.245 L1191.14 684.245 L1190.58 684.245 L1190.02 684.245 L1189.46 684.245 L1188.9 684.245 L1188.34 684.245 L1187.78 684.245 L1187.22 684.245 L1186.66 684.245 L1186.1 684.245 L1185.54 684.245 L1184.98 684.245 L1184.43 684.245 L1183.87 684.245 L1183.31 684.245 L1182.75 684.245 L1182.19 684.245 L1181.63 684.245 L1181.07 684.245 L1180.51 684.245 L1179.95 684.245 L1179.39 684.245 L1178.83 684.245 L1178.27 684.245 L1177.71 684.245 L1177.15 684.245 L1176.6 684.245 L1176.04 684.245 L1175.48 684.245 L1174.92 684.245 L1174.36 684.245 L1173.8 684.245 L1173.24 684.245 L1172.68 684.245 L1172.12 684.245 L1171.56 684.245 L1171 684.245 L1170.44 684.245 L1169.88 684.245 L1169.33 684.245 L1168.77 684.245 L1168.21 684.245 L1167.65 684.245 L1167.09 684.245 L1166.53 684.245 L1165.97 684.245 L1165.41 684.245 L1164.85 684.245 L1164.29 684.245 L1163.73 684.245 L1163.17 684.245 L1162.61 684.245 L1162.05 684.245 L1161.5 684.245 L1160.94 684.245 L1160.38 684.245 L1159.82 684.245 L1159.26 684.245 L1158.7 684.245 L1158.14 684.245 L1157.58 684.245 L1157.02 684.245 L1156.46 684.245 L1155.9 684.245 L1155.34 684.245 L1154.78 684.245 L1154.23 684.245 L1153.67 684.245 L1153.11 684.245 L1152.55 684.245 L1151.99 684.245 L1151.43 684.245 L1150.87 684.245 L1150.31 684.245 L1149.75 684.245 L1149.19 684.245 L1148.63 684.245 L1148.07 684.245 L1147.51 684.245 L1146.96 684.245 L1146.4 684.245 L1145.84 684.245 L1145.28 684.245 L1144.72 684.245 L1144.16 684.245 L1143.6 684.245 L1143.04 684.245 L1142.48 684.245 L1141.92 684.245 L1141.36 684.245 L1140.8 684.245 L1140.24 684.245 L1139.68 684.245 L1139.13 684.245 L1138.57 684.245 L1138.01 684.245 L1137.45 684.245 L1136.89 684.245 L1136.33 684.245 L1135.77 684.245 L1135.21 684.245 L1134.65 684.245 L1134.09 684.245 L1133.53 684.245 L1132.97 684.245 L1132.41 684.245 L1131.86 684.245 L1131.3 684.245 L1130.74 684.245 L1130.18 684.245 L1129.62 684.245 L1129.06 684.245 L1128.5 684.245 L1127.94 684.245 L1127.38 684.245 L1126.82 684.245 L1126.26 684.245 L1125.7 684.245 L1125.14 684.245 L1124.59 684.245 L1124.03 684.245 L1123.47 684.245 L1122.91 684.245 L1122.35 684.245 L1121.79 684.245 L1121.23 684.245 L1120.67 684.245 L1120.11 684.245 L1119.55 684.245 L1118.99 684.245 L1118.43 684.245 L1117.87 684.245 L1117.31 684.245 L1116.76 684.245 L1116.2 684.245 L1115.64 684.245 L1115.08 684.245 L1114.52 684.245 L1113.96 684.245 L1113.4 684.245 L1112.84 684.245 L1112.28 684.245 L1111.72 684.245 L1111.16 684.245 L1110.6 684.245 L1110.04 684.245 L1109.49 684.245 L1108.93 684.245 L1108.37 684.245 L1107.81 684.245 L1107.25 684.245 L1106.69 684.245 L1106.13 684.245 L1105.57 684.245 L1105.01 684.245 L1104.45 684.245 L1103.89 684.245 L1103.33 684.245 L1102.77 684.245 L1102.22 684.245 L1101.66 684.245 L1101.1 684.245 L1100.54 684.245 L1099.98 684.245 L1099.42 684.245 L1098.86 684.245 L1098.3 684.245 L1097.74 684.245 L1097.18 684.245 L1096.62 684.245 L1096.06 684.245 L1095.5 684.245 L1094.94 684.245 L1094.39 684.245 L1093.83 684.245 L1093.27 684.245 L1092.71 684.245 L1092.15 684.245 L1091.59 684.245 L1091.03 684.245 L1090.47 684.245 L1089.91 684.245 L1089.35 684.245 L1088.79 684.245 L1088.23 684.245 L1087.67 684.245 L1087.12 684.245 L1086.56 684.245 L1086 684.245 L1085.44 684.245 L1084.88 684.245 L1084.32 684.245 L1083.76 684.245 L1083.2 684.245 L1082.64 684.245 L1082.08 684.245 L1081.52 684.245 L1080.96 684.245 L1080.4 684.245 L1079.85 684.245 L1079.29 684.245 L1078.73 684.245 L1078.17 684.245 L1077.61 684.245 L1077.05 684.245 L1076.49 684.245 L1075.93 684.245 L1075.37 684.245 L1074.81 684.245 L1074.25 684.245 L1073.69 684.245 L1073.13 684.245 L1072.57 684.245 L1072.02 684.245 L1071.46 684.245 L1070.9 684.245 L1070.34 684.245 L1069.78 684.245 L1069.22 684.245 L1068.66 684.245 L1068.1 684.245 L1067.54 684.245 L1066.98 684.245 L1066.42 684.245 L1065.86 684.245 L1065.3 684.245 L1064.75 684.245 L1064.19 684.245 L1063.63 684.245 L1063.07 684.245 L1062.51 684.245 L1061.95 684.245 L1061.39 684.245 L1060.83 684.245 L1060.27 684.245 L1059.71 684.245 L1059.15 684.245 L1058.59 684.245 L1058.03 684.245 L1057.48 684.245 L1056.92 684.245 L1056.36 684.245 L1055.8 684.245 L1055.24 684.245 L1054.68 684.245 L1054.12 684.245 L1053.56 684.245 L1053 684.245 L1052.44 684.245 L1051.88 684.245 L1051.32 684.245 L1050.76 684.245 L1050.2 684.245 L1049.65 684.245 L1049.09 684.245 L1048.53 684.245 L1047.97 684.245 L1047.41 684.245 L1046.85 684.245 L1046.29 684.245 L1045.73 684.245 L1045.17 684.245 L1044.61 684.245 L1044.05 684.245 L1043.49 684.245 L1042.93 684.245 L1042.38 684.245 L1041.82 684.245 L1041.26 684.245 L1040.7 684.245 L1040.14 684.245 L1039.58 684.245 L1039.02 684.245 L1038.46 684.245 L1037.9 684.245 L1037.34 684.245 L1036.78 684.245 L1036.22 684.245 L1035.66 684.245 L1035.1 684.245 L1034.55 684.245 L1033.99 684.245 L1033.43 684.245 L1032.87 684.245 L1032.31 684.245 L1031.75 684.245 L1031.19 684.245 L1030.63 684.245 L1030.07 684.245 L1029.51 684.245 L1028.95 684.245 L1028.39 684.245 L1027.83 684.245 L1027.28 684.245 L1026.72 684.245 L1026.16 684.245 L1025.6 684.245 L1025.04 684.245 L1024.48 684.245 L1023.92 684.245 L1023.36 684.245 L1022.8 684.245 L1022.24 684.245 L1021.68 684.245 L1021.12 684.245 L1020.56 684.245 L1020.01 684.245 L1019.45 684.245 L1018.89 684.245 L1018.33 684.245 L1017.77 684.245 L1017.21 684.245 L1016.65 684.245 L1016.09 684.245 L1015.53 684.245 L1014.97 684.245 L1014.41 684.245 L1013.85 684.245 L1013.29 684.245 L1012.73 684.245 L1012.18 684.245 L1011.62 684.245 L1011.06 684.245 L1010.5 684.245 L1009.94 684.245 L1009.38 684.245 L1008.82 684.245 L1008.26 684.245 L1007.7 684.245 L1007.14 684.245 L1006.58 684.245 L1006.02 684.245 L1005.46 684.245 L1004.91 684.245 L1004.35 684.245 L1003.79 684.245 L1003.23 684.245 L1002.67 684.245 L1002.11 684.245 L1001.55 684.245 L1000.99 684.245 L1000.43 684.245 L999.872 684.245 L999.313 684.245 L998.754 684.245 L998.194 684.245 L997.635 684.245 L997.076 684.245 L996.517 684.245 L995.957 684.245 L995.398 684.245 L994.839 684.245 L994.28 684.245 L993.72 684.245 L993.161 684.245 L992.602 684.245 L992.043 684.245 L991.483 684.245 L990.924 684.245 L990.365 684.245 L989.806 684.245 L989.246 684.245 L988.687 684.245 L988.128 684.245 L987.569 684.245 L987.009 684.245 L986.45 684.245 L985.891 684.245 L985.332 684.245 L984.772 684.245 L984.213 684.245 L983.654 684.245 L983.095 684.245 L982.535 684.245 L981.976 684.245 L981.417 684.245 L980.858 684.245 L980.298 684.245 L979.739 684.245 L979.18 684.245 L978.621 684.245 L978.061 684.245 L977.502 684.245 L976.943 684.245 L976.384 684.245 L975.824 684.245 L975.265 684.245 L974.706 684.245 L974.147 684.245 L973.587 684.245 L973.028 684.245 L972.469 684.245 L971.91 684.245 L971.35 684.245 L970.791 684.245 L970.232 684.245 L969.673 684.245 L969.113 684.245 L968.554 684.245 L967.995 684.245 L967.436 684.245 L966.876 684.245 L966.317 684.245 L965.758 684.245 L965.199 684.245 L964.639 684.245 L964.08 684.245 L963.521 684.245 L962.962 684.245 L962.402 684.245 L961.843 684.245 L961.284 684.245 L960.725 684.245 L960.165 684.245 L959.606 684.245 L959.047 684.245 L958.488 684.245 L957.928 684.245 L957.369 684.245 L956.81 684.245 L956.251 684.245 L955.691 684.245 L955.132 684.245 L954.573 684.245 L954.014 684.245 L953.454 684.245 L952.895 684.245 L952.336 684.245 L951.777 684.245 L951.217 684.245 L950.658 684.245 L950.099 684.245 L949.54 684.245 L948.98 684.245 L948.421 684.245 L947.862 684.245 L947.303 684.245 L946.743 684.245 L946.184 684.245 L945.625 684.245 L945.066 684.245 L944.506 684.245 L943.947 684.245 L943.388 684.245 L942.829 684.245 L942.269 684.245 L941.71 684.245 L941.151 684.245 L940.592 684.245 L940.032 684.245 L939.473 684.245 L938.914 684.245 L938.355 684.245 L937.795 684.245 L937.236 684.245 L936.677 684.245 L936.118 684.245 L935.558 684.245 L934.999 684.245 L934.44 684.245 L933.881 684.245 L933.321 684.245 L932.762 684.245 L932.203 684.245 L931.644 684.245 L931.084 684.245 L930.525 684.245 L929.966 684.245 L929.406 684.245 L928.847 684.245 L928.288 684.245 L927.729 684.245 L927.169 684.245 L926.61 684.245 L926.051 684.245 L925.492 684.245 L924.932 684.245 L924.373 684.245 L923.814 684.245 L923.255 684.245 L922.695 684.245 L922.136 684.245 L921.577 684.245 L921.018 684.245 L920.458 684.245 L919.899 684.245 L919.34 684.245 L918.781 684.245 L918.221 684.245 L917.662 684.245 L917.103 684.245 L916.544 684.245 L915.984 684.245 L915.425 684.245 L914.866 684.245 L914.307 684.245 L913.747 684.245 L913.188 684.245 L912.629 684.245 L912.07 684.245 L911.51 684.245 L910.951 684.245 L910.392 684.245 L909.833 684.245 L909.273 684.245 L908.714 684.245 L908.155 684.245 L907.596 684.245 L907.036 684.245 L906.477 684.245 L905.918 684.245 L905.359 684.245 L904.799 684.245 L904.24 684.245 L903.681 684.245 L903.122 684.245 L902.562 684.245 L902.003 684.245 L901.444 684.245 L900.885 684.245 L900.325 684.245 L899.766 684.245 L899.207 684.245 L898.648 684.245 L898.088 684.245 L897.529 684.245 L896.97 684.245 L896.411 684.245 L895.851 684.245 L895.292 684.245 L894.733 684.245 L894.174 684.245 L893.614 684.245 L893.055 684.245 L892.496 684.245 L891.937 684.245 L891.377 684.245 L890.818 684.245 L890.259 684.245 L889.7 684.245 L889.14 684.245 L888.581 684.245 L888.022 684.245 L887.463 684.245 L886.903 684.245 L886.344 684.245 L885.785 684.245 L885.226 684.245 L884.666 684.245 L884.107 684.245 L883.548 684.245 L882.989 684.245 L882.429 684.245 L881.87 684.245 L881.311 684.245 L880.752 684.245 L880.192 684.245 L879.633 684.245 L879.074 684.245 L878.515 684.245 L877.955 684.245 L877.396 684.245 L876.837 684.245 L876.278 684.245 L875.718 684.245 L875.159 684.245 L874.6 684.245 L874.041 684.245 L873.481 684.245 L872.922 684.245 L872.363 684.245 L871.804 684.245 L871.244 684.245 L870.685 684.245 L870.126 684.245 L869.567 684.245 L869.007 684.245 L868.448 684.245 L867.889 684.245 L867.33 684.245 L866.77 684.245 L866.211 684.245 L865.652 684.245 L865.093 684.245 L864.533 684.245 L863.974 684.245 L863.415 684.245 L862.856 684.245 L862.296 684.245 L861.737 684.245 L861.178 684.245 L860.619 684.245 L860.059 684.245 L859.5 684.245 L858.941 684.245 L858.382 684.245 L857.822 684.245 L857.263 684.245 L856.704 684.245 L856.145 684.245 L855.585 684.245 L855.026 684.245 L854.467 684.245 L853.908 684.245 L853.348 684.245 L852.789 684.245 L852.23 684.245 L851.671 684.245 L851.111 684.245 L850.552 684.245 L849.993 684.245 L849.434 684.245 L848.874 684.245 L848.315 684.245 L847.756 684.245 L847.197 684.245 L846.637 684.245 L846.078 684.245 L845.519 684.245 L844.96 684.245 L844.4 684.245 L843.841 684.245 L843.282 684.245 L842.723 684.245 L842.163 684.245 L841.604 684.245 L841.045 684.245 L840.486 684.245 L839.926 684.245 L839.367 684.245 L838.808 684.245 L838.249 684.245 L837.689 684.245 L837.13 684.245 L836.571 684.245 L836.012 684.245 L835.452 684.245 L834.893 684.245 L834.334 684.245 L833.775 684.245 L833.215 684.245 L832.656 684.245 L832.097 684.245 L831.538 684.245 L830.978 684.245 L830.419 684.245 L829.86 684.245 L829.301 684.245 L828.741 684.245 L828.182 684.245 L827.623 684.245 L827.064 684.245 L826.504 684.245 L825.945 684.245 L825.386 684.245 L824.827 684.245 L824.267 684.245 L823.708 684.245 L823.149 684.245 L822.59 684.245 L822.03 684.245 L821.471 684.245 L820.912 684.245 L820.353 684.245 L819.793 684.245 L819.234 684.245 L818.675 684.245 L818.116 684.245 L817.556 684.245 L816.997 684.245 L816.438 684.245 L815.879 684.245 L815.319 684.245 L814.76 684.245 L814.201 684.245 L813.642 684.245 L813.082 684.245 L812.523 684.245 L811.964 684.245 L811.405 684.245 L810.845 684.245 L810.286 684.245 L809.727 684.245 L809.168 684.245 L808.608 684.245 L808.049 684.245 L807.49 684.245 L806.931 684.245 L806.371 684.245 L805.812 684.245 L805.253 684.245 L804.693 684.245 L804.134 684.245 L803.575 684.245 L803.016 684.245 L802.456 684.245 L801.897 684.245 L801.338 684.245 L800.779 684.245 L800.219 684.245 L799.66 684.245 L799.101 684.245 L798.542 684.245 L797.982 684.245 L797.423 684.245 L796.864 684.245 L796.305 684.245 L795.745 684.245 L795.186 684.245 L794.627 684.245 L794.068 684.245 L793.508 684.245 L792.949 684.245 L792.39 684.245 L791.831 684.245 L791.271 684.245 L790.712 684.245 L790.153 684.245 L789.594 684.245 L789.034 684.245 L788.475 684.245 L787.916 684.245 L787.357 684.245 L786.797 684.245 L786.238 684.245 L785.679 684.245 L785.12 684.245 L784.56 684.245 L784.001 684.245 L783.442 684.245 L782.883 684.245 L782.323 684.245 L781.764 684.245 L781.205 684.245 L780.646 684.245 L780.086 684.245 L779.527 684.245 L778.968 684.245 L778.409 684.245 L777.849 684.245 L777.29 684.245 L776.731 684.245 L776.172 684.245 L775.612 684.245 L775.053 684.245 L774.494 684.245 L773.935 684.245 L773.375 684.245 L772.816 684.245 L772.257 684.245 L771.698 684.245 L771.138 684.245 L770.579 684.245 L770.02 684.245 L769.461 684.245 L768.901 684.245 L768.342 684.245 L767.783 684.245 L767.224 684.245 L766.664 684.245 L766.105 684.245 L765.546 684.245 L764.987 684.245 L764.427 684.245 L763.868 684.245 L763.309 684.245 L762.75 684.245 L762.19 684.245 L761.631 684.245 L761.072 684.245 L760.513 684.245 L759.953 684.245 L759.394 684.245 L758.835 684.245 L758.276 684.245 L757.716 684.245 L757.157 684.245 L756.598 684.245 L756.039 684.245 L755.479 684.245 L754.92 684.245 L754.361 684.245 L753.802 684.245 L753.242 684.245 L752.683 684.245 L752.124 684.245 L751.565 684.245 L751.005 684.245 L750.446 684.245 L749.887 684.245 L749.328 684.245 L748.768 684.245 L748.209 684.245 L747.65 684.245 L747.091 684.245 L746.531 684.245 L745.972 684.245 L745.413 684.245 L744.854 684.245 L744.294 684.245 L743.735 684.245 L743.176 684.245 L742.617 684.245 L742.057 684.245 L741.498 684.245 L740.939 684.245 L740.38 684.245 L739.82 684.245 L739.261 684.245 L738.702 684.245 L738.143 684.245 L737.583 684.245 L737.024 684.245 L736.465 684.245 L735.906 684.245 L735.346 684.245 L734.787 684.245 L734.228 684.245 L733.669 684.245 L733.109 684.245 L732.55 684.245 L731.991 684.245 L731.432 684.245 L730.872 684.245 L730.313 684.245 L729.754 684.245 L729.195 684.245 L728.635 684.245 L728.076 684.245 L727.517 684.245 L726.958 684.245 L726.398 684.245 L725.839 684.245 L725.28 684.245 L724.721 684.245 L724.161 684.245 L723.602 684.245 L723.043 684.245 L722.484 684.245 L721.924 684.245 L721.365 684.245 L720.806 684.245 L720.247 684.245  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.707 720.806,688.707 721.365,688.707 721.924,688.707 722.484,688.707 723.043,688.707 723.602,688.707 724.161,688.707 724.721,688.707 725.28,688.707 725.839,688.707 726.398,688.707 726.958,688.707 727.517,688.707 728.076,688.707 728.635,688.707 729.195,688.707 729.754,688.707 730.313,688.707 730.872,688.707 731.432,688.707 731.991,688.707 732.55,688.707 733.109,688.707 733.669,688.707 734.228,688.707 734.787,688.707 735.346,688.707 735.906,688.707 736.465,688.707 737.024,688.707 737.583,688.707 738.143,688.707 738.702,688.707 739.261,688.707 739.82,688.707 740.38,688.707 740.939,688.707 741.498,688.707 742.057,688.707 742.617,688.707 743.176,688.707 743.735,688.707 744.294,688.707 744.854,688.707 745.413,688.707 745.972,688.707 746.531,688.707 747.091,688.707 747.65,688.707 748.209,688.707 748.768,688.707 749.328,688.707 749.887,688.707 750.446,688.707 751.005,688.707 751.565,688.707 752.124,688.707 752.683,688.707 753.242,688.707 753.802,688.707 754.361,688.707 754.92,688.707 755.479,688.707 756.039,688.707 756.598,688.707 757.157,688.707 757.716,688.707 758.276,688.707 758.835,688.707 759.394,688.707 759.953,688.707 760.513,688.707 761.072,688.707 761.631,688.707 762.19,688.707 762.75,688.707 763.309,688.707 763.868,688.707 764.427,688.707 764.987,688.707 765.546,688.707 766.105,688.707 766.664,688.707 767.224,688.707 767.783,688.707 768.342,688.707 768.901,688.707 769.461,688.707 770.02,688.707 770.579,688.707 771.138,688.707 771.698,688.707 772.257,688.707 772.816,688.707 773.375,688.707 773.935,688.707 774.494,688.707 775.053,688.707 775.612,688.707 776.172,688.707 776.731,688.707 777.29,688.707 777.849,688.707 778.409,688.707 778.968,688.707 779.527,688.707 780.086,688.707 780.646,688.707 781.205,688.707 781.764,688.707 782.323,688.707 782.883,688.707 783.442,688.707 784.001,688.707 784.56,688.707 785.12,688.707 785.679,688.707 786.238,688.707 786.797,688.707 787.357,688.707 787.916,688.707 788.475,688.707 789.034,688.707 789.594,688.707 790.153,688.707 790.712,688.707 791.271,688.707 791.831,688.707 792.39,688.707 792.949,688.707 793.508,688.707 794.068,688.707 794.627,688.707 795.186,688.707 795.745,688.707 796.305,688.707 796.864,688.707 797.423,688.707 797.982,688.707 798.542,688.707 799.101,688.707 799.66,688.707 800.219,688.707 800.779,688.707 801.338,688.707 801.897,688.707 802.456,688.707 803.016,688.707 803.575,688.707 804.134,688.707 804.693,688.707 805.253,688.707 805.812,688.707 806.371,688.707 806.931,688.707 807.49,688.707 808.049,688.707 808.608,688.707 809.168,688.707 809.727,688.707 810.286,688.707 810.845,688.707 811.405,688.707 811.964,688.707 812.523,688.707 813.082,688.707 813.642,688.707 814.201,688.707 814.76,688.707 815.319,688.707 815.879,688.707 816.438,688.707 816.997,688.707 817.556,688.707 818.116,688.707 818.675,688.707 819.234,688.707 819.793,688.707 820.353,688.707 820.912,688.707 821.471,688.707 822.03,688.707 822.59,688.707 823.149,688.707 823.708,688.707 824.267,688.707 824.827,688.707 825.386,688.707 825.945,688.707 826.504,688.707 827.064,688.707 827.623,688.707 828.182,688.707 828.741,688.707 829.301,688.707 829.86,688.707 830.419,688.707 830.978,688.707 831.538,688.707 832.097,688.707 832.656,688.707 833.215,688.707 833.775,688.707 834.334,688.707 834.893,688.707 835.452,688.707 836.012,688.707 836.571,688.707 837.13,688.707 837.689,688.707 838.249,688.707 838.808,688.707 839.367,688.707 839.926,688.707 840.486,688.707 841.045,688.707 841.604,688.707 842.163,688.707 842.723,688.707 843.282,688.707 843.841,688.707 844.4,688.707 844.96,688.707 845.519,688.707 846.078,688.707 846.637,688.707 847.197,688.707 847.756,688.707 848.315,688.707 848.874,688.707 849.434,688.707 849.993,688.707 850.552,688.707 851.111,688.707 851.671,688.707 852.23,688.707 852.789,688.707 853.348,688.707 853.908,688.707 854.467,688.707 855.026,688.707 855.585,688.707 856.145,688.707 856.704,688.707 857.263,688.707 857.822,688.707 858.382,688.707 858.941,688.707 859.5,688.707 860.059,688.707 860.619,688.707 861.178,688.707 861.737,688.707 862.296,688.707 862.856,688.707 863.415,688.707 863.974,688.707 864.533,688.707 865.093,688.707 865.652,688.707 866.211,688.707 866.77,688.707 867.33,688.707 867.889,688.707 868.448,688.707 869.007,688.707 869.567,688.707 870.126,688.707 870.685,688.707 871.244,688.707 871.804,688.707 872.363,688.707 872.922,688.707 873.481,688.707 874.041,688.707 874.6,688.707 875.159,688.707 875.718,688.707 876.278,688.707 876.837,688.707 877.396,688.707 877.955,688.707 878.515,688.707 879.074,688.707 879.633,688.707 880.192,688.707 880.752,688.707 881.311,688.707 881.87,688.707 882.429,688.707 882.989,688.707 883.548,688.707 884.107,688.707 884.666,688.707 885.226,688.707 885.785,688.707 886.344,688.707 886.903,688.707 887.463,688.707 888.022,688.707 888.581,688.707 889.14,688.707 889.7,688.707 890.259,688.707 890.818,688.707 891.377,688.707 891.937,688.707 892.496,688.707 893.055,688.707 893.614,688.707 894.174,688.707 894.733,688.707 895.292,688.707 895.851,688.707 896.411,688.707 896.97,688.707 897.529,688.707 898.088,688.707 898.648,688.707 899.207,688.707 899.766,688.707 900.325,688.707 900.885,688.707 901.444,688.707 902.003,688.707 902.562,688.707 903.122,688.707 903.681,688.707 904.24,688.707 904.799,688.707 905.359,688.707 905.918,688.707 906.477,688.707 907.036,688.707 907.596,688.707 908.155,688.707 908.714,688.707 909.273,688.707 909.833,688.707 910.392,688.707 910.951,688.707 911.51,688.707 912.07,688.707 912.629,688.707 913.188,688.707 913.747,688.707 914.307,688.707 914.866,688.707 915.425,688.707 915.984,688.707 916.544,688.707 917.103,688.707 917.662,688.707 918.221,688.707 918.781,688.707 919.34,688.707 919.899,688.707 920.458,688.707 921.018,688.707 921.577,688.707 922.136,688.707 922.695,688.707 923.255,688.707 923.814,688.707 924.373,688.707 924.932,688.707 925.492,688.707 926.051,688.707 926.61,688.707 927.169,688.707 927.729,688.707 928.288,688.707 928.847,688.707 929.406,688.707 929.966,688.707 930.525,688.707 931.084,688.707 931.644,688.707 932.203,688.707 932.762,688.707 933.321,688.707 933.881,688.707 934.44,688.707 934.999,688.707 935.558,688.707 936.118,688.707 936.677,688.707 937.236,688.707 937.795,688.707 938.355,688.707 938.914,688.707 939.473,688.707 940.032,688.707 940.592,688.707 941.151,688.707 941.71,688.707 942.269,688.707 942.829,688.707 943.388,688.707 943.947,688.707 944.506,688.707 945.066,688.707 945.625,688.707 946.184,688.707 946.743,688.707 947.303,688.707 947.862,688.707 948.421,688.707 948.98,688.707 949.54,688.707 950.099,688.707 950.658,688.707 951.217,688.707 951.777,688.707 952.336,688.707 952.895,688.707 953.454,688.707 954.014,688.707 954.573,688.707 955.132,688.707 955.691,688.707 956.251,688.707 956.81,688.707 957.369,688.707 957.928,688.707 958.488,688.707 959.047,688.707 959.606,688.707 960.165,688.707 960.725,688.707 961.284,688.707 961.843,688.707 962.402,688.707 962.962,688.707 963.521,688.707 964.08,688.707 964.639,688.707 965.199,688.707 965.758,688.707 966.317,688.707 966.876,688.707 967.436,688.707 967.995,688.707 968.554,688.707 969.113,688.707 969.673,688.707 970.232,688.707 970.791,688.707 971.35,688.707 971.91,688.707 972.469,688.707 973.028,688.707 973.587,688.707 974.147,688.707 974.706,688.707 975.265,688.707 975.824,688.707 976.384,688.707 976.943,688.707 977.502,688.707 978.061,688.707 978.621,688.707 979.18,688.707 979.739,688.707 980.298,688.707 980.858,688.707 981.417,688.707 981.976,688.707 982.535,688.707 983.095,688.707 983.654,688.707 984.213,688.707 984.772,688.707 985.332,688.707 985.891,688.707 986.45,688.707 987.009,688.707 987.569,688.707 988.128,688.707 988.687,688.707 989.246,688.707 989.806,688.707 990.365,688.707 990.924,688.707 991.483,688.707 992.043,688.707 992.602,688.707 993.161,688.707 993.72,688.707 994.28,688.707 994.839,688.707 995.398,688.707 995.957,688.707 996.517,688.707 997.076,688.707 997.635,688.707 998.194,688.707 998.754,688.707 999.313,688.707 999.872,688.707 1000.43,688.707 1000.99,688.707 1001.55,688.707 1002.11,688.707 1002.67,688.707 1003.23,688.707 1003.79,688.707 1004.35,688.707 1004.91,688.707 1005.46,688.707 1006.02,688.707 1006.58,688.707 1007.14,688.707 1007.7,688.707 1008.26,688.707 1008.82,688.707 1009.38,688.707 1009.94,688.707 1010.5,688.707 1011.06,688.707 1011.62,688.707 1012.18,688.707 1012.73,688.707 1013.29,688.707 1013.85,688.707 1014.41,688.707 1014.97,688.707 1015.53,688.707 1016.09,688.707 1016.65,688.707 1017.21,688.707 1017.77,688.707 1018.33,688.707 1018.89,688.707 1019.45,688.707 1020.01,688.707 1020.56,688.707 1021.12,688.707 1021.68,688.707 1022.24,688.707 1022.8,688.707 1023.36,688.707 1023.92,688.707 1024.48,688.707 1025.04,688.707 1025.6,688.707 1026.16,688.707 1026.72,688.707 1027.28,688.707 1027.83,688.707 1028.39,688.707 1028.95,688.707 1029.51,688.707 1030.07,688.707 1030.63,688.707 1031.19,688.707 1031.75,688.707 1032.31,688.707 1032.87,688.707 1033.43,688.707 1033.99,688.707 1034.55,688.707 1035.1,688.707 1035.66,688.707 1036.22,688.707 1036.78,688.707 1037.34,688.707 1037.9,688.707 1038.46,688.707 1039.02,688.707 1039.58,688.707 1040.14,688.707 1040.7,688.707 1041.26,688.707 1041.82,688.707 1042.38,688.707 1042.93,688.707 1043.49,688.707 1044.05,688.707 1044.61,688.707 1045.17,688.707 1045.73,688.707 1046.29,688.707 1046.85,688.707 1047.41,688.707 1047.97,688.707 1048.53,688.707 1049.09,688.707 1049.65,688.707 1050.2,688.707 1050.76,688.707 1051.32,688.707 1051.88,688.707 1052.44,688.707 1053,688.707 1053.56,688.707 1054.12,688.707 1054.68,688.707 1055.24,688.707 1055.8,688.707 1056.36,688.707 1056.92,688.707 1057.48,688.707 1058.03,688.707 1058.59,688.707 1059.15,688.707 1059.71,688.707 1060.27,688.707 1060.83,688.707 1061.39,688.707 1061.95,688.707 1062.51,688.707 1063.07,688.707 1063.63,688.707 1064.19,688.707 1064.75,688.707 1065.3,688.707 1065.86,688.707 1066.42,688.707 1066.98,688.707 1067.54,688.707 1068.1,688.707 1068.66,688.707 1069.22,688.707 1069.78,688.707 1070.34,688.707 1070.9,688.707 1071.46,688.707 1072.02,688.707 1072.57,688.707 1073.13,688.707 1073.69,688.707 1074.25,688.707 1074.81,688.707 1075.37,688.707 1075.93,688.707 1076.49,688.707 1077.05,688.707 1077.61,688.707 1078.17,688.707 1078.73,688.707 1079.29,688.707 1079.85,688.707 1080.4,688.707 1080.96,688.707 1081.52,688.707 1082.08,688.707 1082.64,688.707 1083.2,688.707 1083.76,688.707 1084.32,688.707 1084.88,688.707 1085.44,688.707 1086,688.707 1086.56,688.707 1087.12,688.707 1087.67,688.707 1088.23,688.707 1088.79,688.707 1089.35,688.707 1089.91,688.707 1090.47,688.707 1091.03,688.707 1091.59,688.707 1092.15,688.707 1092.71,688.707 1093.27,688.707 1093.83,688.707 1094.39,688.707 1094.94,688.707 1095.5,688.707 1096.06,688.707 1096.62,688.707 1097.18,688.707 1097.74,688.707 1098.3,688.707 1098.86,688.707 1099.42,688.707 1099.98,688.707 1100.54,688.707 1101.1,688.707 1101.66,688.707 1102.22,688.707 1102.77,688.707 1103.33,688.707 1103.89,688.707 1104.45,688.707 1105.01,688.707 1105.57,688.707 1106.13,688.707 1106.69,688.707 1107.25,688.707 1107.81,688.707 1108.37,688.707 1108.93,688.707 1109.49,688.707 1110.04,688.707 1110.6,688.707 1111.16,688.707 1111.72,688.707 1112.28,688.707 1112.84,688.707 1113.4,688.707 1113.96,688.707 1114.52,688.707 1115.08,688.707 1115.64,688.707 1116.2,688.707 1116.76,688.707 1117.31,688.707 1117.87,688.707 1118.43,688.707 1118.99,688.707 1119.55,688.707 1120.11,688.707 1120.67,688.707 1121.23,688.707 1121.79,688.707 1122.35,688.707 1122.91,688.707 1123.47,688.707 1124.03,688.707 1124.59,688.707 1125.14,688.707 1125.7,688.707 1126.26,688.707 1126.82,688.707 1127.38,688.707 1127.94,688.707 1128.5,688.707 1129.06,688.707 1129.62,688.707 1130.18,688.707 1130.74,688.707 1131.3,688.707 1131.86,688.707 1132.41,688.707 1132.97,688.707 1133.53,688.707 1134.09,688.707 1134.65,688.707 1135.21,688.707 1135.77,688.707 1136.33,688.707 1136.89,688.707 1137.45,688.707 1138.01,688.707 1138.57,688.707 1139.13,688.707 1139.68,688.707 1140.24,688.707 1140.8,688.707 1141.36,688.707 1141.92,688.707 1142.48,688.707 1143.04,688.707 1143.6,688.707 1144.16,688.707 1144.72,688.707 1145.28,688.707 1145.84,688.707 1146.4,688.707 1146.96,688.707 1147.51,688.707 1148.07,688.707 1148.63,688.707 1149.19,688.707 1149.75,688.707 1150.31,688.707 1150.87,688.707 1151.43,688.707 1151.99,688.707 1152.55,688.707 1153.11,688.707 1153.67,688.707 1154.23,688.707 1154.78,688.707 1155.34,688.707 1155.9,688.707 1156.46,688.707 1157.02,688.707 1157.58,688.707 1158.14,688.707 1158.7,688.707 1159.26,688.707 1159.82,688.707 1160.38,688.707 1160.94,688.707 1161.5,688.707 1162.05,688.707 1162.61,688.707 1163.17,688.707 1163.73,688.707 1164.29,688.707 1164.85,688.707 1165.41,688.707 1165.97,688.707 1166.53,688.707 1167.09,688.707 1167.65,688.707 1168.21,688.707 1168.77,688.707 1169.33,688.707 1169.88,688.707 1170.44,688.707 1171,688.707 1171.56,688.707 1172.12,688.707 1172.68,688.707 1173.24,688.707 1173.8,688.707 1174.36,688.707 1174.92,688.707 1175.48,688.707 1176.04,688.707 1176.6,688.707 1177.15,688.707 1177.71,688.707 1178.27,688.707 1178.83,688.707 1179.39,688.707 1179.95,688.707 1180.51,688.707 1181.07,688.707 1181.63,688.707 1182.19,688.707 1182.75,688.707 1183.31,688.707 1183.87,688.707 1184.43,688.707 1184.98,688.707 1185.54,688.707 1186.1,688.707 1186.66,688.707 1187.22,688.707 1187.78,688.707 1188.34,688.707 1188.9,688.707 1189.46,688.707 1190.02,688.707 1190.58,688.707 1191.14,688.707 1191.7,688.707 1192.25,688.707 1192.81,688.707 1193.37,688.707 1193.93,688.707 1194.49,688.707 1195.05,688.707 1195.61,688.707 1196.17,688.707 1196.73,688.707 1197.29,688.707 1197.85,688.707 1198.41,688.707 1198.97,688.707 1199.52,688.707 1200.08,688.707 1200.64,688.707 1201.2,688.707 1201.76,688.707 1202.32,688.707 1202.88,688.707 1203.44,688.707 1204,688.707 1204.56,688.707 1205.12,688.707 1205.68,688.707 1206.24,688.707 1206.8,688.707 1207.35,688.707 1207.91,688.707 1208.47,688.707 1209.03,688.707 1209.59,688.707 1210.15,688.707 1210.71,688.707 1211.27,688.707 1211.83,688.707 1212.39,688.707 1212.95,688.707 1213.51,688.707 1214.07,688.707 1214.62,688.707 1215.18,688.707 1215.74,688.707 1216.3,688.707 1216.86,688.707 1217.42,688.707 1217.98,688.707 1218.54,688.707 1219.1,688.707 1219.66,688.707 1220.22,688.707 1220.78,688.707 1221.34,688.707 1221.89,688.707 1222.45,688.707 1223.01,688.707 1223.57,688.707 1224.13,688.707 1224.69,688.707 1225.25,688.707 1225.81,688.707 1226.37,688.707 1226.93,688.707 1227.49,688.707 1228.05,688.707 1228.61,688.707 1229.17,688.707 1229.72,688.707 1230.28,688.707 1230.84,688.707 1231.4,688.707 1231.96,688.707 1232.52,688.707 1233.08,688.707 1233.64,688.707 1234.2,688.707 1234.76,688.707 1235.32,688.707 1235.88,688.707 1236.44,688.707 1236.99,688.707 1237.55,688.707 1238.11,688.707 1238.67,688.707 1239.23,688.707 1239.79,688.707 1240.35,688.707 1240.91,688.707 1241.47,688.707 1242.03,688.707 1242.59,688.707 1243.15,688.707 1243.71,688.707 1244.26,688.707 1244.82,688.707 1245.38,688.707 1245.94,688.707 1246.5,688.707 1247.06,688.707 1247.62,688.707 1248.18,688.707 1248.74,688.707 1249.3,688.707 1249.86,688.707 1250.42,688.707 1250.98,688.707 1251.54,688.707 1252.09,688.707 1252.65,688.707 1253.21,688.707 1253.77,688.707 1254.33,688.707 1254.89,688.707 1255.45,688.707 1256.01,688.707 1256.57,688.707 1257.13,688.707 1257.69,688.707 1258.25,688.707 1258.81,688.707 1259.36,688.707 1259.92,688.707 1260.48,688.707 1261.04,688.707 1261.6,688.707 1262.16,688.707 1262.72,688.707 1263.28,688.707 1263.84,688.707 1264.4,688.707 1264.96,688.707 1265.52,688.707 1266.08,688.707 1266.63,688.707 1267.19,688.707 1267.75,688.707 1268.31,688.707 1268.87,688.707 1269.43,688.707 1269.99,688.707 1270.55,688.707 1271.11,688.707 1271.67,688.707 1272.23,688.707 1272.79,688.707 1273.35,688.707 1273.91,688.707 1274.46,688.707 1275.02,688.707 1275.58,688.707 1276.14,688.707 1276.7,688.707 1277.26,688.707 1277.82,688.707 1278.38,688.707 1278.94,688.707 1279.5,688.707 1280.06,688.707 1280.62,688.707 1281.18,688.707 1281.73,688.707 1282.29,688.707 1282.85,688.707 1283.41,688.707 1283.97,688.707 1284.53,688.707 1285.09,688.707 1285.65,688.707 1286.21,688.707 1286.77,688.707 1287.33,688.707 1287.89,688.707 1288.45,688.707 1289,688.707 1289.56,688.707 1290.12,688.707 1290.68,688.707 1291.24,688.707 1291.8,688.707 1292.36,688.707 1292.92,688.707 1293.48,688.707 1294.04,688.707 1294.6,688.707 1295.16,688.707 1295.72,688.707 1296.28,688.707 1296.83,688.707 1297.39,688.707 1297.95,688.707 1298.51,688.707 1299.07,688.707 1299.63,688.707 1300.19,688.707 1300.75,688.707 1301.31,688.707 1301.87,688.707 1302.43,688.707 1302.99,688.707 1303.55,688.707 1304.1,688.707 1304.66,688.707 1305.22,688.707 1305.78,688.707 1306.34,688.707 1306.9,688.707 1307.46,688.707 1308.02,688.707 1308.58,688.707 1309.14,688.707 1309.7,688.707 1310.26,688.707 1310.82,688.707 1311.38,688.707 1311.93,688.707 1312.49,688.707 1313.05,688.707 1313.61,688.707 1314.17,688.707 1314.73,688.707 1315.29,688.707 1315.85,688.707 1316.41,688.707 1316.97,688.707 1317.53,688.707 1318.09,688.707 1318.65,688.707 1319.2,688.707 1319.76,688.707 1320.32,688.707 1320.88,688.707 1321.44,688.707 1322,688.707 1322.56,688.707 1323.12,688.707 1323.68,688.707 1324.24,688.707 1324.8,688.707 1325.36,688.707 1325.92,688.707 1326.47,688.707 1327.03,688.707 1327.59,688.707 1328.15,688.707 1328.71,688.707 1329.27,688.707 1329.83,688.707 1330.39,688.707 1330.95,688.707 1331.51,688.707 1332.07,688.707 1332.63,688.707 1333.19,688.707 1333.75,688.707 1334.3,688.707 1334.86,688.707 1335.42,688.707 1335.98,688.707 1336.54,688.707 1337.1,688.707 1337.66,688.707 1338.22,688.707 1338.78,688.707 1339.34,688.707 1339.9,688.707 1340.46,688.707 1341.02,688.707 1341.57,688.707 1342.13,688.707 1342.69,688.707 1343.25,688.707 1343.81,688.707 1344.37,688.707 1344.93,688.707 1345.49,688.707 1346.05,688.707 1346.61,688.707 1347.17,688.707 1347.73,688.707 1348.29,688.707 1348.84,688.707 1349.4,688.707 1349.96,688.707 1350.52,688.707 1351.08,688.707 1351.64,688.707 1352.2,688.707 1352.76,688.707 1353.32,688.707 1353.88,688.707 1354.44,688.707 1355,688.707 1355.56,688.707 1356.12,688.707 1356.67,688.707 1357.23,688.707 1357.79,688.707 1358.35,688.707 1358.91,688.707 1359.47,688.707 1360.03,688.707 1360.59,688.707 1361.15,688.707 1361.71,688.707 1362.27,688.707 1362.83,688.707 1363.39,688.707 1363.94,688.707 1364.5,688.707 1365.06,688.707 1365.62,688.707 1366.18,688.707 1366.74,688.707 1367.3,688.707 1367.86,688.707 1368.42,688.707 1368.98,688.707 1369.54,688.707 1370.1,688.707 1370.66,688.707 1371.21,688.707 1371.77,688.707 1372.33,688.707 1372.89,688.707 1373.45,688.707 1374.01,688.707 1374.57,688.707 1375.13,688.707 1375.69,688.707 1376.25,688.707 1376.81,688.707 1377.37,688.707 1377.93,688.707 1378.49,688.707 1379.04,688.707 1379.6,688.707 1380.16,688.707 1380.72,688.707 1381.28,688.707 1381.84,688.707 1382.4,688.707 1382.96,688.707 1383.52,688.707 1384.08,688.707 1384.64,688.707 1385.2,688.707 1385.76,688.707 1386.31,688.707 1386.87,688.707 1387.43,688.707 1387.99,688.707 1388.55,688.707 1389.11,688.707 1389.67,688.707 1390.23,688.707 1390.79,688.707 1391.35,688.707 1391.91,688.707 1392.47,688.707 1393.03,688.707 1393.58,688.707 1394.14,688.707 1394.7,688.707 1395.26,688.707 1395.82,688.707 1396.38,688.707 1396.94,688.707 1397.5,688.707 1398.06,688.707 1398.62,688.707 1399.18,688.707 1399.74,688.707 1400.3,688.707 1400.86,688.707 1401.41,688.707 1401.97,688.707 1402.53,688.707 1403.09,688.707 1403.65,688.707 1404.21,688.707 1404.77,688.707 1405.33,688.707 1405.89,688.707 1406.45,688.707 1407.01,688.707 1407.57,688.707 1408.13,688.707 1408.68,688.707 1409.24,688.707 1409.8,688.707 1410.36,688.707 1410.92,688.707 1411.48,688.707 1412.04,688.707 1412.6,688.707 1413.16,688.707 1413.72,688.707 1414.28,688.707 1414.84,688.707 1415.4,688.707 1415.95,688.707 1416.51,688.707 1417.07,688.707 1417.63,688.707 1418.19,688.707 1418.75,688.707 1419.31,688.707 1419.87,688.707 1420.43,688.707 1420.99,688.707 1421.55,688.707 1422.11,688.707 1422.67,688.707 1423.23,688.707 1423.78,688.707 1424.34,688.707 1424.9,688.707 1425.46,688.707 1426.02,688.707 1426.58,688.707 1427.14,688.707 1427.7,688.707 1428.26,688.707 1428.82,688.707 1429.38,688.707 1429.94,688.707 1430.5,688.707 1431.05,688.707 1431.61,688.707 1432.17,688.707 1432.73,688.707 1433.29,688.707 1433.85,688.707 1434.41,688.707 1434.97,688.707 1435.53,688.707 1436.09,688.707 1436.65,688.707 1437.21,688.707 1437.77,688.707 1438.33,688.707 1438.88,688.707 1439.44,688.707 1440,688.707 1440.56,688.707 1441.12,688.707 1441.68,688.707 1442.24,688.707 1442.8,688.707 1443.36,688.707 1443.92,688.707 1444.48,688.707 1445.04,688.707 1445.6,688.707 1446.15,688.707 1446.71,688.707 1447.27,688.707 1447.83,688.707 1448.39,688.707 1448.95,688.707 1449.51,688.707 1450.07,688.707 1450.63,688.707 1451.19,688.707 1451.75,688.707 1452.31,688.707 1452.87,688.707 1453.42,688.707 1453.98,688.707 1454.54,688.707 1455.1,688.707 1455.66,688.707 1456.22,688.707 1456.78,688.707 1457.34,688.707 1457.9,688.707 1458.46,688.707 1459.02,688.707 1459.58,688.707 1460.14,688.707 1460.7,688.707 1461.25,688.707 1461.81,688.707 1462.37,688.707 1462.93,688.707 1463.49,688.707 1464.05,688.707 1464.61,688.707 1465.17,688.707 1465.73,688.707 1466.29,688.707 1466.85,688.707 1467.41,688.707 1467.97,688.707 1468.52,688.707 1469.08,688.707 1469.64,688.707 1470.2,688.707 1470.76,688.707 1471.32,688.707 1471.88,688.707 1472.44,688.707 1473,688.707 1473.56,688.707 1474.12,688.707 1474.68,688.707 1475.24,688.707 1475.79,688.707 1476.35,688.707 1476.91,688.707 1477.47,688.707 1478.03,688.707 1478.59,688.707 1479.15,688.707 1479.71,688.707 1480.27,688.707 1480.83,688.707 1481.39,688.707 1481.95,688.707 1482.51,688.707 1483.07,688.707 1483.62,688.707 1484.18,688.707 1484.74,688.707 1485.3,688.707 1485.86,688.707 1486.42,688.707 1486.98,688.707 1487.54,688.707 1488.1,688.707 1488.66,688.707 1489.22,688.707 1489.78,688.707 1490.34,688.707 1490.89,688.707 1491.45,688.707 1492.01,688.707 1492.57,688.707 1493.13,688.707 1493.69,688.707 1494.25,688.707 1494.81,688.707 1495.37,688.707 1495.93,688.707 1496.49,688.707 1497.05,688.707 1497.61,688.707 1498.16,688.707 1498.72,688.707 1499.28,688.707 1499.84,688.707 1500.4,688.707 1500.96,688.707 1501.52,688.707 1502.08,688.707 1502.64,688.707 1503.2,688.707 1503.76,688.707 1504.32,688.707 1504.88,688.707 1505.44,688.707 1505.99,688.707 1506.55,688.707 1507.11,688.707 1507.67,688.707 1508.23,688.707 1508.79,688.707 1509.35,688.707 1509.91,688.707 1510.47,688.707 1511.03,688.707 1511.59,688.707 1512.15,688.707 1512.71,688.707 1513.26,688.707 1513.82,688.707 1514.38,688.707 1514.94,688.707 1515.5,688.707 1516.06,688.707 1516.62,688.707 1517.18,688.707 1517.74,688.707 1518.3,688.707 1518.86,688.707 1519.42,688.707 1519.98,688.707 1520.53,688.707 1521.09,688.707 1521.65,688.707 1522.21,688.707 1522.77,688.707 1523.33,688.707 1523.89,688.707 1524.45,688.707 1525.01,688.707 1525.57,688.707 1526.13,688.707 1526.69,688.707 1527.25,688.707 1527.81,688.707 1528.36,688.707 1528.92,688.707 1529.48,688.707 1530.04,688.707 1530.6,688.707 1531.16,688.707 1531.72,688.707 1532.28,688.707 1532.84,688.707 1533.4,688.707 1533.96,688.707 1534.52,688.707 1535.08,688.707 1535.63,688.707 1536.19,688.707 1536.75,688.707 1537.31,688.707 1537.87,688.707 1538.43,688.707 1538.99,688.707 1539.55,688.707 1540.11,688.707 1540.67,688.707 1541.23,688.707 1541.79,688.707 1542.35,688.707 1542.9,688.707 1543.46,688.707 1544.02,688.707 1544.58,688.707 1545.14,688.707 1545.7,688.707 1546.26,688.707 1546.82,688.707 1547.38,688.707 1547.94,688.707 1548.5,688.707 1549.06,688.707 1549.62,688.707 1550.18,688.707 1550.73,688.707 1551.29,688.707 1551.85,688.707 1552.41,688.707 1552.97,688.707 1553.53,688.707 1554.09,688.707 1554.65,688.707 1555.21,688.707 1555.77,688.707 1556.33,688.707 1556.89,688.707 1557.45,688.707 1558,688.707 1558.56,688.707 1559.12,688.707 1559.68,688.707 1560.24,688.707 1560.8,688.707 1561.36,688.707 1561.92,688.707 1562.48,688.707 1563.04,688.707 1563.6,688.707 1564.16,688.707 1564.72,688.707 1565.28,688.707 1565.83,688.707 1566.39,688.707 1566.95,688.707 1567.51,688.707 1568.07,688.707 1568.63,688.707 1569.19,688.707 1569.75,688.707 1570.31,688.707 1570.87,688.707 1571.43,688.707 1571.99,688.707 1572.55,688.707 1573.1,688.707 1573.66,688.707 1574.22,688.707 1574.78,688.707 1575.34,688.707 1575.9,688.707 1576.46,688.707 1577.02,688.707 1577.58,688.707 1578.14,688.707 1578.7,688.707 1579.26,688.707 1579.82,688.707 1580.37,688.707 1580.93,688.707 1581.49,688.707 1582.05,688.707 1582.61,688.707 1583.17,688.707 1583.73,688.707 1584.29,688.707 1584.85,688.707 1585.41,688.707 1585.97,688.707 1586.53,688.707 1587.09,688.707 1587.65,688.707 1588.2,688.707 1588.76,688.707 1589.32,688.707 1589.88,688.707 1590.44,688.707 1591,688.707 1591.56,688.707 1592.12,688.707 1592.68,688.707 1593.24,688.707 1593.8,688.707 1594.36,688.707 1594.92,688.707 1595.47,688.707 1596.03,688.707 1596.59,688.707 1597.15,688.707 1597.71,688.707 1598.27,688.707 1598.83,688.707 1599.39,688.707 1599.95,688.707 1600.51,688.707 1601.07,688.707 1601.63,688.707 1602.19,688.707 1602.74,688.707 1603.3,688.707 1603.86,688.707 1604.42,688.707 1604.98,688.707 1605.54,688.707 1606.1,688.707 1606.66,688.707 1607.22,688.707 1607.78,688.707 1608.34,688.707 1608.9,688.707 1609.46,688.707 1610.02,688.707 1610.57,688.707 1611.13,688.707 1611.69,688.707 1612.25,688.707 1612.81,688.707 1613.37,688.707 1613.93,688.707 1614.49,688.707 1615.05,688.707 1615.61,688.707 1616.17,688.707 1616.73,688.707 1617.29,688.707 1617.84,688.707 1618.4,688.707 1618.96,688.707 1619.52,688.707 1620.08,688.707 1620.64,688.707 1621.2,688.707 1621.76,688.707 1622.32,688.707 1622.88,688.707 1623.44,688.707 1624,688.707 1624.56,688.707 1625.11,688.707 1625.67,688.707 1626.23,688.707 1626.79,688.707 1627.35,688.707 1627.91,688.707 1628.47,688.707 1629.03,688.707 1629.59,688.707 1630.15,688.707 1630.71,688.707 1631.27,688.707 1631.83,688.707 1632.39,688.707 1632.94,688.707 1633.5,688.707 1634.06,688.707 1634.62,688.707 1635.18,688.707 1635.74,688.707 1636.3,688.707 1636.86,688.707 1637.42,688.707 1637.98,688.707 1638.54,688.707 1639.1,688.707 1639.66,688.707 1640.21,688.707 1640.77,688.707 1641.33,688.707 1641.89,688.707 1642.45,688.707 1643.01,688.707 1643.57,688.707 1644.13,688.707 1644.69,688.707 1645.25,688.707 1645.81,688.707 1646.37,688.707 1646.93,688.707 1647.48,688.707 1648.04,688.707 1648.6,688.707 1649.16,688.707 1649.72,688.707 1650.28,688.707 1650.84,688.707 1651.4,688.707 1651.96,688.707 1652.52,688.707 1653.08,688.707 1653.64,688.707 1654.2,688.707 1654.76,688.707 1655.31,688.707 1655.87,688.707 1656.43,688.707 1656.99,688.707 1657.55,688.707 1658.11,688.707 1658.67,688.707 1659.23,688.707 1659.79,688.707 1660.35,688.707 1660.91,688.707 1661.47,688.707 1662.03,688.707 1662.58,688.707 1663.14,688.707 1663.7,688.707 1664.26,688.707 1664.82,688.707 1665.38,688.707 1665.94,688.707 1666.5,688.707 1667.06,688.707 1667.62,688.707 1668.18,688.707 1668.74,688.707 1669.3,688.707 1669.85,688.707 1670.41,688.707 1670.97,688.707 1671.53,688.707 1672.09,688.707 1672.65,688.707 1673.21,688.707 1673.77,688.707 1674.33,688.707 1674.89,688.707 1675.45,688.707 1676.01,688.707 1676.57,688.707 1677.13,688.707 1677.68,688.707 1678.24,688.707 1678.8,688.707 1679.36,688.707 1679.92,688.707 1680.48,688.707 1681.04,688.707 1681.6,688.707 1682.16,688.707 1682.72,688.707 1683.28,688.707 1683.84,688.707 1684.4,688.707 1684.95,688.707 1685.51,688.707 1686.07,688.707 1686.63,688.707 1687.19,688.707 1687.75,688.707 1688.31,688.707 1688.87,688.707 1689.43,688.707 1689.99,688.707 1690.55,688.707 1691.11,688.707 1691.67,688.707 1692.23,688.707 1692.78,688.707 1693.34,688.707 1693.9,688.707 1694.46,688.707 1695.02,688.707 1695.58,688.707 1696.14,688.707 1696.7,688.707 1697.26,688.707 1697.82,688.707 1698.38,688.707 1698.94,688.707 1699.5,688.707 1700.05,688.707 1700.61,688.707 1701.17,688.707 1701.73,688.707 1702.29,688.707 1702.85,688.707 1703.41,688.707 1703.97,688.707 1704.53,688.707 1705.09,688.707 1705.65,688.707 1706.21,688.707 1706.77,688.707 1707.32,688.707 1707.88,688.707 1708.44,688.707 1709,688.707 1709.56,688.707 1710.12,688.707 1710.68,688.707 1711.24,688.707 1711.8,688.707 1712.36,688.707 1712.92,688.707 1713.48,688.707 1714.04,688.707 1714.6,688.707 1715.15,688.707 1715.71,688.707 1716.27,688.707 1716.83,688.707 1717.39,688.707 1717.95,688.707 1718.51,688.707 1719.07,688.707 1719.63,688.707 1720.19,688.707 1720.75,688.707 1721.31,688.707 1721.87,688.707 1722.42,688.707 1722.98,688.707 1723.54,688.707 1724.1,688.707 1724.66,688.707 1725.22,688.707 1725.78,688.707 1726.34,688.707 1726.9,688.707 1727.46,688.707 1728.02,688.707 1728.58,688.707 1729.14,688.707 1729.69,688.707 1730.25,688.707 1730.81,688.707 1731.37,688.707 1731.93,688.707 1732.49,688.707 1733.05,688.707 1733.61,688.707 1734.17,688.707 1734.73,688.707 1735.29,688.707 1735.85,688.707 1736.41,688.707 1736.97,688.707 1737.52,688.707 1738.08,688.707 1738.64,688.707 1739.2,688.707 1739.76,688.707 1740.32,688.707 1740.88,688.707 1741.44,688.707 1742,688.707 1742.56,688.707 1743.12,688.707 1743.68,688.707 1744.24,688.707 1744.79,688.707 1745.35,688.707 1745.91,688.707 1746.47,688.707 1747.03,688.707 1747.59,688.707 1748.15,688.707 1748.71,688.707 1749.27,688.707 1749.83,688.707 1750.39,688.707 1750.95,688.707 1751.51,688.707 1752.06,688.707 1752.62,688.707 1753.18,688.707 1753.74,688.707 1754.3,688.707 1754.86,688.707 1755.42,688.707 1755.98,688.707 1756.54,688.707 1757.1,688.707 1757.66,688.707 1758.22,688.707 1758.78,688.707 1759.34,688.707 1759.89,688.707 1760.45,688.707 1761.01,688.707 1761.57,688.707 1762.13,688.707 1762.69,688.707 1763.25,688.707 1763.81,688.707 1764.37,688.707 1764.93,688.707 1765.49,688.707 1766.05,688.707 1766.61,688.707 1767.16,688.707 1767.72,688.707 1768.28,688.707 1768.84,688.707 1769.4,688.707 1769.96,688.707 1770.52,688.707 1771.08,688.707 1771.64,688.707 1772.2,688.707 1772.76,688.707 1773.32,688.707 1773.88,688.707 1774.43,688.707 1774.99,688.707 1775.55,688.707 1776.11,688.707 1776.67,688.707 1777.23,688.707 1777.79,688.707 1778.35,688.707 1778.91,688.707 1779.47,688.707 1780.03,688.707 1780.59,688.707 1781.15,688.707 1781.71,688.707 1782.26,688.707 1782.82,688.707 1783.38,688.707 1783.94,688.707 1784.5,688.707 1785.06,688.707 1785.62,688.707 1786.18,688.707 1786.74,688.707 1787.3,688.707 1787.86,688.707 1788.42,688.707 1788.98,688.707 1789.53,688.707 1790.09,688.707 1790.65,688.707 1791.21,688.707 1791.77,688.707 1792.33,688.707 1792.89,688.707 1793.45,688.707 1794.01,688.707 1794.57,688.707 1795.13,688.707 1795.69,688.707 1796.25,688.707 1796.8,688.707 1797.36,688.707 1797.92,688.707 1798.48,688.707 1799.04,688.707 1799.6,688.707 1800.16,688.707 1800.72,688.707 1801.28,688.707 1801.84,688.707 1802.4,688.707 1802.96,688.707 1803.52,688.707 1804.08,688.707 1804.63,688.707 1805.19,688.707 1805.75,688.707 1806.31,688.707 1806.87,688.707 1807.43,688.707 1807.99,688.707 1808.55,688.707 1809.11,688.707 1809.67,688.707 1810.23,688.707 1810.79,688.707 1811.35,688.707 1811.9,688.707 1812.46,688.707 1813.02,688.707 1813.58,688.707 1814.14,688.707 1814.7,688.707 1815.26,688.707 1815.82,688.707 1816.38,688.707 1816.94,688.707 1817.5,688.707 1818.06,688.707 1818.62,688.707 1819.18,688.707 1819.73,688.707 1820.29,688.707 1820.85,688.707 1821.41,688.707 1821.97,688.707 1822.53,688.707 1823.09,688.707 1823.65,688.707 1824.21,688.707 1824.77,688.707 1825.33,688.707 1825.89,688.707 1826.45,688.707 1827,688.707 1827.56,688.707 1828.12,688.707 1828.68,688.707 1829.24,688.707 1829.8,688.707 1830.36,688.707 1830.92,688.707 1831.48,688.707 1832.04,688.707 1832.6,688.707 1833.16,688.707 1833.72,688.707 1834.27,688.707 1834.83,688.707 1835.39,688.707 1835.95,688.707 1836.51,688.707 1837.07,688.707 1837.63,688.707 1838.19,688.707 \"/>\n<path clip-path=\"url(#clip003)\" d=\"M720.247 685.247 L720.806 685.247 L721.365 685.247 L721.924 685.247 L722.484 685.247 L723.043 685.247 L723.602 685.247 L724.161 685.247 L724.721 685.247 L725.28 685.247 L725.839 685.247 L726.398 685.247 L726.958 685.247 L727.517 685.247 L728.076 685.247 L728.635 685.247 L729.195 685.247 L729.754 685.247 L730.313 685.247 L730.872 685.247 L731.432 685.247 L731.991 685.247 L732.55 685.247 L733.109 685.247 L733.669 685.247 L734.228 685.247 L734.787 685.247 L735.346 685.247 L735.906 685.247 L736.465 685.247 L737.024 685.247 L737.583 685.247 L738.143 685.247 L738.702 685.247 L739.261 685.247 L739.82 685.247 L740.38 685.247 L740.939 685.247 L741.498 685.247 L742.057 685.247 L742.617 685.247 L743.176 685.247 L743.735 685.247 L744.294 685.247 L744.854 685.247 L745.413 685.247 L745.972 685.247 L746.531 685.247 L747.091 685.247 L747.65 685.247 L748.209 685.247 L748.768 685.247 L749.328 685.247 L749.887 685.247 L750.446 685.247 L751.005 685.247 L751.565 685.247 L752.124 685.247 L752.683 685.247 L753.242 685.247 L753.802 685.247 L754.361 685.247 L754.92 685.247 L755.479 685.247 L756.039 685.247 L756.598 685.247 L757.157 685.247 L757.716 685.247 L758.276 685.247 L758.835 685.247 L759.394 685.247 L759.953 685.247 L760.513 685.247 L761.072 685.247 L761.631 685.247 L762.19 685.247 L762.75 685.247 L763.309 685.247 L763.868 685.247 L764.427 685.247 L764.987 685.247 L765.546 685.247 L766.105 685.247 L766.664 685.247 L767.224 685.247 L767.783 685.247 L768.342 685.247 L768.901 685.247 L769.461 685.247 L770.02 685.247 L770.579 685.247 L771.138 685.247 L771.698 685.247 L772.257 685.247 L772.816 685.247 L773.375 685.247 L773.935 685.247 L774.494 685.247 L775.053 685.247 L775.612 685.247 L776.172 685.247 L776.731 685.247 L777.29 685.247 L777.849 685.247 L778.409 685.247 L778.968 685.247 L779.527 685.247 L780.086 685.247 L780.646 685.247 L781.205 685.247 L781.764 685.247 L782.323 685.247 L782.883 685.247 L783.442 685.247 L784.001 685.247 L784.56 685.247 L785.12 685.247 L785.679 685.247 L786.238 685.247 L786.797 685.247 L787.357 685.247 L787.916 685.247 L788.475 685.247 L789.034 685.247 L789.594 685.247 L790.153 685.247 L790.712 685.247 L791.271 685.247 L791.831 685.247 L792.39 685.247 L792.949 685.247 L793.508 685.247 L794.068 685.247 L794.627 685.247 L795.186 685.247 L795.745 685.247 L796.305 685.247 L796.864 685.247 L797.423 685.247 L797.982 685.247 L798.542 685.247 L799.101 685.247 L799.66 685.247 L800.219 685.247 L800.779 685.247 L801.338 685.247 L801.897 685.247 L802.456 685.247 L803.016 685.247 L803.575 685.247 L804.134 685.247 L804.693 685.247 L805.253 685.247 L805.812 685.247 L806.371 685.247 L806.931 685.247 L807.49 685.247 L808.049 685.247 L808.608 685.247 L809.168 685.247 L809.727 685.247 L810.286 685.247 L810.845 685.247 L811.405 685.247 L811.964 685.247 L812.523 685.247 L813.082 685.247 L813.642 685.247 L814.201 685.247 L814.76 685.247 L815.319 685.247 L815.879 685.247 L816.438 685.247 L816.997 685.247 L817.556 685.247 L818.116 685.247 L818.675 685.247 L819.234 685.247 L819.793 685.247 L820.353 685.247 L820.912 685.247 L821.471 685.247 L822.03 685.247 L822.59 685.247 L823.149 685.247 L823.708 685.247 L824.267 685.247 L824.827 685.247 L825.386 685.247 L825.945 685.247 L826.504 685.247 L827.064 685.247 L827.623 685.247 L828.182 685.247 L828.741 685.247 L829.301 685.247 L829.86 685.247 L830.419 685.247 L830.978 685.247 L831.538 685.247 L832.097 685.247 L832.656 685.247 L833.215 685.247 L833.775 685.247 L834.334 685.247 L834.893 685.247 L835.452 685.247 L836.012 685.247 L836.571 685.247 L837.13 685.247 L837.689 685.247 L838.249 685.247 L838.808 685.247 L839.367 685.247 L839.926 685.247 L840.486 685.247 L841.045 685.247 L841.604 685.247 L842.163 685.247 L842.723 685.247 L843.282 685.247 L843.841 685.247 L844.4 685.247 L844.96 685.247 L845.519 685.247 L846.078 685.247 L846.637 685.247 L847.197 685.247 L847.756 685.247 L848.315 685.247 L848.874 685.247 L849.434 685.247 L849.993 685.247 L850.552 685.247 L851.111 685.247 L851.671 685.247 L852.23 685.247 L852.789 685.247 L853.348 685.247 L853.908 685.247 L854.467 685.247 L855.026 685.247 L855.585 685.247 L856.145 685.247 L856.704 685.247 L857.263 685.247 L857.822 685.247 L858.382 685.247 L858.941 685.247 L859.5 685.247 L860.059 685.247 L860.619 685.247 L861.178 685.247 L861.737 685.247 L862.296 685.247 L862.856 685.247 L863.415 685.247 L863.974 685.247 L864.533 685.247 L865.093 685.247 L865.652 685.247 L866.211 685.247 L866.77 685.247 L867.33 685.247 L867.889 685.247 L868.448 685.247 L869.007 685.247 L869.567 685.247 L870.126 685.247 L870.685 685.247 L871.244 685.247 L871.804 685.247 L872.363 685.247 L872.922 685.247 L873.481 685.247 L874.041 685.247 L874.6 685.247 L875.159 685.247 L875.718 685.247 L876.278 685.247 L876.837 685.247 L877.396 685.247 L877.955 685.247 L878.515 685.247 L879.074 685.247 L879.633 685.247 L880.192 685.247 L880.752 685.247 L881.311 685.247 L881.87 685.247 L882.429 685.247 L882.989 685.247 L883.548 685.247 L884.107 685.247 L884.666 685.247 L885.226 685.247 L885.785 685.247 L886.344 685.247 L886.903 685.247 L887.463 685.247 L888.022 685.247 L888.581 685.247 L889.14 685.247 L889.7 685.247 L890.259 685.247 L890.818 685.247 L891.377 685.247 L891.937 685.247 L892.496 685.247 L893.055 685.247 L893.614 685.247 L894.174 685.247 L894.733 685.247 L895.292 685.247 L895.851 685.247 L896.411 685.247 L896.97 685.247 L897.529 685.247 L898.088 685.247 L898.648 685.247 L899.207 685.247 L899.766 685.247 L900.325 685.247 L900.885 685.247 L901.444 685.247 L902.003 685.247 L902.562 685.247 L903.122 685.247 L903.681 685.247 L904.24 685.247 L904.799 685.247 L905.359 685.247 L905.918 685.247 L906.477 685.247 L907.036 685.247 L907.596 685.247 L908.155 685.247 L908.714 685.247 L909.273 685.247 L909.833 685.247 L910.392 685.247 L910.951 685.247 L911.51 685.247 L912.07 685.247 L912.629 685.247 L913.188 685.247 L913.747 685.247 L914.307 685.247 L914.866 685.247 L915.425 685.247 L915.984 685.247 L916.544 685.247 L917.103 685.247 L917.662 685.247 L918.221 685.247 L918.781 685.247 L919.34 685.247 L919.899 685.247 L920.458 685.247 L921.018 685.247 L921.577 685.247 L922.136 685.247 L922.695 685.247 L923.255 685.247 L923.814 685.247 L924.373 685.247 L924.932 685.247 L925.492 685.247 L926.051 685.247 L926.61 685.247 L927.169 685.247 L927.729 685.247 L928.288 685.247 L928.847 685.247 L929.406 685.247 L929.966 685.247 L930.525 685.247 L931.084 685.247 L931.644 685.247 L932.203 685.247 L932.762 685.247 L933.321 685.247 L933.881 685.247 L934.44 685.247 L934.999 685.247 L935.558 685.247 L936.118 685.247 L936.677 685.247 L937.236 685.247 L937.795 685.247 L938.355 685.247 L938.914 685.247 L939.473 685.247 L940.032 685.247 L940.592 685.247 L941.151 685.247 L941.71 685.247 L942.269 685.247 L942.829 685.247 L943.388 685.247 L943.947 685.247 L944.506 685.247 L945.066 685.247 L945.625 685.247 L946.184 685.247 L946.743 685.247 L947.303 685.247 L947.862 685.247 L948.421 685.247 L948.98 685.247 L949.54 685.247 L950.099 685.247 L950.658 685.247 L951.217 685.247 L951.777 685.247 L952.336 685.247 L952.895 685.247 L953.454 685.247 L954.014 685.247 L954.573 685.247 L955.132 685.247 L955.691 685.247 L956.251 685.247 L956.81 685.247 L957.369 685.247 L957.928 685.247 L958.488 685.247 L959.047 685.247 L959.606 685.247 L960.165 685.247 L960.725 685.247 L961.284 685.247 L961.843 685.247 L962.402 685.247 L962.962 685.247 L963.521 685.247 L964.08 685.247 L964.639 685.247 L965.199 685.247 L965.758 685.247 L966.317 685.247 L966.876 685.247 L967.436 685.247 L967.995 685.247 L968.554 685.247 L969.113 685.247 L969.673 685.247 L970.232 685.247 L970.791 685.247 L971.35 685.247 L971.91 685.247 L972.469 685.247 L973.028 685.247 L973.587 685.247 L974.147 685.247 L974.706 685.247 L975.265 685.247 L975.824 685.247 L976.384 685.247 L976.943 685.247 L977.502 685.247 L978.061 685.247 L978.621 685.247 L979.18 685.247 L979.739 685.247 L980.298 685.247 L980.858 685.247 L981.417 685.247 L981.976 685.247 L982.535 685.247 L983.095 685.247 L983.654 685.247 L984.213 685.247 L984.772 685.247 L985.332 685.247 L985.891 685.247 L986.45 685.247 L987.009 685.247 L987.569 685.247 L988.128 685.247 L988.687 685.247 L989.246 685.247 L989.806 685.247 L990.365 685.247 L990.924 685.247 L991.483 685.247 L992.043 685.247 L992.602 685.247 L993.161 685.247 L993.72 685.247 L994.28 685.247 L994.839 685.247 L995.398 685.247 L995.957 685.247 L996.517 685.247 L997.076 685.247 L997.635 685.247 L998.194 685.247 L998.754 685.247 L999.313 685.247 L999.872 685.247 L1000.43 685.247 L1000.99 685.247 L1001.55 685.247 L1002.11 685.247 L1002.67 685.247 L1003.23 685.247 L1003.79 685.247 L1004.35 685.247 L1004.91 685.247 L1005.46 685.247 L1006.02 685.247 L1006.58 685.247 L1007.14 685.247 L1007.7 685.247 L1008.26 685.247 L1008.82 685.247 L1009.38 685.247 L1009.94 685.247 L1010.5 685.247 L1011.06 685.247 L1011.62 685.247 L1012.18 685.247 L1012.73 685.247 L1013.29 685.247 L1013.85 685.247 L1014.41 685.247 L1014.97 685.247 L1015.53 685.247 L1016.09 685.247 L1016.65 685.247 L1017.21 685.247 L1017.77 685.247 L1018.33 685.247 L1018.89 685.247 L1019.45 685.247 L1020.01 685.247 L1020.56 685.247 L1021.12 685.247 L1021.68 685.247 L1022.24 685.247 L1022.8 685.247 L1023.36 685.247 L1023.92 685.247 L1024.48 685.247 L1025.04 685.247 L1025.6 685.247 L1026.16 685.247 L1026.72 685.247 L1027.28 685.247 L1027.83 685.247 L1028.39 685.247 L1028.95 685.247 L1029.51 685.247 L1030.07 685.247 L1030.63 685.247 L1031.19 685.247 L1031.75 685.247 L1032.31 685.247 L1032.87 685.247 L1033.43 685.247 L1033.99 685.247 L1034.55 685.247 L1035.1 685.247 L1035.66 685.247 L1036.22 685.247 L1036.78 685.247 L1037.34 685.247 L1037.9 685.247 L1038.46 685.247 L1039.02 685.247 L1039.58 685.247 L1040.14 685.247 L1040.7 685.247 L1041.26 685.247 L1041.82 685.247 L1042.38 685.247 L1042.93 685.247 L1043.49 685.247 L1044.05 685.247 L1044.61 685.247 L1045.17 685.247 L1045.73 685.247 L1046.29 685.247 L1046.85 685.247 L1047.41 685.247 L1047.97 685.247 L1048.53 685.247 L1049.09 685.247 L1049.65 685.247 L1050.2 685.247 L1050.76 685.247 L1051.32 685.247 L1051.88 685.247 L1052.44 685.247 L1053 685.247 L1053.56 685.247 L1054.12 685.247 L1054.68 685.247 L1055.24 685.247 L1055.8 685.247 L1056.36 685.247 L1056.92 685.247 L1057.48 685.247 L1058.03 685.247 L1058.59 685.247 L1059.15 685.247 L1059.71 685.247 L1060.27 685.247 L1060.83 685.247 L1061.39 685.247 L1061.95 685.247 L1062.51 685.247 L1063.07 685.247 L1063.63 685.247 L1064.19 685.247 L1064.75 685.247 L1065.3 685.247 L1065.86 685.247 L1066.42 685.247 L1066.98 685.247 L1067.54 685.247 L1068.1 685.247 L1068.66 685.247 L1069.22 685.247 L1069.78 685.247 L1070.34 685.247 L1070.9 685.247 L1071.46 685.247 L1072.02 685.247 L1072.57 685.247 L1073.13 685.247 L1073.69 685.247 L1074.25 685.247 L1074.81 685.247 L1075.37 685.247 L1075.93 685.247 L1076.49 685.247 L1077.05 685.247 L1077.61 685.247 L1078.17 685.247 L1078.73 685.247 L1079.29 685.247 L1079.85 685.247 L1080.4 685.247 L1080.96 685.247 L1081.52 685.247 L1082.08 685.247 L1082.64 685.247 L1083.2 685.247 L1083.76 685.247 L1084.32 685.247 L1084.88 685.247 L1085.44 685.247 L1086 685.247 L1086.56 685.247 L1087.12 685.247 L1087.67 685.247 L1088.23 685.247 L1088.79 685.247 L1089.35 685.247 L1089.91 685.247 L1090.47 685.247 L1091.03 685.247 L1091.59 685.247 L1092.15 685.247 L1092.71 685.247 L1093.27 685.247 L1093.83 685.247 L1094.39 685.247 L1094.94 685.247 L1095.5 685.247 L1096.06 685.247 L1096.62 685.247 L1097.18 685.247 L1097.74 685.247 L1098.3 685.247 L1098.86 685.247 L1099.42 685.247 L1099.98 685.247 L1100.54 685.247 L1101.1 685.247 L1101.66 685.247 L1102.22 685.247 L1102.77 685.247 L1103.33 685.247 L1103.89 685.247 L1104.45 685.247 L1105.01 685.247 L1105.57 685.247 L1106.13 685.247 L1106.69 685.247 L1107.25 685.247 L1107.81 685.247 L1108.37 685.247 L1108.93 685.247 L1109.49 685.247 L1110.04 685.247 L1110.6 685.247 L1111.16 685.247 L1111.72 685.247 L1112.28 685.247 L1112.84 685.247 L1113.4 685.247 L1113.96 685.247 L1114.52 685.247 L1115.08 685.247 L1115.64 685.247 L1116.2 685.247 L1116.76 685.247 L1117.31 685.247 L1117.87 685.247 L1118.43 685.247 L1118.99 685.247 L1119.55 685.247 L1120.11 685.247 L1120.67 685.247 L1121.23 685.247 L1121.79 685.247 L1122.35 685.247 L1122.91 685.247 L1123.47 685.247 L1124.03 685.247 L1124.59 685.247 L1125.14 685.247 L1125.7 685.247 L1126.26 685.247 L1126.82 685.247 L1127.38 685.247 L1127.94 685.247 L1128.5 685.247 L1129.06 685.247 L1129.62 685.247 L1130.18 685.247 L1130.74 685.247 L1131.3 685.247 L1131.86 685.247 L1132.41 685.247 L1132.97 685.247 L1133.53 685.247 L1134.09 685.247 L1134.65 685.247 L1135.21 685.247 L1135.77 685.247 L1136.33 685.247 L1136.89 685.247 L1137.45 685.247 L1138.01 685.247 L1138.57 685.247 L1139.13 685.247 L1139.68 685.247 L1140.24 685.247 L1140.8 685.247 L1141.36 685.247 L1141.92 685.247 L1142.48 685.247 L1143.04 685.247 L1143.6 685.247 L1144.16 685.247 L1144.72 685.247 L1145.28 685.247 L1145.84 685.247 L1146.4 685.247 L1146.96 685.247 L1147.51 685.247 L1148.07 685.247 L1148.63 685.247 L1149.19 685.247 L1149.75 685.247 L1150.31 685.247 L1150.87 685.247 L1151.43 685.247 L1151.99 685.247 L1152.55 685.247 L1153.11 685.247 L1153.67 685.247 L1154.23 685.247 L1154.78 685.247 L1155.34 685.247 L1155.9 685.247 L1156.46 685.247 L1157.02 685.247 L1157.58 685.247 L1158.14 685.247 L1158.7 685.247 L1159.26 685.247 L1159.82 685.247 L1160.38 685.247 L1160.94 685.247 L1161.5 685.247 L1162.05 685.247 L1162.61 685.247 L1163.17 685.247 L1163.73 685.247 L1164.29 685.247 L1164.85 685.247 L1165.41 685.247 L1165.97 685.247 L1166.53 685.247 L1167.09 685.247 L1167.65 685.247 L1168.21 685.247 L1168.77 685.247 L1169.33 685.247 L1169.88 685.247 L1170.44 685.247 L1171 685.247 L1171.56 685.247 L1172.12 685.247 L1172.68 685.247 L1173.24 685.247 L1173.8 685.247 L1174.36 685.247 L1174.92 685.247 L1175.48 685.247 L1176.04 685.247 L1176.6 685.247 L1177.15 685.247 L1177.71 685.247 L1178.27 685.247 L1178.83 685.247 L1179.39 685.247 L1179.95 685.247 L1180.51 685.247 L1181.07 685.247 L1181.63 685.247 L1182.19 685.247 L1182.75 685.247 L1183.31 685.247 L1183.87 685.247 L1184.43 685.247 L1184.98 685.247 L1185.54 685.247 L1186.1 685.247 L1186.66 685.247 L1187.22 685.247 L1187.78 685.247 L1188.34 685.247 L1188.9 685.247 L1189.46 685.247 L1190.02 685.247 L1190.58 685.247 L1191.14 685.247 L1191.7 685.247 L1192.25 685.247 L1192.81 685.247 L1193.37 685.247 L1193.93 685.247 L1194.49 685.247 L1195.05 685.247 L1195.61 685.247 L1196.17 685.247 L1196.73 685.247 L1197.29 685.247 L1197.85 685.247 L1198.41 685.247 L1198.97 685.247 L1199.52 685.247 L1200.08 685.247 L1200.64 685.247 L1201.2 685.247 L1201.76 685.247 L1202.32 685.247 L1202.88 685.247 L1203.44 685.247 L1204 685.247 L1204.56 685.247 L1205.12 685.247 L1205.68 685.247 L1206.24 685.247 L1206.8 685.247 L1207.35 685.247 L1207.91 685.247 L1208.47 685.247 L1209.03 685.247 L1209.59 685.247 L1210.15 685.247 L1210.71 685.247 L1211.27 685.247 L1211.83 685.247 L1212.39 685.247 L1212.95 685.247 L1213.51 685.247 L1214.07 685.247 L1214.62 685.247 L1215.18 685.247 L1215.74 685.247 L1216.3 685.247 L1216.86 685.247 L1217.42 685.247 L1217.98 685.247 L1218.54 685.247 L1219.1 685.247 L1219.66 685.247 L1220.22 685.247 L1220.78 685.247 L1221.34 685.247 L1221.89 685.247 L1222.45 685.247 L1223.01 685.247 L1223.57 685.247 L1224.13 685.247 L1224.69 685.247 L1225.25 685.247 L1225.81 685.247 L1226.37 685.247 L1226.93 685.247 L1227.49 685.247 L1228.05 685.247 L1228.61 685.247 L1229.17 685.247 L1229.72 685.247 L1230.28 685.247 L1230.84 685.247 L1231.4 685.247 L1231.96 685.247 L1232.52 685.247 L1233.08 685.247 L1233.64 685.247 L1234.2 685.247 L1234.76 685.247 L1235.32 685.247 L1235.88 685.247 L1236.44 685.247 L1236.99 685.247 L1237.55 685.247 L1238.11 685.247 L1238.67 685.247 L1239.23 685.247 L1239.79 685.247 L1240.35 685.247 L1240.91 685.247 L1241.47 685.247 L1242.03 685.247 L1242.59 685.247 L1243.15 685.247 L1243.71 685.247 L1244.26 685.247 L1244.82 685.247 L1245.38 685.247 L1245.94 685.247 L1246.5 685.247 L1247.06 685.247 L1247.62 685.247 L1248.18 685.247 L1248.74 685.247 L1249.3 685.247 L1249.86 685.247 L1250.42 685.247 L1250.98 685.247 L1251.54 685.247 L1252.09 685.247 L1252.65 685.247 L1253.21 685.247 L1253.77 685.247 L1254.33 685.247 L1254.89 685.247 L1255.45 685.247 L1256.01 685.247 L1256.57 685.247 L1257.13 685.247 L1257.69 685.247 L1258.25 685.247 L1258.81 685.247 L1259.36 685.247 L1259.92 685.247 L1260.48 685.247 L1261.04 685.247 L1261.6 685.247 L1262.16 685.247 L1262.72 685.247 L1263.28 685.247 L1263.84 685.247 L1264.4 685.247 L1264.96 685.247 L1265.52 685.247 L1266.08 685.247 L1266.63 685.247 L1267.19 685.247 L1267.75 685.247 L1268.31 685.247 L1268.87 685.247 L1269.43 685.247 L1269.99 685.247 L1270.55 685.247 L1271.11 685.247 L1271.67 685.247 L1272.23 685.247 L1272.79 685.247 L1273.35 685.247 L1273.91 685.247 L1274.46 685.247 L1275.02 685.247 L1275.58 685.247 L1276.14 685.247 L1276.7 685.247 L1277.26 685.247 L1277.82 685.247 L1278.38 685.247 L1278.94 685.247 L1279.5 685.247 L1280.06 685.247 L1280.62 685.247 L1281.18 685.247 L1281.73 685.247 L1282.29 685.247 L1282.85 685.247 L1283.41 685.247 L1283.97 685.247 L1284.53 685.247 L1285.09 685.247 L1285.65 685.247 L1286.21 685.247 L1286.77 685.247 L1287.33 685.247 L1287.89 685.247 L1288.45 685.247 L1289 685.247 L1289.56 685.247 L1290.12 685.247 L1290.68 685.247 L1291.24 685.247 L1291.8 685.247 L1292.36 685.247 L1292.92 685.247 L1293.48 685.247 L1294.04 685.247 L1294.6 685.247 L1295.16 685.247 L1295.72 685.247 L1296.28 685.247 L1296.83 685.247 L1297.39 685.247 L1297.95 685.247 L1298.51 685.247 L1299.07 685.247 L1299.63 685.247 L1300.19 685.247 L1300.75 685.247 L1301.31 685.247 L1301.87 685.247 L1302.43 685.247 L1302.99 685.247 L1303.55 685.247 L1304.1 685.247 L1304.66 685.247 L1305.22 685.247 L1305.78 685.247 L1306.34 685.247 L1306.9 685.247 L1307.46 685.247 L1308.02 685.247 L1308.58 685.247 L1309.14 685.247 L1309.7 685.247 L1310.26 685.247 L1310.82 685.247 L1311.38 685.247 L1311.93 685.247 L1312.49 685.247 L1313.05 685.247 L1313.61 685.247 L1314.17 685.247 L1314.73 685.247 L1315.29 685.247 L1315.85 685.247 L1316.41 685.247 L1316.97 685.247 L1317.53 685.247 L1318.09 685.247 L1318.65 685.247 L1319.2 685.247 L1319.76 685.247 L1320.32 685.247 L1320.88 685.247 L1321.44 685.247 L1322 685.247 L1322.56 685.247 L1323.12 685.247 L1323.68 685.247 L1324.24 685.247 L1324.8 685.247 L1325.36 685.247 L1325.92 685.247 L1326.47 685.247 L1327.03 685.247 L1327.59 685.247 L1328.15 685.247 L1328.71 685.247 L1329.27 685.247 L1329.83 685.247 L1330.39 685.247 L1330.95 685.247 L1331.51 685.247 L1332.07 685.247 L1332.63 685.247 L1333.19 685.247 L1333.75 685.247 L1334.3 685.247 L1334.86 685.247 L1335.42 685.247 L1335.98 685.247 L1336.54 685.247 L1337.1 685.247 L1337.66 685.247 L1338.22 685.247 L1338.78 685.247 L1339.34 685.247 L1339.9 685.247 L1340.46 685.247 L1341.02 685.247 L1341.57 685.247 L1342.13 685.247 L1342.69 685.247 L1343.25 685.247 L1343.81 685.247 L1344.37 685.247 L1344.93 685.247 L1345.49 685.247 L1346.05 685.247 L1346.61 685.247 L1347.17 685.247 L1347.73 685.247 L1348.29 685.247 L1348.84 685.247 L1349.4 685.247 L1349.96 685.247 L1350.52 685.247 L1351.08 685.247 L1351.64 685.247 L1352.2 685.247 L1352.76 685.247 L1353.32 685.247 L1353.88 685.247 L1354.44 685.247 L1355 685.247 L1355.56 685.247 L1356.12 685.247 L1356.67 685.247 L1357.23 685.247 L1357.79 685.247 L1358.35 685.247 L1358.91 685.247 L1359.47 685.247 L1360.03 685.247 L1360.59 685.247 L1361.15 685.247 L1361.71 685.247 L1362.27 685.247 L1362.83 685.247 L1363.39 685.247 L1363.94 685.247 L1364.5 685.247 L1365.06 685.247 L1365.62 685.247 L1366.18 685.247 L1366.74 685.247 L1367.3 685.247 L1367.86 685.247 L1368.42 685.247 L1368.98 685.247 L1369.54 685.247 L1370.1 685.247 L1370.66 685.247 L1371.21 685.247 L1371.77 685.247 L1372.33 685.247 L1372.89 685.247 L1373.45 685.247 L1374.01 685.247 L1374.57 685.247 L1375.13 685.247 L1375.69 685.247 L1376.25 685.247 L1376.81 685.247 L1377.37 685.247 L1377.93 685.247 L1378.49 685.247 L1379.04 685.247 L1379.6 685.247 L1380.16 685.247 L1380.72 685.247 L1381.28 685.247 L1381.84 685.247 L1382.4 685.247 L1382.96 685.247 L1383.52 685.247 L1384.08 685.247 L1384.64 685.247 L1385.2 685.247 L1385.76 685.247 L1386.31 685.247 L1386.87 685.247 L1387.43 685.247 L1387.99 685.247 L1388.55 685.247 L1389.11 685.247 L1389.67 685.247 L1390.23 685.247 L1390.79 685.247 L1391.35 685.247 L1391.91 685.247 L1392.47 685.247 L1393.03 685.247 L1393.58 685.247 L1394.14 685.247 L1394.7 685.247 L1395.26 685.247 L1395.82 685.247 L1396.38 685.247 L1396.94 685.247 L1397.5 685.247 L1398.06 685.247 L1398.62 685.247 L1399.18 685.247 L1399.74 685.247 L1400.3 685.247 L1400.86 685.247 L1401.41 685.247 L1401.97 685.247 L1402.53 685.247 L1403.09 685.247 L1403.65 685.247 L1404.21 685.247 L1404.77 685.247 L1405.33 685.247 L1405.89 685.247 L1406.45 685.247 L1407.01 685.247 L1407.57 685.247 L1408.13 685.247 L1408.68 685.247 L1409.24 685.247 L1409.8 685.247 L1410.36 685.247 L1410.92 685.247 L1411.48 685.247 L1412.04 685.247 L1412.6 685.247 L1413.16 685.247 L1413.72 685.247 L1414.28 685.247 L1414.84 685.247 L1415.4 685.247 L1415.95 685.247 L1416.51 685.247 L1417.07 685.247 L1417.63 685.247 L1418.19 685.247 L1418.75 685.247 L1419.31 685.247 L1419.87 685.247 L1420.43 685.247 L1420.99 685.247 L1421.55 685.247 L1422.11 685.247 L1422.67 685.247 L1423.23 685.247 L1423.78 685.247 L1424.34 685.247 L1424.9 685.247 L1425.46 685.247 L1426.02 685.247 L1426.58 685.247 L1427.14 685.247 L1427.7 685.247 L1428.26 685.247 L1428.82 685.247 L1429.38 685.247 L1429.94 685.247 L1430.5 685.247 L1431.05 685.247 L1431.61 685.247 L1432.17 685.247 L1432.73 685.247 L1433.29 685.247 L1433.85 685.247 L1434.41 685.247 L1434.97 685.247 L1435.53 685.247 L1436.09 685.247 L1436.65 685.247 L1437.21 685.247 L1437.77 685.247 L1438.33 685.247 L1438.88 685.247 L1439.44 685.247 L1440 685.247 L1440.56 685.247 L1441.12 685.247 L1441.68 685.247 L1442.24 685.247 L1442.8 685.247 L1443.36 685.247 L1443.92 685.247 L1444.48 685.247 L1445.04 685.247 L1445.6 685.247 L1446.15 685.247 L1446.71 685.247 L1447.27 685.247 L1447.83 685.247 L1448.39 685.247 L1448.95 685.247 L1449.51 685.247 L1450.07 685.247 L1450.63 685.247 L1451.19 685.247 L1451.75 685.247 L1452.31 685.247 L1452.87 685.247 L1453.42 685.247 L1453.98 685.247 L1454.54 685.247 L1455.1 685.247 L1455.66 685.247 L1456.22 685.247 L1456.78 685.247 L1457.34 685.247 L1457.9 685.247 L1458.46 685.247 L1459.02 685.247 L1459.58 685.247 L1460.14 685.247 L1460.7 685.247 L1461.25 685.247 L1461.81 685.247 L1462.37 685.247 L1462.93 685.247 L1463.49 685.247 L1464.05 685.247 L1464.61 685.247 L1465.17 685.247 L1465.73 685.247 L1466.29 685.247 L1466.85 685.247 L1467.41 685.247 L1467.97 685.247 L1468.52 685.247 L1469.08 685.247 L1469.64 685.247 L1470.2 685.247 L1470.76 685.247 L1471.32 685.247 L1471.88 685.247 L1472.44 685.247 L1473 685.247 L1473.56 685.247 L1474.12 685.247 L1474.68 685.247 L1475.24 685.247 L1475.79 685.247 L1476.35 685.247 L1476.91 685.247 L1477.47 685.247 L1478.03 685.247 L1478.59 685.247 L1479.15 685.247 L1479.71 685.247 L1480.27 685.247 L1480.83 685.247 L1481.39 685.247 L1481.95 685.247 L1482.51 685.247 L1483.07 685.247 L1483.62 685.247 L1484.18 685.247 L1484.74 685.247 L1485.3 685.247 L1485.86 685.247 L1486.42 685.247 L1486.98 685.247 L1487.54 685.247 L1488.1 685.247 L1488.66 685.247 L1489.22 685.247 L1489.78 685.247 L1490.34 685.247 L1490.89 685.247 L1491.45 685.247 L1492.01 685.247 L1492.57 685.247 L1493.13 685.247 L1493.69 685.247 L1494.25 685.247 L1494.81 685.247 L1495.37 685.247 L1495.93 685.247 L1496.49 685.247 L1497.05 685.247 L1497.61 685.247 L1498.16 685.247 L1498.72 685.247 L1499.28 685.247 L1499.84 685.247 L1500.4 685.247 L1500.96 685.247 L1501.52 685.247 L1502.08 685.247 L1502.64 685.247 L1503.2 685.247 L1503.76 685.247 L1504.32 685.247 L1504.88 685.247 L1505.44 685.247 L1505.99 685.247 L1506.55 685.247 L1507.11 685.247 L1507.67 685.247 L1508.23 685.247 L1508.79 685.247 L1509.35 685.247 L1509.91 685.247 L1510.47 685.247 L1511.03 685.247 L1511.59 685.247 L1512.15 685.247 L1512.71 685.247 L1513.26 685.247 L1513.82 685.247 L1514.38 685.247 L1514.94 685.247 L1515.5 685.247 L1516.06 685.247 L1516.62 685.247 L1517.18 685.247 L1517.74 685.247 L1518.3 685.247 L1518.86 685.247 L1519.42 685.247 L1519.98 685.247 L1520.53 685.247 L1521.09 685.247 L1521.65 685.247 L1522.21 685.247 L1522.77 685.247 L1523.33 685.247 L1523.89 685.247 L1524.45 685.247 L1525.01 685.247 L1525.57 685.247 L1526.13 685.247 L1526.69 685.247 L1527.25 685.247 L1527.81 685.247 L1528.36 685.247 L1528.92 685.247 L1529.48 685.247 L1530.04 685.247 L1530.6 685.247 L1531.16 685.247 L1531.72 685.247 L1532.28 685.247 L1532.84 685.247 L1533.4 685.247 L1533.96 685.247 L1534.52 685.247 L1535.08 685.247 L1535.63 685.247 L1536.19 685.247 L1536.75 685.247 L1537.31 685.247 L1537.87 685.247 L1538.43 685.247 L1538.99 685.247 L1539.55 685.247 L1540.11 685.247 L1540.67 685.247 L1541.23 685.247 L1541.79 685.247 L1542.35 685.247 L1542.9 685.247 L1543.46 685.247 L1544.02 685.247 L1544.58 685.247 L1545.14 685.247 L1545.7 685.247 L1546.26 685.247 L1546.82 685.247 L1547.38 685.247 L1547.94 685.247 L1548.5 685.247 L1549.06 685.247 L1549.62 685.247 L1550.18 685.247 L1550.73 685.247 L1551.29 685.247 L1551.85 685.247 L1552.41 685.247 L1552.97 685.247 L1553.53 685.247 L1554.09 685.247 L1554.65 685.247 L1555.21 685.247 L1555.77 685.247 L1556.33 685.247 L1556.89 685.247 L1557.45 685.247 L1558 685.247 L1558.56 685.247 L1559.12 685.247 L1559.68 685.247 L1560.24 685.247 L1560.8 685.247 L1561.36 685.247 L1561.92 685.247 L1562.48 685.247 L1563.04 685.247 L1563.6 685.247 L1564.16 685.247 L1564.72 685.247 L1565.28 685.247 L1565.83 685.247 L1566.39 685.247 L1566.95 685.247 L1567.51 685.247 L1568.07 685.247 L1568.63 685.247 L1569.19 685.247 L1569.75 685.247 L1570.31 685.247 L1570.87 685.247 L1571.43 685.247 L1571.99 685.247 L1572.55 685.247 L1573.1 685.247 L1573.66 685.247 L1574.22 685.247 L1574.78 685.247 L1575.34 685.247 L1575.9 685.247 L1576.46 685.247 L1577.02 685.247 L1577.58 685.247 L1578.14 685.247 L1578.7 685.247 L1579.26 685.247 L1579.82 685.247 L1580.37 685.247 L1580.93 685.247 L1581.49 685.247 L1582.05 685.247 L1582.61 685.247 L1583.17 685.247 L1583.73 685.247 L1584.29 685.247 L1584.85 685.247 L1585.41 685.247 L1585.97 685.247 L1586.53 685.247 L1587.09 685.247 L1587.65 685.247 L1588.2 685.247 L1588.76 685.247 L1589.32 685.247 L1589.88 685.247 L1590.44 685.247 L1591 685.247 L1591.56 685.247 L1592.12 685.247 L1592.68 685.247 L1593.24 685.247 L1593.8 685.247 L1594.36 685.247 L1594.92 685.247 L1595.47 685.247 L1596.03 685.247 L1596.59 685.247 L1597.15 685.247 L1597.71 685.247 L1598.27 685.247 L1598.83 685.247 L1599.39 685.247 L1599.95 685.247 L1600.51 685.247 L1601.07 685.247 L1601.63 685.247 L1602.19 685.247 L1602.74 685.247 L1603.3 685.247 L1603.86 685.247 L1604.42 685.247 L1604.98 685.247 L1605.54 685.247 L1606.1 685.247 L1606.66 685.247 L1607.22 685.247 L1607.78 685.247 L1608.34 685.247 L1608.9 685.247 L1609.46 685.247 L1610.02 685.247 L1610.57 685.247 L1611.13 685.247 L1611.69 685.247 L1612.25 685.247 L1612.81 685.247 L1613.37 685.247 L1613.93 685.247 L1614.49 685.247 L1615.05 685.247 L1615.61 685.247 L1616.17 685.247 L1616.73 685.247 L1617.29 685.247 L1617.84 685.247 L1618.4 685.247 L1618.96 685.247 L1619.52 685.247 L1620.08 685.247 L1620.64 685.247 L1621.2 685.247 L1621.76 685.247 L1622.32 685.247 L1622.88 685.247 L1623.44 685.247 L1624 685.247 L1624.56 685.247 L1625.11 685.247 L1625.67 685.247 L1626.23 685.247 L1626.79 685.247 L1627.35 685.247 L1627.91 685.247 L1628.47 685.247 L1629.03 685.247 L1629.59 685.247 L1630.15 685.247 L1630.71 685.247 L1631.27 685.247 L1631.83 685.247 L1632.39 685.247 L1632.94 685.247 L1633.5 685.247 L1634.06 685.247 L1634.62 685.247 L1635.18 685.247 L1635.74 685.247 L1636.3 685.247 L1636.86 685.247 L1637.42 685.247 L1637.98 685.247 L1638.54 685.247 L1639.1 685.247 L1639.66 685.247 L1640.21 685.247 L1640.77 685.247 L1641.33 685.247 L1641.89 685.247 L1642.45 685.247 L1643.01 685.247 L1643.57 685.247 L1644.13 685.247 L1644.69 685.247 L1645.25 685.247 L1645.81 685.247 L1646.37 685.247 L1646.93 685.247 L1647.48 685.247 L1648.04 685.247 L1648.6 685.247 L1649.16 685.247 L1649.72 685.247 L1650.28 685.247 L1650.84 685.247 L1651.4 685.247 L1651.96 685.247 L1652.52 685.247 L1653.08 685.247 L1653.64 685.247 L1654.2 685.247 L1654.76 685.247 L1655.31 685.247 L1655.87 685.247 L1656.43 685.247 L1656.99 685.247 L1657.55 685.247 L1658.11 685.247 L1658.67 685.247 L1659.23 685.247 L1659.79 685.247 L1660.35 685.247 L1660.91 685.247 L1661.47 685.247 L1662.03 685.247 L1662.58 685.247 L1663.14 685.247 L1663.7 685.247 L1664.26 685.247 L1664.82 685.247 L1665.38 685.247 L1665.94 685.247 L1666.5 685.247 L1667.06 685.247 L1667.62 685.247 L1668.18 685.247 L1668.74 685.247 L1669.3 685.247 L1669.85 685.247 L1670.41 685.247 L1670.97 685.247 L1671.53 685.247 L1672.09 685.247 L1672.65 685.247 L1673.21 685.247 L1673.77 685.247 L1674.33 685.247 L1674.89 685.247 L1675.45 685.247 L1676.01 685.247 L1676.57 685.247 L1677.13 685.247 L1677.68 685.247 L1678.24 685.247 L1678.8 685.247 L1679.36 685.247 L1679.92 685.247 L1680.48 685.247 L1681.04 685.247 L1681.6 685.247 L1682.16 685.247 L1682.72 685.247 L1683.28 685.247 L1683.84 685.247 L1684.4 685.247 L1684.95 685.247 L1685.51 685.247 L1686.07 685.247 L1686.63 685.247 L1687.19 685.247 L1687.75 685.247 L1688.31 685.247 L1688.87 685.247 L1689.43 685.247 L1689.99 685.247 L1690.55 685.247 L1691.11 685.247 L1691.67 685.247 L1692.23 685.247 L1692.78 685.247 L1693.34 685.247 L1693.9 685.247 L1694.46 685.247 L1695.02 685.247 L1695.58 685.247 L1696.14 685.247 L1696.7 685.247 L1697.26 685.247 L1697.82 685.247 L1698.38 685.247 L1698.94 685.247 L1699.5 685.247 L1700.05 685.247 L1700.61 685.247 L1701.17 685.247 L1701.73 685.247 L1702.29 685.247 L1702.85 685.247 L1703.41 685.247 L1703.97 685.247 L1704.53 685.247 L1705.09 685.247 L1705.65 685.247 L1706.21 685.247 L1706.77 685.247 L1707.32 685.247 L1707.88 685.247 L1708.44 685.247 L1709 685.247 L1709.56 685.247 L1710.12 685.247 L1710.68 685.247 L1711.24 685.247 L1711.8 685.247 L1712.36 685.247 L1712.92 685.247 L1713.48 685.247 L1714.04 685.247 L1714.6 685.247 L1715.15 685.247 L1715.71 685.247 L1716.27 685.247 L1716.83 685.247 L1717.39 685.247 L1717.95 685.247 L1718.51 685.247 L1719.07 685.247 L1719.63 685.247 L1720.19 685.247 L1720.75 685.247 L1721.31 685.247 L1721.87 685.247 L1722.42 685.247 L1722.98 685.247 L1723.54 685.247 L1724.1 685.247 L1724.66 685.247 L1725.22 685.247 L1725.78 685.247 L1726.34 685.247 L1726.9 685.247 L1727.46 685.247 L1728.02 685.247 L1728.58 685.247 L1729.14 685.247 L1729.69 685.247 L1730.25 685.247 L1730.81 685.247 L1731.37 685.247 L1731.93 685.247 L1732.49 685.247 L1733.05 685.247 L1733.61 685.247 L1734.17 685.247 L1734.73 685.247 L1735.29 685.247 L1735.85 685.247 L1736.41 685.247 L1736.97 685.247 L1737.52 685.247 L1738.08 685.247 L1738.64 685.247 L1739.2 685.247 L1739.76 685.247 L1740.32 685.247 L1740.88 685.247 L1741.44 685.247 L1742 685.247 L1742.56 685.247 L1743.12 685.247 L1743.68 685.247 L1744.24 685.247 L1744.79 685.247 L1745.35 685.247 L1745.91 685.247 L1746.47 685.247 L1747.03 685.247 L1747.59 685.247 L1748.15 685.247 L1748.71 685.247 L1749.27 685.247 L1749.83 685.247 L1750.39 685.247 L1750.95 685.247 L1751.51 685.247 L1752.06 685.247 L1752.62 685.247 L1753.18 685.247 L1753.74 685.247 L1754.3 685.247 L1754.86 685.247 L1755.42 685.247 L1755.98 685.247 L1756.54 685.247 L1757.1 685.247 L1757.66 685.247 L1758.22 685.247 L1758.78 685.247 L1759.34 685.247 L1759.89 685.247 L1760.45 685.247 L1761.01 685.247 L1761.57 685.247 L1762.13 685.247 L1762.69 685.247 L1763.25 685.247 L1763.81 685.247 L1764.37 685.247 L1764.93 685.247 L1765.49 685.247 L1766.05 685.247 L1766.61 685.247 L1767.16 685.247 L1767.72 685.247 L1768.28 685.247 L1768.84 685.247 L1769.4 685.247 L1769.96 685.247 L1770.52 685.247 L1771.08 685.247 L1771.64 685.247 L1772.2 685.247 L1772.76 685.247 L1773.32 685.247 L1773.88 685.247 L1774.43 685.247 L1774.99 685.247 L1775.55 685.247 L1776.11 685.247 L1776.67 685.247 L1777.23 685.247 L1777.79 685.247 L1778.35 685.247 L1778.91 685.247 L1779.47 685.247 L1780.03 685.247 L1780.59 685.247 L1781.15 685.247 L1781.71 685.247 L1782.26 685.247 L1782.82 685.247 L1783.38 685.247 L1783.94 685.247 L1784.5 685.247 L1785.06 685.247 L1785.62 685.247 L1786.18 685.247 L1786.74 685.247 L1787.3 685.247 L1787.86 685.247 L1788.42 685.247 L1788.98 685.247 L1789.53 685.247 L1790.09 685.247 L1790.65 685.247 L1791.21 685.247 L1791.77 685.247 L1792.33 685.247 L1792.89 685.247 L1793.45 685.247 L1794.01 685.247 L1794.57 685.247 L1795.13 685.247 L1795.69 685.247 L1796.25 685.247 L1796.8 685.247 L1797.36 685.247 L1797.92 685.247 L1798.48 685.247 L1799.04 685.247 L1799.6 685.247 L1800.16 685.247 L1800.72 685.247 L1801.28 685.247 L1801.84 685.247 L1802.4 685.247 L1802.96 685.247 L1803.52 685.247 L1804.08 685.247 L1804.63 685.247 L1805.19 685.247 L1805.75 685.247 L1806.31 685.247 L1806.87 685.247 L1807.43 685.247 L1807.99 685.247 L1808.55 685.247 L1809.11 685.247 L1809.67 685.247 L1810.23 685.247 L1810.79 685.247 L1811.35 685.247 L1811.9 685.247 L1812.46 685.247 L1813.02 685.247 L1813.58 685.247 L1814.14 685.247 L1814.7 685.247 L1815.26 685.247 L1815.82 685.247 L1816.38 685.247 L1816.94 685.247 L1817.5 685.247 L1818.06 685.247 L1818.62 685.247 L1819.18 685.247 L1819.73 685.247 L1820.29 685.247 L1820.85 685.247 L1821.41 685.247 L1821.97 685.247 L1822.53 685.247 L1823.09 685.247 L1823.65 685.247 L1824.21 685.247 L1824.77 685.247 L1825.33 685.247 L1825.89 685.247 L1826.45 685.247 L1827 685.247 L1827.56 685.247 L1828.12 685.247 L1828.68 685.247 L1829.24 685.247 L1829.8 685.247 L1830.36 685.247 L1830.92 685.247 L1831.48 685.247 L1832.04 685.247 L1832.6 685.247 L1833.16 685.247 L1833.72 685.247 L1834.27 685.247 L1834.83 685.247 L1835.39 685.247 L1835.95 685.247 L1836.51 685.247 L1837.07 685.247 L1837.63 685.247 L1838.19 685.247 L1838.19 683.298 L1837.63 683.298 L1837.07 683.298 L1836.51 683.298 L1835.95 683.298 L1835.39 683.298 L1834.83 683.298 L1834.27 683.298 L1833.72 683.298 L1833.16 683.298 L1832.6 683.298 L1832.04 683.298 L1831.48 683.298 L1830.92 683.298 L1830.36 683.298 L1829.8 683.298 L1829.24 683.298 L1828.68 683.298 L1828.12 683.298 L1827.56 683.298 L1827 683.298 L1826.45 683.298 L1825.89 683.298 L1825.33 683.298 L1824.77 683.298 L1824.21 683.298 L1823.65 683.298 L1823.09 683.298 L1822.53 683.298 L1821.97 683.298 L1821.41 683.298 L1820.85 683.298 L1820.29 683.298 L1819.73 683.298 L1819.18 683.298 L1818.62 683.298 L1818.06 683.298 L1817.5 683.298 L1816.94 683.298 L1816.38 683.298 L1815.82 683.298 L1815.26 683.298 L1814.7 683.298 L1814.14 683.298 L1813.58 683.298 L1813.02 683.298 L1812.46 683.298 L1811.9 683.298 L1811.35 683.298 L1810.79 683.298 L1810.23 683.298 L1809.67 683.298 L1809.11 683.298 L1808.55 683.298 L1807.99 683.298 L1807.43 683.298 L1806.87 683.298 L1806.31 683.298 L1805.75 683.298 L1805.19 683.298 L1804.63 683.298 L1804.08 683.298 L1803.52 683.298 L1802.96 683.298 L1802.4 683.298 L1801.84 683.298 L1801.28 683.298 L1800.72 683.298 L1800.16 683.298 L1799.6 683.298 L1799.04 683.298 L1798.48 683.298 L1797.92 683.298 L1797.36 683.298 L1796.8 683.298 L1796.25 683.298 L1795.69 683.298 L1795.13 683.298 L1794.57 683.298 L1794.01 683.298 L1793.45 683.298 L1792.89 683.298 L1792.33 683.298 L1791.77 683.298 L1791.21 683.298 L1790.65 683.298 L1790.09 683.298 L1789.53 683.298 L1788.98 683.298 L1788.42 683.298 L1787.86 683.298 L1787.3 683.298 L1786.74 683.298 L1786.18 683.298 L1785.62 683.298 L1785.06 683.298 L1784.5 683.298 L1783.94 683.298 L1783.38 683.298 L1782.82 683.298 L1782.26 683.298 L1781.71 683.298 L1781.15 683.298 L1780.59 683.298 L1780.03 683.298 L1779.47 683.298 L1778.91 683.298 L1778.35 683.298 L1777.79 683.298 L1777.23 683.298 L1776.67 683.298 L1776.11 683.298 L1775.55 683.298 L1774.99 683.298 L1774.43 683.298 L1773.88 683.298 L1773.32 683.298 L1772.76 683.298 L1772.2 683.298 L1771.64 683.298 L1771.08 683.298 L1770.52 683.298 L1769.96 683.298 L1769.4 683.298 L1768.84 683.298 L1768.28 683.298 L1767.72 683.298 L1767.16 683.298 L1766.61 683.298 L1766.05 683.298 L1765.49 683.298 L1764.93 683.298 L1764.37 683.298 L1763.81 683.298 L1763.25 683.298 L1762.69 683.298 L1762.13 683.298 L1761.57 683.298 L1761.01 683.298 L1760.45 683.298 L1759.89 683.298 L1759.34 683.298 L1758.78 683.298 L1758.22 683.298 L1757.66 683.298 L1757.1 683.298 L1756.54 683.298 L1755.98 683.298 L1755.42 683.298 L1754.86 683.298 L1754.3 683.298 L1753.74 683.298 L1753.18 683.298 L1752.62 683.298 L1752.06 683.298 L1751.51 683.298 L1750.95 683.298 L1750.39 683.298 L1749.83 683.298 L1749.27 683.298 L1748.71 683.298 L1748.15 683.298 L1747.59 683.298 L1747.03 683.298 L1746.47 683.298 L1745.91 683.298 L1745.35 683.298 L1744.79 683.298 L1744.24 683.298 L1743.68 683.298 L1743.12 683.298 L1742.56 683.298 L1742 683.298 L1741.44 683.298 L1740.88 683.298 L1740.32 683.298 L1739.76 683.298 L1739.2 683.298 L1738.64 683.298 L1738.08 683.298 L1737.52 683.298 L1736.97 683.298 L1736.41 683.298 L1735.85 683.298 L1735.29 683.298 L1734.73 683.298 L1734.17 683.298 L1733.61 683.298 L1733.05 683.298 L1732.49 683.298 L1731.93 683.298 L1731.37 683.298 L1730.81 683.298 L1730.25 683.298 L1729.69 683.298 L1729.14 683.298 L1728.58 683.298 L1728.02 683.298 L1727.46 683.298 L1726.9 683.298 L1726.34 683.298 L1725.78 683.298 L1725.22 683.298 L1724.66 683.298 L1724.1 683.298 L1723.54 683.298 L1722.98 683.298 L1722.42 683.298 L1721.87 683.298 L1721.31 683.298 L1720.75 683.298 L1720.19 683.298 L1719.63 683.298 L1719.07 683.298 L1718.51 683.298 L1717.95 683.298 L1717.39 683.298 L1716.83 683.298 L1716.27 683.298 L1715.71 683.298 L1715.15 683.298 L1714.6 683.298 L1714.04 683.298 L1713.48 683.298 L1712.92 683.298 L1712.36 683.298 L1711.8 683.298 L1711.24 683.298 L1710.68 683.298 L1710.12 683.298 L1709.56 683.298 L1709 683.298 L1708.44 683.298 L1707.88 683.298 L1707.32 683.298 L1706.77 683.298 L1706.21 683.298 L1705.65 683.298 L1705.09 683.298 L1704.53 683.298 L1703.97 683.298 L1703.41 683.298 L1702.85 683.298 L1702.29 683.298 L1701.73 683.298 L1701.17 683.298 L1700.61 683.298 L1700.05 683.298 L1699.5 683.298 L1698.94 683.298 L1698.38 683.298 L1697.82 683.298 L1697.26 683.298 L1696.7 683.298 L1696.14 683.298 L1695.58 683.298 L1695.02 683.298 L1694.46 683.298 L1693.9 683.298 L1693.34 683.298 L1692.78 683.298 L1692.23 683.298 L1691.67 683.298 L1691.11 683.298 L1690.55 683.298 L1689.99 683.298 L1689.43 683.298 L1688.87 683.298 L1688.31 683.298 L1687.75 683.298 L1687.19 683.298 L1686.63 683.298 L1686.07 683.298 L1685.51 683.298 L1684.95 683.298 L1684.4 683.298 L1683.84 683.298 L1683.28 683.298 L1682.72 683.298 L1682.16 683.298 L1681.6 683.298 L1681.04 683.298 L1680.48 683.298 L1679.92 683.298 L1679.36 683.298 L1678.8 683.298 L1678.24 683.298 L1677.68 683.298 L1677.13 683.298 L1676.57 683.298 L1676.01 683.298 L1675.45 683.298 L1674.89 683.298 L1674.33 683.298 L1673.77 683.298 L1673.21 683.298 L1672.65 683.298 L1672.09 683.298 L1671.53 683.298 L1670.97 683.298 L1670.41 683.298 L1669.85 683.298 L1669.3 683.298 L1668.74 683.298 L1668.18 683.298 L1667.62 683.298 L1667.06 683.298 L1666.5 683.298 L1665.94 683.298 L1665.38 683.298 L1664.82 683.298 L1664.26 683.298 L1663.7 683.298 L1663.14 683.298 L1662.58 683.298 L1662.03 683.298 L1661.47 683.298 L1660.91 683.298 L1660.35 683.298 L1659.79 683.298 L1659.23 683.298 L1658.67 683.298 L1658.11 683.298 L1657.55 683.298 L1656.99 683.298 L1656.43 683.298 L1655.87 683.298 L1655.31 683.298 L1654.76 683.298 L1654.2 683.298 L1653.64 683.298 L1653.08 683.298 L1652.52 683.298 L1651.96 683.298 L1651.4 683.298 L1650.84 683.298 L1650.28 683.298 L1649.72 683.298 L1649.16 683.298 L1648.6 683.298 L1648.04 683.298 L1647.48 683.298 L1646.93 683.298 L1646.37 683.298 L1645.81 683.298 L1645.25 683.298 L1644.69 683.298 L1644.13 683.298 L1643.57 683.298 L1643.01 683.298 L1642.45 683.298 L1641.89 683.298 L1641.33 683.298 L1640.77 683.298 L1640.21 683.298 L1639.66 683.298 L1639.1 683.298 L1638.54 683.298 L1637.98 683.298 L1637.42 683.298 L1636.86 683.298 L1636.3 683.298 L1635.74 683.298 L1635.18 683.298 L1634.62 683.298 L1634.06 683.298 L1633.5 683.298 L1632.94 683.298 L1632.39 683.298 L1631.83 683.298 L1631.27 683.298 L1630.71 683.298 L1630.15 683.298 L1629.59 683.298 L1629.03 683.298 L1628.47 683.298 L1627.91 683.298 L1627.35 683.298 L1626.79 683.298 L1626.23 683.298 L1625.67 683.298 L1625.11 683.298 L1624.56 683.298 L1624 683.298 L1623.44 683.298 L1622.88 683.298 L1622.32 683.298 L1621.76 683.298 L1621.2 683.298 L1620.64 683.298 L1620.08 683.298 L1619.52 683.298 L1618.96 683.298 L1618.4 683.298 L1617.84 683.298 L1617.29 683.298 L1616.73 683.298 L1616.17 683.298 L1615.61 683.298 L1615.05 683.298 L1614.49 683.298 L1613.93 683.298 L1613.37 683.298 L1612.81 683.298 L1612.25 683.298 L1611.69 683.298 L1611.13 683.298 L1610.57 683.298 L1610.02 683.298 L1609.46 683.298 L1608.9 683.298 L1608.34 683.298 L1607.78 683.298 L1607.22 683.298 L1606.66 683.298 L1606.1 683.298 L1605.54 683.298 L1604.98 683.298 L1604.42 683.298 L1603.86 683.298 L1603.3 683.298 L1602.74 683.298 L1602.19 683.298 L1601.63 683.298 L1601.07 683.298 L1600.51 683.298 L1599.95 683.298 L1599.39 683.298 L1598.83 683.298 L1598.27 683.298 L1597.71 683.298 L1597.15 683.298 L1596.59 683.298 L1596.03 683.298 L1595.47 683.298 L1594.92 683.298 L1594.36 683.298 L1593.8 683.298 L1593.24 683.298 L1592.68 683.298 L1592.12 683.298 L1591.56 683.298 L1591 683.298 L1590.44 683.298 L1589.88 683.298 L1589.32 683.298 L1588.76 683.298 L1588.2 683.298 L1587.65 683.298 L1587.09 683.298 L1586.53 683.298 L1585.97 683.298 L1585.41 683.298 L1584.85 683.298 L1584.29 683.298 L1583.73 683.298 L1583.17 683.298 L1582.61 683.298 L1582.05 683.298 L1581.49 683.298 L1580.93 683.298 L1580.37 683.298 L1579.82 683.298 L1579.26 683.298 L1578.7 683.298 L1578.14 683.298 L1577.58 683.298 L1577.02 683.298 L1576.46 683.298 L1575.9 683.298 L1575.34 683.298 L1574.78 683.298 L1574.22 683.298 L1573.66 683.298 L1573.1 683.298 L1572.55 683.298 L1571.99 683.298 L1571.43 683.298 L1570.87 683.298 L1570.31 683.298 L1569.75 683.298 L1569.19 683.298 L1568.63 683.298 L1568.07 683.298 L1567.51 683.298 L1566.95 683.298 L1566.39 683.298 L1565.83 683.298 L1565.28 683.298 L1564.72 683.298 L1564.16 683.298 L1563.6 683.298 L1563.04 683.298 L1562.48 683.298 L1561.92 683.298 L1561.36 683.298 L1560.8 683.298 L1560.24 683.298 L1559.68 683.298 L1559.12 683.298 L1558.56 683.298 L1558 683.298 L1557.45 683.298 L1556.89 683.298 L1556.33 683.298 L1555.77 683.298 L1555.21 683.298 L1554.65 683.298 L1554.09 683.298 L1553.53 683.298 L1552.97 683.298 L1552.41 683.298 L1551.85 683.298 L1551.29 683.298 L1550.73 683.298 L1550.18 683.298 L1549.62 683.298 L1549.06 683.298 L1548.5 683.298 L1547.94 683.298 L1547.38 683.298 L1546.82 683.298 L1546.26 683.298 L1545.7 683.298 L1545.14 683.298 L1544.58 683.298 L1544.02 683.298 L1543.46 683.298 L1542.9 683.298 L1542.35 683.298 L1541.79 683.298 L1541.23 683.298 L1540.67 683.298 L1540.11 683.298 L1539.55 683.298 L1538.99 683.298 L1538.43 683.298 L1537.87 683.298 L1537.31 683.298 L1536.75 683.298 L1536.19 683.298 L1535.63 683.298 L1535.08 683.298 L1534.52 683.298 L1533.96 683.298 L1533.4 683.298 L1532.84 683.298 L1532.28 683.298 L1531.72 683.298 L1531.16 683.298 L1530.6 683.298 L1530.04 683.298 L1529.48 683.298 L1528.92 683.298 L1528.36 683.298 L1527.81 683.298 L1527.25 683.298 L1526.69 683.298 L1526.13 683.298 L1525.57 683.298 L1525.01 683.298 L1524.45 683.298 L1523.89 683.298 L1523.33 683.298 L1522.77 683.298 L1522.21 683.298 L1521.65 683.298 L1521.09 683.298 L1520.53 683.298 L1519.98 683.298 L1519.42 683.298 L1518.86 683.298 L1518.3 683.298 L1517.74 683.298 L1517.18 683.298 L1516.62 683.298 L1516.06 683.298 L1515.5 683.298 L1514.94 683.298 L1514.38 683.298 L1513.82 683.298 L1513.26 683.298 L1512.71 683.298 L1512.15 683.298 L1511.59 683.298 L1511.03 683.298 L1510.47 683.298 L1509.91 683.298 L1509.35 683.298 L1508.79 683.298 L1508.23 683.298 L1507.67 683.298 L1507.11 683.298 L1506.55 683.298 L1505.99 683.298 L1505.44 683.298 L1504.88 683.298 L1504.32 683.298 L1503.76 683.298 L1503.2 683.298 L1502.64 683.298 L1502.08 683.298 L1501.52 683.298 L1500.96 683.298 L1500.4 683.298 L1499.84 683.298 L1499.28 683.298 L1498.72 683.298 L1498.16 683.298 L1497.61 683.298 L1497.05 683.298 L1496.49 683.298 L1495.93 683.298 L1495.37 683.298 L1494.81 683.298 L1494.25 683.298 L1493.69 683.298 L1493.13 683.298 L1492.57 683.298 L1492.01 683.298 L1491.45 683.298 L1490.89 683.298 L1490.34 683.298 L1489.78 683.298 L1489.22 683.298 L1488.66 683.298 L1488.1 683.298 L1487.54 683.298 L1486.98 683.298 L1486.42 683.298 L1485.86 683.298 L1485.3 683.298 L1484.74 683.298 L1484.18 683.298 L1483.62 683.298 L1483.07 683.298 L1482.51 683.298 L1481.95 683.298 L1481.39 683.298 L1480.83 683.298 L1480.27 683.298 L1479.71 683.298 L1479.15 683.298 L1478.59 683.298 L1478.03 683.298 L1477.47 683.298 L1476.91 683.298 L1476.35 683.298 L1475.79 683.298 L1475.24 683.298 L1474.68 683.298 L1474.12 683.298 L1473.56 683.298 L1473 683.298 L1472.44 683.298 L1471.88 683.298 L1471.32 683.298 L1470.76 683.298 L1470.2 683.298 L1469.64 683.298 L1469.08 683.298 L1468.52 683.298 L1467.97 683.298 L1467.41 683.298 L1466.85 683.298 L1466.29 683.298 L1465.73 683.298 L1465.17 683.298 L1464.61 683.298 L1464.05 683.298 L1463.49 683.298 L1462.93 683.298 L1462.37 683.298 L1461.81 683.298 L1461.25 683.298 L1460.7 683.298 L1460.14 683.298 L1459.58 683.298 L1459.02 683.298 L1458.46 683.298 L1457.9 683.298 L1457.34 683.298 L1456.78 683.298 L1456.22 683.298 L1455.66 683.298 L1455.1 683.298 L1454.54 683.298 L1453.98 683.298 L1453.42 683.298 L1452.87 683.298 L1452.31 683.298 L1451.75 683.298 L1451.19 683.298 L1450.63 683.298 L1450.07 683.298 L1449.51 683.298 L1448.95 683.298 L1448.39 683.298 L1447.83 683.298 L1447.27 683.298 L1446.71 683.298 L1446.15 683.298 L1445.6 683.298 L1445.04 683.298 L1444.48 683.298 L1443.92 683.298 L1443.36 683.298 L1442.8 683.298 L1442.24 683.298 L1441.68 683.298 L1441.12 683.298 L1440.56 683.298 L1440 683.298 L1439.44 683.298 L1438.88 683.298 L1438.33 683.298 L1437.77 683.298 L1437.21 683.298 L1436.65 683.298 L1436.09 683.298 L1435.53 683.298 L1434.97 683.298 L1434.41 683.298 L1433.85 683.298 L1433.29 683.298 L1432.73 683.298 L1432.17 683.298 L1431.61 683.298 L1431.05 683.298 L1430.5 683.298 L1429.94 683.298 L1429.38 683.298 L1428.82 683.298 L1428.26 683.298 L1427.7 683.298 L1427.14 683.298 L1426.58 683.298 L1426.02 683.298 L1425.46 683.298 L1424.9 683.298 L1424.34 683.298 L1423.78 683.298 L1423.23 683.298 L1422.67 683.298 L1422.11 683.298 L1421.55 683.298 L1420.99 683.298 L1420.43 683.298 L1419.87 683.298 L1419.31 683.298 L1418.75 683.298 L1418.19 683.298 L1417.63 683.298 L1417.07 683.298 L1416.51 683.298 L1415.95 683.298 L1415.4 683.298 L1414.84 683.298 L1414.28 683.298 L1413.72 683.298 L1413.16 683.298 L1412.6 683.298 L1412.04 683.298 L1411.48 683.298 L1410.92 683.298 L1410.36 683.298 L1409.8 683.298 L1409.24 683.298 L1408.68 683.298 L1408.13 683.298 L1407.57 683.298 L1407.01 683.298 L1406.45 683.298 L1405.89 683.298 L1405.33 683.298 L1404.77 683.298 L1404.21 683.298 L1403.65 683.298 L1403.09 683.298 L1402.53 683.298 L1401.97 683.298 L1401.41 683.298 L1400.86 683.298 L1400.3 683.298 L1399.74 683.298 L1399.18 683.298 L1398.62 683.298 L1398.06 683.298 L1397.5 683.298 L1396.94 683.298 L1396.38 683.298 L1395.82 683.298 L1395.26 683.298 L1394.7 683.298 L1394.14 683.298 L1393.58 683.298 L1393.03 683.298 L1392.47 683.298 L1391.91 683.298 L1391.35 683.298 L1390.79 683.298 L1390.23 683.298 L1389.67 683.298 L1389.11 683.298 L1388.55 683.298 L1387.99 683.298 L1387.43 683.298 L1386.87 683.298 L1386.31 683.298 L1385.76 683.298 L1385.2 683.298 L1384.64 683.298 L1384.08 683.298 L1383.52 683.298 L1382.96 683.298 L1382.4 683.298 L1381.84 683.298 L1381.28 683.298 L1380.72 683.298 L1380.16 683.298 L1379.6 683.298 L1379.04 683.298 L1378.49 683.298 L1377.93 683.298 L1377.37 683.298 L1376.81 683.298 L1376.25 683.298 L1375.69 683.298 L1375.13 683.298 L1374.57 683.298 L1374.01 683.298 L1373.45 683.298 L1372.89 683.298 L1372.33 683.298 L1371.77 683.298 L1371.21 683.298 L1370.66 683.298 L1370.1 683.298 L1369.54 683.298 L1368.98 683.298 L1368.42 683.298 L1367.86 683.298 L1367.3 683.298 L1366.74 683.298 L1366.18 683.298 L1365.62 683.298 L1365.06 683.298 L1364.5 683.298 L1363.94 683.298 L1363.39 683.298 L1362.83 683.298 L1362.27 683.298 L1361.71 683.298 L1361.15 683.298 L1360.59 683.298 L1360.03 683.298 L1359.47 683.298 L1358.91 683.298 L1358.35 683.298 L1357.79 683.298 L1357.23 683.298 L1356.67 683.298 L1356.12 683.298 L1355.56 683.298 L1355 683.298 L1354.44 683.298 L1353.88 683.298 L1353.32 683.298 L1352.76 683.298 L1352.2 683.298 L1351.64 683.298 L1351.08 683.298 L1350.52 683.298 L1349.96 683.298 L1349.4 683.298 L1348.84 683.298 L1348.29 683.298 L1347.73 683.298 L1347.17 683.298 L1346.61 683.298 L1346.05 683.298 L1345.49 683.298 L1344.93 683.298 L1344.37 683.298 L1343.81 683.298 L1343.25 683.298 L1342.69 683.298 L1342.13 683.298 L1341.57 683.298 L1341.02 683.298 L1340.46 683.298 L1339.9 683.298 L1339.34 683.298 L1338.78 683.298 L1338.22 683.298 L1337.66 683.298 L1337.1 683.298 L1336.54 683.298 L1335.98 683.298 L1335.42 683.298 L1334.86 683.298 L1334.3 683.298 L1333.75 683.298 L1333.19 683.298 L1332.63 683.298 L1332.07 683.298 L1331.51 683.298 L1330.95 683.298 L1330.39 683.298 L1329.83 683.298 L1329.27 683.298 L1328.71 683.298 L1328.15 683.298 L1327.59 683.298 L1327.03 683.298 L1326.47 683.298 L1325.92 683.298 L1325.36 683.298 L1324.8 683.298 L1324.24 683.298 L1323.68 683.298 L1323.12 683.298 L1322.56 683.298 L1322 683.298 L1321.44 683.298 L1320.88 683.298 L1320.32 683.298 L1319.76 683.298 L1319.2 683.298 L1318.65 683.298 L1318.09 683.298 L1317.53 683.298 L1316.97 683.298 L1316.41 683.298 L1315.85 683.298 L1315.29 683.298 L1314.73 683.298 L1314.17 683.298 L1313.61 683.298 L1313.05 683.298 L1312.49 683.298 L1311.93 683.298 L1311.38 683.298 L1310.82 683.298 L1310.26 683.298 L1309.7 683.298 L1309.14 683.298 L1308.58 683.298 L1308.02 683.298 L1307.46 683.298 L1306.9 683.298 L1306.34 683.298 L1305.78 683.298 L1305.22 683.298 L1304.66 683.298 L1304.1 683.298 L1303.55 683.298 L1302.99 683.298 L1302.43 683.298 L1301.87 683.298 L1301.31 683.298 L1300.75 683.298 L1300.19 683.298 L1299.63 683.298 L1299.07 683.298 L1298.51 683.298 L1297.95 683.298 L1297.39 683.298 L1296.83 683.298 L1296.28 683.298 L1295.72 683.298 L1295.16 683.298 L1294.6 683.298 L1294.04 683.298 L1293.48 683.298 L1292.92 683.298 L1292.36 683.298 L1291.8 683.298 L1291.24 683.298 L1290.68 683.298 L1290.12 683.298 L1289.56 683.298 L1289 683.298 L1288.45 683.298 L1287.89 683.298 L1287.33 683.298 L1286.77 683.298 L1286.21 683.298 L1285.65 683.298 L1285.09 683.298 L1284.53 683.298 L1283.97 683.298 L1283.41 683.298 L1282.85 683.298 L1282.29 683.298 L1281.73 683.298 L1281.18 683.298 L1280.62 683.298 L1280.06 683.298 L1279.5 683.298 L1278.94 683.298 L1278.38 683.298 L1277.82 683.298 L1277.26 683.298 L1276.7 683.298 L1276.14 683.298 L1275.58 683.298 L1275.02 683.298 L1274.46 683.298 L1273.91 683.298 L1273.35 683.298 L1272.79 683.298 L1272.23 683.298 L1271.67 683.298 L1271.11 683.298 L1270.55 683.298 L1269.99 683.298 L1269.43 683.298 L1268.87 683.298 L1268.31 683.298 L1267.75 683.298 L1267.19 683.298 L1266.63 683.298 L1266.08 683.298 L1265.52 683.298 L1264.96 683.298 L1264.4 683.298 L1263.84 683.298 L1263.28 683.298 L1262.72 683.298 L1262.16 683.298 L1261.6 683.298 L1261.04 683.298 L1260.48 683.298 L1259.92 683.298 L1259.36 683.298 L1258.81 683.298 L1258.25 683.298 L1257.69 683.298 L1257.13 683.298 L1256.57 683.298 L1256.01 683.298 L1255.45 683.298 L1254.89 683.298 L1254.33 683.298 L1253.77 683.298 L1253.21 683.298 L1252.65 683.298 L1252.09 683.298 L1251.54 683.298 L1250.98 683.298 L1250.42 683.298 L1249.86 683.298 L1249.3 683.298 L1248.74 683.298 L1248.18 683.298 L1247.62 683.298 L1247.06 683.298 L1246.5 683.298 L1245.94 683.298 L1245.38 683.298 L1244.82 683.298 L1244.26 683.298 L1243.71 683.298 L1243.15 683.298 L1242.59 683.298 L1242.03 683.298 L1241.47 683.298 L1240.91 683.298 L1240.35 683.298 L1239.79 683.298 L1239.23 683.298 L1238.67 683.298 L1238.11 683.298 L1237.55 683.298 L1236.99 683.298 L1236.44 683.298 L1235.88 683.298 L1235.32 683.298 L1234.76 683.298 L1234.2 683.298 L1233.64 683.298 L1233.08 683.298 L1232.52 683.298 L1231.96 683.298 L1231.4 683.298 L1230.84 683.298 L1230.28 683.298 L1229.72 683.298 L1229.17 683.298 L1228.61 683.298 L1228.05 683.298 L1227.49 683.298 L1226.93 683.298 L1226.37 683.298 L1225.81 683.298 L1225.25 683.298 L1224.69 683.298 L1224.13 683.298 L1223.57 683.298 L1223.01 683.298 L1222.45 683.298 L1221.89 683.298 L1221.34 683.298 L1220.78 683.298 L1220.22 683.298 L1219.66 683.298 L1219.1 683.298 L1218.54 683.298 L1217.98 683.298 L1217.42 683.298 L1216.86 683.298 L1216.3 683.298 L1215.74 683.298 L1215.18 683.298 L1214.62 683.298 L1214.07 683.298 L1213.51 683.298 L1212.95 683.298 L1212.39 683.298 L1211.83 683.298 L1211.27 683.298 L1210.71 683.298 L1210.15 683.298 L1209.59 683.298 L1209.03 683.298 L1208.47 683.298 L1207.91 683.298 L1207.35 683.298 L1206.8 683.298 L1206.24 683.298 L1205.68 683.298 L1205.12 683.298 L1204.56 683.298 L1204 683.298 L1203.44 683.298 L1202.88 683.298 L1202.32 683.298 L1201.76 683.298 L1201.2 683.298 L1200.64 683.298 L1200.08 683.298 L1199.52 683.298 L1198.97 683.298 L1198.41 683.298 L1197.85 683.298 L1197.29 683.298 L1196.73 683.298 L1196.17 683.298 L1195.61 683.298 L1195.05 683.298 L1194.49 683.298 L1193.93 683.298 L1193.37 683.298 L1192.81 683.298 L1192.25 683.298 L1191.7 683.298 L1191.14 683.298 L1190.58 683.298 L1190.02 683.298 L1189.46 683.298 L1188.9 683.298 L1188.34 683.298 L1187.78 683.298 L1187.22 683.298 L1186.66 683.298 L1186.1 683.298 L1185.54 683.298 L1184.98 683.298 L1184.43 683.298 L1183.87 683.298 L1183.31 683.298 L1182.75 683.298 L1182.19 683.298 L1181.63 683.298 L1181.07 683.298 L1180.51 683.298 L1179.95 683.298 L1179.39 683.298 L1178.83 683.298 L1178.27 683.298 L1177.71 683.298 L1177.15 683.298 L1176.6 683.298 L1176.04 683.298 L1175.48 683.298 L1174.92 683.298 L1174.36 683.298 L1173.8 683.298 L1173.24 683.298 L1172.68 683.298 L1172.12 683.298 L1171.56 683.298 L1171 683.298 L1170.44 683.298 L1169.88 683.298 L1169.33 683.298 L1168.77 683.298 L1168.21 683.298 L1167.65 683.298 L1167.09 683.298 L1166.53 683.298 L1165.97 683.298 L1165.41 683.298 L1164.85 683.298 L1164.29 683.298 L1163.73 683.298 L1163.17 683.298 L1162.61 683.298 L1162.05 683.298 L1161.5 683.298 L1160.94 683.298 L1160.38 683.298 L1159.82 683.298 L1159.26 683.298 L1158.7 683.298 L1158.14 683.298 L1157.58 683.298 L1157.02 683.298 L1156.46 683.298 L1155.9 683.298 L1155.34 683.298 L1154.78 683.298 L1154.23 683.298 L1153.67 683.298 L1153.11 683.298 L1152.55 683.298 L1151.99 683.298 L1151.43 683.298 L1150.87 683.298 L1150.31 683.298 L1149.75 683.298 L1149.19 683.298 L1148.63 683.298 L1148.07 683.298 L1147.51 683.298 L1146.96 683.298 L1146.4 683.298 L1145.84 683.298 L1145.28 683.298 L1144.72 683.298 L1144.16 683.298 L1143.6 683.298 L1143.04 683.298 L1142.48 683.298 L1141.92 683.298 L1141.36 683.298 L1140.8 683.298 L1140.24 683.298 L1139.68 683.298 L1139.13 683.298 L1138.57 683.298 L1138.01 683.298 L1137.45 683.298 L1136.89 683.298 L1136.33 683.298 L1135.77 683.298 L1135.21 683.298 L1134.65 683.298 L1134.09 683.298 L1133.53 683.298 L1132.97 683.298 L1132.41 683.298 L1131.86 683.298 L1131.3 683.298 L1130.74 683.298 L1130.18 683.298 L1129.62 683.298 L1129.06 683.298 L1128.5 683.298 L1127.94 683.298 L1127.38 683.298 L1126.82 683.298 L1126.26 683.298 L1125.7 683.298 L1125.14 683.298 L1124.59 683.298 L1124.03 683.298 L1123.47 683.298 L1122.91 683.298 L1122.35 683.298 L1121.79 683.298 L1121.23 683.298 L1120.67 683.298 L1120.11 683.298 L1119.55 683.298 L1118.99 683.298 L1118.43 683.298 L1117.87 683.298 L1117.31 683.298 L1116.76 683.298 L1116.2 683.298 L1115.64 683.298 L1115.08 683.298 L1114.52 683.298 L1113.96 683.298 L1113.4 683.298 L1112.84 683.298 L1112.28 683.298 L1111.72 683.298 L1111.16 683.298 L1110.6 683.298 L1110.04 683.298 L1109.49 683.298 L1108.93 683.298 L1108.37 683.298 L1107.81 683.298 L1107.25 683.298 L1106.69 683.298 L1106.13 683.298 L1105.57 683.298 L1105.01 683.298 L1104.45 683.298 L1103.89 683.298 L1103.33 683.298 L1102.77 683.298 L1102.22 683.298 L1101.66 683.298 L1101.1 683.298 L1100.54 683.298 L1099.98 683.298 L1099.42 683.298 L1098.86 683.298 L1098.3 683.298 L1097.74 683.298 L1097.18 683.298 L1096.62 683.298 L1096.06 683.298 L1095.5 683.298 L1094.94 683.298 L1094.39 683.298 L1093.83 683.298 L1093.27 683.298 L1092.71 683.298 L1092.15 683.298 L1091.59 683.298 L1091.03 683.298 L1090.47 683.298 L1089.91 683.298 L1089.35 683.298 L1088.79 683.298 L1088.23 683.298 L1087.67 683.298 L1087.12 683.298 L1086.56 683.298 L1086 683.298 L1085.44 683.298 L1084.88 683.298 L1084.32 683.298 L1083.76 683.298 L1083.2 683.298 L1082.64 683.298 L1082.08 683.298 L1081.52 683.298 L1080.96 683.298 L1080.4 683.298 L1079.85 683.298 L1079.29 683.298 L1078.73 683.298 L1078.17 683.298 L1077.61 683.298 L1077.05 683.298 L1076.49 683.298 L1075.93 683.298 L1075.37 683.298 L1074.81 683.298 L1074.25 683.298 L1073.69 683.298 L1073.13 683.298 L1072.57 683.298 L1072.02 683.298 L1071.46 683.298 L1070.9 683.298 L1070.34 683.298 L1069.78 683.298 L1069.22 683.298 L1068.66 683.298 L1068.1 683.298 L1067.54 683.298 L1066.98 683.298 L1066.42 683.298 L1065.86 683.298 L1065.3 683.298 L1064.75 683.298 L1064.19 683.298 L1063.63 683.298 L1063.07 683.298 L1062.51 683.298 L1061.95 683.298 L1061.39 683.298 L1060.83 683.298 L1060.27 683.298 L1059.71 683.298 L1059.15 683.298 L1058.59 683.298 L1058.03 683.298 L1057.48 683.298 L1056.92 683.298 L1056.36 683.298 L1055.8 683.298 L1055.24 683.298 L1054.68 683.298 L1054.12 683.298 L1053.56 683.298 L1053 683.298 L1052.44 683.298 L1051.88 683.298 L1051.32 683.298 L1050.76 683.298 L1050.2 683.298 L1049.65 683.298 L1049.09 683.298 L1048.53 683.298 L1047.97 683.298 L1047.41 683.298 L1046.85 683.298 L1046.29 683.298 L1045.73 683.298 L1045.17 683.298 L1044.61 683.298 L1044.05 683.298 L1043.49 683.298 L1042.93 683.298 L1042.38 683.298 L1041.82 683.298 L1041.26 683.298 L1040.7 683.298 L1040.14 683.298 L1039.58 683.298 L1039.02 683.298 L1038.46 683.298 L1037.9 683.298 L1037.34 683.298 L1036.78 683.298 L1036.22 683.298 L1035.66 683.298 L1035.1 683.298 L1034.55 683.298 L1033.99 683.298 L1033.43 683.298 L1032.87 683.298 L1032.31 683.298 L1031.75 683.298 L1031.19 683.298 L1030.63 683.298 L1030.07 683.298 L1029.51 683.298 L1028.95 683.298 L1028.39 683.298 L1027.83 683.298 L1027.28 683.298 L1026.72 683.298 L1026.16 683.298 L1025.6 683.298 L1025.04 683.298 L1024.48 683.298 L1023.92 683.298 L1023.36 683.298 L1022.8 683.298 L1022.24 683.298 L1021.68 683.298 L1021.12 683.298 L1020.56 683.298 L1020.01 683.298 L1019.45 683.298 L1018.89 683.298 L1018.33 683.298 L1017.77 683.298 L1017.21 683.298 L1016.65 683.298 L1016.09 683.298 L1015.53 683.298 L1014.97 683.298 L1014.41 683.298 L1013.85 683.298 L1013.29 683.298 L1012.73 683.298 L1012.18 683.298 L1011.62 683.298 L1011.06 683.298 L1010.5 683.298 L1009.94 683.298 L1009.38 683.298 L1008.82 683.298 L1008.26 683.298 L1007.7 683.298 L1007.14 683.298 L1006.58 683.298 L1006.02 683.298 L1005.46 683.298 L1004.91 683.298 L1004.35 683.298 L1003.79 683.298 L1003.23 683.298 L1002.67 683.298 L1002.11 683.298 L1001.55 683.298 L1000.99 683.298 L1000.43 683.298 L999.872 683.298 L999.313 683.298 L998.754 683.298 L998.194 683.298 L997.635 683.298 L997.076 683.298 L996.517 683.298 L995.957 683.298 L995.398 683.298 L994.839 683.298 L994.28 683.298 L993.72 683.298 L993.161 683.298 L992.602 683.298 L992.043 683.298 L991.483 683.298 L990.924 683.298 L990.365 683.298 L989.806 683.298 L989.246 683.298 L988.687 683.298 L988.128 683.298 L987.569 683.298 L987.009 683.298 L986.45 683.298 L985.891 683.298 L985.332 683.298 L984.772 683.298 L984.213 683.298 L983.654 683.298 L983.095 683.298 L982.535 683.298 L981.976 683.298 L981.417 683.298 L980.858 683.298 L980.298 683.298 L979.739 683.298 L979.18 683.298 L978.621 683.298 L978.061 683.298 L977.502 683.298 L976.943 683.298 L976.384 683.298 L975.824 683.298 L975.265 683.298 L974.706 683.298 L974.147 683.298 L973.587 683.298 L973.028 683.298 L972.469 683.298 L971.91 683.298 L971.35 683.298 L970.791 683.298 L970.232 683.298 L969.673 683.298 L969.113 683.298 L968.554 683.298 L967.995 683.298 L967.436 683.298 L966.876 683.298 L966.317 683.298 L965.758 683.298 L965.199 683.298 L964.639 683.298 L964.08 683.298 L963.521 683.298 L962.962 683.298 L962.402 683.298 L961.843 683.298 L961.284 683.298 L960.725 683.298 L960.165 683.298 L959.606 683.298 L959.047 683.298 L958.488 683.298 L957.928 683.298 L957.369 683.298 L956.81 683.298 L956.251 683.298 L955.691 683.298 L955.132 683.298 L954.573 683.298 L954.014 683.298 L953.454 683.298 L952.895 683.298 L952.336 683.298 L951.777 683.298 L951.217 683.298 L950.658 683.298 L950.099 683.298 L949.54 683.298 L948.98 683.298 L948.421 683.298 L947.862 683.298 L947.303 683.298 L946.743 683.298 L946.184 683.298 L945.625 683.298 L945.066 683.298 L944.506 683.298 L943.947 683.298 L943.388 683.298 L942.829 683.298 L942.269 683.298 L941.71 683.298 L941.151 683.298 L940.592 683.298 L940.032 683.298 L939.473 683.298 L938.914 683.298 L938.355 683.298 L937.795 683.298 L937.236 683.298 L936.677 683.298 L936.118 683.298 L935.558 683.298 L934.999 683.298 L934.44 683.298 L933.881 683.298 L933.321 683.298 L932.762 683.298 L932.203 683.298 L931.644 683.298 L931.084 683.298 L930.525 683.298 L929.966 683.298 L929.406 683.298 L928.847 683.298 L928.288 683.298 L927.729 683.298 L927.169 683.298 L926.61 683.298 L926.051 683.298 L925.492 683.298 L924.932 683.298 L924.373 683.298 L923.814 683.298 L923.255 683.298 L922.695 683.298 L922.136 683.298 L921.577 683.298 L921.018 683.298 L920.458 683.298 L919.899 683.298 L919.34 683.298 L918.781 683.298 L918.221 683.298 L917.662 683.298 L917.103 683.298 L916.544 683.298 L915.984 683.298 L915.425 683.298 L914.866 683.298 L914.307 683.298 L913.747 683.298 L913.188 683.298 L912.629 683.298 L912.07 683.298 L911.51 683.298 L910.951 683.298 L910.392 683.298 L909.833 683.298 L909.273 683.298 L908.714 683.298 L908.155 683.298 L907.596 683.298 L907.036 683.298 L906.477 683.298 L905.918 683.298 L905.359 683.298 L904.799 683.298 L904.24 683.298 L903.681 683.298 L903.122 683.298 L902.562 683.298 L902.003 683.298 L901.444 683.298 L900.885 683.298 L900.325 683.298 L899.766 683.298 L899.207 683.298 L898.648 683.298 L898.088 683.298 L897.529 683.298 L896.97 683.298 L896.411 683.298 L895.851 683.298 L895.292 683.298 L894.733 683.298 L894.174 683.298 L893.614 683.298 L893.055 683.298 L892.496 683.298 L891.937 683.298 L891.377 683.298 L890.818 683.298 L890.259 683.298 L889.7 683.298 L889.14 683.298 L888.581 683.298 L888.022 683.298 L887.463 683.298 L886.903 683.298 L886.344 683.298 L885.785 683.298 L885.226 683.298 L884.666 683.298 L884.107 683.298 L883.548 683.298 L882.989 683.298 L882.429 683.298 L881.87 683.298 L881.311 683.298 L880.752 683.298 L880.192 683.298 L879.633 683.298 L879.074 683.298 L878.515 683.298 L877.955 683.298 L877.396 683.298 L876.837 683.298 L876.278 683.298 L875.718 683.298 L875.159 683.298 L874.6 683.298 L874.041 683.298 L873.481 683.298 L872.922 683.298 L872.363 683.298 L871.804 683.298 L871.244 683.298 L870.685 683.298 L870.126 683.298 L869.567 683.298 L869.007 683.298 L868.448 683.298 L867.889 683.298 L867.33 683.298 L866.77 683.298 L866.211 683.298 L865.652 683.298 L865.093 683.298 L864.533 683.298 L863.974 683.298 L863.415 683.298 L862.856 683.298 L862.296 683.298 L861.737 683.298 L861.178 683.298 L860.619 683.298 L860.059 683.298 L859.5 683.298 L858.941 683.298 L858.382 683.298 L857.822 683.298 L857.263 683.298 L856.704 683.298 L856.145 683.298 L855.585 683.298 L855.026 683.298 L854.467 683.298 L853.908 683.298 L853.348 683.298 L852.789 683.298 L852.23 683.298 L851.671 683.298 L851.111 683.298 L850.552 683.298 L849.993 683.298 L849.434 683.298 L848.874 683.298 L848.315 683.298 L847.756 683.298 L847.197 683.298 L846.637 683.298 L846.078 683.298 L845.519 683.298 L844.96 683.298 L844.4 683.298 L843.841 683.298 L843.282 683.298 L842.723 683.298 L842.163 683.298 L841.604 683.298 L841.045 683.298 L840.486 683.298 L839.926 683.298 L839.367 683.298 L838.808 683.298 L838.249 683.298 L837.689 683.298 L837.13 683.298 L836.571 683.298 L836.012 683.298 L835.452 683.298 L834.893 683.298 L834.334 683.298 L833.775 683.298 L833.215 683.298 L832.656 683.298 L832.097 683.298 L831.538 683.298 L830.978 683.298 L830.419 683.298 L829.86 683.298 L829.301 683.298 L828.741 683.298 L828.182 683.298 L827.623 683.298 L827.064 683.298 L826.504 683.298 L825.945 683.298 L825.386 683.298 L824.827 683.298 L824.267 683.298 L823.708 683.298 L823.149 683.298 L822.59 683.298 L822.03 683.298 L821.471 683.298 L820.912 683.298 L820.353 683.298 L819.793 683.298 L819.234 683.298 L818.675 683.298 L818.116 683.298 L817.556 683.298 L816.997 683.298 L816.438 683.298 L815.879 683.298 L815.319 683.298 L814.76 683.298 L814.201 683.298 L813.642 683.298 L813.082 683.298 L812.523 683.298 L811.964 683.298 L811.405 683.298 L810.845 683.298 L810.286 683.298 L809.727 683.298 L809.168 683.298 L808.608 683.298 L808.049 683.298 L807.49 683.298 L806.931 683.298 L806.371 683.298 L805.812 683.298 L805.253 683.298 L804.693 683.298 L804.134 683.298 L803.575 683.298 L803.016 683.298 L802.456 683.298 L801.897 683.298 L801.338 683.298 L800.779 683.298 L800.219 683.298 L799.66 683.298 L799.101 683.298 L798.542 683.298 L797.982 683.298 L797.423 683.298 L796.864 683.298 L796.305 683.298 L795.745 683.298 L795.186 683.298 L794.627 683.298 L794.068 683.298 L793.508 683.298 L792.949 683.298 L792.39 683.298 L791.831 683.298 L791.271 683.298 L790.712 683.298 L790.153 683.298 L789.594 683.298 L789.034 683.298 L788.475 683.298 L787.916 683.298 L787.357 683.298 L786.797 683.298 L786.238 683.298 L785.679 683.298 L785.12 683.298 L784.56 683.298 L784.001 683.298 L783.442 683.298 L782.883 683.298 L782.323 683.298 L781.764 683.298 L781.205 683.298 L780.646 683.298 L780.086 683.298 L779.527 683.298 L778.968 683.298 L778.409 683.298 L777.849 683.298 L777.29 683.298 L776.731 683.298 L776.172 683.298 L775.612 683.298 L775.053 683.298 L774.494 683.298 L773.935 683.298 L773.375 683.298 L772.816 683.298 L772.257 683.298 L771.698 683.298 L771.138 683.298 L770.579 683.298 L770.02 683.298 L769.461 683.298 L768.901 683.298 L768.342 683.298 L767.783 683.298 L767.224 683.298 L766.664 683.298 L766.105 683.298 L765.546 683.298 L764.987 683.298 L764.427 683.298 L763.868 683.298 L763.309 683.298 L762.75 683.298 L762.19 683.298 L761.631 683.298 L761.072 683.298 L760.513 683.298 L759.953 683.298 L759.394 683.298 L758.835 683.298 L758.276 683.298 L757.716 683.298 L757.157 683.298 L756.598 683.298 L756.039 683.298 L755.479 683.298 L754.92 683.298 L754.361 683.298 L753.802 683.298 L753.242 683.298 L752.683 683.298 L752.124 683.298 L751.565 683.298 L751.005 683.298 L750.446 683.298 L749.887 683.298 L749.328 683.298 L748.768 683.298 L748.209 683.298 L747.65 683.298 L747.091 683.298 L746.531 683.298 L745.972 683.298 L745.413 683.298 L744.854 683.298 L744.294 683.298 L743.735 683.298 L743.176 683.298 L742.617 683.298 L742.057 683.298 L741.498 683.298 L740.939 683.298 L740.38 683.298 L739.82 683.298 L739.261 683.298 L738.702 683.298 L738.143 683.298 L737.583 683.298 L737.024 683.298 L736.465 683.298 L735.906 683.298 L735.346 683.298 L734.787 683.298 L734.228 683.298 L733.669 683.298 L733.109 683.298 L732.55 683.298 L731.991 683.298 L731.432 683.298 L730.872 683.298 L730.313 683.298 L729.754 683.298 L729.195 683.298 L728.635 683.298 L728.076 683.298 L727.517 683.298 L726.958 683.298 L726.398 683.298 L725.839 683.298 L725.28 683.298 L724.721 683.298 L724.161 683.298 L723.602 683.298 L723.043 683.298 L722.484 683.298 L721.924 683.298 L721.365 683.298 L720.806 683.298 L720.247 683.298  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip003)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.287 720.806,684.287 721.365,684.287 721.924,684.287 722.484,684.287 723.043,684.287 723.602,684.287 724.161,684.287 724.721,684.287 725.28,684.287 725.839,684.287 726.398,684.287 726.958,684.287 727.517,684.287 728.076,684.287 728.635,684.287 729.195,684.287 729.754,684.287 730.313,684.287 730.872,684.287 731.432,684.287 731.991,684.287 732.55,684.287 733.109,684.287 733.669,684.287 734.228,684.287 734.787,684.287 735.346,684.287 735.906,684.287 736.465,684.287 737.024,684.287 737.583,684.287 738.143,684.287 738.702,684.287 739.261,684.287 739.82,684.287 740.38,684.287 740.939,684.287 741.498,684.287 742.057,684.287 742.617,684.287 743.176,684.287 743.735,684.287 744.294,684.287 744.854,684.287 745.413,684.287 745.972,684.287 746.531,684.287 747.091,684.287 747.65,684.287 748.209,684.287 748.768,684.287 749.328,684.287 749.887,684.287 750.446,684.287 751.005,684.287 751.565,684.287 752.124,684.287 752.683,684.287 753.242,684.287 753.802,684.287 754.361,684.287 754.92,684.287 755.479,684.287 756.039,684.287 756.598,684.287 757.157,684.287 757.716,684.287 758.276,684.287 758.835,684.287 759.394,684.287 759.953,684.287 760.513,684.287 761.072,684.287 761.631,684.287 762.19,684.287 762.75,684.287 763.309,684.287 763.868,684.287 764.427,684.287 764.987,684.287 765.546,684.287 766.105,684.287 766.664,684.287 767.224,684.287 767.783,684.287 768.342,684.287 768.901,684.287 769.461,684.287 770.02,684.287 770.579,684.287 771.138,684.287 771.698,684.287 772.257,684.287 772.816,684.287 773.375,684.287 773.935,684.287 774.494,684.287 775.053,684.287 775.612,684.287 776.172,684.287 776.731,684.287 777.29,684.287 777.849,684.287 778.409,684.287 778.968,684.287 779.527,684.287 780.086,684.287 780.646,684.287 781.205,684.287 781.764,684.287 782.323,684.287 782.883,684.287 783.442,684.287 784.001,684.287 784.56,684.287 785.12,684.287 785.679,684.287 786.238,684.287 786.797,684.287 787.357,684.287 787.916,684.287 788.475,684.287 789.034,684.287 789.594,684.287 790.153,684.287 790.712,684.287 791.271,684.287 791.831,684.287 792.39,684.287 792.949,684.287 793.508,684.287 794.068,684.287 794.627,684.287 795.186,684.287 795.745,684.287 796.305,684.287 796.864,684.287 797.423,684.287 797.982,684.287 798.542,684.287 799.101,684.287 799.66,684.287 800.219,684.287 800.779,684.287 801.338,684.287 801.897,684.287 802.456,684.287 803.016,684.287 803.575,684.287 804.134,684.287 804.693,684.287 805.253,684.287 805.812,684.287 806.371,684.287 806.931,684.287 807.49,684.287 808.049,684.287 808.608,684.287 809.168,684.287 809.727,684.287 810.286,684.287 810.845,684.287 811.405,684.287 811.964,684.287 812.523,684.287 813.082,684.287 813.642,684.287 814.201,684.287 814.76,684.287 815.319,684.287 815.879,684.287 816.438,684.287 816.997,684.287 817.556,684.287 818.116,684.287 818.675,684.287 819.234,684.287 819.793,684.287 820.353,684.287 820.912,684.287 821.471,684.287 822.03,684.287 822.59,684.287 823.149,684.287 823.708,684.287 824.267,684.287 824.827,684.287 825.386,684.287 825.945,684.287 826.504,684.287 827.064,684.287 827.623,684.287 828.182,684.287 828.741,684.287 829.301,684.287 829.86,684.287 830.419,684.287 830.978,684.287 831.538,684.287 832.097,684.287 832.656,684.287 833.215,684.287 833.775,684.287 834.334,684.287 834.893,684.287 835.452,684.287 836.012,684.287 836.571,684.287 837.13,684.287 837.689,684.287 838.249,684.287 838.808,684.287 839.367,684.287 839.926,684.287 840.486,684.287 841.045,684.287 841.604,684.287 842.163,684.287 842.723,684.287 843.282,684.287 843.841,684.287 844.4,684.287 844.96,684.287 845.519,684.287 846.078,684.287 846.637,684.287 847.197,684.287 847.756,684.287 848.315,684.287 848.874,684.287 849.434,684.287 849.993,684.287 850.552,684.287 851.111,684.287 851.671,684.287 852.23,684.287 852.789,684.287 853.348,684.287 853.908,684.287 854.467,684.287 855.026,684.287 855.585,684.287 856.145,684.287 856.704,684.287 857.263,684.287 857.822,684.287 858.382,684.287 858.941,684.287 859.5,684.287 860.059,684.287 860.619,684.287 861.178,684.287 861.737,684.287 862.296,684.287 862.856,684.287 863.415,684.287 863.974,684.287 864.533,684.287 865.093,684.287 865.652,684.287 866.211,684.287 866.77,684.287 867.33,684.287 867.889,684.287 868.448,684.287 869.007,684.287 869.567,684.287 870.126,684.287 870.685,684.287 871.244,684.287 871.804,684.287 872.363,684.287 872.922,684.287 873.481,684.287 874.041,684.287 874.6,684.287 875.159,684.287 875.718,684.287 876.278,684.287 876.837,684.287 877.396,684.287 877.955,684.287 878.515,684.287 879.074,684.287 879.633,684.287 880.192,684.287 880.752,684.287 881.311,684.287 881.87,684.287 882.429,684.287 882.989,684.287 883.548,684.287 884.107,684.287 884.666,684.287 885.226,684.287 885.785,684.287 886.344,684.287 886.903,684.287 887.463,684.287 888.022,684.287 888.581,684.287 889.14,684.287 889.7,684.287 890.259,684.287 890.818,684.287 891.377,684.287 891.937,684.287 892.496,684.287 893.055,684.287 893.614,684.287 894.174,684.287 894.733,684.287 895.292,684.287 895.851,684.287 896.411,684.287 896.97,684.287 897.529,684.287 898.088,684.287 898.648,684.287 899.207,684.287 899.766,684.287 900.325,684.287 900.885,684.287 901.444,684.287 902.003,684.287 902.562,684.287 903.122,684.287 903.681,684.287 904.24,684.287 904.799,684.287 905.359,684.287 905.918,684.287 906.477,684.287 907.036,684.287 907.596,684.287 908.155,684.287 908.714,684.287 909.273,684.287 909.833,684.287 910.392,684.287 910.951,684.287 911.51,684.287 912.07,684.287 912.629,684.287 913.188,684.287 913.747,684.287 914.307,684.287 914.866,684.287 915.425,684.287 915.984,684.287 916.544,684.287 917.103,684.287 917.662,684.287 918.221,684.287 918.781,684.287 919.34,684.287 919.899,684.287 920.458,684.287 921.018,684.287 921.577,684.287 922.136,684.287 922.695,684.287 923.255,684.287 923.814,684.287 924.373,684.287 924.932,684.287 925.492,684.287 926.051,684.287 926.61,684.287 927.169,684.287 927.729,684.287 928.288,684.287 928.847,684.287 929.406,684.287 929.966,684.287 930.525,684.287 931.084,684.287 931.644,684.287 932.203,684.287 932.762,684.287 933.321,684.287 933.881,684.287 934.44,684.287 934.999,684.287 935.558,684.287 936.118,684.287 936.677,684.287 937.236,684.287 937.795,684.287 938.355,684.287 938.914,684.287 939.473,684.287 940.032,684.287 940.592,684.287 941.151,684.287 941.71,684.287 942.269,684.287 942.829,684.287 943.388,684.287 943.947,684.287 944.506,684.287 945.066,684.287 945.625,684.287 946.184,684.287 946.743,684.287 947.303,684.287 947.862,684.287 948.421,684.287 948.98,684.287 949.54,684.287 950.099,684.287 950.658,684.287 951.217,684.287 951.777,684.287 952.336,684.287 952.895,684.287 953.454,684.287 954.014,684.287 954.573,684.287 955.132,684.287 955.691,684.287 956.251,684.287 956.81,684.287 957.369,684.287 957.928,684.287 958.488,684.287 959.047,684.287 959.606,684.287 960.165,684.287 960.725,684.287 961.284,684.287 961.843,684.287 962.402,684.287 962.962,684.287 963.521,684.287 964.08,684.287 964.639,684.287 965.199,684.287 965.758,684.287 966.317,684.287 966.876,684.287 967.436,684.287 967.995,684.287 968.554,684.287 969.113,684.287 969.673,684.287 970.232,684.287 970.791,684.287 971.35,684.287 971.91,684.287 972.469,684.287 973.028,684.287 973.587,684.287 974.147,684.287 974.706,684.287 975.265,684.287 975.824,684.287 976.384,684.287 976.943,684.287 977.502,684.287 978.061,684.287 978.621,684.287 979.18,684.287 979.739,684.287 980.298,684.287 980.858,684.287 981.417,684.287 981.976,684.287 982.535,684.287 983.095,684.287 983.654,684.287 984.213,684.287 984.772,684.287 985.332,684.287 985.891,684.287 986.45,684.287 987.009,684.287 987.569,684.287 988.128,684.287 988.687,684.287 989.246,684.287 989.806,684.287 990.365,684.287 990.924,684.287 991.483,684.287 992.043,684.287 992.602,684.287 993.161,684.287 993.72,684.287 994.28,684.287 994.839,684.287 995.398,684.287 995.957,684.287 996.517,684.287 997.076,684.287 997.635,684.287 998.194,684.287 998.754,684.287 999.313,684.287 999.872,684.287 1000.43,684.287 1000.99,684.287 1001.55,684.287 1002.11,684.287 1002.67,684.287 1003.23,684.287 1003.79,684.287 1004.35,684.287 1004.91,684.287 1005.46,684.287 1006.02,684.287 1006.58,684.287 1007.14,684.287 1007.7,684.287 1008.26,684.287 1008.82,684.287 1009.38,684.287 1009.94,684.287 1010.5,684.287 1011.06,684.287 1011.62,684.287 1012.18,684.287 1012.73,684.287 1013.29,684.287 1013.85,684.287 1014.41,684.287 1014.97,684.287 1015.53,684.287 1016.09,684.287 1016.65,684.287 1017.21,684.287 1017.77,684.287 1018.33,684.287 1018.89,684.287 1019.45,684.287 1020.01,684.287 1020.56,684.287 1021.12,684.287 1021.68,684.287 1022.24,684.287 1022.8,684.287 1023.36,684.287 1023.92,684.287 1024.48,684.287 1025.04,684.287 1025.6,684.287 1026.16,684.287 1026.72,684.287 1027.28,684.287 1027.83,684.287 1028.39,684.287 1028.95,684.287 1029.51,684.287 1030.07,684.287 1030.63,684.287 1031.19,684.287 1031.75,684.287 1032.31,684.287 1032.87,684.287 1033.43,684.287 1033.99,684.287 1034.55,684.287 1035.1,684.287 1035.66,684.287 1036.22,684.287 1036.78,684.287 1037.34,684.287 1037.9,684.287 1038.46,684.287 1039.02,684.287 1039.58,684.287 1040.14,684.287 1040.7,684.287 1041.26,684.287 1041.82,684.287 1042.38,684.287 1042.93,684.287 1043.49,684.287 1044.05,684.287 1044.61,684.287 1045.17,684.287 1045.73,684.287 1046.29,684.287 1046.85,684.287 1047.41,684.287 1047.97,684.287 1048.53,684.287 1049.09,684.287 1049.65,684.287 1050.2,684.287 1050.76,684.287 1051.32,684.287 1051.88,684.287 1052.44,684.287 1053,684.287 1053.56,684.287 1054.12,684.287 1054.68,684.287 1055.24,684.287 1055.8,684.287 1056.36,684.287 1056.92,684.287 1057.48,684.287 1058.03,684.287 1058.59,684.287 1059.15,684.287 1059.71,684.287 1060.27,684.287 1060.83,684.287 1061.39,684.287 1061.95,684.287 1062.51,684.287 1063.07,684.287 1063.63,684.287 1064.19,684.287 1064.75,684.287 1065.3,684.287 1065.86,684.287 1066.42,684.287 1066.98,684.287 1067.54,684.287 1068.1,684.287 1068.66,684.287 1069.22,684.287 1069.78,684.287 1070.34,684.287 1070.9,684.287 1071.46,684.287 1072.02,684.287 1072.57,684.287 1073.13,684.287 1073.69,684.287 1074.25,684.287 1074.81,684.287 1075.37,684.287 1075.93,684.287 1076.49,684.287 1077.05,684.287 1077.61,684.287 1078.17,684.287 1078.73,684.287 1079.29,684.287 1079.85,684.287 1080.4,684.287 1080.96,684.287 1081.52,684.287 1082.08,684.287 1082.64,684.287 1083.2,684.287 1083.76,684.287 1084.32,684.287 1084.88,684.287 1085.44,684.287 1086,684.287 1086.56,684.287 1087.12,684.287 1087.67,684.287 1088.23,684.287 1088.79,684.287 1089.35,684.287 1089.91,684.287 1090.47,684.287 1091.03,684.287 1091.59,684.287 1092.15,684.287 1092.71,684.287 1093.27,684.287 1093.83,684.287 1094.39,684.287 1094.94,684.287 1095.5,684.287 1096.06,684.287 1096.62,684.287 1097.18,684.287 1097.74,684.287 1098.3,684.287 1098.86,684.287 1099.42,684.287 1099.98,684.287 1100.54,684.287 1101.1,684.287 1101.66,684.287 1102.22,684.287 1102.77,684.287 1103.33,684.287 1103.89,684.287 1104.45,684.287 1105.01,684.287 1105.57,684.287 1106.13,684.287 1106.69,684.287 1107.25,684.287 1107.81,684.287 1108.37,684.287 1108.93,684.287 1109.49,684.287 1110.04,684.287 1110.6,684.287 1111.16,684.287 1111.72,684.287 1112.28,684.287 1112.84,684.287 1113.4,684.287 1113.96,684.287 1114.52,684.287 1115.08,684.287 1115.64,684.287 1116.2,684.287 1116.76,684.287 1117.31,684.287 1117.87,684.287 1118.43,684.287 1118.99,684.287 1119.55,684.287 1120.11,684.287 1120.67,684.287 1121.23,684.287 1121.79,684.287 1122.35,684.287 1122.91,684.287 1123.47,684.287 1124.03,684.287 1124.59,684.287 1125.14,684.287 1125.7,684.287 1126.26,684.287 1126.82,684.287 1127.38,684.287 1127.94,684.287 1128.5,684.287 1129.06,684.287 1129.62,684.287 1130.18,684.287 1130.74,684.287 1131.3,684.287 1131.86,684.287 1132.41,684.287 1132.97,684.287 1133.53,684.287 1134.09,684.287 1134.65,684.287 1135.21,684.287 1135.77,684.287 1136.33,684.287 1136.89,684.287 1137.45,684.287 1138.01,684.287 1138.57,684.287 1139.13,684.287 1139.68,684.287 1140.24,684.287 1140.8,684.287 1141.36,684.287 1141.92,684.287 1142.48,684.287 1143.04,684.287 1143.6,684.287 1144.16,684.287 1144.72,684.287 1145.28,684.287 1145.84,684.287 1146.4,684.287 1146.96,684.287 1147.51,684.287 1148.07,684.287 1148.63,684.287 1149.19,684.287 1149.75,684.287 1150.31,684.287 1150.87,684.287 1151.43,684.287 1151.99,684.287 1152.55,684.287 1153.11,684.287 1153.67,684.287 1154.23,684.287 1154.78,684.287 1155.34,684.287 1155.9,684.287 1156.46,684.287 1157.02,684.287 1157.58,684.287 1158.14,684.287 1158.7,684.287 1159.26,684.287 1159.82,684.287 1160.38,684.287 1160.94,684.287 1161.5,684.287 1162.05,684.287 1162.61,684.287 1163.17,684.287 1163.73,684.287 1164.29,684.287 1164.85,684.287 1165.41,684.287 1165.97,684.287 1166.53,684.287 1167.09,684.287 1167.65,684.287 1168.21,684.287 1168.77,684.287 1169.33,684.287 1169.88,684.287 1170.44,684.287 1171,684.287 1171.56,684.287 1172.12,684.287 1172.68,684.287 1173.24,684.287 1173.8,684.287 1174.36,684.287 1174.92,684.287 1175.48,684.287 1176.04,684.287 1176.6,684.287 1177.15,684.287 1177.71,684.287 1178.27,684.287 1178.83,684.287 1179.39,684.287 1179.95,684.287 1180.51,684.287 1181.07,684.287 1181.63,684.287 1182.19,684.287 1182.75,684.287 1183.31,684.287 1183.87,684.287 1184.43,684.287 1184.98,684.287 1185.54,684.287 1186.1,684.287 1186.66,684.287 1187.22,684.287 1187.78,684.287 1188.34,684.287 1188.9,684.287 1189.46,684.287 1190.02,684.287 1190.58,684.287 1191.14,684.287 1191.7,684.287 1192.25,684.287 1192.81,684.287 1193.37,684.287 1193.93,684.287 1194.49,684.287 1195.05,684.287 1195.61,684.287 1196.17,684.287 1196.73,684.287 1197.29,684.287 1197.85,684.287 1198.41,684.287 1198.97,684.287 1199.52,684.287 1200.08,684.287 1200.64,684.287 1201.2,684.287 1201.76,684.287 1202.32,684.287 1202.88,684.287 1203.44,684.287 1204,684.287 1204.56,684.287 1205.12,684.287 1205.68,684.287 1206.24,684.287 1206.8,684.287 1207.35,684.287 1207.91,684.287 1208.47,684.287 1209.03,684.287 1209.59,684.287 1210.15,684.287 1210.71,684.287 1211.27,684.287 1211.83,684.287 1212.39,684.287 1212.95,684.287 1213.51,684.287 1214.07,684.287 1214.62,684.287 1215.18,684.287 1215.74,684.287 1216.3,684.287 1216.86,684.287 1217.42,684.287 1217.98,684.287 1218.54,684.287 1219.1,684.287 1219.66,684.287 1220.22,684.287 1220.78,684.287 1221.34,684.287 1221.89,684.287 1222.45,684.287 1223.01,684.287 1223.57,684.287 1224.13,684.287 1224.69,684.287 1225.25,684.287 1225.81,684.287 1226.37,684.287 1226.93,684.287 1227.49,684.287 1228.05,684.287 1228.61,684.287 1229.17,684.287 1229.72,684.287 1230.28,684.287 1230.84,684.287 1231.4,684.287 1231.96,684.287 1232.52,684.287 1233.08,684.287 1233.64,684.287 1234.2,684.287 1234.76,684.287 1235.32,684.287 1235.88,684.287 1236.44,684.287 1236.99,684.287 1237.55,684.287 1238.11,684.287 1238.67,684.287 1239.23,684.287 1239.79,684.287 1240.35,684.287 1240.91,684.287 1241.47,684.287 1242.03,684.287 1242.59,684.287 1243.15,684.287 1243.71,684.287 1244.26,684.287 1244.82,684.287 1245.38,684.287 1245.94,684.287 1246.5,684.287 1247.06,684.287 1247.62,684.287 1248.18,684.287 1248.74,684.287 1249.3,684.287 1249.86,684.287 1250.42,684.287 1250.98,684.287 1251.54,684.287 1252.09,684.287 1252.65,684.287 1253.21,684.287 1253.77,684.287 1254.33,684.287 1254.89,684.287 1255.45,684.287 1256.01,684.287 1256.57,684.287 1257.13,684.287 1257.69,684.287 1258.25,684.287 1258.81,684.287 1259.36,684.287 1259.92,684.287 1260.48,684.287 1261.04,684.287 1261.6,684.287 1262.16,684.287 1262.72,684.287 1263.28,684.287 1263.84,684.287 1264.4,684.287 1264.96,684.287 1265.52,684.287 1266.08,684.287 1266.63,684.287 1267.19,684.287 1267.75,684.287 1268.31,684.287 1268.87,684.287 1269.43,684.287 1269.99,684.287 1270.55,684.287 1271.11,684.287 1271.67,684.287 1272.23,684.287 1272.79,684.287 1273.35,684.287 1273.91,684.287 1274.46,684.287 1275.02,684.287 1275.58,684.287 1276.14,684.287 1276.7,684.287 1277.26,684.287 1277.82,684.287 1278.38,684.287 1278.94,684.287 1279.5,684.287 1280.06,684.287 1280.62,684.287 1281.18,684.287 1281.73,684.287 1282.29,684.287 1282.85,684.287 1283.41,684.287 1283.97,684.287 1284.53,684.287 1285.09,684.287 1285.65,684.287 1286.21,684.287 1286.77,684.287 1287.33,684.287 1287.89,684.287 1288.45,684.287 1289,684.287 1289.56,684.287 1290.12,684.287 1290.68,684.287 1291.24,684.287 1291.8,684.287 1292.36,684.287 1292.92,684.287 1293.48,684.287 1294.04,684.287 1294.6,684.287 1295.16,684.287 1295.72,684.287 1296.28,684.287 1296.83,684.287 1297.39,684.287 1297.95,684.287 1298.51,684.287 1299.07,684.287 1299.63,684.287 1300.19,684.287 1300.75,684.287 1301.31,684.287 1301.87,684.287 1302.43,684.287 1302.99,684.287 1303.55,684.287 1304.1,684.287 1304.66,684.287 1305.22,684.287 1305.78,684.287 1306.34,684.287 1306.9,684.287 1307.46,684.287 1308.02,684.287 1308.58,684.287 1309.14,684.287 1309.7,684.287 1310.26,684.287 1310.82,684.287 1311.38,684.287 1311.93,684.287 1312.49,684.287 1313.05,684.287 1313.61,684.287 1314.17,684.287 1314.73,684.287 1315.29,684.287 1315.85,684.287 1316.41,684.287 1316.97,684.287 1317.53,684.287 1318.09,684.287 1318.65,684.287 1319.2,684.287 1319.76,684.287 1320.32,684.287 1320.88,684.287 1321.44,684.287 1322,684.287 1322.56,684.287 1323.12,684.287 1323.68,684.287 1324.24,684.287 1324.8,684.287 1325.36,684.287 1325.92,684.287 1326.47,684.287 1327.03,684.287 1327.59,684.287 1328.15,684.287 1328.71,684.287 1329.27,684.287 1329.83,684.287 1330.39,684.287 1330.95,684.287 1331.51,684.287 1332.07,684.287 1332.63,684.287 1333.19,684.287 1333.75,684.287 1334.3,684.287 1334.86,684.287 1335.42,684.287 1335.98,684.287 1336.54,684.287 1337.1,684.287 1337.66,684.287 1338.22,684.287 1338.78,684.287 1339.34,684.287 1339.9,684.287 1340.46,684.287 1341.02,684.287 1341.57,684.287 1342.13,684.287 1342.69,684.287 1343.25,684.287 1343.81,684.287 1344.37,684.287 1344.93,684.287 1345.49,684.287 1346.05,684.287 1346.61,684.287 1347.17,684.287 1347.73,684.287 1348.29,684.287 1348.84,684.287 1349.4,684.287 1349.96,684.287 1350.52,684.287 1351.08,684.287 1351.64,684.287 1352.2,684.287 1352.76,684.287 1353.32,684.287 1353.88,684.287 1354.44,684.287 1355,684.287 1355.56,684.287 1356.12,684.287 1356.67,684.287 1357.23,684.287 1357.79,684.287 1358.35,684.287 1358.91,684.287 1359.47,684.287 1360.03,684.287 1360.59,684.287 1361.15,684.287 1361.71,684.287 1362.27,684.287 1362.83,684.287 1363.39,684.287 1363.94,684.287 1364.5,684.287 1365.06,684.287 1365.62,684.287 1366.18,684.287 1366.74,684.287 1367.3,684.287 1367.86,684.287 1368.42,684.287 1368.98,684.287 1369.54,684.287 1370.1,684.287 1370.66,684.287 1371.21,684.287 1371.77,684.287 1372.33,684.287 1372.89,684.287 1373.45,684.287 1374.01,684.287 1374.57,684.287 1375.13,684.287 1375.69,684.287 1376.25,684.287 1376.81,684.287 1377.37,684.287 1377.93,684.287 1378.49,684.287 1379.04,684.287 1379.6,684.287 1380.16,684.287 1380.72,684.287 1381.28,684.287 1381.84,684.287 1382.4,684.287 1382.96,684.287 1383.52,684.287 1384.08,684.287 1384.64,684.287 1385.2,684.287 1385.76,684.287 1386.31,684.287 1386.87,684.287 1387.43,684.287 1387.99,684.287 1388.55,684.287 1389.11,684.287 1389.67,684.287 1390.23,684.287 1390.79,684.287 1391.35,684.287 1391.91,684.287 1392.47,684.287 1393.03,684.287 1393.58,684.287 1394.14,684.287 1394.7,684.287 1395.26,684.287 1395.82,684.287 1396.38,684.287 1396.94,684.287 1397.5,684.287 1398.06,684.287 1398.62,684.287 1399.18,684.287 1399.74,684.287 1400.3,684.287 1400.86,684.287 1401.41,684.287 1401.97,684.287 1402.53,684.287 1403.09,684.287 1403.65,684.287 1404.21,684.287 1404.77,684.287 1405.33,684.287 1405.89,684.287 1406.45,684.287 1407.01,684.287 1407.57,684.287 1408.13,684.287 1408.68,684.287 1409.24,684.287 1409.8,684.287 1410.36,684.287 1410.92,684.287 1411.48,684.287 1412.04,684.287 1412.6,684.287 1413.16,684.287 1413.72,684.287 1414.28,684.287 1414.84,684.287 1415.4,684.287 1415.95,684.287 1416.51,684.287 1417.07,684.287 1417.63,684.287 1418.19,684.287 1418.75,684.287 1419.31,684.287 1419.87,684.287 1420.43,684.287 1420.99,684.287 1421.55,684.287 1422.11,684.287 1422.67,684.287 1423.23,684.287 1423.78,684.287 1424.34,684.287 1424.9,684.287 1425.46,684.287 1426.02,684.287 1426.58,684.287 1427.14,684.287 1427.7,684.287 1428.26,684.287 1428.82,684.287 1429.38,684.287 1429.94,684.287 1430.5,684.287 1431.05,684.287 1431.61,684.287 1432.17,684.287 1432.73,684.287 1433.29,684.287 1433.85,684.287 1434.41,684.287 1434.97,684.287 1435.53,684.287 1436.09,684.287 1436.65,684.287 1437.21,684.287 1437.77,684.287 1438.33,684.287 1438.88,684.287 1439.44,684.287 1440,684.287 1440.56,684.287 1441.12,684.287 1441.68,684.287 1442.24,684.287 1442.8,684.287 1443.36,684.287 1443.92,684.287 1444.48,684.287 1445.04,684.287 1445.6,684.287 1446.15,684.287 1446.71,684.287 1447.27,684.287 1447.83,684.287 1448.39,684.287 1448.95,684.287 1449.51,684.287 1450.07,684.287 1450.63,684.287 1451.19,684.287 1451.75,684.287 1452.31,684.287 1452.87,684.287 1453.42,684.287 1453.98,684.287 1454.54,684.287 1455.1,684.287 1455.66,684.287 1456.22,684.287 1456.78,684.287 1457.34,684.287 1457.9,684.287 1458.46,684.287 1459.02,684.287 1459.58,684.287 1460.14,684.287 1460.7,684.287 1461.25,684.287 1461.81,684.287 1462.37,684.287 1462.93,684.287 1463.49,684.287 1464.05,684.287 1464.61,684.287 1465.17,684.287 1465.73,684.287 1466.29,684.287 1466.85,684.287 1467.41,684.287 1467.97,684.287 1468.52,684.287 1469.08,684.287 1469.64,684.287 1470.2,684.287 1470.76,684.287 1471.32,684.287 1471.88,684.287 1472.44,684.287 1473,684.287 1473.56,684.287 1474.12,684.287 1474.68,684.287 1475.24,684.287 1475.79,684.287 1476.35,684.287 1476.91,684.287 1477.47,684.287 1478.03,684.287 1478.59,684.287 1479.15,684.287 1479.71,684.287 1480.27,684.287 1480.83,684.287 1481.39,684.287 1481.95,684.287 1482.51,684.287 1483.07,684.287 1483.62,684.287 1484.18,684.287 1484.74,684.287 1485.3,684.287 1485.86,684.287 1486.42,684.287 1486.98,684.287 1487.54,684.287 1488.1,684.287 1488.66,684.287 1489.22,684.287 1489.78,684.287 1490.34,684.287 1490.89,684.287 1491.45,684.287 1492.01,684.287 1492.57,684.287 1493.13,684.287 1493.69,684.287 1494.25,684.287 1494.81,684.287 1495.37,684.287 1495.93,684.287 1496.49,684.287 1497.05,684.287 1497.61,684.287 1498.16,684.287 1498.72,684.287 1499.28,684.287 1499.84,684.287 1500.4,684.287 1500.96,684.287 1501.52,684.287 1502.08,684.287 1502.64,684.287 1503.2,684.287 1503.76,684.287 1504.32,684.287 1504.88,684.287 1505.44,684.287 1505.99,684.287 1506.55,684.287 1507.11,684.287 1507.67,684.287 1508.23,684.287 1508.79,684.287 1509.35,684.287 1509.91,684.287 1510.47,684.287 1511.03,684.287 1511.59,684.287 1512.15,684.287 1512.71,684.287 1513.26,684.287 1513.82,684.287 1514.38,684.287 1514.94,684.287 1515.5,684.287 1516.06,684.287 1516.62,684.287 1517.18,684.287 1517.74,684.287 1518.3,684.287 1518.86,684.287 1519.42,684.287 1519.98,684.287 1520.53,684.287 1521.09,684.287 1521.65,684.287 1522.21,684.287 1522.77,684.287 1523.33,684.287 1523.89,684.287 1524.45,684.287 1525.01,684.287 1525.57,684.287 1526.13,684.287 1526.69,684.287 1527.25,684.287 1527.81,684.287 1528.36,684.287 1528.92,684.287 1529.48,684.287 1530.04,684.287 1530.6,684.287 1531.16,684.287 1531.72,684.287 1532.28,684.287 1532.84,684.287 1533.4,684.287 1533.96,684.287 1534.52,684.287 1535.08,684.287 1535.63,684.287 1536.19,684.287 1536.75,684.287 1537.31,684.287 1537.87,684.287 1538.43,684.287 1538.99,684.287 1539.55,684.287 1540.11,684.287 1540.67,684.287 1541.23,684.287 1541.79,684.287 1542.35,684.287 1542.9,684.287 1543.46,684.287 1544.02,684.287 1544.58,684.287 1545.14,684.287 1545.7,684.287 1546.26,684.287 1546.82,684.287 1547.38,684.287 1547.94,684.287 1548.5,684.287 1549.06,684.287 1549.62,684.287 1550.18,684.287 1550.73,684.287 1551.29,684.287 1551.85,684.287 1552.41,684.287 1552.97,684.287 1553.53,684.287 1554.09,684.287 1554.65,684.287 1555.21,684.287 1555.77,684.287 1556.33,684.287 1556.89,684.287 1557.45,684.287 1558,684.287 1558.56,684.287 1559.12,684.287 1559.68,684.287 1560.24,684.287 1560.8,684.287 1561.36,684.287 1561.92,684.287 1562.48,684.287 1563.04,684.287 1563.6,684.287 1564.16,684.287 1564.72,684.287 1565.28,684.287 1565.83,684.287 1566.39,684.287 1566.95,684.287 1567.51,684.287 1568.07,684.287 1568.63,684.287 1569.19,684.287 1569.75,684.287 1570.31,684.287 1570.87,684.287 1571.43,684.287 1571.99,684.287 1572.55,684.287 1573.1,684.287 1573.66,684.287 1574.22,684.287 1574.78,684.287 1575.34,684.287 1575.9,684.287 1576.46,684.287 1577.02,684.287 1577.58,684.287 1578.14,684.287 1578.7,684.287 1579.26,684.287 1579.82,684.287 1580.37,684.287 1580.93,684.287 1581.49,684.287 1582.05,684.287 1582.61,684.287 1583.17,684.287 1583.73,684.287 1584.29,684.287 1584.85,684.287 1585.41,684.287 1585.97,684.287 1586.53,684.287 1587.09,684.287 1587.65,684.287 1588.2,684.287 1588.76,684.287 1589.32,684.287 1589.88,684.287 1590.44,684.287 1591,684.287 1591.56,684.287 1592.12,684.287 1592.68,684.287 1593.24,684.287 1593.8,684.287 1594.36,684.287 1594.92,684.287 1595.47,684.287 1596.03,684.287 1596.59,684.287 1597.15,684.287 1597.71,684.287 1598.27,684.287 1598.83,684.287 1599.39,684.287 1599.95,684.287 1600.51,684.287 1601.07,684.287 1601.63,684.287 1602.19,684.287 1602.74,684.287 1603.3,684.287 1603.86,684.287 1604.42,684.287 1604.98,684.287 1605.54,684.287 1606.1,684.287 1606.66,684.287 1607.22,684.287 1607.78,684.287 1608.34,684.287 1608.9,684.287 1609.46,684.287 1610.02,684.287 1610.57,684.287 1611.13,684.287 1611.69,684.287 1612.25,684.287 1612.81,684.287 1613.37,684.287 1613.93,684.287 1614.49,684.287 1615.05,684.287 1615.61,684.287 1616.17,684.287 1616.73,684.287 1617.29,684.287 1617.84,684.287 1618.4,684.287 1618.96,684.287 1619.52,684.287 1620.08,684.287 1620.64,684.287 1621.2,684.287 1621.76,684.287 1622.32,684.287 1622.88,684.287 1623.44,684.287 1624,684.287 1624.56,684.287 1625.11,684.287 1625.67,684.287 1626.23,684.287 1626.79,684.287 1627.35,684.287 1627.91,684.287 1628.47,684.287 1629.03,684.287 1629.59,684.287 1630.15,684.287 1630.71,684.287 1631.27,684.287 1631.83,684.287 1632.39,684.287 1632.94,684.287 1633.5,684.287 1634.06,684.287 1634.62,684.287 1635.18,684.287 1635.74,684.287 1636.3,684.287 1636.86,684.287 1637.42,684.287 1637.98,684.287 1638.54,684.287 1639.1,684.287 1639.66,684.287 1640.21,684.287 1640.77,684.287 1641.33,684.287 1641.89,684.287 1642.45,684.287 1643.01,684.287 1643.57,684.287 1644.13,684.287 1644.69,684.287 1645.25,684.287 1645.81,684.287 1646.37,684.287 1646.93,684.287 1647.48,684.287 1648.04,684.287 1648.6,684.287 1649.16,684.287 1649.72,684.287 1650.28,684.287 1650.84,684.287 1651.4,684.287 1651.96,684.287 1652.52,684.287 1653.08,684.287 1653.64,684.287 1654.2,684.287 1654.76,684.287 1655.31,684.287 1655.87,684.287 1656.43,684.287 1656.99,684.287 1657.55,684.287 1658.11,684.287 1658.67,684.287 1659.23,684.287 1659.79,684.287 1660.35,684.287 1660.91,684.287 1661.47,684.287 1662.03,684.287 1662.58,684.287 1663.14,684.287 1663.7,684.287 1664.26,684.287 1664.82,684.287 1665.38,684.287 1665.94,684.287 1666.5,684.287 1667.06,684.287 1667.62,684.287 1668.18,684.287 1668.74,684.287 1669.3,684.287 1669.85,684.287 1670.41,684.287 1670.97,684.287 1671.53,684.287 1672.09,684.287 1672.65,684.287 1673.21,684.287 1673.77,684.287 1674.33,684.287 1674.89,684.287 1675.45,684.287 1676.01,684.287 1676.57,684.287 1677.13,684.287 1677.68,684.287 1678.24,684.287 1678.8,684.287 1679.36,684.287 1679.92,684.287 1680.48,684.287 1681.04,684.287 1681.6,684.287 1682.16,684.287 1682.72,684.287 1683.28,684.287 1683.84,684.287 1684.4,684.287 1684.95,684.287 1685.51,684.287 1686.07,684.287 1686.63,684.287 1687.19,684.287 1687.75,684.287 1688.31,684.287 1688.87,684.287 1689.43,684.287 1689.99,684.287 1690.55,684.287 1691.11,684.287 1691.67,684.287 1692.23,684.287 1692.78,684.287 1693.34,684.287 1693.9,684.287 1694.46,684.287 1695.02,684.287 1695.58,684.287 1696.14,684.287 1696.7,684.287 1697.26,684.287 1697.82,684.287 1698.38,684.287 1698.94,684.287 1699.5,684.287 1700.05,684.287 1700.61,684.287 1701.17,684.287 1701.73,684.287 1702.29,684.287 1702.85,684.287 1703.41,684.287 1703.97,684.287 1704.53,684.287 1705.09,684.287 1705.65,684.287 1706.21,684.287 1706.77,684.287 1707.32,684.287 1707.88,684.287 1708.44,684.287 1709,684.287 1709.56,684.287 1710.12,684.287 1710.68,684.287 1711.24,684.287 1711.8,684.287 1712.36,684.287 1712.92,684.287 1713.48,684.287 1714.04,684.287 1714.6,684.287 1715.15,684.287 1715.71,684.287 1716.27,684.287 1716.83,684.287 1717.39,684.287 1717.95,684.287 1718.51,684.287 1719.07,684.287 1719.63,684.287 1720.19,684.287 1720.75,684.287 1721.31,684.287 1721.87,684.287 1722.42,684.287 1722.98,684.287 1723.54,684.287 1724.1,684.287 1724.66,684.287 1725.22,684.287 1725.78,684.287 1726.34,684.287 1726.9,684.287 1727.46,684.287 1728.02,684.287 1728.58,684.287 1729.14,684.287 1729.69,684.287 1730.25,684.287 1730.81,684.287 1731.37,684.287 1731.93,684.287 1732.49,684.287 1733.05,684.287 1733.61,684.287 1734.17,684.287 1734.73,684.287 1735.29,684.287 1735.85,684.287 1736.41,684.287 1736.97,684.287 1737.52,684.287 1738.08,684.287 1738.64,684.287 1739.2,684.287 1739.76,684.287 1740.32,684.287 1740.88,684.287 1741.44,684.287 1742,684.287 1742.56,684.287 1743.12,684.287 1743.68,684.287 1744.24,684.287 1744.79,684.287 1745.35,684.287 1745.91,684.287 1746.47,684.287 1747.03,684.287 1747.59,684.287 1748.15,684.287 1748.71,684.287 1749.27,684.287 1749.83,684.287 1750.39,684.287 1750.95,684.287 1751.51,684.287 1752.06,684.287 1752.62,684.287 1753.18,684.287 1753.74,684.287 1754.3,684.287 1754.86,684.287 1755.42,684.287 1755.98,684.287 1756.54,684.287 1757.1,684.287 1757.66,684.287 1758.22,684.287 1758.78,684.287 1759.34,684.287 1759.89,684.287 1760.45,684.287 1761.01,684.287 1761.57,684.287 1762.13,684.287 1762.69,684.287 1763.25,684.287 1763.81,684.287 1764.37,684.287 1764.93,684.287 1765.49,684.287 1766.05,684.287 1766.61,684.287 1767.16,684.287 1767.72,684.287 1768.28,684.287 1768.84,684.287 1769.4,684.287 1769.96,684.287 1770.52,684.287 1771.08,684.287 1771.64,684.287 1772.2,684.287 1772.76,684.287 1773.32,684.287 1773.88,684.287 1774.43,684.287 1774.99,684.287 1775.55,684.287 1776.11,684.287 1776.67,684.287 1777.23,684.287 1777.79,684.287 1778.35,684.287 1778.91,684.287 1779.47,684.287 1780.03,684.287 1780.59,684.287 1781.15,684.287 1781.71,684.287 1782.26,684.287 1782.82,684.287 1783.38,684.287 1783.94,684.287 1784.5,684.287 1785.06,684.287 1785.62,684.287 1786.18,684.287 1786.74,684.287 1787.3,684.287 1787.86,684.287 1788.42,684.287 1788.98,684.287 1789.53,684.287 1790.09,684.287 1790.65,684.287 1791.21,684.287 1791.77,684.287 1792.33,684.287 1792.89,684.287 1793.45,684.287 1794.01,684.287 1794.57,684.287 1795.13,684.287 1795.69,684.287 1796.25,684.287 1796.8,684.287 1797.36,684.287 1797.92,684.287 1798.48,684.287 1799.04,684.287 1799.6,684.287 1800.16,684.287 1800.72,684.287 1801.28,684.287 1801.84,684.287 1802.4,684.287 1802.96,684.287 1803.52,684.287 1804.08,684.287 1804.63,684.287 1805.19,684.287 1805.75,684.287 1806.31,684.287 1806.87,684.287 1807.43,684.287 1807.99,684.287 1808.55,684.287 1809.11,684.287 1809.67,684.287 1810.23,684.287 1810.79,684.287 1811.35,684.287 1811.9,684.287 1812.46,684.287 1813.02,684.287 1813.58,684.287 1814.14,684.287 1814.7,684.287 1815.26,684.287 1815.82,684.287 1816.38,684.287 1816.94,684.287 1817.5,684.287 1818.06,684.287 1818.62,684.287 1819.18,684.287 1819.73,684.287 1820.29,684.287 1820.85,684.287 1821.41,684.287 1821.97,684.287 1822.53,684.287 1823.09,684.287 1823.65,684.287 1824.21,684.287 1824.77,684.287 1825.33,684.287 1825.89,684.287 1826.45,684.287 1827,684.287 1827.56,684.287 1828.12,684.287 1828.68,684.287 1829.24,684.287 1829.8,684.287 1830.36,684.287 1830.92,684.287 1831.48,684.287 1832.04,684.287 1832.6,684.287 1833.16,684.287 1833.72,684.287 1834.27,684.287 1834.83,684.287 1835.39,684.287 1835.95,684.287 1836.51,684.287 1837.07,684.287 1837.63,684.287 1838.19,684.287 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.040872544784923 ± 0.022463042619222547\nProjected Energy: -4.0186205101508286 ± (0.004834332450943002, 0.004981704894123418)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.502781</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4357e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2974e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0159e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.824e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.896e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.037e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.3631242916133584\n -0.7590191922770853\n  0.13584182219621965\n  0.15789998694608798\n  0.8767114411781378\n  1.5305929970973366\n  1.5835732611867384\n  3.0728703303258635\n  3.1256726539518382\n  4.862107221562173\n  6.26069485038059\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
