var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20933895264044547 ± 0.0011269303739981156\n   G2(1) = 0.9180771650381474 ± 0.0006449061345736235\n   G2(2) = 0.9819853323281194 ± 0.0007677288776509299\n   G2(3) = 0.99053605262702 ± 0.0009939191026983412\n   G2(4) = 0.9819853323281194 ± 0.0007677288776509299\n   G2(5) = 0.9180771650381474 ± 0.0006449061345736235\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.043599887874849 ± 0.1258056964797553\n   Replica 2: -3.9997954836828518 ± 0.13899377638437063\n   Replica 3: -4.025428623819212 ± 0.12033905867132927\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.19 2211.02,1003.19 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.55 2211.02,745.55 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.908 2211.02,487.908 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.266 2211.02,230.266 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.19 423.181,1003.19 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.55 423.181,745.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.908 423.181,487.908 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.266 423.181,230.266 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M290.043 1016.54 L306.363 1016.54 L306.363 1020.47 L284.418 1020.47 L284.418 1016.54 Q287.08 1013.78 291.664 1009.15 Q296.27 1004.5 297.451 1003.16 Q299.696 1000.63 300.576 998.898 Q301.478 997.139 301.478 995.449 Q301.478 992.694 299.534 990.958 Q297.613 989.222 294.511 989.222 Q292.312 989.222 289.858 989.986 Q287.427 990.75 284.65 992.301 L284.65 987.579 Q287.474 986.445 289.927 985.866 Q292.381 985.287 294.418 985.287 Q299.789 985.287 302.983 987.972 Q306.177 990.657 306.177 995.148 Q306.177 997.278 305.367 999.199 Q304.58 1001.1 302.474 1003.69 Q301.895 1004.36 298.793 1007.58 Q295.691 1010.77 290.043 1016.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 985.912 L334.58 985.912 L334.58 989.847 L320.506 989.847 L320.506 998.319 Q321.524 997.972 322.543 997.81 Q323.562 997.625 324.58 997.625 Q330.367 997.625 333.747 1000.8 Q337.126 1003.97 337.126 1009.38 Q337.126 1014.96 333.654 1018.06 Q330.182 1021.14 323.862 1021.14 Q321.687 1021.14 319.418 1020.77 Q317.173 1020.4 314.765 1019.66 L314.765 1014.96 Q316.849 1016.1 319.071 1016.65 Q321.293 1017.21 323.77 1017.21 Q327.774 1017.21 330.112 1015.1 Q332.45 1013 332.45 1009.38 Q332.45 1005.77 330.112 1003.67 Q327.774 1001.56 323.77 1001.56 Q321.895 1001.56 320.02 1001.98 Q318.168 1002.39 316.224 1003.27 L316.224 985.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 988.991 Q352.728 988.991 350.899 992.556 Q349.094 996.097 349.094 1003.23 Q349.094 1010.33 350.899 1013.9 Q352.728 1017.44 356.339 1017.44 Q359.973 1017.44 361.779 1013.9 Q363.608 1010.33 363.608 1003.23 Q363.608 996.097 361.779 992.556 Q359.973 988.991 356.339 988.991 M356.339 985.287 Q362.149 985.287 365.205 989.894 Q368.284 994.477 368.284 1003.23 Q368.284 1011.95 365.205 1016.56 Q362.149 1021.14 356.339 1021.14 Q350.529 1021.14 347.45 1016.56 Q344.395 1011.95 344.395 1003.23 Q344.395 994.477 347.45 989.894 Q350.529 985.287 356.339 985.287 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M286.062 728.27 L304.418 728.27 L304.418 732.205 L290.344 732.205 L290.344 740.677 Q291.363 740.33 292.381 740.168 Q293.4 739.983 294.418 739.983 Q300.205 739.983 303.585 743.154 Q306.964 746.325 306.964 751.742 Q306.964 757.321 303.492 760.423 Q300.02 763.501 293.701 763.501 Q291.525 763.501 289.256 763.131 Q287.011 762.761 284.603 762.02 L284.603 757.321 Q286.687 758.455 288.909 759.011 Q291.131 759.566 293.608 759.566 Q297.613 759.566 299.951 757.46 Q302.288 755.353 302.288 751.742 Q302.288 748.131 299.951 746.025 Q297.613 743.918 293.608 743.918 Q291.733 743.918 289.858 744.335 Q288.006 744.751 286.062 745.631 L286.062 728.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 731.349 Q322.566 731.349 320.737 734.913 Q318.932 738.455 318.932 745.585 Q318.932 752.691 320.737 756.256 Q322.566 759.798 326.177 759.798 Q329.811 759.798 331.617 756.256 Q333.446 752.691 333.446 745.585 Q333.446 738.455 331.617 734.913 Q329.811 731.349 326.177 731.349 M326.177 727.645 Q331.987 727.645 335.043 732.251 Q338.122 736.835 338.122 745.585 Q338.122 754.311 335.043 758.918 Q331.987 763.501 326.177 763.501 Q320.367 763.501 317.288 758.918 Q314.233 754.311 314.233 745.585 Q314.233 736.835 317.288 732.251 Q320.367 727.645 326.177 727.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 731.349 Q352.728 731.349 350.899 734.913 Q349.094 738.455 349.094 745.585 Q349.094 752.691 350.899 756.256 Q352.728 759.798 356.339 759.798 Q359.973 759.798 361.779 756.256 Q363.608 752.691 363.608 745.585 Q363.608 738.455 361.779 734.913 Q359.973 731.349 356.339 731.349 M356.339 727.645 Q362.149 727.645 365.205 732.251 Q368.284 736.835 368.284 745.585 Q368.284 754.311 365.205 758.918 Q362.149 763.501 356.339 763.501 Q350.529 763.501 347.45 758.918 Q344.395 754.311 344.395 745.585 Q344.395 736.835 347.45 732.251 Q350.529 727.645 356.339 727.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M284.835 470.628 L307.057 470.628 L307.057 472.619 L294.511 505.188 L289.627 505.188 L301.432 474.563 L284.835 474.563 L284.835 470.628 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 470.628 L334.58 470.628 L334.58 474.563 L320.506 474.563 L320.506 483.035 Q321.524 482.688 322.543 482.526 Q323.562 482.341 324.58 482.341 Q330.367 482.341 333.747 485.512 Q337.126 488.683 337.126 494.1 Q337.126 499.679 333.654 502.78 Q330.182 505.859 323.862 505.859 Q321.687 505.859 319.418 505.489 Q317.173 505.118 314.765 504.378 L314.765 499.679 Q316.849 500.813 319.071 501.368 Q321.293 501.924 323.77 501.924 Q327.774 501.924 330.112 499.817 Q332.45 497.711 332.45 494.1 Q332.45 490.489 330.112 488.382 Q327.774 486.276 323.77 486.276 Q321.895 486.276 320.02 486.693 Q318.168 487.109 316.224 487.989 L316.224 470.628 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 473.707 Q352.728 473.707 350.899 477.271 Q349.094 480.813 349.094 487.943 Q349.094 495.049 350.899 498.614 Q352.728 502.155 356.339 502.155 Q359.973 502.155 361.779 498.614 Q363.608 495.049 363.608 487.943 Q363.608 480.813 361.779 477.271 Q359.973 473.707 356.339 473.707 M356.339 470.003 Q362.149 470.003 365.205 474.609 Q368.284 479.193 368.284 487.943 Q368.284 496.669 365.205 501.276 Q362.149 505.859 356.339 505.859 Q350.529 505.859 347.45 501.276 Q344.395 496.669 344.395 487.943 Q344.395 479.193 347.45 474.609 Q350.529 470.003 356.339 470.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M256.664 243.611 L264.303 243.611 L264.303 217.245 L255.992 218.912 L255.992 214.652 L264.256 212.986 L268.932 212.986 L268.932 243.611 L276.571 243.611 L276.571 247.546 L256.664 247.546 L256.664 243.611 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M296.015 216.064 Q292.404 216.064 290.576 219.629 Q288.77 223.171 288.77 230.3 Q288.77 237.407 290.576 240.972 Q292.404 244.513 296.015 244.513 Q299.65 244.513 301.455 240.972 Q303.284 237.407 303.284 230.3 Q303.284 223.171 301.455 219.629 Q299.65 216.064 296.015 216.064 M296.015 212.361 Q301.826 212.361 304.881 216.967 Q307.96 221.55 307.96 230.3 Q307.96 239.027 304.881 243.634 Q301.826 248.217 296.015 248.217 Q290.205 248.217 287.127 243.634 Q284.071 239.027 284.071 230.3 Q284.071 221.55 287.127 216.967 Q290.205 212.361 296.015 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 216.064 Q322.566 216.064 320.737 219.629 Q318.932 223.171 318.932 230.3 Q318.932 237.407 320.737 240.972 Q322.566 244.513 326.177 244.513 Q329.811 244.513 331.617 240.972 Q333.446 237.407 333.446 230.3 Q333.446 223.171 331.617 219.629 Q329.811 216.064 326.177 216.064 M326.177 212.361 Q331.987 212.361 335.043 216.967 Q338.122 221.55 338.122 230.3 Q338.122 239.027 335.043 243.634 Q331.987 248.217 326.177 248.217 Q320.367 248.217 317.288 243.634 Q314.233 239.027 314.233 230.3 Q314.233 221.55 317.288 216.967 Q320.367 212.361 326.177 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 216.064 Q352.728 216.064 350.899 219.629 Q349.094 223.171 349.094 230.3 Q349.094 237.407 350.899 240.972 Q352.728 244.513 356.339 244.513 Q359.973 244.513 361.779 240.972 Q363.608 237.407 363.608 230.3 Q363.608 223.171 361.779 219.629 Q359.973 216.064 356.339 216.064 M356.339 212.361 Q362.149 212.361 365.205 216.967 Q368.284 221.55 368.284 230.3 Q368.284 239.027 365.205 243.634 Q362.149 248.217 356.339 248.217 Q350.529 248.217 347.45 243.634 Q344.395 239.027 344.395 230.3 Q344.395 221.55 347.45 216.967 Q350.529 212.361 356.339 212.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.266 4017.76,230.266 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.55 459.964,1244.98 460.533,1244.49 461.101,1243.92 461.669,1243.26 462.238,1242.52 462.806,1241.68 463.375,1239.71 463.943,1238.71 464.511,1236.56 465.08,1235.37 465.648,1234.02 466.216,1232.6 466.785,1229.99 467.353,1227.3 467.921,1223.46 468.49,1221.53 469.058,1218.43 469.626,1216.23 470.195,1212.89 470.763,1210.35 471.331,1207.68 471.9,1204.92 472.468,1200.9 473.036,1197.77 473.605,1193.34 474.173,1188.82 474.741,1185.07 475.31,1180.15 475.878,1175.98 476.446,1171.66 477.015,1167.05 477.583,1161.27 478.152,1155.4 478.72,1149.29 479.288,1143.97 479.857,1138.5 480.425,1132.76 480.993,1125.77 481.562,1117.54 482.13,1111.25 482.698,1104.67 483.267,1097.8 483.835,1089.79 484.403,1080.49 484.972,1072.09 485.54,1064.31 486.108,1056.4 486.677,1048.39 487.245,1039.26 487.813,1030.88 488.382,1021.38 488.95,1011.66 489.518,1002.87 490.087,992.948 490.655,983.91 491.224,974.813 491.792,962.384 492.36,951.005 492.929,940.701 493.497,931.3 494.065,920.75 494.634,907.089 495.202,895.565 495.77,885.018 496.339,874.492 496.907,863.97 497.475,851.253 498.044,840.671 498.612,829.093 499.18,818.649 499.749,807.029 500.317,797.645 500.885,787.411 501.454,778.045 502.022,767.699 502.59,754.385 503.159,743.216 503.727,731.283 504.295,720.394 504.864,709.609 505.432,700.906 506.001,690.286 506.569,680.677 507.137,671.358 507.706,662.056 508.274,651.831 508.842,643.777 509.411,633.665 509.979,619.656 510.547,610.152 511.116,598.722 511.684,591.36 512.252,581.385 512.821,574.666 513.389,567.935 513.957,560.173 514.526,549.27 515.094,540.785 515.662,534.586 516.231,527.436 516.799,521.421 517.367,515.583 517.936,509.92 518.504,504.143 519.072,496.636 519.641,488.056 520.209,481.678 520.778,475.509 521.346,469.286 521.914,462.565 522.483,456.979 523.051,450.6 523.619,445.204 524.188,438.823 524.756,431.876 525.324,426.927 525.893,423.258 526.461,418.449 527.029,411.583 527.598,406.16 528.166,403.012 528.734,397.75 529.303,394.703 529.871,391.54 530.439,387.63 531.008,384.68 531.576,382.739 532.144,376.664 532.713,374.906 533.281,369.371 533.85,366.994 534.418,364.448 534.986,361.986 535.555,358.506 536.123,356.241 536.691,352.825 537.26,350.449 537.828,349.302 538.396,347.05 538.965,342.654 539.533,338.501 540.101,336.651 540.67,333.486 541.238,331.715 541.806,328.984 542.375,327.322 542.943,324.637 543.511,324.087 544.08,323.506 544.648,321.842 545.216,321.94 545.785,318.852 546.353,317.029 546.921,315.315 547.49,309.496 548.058,307.768 548.627,305.441 549.195,304.141 549.763,301.707 550.332,298.313 550.9,296.204 551.468,293.275 552.037,292.409 552.605,291.798 553.173,291.001 553.742,289.087 554.31,286.264 554.878,284.616 555.447,281.934 556.015,282.613 556.583,281.2 557.152,280.95 557.72,280.255 558.288,278.637 558.857,276.93 559.425,276.577 559.993,276.216 560.562,274.788 561.13,275.239 561.698,273.334 562.267,270.754 562.835,270.331 563.404,268.057 563.972,267.83 564.54,266.523 565.109,266.607 565.677,266.52 566.245,265.1 566.814,261.839 567.382,261.883 567.95,262.029 568.519,261.944 569.087,261.977 569.655,260.855 570.224,261.694 570.792,258.526 571.36,259.672 571.929,259.375 572.497,259.504 573.065,261.536 573.634,261.112 574.202,260.098 574.77,259.972 575.339,259.63 575.907,259.413 576.476,260.309 577.044,258.754 577.612,258.462 578.181,258.013 578.749,255.726 579.317,253.309 579.886,252.217 580.454,249.292 581.022,249.476 581.591,248.645 582.159,247.961 582.727,246.392 583.296,246.898 583.864,248.388 584.432,247.671 585.001,248.166 585.569,250.371 586.137,247.335 586.706,247.611 587.274,247.74 587.842,248.987 588.411,249.947 588.979,249.805 589.547,248.745 590.116,246.594 590.684,247.795 591.253,244.556 591.821,243.503 592.389,243.804 592.958,243.012 593.526,245.641 594.094,245.785 594.663,247.068 595.231,250.04 595.799,250.067 596.368,245.698 596.936,246.698 597.504,244.556 598.073,244.605 598.641,245.98 599.209,245.15 599.778,244.229 600.346,245.637 600.914,245.604 601.483,245.412 602.051,245.584 602.619,244.272 603.188,244.3 603.756,244.05 604.325,244.035 604.893,243.022 605.461,240.903 606.03,242.321 606.598,242.323 607.166,241.243 607.735,241.472 608.303,240.467 608.871,240.675 609.44,241.961 610.008,240.887 610.576,241.05 611.145,240.93 611.713,239.005 612.281,241.186 612.85,241.382 613.418,240.369 613.986,240.478 614.555,240.531 615.123,240.455 615.691,239.386 616.26,239.487 616.828,239.335 617.396,239.45 617.965,240.567 618.533,239.405 619.102,238.3 619.67,236.394 620.238,235.675 620.807,236.113 621.375,236.609 621.943,235.199 622.512,236.614 623.08,236.88 623.648,236.078 624.217,235.549 624.785,235.012 625.353,234.392 625.922,234.038 626.49,233.373 627.058,233.711 627.627,235.114 628.195,236.478 628.763,236.817 629.332,237.308 629.9,237.581 630.468,234.584 631.037,234.252 631.605,233.605 632.173,235.168 632.742,236.694 633.31,237.052 633.879,237.245 634.447,236.365 635.015,235.659 635.584,235.943 636.152,236.048 636.72,237.397 637.289,238.684 637.857,239.735 638.425,241.712 638.994,240.721 639.562,240.74 640.13,239.496 640.699,237.394 641.267,237.63 641.835,237.84 642.404,235.887 642.972,235.232 643.54,233.568 644.109,233.007 644.677,234.787 645.245,232.059 645.814,233.474 646.382,233.9 646.951,235.408 647.519,235.512 648.087,235.762 648.656,236.079 649.224,237.114 649.792,237.377 650.361,236.579 650.929,233.574 651.497,232.718 652.066,232.99 652.634,234.514 653.202,234.71 653.771,235.83 654.339,238.05 654.907,239.026 655.476,238.891 656.044,237.854 656.612,239.723 657.181,239.537 657.749,238.351 658.317,237.179 658.886,237.238 659.454,235.367 660.022,234.561 660.591,233.534 661.159,232.587 661.728,229.899 662.296,229.261 662.864,230.732 663.433,229.89 664.001,230.193 664.569,230.765 665.138,231.223 665.706,232.71 666.274,232.053 666.843,232.345 667.411,233.713 667.979,233.986 668.548,235.444 669.116,235.532 669.684,237.487 670.253,236.464 670.821,236.778 671.389,237.639 671.958,235.885 672.526,238.941 673.094,238.696 673.663,239.555 674.231,240.11 674.799,237.717 675.368,236.532 675.936,236.28 676.505,236.386 677.073,236.563 677.641,236.455 678.21,232.474 678.778,233.822 679.346,233.974 679.915,232.818 680.483,233.021 681.051,233.303 681.62,233.398 682.188,232.585 682.756,231.768 683.325,230.776 683.893,230.315 684.461,230.762 685.03,231.97 685.598,228.335 686.166,226.996 686.735,226.662 687.303,228.096 687.871,229.677 688.44,231.256 689.008,231.672 689.577,228.848 690.145,228.197 690.713,229.684 691.282,229.079 691.85,229.242 692.418,228.57 692.987,229.263 693.555,231.686 694.123,234.232 694.692,234.319 695.26,235.591 695.828,234.528 696.397,235.9 696.965,236.09 697.533,235.923 698.102,236.998 698.67,236.753 699.238,237.644 699.807,236.411 700.375,238.501 700.943,240.05 701.512,239.827 702.08,239.709 702.648,241.486 703.217,241.267 703.785,240.908 704.354,241.566 704.922,243.047 705.49,241.365 706.059,240.818 706.627,238.143 707.195,237.552 707.764,237.426 708.332,235.073 708.9,234.018 709.469,231.861 710.037,233.045 710.605,232.964 711.174,231.015 711.742,231.078 712.31,230.152 712.879,230.391 713.447,229.675 714.015,233.038 714.584,235.086 715.152,235.983 715.72,233.669 716.289,234.636 716.857,236.466 717.425,235.344 717.994,235.015 718.562,235.741 719.131,234.491 719.699,233.422 720.267,235.47 720.836,233.219 721.404,232.011 721.972,231.102 722.541,232.205 723.109,230.959 723.677,230.174 724.246,228.4 724.814,226.606 725.382,229.31 725.951,230.396 726.519,231.754 727.087,232.962 727.656,233.055 728.224,231.15 728.792,232.324 729.361,233.143 729.929,233.1 730.497,235.029 731.066,234.894 731.634,232.736 732.203,231.674 732.771,231.843 733.339,231.901 733.908,232.063 734.476,230.936 735.044,231.799 735.613,230.784 736.181,230.85 736.749,232.189 737.318,232.166 737.886,232.057 738.454,231.191 739.023,231.118 739.591,232.386 740.159,233.557 740.728,230.308 741.296,230.551 741.864,230.636 742.433,231.888 743.001,232.051 743.569,231.017 744.138,230.065 744.706,230.314 745.274,231.441 745.843,230.522 746.411,232.698 746.98,230.565 747.548,230.587 748.116,231.754 748.685,230.866 749.253,231.049 749.821,231.264 750.39,231.157 750.958,227.981 751.526,227.266 752.095,226.609 752.663,227.01 753.231,227.543 753.8,228.918 754.368,229.159 754.936,228.6 755.505,230.124 756.073,229.209 756.641,228.508 757.21,227.762 757.778,228.179 758.346,229.754 758.915,231.033 759.483,231.18 760.052,232.109 760.62,231.275 761.188,232.372 761.757,232.418 762.325,231.467 762.893,231.414 763.462,231.68 764.03,233.852 764.598,233.835 765.167,232.71 765.735,232.696 766.303,231.549 766.872,231.625 767.44,231.895 768.008,233.036 768.577,233.963 769.145,233.811 769.713,232.849 770.282,233.665 770.85,232.657 771.418,232.837 771.987,232.607 772.555,233.613 773.123,233.712 773.692,233.657 774.26,232.5 774.829,232.616 775.397,231.528 775.965,231.684 776.534,230.662 777.102,231.665 777.67,230.708 778.239,231.877 778.807,228.699 779.375,229.12 779.944,230.402 780.512,230.606 781.08,229.676 781.649,229.889 782.217,231.033 782.785,232.3 783.354,232.285 783.922,231.432 784.49,232.682 785.059,231.956 785.627,231.97 786.195,231.869 786.764,227.771 787.332,228.152 787.9,229.484 788.469,228.621 789.037,229.773 789.606,230.836 790.174,231.086 790.742,234.065 791.311,233.076 791.879,235.185 792.447,233.959 793.016,235.954 793.584,234.657 794.152,232.299 794.721,231.422 795.289,230.399 795.857,229.687 796.426,228.857 796.994,228.888 797.562,229.22 798.131,229.51 798.699,228.561 799.267,227.764 799.836,227.136 800.404,227.757 800.972,228.001 801.541,227.496 802.109,223.874 802.678,223.549 803.246,226.192 803.814,227.94 804.383,228.27 804.951,230.687 805.519,233.99 806.088,234.898 806.656,235.917 807.224,234.743 807.793,235.821 808.361,235.518 808.929,235.437 809.498,233.388 810.066,232.245 810.634,232.282 811.203,233.3 811.771,232.232 812.339,238.399 812.908,236.79 813.476,236.433 814.044,236.104 814.613,235.966 815.181,233.716 815.749,232.695 816.318,233.753 816.886,230.696 817.455,229.661 818.023,226.867 818.591,228.398 819.16,227.743 819.728,227.868 820.296,228.149 820.865,228.324 821.433,230.534 822.001,228.475 822.57,228.804 823.138,225.992 823.706,228.34 824.275,228.709 824.843,229.961 825.411,230.185 825.98,229.445 826.548,229.488 827.116,229.554 827.685,231.851 828.253,233.926 828.821,234.891 829.39,235.886 829.958,236.805 830.526,237.408 831.095,236.039 831.663,232.541 832.232,232.526 832.8,232.021 833.368,230.946 833.937,229.923 834.505,231.088 835.073,230.105 835.642,231.203 836.21,231.227 836.778,232.236 837.347,234.124 837.915,233.857 838.483,235.854 839.052,236.586 839.62,236.084 840.188,237.483 840.757,236.896 841.325,235.401 841.893,236.096 842.462,236.878 843.03,235.445 843.598,236.135 844.167,235.805 844.735,234.251 845.304,232.656 845.872,232.583 846.44,232.393 847.009,233.586 847.577,233.442 848.145,232.114 848.714,233.845 849.282,235.7 849.85,236.399 850.419,237.16 850.987,235.822 851.555,235.305 852.124,234.886 852.692,234.43 853.26,234.075 853.829,232.559 854.397,233.384 854.965,233.265 855.534,229.105 856.102,231 856.67,230.745 857.239,228.572 857.807,229.932 858.375,232.031 858.944,229.606 859.512,228.627 860.081,226.466 860.649,227.712 861.217,226.938 861.786,227.284 862.354,227.58 862.922,228.876 863.491,226.797 864.059,227.077 864.627,228.333 865.196,227.468 865.764,228.594 866.332,231.005 866.901,230.85 867.469,230.723 868.037,231.743 868.606,232.615 869.174,232.513 869.742,230.432 870.311,229.068 870.879,230.092 871.447,230.985 872.016,227.683 872.584,227.949 873.152,228.069 873.721,226.969 874.289,227.235 874.858,227.5 875.426,226.914 875.994,226.148 876.563,228.183 877.131,230.583 877.699,230.584 878.268,231.46 878.836,232.43 879.404,231.417 879.973,231.463 880.541,232.461 881.109,233.495 881.678,233.33 882.246,235.141 882.814,234.842 883.383,234.572 883.951,233.233 884.519,232.868 885.088,231.574 885.656,229.537 886.224,231.498 886.793,232.393 887.361,231.238 887.93,232.202 888.498,231.938 889.066,229.768 889.635,228.773 890.203,229.976 890.771,229.805 891.34,228.759 891.908,231.063 892.476,232.144 893.045,230.068 893.613,228.984 894.181,229.16 894.75,229.272 895.318,229.201 895.886,229.371 896.455,229.519 897.023,228.548 897.591,227.748 898.16,228.924 898.728,227.066 899.296,227.393 899.865,225.382 900.433,225.906 901.001,228.384 901.57,229.517 902.138,227.476 902.707,229.764 903.275,228.908 903.843,231.073 904.412,227.996 904.98,226.177 905.548,226.511 906.117,225.562 906.685,226.055 907.253,226.519 907.822,226.781 908.39,227.086 908.958,226.431 909.527,226.761 910.095,227.144 910.663,227.427 911.232,226.765 911.8,227.981 912.368,230.332 912.937,230.635 913.505,230.621 914.073,231.781 914.642,230.837 915.21,232.068 915.779,233.186 916.347,231.035 916.915,231.154 917.484,231.072 918.052,231.048 918.62,232.032 919.189,234.129 919.757,231.838 920.325,231.802 920.894,231.816 921.462,231.674 922.03,230.643 922.599,230.552 923.167,231.414 923.735,233.516 924.304,232.391 924.872,231.483 925.44,228.294 926.009,225.307 926.577,224.815 927.145,223.074 927.714,223.965 928.282,223.458 928.85,224.088 929.419,224.726 929.987,225.424 930.556,225.84 931.124,227.34 931.692,227.596 932.261,226.909 932.829,227.025 933.397,225.416 933.966,226.978 934.534,227.241 935.102,228.677 935.671,228.937 936.239,233.333 936.807,234.334 937.376,233.263 937.944,232.055 938.512,233.07 939.081,233.148 939.649,230.128 940.217,229.992 940.786,231.122 941.354,231.184 941.922,235.513 942.491,236.572 943.059,236.251 943.627,238.148 944.196,236.751 944.764,238.422 945.333,236.967 945.901,237.523 946.469,233.014 947.038,233.121 947.606,231.919 948.174,230.663 948.743,231.605 949.311,230.656 949.879,230.8 950.448,233.019 951.016,231.653 951.584,234.899 952.153,235.407 952.721,233.916 953.289,234.768 953.858,234.564 954.426,235.374 954.994,235.259 955.563,232.921 956.131,232.806 956.699,233.672 957.268,235.63 957.836,233.2 958.405,231.886 958.973,232.954 959.541,234.749 960.11,233.319 960.678,234.238 961.246,234.045 961.815,232.586 962.383,232.418 962.951,233.403 963.52,233.212 964.088,234.985 964.656,235.511 965.225,236.185 965.793,235.773 966.361,238.42 966.93,235.603 967.498,235.976 968.066,235.417 968.635,237.066 969.203,234.581 969.771,236.053 970.34,235.666 970.908,235.125 971.476,233.698 972.045,233.044 972.613,230.589 973.182,228.347 973.75,228.403 974.318,228.514 974.887,229.373 975.455,229.495 976.023,227.284 976.592,228.32 977.16,226.467 977.728,226.852 978.297,226.881 978.865,226.895 979.433,226.198 980.002,224.498 980.57,224.877 981.138,224.162 981.707,224.453 982.275,226.853 982.843,228.326 983.412,226.291 983.98,227.464 984.548,226.642 985.117,227.018 985.685,228.388 986.253,227.647 986.822,225.853 987.39,223.088 987.959,223.373 988.527,223.917 989.095,225.552 989.664,223.773 990.232,224.197 990.8,226.792 991.369,226.931 991.937,225.171 992.505,226.73 993.074,229.216 993.642,228.324 994.21,226.676 994.779,224.943 995.347,225.263 995.915,224.748 996.484,227.36 997.052,228.632 997.62,228.912 998.189,229.104 998.757,229.285 999.325,229.31 999.894,231.321 1000.46,231.517 1001.03,231.544 1001.6,230.72 1002.17,230.777 1002.74,229.778 1003.3,232.033 1003.87,232.926 1004.44,233.77 1005.01,234.506 1005.58,231.993 1006.15,232.004 1006.71,233.164 1007.28,233.011 1007.85,231.929 1008.42,232.823 1008.99,232.68 1009.56,232.653 1010.12,232.87 1010.69,232.651 1011.26,230.618 1011.83,231.708 1012.4,231.541 1012.97,233.494 1013.53,234.244 1014.1,233.036 1014.67,231.969 1015.24,229.773 1015.81,230.888 1016.38,233.025 1016.94,230.735 1017.51,232.03 1018.08,233.943 1018.65,233.688 1019.22,233.573 1019.79,231.45 1020.35,232.385 1020.92,232.34 1021.49,232.213 1022.06,231.13 1022.63,231.133 1023.2,231.177 1023.76,229.258 1024.33,231.131 1024.9,229.942 1025.47,230.239 1026.04,231.558 1026.61,232.603 1027.17,234.512 1027.74,234.133 1028.31,232.866 1028.88,233.914 1029.45,233.449 1030.02,233.398 1030.58,233.213 1031.15,235.038 1031.72,237.666 1032.29,238.144 1032.86,238.414 1033.43,237.972 1033.99,235.352 1034.56,234.921 1035.13,233.432 1035.7,232.146 1036.27,231.925 1036.84,232.728 1037.4,232.452 1037.97,233.239 1038.54,232.746 1039.11,234.501 1039.68,233.08 1040.25,231.821 1040.81,230.348 1041.38,230.269 1041.95,229.166 1042.52,230.151 1043.09,229.962 1043.66,228.951 1044.22,229.812 1044.79,229.863 1045.36,228.706 1045.93,227.575 1046.5,230.467 1047.07,229.221 1047.63,227.193 1048.2,227.418 1048.77,226.565 1049.34,228.727 1049.91,228.847 1050.48,229.036 1051.05,228.96 1051.61,231.211 1052.18,229.123 1052.75,226.946 1053.32,227.12 1053.89,226.399 1054.46,227.595 1055.02,227.748 1055.59,227.867 1056.16,226.895 1056.73,226.901 1057.3,227.236 1057.87,227.336 1058.43,229.423 1059,230.597 1059.57,227.341 1060.14,227.594 1060.71,228.721 1061.28,231.912 1061.84,230.768 1062.41,228.558 1062.98,228.481 1063.55,228.602 1064.12,227.787 1064.69,232.102 1065.25,230.894 1065.82,231.812 1066.39,230.578 1066.96,230.429 1067.53,228.352 1068.1,226.522 1068.66,227.03 1069.23,225.391 1069.8,225.496 1070.37,226.678 1070.94,227.97 1071.51,226.838 1072.07,226.887 1072.64,228.332 1073.21,227.46 1073.78,226.701 1074.35,225.971 1074.92,226.5 1075.48,226.807 1076.05,226.181 1076.62,224.527 1077.19,225.172 1077.76,225.711 1078.33,227.102 1078.89,229.42 1079.46,229.759 1080.03,228.978 1080.6,229.134 1081.17,233.6 1081.74,233.567 1082.3,233.334 1082.87,231.221 1083.44,234.334 1084.01,232.181 1084.58,230.893 1085.15,231.997 1085.71,231.904 1086.28,231.914 1086.85,229.732 1087.42,229.591 1087.99,228.626 1088.56,227.835 1089.12,229.055 1089.69,230.17 1090.26,231.22 1090.83,233.324 1091.4,231.868 1091.97,232.904 1092.53,234.623 1093.1,235.149 1093.67,236.042 1094.24,236.803 1094.81,236.332 1095.38,237.009 1095.94,235.718 1096.51,237.46 1097.08,235.841 1097.65,235.588 1098.22,234.106 1098.79,234.932 1099.35,235.539 1099.92,236.137 1100.49,235.569 1101.06,236.188 1101.63,235.918 1102.2,238.336 1102.76,237.82 1103.33,238.011 1103.9,237.309 1104.47,238.717 1105.04,238.04 1105.61,234.975 1106.17,237.673 1106.74,236.229 1107.31,234.386 1107.88,235.014 1108.45,234.508 1109.02,231.898 1109.58,232.77 1110.15,232.529 1110.72,231.152 1111.29,228.935 1111.86,228.113 1112.43,228.12 1112.99,227.003 1113.56,226.015 1114.13,225.143 1114.7,225.347 1115.27,225.66 1115.84,224.15 1116.4,225.664 1116.97,224.989 1117.54,224.462 1118.11,223.987 1118.68,224.277 1119.25,226.702 1119.81,228.911 1120.38,228.817 1120.95,228.776 1121.52,229.02 1122.09,225.799 1122.66,228.137 1123.23,228.347 1123.79,225.59 1124.36,225.001 1124.93,226.361 1125.5,226.593 1126.07,225.703 1126.64,226.87 1127.2,228.201 1127.77,229.385 1128.34,228.589 1128.91,231.712 1129.48,230.521 1130.05,230.512 1130.61,230.428 1131.18,229.472 1131.75,228.564 1132.32,229.548 1132.89,228.637 1133.46,227.685 1134.02,228.949 1134.59,228.972 1135.16,228.924 1135.73,231.904 1136.3,228.723 1136.87,229.935 1137.43,229.155 1138,230.351 1138.57,230.219 1139.14,232.275 1139.71,233.211 1140.28,234.129 1140.84,232.821 1141.41,235.592 1141.98,236.298 1142.55,234.84 1143.12,235.543 1143.69,234.255 1144.25,233.074 1144.82,232.694 1145.39,233.528 1145.96,233.249 1146.53,233.263 1147.1,234.04 1147.66,234.611 1148.23,233.385 1148.8,234.261 1149.37,233.962 1149.94,231.462 1150.51,232.058 1151.07,230.977 1151.64,230.645 1152.21,228.48 1152.78,228.48 1153.35,231.728 1153.92,230.674 1154.48,230.492 1155.05,229.309 1155.62,229.057 1156.19,230.152 1156.76,229.177 1157.33,227.096 1157.89,226.006 1158.46,227.033 1159.03,227.234 1159.6,228.653 1160.17,226.647 1160.74,227.782 1161.3,228.933 1161.87,229.097 1162.44,229.17 1163.01,228.194 1163.58,229.263 1164.15,228.299 1164.71,225.183 1165.28,226.454 1165.85,225.626 1166.42,225.9 1166.99,224.016 1167.56,224.529 1168.12,224.612 1168.69,226.048 1169.26,226.228 1169.83,227.554 1170.4,230.976 1170.97,229.927 1171.53,229.988 1172.1,229.104 1172.67,229.438 1173.24,229.483 1173.81,228.48 1174.38,229.678 1174.94,230.883 1175.51,231.922 1176.08,232.957 1176.65,230.914 1177.22,230.913 1177.79,229.579 1178.35,229.612 1178.92,228.735 1179.49,226.608 1180.06,228.968 1180.63,231.256 1181.2,229.246 1181.76,230.237 1182.33,230.334 1182.9,231.741 1183.47,230.696 1184.04,233.839 1184.61,234.641 1185.17,233.427 1185.74,232.202 1186.31,230.292 1186.88,230.13 1187.45,230.015 1188.02,229.951 1188.58,228.829 1189.15,229.744 1189.72,228.737 1190.29,228.874 1190.86,228.907 1191.43,228.895 1192,227.925 1192.56,227.033 1193.13,227.06 1193.7,227.285 1194.27,228.486 1194.84,230.905 1195.41,230.065 1195.97,229.053 1196.54,229.097 1197.11,229.273 1197.68,230.219 1198.25,228.12 1198.82,231.343 1199.38,231.2 1199.95,231.417 1200.52,231.479 1201.09,231.652 1201.66,230.603 1202.23,231.725 1202.79,231.74 1203.36,230.677 1203.93,230.663 1204.5,230.618 1205.07,231.697 1205.64,230.792 1206.2,231.813 1206.77,230.744 1207.34,228.42 1207.91,227.557 1208.48,226.819 1209.05,228.346 1209.61,226.505 1210.18,226.85 1210.75,225.288 1211.32,224.473 1211.89,223.892 1212.46,224.517 1213.02,224.745 1213.59,226.254 1214.16,228.775 1214.73,227.943 1215.3,230.285 1215.87,232.504 1216.43,234.491 1217,235.354 1217.57,236.092 1218.14,236.821 1218.71,234.374 1219.28,233.25 1219.84,233.339 1220.41,232.172 1220.98,234.114 1221.55,233.74 1222.12,232.368 1222.69,231.286 1223.25,230.3 1223.82,230.16 1224.39,230.39 1224.96,233.527 1225.53,232.341 1226.1,231.119 1226.66,232.193 1227.23,233.033 1227.8,231.052 1228.37,229.912 1228.94,232.161 1229.51,232.092 1230.07,231.901 1230.64,232.881 1231.21,233.664 1231.78,233.479 1232.35,233.134 1232.92,233.04 1233.48,231.886 1234.05,230.832 1234.62,231.67 1235.19,231.577 1235.76,232.349 1236.33,233.232 1236.89,235.191 1237.46,234.787 1238.03,234.447 1238.6,232.189 1239.17,232.059 1239.74,230.69 1240.3,227.58 1240.87,227.724 1241.44,226.845 1242.01,223.847 1242.58,224.332 1243.15,224.452 1243.71,223.964 1244.28,225.544 1244.85,224.938 1245.42,226.43 1245.99,226.618 1246.56,226.973 1247.12,227.387 1247.69,227.53 1248.26,227.829 1248.83,228.053 1249.4,229.101 1249.97,230.228 1250.53,231.079 1251.1,232.091 1251.67,230.947 1252.24,227.895 1252.81,228.288 1253.38,227.339 1253.94,227.618 1254.51,227.797 1255.08,228.002 1255.65,228.084 1256.22,229.566 1256.79,229.494 1257.35,230.479 1257.92,231.647 1258.49,230.449 1259.06,230.396 1259.63,228.342 1260.2,226.538 1260.76,227.767 1261.33,229.053 1261.9,229.273 1262.47,231.287 1263.04,231.453 1263.61,230.438 1264.18,228.424 1264.74,229.751 1265.31,228.822 1265.88,230.994 1266.45,232.123 1267.02,227.962 1267.59,226.837 1268.15,228.029 1268.72,228.274 1269.29,228.388 1269.86,228.648 1270.43,232.049 1271,233.907 1271.56,233.902 1272.13,232.671 1272.7,233.529 1273.27,232.38 1273.84,232.237 1274.41,233.094 1274.97,232.938 1275.54,232.865 1276.11,232.822 1276.68,234.792 1277.25,233.546 1277.82,233.492 1278.38,233.375 1278.95,233.063 1279.52,234.093 1280.09,232.681 1280.66,231.509 1281.23,233.302 1281.79,232.017 1282.36,231.893 1282.93,231.836 1283.5,231.848 1284.07,231.542 1284.64,230.234 1285.2,230.303 1285.77,229.34 1286.34,229.418 1286.91,229.923 1287.48,229.95 1288.05,228.829 1288.61,226.868 1289.18,226.928 1289.75,227.06 1290.32,227.336 1290.89,227.562 1291.46,227.655 1292.02,228.743 1292.59,230.067 1293.16,230.918 1293.73,232.851 1294.3,234.704 1294.87,234.312 1295.43,234.261 1296,232.051 1296.57,232.831 1297.14,232.471 1297.71,237.335 1298.28,239.069 1298.84,240.536 1299.41,240.701 1299.98,240.994 1300.55,238.315 1301.12,236.518 1301.69,233.026 1302.25,233.667 1302.82,233.395 1303.39,233.083 1303.96,230.7 1304.53,230.478 1305.1,230.518 1305.66,230.349 1306.23,231.166 1306.8,230.74 1307.37,231.636 1307.94,231.461 1308.51,232.195 1309.07,232.072 1309.64,228.9 1310.21,228.795 1310.78,227.643 1311.35,226.612 1311.92,226.833 1312.48,224.971 1313.05,225.277 1313.62,225.691 1314.19,223.966 1314.76,224.299 1315.33,224.792 1315.89,225.138 1316.46,228.655 1317.03,226.785 1317.6,223.951 1318.17,224.53 1318.74,224.024 1319.3,224.373 1319.87,224.888 1320.44,225.363 1321.01,227.765 1321.58,230.212 1322.15,233.233 1322.71,233.201 1323.28,235.048 1323.85,235.805 1324.42,235.282 1324.99,235.842 1325.56,234.288 1326.12,233.084 1326.69,231.964 1327.26,230.652 1327.83,231.739 1328.4,232.409 1328.97,232.388 1329.53,232.072 1330.1,232.86 1330.67,230.533 1331.24,228.481 1331.81,226.256 1332.38,227.684 1332.94,231.916 1333.51,230.638 1334.08,231.745 1334.65,232.545 1335.22,229.324 1335.79,229.311 1336.36,228.342 1336.92,227.468 1337.49,228.812 1338.06,227.819 1338.63,227.717 1339.2,227.762 1339.77,225.893 1340.33,225.086 1340.9,226.57 1341.47,226.943 1342.04,228.404 1342.61,227.378 1343.18,227.605 1343.74,224.805 1344.31,227.44 1344.88,227.554 1345.45,229.689 1346.02,231.888 1346.59,230.667 1347.15,230.748 1347.72,227.792 1348.29,230.321 1348.86,230.277 1349.43,227.336 1350,228.693 1350.56,228.958 1351.13,228.935 1351.7,228.152 1352.27,231.423 1352.84,229.299 1353.41,230.582 1353.97,231.781 1354.54,231.592 1355.11,230.622 1355.68,228.495 1356.25,229.983 1356.82,230.146 1357.38,230.324 1357.95,231.174 1358.52,229.939 1359.09,228.956 1359.66,229.962 1360.23,230.921 1360.79,228.977 1361.36,230.024 1361.93,231.961 1362.5,230.841 1363.07,231.916 1363.64,230.857 1364.2,229.895 1364.77,232.155 1365.34,230.007 1365.91,228.939 1366.48,231.007 1367.05,229.892 1367.61,229.992 1368.18,225.071 1368.75,225.71 1369.32,228.132 1369.89,231.256 1370.46,231.382 1371.02,230.356 1371.59,230.349 1372.16,230.249 1372.73,231.18 1373.3,230.276 1373.87,229.289 1374.43,228.429 1375,226.622 1375.57,226.85 1376.14,229.179 1376.71,230.202 1377.28,228.179 1377.84,228.502 1378.41,230.741 1378.98,230.72 1379.55,232.651 1380.12,230.47 1380.69,231.588 1381.25,232.512 1381.82,233.258 1382.39,233.139 1382.96,234.025 1383.53,233.768 1384.1,232.599 1384.66,234.697 1385.23,232.378 1385.8,232.282 1386.37,230.095 1386.94,228.228 1387.51,231.611 1388.07,233.541 1388.64,233.504 1389.21,235.3 1389.78,232.654 1390.35,231.438 1390.92,231.316 1391.48,232.172 1392.05,234.05 1392.62,234.048 1393.19,234.87 1393.76,237.548 1394.33,238.111 1394.89,235.504 1395.46,236.209 1396.03,236.772 1396.6,236.303 1397.17,236.721 1397.74,235.111 1398.3,233.665 1398.87,232.381 1399.44,233.178 1400.01,228.642 1400.58,228.543 1401.15,227.667 1401.71,229.749 1402.28,228.837 1402.85,230.134 1403.42,227.931 1403.99,229.138 1404.56,228.142 1405.13,227.221 1405.69,229.497 1406.26,230.629 1406.83,229.589 1407.4,230.35 1407.97,230.261 1408.54,230.297 1409.1,230.344 1409.67,232.251 1410.24,232.895 1410.81,232.463 1411.38,234.416 1411.95,233.024 1412.51,232.725 1413.08,233.504 1413.65,233.24 1414.22,231.916 1414.79,231.747 1415.36,230.567 1415.92,228.479 1416.49,225.475 1417.06,226.799 1417.63,226.121 1418.2,225.084 1418.77,226.26 1419.33,226.594 1419.9,223.604 1420.47,223.926 1421.04,222.419 1421.61,220.645 1422.18,223.315 1422.74,220.688 1423.31,220.377 1423.88,220.029 1424.45,222.745 1425.02,225.382 1425.59,226.782 1426.15,221.96 1426.72,222.825 1427.29,223.452 1427.86,227.171 1428.43,227.638 1429,228.054 1429.56,228.239 1430.13,230.337 1430.7,230.242 1431.27,232.26 1431.84,232.045 1432.41,230.88 1432.97,231.785 1433.54,230.012 1434.11,229.161 1434.68,230.275 1435.25,229.52 1435.82,230.738 1436.38,231.817 1436.95,231.838 1437.52,232.082 1438.09,232.182 1438.66,232.296 1439.23,232.229 1439.79,232.105 1440.36,234.036 1440.93,234.761 1441.5,236.557 1442.07,237.283 1442.64,240.058 1443.2,240.31 1443.77,239.685 1444.34,236.799 1444.91,236.26 1445.48,234.618 1446.05,235.163 1446.61,233.824 1447.18,233.584 1447.75,233.321 1448.32,233.333 1448.89,233.215 1449.46,234.017 1450.02,233.7 1450.59,233.249 1451.16,233.002 1451.73,233.12 1452.3,233.857 1452.87,232.565 1453.43,232.346 1454,232.23 1454.57,233.178 1455.14,231.947 1455.71,232.931 1456.28,231.849 1456.84,232.605 1457.41,233.336 1457.98,233.109 1458.55,232.166 1459.12,232.753 1459.69,231.459 1460.25,233.246 1460.82,233.201 1461.39,233.039 1461.96,233.775 1462.53,232.416 1463.1,232.057 1463.66,231.917 1464.23,231.518 1464.8,231.258 1465.37,232.107 1465.94,231.799 1466.51,231.637 1467.07,232.254 1467.64,233.001 1468.21,232.847 1468.78,234.544 1469.35,233.965 1469.92,231.811 1470.48,230.478 1471.05,229.297 1471.62,229.349 1472.19,229.214 1472.76,228.153 1473.33,229.244 1473.89,229.309 1474.46,229.391 1475.03,228.445 1475.6,227.329 1476.17,227.522 1476.74,225.802 1477.31,225.784 1477.87,229.089 1478.44,228.922 1479.01,226.782 1479.58,226.107 1480.15,227.145 1480.72,228.403 1481.28,229.401 1481.85,229.355 1482.42,230.337 1482.99,229.184 1483.56,229.264 1484.13,228.317 1484.69,227.386 1485.26,228.624 1485.83,227.786 1486.4,228.081 1486.97,227.08 1487.54,227.054 1488.1,228.276 1488.67,228.479 1489.24,229.561 1489.81,229.542 1490.38,230.425 1490.95,231.526 1491.51,231.342 1492.08,229.262 1492.65,228.34 1493.22,229.654 1493.79,229.646 1494.36,231.69 1494.92,235.718 1495.49,235.443 1496.06,233.863 1496.63,231.316 1497.2,229.172 1497.77,227.834 1498.33,226.86 1498.9,225.935 1499.47,227.078 1500.04,224.348 1500.61,224.853 1501.18,223.09 1501.74,222.485 1502.31,221.863 1502.88,225.362 1503.45,226.559 1504.02,221.467 1504.59,219.939 1505.15,220.864 1505.72,224.576 1506.29,225.932 1506.86,226.088 1507.43,224.293 1508,226.913 1508.56,227.054 1509.13,226.284 1509.7,227.826 1510.27,228.167 1510.84,230.377 1511.41,225.253 1511.97,227.711 1512.54,226.71 1513.11,226.107 1513.68,224.223 1514.25,227.677 1514.82,228.969 1515.38,228.746 1515.95,227.846 1516.52,227.125 1517.09,228.46 1517.66,229.934 1518.23,229.927 1518.79,229.855 1519.36,229.92 1519.93,229.169 1520.5,230.449 1521.07,232.588 1521.64,233.506 1522.2,234.394 1522.77,233.082 1523.34,236.142 1523.91,235.902 1524.48,235.555 1525.05,237.138 1525.61,237.657 1526.18,236.188 1526.75,236.903 1527.32,236.328 1527.89,233.955 1528.46,235.921 1529.02,235.424 1529.59,234.931 1530.16,234.597 1530.73,232.173 1531.3,231.942 1531.87,231.823 1532.43,231.743 1533,229.339 1533.57,229.618 1534.14,229.856 1534.71,232.052 1535.28,231.954 1535.84,231.84 1536.41,229.78 1536.98,229.813 1537.55,231.853 1538.12,231.583 1538.69,231.604 1539.25,233.754 1539.82,235.438 1540.39,235.941 1540.96,234.596 1541.53,233.21 1542.1,233.774 1542.66,233.618 1543.23,235.436 1543.8,234.893 1544.37,231.275 1544.94,231.047 1545.51,232.098 1546.08,230.988 1546.64,229.826 1547.21,229.749 1547.78,231.681 1548.35,232.33 1548.92,230.958 1549.49,226.914 1550.05,225.093 1550.62,227.478 1551.19,229.663 1551.76,229.567 1552.33,230.545 1552.9,232.405 1553.46,232.379 1554.03,233.312 1554.6,232.969 1555.17,233.707 1555.74,233.176 1556.31,233.145 1556.87,232.15 1557.44,231.072 1558.01,229.959 1558.58,230.924 1559.15,229.964 1559.72,229.697 1560.28,228.675 1560.85,228.747 1561.42,227.665 1561.99,225.686 1562.56,226.039 1563.13,225.246 1563.69,220.354 1564.26,220.191 1564.83,222.138 1565.4,221.739 1565.97,221.468 1566.54,222.034 1567.1,223.7 1567.67,223.086 1568.24,223.623 1568.81,222.996 1569.38,220.241 1569.95,219.895 1570.51,221.939 1571.08,222.591 1571.65,223.029 1572.22,223.646 1572.79,227.395 1573.36,228.666 1573.92,227.112 1574.49,228.675 1575.06,229.866 1575.63,231.116 1576.2,229.962 1576.77,230.413 1577.33,230.608 1577.9,231.841 1578.47,232.914 1579.04,231.812 1579.61,231.917 1580.18,231.941 1580.74,233.101 1581.31,234.149 1581.88,236.064 1582.45,235.837 1583.02,236.648 1583.59,236.197 1584.15,235.686 1584.72,233.45 1585.29,233.381 1585.86,234.984 1586.43,234.626 1587,232.382 1587.56,231.165 1588.13,233.402 1588.7,235.33 1589.27,233.96 1589.84,232.709 1590.41,231.468 1590.97,231.497 1591.54,230.454 1592.11,231.681 1592.68,227.521 1593.25,228.904 1593.82,230.981 1594.38,231.046 1594.95,230.027 1595.52,229.131 1596.09,229.158 1596.66,231.411 1597.23,232.25 1597.79,229.22 1598.36,231.355 1598.93,232.357 1599.5,232.398 1600.07,233.354 1600.64,233.08 1601.2,231.794 1601.77,232.819 1602.34,232.538 1602.91,232.576 1603.48,231.11 1604.05,228.921 1604.61,231.004 1605.18,230.82 1605.75,229.791 1606.32,228.853 1606.89,230.806 1607.46,232.754 1608.02,234.599 1608.59,235.289 1609.16,235.809 1609.73,236.362 1610.3,233.735 1610.87,233.295 1611.43,235.011 1612,235.744 1612.57,235.183 1613.14,233.729 1613.71,233.442 1614.28,230.813 1614.84,229.821 1615.41,228.67 1615.98,228.851 1616.55,228.996 1617.12,228.963 1617.69,228.843 1618.26,229.089 1618.82,231.222 1619.39,230.883 1619.96,230.655 1620.53,231.6 1621.1,231.47 1621.67,232.328 1622.23,235.214 1622.8,235.954 1623.37,232.55 1623.94,233.044 1624.51,234.733 1625.08,234.148 1625.64,235.815 1626.21,234.127 1626.78,233.428 1627.35,232.979 1627.92,234.065 1628.49,233.808 1629.05,230.404 1629.62,228.107 1630.19,226.973 1630.76,227.2 1631.33,228.139 1631.9,228.178 1632.46,229.136 1633.03,228.008 1633.6,228.01 1634.17,226.211 1634.74,225.264 1635.31,226.69 1635.87,225.702 1636.44,224.951 1637.01,228.233 1637.58,228.327 1638.15,227.404 1638.72,226.601 1639.28,225.655 1639.85,226.898 1640.42,227.122 1640.99,228.329 1641.56,229.35 1642.13,229.442 1642.69,228.608 1643.26,227.581 1643.83,224.589 1644.4,224.76 1644.97,225.907 1645.54,225.089 1646.1,224.574 1646.67,227.012 1647.24,228.222 1647.81,228.399 1648.38,228.404 1648.95,228.608 1649.51,228.674 1650.08,228.66 1650.65,230.024 1651.22,230.005 1651.79,229.01 1652.36,229.455 1652.92,228.406 1653.49,227.591 1654.06,227.872 1654.63,229.42 1655.2,229.252 1655.77,229.237 1656.33,231.395 1656.9,231.443 1657.47,232.597 1658.04,231.418 1658.61,228.402 1659.18,227.585 1659.74,228.858 1660.31,225.952 1660.88,226.339 1661.45,227.516 1662.02,227.062 1662.59,227.351 1663.15,228.72 1663.72,228.073 1664.29,230.226 1664.86,231.442 1665.43,231.214 1666,231.015 1666.56,232.029 1667.13,229.997 1667.7,230.082 1668.27,231.171 1668.84,233.007 1669.41,232.772 1669.97,230.429 1670.54,230.239 1671.11,230.276 1671.68,230.519 1672.25,231.579 1672.82,231.664 1673.38,232.617 1673.95,230.399 1674.52,230.53 1675.09,227.404 1675.66,227.462 1676.23,225.686 1676.79,226.014 1677.36,226.448 1677.93,227.88 1678.5,225.842 1679.07,227.258 1679.64,228.471 1680.2,229.855 1680.77,228.736 1681.34,229.904 1681.91,230.869 1682.48,228.679 1683.05,230.964 1683.61,229.821 1684.18,229.9 1684.75,228.876 1685.32,230.247 1685.89,229.297 1686.46,228.711 1687.02,230.118 1687.59,231.211 1688.16,232.4 1688.73,232.222 1689.3,232.188 1689.87,233.179 1690.44,230.056 1691,231.996 1691.57,231.877 1692.14,232.973 1692.71,234.074 1693.28,232.82 1693.85,232.696 1694.41,233.354 1694.98,230.166 1695.55,229.216 1696.12,226.946 1696.69,225.275 1697.26,226.77 1697.82,230.346 1698.39,233.39 1698.96,229.014 1699.53,229.24 1700.1,229.415 1700.67,227.531 1701.23,227.761 1701.8,227.201 1702.37,228.223 1702.94,230.486 1703.51,230.411 1704.08,230.245 1704.64,230.428 1705.21,231.506 1705.78,231.557 1706.35,231.506 1706.92,230.496 1707.49,231.64 1708.05,231.564 1708.62,230.353 1709.19,229.454 1709.76,227.498 1710.33,226.611 1710.9,225.895 1711.46,225.28 1712.03,225.749 1712.6,227.063 1713.17,229.51 1713.74,229.851 1714.31,228.724 1714.87,225.785 1715.44,226.936 1716.01,225.308 1716.58,225.746 1717.15,226.256 1717.72,226.732 1718.28,225.136 1718.85,225.789 1719.42,227.047 1719.99,231.527 1720.56,232.399 1721.13,231.243 1721.69,233.177 1722.26,233.105 1722.83,232.937 1723.4,235.98 1723.97,236.653 1724.54,238.507 1725.1,235.862 1725.67,234.489 1726.24,233.176 1726.81,235.204 1727.38,234.965 1727.95,234.423 1728.51,236.312 1729.08,237.953 1729.65,235.094 1730.22,235.481 1730.79,236.062 1731.36,237.674 1731.92,235.856 1732.49,236.57 1733.06,237.106 1733.63,236.527 1734.2,234.98 1734.77,234.495 1735.33,232.926 1735.9,232.567 1736.47,233.324 1737.04,232.874 1737.61,231.606 1738.18,230.407 1738.74,228.468 1739.31,228.401 1739.88,227.495 1740.45,225.518 1741.02,225.744 1741.59,226.046 1742.15,225.131 1742.72,224.352 1743.29,224.715 1743.86,225.189 1744.43,223.585 1745,225.275 1745.56,226.651 1746.13,223.896 1746.7,225.119 1747.27,227.788 1747.84,227.945 1748.41,231.341 1748.97,230.208 1749.54,231.485 1750.11,229.453 1750.68,229.891 1751.25,231.024 1751.82,228.933 1752.38,227.823 1752.95,229.007 1753.52,228.967 1754.09,230.317 1754.66,231.203 1755.23,234.42 1755.79,235.166 1756.36,234.732 1756.93,236.33 1757.5,235.984 1758.07,235.673 1758.64,234.359 1759.21,233.914 1759.77,231.574 1760.34,231.513 1760.91,229.248 1761.48,228.363 1762.05,229.434 1762.62,232.692 1763.18,233.525 1763.75,232.353 1764.32,231.164 1764.89,231.94 1765.46,231.813 1766.03,232.606 1766.59,232.477 1767.16,233.471 1767.73,235.217 1768.3,233.818 1768.87,233.236 1769.44,229.988 1770,229.071 1770.57,230.141 1771.14,232.037 1771.71,232.023 1772.28,232.877 1772.85,233.528 1773.41,233.151 1773.98,234.831 1774.55,234.472 1775.12,235.151 1775.69,233.665 1776.26,233.284 1776.82,232.928 1777.39,233.688 1777.96,234.611 1778.53,232.045 1779.1,229.935 1779.67,233.117 1780.23,232.737 1780.8,232.378 1781.37,232.146 1781.94,230.977 1782.51,231.854 1783.08,231.743 1783.64,231.737 1784.21,230.393 1784.78,229.186 1785.35,230.379 1785.92,231.15 1786.49,229.908 1787.05,229.647 1787.62,228.417 1788.19,227.329 1788.76,226.316 1789.33,226.378 1789.9,226.465 1790.46,226.547 1791.03,227.044 1791.6,227.435 1792.17,226.669 1792.74,226.819 1793.31,227.014 1793.87,229.423 1794.44,228.493 1795.01,229.733 1795.58,230.863 1796.15,230.724 1796.72,229.389 1797.28,228.498 1797.85,228.529 1798.42,227.453 1798.99,226.652 1799.56,228.022 1800.13,228.407 1800.69,228.632 1801.26,227.705 1801.83,229.062 1802.4,229.336 1802.97,229.666 1803.54,227.629 1804.1,227.896 1804.67,227.184 1805.24,227.444 1805.81,228.576 1806.38,227.518 1806.95,226.654 1807.51,225.149 1808.08,225.421 1808.65,225.545 1809.22,226.723 1809.79,224.697 1810.36,222.793 1810.92,224.496 1811.49,223.78 1812.06,224.211 1812.63,224.668 1813.2,223.342 1813.77,224.887 1814.33,225.147 1814.9,224.577 1815.47,226.145 1816.04,226.467 1816.61,226.558 1817.18,229.085 1817.74,229.414 1818.31,229.529 1818.88,229.523 1819.45,228.704 1820.02,229.829 1820.59,231.07 1821.15,230.243 1821.72,229.03 1822.29,228.182 1822.86,229.424 1823.43,229.647 1824,228.849 1824.56,227.041 1825.13,226.405 1825.7,227.549 1826.27,229.798 1826.84,230.876 1827.41,230.725 1827.97,230.909 1828.54,230.137 1829.11,232.417 1829.68,233.353 1830.25,232.083 1830.82,233.184 1831.39,234.254 1831.95,233.079 1832.52,234.041 1833.09,233.721 1833.66,231.731 1834.23,230.735 1834.8,230.784 1835.36,230.897 1835.93,232.033 1836.5,229.828 1837.07,229.772 1837.64,228.764 1838.21,228.848 1838.77,230.044 1839.34,230.124 1839.91,230.06 1840.48,230.251 1841.05,229.186 1841.62,228.055 1842.18,228.348 1842.75,229.554 1843.32,228.547 1843.89,228.763 1844.46,231.143 1845.03,232.22 1845.59,233.069 1846.16,232.065 1846.73,231.174 1847.3,234.264 1847.87,233.09 1848.44,234.03 1849,233.833 1849.57,234.892 1850.14,232.73 1850.71,235.599 1851.28,234.372 1851.85,239.545 1852.41,240.04 1852.98,239.455 1853.55,237.798 1854.12,235.269 1854.69,232.918 1855.26,232.753 1855.82,231.177 1856.39,231.177 1856.96,230.362 1857.53,230.219 1858.1,230.165 1858.67,231.559 1859.23,230.475 1859.8,232.578 1860.37,234.35 1860.94,235.097 1861.51,233.808 1862.08,233.72 1862.64,235.63 1863.21,235.212 1863.78,235.909 1864.35,235.307 1864.92,234.843 1865.49,234.644 1866.05,235.199 1866.62,236.806 1867.19,235.186 1867.76,235.857 1868.33,233.391 1868.9,233.121 1869.46,233.902 1870.03,232.536 1870.6,233.089 1871.17,233.88 1871.74,232.378 1872.31,234.074 1872.87,233.531 1873.44,231.95 1874.01,232.632 1874.58,229.218 1875.15,229.225 1875.72,228.17 1876.28,228.186 1876.85,228.106 1877.42,228.194 1877.99,227.259 1878.56,227.34 1879.13,228.267 1879.69,228.385 1880.26,227.351 1880.83,226.384 1881.4,226.555 1881.97,228.648 1882.54,227.558 1883.1,225.567 1883.67,224.832 1884.24,226.185 1884.81,226.254 1885.38,227.621 1885.95,226.767 1886.51,228.078 1887.08,229.46 1887.65,228.603 1888.22,227.703 1888.79,227.831 1889.36,229.16 1889.92,229.219 1890.49,229.187 1891.06,230.36 1891.63,230.544 1892.2,229.407 1892.77,228.285 1893.33,228.426 1893.9,229.837 1894.47,229.008 1895.04,227.316 1895.61,229.445 1896.18,230.722 1896.74,230.711 1897.31,229.726 1897.88,229.768 1898.45,229.757 1899.02,227.807 1899.59,227.957 1900.16,229.219 1900.72,230.166 1901.29,231.44 1901.86,230.241 1902.43,231.289 1903,229.232 1903.57,228.153 1904.13,228.071 1904.7,226.98 1905.27,227.152 1905.84,228.452 1906.41,228.585 1906.98,230.868 1907.54,229.744 1908.11,228.58 1908.68,226.508 1909.25,228.77 1909.82,230.103 1910.39,229.163 1910.95,229.377 1911.52,230.61 1912.09,234.81 1912.66,235.28 1913.23,233.826 1913.8,232.647 1914.36,229.114 1914.93,229.113 1915.5,229.145 1916.07,228.205 1916.64,227.228 1917.21,228.391 1917.77,229.525 1918.34,230.772 1918.91,230.781 1919.48,230.696 1920.05,231.727 1920.62,232.896 1921.18,233.879 1921.75,233.562 1922.32,233.189 1922.89,233.922 1923.46,232.707 1924.03,233.591 1924.59,233.286 1925.16,232.08 1925.73,230.827 1926.3,231.834 1926.87,231.723 1927.44,230.511 1928,230.454 1928.57,230.195 1929.14,229.121 1929.71,227.02 1930.28,227.315 1930.85,228.542 1931.41,228.609 1931.98,228.437 1932.55,228.675 1933.12,228.81 1933.69,228.774 1934.26,231.839 1934.82,231.843 1935.39,232.878 1935.96,230.891 1936.53,227.764 1937.1,228.951 1937.67,230 1938.23,230.383 1938.8,230.229 1939.37,232.339 1939.94,231.004 1940.51,230.827 1941.08,230.69 1941.64,231.544 1942.21,231.453 1942.78,231.059 1943.35,231.033 1943.92,230.772 1944.49,229.613 1945.05,230.771 1945.62,231.841 1946.19,232.77 1946.76,230.578 1947.33,229.649 1947.9,228.614 1948.46,227.809 1949.03,227.04 1949.6,227.161 1950.17,227.352 1950.74,227.445 1951.31,228.706 1951.87,228.917 1952.44,229.914 1953.01,228.022 1953.58,225.803 1954.15,226.201 1954.72,227.522 1955.28,226.554 1955.85,225.658 1956.42,225.952 1956.99,228.307 1957.56,229.546 1958.13,230.792 1958.69,230.782 1959.26,230.683 1959.83,231.762 1960.4,232.87 1960.97,235.486 1961.54,236.051 1962.1,234.822 1962.67,234.222 1963.24,233.737 1963.81,233.552 1964.38,233.51 1964.95,232.405 1965.51,230.476 1966.08,231.583 1966.65,232.519 1967.22,232.295 1967.79,233.354 1968.36,234.266 1968.92,233.97 1969.49,234.894 1970.06,235.511 1970.63,234.008 1971.2,232.566 1971.77,232.471 1972.34,232.108 1972.9,228.848 1973.47,230.074 1974.04,231.088 1974.61,231.946 1975.18,232.688 1975.75,231.458 1976.31,231.404 1976.88,232.331 1977.45,231.227 1978.02,230.131 1978.59,229.092 1979.16,230.021 1979.72,229.116 1980.29,228.248 1980.86,227.363 1981.43,223.56 1982,223.086 1982.57,223.817 1983.13,222.99 1983.7,224.447 1984.27,225.726 1984.84,225.959 1985.41,225.233 1985.98,226.797 1986.54,228.093 1987.11,227.393 1987.68,229.604 1988.25,229.488 1988.82,227.537 1989.39,225.748 1989.95,226.117 1990.52,226.652 1991.09,224.806 1991.66,224.298 1992.23,226.737 1992.8,228.033 1993.36,228.987 1993.93,229.1 1994.5,229.16 1995.07,230.294 1995.64,230.441 1996.21,228.417 1996.77,229.502 1997.34,228.688 1997.91,230.884 1998.48,231.321 1999.05,229.296 1999.62,228.419 2000.18,228.849 2000.75,230.221 2001.32,231.185 2001.89,229.132 2002.46,229.173 2003.03,231.427 2003.59,229.457 2004.16,229.54 2004.73,230.735 2005.3,228.763 2005.87,228.957 2006.44,230.069 2007,231.379 2007.57,232.589 2008.14,230.175 2008.71,229.094 2009.28,228.411 2009.85,228.704 2010.41,230.897 2010.98,229.842 2011.55,229.759 2012.12,230.847 2012.69,232.86 2013.26,232.734 2013.82,233.822 2014.39,236.839 2014.96,234.524 2015.53,233.94 2016.1,232.553 2016.67,232.386 2017.23,233.509 2017.8,234.291 2018.37,235.142 2018.94,235.851 2019.51,235.246 2020.08,233.858 2020.64,234.476 2021.21,235.005 2021.78,234.683 2022.35,235.316 2022.92,235.097 2023.49,233.785 2024.05,234.501 2024.62,236.382 2025.19,233.815 2025.76,233.32 2026.33,231.883 2026.9,231.614 2027.46,231.493 2028.03,230.291 2028.6,229.592 2029.17,230.724 2029.74,229.705 2030.31,228.38 2030.87,228.359 2031.44,227.462 2032.01,226.588 2032.58,226.901 2033.15,227.296 2033.72,226.785 2034.28,226.027 2034.85,227.481 2035.42,228.721 2035.99,227.89 2036.56,229.918 2037.13,228.893 2037.69,228.771 2038.26,227.744 2038.83,227.972 2039.4,227.106 2039.97,227.153 2040.54,229.309 2041.11,228.127 2041.67,228.386 2042.24,229.714 2042.81,229.673 2043.38,230.744 2043.95,232.825 2044.52,232.748 2045.08,231.599 2045.65,231.228 2046.22,230.214 2046.79,230.223 2047.36,230.263 2047.93,230.217 2048.49,231.215 2049.06,231.145 2049.63,234.272 2050.2,233.91 2050.77,232.615 2051.34,230.317 2051.9,230.385 2052.47,229.235 2053.04,229.089 2053.61,230.162 2054.18,230.009 2054.75,231.176 2055.31,227.673 2055.88,229.79 2056.45,230.869 2057.02,231.77 2057.59,231.805 2058.16,230.581 2058.72,228.395 2059.29,227.442 2059.86,225.45 2060.43,225.579 2061,225.998 2061.57,226.126 2062.13,226.385 2062.7,228.93 2063.27,229.128 2063.84,229.189 2064.41,230.139 2064.98,229.159 2065.54,229.037 2066.11,229.166 2066.68,230.382 2067.25,230.356 2067.82,233.44 2068.39,234.419 2068.95,232.118 2069.52,233.761 2070.09,233.588 2070.66,230.33 2071.23,228.34 2071.8,227.472 2072.36,227.542 2072.93,229.914 2073.5,229.899 2074.07,227.584 2074.64,227.718 2075.21,226.817 2075.77,226.875 2076.34,224.912 2076.91,226.177 2077.48,225.481 2078.05,227.058 2078.62,226.439 2079.18,225.701 2079.75,225.17 2080.32,224.747 2080.89,224.249 2081.46,224.824 2082.03,224.22 2082.59,225.873 2083.16,225.395 2083.73,226.797 2084.3,227.001 2084.87,226.28 2085.44,226.538 2086,229.955 2086.57,231.006 2087.14,232.026 2087.71,230.774 2088.28,230.785 2088.85,230.96 2089.41,232.158 2089.98,234.166 2090.55,233.784 2091.12,233.539 2091.69,232.469 2092.26,231.624 2092.82,232.817 2093.39,231.737 2093.96,234.727 2094.53,234.506 2095.1,234.32 2095.67,233.98 2096.23,231.97 2096.8,231.887 2097.37,231.908 2097.94,228.827 2098.51,229.006 2099.08,233.133 2099.64,232.947 2100.21,231.664 2100.78,231.52 2101.35,230.597 2101.92,229.636 2102.49,229.812 2103.05,232.153 2103.62,230.206 2104.19,230.151 2104.76,229.134 2105.33,228.39 2105.9,227.691 2106.46,229.961 2107.03,229.135 2107.6,228.551 2108.17,230.621 2108.74,230.148 2109.31,232.067 2109.87,231.015 2110.44,231.24 2111.01,232.006 2111.58,233.227 2112.15,234.982 2112.72,232.66 2113.29,232.589 2113.85,232.55 2114.42,231.492 2114.99,235.8 2115.56,236.541 2116.13,237.199 2116.7,235.529 2117.26,233.939 2117.83,234.72 2118.4,234.226 2118.97,234.025 2119.54,234.873 2120.11,234.454 2120.67,234.962 2121.24,232.582 2121.81,230.096 2122.38,230.999 2122.95,230.926 2123.52,230.076 2124.08,230.041 2124.65,228.827 2125.22,229.984 2125.79,230.797 2126.36,231.893 2126.93,231.687 2127.49,231.469 2128.06,229.306 2128.63,230.162 2129.2,229.965 2129.77,230.024 2130.34,230.065 2130.9,229.182 2131.47,230.315 2132.04,230.259 2132.61,230.236 2133.18,229.143 2133.75,228.206 2134.31,224.422 2134.88,225.934 2135.45,224.121 2136.02,227.783 2136.59,225.775 2137.16,229.353 2137.72,228.191 2138.29,228.415 2138.86,228.84 2139.43,228.74 2140,227.727 2140.57,227.795 2141.13,228.789 2141.7,231.93 2142.27,233.822 2142.84,234.534 2143.41,234.049 2143.98,231.936 2144.54,232.772 2145.11,233.636 2145.68,235.299 2146.25,235.879 2146.82,234.413 2147.39,235.195 2147.95,236.008 2148.52,236.634 2149.09,236.181 2149.66,233.871 2150.23,234.484 2150.8,233.271 2151.36,232.974 2151.93,233.535 2152.5,233.026 2153.07,232.565 2153.64,232.295 2154.21,231.141 2154.77,231.976 2155.34,231.768 2155.91,233.559 2156.48,233.24 2157.05,233.914 2157.62,234.701 2158.18,234.349 2158.75,232.905 2159.32,232.7 2159.89,232.687 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.02 ± 0.02\n  with uncertainty of ± 0.0018379040998827614\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01678 ± (0.00180277, 0.00189547) (MC)\n  95% confidence interval: [-4.02043, -4.01296] (MC)\n  linear error propagation: -4.0169 ± 0.00187278\n  |δ_y| = |0.00113972| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016775642690138, val_l = 0.003655327509648032, val_u = 0.0038153078528386786)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip790\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip791\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip792\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.49 2211.02,1142.49 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,966.535 2211.02,966.535 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,790.583 2211.02,790.583 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,614.632 2211.02,614.632 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,438.681 2211.02,438.681 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,262.729 2211.02,262.729 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.49 365.751,1142.49 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,966.535 365.751,966.535 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,790.583 365.751,790.583 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,614.632 365.751,614.632 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,438.681 365.751,438.681 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,262.729 365.751,262.729 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M298.909 1128.28 Q295.298 1128.28 293.469 1131.85 Q291.664 1135.39 291.664 1142.52 Q291.664 1149.63 293.469 1153.19 Q295.298 1156.73 298.909 1156.73 Q302.543 1156.73 304.349 1153.19 Q306.177 1149.63 306.177 1142.52 Q306.177 1135.39 304.349 1131.85 Q302.543 1128.28 298.909 1128.28 M298.909 1124.58 Q304.719 1124.58 307.775 1129.19 Q310.853 1133.77 310.853 1142.52 Q310.853 1151.25 307.775 1155.85 Q304.719 1160.44 298.909 1160.44 Q293.099 1160.44 290.02 1155.85 Q286.964 1151.25 286.964 1142.52 Q286.964 1133.77 290.02 1129.19 Q293.099 1124.58 298.909 1124.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M259.557 979.88 L267.196 979.88 L267.196 953.514 L258.886 955.181 L258.886 950.921 L267.15 949.255 L271.826 949.255 L271.826 979.88 L279.465 979.88 L279.465 983.815 L259.557 983.815 L259.557 979.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 952.333 Q295.298 952.333 293.469 955.898 Q291.664 959.44 291.664 966.569 Q291.664 973.676 293.469 977.241 Q295.298 980.782 298.909 980.782 Q302.543 980.782 304.349 977.241 Q306.177 973.676 306.177 966.569 Q306.177 959.44 304.349 955.898 Q302.543 952.333 298.909 952.333 M298.909 948.63 Q304.719 948.63 307.775 953.236 Q310.853 957.82 310.853 966.569 Q310.853 975.296 307.775 979.903 Q304.719 984.486 298.909 984.486 Q293.099 984.486 290.02 979.903 Q286.964 975.296 286.964 966.569 Q286.964 957.82 290.02 953.236 Q293.099 948.63 298.909 948.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M262.775 803.928 L279.094 803.928 L279.094 807.863 L257.15 807.863 L257.15 803.928 Q259.812 801.174 264.395 796.544 Q269.002 791.891 270.182 790.549 Q272.428 788.026 273.307 786.289 Q274.21 784.53 274.21 782.84 Q274.21 780.086 272.266 778.35 Q270.344 776.614 267.242 776.614 Q265.043 776.614 262.59 777.377 Q260.159 778.141 257.381 779.692 L257.381 774.97 Q260.205 773.836 262.659 773.257 Q265.113 772.678 267.15 772.678 Q272.52 772.678 275.715 775.364 Q278.909 778.049 278.909 782.539 Q278.909 784.669 278.099 786.59 Q277.312 788.488 275.205 791.081 Q274.627 791.752 271.525 794.97 Q268.423 798.164 262.775 803.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 776.382 Q295.298 776.382 293.469 779.947 Q291.664 783.488 291.664 790.618 Q291.664 797.725 293.469 801.289 Q295.298 804.831 298.909 804.831 Q302.543 804.831 304.349 801.289 Q306.177 797.725 306.177 790.618 Q306.177 783.488 304.349 779.947 Q302.543 776.382 298.909 776.382 M298.909 772.678 Q304.719 772.678 307.775 777.285 Q310.853 781.868 310.853 790.618 Q310.853 799.345 307.775 803.951 Q304.719 808.535 298.909 808.535 Q293.099 808.535 290.02 803.951 Q286.964 799.345 286.964 790.618 Q286.964 781.868 290.02 777.285 Q293.099 772.678 298.909 772.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M272.914 613.278 Q276.27 613.995 278.145 616.264 Q280.043 618.532 280.043 621.866 Q280.043 626.981 276.525 629.782 Q273.006 632.583 266.525 632.583 Q264.349 632.583 262.034 632.143 Q259.742 631.727 257.289 630.87 L257.289 626.356 Q259.233 627.491 261.548 628.069 Q263.863 628.648 266.386 628.648 Q270.784 628.648 273.076 626.912 Q275.39 625.176 275.39 621.866 Q275.39 618.81 273.238 617.097 Q271.108 615.361 267.289 615.361 L263.261 615.361 L263.261 611.519 L267.474 611.519 Q270.923 611.519 272.752 610.153 Q274.58 608.764 274.58 606.171 Q274.58 603.509 272.682 602.097 Q270.807 600.662 267.289 600.662 Q265.367 600.662 263.168 601.079 Q260.969 601.495 258.33 602.375 L258.33 598.208 Q260.992 597.468 263.307 597.097 Q265.645 596.727 267.705 596.727 Q273.029 596.727 276.131 599.158 Q279.233 601.565 279.233 605.685 Q279.233 608.556 277.59 610.546 Q275.946 612.514 272.914 613.278 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 600.431 Q295.298 600.431 293.469 603.995 Q291.664 607.537 291.664 614.667 Q291.664 621.773 293.469 625.338 Q295.298 628.88 298.909 628.88 Q302.543 628.88 304.349 625.338 Q306.177 621.773 306.177 614.667 Q306.177 607.537 304.349 603.995 Q302.543 600.431 298.909 600.431 M298.909 596.727 Q304.719 596.727 307.775 601.333 Q310.853 605.917 310.853 614.667 Q310.853 623.394 307.775 628 Q304.719 632.583 298.909 632.583 Q293.099 632.583 290.02 628 Q286.964 623.394 286.964 614.667 Q286.964 605.917 290.02 601.333 Q293.099 596.727 298.909 596.727 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M271.594 425.475 L259.789 443.924 L271.594 443.924 L271.594 425.475 M270.367 421.401 L276.247 421.401 L276.247 443.924 L281.177 443.924 L281.177 447.813 L276.247 447.813 L276.247 455.961 L271.594 455.961 L271.594 447.813 L255.992 447.813 L255.992 443.299 L270.367 421.401 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 424.479 Q295.298 424.479 293.469 428.044 Q291.664 431.586 291.664 438.715 Q291.664 445.822 293.469 449.387 Q295.298 452.928 298.909 452.928 Q302.543 452.928 304.349 449.387 Q306.177 445.822 306.177 438.715 Q306.177 431.586 304.349 428.044 Q302.543 424.479 298.909 424.479 M298.909 420.776 Q304.719 420.776 307.775 425.382 Q310.853 429.965 310.853 438.715 Q310.853 447.442 307.775 452.049 Q304.719 456.632 298.909 456.632 Q293.099 456.632 290.02 452.049 Q286.964 447.442 286.964 438.715 Q286.964 429.965 290.02 425.382 Q293.099 420.776 298.909 420.776 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M258.793 245.449 L277.15 245.449 L277.15 249.384 L263.076 249.384 L263.076 257.857 Q264.094 257.509 265.113 257.347 Q266.131 257.162 267.15 257.162 Q272.937 257.162 276.316 260.333 Q279.696 263.505 279.696 268.921 Q279.696 274.5 276.224 277.602 Q272.752 280.681 266.432 280.681 Q264.256 280.681 261.988 280.31 Q259.742 279.94 257.335 279.199 L257.335 274.5 Q259.418 275.634 261.641 276.19 Q263.863 276.745 266.34 276.745 Q270.344 276.745 272.682 274.639 Q275.02 272.532 275.02 268.921 Q275.02 265.31 272.682 263.204 Q270.344 261.097 266.34 261.097 Q264.465 261.097 262.59 261.514 Q260.738 261.931 258.793 262.81 L258.793 245.449 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 248.528 Q295.298 248.528 293.469 252.093 Q291.664 255.634 291.664 262.764 Q291.664 269.87 293.469 273.435 Q295.298 276.977 298.909 276.977 Q302.543 276.977 304.349 273.435 Q306.177 269.87 306.177 262.764 Q306.177 255.634 304.349 252.093 Q302.543 248.528 298.909 248.528 M298.909 244.824 Q304.719 244.824 307.775 249.431 Q310.853 254.014 310.853 262.764 Q310.853 271.491 307.775 276.097 Q304.719 280.681 298.909 280.681 Q293.099 280.681 290.02 276.097 Q286.964 271.491 286.964 262.764 Q286.964 254.014 290.02 249.431 Q293.099 244.824 298.909 244.824 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1012.84 400.199,893.735 400.786,784.452 401.372,684.33 401.958,592.761 402.545,509.179 403.131,433.061 403.718,479.891 404.304,611.729 404.891,537.839 405.477,470.642 406.063,409.703 406.65,354.616 407.236,305.003 407.823,333.695 408.409,290.736 408.995,315.589 409.582,278.9 410.168,248.636 410.755,219.895 411.341,245.873 411.927,267.031 412.514,326.422 413.1,305.133 413.687,322.109 414.273,304.882 414.86,320.301 415.446,307.894 416.032,297.175 416.619,286.292 417.205,304.004 417.792,297.063 418.378,315.8 418.964,332.049 419.551,330.158 420.137,346.949 420.724,347.539 421.31,348.66 421.896,352 422.483,370.49 423.069,386.867 423.656,403.545 424.242,407.956 424.829,412.344 425.415,418.186 426.001,435.77 426.588,463.421 427.174,469.569 427.761,477.028 428.347,485.709 428.933,502.692 429.52,528.169 430.106,544.443 430.693,554.656 431.279,564.63 431.865,574.297 432.452,590.247 433.038,600.271 433.625,616.176 434.211,632.213 434.798,642.005 435.384,657.225 435.97,666.937 436.557,676.345 437.143,701.334 437.73,720.17 438.316,733.307 438.902,741.95 439.489,755.094 440.075,780.431 440.662,796.355 441.248,808.025 441.835,819.286 442.421,830.245 443.007,848.663 443.594,859.313 444.18,873.081 444.767,882.904 445.353,896.327 445.939,902.622 446.526,911.488 447.112,917.716 447.699,926.809 448.285,944.309 448.871,955.63 449.458,968.967 450.044,979.446 450.631,989.644 451.217,994.519 451.804,1004.32 452.39,1011.65 452.976,1018.36 453.563,1025.11 454.149,1034.14 454.736,1038.19 455.322,1047.09 455.908,1064.82 456.495,1072.59 457.081,1084.65 457.668,1088.07 458.254,1097.16 458.84,1099.56 459.427,1102.12 460.013,1106.94 460.6,1118.25 461.186,1124.84 461.773,1127.05 462.359,1131.27 462.945,1133.42 463.532,1135.36 464.118,1137.11 464.705,1139.2 465.291,1144.68 465.877,1152.29 466.464,1155.99 467.05,1159.44 467.637,1163.12 468.223,1167.83 468.809,1170.65 469.396,1175 469.982,1177.76 470.569,1182.36 471.155,1188.08 471.742,1190.5 472.328,1190.84 472.914,1193.22 473.501,1199.2 474.087,1202.9 474.674,1202.9 475.26,1206.52 475.846,1206.59 476.433,1206.93 477.019,1208.58 477.606,1208.76 478.192,1207.36 478.778,1212.76 479.365,1211.29 479.951,1215.98 480.538,1215.72 481.124,1215.8 481.711,1215.81 482.297,1217.51 482.883,1217.36 483.47,1219.11 484.056,1219.29 484.643,1217.61 485.229,1217.7 485.815,1221.2 486.402,1224.43 486.988,1224.18 487.575,1226.03 488.161,1225.79 488.748,1227.09 489.334,1226.81 489.92,1228.15 490.507,1226.29 491.093,1224.5 491.68,1224.37 492.266,1221.6 492.852,1223.69 493.439,1223.94 494.025,1224.07 494.612,1230.45 495.198,1230.81 495.784,1232.11 496.371,1231.93 496.957,1233.48 497.544,1236.53 498.13,1237.75 498.717,1240.24 499.303,1239.75 499.889,1238.9 500.476,1238.35 501.062,1239.47 501.649,1241.98 502.235,1242.84 502.821,1245.25 503.408,1242.81 503.994,1243.41 504.581,1242.35 505.167,1241.95 505.753,1242.92 506.34,1244.05 506.926,1243.26 507.513,1242.5 508.099,1243.29 508.686,1241.39 509.272,1242.91 509.858,1245.45 510.445,1244.94 511.031,1247.12 511.618,1246.39 512.204,1247.23 512.79,1246.11 513.377,1245.22 513.963,1246.26 514.55,1249.99 515.136,1249.05 515.722,1247.96 516.309,1247.2 516.895,1246.28 517.482,1247.01 518.068,1244.96 518.655,1248.63 519.241,1246.2 519.827,1245.81 520.414,1244.82 521,1241.1 521.587,1240.84 522.173,1241.44 522.759,1240.79 523.346,1240.46 523.932,1239.95 524.519,1237.86 525.105,1239.26 525.691,1238.89 526.278,1238.75 526.864,1241.25 527.451,1244 528.037,1244.92 528.624,1248.47 529.21,1247.68 529.796,1248.33 530.383,1248.79 530.969,1250.53 531.556,1249.37 532.142,1246.8 532.728,1247.32 533.315,1246.14 533.901,1242.51 534.488,1246.26 535.074,1245.4 535.661,1244.74 536.247,1242.49 536.833,1240.61 537.42,1240.27 538.006,1241.24 538.593,1243.78 539.179,1241.63 539.765,1245.73 540.352,1246.82 540.938,1246.03 541.525,1246.78 542.111,1242.71 542.697,1242.09 543.284,1239.84 543.87,1235.16 544.457,1234.58 545.043,1240.23 545.63,1238.39 546.216,1240.97 546.802,1240.5 547.389,1238.16 547.975,1238.9 548.562,1239.8 549.148,1237.42 549.734,1237.05 550.321,1236.9 550.907,1236.24 551.494,1237.67 552.08,1237.24 552.666,1237.21 553.253,1236.85 553.839,1237.9 554.426,1240.54 555.012,1238.25 555.599,1237.92 556.185,1239.11 556.771,1238.48 557.358,1239.59 557.944,1239.02 558.531,1236.92 559.117,1238.11 559.703,1237.59 560.29,1237.46 560.876,1239.88 561.463,1236.57 562.049,1235.99 562.635,1237.11 563.222,1236.68 563.808,1236.33 564.395,1236.15 564.981,1237.38 565.568,1236.99 566.154,1236.95 566.74,1236.54 567.327,1234.71 567.913,1236.06 568.5,1237.36 569.086,1239.82 569.672,1240.66 570.259,1239.9 570.845,1239.04 571.432,1240.84 572.018,1238.72 572.605,1238.18 573.191,1239.12 573.777,1239.7 574.364,1240.31 574.95,1241.05 575.537,1241.43 576.123,1242.26 576.709,1241.7 577.296,1239.64 577.882,1237.6 578.469,1236.95 579.055,1236.08 579.641,1235.51 580.228,1239.51 580.814,1239.85 581.401,1240.65 581.987,1238.37 582.574,1236.1 583.16,1235.42 583.746,1234.96 584.333,1236.01 584.919,1236.83 585.506,1236.28 586.092,1235.98 586.678,1233.93 587.265,1231.93 587.851,1230.22 588.438,1227.18 589.024,1228.26 589.61,1227.95 590.197,1229.41 590.783,1232.11 591.37,1231.58 591.956,1231.08 592.543,1233.62 593.129,1234.38 593.715,1236.57 594.302,1237.26 594.888,1234.7 595.475,1238.39 596.061,1236.36 596.647,1235.68 597.234,1233.47 597.82,1233.18 598.407,1232.69 598.993,1232.1 599.579,1230.49 600.166,1229.93 600.752,1230.85 601.339,1234.89 601.925,1235.99 602.512,1235.54 603.098,1233.34 603.684,1232.95 604.271,1231.26 604.857,1227.99 605.444,1226.41 606.03,1226.36 606.616,1227.58 607.203,1224.75 607.789,1224.75 608.376,1226.16 608.962,1227.58 609.548,1227.31 610.135,1229.74 610.721,1230.73 611.308,1232.05 611.894,1233.28 612.481,1236.97 613.067,1237.86 613.653,1235.84 614.24,1237 614.826,1236.59 615.413,1235.8 615.999,1235.14 616.585,1233.04 617.172,1233.89 617.758,1233.44 618.345,1231.47 618.931,1230.99 619.518,1228.85 620.104,1228.59 620.69,1225.7 621.277,1226.94 621.863,1226.33 622.45,1224.94 623.036,1227.2 623.622,1222.76 624.209,1222.86 624.795,1221.42 625.382,1220.39 625.968,1223.48 626.554,1224.94 627.141,1225.12 627.727,1224.81 628.314,1224.39 628.9,1224.37 629.487,1229.77 630.073,1227.83 630.659,1227.52 631.246,1229.03 631.832,1228.68 632.419,1228.21 633.005,1227.99 633.591,1229.04 634.178,1230.12 634.764,1231.46 635.351,1232.09 635.937,1231.46 636.523,1229.77 637.11,1234.78 637.696,1236.7 638.283,1237.25 638.869,1235.36 639.456,1233.22 640.042,1231.03 640.628,1230.43 641.215,1234.32 641.801,1235.26 642.388,1233.25 642.974,1234.11 643.56,1233.92 644.147,1234.88 644.733,1233.96 645.32,1230.61 645.906,1227.02 646.492,1226.79 647.079,1224.9 647.665,1226.24 648.252,1224.2 648.838,1223.78 649.425,1223.85 650.011,1222.19 650.597,1222.35 651.184,1220.92 651.77,1222.45 652.357,1219.35 652.943,1216.95 653.529,1216.99 654.116,1216.89 654.702,1214.14 655.289,1214.14 655.875,1214.34 656.462,1213.12 657.048,1210.72 657.634,1212.74 658.221,1213.21 658.807,1216.68 659.394,1217.29 659.98,1217.27 660.566,1220.37 661.153,1221.71 661.739,1224.62 662.326,1222.93 662.912,1222.96 663.498,1225.61 664.085,1225.5 664.671,1226.77 665.258,1226.44 665.844,1227.43 666.431,1222.76 667.017,1219.82 667.603,1218.43 668.19,1221.51 668.776,1220.07 669.363,1217.39 669.949,1218.79 670.535,1219.11 671.122,1217.96 671.708,1219.56 672.295,1220.94 672.881,1217.99 673.467,1221 674.054,1222.6 674.64,1223.82 675.227,1222.26 675.813,1223.95 676.4,1225.02 676.986,1227.49 677.572,1230.04 678.159,1226.38 678.745,1224.89 679.332,1222.99 679.918,1221.27 680.504,1221.06 681.091,1223.65 681.677,1221.98 682.264,1220.78 682.85,1220.77 683.436,1217.99 684.023,1218.05 684.609,1220.94 685.196,1222.35 685.782,1222.08 686.369,1221.96 686.955,1221.68 687.541,1223.21 688.128,1221.99 688.714,1223.36 689.301,1223.25 689.887,1221.37 690.473,1221.35 691.06,1221.45 691.646,1222.61 692.233,1222.68 692.819,1220.89 693.405,1219.2 693.992,1223.64 694.578,1223.3 695.165,1223.18 695.751,1221.42 696.338,1221.15 696.924,1222.54 697.51,1223.85 698.097,1223.51 698.683,1221.94 699.27,1223.18 699.856,1220.14 700.442,1223.05 701.029,1223.01 701.615,1221.37 702.202,1222.57 702.788,1222.3 703.375,1221.98 703.961,1222.1 704.547,1226.5 705.134,1227.56 705.72,1228.55 706.307,1228.09 706.893,1227.44 707.479,1225.6 708.066,1225.3 708.652,1226.11 709.239,1224.04 709.825,1225.31 710.411,1226.32 710.998,1227.4 711.584,1226.89 712.171,1224.76 712.757,1222.99 713.344,1222.76 713.93,1221.44 714.516,1222.56 715.103,1221 715.689,1220.88 716.276,1222.14 716.862,1222.19 717.448,1221.78 718.035,1218.71 718.621,1218.64 719.208,1220.11 719.794,1220.06 720.38,1221.6 720.967,1221.46 721.553,1221.04 722.14,1219.41 722.726,1218.03 723.313,1218.15 723.899,1219.39 724.485,1218.18 725.072,1219.5 725.658,1219.18 726.245,1219.43 726.831,1217.96 727.417,1217.73 728.004,1217.71 728.59,1219.24 729.177,1219.01 729.763,1220.47 730.349,1220.22 730.936,1221.6 731.522,1220.19 732.109,1221.49 732.695,1219.85 733.282,1224.23 733.868,1223.69 734.454,1221.93 735.041,1221.65 735.627,1222.93 736.214,1222.65 736.8,1221.07 737.386,1219.28 737.973,1219.24 738.559,1220.38 739.146,1218.6 739.732,1219.55 740.318,1219.49 740.905,1219.58 741.491,1225.24 742.078,1224.78 742.664,1222.99 743.251,1224.21 743.837,1222.65 744.423,1221.18 745.01,1220.82 745.596,1216.64 746.183,1217.91 746.769,1214.89 747.355,1216.47 747.942,1213.58 748.528,1215.23 749.115,1218.41 749.701,1219.58 750.288,1220.97 750.874,1221.96 751.46,1223.13 752.047,1223.13 752.633,1222.7 753.22,1222.33 753.806,1223.67 754.392,1224.82 754.979,1225.76 755.565,1224.99 756.152,1224.72 756.738,1225.48 757.324,1230.58 757.911,1231.2 758.497,1227.72 759.084,1225.41 759.67,1225.01 760.257,1221.7 760.843,1217.08 761.429,1215.71 762.016,1214.15 762.602,1215.64 763.189,1214.01 763.775,1214.28 764.361,1214.25 764.948,1216.98 765.534,1218.49 766.121,1218.38 766.707,1216.9 767.293,1218.31 767.88,1209.63 768.466,1211.66 769.053,1211.98 769.639,1212.27 770.226,1212.31 770.812,1215.3 771.398,1216.63 771.985,1215.09 772.571,1219.26 773.158,1220.69 773.744,1224.59 774.33,1222.56 774.917,1223.52 775.503,1223.41 776.09,1223.09 776.676,1222.9 777.262,1219.88 777.849,1222.74 778.435,1222.33 779.022,1226.27 779.608,1223.13 780.195,1222.67 780.781,1220.97 781.367,1220.67 781.954,1221.7 782.54,1221.66 783.127,1221.59 783.713,1218.41 784.299,1215.47 784.886,1214.02 785.472,1212.5 786.059,1211.05 786.645,1210.03 787.232,1211.75 787.818,1216.49 788.404,1216.45 788.991,1217.09 789.577,1218.54 790.164,1219.95 790.75,1218.33 791.336,1219.68 791.923,1218.16 792.509,1218.1 793.096,1216.66 793.682,1213.97 794.268,1214.24 794.855,1211.35 795.441,1210.17 796.028,1210.7 796.614,1208.58 797.201,1209.2 797.787,1211.11 798.373,1210 798.96,1208.74 799.546,1210.57 800.133,1209.46 800.719,1209.76 801.305,1211.79 801.892,1213.91 802.478,1213.94 803.065,1214.15 803.651,1212.42 804.237,1212.53 804.824,1214.3 805.41,1211.83 805.997,1209.14 806.583,1208.01 807.17,1206.77 807.756,1208.46 808.342,1209.03 808.929,1209.48 809.515,1209.99 810.102,1210.38 810.688,1212.39 811.274,1211.17 811.861,1211.26 812.447,1216.97 813.034,1214.37 813.62,1214.7 814.206,1217.71 814.793,1215.87 815.379,1212.95 815.966,1216.28 816.552,1217.66 817.139,1220.71 817.725,1219.08 818.311,1220.23 818.898,1219.84 819.484,1219.51 820.071,1217.78 820.657,1220.71 821.243,1220.41 821.83,1218.75 822.416,1220.01 823.003,1218.52 823.589,1215.21 824.175,1215.4 824.762,1215.57 825.348,1214.13 825.935,1212.87 826.521,1212.95 827.108,1215.79 827.694,1217.69 828.28,1216.29 828.867,1215.05 829.453,1219.63 830.04,1219.33 830.626,1219.23 831.212,1220.82 831.799,1220.54 832.385,1220.25 832.972,1221.14 833.558,1222.3 834.145,1219.58 834.731,1216.3 835.317,1216.29 835.904,1215.06 836.49,1213.67 837.077,1215.02 837.663,1214.93 838.249,1213.5 838.836,1212 839.422,1212.14 840.009,1209.53 840.595,1209.81 841.181,1210.06 841.768,1211.82 842.354,1212.25 842.941,1213.98 843.527,1216.78 844.114,1214.07 844.7,1212.79 845.286,1214.34 845.873,1212.97 846.459,1213.29 847.046,1216.26 847.632,1217.66 848.218,1216.03 848.805,1216.28 849.391,1217.74 849.978,1214.58 850.564,1213.05 851.15,1215.89 851.737,1217.41 852.323,1217.19 852.91,1217.07 853.496,1217.2 854.083,1216.99 854.669,1216.81 855.255,1218.18 855.842,1219.34 856.428,1217.77 857.015,1220.39 857.601,1220.02 858.187,1222.89 858.774,1222.3 859.36,1218.97 859.947,1217.45 860.533,1220.31 861.119,1217.2 861.706,1218.41 862.292,1215.43 862.879,1219.69 863.465,1222.28 864.052,1221.93 864.638,1223.35 865.224,1222.79 865.811,1222.26 866.397,1222 866.984,1221.67 867.57,1222.67 868.156,1222.31 868.743,1221.88 869.329,1221.57 869.916,1222.57 870.502,1220.97 871.089,1217.76 871.675,1217.34 872.261,1217.35 872.848,1215.72 873.434,1217 874.021,1215.26 874.607,1213.65 875.193,1216.58 875.78,1216.39 876.366,1216.48 876.953,1216.49 877.539,1215.1 878.125,1212.12 878.712,1215.21 879.298,1215.22 879.885,1215.16 880.471,1215.31 881.058,1216.71 881.644,1216.83 882.23,1215.62 882.817,1212.65 883.403,1214.14 883.99,1215.35 884.576,1219.75 885.162,1223.96 885.749,1224.77 886.335,1227.33 886.922,1226.29 887.508,1227.17 888.094,1226.48 888.681,1225.76 889.267,1224.95 889.854,1224.5 890.44,1222.54 891.027,1222.27 891.613,1223.29 892.199,1223.22 892.786,1225.54 893.372,1223.51 893.959,1223.23 894.545,1221.32 895.131,1221 895.718,1214.91 896.304,1213.42 896.891,1214.81 897.477,1216.42 898.063,1214.95 898.65,1214.76 899.236,1218.9 899.823,1219.09 900.409,1217.52 900.996,1217.41 901.582,1211.34 902.168,1209.71 902.755,1209.99 903.341,1207.17 903.928,1208.91 904.514,1206.39 905.1,1208.2 905.687,1207.24 906.273,1213.35 906.86,1213.13 907.446,1214.73 908.032,1216.44 908.619,1215.11 909.205,1216.4 909.792,1216.19 910.378,1213.08 910.965,1214.91 911.551,1210.33 912.137,1209.5 912.724,1211.44 913.31,1210.15 913.897,1210.31 914.483,1209.06 915.069,1209.08 915.656,1212.21 916.242,1212.3 916.829,1211.02 917.415,1208.19 918.002,1211.44 918.588,1213.2 919.174,1211.66 919.761,1209.08 920.347,1210.96 920.934,1209.59 921.52,1209.75 922.106,1211.68 922.693,1211.86 923.279,1210.42 923.866,1210.6 924.452,1208.04 925.038,1207.18 925.625,1206.09 926.211,1206.5 926.798,1202.64 927.384,1206.37 927.971,1205.7 928.557,1206.33 929.143,1203.87 929.73,1207.17 930.316,1204.99 930.903,1205.37 931.489,1205.98 932.075,1207.84 932.662,1208.66 933.248,1212.01 933.835,1215.13 934.421,1215.1 935.007,1215 935.594,1213.85 936.18,1213.7 936.767,1216.8 937.353,1215.44 937.94,1218.07 938.526,1217.64 939.112,1217.69 939.699,1217.76 940.285,1218.82 940.872,1221.29 941.458,1220.92 942.044,1222.06 942.631,1221.82 943.217,1218.65 943.804,1216.7 944.39,1219.58 944.976,1218.06 945.563,1219.28 946.149,1218.85 946.736,1217.04 947.322,1218.12 947.909,1220.68 948.495,1224.63 949.081,1224.43 949.668,1223.87 950.254,1221.78 950.841,1224.37 951.427,1223.96 952.013,1220.53 952.6,1220.43 953.186,1222.96 953.773,1220.94 954.359,1217.58 954.945,1218.85 955.532,1221.19 956.118,1223.69 956.705,1223.39 957.291,1224.24 957.878,1220.77 958.464,1219.08 959.05,1218.74 959.637,1218.5 960.223,1218.28 960.81,1218.28 961.396,1215.5 961.982,1215.2 962.569,1215.13 963.155,1216.24 963.742,1216.15 964.328,1217.53 964.915,1214.4 965.501,1213.1 966.087,1211.85 966.674,1210.72 967.26,1214.12 967.847,1214.06 968.433,1212.39 969.019,1212.52 969.606,1213.96 970.192,1212.67 970.779,1212.8 971.365,1212.77 971.951,1212.4 972.538,1212.63 973.124,1215.41 973.711,1213.88 974.297,1214.07 974.884,1211.31 975.47,1210.17 976.056,1211.75 976.643,1213.16 977.229,1216.18 977.816,1214.64 978.402,1211.64 978.988,1214.76 979.575,1212.94 980.161,1210.22 980.748,1210.48 981.334,1210.54 981.92,1213.42 982.507,1212.08 983.093,1212.08 983.68,1212.2 984.266,1213.66 984.853,1213.63 985.439,1213.55 986.025,1216.2 986.612,1213.62 987.198,1215.25 987.785,1214.84 988.371,1213.01 988.957,1211.51 989.544,1208.78 990.13,1209.19 990.717,1210.86 991.303,1209.32 991.889,1209.87 992.476,1209.86 993.062,1210.03 993.649,1207.4 994.235,1203.58 994.822,1202.71 995.408,1202.12 995.994,1202.51 996.581,1205.97 997.167,1206.44 997.754,1208.39 998.34,1210.1 998.926,1210.36 999.513,1209.19 1000.1,1209.51 1000.69,1208.35 1001.27,1208.96 1001.86,1206.44 1002.44,1208.31 1003.03,1209.99 1003.62,1212 1004.2,1212.11 1004.79,1213.64 1005.38,1212.3 1005.96,1212.57 1006.55,1213.98 1007.14,1212.82 1007.72,1212.76 1008.31,1214.39 1008.9,1216 1009.48,1212.05 1010.07,1213.78 1010.65,1216.63 1011.24,1216.4 1011.83,1217.66 1012.41,1214.76 1013,1214.63 1013.59,1214.41 1014.17,1214.55 1014.76,1211.45 1015.35,1214.33 1015.93,1217.39 1016.52,1217.24 1017.11,1218.32 1017.69,1216.77 1018.28,1216.63 1018.86,1216.53 1019.45,1217.95 1020.04,1218.03 1020.62,1217.66 1021.21,1217.6 1021.8,1214.78 1022.38,1213.17 1022.97,1217.69 1023.56,1217.42 1024.14,1215.92 1024.73,1211.52 1025.32,1213.07 1025.9,1216.13 1026.49,1216.29 1027.07,1216.17 1027.66,1217.35 1028.25,1211.4 1028.83,1213.04 1029.42,1211.74 1030.01,1213.42 1030.59,1213.62 1031.18,1216.51 1031.77,1219.1 1032.35,1218.5 1032.94,1220.86 1033.52,1220.85 1034.11,1219.34 1034.7,1217.64 1035.28,1219.28 1035.87,1219.3 1036.46,1217.38 1037.04,1218.65 1037.63,1219.78 1038.22,1220.89 1038.8,1220.27 1039.39,1219.95 1039.98,1220.91 1040.56,1223.32 1041.15,1222.58 1041.73,1221.97 1042.32,1220.17 1042.91,1217.03 1043.49,1216.58 1044.08,1217.68 1044.67,1217.5 1045.25,1211.3 1045.84,1211.26 1046.43,1211.49 1047.01,1214.36 1047.6,1209.98 1048.19,1212.88 1048.77,1214.62 1049.36,1213.07 1049.94,1213.15 1050.53,1213.09 1051.12,1216.09 1051.7,1216.3 1052.29,1217.66 1052.88,1218.8 1053.46,1217.17 1054.05,1215.66 1054.64,1214.19 1055.22,1211.23 1055.81,1213.18 1056.39,1211.69 1056.98,1209.22 1057.57,1208.36 1058.15,1206.98 1058.74,1205.75 1059.33,1206.23 1059.91,1205.12 1060.5,1206.74 1061.09,1204.15 1061.67,1206.22 1062.26,1206.42 1062.85,1208.35 1063.43,1207.09 1064.02,1206.11 1064.6,1205.13 1065.19,1205.77 1065.78,1204.75 1066.36,1204.97 1066.95,1201.42 1067.54,1201.93 1068.12,1201.45 1068.71,1202.22 1069.3,1200.06 1069.88,1200.77 1070.47,1204.86 1071.06,1200.95 1071.64,1202.77 1072.23,1205.18 1072.81,1204.19 1073.4,1204.77 1073.99,1208.3 1074.57,1207.04 1075.16,1207.31 1075.75,1209.17 1076.33,1212.23 1076.92,1213.41 1077.51,1213.46 1078.09,1215.07 1078.68,1216.53 1079.26,1217.86 1079.85,1217.71 1080.44,1217.41 1081.02,1219.63 1081.61,1217.7 1082.2,1218.76 1082.78,1219.64 1083.37,1220.45 1083.96,1220.22 1084.54,1217.02 1085.13,1214.05 1085.72,1214.22 1086.3,1214.31 1086.89,1214.01 1087.47,1218.52 1088.06,1215.4 1088.65,1215.16 1089.23,1219.04 1089.82,1219.99 1090.41,1218.25 1090.99,1218.03 1091.58,1219.37 1092.17,1217.87 1092.75,1216.11 1093.34,1214.52 1093.93,1215.65 1094.51,1211.35 1095.1,1212.97 1095.68,1212.98 1096.27,1213.09 1096.86,1214.41 1097.44,1215.7 1098.03,1214.38 1098.62,1215.66 1099.2,1217.03 1099.79,1215.34 1100.38,1215.35 1100.96,1215.45 1101.55,1211.33 1102.14,1215.72 1102.72,1214.08 1103.31,1215.17 1103.89,1213.54 1104.48,1213.72 1105.07,1210.85 1105.65,1209.49 1106.24,1208.13 1106.83,1209.85 1107.41,1205.9 1108,1204.77 1108.59,1206.64 1109.17,1205.54 1109.76,1207.19 1110.34,1208.74 1110.93,1209.19 1111.52,1207.96 1112.1,1208.26 1112.69,1208.16 1113.28,1206.99 1113.86,1206.09 1114.45,1207.68 1115.04,1206.37 1115.62,1206.68 1116.21,1210.07 1116.8,1209.21 1117.38,1210.67 1117.97,1211.11 1118.55,1214.11 1119.14,1214.16 1119.73,1209.69 1120.31,1211.12 1120.9,1211.36 1121.49,1213 1122.07,1213.38 1122.66,1211.89 1123.25,1213.25 1123.83,1216.17 1124.42,1217.77 1125.01,1216.46 1125.59,1216.27 1126.18,1214.38 1126.76,1217.21 1127.35,1215.73 1127.94,1214.2 1128.52,1214.01 1129.11,1213.94 1129.7,1215.33 1130.28,1213.89 1130.87,1215.26 1131.46,1219.64 1132.04,1218.02 1132.63,1219.27 1133.21,1219.02 1133.8,1221.75 1134.39,1221.21 1134.97,1221.25 1135.56,1219.41 1136.15,1219.28 1136.73,1217.55 1137.32,1212.86 1137.91,1214.3 1138.49,1214.22 1139.08,1215.46 1139.67,1215.03 1140.25,1214.99 1140.84,1216.41 1141.42,1214.79 1142.01,1213.12 1142.6,1211.66 1143.18,1210.17 1143.77,1212.95 1144.36,1212.93 1144.94,1214.77 1145.53,1214.74 1146.12,1215.98 1146.7,1218.98 1147.29,1215.8 1147.88,1212.65 1148.46,1215.42 1149.05,1214.07 1149.63,1213.93 1150.22,1211.97 1150.81,1213.39 1151.39,1208.99 1151.98,1207.77 1152.57,1209.35 1153.15,1210.97 1153.74,1213.58 1154.33,1213.81 1154.91,1213.97 1155.5,1214.07 1156.09,1215.64 1156.67,1214.4 1157.26,1215.82 1157.84,1215.67 1158.43,1215.66 1159.02,1215.71 1159.6,1217.1 1160.19,1218.4 1160.78,1218.45 1161.36,1218.23 1161.95,1216.64 1162.54,1213.32 1163.12,1214.47 1163.71,1215.89 1164.29,1215.86 1164.88,1215.65 1165.47,1214.36 1166.05,1217.28 1166.64,1212.85 1167.23,1213.02 1167.81,1212.69 1168.4,1212.57 1168.99,1212.3 1169.57,1213.73 1170.16,1212.15 1170.75,1212.09 1171.33,1213.53 1171.92,1213.54 1172.5,1213.59 1173.09,1212.08 1173.68,1213.3 1174.26,1211.86 1174.85,1213.31 1175.44,1216.53 1176.02,1217.78 1176.61,1218.88 1177.2,1216.86 1177.78,1219.47 1178.37,1219.09 1178.96,1221.35 1179.54,1222.62 1180.13,1223.58 1180.71,1222.89 1181.3,1222.73 1181.89,1220.78 1182.47,1217.39 1183.06,1218.59 1183.65,1215.39 1184.23,1212.3 1184.82,1209.46 1185.41,1208.14 1185.99,1206.96 1186.58,1205.78 1187.16,1209.03 1187.75,1210.49 1188.34,1210.28 1188.92,1211.83 1189.51,1209.06 1190.1,1209.48 1190.68,1211.3 1191.27,1212.75 1191.86,1214.1 1192.44,1214.29 1193.03,1213.98 1193.62,1209.6 1194.2,1211.16 1194.79,1212.81 1195.37,1211.29 1195.96,1210.06 1196.55,1212.75 1197.13,1214.32 1197.72,1211.19 1198.31,1211.24 1198.89,1211.45 1199.48,1210.04 1200.07,1208.88 1200.65,1209.04 1201.24,1209.44 1201.83,1209.49 1202.41,1211.02 1203,1212.45 1203.58,1211.27 1204.17,1211.36 1204.76,1210.24 1205.34,1208.95 1205.93,1206.13 1206.52,1206.56 1207.1,1206.92 1207.69,1209.96 1208.28,1210.08 1208.86,1211.94 1209.45,1216.26 1210.03,1216.13 1210.62,1217.42 1211.21,1221.67 1211.79,1221.18 1212.38,1221.17 1212.97,1222.01 1213.55,1219.99 1214.14,1220.96 1214.73,1219.03 1215.31,1218.88 1215.9,1218.48 1216.49,1218 1217.07,1217.88 1217.66,1217.54 1218.24,1217.29 1218.83,1215.9 1219.42,1214.36 1220,1213.17 1220.59,1211.74 1221.18,1213.29 1221.76,1217.52 1222.35,1217.03 1222.94,1218.41 1223.52,1218.1 1224.11,1217.92 1224.7,1217.71 1225.28,1217.65 1225.87,1215.65 1226.45,1215.77 1227.04,1214.42 1227.63,1212.78 1228.21,1214.42 1228.8,1214.49 1229.39,1217.34 1229.97,1219.9 1230.56,1218.29 1231.15,1216.58 1231.73,1216.3 1232.32,1213.52 1232.91,1213.26 1233.49,1214.65 1234.08,1217.44 1234.66,1215.65 1235.25,1216.96 1235.84,1213.97 1236.42,1212.38 1237.01,1218.12 1237.6,1219.75 1238.18,1218.18 1238.77,1217.9 1239.36,1217.8 1239.94,1217.49 1240.53,1212.79 1241.11,1210.15 1241.7,1210.06 1242.29,1211.68 1242.87,1210.41 1243.46,1211.93 1244.05,1212.07 1244.63,1210.82 1245.22,1210.96 1245.81,1210.99 1246.39,1210.98 1246.98,1208.16 1247.57,1209.77 1248.15,1209.76 1248.74,1209.84 1249.32,1210.19 1249.91,1208.67 1250.5,1210.54 1251.08,1212.11 1251.67,1209.57 1252.26,1211.28 1252.84,1211.41 1253.43,1211.44 1254.02,1211.38 1254.6,1211.77 1255.19,1213.55 1255.78,1213.46 1256.36,1214.8 1256.95,1214.72 1257.53,1214.04 1258.12,1214.01 1258.71,1215.58 1259.29,1218.34 1259.88,1218.35 1260.47,1218.26 1261.05,1217.96 1261.64,1217.73 1262.23,1217.67 1262.81,1216.23 1263.4,1214.43 1263.98,1213.25 1264.57,1210.53 1265.16,1207.87 1265.74,1208.3 1266.33,1208.26 1266.92,1211.24 1267.5,1210.1 1268.09,1210.53 1268.68,1203.67 1269.26,1201.04 1269.85,1198.73 1270.44,1198.22 1271.02,1197.52 1271.61,1200.99 1272.19,1203.29 1272.78,1208.01 1273.37,1207.04 1273.95,1207.32 1274.54,1207.68 1275.13,1210.92 1275.71,1211.22 1276.3,1211.16 1276.89,1211.39 1277.47,1210.25 1278.06,1210.82 1278.65,1209.55 1279.23,1209.76 1279.82,1208.7 1280.4,1208.82 1280.99,1213.19 1281.58,1213.38 1282.16,1215.02 1282.75,1216.52 1283.34,1216.31 1283.92,1218.99 1284.51,1218.71 1285.1,1218.27 1285.68,1220.79 1286.27,1220.5 1286.86,1219.98 1287.44,1219.65 1288.03,1214.9 1288.61,1217.55 1289.2,1221.57 1289.79,1220.94 1290.37,1221.8 1290.96,1221.48 1291.55,1220.93 1292.13,1220.42 1292.72,1217.22 1293.31,1213.88 1293.89,1209.67 1294.48,1209.63 1295.06,1206.97 1295.65,1205.78 1296.24,1206.36 1296.82,1205.44 1297.41,1207.46 1298,1209.03 1298.58,1210.52 1299.17,1212.3 1299.76,1210.78 1300.34,1209.8 1300.93,1209.77 1301.52,1210.16 1302.1,1209 1302.69,1212.18 1303.27,1215.03 1303.86,1218.17 1304.45,1216.3 1305.03,1210.47 1305.62,1212.21 1306.21,1210.66 1306.79,1209.5 1307.38,1213.93 1307.97,1213.97 1308.55,1215.35 1309.14,1216.61 1309.73,1214.82 1310.31,1216.24 1310.9,1216.45 1311.48,1216.46 1312.07,1219.12 1312.66,1220.36 1313.24,1218.44 1313.83,1218.02 1314.42,1216.08 1315,1217.56 1315.59,1217.32 1316.18,1221.28 1316.76,1217.78 1317.35,1217.69 1317.93,1214.8 1318.52,1211.75 1319.11,1213.41 1319.69,1213.28 1320.28,1217.38 1320.87,1213.93 1321.45,1213.99 1322.04,1218.08 1322.63,1216.28 1323.21,1215.95 1323.8,1216.02 1324.39,1217.14 1324.97,1212.65 1325.56,1215.57 1326.14,1213.81 1326.73,1212.13 1327.32,1212.36 1327.9,1213.67 1328.49,1216.62 1329.08,1214.6 1329.66,1214.38 1330.25,1214.14 1330.84,1212.95 1331.42,1214.65 1332.01,1216.02 1332.6,1214.66 1333.18,1213.33 1333.77,1216.02 1334.35,1214.6 1334.94,1211.91 1335.53,1213.42 1336.11,1211.91 1336.7,1213.34 1337.29,1214.66 1337.87,1211.52 1338.46,1214.46 1339.05,1215.96 1339.63,1213.11 1340.22,1214.65 1340.8,1214.52 1341.39,1221.36 1341.98,1220.62 1342.56,1217.38 1343.15,1213.09 1343.74,1212.89 1344.32,1214.29 1344.91,1214.29 1345.5,1214.43 1346.08,1213.13 1346.67,1214.37 1347.26,1215.74 1347.84,1216.97 1348.43,1219.53 1349.01,1219.31 1349.6,1216.16 1350.19,1214.77 1350.77,1217.59 1351.36,1217.19 1351.95,1214.12 1352.53,1214.14 1353.12,1211.44 1353.71,1214.41 1354.29,1212.85 1354.88,1211.52 1355.47,1210.42 1356.05,1210.5 1356.64,1209.19 1357.22,1209.44 1357.81,1210.98 1358.4,1207.98 1358.98,1211.1 1359.57,1211.18 1360.16,1214.17 1360.74,1216.78 1361.33,1212.12 1361.92,1209.39 1362.5,1209.35 1363.09,1206.75 1363.68,1210.31 1364.26,1211.94 1364.85,1212.08 1365.43,1210.86 1366.02,1208.18 1366.61,1208.08 1367.19,1206.83 1367.78,1202.95 1368.37,1201.96 1368.95,1205.4 1369.54,1204.27 1370.13,1203.32 1370.71,1203.8 1371.3,1203.05 1371.88,1205.12 1372.47,1207.01 1373.06,1208.71 1373.64,1207.54 1374.23,1213.79 1374.82,1213.97 1375.4,1215.23 1375.99,1212.41 1376.58,1213.69 1377.16,1211.93 1377.75,1214.99 1378.34,1213.38 1378.92,1214.8 1379.51,1216.14 1380.09,1213.05 1380.68,1211.5 1381.27,1212.93 1381.85,1211.89 1382.44,1212.02 1383.03,1211.97 1383.61,1211.9 1384.2,1209.24 1384.79,1208.28 1385.37,1208.82 1385.96,1206.03 1386.55,1207.86 1387.13,1208.2 1387.72,1207.05 1388.3,1207.32 1388.89,1209.09 1389.48,1209.28 1390.06,1210.89 1390.65,1213.79 1391.24,1218.01 1391.82,1216.3 1392.41,1217.34 1393,1218.89 1393.58,1217.4 1394.17,1217.04 1394.75,1221.29 1395.34,1221.02 1395.93,1223.28 1396.51,1225.95 1397.1,1222.52 1397.69,1226.34 1398.27,1227.03 1398.86,1227.78 1399.45,1224.3 1400.03,1220.86 1400.62,1219.05 1401.21,1225.82 1401.79,1224.85 1402.38,1224.19 1402.96,1219.22 1403.55,1218.65 1404.14,1218.14 1404.72,1217.95 1405.31,1215.08 1405.9,1215.21 1406.48,1212.4 1407.07,1212.64 1407.66,1214.22 1408.24,1212.94 1408.83,1215.37 1409.42,1216.56 1410,1215.04 1410.59,1216.09 1411.17,1214.42 1411.76,1212.9 1412.35,1212.83 1412.93,1212.44 1413.52,1212.26 1414.11,1212.04 1414.69,1212.08 1415.28,1212.2 1415.87,1209.45 1416.45,1208.34 1417.04,1205.7 1417.63,1204.51 1418.21,1200.42 1418.8,1199.8 1419.38,1200.4 1419.97,1204.19 1420.56,1204.77 1421.14,1206.9 1421.73,1206.02 1422.32,1207.76 1422.9,1208 1423.49,1208.27 1424.08,1208.18 1424.66,1208.25 1425.25,1207.05 1425.83,1207.39 1426.42,1207.93 1427.01,1208.19 1427.59,1207.95 1428.18,1206.85 1428.77,1208.55 1429.35,1208.8 1429.94,1208.9 1430.53,1207.52 1431.11,1209.16 1431.7,1207.74 1432.29,1209.18 1432.87,1208.08 1433.46,1207 1434.04,1207.23 1434.63,1208.47 1435.22,1207.6 1435.8,1209.34 1436.39,1206.81 1436.98,1206.79 1437.56,1206.94 1438.15,1205.83 1438.74,1207.63 1439.32,1208.08 1439.91,1208.22 1440.5,1208.73 1441.08,1209.06 1441.67,1207.85 1442.25,1208.23 1442.84,1208.41 1443.43,1207.52 1444.01,1206.42 1444.6,1206.56 1445.19,1204.12 1445.77,1204.81 1446.36,1207.72 1446.95,1209.53 1447.53,1211.17 1448.12,1211.13 1448.7,1211.34 1449.29,1212.84 1449.88,1211.38 1450.46,1211.32 1451.05,1211.23 1451.64,1212.57 1452.22,1214.17 1452.81,1213.99 1453.4,1216.45 1453.98,1216.6 1454.57,1212.13 1455.16,1212.39 1455.74,1215.4 1456.33,1216.43 1456.91,1215.11 1457.5,1213.44 1458.09,1212.1 1458.67,1212.19 1459.26,1210.85 1459.85,1212.45 1460.43,1212.37 1461.02,1213.72 1461.61,1215.06 1462.19,1213.42 1462.78,1214.63 1463.37,1214.29 1463.95,1215.74 1464.54,1215.86 1465.12,1214.25 1465.71,1214.02 1466.3,1212.57 1466.88,1212.61 1467.47,1211.4 1468.06,1209.86 1468.64,1210.08 1469.23,1212.95 1469.82,1214.26 1470.4,1212.49 1470.99,1212.52 1471.57,1209.68 1472.16,1204.01 1472.75,1204.25 1473.33,1206.32 1473.92,1209.78 1474.51,1212.73 1475.09,1214.63 1475.68,1216.05 1476.27,1217.42 1476.85,1215.95 1477.44,1219.83 1478.03,1219.29 1478.61,1221.88 1479.2,1222.91 1479.78,1223.98 1480.37,1219.37 1480.96,1217.84 1481.54,1224.99 1482.13,1227.34 1482.72,1226.34 1483.3,1221.47 1483.89,1219.74 1484.48,1219.64 1485.06,1222.24 1485.65,1218.77 1486.24,1218.67 1486.82,1219.83 1487.41,1217.79 1487.99,1217.39 1488.58,1214.37 1489.17,1221.49 1489.75,1218.21 1490.34,1219.67 1490.93,1220.6 1491.51,1223.33 1492.1,1218.7 1492.69,1216.98 1493.27,1217.32 1493.86,1218.61 1494.45,1219.68 1495.03,1217.91 1495.62,1215.91 1496.2,1215.93 1496.79,1216.04 1497.38,1215.96 1497.96,1217.01 1498.55,1215.26 1499.14,1212.27 1499.72,1210.93 1500.31,1209.6 1500.9,1211.32 1501.48,1206.96 1502.07,1207.14 1502.65,1207.47 1503.24,1205.1 1503.83,1204.19 1504.41,1206.04 1505,1204.88 1505.59,1205.5 1506.17,1208.66 1506.76,1205.81 1507.35,1206.35 1507.93,1206.9 1508.52,1207.24 1509.11,1210.51 1509.69,1210.78 1510.28,1210.9 1510.86,1210.97 1511.45,1214.28 1512.04,1213.91 1512.62,1213.6 1513.21,1210.55 1513.8,1210.64 1514.38,1210.75 1514.97,1213.58 1515.56,1213.54 1516.14,1210.71 1516.73,1211.05 1517.32,1210.98 1517.9,1207.94 1518.49,1205.49 1519.07,1204.64 1519.66,1206.37 1520.25,1208.19 1520.83,1207.32 1521.42,1207.44 1522.01,1204.81 1522.59,1205.43 1523.18,1210.36 1523.77,1210.65 1524.35,1209.16 1524.94,1210.66 1525.52,1212.26 1526.11,1212.37 1526.7,1209.7 1527.28,1208.75 1527.87,1210.61 1528.46,1216.22 1529.04,1218.84 1529.63,1215.67 1530.22,1212.7 1530.8,1212.85 1531.39,1211.51 1531.98,1208.91 1532.56,1208.89 1533.15,1207.53 1533.73,1207.92 1534.32,1206.82 1534.91,1207.46 1535.49,1207.43 1536.08,1208.74 1536.67,1210.19 1537.25,1211.72 1537.84,1210.38 1538.43,1211.7 1539.01,1212.08 1539.6,1213.52 1540.19,1213.46 1540.77,1215.01 1541.36,1217.83 1541.94,1217.46 1542.53,1218.68 1543.12,1225.58 1543.7,1226.08 1544.29,1223.66 1544.88,1224.43 1545.46,1225.04 1546.05,1224.5 1546.64,1222.42 1547.22,1223.45 1547.81,1222.9 1548.4,1223.95 1548.98,1227.95 1549.57,1228.7 1550.15,1226.16 1550.74,1225.49 1551.33,1225.09 1551.91,1224.43 1552.5,1219.41 1553.09,1217.72 1553.67,1219.93 1554.26,1217.84 1554.85,1216.23 1555.43,1214.5 1556.02,1216.08 1556.6,1215.46 1557.19,1215.19 1557.78,1213.46 1558.36,1211.92 1558.95,1213.38 1559.54,1213.19 1560.12,1213.11 1560.71,1211.45 1561.3,1209.91 1561.88,1207.12 1562.47,1207.28 1563.06,1205.99 1563.64,1206.45 1564.23,1207 1564.81,1209.98 1565.4,1209.99 1565.99,1207.66 1566.57,1208.03 1567.16,1211.05 1567.75,1212.69 1568.33,1209.54 1568.92,1206.76 1569.51,1208.54 1570.09,1210.19 1570.68,1211.85 1571.27,1211.78 1571.85,1213.2 1572.44,1211.48 1573.02,1217.24 1573.61,1215.39 1574.2,1212.53 1574.78,1212.42 1575.37,1213.82 1575.96,1215.07 1576.54,1215.07 1577.13,1211.96 1577.72,1210.76 1578.3,1214.93 1578.89,1211.98 1579.47,1210.55 1580.06,1210.44 1580.65,1209.04 1581.23,1209.34 1581.82,1211.06 1582.41,1209.59 1582.99,1209.91 1583.58,1209.8 1584.17,1211.78 1584.75,1214.8 1585.34,1211.94 1585.93,1212.18 1586.51,1213.59 1587.1,1214.91 1587.68,1212.23 1588.27,1209.5 1588.86,1206.85 1589.44,1205.77 1590.03,1204.9 1590.62,1203.98 1591.2,1207.49 1591.79,1208.01 1592.38,1205.52 1592.96,1204.37 1593.55,1205 1594.14,1206.9 1594.72,1207.21 1595.31,1210.79 1595.89,1212.16 1596.48,1213.77 1597.07,1213.56 1597.65,1213.4 1598.24,1213.48 1598.83,1213.68 1599.41,1213.38 1600,1210.44 1600.59,1210.89 1601.17,1211.19 1601.76,1209.86 1602.34,1210 1602.93,1208.77 1603.52,1204.68 1604.1,1203.51 1604.69,1208.12 1605.28,1207.37 1605.86,1204.93 1606.45,1205.62 1607.04,1203.18 1607.62,1205.39 1608.21,1206.27 1608.8,1206.81 1609.38,1205.22 1609.97,1205.47 1610.55,1210.12 1611.14,1213.32 1611.73,1214.95 1612.31,1214.73 1612.9,1213.51 1613.49,1213.51 1614.07,1212.23 1614.66,1213.83 1615.25,1213.89 1615.83,1216.45 1616.42,1217.88 1617.01,1216.03 1617.59,1217.5 1618.18,1218.67 1618.76,1214.26 1619.35,1214.18 1619.94,1215.52 1620.52,1216.71 1621.11,1218.12 1621.7,1216.52 1622.28,1216.31 1622.87,1214.71 1623.46,1213.35 1624.04,1213.24 1624.63,1214.42 1625.22,1215.9 1625.8,1220.12 1626.39,1220.04 1626.97,1218.6 1627.56,1219.85 1628.15,1220.71 1628.73,1217.48 1629.32,1215.89 1629.91,1215.7 1630.49,1215.74 1631.08,1215.51 1631.67,1215.46 1632.25,1215.53 1632.84,1213.67 1633.42,1213.7 1634.01,1215.1 1634.6,1214.51 1635.18,1215.99 1635.77,1217.18 1636.36,1216.86 1636.94,1214.77 1637.53,1215.03 1638.12,1215.08 1638.7,1212.1 1639.29,1212 1639.88,1210.36 1640.46,1211.94 1641.05,1216.11 1641.63,1217.29 1642.22,1215.6 1642.81,1219.67 1643.39,1219.25 1643.98,1217.73 1644.57,1218.43 1645.15,1218.12 1645.74,1216.29 1646.33,1217.24 1646.91,1214.3 1647.5,1212.61 1648.09,1212.89 1648.67,1213.14 1649.26,1211.71 1649.84,1214.49 1650.43,1214.38 1651.02,1212.87 1651.6,1210.28 1652.19,1210.54 1652.78,1213.74 1653.36,1214 1653.95,1213.95 1654.54,1213.61 1655.12,1212.12 1655.71,1211.97 1656.29,1210.6 1656.88,1213.63 1657.47,1213.44 1658.05,1217.79 1658.64,1217.78 1659.23,1220.32 1659.81,1219.99 1660.4,1219.51 1660.99,1217.62 1661.57,1220.52 1662.16,1218.67 1662.75,1217.07 1663.33,1215.19 1663.92,1216.76 1664.5,1215.18 1665.09,1213.84 1665.68,1216.87 1666.26,1213.74 1666.85,1215.31 1667.44,1215.21 1668.02,1216.65 1668.61,1214.78 1669.2,1216.1 1669.78,1216.94 1670.37,1215.03 1670.96,1213.51 1671.54,1211.82 1672.13,1212.01 1672.71,1212.01 1673.3,1210.57 1673.89,1214.85 1674.47,1212.15 1675.06,1212.27 1675.65,1210.69 1676.23,1209.08 1676.82,1210.73 1677.41,1210.83 1677.99,1209.84 1678.58,1214.21 1679.17,1215.53 1679.75,1218.72 1680.34,1221.13 1680.92,1219.19 1681.51,1214.31 1682.1,1210.06 1682.68,1216.08 1683.27,1215.8 1683.86,1215.58 1684.44,1218.22 1685.03,1217.98 1685.62,1218.83 1686.2,1217.49 1686.79,1214.4 1687.37,1214.49 1687.96,1214.72 1688.55,1214.47 1689.13,1212.96 1689.72,1212.85 1690.31,1212.89 1690.89,1214.26 1691.48,1212.66 1692.07,1212.73 1692.65,1214.38 1693.24,1215.63 1693.83,1218.38 1694.41,1219.68 1695,1220.78 1695.58,1221.75 1696.17,1221.24 1696.76,1219.53 1697.34,1216.22 1697.93,1215.76 1698.52,1217.34 1699.1,1221.47 1699.69,1219.99 1700.28,1222.34 1700.86,1221.87 1701.45,1221.29 1702.04,1220.74 1702.62,1223.05 1703.21,1222.28 1703.79,1220.66 1704.38,1214.51 1704.97,1213.26 1705.55,1214.81 1706.14,1212.09 1706.73,1212.11 1707.31,1212.26 1707.9,1207.93 1708.49,1206.83 1709.07,1204.06 1709.66,1207.54 1710.24,1209.31 1710.83,1211.03 1711.42,1208.11 1712,1208.31 1712.59,1208.94 1713.18,1206.19 1713.76,1203.72 1714.35,1207.51 1714.94,1206.84 1715.52,1205.88 1716.11,1203.47 1716.7,1205.81 1717.28,1204.66 1717.87,1203.73 1718.45,1204.36 1719.04,1206.35 1719.63,1206.9 1720.21,1208.98 1720.8,1209.41 1721.39,1208.29 1721.97,1208.83 1722.56,1210.53 1723.15,1212.17 1723.73,1214.86 1724.32,1215 1724.91,1216.31 1725.49,1219.13 1726.08,1218.95 1726.66,1218.65 1727.25,1220.04 1727.84,1221.26 1728.42,1220.92 1729.01,1220.41 1729.6,1222.77 1730.18,1220.61 1730.77,1218.84 1731.36,1222.76 1731.94,1221.23 1732.53,1217.67 1733.11,1217.52 1733.7,1212.86 1734.29,1214.4 1734.87,1212.63 1735.46,1215.42 1736.05,1214.84 1736.63,1213.27 1737.22,1216.16 1737.81,1217.74 1738.39,1216.16 1738.98,1216.25 1739.57,1214.41 1740.15,1213.17 1740.74,1208.65 1741.32,1207.49 1741.91,1207.97 1742.5,1205.61 1743.08,1205.92 1743.67,1206.2 1744.26,1207.89 1744.84,1208.41 1745.43,1211.57 1746.02,1211.62 1746.6,1214.74 1747.19,1216 1747.78,1214.57 1748.36,1210.05 1748.95,1208.81 1749.53,1210.36 1750.12,1211.96 1750.71,1210.86 1751.29,1210.99 1751.88,1209.84 1752.47,1209.96 1753.05,1208.51 1753.64,1205.98 1754.23,1207.8 1754.81,1208.52 1755.4,1212.96 1755.99,1214.25 1756.57,1212.79 1757.16,1210.15 1757.74,1210.12 1758.33,1208.88 1758.92,1207.9 1759.5,1208.34 1760.09,1205.91 1760.68,1206.29 1761.26,1205.22 1761.85,1207.17 1762.44,1207.61 1763.02,1208.02 1763.61,1206.89 1764.19,1205.5 1764.78,1208.97 1765.37,1211.86 1765.95,1207.43 1766.54,1207.89 1767.13,1208.32 1767.71,1208.59 1768.3,1210.17 1768.89,1208.92 1769.47,1209.03 1770.06,1209 1770.65,1210.84 1771.23,1212.51 1771.82,1210.88 1772.4,1209.8 1772.99,1211.51 1773.58,1211.88 1774.16,1213.61 1774.75,1215.17 1775.34,1216.66 1775.92,1216.68 1776.51,1216.67 1777.1,1216.66 1777.68,1216.07 1778.27,1215.61 1778.86,1216.76 1779.44,1216.64 1780.03,1216.47 1780.61,1213.21 1781.2,1214.52 1781.79,1212.85 1782.37,1211.29 1782.96,1211.46 1783.55,1213.31 1784.13,1214.57 1784.72,1214.58 1785.31,1216.12 1785.89,1217.31 1786.48,1215.51 1787.06,1215.03 1787.65,1214.77 1788.24,1216.11 1788.82,1214.29 1789.41,1213.94 1790,1213.5 1790.58,1216.36 1791.17,1216.06 1791.76,1217.11 1792.34,1216.83 1792.93,1215.34 1793.52,1216.85 1794.1,1218.13 1794.69,1220.31 1795.27,1220.08 1795.86,1220.04 1796.45,1218.53 1797.03,1221.44 1797.62,1224.23 1798.21,1222.07 1798.79,1223.22 1799.38,1222.8 1799.97,1222.33 1800.55,1224.32 1801.14,1222.37 1801.73,1222.16 1802.31,1223.09 1802.9,1221.07 1803.48,1220.73 1804.07,1220.71 1804.66,1217.3 1805.24,1216.87 1805.83,1216.73 1806.42,1216.76 1807,1217.92 1807.59,1216.4 1808.18,1214.68 1808.76,1215.81 1809.35,1217.5 1809.94,1218.72 1810.52,1217.05 1811.11,1216.76 1811.69,1217.89 1812.28,1220.44 1812.87,1221.41 1813.45,1219.92 1814.04,1216.87 1814.63,1215.38 1815.21,1215.58 1815.8,1215.31 1816.39,1216.36 1816.97,1213.19 1817.56,1211.82 1818.14,1213.51 1818.73,1211.92 1819.32,1210.35 1819.9,1211.88 1820.49,1210.46 1821.08,1210.8 1821.66,1213.49 1822.25,1214.84 1822.84,1214.76 1823.42,1214.58 1824.01,1212.98 1824.6,1216.01 1825.18,1216.1 1825.77,1217.52 1826.35,1217.44 1826.94,1215.81 1827.53,1215.71 1828.11,1215.8 1828.7,1215.54 1829.29,1217.02 1829.87,1218.63 1830.46,1218.28 1831.05,1216.65 1831.63,1218.07 1832.22,1217.82 1832.81,1214.55 1833.39,1213.02 1833.98,1211.78 1834.56,1213.11 1835.15,1214.3 1835.74,1209.96 1836.32,1211.49 1836.91,1210.1 1837.5,1210.27 1838.08,1208.69 1838.67,1211.59 1839.26,1207.51 1839.84,1209.08 1840.43,1201.72 1841.01,1200.76 1841.6,1201.32 1842.19,1203.39 1842.77,1206.73 1843.36,1209.88 1843.95,1210.04 1844.53,1212.17 1845.12,1212.15 1845.71,1213.26 1846.29,1213.46 1846.88,1213.53 1847.47,1211.59 1848.05,1213.07 1848.64,1210.13 1849.22,1207.59 1849.81,1206.43 1850.4,1208.1 1850.98,1208.13 1851.57,1205.36 1852.16,1205.8 1852.74,1204.69 1853.33,1205.38 1853.92,1205.89 1854.5,1206.04 1855.09,1205.14 1855.68,1202.76 1856.26,1204.85 1856.85,1203.77 1857.43,1207.07 1858.02,1207.36 1858.61,1206.19 1859.19,1208 1859.78,1207.17 1860.37,1205.99 1860.95,1207.98 1861.54,1205.56 1862.13,1206.21 1862.71,1208.33 1863.3,1207.33 1863.88,1212.03 1864.47,1212.05 1865.06,1213.54 1865.64,1213.58 1866.23,1213.75 1866.82,1213.68 1867.4,1215.04 1867.99,1215.01 1868.58,1213.8 1869.16,1213.69 1869.75,1215.18 1870.34,1216.6 1870.92,1216.47 1871.51,1213.66 1872.09,1215.22 1872.68,1218.06 1873.27,1219.21 1873.85,1217.48 1874.44,1217.49 1875.03,1215.7 1875.61,1216.96 1876.2,1215.24 1876.79,1213.37 1877.37,1214.59 1877.96,1215.88 1878.55,1215.78 1879.13,1213.99 1879.72,1213.94 1880.3,1214.02 1880.89,1212.41 1881.48,1212.15 1882.06,1213.73 1882.65,1215.31 1883.24,1215.17 1883.82,1213.26 1884.41,1214.42 1885,1216.81 1885.58,1213.93 1886.17,1212.17 1886.76,1212.18 1887.34,1213.54 1887.93,1213.49 1888.51,1213.52 1889.1,1216.25 1889.69,1216.11 1890.27,1214.41 1890.86,1213.12 1891.45,1211.35 1892.03,1212.99 1892.62,1211.53 1893.21,1214.37 1893.79,1215.9 1894.38,1216.07 1894.96,1217.64 1895.55,1217.5 1896.14,1215.77 1896.72,1215.64 1897.31,1212.51 1897.9,1214.06 1898.48,1215.69 1899.07,1218.61 1899.66,1215.57 1900.24,1213.76 1900.83,1215.07 1901.42,1214.8 1902,1213.11 1902.59,1207.24 1903.17,1206.45 1903.76,1208.35 1904.35,1209.9 1904.93,1214.76 1905.52,1214.79 1906.11,1214.78 1906.69,1216.12 1907.28,1217.53 1907.87,1216 1908.45,1214.47 1909.04,1212.75 1909.63,1212.73 1910.21,1212.83 1910.8,1211.38 1911.38,1209.71 1911.97,1208.27 1912.56,1208.61 1913.14,1209.04 1913.73,1207.94 1914.32,1209.53 1914.9,1208.23 1915.49,1208.57 1916.08,1210.17 1916.66,1211.87 1917.25,1210.45 1917.83,1210.56 1918.42,1212.21 1919.01,1212.28 1919.59,1212.64 1920.18,1214.14 1920.77,1217.09 1921.35,1216.77 1921.94,1215.14 1922.53,1215.1 1923.11,1215.38 1923.7,1215.1 1924.29,1214.95 1924.87,1215.04 1925.46,1210.82 1926.04,1210.77 1926.63,1209.28 1927.22,1211.98 1927.8,1216.32 1928.39,1214.73 1928.98,1213.31 1929.56,1212.78 1930.15,1212.99 1930.74,1210.05 1931.32,1211.86 1931.91,1212.08 1932.5,1212.26 1933.08,1211.06 1933.67,1211.15 1934.25,1211.67 1934.84,1211.68 1935.43,1212.02 1936.01,1213.62 1936.6,1212.03 1937.19,1210.52 1937.77,1209.18 1938.36,1212.17 1938.95,1213.46 1939.53,1214.92 1940.12,1216.08 1940.71,1217.22 1941.29,1217.13 1941.88,1216.96 1942.46,1216.9 1943.05,1215.23 1943.64,1214.98 1944.22,1213.63 1944.81,1216.27 1945.4,1219.41 1945.98,1218.98 1946.57,1217.26 1947.16,1218.68 1947.74,1220.02 1948.33,1219.74 1948.91,1216.59 1949.5,1214.91 1950.09,1213.2 1950.67,1213.2 1951.26,1213.32 1951.85,1211.81 1952.43,1210.22 1953.02,1206.49 1953.61,1205.56 1954.19,1207.12 1954.78,1207.83 1955.37,1208.4 1955.95,1208.57 1956.54,1208.53 1957.12,1209.99 1957.71,1212.62 1958.3,1211.07 1958.88,1209.73 1959.47,1209.98 1960.06,1208.45 1960.64,1207.09 1961.23,1207.39 1961.82,1206 1962.4,1205.01 1962.99,1206.97 1963.58,1208.88 1964.16,1208.95 1964.75,1209.39 1965.33,1213.89 1965.92,1212.22 1966.51,1210.81 1967.09,1209.59 1967.68,1208.51 1968.27,1210.16 1968.85,1210.2 1969.44,1208.88 1970.03,1210.36 1970.61,1211.86 1971.2,1213.31 1971.78,1212.05 1972.37,1213.32 1972.96,1214.56 1973.54,1215.84 1974.13,1221.2 1974.72,1222.04 1975.3,1221.22 1975.89,1222.54 1976.48,1220.72 1977.06,1219.1 1977.65,1218.9 1978.24,1220.03 1978.82,1218 1979.41,1216.29 1979.99,1217.32 1980.58,1214.33 1981.17,1214.51 1981.75,1217.24 1982.34,1219.8 1982.93,1219.41 1983.51,1218.78 1984.1,1221.44 1984.69,1222.29 1985.27,1219.07 1985.86,1217.37 1986.45,1216.1 1987.03,1215.98 1987.62,1215.93 1988.2,1214.38 1988.79,1214.17 1989.38,1216.99 1989.96,1215.53 1990.55,1216.68 1991.14,1213.67 1991.72,1213.04 1992.31,1215.83 1992.9,1217.08 1993.48,1216.53 1994.07,1214.66 1994.65,1213.32 1995.24,1216.15 1995.83,1216.13 1996.41,1213.01 1997,1215.73 1997.59,1215.64 1998.17,1213.99 1998.76,1216.72 1999.35,1216.49 1999.93,1214.98 2000.52,1213.16 2001.11,1211.44 2001.69,1214.75 2002.28,1216.25 2002.86,1217.24 2003.45,1216.88 2004.04,1213.87 2004.62,1215.32 2005.21,1215.45 2005.8,1213.95 2006.38,1211.12 2006.97,1211.23 2007.56,1209.64 2008.14,1205.32 2008.73,1208.38 2009.32,1209.08 2009.9,1210.92 2010.49,1211.09 2011.07,1209.46 2011.66,1208.28 2012.25,1206.98 2012.83,1205.85 2013.42,1206.55 2014.01,1208.35 2014.59,1207.39 2015.18,1206.53 2015.77,1206.85 2016.35,1205.85 2016.94,1206.01 2017.53,1207.72 2018.11,1206.62 2018.7,1203.87 2019.28,1207.3 2019.87,1207.89 2020.46,1209.81 2021.04,1210.15 2021.63,1210.28 2022.22,1211.92 2022.8,1212.89 2023.39,1211.33 2023.98,1212.74 2024.56,1214.6 2025.15,1214.68 2025.73,1215.98 2026.32,1217.27 2026.91,1216.94 2027.49,1216.48 2028.08,1217.27 2028.67,1218.42 2029.25,1216.51 2029.84,1214.86 2030.43,1216.06 2031.01,1213.31 2031.6,1214.74 2032.19,1214.95 2032.77,1216.42 2033.36,1216.17 2033.94,1217.44 2034.53,1217.46 2035.12,1214.54 2035.7,1216.21 2036.29,1215.91 2036.88,1214.12 2037.46,1214.19 2038.05,1212.71 2038.64,1209.8 2039.22,1209.83 2039.81,1211.37 2040.4,1211.85 2040.98,1213.24 2041.57,1213.23 2042.15,1213.17 2042.74,1213.24 2043.33,1211.85 2043.91,1211.92 2044.5,1207.53 2045.09,1207.92 2045.67,1209.63 2046.26,1212.77 2046.85,1212.68 2047.43,1214.28 2048.02,1214.51 2048.6,1213.04 2049.19,1213.26 2049.78,1211.64 2050.36,1216.49 2050.95,1213.62 2051.54,1212.13 2052.12,1210.86 2052.71,1210.77 2053.3,1212.43 2053.88,1215.47 2054.47,1216.84 2055.06,1219.68 2055.64,1219.64 2056.23,1219.18 2056.81,1219.12 2057.4,1218.87 2057.99,1215.44 2058.57,1215.2 2059.16,1215.15 2059.75,1213.86 2060.33,1215.22 2060.92,1215.42 2061.51,1215.28 2062.09,1213.62 2062.68,1213.65 2063.27,1209.34 2063.85,1207.89 2064.44,1210.99 2065.02,1208.64 2065.61,1208.79 2066.2,1213.24 2066.78,1216.01 2067.37,1217.27 2067.96,1217.25 2068.54,1214.03 2069.13,1214.06 2069.72,1217.29 2070.3,1217.17 2070.89,1218.49 2071.48,1218.51 2072.06,1221.32 2072.65,1219.71 2073.23,1220.79 2073.82,1218.73 2074.41,1219.68 2074.99,1220.81 2075.58,1221.67 2076.17,1222.39 2076.75,1223.24 2077.34,1222.6 2077.93,1223.59 2078.51,1221.46 2079.1,1222.24 2079.68,1220.43 2080.27,1220.24 2080.86,1221.33 2081.44,1221.08 2082.03,1216.43 2082.62,1214.98 2083.2,1213.54 2083.79,1215.23 2084.38,1215.2 2084.96,1214.95 2085.55,1213.26 2086.14,1210.4 2086.72,1210.83 2087.31,1211.07 2087.89,1212.48 2088.48,1213.6 2089.07,1211.89 2089.65,1213.33 2090.24,1209.11 2090.83,1209.3 2091.41,1209.44 2092,1209.81 2092.59,1212.52 2093.17,1212.58 2093.76,1212.51 2094.35,1216.76 2094.93,1216.55 2095.52,1210.83 2096.1,1211.01 2096.69,1212.73 2097.28,1212.89 2097.86,1214.14 2098.45,1215.47 2099.04,1215.25 2099.62,1211.99 2100.21,1214.66 2100.8,1214.73 2101.38,1216.16 2101.97,1217.22 2102.55,1218.24 2103.14,1215.16 2103.73,1216.31 2104.31,1217.16 2104.9,1214.32 2105.49,1214.97 2106.07,1212.3 2106.66,1213.72 2107.25,1213.38 2107.83,1212.29 2108.42,1210.54 2109.01,1208 2109.59,1211.12 2110.18,1211.15 2110.76,1211.14 2111.35,1212.56 2111.94,1206.5 2112.52,1205.31 2113.11,1204.22 2113.7,1206.37 2114.28,1208.45 2114.87,1207.25 2115.46,1207.82 2116.04,1208 2116.63,1206.71 2117.22,1207.17 2117.8,1206.34 2118.39,1209.54 2118.97,1212.94 2119.56,1211.69 2120.15,1211.77 2120.73,1212.94 2121.32,1212.99 2121.91,1214.69 2122.49,1213.12 2123.08,1211.99 2123.67,1210.45 2124.25,1210.69 2124.84,1210.96 2125.42,1213.94 2126.01,1212.77 2126.6,1213.05 2127.18,1212.98 2127.77,1212.92 2128.36,1214.16 2128.94,1212.61 2129.53,1212.69 2130.12,1212.72 2130.7,1214.24 2131.29,1215.58 2131.88,1220.88 2132.46,1218.95 2133.05,1221.58 2133.63,1216.67 2134.22,1219.52 2134.81,1214.67 2135.39,1216.31 2135.98,1216.06 2136.57,1215.52 2137.15,1215.7 2137.74,1217.15 2138.33,1217.12 2138.91,1215.81 2139.5,1211.47 2140.09,1208.78 2140.67,1207.69 2141.26,1208.25 2141.84,1211.1 2142.43,1209.89 2143.02,1208.61 2143.6,1206.19 2144.19,1205.24 2144.78,1207.14 2145.36,1205.93 2145.95,1204.66 2146.54,1203.62 2147.12,1204.09 2147.71,1207.16 2148.3,1206.2 2148.88,1207.78 2149.47,1208.11 2150.05,1207.25 2150.64,1207.88 2151.23,1208.45 2151.81,1208.76 2152.4,1210.31 2152.99,1209.13 2153.57,1209.37 2154.16,1206.83 2154.75,1207.18 2155.33,1206.16 2155.92,1204.96 2156.5,1205.33 2157.09,1207.24 2157.68,1207.45 2158.26,1207.4 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1213.58 L986.612 1213.58 L987.198 1213.58 L987.785 1213.58 L988.371 1213.58 L988.957 1213.58 L989.544 1213.58 L990.13 1213.58 L990.717 1213.58 L991.303 1213.58 L991.889 1213.58 L992.476 1213.58 L993.062 1213.58 L993.649 1213.58 L994.235 1213.58 L994.822 1213.58 L995.408 1213.58 L995.994 1213.58 L996.581 1213.58 L997.167 1213.58 L997.754 1213.58 L998.34 1213.58 L998.926 1213.58 L999.513 1213.58 L1000.1 1213.58 L1000.69 1213.58 L1001.27 1213.58 L1001.86 1213.58 L1002.44 1213.58 L1003.03 1213.58 L1003.62 1213.58 L1004.2 1213.58 L1004.79 1213.58 L1005.38 1213.58 L1005.96 1213.58 L1006.55 1213.58 L1007.14 1213.58 L1007.72 1213.58 L1008.31 1213.58 L1008.9 1213.58 L1009.48 1213.58 L1010.07 1213.58 L1010.65 1213.58 L1011.24 1213.58 L1011.83 1213.58 L1012.41 1213.58 L1013 1213.58 L1013.59 1213.58 L1014.17 1213.58 L1014.76 1213.58 L1015.35 1213.58 L1015.93 1213.58 L1016.52 1213.58 L1017.11 1213.58 L1017.69 1213.58 L1018.28 1213.58 L1018.86 1213.58 L1019.45 1213.58 L1020.04 1213.58 L1020.62 1213.58 L1021.21 1213.58 L1021.8 1213.58 L1022.38 1213.58 L1022.97 1213.58 L1023.56 1213.58 L1024.14 1213.58 L1024.73 1213.58 L1025.32 1213.58 L1025.9 1213.58 L1026.49 1213.58 L1027.07 1213.58 L1027.66 1213.58 L1028.25 1213.58 L1028.83 1213.58 L1029.42 1213.58 L1030.01 1213.58 L1030.59 1213.58 L1031.18 1213.58 L1031.77 1213.58 L1032.35 1213.58 L1032.94 1213.58 L1033.52 1213.58 L1034.11 1213.58 L1034.7 1213.58 L1035.28 1213.58 L1035.87 1213.58 L1036.46 1213.58 L1037.04 1213.58 L1037.63 1213.58 L1038.22 1213.58 L1038.8 1213.58 L1039.39 1213.58 L1039.98 1213.58 L1040.56 1213.58 L1041.15 1213.58 L1041.73 1213.58 L1042.32 1213.58 L1042.91 1213.58 L1043.49 1213.58 L1044.08 1213.58 L1044.67 1213.58 L1045.25 1213.58 L1045.84 1213.58 L1046.43 1213.58 L1047.01 1213.58 L1047.6 1213.58 L1048.19 1213.58 L1048.77 1213.58 L1049.36 1213.58 L1049.94 1213.58 L1050.53 1213.58 L1051.12 1213.58 L1051.7 1213.58 L1052.29 1213.58 L1052.88 1213.58 L1053.46 1213.58 L1054.05 1213.58 L1054.64 1213.58 L1055.22 1213.58 L1055.81 1213.58 L1056.39 1213.58 L1056.98 1213.58 L1057.57 1213.58 L1058.15 1213.58 L1058.74 1213.58 L1059.33 1213.58 L1059.91 1213.58 L1060.5 1213.58 L1061.09 1213.58 L1061.67 1213.58 L1062.26 1213.58 L1062.85 1213.58 L1063.43 1213.58 L1064.02 1213.58 L1064.6 1213.58 L1065.19 1213.58 L1065.78 1213.58 L1066.36 1213.58 L1066.95 1213.58 L1067.54 1213.58 L1068.12 1213.58 L1068.71 1213.58 L1069.3 1213.58 L1069.88 1213.58 L1070.47 1213.58 L1071.06 1213.58 L1071.64 1213.58 L1072.23 1213.58 L1072.81 1213.58 L1073.4 1213.58 L1073.99 1213.58 L1074.57 1213.58 L1075.16 1213.58 L1075.75 1213.58 L1076.33 1213.58 L1076.92 1213.58 L1077.51 1213.58 L1078.09 1213.58 L1078.68 1213.58 L1079.26 1213.58 L1079.85 1213.58 L1080.44 1213.58 L1081.02 1213.58 L1081.61 1213.58 L1082.2 1213.58 L1082.78 1213.58 L1083.37 1213.58 L1083.96 1213.58 L1084.54 1213.58 L1085.13 1213.58 L1085.72 1213.58 L1086.3 1213.58 L1086.89 1213.58 L1087.47 1213.58 L1088.06 1213.58 L1088.65 1213.58 L1089.23 1213.58 L1089.82 1213.58 L1090.41 1213.58 L1090.99 1213.58 L1091.58 1213.58 L1092.17 1213.58 L1092.75 1213.58 L1093.34 1213.58 L1093.93 1213.58 L1094.51 1213.58 L1095.1 1213.58 L1095.68 1213.58 L1096.27 1213.58 L1096.86 1213.58 L1097.44 1213.58 L1098.03 1213.58 L1098.62 1213.58 L1099.2 1213.58 L1099.79 1213.58 L1100.38 1213.58 L1100.96 1213.58 L1101.55 1213.58 L1102.14 1213.58 L1102.72 1213.58 L1103.31 1213.58 L1103.89 1213.58 L1104.48 1213.58 L1105.07 1213.58 L1105.65 1213.58 L1106.24 1213.58 L1106.83 1213.58 L1107.41 1213.58 L1108 1213.58 L1108.59 1213.58 L1109.17 1213.58 L1109.76 1213.58 L1110.34 1213.58 L1110.93 1213.58 L1111.52 1213.58 L1112.1 1213.58 L1112.69 1213.58 L1113.28 1213.58 L1113.86 1213.58 L1114.45 1213.58 L1115.04 1213.58 L1115.62 1213.58 L1116.21 1213.58 L1116.8 1213.58 L1117.38 1213.58 L1117.97 1213.58 L1118.55 1213.58 L1119.14 1213.58 L1119.73 1213.58 L1120.31 1213.58 L1120.9 1213.58 L1121.49 1213.58 L1122.07 1213.58 L1122.66 1213.58 L1123.25 1213.58 L1123.83 1213.58 L1124.42 1213.58 L1125.01 1213.58 L1125.59 1213.58 L1126.18 1213.58 L1126.76 1213.58 L1127.35 1213.58 L1127.94 1213.58 L1128.52 1213.58 L1129.11 1213.58 L1129.7 1213.58 L1130.28 1213.58 L1130.87 1213.58 L1131.46 1213.58 L1132.04 1213.58 L1132.63 1213.58 L1133.21 1213.58 L1133.8 1213.58 L1134.39 1213.58 L1134.97 1213.58 L1135.56 1213.58 L1136.15 1213.58 L1136.73 1213.58 L1137.32 1213.58 L1137.91 1213.58 L1138.49 1213.58 L1139.08 1213.58 L1139.67 1213.58 L1140.25 1213.58 L1140.84 1213.58 L1141.42 1213.58 L1142.01 1213.58 L1142.6 1213.58 L1143.18 1213.58 L1143.77 1213.58 L1144.36 1213.58 L1144.94 1213.58 L1145.53 1213.58 L1146.12 1213.58 L1146.7 1213.58 L1147.29 1213.58 L1147.88 1213.58 L1148.46 1213.58 L1149.05 1213.58 L1149.63 1213.58 L1150.22 1213.58 L1150.81 1213.58 L1151.39 1213.58 L1151.98 1213.58 L1152.57 1213.58 L1153.15 1213.58 L1153.74 1213.58 L1154.33 1213.58 L1154.91 1213.58 L1155.5 1213.58 L1156.09 1213.58 L1156.67 1213.58 L1157.26 1213.58 L1157.84 1213.58 L1158.43 1213.58 L1159.02 1213.58 L1159.6 1213.58 L1160.19 1213.58 L1160.78 1213.58 L1161.36 1213.58 L1161.95 1213.58 L1162.54 1213.58 L1163.12 1213.58 L1163.71 1213.58 L1164.29 1213.58 L1164.88 1213.58 L1165.47 1213.58 L1166.05 1213.58 L1166.64 1213.58 L1167.23 1213.58 L1167.81 1213.58 L1168.4 1213.58 L1168.99 1213.58 L1169.57 1213.58 L1170.16 1213.58 L1170.75 1213.58 L1171.33 1213.58 L1171.92 1213.58 L1172.5 1213.58 L1173.09 1213.58 L1173.68 1213.58 L1174.26 1213.58 L1174.85 1213.58 L1175.44 1213.58 L1176.02 1213.58 L1176.61 1213.58 L1177.2 1213.58 L1177.78 1213.58 L1178.37 1213.58 L1178.96 1213.58 L1179.54 1213.58 L1180.13 1213.58 L1180.71 1213.58 L1181.3 1213.58 L1181.89 1213.58 L1182.47 1213.58 L1183.06 1213.58 L1183.65 1213.58 L1184.23 1213.58 L1184.82 1213.58 L1185.41 1213.58 L1185.99 1213.58 L1186.58 1213.58 L1187.16 1213.58 L1187.75 1213.58 L1188.34 1213.58 L1188.92 1213.58 L1189.51 1213.58 L1190.1 1213.58 L1190.68 1213.58 L1191.27 1213.58 L1191.86 1213.58 L1192.44 1213.58 L1193.03 1213.58 L1193.62 1213.58 L1194.2 1213.58 L1194.79 1213.58 L1195.37 1213.58 L1195.96 1213.58 L1196.55 1213.58 L1197.13 1213.58 L1197.72 1213.58 L1198.31 1213.58 L1198.89 1213.58 L1199.48 1213.58 L1200.07 1213.58 L1200.65 1213.58 L1201.24 1213.58 L1201.83 1213.58 L1202.41 1213.58 L1203 1213.58 L1203.58 1213.58 L1204.17 1213.58 L1204.76 1213.58 L1205.34 1213.58 L1205.93 1213.58 L1206.52 1213.58 L1207.1 1213.58 L1207.69 1213.58 L1208.28 1213.58 L1208.86 1213.58 L1209.45 1213.58 L1210.03 1213.58 L1210.62 1213.58 L1211.21 1213.58 L1211.79 1213.58 L1212.38 1213.58 L1212.97 1213.58 L1213.55 1213.58 L1214.14 1213.58 L1214.73 1213.58 L1215.31 1213.58 L1215.9 1213.58 L1216.49 1213.58 L1217.07 1213.58 L1217.66 1213.58 L1218.24 1213.58 L1218.83 1213.58 L1219.42 1213.58 L1220 1213.58 L1220.59 1213.58 L1221.18 1213.58 L1221.76 1213.58 L1222.35 1213.58 L1222.94 1213.58 L1223.52 1213.58 L1224.11 1213.58 L1224.7 1213.58 L1225.28 1213.58 L1225.87 1213.58 L1226.45 1213.58 L1227.04 1213.58 L1227.63 1213.58 L1228.21 1213.58 L1228.8 1213.58 L1229.39 1213.58 L1229.97 1213.58 L1230.56 1213.58 L1231.15 1213.58 L1231.73 1213.58 L1232.32 1213.58 L1232.91 1213.58 L1233.49 1213.58 L1234.08 1213.58 L1234.66 1213.58 L1235.25 1213.58 L1235.84 1213.58 L1236.42 1213.58 L1237.01 1213.58 L1237.6 1213.58 L1238.18 1213.58 L1238.77 1213.58 L1239.36 1213.58 L1239.94 1213.58 L1240.53 1213.58 L1241.11 1213.58 L1241.7 1213.58 L1242.29 1213.58 L1242.87 1213.58 L1243.46 1213.58 L1244.05 1213.58 L1244.63 1213.58 L1245.22 1213.58 L1245.81 1213.58 L1246.39 1213.58 L1246.98 1213.58 L1247.57 1213.58 L1248.15 1213.58 L1248.74 1213.58 L1249.32 1213.58 L1249.91 1213.58 L1250.5 1213.58 L1251.08 1213.58 L1251.67 1213.58 L1252.26 1213.58 L1252.84 1213.58 L1253.43 1213.58 L1254.02 1213.58 L1254.6 1213.58 L1255.19 1213.58 L1255.78 1213.58 L1256.36 1213.58 L1256.95 1213.58 L1257.53 1213.58 L1258.12 1213.58 L1258.71 1213.58 L1259.29 1213.58 L1259.88 1213.58 L1260.47 1213.58 L1261.05 1213.58 L1261.64 1213.58 L1262.23 1213.58 L1262.81 1213.58 L1263.4 1213.58 L1263.98 1213.58 L1264.57 1213.58 L1265.16 1213.58 L1265.74 1213.58 L1266.33 1213.58 L1266.92 1213.58 L1267.5 1213.58 L1268.09 1213.58 L1268.68 1213.58 L1269.26 1213.58 L1269.85 1213.58 L1270.44 1213.58 L1271.02 1213.58 L1271.61 1213.58 L1272.19 1213.58 L1272.78 1213.58 L1273.37 1213.58 L1273.95 1213.58 L1274.54 1213.58 L1275.13 1213.58 L1275.71 1213.58 L1276.3 1213.58 L1276.89 1213.58 L1277.47 1213.58 L1278.06 1213.58 L1278.65 1213.58 L1279.23 1213.58 L1279.82 1213.58 L1280.4 1213.58 L1280.99 1213.58 L1281.58 1213.58 L1282.16 1213.58 L1282.75 1213.58 L1283.34 1213.58 L1283.92 1213.58 L1284.51 1213.58 L1285.1 1213.58 L1285.68 1213.58 L1286.27 1213.58 L1286.86 1213.58 L1287.44 1213.58 L1288.03 1213.58 L1288.61 1213.58 L1289.2 1213.58 L1289.79 1213.58 L1290.37 1213.58 L1290.96 1213.58 L1291.55 1213.58 L1292.13 1213.58 L1292.72 1213.58 L1293.31 1213.58 L1293.89 1213.58 L1294.48 1213.58 L1295.06 1213.58 L1295.65 1213.58 L1296.24 1213.58 L1296.82 1213.58 L1297.41 1213.58 L1298 1213.58 L1298.58 1213.58 L1299.17 1213.58 L1299.76 1213.58 L1300.34 1213.58 L1300.93 1213.58 L1301.52 1213.58 L1302.1 1213.58 L1302.69 1213.58 L1303.27 1213.58 L1303.86 1213.58 L1304.45 1213.58 L1305.03 1213.58 L1305.62 1213.58 L1306.21 1213.58 L1306.79 1213.58 L1307.38 1213.58 L1307.97 1213.58 L1308.55 1213.58 L1309.14 1213.58 L1309.73 1213.58 L1310.31 1213.58 L1310.9 1213.58 L1311.48 1213.58 L1312.07 1213.58 L1312.66 1213.58 L1313.24 1213.58 L1313.83 1213.58 L1314.42 1213.58 L1315 1213.58 L1315.59 1213.58 L1316.18 1213.58 L1316.76 1213.58 L1317.35 1213.58 L1317.93 1213.58 L1318.52 1213.58 L1319.11 1213.58 L1319.69 1213.58 L1320.28 1213.58 L1320.87 1213.58 L1321.45 1213.58 L1322.04 1213.58 L1322.63 1213.58 L1323.21 1213.58 L1323.8 1213.58 L1324.39 1213.58 L1324.97 1213.58 L1325.56 1213.58 L1326.14 1213.58 L1326.73 1213.58 L1327.32 1213.58 L1327.9 1213.58 L1328.49 1213.58 L1329.08 1213.58 L1329.66 1213.58 L1330.25 1213.58 L1330.84 1213.58 L1331.42 1213.58 L1332.01 1213.58 L1332.6 1213.58 L1333.18 1213.58 L1333.77 1213.58 L1334.35 1213.58 L1334.94 1213.58 L1335.53 1213.58 L1336.11 1213.58 L1336.7 1213.58 L1337.29 1213.58 L1337.87 1213.58 L1338.46 1213.58 L1339.05 1213.58 L1339.63 1213.58 L1340.22 1213.58 L1340.8 1213.58 L1341.39 1213.58 L1341.98 1213.58 L1342.56 1213.58 L1343.15 1213.58 L1343.74 1213.58 L1344.32 1213.58 L1344.91 1213.58 L1345.5 1213.58 L1346.08 1213.58 L1346.67 1213.58 L1347.26 1213.58 L1347.84 1213.58 L1348.43 1213.58 L1349.01 1213.58 L1349.6 1213.58 L1350.19 1213.58 L1350.77 1213.58 L1351.36 1213.58 L1351.95 1213.58 L1352.53 1213.58 L1353.12 1213.58 L1353.71 1213.58 L1354.29 1213.58 L1354.88 1213.58 L1355.47 1213.58 L1356.05 1213.58 L1356.64 1213.58 L1357.22 1213.58 L1357.81 1213.58 L1358.4 1213.58 L1358.98 1213.58 L1359.57 1213.58 L1360.16 1213.58 L1360.74 1213.58 L1361.33 1213.58 L1361.92 1213.58 L1362.5 1213.58 L1363.09 1213.58 L1363.68 1213.58 L1364.26 1213.58 L1364.85 1213.58 L1365.43 1213.58 L1366.02 1213.58 L1366.61 1213.58 L1367.19 1213.58 L1367.78 1213.58 L1368.37 1213.58 L1368.95 1213.58 L1369.54 1213.58 L1370.13 1213.58 L1370.71 1213.58 L1371.3 1213.58 L1371.88 1213.58 L1372.47 1213.58 L1373.06 1213.58 L1373.64 1213.58 L1374.23 1213.58 L1374.82 1213.58 L1375.4 1213.58 L1375.99 1213.58 L1376.58 1213.58 L1377.16 1213.58 L1377.75 1213.58 L1378.34 1213.58 L1378.92 1213.58 L1379.51 1213.58 L1380.09 1213.58 L1380.68 1213.58 L1381.27 1213.58 L1381.85 1213.58 L1382.44 1213.58 L1383.03 1213.58 L1383.61 1213.58 L1384.2 1213.58 L1384.79 1213.58 L1385.37 1213.58 L1385.96 1213.58 L1386.55 1213.58 L1387.13 1213.58 L1387.72 1213.58 L1388.3 1213.58 L1388.89 1213.58 L1389.48 1213.58 L1390.06 1213.58 L1390.65 1213.58 L1391.24 1213.58 L1391.82 1213.58 L1392.41 1213.58 L1393 1213.58 L1393.58 1213.58 L1394.17 1213.58 L1394.75 1213.58 L1395.34 1213.58 L1395.93 1213.58 L1396.51 1213.58 L1397.1 1213.58 L1397.69 1213.58 L1398.27 1213.58 L1398.86 1213.58 L1399.45 1213.58 L1400.03 1213.58 L1400.62 1213.58 L1401.21 1213.58 L1401.79 1213.58 L1402.38 1213.58 L1402.96 1213.58 L1403.55 1213.58 L1404.14 1213.58 L1404.72 1213.58 L1405.31 1213.58 L1405.9 1213.58 L1406.48 1213.58 L1407.07 1213.58 L1407.66 1213.58 L1408.24 1213.58 L1408.83 1213.58 L1409.42 1213.58 L1410 1213.58 L1410.59 1213.58 L1411.17 1213.58 L1411.76 1213.58 L1412.35 1213.58 L1412.93 1213.58 L1413.52 1213.58 L1414.11 1213.58 L1414.69 1213.58 L1415.28 1213.58 L1415.87 1213.58 L1416.45 1213.58 L1417.04 1213.58 L1417.63 1213.58 L1418.21 1213.58 L1418.8 1213.58 L1419.38 1213.58 L1419.97 1213.58 L1420.56 1213.58 L1421.14 1213.58 L1421.73 1213.58 L1422.32 1213.58 L1422.9 1213.58 L1423.49 1213.58 L1424.08 1213.58 L1424.66 1213.58 L1425.25 1213.58 L1425.83 1213.58 L1426.42 1213.58 L1427.01 1213.58 L1427.59 1213.58 L1428.18 1213.58 L1428.77 1213.58 L1429.35 1213.58 L1429.94 1213.58 L1430.53 1213.58 L1431.11 1213.58 L1431.7 1213.58 L1432.29 1213.58 L1432.87 1213.58 L1433.46 1213.58 L1434.04 1213.58 L1434.63 1213.58 L1435.22 1213.58 L1435.8 1213.58 L1436.39 1213.58 L1436.98 1213.58 L1437.56 1213.58 L1438.15 1213.58 L1438.74 1213.58 L1439.32 1213.58 L1439.91 1213.58 L1440.5 1213.58 L1441.08 1213.58 L1441.67 1213.58 L1442.25 1213.58 L1442.84 1213.58 L1443.43 1213.58 L1444.01 1213.58 L1444.6 1213.58 L1445.19 1213.58 L1445.77 1213.58 L1446.36 1213.58 L1446.95 1213.58 L1447.53 1213.58 L1448.12 1213.58 L1448.7 1213.58 L1449.29 1213.58 L1449.88 1213.58 L1450.46 1213.58 L1451.05 1213.58 L1451.64 1213.58 L1452.22 1213.58 L1452.81 1213.58 L1453.4 1213.58 L1453.98 1213.58 L1454.57 1213.58 L1455.16 1213.58 L1455.74 1213.58 L1456.33 1213.58 L1456.91 1213.58 L1457.5 1213.58 L1458.09 1213.58 L1458.67 1213.58 L1459.26 1213.58 L1459.85 1213.58 L1460.43 1213.58 L1461.02 1213.58 L1461.61 1213.58 L1462.19 1213.58 L1462.78 1213.58 L1463.37 1213.58 L1463.95 1213.58 L1464.54 1213.58 L1465.12 1213.58 L1465.71 1213.58 L1466.3 1213.58 L1466.88 1213.58 L1467.47 1213.58 L1468.06 1213.58 L1468.64 1213.58 L1469.23 1213.58 L1469.82 1213.58 L1470.4 1213.58 L1470.99 1213.58 L1471.57 1213.58 L1472.16 1213.58 L1472.75 1213.58 L1473.33 1213.58 L1473.92 1213.58 L1474.51 1213.58 L1475.09 1213.58 L1475.68 1213.58 L1476.27 1213.58 L1476.85 1213.58 L1477.44 1213.58 L1478.03 1213.58 L1478.61 1213.58 L1479.2 1213.58 L1479.78 1213.58 L1480.37 1213.58 L1480.96 1213.58 L1481.54 1213.58 L1482.13 1213.58 L1482.72 1213.58 L1483.3 1213.58 L1483.89 1213.58 L1484.48 1213.58 L1485.06 1213.58 L1485.65 1213.58 L1486.24 1213.58 L1486.82 1213.58 L1487.41 1213.58 L1487.99 1213.58 L1488.58 1213.58 L1489.17 1213.58 L1489.75 1213.58 L1490.34 1213.58 L1490.93 1213.58 L1491.51 1213.58 L1492.1 1213.58 L1492.69 1213.58 L1493.27 1213.58 L1493.86 1213.58 L1494.45 1213.58 L1495.03 1213.58 L1495.62 1213.58 L1496.2 1213.58 L1496.79 1213.58 L1497.38 1213.58 L1497.96 1213.58 L1498.55 1213.58 L1499.14 1213.58 L1499.72 1213.58 L1500.31 1213.58 L1500.9 1213.58 L1501.48 1213.58 L1502.07 1213.58 L1502.65 1213.58 L1503.24 1213.58 L1503.83 1213.58 L1504.41 1213.58 L1505 1213.58 L1505.59 1213.58 L1506.17 1213.58 L1506.76 1213.58 L1507.35 1213.58 L1507.93 1213.58 L1508.52 1213.58 L1509.11 1213.58 L1509.69 1213.58 L1510.28 1213.58 L1510.86 1213.58 L1511.45 1213.58 L1512.04 1213.58 L1512.62 1213.58 L1513.21 1213.58 L1513.8 1213.58 L1514.38 1213.58 L1514.97 1213.58 L1515.56 1213.58 L1516.14 1213.58 L1516.73 1213.58 L1517.32 1213.58 L1517.9 1213.58 L1518.49 1213.58 L1519.07 1213.58 L1519.66 1213.58 L1520.25 1213.58 L1520.83 1213.58 L1521.42 1213.58 L1522.01 1213.58 L1522.59 1213.58 L1523.18 1213.58 L1523.77 1213.58 L1524.35 1213.58 L1524.94 1213.58 L1525.52 1213.58 L1526.11 1213.58 L1526.7 1213.58 L1527.28 1213.58 L1527.87 1213.58 L1528.46 1213.58 L1529.04 1213.58 L1529.63 1213.58 L1530.22 1213.58 L1530.8 1213.58 L1531.39 1213.58 L1531.98 1213.58 L1532.56 1213.58 L1533.15 1213.58 L1533.73 1213.58 L1534.32 1213.58 L1534.91 1213.58 L1535.49 1213.58 L1536.08 1213.58 L1536.67 1213.58 L1537.25 1213.58 L1537.84 1213.58 L1538.43 1213.58 L1539.01 1213.58 L1539.6 1213.58 L1540.19 1213.58 L1540.77 1213.58 L1541.36 1213.58 L1541.94 1213.58 L1542.53 1213.58 L1543.12 1213.58 L1543.7 1213.58 L1544.29 1213.58 L1544.88 1213.58 L1545.46 1213.58 L1546.05 1213.58 L1546.64 1213.58 L1547.22 1213.58 L1547.81 1213.58 L1548.4 1213.58 L1548.98 1213.58 L1549.57 1213.58 L1550.15 1213.58 L1550.74 1213.58 L1551.33 1213.58 L1551.91 1213.58 L1552.5 1213.58 L1553.09 1213.58 L1553.67 1213.58 L1554.26 1213.58 L1554.85 1213.58 L1555.43 1213.58 L1556.02 1213.58 L1556.6 1213.58 L1557.19 1213.58 L1557.78 1213.58 L1558.36 1213.58 L1558.95 1213.58 L1559.54 1213.58 L1560.12 1213.58 L1560.71 1213.58 L1561.3 1213.58 L1561.88 1213.58 L1562.47 1213.58 L1563.06 1213.58 L1563.64 1213.58 L1564.23 1213.58 L1564.81 1213.58 L1565.4 1213.58 L1565.99 1213.58 L1566.57 1213.58 L1567.16 1213.58 L1567.75 1213.58 L1568.33 1213.58 L1568.92 1213.58 L1569.51 1213.58 L1570.09 1213.58 L1570.68 1213.58 L1571.27 1213.58 L1571.85 1213.58 L1572.44 1213.58 L1573.02 1213.58 L1573.61 1213.58 L1574.2 1213.58 L1574.78 1213.58 L1575.37 1213.58 L1575.96 1213.58 L1576.54 1213.58 L1577.13 1213.58 L1577.72 1213.58 L1578.3 1213.58 L1578.89 1213.58 L1579.47 1213.58 L1580.06 1213.58 L1580.65 1213.58 L1581.23 1213.58 L1581.82 1213.58 L1582.41 1213.58 L1582.99 1213.58 L1583.58 1213.58 L1584.17 1213.58 L1584.75 1213.58 L1585.34 1213.58 L1585.93 1213.58 L1586.51 1213.58 L1587.1 1213.58 L1587.68 1213.58 L1588.27 1213.58 L1588.86 1213.58 L1589.44 1213.58 L1590.03 1213.58 L1590.62 1213.58 L1591.2 1213.58 L1591.79 1213.58 L1592.38 1213.58 L1592.96 1213.58 L1593.55 1213.58 L1594.14 1213.58 L1594.72 1213.58 L1595.31 1213.58 L1595.89 1213.58 L1596.48 1213.58 L1597.07 1213.58 L1597.65 1213.58 L1598.24 1213.58 L1598.83 1213.58 L1599.41 1213.58 L1600 1213.58 L1600.59 1213.58 L1601.17 1213.58 L1601.76 1213.58 L1602.34 1213.58 L1602.93 1213.58 L1603.52 1213.58 L1604.1 1213.58 L1604.69 1213.58 L1605.28 1213.58 L1605.86 1213.58 L1606.45 1213.58 L1607.04 1213.58 L1607.62 1213.58 L1608.21 1213.58 L1608.8 1213.58 L1609.38 1213.58 L1609.97 1213.58 L1610.55 1213.58 L1611.14 1213.58 L1611.73 1213.58 L1612.31 1213.58 L1612.9 1213.58 L1613.49 1213.58 L1614.07 1213.58 L1614.66 1213.58 L1615.25 1213.58 L1615.83 1213.58 L1616.42 1213.58 L1617.01 1213.58 L1617.59 1213.58 L1618.18 1213.58 L1618.76 1213.58 L1619.35 1213.58 L1619.94 1213.58 L1620.52 1213.58 L1621.11 1213.58 L1621.7 1213.58 L1622.28 1213.58 L1622.87 1213.58 L1623.46 1213.58 L1624.04 1213.58 L1624.63 1213.58 L1625.22 1213.58 L1625.8 1213.58 L1626.39 1213.58 L1626.97 1213.58 L1627.56 1213.58 L1628.15 1213.58 L1628.73 1213.58 L1629.32 1213.58 L1629.91 1213.58 L1630.49 1213.58 L1631.08 1213.58 L1631.67 1213.58 L1632.25 1213.58 L1632.84 1213.58 L1633.42 1213.58 L1634.01 1213.58 L1634.6 1213.58 L1635.18 1213.58 L1635.77 1213.58 L1636.36 1213.58 L1636.94 1213.58 L1637.53 1213.58 L1638.12 1213.58 L1638.7 1213.58 L1639.29 1213.58 L1639.88 1213.58 L1640.46 1213.58 L1641.05 1213.58 L1641.63 1213.58 L1642.22 1213.58 L1642.81 1213.58 L1643.39 1213.58 L1643.98 1213.58 L1644.57 1213.58 L1645.15 1213.58 L1645.74 1213.58 L1646.33 1213.58 L1646.91 1213.58 L1647.5 1213.58 L1648.09 1213.58 L1648.67 1213.58 L1649.26 1213.58 L1649.84 1213.58 L1650.43 1213.58 L1651.02 1213.58 L1651.6 1213.58 L1652.19 1213.58 L1652.78 1213.58 L1653.36 1213.58 L1653.95 1213.58 L1654.54 1213.58 L1655.12 1213.58 L1655.71 1213.58 L1656.29 1213.58 L1656.88 1213.58 L1657.47 1213.58 L1658.05 1213.58 L1658.64 1213.58 L1659.23 1213.58 L1659.81 1213.58 L1660.4 1213.58 L1660.99 1213.58 L1661.57 1213.58 L1662.16 1213.58 L1662.75 1213.58 L1663.33 1213.58 L1663.92 1213.58 L1664.5 1213.58 L1665.09 1213.58 L1665.68 1213.58 L1666.26 1213.58 L1666.85 1213.58 L1667.44 1213.58 L1668.02 1213.58 L1668.61 1213.58 L1669.2 1213.58 L1669.78 1213.58 L1670.37 1213.58 L1670.96 1213.58 L1671.54 1213.58 L1672.13 1213.58 L1672.71 1213.58 L1673.3 1213.58 L1673.89 1213.58 L1674.47 1213.58 L1675.06 1213.58 L1675.65 1213.58 L1676.23 1213.58 L1676.82 1213.58 L1677.41 1213.58 L1677.99 1213.58 L1678.58 1213.58 L1679.17 1213.58 L1679.75 1213.58 L1680.34 1213.58 L1680.92 1213.58 L1681.51 1213.58 L1682.1 1213.58 L1682.68 1213.58 L1683.27 1213.58 L1683.86 1213.58 L1684.44 1213.58 L1685.03 1213.58 L1685.62 1213.58 L1686.2 1213.58 L1686.79 1213.58 L1687.37 1213.58 L1687.96 1213.58 L1688.55 1213.58 L1689.13 1213.58 L1689.72 1213.58 L1690.31 1213.58 L1690.89 1213.58 L1691.48 1213.58 L1692.07 1213.58 L1692.65 1213.58 L1693.24 1213.58 L1693.83 1213.58 L1694.41 1213.58 L1695 1213.58 L1695.58 1213.58 L1696.17 1213.58 L1696.76 1213.58 L1697.34 1213.58 L1697.93 1213.58 L1698.52 1213.58 L1699.1 1213.58 L1699.69 1213.58 L1700.28 1213.58 L1700.86 1213.58 L1701.45 1213.58 L1702.04 1213.58 L1702.62 1213.58 L1703.21 1213.58 L1703.79 1213.58 L1704.38 1213.58 L1704.97 1213.58 L1705.55 1213.58 L1706.14 1213.58 L1706.73 1213.58 L1707.31 1213.58 L1707.9 1213.58 L1708.49 1213.58 L1709.07 1213.58 L1709.66 1213.58 L1710.24 1213.58 L1710.83 1213.58 L1711.42 1213.58 L1712 1213.58 L1712.59 1213.58 L1713.18 1213.58 L1713.76 1213.58 L1714.35 1213.58 L1714.94 1213.58 L1715.52 1213.58 L1716.11 1213.58 L1716.7 1213.58 L1717.28 1213.58 L1717.87 1213.58 L1718.45 1213.58 L1719.04 1213.58 L1719.63 1213.58 L1720.21 1213.58 L1720.8 1213.58 L1721.39 1213.58 L1721.97 1213.58 L1722.56 1213.58 L1723.15 1213.58 L1723.73 1213.58 L1724.32 1213.58 L1724.91 1213.58 L1725.49 1213.58 L1726.08 1213.58 L1726.66 1213.58 L1727.25 1213.58 L1727.84 1213.58 L1728.42 1213.58 L1729.01 1213.58 L1729.6 1213.58 L1730.18 1213.58 L1730.77 1213.58 L1731.36 1213.58 L1731.94 1213.58 L1732.53 1213.58 L1733.11 1213.58 L1733.7 1213.58 L1734.29 1213.58 L1734.87 1213.58 L1735.46 1213.58 L1736.05 1213.58 L1736.63 1213.58 L1737.22 1213.58 L1737.81 1213.58 L1738.39 1213.58 L1738.98 1213.58 L1739.57 1213.58 L1740.15 1213.58 L1740.74 1213.58 L1741.32 1213.58 L1741.91 1213.58 L1742.5 1213.58 L1743.08 1213.58 L1743.67 1213.58 L1744.26 1213.58 L1744.84 1213.58 L1745.43 1213.58 L1746.02 1213.58 L1746.6 1213.58 L1747.19 1213.58 L1747.78 1213.58 L1748.36 1213.58 L1748.95 1213.58 L1749.53 1213.58 L1750.12 1213.58 L1750.71 1213.58 L1751.29 1213.58 L1751.88 1213.58 L1752.47 1213.58 L1753.05 1213.58 L1753.64 1213.58 L1754.23 1213.58 L1754.81 1213.58 L1755.4 1213.58 L1755.99 1213.58 L1756.57 1213.58 L1757.16 1213.58 L1757.74 1213.58 L1758.33 1213.58 L1758.92 1213.58 L1759.5 1213.58 L1760.09 1213.58 L1760.68 1213.58 L1761.26 1213.58 L1761.85 1213.58 L1762.44 1213.58 L1763.02 1213.58 L1763.61 1213.58 L1764.19 1213.58 L1764.78 1213.58 L1765.37 1213.58 L1765.95 1213.58 L1766.54 1213.58 L1767.13 1213.58 L1767.71 1213.58 L1768.3 1213.58 L1768.89 1213.58 L1769.47 1213.58 L1770.06 1213.58 L1770.65 1213.58 L1771.23 1213.58 L1771.82 1213.58 L1772.4 1213.58 L1772.99 1213.58 L1773.58 1213.58 L1774.16 1213.58 L1774.75 1213.58 L1775.34 1213.58 L1775.92 1213.58 L1776.51 1213.58 L1777.1 1213.58 L1777.68 1213.58 L1778.27 1213.58 L1778.86 1213.58 L1779.44 1213.58 L1780.03 1213.58 L1780.61 1213.58 L1781.2 1213.58 L1781.79 1213.58 L1782.37 1213.58 L1782.96 1213.58 L1783.55 1213.58 L1784.13 1213.58 L1784.72 1213.58 L1785.31 1213.58 L1785.89 1213.58 L1786.48 1213.58 L1787.06 1213.58 L1787.65 1213.58 L1788.24 1213.58 L1788.82 1213.58 L1789.41 1213.58 L1790 1213.58 L1790.58 1213.58 L1791.17 1213.58 L1791.76 1213.58 L1792.34 1213.58 L1792.93 1213.58 L1793.52 1213.58 L1794.1 1213.58 L1794.69 1213.58 L1795.27 1213.58 L1795.86 1213.58 L1796.45 1213.58 L1797.03 1213.58 L1797.62 1213.58 L1798.21 1213.58 L1798.79 1213.58 L1799.38 1213.58 L1799.97 1213.58 L1800.55 1213.58 L1801.14 1213.58 L1801.73 1213.58 L1802.31 1213.58 L1802.9 1213.58 L1803.48 1213.58 L1804.07 1213.58 L1804.66 1213.58 L1805.24 1213.58 L1805.83 1213.58 L1806.42 1213.58 L1807 1213.58 L1807.59 1213.58 L1808.18 1213.58 L1808.76 1213.58 L1809.35 1213.58 L1809.94 1213.58 L1810.52 1213.58 L1811.11 1213.58 L1811.69 1213.58 L1812.28 1213.58 L1812.87 1213.58 L1813.45 1213.58 L1814.04 1213.58 L1814.63 1213.58 L1815.21 1213.58 L1815.8 1213.58 L1816.39 1213.58 L1816.97 1213.58 L1817.56 1213.58 L1818.14 1213.58 L1818.73 1213.58 L1819.32 1213.58 L1819.9 1213.58 L1820.49 1213.58 L1821.08 1213.58 L1821.66 1213.58 L1822.25 1213.58 L1822.84 1213.58 L1823.42 1213.58 L1824.01 1213.58 L1824.6 1213.58 L1825.18 1213.58 L1825.77 1213.58 L1826.35 1213.58 L1826.94 1213.58 L1827.53 1213.58 L1828.11 1213.58 L1828.7 1213.58 L1829.29 1213.58 L1829.87 1213.58 L1830.46 1213.58 L1831.05 1213.58 L1831.63 1213.58 L1832.22 1213.58 L1832.81 1213.58 L1833.39 1213.58 L1833.98 1213.58 L1834.56 1213.58 L1835.15 1213.58 L1835.74 1213.58 L1836.32 1213.58 L1836.91 1213.58 L1837.5 1213.58 L1838.08 1213.58 L1838.67 1213.58 L1839.26 1213.58 L1839.84 1213.58 L1840.43 1213.58 L1841.01 1213.58 L1841.6 1213.58 L1842.19 1213.58 L1842.77 1213.58 L1843.36 1213.58 L1843.95 1213.58 L1844.53 1213.58 L1845.12 1213.58 L1845.71 1213.58 L1846.29 1213.58 L1846.88 1213.58 L1847.47 1213.58 L1848.05 1213.58 L1848.64 1213.58 L1849.22 1213.58 L1849.81 1213.58 L1850.4 1213.58 L1850.98 1213.58 L1851.57 1213.58 L1852.16 1213.58 L1852.74 1213.58 L1853.33 1213.58 L1853.92 1213.58 L1854.5 1213.58 L1855.09 1213.58 L1855.68 1213.58 L1856.26 1213.58 L1856.85 1213.58 L1857.43 1213.58 L1858.02 1213.58 L1858.61 1213.58 L1859.19 1213.58 L1859.78 1213.58 L1860.37 1213.58 L1860.95 1213.58 L1861.54 1213.58 L1862.13 1213.58 L1862.71 1213.58 L1863.3 1213.58 L1863.88 1213.58 L1864.47 1213.58 L1865.06 1213.58 L1865.64 1213.58 L1866.23 1213.58 L1866.82 1213.58 L1867.4 1213.58 L1867.99 1213.58 L1868.58 1213.58 L1869.16 1213.58 L1869.75 1213.58 L1870.34 1213.58 L1870.92 1213.58 L1871.51 1213.58 L1872.09 1213.58 L1872.68 1213.58 L1873.27 1213.58 L1873.85 1213.58 L1874.44 1213.58 L1875.03 1213.58 L1875.61 1213.58 L1876.2 1213.58 L1876.79 1213.58 L1877.37 1213.58 L1877.96 1213.58 L1878.55 1213.58 L1879.13 1213.58 L1879.72 1213.58 L1880.3 1213.58 L1880.89 1213.58 L1881.48 1213.58 L1882.06 1213.58 L1882.65 1213.58 L1883.24 1213.58 L1883.82 1213.58 L1884.41 1213.58 L1885 1213.58 L1885.58 1213.58 L1886.17 1213.58 L1886.76 1213.58 L1887.34 1213.58 L1887.93 1213.58 L1888.51 1213.58 L1889.1 1213.58 L1889.69 1213.58 L1890.27 1213.58 L1890.86 1213.58 L1891.45 1213.58 L1892.03 1213.58 L1892.62 1213.58 L1893.21 1213.58 L1893.79 1213.58 L1894.38 1213.58 L1894.96 1213.58 L1895.55 1213.58 L1896.14 1213.58 L1896.72 1213.58 L1897.31 1213.58 L1897.9 1213.58 L1898.48 1213.58 L1899.07 1213.58 L1899.66 1213.58 L1900.24 1213.58 L1900.83 1213.58 L1901.42 1213.58 L1902 1213.58 L1902.59 1213.58 L1903.17 1213.58 L1903.76 1213.58 L1904.35 1213.58 L1904.93 1213.58 L1905.52 1213.58 L1906.11 1213.58 L1906.69 1213.58 L1907.28 1213.58 L1907.87 1213.58 L1908.45 1213.58 L1909.04 1213.58 L1909.63 1213.58 L1910.21 1213.58 L1910.8 1213.58 L1911.38 1213.58 L1911.97 1213.58 L1912.56 1213.58 L1913.14 1213.58 L1913.73 1213.58 L1914.32 1213.58 L1914.9 1213.58 L1915.49 1213.58 L1916.08 1213.58 L1916.66 1213.58 L1917.25 1213.58 L1917.83 1213.58 L1918.42 1213.58 L1919.01 1213.58 L1919.59 1213.58 L1920.18 1213.58 L1920.77 1213.58 L1921.35 1213.58 L1921.94 1213.58 L1922.53 1213.58 L1923.11 1213.58 L1923.7 1213.58 L1924.29 1213.58 L1924.87 1213.58 L1925.46 1213.58 L1926.04 1213.58 L1926.63 1213.58 L1927.22 1213.58 L1927.8 1213.58 L1928.39 1213.58 L1928.98 1213.58 L1929.56 1213.58 L1930.15 1213.58 L1930.74 1213.58 L1931.32 1213.58 L1931.91 1213.58 L1932.5 1213.58 L1933.08 1213.58 L1933.67 1213.58 L1934.25 1213.58 L1934.84 1213.58 L1935.43 1213.58 L1936.01 1213.58 L1936.6 1213.58 L1937.19 1213.58 L1937.77 1213.58 L1938.36 1213.58 L1938.95 1213.58 L1939.53 1213.58 L1940.12 1213.58 L1940.71 1213.58 L1941.29 1213.58 L1941.88 1213.58 L1942.46 1213.58 L1943.05 1213.58 L1943.64 1213.58 L1944.22 1213.58 L1944.81 1213.58 L1945.4 1213.58 L1945.98 1213.58 L1946.57 1213.58 L1947.16 1213.58 L1947.74 1213.58 L1948.33 1213.58 L1948.91 1213.58 L1949.5 1213.58 L1950.09 1213.58 L1950.67 1213.58 L1951.26 1213.58 L1951.85 1213.58 L1952.43 1213.58 L1953.02 1213.58 L1953.61 1213.58 L1954.19 1213.58 L1954.78 1213.58 L1955.37 1213.58 L1955.95 1213.58 L1956.54 1213.58 L1957.12 1213.58 L1957.71 1213.58 L1958.3 1213.58 L1958.88 1213.58 L1959.47 1213.58 L1960.06 1213.58 L1960.64 1213.58 L1961.23 1213.58 L1961.82 1213.58 L1962.4 1213.58 L1962.99 1213.58 L1963.58 1213.58 L1964.16 1213.58 L1964.75 1213.58 L1965.33 1213.58 L1965.92 1213.58 L1966.51 1213.58 L1967.09 1213.58 L1967.68 1213.58 L1968.27 1213.58 L1968.85 1213.58 L1969.44 1213.58 L1970.03 1213.58 L1970.61 1213.58 L1971.2 1213.58 L1971.78 1213.58 L1972.37 1213.58 L1972.96 1213.58 L1973.54 1213.58 L1974.13 1213.58 L1974.72 1213.58 L1975.3 1213.58 L1975.89 1213.58 L1976.48 1213.58 L1977.06 1213.58 L1977.65 1213.58 L1978.24 1213.58 L1978.82 1213.58 L1979.41 1213.58 L1979.99 1213.58 L1980.58 1213.58 L1981.17 1213.58 L1981.75 1213.58 L1982.34 1213.58 L1982.93 1213.58 L1983.51 1213.58 L1984.1 1213.58 L1984.69 1213.58 L1985.27 1213.58 L1985.86 1213.58 L1986.45 1213.58 L1987.03 1213.58 L1987.62 1213.58 L1988.2 1213.58 L1988.79 1213.58 L1989.38 1213.58 L1989.96 1213.58 L1990.55 1213.58 L1991.14 1213.58 L1991.72 1213.58 L1992.31 1213.58 L1992.9 1213.58 L1993.48 1213.58 L1994.07 1213.58 L1994.65 1213.58 L1995.24 1213.58 L1995.83 1213.58 L1996.41 1213.58 L1997 1213.58 L1997.59 1213.58 L1998.17 1213.58 L1998.76 1213.58 L1999.35 1213.58 L1999.93 1213.58 L2000.52 1213.58 L2001.11 1213.58 L2001.69 1213.58 L2002.28 1213.58 L2002.86 1213.58 L2003.45 1213.58 L2004.04 1213.58 L2004.62 1213.58 L2005.21 1213.58 L2005.8 1213.58 L2006.38 1213.58 L2006.97 1213.58 L2007.56 1213.58 L2008.14 1213.58 L2008.73 1213.58 L2009.32 1213.58 L2009.9 1213.58 L2010.49 1213.58 L2011.07 1213.58 L2011.66 1213.58 L2012.25 1213.58 L2012.83 1213.58 L2013.42 1213.58 L2014.01 1213.58 L2014.59 1213.58 L2015.18 1213.58 L2015.77 1213.58 L2016.35 1213.58 L2016.94 1213.58 L2017.53 1213.58 L2018.11 1213.58 L2018.7 1213.58 L2019.28 1213.58 L2019.87 1213.58 L2020.46 1213.58 L2021.04 1213.58 L2021.63 1213.58 L2022.22 1213.58 L2022.8 1213.58 L2023.39 1213.58 L2023.98 1213.58 L2024.56 1213.58 L2025.15 1213.58 L2025.73 1213.58 L2026.32 1213.58 L2026.91 1213.58 L2027.49 1213.58 L2028.08 1213.58 L2028.67 1213.58 L2029.25 1213.58 L2029.84 1213.58 L2030.43 1213.58 L2031.01 1213.58 L2031.6 1213.58 L2032.19 1213.58 L2032.77 1213.58 L2033.36 1213.58 L2033.94 1213.58 L2034.53 1213.58 L2035.12 1213.58 L2035.7 1213.58 L2036.29 1213.58 L2036.88 1213.58 L2037.46 1213.58 L2038.05 1213.58 L2038.64 1213.58 L2039.22 1213.58 L2039.81 1213.58 L2040.4 1213.58 L2040.98 1213.58 L2041.57 1213.58 L2042.15 1213.58 L2042.74 1213.58 L2043.33 1213.58 L2043.91 1213.58 L2044.5 1213.58 L2045.09 1213.58 L2045.67 1213.58 L2046.26 1213.58 L2046.85 1213.58 L2047.43 1213.58 L2048.02 1213.58 L2048.6 1213.58 L2049.19 1213.58 L2049.78 1213.58 L2050.36 1213.58 L2050.95 1213.58 L2051.54 1213.58 L2052.12 1213.58 L2052.71 1213.58 L2053.3 1213.58 L2053.88 1213.58 L2054.47 1213.58 L2055.06 1213.58 L2055.64 1213.58 L2056.23 1213.58 L2056.81 1213.58 L2057.4 1213.58 L2057.99 1213.58 L2058.57 1213.58 L2059.16 1213.58 L2059.75 1213.58 L2060.33 1213.58 L2060.92 1213.58 L2061.51 1213.58 L2062.09 1213.58 L2062.68 1213.58 L2063.27 1213.58 L2063.85 1213.58 L2064.44 1213.58 L2065.02 1213.58 L2065.61 1213.58 L2066.2 1213.58 L2066.78 1213.58 L2067.37 1213.58 L2067.96 1213.58 L2068.54 1213.58 L2069.13 1213.58 L2069.72 1213.58 L2070.3 1213.58 L2070.89 1213.58 L2071.48 1213.58 L2072.06 1213.58 L2072.65 1213.58 L2073.23 1213.58 L2073.82 1213.58 L2074.41 1213.58 L2074.99 1213.58 L2075.58 1213.58 L2076.17 1213.58 L2076.75 1213.58 L2077.34 1213.58 L2077.93 1213.58 L2078.51 1213.58 L2079.1 1213.58 L2079.68 1213.58 L2080.27 1213.58 L2080.86 1213.58 L2081.44 1213.58 L2082.03 1213.58 L2082.62 1213.58 L2083.2 1213.58 L2083.79 1213.58 L2084.38 1213.58 L2084.96 1213.58 L2085.55 1213.58 L2086.14 1213.58 L2086.72 1213.58 L2087.31 1213.58 L2087.89 1213.58 L2088.48 1213.58 L2089.07 1213.58 L2089.65 1213.58 L2090.24 1213.58 L2090.83 1213.58 L2091.41 1213.58 L2092 1213.58 L2092.59 1213.58 L2093.17 1213.58 L2093.76 1213.58 L2094.35 1213.58 L2094.93 1213.58 L2095.52 1213.58 L2096.1 1213.58 L2096.69 1213.58 L2097.28 1213.58 L2097.86 1213.58 L2098.45 1213.58 L2099.04 1213.58 L2099.62 1213.58 L2100.21 1213.58 L2100.8 1213.58 L2101.38 1213.58 L2101.97 1213.58 L2102.55 1213.58 L2103.14 1213.58 L2103.73 1213.58 L2104.31 1213.58 L2104.9 1213.58 L2105.49 1213.58 L2106.07 1213.58 L2106.66 1213.58 L2107.25 1213.58 L2107.83 1213.58 L2108.42 1213.58 L2109.01 1213.58 L2109.59 1213.58 L2110.18 1213.58 L2110.76 1213.58 L2111.35 1213.58 L2111.94 1213.58 L2112.52 1213.58 L2113.11 1213.58 L2113.7 1213.58 L2114.28 1213.58 L2114.87 1213.58 L2115.46 1213.58 L2116.04 1213.58 L2116.63 1213.58 L2117.22 1213.58 L2117.8 1213.58 L2118.39 1213.58 L2118.97 1213.58 L2119.56 1213.58 L2120.15 1213.58 L2120.73 1213.58 L2121.32 1213.58 L2121.91 1213.58 L2122.49 1213.58 L2123.08 1213.58 L2123.67 1213.58 L2124.25 1213.58 L2124.84 1213.58 L2125.42 1213.58 L2126.01 1213.58 L2126.6 1213.58 L2127.18 1213.58 L2127.77 1213.58 L2128.36 1213.58 L2128.94 1213.58 L2129.53 1213.58 L2130.12 1213.58 L2130.7 1213.58 L2131.29 1213.58 L2131.88 1213.58 L2132.46 1213.58 L2133.05 1213.58 L2133.63 1213.58 L2134.22 1213.58 L2134.81 1213.58 L2135.39 1213.58 L2135.98 1213.58 L2136.57 1213.58 L2137.15 1213.58 L2137.74 1213.58 L2138.33 1213.58 L2138.91 1213.58 L2139.5 1213.58 L2140.09 1213.58 L2140.67 1213.58 L2141.26 1213.58 L2141.84 1213.58 L2142.43 1213.58 L2143.02 1213.58 L2143.6 1213.58 L2144.19 1213.58 L2144.78 1213.58 L2145.36 1213.58 L2145.95 1213.58 L2146.54 1213.58 L2147.12 1213.58 L2147.71 1213.58 L2148.3 1213.58 L2148.88 1213.58 L2149.47 1213.58 L2150.05 1213.58 L2150.64 1213.58 L2151.23 1213.58 L2151.81 1213.58 L2152.4 1213.58 L2152.99 1213.58 L2153.57 1213.58 L2154.16 1213.58 L2154.75 1213.58 L2155.33 1213.58 L2155.92 1213.58 L2156.5 1213.58 L2157.09 1213.58 L2157.68 1213.58 L2158.26 1213.58 L2158.26 1212.87 L2157.68 1212.87 L2157.09 1212.87 L2156.5 1212.87 L2155.92 1212.87 L2155.33 1212.87 L2154.75 1212.87 L2154.16 1212.87 L2153.57 1212.87 L2152.99 1212.87 L2152.4 1212.87 L2151.81 1212.87 L2151.23 1212.87 L2150.64 1212.87 L2150.05 1212.87 L2149.47 1212.87 L2148.88 1212.87 L2148.3 1212.87 L2147.71 1212.87 L2147.12 1212.87 L2146.54 1212.87 L2145.95 1212.87 L2145.36 1212.87 L2144.78 1212.87 L2144.19 1212.87 L2143.6 1212.87 L2143.02 1212.87 L2142.43 1212.87 L2141.84 1212.87 L2141.26 1212.87 L2140.67 1212.87 L2140.09 1212.87 L2139.5 1212.87 L2138.91 1212.87 L2138.33 1212.87 L2137.74 1212.87 L2137.15 1212.87 L2136.57 1212.87 L2135.98 1212.87 L2135.39 1212.87 L2134.81 1212.87 L2134.22 1212.87 L2133.63 1212.87 L2133.05 1212.87 L2132.46 1212.87 L2131.88 1212.87 L2131.29 1212.87 L2130.7 1212.87 L2130.12 1212.87 L2129.53 1212.87 L2128.94 1212.87 L2128.36 1212.87 L2127.77 1212.87 L2127.18 1212.87 L2126.6 1212.87 L2126.01 1212.87 L2125.42 1212.87 L2124.84 1212.87 L2124.25 1212.87 L2123.67 1212.87 L2123.08 1212.87 L2122.49 1212.87 L2121.91 1212.87 L2121.32 1212.87 L2120.73 1212.87 L2120.15 1212.87 L2119.56 1212.87 L2118.97 1212.87 L2118.39 1212.87 L2117.8 1212.87 L2117.22 1212.87 L2116.63 1212.87 L2116.04 1212.87 L2115.46 1212.87 L2114.87 1212.87 L2114.28 1212.87 L2113.7 1212.87 L2113.11 1212.87 L2112.52 1212.87 L2111.94 1212.87 L2111.35 1212.87 L2110.76 1212.87 L2110.18 1212.87 L2109.59 1212.87 L2109.01 1212.87 L2108.42 1212.87 L2107.83 1212.87 L2107.25 1212.87 L2106.66 1212.87 L2106.07 1212.87 L2105.49 1212.87 L2104.9 1212.87 L2104.31 1212.87 L2103.73 1212.87 L2103.14 1212.87 L2102.55 1212.87 L2101.97 1212.87 L2101.38 1212.87 L2100.8 1212.87 L2100.21 1212.87 L2099.62 1212.87 L2099.04 1212.87 L2098.45 1212.87 L2097.86 1212.87 L2097.28 1212.87 L2096.69 1212.87 L2096.1 1212.87 L2095.52 1212.87 L2094.93 1212.87 L2094.35 1212.87 L2093.76 1212.87 L2093.17 1212.87 L2092.59 1212.87 L2092 1212.87 L2091.41 1212.87 L2090.83 1212.87 L2090.24 1212.87 L2089.65 1212.87 L2089.07 1212.87 L2088.48 1212.87 L2087.89 1212.87 L2087.31 1212.87 L2086.72 1212.87 L2086.14 1212.87 L2085.55 1212.87 L2084.96 1212.87 L2084.38 1212.87 L2083.79 1212.87 L2083.2 1212.87 L2082.62 1212.87 L2082.03 1212.87 L2081.44 1212.87 L2080.86 1212.87 L2080.27 1212.87 L2079.68 1212.87 L2079.1 1212.87 L2078.51 1212.87 L2077.93 1212.87 L2077.34 1212.87 L2076.75 1212.87 L2076.17 1212.87 L2075.58 1212.87 L2074.99 1212.87 L2074.41 1212.87 L2073.82 1212.87 L2073.23 1212.87 L2072.65 1212.87 L2072.06 1212.87 L2071.48 1212.87 L2070.89 1212.87 L2070.3 1212.87 L2069.72 1212.87 L2069.13 1212.87 L2068.54 1212.87 L2067.96 1212.87 L2067.37 1212.87 L2066.78 1212.87 L2066.2 1212.87 L2065.61 1212.87 L2065.02 1212.87 L2064.44 1212.87 L2063.85 1212.87 L2063.27 1212.87 L2062.68 1212.87 L2062.09 1212.87 L2061.51 1212.87 L2060.92 1212.87 L2060.33 1212.87 L2059.75 1212.87 L2059.16 1212.87 L2058.57 1212.87 L2057.99 1212.87 L2057.4 1212.87 L2056.81 1212.87 L2056.23 1212.87 L2055.64 1212.87 L2055.06 1212.87 L2054.47 1212.87 L2053.88 1212.87 L2053.3 1212.87 L2052.71 1212.87 L2052.12 1212.87 L2051.54 1212.87 L2050.95 1212.87 L2050.36 1212.87 L2049.78 1212.87 L2049.19 1212.87 L2048.6 1212.87 L2048.02 1212.87 L2047.43 1212.87 L2046.85 1212.87 L2046.26 1212.87 L2045.67 1212.87 L2045.09 1212.87 L2044.5 1212.87 L2043.91 1212.87 L2043.33 1212.87 L2042.74 1212.87 L2042.15 1212.87 L2041.57 1212.87 L2040.98 1212.87 L2040.4 1212.87 L2039.81 1212.87 L2039.22 1212.87 L2038.64 1212.87 L2038.05 1212.87 L2037.46 1212.87 L2036.88 1212.87 L2036.29 1212.87 L2035.7 1212.87 L2035.12 1212.87 L2034.53 1212.87 L2033.94 1212.87 L2033.36 1212.87 L2032.77 1212.87 L2032.19 1212.87 L2031.6 1212.87 L2031.01 1212.87 L2030.43 1212.87 L2029.84 1212.87 L2029.25 1212.87 L2028.67 1212.87 L2028.08 1212.87 L2027.49 1212.87 L2026.91 1212.87 L2026.32 1212.87 L2025.73 1212.87 L2025.15 1212.87 L2024.56 1212.87 L2023.98 1212.87 L2023.39 1212.87 L2022.8 1212.87 L2022.22 1212.87 L2021.63 1212.87 L2021.04 1212.87 L2020.46 1212.87 L2019.87 1212.87 L2019.28 1212.87 L2018.7 1212.87 L2018.11 1212.87 L2017.53 1212.87 L2016.94 1212.87 L2016.35 1212.87 L2015.77 1212.87 L2015.18 1212.87 L2014.59 1212.87 L2014.01 1212.87 L2013.42 1212.87 L2012.83 1212.87 L2012.25 1212.87 L2011.66 1212.87 L2011.07 1212.87 L2010.49 1212.87 L2009.9 1212.87 L2009.32 1212.87 L2008.73 1212.87 L2008.14 1212.87 L2007.56 1212.87 L2006.97 1212.87 L2006.38 1212.87 L2005.8 1212.87 L2005.21 1212.87 L2004.62 1212.87 L2004.04 1212.87 L2003.45 1212.87 L2002.86 1212.87 L2002.28 1212.87 L2001.69 1212.87 L2001.11 1212.87 L2000.52 1212.87 L1999.93 1212.87 L1999.35 1212.87 L1998.76 1212.87 L1998.17 1212.87 L1997.59 1212.87 L1997 1212.87 L1996.41 1212.87 L1995.83 1212.87 L1995.24 1212.87 L1994.65 1212.87 L1994.07 1212.87 L1993.48 1212.87 L1992.9 1212.87 L1992.31 1212.87 L1991.72 1212.87 L1991.14 1212.87 L1990.55 1212.87 L1989.96 1212.87 L1989.38 1212.87 L1988.79 1212.87 L1988.2 1212.87 L1987.62 1212.87 L1987.03 1212.87 L1986.45 1212.87 L1985.86 1212.87 L1985.27 1212.87 L1984.69 1212.87 L1984.1 1212.87 L1983.51 1212.87 L1982.93 1212.87 L1982.34 1212.87 L1981.75 1212.87 L1981.17 1212.87 L1980.58 1212.87 L1979.99 1212.87 L1979.41 1212.87 L1978.82 1212.87 L1978.24 1212.87 L1977.65 1212.87 L1977.06 1212.87 L1976.48 1212.87 L1975.89 1212.87 L1975.3 1212.87 L1974.72 1212.87 L1974.13 1212.87 L1973.54 1212.87 L1972.96 1212.87 L1972.37 1212.87 L1971.78 1212.87 L1971.2 1212.87 L1970.61 1212.87 L1970.03 1212.87 L1969.44 1212.87 L1968.85 1212.87 L1968.27 1212.87 L1967.68 1212.87 L1967.09 1212.87 L1966.51 1212.87 L1965.92 1212.87 L1965.33 1212.87 L1964.75 1212.87 L1964.16 1212.87 L1963.58 1212.87 L1962.99 1212.87 L1962.4 1212.87 L1961.82 1212.87 L1961.23 1212.87 L1960.64 1212.87 L1960.06 1212.87 L1959.47 1212.87 L1958.88 1212.87 L1958.3 1212.87 L1957.71 1212.87 L1957.12 1212.87 L1956.54 1212.87 L1955.95 1212.87 L1955.37 1212.87 L1954.78 1212.87 L1954.19 1212.87 L1953.61 1212.87 L1953.02 1212.87 L1952.43 1212.87 L1951.85 1212.87 L1951.26 1212.87 L1950.67 1212.87 L1950.09 1212.87 L1949.5 1212.87 L1948.91 1212.87 L1948.33 1212.87 L1947.74 1212.87 L1947.16 1212.87 L1946.57 1212.87 L1945.98 1212.87 L1945.4 1212.87 L1944.81 1212.87 L1944.22 1212.87 L1943.64 1212.87 L1943.05 1212.87 L1942.46 1212.87 L1941.88 1212.87 L1941.29 1212.87 L1940.71 1212.87 L1940.12 1212.87 L1939.53 1212.87 L1938.95 1212.87 L1938.36 1212.87 L1937.77 1212.87 L1937.19 1212.87 L1936.6 1212.87 L1936.01 1212.87 L1935.43 1212.87 L1934.84 1212.87 L1934.25 1212.87 L1933.67 1212.87 L1933.08 1212.87 L1932.5 1212.87 L1931.91 1212.87 L1931.32 1212.87 L1930.74 1212.87 L1930.15 1212.87 L1929.56 1212.87 L1928.98 1212.87 L1928.39 1212.87 L1927.8 1212.87 L1927.22 1212.87 L1926.63 1212.87 L1926.04 1212.87 L1925.46 1212.87 L1924.87 1212.87 L1924.29 1212.87 L1923.7 1212.87 L1923.11 1212.87 L1922.53 1212.87 L1921.94 1212.87 L1921.35 1212.87 L1920.77 1212.87 L1920.18 1212.87 L1919.59 1212.87 L1919.01 1212.87 L1918.42 1212.87 L1917.83 1212.87 L1917.25 1212.87 L1916.66 1212.87 L1916.08 1212.87 L1915.49 1212.87 L1914.9 1212.87 L1914.32 1212.87 L1913.73 1212.87 L1913.14 1212.87 L1912.56 1212.87 L1911.97 1212.87 L1911.38 1212.87 L1910.8 1212.87 L1910.21 1212.87 L1909.63 1212.87 L1909.04 1212.87 L1908.45 1212.87 L1907.87 1212.87 L1907.28 1212.87 L1906.69 1212.87 L1906.11 1212.87 L1905.52 1212.87 L1904.93 1212.87 L1904.35 1212.87 L1903.76 1212.87 L1903.17 1212.87 L1902.59 1212.87 L1902 1212.87 L1901.42 1212.87 L1900.83 1212.87 L1900.24 1212.87 L1899.66 1212.87 L1899.07 1212.87 L1898.48 1212.87 L1897.9 1212.87 L1897.31 1212.87 L1896.72 1212.87 L1896.14 1212.87 L1895.55 1212.87 L1894.96 1212.87 L1894.38 1212.87 L1893.79 1212.87 L1893.21 1212.87 L1892.62 1212.87 L1892.03 1212.87 L1891.45 1212.87 L1890.86 1212.87 L1890.27 1212.87 L1889.69 1212.87 L1889.1 1212.87 L1888.51 1212.87 L1887.93 1212.87 L1887.34 1212.87 L1886.76 1212.87 L1886.17 1212.87 L1885.58 1212.87 L1885 1212.87 L1884.41 1212.87 L1883.82 1212.87 L1883.24 1212.87 L1882.65 1212.87 L1882.06 1212.87 L1881.48 1212.87 L1880.89 1212.87 L1880.3 1212.87 L1879.72 1212.87 L1879.13 1212.87 L1878.55 1212.87 L1877.96 1212.87 L1877.37 1212.87 L1876.79 1212.87 L1876.2 1212.87 L1875.61 1212.87 L1875.03 1212.87 L1874.44 1212.87 L1873.85 1212.87 L1873.27 1212.87 L1872.68 1212.87 L1872.09 1212.87 L1871.51 1212.87 L1870.92 1212.87 L1870.34 1212.87 L1869.75 1212.87 L1869.16 1212.87 L1868.58 1212.87 L1867.99 1212.87 L1867.4 1212.87 L1866.82 1212.87 L1866.23 1212.87 L1865.64 1212.87 L1865.06 1212.87 L1864.47 1212.87 L1863.88 1212.87 L1863.3 1212.87 L1862.71 1212.87 L1862.13 1212.87 L1861.54 1212.87 L1860.95 1212.87 L1860.37 1212.87 L1859.78 1212.87 L1859.19 1212.87 L1858.61 1212.87 L1858.02 1212.87 L1857.43 1212.87 L1856.85 1212.87 L1856.26 1212.87 L1855.68 1212.87 L1855.09 1212.87 L1854.5 1212.87 L1853.92 1212.87 L1853.33 1212.87 L1852.74 1212.87 L1852.16 1212.87 L1851.57 1212.87 L1850.98 1212.87 L1850.4 1212.87 L1849.81 1212.87 L1849.22 1212.87 L1848.64 1212.87 L1848.05 1212.87 L1847.47 1212.87 L1846.88 1212.87 L1846.29 1212.87 L1845.71 1212.87 L1845.12 1212.87 L1844.53 1212.87 L1843.95 1212.87 L1843.36 1212.87 L1842.77 1212.87 L1842.19 1212.87 L1841.6 1212.87 L1841.01 1212.87 L1840.43 1212.87 L1839.84 1212.87 L1839.26 1212.87 L1838.67 1212.87 L1838.08 1212.87 L1837.5 1212.87 L1836.91 1212.87 L1836.32 1212.87 L1835.74 1212.87 L1835.15 1212.87 L1834.56 1212.87 L1833.98 1212.87 L1833.39 1212.87 L1832.81 1212.87 L1832.22 1212.87 L1831.63 1212.87 L1831.05 1212.87 L1830.46 1212.87 L1829.87 1212.87 L1829.29 1212.87 L1828.7 1212.87 L1828.11 1212.87 L1827.53 1212.87 L1826.94 1212.87 L1826.35 1212.87 L1825.77 1212.87 L1825.18 1212.87 L1824.6 1212.87 L1824.01 1212.87 L1823.42 1212.87 L1822.84 1212.87 L1822.25 1212.87 L1821.66 1212.87 L1821.08 1212.87 L1820.49 1212.87 L1819.9 1212.87 L1819.32 1212.87 L1818.73 1212.87 L1818.14 1212.87 L1817.56 1212.87 L1816.97 1212.87 L1816.39 1212.87 L1815.8 1212.87 L1815.21 1212.87 L1814.63 1212.87 L1814.04 1212.87 L1813.45 1212.87 L1812.87 1212.87 L1812.28 1212.87 L1811.69 1212.87 L1811.11 1212.87 L1810.52 1212.87 L1809.94 1212.87 L1809.35 1212.87 L1808.76 1212.87 L1808.18 1212.87 L1807.59 1212.87 L1807 1212.87 L1806.42 1212.87 L1805.83 1212.87 L1805.24 1212.87 L1804.66 1212.87 L1804.07 1212.87 L1803.48 1212.87 L1802.9 1212.87 L1802.31 1212.87 L1801.73 1212.87 L1801.14 1212.87 L1800.55 1212.87 L1799.97 1212.87 L1799.38 1212.87 L1798.79 1212.87 L1798.21 1212.87 L1797.62 1212.87 L1797.03 1212.87 L1796.45 1212.87 L1795.86 1212.87 L1795.27 1212.87 L1794.69 1212.87 L1794.1 1212.87 L1793.52 1212.87 L1792.93 1212.87 L1792.34 1212.87 L1791.76 1212.87 L1791.17 1212.87 L1790.58 1212.87 L1790 1212.87 L1789.41 1212.87 L1788.82 1212.87 L1788.24 1212.87 L1787.65 1212.87 L1787.06 1212.87 L1786.48 1212.87 L1785.89 1212.87 L1785.31 1212.87 L1784.72 1212.87 L1784.13 1212.87 L1783.55 1212.87 L1782.96 1212.87 L1782.37 1212.87 L1781.79 1212.87 L1781.2 1212.87 L1780.61 1212.87 L1780.03 1212.87 L1779.44 1212.87 L1778.86 1212.87 L1778.27 1212.87 L1777.68 1212.87 L1777.1 1212.87 L1776.51 1212.87 L1775.92 1212.87 L1775.34 1212.87 L1774.75 1212.87 L1774.16 1212.87 L1773.58 1212.87 L1772.99 1212.87 L1772.4 1212.87 L1771.82 1212.87 L1771.23 1212.87 L1770.65 1212.87 L1770.06 1212.87 L1769.47 1212.87 L1768.89 1212.87 L1768.3 1212.87 L1767.71 1212.87 L1767.13 1212.87 L1766.54 1212.87 L1765.95 1212.87 L1765.37 1212.87 L1764.78 1212.87 L1764.19 1212.87 L1763.61 1212.87 L1763.02 1212.87 L1762.44 1212.87 L1761.85 1212.87 L1761.26 1212.87 L1760.68 1212.87 L1760.09 1212.87 L1759.5 1212.87 L1758.92 1212.87 L1758.33 1212.87 L1757.74 1212.87 L1757.16 1212.87 L1756.57 1212.87 L1755.99 1212.87 L1755.4 1212.87 L1754.81 1212.87 L1754.23 1212.87 L1753.64 1212.87 L1753.05 1212.87 L1752.47 1212.87 L1751.88 1212.87 L1751.29 1212.87 L1750.71 1212.87 L1750.12 1212.87 L1749.53 1212.87 L1748.95 1212.87 L1748.36 1212.87 L1747.78 1212.87 L1747.19 1212.87 L1746.6 1212.87 L1746.02 1212.87 L1745.43 1212.87 L1744.84 1212.87 L1744.26 1212.87 L1743.67 1212.87 L1743.08 1212.87 L1742.5 1212.87 L1741.91 1212.87 L1741.32 1212.87 L1740.74 1212.87 L1740.15 1212.87 L1739.57 1212.87 L1738.98 1212.87 L1738.39 1212.87 L1737.81 1212.87 L1737.22 1212.87 L1736.63 1212.87 L1736.05 1212.87 L1735.46 1212.87 L1734.87 1212.87 L1734.29 1212.87 L1733.7 1212.87 L1733.11 1212.87 L1732.53 1212.87 L1731.94 1212.87 L1731.36 1212.87 L1730.77 1212.87 L1730.18 1212.87 L1729.6 1212.87 L1729.01 1212.87 L1728.42 1212.87 L1727.84 1212.87 L1727.25 1212.87 L1726.66 1212.87 L1726.08 1212.87 L1725.49 1212.87 L1724.91 1212.87 L1724.32 1212.87 L1723.73 1212.87 L1723.15 1212.87 L1722.56 1212.87 L1721.97 1212.87 L1721.39 1212.87 L1720.8 1212.87 L1720.21 1212.87 L1719.63 1212.87 L1719.04 1212.87 L1718.45 1212.87 L1717.87 1212.87 L1717.28 1212.87 L1716.7 1212.87 L1716.11 1212.87 L1715.52 1212.87 L1714.94 1212.87 L1714.35 1212.87 L1713.76 1212.87 L1713.18 1212.87 L1712.59 1212.87 L1712 1212.87 L1711.42 1212.87 L1710.83 1212.87 L1710.24 1212.87 L1709.66 1212.87 L1709.07 1212.87 L1708.49 1212.87 L1707.9 1212.87 L1707.31 1212.87 L1706.73 1212.87 L1706.14 1212.87 L1705.55 1212.87 L1704.97 1212.87 L1704.38 1212.87 L1703.79 1212.87 L1703.21 1212.87 L1702.62 1212.87 L1702.04 1212.87 L1701.45 1212.87 L1700.86 1212.87 L1700.28 1212.87 L1699.69 1212.87 L1699.1 1212.87 L1698.52 1212.87 L1697.93 1212.87 L1697.34 1212.87 L1696.76 1212.87 L1696.17 1212.87 L1695.58 1212.87 L1695 1212.87 L1694.41 1212.87 L1693.83 1212.87 L1693.24 1212.87 L1692.65 1212.87 L1692.07 1212.87 L1691.48 1212.87 L1690.89 1212.87 L1690.31 1212.87 L1689.72 1212.87 L1689.13 1212.87 L1688.55 1212.87 L1687.96 1212.87 L1687.37 1212.87 L1686.79 1212.87 L1686.2 1212.87 L1685.62 1212.87 L1685.03 1212.87 L1684.44 1212.87 L1683.86 1212.87 L1683.27 1212.87 L1682.68 1212.87 L1682.1 1212.87 L1681.51 1212.87 L1680.92 1212.87 L1680.34 1212.87 L1679.75 1212.87 L1679.17 1212.87 L1678.58 1212.87 L1677.99 1212.87 L1677.41 1212.87 L1676.82 1212.87 L1676.23 1212.87 L1675.65 1212.87 L1675.06 1212.87 L1674.47 1212.87 L1673.89 1212.87 L1673.3 1212.87 L1672.71 1212.87 L1672.13 1212.87 L1671.54 1212.87 L1670.96 1212.87 L1670.37 1212.87 L1669.78 1212.87 L1669.2 1212.87 L1668.61 1212.87 L1668.02 1212.87 L1667.44 1212.87 L1666.85 1212.87 L1666.26 1212.87 L1665.68 1212.87 L1665.09 1212.87 L1664.5 1212.87 L1663.92 1212.87 L1663.33 1212.87 L1662.75 1212.87 L1662.16 1212.87 L1661.57 1212.87 L1660.99 1212.87 L1660.4 1212.87 L1659.81 1212.87 L1659.23 1212.87 L1658.64 1212.87 L1658.05 1212.87 L1657.47 1212.87 L1656.88 1212.87 L1656.29 1212.87 L1655.71 1212.87 L1655.12 1212.87 L1654.54 1212.87 L1653.95 1212.87 L1653.36 1212.87 L1652.78 1212.87 L1652.19 1212.87 L1651.6 1212.87 L1651.02 1212.87 L1650.43 1212.87 L1649.84 1212.87 L1649.26 1212.87 L1648.67 1212.87 L1648.09 1212.87 L1647.5 1212.87 L1646.91 1212.87 L1646.33 1212.87 L1645.74 1212.87 L1645.15 1212.87 L1644.57 1212.87 L1643.98 1212.87 L1643.39 1212.87 L1642.81 1212.87 L1642.22 1212.87 L1641.63 1212.87 L1641.05 1212.87 L1640.46 1212.87 L1639.88 1212.87 L1639.29 1212.87 L1638.7 1212.87 L1638.12 1212.87 L1637.53 1212.87 L1636.94 1212.87 L1636.36 1212.87 L1635.77 1212.87 L1635.18 1212.87 L1634.6 1212.87 L1634.01 1212.87 L1633.42 1212.87 L1632.84 1212.87 L1632.25 1212.87 L1631.67 1212.87 L1631.08 1212.87 L1630.49 1212.87 L1629.91 1212.87 L1629.32 1212.87 L1628.73 1212.87 L1628.15 1212.87 L1627.56 1212.87 L1626.97 1212.87 L1626.39 1212.87 L1625.8 1212.87 L1625.22 1212.87 L1624.63 1212.87 L1624.04 1212.87 L1623.46 1212.87 L1622.87 1212.87 L1622.28 1212.87 L1621.7 1212.87 L1621.11 1212.87 L1620.52 1212.87 L1619.94 1212.87 L1619.35 1212.87 L1618.76 1212.87 L1618.18 1212.87 L1617.59 1212.87 L1617.01 1212.87 L1616.42 1212.87 L1615.83 1212.87 L1615.25 1212.87 L1614.66 1212.87 L1614.07 1212.87 L1613.49 1212.87 L1612.9 1212.87 L1612.31 1212.87 L1611.73 1212.87 L1611.14 1212.87 L1610.55 1212.87 L1609.97 1212.87 L1609.38 1212.87 L1608.8 1212.87 L1608.21 1212.87 L1607.62 1212.87 L1607.04 1212.87 L1606.45 1212.87 L1605.86 1212.87 L1605.28 1212.87 L1604.69 1212.87 L1604.1 1212.87 L1603.52 1212.87 L1602.93 1212.87 L1602.34 1212.87 L1601.76 1212.87 L1601.17 1212.87 L1600.59 1212.87 L1600 1212.87 L1599.41 1212.87 L1598.83 1212.87 L1598.24 1212.87 L1597.65 1212.87 L1597.07 1212.87 L1596.48 1212.87 L1595.89 1212.87 L1595.31 1212.87 L1594.72 1212.87 L1594.14 1212.87 L1593.55 1212.87 L1592.96 1212.87 L1592.38 1212.87 L1591.79 1212.87 L1591.2 1212.87 L1590.62 1212.87 L1590.03 1212.87 L1589.44 1212.87 L1588.86 1212.87 L1588.27 1212.87 L1587.68 1212.87 L1587.1 1212.87 L1586.51 1212.87 L1585.93 1212.87 L1585.34 1212.87 L1584.75 1212.87 L1584.17 1212.87 L1583.58 1212.87 L1582.99 1212.87 L1582.41 1212.87 L1581.82 1212.87 L1581.23 1212.87 L1580.65 1212.87 L1580.06 1212.87 L1579.47 1212.87 L1578.89 1212.87 L1578.3 1212.87 L1577.72 1212.87 L1577.13 1212.87 L1576.54 1212.87 L1575.96 1212.87 L1575.37 1212.87 L1574.78 1212.87 L1574.2 1212.87 L1573.61 1212.87 L1573.02 1212.87 L1572.44 1212.87 L1571.85 1212.87 L1571.27 1212.87 L1570.68 1212.87 L1570.09 1212.87 L1569.51 1212.87 L1568.92 1212.87 L1568.33 1212.87 L1567.75 1212.87 L1567.16 1212.87 L1566.57 1212.87 L1565.99 1212.87 L1565.4 1212.87 L1564.81 1212.87 L1564.23 1212.87 L1563.64 1212.87 L1563.06 1212.87 L1562.47 1212.87 L1561.88 1212.87 L1561.3 1212.87 L1560.71 1212.87 L1560.12 1212.87 L1559.54 1212.87 L1558.95 1212.87 L1558.36 1212.87 L1557.78 1212.87 L1557.19 1212.87 L1556.6 1212.87 L1556.02 1212.87 L1555.43 1212.87 L1554.85 1212.87 L1554.26 1212.87 L1553.67 1212.87 L1553.09 1212.87 L1552.5 1212.87 L1551.91 1212.87 L1551.33 1212.87 L1550.74 1212.87 L1550.15 1212.87 L1549.57 1212.87 L1548.98 1212.87 L1548.4 1212.87 L1547.81 1212.87 L1547.22 1212.87 L1546.64 1212.87 L1546.05 1212.87 L1545.46 1212.87 L1544.88 1212.87 L1544.29 1212.87 L1543.7 1212.87 L1543.12 1212.87 L1542.53 1212.87 L1541.94 1212.87 L1541.36 1212.87 L1540.77 1212.87 L1540.19 1212.87 L1539.6 1212.87 L1539.01 1212.87 L1538.43 1212.87 L1537.84 1212.87 L1537.25 1212.87 L1536.67 1212.87 L1536.08 1212.87 L1535.49 1212.87 L1534.91 1212.87 L1534.32 1212.87 L1533.73 1212.87 L1533.15 1212.87 L1532.56 1212.87 L1531.98 1212.87 L1531.39 1212.87 L1530.8 1212.87 L1530.22 1212.87 L1529.63 1212.87 L1529.04 1212.87 L1528.46 1212.87 L1527.87 1212.87 L1527.28 1212.87 L1526.7 1212.87 L1526.11 1212.87 L1525.52 1212.87 L1524.94 1212.87 L1524.35 1212.87 L1523.77 1212.87 L1523.18 1212.87 L1522.59 1212.87 L1522.01 1212.87 L1521.42 1212.87 L1520.83 1212.87 L1520.25 1212.87 L1519.66 1212.87 L1519.07 1212.87 L1518.49 1212.87 L1517.9 1212.87 L1517.32 1212.87 L1516.73 1212.87 L1516.14 1212.87 L1515.56 1212.87 L1514.97 1212.87 L1514.38 1212.87 L1513.8 1212.87 L1513.21 1212.87 L1512.62 1212.87 L1512.04 1212.87 L1511.45 1212.87 L1510.86 1212.87 L1510.28 1212.87 L1509.69 1212.87 L1509.11 1212.87 L1508.52 1212.87 L1507.93 1212.87 L1507.35 1212.87 L1506.76 1212.87 L1506.17 1212.87 L1505.59 1212.87 L1505 1212.87 L1504.41 1212.87 L1503.83 1212.87 L1503.24 1212.87 L1502.65 1212.87 L1502.07 1212.87 L1501.48 1212.87 L1500.9 1212.87 L1500.31 1212.87 L1499.72 1212.87 L1499.14 1212.87 L1498.55 1212.87 L1497.96 1212.87 L1497.38 1212.87 L1496.79 1212.87 L1496.2 1212.87 L1495.62 1212.87 L1495.03 1212.87 L1494.45 1212.87 L1493.86 1212.87 L1493.27 1212.87 L1492.69 1212.87 L1492.1 1212.87 L1491.51 1212.87 L1490.93 1212.87 L1490.34 1212.87 L1489.75 1212.87 L1489.17 1212.87 L1488.58 1212.87 L1487.99 1212.87 L1487.41 1212.87 L1486.82 1212.87 L1486.24 1212.87 L1485.65 1212.87 L1485.06 1212.87 L1484.48 1212.87 L1483.89 1212.87 L1483.3 1212.87 L1482.72 1212.87 L1482.13 1212.87 L1481.54 1212.87 L1480.96 1212.87 L1480.37 1212.87 L1479.78 1212.87 L1479.2 1212.87 L1478.61 1212.87 L1478.03 1212.87 L1477.44 1212.87 L1476.85 1212.87 L1476.27 1212.87 L1475.68 1212.87 L1475.09 1212.87 L1474.51 1212.87 L1473.92 1212.87 L1473.33 1212.87 L1472.75 1212.87 L1472.16 1212.87 L1471.57 1212.87 L1470.99 1212.87 L1470.4 1212.87 L1469.82 1212.87 L1469.23 1212.87 L1468.64 1212.87 L1468.06 1212.87 L1467.47 1212.87 L1466.88 1212.87 L1466.3 1212.87 L1465.71 1212.87 L1465.12 1212.87 L1464.54 1212.87 L1463.95 1212.87 L1463.37 1212.87 L1462.78 1212.87 L1462.19 1212.87 L1461.61 1212.87 L1461.02 1212.87 L1460.43 1212.87 L1459.85 1212.87 L1459.26 1212.87 L1458.67 1212.87 L1458.09 1212.87 L1457.5 1212.87 L1456.91 1212.87 L1456.33 1212.87 L1455.74 1212.87 L1455.16 1212.87 L1454.57 1212.87 L1453.98 1212.87 L1453.4 1212.87 L1452.81 1212.87 L1452.22 1212.87 L1451.64 1212.87 L1451.05 1212.87 L1450.46 1212.87 L1449.88 1212.87 L1449.29 1212.87 L1448.7 1212.87 L1448.12 1212.87 L1447.53 1212.87 L1446.95 1212.87 L1446.36 1212.87 L1445.77 1212.87 L1445.19 1212.87 L1444.6 1212.87 L1444.01 1212.87 L1443.43 1212.87 L1442.84 1212.87 L1442.25 1212.87 L1441.67 1212.87 L1441.08 1212.87 L1440.5 1212.87 L1439.91 1212.87 L1439.32 1212.87 L1438.74 1212.87 L1438.15 1212.87 L1437.56 1212.87 L1436.98 1212.87 L1436.39 1212.87 L1435.8 1212.87 L1435.22 1212.87 L1434.63 1212.87 L1434.04 1212.87 L1433.46 1212.87 L1432.87 1212.87 L1432.29 1212.87 L1431.7 1212.87 L1431.11 1212.87 L1430.53 1212.87 L1429.94 1212.87 L1429.35 1212.87 L1428.77 1212.87 L1428.18 1212.87 L1427.59 1212.87 L1427.01 1212.87 L1426.42 1212.87 L1425.83 1212.87 L1425.25 1212.87 L1424.66 1212.87 L1424.08 1212.87 L1423.49 1212.87 L1422.9 1212.87 L1422.32 1212.87 L1421.73 1212.87 L1421.14 1212.87 L1420.56 1212.87 L1419.97 1212.87 L1419.38 1212.87 L1418.8 1212.87 L1418.21 1212.87 L1417.63 1212.87 L1417.04 1212.87 L1416.45 1212.87 L1415.87 1212.87 L1415.28 1212.87 L1414.69 1212.87 L1414.11 1212.87 L1413.52 1212.87 L1412.93 1212.87 L1412.35 1212.87 L1411.76 1212.87 L1411.17 1212.87 L1410.59 1212.87 L1410 1212.87 L1409.42 1212.87 L1408.83 1212.87 L1408.24 1212.87 L1407.66 1212.87 L1407.07 1212.87 L1406.48 1212.87 L1405.9 1212.87 L1405.31 1212.87 L1404.72 1212.87 L1404.14 1212.87 L1403.55 1212.87 L1402.96 1212.87 L1402.38 1212.87 L1401.79 1212.87 L1401.21 1212.87 L1400.62 1212.87 L1400.03 1212.87 L1399.45 1212.87 L1398.86 1212.87 L1398.27 1212.87 L1397.69 1212.87 L1397.1 1212.87 L1396.51 1212.87 L1395.93 1212.87 L1395.34 1212.87 L1394.75 1212.87 L1394.17 1212.87 L1393.58 1212.87 L1393 1212.87 L1392.41 1212.87 L1391.82 1212.87 L1391.24 1212.87 L1390.65 1212.87 L1390.06 1212.87 L1389.48 1212.87 L1388.89 1212.87 L1388.3 1212.87 L1387.72 1212.87 L1387.13 1212.87 L1386.55 1212.87 L1385.96 1212.87 L1385.37 1212.87 L1384.79 1212.87 L1384.2 1212.87 L1383.61 1212.87 L1383.03 1212.87 L1382.44 1212.87 L1381.85 1212.87 L1381.27 1212.87 L1380.68 1212.87 L1380.09 1212.87 L1379.51 1212.87 L1378.92 1212.87 L1378.34 1212.87 L1377.75 1212.87 L1377.16 1212.87 L1376.58 1212.87 L1375.99 1212.87 L1375.4 1212.87 L1374.82 1212.87 L1374.23 1212.87 L1373.64 1212.87 L1373.06 1212.87 L1372.47 1212.87 L1371.88 1212.87 L1371.3 1212.87 L1370.71 1212.87 L1370.13 1212.87 L1369.54 1212.87 L1368.95 1212.87 L1368.37 1212.87 L1367.78 1212.87 L1367.19 1212.87 L1366.61 1212.87 L1366.02 1212.87 L1365.43 1212.87 L1364.85 1212.87 L1364.26 1212.87 L1363.68 1212.87 L1363.09 1212.87 L1362.5 1212.87 L1361.92 1212.87 L1361.33 1212.87 L1360.74 1212.87 L1360.16 1212.87 L1359.57 1212.87 L1358.98 1212.87 L1358.4 1212.87 L1357.81 1212.87 L1357.22 1212.87 L1356.64 1212.87 L1356.05 1212.87 L1355.47 1212.87 L1354.88 1212.87 L1354.29 1212.87 L1353.71 1212.87 L1353.12 1212.87 L1352.53 1212.87 L1351.95 1212.87 L1351.36 1212.87 L1350.77 1212.87 L1350.19 1212.87 L1349.6 1212.87 L1349.01 1212.87 L1348.43 1212.87 L1347.84 1212.87 L1347.26 1212.87 L1346.67 1212.87 L1346.08 1212.87 L1345.5 1212.87 L1344.91 1212.87 L1344.32 1212.87 L1343.74 1212.87 L1343.15 1212.87 L1342.56 1212.87 L1341.98 1212.87 L1341.39 1212.87 L1340.8 1212.87 L1340.22 1212.87 L1339.63 1212.87 L1339.05 1212.87 L1338.46 1212.87 L1337.87 1212.87 L1337.29 1212.87 L1336.7 1212.87 L1336.11 1212.87 L1335.53 1212.87 L1334.94 1212.87 L1334.35 1212.87 L1333.77 1212.87 L1333.18 1212.87 L1332.6 1212.87 L1332.01 1212.87 L1331.42 1212.87 L1330.84 1212.87 L1330.25 1212.87 L1329.66 1212.87 L1329.08 1212.87 L1328.49 1212.87 L1327.9 1212.87 L1327.32 1212.87 L1326.73 1212.87 L1326.14 1212.87 L1325.56 1212.87 L1324.97 1212.87 L1324.39 1212.87 L1323.8 1212.87 L1323.21 1212.87 L1322.63 1212.87 L1322.04 1212.87 L1321.45 1212.87 L1320.87 1212.87 L1320.28 1212.87 L1319.69 1212.87 L1319.11 1212.87 L1318.52 1212.87 L1317.93 1212.87 L1317.35 1212.87 L1316.76 1212.87 L1316.18 1212.87 L1315.59 1212.87 L1315 1212.87 L1314.42 1212.87 L1313.83 1212.87 L1313.24 1212.87 L1312.66 1212.87 L1312.07 1212.87 L1311.48 1212.87 L1310.9 1212.87 L1310.31 1212.87 L1309.73 1212.87 L1309.14 1212.87 L1308.55 1212.87 L1307.97 1212.87 L1307.38 1212.87 L1306.79 1212.87 L1306.21 1212.87 L1305.62 1212.87 L1305.03 1212.87 L1304.45 1212.87 L1303.86 1212.87 L1303.27 1212.87 L1302.69 1212.87 L1302.1 1212.87 L1301.52 1212.87 L1300.93 1212.87 L1300.34 1212.87 L1299.76 1212.87 L1299.17 1212.87 L1298.58 1212.87 L1298 1212.87 L1297.41 1212.87 L1296.82 1212.87 L1296.24 1212.87 L1295.65 1212.87 L1295.06 1212.87 L1294.48 1212.87 L1293.89 1212.87 L1293.31 1212.87 L1292.72 1212.87 L1292.13 1212.87 L1291.55 1212.87 L1290.96 1212.87 L1290.37 1212.87 L1289.79 1212.87 L1289.2 1212.87 L1288.61 1212.87 L1288.03 1212.87 L1287.44 1212.87 L1286.86 1212.87 L1286.27 1212.87 L1285.68 1212.87 L1285.1 1212.87 L1284.51 1212.87 L1283.92 1212.87 L1283.34 1212.87 L1282.75 1212.87 L1282.16 1212.87 L1281.58 1212.87 L1280.99 1212.87 L1280.4 1212.87 L1279.82 1212.87 L1279.23 1212.87 L1278.65 1212.87 L1278.06 1212.87 L1277.47 1212.87 L1276.89 1212.87 L1276.3 1212.87 L1275.71 1212.87 L1275.13 1212.87 L1274.54 1212.87 L1273.95 1212.87 L1273.37 1212.87 L1272.78 1212.87 L1272.19 1212.87 L1271.61 1212.87 L1271.02 1212.87 L1270.44 1212.87 L1269.85 1212.87 L1269.26 1212.87 L1268.68 1212.87 L1268.09 1212.87 L1267.5 1212.87 L1266.92 1212.87 L1266.33 1212.87 L1265.74 1212.87 L1265.16 1212.87 L1264.57 1212.87 L1263.98 1212.87 L1263.4 1212.87 L1262.81 1212.87 L1262.23 1212.87 L1261.64 1212.87 L1261.05 1212.87 L1260.47 1212.87 L1259.88 1212.87 L1259.29 1212.87 L1258.71 1212.87 L1258.12 1212.87 L1257.53 1212.87 L1256.95 1212.87 L1256.36 1212.87 L1255.78 1212.87 L1255.19 1212.87 L1254.6 1212.87 L1254.02 1212.87 L1253.43 1212.87 L1252.84 1212.87 L1252.26 1212.87 L1251.67 1212.87 L1251.08 1212.87 L1250.5 1212.87 L1249.91 1212.87 L1249.32 1212.87 L1248.74 1212.87 L1248.15 1212.87 L1247.57 1212.87 L1246.98 1212.87 L1246.39 1212.87 L1245.81 1212.87 L1245.22 1212.87 L1244.63 1212.87 L1244.05 1212.87 L1243.46 1212.87 L1242.87 1212.87 L1242.29 1212.87 L1241.7 1212.87 L1241.11 1212.87 L1240.53 1212.87 L1239.94 1212.87 L1239.36 1212.87 L1238.77 1212.87 L1238.18 1212.87 L1237.6 1212.87 L1237.01 1212.87 L1236.42 1212.87 L1235.84 1212.87 L1235.25 1212.87 L1234.66 1212.87 L1234.08 1212.87 L1233.49 1212.87 L1232.91 1212.87 L1232.32 1212.87 L1231.73 1212.87 L1231.15 1212.87 L1230.56 1212.87 L1229.97 1212.87 L1229.39 1212.87 L1228.8 1212.87 L1228.21 1212.87 L1227.63 1212.87 L1227.04 1212.87 L1226.45 1212.87 L1225.87 1212.87 L1225.28 1212.87 L1224.7 1212.87 L1224.11 1212.87 L1223.52 1212.87 L1222.94 1212.87 L1222.35 1212.87 L1221.76 1212.87 L1221.18 1212.87 L1220.59 1212.87 L1220 1212.87 L1219.42 1212.87 L1218.83 1212.87 L1218.24 1212.87 L1217.66 1212.87 L1217.07 1212.87 L1216.49 1212.87 L1215.9 1212.87 L1215.31 1212.87 L1214.73 1212.87 L1214.14 1212.87 L1213.55 1212.87 L1212.97 1212.87 L1212.38 1212.87 L1211.79 1212.87 L1211.21 1212.87 L1210.62 1212.87 L1210.03 1212.87 L1209.45 1212.87 L1208.86 1212.87 L1208.28 1212.87 L1207.69 1212.87 L1207.1 1212.87 L1206.52 1212.87 L1205.93 1212.87 L1205.34 1212.87 L1204.76 1212.87 L1204.17 1212.87 L1203.58 1212.87 L1203 1212.87 L1202.41 1212.87 L1201.83 1212.87 L1201.24 1212.87 L1200.65 1212.87 L1200.07 1212.87 L1199.48 1212.87 L1198.89 1212.87 L1198.31 1212.87 L1197.72 1212.87 L1197.13 1212.87 L1196.55 1212.87 L1195.96 1212.87 L1195.37 1212.87 L1194.79 1212.87 L1194.2 1212.87 L1193.62 1212.87 L1193.03 1212.87 L1192.44 1212.87 L1191.86 1212.87 L1191.27 1212.87 L1190.68 1212.87 L1190.1 1212.87 L1189.51 1212.87 L1188.92 1212.87 L1188.34 1212.87 L1187.75 1212.87 L1187.16 1212.87 L1186.58 1212.87 L1185.99 1212.87 L1185.41 1212.87 L1184.82 1212.87 L1184.23 1212.87 L1183.65 1212.87 L1183.06 1212.87 L1182.47 1212.87 L1181.89 1212.87 L1181.3 1212.87 L1180.71 1212.87 L1180.13 1212.87 L1179.54 1212.87 L1178.96 1212.87 L1178.37 1212.87 L1177.78 1212.87 L1177.2 1212.87 L1176.61 1212.87 L1176.02 1212.87 L1175.44 1212.87 L1174.85 1212.87 L1174.26 1212.87 L1173.68 1212.87 L1173.09 1212.87 L1172.5 1212.87 L1171.92 1212.87 L1171.33 1212.87 L1170.75 1212.87 L1170.16 1212.87 L1169.57 1212.87 L1168.99 1212.87 L1168.4 1212.87 L1167.81 1212.87 L1167.23 1212.87 L1166.64 1212.87 L1166.05 1212.87 L1165.47 1212.87 L1164.88 1212.87 L1164.29 1212.87 L1163.71 1212.87 L1163.12 1212.87 L1162.54 1212.87 L1161.95 1212.87 L1161.36 1212.87 L1160.78 1212.87 L1160.19 1212.87 L1159.6 1212.87 L1159.02 1212.87 L1158.43 1212.87 L1157.84 1212.87 L1157.26 1212.87 L1156.67 1212.87 L1156.09 1212.87 L1155.5 1212.87 L1154.91 1212.87 L1154.33 1212.87 L1153.74 1212.87 L1153.15 1212.87 L1152.57 1212.87 L1151.98 1212.87 L1151.39 1212.87 L1150.81 1212.87 L1150.22 1212.87 L1149.63 1212.87 L1149.05 1212.87 L1148.46 1212.87 L1147.88 1212.87 L1147.29 1212.87 L1146.7 1212.87 L1146.12 1212.87 L1145.53 1212.87 L1144.94 1212.87 L1144.36 1212.87 L1143.77 1212.87 L1143.18 1212.87 L1142.6 1212.87 L1142.01 1212.87 L1141.42 1212.87 L1140.84 1212.87 L1140.25 1212.87 L1139.67 1212.87 L1139.08 1212.87 L1138.49 1212.87 L1137.91 1212.87 L1137.32 1212.87 L1136.73 1212.87 L1136.15 1212.87 L1135.56 1212.87 L1134.97 1212.87 L1134.39 1212.87 L1133.8 1212.87 L1133.21 1212.87 L1132.63 1212.87 L1132.04 1212.87 L1131.46 1212.87 L1130.87 1212.87 L1130.28 1212.87 L1129.7 1212.87 L1129.11 1212.87 L1128.52 1212.87 L1127.94 1212.87 L1127.35 1212.87 L1126.76 1212.87 L1126.18 1212.87 L1125.59 1212.87 L1125.01 1212.87 L1124.42 1212.87 L1123.83 1212.87 L1123.25 1212.87 L1122.66 1212.87 L1122.07 1212.87 L1121.49 1212.87 L1120.9 1212.87 L1120.31 1212.87 L1119.73 1212.87 L1119.14 1212.87 L1118.55 1212.87 L1117.97 1212.87 L1117.38 1212.87 L1116.8 1212.87 L1116.21 1212.87 L1115.62 1212.87 L1115.04 1212.87 L1114.45 1212.87 L1113.86 1212.87 L1113.28 1212.87 L1112.69 1212.87 L1112.1 1212.87 L1111.52 1212.87 L1110.93 1212.87 L1110.34 1212.87 L1109.76 1212.87 L1109.17 1212.87 L1108.59 1212.87 L1108 1212.87 L1107.41 1212.87 L1106.83 1212.87 L1106.24 1212.87 L1105.65 1212.87 L1105.07 1212.87 L1104.48 1212.87 L1103.89 1212.87 L1103.31 1212.87 L1102.72 1212.87 L1102.14 1212.87 L1101.55 1212.87 L1100.96 1212.87 L1100.38 1212.87 L1099.79 1212.87 L1099.2 1212.87 L1098.62 1212.87 L1098.03 1212.87 L1097.44 1212.87 L1096.86 1212.87 L1096.27 1212.87 L1095.68 1212.87 L1095.1 1212.87 L1094.51 1212.87 L1093.93 1212.87 L1093.34 1212.87 L1092.75 1212.87 L1092.17 1212.87 L1091.58 1212.87 L1090.99 1212.87 L1090.41 1212.87 L1089.82 1212.87 L1089.23 1212.87 L1088.65 1212.87 L1088.06 1212.87 L1087.47 1212.87 L1086.89 1212.87 L1086.3 1212.87 L1085.72 1212.87 L1085.13 1212.87 L1084.54 1212.87 L1083.96 1212.87 L1083.37 1212.87 L1082.78 1212.87 L1082.2 1212.87 L1081.61 1212.87 L1081.02 1212.87 L1080.44 1212.87 L1079.85 1212.87 L1079.26 1212.87 L1078.68 1212.87 L1078.09 1212.87 L1077.51 1212.87 L1076.92 1212.87 L1076.33 1212.87 L1075.75 1212.87 L1075.16 1212.87 L1074.57 1212.87 L1073.99 1212.87 L1073.4 1212.87 L1072.81 1212.87 L1072.23 1212.87 L1071.64 1212.87 L1071.06 1212.87 L1070.47 1212.87 L1069.88 1212.87 L1069.3 1212.87 L1068.71 1212.87 L1068.12 1212.87 L1067.54 1212.87 L1066.95 1212.87 L1066.36 1212.87 L1065.78 1212.87 L1065.19 1212.87 L1064.6 1212.87 L1064.02 1212.87 L1063.43 1212.87 L1062.85 1212.87 L1062.26 1212.87 L1061.67 1212.87 L1061.09 1212.87 L1060.5 1212.87 L1059.91 1212.87 L1059.33 1212.87 L1058.74 1212.87 L1058.15 1212.87 L1057.57 1212.87 L1056.98 1212.87 L1056.39 1212.87 L1055.81 1212.87 L1055.22 1212.87 L1054.64 1212.87 L1054.05 1212.87 L1053.46 1212.87 L1052.88 1212.87 L1052.29 1212.87 L1051.7 1212.87 L1051.12 1212.87 L1050.53 1212.87 L1049.94 1212.87 L1049.36 1212.87 L1048.77 1212.87 L1048.19 1212.87 L1047.6 1212.87 L1047.01 1212.87 L1046.43 1212.87 L1045.84 1212.87 L1045.25 1212.87 L1044.67 1212.87 L1044.08 1212.87 L1043.49 1212.87 L1042.91 1212.87 L1042.32 1212.87 L1041.73 1212.87 L1041.15 1212.87 L1040.56 1212.87 L1039.98 1212.87 L1039.39 1212.87 L1038.8 1212.87 L1038.22 1212.87 L1037.63 1212.87 L1037.04 1212.87 L1036.46 1212.87 L1035.87 1212.87 L1035.28 1212.87 L1034.7 1212.87 L1034.11 1212.87 L1033.52 1212.87 L1032.94 1212.87 L1032.35 1212.87 L1031.77 1212.87 L1031.18 1212.87 L1030.59 1212.87 L1030.01 1212.87 L1029.42 1212.87 L1028.83 1212.87 L1028.25 1212.87 L1027.66 1212.87 L1027.07 1212.87 L1026.49 1212.87 L1025.9 1212.87 L1025.32 1212.87 L1024.73 1212.87 L1024.14 1212.87 L1023.56 1212.87 L1022.97 1212.87 L1022.38 1212.87 L1021.8 1212.87 L1021.21 1212.87 L1020.62 1212.87 L1020.04 1212.87 L1019.45 1212.87 L1018.86 1212.87 L1018.28 1212.87 L1017.69 1212.87 L1017.11 1212.87 L1016.52 1212.87 L1015.93 1212.87 L1015.35 1212.87 L1014.76 1212.87 L1014.17 1212.87 L1013.59 1212.87 L1013 1212.87 L1012.41 1212.87 L1011.83 1212.87 L1011.24 1212.87 L1010.65 1212.87 L1010.07 1212.87 L1009.48 1212.87 L1008.9 1212.87 L1008.31 1212.87 L1007.72 1212.87 L1007.14 1212.87 L1006.55 1212.87 L1005.96 1212.87 L1005.38 1212.87 L1004.79 1212.87 L1004.2 1212.87 L1003.62 1212.87 L1003.03 1212.87 L1002.44 1212.87 L1001.86 1212.87 L1001.27 1212.87 L1000.69 1212.87 L1000.1 1212.87 L999.513 1212.87 L998.926 1212.87 L998.34 1212.87 L997.754 1212.87 L997.167 1212.87 L996.581 1212.87 L995.994 1212.87 L995.408 1212.87 L994.822 1212.87 L994.235 1212.87 L993.649 1212.87 L993.062 1212.87 L992.476 1212.87 L991.889 1212.87 L991.303 1212.87 L990.717 1212.87 L990.13 1212.87 L989.544 1212.87 L988.957 1212.87 L988.371 1212.87 L987.785 1212.87 L987.198 1212.87 L986.612 1212.87 L986.025 1212.87  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.22 986.612,1213.22 987.198,1213.22 987.785,1213.22 988.371,1213.22 988.957,1213.22 989.544,1213.22 990.13,1213.22 990.717,1213.22 991.303,1213.22 991.889,1213.22 992.476,1213.22 993.062,1213.22 993.649,1213.22 994.235,1213.22 994.822,1213.22 995.408,1213.22 995.994,1213.22 996.581,1213.22 997.167,1213.22 997.754,1213.22 998.34,1213.22 998.926,1213.22 999.513,1213.22 1000.1,1213.22 1000.69,1213.22 1001.27,1213.22 1001.86,1213.22 1002.44,1213.22 1003.03,1213.22 1003.62,1213.22 1004.2,1213.22 1004.79,1213.22 1005.38,1213.22 1005.96,1213.22 1006.55,1213.22 1007.14,1213.22 1007.72,1213.22 1008.31,1213.22 1008.9,1213.22 1009.48,1213.22 1010.07,1213.22 1010.65,1213.22 1011.24,1213.22 1011.83,1213.22 1012.41,1213.22 1013,1213.22 1013.59,1213.22 1014.17,1213.22 1014.76,1213.22 1015.35,1213.22 1015.93,1213.22 1016.52,1213.22 1017.11,1213.22 1017.69,1213.22 1018.28,1213.22 1018.86,1213.22 1019.45,1213.22 1020.04,1213.22 1020.62,1213.22 1021.21,1213.22 1021.8,1213.22 1022.38,1213.22 1022.97,1213.22 1023.56,1213.22 1024.14,1213.22 1024.73,1213.22 1025.32,1213.22 1025.9,1213.22 1026.49,1213.22 1027.07,1213.22 1027.66,1213.22 1028.25,1213.22 1028.83,1213.22 1029.42,1213.22 1030.01,1213.22 1030.59,1213.22 1031.18,1213.22 1031.77,1213.22 1032.35,1213.22 1032.94,1213.22 1033.52,1213.22 1034.11,1213.22 1034.7,1213.22 1035.28,1213.22 1035.87,1213.22 1036.46,1213.22 1037.04,1213.22 1037.63,1213.22 1038.22,1213.22 1038.8,1213.22 1039.39,1213.22 1039.98,1213.22 1040.56,1213.22 1041.15,1213.22 1041.73,1213.22 1042.32,1213.22 1042.91,1213.22 1043.49,1213.22 1044.08,1213.22 1044.67,1213.22 1045.25,1213.22 1045.84,1213.22 1046.43,1213.22 1047.01,1213.22 1047.6,1213.22 1048.19,1213.22 1048.77,1213.22 1049.36,1213.22 1049.94,1213.22 1050.53,1213.22 1051.12,1213.22 1051.7,1213.22 1052.29,1213.22 1052.88,1213.22 1053.46,1213.22 1054.05,1213.22 1054.64,1213.22 1055.22,1213.22 1055.81,1213.22 1056.39,1213.22 1056.98,1213.22 1057.57,1213.22 1058.15,1213.22 1058.74,1213.22 1059.33,1213.22 1059.91,1213.22 1060.5,1213.22 1061.09,1213.22 1061.67,1213.22 1062.26,1213.22 1062.85,1213.22 1063.43,1213.22 1064.02,1213.22 1064.6,1213.22 1065.19,1213.22 1065.78,1213.22 1066.36,1213.22 1066.95,1213.22 1067.54,1213.22 1068.12,1213.22 1068.71,1213.22 1069.3,1213.22 1069.88,1213.22 1070.47,1213.22 1071.06,1213.22 1071.64,1213.22 1072.23,1213.22 1072.81,1213.22 1073.4,1213.22 1073.99,1213.22 1074.57,1213.22 1075.16,1213.22 1075.75,1213.22 1076.33,1213.22 1076.92,1213.22 1077.51,1213.22 1078.09,1213.22 1078.68,1213.22 1079.26,1213.22 1079.85,1213.22 1080.44,1213.22 1081.02,1213.22 1081.61,1213.22 1082.2,1213.22 1082.78,1213.22 1083.37,1213.22 1083.96,1213.22 1084.54,1213.22 1085.13,1213.22 1085.72,1213.22 1086.3,1213.22 1086.89,1213.22 1087.47,1213.22 1088.06,1213.22 1088.65,1213.22 1089.23,1213.22 1089.82,1213.22 1090.41,1213.22 1090.99,1213.22 1091.58,1213.22 1092.17,1213.22 1092.75,1213.22 1093.34,1213.22 1093.93,1213.22 1094.51,1213.22 1095.1,1213.22 1095.68,1213.22 1096.27,1213.22 1096.86,1213.22 1097.44,1213.22 1098.03,1213.22 1098.62,1213.22 1099.2,1213.22 1099.79,1213.22 1100.38,1213.22 1100.96,1213.22 1101.55,1213.22 1102.14,1213.22 1102.72,1213.22 1103.31,1213.22 1103.89,1213.22 1104.48,1213.22 1105.07,1213.22 1105.65,1213.22 1106.24,1213.22 1106.83,1213.22 1107.41,1213.22 1108,1213.22 1108.59,1213.22 1109.17,1213.22 1109.76,1213.22 1110.34,1213.22 1110.93,1213.22 1111.52,1213.22 1112.1,1213.22 1112.69,1213.22 1113.28,1213.22 1113.86,1213.22 1114.45,1213.22 1115.04,1213.22 1115.62,1213.22 1116.21,1213.22 1116.8,1213.22 1117.38,1213.22 1117.97,1213.22 1118.55,1213.22 1119.14,1213.22 1119.73,1213.22 1120.31,1213.22 1120.9,1213.22 1121.49,1213.22 1122.07,1213.22 1122.66,1213.22 1123.25,1213.22 1123.83,1213.22 1124.42,1213.22 1125.01,1213.22 1125.59,1213.22 1126.18,1213.22 1126.76,1213.22 1127.35,1213.22 1127.94,1213.22 1128.52,1213.22 1129.11,1213.22 1129.7,1213.22 1130.28,1213.22 1130.87,1213.22 1131.46,1213.22 1132.04,1213.22 1132.63,1213.22 1133.21,1213.22 1133.8,1213.22 1134.39,1213.22 1134.97,1213.22 1135.56,1213.22 1136.15,1213.22 1136.73,1213.22 1137.32,1213.22 1137.91,1213.22 1138.49,1213.22 1139.08,1213.22 1139.67,1213.22 1140.25,1213.22 1140.84,1213.22 1141.42,1213.22 1142.01,1213.22 1142.6,1213.22 1143.18,1213.22 1143.77,1213.22 1144.36,1213.22 1144.94,1213.22 1145.53,1213.22 1146.12,1213.22 1146.7,1213.22 1147.29,1213.22 1147.88,1213.22 1148.46,1213.22 1149.05,1213.22 1149.63,1213.22 1150.22,1213.22 1150.81,1213.22 1151.39,1213.22 1151.98,1213.22 1152.57,1213.22 1153.15,1213.22 1153.74,1213.22 1154.33,1213.22 1154.91,1213.22 1155.5,1213.22 1156.09,1213.22 1156.67,1213.22 1157.26,1213.22 1157.84,1213.22 1158.43,1213.22 1159.02,1213.22 1159.6,1213.22 1160.19,1213.22 1160.78,1213.22 1161.36,1213.22 1161.95,1213.22 1162.54,1213.22 1163.12,1213.22 1163.71,1213.22 1164.29,1213.22 1164.88,1213.22 1165.47,1213.22 1166.05,1213.22 1166.64,1213.22 1167.23,1213.22 1167.81,1213.22 1168.4,1213.22 1168.99,1213.22 1169.57,1213.22 1170.16,1213.22 1170.75,1213.22 1171.33,1213.22 1171.92,1213.22 1172.5,1213.22 1173.09,1213.22 1173.68,1213.22 1174.26,1213.22 1174.85,1213.22 1175.44,1213.22 1176.02,1213.22 1176.61,1213.22 1177.2,1213.22 1177.78,1213.22 1178.37,1213.22 1178.96,1213.22 1179.54,1213.22 1180.13,1213.22 1180.71,1213.22 1181.3,1213.22 1181.89,1213.22 1182.47,1213.22 1183.06,1213.22 1183.65,1213.22 1184.23,1213.22 1184.82,1213.22 1185.41,1213.22 1185.99,1213.22 1186.58,1213.22 1187.16,1213.22 1187.75,1213.22 1188.34,1213.22 1188.92,1213.22 1189.51,1213.22 1190.1,1213.22 1190.68,1213.22 1191.27,1213.22 1191.86,1213.22 1192.44,1213.22 1193.03,1213.22 1193.62,1213.22 1194.2,1213.22 1194.79,1213.22 1195.37,1213.22 1195.96,1213.22 1196.55,1213.22 1197.13,1213.22 1197.72,1213.22 1198.31,1213.22 1198.89,1213.22 1199.48,1213.22 1200.07,1213.22 1200.65,1213.22 1201.24,1213.22 1201.83,1213.22 1202.41,1213.22 1203,1213.22 1203.58,1213.22 1204.17,1213.22 1204.76,1213.22 1205.34,1213.22 1205.93,1213.22 1206.52,1213.22 1207.1,1213.22 1207.69,1213.22 1208.28,1213.22 1208.86,1213.22 1209.45,1213.22 1210.03,1213.22 1210.62,1213.22 1211.21,1213.22 1211.79,1213.22 1212.38,1213.22 1212.97,1213.22 1213.55,1213.22 1214.14,1213.22 1214.73,1213.22 1215.31,1213.22 1215.9,1213.22 1216.49,1213.22 1217.07,1213.22 1217.66,1213.22 1218.24,1213.22 1218.83,1213.22 1219.42,1213.22 1220,1213.22 1220.59,1213.22 1221.18,1213.22 1221.76,1213.22 1222.35,1213.22 1222.94,1213.22 1223.52,1213.22 1224.11,1213.22 1224.7,1213.22 1225.28,1213.22 1225.87,1213.22 1226.45,1213.22 1227.04,1213.22 1227.63,1213.22 1228.21,1213.22 1228.8,1213.22 1229.39,1213.22 1229.97,1213.22 1230.56,1213.22 1231.15,1213.22 1231.73,1213.22 1232.32,1213.22 1232.91,1213.22 1233.49,1213.22 1234.08,1213.22 1234.66,1213.22 1235.25,1213.22 1235.84,1213.22 1236.42,1213.22 1237.01,1213.22 1237.6,1213.22 1238.18,1213.22 1238.77,1213.22 1239.36,1213.22 1239.94,1213.22 1240.53,1213.22 1241.11,1213.22 1241.7,1213.22 1242.29,1213.22 1242.87,1213.22 1243.46,1213.22 1244.05,1213.22 1244.63,1213.22 1245.22,1213.22 1245.81,1213.22 1246.39,1213.22 1246.98,1213.22 1247.57,1213.22 1248.15,1213.22 1248.74,1213.22 1249.32,1213.22 1249.91,1213.22 1250.5,1213.22 1251.08,1213.22 1251.67,1213.22 1252.26,1213.22 1252.84,1213.22 1253.43,1213.22 1254.02,1213.22 1254.6,1213.22 1255.19,1213.22 1255.78,1213.22 1256.36,1213.22 1256.95,1213.22 1257.53,1213.22 1258.12,1213.22 1258.71,1213.22 1259.29,1213.22 1259.88,1213.22 1260.47,1213.22 1261.05,1213.22 1261.64,1213.22 1262.23,1213.22 1262.81,1213.22 1263.4,1213.22 1263.98,1213.22 1264.57,1213.22 1265.16,1213.22 1265.74,1213.22 1266.33,1213.22 1266.92,1213.22 1267.5,1213.22 1268.09,1213.22 1268.68,1213.22 1269.26,1213.22 1269.85,1213.22 1270.44,1213.22 1271.02,1213.22 1271.61,1213.22 1272.19,1213.22 1272.78,1213.22 1273.37,1213.22 1273.95,1213.22 1274.54,1213.22 1275.13,1213.22 1275.71,1213.22 1276.3,1213.22 1276.89,1213.22 1277.47,1213.22 1278.06,1213.22 1278.65,1213.22 1279.23,1213.22 1279.82,1213.22 1280.4,1213.22 1280.99,1213.22 1281.58,1213.22 1282.16,1213.22 1282.75,1213.22 1283.34,1213.22 1283.92,1213.22 1284.51,1213.22 1285.1,1213.22 1285.68,1213.22 1286.27,1213.22 1286.86,1213.22 1287.44,1213.22 1288.03,1213.22 1288.61,1213.22 1289.2,1213.22 1289.79,1213.22 1290.37,1213.22 1290.96,1213.22 1291.55,1213.22 1292.13,1213.22 1292.72,1213.22 1293.31,1213.22 1293.89,1213.22 1294.48,1213.22 1295.06,1213.22 1295.65,1213.22 1296.24,1213.22 1296.82,1213.22 1297.41,1213.22 1298,1213.22 1298.58,1213.22 1299.17,1213.22 1299.76,1213.22 1300.34,1213.22 1300.93,1213.22 1301.52,1213.22 1302.1,1213.22 1302.69,1213.22 1303.27,1213.22 1303.86,1213.22 1304.45,1213.22 1305.03,1213.22 1305.62,1213.22 1306.21,1213.22 1306.79,1213.22 1307.38,1213.22 1307.97,1213.22 1308.55,1213.22 1309.14,1213.22 1309.73,1213.22 1310.31,1213.22 1310.9,1213.22 1311.48,1213.22 1312.07,1213.22 1312.66,1213.22 1313.24,1213.22 1313.83,1213.22 1314.42,1213.22 1315,1213.22 1315.59,1213.22 1316.18,1213.22 1316.76,1213.22 1317.35,1213.22 1317.93,1213.22 1318.52,1213.22 1319.11,1213.22 1319.69,1213.22 1320.28,1213.22 1320.87,1213.22 1321.45,1213.22 1322.04,1213.22 1322.63,1213.22 1323.21,1213.22 1323.8,1213.22 1324.39,1213.22 1324.97,1213.22 1325.56,1213.22 1326.14,1213.22 1326.73,1213.22 1327.32,1213.22 1327.9,1213.22 1328.49,1213.22 1329.08,1213.22 1329.66,1213.22 1330.25,1213.22 1330.84,1213.22 1331.42,1213.22 1332.01,1213.22 1332.6,1213.22 1333.18,1213.22 1333.77,1213.22 1334.35,1213.22 1334.94,1213.22 1335.53,1213.22 1336.11,1213.22 1336.7,1213.22 1337.29,1213.22 1337.87,1213.22 1338.46,1213.22 1339.05,1213.22 1339.63,1213.22 1340.22,1213.22 1340.8,1213.22 1341.39,1213.22 1341.98,1213.22 1342.56,1213.22 1343.15,1213.22 1343.74,1213.22 1344.32,1213.22 1344.91,1213.22 1345.5,1213.22 1346.08,1213.22 1346.67,1213.22 1347.26,1213.22 1347.84,1213.22 1348.43,1213.22 1349.01,1213.22 1349.6,1213.22 1350.19,1213.22 1350.77,1213.22 1351.36,1213.22 1351.95,1213.22 1352.53,1213.22 1353.12,1213.22 1353.71,1213.22 1354.29,1213.22 1354.88,1213.22 1355.47,1213.22 1356.05,1213.22 1356.64,1213.22 1357.22,1213.22 1357.81,1213.22 1358.4,1213.22 1358.98,1213.22 1359.57,1213.22 1360.16,1213.22 1360.74,1213.22 1361.33,1213.22 1361.92,1213.22 1362.5,1213.22 1363.09,1213.22 1363.68,1213.22 1364.26,1213.22 1364.85,1213.22 1365.43,1213.22 1366.02,1213.22 1366.61,1213.22 1367.19,1213.22 1367.78,1213.22 1368.37,1213.22 1368.95,1213.22 1369.54,1213.22 1370.13,1213.22 1370.71,1213.22 1371.3,1213.22 1371.88,1213.22 1372.47,1213.22 1373.06,1213.22 1373.64,1213.22 1374.23,1213.22 1374.82,1213.22 1375.4,1213.22 1375.99,1213.22 1376.58,1213.22 1377.16,1213.22 1377.75,1213.22 1378.34,1213.22 1378.92,1213.22 1379.51,1213.22 1380.09,1213.22 1380.68,1213.22 1381.27,1213.22 1381.85,1213.22 1382.44,1213.22 1383.03,1213.22 1383.61,1213.22 1384.2,1213.22 1384.79,1213.22 1385.37,1213.22 1385.96,1213.22 1386.55,1213.22 1387.13,1213.22 1387.72,1213.22 1388.3,1213.22 1388.89,1213.22 1389.48,1213.22 1390.06,1213.22 1390.65,1213.22 1391.24,1213.22 1391.82,1213.22 1392.41,1213.22 1393,1213.22 1393.58,1213.22 1394.17,1213.22 1394.75,1213.22 1395.34,1213.22 1395.93,1213.22 1396.51,1213.22 1397.1,1213.22 1397.69,1213.22 1398.27,1213.22 1398.86,1213.22 1399.45,1213.22 1400.03,1213.22 1400.62,1213.22 1401.21,1213.22 1401.79,1213.22 1402.38,1213.22 1402.96,1213.22 1403.55,1213.22 1404.14,1213.22 1404.72,1213.22 1405.31,1213.22 1405.9,1213.22 1406.48,1213.22 1407.07,1213.22 1407.66,1213.22 1408.24,1213.22 1408.83,1213.22 1409.42,1213.22 1410,1213.22 1410.59,1213.22 1411.17,1213.22 1411.76,1213.22 1412.35,1213.22 1412.93,1213.22 1413.52,1213.22 1414.11,1213.22 1414.69,1213.22 1415.28,1213.22 1415.87,1213.22 1416.45,1213.22 1417.04,1213.22 1417.63,1213.22 1418.21,1213.22 1418.8,1213.22 1419.38,1213.22 1419.97,1213.22 1420.56,1213.22 1421.14,1213.22 1421.73,1213.22 1422.32,1213.22 1422.9,1213.22 1423.49,1213.22 1424.08,1213.22 1424.66,1213.22 1425.25,1213.22 1425.83,1213.22 1426.42,1213.22 1427.01,1213.22 1427.59,1213.22 1428.18,1213.22 1428.77,1213.22 1429.35,1213.22 1429.94,1213.22 1430.53,1213.22 1431.11,1213.22 1431.7,1213.22 1432.29,1213.22 1432.87,1213.22 1433.46,1213.22 1434.04,1213.22 1434.63,1213.22 1435.22,1213.22 1435.8,1213.22 1436.39,1213.22 1436.98,1213.22 1437.56,1213.22 1438.15,1213.22 1438.74,1213.22 1439.32,1213.22 1439.91,1213.22 1440.5,1213.22 1441.08,1213.22 1441.67,1213.22 1442.25,1213.22 1442.84,1213.22 1443.43,1213.22 1444.01,1213.22 1444.6,1213.22 1445.19,1213.22 1445.77,1213.22 1446.36,1213.22 1446.95,1213.22 1447.53,1213.22 1448.12,1213.22 1448.7,1213.22 1449.29,1213.22 1449.88,1213.22 1450.46,1213.22 1451.05,1213.22 1451.64,1213.22 1452.22,1213.22 1452.81,1213.22 1453.4,1213.22 1453.98,1213.22 1454.57,1213.22 1455.16,1213.22 1455.74,1213.22 1456.33,1213.22 1456.91,1213.22 1457.5,1213.22 1458.09,1213.22 1458.67,1213.22 1459.26,1213.22 1459.85,1213.22 1460.43,1213.22 1461.02,1213.22 1461.61,1213.22 1462.19,1213.22 1462.78,1213.22 1463.37,1213.22 1463.95,1213.22 1464.54,1213.22 1465.12,1213.22 1465.71,1213.22 1466.3,1213.22 1466.88,1213.22 1467.47,1213.22 1468.06,1213.22 1468.64,1213.22 1469.23,1213.22 1469.82,1213.22 1470.4,1213.22 1470.99,1213.22 1471.57,1213.22 1472.16,1213.22 1472.75,1213.22 1473.33,1213.22 1473.92,1213.22 1474.51,1213.22 1475.09,1213.22 1475.68,1213.22 1476.27,1213.22 1476.85,1213.22 1477.44,1213.22 1478.03,1213.22 1478.61,1213.22 1479.2,1213.22 1479.78,1213.22 1480.37,1213.22 1480.96,1213.22 1481.54,1213.22 1482.13,1213.22 1482.72,1213.22 1483.3,1213.22 1483.89,1213.22 1484.48,1213.22 1485.06,1213.22 1485.65,1213.22 1486.24,1213.22 1486.82,1213.22 1487.41,1213.22 1487.99,1213.22 1488.58,1213.22 1489.17,1213.22 1489.75,1213.22 1490.34,1213.22 1490.93,1213.22 1491.51,1213.22 1492.1,1213.22 1492.69,1213.22 1493.27,1213.22 1493.86,1213.22 1494.45,1213.22 1495.03,1213.22 1495.62,1213.22 1496.2,1213.22 1496.79,1213.22 1497.38,1213.22 1497.96,1213.22 1498.55,1213.22 1499.14,1213.22 1499.72,1213.22 1500.31,1213.22 1500.9,1213.22 1501.48,1213.22 1502.07,1213.22 1502.65,1213.22 1503.24,1213.22 1503.83,1213.22 1504.41,1213.22 1505,1213.22 1505.59,1213.22 1506.17,1213.22 1506.76,1213.22 1507.35,1213.22 1507.93,1213.22 1508.52,1213.22 1509.11,1213.22 1509.69,1213.22 1510.28,1213.22 1510.86,1213.22 1511.45,1213.22 1512.04,1213.22 1512.62,1213.22 1513.21,1213.22 1513.8,1213.22 1514.38,1213.22 1514.97,1213.22 1515.56,1213.22 1516.14,1213.22 1516.73,1213.22 1517.32,1213.22 1517.9,1213.22 1518.49,1213.22 1519.07,1213.22 1519.66,1213.22 1520.25,1213.22 1520.83,1213.22 1521.42,1213.22 1522.01,1213.22 1522.59,1213.22 1523.18,1213.22 1523.77,1213.22 1524.35,1213.22 1524.94,1213.22 1525.52,1213.22 1526.11,1213.22 1526.7,1213.22 1527.28,1213.22 1527.87,1213.22 1528.46,1213.22 1529.04,1213.22 1529.63,1213.22 1530.22,1213.22 1530.8,1213.22 1531.39,1213.22 1531.98,1213.22 1532.56,1213.22 1533.15,1213.22 1533.73,1213.22 1534.32,1213.22 1534.91,1213.22 1535.49,1213.22 1536.08,1213.22 1536.67,1213.22 1537.25,1213.22 1537.84,1213.22 1538.43,1213.22 1539.01,1213.22 1539.6,1213.22 1540.19,1213.22 1540.77,1213.22 1541.36,1213.22 1541.94,1213.22 1542.53,1213.22 1543.12,1213.22 1543.7,1213.22 1544.29,1213.22 1544.88,1213.22 1545.46,1213.22 1546.05,1213.22 1546.64,1213.22 1547.22,1213.22 1547.81,1213.22 1548.4,1213.22 1548.98,1213.22 1549.57,1213.22 1550.15,1213.22 1550.74,1213.22 1551.33,1213.22 1551.91,1213.22 1552.5,1213.22 1553.09,1213.22 1553.67,1213.22 1554.26,1213.22 1554.85,1213.22 1555.43,1213.22 1556.02,1213.22 1556.6,1213.22 1557.19,1213.22 1557.78,1213.22 1558.36,1213.22 1558.95,1213.22 1559.54,1213.22 1560.12,1213.22 1560.71,1213.22 1561.3,1213.22 1561.88,1213.22 1562.47,1213.22 1563.06,1213.22 1563.64,1213.22 1564.23,1213.22 1564.81,1213.22 1565.4,1213.22 1565.99,1213.22 1566.57,1213.22 1567.16,1213.22 1567.75,1213.22 1568.33,1213.22 1568.92,1213.22 1569.51,1213.22 1570.09,1213.22 1570.68,1213.22 1571.27,1213.22 1571.85,1213.22 1572.44,1213.22 1573.02,1213.22 1573.61,1213.22 1574.2,1213.22 1574.78,1213.22 1575.37,1213.22 1575.96,1213.22 1576.54,1213.22 1577.13,1213.22 1577.72,1213.22 1578.3,1213.22 1578.89,1213.22 1579.47,1213.22 1580.06,1213.22 1580.65,1213.22 1581.23,1213.22 1581.82,1213.22 1582.41,1213.22 1582.99,1213.22 1583.58,1213.22 1584.17,1213.22 1584.75,1213.22 1585.34,1213.22 1585.93,1213.22 1586.51,1213.22 1587.1,1213.22 1587.68,1213.22 1588.27,1213.22 1588.86,1213.22 1589.44,1213.22 1590.03,1213.22 1590.62,1213.22 1591.2,1213.22 1591.79,1213.22 1592.38,1213.22 1592.96,1213.22 1593.55,1213.22 1594.14,1213.22 1594.72,1213.22 1595.31,1213.22 1595.89,1213.22 1596.48,1213.22 1597.07,1213.22 1597.65,1213.22 1598.24,1213.22 1598.83,1213.22 1599.41,1213.22 1600,1213.22 1600.59,1213.22 1601.17,1213.22 1601.76,1213.22 1602.34,1213.22 1602.93,1213.22 1603.52,1213.22 1604.1,1213.22 1604.69,1213.22 1605.28,1213.22 1605.86,1213.22 1606.45,1213.22 1607.04,1213.22 1607.62,1213.22 1608.21,1213.22 1608.8,1213.22 1609.38,1213.22 1609.97,1213.22 1610.55,1213.22 1611.14,1213.22 1611.73,1213.22 1612.31,1213.22 1612.9,1213.22 1613.49,1213.22 1614.07,1213.22 1614.66,1213.22 1615.25,1213.22 1615.83,1213.22 1616.42,1213.22 1617.01,1213.22 1617.59,1213.22 1618.18,1213.22 1618.76,1213.22 1619.35,1213.22 1619.94,1213.22 1620.52,1213.22 1621.11,1213.22 1621.7,1213.22 1622.28,1213.22 1622.87,1213.22 1623.46,1213.22 1624.04,1213.22 1624.63,1213.22 1625.22,1213.22 1625.8,1213.22 1626.39,1213.22 1626.97,1213.22 1627.56,1213.22 1628.15,1213.22 1628.73,1213.22 1629.32,1213.22 1629.91,1213.22 1630.49,1213.22 1631.08,1213.22 1631.67,1213.22 1632.25,1213.22 1632.84,1213.22 1633.42,1213.22 1634.01,1213.22 1634.6,1213.22 1635.18,1213.22 1635.77,1213.22 1636.36,1213.22 1636.94,1213.22 1637.53,1213.22 1638.12,1213.22 1638.7,1213.22 1639.29,1213.22 1639.88,1213.22 1640.46,1213.22 1641.05,1213.22 1641.63,1213.22 1642.22,1213.22 1642.81,1213.22 1643.39,1213.22 1643.98,1213.22 1644.57,1213.22 1645.15,1213.22 1645.74,1213.22 1646.33,1213.22 1646.91,1213.22 1647.5,1213.22 1648.09,1213.22 1648.67,1213.22 1649.26,1213.22 1649.84,1213.22 1650.43,1213.22 1651.02,1213.22 1651.6,1213.22 1652.19,1213.22 1652.78,1213.22 1653.36,1213.22 1653.95,1213.22 1654.54,1213.22 1655.12,1213.22 1655.71,1213.22 1656.29,1213.22 1656.88,1213.22 1657.47,1213.22 1658.05,1213.22 1658.64,1213.22 1659.23,1213.22 1659.81,1213.22 1660.4,1213.22 1660.99,1213.22 1661.57,1213.22 1662.16,1213.22 1662.75,1213.22 1663.33,1213.22 1663.92,1213.22 1664.5,1213.22 1665.09,1213.22 1665.68,1213.22 1666.26,1213.22 1666.85,1213.22 1667.44,1213.22 1668.02,1213.22 1668.61,1213.22 1669.2,1213.22 1669.78,1213.22 1670.37,1213.22 1670.96,1213.22 1671.54,1213.22 1672.13,1213.22 1672.71,1213.22 1673.3,1213.22 1673.89,1213.22 1674.47,1213.22 1675.06,1213.22 1675.65,1213.22 1676.23,1213.22 1676.82,1213.22 1677.41,1213.22 1677.99,1213.22 1678.58,1213.22 1679.17,1213.22 1679.75,1213.22 1680.34,1213.22 1680.92,1213.22 1681.51,1213.22 1682.1,1213.22 1682.68,1213.22 1683.27,1213.22 1683.86,1213.22 1684.44,1213.22 1685.03,1213.22 1685.62,1213.22 1686.2,1213.22 1686.79,1213.22 1687.37,1213.22 1687.96,1213.22 1688.55,1213.22 1689.13,1213.22 1689.72,1213.22 1690.31,1213.22 1690.89,1213.22 1691.48,1213.22 1692.07,1213.22 1692.65,1213.22 1693.24,1213.22 1693.83,1213.22 1694.41,1213.22 1695,1213.22 1695.58,1213.22 1696.17,1213.22 1696.76,1213.22 1697.34,1213.22 1697.93,1213.22 1698.52,1213.22 1699.1,1213.22 1699.69,1213.22 1700.28,1213.22 1700.86,1213.22 1701.45,1213.22 1702.04,1213.22 1702.62,1213.22 1703.21,1213.22 1703.79,1213.22 1704.38,1213.22 1704.97,1213.22 1705.55,1213.22 1706.14,1213.22 1706.73,1213.22 1707.31,1213.22 1707.9,1213.22 1708.49,1213.22 1709.07,1213.22 1709.66,1213.22 1710.24,1213.22 1710.83,1213.22 1711.42,1213.22 1712,1213.22 1712.59,1213.22 1713.18,1213.22 1713.76,1213.22 1714.35,1213.22 1714.94,1213.22 1715.52,1213.22 1716.11,1213.22 1716.7,1213.22 1717.28,1213.22 1717.87,1213.22 1718.45,1213.22 1719.04,1213.22 1719.63,1213.22 1720.21,1213.22 1720.8,1213.22 1721.39,1213.22 1721.97,1213.22 1722.56,1213.22 1723.15,1213.22 1723.73,1213.22 1724.32,1213.22 1724.91,1213.22 1725.49,1213.22 1726.08,1213.22 1726.66,1213.22 1727.25,1213.22 1727.84,1213.22 1728.42,1213.22 1729.01,1213.22 1729.6,1213.22 1730.18,1213.22 1730.77,1213.22 1731.36,1213.22 1731.94,1213.22 1732.53,1213.22 1733.11,1213.22 1733.7,1213.22 1734.29,1213.22 1734.87,1213.22 1735.46,1213.22 1736.05,1213.22 1736.63,1213.22 1737.22,1213.22 1737.81,1213.22 1738.39,1213.22 1738.98,1213.22 1739.57,1213.22 1740.15,1213.22 1740.74,1213.22 1741.32,1213.22 1741.91,1213.22 1742.5,1213.22 1743.08,1213.22 1743.67,1213.22 1744.26,1213.22 1744.84,1213.22 1745.43,1213.22 1746.02,1213.22 1746.6,1213.22 1747.19,1213.22 1747.78,1213.22 1748.36,1213.22 1748.95,1213.22 1749.53,1213.22 1750.12,1213.22 1750.71,1213.22 1751.29,1213.22 1751.88,1213.22 1752.47,1213.22 1753.05,1213.22 1753.64,1213.22 1754.23,1213.22 1754.81,1213.22 1755.4,1213.22 1755.99,1213.22 1756.57,1213.22 1757.16,1213.22 1757.74,1213.22 1758.33,1213.22 1758.92,1213.22 1759.5,1213.22 1760.09,1213.22 1760.68,1213.22 1761.26,1213.22 1761.85,1213.22 1762.44,1213.22 1763.02,1213.22 1763.61,1213.22 1764.19,1213.22 1764.78,1213.22 1765.37,1213.22 1765.95,1213.22 1766.54,1213.22 1767.13,1213.22 1767.71,1213.22 1768.3,1213.22 1768.89,1213.22 1769.47,1213.22 1770.06,1213.22 1770.65,1213.22 1771.23,1213.22 1771.82,1213.22 1772.4,1213.22 1772.99,1213.22 1773.58,1213.22 1774.16,1213.22 1774.75,1213.22 1775.34,1213.22 1775.92,1213.22 1776.51,1213.22 1777.1,1213.22 1777.68,1213.22 1778.27,1213.22 1778.86,1213.22 1779.44,1213.22 1780.03,1213.22 1780.61,1213.22 1781.2,1213.22 1781.79,1213.22 1782.37,1213.22 1782.96,1213.22 1783.55,1213.22 1784.13,1213.22 1784.72,1213.22 1785.31,1213.22 1785.89,1213.22 1786.48,1213.22 1787.06,1213.22 1787.65,1213.22 1788.24,1213.22 1788.82,1213.22 1789.41,1213.22 1790,1213.22 1790.58,1213.22 1791.17,1213.22 1791.76,1213.22 1792.34,1213.22 1792.93,1213.22 1793.52,1213.22 1794.1,1213.22 1794.69,1213.22 1795.27,1213.22 1795.86,1213.22 1796.45,1213.22 1797.03,1213.22 1797.62,1213.22 1798.21,1213.22 1798.79,1213.22 1799.38,1213.22 1799.97,1213.22 1800.55,1213.22 1801.14,1213.22 1801.73,1213.22 1802.31,1213.22 1802.9,1213.22 1803.48,1213.22 1804.07,1213.22 1804.66,1213.22 1805.24,1213.22 1805.83,1213.22 1806.42,1213.22 1807,1213.22 1807.59,1213.22 1808.18,1213.22 1808.76,1213.22 1809.35,1213.22 1809.94,1213.22 1810.52,1213.22 1811.11,1213.22 1811.69,1213.22 1812.28,1213.22 1812.87,1213.22 1813.45,1213.22 1814.04,1213.22 1814.63,1213.22 1815.21,1213.22 1815.8,1213.22 1816.39,1213.22 1816.97,1213.22 1817.56,1213.22 1818.14,1213.22 1818.73,1213.22 1819.32,1213.22 1819.9,1213.22 1820.49,1213.22 1821.08,1213.22 1821.66,1213.22 1822.25,1213.22 1822.84,1213.22 1823.42,1213.22 1824.01,1213.22 1824.6,1213.22 1825.18,1213.22 1825.77,1213.22 1826.35,1213.22 1826.94,1213.22 1827.53,1213.22 1828.11,1213.22 1828.7,1213.22 1829.29,1213.22 1829.87,1213.22 1830.46,1213.22 1831.05,1213.22 1831.63,1213.22 1832.22,1213.22 1832.81,1213.22 1833.39,1213.22 1833.98,1213.22 1834.56,1213.22 1835.15,1213.22 1835.74,1213.22 1836.32,1213.22 1836.91,1213.22 1837.5,1213.22 1838.08,1213.22 1838.67,1213.22 1839.26,1213.22 1839.84,1213.22 1840.43,1213.22 1841.01,1213.22 1841.6,1213.22 1842.19,1213.22 1842.77,1213.22 1843.36,1213.22 1843.95,1213.22 1844.53,1213.22 1845.12,1213.22 1845.71,1213.22 1846.29,1213.22 1846.88,1213.22 1847.47,1213.22 1848.05,1213.22 1848.64,1213.22 1849.22,1213.22 1849.81,1213.22 1850.4,1213.22 1850.98,1213.22 1851.57,1213.22 1852.16,1213.22 1852.74,1213.22 1853.33,1213.22 1853.92,1213.22 1854.5,1213.22 1855.09,1213.22 1855.68,1213.22 1856.26,1213.22 1856.85,1213.22 1857.43,1213.22 1858.02,1213.22 1858.61,1213.22 1859.19,1213.22 1859.78,1213.22 1860.37,1213.22 1860.95,1213.22 1861.54,1213.22 1862.13,1213.22 1862.71,1213.22 1863.3,1213.22 1863.88,1213.22 1864.47,1213.22 1865.06,1213.22 1865.64,1213.22 1866.23,1213.22 1866.82,1213.22 1867.4,1213.22 1867.99,1213.22 1868.58,1213.22 1869.16,1213.22 1869.75,1213.22 1870.34,1213.22 1870.92,1213.22 1871.51,1213.22 1872.09,1213.22 1872.68,1213.22 1873.27,1213.22 1873.85,1213.22 1874.44,1213.22 1875.03,1213.22 1875.61,1213.22 1876.2,1213.22 1876.79,1213.22 1877.37,1213.22 1877.96,1213.22 1878.55,1213.22 1879.13,1213.22 1879.72,1213.22 1880.3,1213.22 1880.89,1213.22 1881.48,1213.22 1882.06,1213.22 1882.65,1213.22 1883.24,1213.22 1883.82,1213.22 1884.41,1213.22 1885,1213.22 1885.58,1213.22 1886.17,1213.22 1886.76,1213.22 1887.34,1213.22 1887.93,1213.22 1888.51,1213.22 1889.1,1213.22 1889.69,1213.22 1890.27,1213.22 1890.86,1213.22 1891.45,1213.22 1892.03,1213.22 1892.62,1213.22 1893.21,1213.22 1893.79,1213.22 1894.38,1213.22 1894.96,1213.22 1895.55,1213.22 1896.14,1213.22 1896.72,1213.22 1897.31,1213.22 1897.9,1213.22 1898.48,1213.22 1899.07,1213.22 1899.66,1213.22 1900.24,1213.22 1900.83,1213.22 1901.42,1213.22 1902,1213.22 1902.59,1213.22 1903.17,1213.22 1903.76,1213.22 1904.35,1213.22 1904.93,1213.22 1905.52,1213.22 1906.11,1213.22 1906.69,1213.22 1907.28,1213.22 1907.87,1213.22 1908.45,1213.22 1909.04,1213.22 1909.63,1213.22 1910.21,1213.22 1910.8,1213.22 1911.38,1213.22 1911.97,1213.22 1912.56,1213.22 1913.14,1213.22 1913.73,1213.22 1914.32,1213.22 1914.9,1213.22 1915.49,1213.22 1916.08,1213.22 1916.66,1213.22 1917.25,1213.22 1917.83,1213.22 1918.42,1213.22 1919.01,1213.22 1919.59,1213.22 1920.18,1213.22 1920.77,1213.22 1921.35,1213.22 1921.94,1213.22 1922.53,1213.22 1923.11,1213.22 1923.7,1213.22 1924.29,1213.22 1924.87,1213.22 1925.46,1213.22 1926.04,1213.22 1926.63,1213.22 1927.22,1213.22 1927.8,1213.22 1928.39,1213.22 1928.98,1213.22 1929.56,1213.22 1930.15,1213.22 1930.74,1213.22 1931.32,1213.22 1931.91,1213.22 1932.5,1213.22 1933.08,1213.22 1933.67,1213.22 1934.25,1213.22 1934.84,1213.22 1935.43,1213.22 1936.01,1213.22 1936.6,1213.22 1937.19,1213.22 1937.77,1213.22 1938.36,1213.22 1938.95,1213.22 1939.53,1213.22 1940.12,1213.22 1940.71,1213.22 1941.29,1213.22 1941.88,1213.22 1942.46,1213.22 1943.05,1213.22 1943.64,1213.22 1944.22,1213.22 1944.81,1213.22 1945.4,1213.22 1945.98,1213.22 1946.57,1213.22 1947.16,1213.22 1947.74,1213.22 1948.33,1213.22 1948.91,1213.22 1949.5,1213.22 1950.09,1213.22 1950.67,1213.22 1951.26,1213.22 1951.85,1213.22 1952.43,1213.22 1953.02,1213.22 1953.61,1213.22 1954.19,1213.22 1954.78,1213.22 1955.37,1213.22 1955.95,1213.22 1956.54,1213.22 1957.12,1213.22 1957.71,1213.22 1958.3,1213.22 1958.88,1213.22 1959.47,1213.22 1960.06,1213.22 1960.64,1213.22 1961.23,1213.22 1961.82,1213.22 1962.4,1213.22 1962.99,1213.22 1963.58,1213.22 1964.16,1213.22 1964.75,1213.22 1965.33,1213.22 1965.92,1213.22 1966.51,1213.22 1967.09,1213.22 1967.68,1213.22 1968.27,1213.22 1968.85,1213.22 1969.44,1213.22 1970.03,1213.22 1970.61,1213.22 1971.2,1213.22 1971.78,1213.22 1972.37,1213.22 1972.96,1213.22 1973.54,1213.22 1974.13,1213.22 1974.72,1213.22 1975.3,1213.22 1975.89,1213.22 1976.48,1213.22 1977.06,1213.22 1977.65,1213.22 1978.24,1213.22 1978.82,1213.22 1979.41,1213.22 1979.99,1213.22 1980.58,1213.22 1981.17,1213.22 1981.75,1213.22 1982.34,1213.22 1982.93,1213.22 1983.51,1213.22 1984.1,1213.22 1984.69,1213.22 1985.27,1213.22 1985.86,1213.22 1986.45,1213.22 1987.03,1213.22 1987.62,1213.22 1988.2,1213.22 1988.79,1213.22 1989.38,1213.22 1989.96,1213.22 1990.55,1213.22 1991.14,1213.22 1991.72,1213.22 1992.31,1213.22 1992.9,1213.22 1993.48,1213.22 1994.07,1213.22 1994.65,1213.22 1995.24,1213.22 1995.83,1213.22 1996.41,1213.22 1997,1213.22 1997.59,1213.22 1998.17,1213.22 1998.76,1213.22 1999.35,1213.22 1999.93,1213.22 2000.52,1213.22 2001.11,1213.22 2001.69,1213.22 2002.28,1213.22 2002.86,1213.22 2003.45,1213.22 2004.04,1213.22 2004.62,1213.22 2005.21,1213.22 2005.8,1213.22 2006.38,1213.22 2006.97,1213.22 2007.56,1213.22 2008.14,1213.22 2008.73,1213.22 2009.32,1213.22 2009.9,1213.22 2010.49,1213.22 2011.07,1213.22 2011.66,1213.22 2012.25,1213.22 2012.83,1213.22 2013.42,1213.22 2014.01,1213.22 2014.59,1213.22 2015.18,1213.22 2015.77,1213.22 2016.35,1213.22 2016.94,1213.22 2017.53,1213.22 2018.11,1213.22 2018.7,1213.22 2019.28,1213.22 2019.87,1213.22 2020.46,1213.22 2021.04,1213.22 2021.63,1213.22 2022.22,1213.22 2022.8,1213.22 2023.39,1213.22 2023.98,1213.22 2024.56,1213.22 2025.15,1213.22 2025.73,1213.22 2026.32,1213.22 2026.91,1213.22 2027.49,1213.22 2028.08,1213.22 2028.67,1213.22 2029.25,1213.22 2029.84,1213.22 2030.43,1213.22 2031.01,1213.22 2031.6,1213.22 2032.19,1213.22 2032.77,1213.22 2033.36,1213.22 2033.94,1213.22 2034.53,1213.22 2035.12,1213.22 2035.7,1213.22 2036.29,1213.22 2036.88,1213.22 2037.46,1213.22 2038.05,1213.22 2038.64,1213.22 2039.22,1213.22 2039.81,1213.22 2040.4,1213.22 2040.98,1213.22 2041.57,1213.22 2042.15,1213.22 2042.74,1213.22 2043.33,1213.22 2043.91,1213.22 2044.5,1213.22 2045.09,1213.22 2045.67,1213.22 2046.26,1213.22 2046.85,1213.22 2047.43,1213.22 2048.02,1213.22 2048.6,1213.22 2049.19,1213.22 2049.78,1213.22 2050.36,1213.22 2050.95,1213.22 2051.54,1213.22 2052.12,1213.22 2052.71,1213.22 2053.3,1213.22 2053.88,1213.22 2054.47,1213.22 2055.06,1213.22 2055.64,1213.22 2056.23,1213.22 2056.81,1213.22 2057.4,1213.22 2057.99,1213.22 2058.57,1213.22 2059.16,1213.22 2059.75,1213.22 2060.33,1213.22 2060.92,1213.22 2061.51,1213.22 2062.09,1213.22 2062.68,1213.22 2063.27,1213.22 2063.85,1213.22 2064.44,1213.22 2065.02,1213.22 2065.61,1213.22 2066.2,1213.22 2066.78,1213.22 2067.37,1213.22 2067.96,1213.22 2068.54,1213.22 2069.13,1213.22 2069.72,1213.22 2070.3,1213.22 2070.89,1213.22 2071.48,1213.22 2072.06,1213.22 2072.65,1213.22 2073.23,1213.22 2073.82,1213.22 2074.41,1213.22 2074.99,1213.22 2075.58,1213.22 2076.17,1213.22 2076.75,1213.22 2077.34,1213.22 2077.93,1213.22 2078.51,1213.22 2079.1,1213.22 2079.68,1213.22 2080.27,1213.22 2080.86,1213.22 2081.44,1213.22 2082.03,1213.22 2082.62,1213.22 2083.2,1213.22 2083.79,1213.22 2084.38,1213.22 2084.96,1213.22 2085.55,1213.22 2086.14,1213.22 2086.72,1213.22 2087.31,1213.22 2087.89,1213.22 2088.48,1213.22 2089.07,1213.22 2089.65,1213.22 2090.24,1213.22 2090.83,1213.22 2091.41,1213.22 2092,1213.22 2092.59,1213.22 2093.17,1213.22 2093.76,1213.22 2094.35,1213.22 2094.93,1213.22 2095.52,1213.22 2096.1,1213.22 2096.69,1213.22 2097.28,1213.22 2097.86,1213.22 2098.45,1213.22 2099.04,1213.22 2099.62,1213.22 2100.21,1213.22 2100.8,1213.22 2101.38,1213.22 2101.97,1213.22 2102.55,1213.22 2103.14,1213.22 2103.73,1213.22 2104.31,1213.22 2104.9,1213.22 2105.49,1213.22 2106.07,1213.22 2106.66,1213.22 2107.25,1213.22 2107.83,1213.22 2108.42,1213.22 2109.01,1213.22 2109.59,1213.22 2110.18,1213.22 2110.76,1213.22 2111.35,1213.22 2111.94,1213.22 2112.52,1213.22 2113.11,1213.22 2113.7,1213.22 2114.28,1213.22 2114.87,1213.22 2115.46,1213.22 2116.04,1213.22 2116.63,1213.22 2117.22,1213.22 2117.8,1213.22 2118.39,1213.22 2118.97,1213.22 2119.56,1213.22 2120.15,1213.22 2120.73,1213.22 2121.32,1213.22 2121.91,1213.22 2122.49,1213.22 2123.08,1213.22 2123.67,1213.22 2124.25,1213.22 2124.84,1213.22 2125.42,1213.22 2126.01,1213.22 2126.6,1213.22 2127.18,1213.22 2127.77,1213.22 2128.36,1213.22 2128.94,1213.22 2129.53,1213.22 2130.12,1213.22 2130.7,1213.22 2131.29,1213.22 2131.88,1213.22 2132.46,1213.22 2133.05,1213.22 2133.63,1213.22 2134.22,1213.22 2134.81,1213.22 2135.39,1213.22 2135.98,1213.22 2136.57,1213.22 2137.15,1213.22 2137.74,1213.22 2138.33,1213.22 2138.91,1213.22 2139.5,1213.22 2140.09,1213.22 2140.67,1213.22 2141.26,1213.22 2141.84,1213.22 2142.43,1213.22 2143.02,1213.22 2143.6,1213.22 2144.19,1213.22 2144.78,1213.22 2145.36,1213.22 2145.95,1213.22 2146.54,1213.22 2147.12,1213.22 2147.71,1213.22 2148.3,1213.22 2148.88,1213.22 2149.47,1213.22 2150.05,1213.22 2150.64,1213.22 2151.23,1213.22 2151.81,1213.22 2152.4,1213.22 2152.99,1213.22 2153.57,1213.22 2154.16,1213.22 2154.75,1213.22 2155.33,1213.22 2155.92,1213.22 2156.5,1213.22 2157.09,1213.22 2157.68,1213.22 2158.26,1213.22 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1213.23 L986.612 1213.23 L987.198 1213.23 L987.785 1213.23 L988.371 1213.23 L988.957 1213.23 L989.544 1213.23 L990.13 1213.23 L990.717 1213.23 L991.303 1213.23 L991.889 1213.23 L992.476 1213.23 L993.062 1213.23 L993.649 1213.23 L994.235 1213.23 L994.822 1213.23 L995.408 1213.23 L995.994 1213.23 L996.581 1213.23 L997.167 1213.23 L997.754 1213.23 L998.34 1213.23 L998.926 1213.23 L999.513 1213.23 L1000.1 1213.23 L1000.69 1213.23 L1001.27 1213.23 L1001.86 1213.23 L1002.44 1213.23 L1003.03 1213.23 L1003.62 1213.23 L1004.2 1213.23 L1004.79 1213.23 L1005.38 1213.23 L1005.96 1213.23 L1006.55 1213.23 L1007.14 1213.23 L1007.72 1213.23 L1008.31 1213.23 L1008.9 1213.23 L1009.48 1213.23 L1010.07 1213.23 L1010.65 1213.23 L1011.24 1213.23 L1011.83 1213.23 L1012.41 1213.23 L1013 1213.23 L1013.59 1213.23 L1014.17 1213.23 L1014.76 1213.23 L1015.35 1213.23 L1015.93 1213.23 L1016.52 1213.23 L1017.11 1213.23 L1017.69 1213.23 L1018.28 1213.23 L1018.86 1213.23 L1019.45 1213.23 L1020.04 1213.23 L1020.62 1213.23 L1021.21 1213.23 L1021.8 1213.23 L1022.38 1213.23 L1022.97 1213.23 L1023.56 1213.23 L1024.14 1213.23 L1024.73 1213.23 L1025.32 1213.23 L1025.9 1213.23 L1026.49 1213.23 L1027.07 1213.23 L1027.66 1213.23 L1028.25 1213.23 L1028.83 1213.23 L1029.42 1213.23 L1030.01 1213.23 L1030.59 1213.23 L1031.18 1213.23 L1031.77 1213.23 L1032.35 1213.23 L1032.94 1213.23 L1033.52 1213.23 L1034.11 1213.23 L1034.7 1213.23 L1035.28 1213.23 L1035.87 1213.23 L1036.46 1213.23 L1037.04 1213.23 L1037.63 1213.23 L1038.22 1213.23 L1038.8 1213.23 L1039.39 1213.23 L1039.98 1213.23 L1040.56 1213.23 L1041.15 1213.23 L1041.73 1213.23 L1042.32 1213.23 L1042.91 1213.23 L1043.49 1213.23 L1044.08 1213.23 L1044.67 1213.23 L1045.25 1213.23 L1045.84 1213.23 L1046.43 1213.23 L1047.01 1213.23 L1047.6 1213.23 L1048.19 1213.23 L1048.77 1213.23 L1049.36 1213.23 L1049.94 1213.23 L1050.53 1213.23 L1051.12 1213.23 L1051.7 1213.23 L1052.29 1213.23 L1052.88 1213.23 L1053.46 1213.23 L1054.05 1213.23 L1054.64 1213.23 L1055.22 1213.23 L1055.81 1213.23 L1056.39 1213.23 L1056.98 1213.23 L1057.57 1213.23 L1058.15 1213.23 L1058.74 1213.23 L1059.33 1213.23 L1059.91 1213.23 L1060.5 1213.23 L1061.09 1213.23 L1061.67 1213.23 L1062.26 1213.23 L1062.85 1213.23 L1063.43 1213.23 L1064.02 1213.23 L1064.6 1213.23 L1065.19 1213.23 L1065.78 1213.23 L1066.36 1213.23 L1066.95 1213.23 L1067.54 1213.23 L1068.12 1213.23 L1068.71 1213.23 L1069.3 1213.23 L1069.88 1213.23 L1070.47 1213.23 L1071.06 1213.23 L1071.64 1213.23 L1072.23 1213.23 L1072.81 1213.23 L1073.4 1213.23 L1073.99 1213.23 L1074.57 1213.23 L1075.16 1213.23 L1075.75 1213.23 L1076.33 1213.23 L1076.92 1213.23 L1077.51 1213.23 L1078.09 1213.23 L1078.68 1213.23 L1079.26 1213.23 L1079.85 1213.23 L1080.44 1213.23 L1081.02 1213.23 L1081.61 1213.23 L1082.2 1213.23 L1082.78 1213.23 L1083.37 1213.23 L1083.96 1213.23 L1084.54 1213.23 L1085.13 1213.23 L1085.72 1213.23 L1086.3 1213.23 L1086.89 1213.23 L1087.47 1213.23 L1088.06 1213.23 L1088.65 1213.23 L1089.23 1213.23 L1089.82 1213.23 L1090.41 1213.23 L1090.99 1213.23 L1091.58 1213.23 L1092.17 1213.23 L1092.75 1213.23 L1093.34 1213.23 L1093.93 1213.23 L1094.51 1213.23 L1095.1 1213.23 L1095.68 1213.23 L1096.27 1213.23 L1096.86 1213.23 L1097.44 1213.23 L1098.03 1213.23 L1098.62 1213.23 L1099.2 1213.23 L1099.79 1213.23 L1100.38 1213.23 L1100.96 1213.23 L1101.55 1213.23 L1102.14 1213.23 L1102.72 1213.23 L1103.31 1213.23 L1103.89 1213.23 L1104.48 1213.23 L1105.07 1213.23 L1105.65 1213.23 L1106.24 1213.23 L1106.83 1213.23 L1107.41 1213.23 L1108 1213.23 L1108.59 1213.23 L1109.17 1213.23 L1109.76 1213.23 L1110.34 1213.23 L1110.93 1213.23 L1111.52 1213.23 L1112.1 1213.23 L1112.69 1213.23 L1113.28 1213.23 L1113.86 1213.23 L1114.45 1213.23 L1115.04 1213.23 L1115.62 1213.23 L1116.21 1213.23 L1116.8 1213.23 L1117.38 1213.23 L1117.97 1213.23 L1118.55 1213.23 L1119.14 1213.23 L1119.73 1213.23 L1120.31 1213.23 L1120.9 1213.23 L1121.49 1213.23 L1122.07 1213.23 L1122.66 1213.23 L1123.25 1213.23 L1123.83 1213.23 L1124.42 1213.23 L1125.01 1213.23 L1125.59 1213.23 L1126.18 1213.23 L1126.76 1213.23 L1127.35 1213.23 L1127.94 1213.23 L1128.52 1213.23 L1129.11 1213.23 L1129.7 1213.23 L1130.28 1213.23 L1130.87 1213.23 L1131.46 1213.23 L1132.04 1213.23 L1132.63 1213.23 L1133.21 1213.23 L1133.8 1213.23 L1134.39 1213.23 L1134.97 1213.23 L1135.56 1213.23 L1136.15 1213.23 L1136.73 1213.23 L1137.32 1213.23 L1137.91 1213.23 L1138.49 1213.23 L1139.08 1213.23 L1139.67 1213.23 L1140.25 1213.23 L1140.84 1213.23 L1141.42 1213.23 L1142.01 1213.23 L1142.6 1213.23 L1143.18 1213.23 L1143.77 1213.23 L1144.36 1213.23 L1144.94 1213.23 L1145.53 1213.23 L1146.12 1213.23 L1146.7 1213.23 L1147.29 1213.23 L1147.88 1213.23 L1148.46 1213.23 L1149.05 1213.23 L1149.63 1213.23 L1150.22 1213.23 L1150.81 1213.23 L1151.39 1213.23 L1151.98 1213.23 L1152.57 1213.23 L1153.15 1213.23 L1153.74 1213.23 L1154.33 1213.23 L1154.91 1213.23 L1155.5 1213.23 L1156.09 1213.23 L1156.67 1213.23 L1157.26 1213.23 L1157.84 1213.23 L1158.43 1213.23 L1159.02 1213.23 L1159.6 1213.23 L1160.19 1213.23 L1160.78 1213.23 L1161.36 1213.23 L1161.95 1213.23 L1162.54 1213.23 L1163.12 1213.23 L1163.71 1213.23 L1164.29 1213.23 L1164.88 1213.23 L1165.47 1213.23 L1166.05 1213.23 L1166.64 1213.23 L1167.23 1213.23 L1167.81 1213.23 L1168.4 1213.23 L1168.99 1213.23 L1169.57 1213.23 L1170.16 1213.23 L1170.75 1213.23 L1171.33 1213.23 L1171.92 1213.23 L1172.5 1213.23 L1173.09 1213.23 L1173.68 1213.23 L1174.26 1213.23 L1174.85 1213.23 L1175.44 1213.23 L1176.02 1213.23 L1176.61 1213.23 L1177.2 1213.23 L1177.78 1213.23 L1178.37 1213.23 L1178.96 1213.23 L1179.54 1213.23 L1180.13 1213.23 L1180.71 1213.23 L1181.3 1213.23 L1181.89 1213.23 L1182.47 1213.23 L1183.06 1213.23 L1183.65 1213.23 L1184.23 1213.23 L1184.82 1213.23 L1185.41 1213.23 L1185.99 1213.23 L1186.58 1213.23 L1187.16 1213.23 L1187.75 1213.23 L1188.34 1213.23 L1188.92 1213.23 L1189.51 1213.23 L1190.1 1213.23 L1190.68 1213.23 L1191.27 1213.23 L1191.86 1213.23 L1192.44 1213.23 L1193.03 1213.23 L1193.62 1213.23 L1194.2 1213.23 L1194.79 1213.23 L1195.37 1213.23 L1195.96 1213.23 L1196.55 1213.23 L1197.13 1213.23 L1197.72 1213.23 L1198.31 1213.23 L1198.89 1213.23 L1199.48 1213.23 L1200.07 1213.23 L1200.65 1213.23 L1201.24 1213.23 L1201.83 1213.23 L1202.41 1213.23 L1203 1213.23 L1203.58 1213.23 L1204.17 1213.23 L1204.76 1213.23 L1205.34 1213.23 L1205.93 1213.23 L1206.52 1213.23 L1207.1 1213.23 L1207.69 1213.23 L1208.28 1213.23 L1208.86 1213.23 L1209.45 1213.23 L1210.03 1213.23 L1210.62 1213.23 L1211.21 1213.23 L1211.79 1213.23 L1212.38 1213.23 L1212.97 1213.23 L1213.55 1213.23 L1214.14 1213.23 L1214.73 1213.23 L1215.31 1213.23 L1215.9 1213.23 L1216.49 1213.23 L1217.07 1213.23 L1217.66 1213.23 L1218.24 1213.23 L1218.83 1213.23 L1219.42 1213.23 L1220 1213.23 L1220.59 1213.23 L1221.18 1213.23 L1221.76 1213.23 L1222.35 1213.23 L1222.94 1213.23 L1223.52 1213.23 L1224.11 1213.23 L1224.7 1213.23 L1225.28 1213.23 L1225.87 1213.23 L1226.45 1213.23 L1227.04 1213.23 L1227.63 1213.23 L1228.21 1213.23 L1228.8 1213.23 L1229.39 1213.23 L1229.97 1213.23 L1230.56 1213.23 L1231.15 1213.23 L1231.73 1213.23 L1232.32 1213.23 L1232.91 1213.23 L1233.49 1213.23 L1234.08 1213.23 L1234.66 1213.23 L1235.25 1213.23 L1235.84 1213.23 L1236.42 1213.23 L1237.01 1213.23 L1237.6 1213.23 L1238.18 1213.23 L1238.77 1213.23 L1239.36 1213.23 L1239.94 1213.23 L1240.53 1213.23 L1241.11 1213.23 L1241.7 1213.23 L1242.29 1213.23 L1242.87 1213.23 L1243.46 1213.23 L1244.05 1213.23 L1244.63 1213.23 L1245.22 1213.23 L1245.81 1213.23 L1246.39 1213.23 L1246.98 1213.23 L1247.57 1213.23 L1248.15 1213.23 L1248.74 1213.23 L1249.32 1213.23 L1249.91 1213.23 L1250.5 1213.23 L1251.08 1213.23 L1251.67 1213.23 L1252.26 1213.23 L1252.84 1213.23 L1253.43 1213.23 L1254.02 1213.23 L1254.6 1213.23 L1255.19 1213.23 L1255.78 1213.23 L1256.36 1213.23 L1256.95 1213.23 L1257.53 1213.23 L1258.12 1213.23 L1258.71 1213.23 L1259.29 1213.23 L1259.88 1213.23 L1260.47 1213.23 L1261.05 1213.23 L1261.64 1213.23 L1262.23 1213.23 L1262.81 1213.23 L1263.4 1213.23 L1263.98 1213.23 L1264.57 1213.23 L1265.16 1213.23 L1265.74 1213.23 L1266.33 1213.23 L1266.92 1213.23 L1267.5 1213.23 L1268.09 1213.23 L1268.68 1213.23 L1269.26 1213.23 L1269.85 1213.23 L1270.44 1213.23 L1271.02 1213.23 L1271.61 1213.23 L1272.19 1213.23 L1272.78 1213.23 L1273.37 1213.23 L1273.95 1213.23 L1274.54 1213.23 L1275.13 1213.23 L1275.71 1213.23 L1276.3 1213.23 L1276.89 1213.23 L1277.47 1213.23 L1278.06 1213.23 L1278.65 1213.23 L1279.23 1213.23 L1279.82 1213.23 L1280.4 1213.23 L1280.99 1213.23 L1281.58 1213.23 L1282.16 1213.23 L1282.75 1213.23 L1283.34 1213.23 L1283.92 1213.23 L1284.51 1213.23 L1285.1 1213.23 L1285.68 1213.23 L1286.27 1213.23 L1286.86 1213.23 L1287.44 1213.23 L1288.03 1213.23 L1288.61 1213.23 L1289.2 1213.23 L1289.79 1213.23 L1290.37 1213.23 L1290.96 1213.23 L1291.55 1213.23 L1292.13 1213.23 L1292.72 1213.23 L1293.31 1213.23 L1293.89 1213.23 L1294.48 1213.23 L1295.06 1213.23 L1295.65 1213.23 L1296.24 1213.23 L1296.82 1213.23 L1297.41 1213.23 L1298 1213.23 L1298.58 1213.23 L1299.17 1213.23 L1299.76 1213.23 L1300.34 1213.23 L1300.93 1213.23 L1301.52 1213.23 L1302.1 1213.23 L1302.69 1213.23 L1303.27 1213.23 L1303.86 1213.23 L1304.45 1213.23 L1305.03 1213.23 L1305.62 1213.23 L1306.21 1213.23 L1306.79 1213.23 L1307.38 1213.23 L1307.97 1213.23 L1308.55 1213.23 L1309.14 1213.23 L1309.73 1213.23 L1310.31 1213.23 L1310.9 1213.23 L1311.48 1213.23 L1312.07 1213.23 L1312.66 1213.23 L1313.24 1213.23 L1313.83 1213.23 L1314.42 1213.23 L1315 1213.23 L1315.59 1213.23 L1316.18 1213.23 L1316.76 1213.23 L1317.35 1213.23 L1317.93 1213.23 L1318.52 1213.23 L1319.11 1213.23 L1319.69 1213.23 L1320.28 1213.23 L1320.87 1213.23 L1321.45 1213.23 L1322.04 1213.23 L1322.63 1213.23 L1323.21 1213.23 L1323.8 1213.23 L1324.39 1213.23 L1324.97 1213.23 L1325.56 1213.23 L1326.14 1213.23 L1326.73 1213.23 L1327.32 1213.23 L1327.9 1213.23 L1328.49 1213.23 L1329.08 1213.23 L1329.66 1213.23 L1330.25 1213.23 L1330.84 1213.23 L1331.42 1213.23 L1332.01 1213.23 L1332.6 1213.23 L1333.18 1213.23 L1333.77 1213.23 L1334.35 1213.23 L1334.94 1213.23 L1335.53 1213.23 L1336.11 1213.23 L1336.7 1213.23 L1337.29 1213.23 L1337.87 1213.23 L1338.46 1213.23 L1339.05 1213.23 L1339.63 1213.23 L1340.22 1213.23 L1340.8 1213.23 L1341.39 1213.23 L1341.98 1213.23 L1342.56 1213.23 L1343.15 1213.23 L1343.74 1213.23 L1344.32 1213.23 L1344.91 1213.23 L1345.5 1213.23 L1346.08 1213.23 L1346.67 1213.23 L1347.26 1213.23 L1347.84 1213.23 L1348.43 1213.23 L1349.01 1213.23 L1349.6 1213.23 L1350.19 1213.23 L1350.77 1213.23 L1351.36 1213.23 L1351.95 1213.23 L1352.53 1213.23 L1353.12 1213.23 L1353.71 1213.23 L1354.29 1213.23 L1354.88 1213.23 L1355.47 1213.23 L1356.05 1213.23 L1356.64 1213.23 L1357.22 1213.23 L1357.81 1213.23 L1358.4 1213.23 L1358.98 1213.23 L1359.57 1213.23 L1360.16 1213.23 L1360.74 1213.23 L1361.33 1213.23 L1361.92 1213.23 L1362.5 1213.23 L1363.09 1213.23 L1363.68 1213.23 L1364.26 1213.23 L1364.85 1213.23 L1365.43 1213.23 L1366.02 1213.23 L1366.61 1213.23 L1367.19 1213.23 L1367.78 1213.23 L1368.37 1213.23 L1368.95 1213.23 L1369.54 1213.23 L1370.13 1213.23 L1370.71 1213.23 L1371.3 1213.23 L1371.88 1213.23 L1372.47 1213.23 L1373.06 1213.23 L1373.64 1213.23 L1374.23 1213.23 L1374.82 1213.23 L1375.4 1213.23 L1375.99 1213.23 L1376.58 1213.23 L1377.16 1213.23 L1377.75 1213.23 L1378.34 1213.23 L1378.92 1213.23 L1379.51 1213.23 L1380.09 1213.23 L1380.68 1213.23 L1381.27 1213.23 L1381.85 1213.23 L1382.44 1213.23 L1383.03 1213.23 L1383.61 1213.23 L1384.2 1213.23 L1384.79 1213.23 L1385.37 1213.23 L1385.96 1213.23 L1386.55 1213.23 L1387.13 1213.23 L1387.72 1213.23 L1388.3 1213.23 L1388.89 1213.23 L1389.48 1213.23 L1390.06 1213.23 L1390.65 1213.23 L1391.24 1213.23 L1391.82 1213.23 L1392.41 1213.23 L1393 1213.23 L1393.58 1213.23 L1394.17 1213.23 L1394.75 1213.23 L1395.34 1213.23 L1395.93 1213.23 L1396.51 1213.23 L1397.1 1213.23 L1397.69 1213.23 L1398.27 1213.23 L1398.86 1213.23 L1399.45 1213.23 L1400.03 1213.23 L1400.62 1213.23 L1401.21 1213.23 L1401.79 1213.23 L1402.38 1213.23 L1402.96 1213.23 L1403.55 1213.23 L1404.14 1213.23 L1404.72 1213.23 L1405.31 1213.23 L1405.9 1213.23 L1406.48 1213.23 L1407.07 1213.23 L1407.66 1213.23 L1408.24 1213.23 L1408.83 1213.23 L1409.42 1213.23 L1410 1213.23 L1410.59 1213.23 L1411.17 1213.23 L1411.76 1213.23 L1412.35 1213.23 L1412.93 1213.23 L1413.52 1213.23 L1414.11 1213.23 L1414.69 1213.23 L1415.28 1213.23 L1415.87 1213.23 L1416.45 1213.23 L1417.04 1213.23 L1417.63 1213.23 L1418.21 1213.23 L1418.8 1213.23 L1419.38 1213.23 L1419.97 1213.23 L1420.56 1213.23 L1421.14 1213.23 L1421.73 1213.23 L1422.32 1213.23 L1422.9 1213.23 L1423.49 1213.23 L1424.08 1213.23 L1424.66 1213.23 L1425.25 1213.23 L1425.83 1213.23 L1426.42 1213.23 L1427.01 1213.23 L1427.59 1213.23 L1428.18 1213.23 L1428.77 1213.23 L1429.35 1213.23 L1429.94 1213.23 L1430.53 1213.23 L1431.11 1213.23 L1431.7 1213.23 L1432.29 1213.23 L1432.87 1213.23 L1433.46 1213.23 L1434.04 1213.23 L1434.63 1213.23 L1435.22 1213.23 L1435.8 1213.23 L1436.39 1213.23 L1436.98 1213.23 L1437.56 1213.23 L1438.15 1213.23 L1438.74 1213.23 L1439.32 1213.23 L1439.91 1213.23 L1440.5 1213.23 L1441.08 1213.23 L1441.67 1213.23 L1442.25 1213.23 L1442.84 1213.23 L1443.43 1213.23 L1444.01 1213.23 L1444.6 1213.23 L1445.19 1213.23 L1445.77 1213.23 L1446.36 1213.23 L1446.95 1213.23 L1447.53 1213.23 L1448.12 1213.23 L1448.7 1213.23 L1449.29 1213.23 L1449.88 1213.23 L1450.46 1213.23 L1451.05 1213.23 L1451.64 1213.23 L1452.22 1213.23 L1452.81 1213.23 L1453.4 1213.23 L1453.98 1213.23 L1454.57 1213.23 L1455.16 1213.23 L1455.74 1213.23 L1456.33 1213.23 L1456.91 1213.23 L1457.5 1213.23 L1458.09 1213.23 L1458.67 1213.23 L1459.26 1213.23 L1459.85 1213.23 L1460.43 1213.23 L1461.02 1213.23 L1461.61 1213.23 L1462.19 1213.23 L1462.78 1213.23 L1463.37 1213.23 L1463.95 1213.23 L1464.54 1213.23 L1465.12 1213.23 L1465.71 1213.23 L1466.3 1213.23 L1466.88 1213.23 L1467.47 1213.23 L1468.06 1213.23 L1468.64 1213.23 L1469.23 1213.23 L1469.82 1213.23 L1470.4 1213.23 L1470.99 1213.23 L1471.57 1213.23 L1472.16 1213.23 L1472.75 1213.23 L1473.33 1213.23 L1473.92 1213.23 L1474.51 1213.23 L1475.09 1213.23 L1475.68 1213.23 L1476.27 1213.23 L1476.85 1213.23 L1477.44 1213.23 L1478.03 1213.23 L1478.61 1213.23 L1479.2 1213.23 L1479.78 1213.23 L1480.37 1213.23 L1480.96 1213.23 L1481.54 1213.23 L1482.13 1213.23 L1482.72 1213.23 L1483.3 1213.23 L1483.89 1213.23 L1484.48 1213.23 L1485.06 1213.23 L1485.65 1213.23 L1486.24 1213.23 L1486.82 1213.23 L1487.41 1213.23 L1487.99 1213.23 L1488.58 1213.23 L1489.17 1213.23 L1489.75 1213.23 L1490.34 1213.23 L1490.93 1213.23 L1491.51 1213.23 L1492.1 1213.23 L1492.69 1213.23 L1493.27 1213.23 L1493.86 1213.23 L1494.45 1213.23 L1495.03 1213.23 L1495.62 1213.23 L1496.2 1213.23 L1496.79 1213.23 L1497.38 1213.23 L1497.96 1213.23 L1498.55 1213.23 L1499.14 1213.23 L1499.72 1213.23 L1500.31 1213.23 L1500.9 1213.23 L1501.48 1213.23 L1502.07 1213.23 L1502.65 1213.23 L1503.24 1213.23 L1503.83 1213.23 L1504.41 1213.23 L1505 1213.23 L1505.59 1213.23 L1506.17 1213.23 L1506.76 1213.23 L1507.35 1213.23 L1507.93 1213.23 L1508.52 1213.23 L1509.11 1213.23 L1509.69 1213.23 L1510.28 1213.23 L1510.86 1213.23 L1511.45 1213.23 L1512.04 1213.23 L1512.62 1213.23 L1513.21 1213.23 L1513.8 1213.23 L1514.38 1213.23 L1514.97 1213.23 L1515.56 1213.23 L1516.14 1213.23 L1516.73 1213.23 L1517.32 1213.23 L1517.9 1213.23 L1518.49 1213.23 L1519.07 1213.23 L1519.66 1213.23 L1520.25 1213.23 L1520.83 1213.23 L1521.42 1213.23 L1522.01 1213.23 L1522.59 1213.23 L1523.18 1213.23 L1523.77 1213.23 L1524.35 1213.23 L1524.94 1213.23 L1525.52 1213.23 L1526.11 1213.23 L1526.7 1213.23 L1527.28 1213.23 L1527.87 1213.23 L1528.46 1213.23 L1529.04 1213.23 L1529.63 1213.23 L1530.22 1213.23 L1530.8 1213.23 L1531.39 1213.23 L1531.98 1213.23 L1532.56 1213.23 L1533.15 1213.23 L1533.73 1213.23 L1534.32 1213.23 L1534.91 1213.23 L1535.49 1213.23 L1536.08 1213.23 L1536.67 1213.23 L1537.25 1213.23 L1537.84 1213.23 L1538.43 1213.23 L1539.01 1213.23 L1539.6 1213.23 L1540.19 1213.23 L1540.77 1213.23 L1541.36 1213.23 L1541.94 1213.23 L1542.53 1213.23 L1543.12 1213.23 L1543.7 1213.23 L1544.29 1213.23 L1544.88 1213.23 L1545.46 1213.23 L1546.05 1213.23 L1546.64 1213.23 L1547.22 1213.23 L1547.81 1213.23 L1548.4 1213.23 L1548.98 1213.23 L1549.57 1213.23 L1550.15 1213.23 L1550.74 1213.23 L1551.33 1213.23 L1551.91 1213.23 L1552.5 1213.23 L1553.09 1213.23 L1553.67 1213.23 L1554.26 1213.23 L1554.85 1213.23 L1555.43 1213.23 L1556.02 1213.23 L1556.6 1213.23 L1557.19 1213.23 L1557.78 1213.23 L1558.36 1213.23 L1558.95 1213.23 L1559.54 1213.23 L1560.12 1213.23 L1560.71 1213.23 L1561.3 1213.23 L1561.88 1213.23 L1562.47 1213.23 L1563.06 1213.23 L1563.64 1213.23 L1564.23 1213.23 L1564.81 1213.23 L1565.4 1213.23 L1565.99 1213.23 L1566.57 1213.23 L1567.16 1213.23 L1567.75 1213.23 L1568.33 1213.23 L1568.92 1213.23 L1569.51 1213.23 L1570.09 1213.23 L1570.68 1213.23 L1571.27 1213.23 L1571.85 1213.23 L1572.44 1213.23 L1573.02 1213.23 L1573.61 1213.23 L1574.2 1213.23 L1574.78 1213.23 L1575.37 1213.23 L1575.96 1213.23 L1576.54 1213.23 L1577.13 1213.23 L1577.72 1213.23 L1578.3 1213.23 L1578.89 1213.23 L1579.47 1213.23 L1580.06 1213.23 L1580.65 1213.23 L1581.23 1213.23 L1581.82 1213.23 L1582.41 1213.23 L1582.99 1213.23 L1583.58 1213.23 L1584.17 1213.23 L1584.75 1213.23 L1585.34 1213.23 L1585.93 1213.23 L1586.51 1213.23 L1587.1 1213.23 L1587.68 1213.23 L1588.27 1213.23 L1588.86 1213.23 L1589.44 1213.23 L1590.03 1213.23 L1590.62 1213.23 L1591.2 1213.23 L1591.79 1213.23 L1592.38 1213.23 L1592.96 1213.23 L1593.55 1213.23 L1594.14 1213.23 L1594.72 1213.23 L1595.31 1213.23 L1595.89 1213.23 L1596.48 1213.23 L1597.07 1213.23 L1597.65 1213.23 L1598.24 1213.23 L1598.83 1213.23 L1599.41 1213.23 L1600 1213.23 L1600.59 1213.23 L1601.17 1213.23 L1601.76 1213.23 L1602.34 1213.23 L1602.93 1213.23 L1603.52 1213.23 L1604.1 1213.23 L1604.69 1213.23 L1605.28 1213.23 L1605.86 1213.23 L1606.45 1213.23 L1607.04 1213.23 L1607.62 1213.23 L1608.21 1213.23 L1608.8 1213.23 L1609.38 1213.23 L1609.97 1213.23 L1610.55 1213.23 L1611.14 1213.23 L1611.73 1213.23 L1612.31 1213.23 L1612.9 1213.23 L1613.49 1213.23 L1614.07 1213.23 L1614.66 1213.23 L1615.25 1213.23 L1615.83 1213.23 L1616.42 1213.23 L1617.01 1213.23 L1617.59 1213.23 L1618.18 1213.23 L1618.76 1213.23 L1619.35 1213.23 L1619.94 1213.23 L1620.52 1213.23 L1621.11 1213.23 L1621.7 1213.23 L1622.28 1213.23 L1622.87 1213.23 L1623.46 1213.23 L1624.04 1213.23 L1624.63 1213.23 L1625.22 1213.23 L1625.8 1213.23 L1626.39 1213.23 L1626.97 1213.23 L1627.56 1213.23 L1628.15 1213.23 L1628.73 1213.23 L1629.32 1213.23 L1629.91 1213.23 L1630.49 1213.23 L1631.08 1213.23 L1631.67 1213.23 L1632.25 1213.23 L1632.84 1213.23 L1633.42 1213.23 L1634.01 1213.23 L1634.6 1213.23 L1635.18 1213.23 L1635.77 1213.23 L1636.36 1213.23 L1636.94 1213.23 L1637.53 1213.23 L1638.12 1213.23 L1638.7 1213.23 L1639.29 1213.23 L1639.88 1213.23 L1640.46 1213.23 L1641.05 1213.23 L1641.63 1213.23 L1642.22 1213.23 L1642.81 1213.23 L1643.39 1213.23 L1643.98 1213.23 L1644.57 1213.23 L1645.15 1213.23 L1645.74 1213.23 L1646.33 1213.23 L1646.91 1213.23 L1647.5 1213.23 L1648.09 1213.23 L1648.67 1213.23 L1649.26 1213.23 L1649.84 1213.23 L1650.43 1213.23 L1651.02 1213.23 L1651.6 1213.23 L1652.19 1213.23 L1652.78 1213.23 L1653.36 1213.23 L1653.95 1213.23 L1654.54 1213.23 L1655.12 1213.23 L1655.71 1213.23 L1656.29 1213.23 L1656.88 1213.23 L1657.47 1213.23 L1658.05 1213.23 L1658.64 1213.23 L1659.23 1213.23 L1659.81 1213.23 L1660.4 1213.23 L1660.99 1213.23 L1661.57 1213.23 L1662.16 1213.23 L1662.75 1213.23 L1663.33 1213.23 L1663.92 1213.23 L1664.5 1213.23 L1665.09 1213.23 L1665.68 1213.23 L1666.26 1213.23 L1666.85 1213.23 L1667.44 1213.23 L1668.02 1213.23 L1668.61 1213.23 L1669.2 1213.23 L1669.78 1213.23 L1670.37 1213.23 L1670.96 1213.23 L1671.54 1213.23 L1672.13 1213.23 L1672.71 1213.23 L1673.3 1213.23 L1673.89 1213.23 L1674.47 1213.23 L1675.06 1213.23 L1675.65 1213.23 L1676.23 1213.23 L1676.82 1213.23 L1677.41 1213.23 L1677.99 1213.23 L1678.58 1213.23 L1679.17 1213.23 L1679.75 1213.23 L1680.34 1213.23 L1680.92 1213.23 L1681.51 1213.23 L1682.1 1213.23 L1682.68 1213.23 L1683.27 1213.23 L1683.86 1213.23 L1684.44 1213.23 L1685.03 1213.23 L1685.62 1213.23 L1686.2 1213.23 L1686.79 1213.23 L1687.37 1213.23 L1687.96 1213.23 L1688.55 1213.23 L1689.13 1213.23 L1689.72 1213.23 L1690.31 1213.23 L1690.89 1213.23 L1691.48 1213.23 L1692.07 1213.23 L1692.65 1213.23 L1693.24 1213.23 L1693.83 1213.23 L1694.41 1213.23 L1695 1213.23 L1695.58 1213.23 L1696.17 1213.23 L1696.76 1213.23 L1697.34 1213.23 L1697.93 1213.23 L1698.52 1213.23 L1699.1 1213.23 L1699.69 1213.23 L1700.28 1213.23 L1700.86 1213.23 L1701.45 1213.23 L1702.04 1213.23 L1702.62 1213.23 L1703.21 1213.23 L1703.79 1213.23 L1704.38 1213.23 L1704.97 1213.23 L1705.55 1213.23 L1706.14 1213.23 L1706.73 1213.23 L1707.31 1213.23 L1707.9 1213.23 L1708.49 1213.23 L1709.07 1213.23 L1709.66 1213.23 L1710.24 1213.23 L1710.83 1213.23 L1711.42 1213.23 L1712 1213.23 L1712.59 1213.23 L1713.18 1213.23 L1713.76 1213.23 L1714.35 1213.23 L1714.94 1213.23 L1715.52 1213.23 L1716.11 1213.23 L1716.7 1213.23 L1717.28 1213.23 L1717.87 1213.23 L1718.45 1213.23 L1719.04 1213.23 L1719.63 1213.23 L1720.21 1213.23 L1720.8 1213.23 L1721.39 1213.23 L1721.97 1213.23 L1722.56 1213.23 L1723.15 1213.23 L1723.73 1213.23 L1724.32 1213.23 L1724.91 1213.23 L1725.49 1213.23 L1726.08 1213.23 L1726.66 1213.23 L1727.25 1213.23 L1727.84 1213.23 L1728.42 1213.23 L1729.01 1213.23 L1729.6 1213.23 L1730.18 1213.23 L1730.77 1213.23 L1731.36 1213.23 L1731.94 1213.23 L1732.53 1213.23 L1733.11 1213.23 L1733.7 1213.23 L1734.29 1213.23 L1734.87 1213.23 L1735.46 1213.23 L1736.05 1213.23 L1736.63 1213.23 L1737.22 1213.23 L1737.81 1213.23 L1738.39 1213.23 L1738.98 1213.23 L1739.57 1213.23 L1740.15 1213.23 L1740.74 1213.23 L1741.32 1213.23 L1741.91 1213.23 L1742.5 1213.23 L1743.08 1213.23 L1743.67 1213.23 L1744.26 1213.23 L1744.84 1213.23 L1745.43 1213.23 L1746.02 1213.23 L1746.6 1213.23 L1747.19 1213.23 L1747.78 1213.23 L1748.36 1213.23 L1748.95 1213.23 L1749.53 1213.23 L1750.12 1213.23 L1750.71 1213.23 L1751.29 1213.23 L1751.88 1213.23 L1752.47 1213.23 L1753.05 1213.23 L1753.64 1213.23 L1754.23 1213.23 L1754.81 1213.23 L1755.4 1213.23 L1755.99 1213.23 L1756.57 1213.23 L1757.16 1213.23 L1757.74 1213.23 L1758.33 1213.23 L1758.92 1213.23 L1759.5 1213.23 L1760.09 1213.23 L1760.68 1213.23 L1761.26 1213.23 L1761.85 1213.23 L1762.44 1213.23 L1763.02 1213.23 L1763.61 1213.23 L1764.19 1213.23 L1764.78 1213.23 L1765.37 1213.23 L1765.95 1213.23 L1766.54 1213.23 L1767.13 1213.23 L1767.71 1213.23 L1768.3 1213.23 L1768.89 1213.23 L1769.47 1213.23 L1770.06 1213.23 L1770.65 1213.23 L1771.23 1213.23 L1771.82 1213.23 L1772.4 1213.23 L1772.99 1213.23 L1773.58 1213.23 L1774.16 1213.23 L1774.75 1213.23 L1775.34 1213.23 L1775.92 1213.23 L1776.51 1213.23 L1777.1 1213.23 L1777.68 1213.23 L1778.27 1213.23 L1778.86 1213.23 L1779.44 1213.23 L1780.03 1213.23 L1780.61 1213.23 L1781.2 1213.23 L1781.79 1213.23 L1782.37 1213.23 L1782.96 1213.23 L1783.55 1213.23 L1784.13 1213.23 L1784.72 1213.23 L1785.31 1213.23 L1785.89 1213.23 L1786.48 1213.23 L1787.06 1213.23 L1787.65 1213.23 L1788.24 1213.23 L1788.82 1213.23 L1789.41 1213.23 L1790 1213.23 L1790.58 1213.23 L1791.17 1213.23 L1791.76 1213.23 L1792.34 1213.23 L1792.93 1213.23 L1793.52 1213.23 L1794.1 1213.23 L1794.69 1213.23 L1795.27 1213.23 L1795.86 1213.23 L1796.45 1213.23 L1797.03 1213.23 L1797.62 1213.23 L1798.21 1213.23 L1798.79 1213.23 L1799.38 1213.23 L1799.97 1213.23 L1800.55 1213.23 L1801.14 1213.23 L1801.73 1213.23 L1802.31 1213.23 L1802.9 1213.23 L1803.48 1213.23 L1804.07 1213.23 L1804.66 1213.23 L1805.24 1213.23 L1805.83 1213.23 L1806.42 1213.23 L1807 1213.23 L1807.59 1213.23 L1808.18 1213.23 L1808.76 1213.23 L1809.35 1213.23 L1809.94 1213.23 L1810.52 1213.23 L1811.11 1213.23 L1811.69 1213.23 L1812.28 1213.23 L1812.87 1213.23 L1813.45 1213.23 L1814.04 1213.23 L1814.63 1213.23 L1815.21 1213.23 L1815.8 1213.23 L1816.39 1213.23 L1816.97 1213.23 L1817.56 1213.23 L1818.14 1213.23 L1818.73 1213.23 L1819.32 1213.23 L1819.9 1213.23 L1820.49 1213.23 L1821.08 1213.23 L1821.66 1213.23 L1822.25 1213.23 L1822.84 1213.23 L1823.42 1213.23 L1824.01 1213.23 L1824.6 1213.23 L1825.18 1213.23 L1825.77 1213.23 L1826.35 1213.23 L1826.94 1213.23 L1827.53 1213.23 L1828.11 1213.23 L1828.7 1213.23 L1829.29 1213.23 L1829.87 1213.23 L1830.46 1213.23 L1831.05 1213.23 L1831.63 1213.23 L1832.22 1213.23 L1832.81 1213.23 L1833.39 1213.23 L1833.98 1213.23 L1834.56 1213.23 L1835.15 1213.23 L1835.74 1213.23 L1836.32 1213.23 L1836.91 1213.23 L1837.5 1213.23 L1838.08 1213.23 L1838.67 1213.23 L1839.26 1213.23 L1839.84 1213.23 L1840.43 1213.23 L1841.01 1213.23 L1841.6 1213.23 L1842.19 1213.23 L1842.77 1213.23 L1843.36 1213.23 L1843.95 1213.23 L1844.53 1213.23 L1845.12 1213.23 L1845.71 1213.23 L1846.29 1213.23 L1846.88 1213.23 L1847.47 1213.23 L1848.05 1213.23 L1848.64 1213.23 L1849.22 1213.23 L1849.81 1213.23 L1850.4 1213.23 L1850.98 1213.23 L1851.57 1213.23 L1852.16 1213.23 L1852.74 1213.23 L1853.33 1213.23 L1853.92 1213.23 L1854.5 1213.23 L1855.09 1213.23 L1855.68 1213.23 L1856.26 1213.23 L1856.85 1213.23 L1857.43 1213.23 L1858.02 1213.23 L1858.61 1213.23 L1859.19 1213.23 L1859.78 1213.23 L1860.37 1213.23 L1860.95 1213.23 L1861.54 1213.23 L1862.13 1213.23 L1862.71 1213.23 L1863.3 1213.23 L1863.88 1213.23 L1864.47 1213.23 L1865.06 1213.23 L1865.64 1213.23 L1866.23 1213.23 L1866.82 1213.23 L1867.4 1213.23 L1867.99 1213.23 L1868.58 1213.23 L1869.16 1213.23 L1869.75 1213.23 L1870.34 1213.23 L1870.92 1213.23 L1871.51 1213.23 L1872.09 1213.23 L1872.68 1213.23 L1873.27 1213.23 L1873.85 1213.23 L1874.44 1213.23 L1875.03 1213.23 L1875.61 1213.23 L1876.2 1213.23 L1876.79 1213.23 L1877.37 1213.23 L1877.96 1213.23 L1878.55 1213.23 L1879.13 1213.23 L1879.72 1213.23 L1880.3 1213.23 L1880.89 1213.23 L1881.48 1213.23 L1882.06 1213.23 L1882.65 1213.23 L1883.24 1213.23 L1883.82 1213.23 L1884.41 1213.23 L1885 1213.23 L1885.58 1213.23 L1886.17 1213.23 L1886.76 1213.23 L1887.34 1213.23 L1887.93 1213.23 L1888.51 1213.23 L1889.1 1213.23 L1889.69 1213.23 L1890.27 1213.23 L1890.86 1213.23 L1891.45 1213.23 L1892.03 1213.23 L1892.62 1213.23 L1893.21 1213.23 L1893.79 1213.23 L1894.38 1213.23 L1894.96 1213.23 L1895.55 1213.23 L1896.14 1213.23 L1896.72 1213.23 L1897.31 1213.23 L1897.9 1213.23 L1898.48 1213.23 L1899.07 1213.23 L1899.66 1213.23 L1900.24 1213.23 L1900.83 1213.23 L1901.42 1213.23 L1902 1213.23 L1902.59 1213.23 L1903.17 1213.23 L1903.76 1213.23 L1904.35 1213.23 L1904.93 1213.23 L1905.52 1213.23 L1906.11 1213.23 L1906.69 1213.23 L1907.28 1213.23 L1907.87 1213.23 L1908.45 1213.23 L1909.04 1213.23 L1909.63 1213.23 L1910.21 1213.23 L1910.8 1213.23 L1911.38 1213.23 L1911.97 1213.23 L1912.56 1213.23 L1913.14 1213.23 L1913.73 1213.23 L1914.32 1213.23 L1914.9 1213.23 L1915.49 1213.23 L1916.08 1213.23 L1916.66 1213.23 L1917.25 1213.23 L1917.83 1213.23 L1918.42 1213.23 L1919.01 1213.23 L1919.59 1213.23 L1920.18 1213.23 L1920.77 1213.23 L1921.35 1213.23 L1921.94 1213.23 L1922.53 1213.23 L1923.11 1213.23 L1923.7 1213.23 L1924.29 1213.23 L1924.87 1213.23 L1925.46 1213.23 L1926.04 1213.23 L1926.63 1213.23 L1927.22 1213.23 L1927.8 1213.23 L1928.39 1213.23 L1928.98 1213.23 L1929.56 1213.23 L1930.15 1213.23 L1930.74 1213.23 L1931.32 1213.23 L1931.91 1213.23 L1932.5 1213.23 L1933.08 1213.23 L1933.67 1213.23 L1934.25 1213.23 L1934.84 1213.23 L1935.43 1213.23 L1936.01 1213.23 L1936.6 1213.23 L1937.19 1213.23 L1937.77 1213.23 L1938.36 1213.23 L1938.95 1213.23 L1939.53 1213.23 L1940.12 1213.23 L1940.71 1213.23 L1941.29 1213.23 L1941.88 1213.23 L1942.46 1213.23 L1943.05 1213.23 L1943.64 1213.23 L1944.22 1213.23 L1944.81 1213.23 L1945.4 1213.23 L1945.98 1213.23 L1946.57 1213.23 L1947.16 1213.23 L1947.74 1213.23 L1948.33 1213.23 L1948.91 1213.23 L1949.5 1213.23 L1950.09 1213.23 L1950.67 1213.23 L1951.26 1213.23 L1951.85 1213.23 L1952.43 1213.23 L1953.02 1213.23 L1953.61 1213.23 L1954.19 1213.23 L1954.78 1213.23 L1955.37 1213.23 L1955.95 1213.23 L1956.54 1213.23 L1957.12 1213.23 L1957.71 1213.23 L1958.3 1213.23 L1958.88 1213.23 L1959.47 1213.23 L1960.06 1213.23 L1960.64 1213.23 L1961.23 1213.23 L1961.82 1213.23 L1962.4 1213.23 L1962.99 1213.23 L1963.58 1213.23 L1964.16 1213.23 L1964.75 1213.23 L1965.33 1213.23 L1965.92 1213.23 L1966.51 1213.23 L1967.09 1213.23 L1967.68 1213.23 L1968.27 1213.23 L1968.85 1213.23 L1969.44 1213.23 L1970.03 1213.23 L1970.61 1213.23 L1971.2 1213.23 L1971.78 1213.23 L1972.37 1213.23 L1972.96 1213.23 L1973.54 1213.23 L1974.13 1213.23 L1974.72 1213.23 L1975.3 1213.23 L1975.89 1213.23 L1976.48 1213.23 L1977.06 1213.23 L1977.65 1213.23 L1978.24 1213.23 L1978.82 1213.23 L1979.41 1213.23 L1979.99 1213.23 L1980.58 1213.23 L1981.17 1213.23 L1981.75 1213.23 L1982.34 1213.23 L1982.93 1213.23 L1983.51 1213.23 L1984.1 1213.23 L1984.69 1213.23 L1985.27 1213.23 L1985.86 1213.23 L1986.45 1213.23 L1987.03 1213.23 L1987.62 1213.23 L1988.2 1213.23 L1988.79 1213.23 L1989.38 1213.23 L1989.96 1213.23 L1990.55 1213.23 L1991.14 1213.23 L1991.72 1213.23 L1992.31 1213.23 L1992.9 1213.23 L1993.48 1213.23 L1994.07 1213.23 L1994.65 1213.23 L1995.24 1213.23 L1995.83 1213.23 L1996.41 1213.23 L1997 1213.23 L1997.59 1213.23 L1998.17 1213.23 L1998.76 1213.23 L1999.35 1213.23 L1999.93 1213.23 L2000.52 1213.23 L2001.11 1213.23 L2001.69 1213.23 L2002.28 1213.23 L2002.86 1213.23 L2003.45 1213.23 L2004.04 1213.23 L2004.62 1213.23 L2005.21 1213.23 L2005.8 1213.23 L2006.38 1213.23 L2006.97 1213.23 L2007.56 1213.23 L2008.14 1213.23 L2008.73 1213.23 L2009.32 1213.23 L2009.9 1213.23 L2010.49 1213.23 L2011.07 1213.23 L2011.66 1213.23 L2012.25 1213.23 L2012.83 1213.23 L2013.42 1213.23 L2014.01 1213.23 L2014.59 1213.23 L2015.18 1213.23 L2015.77 1213.23 L2016.35 1213.23 L2016.94 1213.23 L2017.53 1213.23 L2018.11 1213.23 L2018.7 1213.23 L2019.28 1213.23 L2019.87 1213.23 L2020.46 1213.23 L2021.04 1213.23 L2021.63 1213.23 L2022.22 1213.23 L2022.8 1213.23 L2023.39 1213.23 L2023.98 1213.23 L2024.56 1213.23 L2025.15 1213.23 L2025.73 1213.23 L2026.32 1213.23 L2026.91 1213.23 L2027.49 1213.23 L2028.08 1213.23 L2028.67 1213.23 L2029.25 1213.23 L2029.84 1213.23 L2030.43 1213.23 L2031.01 1213.23 L2031.6 1213.23 L2032.19 1213.23 L2032.77 1213.23 L2033.36 1213.23 L2033.94 1213.23 L2034.53 1213.23 L2035.12 1213.23 L2035.7 1213.23 L2036.29 1213.23 L2036.88 1213.23 L2037.46 1213.23 L2038.05 1213.23 L2038.64 1213.23 L2039.22 1213.23 L2039.81 1213.23 L2040.4 1213.23 L2040.98 1213.23 L2041.57 1213.23 L2042.15 1213.23 L2042.74 1213.23 L2043.33 1213.23 L2043.91 1213.23 L2044.5 1213.23 L2045.09 1213.23 L2045.67 1213.23 L2046.26 1213.23 L2046.85 1213.23 L2047.43 1213.23 L2048.02 1213.23 L2048.6 1213.23 L2049.19 1213.23 L2049.78 1213.23 L2050.36 1213.23 L2050.95 1213.23 L2051.54 1213.23 L2052.12 1213.23 L2052.71 1213.23 L2053.3 1213.23 L2053.88 1213.23 L2054.47 1213.23 L2055.06 1213.23 L2055.64 1213.23 L2056.23 1213.23 L2056.81 1213.23 L2057.4 1213.23 L2057.99 1213.23 L2058.57 1213.23 L2059.16 1213.23 L2059.75 1213.23 L2060.33 1213.23 L2060.92 1213.23 L2061.51 1213.23 L2062.09 1213.23 L2062.68 1213.23 L2063.27 1213.23 L2063.85 1213.23 L2064.44 1213.23 L2065.02 1213.23 L2065.61 1213.23 L2066.2 1213.23 L2066.78 1213.23 L2067.37 1213.23 L2067.96 1213.23 L2068.54 1213.23 L2069.13 1213.23 L2069.72 1213.23 L2070.3 1213.23 L2070.89 1213.23 L2071.48 1213.23 L2072.06 1213.23 L2072.65 1213.23 L2073.23 1213.23 L2073.82 1213.23 L2074.41 1213.23 L2074.99 1213.23 L2075.58 1213.23 L2076.17 1213.23 L2076.75 1213.23 L2077.34 1213.23 L2077.93 1213.23 L2078.51 1213.23 L2079.1 1213.23 L2079.68 1213.23 L2080.27 1213.23 L2080.86 1213.23 L2081.44 1213.23 L2082.03 1213.23 L2082.62 1213.23 L2083.2 1213.23 L2083.79 1213.23 L2084.38 1213.23 L2084.96 1213.23 L2085.55 1213.23 L2086.14 1213.23 L2086.72 1213.23 L2087.31 1213.23 L2087.89 1213.23 L2088.48 1213.23 L2089.07 1213.23 L2089.65 1213.23 L2090.24 1213.23 L2090.83 1213.23 L2091.41 1213.23 L2092 1213.23 L2092.59 1213.23 L2093.17 1213.23 L2093.76 1213.23 L2094.35 1213.23 L2094.93 1213.23 L2095.52 1213.23 L2096.1 1213.23 L2096.69 1213.23 L2097.28 1213.23 L2097.86 1213.23 L2098.45 1213.23 L2099.04 1213.23 L2099.62 1213.23 L2100.21 1213.23 L2100.8 1213.23 L2101.38 1213.23 L2101.97 1213.23 L2102.55 1213.23 L2103.14 1213.23 L2103.73 1213.23 L2104.31 1213.23 L2104.9 1213.23 L2105.49 1213.23 L2106.07 1213.23 L2106.66 1213.23 L2107.25 1213.23 L2107.83 1213.23 L2108.42 1213.23 L2109.01 1213.23 L2109.59 1213.23 L2110.18 1213.23 L2110.76 1213.23 L2111.35 1213.23 L2111.94 1213.23 L2112.52 1213.23 L2113.11 1213.23 L2113.7 1213.23 L2114.28 1213.23 L2114.87 1213.23 L2115.46 1213.23 L2116.04 1213.23 L2116.63 1213.23 L2117.22 1213.23 L2117.8 1213.23 L2118.39 1213.23 L2118.97 1213.23 L2119.56 1213.23 L2120.15 1213.23 L2120.73 1213.23 L2121.32 1213.23 L2121.91 1213.23 L2122.49 1213.23 L2123.08 1213.23 L2123.67 1213.23 L2124.25 1213.23 L2124.84 1213.23 L2125.42 1213.23 L2126.01 1213.23 L2126.6 1213.23 L2127.18 1213.23 L2127.77 1213.23 L2128.36 1213.23 L2128.94 1213.23 L2129.53 1213.23 L2130.12 1213.23 L2130.7 1213.23 L2131.29 1213.23 L2131.88 1213.23 L2132.46 1213.23 L2133.05 1213.23 L2133.63 1213.23 L2134.22 1213.23 L2134.81 1213.23 L2135.39 1213.23 L2135.98 1213.23 L2136.57 1213.23 L2137.15 1213.23 L2137.74 1213.23 L2138.33 1213.23 L2138.91 1213.23 L2139.5 1213.23 L2140.09 1213.23 L2140.67 1213.23 L2141.26 1213.23 L2141.84 1213.23 L2142.43 1213.23 L2143.02 1213.23 L2143.6 1213.23 L2144.19 1213.23 L2144.78 1213.23 L2145.36 1213.23 L2145.95 1213.23 L2146.54 1213.23 L2147.12 1213.23 L2147.71 1213.23 L2148.3 1213.23 L2148.88 1213.23 L2149.47 1213.23 L2150.05 1213.23 L2150.64 1213.23 L2151.23 1213.23 L2151.81 1213.23 L2152.4 1213.23 L2152.99 1213.23 L2153.57 1213.23 L2154.16 1213.23 L2154.75 1213.23 L2155.33 1213.23 L2155.92 1213.23 L2156.5 1213.23 L2157.09 1213.23 L2157.68 1213.23 L2158.26 1213.23 L2158.26 1213.09 L2157.68 1213.09 L2157.09 1213.09 L2156.5 1213.09 L2155.92 1213.09 L2155.33 1213.09 L2154.75 1213.09 L2154.16 1213.09 L2153.57 1213.09 L2152.99 1213.09 L2152.4 1213.09 L2151.81 1213.09 L2151.23 1213.09 L2150.64 1213.09 L2150.05 1213.09 L2149.47 1213.09 L2148.88 1213.09 L2148.3 1213.09 L2147.71 1213.09 L2147.12 1213.09 L2146.54 1213.09 L2145.95 1213.09 L2145.36 1213.09 L2144.78 1213.09 L2144.19 1213.09 L2143.6 1213.09 L2143.02 1213.09 L2142.43 1213.09 L2141.84 1213.09 L2141.26 1213.09 L2140.67 1213.09 L2140.09 1213.09 L2139.5 1213.09 L2138.91 1213.09 L2138.33 1213.09 L2137.74 1213.09 L2137.15 1213.09 L2136.57 1213.09 L2135.98 1213.09 L2135.39 1213.09 L2134.81 1213.09 L2134.22 1213.09 L2133.63 1213.09 L2133.05 1213.09 L2132.46 1213.09 L2131.88 1213.09 L2131.29 1213.09 L2130.7 1213.09 L2130.12 1213.09 L2129.53 1213.09 L2128.94 1213.09 L2128.36 1213.09 L2127.77 1213.09 L2127.18 1213.09 L2126.6 1213.09 L2126.01 1213.09 L2125.42 1213.09 L2124.84 1213.09 L2124.25 1213.09 L2123.67 1213.09 L2123.08 1213.09 L2122.49 1213.09 L2121.91 1213.09 L2121.32 1213.09 L2120.73 1213.09 L2120.15 1213.09 L2119.56 1213.09 L2118.97 1213.09 L2118.39 1213.09 L2117.8 1213.09 L2117.22 1213.09 L2116.63 1213.09 L2116.04 1213.09 L2115.46 1213.09 L2114.87 1213.09 L2114.28 1213.09 L2113.7 1213.09 L2113.11 1213.09 L2112.52 1213.09 L2111.94 1213.09 L2111.35 1213.09 L2110.76 1213.09 L2110.18 1213.09 L2109.59 1213.09 L2109.01 1213.09 L2108.42 1213.09 L2107.83 1213.09 L2107.25 1213.09 L2106.66 1213.09 L2106.07 1213.09 L2105.49 1213.09 L2104.9 1213.09 L2104.31 1213.09 L2103.73 1213.09 L2103.14 1213.09 L2102.55 1213.09 L2101.97 1213.09 L2101.38 1213.09 L2100.8 1213.09 L2100.21 1213.09 L2099.62 1213.09 L2099.04 1213.09 L2098.45 1213.09 L2097.86 1213.09 L2097.28 1213.09 L2096.69 1213.09 L2096.1 1213.09 L2095.52 1213.09 L2094.93 1213.09 L2094.35 1213.09 L2093.76 1213.09 L2093.17 1213.09 L2092.59 1213.09 L2092 1213.09 L2091.41 1213.09 L2090.83 1213.09 L2090.24 1213.09 L2089.65 1213.09 L2089.07 1213.09 L2088.48 1213.09 L2087.89 1213.09 L2087.31 1213.09 L2086.72 1213.09 L2086.14 1213.09 L2085.55 1213.09 L2084.96 1213.09 L2084.38 1213.09 L2083.79 1213.09 L2083.2 1213.09 L2082.62 1213.09 L2082.03 1213.09 L2081.44 1213.09 L2080.86 1213.09 L2080.27 1213.09 L2079.68 1213.09 L2079.1 1213.09 L2078.51 1213.09 L2077.93 1213.09 L2077.34 1213.09 L2076.75 1213.09 L2076.17 1213.09 L2075.58 1213.09 L2074.99 1213.09 L2074.41 1213.09 L2073.82 1213.09 L2073.23 1213.09 L2072.65 1213.09 L2072.06 1213.09 L2071.48 1213.09 L2070.89 1213.09 L2070.3 1213.09 L2069.72 1213.09 L2069.13 1213.09 L2068.54 1213.09 L2067.96 1213.09 L2067.37 1213.09 L2066.78 1213.09 L2066.2 1213.09 L2065.61 1213.09 L2065.02 1213.09 L2064.44 1213.09 L2063.85 1213.09 L2063.27 1213.09 L2062.68 1213.09 L2062.09 1213.09 L2061.51 1213.09 L2060.92 1213.09 L2060.33 1213.09 L2059.75 1213.09 L2059.16 1213.09 L2058.57 1213.09 L2057.99 1213.09 L2057.4 1213.09 L2056.81 1213.09 L2056.23 1213.09 L2055.64 1213.09 L2055.06 1213.09 L2054.47 1213.09 L2053.88 1213.09 L2053.3 1213.09 L2052.71 1213.09 L2052.12 1213.09 L2051.54 1213.09 L2050.95 1213.09 L2050.36 1213.09 L2049.78 1213.09 L2049.19 1213.09 L2048.6 1213.09 L2048.02 1213.09 L2047.43 1213.09 L2046.85 1213.09 L2046.26 1213.09 L2045.67 1213.09 L2045.09 1213.09 L2044.5 1213.09 L2043.91 1213.09 L2043.33 1213.09 L2042.74 1213.09 L2042.15 1213.09 L2041.57 1213.09 L2040.98 1213.09 L2040.4 1213.09 L2039.81 1213.09 L2039.22 1213.09 L2038.64 1213.09 L2038.05 1213.09 L2037.46 1213.09 L2036.88 1213.09 L2036.29 1213.09 L2035.7 1213.09 L2035.12 1213.09 L2034.53 1213.09 L2033.94 1213.09 L2033.36 1213.09 L2032.77 1213.09 L2032.19 1213.09 L2031.6 1213.09 L2031.01 1213.09 L2030.43 1213.09 L2029.84 1213.09 L2029.25 1213.09 L2028.67 1213.09 L2028.08 1213.09 L2027.49 1213.09 L2026.91 1213.09 L2026.32 1213.09 L2025.73 1213.09 L2025.15 1213.09 L2024.56 1213.09 L2023.98 1213.09 L2023.39 1213.09 L2022.8 1213.09 L2022.22 1213.09 L2021.63 1213.09 L2021.04 1213.09 L2020.46 1213.09 L2019.87 1213.09 L2019.28 1213.09 L2018.7 1213.09 L2018.11 1213.09 L2017.53 1213.09 L2016.94 1213.09 L2016.35 1213.09 L2015.77 1213.09 L2015.18 1213.09 L2014.59 1213.09 L2014.01 1213.09 L2013.42 1213.09 L2012.83 1213.09 L2012.25 1213.09 L2011.66 1213.09 L2011.07 1213.09 L2010.49 1213.09 L2009.9 1213.09 L2009.32 1213.09 L2008.73 1213.09 L2008.14 1213.09 L2007.56 1213.09 L2006.97 1213.09 L2006.38 1213.09 L2005.8 1213.09 L2005.21 1213.09 L2004.62 1213.09 L2004.04 1213.09 L2003.45 1213.09 L2002.86 1213.09 L2002.28 1213.09 L2001.69 1213.09 L2001.11 1213.09 L2000.52 1213.09 L1999.93 1213.09 L1999.35 1213.09 L1998.76 1213.09 L1998.17 1213.09 L1997.59 1213.09 L1997 1213.09 L1996.41 1213.09 L1995.83 1213.09 L1995.24 1213.09 L1994.65 1213.09 L1994.07 1213.09 L1993.48 1213.09 L1992.9 1213.09 L1992.31 1213.09 L1991.72 1213.09 L1991.14 1213.09 L1990.55 1213.09 L1989.96 1213.09 L1989.38 1213.09 L1988.79 1213.09 L1988.2 1213.09 L1987.62 1213.09 L1987.03 1213.09 L1986.45 1213.09 L1985.86 1213.09 L1985.27 1213.09 L1984.69 1213.09 L1984.1 1213.09 L1983.51 1213.09 L1982.93 1213.09 L1982.34 1213.09 L1981.75 1213.09 L1981.17 1213.09 L1980.58 1213.09 L1979.99 1213.09 L1979.41 1213.09 L1978.82 1213.09 L1978.24 1213.09 L1977.65 1213.09 L1977.06 1213.09 L1976.48 1213.09 L1975.89 1213.09 L1975.3 1213.09 L1974.72 1213.09 L1974.13 1213.09 L1973.54 1213.09 L1972.96 1213.09 L1972.37 1213.09 L1971.78 1213.09 L1971.2 1213.09 L1970.61 1213.09 L1970.03 1213.09 L1969.44 1213.09 L1968.85 1213.09 L1968.27 1213.09 L1967.68 1213.09 L1967.09 1213.09 L1966.51 1213.09 L1965.92 1213.09 L1965.33 1213.09 L1964.75 1213.09 L1964.16 1213.09 L1963.58 1213.09 L1962.99 1213.09 L1962.4 1213.09 L1961.82 1213.09 L1961.23 1213.09 L1960.64 1213.09 L1960.06 1213.09 L1959.47 1213.09 L1958.88 1213.09 L1958.3 1213.09 L1957.71 1213.09 L1957.12 1213.09 L1956.54 1213.09 L1955.95 1213.09 L1955.37 1213.09 L1954.78 1213.09 L1954.19 1213.09 L1953.61 1213.09 L1953.02 1213.09 L1952.43 1213.09 L1951.85 1213.09 L1951.26 1213.09 L1950.67 1213.09 L1950.09 1213.09 L1949.5 1213.09 L1948.91 1213.09 L1948.33 1213.09 L1947.74 1213.09 L1947.16 1213.09 L1946.57 1213.09 L1945.98 1213.09 L1945.4 1213.09 L1944.81 1213.09 L1944.22 1213.09 L1943.64 1213.09 L1943.05 1213.09 L1942.46 1213.09 L1941.88 1213.09 L1941.29 1213.09 L1940.71 1213.09 L1940.12 1213.09 L1939.53 1213.09 L1938.95 1213.09 L1938.36 1213.09 L1937.77 1213.09 L1937.19 1213.09 L1936.6 1213.09 L1936.01 1213.09 L1935.43 1213.09 L1934.84 1213.09 L1934.25 1213.09 L1933.67 1213.09 L1933.08 1213.09 L1932.5 1213.09 L1931.91 1213.09 L1931.32 1213.09 L1930.74 1213.09 L1930.15 1213.09 L1929.56 1213.09 L1928.98 1213.09 L1928.39 1213.09 L1927.8 1213.09 L1927.22 1213.09 L1926.63 1213.09 L1926.04 1213.09 L1925.46 1213.09 L1924.87 1213.09 L1924.29 1213.09 L1923.7 1213.09 L1923.11 1213.09 L1922.53 1213.09 L1921.94 1213.09 L1921.35 1213.09 L1920.77 1213.09 L1920.18 1213.09 L1919.59 1213.09 L1919.01 1213.09 L1918.42 1213.09 L1917.83 1213.09 L1917.25 1213.09 L1916.66 1213.09 L1916.08 1213.09 L1915.49 1213.09 L1914.9 1213.09 L1914.32 1213.09 L1913.73 1213.09 L1913.14 1213.09 L1912.56 1213.09 L1911.97 1213.09 L1911.38 1213.09 L1910.8 1213.09 L1910.21 1213.09 L1909.63 1213.09 L1909.04 1213.09 L1908.45 1213.09 L1907.87 1213.09 L1907.28 1213.09 L1906.69 1213.09 L1906.11 1213.09 L1905.52 1213.09 L1904.93 1213.09 L1904.35 1213.09 L1903.76 1213.09 L1903.17 1213.09 L1902.59 1213.09 L1902 1213.09 L1901.42 1213.09 L1900.83 1213.09 L1900.24 1213.09 L1899.66 1213.09 L1899.07 1213.09 L1898.48 1213.09 L1897.9 1213.09 L1897.31 1213.09 L1896.72 1213.09 L1896.14 1213.09 L1895.55 1213.09 L1894.96 1213.09 L1894.38 1213.09 L1893.79 1213.09 L1893.21 1213.09 L1892.62 1213.09 L1892.03 1213.09 L1891.45 1213.09 L1890.86 1213.09 L1890.27 1213.09 L1889.69 1213.09 L1889.1 1213.09 L1888.51 1213.09 L1887.93 1213.09 L1887.34 1213.09 L1886.76 1213.09 L1886.17 1213.09 L1885.58 1213.09 L1885 1213.09 L1884.41 1213.09 L1883.82 1213.09 L1883.24 1213.09 L1882.65 1213.09 L1882.06 1213.09 L1881.48 1213.09 L1880.89 1213.09 L1880.3 1213.09 L1879.72 1213.09 L1879.13 1213.09 L1878.55 1213.09 L1877.96 1213.09 L1877.37 1213.09 L1876.79 1213.09 L1876.2 1213.09 L1875.61 1213.09 L1875.03 1213.09 L1874.44 1213.09 L1873.85 1213.09 L1873.27 1213.09 L1872.68 1213.09 L1872.09 1213.09 L1871.51 1213.09 L1870.92 1213.09 L1870.34 1213.09 L1869.75 1213.09 L1869.16 1213.09 L1868.58 1213.09 L1867.99 1213.09 L1867.4 1213.09 L1866.82 1213.09 L1866.23 1213.09 L1865.64 1213.09 L1865.06 1213.09 L1864.47 1213.09 L1863.88 1213.09 L1863.3 1213.09 L1862.71 1213.09 L1862.13 1213.09 L1861.54 1213.09 L1860.95 1213.09 L1860.37 1213.09 L1859.78 1213.09 L1859.19 1213.09 L1858.61 1213.09 L1858.02 1213.09 L1857.43 1213.09 L1856.85 1213.09 L1856.26 1213.09 L1855.68 1213.09 L1855.09 1213.09 L1854.5 1213.09 L1853.92 1213.09 L1853.33 1213.09 L1852.74 1213.09 L1852.16 1213.09 L1851.57 1213.09 L1850.98 1213.09 L1850.4 1213.09 L1849.81 1213.09 L1849.22 1213.09 L1848.64 1213.09 L1848.05 1213.09 L1847.47 1213.09 L1846.88 1213.09 L1846.29 1213.09 L1845.71 1213.09 L1845.12 1213.09 L1844.53 1213.09 L1843.95 1213.09 L1843.36 1213.09 L1842.77 1213.09 L1842.19 1213.09 L1841.6 1213.09 L1841.01 1213.09 L1840.43 1213.09 L1839.84 1213.09 L1839.26 1213.09 L1838.67 1213.09 L1838.08 1213.09 L1837.5 1213.09 L1836.91 1213.09 L1836.32 1213.09 L1835.74 1213.09 L1835.15 1213.09 L1834.56 1213.09 L1833.98 1213.09 L1833.39 1213.09 L1832.81 1213.09 L1832.22 1213.09 L1831.63 1213.09 L1831.05 1213.09 L1830.46 1213.09 L1829.87 1213.09 L1829.29 1213.09 L1828.7 1213.09 L1828.11 1213.09 L1827.53 1213.09 L1826.94 1213.09 L1826.35 1213.09 L1825.77 1213.09 L1825.18 1213.09 L1824.6 1213.09 L1824.01 1213.09 L1823.42 1213.09 L1822.84 1213.09 L1822.25 1213.09 L1821.66 1213.09 L1821.08 1213.09 L1820.49 1213.09 L1819.9 1213.09 L1819.32 1213.09 L1818.73 1213.09 L1818.14 1213.09 L1817.56 1213.09 L1816.97 1213.09 L1816.39 1213.09 L1815.8 1213.09 L1815.21 1213.09 L1814.63 1213.09 L1814.04 1213.09 L1813.45 1213.09 L1812.87 1213.09 L1812.28 1213.09 L1811.69 1213.09 L1811.11 1213.09 L1810.52 1213.09 L1809.94 1213.09 L1809.35 1213.09 L1808.76 1213.09 L1808.18 1213.09 L1807.59 1213.09 L1807 1213.09 L1806.42 1213.09 L1805.83 1213.09 L1805.24 1213.09 L1804.66 1213.09 L1804.07 1213.09 L1803.48 1213.09 L1802.9 1213.09 L1802.31 1213.09 L1801.73 1213.09 L1801.14 1213.09 L1800.55 1213.09 L1799.97 1213.09 L1799.38 1213.09 L1798.79 1213.09 L1798.21 1213.09 L1797.62 1213.09 L1797.03 1213.09 L1796.45 1213.09 L1795.86 1213.09 L1795.27 1213.09 L1794.69 1213.09 L1794.1 1213.09 L1793.52 1213.09 L1792.93 1213.09 L1792.34 1213.09 L1791.76 1213.09 L1791.17 1213.09 L1790.58 1213.09 L1790 1213.09 L1789.41 1213.09 L1788.82 1213.09 L1788.24 1213.09 L1787.65 1213.09 L1787.06 1213.09 L1786.48 1213.09 L1785.89 1213.09 L1785.31 1213.09 L1784.72 1213.09 L1784.13 1213.09 L1783.55 1213.09 L1782.96 1213.09 L1782.37 1213.09 L1781.79 1213.09 L1781.2 1213.09 L1780.61 1213.09 L1780.03 1213.09 L1779.44 1213.09 L1778.86 1213.09 L1778.27 1213.09 L1777.68 1213.09 L1777.1 1213.09 L1776.51 1213.09 L1775.92 1213.09 L1775.34 1213.09 L1774.75 1213.09 L1774.16 1213.09 L1773.58 1213.09 L1772.99 1213.09 L1772.4 1213.09 L1771.82 1213.09 L1771.23 1213.09 L1770.65 1213.09 L1770.06 1213.09 L1769.47 1213.09 L1768.89 1213.09 L1768.3 1213.09 L1767.71 1213.09 L1767.13 1213.09 L1766.54 1213.09 L1765.95 1213.09 L1765.37 1213.09 L1764.78 1213.09 L1764.19 1213.09 L1763.61 1213.09 L1763.02 1213.09 L1762.44 1213.09 L1761.85 1213.09 L1761.26 1213.09 L1760.68 1213.09 L1760.09 1213.09 L1759.5 1213.09 L1758.92 1213.09 L1758.33 1213.09 L1757.74 1213.09 L1757.16 1213.09 L1756.57 1213.09 L1755.99 1213.09 L1755.4 1213.09 L1754.81 1213.09 L1754.23 1213.09 L1753.64 1213.09 L1753.05 1213.09 L1752.47 1213.09 L1751.88 1213.09 L1751.29 1213.09 L1750.71 1213.09 L1750.12 1213.09 L1749.53 1213.09 L1748.95 1213.09 L1748.36 1213.09 L1747.78 1213.09 L1747.19 1213.09 L1746.6 1213.09 L1746.02 1213.09 L1745.43 1213.09 L1744.84 1213.09 L1744.26 1213.09 L1743.67 1213.09 L1743.08 1213.09 L1742.5 1213.09 L1741.91 1213.09 L1741.32 1213.09 L1740.74 1213.09 L1740.15 1213.09 L1739.57 1213.09 L1738.98 1213.09 L1738.39 1213.09 L1737.81 1213.09 L1737.22 1213.09 L1736.63 1213.09 L1736.05 1213.09 L1735.46 1213.09 L1734.87 1213.09 L1734.29 1213.09 L1733.7 1213.09 L1733.11 1213.09 L1732.53 1213.09 L1731.94 1213.09 L1731.36 1213.09 L1730.77 1213.09 L1730.18 1213.09 L1729.6 1213.09 L1729.01 1213.09 L1728.42 1213.09 L1727.84 1213.09 L1727.25 1213.09 L1726.66 1213.09 L1726.08 1213.09 L1725.49 1213.09 L1724.91 1213.09 L1724.32 1213.09 L1723.73 1213.09 L1723.15 1213.09 L1722.56 1213.09 L1721.97 1213.09 L1721.39 1213.09 L1720.8 1213.09 L1720.21 1213.09 L1719.63 1213.09 L1719.04 1213.09 L1718.45 1213.09 L1717.87 1213.09 L1717.28 1213.09 L1716.7 1213.09 L1716.11 1213.09 L1715.52 1213.09 L1714.94 1213.09 L1714.35 1213.09 L1713.76 1213.09 L1713.18 1213.09 L1712.59 1213.09 L1712 1213.09 L1711.42 1213.09 L1710.83 1213.09 L1710.24 1213.09 L1709.66 1213.09 L1709.07 1213.09 L1708.49 1213.09 L1707.9 1213.09 L1707.31 1213.09 L1706.73 1213.09 L1706.14 1213.09 L1705.55 1213.09 L1704.97 1213.09 L1704.38 1213.09 L1703.79 1213.09 L1703.21 1213.09 L1702.62 1213.09 L1702.04 1213.09 L1701.45 1213.09 L1700.86 1213.09 L1700.28 1213.09 L1699.69 1213.09 L1699.1 1213.09 L1698.52 1213.09 L1697.93 1213.09 L1697.34 1213.09 L1696.76 1213.09 L1696.17 1213.09 L1695.58 1213.09 L1695 1213.09 L1694.41 1213.09 L1693.83 1213.09 L1693.24 1213.09 L1692.65 1213.09 L1692.07 1213.09 L1691.48 1213.09 L1690.89 1213.09 L1690.31 1213.09 L1689.72 1213.09 L1689.13 1213.09 L1688.55 1213.09 L1687.96 1213.09 L1687.37 1213.09 L1686.79 1213.09 L1686.2 1213.09 L1685.62 1213.09 L1685.03 1213.09 L1684.44 1213.09 L1683.86 1213.09 L1683.27 1213.09 L1682.68 1213.09 L1682.1 1213.09 L1681.51 1213.09 L1680.92 1213.09 L1680.34 1213.09 L1679.75 1213.09 L1679.17 1213.09 L1678.58 1213.09 L1677.99 1213.09 L1677.41 1213.09 L1676.82 1213.09 L1676.23 1213.09 L1675.65 1213.09 L1675.06 1213.09 L1674.47 1213.09 L1673.89 1213.09 L1673.3 1213.09 L1672.71 1213.09 L1672.13 1213.09 L1671.54 1213.09 L1670.96 1213.09 L1670.37 1213.09 L1669.78 1213.09 L1669.2 1213.09 L1668.61 1213.09 L1668.02 1213.09 L1667.44 1213.09 L1666.85 1213.09 L1666.26 1213.09 L1665.68 1213.09 L1665.09 1213.09 L1664.5 1213.09 L1663.92 1213.09 L1663.33 1213.09 L1662.75 1213.09 L1662.16 1213.09 L1661.57 1213.09 L1660.99 1213.09 L1660.4 1213.09 L1659.81 1213.09 L1659.23 1213.09 L1658.64 1213.09 L1658.05 1213.09 L1657.47 1213.09 L1656.88 1213.09 L1656.29 1213.09 L1655.71 1213.09 L1655.12 1213.09 L1654.54 1213.09 L1653.95 1213.09 L1653.36 1213.09 L1652.78 1213.09 L1652.19 1213.09 L1651.6 1213.09 L1651.02 1213.09 L1650.43 1213.09 L1649.84 1213.09 L1649.26 1213.09 L1648.67 1213.09 L1648.09 1213.09 L1647.5 1213.09 L1646.91 1213.09 L1646.33 1213.09 L1645.74 1213.09 L1645.15 1213.09 L1644.57 1213.09 L1643.98 1213.09 L1643.39 1213.09 L1642.81 1213.09 L1642.22 1213.09 L1641.63 1213.09 L1641.05 1213.09 L1640.46 1213.09 L1639.88 1213.09 L1639.29 1213.09 L1638.7 1213.09 L1638.12 1213.09 L1637.53 1213.09 L1636.94 1213.09 L1636.36 1213.09 L1635.77 1213.09 L1635.18 1213.09 L1634.6 1213.09 L1634.01 1213.09 L1633.42 1213.09 L1632.84 1213.09 L1632.25 1213.09 L1631.67 1213.09 L1631.08 1213.09 L1630.49 1213.09 L1629.91 1213.09 L1629.32 1213.09 L1628.73 1213.09 L1628.15 1213.09 L1627.56 1213.09 L1626.97 1213.09 L1626.39 1213.09 L1625.8 1213.09 L1625.22 1213.09 L1624.63 1213.09 L1624.04 1213.09 L1623.46 1213.09 L1622.87 1213.09 L1622.28 1213.09 L1621.7 1213.09 L1621.11 1213.09 L1620.52 1213.09 L1619.94 1213.09 L1619.35 1213.09 L1618.76 1213.09 L1618.18 1213.09 L1617.59 1213.09 L1617.01 1213.09 L1616.42 1213.09 L1615.83 1213.09 L1615.25 1213.09 L1614.66 1213.09 L1614.07 1213.09 L1613.49 1213.09 L1612.9 1213.09 L1612.31 1213.09 L1611.73 1213.09 L1611.14 1213.09 L1610.55 1213.09 L1609.97 1213.09 L1609.38 1213.09 L1608.8 1213.09 L1608.21 1213.09 L1607.62 1213.09 L1607.04 1213.09 L1606.45 1213.09 L1605.86 1213.09 L1605.28 1213.09 L1604.69 1213.09 L1604.1 1213.09 L1603.52 1213.09 L1602.93 1213.09 L1602.34 1213.09 L1601.76 1213.09 L1601.17 1213.09 L1600.59 1213.09 L1600 1213.09 L1599.41 1213.09 L1598.83 1213.09 L1598.24 1213.09 L1597.65 1213.09 L1597.07 1213.09 L1596.48 1213.09 L1595.89 1213.09 L1595.31 1213.09 L1594.72 1213.09 L1594.14 1213.09 L1593.55 1213.09 L1592.96 1213.09 L1592.38 1213.09 L1591.79 1213.09 L1591.2 1213.09 L1590.62 1213.09 L1590.03 1213.09 L1589.44 1213.09 L1588.86 1213.09 L1588.27 1213.09 L1587.68 1213.09 L1587.1 1213.09 L1586.51 1213.09 L1585.93 1213.09 L1585.34 1213.09 L1584.75 1213.09 L1584.17 1213.09 L1583.58 1213.09 L1582.99 1213.09 L1582.41 1213.09 L1581.82 1213.09 L1581.23 1213.09 L1580.65 1213.09 L1580.06 1213.09 L1579.47 1213.09 L1578.89 1213.09 L1578.3 1213.09 L1577.72 1213.09 L1577.13 1213.09 L1576.54 1213.09 L1575.96 1213.09 L1575.37 1213.09 L1574.78 1213.09 L1574.2 1213.09 L1573.61 1213.09 L1573.02 1213.09 L1572.44 1213.09 L1571.85 1213.09 L1571.27 1213.09 L1570.68 1213.09 L1570.09 1213.09 L1569.51 1213.09 L1568.92 1213.09 L1568.33 1213.09 L1567.75 1213.09 L1567.16 1213.09 L1566.57 1213.09 L1565.99 1213.09 L1565.4 1213.09 L1564.81 1213.09 L1564.23 1213.09 L1563.64 1213.09 L1563.06 1213.09 L1562.47 1213.09 L1561.88 1213.09 L1561.3 1213.09 L1560.71 1213.09 L1560.12 1213.09 L1559.54 1213.09 L1558.95 1213.09 L1558.36 1213.09 L1557.78 1213.09 L1557.19 1213.09 L1556.6 1213.09 L1556.02 1213.09 L1555.43 1213.09 L1554.85 1213.09 L1554.26 1213.09 L1553.67 1213.09 L1553.09 1213.09 L1552.5 1213.09 L1551.91 1213.09 L1551.33 1213.09 L1550.74 1213.09 L1550.15 1213.09 L1549.57 1213.09 L1548.98 1213.09 L1548.4 1213.09 L1547.81 1213.09 L1547.22 1213.09 L1546.64 1213.09 L1546.05 1213.09 L1545.46 1213.09 L1544.88 1213.09 L1544.29 1213.09 L1543.7 1213.09 L1543.12 1213.09 L1542.53 1213.09 L1541.94 1213.09 L1541.36 1213.09 L1540.77 1213.09 L1540.19 1213.09 L1539.6 1213.09 L1539.01 1213.09 L1538.43 1213.09 L1537.84 1213.09 L1537.25 1213.09 L1536.67 1213.09 L1536.08 1213.09 L1535.49 1213.09 L1534.91 1213.09 L1534.32 1213.09 L1533.73 1213.09 L1533.15 1213.09 L1532.56 1213.09 L1531.98 1213.09 L1531.39 1213.09 L1530.8 1213.09 L1530.22 1213.09 L1529.63 1213.09 L1529.04 1213.09 L1528.46 1213.09 L1527.87 1213.09 L1527.28 1213.09 L1526.7 1213.09 L1526.11 1213.09 L1525.52 1213.09 L1524.94 1213.09 L1524.35 1213.09 L1523.77 1213.09 L1523.18 1213.09 L1522.59 1213.09 L1522.01 1213.09 L1521.42 1213.09 L1520.83 1213.09 L1520.25 1213.09 L1519.66 1213.09 L1519.07 1213.09 L1518.49 1213.09 L1517.9 1213.09 L1517.32 1213.09 L1516.73 1213.09 L1516.14 1213.09 L1515.56 1213.09 L1514.97 1213.09 L1514.38 1213.09 L1513.8 1213.09 L1513.21 1213.09 L1512.62 1213.09 L1512.04 1213.09 L1511.45 1213.09 L1510.86 1213.09 L1510.28 1213.09 L1509.69 1213.09 L1509.11 1213.09 L1508.52 1213.09 L1507.93 1213.09 L1507.35 1213.09 L1506.76 1213.09 L1506.17 1213.09 L1505.59 1213.09 L1505 1213.09 L1504.41 1213.09 L1503.83 1213.09 L1503.24 1213.09 L1502.65 1213.09 L1502.07 1213.09 L1501.48 1213.09 L1500.9 1213.09 L1500.31 1213.09 L1499.72 1213.09 L1499.14 1213.09 L1498.55 1213.09 L1497.96 1213.09 L1497.38 1213.09 L1496.79 1213.09 L1496.2 1213.09 L1495.62 1213.09 L1495.03 1213.09 L1494.45 1213.09 L1493.86 1213.09 L1493.27 1213.09 L1492.69 1213.09 L1492.1 1213.09 L1491.51 1213.09 L1490.93 1213.09 L1490.34 1213.09 L1489.75 1213.09 L1489.17 1213.09 L1488.58 1213.09 L1487.99 1213.09 L1487.41 1213.09 L1486.82 1213.09 L1486.24 1213.09 L1485.65 1213.09 L1485.06 1213.09 L1484.48 1213.09 L1483.89 1213.09 L1483.3 1213.09 L1482.72 1213.09 L1482.13 1213.09 L1481.54 1213.09 L1480.96 1213.09 L1480.37 1213.09 L1479.78 1213.09 L1479.2 1213.09 L1478.61 1213.09 L1478.03 1213.09 L1477.44 1213.09 L1476.85 1213.09 L1476.27 1213.09 L1475.68 1213.09 L1475.09 1213.09 L1474.51 1213.09 L1473.92 1213.09 L1473.33 1213.09 L1472.75 1213.09 L1472.16 1213.09 L1471.57 1213.09 L1470.99 1213.09 L1470.4 1213.09 L1469.82 1213.09 L1469.23 1213.09 L1468.64 1213.09 L1468.06 1213.09 L1467.47 1213.09 L1466.88 1213.09 L1466.3 1213.09 L1465.71 1213.09 L1465.12 1213.09 L1464.54 1213.09 L1463.95 1213.09 L1463.37 1213.09 L1462.78 1213.09 L1462.19 1213.09 L1461.61 1213.09 L1461.02 1213.09 L1460.43 1213.09 L1459.85 1213.09 L1459.26 1213.09 L1458.67 1213.09 L1458.09 1213.09 L1457.5 1213.09 L1456.91 1213.09 L1456.33 1213.09 L1455.74 1213.09 L1455.16 1213.09 L1454.57 1213.09 L1453.98 1213.09 L1453.4 1213.09 L1452.81 1213.09 L1452.22 1213.09 L1451.64 1213.09 L1451.05 1213.09 L1450.46 1213.09 L1449.88 1213.09 L1449.29 1213.09 L1448.7 1213.09 L1448.12 1213.09 L1447.53 1213.09 L1446.95 1213.09 L1446.36 1213.09 L1445.77 1213.09 L1445.19 1213.09 L1444.6 1213.09 L1444.01 1213.09 L1443.43 1213.09 L1442.84 1213.09 L1442.25 1213.09 L1441.67 1213.09 L1441.08 1213.09 L1440.5 1213.09 L1439.91 1213.09 L1439.32 1213.09 L1438.74 1213.09 L1438.15 1213.09 L1437.56 1213.09 L1436.98 1213.09 L1436.39 1213.09 L1435.8 1213.09 L1435.22 1213.09 L1434.63 1213.09 L1434.04 1213.09 L1433.46 1213.09 L1432.87 1213.09 L1432.29 1213.09 L1431.7 1213.09 L1431.11 1213.09 L1430.53 1213.09 L1429.94 1213.09 L1429.35 1213.09 L1428.77 1213.09 L1428.18 1213.09 L1427.59 1213.09 L1427.01 1213.09 L1426.42 1213.09 L1425.83 1213.09 L1425.25 1213.09 L1424.66 1213.09 L1424.08 1213.09 L1423.49 1213.09 L1422.9 1213.09 L1422.32 1213.09 L1421.73 1213.09 L1421.14 1213.09 L1420.56 1213.09 L1419.97 1213.09 L1419.38 1213.09 L1418.8 1213.09 L1418.21 1213.09 L1417.63 1213.09 L1417.04 1213.09 L1416.45 1213.09 L1415.87 1213.09 L1415.28 1213.09 L1414.69 1213.09 L1414.11 1213.09 L1413.52 1213.09 L1412.93 1213.09 L1412.35 1213.09 L1411.76 1213.09 L1411.17 1213.09 L1410.59 1213.09 L1410 1213.09 L1409.42 1213.09 L1408.83 1213.09 L1408.24 1213.09 L1407.66 1213.09 L1407.07 1213.09 L1406.48 1213.09 L1405.9 1213.09 L1405.31 1213.09 L1404.72 1213.09 L1404.14 1213.09 L1403.55 1213.09 L1402.96 1213.09 L1402.38 1213.09 L1401.79 1213.09 L1401.21 1213.09 L1400.62 1213.09 L1400.03 1213.09 L1399.45 1213.09 L1398.86 1213.09 L1398.27 1213.09 L1397.69 1213.09 L1397.1 1213.09 L1396.51 1213.09 L1395.93 1213.09 L1395.34 1213.09 L1394.75 1213.09 L1394.17 1213.09 L1393.58 1213.09 L1393 1213.09 L1392.41 1213.09 L1391.82 1213.09 L1391.24 1213.09 L1390.65 1213.09 L1390.06 1213.09 L1389.48 1213.09 L1388.89 1213.09 L1388.3 1213.09 L1387.72 1213.09 L1387.13 1213.09 L1386.55 1213.09 L1385.96 1213.09 L1385.37 1213.09 L1384.79 1213.09 L1384.2 1213.09 L1383.61 1213.09 L1383.03 1213.09 L1382.44 1213.09 L1381.85 1213.09 L1381.27 1213.09 L1380.68 1213.09 L1380.09 1213.09 L1379.51 1213.09 L1378.92 1213.09 L1378.34 1213.09 L1377.75 1213.09 L1377.16 1213.09 L1376.58 1213.09 L1375.99 1213.09 L1375.4 1213.09 L1374.82 1213.09 L1374.23 1213.09 L1373.64 1213.09 L1373.06 1213.09 L1372.47 1213.09 L1371.88 1213.09 L1371.3 1213.09 L1370.71 1213.09 L1370.13 1213.09 L1369.54 1213.09 L1368.95 1213.09 L1368.37 1213.09 L1367.78 1213.09 L1367.19 1213.09 L1366.61 1213.09 L1366.02 1213.09 L1365.43 1213.09 L1364.85 1213.09 L1364.26 1213.09 L1363.68 1213.09 L1363.09 1213.09 L1362.5 1213.09 L1361.92 1213.09 L1361.33 1213.09 L1360.74 1213.09 L1360.16 1213.09 L1359.57 1213.09 L1358.98 1213.09 L1358.4 1213.09 L1357.81 1213.09 L1357.22 1213.09 L1356.64 1213.09 L1356.05 1213.09 L1355.47 1213.09 L1354.88 1213.09 L1354.29 1213.09 L1353.71 1213.09 L1353.12 1213.09 L1352.53 1213.09 L1351.95 1213.09 L1351.36 1213.09 L1350.77 1213.09 L1350.19 1213.09 L1349.6 1213.09 L1349.01 1213.09 L1348.43 1213.09 L1347.84 1213.09 L1347.26 1213.09 L1346.67 1213.09 L1346.08 1213.09 L1345.5 1213.09 L1344.91 1213.09 L1344.32 1213.09 L1343.74 1213.09 L1343.15 1213.09 L1342.56 1213.09 L1341.98 1213.09 L1341.39 1213.09 L1340.8 1213.09 L1340.22 1213.09 L1339.63 1213.09 L1339.05 1213.09 L1338.46 1213.09 L1337.87 1213.09 L1337.29 1213.09 L1336.7 1213.09 L1336.11 1213.09 L1335.53 1213.09 L1334.94 1213.09 L1334.35 1213.09 L1333.77 1213.09 L1333.18 1213.09 L1332.6 1213.09 L1332.01 1213.09 L1331.42 1213.09 L1330.84 1213.09 L1330.25 1213.09 L1329.66 1213.09 L1329.08 1213.09 L1328.49 1213.09 L1327.9 1213.09 L1327.32 1213.09 L1326.73 1213.09 L1326.14 1213.09 L1325.56 1213.09 L1324.97 1213.09 L1324.39 1213.09 L1323.8 1213.09 L1323.21 1213.09 L1322.63 1213.09 L1322.04 1213.09 L1321.45 1213.09 L1320.87 1213.09 L1320.28 1213.09 L1319.69 1213.09 L1319.11 1213.09 L1318.52 1213.09 L1317.93 1213.09 L1317.35 1213.09 L1316.76 1213.09 L1316.18 1213.09 L1315.59 1213.09 L1315 1213.09 L1314.42 1213.09 L1313.83 1213.09 L1313.24 1213.09 L1312.66 1213.09 L1312.07 1213.09 L1311.48 1213.09 L1310.9 1213.09 L1310.31 1213.09 L1309.73 1213.09 L1309.14 1213.09 L1308.55 1213.09 L1307.97 1213.09 L1307.38 1213.09 L1306.79 1213.09 L1306.21 1213.09 L1305.62 1213.09 L1305.03 1213.09 L1304.45 1213.09 L1303.86 1213.09 L1303.27 1213.09 L1302.69 1213.09 L1302.1 1213.09 L1301.52 1213.09 L1300.93 1213.09 L1300.34 1213.09 L1299.76 1213.09 L1299.17 1213.09 L1298.58 1213.09 L1298 1213.09 L1297.41 1213.09 L1296.82 1213.09 L1296.24 1213.09 L1295.65 1213.09 L1295.06 1213.09 L1294.48 1213.09 L1293.89 1213.09 L1293.31 1213.09 L1292.72 1213.09 L1292.13 1213.09 L1291.55 1213.09 L1290.96 1213.09 L1290.37 1213.09 L1289.79 1213.09 L1289.2 1213.09 L1288.61 1213.09 L1288.03 1213.09 L1287.44 1213.09 L1286.86 1213.09 L1286.27 1213.09 L1285.68 1213.09 L1285.1 1213.09 L1284.51 1213.09 L1283.92 1213.09 L1283.34 1213.09 L1282.75 1213.09 L1282.16 1213.09 L1281.58 1213.09 L1280.99 1213.09 L1280.4 1213.09 L1279.82 1213.09 L1279.23 1213.09 L1278.65 1213.09 L1278.06 1213.09 L1277.47 1213.09 L1276.89 1213.09 L1276.3 1213.09 L1275.71 1213.09 L1275.13 1213.09 L1274.54 1213.09 L1273.95 1213.09 L1273.37 1213.09 L1272.78 1213.09 L1272.19 1213.09 L1271.61 1213.09 L1271.02 1213.09 L1270.44 1213.09 L1269.85 1213.09 L1269.26 1213.09 L1268.68 1213.09 L1268.09 1213.09 L1267.5 1213.09 L1266.92 1213.09 L1266.33 1213.09 L1265.74 1213.09 L1265.16 1213.09 L1264.57 1213.09 L1263.98 1213.09 L1263.4 1213.09 L1262.81 1213.09 L1262.23 1213.09 L1261.64 1213.09 L1261.05 1213.09 L1260.47 1213.09 L1259.88 1213.09 L1259.29 1213.09 L1258.71 1213.09 L1258.12 1213.09 L1257.53 1213.09 L1256.95 1213.09 L1256.36 1213.09 L1255.78 1213.09 L1255.19 1213.09 L1254.6 1213.09 L1254.02 1213.09 L1253.43 1213.09 L1252.84 1213.09 L1252.26 1213.09 L1251.67 1213.09 L1251.08 1213.09 L1250.5 1213.09 L1249.91 1213.09 L1249.32 1213.09 L1248.74 1213.09 L1248.15 1213.09 L1247.57 1213.09 L1246.98 1213.09 L1246.39 1213.09 L1245.81 1213.09 L1245.22 1213.09 L1244.63 1213.09 L1244.05 1213.09 L1243.46 1213.09 L1242.87 1213.09 L1242.29 1213.09 L1241.7 1213.09 L1241.11 1213.09 L1240.53 1213.09 L1239.94 1213.09 L1239.36 1213.09 L1238.77 1213.09 L1238.18 1213.09 L1237.6 1213.09 L1237.01 1213.09 L1236.42 1213.09 L1235.84 1213.09 L1235.25 1213.09 L1234.66 1213.09 L1234.08 1213.09 L1233.49 1213.09 L1232.91 1213.09 L1232.32 1213.09 L1231.73 1213.09 L1231.15 1213.09 L1230.56 1213.09 L1229.97 1213.09 L1229.39 1213.09 L1228.8 1213.09 L1228.21 1213.09 L1227.63 1213.09 L1227.04 1213.09 L1226.45 1213.09 L1225.87 1213.09 L1225.28 1213.09 L1224.7 1213.09 L1224.11 1213.09 L1223.52 1213.09 L1222.94 1213.09 L1222.35 1213.09 L1221.76 1213.09 L1221.18 1213.09 L1220.59 1213.09 L1220 1213.09 L1219.42 1213.09 L1218.83 1213.09 L1218.24 1213.09 L1217.66 1213.09 L1217.07 1213.09 L1216.49 1213.09 L1215.9 1213.09 L1215.31 1213.09 L1214.73 1213.09 L1214.14 1213.09 L1213.55 1213.09 L1212.97 1213.09 L1212.38 1213.09 L1211.79 1213.09 L1211.21 1213.09 L1210.62 1213.09 L1210.03 1213.09 L1209.45 1213.09 L1208.86 1213.09 L1208.28 1213.09 L1207.69 1213.09 L1207.1 1213.09 L1206.52 1213.09 L1205.93 1213.09 L1205.34 1213.09 L1204.76 1213.09 L1204.17 1213.09 L1203.58 1213.09 L1203 1213.09 L1202.41 1213.09 L1201.83 1213.09 L1201.24 1213.09 L1200.65 1213.09 L1200.07 1213.09 L1199.48 1213.09 L1198.89 1213.09 L1198.31 1213.09 L1197.72 1213.09 L1197.13 1213.09 L1196.55 1213.09 L1195.96 1213.09 L1195.37 1213.09 L1194.79 1213.09 L1194.2 1213.09 L1193.62 1213.09 L1193.03 1213.09 L1192.44 1213.09 L1191.86 1213.09 L1191.27 1213.09 L1190.68 1213.09 L1190.1 1213.09 L1189.51 1213.09 L1188.92 1213.09 L1188.34 1213.09 L1187.75 1213.09 L1187.16 1213.09 L1186.58 1213.09 L1185.99 1213.09 L1185.41 1213.09 L1184.82 1213.09 L1184.23 1213.09 L1183.65 1213.09 L1183.06 1213.09 L1182.47 1213.09 L1181.89 1213.09 L1181.3 1213.09 L1180.71 1213.09 L1180.13 1213.09 L1179.54 1213.09 L1178.96 1213.09 L1178.37 1213.09 L1177.78 1213.09 L1177.2 1213.09 L1176.61 1213.09 L1176.02 1213.09 L1175.44 1213.09 L1174.85 1213.09 L1174.26 1213.09 L1173.68 1213.09 L1173.09 1213.09 L1172.5 1213.09 L1171.92 1213.09 L1171.33 1213.09 L1170.75 1213.09 L1170.16 1213.09 L1169.57 1213.09 L1168.99 1213.09 L1168.4 1213.09 L1167.81 1213.09 L1167.23 1213.09 L1166.64 1213.09 L1166.05 1213.09 L1165.47 1213.09 L1164.88 1213.09 L1164.29 1213.09 L1163.71 1213.09 L1163.12 1213.09 L1162.54 1213.09 L1161.95 1213.09 L1161.36 1213.09 L1160.78 1213.09 L1160.19 1213.09 L1159.6 1213.09 L1159.02 1213.09 L1158.43 1213.09 L1157.84 1213.09 L1157.26 1213.09 L1156.67 1213.09 L1156.09 1213.09 L1155.5 1213.09 L1154.91 1213.09 L1154.33 1213.09 L1153.74 1213.09 L1153.15 1213.09 L1152.57 1213.09 L1151.98 1213.09 L1151.39 1213.09 L1150.81 1213.09 L1150.22 1213.09 L1149.63 1213.09 L1149.05 1213.09 L1148.46 1213.09 L1147.88 1213.09 L1147.29 1213.09 L1146.7 1213.09 L1146.12 1213.09 L1145.53 1213.09 L1144.94 1213.09 L1144.36 1213.09 L1143.77 1213.09 L1143.18 1213.09 L1142.6 1213.09 L1142.01 1213.09 L1141.42 1213.09 L1140.84 1213.09 L1140.25 1213.09 L1139.67 1213.09 L1139.08 1213.09 L1138.49 1213.09 L1137.91 1213.09 L1137.32 1213.09 L1136.73 1213.09 L1136.15 1213.09 L1135.56 1213.09 L1134.97 1213.09 L1134.39 1213.09 L1133.8 1213.09 L1133.21 1213.09 L1132.63 1213.09 L1132.04 1213.09 L1131.46 1213.09 L1130.87 1213.09 L1130.28 1213.09 L1129.7 1213.09 L1129.11 1213.09 L1128.52 1213.09 L1127.94 1213.09 L1127.35 1213.09 L1126.76 1213.09 L1126.18 1213.09 L1125.59 1213.09 L1125.01 1213.09 L1124.42 1213.09 L1123.83 1213.09 L1123.25 1213.09 L1122.66 1213.09 L1122.07 1213.09 L1121.49 1213.09 L1120.9 1213.09 L1120.31 1213.09 L1119.73 1213.09 L1119.14 1213.09 L1118.55 1213.09 L1117.97 1213.09 L1117.38 1213.09 L1116.8 1213.09 L1116.21 1213.09 L1115.62 1213.09 L1115.04 1213.09 L1114.45 1213.09 L1113.86 1213.09 L1113.28 1213.09 L1112.69 1213.09 L1112.1 1213.09 L1111.52 1213.09 L1110.93 1213.09 L1110.34 1213.09 L1109.76 1213.09 L1109.17 1213.09 L1108.59 1213.09 L1108 1213.09 L1107.41 1213.09 L1106.83 1213.09 L1106.24 1213.09 L1105.65 1213.09 L1105.07 1213.09 L1104.48 1213.09 L1103.89 1213.09 L1103.31 1213.09 L1102.72 1213.09 L1102.14 1213.09 L1101.55 1213.09 L1100.96 1213.09 L1100.38 1213.09 L1099.79 1213.09 L1099.2 1213.09 L1098.62 1213.09 L1098.03 1213.09 L1097.44 1213.09 L1096.86 1213.09 L1096.27 1213.09 L1095.68 1213.09 L1095.1 1213.09 L1094.51 1213.09 L1093.93 1213.09 L1093.34 1213.09 L1092.75 1213.09 L1092.17 1213.09 L1091.58 1213.09 L1090.99 1213.09 L1090.41 1213.09 L1089.82 1213.09 L1089.23 1213.09 L1088.65 1213.09 L1088.06 1213.09 L1087.47 1213.09 L1086.89 1213.09 L1086.3 1213.09 L1085.72 1213.09 L1085.13 1213.09 L1084.54 1213.09 L1083.96 1213.09 L1083.37 1213.09 L1082.78 1213.09 L1082.2 1213.09 L1081.61 1213.09 L1081.02 1213.09 L1080.44 1213.09 L1079.85 1213.09 L1079.26 1213.09 L1078.68 1213.09 L1078.09 1213.09 L1077.51 1213.09 L1076.92 1213.09 L1076.33 1213.09 L1075.75 1213.09 L1075.16 1213.09 L1074.57 1213.09 L1073.99 1213.09 L1073.4 1213.09 L1072.81 1213.09 L1072.23 1213.09 L1071.64 1213.09 L1071.06 1213.09 L1070.47 1213.09 L1069.88 1213.09 L1069.3 1213.09 L1068.71 1213.09 L1068.12 1213.09 L1067.54 1213.09 L1066.95 1213.09 L1066.36 1213.09 L1065.78 1213.09 L1065.19 1213.09 L1064.6 1213.09 L1064.02 1213.09 L1063.43 1213.09 L1062.85 1213.09 L1062.26 1213.09 L1061.67 1213.09 L1061.09 1213.09 L1060.5 1213.09 L1059.91 1213.09 L1059.33 1213.09 L1058.74 1213.09 L1058.15 1213.09 L1057.57 1213.09 L1056.98 1213.09 L1056.39 1213.09 L1055.81 1213.09 L1055.22 1213.09 L1054.64 1213.09 L1054.05 1213.09 L1053.46 1213.09 L1052.88 1213.09 L1052.29 1213.09 L1051.7 1213.09 L1051.12 1213.09 L1050.53 1213.09 L1049.94 1213.09 L1049.36 1213.09 L1048.77 1213.09 L1048.19 1213.09 L1047.6 1213.09 L1047.01 1213.09 L1046.43 1213.09 L1045.84 1213.09 L1045.25 1213.09 L1044.67 1213.09 L1044.08 1213.09 L1043.49 1213.09 L1042.91 1213.09 L1042.32 1213.09 L1041.73 1213.09 L1041.15 1213.09 L1040.56 1213.09 L1039.98 1213.09 L1039.39 1213.09 L1038.8 1213.09 L1038.22 1213.09 L1037.63 1213.09 L1037.04 1213.09 L1036.46 1213.09 L1035.87 1213.09 L1035.28 1213.09 L1034.7 1213.09 L1034.11 1213.09 L1033.52 1213.09 L1032.94 1213.09 L1032.35 1213.09 L1031.77 1213.09 L1031.18 1213.09 L1030.59 1213.09 L1030.01 1213.09 L1029.42 1213.09 L1028.83 1213.09 L1028.25 1213.09 L1027.66 1213.09 L1027.07 1213.09 L1026.49 1213.09 L1025.9 1213.09 L1025.32 1213.09 L1024.73 1213.09 L1024.14 1213.09 L1023.56 1213.09 L1022.97 1213.09 L1022.38 1213.09 L1021.8 1213.09 L1021.21 1213.09 L1020.62 1213.09 L1020.04 1213.09 L1019.45 1213.09 L1018.86 1213.09 L1018.28 1213.09 L1017.69 1213.09 L1017.11 1213.09 L1016.52 1213.09 L1015.93 1213.09 L1015.35 1213.09 L1014.76 1213.09 L1014.17 1213.09 L1013.59 1213.09 L1013 1213.09 L1012.41 1213.09 L1011.83 1213.09 L1011.24 1213.09 L1010.65 1213.09 L1010.07 1213.09 L1009.48 1213.09 L1008.9 1213.09 L1008.31 1213.09 L1007.72 1213.09 L1007.14 1213.09 L1006.55 1213.09 L1005.96 1213.09 L1005.38 1213.09 L1004.79 1213.09 L1004.2 1213.09 L1003.62 1213.09 L1003.03 1213.09 L1002.44 1213.09 L1001.86 1213.09 L1001.27 1213.09 L1000.69 1213.09 L1000.1 1213.09 L999.513 1213.09 L998.926 1213.09 L998.34 1213.09 L997.754 1213.09 L997.167 1213.09 L996.581 1213.09 L995.994 1213.09 L995.408 1213.09 L994.822 1213.09 L994.235 1213.09 L993.649 1213.09 L993.062 1213.09 L992.476 1213.09 L991.889 1213.09 L991.303 1213.09 L990.717 1213.09 L990.13 1213.09 L989.544 1213.09 L988.957 1213.09 L988.371 1213.09 L987.785 1213.09 L987.198 1213.09 L986.612 1213.09 L986.025 1213.09  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.16 986.612,1213.16 987.198,1213.16 987.785,1213.16 988.371,1213.16 988.957,1213.16 989.544,1213.16 990.13,1213.16 990.717,1213.16 991.303,1213.16 991.889,1213.16 992.476,1213.16 993.062,1213.16 993.649,1213.16 994.235,1213.16 994.822,1213.16 995.408,1213.16 995.994,1213.16 996.581,1213.16 997.167,1213.16 997.754,1213.16 998.34,1213.16 998.926,1213.16 999.513,1213.16 1000.1,1213.16 1000.69,1213.16 1001.27,1213.16 1001.86,1213.16 1002.44,1213.16 1003.03,1213.16 1003.62,1213.16 1004.2,1213.16 1004.79,1213.16 1005.38,1213.16 1005.96,1213.16 1006.55,1213.16 1007.14,1213.16 1007.72,1213.16 1008.31,1213.16 1008.9,1213.16 1009.48,1213.16 1010.07,1213.16 1010.65,1213.16 1011.24,1213.16 1011.83,1213.16 1012.41,1213.16 1013,1213.16 1013.59,1213.16 1014.17,1213.16 1014.76,1213.16 1015.35,1213.16 1015.93,1213.16 1016.52,1213.16 1017.11,1213.16 1017.69,1213.16 1018.28,1213.16 1018.86,1213.16 1019.45,1213.16 1020.04,1213.16 1020.62,1213.16 1021.21,1213.16 1021.8,1213.16 1022.38,1213.16 1022.97,1213.16 1023.56,1213.16 1024.14,1213.16 1024.73,1213.16 1025.32,1213.16 1025.9,1213.16 1026.49,1213.16 1027.07,1213.16 1027.66,1213.16 1028.25,1213.16 1028.83,1213.16 1029.42,1213.16 1030.01,1213.16 1030.59,1213.16 1031.18,1213.16 1031.77,1213.16 1032.35,1213.16 1032.94,1213.16 1033.52,1213.16 1034.11,1213.16 1034.7,1213.16 1035.28,1213.16 1035.87,1213.16 1036.46,1213.16 1037.04,1213.16 1037.63,1213.16 1038.22,1213.16 1038.8,1213.16 1039.39,1213.16 1039.98,1213.16 1040.56,1213.16 1041.15,1213.16 1041.73,1213.16 1042.32,1213.16 1042.91,1213.16 1043.49,1213.16 1044.08,1213.16 1044.67,1213.16 1045.25,1213.16 1045.84,1213.16 1046.43,1213.16 1047.01,1213.16 1047.6,1213.16 1048.19,1213.16 1048.77,1213.16 1049.36,1213.16 1049.94,1213.16 1050.53,1213.16 1051.12,1213.16 1051.7,1213.16 1052.29,1213.16 1052.88,1213.16 1053.46,1213.16 1054.05,1213.16 1054.64,1213.16 1055.22,1213.16 1055.81,1213.16 1056.39,1213.16 1056.98,1213.16 1057.57,1213.16 1058.15,1213.16 1058.74,1213.16 1059.33,1213.16 1059.91,1213.16 1060.5,1213.16 1061.09,1213.16 1061.67,1213.16 1062.26,1213.16 1062.85,1213.16 1063.43,1213.16 1064.02,1213.16 1064.6,1213.16 1065.19,1213.16 1065.78,1213.16 1066.36,1213.16 1066.95,1213.16 1067.54,1213.16 1068.12,1213.16 1068.71,1213.16 1069.3,1213.16 1069.88,1213.16 1070.47,1213.16 1071.06,1213.16 1071.64,1213.16 1072.23,1213.16 1072.81,1213.16 1073.4,1213.16 1073.99,1213.16 1074.57,1213.16 1075.16,1213.16 1075.75,1213.16 1076.33,1213.16 1076.92,1213.16 1077.51,1213.16 1078.09,1213.16 1078.68,1213.16 1079.26,1213.16 1079.85,1213.16 1080.44,1213.16 1081.02,1213.16 1081.61,1213.16 1082.2,1213.16 1082.78,1213.16 1083.37,1213.16 1083.96,1213.16 1084.54,1213.16 1085.13,1213.16 1085.72,1213.16 1086.3,1213.16 1086.89,1213.16 1087.47,1213.16 1088.06,1213.16 1088.65,1213.16 1089.23,1213.16 1089.82,1213.16 1090.41,1213.16 1090.99,1213.16 1091.58,1213.16 1092.17,1213.16 1092.75,1213.16 1093.34,1213.16 1093.93,1213.16 1094.51,1213.16 1095.1,1213.16 1095.68,1213.16 1096.27,1213.16 1096.86,1213.16 1097.44,1213.16 1098.03,1213.16 1098.62,1213.16 1099.2,1213.16 1099.79,1213.16 1100.38,1213.16 1100.96,1213.16 1101.55,1213.16 1102.14,1213.16 1102.72,1213.16 1103.31,1213.16 1103.89,1213.16 1104.48,1213.16 1105.07,1213.16 1105.65,1213.16 1106.24,1213.16 1106.83,1213.16 1107.41,1213.16 1108,1213.16 1108.59,1213.16 1109.17,1213.16 1109.76,1213.16 1110.34,1213.16 1110.93,1213.16 1111.52,1213.16 1112.1,1213.16 1112.69,1213.16 1113.28,1213.16 1113.86,1213.16 1114.45,1213.16 1115.04,1213.16 1115.62,1213.16 1116.21,1213.16 1116.8,1213.16 1117.38,1213.16 1117.97,1213.16 1118.55,1213.16 1119.14,1213.16 1119.73,1213.16 1120.31,1213.16 1120.9,1213.16 1121.49,1213.16 1122.07,1213.16 1122.66,1213.16 1123.25,1213.16 1123.83,1213.16 1124.42,1213.16 1125.01,1213.16 1125.59,1213.16 1126.18,1213.16 1126.76,1213.16 1127.35,1213.16 1127.94,1213.16 1128.52,1213.16 1129.11,1213.16 1129.7,1213.16 1130.28,1213.16 1130.87,1213.16 1131.46,1213.16 1132.04,1213.16 1132.63,1213.16 1133.21,1213.16 1133.8,1213.16 1134.39,1213.16 1134.97,1213.16 1135.56,1213.16 1136.15,1213.16 1136.73,1213.16 1137.32,1213.16 1137.91,1213.16 1138.49,1213.16 1139.08,1213.16 1139.67,1213.16 1140.25,1213.16 1140.84,1213.16 1141.42,1213.16 1142.01,1213.16 1142.6,1213.16 1143.18,1213.16 1143.77,1213.16 1144.36,1213.16 1144.94,1213.16 1145.53,1213.16 1146.12,1213.16 1146.7,1213.16 1147.29,1213.16 1147.88,1213.16 1148.46,1213.16 1149.05,1213.16 1149.63,1213.16 1150.22,1213.16 1150.81,1213.16 1151.39,1213.16 1151.98,1213.16 1152.57,1213.16 1153.15,1213.16 1153.74,1213.16 1154.33,1213.16 1154.91,1213.16 1155.5,1213.16 1156.09,1213.16 1156.67,1213.16 1157.26,1213.16 1157.84,1213.16 1158.43,1213.16 1159.02,1213.16 1159.6,1213.16 1160.19,1213.16 1160.78,1213.16 1161.36,1213.16 1161.95,1213.16 1162.54,1213.16 1163.12,1213.16 1163.71,1213.16 1164.29,1213.16 1164.88,1213.16 1165.47,1213.16 1166.05,1213.16 1166.64,1213.16 1167.23,1213.16 1167.81,1213.16 1168.4,1213.16 1168.99,1213.16 1169.57,1213.16 1170.16,1213.16 1170.75,1213.16 1171.33,1213.16 1171.92,1213.16 1172.5,1213.16 1173.09,1213.16 1173.68,1213.16 1174.26,1213.16 1174.85,1213.16 1175.44,1213.16 1176.02,1213.16 1176.61,1213.16 1177.2,1213.16 1177.78,1213.16 1178.37,1213.16 1178.96,1213.16 1179.54,1213.16 1180.13,1213.16 1180.71,1213.16 1181.3,1213.16 1181.89,1213.16 1182.47,1213.16 1183.06,1213.16 1183.65,1213.16 1184.23,1213.16 1184.82,1213.16 1185.41,1213.16 1185.99,1213.16 1186.58,1213.16 1187.16,1213.16 1187.75,1213.16 1188.34,1213.16 1188.92,1213.16 1189.51,1213.16 1190.1,1213.16 1190.68,1213.16 1191.27,1213.16 1191.86,1213.16 1192.44,1213.16 1193.03,1213.16 1193.62,1213.16 1194.2,1213.16 1194.79,1213.16 1195.37,1213.16 1195.96,1213.16 1196.55,1213.16 1197.13,1213.16 1197.72,1213.16 1198.31,1213.16 1198.89,1213.16 1199.48,1213.16 1200.07,1213.16 1200.65,1213.16 1201.24,1213.16 1201.83,1213.16 1202.41,1213.16 1203,1213.16 1203.58,1213.16 1204.17,1213.16 1204.76,1213.16 1205.34,1213.16 1205.93,1213.16 1206.52,1213.16 1207.1,1213.16 1207.69,1213.16 1208.28,1213.16 1208.86,1213.16 1209.45,1213.16 1210.03,1213.16 1210.62,1213.16 1211.21,1213.16 1211.79,1213.16 1212.38,1213.16 1212.97,1213.16 1213.55,1213.16 1214.14,1213.16 1214.73,1213.16 1215.31,1213.16 1215.9,1213.16 1216.49,1213.16 1217.07,1213.16 1217.66,1213.16 1218.24,1213.16 1218.83,1213.16 1219.42,1213.16 1220,1213.16 1220.59,1213.16 1221.18,1213.16 1221.76,1213.16 1222.35,1213.16 1222.94,1213.16 1223.52,1213.16 1224.11,1213.16 1224.7,1213.16 1225.28,1213.16 1225.87,1213.16 1226.45,1213.16 1227.04,1213.16 1227.63,1213.16 1228.21,1213.16 1228.8,1213.16 1229.39,1213.16 1229.97,1213.16 1230.56,1213.16 1231.15,1213.16 1231.73,1213.16 1232.32,1213.16 1232.91,1213.16 1233.49,1213.16 1234.08,1213.16 1234.66,1213.16 1235.25,1213.16 1235.84,1213.16 1236.42,1213.16 1237.01,1213.16 1237.6,1213.16 1238.18,1213.16 1238.77,1213.16 1239.36,1213.16 1239.94,1213.16 1240.53,1213.16 1241.11,1213.16 1241.7,1213.16 1242.29,1213.16 1242.87,1213.16 1243.46,1213.16 1244.05,1213.16 1244.63,1213.16 1245.22,1213.16 1245.81,1213.16 1246.39,1213.16 1246.98,1213.16 1247.57,1213.16 1248.15,1213.16 1248.74,1213.16 1249.32,1213.16 1249.91,1213.16 1250.5,1213.16 1251.08,1213.16 1251.67,1213.16 1252.26,1213.16 1252.84,1213.16 1253.43,1213.16 1254.02,1213.16 1254.6,1213.16 1255.19,1213.16 1255.78,1213.16 1256.36,1213.16 1256.95,1213.16 1257.53,1213.16 1258.12,1213.16 1258.71,1213.16 1259.29,1213.16 1259.88,1213.16 1260.47,1213.16 1261.05,1213.16 1261.64,1213.16 1262.23,1213.16 1262.81,1213.16 1263.4,1213.16 1263.98,1213.16 1264.57,1213.16 1265.16,1213.16 1265.74,1213.16 1266.33,1213.16 1266.92,1213.16 1267.5,1213.16 1268.09,1213.16 1268.68,1213.16 1269.26,1213.16 1269.85,1213.16 1270.44,1213.16 1271.02,1213.16 1271.61,1213.16 1272.19,1213.16 1272.78,1213.16 1273.37,1213.16 1273.95,1213.16 1274.54,1213.16 1275.13,1213.16 1275.71,1213.16 1276.3,1213.16 1276.89,1213.16 1277.47,1213.16 1278.06,1213.16 1278.65,1213.16 1279.23,1213.16 1279.82,1213.16 1280.4,1213.16 1280.99,1213.16 1281.58,1213.16 1282.16,1213.16 1282.75,1213.16 1283.34,1213.16 1283.92,1213.16 1284.51,1213.16 1285.1,1213.16 1285.68,1213.16 1286.27,1213.16 1286.86,1213.16 1287.44,1213.16 1288.03,1213.16 1288.61,1213.16 1289.2,1213.16 1289.79,1213.16 1290.37,1213.16 1290.96,1213.16 1291.55,1213.16 1292.13,1213.16 1292.72,1213.16 1293.31,1213.16 1293.89,1213.16 1294.48,1213.16 1295.06,1213.16 1295.65,1213.16 1296.24,1213.16 1296.82,1213.16 1297.41,1213.16 1298,1213.16 1298.58,1213.16 1299.17,1213.16 1299.76,1213.16 1300.34,1213.16 1300.93,1213.16 1301.52,1213.16 1302.1,1213.16 1302.69,1213.16 1303.27,1213.16 1303.86,1213.16 1304.45,1213.16 1305.03,1213.16 1305.62,1213.16 1306.21,1213.16 1306.79,1213.16 1307.38,1213.16 1307.97,1213.16 1308.55,1213.16 1309.14,1213.16 1309.73,1213.16 1310.31,1213.16 1310.9,1213.16 1311.48,1213.16 1312.07,1213.16 1312.66,1213.16 1313.24,1213.16 1313.83,1213.16 1314.42,1213.16 1315,1213.16 1315.59,1213.16 1316.18,1213.16 1316.76,1213.16 1317.35,1213.16 1317.93,1213.16 1318.52,1213.16 1319.11,1213.16 1319.69,1213.16 1320.28,1213.16 1320.87,1213.16 1321.45,1213.16 1322.04,1213.16 1322.63,1213.16 1323.21,1213.16 1323.8,1213.16 1324.39,1213.16 1324.97,1213.16 1325.56,1213.16 1326.14,1213.16 1326.73,1213.16 1327.32,1213.16 1327.9,1213.16 1328.49,1213.16 1329.08,1213.16 1329.66,1213.16 1330.25,1213.16 1330.84,1213.16 1331.42,1213.16 1332.01,1213.16 1332.6,1213.16 1333.18,1213.16 1333.77,1213.16 1334.35,1213.16 1334.94,1213.16 1335.53,1213.16 1336.11,1213.16 1336.7,1213.16 1337.29,1213.16 1337.87,1213.16 1338.46,1213.16 1339.05,1213.16 1339.63,1213.16 1340.22,1213.16 1340.8,1213.16 1341.39,1213.16 1341.98,1213.16 1342.56,1213.16 1343.15,1213.16 1343.74,1213.16 1344.32,1213.16 1344.91,1213.16 1345.5,1213.16 1346.08,1213.16 1346.67,1213.16 1347.26,1213.16 1347.84,1213.16 1348.43,1213.16 1349.01,1213.16 1349.6,1213.16 1350.19,1213.16 1350.77,1213.16 1351.36,1213.16 1351.95,1213.16 1352.53,1213.16 1353.12,1213.16 1353.71,1213.16 1354.29,1213.16 1354.88,1213.16 1355.47,1213.16 1356.05,1213.16 1356.64,1213.16 1357.22,1213.16 1357.81,1213.16 1358.4,1213.16 1358.98,1213.16 1359.57,1213.16 1360.16,1213.16 1360.74,1213.16 1361.33,1213.16 1361.92,1213.16 1362.5,1213.16 1363.09,1213.16 1363.68,1213.16 1364.26,1213.16 1364.85,1213.16 1365.43,1213.16 1366.02,1213.16 1366.61,1213.16 1367.19,1213.16 1367.78,1213.16 1368.37,1213.16 1368.95,1213.16 1369.54,1213.16 1370.13,1213.16 1370.71,1213.16 1371.3,1213.16 1371.88,1213.16 1372.47,1213.16 1373.06,1213.16 1373.64,1213.16 1374.23,1213.16 1374.82,1213.16 1375.4,1213.16 1375.99,1213.16 1376.58,1213.16 1377.16,1213.16 1377.75,1213.16 1378.34,1213.16 1378.92,1213.16 1379.51,1213.16 1380.09,1213.16 1380.68,1213.16 1381.27,1213.16 1381.85,1213.16 1382.44,1213.16 1383.03,1213.16 1383.61,1213.16 1384.2,1213.16 1384.79,1213.16 1385.37,1213.16 1385.96,1213.16 1386.55,1213.16 1387.13,1213.16 1387.72,1213.16 1388.3,1213.16 1388.89,1213.16 1389.48,1213.16 1390.06,1213.16 1390.65,1213.16 1391.24,1213.16 1391.82,1213.16 1392.41,1213.16 1393,1213.16 1393.58,1213.16 1394.17,1213.16 1394.75,1213.16 1395.34,1213.16 1395.93,1213.16 1396.51,1213.16 1397.1,1213.16 1397.69,1213.16 1398.27,1213.16 1398.86,1213.16 1399.45,1213.16 1400.03,1213.16 1400.62,1213.16 1401.21,1213.16 1401.79,1213.16 1402.38,1213.16 1402.96,1213.16 1403.55,1213.16 1404.14,1213.16 1404.72,1213.16 1405.31,1213.16 1405.9,1213.16 1406.48,1213.16 1407.07,1213.16 1407.66,1213.16 1408.24,1213.16 1408.83,1213.16 1409.42,1213.16 1410,1213.16 1410.59,1213.16 1411.17,1213.16 1411.76,1213.16 1412.35,1213.16 1412.93,1213.16 1413.52,1213.16 1414.11,1213.16 1414.69,1213.16 1415.28,1213.16 1415.87,1213.16 1416.45,1213.16 1417.04,1213.16 1417.63,1213.16 1418.21,1213.16 1418.8,1213.16 1419.38,1213.16 1419.97,1213.16 1420.56,1213.16 1421.14,1213.16 1421.73,1213.16 1422.32,1213.16 1422.9,1213.16 1423.49,1213.16 1424.08,1213.16 1424.66,1213.16 1425.25,1213.16 1425.83,1213.16 1426.42,1213.16 1427.01,1213.16 1427.59,1213.16 1428.18,1213.16 1428.77,1213.16 1429.35,1213.16 1429.94,1213.16 1430.53,1213.16 1431.11,1213.16 1431.7,1213.16 1432.29,1213.16 1432.87,1213.16 1433.46,1213.16 1434.04,1213.16 1434.63,1213.16 1435.22,1213.16 1435.8,1213.16 1436.39,1213.16 1436.98,1213.16 1437.56,1213.16 1438.15,1213.16 1438.74,1213.16 1439.32,1213.16 1439.91,1213.16 1440.5,1213.16 1441.08,1213.16 1441.67,1213.16 1442.25,1213.16 1442.84,1213.16 1443.43,1213.16 1444.01,1213.16 1444.6,1213.16 1445.19,1213.16 1445.77,1213.16 1446.36,1213.16 1446.95,1213.16 1447.53,1213.16 1448.12,1213.16 1448.7,1213.16 1449.29,1213.16 1449.88,1213.16 1450.46,1213.16 1451.05,1213.16 1451.64,1213.16 1452.22,1213.16 1452.81,1213.16 1453.4,1213.16 1453.98,1213.16 1454.57,1213.16 1455.16,1213.16 1455.74,1213.16 1456.33,1213.16 1456.91,1213.16 1457.5,1213.16 1458.09,1213.16 1458.67,1213.16 1459.26,1213.16 1459.85,1213.16 1460.43,1213.16 1461.02,1213.16 1461.61,1213.16 1462.19,1213.16 1462.78,1213.16 1463.37,1213.16 1463.95,1213.16 1464.54,1213.16 1465.12,1213.16 1465.71,1213.16 1466.3,1213.16 1466.88,1213.16 1467.47,1213.16 1468.06,1213.16 1468.64,1213.16 1469.23,1213.16 1469.82,1213.16 1470.4,1213.16 1470.99,1213.16 1471.57,1213.16 1472.16,1213.16 1472.75,1213.16 1473.33,1213.16 1473.92,1213.16 1474.51,1213.16 1475.09,1213.16 1475.68,1213.16 1476.27,1213.16 1476.85,1213.16 1477.44,1213.16 1478.03,1213.16 1478.61,1213.16 1479.2,1213.16 1479.78,1213.16 1480.37,1213.16 1480.96,1213.16 1481.54,1213.16 1482.13,1213.16 1482.72,1213.16 1483.3,1213.16 1483.89,1213.16 1484.48,1213.16 1485.06,1213.16 1485.65,1213.16 1486.24,1213.16 1486.82,1213.16 1487.41,1213.16 1487.99,1213.16 1488.58,1213.16 1489.17,1213.16 1489.75,1213.16 1490.34,1213.16 1490.93,1213.16 1491.51,1213.16 1492.1,1213.16 1492.69,1213.16 1493.27,1213.16 1493.86,1213.16 1494.45,1213.16 1495.03,1213.16 1495.62,1213.16 1496.2,1213.16 1496.79,1213.16 1497.38,1213.16 1497.96,1213.16 1498.55,1213.16 1499.14,1213.16 1499.72,1213.16 1500.31,1213.16 1500.9,1213.16 1501.48,1213.16 1502.07,1213.16 1502.65,1213.16 1503.24,1213.16 1503.83,1213.16 1504.41,1213.16 1505,1213.16 1505.59,1213.16 1506.17,1213.16 1506.76,1213.16 1507.35,1213.16 1507.93,1213.16 1508.52,1213.16 1509.11,1213.16 1509.69,1213.16 1510.28,1213.16 1510.86,1213.16 1511.45,1213.16 1512.04,1213.16 1512.62,1213.16 1513.21,1213.16 1513.8,1213.16 1514.38,1213.16 1514.97,1213.16 1515.56,1213.16 1516.14,1213.16 1516.73,1213.16 1517.32,1213.16 1517.9,1213.16 1518.49,1213.16 1519.07,1213.16 1519.66,1213.16 1520.25,1213.16 1520.83,1213.16 1521.42,1213.16 1522.01,1213.16 1522.59,1213.16 1523.18,1213.16 1523.77,1213.16 1524.35,1213.16 1524.94,1213.16 1525.52,1213.16 1526.11,1213.16 1526.7,1213.16 1527.28,1213.16 1527.87,1213.16 1528.46,1213.16 1529.04,1213.16 1529.63,1213.16 1530.22,1213.16 1530.8,1213.16 1531.39,1213.16 1531.98,1213.16 1532.56,1213.16 1533.15,1213.16 1533.73,1213.16 1534.32,1213.16 1534.91,1213.16 1535.49,1213.16 1536.08,1213.16 1536.67,1213.16 1537.25,1213.16 1537.84,1213.16 1538.43,1213.16 1539.01,1213.16 1539.6,1213.16 1540.19,1213.16 1540.77,1213.16 1541.36,1213.16 1541.94,1213.16 1542.53,1213.16 1543.12,1213.16 1543.7,1213.16 1544.29,1213.16 1544.88,1213.16 1545.46,1213.16 1546.05,1213.16 1546.64,1213.16 1547.22,1213.16 1547.81,1213.16 1548.4,1213.16 1548.98,1213.16 1549.57,1213.16 1550.15,1213.16 1550.74,1213.16 1551.33,1213.16 1551.91,1213.16 1552.5,1213.16 1553.09,1213.16 1553.67,1213.16 1554.26,1213.16 1554.85,1213.16 1555.43,1213.16 1556.02,1213.16 1556.6,1213.16 1557.19,1213.16 1557.78,1213.16 1558.36,1213.16 1558.95,1213.16 1559.54,1213.16 1560.12,1213.16 1560.71,1213.16 1561.3,1213.16 1561.88,1213.16 1562.47,1213.16 1563.06,1213.16 1563.64,1213.16 1564.23,1213.16 1564.81,1213.16 1565.4,1213.16 1565.99,1213.16 1566.57,1213.16 1567.16,1213.16 1567.75,1213.16 1568.33,1213.16 1568.92,1213.16 1569.51,1213.16 1570.09,1213.16 1570.68,1213.16 1571.27,1213.16 1571.85,1213.16 1572.44,1213.16 1573.02,1213.16 1573.61,1213.16 1574.2,1213.16 1574.78,1213.16 1575.37,1213.16 1575.96,1213.16 1576.54,1213.16 1577.13,1213.16 1577.72,1213.16 1578.3,1213.16 1578.89,1213.16 1579.47,1213.16 1580.06,1213.16 1580.65,1213.16 1581.23,1213.16 1581.82,1213.16 1582.41,1213.16 1582.99,1213.16 1583.58,1213.16 1584.17,1213.16 1584.75,1213.16 1585.34,1213.16 1585.93,1213.16 1586.51,1213.16 1587.1,1213.16 1587.68,1213.16 1588.27,1213.16 1588.86,1213.16 1589.44,1213.16 1590.03,1213.16 1590.62,1213.16 1591.2,1213.16 1591.79,1213.16 1592.38,1213.16 1592.96,1213.16 1593.55,1213.16 1594.14,1213.16 1594.72,1213.16 1595.31,1213.16 1595.89,1213.16 1596.48,1213.16 1597.07,1213.16 1597.65,1213.16 1598.24,1213.16 1598.83,1213.16 1599.41,1213.16 1600,1213.16 1600.59,1213.16 1601.17,1213.16 1601.76,1213.16 1602.34,1213.16 1602.93,1213.16 1603.52,1213.16 1604.1,1213.16 1604.69,1213.16 1605.28,1213.16 1605.86,1213.16 1606.45,1213.16 1607.04,1213.16 1607.62,1213.16 1608.21,1213.16 1608.8,1213.16 1609.38,1213.16 1609.97,1213.16 1610.55,1213.16 1611.14,1213.16 1611.73,1213.16 1612.31,1213.16 1612.9,1213.16 1613.49,1213.16 1614.07,1213.16 1614.66,1213.16 1615.25,1213.16 1615.83,1213.16 1616.42,1213.16 1617.01,1213.16 1617.59,1213.16 1618.18,1213.16 1618.76,1213.16 1619.35,1213.16 1619.94,1213.16 1620.52,1213.16 1621.11,1213.16 1621.7,1213.16 1622.28,1213.16 1622.87,1213.16 1623.46,1213.16 1624.04,1213.16 1624.63,1213.16 1625.22,1213.16 1625.8,1213.16 1626.39,1213.16 1626.97,1213.16 1627.56,1213.16 1628.15,1213.16 1628.73,1213.16 1629.32,1213.16 1629.91,1213.16 1630.49,1213.16 1631.08,1213.16 1631.67,1213.16 1632.25,1213.16 1632.84,1213.16 1633.42,1213.16 1634.01,1213.16 1634.6,1213.16 1635.18,1213.16 1635.77,1213.16 1636.36,1213.16 1636.94,1213.16 1637.53,1213.16 1638.12,1213.16 1638.7,1213.16 1639.29,1213.16 1639.88,1213.16 1640.46,1213.16 1641.05,1213.16 1641.63,1213.16 1642.22,1213.16 1642.81,1213.16 1643.39,1213.16 1643.98,1213.16 1644.57,1213.16 1645.15,1213.16 1645.74,1213.16 1646.33,1213.16 1646.91,1213.16 1647.5,1213.16 1648.09,1213.16 1648.67,1213.16 1649.26,1213.16 1649.84,1213.16 1650.43,1213.16 1651.02,1213.16 1651.6,1213.16 1652.19,1213.16 1652.78,1213.16 1653.36,1213.16 1653.95,1213.16 1654.54,1213.16 1655.12,1213.16 1655.71,1213.16 1656.29,1213.16 1656.88,1213.16 1657.47,1213.16 1658.05,1213.16 1658.64,1213.16 1659.23,1213.16 1659.81,1213.16 1660.4,1213.16 1660.99,1213.16 1661.57,1213.16 1662.16,1213.16 1662.75,1213.16 1663.33,1213.16 1663.92,1213.16 1664.5,1213.16 1665.09,1213.16 1665.68,1213.16 1666.26,1213.16 1666.85,1213.16 1667.44,1213.16 1668.02,1213.16 1668.61,1213.16 1669.2,1213.16 1669.78,1213.16 1670.37,1213.16 1670.96,1213.16 1671.54,1213.16 1672.13,1213.16 1672.71,1213.16 1673.3,1213.16 1673.89,1213.16 1674.47,1213.16 1675.06,1213.16 1675.65,1213.16 1676.23,1213.16 1676.82,1213.16 1677.41,1213.16 1677.99,1213.16 1678.58,1213.16 1679.17,1213.16 1679.75,1213.16 1680.34,1213.16 1680.92,1213.16 1681.51,1213.16 1682.1,1213.16 1682.68,1213.16 1683.27,1213.16 1683.86,1213.16 1684.44,1213.16 1685.03,1213.16 1685.62,1213.16 1686.2,1213.16 1686.79,1213.16 1687.37,1213.16 1687.96,1213.16 1688.55,1213.16 1689.13,1213.16 1689.72,1213.16 1690.31,1213.16 1690.89,1213.16 1691.48,1213.16 1692.07,1213.16 1692.65,1213.16 1693.24,1213.16 1693.83,1213.16 1694.41,1213.16 1695,1213.16 1695.58,1213.16 1696.17,1213.16 1696.76,1213.16 1697.34,1213.16 1697.93,1213.16 1698.52,1213.16 1699.1,1213.16 1699.69,1213.16 1700.28,1213.16 1700.86,1213.16 1701.45,1213.16 1702.04,1213.16 1702.62,1213.16 1703.21,1213.16 1703.79,1213.16 1704.38,1213.16 1704.97,1213.16 1705.55,1213.16 1706.14,1213.16 1706.73,1213.16 1707.31,1213.16 1707.9,1213.16 1708.49,1213.16 1709.07,1213.16 1709.66,1213.16 1710.24,1213.16 1710.83,1213.16 1711.42,1213.16 1712,1213.16 1712.59,1213.16 1713.18,1213.16 1713.76,1213.16 1714.35,1213.16 1714.94,1213.16 1715.52,1213.16 1716.11,1213.16 1716.7,1213.16 1717.28,1213.16 1717.87,1213.16 1718.45,1213.16 1719.04,1213.16 1719.63,1213.16 1720.21,1213.16 1720.8,1213.16 1721.39,1213.16 1721.97,1213.16 1722.56,1213.16 1723.15,1213.16 1723.73,1213.16 1724.32,1213.16 1724.91,1213.16 1725.49,1213.16 1726.08,1213.16 1726.66,1213.16 1727.25,1213.16 1727.84,1213.16 1728.42,1213.16 1729.01,1213.16 1729.6,1213.16 1730.18,1213.16 1730.77,1213.16 1731.36,1213.16 1731.94,1213.16 1732.53,1213.16 1733.11,1213.16 1733.7,1213.16 1734.29,1213.16 1734.87,1213.16 1735.46,1213.16 1736.05,1213.16 1736.63,1213.16 1737.22,1213.16 1737.81,1213.16 1738.39,1213.16 1738.98,1213.16 1739.57,1213.16 1740.15,1213.16 1740.74,1213.16 1741.32,1213.16 1741.91,1213.16 1742.5,1213.16 1743.08,1213.16 1743.67,1213.16 1744.26,1213.16 1744.84,1213.16 1745.43,1213.16 1746.02,1213.16 1746.6,1213.16 1747.19,1213.16 1747.78,1213.16 1748.36,1213.16 1748.95,1213.16 1749.53,1213.16 1750.12,1213.16 1750.71,1213.16 1751.29,1213.16 1751.88,1213.16 1752.47,1213.16 1753.05,1213.16 1753.64,1213.16 1754.23,1213.16 1754.81,1213.16 1755.4,1213.16 1755.99,1213.16 1756.57,1213.16 1757.16,1213.16 1757.74,1213.16 1758.33,1213.16 1758.92,1213.16 1759.5,1213.16 1760.09,1213.16 1760.68,1213.16 1761.26,1213.16 1761.85,1213.16 1762.44,1213.16 1763.02,1213.16 1763.61,1213.16 1764.19,1213.16 1764.78,1213.16 1765.37,1213.16 1765.95,1213.16 1766.54,1213.16 1767.13,1213.16 1767.71,1213.16 1768.3,1213.16 1768.89,1213.16 1769.47,1213.16 1770.06,1213.16 1770.65,1213.16 1771.23,1213.16 1771.82,1213.16 1772.4,1213.16 1772.99,1213.16 1773.58,1213.16 1774.16,1213.16 1774.75,1213.16 1775.34,1213.16 1775.92,1213.16 1776.51,1213.16 1777.1,1213.16 1777.68,1213.16 1778.27,1213.16 1778.86,1213.16 1779.44,1213.16 1780.03,1213.16 1780.61,1213.16 1781.2,1213.16 1781.79,1213.16 1782.37,1213.16 1782.96,1213.16 1783.55,1213.16 1784.13,1213.16 1784.72,1213.16 1785.31,1213.16 1785.89,1213.16 1786.48,1213.16 1787.06,1213.16 1787.65,1213.16 1788.24,1213.16 1788.82,1213.16 1789.41,1213.16 1790,1213.16 1790.58,1213.16 1791.17,1213.16 1791.76,1213.16 1792.34,1213.16 1792.93,1213.16 1793.52,1213.16 1794.1,1213.16 1794.69,1213.16 1795.27,1213.16 1795.86,1213.16 1796.45,1213.16 1797.03,1213.16 1797.62,1213.16 1798.21,1213.16 1798.79,1213.16 1799.38,1213.16 1799.97,1213.16 1800.55,1213.16 1801.14,1213.16 1801.73,1213.16 1802.31,1213.16 1802.9,1213.16 1803.48,1213.16 1804.07,1213.16 1804.66,1213.16 1805.24,1213.16 1805.83,1213.16 1806.42,1213.16 1807,1213.16 1807.59,1213.16 1808.18,1213.16 1808.76,1213.16 1809.35,1213.16 1809.94,1213.16 1810.52,1213.16 1811.11,1213.16 1811.69,1213.16 1812.28,1213.16 1812.87,1213.16 1813.45,1213.16 1814.04,1213.16 1814.63,1213.16 1815.21,1213.16 1815.8,1213.16 1816.39,1213.16 1816.97,1213.16 1817.56,1213.16 1818.14,1213.16 1818.73,1213.16 1819.32,1213.16 1819.9,1213.16 1820.49,1213.16 1821.08,1213.16 1821.66,1213.16 1822.25,1213.16 1822.84,1213.16 1823.42,1213.16 1824.01,1213.16 1824.6,1213.16 1825.18,1213.16 1825.77,1213.16 1826.35,1213.16 1826.94,1213.16 1827.53,1213.16 1828.11,1213.16 1828.7,1213.16 1829.29,1213.16 1829.87,1213.16 1830.46,1213.16 1831.05,1213.16 1831.63,1213.16 1832.22,1213.16 1832.81,1213.16 1833.39,1213.16 1833.98,1213.16 1834.56,1213.16 1835.15,1213.16 1835.74,1213.16 1836.32,1213.16 1836.91,1213.16 1837.5,1213.16 1838.08,1213.16 1838.67,1213.16 1839.26,1213.16 1839.84,1213.16 1840.43,1213.16 1841.01,1213.16 1841.6,1213.16 1842.19,1213.16 1842.77,1213.16 1843.36,1213.16 1843.95,1213.16 1844.53,1213.16 1845.12,1213.16 1845.71,1213.16 1846.29,1213.16 1846.88,1213.16 1847.47,1213.16 1848.05,1213.16 1848.64,1213.16 1849.22,1213.16 1849.81,1213.16 1850.4,1213.16 1850.98,1213.16 1851.57,1213.16 1852.16,1213.16 1852.74,1213.16 1853.33,1213.16 1853.92,1213.16 1854.5,1213.16 1855.09,1213.16 1855.68,1213.16 1856.26,1213.16 1856.85,1213.16 1857.43,1213.16 1858.02,1213.16 1858.61,1213.16 1859.19,1213.16 1859.78,1213.16 1860.37,1213.16 1860.95,1213.16 1861.54,1213.16 1862.13,1213.16 1862.71,1213.16 1863.3,1213.16 1863.88,1213.16 1864.47,1213.16 1865.06,1213.16 1865.64,1213.16 1866.23,1213.16 1866.82,1213.16 1867.4,1213.16 1867.99,1213.16 1868.58,1213.16 1869.16,1213.16 1869.75,1213.16 1870.34,1213.16 1870.92,1213.16 1871.51,1213.16 1872.09,1213.16 1872.68,1213.16 1873.27,1213.16 1873.85,1213.16 1874.44,1213.16 1875.03,1213.16 1875.61,1213.16 1876.2,1213.16 1876.79,1213.16 1877.37,1213.16 1877.96,1213.16 1878.55,1213.16 1879.13,1213.16 1879.72,1213.16 1880.3,1213.16 1880.89,1213.16 1881.48,1213.16 1882.06,1213.16 1882.65,1213.16 1883.24,1213.16 1883.82,1213.16 1884.41,1213.16 1885,1213.16 1885.58,1213.16 1886.17,1213.16 1886.76,1213.16 1887.34,1213.16 1887.93,1213.16 1888.51,1213.16 1889.1,1213.16 1889.69,1213.16 1890.27,1213.16 1890.86,1213.16 1891.45,1213.16 1892.03,1213.16 1892.62,1213.16 1893.21,1213.16 1893.79,1213.16 1894.38,1213.16 1894.96,1213.16 1895.55,1213.16 1896.14,1213.16 1896.72,1213.16 1897.31,1213.16 1897.9,1213.16 1898.48,1213.16 1899.07,1213.16 1899.66,1213.16 1900.24,1213.16 1900.83,1213.16 1901.42,1213.16 1902,1213.16 1902.59,1213.16 1903.17,1213.16 1903.76,1213.16 1904.35,1213.16 1904.93,1213.16 1905.52,1213.16 1906.11,1213.16 1906.69,1213.16 1907.28,1213.16 1907.87,1213.16 1908.45,1213.16 1909.04,1213.16 1909.63,1213.16 1910.21,1213.16 1910.8,1213.16 1911.38,1213.16 1911.97,1213.16 1912.56,1213.16 1913.14,1213.16 1913.73,1213.16 1914.32,1213.16 1914.9,1213.16 1915.49,1213.16 1916.08,1213.16 1916.66,1213.16 1917.25,1213.16 1917.83,1213.16 1918.42,1213.16 1919.01,1213.16 1919.59,1213.16 1920.18,1213.16 1920.77,1213.16 1921.35,1213.16 1921.94,1213.16 1922.53,1213.16 1923.11,1213.16 1923.7,1213.16 1924.29,1213.16 1924.87,1213.16 1925.46,1213.16 1926.04,1213.16 1926.63,1213.16 1927.22,1213.16 1927.8,1213.16 1928.39,1213.16 1928.98,1213.16 1929.56,1213.16 1930.15,1213.16 1930.74,1213.16 1931.32,1213.16 1931.91,1213.16 1932.5,1213.16 1933.08,1213.16 1933.67,1213.16 1934.25,1213.16 1934.84,1213.16 1935.43,1213.16 1936.01,1213.16 1936.6,1213.16 1937.19,1213.16 1937.77,1213.16 1938.36,1213.16 1938.95,1213.16 1939.53,1213.16 1940.12,1213.16 1940.71,1213.16 1941.29,1213.16 1941.88,1213.16 1942.46,1213.16 1943.05,1213.16 1943.64,1213.16 1944.22,1213.16 1944.81,1213.16 1945.4,1213.16 1945.98,1213.16 1946.57,1213.16 1947.16,1213.16 1947.74,1213.16 1948.33,1213.16 1948.91,1213.16 1949.5,1213.16 1950.09,1213.16 1950.67,1213.16 1951.26,1213.16 1951.85,1213.16 1952.43,1213.16 1953.02,1213.16 1953.61,1213.16 1954.19,1213.16 1954.78,1213.16 1955.37,1213.16 1955.95,1213.16 1956.54,1213.16 1957.12,1213.16 1957.71,1213.16 1958.3,1213.16 1958.88,1213.16 1959.47,1213.16 1960.06,1213.16 1960.64,1213.16 1961.23,1213.16 1961.82,1213.16 1962.4,1213.16 1962.99,1213.16 1963.58,1213.16 1964.16,1213.16 1964.75,1213.16 1965.33,1213.16 1965.92,1213.16 1966.51,1213.16 1967.09,1213.16 1967.68,1213.16 1968.27,1213.16 1968.85,1213.16 1969.44,1213.16 1970.03,1213.16 1970.61,1213.16 1971.2,1213.16 1971.78,1213.16 1972.37,1213.16 1972.96,1213.16 1973.54,1213.16 1974.13,1213.16 1974.72,1213.16 1975.3,1213.16 1975.89,1213.16 1976.48,1213.16 1977.06,1213.16 1977.65,1213.16 1978.24,1213.16 1978.82,1213.16 1979.41,1213.16 1979.99,1213.16 1980.58,1213.16 1981.17,1213.16 1981.75,1213.16 1982.34,1213.16 1982.93,1213.16 1983.51,1213.16 1984.1,1213.16 1984.69,1213.16 1985.27,1213.16 1985.86,1213.16 1986.45,1213.16 1987.03,1213.16 1987.62,1213.16 1988.2,1213.16 1988.79,1213.16 1989.38,1213.16 1989.96,1213.16 1990.55,1213.16 1991.14,1213.16 1991.72,1213.16 1992.31,1213.16 1992.9,1213.16 1993.48,1213.16 1994.07,1213.16 1994.65,1213.16 1995.24,1213.16 1995.83,1213.16 1996.41,1213.16 1997,1213.16 1997.59,1213.16 1998.17,1213.16 1998.76,1213.16 1999.35,1213.16 1999.93,1213.16 2000.52,1213.16 2001.11,1213.16 2001.69,1213.16 2002.28,1213.16 2002.86,1213.16 2003.45,1213.16 2004.04,1213.16 2004.62,1213.16 2005.21,1213.16 2005.8,1213.16 2006.38,1213.16 2006.97,1213.16 2007.56,1213.16 2008.14,1213.16 2008.73,1213.16 2009.32,1213.16 2009.9,1213.16 2010.49,1213.16 2011.07,1213.16 2011.66,1213.16 2012.25,1213.16 2012.83,1213.16 2013.42,1213.16 2014.01,1213.16 2014.59,1213.16 2015.18,1213.16 2015.77,1213.16 2016.35,1213.16 2016.94,1213.16 2017.53,1213.16 2018.11,1213.16 2018.7,1213.16 2019.28,1213.16 2019.87,1213.16 2020.46,1213.16 2021.04,1213.16 2021.63,1213.16 2022.22,1213.16 2022.8,1213.16 2023.39,1213.16 2023.98,1213.16 2024.56,1213.16 2025.15,1213.16 2025.73,1213.16 2026.32,1213.16 2026.91,1213.16 2027.49,1213.16 2028.08,1213.16 2028.67,1213.16 2029.25,1213.16 2029.84,1213.16 2030.43,1213.16 2031.01,1213.16 2031.6,1213.16 2032.19,1213.16 2032.77,1213.16 2033.36,1213.16 2033.94,1213.16 2034.53,1213.16 2035.12,1213.16 2035.7,1213.16 2036.29,1213.16 2036.88,1213.16 2037.46,1213.16 2038.05,1213.16 2038.64,1213.16 2039.22,1213.16 2039.81,1213.16 2040.4,1213.16 2040.98,1213.16 2041.57,1213.16 2042.15,1213.16 2042.74,1213.16 2043.33,1213.16 2043.91,1213.16 2044.5,1213.16 2045.09,1213.16 2045.67,1213.16 2046.26,1213.16 2046.85,1213.16 2047.43,1213.16 2048.02,1213.16 2048.6,1213.16 2049.19,1213.16 2049.78,1213.16 2050.36,1213.16 2050.95,1213.16 2051.54,1213.16 2052.12,1213.16 2052.71,1213.16 2053.3,1213.16 2053.88,1213.16 2054.47,1213.16 2055.06,1213.16 2055.64,1213.16 2056.23,1213.16 2056.81,1213.16 2057.4,1213.16 2057.99,1213.16 2058.57,1213.16 2059.16,1213.16 2059.75,1213.16 2060.33,1213.16 2060.92,1213.16 2061.51,1213.16 2062.09,1213.16 2062.68,1213.16 2063.27,1213.16 2063.85,1213.16 2064.44,1213.16 2065.02,1213.16 2065.61,1213.16 2066.2,1213.16 2066.78,1213.16 2067.37,1213.16 2067.96,1213.16 2068.54,1213.16 2069.13,1213.16 2069.72,1213.16 2070.3,1213.16 2070.89,1213.16 2071.48,1213.16 2072.06,1213.16 2072.65,1213.16 2073.23,1213.16 2073.82,1213.16 2074.41,1213.16 2074.99,1213.16 2075.58,1213.16 2076.17,1213.16 2076.75,1213.16 2077.34,1213.16 2077.93,1213.16 2078.51,1213.16 2079.1,1213.16 2079.68,1213.16 2080.27,1213.16 2080.86,1213.16 2081.44,1213.16 2082.03,1213.16 2082.62,1213.16 2083.2,1213.16 2083.79,1213.16 2084.38,1213.16 2084.96,1213.16 2085.55,1213.16 2086.14,1213.16 2086.72,1213.16 2087.31,1213.16 2087.89,1213.16 2088.48,1213.16 2089.07,1213.16 2089.65,1213.16 2090.24,1213.16 2090.83,1213.16 2091.41,1213.16 2092,1213.16 2092.59,1213.16 2093.17,1213.16 2093.76,1213.16 2094.35,1213.16 2094.93,1213.16 2095.52,1213.16 2096.1,1213.16 2096.69,1213.16 2097.28,1213.16 2097.86,1213.16 2098.45,1213.16 2099.04,1213.16 2099.62,1213.16 2100.21,1213.16 2100.8,1213.16 2101.38,1213.16 2101.97,1213.16 2102.55,1213.16 2103.14,1213.16 2103.73,1213.16 2104.31,1213.16 2104.9,1213.16 2105.49,1213.16 2106.07,1213.16 2106.66,1213.16 2107.25,1213.16 2107.83,1213.16 2108.42,1213.16 2109.01,1213.16 2109.59,1213.16 2110.18,1213.16 2110.76,1213.16 2111.35,1213.16 2111.94,1213.16 2112.52,1213.16 2113.11,1213.16 2113.7,1213.16 2114.28,1213.16 2114.87,1213.16 2115.46,1213.16 2116.04,1213.16 2116.63,1213.16 2117.22,1213.16 2117.8,1213.16 2118.39,1213.16 2118.97,1213.16 2119.56,1213.16 2120.15,1213.16 2120.73,1213.16 2121.32,1213.16 2121.91,1213.16 2122.49,1213.16 2123.08,1213.16 2123.67,1213.16 2124.25,1213.16 2124.84,1213.16 2125.42,1213.16 2126.01,1213.16 2126.6,1213.16 2127.18,1213.16 2127.77,1213.16 2128.36,1213.16 2128.94,1213.16 2129.53,1213.16 2130.12,1213.16 2130.7,1213.16 2131.29,1213.16 2131.88,1213.16 2132.46,1213.16 2133.05,1213.16 2133.63,1213.16 2134.22,1213.16 2134.81,1213.16 2135.39,1213.16 2135.98,1213.16 2136.57,1213.16 2137.15,1213.16 2137.74,1213.16 2138.33,1213.16 2138.91,1213.16 2139.5,1213.16 2140.09,1213.16 2140.67,1213.16 2141.26,1213.16 2141.84,1213.16 2142.43,1213.16 2143.02,1213.16 2143.6,1213.16 2144.19,1213.16 2144.78,1213.16 2145.36,1213.16 2145.95,1213.16 2146.54,1213.16 2147.12,1213.16 2147.71,1213.16 2148.3,1213.16 2148.88,1213.16 2149.47,1213.16 2150.05,1213.16 2150.64,1213.16 2151.23,1213.16 2151.81,1213.16 2152.4,1213.16 2152.99,1213.16 2153.57,1213.16 2154.16,1213.16 2154.75,1213.16 2155.33,1213.16 2155.92,1213.16 2156.5,1213.16 2157.09,1213.16 2157.68,1213.16 2158.26,1213.16 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.2,1193.51 1399.18,899.083 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.22 985.439,1193.51 2158.26,1193.51 2158.26,1232.22 985.439,1232.22 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip793\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip793)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-6105.65 166.029,-6939.78 166.588,-7698.36 167.147,-8386.3 167.706,-9008.18 168.266,-9568.27 168.825,-9244.36 169.384,-9729.33 169.943,-9448.76 170.503,-9862.94 171.062,-10204.6 171.621,-10529 172.18,-10235.8 172.74,-9996.93 173.299,-9326.46 173.858,-9566.8 174.417,-9375.15 174.977,-9569.63 175.536,-9395.57 176.095,-9535.63 176.655,-9656.64 177.214,-9779.49 177.773,-9579.55 178.332,-9657.9 178.892,-9446.38 179.451,-9262.95 180.01,-9284.29 180.569,-9094.73 181.129,-9088.08 181.688,-9075.42 182.247,-9037.72 182.806,-8828.98 183.366,-8644.1 183.925,-8455.82 184.484,-8406.04 185.043,-8356.49 185.603,-8290.55 186.162,-8092.04 186.721,-7779.88 187.28,-7710.48 187.84,-7626.28 188.399,-7528.28 188.958,-7336.56 189.517,-7048.95 190.077,-6865.23 190.636,-6749.93 191.195,-6637.34 191.754,-6528.21 192.314,-6348.15 192.873,-6234.99 193.432,-6055.44 193.991,-5874.4 194.551,-5763.85 195.11,-5592.04 195.669,-5482.4 196.228,-5376.2 196.788,-5094.09 197.347,-4881.46 197.906,-4733.15 198.465,-4635.59 199.025,-4487.2 199.584,-4201.17 200.143,-4021.4 200.702,-3889.66 201.262,-3762.53 201.821,-3638.82 202.38,-3430.89 202.939,-3310.68 203.499,-3155.24 204.058,-3044.35 204.617,-2892.82 205.176,-2821.76 205.736,-2721.67 206.295,-2651.36 206.854,-2548.71 207.413,-2351.15 207.973,-2223.35 208.532,-2072.79 209.091,-1954.49 209.65,-1839.37 210.21,-1784.33 210.769,-1673.68 211.328,-1590.9 211.887,-1515.2 212.447,-1438.98 213.006,-1337.1 213.565,-1291.33 214.124,-1190.88 214.684,-990.661 215.243,-902.992 215.802,-766.87 216.361,-728.264 216.921,-625.648 217.48,-598.543 218.039,-569.592 218.598,-515.188 219.158,-387.545 219.717,-313.137 220.276,-288.142 220.835,-240.567 221.395,-216.285 221.954,-194.335 222.513,-174.651 223.072,-151.052 223.632,-89.2225 224.191,-3.2917 224.75,38.4535 225.309,77.4037 225.869,118.963 226.428,172.139 226.987,203.99 227.546,253.147 228.106,284.286 228.665,336.252 229.224,400.789 229.783,428.097 230.343,431.957 230.902,458.847 231.461,526.349 232.02,568.022 232.58,568.118 233.139,608.944 233.698,609.693 234.257,613.533 234.817,632.187 235.376,634.196 235.935,618.462 236.494,679.342 237.054,662.839 237.613,715.725 238.172,712.797 238.731,713.667 239.291,713.798 239.85,732.966 240.409,731.367 240.968,751.026 241.528,753.135 242.087,734.139 242.646,735.115 243.205,774.687 243.765,811.137 244.324,808.356 244.883,829.133 245.442,826.523 246.002,841.159 246.561,838.038 247.12,853.156 247.679,832.153 248.239,811.864 248.798,810.475 249.357,779.21 249.916,802.816 250.476,805.592 251.035,807.045 251.594,879.129 252.153,883.121 252.713,897.798 253.272,895.763 253.831,913.3 254.39,947.725 254.95,961.496 255.509,989.618 256.068,984.065 256.627,974.529 257.187,968.29 257.746,980.932 258.305,1009.27 258.864,1018.91 259.424,1046.16 259.983,1018.57 260.542,1025.39 261.101,1013.43 261.661,1008.88 262.22,1019.81 262.779,1032.67 263.338,1023.75 263.898,1015.09 264.457,1024.09 265.016,1002.63 265.575,1019.74 266.135,1048.47 266.694,1042.67 267.253,1067.22 267.812,1059.07 268.372,1068.57 268.931,1055.83 269.49,1045.83 270.049,1057.58 270.609,1099.65 271.168,1089.05 271.727,1076.78 272.286,1068.2 272.846,1057.74 273.405,1066.01 273.964,1042.84 274.523,1084.29 275.083,1056.91 275.642,1052.52 276.201,1041.34 276.76,999.264 277.32,996.344 277.879,1003.12 278.438,995.826 278.997,992.069 279.557,986.387 280.116,962.76 280.675,978.524 281.234,974.35 281.794,972.786 282.353,1001.03 282.912,1032.01 283.471,1042.38 284.031,1082.48 284.59,1073.6 285.149,1080.94 285.708,1086.17 286.268,1105.75 286.827,1092.65 287.386,1063.65 287.945,1069.48 288.505,1056.16 289.064,1015.25 289.623,1057.61 290.182,1047.9 290.742,1040.44 291.301,1015.04 291.86,993.828 292.419,989.977 292.979,1000.87 293.538,1029.53 294.097,1005.26 294.656,1051.55 295.216,1063.9 295.775,1054.98 296.334,1063.4 296.893,1017.52 297.453,1010.46 298.012,985.131 298.571,932.31 299.13,925.732 299.69,989.466 300.249,968.692 300.808,997.792 301.368,992.577 301.927,966.178 302.486,974.535 303.045,984.602 303.605,957.811 304.164,953.554 304.723,951.854 305.282,944.405 305.842,960.58 306.401,955.776 306.96,955.404 307.519,951.364 308.079,963.234 308.638,992.991 309.197,967.145 309.756,963.372 310.316,976.807 310.875,969.764 311.434,982.262 311.993,975.786 312.553,952.129 313.112,965.57 313.671,959.684 314.23,958.254 314.79,985.508 315.349,948.169 315.908,941.668 316.467,954.313 317.027,949.459 317.586,945.442 318.145,943.476 318.704,957.286 319.264,952.869 319.823,952.411 320.382,947.791 320.941,927.201 321.501,942.456 322.06,957.148 322.619,984.85 323.178,994.326 323.738,985.728 324.297,976.071 324.856,996.401 325.415,972.498 325.975,966.335 326.534,976.977 327.093,983.549 327.652,990.389 328.212,998.72 328.771,1003.04 329.33,1012.37 329.889,1006.07 330.449,982.86 331.008,959.792 331.567,952.494 332.126,942.697 332.686,936.2 333.245,981.341 333.804,985.251 334.363,994.226 334.923,968.508 335.482,942.862 336.041,935.214 336.6,930.047 337.16,941.828 337.719,951.094 338.278,944.945 338.837,941.534 339.397,918.389 339.956,895.785 340.515,876.504 341.074,842.165 341.634,854.37 342.193,850.815 342.752,867.334 343.311,897.79 343.871,891.845 344.43,886.236 344.989,914.82 345.548,923.433 346.108,948.177 346.667,955.992 347.226,927.064 347.785,968.699 348.345,945.837 348.904,938.119 349.463,913.184 350.022,909.952 350.582,904.38 351.141,897.657 351.7,879.485 352.259,873.204 352.819,883.638 353.378,929.169 353.937,941.643 354.496,936.591 355.056,911.698 355.615,907.3 356.174,888.224 356.733,851.352 357.293,833.467 357.852,832.901 358.411,846.676 358.97,814.687 359.53,814.702 360.089,830.638 360.648,846.7 361.207,843.63 361.767,871.068 362.326,882.229 362.885,897.122 363.444,911.047 364.004,952.64 364.563,962.778 365.122,939.97 365.681,953.067 366.241,948.412 366.8,939.441 367.359,932.082 367.918,908.363 368.478,917.951 369.037,912.796 369.596,890.585 370.155,885.213 370.715,861.04 371.274,858.042 371.833,825.475 372.392,839.434 372.952,832.545 373.511,816.904 374.07,842.377 374.629,792.252 375.189,793.448 375.748,777.201 376.307,765.521 376.866,800.416 377.426,816.886 377.985,818.922 378.544,815.399 379.103,810.694 379.663,810.461 380.222,871.407 380.781,849.476 381.34,845.968 381.9,863.059 382.459,859.067 383.018,853.773 383.577,851.345 384.137,863.184 384.696,875.348 385.255,890.497 385.814,897.594 386.374,890.544 386.933,871.371 387.492,928.02 388.051,949.615 388.611,955.862 389.17,934.481 389.729,910.316 390.288,885.664 390.848,878.806 391.407,922.785 391.966,933.436 392.525,910.722 393.085,920.409 393.644,918.204 394.203,929.08 394.762,918.721 395.322,880.909 395.881,840.322 396.44,837.735 396.999,816.376 397.559,831.534 398.118,808.529 398.677,803.787 399.236,804.614 399.796,785.862 400.355,787.665 400.914,771.537 401.473,788.784 402.033,753.786 402.592,726.653 403.151,727.166 403.71,726.064 404.27,694.916 404.829,694.914 405.388,697.218 405.947,683.459 406.507,656.383 407.066,679.18 407.625,684.43 408.184,723.611 408.744,730.538 409.303,730.276 409.862,765.282 410.421,780.469 410.981,813.306 411.54,794.167 412.099,794.578 412.658,824.449 413.218,823.225 413.777,837.549 414.336,833.815 414.895,845.039 415.455,792.279 416.014,759.088 416.573,743.418 417.132,778.201 417.692,761.891 418.251,731.614 418.81,747.438 419.369,751.058 419.929,738.116 420.488,756.174 421.047,771.741 421.606,738.429 422.166,772.371 422.725,790.502 423.284,804.269 423.843,786.647 424.403,805.661 424.962,817.809 425.521,845.709 426.08,874.412 426.64,833.117 427.199,816.334 427.758,794.925 428.318,775.428 428.877,773.126 429.436,802.271 429.995,783.51 430.555,769.975 431.114,769.763 431.673,738.437 432.232,739.099 432.792,771.712 433.351,787.696 433.91,784.586 434.469,783.19 435.029,780.132 435.588,797.327 436.147,783.529 436.706,799.035 437.266,797.843 437.825,776.574 438.384,776.352 438.943,777.477 439.503,790.562 440.062,791.423 440.621,771.192 441.18,752.068 441.74,802.23 442.299,798.405 442.858,796.979 443.417,777.145 443.977,774.082 444.536,789.811 445.095,804.555 445.654,800.7 446.214,782.961 446.773,797.06 447.332,762.71 447.891,795.54 448.451,795.105 449.01,776.634 449.569,790.154 450.128,787.093 450.688,783.471 451.247,784.848 451.806,834.494 452.365,846.414 452.925,857.627 453.484,852.47 454.043,845.118 454.602,824.378 455.162,821 455.721,830.129 456.28,806.68 456.839,821.116 457.399,832.446 457.958,844.693 458.517,838.932 459.076,814.828 459.636,794.866 460.195,792.32 460.754,777.402 461.313,789.969 461.873,772.377 462.432,771.003 462.991,785.319 463.55,785.791 464.11,781.243 464.669,746.57 465.228,745.727 465.787,762.371 466.347,761.836 466.906,779.16 467.465,777.562 468.024,772.896 468.584,754.403 469.143,738.923 469.702,740.184 470.261,754.257 470.821,740.592 471.38,755.44 471.939,751.858 472.498,754.688 473.058,738.101 473.617,735.506 474.176,735.316 474.735,752.514 475.295,749.992 475.854,766.414 476.413,763.565 476.972,779.216 477.532,763.296 478.091,777.937 478.65,759.402 479.209,808.876 479.769,802.746 480.328,782.953 480.887,779.695 481.446,794.215 482.006,791.058 482.565,773.174 483.124,752.986 483.683,752.585 484.243,765.403 484.802,745.359 485.361,756.043 485.92,755.31 486.48,756.366 487.039,820.303 487.598,815.096 488.157,794.816 488.717,808.614 489.276,791.024 489.835,774.457 490.394,770.343 490.954,723.131 491.513,737.561 492.072,703.401 492.631,721.242 493.191,688.589 493.75,707.324 494.309,743.169 494.868,756.35 495.428,772.095 495.987,783.247 496.546,796.475 497.105,796.423 497.665,791.631 498.224,787.389 498.783,802.531 499.342,815.569 499.902,826.191 500.461,817.407 501.02,814.352 501.579,822.98 502.139,880.548 502.698,887.588 503.257,848.306 503.816,822.143 504.376,817.689 504.935,780.317 505.494,728.127 506.053,712.643 506.613,695.103 507.172,711.915 507.731,693.49 508.29,696.558 508.85,696.226 509.409,726.98 509.968,744.04 510.527,742.847 511.087,726.169 511.646,742.069 512.205,643.996 512.764,666.967 513.324,670.601 513.883,673.885 514.442,674.275 515.001,708.051 515.561,723.088 516.12,705.647 516.679,752.749 517.238,768.884 517.798,812.927 518.357,789.962 518.916,800.817 519.475,799.637 520.035,795.962 520.594,793.863 521.153,759.742 521.712,792.006 522.272,787.388 522.831,831.947 523.39,796.449 523.949,791.246 524.509,772.059 525.068,768.625 525.627,780.279 526.186,779.862 526.746,779.068 527.305,743.146 527.864,709.938 528.423,693.568 528.983,676.408 529.542,660.13 530.101,648.565 530.66,668.018 531.22,721.47 531.779,720.989 532.338,728.25 532.897,744.647 533.457,760.518 534.016,742.304 534.575,757.507 535.134,740.292 535.694,739.628 536.253,723.436 536.812,693.055 537.371,696.069 537.931,663.419 538.49,650.099 539.049,656.098 539.608,632.153 540.168,639.205 540.727,660.807 541.286,648.231 541.845,634.052 542.405,654.682 542.964,642.164 543.523,645.571 544.082,668.404 544.642,692.337 545.201,692.757 545.76,695.031 546.319,675.557 546.879,676.813 547.438,696.761 547.997,668.895 548.556,638.495 549.116,625.749 549.675,611.806 550.234,630.848 550.793,637.3 551.353,642.367 551.912,648.143 552.471,652.465 553.031,675.201 553.59,661.482 554.149,662.401 554.708,726.953 555.268,697.519 555.827,701.306 556.386,735.303 556.945,714.463 557.505,681.533 558.064,719.144 558.623,734.727 559.182,769.128 559.742,750.761 560.301,763.683 560.86,759.289 561.419,755.561 561.979,736.044 562.538,769.089 563.097,765.768 563.656,747.054 564.216,761.216 564.775,744.412 565.334,707.029 565.893,709.236 566.453,711.053 567.012,694.854 567.571,680.665 568.13,681.544 568.69,713.622 569.249,735.004 569.808,719.285 570.367,705.284 570.927,756.948 571.486,753.566 572.045,752.403 572.604,770.327 573.164,767.182 573.723,763.948 574.282,773.992 574.841,787.037 575.401,756.388 575.96,719.316 576.519,719.205 577.078,705.314 577.638,689.673 578.197,704.953 578.756,703.883 579.315,687.792 579.875,670.8 580.434,672.406 580.993,642.87 581.552,646.092 582.112,648.934 582.671,668.734 583.23,673.585 583.789,693.171 584.349,724.806 584.908,694.185 585.467,679.705 586.026,697.235 586.586,681.755 587.145,685.321 587.704,718.945 588.263,734.741 588.823,716.302 589.382,719.069 589.941,735.656 590.5,699.897 591.06,682.629 591.619,714.713 592.178,731.823 592.737,729.443 593.297,728.032 593.856,729.452 594.415,727.108 594.974,725.059 595.534,740.536 596.093,753.628 596.652,735.935 597.211,765.511 597.771,761.364 598.33,793.759 598.889,787.066 599.448,749.539 600.008,732.333 600.567,764.607 601.126,729.532 601.685,743.146 602.245,709.523 602.804,757.638 603.363,786.855 603.922,782.876 604.482,798.891 605.041,792.617 605.6,786.648 606.159,783.703 606.719,779.988 607.278,791.24 607.837,787.247 608.396,782.322 608.956,778.834 609.515,790.093 610.074,772.098 610.633,735.863 611.193,731.084 611.752,731.19 612.311,712.81 612.87,727.212 613.43,707.647 613.989,689.479 614.548,722.456 615.107,720.343 615.667,721.37 616.226,721.498 616.785,705.753 617.344,672.141 617.904,707.074 618.463,707.161 619.022,706.457 619.581,708.217 620.141,724.01 620.7,725.338 621.259,711.677 621.818,678.196 622.378,694.931 622.937,708.57 623.496,758.344 624.055,805.769 624.615,814.984 625.174,843.88 625.733,832.169 626.292,842.033 626.852,834.282 627.411,826.196 627.97,816.984 628.529,811.957 629.089,789.815 629.648,786.695 630.207,798.287 630.766,797.506 631.326,823.711 631.885,800.737 632.444,797.616 633.003,776.012 633.563,772.427 634.122,703.635 634.681,686.888 635.24,702.538 635.8,720.65 636.359,704.103 636.918,702.011 637.477,748.675 638.037,750.855 638.596,733.164 639.155,731.932 639.714,663.346 640.274,644.983 640.833,648.11 641.392,616.225 641.951,635.913 642.511,607.438 643.07,627.962 643.629,617.079 644.188,686.093 644.748,683.555 645.307,701.624 645.866,720.888 646.425,705.936 646.985,720.459 647.544,718.076 648.103,682.949 648.662,703.629 649.222,651.995 649.781,642.54 650.34,664.509 650.899,649.926 651.459,651.745 652.018,637.624 652.577,637.871 653.136,673.228 653.696,674.228 654.255,659.781 654.814,627.808 655.373,664.516 655.933,684.314 656.492,666.989 657.051,637.829 657.61,659.01 658.17,643.568 658.729,645.392 659.288,667.23 659.847,669.169 660.407,652.977 660.966,655.013 661.525,626.112 662.084,616.339 662.644,604.069 663.203,608.744 663.762,565.14 664.321,607.208 664.881,599.663 665.44,606.742 665.999,579.06 666.558,616.24 667.118,591.643 667.677,595.981 668.236,602.866 668.795,623.887 669.355,633.156 669.914,670.961 670.473,706.092 671.032,705.812 671.592,704.644 672.151,691.678 672.71,690.048 673.269,724.983 673.829,709.647 674.388,739.309 674.947,734.452 675.506,735.05 676.066,735.87 676.625,747.823 677.184,775.699 677.743,771.535 678.303,784.38 678.862,781.704 679.421,745.909 679.981,723.853 680.54,756.361 681.099,739.204 681.658,752.962 682.218,748.171 682.777,727.685 683.336,739.894 683.895,768.817 684.455,813.413 685.014,811.178 685.573,804.793 686.132,781.163 686.692,810.441 687.251,805.817 687.81,767.045 688.369,765.947 688.929,794.53 689.488,771.683 690.047,733.769 690.606,748.092 691.166,774.535 691.725,802.792 692.284,799.417 692.843,809.014 693.403,769.798 693.962,750.733 694.521,746.836 695.08,744.234 695.64,741.749 696.199,741.654 696.758,710.331 697.317,706.909 697.877,706.096 698.436,718.678 698.995,717.646 699.554,733.195 700.114,697.866 700.673,683.233 701.232,669.096 701.791,656.403 702.351,694.734 702.91,694.025 703.469,675.202 704.028,676.713 704.588,692.918 705.147,678.325 705.706,679.791 706.265,679.462 706.825,675.304 707.384,677.951 707.943,709.244 708.502,691.972 709.062,694.151 709.621,662.985 710.18,650.15 710.739,667.978 711.299,683.94 711.858,717.975 712.417,700.594 712.976,666.735 713.536,701.952 714.095,681.42 714.654,650.701 715.213,653.599 715.773,654.358 716.332,686.795 716.891,671.7 717.45,671.746 718.01,673.117 718.569,689.565 719.128,689.255 719.687,688.292 720.247,718.199 720.806,689.051 721.365,707.491 721.924,702.917 722.484,682.161 723.043,665.296 723.602,634.462 724.161,639.131 724.721,657.922 725.28,640.589 725.839,646.799 726.398,646.62 726.958,648.581 727.517,618.853 728.076,575.8 728.635,565.935 729.195,559.226 729.754,563.706 730.313,602.775 730.872,608.017 731.432,630.089 731.991,649.383 732.55,652.286 733.109,639.125 733.669,642.713 734.228,629.634 734.787,636.484 735.346,608.022 735.906,629.147 736.465,648.12 737.024,670.826 737.583,672.045 738.143,689.375 738.702,674.228 739.261,677.241 739.82,693.213 740.38,680.091 740.939,679.433 741.498,697.733 742.057,715.964 742.617,671.374 743.176,690.891 743.735,723.05 744.294,720.461 744.854,734.716 745.413,701.932 745.972,700.532 746.531,697.993 747.091,699.567 747.65,664.574 748.209,697.126 748.768,731.638 749.328,729.933 749.887,742.198 750.446,724.645 751.005,723.069 751.565,721.971 752.124,737.951 752.683,738.891 753.242,734.683 753.802,734.039 754.361,702.191 754.92,683.982 755.479,735.026 756.039,731.957 756.598,715.094 757.157,665.381 757.716,682.88 758.276,717.467 758.835,719.199 759.394,717.858 759.953,731.159 760.513,664.079 761.072,682.53 761.631,667.886 762.19,686.838 762.75,689.086 763.309,721.663 763.868,750.963 764.427,744.155 764.987,770.827 765.546,770.683 766.105,753.636 766.664,734.478 767.224,752.933 767.783,753.223 768.342,731.595 768.901,745.874 769.461,758.642 770.02,771.181 770.579,764.205 771.138,760.559 771.698,771.429 772.257,798.573 772.816,790.248 773.375,783.373 773.935,762.981 774.494,727.568 775.053,722.508 775.612,734.932 776.172,732.884 776.731,662.908 777.29,662.413 777.849,665.069 778.409,697.418 778.968,648.038 779.527,680.734 780.086,700.425 780.646,682.862 781.205,683.788 781.764,683.118 782.323,716.955 782.883,719.33 783.442,734.695 784.001,747.617 784.56,729.21 785.12,712.07 785.679,695.576 786.238,662.123 786.797,684.136 787.357,667.304 787.916,639.365 788.475,629.708 789.034,614.078 789.594,600.258 790.153,605.691 790.712,593.099 791.271,611.44 791.831,582.181 792.39,605.572 792.949,607.85 793.508,629.62 794.068,615.391 794.627,604.348 795.186,593.267 795.745,600.429 796.305,589.001 796.864,591.448 797.423,551.412 797.982,557.087 798.542,551.729 799.101,560.449 799.66,535.962 800.219,544.066 800.779,590.17 801.338,546.031 801.897,566.584 802.456,593.869 803.016,582.684 803.575,589.201 804.134,629.063 804.693,614.816 805.253,617.842 805.812,638.841 806.371,673.416 806.931,686.736 807.49,687.295 808.049,705.476 808.608,721.963 809.168,736.92 809.727,735.299 810.286,731.909 810.845,756.966 811.405,735.152 811.964,747.13 812.523,757.003 813.082,766.214 813.642,763.602 814.201,727.49 814.76,693.923 815.319,695.822 815.879,696.912 816.438,693.531 816.997,744.433 817.556,709.164 818.116,706.524 818.675,750.332 819.234,760.984 819.793,741.31 820.353,738.882 820.912,753.955 821.471,737.066 822.03,717.242 822.59,699.276 823.149,712.062 823.708,663.46 824.267,681.768 824.827,681.825 825.386,683.076 825.945,698.046 826.504,712.553 827.064,697.619 827.623,712.155 828.182,727.603 828.741,708.552 829.301,708.594 829.86,709.753 830.419,663.287 830.978,712.824 831.538,694.251 832.097,706.609 832.656,688.151 833.215,690.206 833.775,657.846 834.334,642.467 834.893,627.08 835.452,646.525 836.012,601.981 836.571,589.168 837.13,610.351 837.689,597.825 838.249,616.55 838.808,633.947 839.367,639.069 839.926,625.167 840.486,628.57 841.045,627.422 841.604,614.235 842.163,604.052 842.723,622.068 843.282,607.277 843.841,610.76 844.4,649.027 844.96,639.272 845.519,655.751 846.078,660.755 846.637,694.655 847.197,695.215 847.756,644.691 848.315,660.827 848.874,663.567 849.434,682.094 849.993,686.338 850.552,669.508 851.111,684.868 851.671,717.863 852.23,735.926 852.789,721.14 853.348,718.985 853.908,697.646 854.467,729.611 855.026,712.932 855.585,695.624 856.145,693.469 856.704,692.681 857.263,708.342 857.822,692.19 858.382,707.637 858.941,757.083 859.5,738.741 860.059,752.886 860.619,750.03 861.178,780.845 861.737,774.741 862.296,775.21 862.856,754.469 863.415,752.949 863.974,733.406 864.533,680.472 865.093,696.764 865.652,695.899 866.211,709.88 866.77,704.988 867.33,704.547 867.889,720.533 868.448,702.27 869.007,683.491 869.567,666.941 870.126,650.116 870.685,681.475 871.244,681.298 871.804,702.065 872.363,701.764 872.922,715.743 873.481,749.586 874.041,713.676 874.6,678.099 875.159,709.416 875.718,694.149 876.278,692.632 876.837,670.469 877.396,686.463 877.955,636.8 878.515,623.026 879.074,640.839 879.633,659.18 880.192,688.648 880.752,691.187 881.311,693.041 881.87,694.118 882.429,711.855 882.989,697.916 883.548,713.901 884.107,712.217 884.666,712.133 885.226,712.737 885.785,728.384 886.344,743.105 886.903,743.675 887.463,741.127 888.022,723.205 888.581,685.725 889.14,698.739 889.7,714.708 890.259,714.399 890.818,711.99 891.377,697.42 891.937,730.422 892.496,680.407 893.055,682.336 893.614,678.625 894.174,677.293 894.733,674.202 895.292,690.287 895.851,672.517 896.411,671.828 896.97,688.107 897.529,688.198 898.088,688.787 898.648,671.695 899.207,685.5 899.766,669.262 900.325,685.614 900.885,721.998 901.444,736.109 902.003,748.519 902.562,725.621 903.122,755.087 903.681,750.843 904.24,776.363 904.799,790.64 905.359,801.509 905.918,793.696 906.477,791.896 907.036,769.964 907.596,731.654 908.155,745.176 908.714,709.093 909.273,674.158 909.833,642.111 910.392,627.176 910.951,613.928 911.51,600.605 912.07,637.253 912.629,653.723 913.188,651.393 913.747,668.852 914.307,637.632 914.866,642.339 915.425,662.91 915.984,679.302 916.544,694.511 917.103,696.695 917.662,693.109 918.221,643.658 918.781,661.342 919.34,679.947 919.899,662.77 920.458,648.942 921.018,679.297 921.577,696.992 922.136,661.692 922.695,662.199 923.255,664.637 923.814,648.698 924.373,635.534 924.932,637.403 925.492,641.857 926.051,642.45 926.61,659.79 927.169,675.882 927.729,662.517 928.288,663.547 928.847,650.979 929.406,636.418 929.966,604.567 930.525,609.428 931.084,613.406 931.644,647.719 932.203,649.18 932.762,670.179 933.321,718.917 933.881,717.48 934.44,732.039 934.999,780.02 935.558,774.413 936.118,774.358 936.677,783.784 937.236,760.998 937.795,771.937 938.355,750.216 938.914,748.457 939.473,744.004 940.032,738.54 940.592,737.171 941.151,733.327 941.71,730.557 942.269,714.791 942.829,697.427 943.388,684.055 943.947,667.866 944.506,685.32 945.066,733.075 945.625,727.638 946.184,743.137 946.743,739.656 947.303,737.659 947.862,735.208 948.421,734.62 948.98,712.021 949.54,713.355 950.099,698.118 950.658,679.664 951.217,698.089 951.777,698.876 952.336,731.106 952.895,759.996 953.454,741.868 954.014,722.457 954.573,719.36 955.132,687.999 955.691,685.076 956.251,700.675 956.81,732.272 957.369,711.996 957.928,726.749 958.488,693.049 959.047,675.044 959.606,739.896 960.165,758.247 960.725,740.607 961.284,737.455 961.843,736.276 962.402,732.775 962.962,679.773 963.521,649.938 964.08,648.889 964.639,667.175 965.199,652.905 965.758,670.008 966.317,671.61 966.876,657.491 967.436,659.079 967.995,659.411 968.554,659.292 969.113,627.408 969.673,645.683 970.232,645.518 970.791,646.367 971.35,650.325 971.91,633.213 972.469,654.3 973.028,672.02 973.587,643.384 974.147,662.705 974.706,664.108 975.265,664.509 975.824,663.828 976.384,668.168 976.943,688.354 977.502,687.284 978.061,702.416 978.621,701.467 979.18,693.787 979.739,693.474 980.298,711.188 980.858,742.404 981.417,742.507 981.976,741.461 982.535,738.127 983.095,735.478 983.654,734.848 984.213,718.578 984.772,698.245 985.332,684.922 985.891,654.263 986.45,624.227 987.009,629.045 987.569,628.593 988.128,662.217 988.687,649.378 989.246,654.264 989.806,576.741 990.365,547.063 990.924,521.048 991.483,515.247 992.043,507.353 992.602,546.553 993.161,572.519 993.72,625.752 994.28,614.783 994.839,618.023 995.398,621.983 995.957,658.651 996.517,662.002 997.076,661.309 997.635,663.894 998.194,651.006 998.754,657.43 999.313,643.189 999.872,645.521 1000.43,633.591 1000.99,634.937 1001.55,684.271 1002.11,686.345 1002.67,704.876 1003.23,721.845 1003.79,719.511 1004.35,749.735 1004.91,746.563 1005.46,741.62 1006.02,770.019 1006.58,766.748 1007.14,760.869 1007.7,757.135 1008.26,703.577 1008.82,733.416 1009.38,778.848 1009.94,771.739 1010.5,781.414 1011.06,777.878 1011.62,771.63 1012.18,765.861 1012.73,729.715 1013.29,692.057 1013.85,644.49 1014.41,644.082 1014.97,614.019 1015.53,600.574 1016.09,607.127 1016.65,596.718 1017.21,619.549 1017.77,637.302 1018.33,654.098 1018.89,674.221 1019.45,656.991 1020.01,645.988 1020.56,645.658 1021.12,649.98 1021.68,636.993 1022.24,672.85 1022.8,705.015 1023.36,740.456 1023.92,719.308 1024.48,653.571 1025.04,673.174 1025.6,655.635 1026.16,642.572 1026.72,692.564 1027.28,693.059 1027.83,708.574 1028.39,722.875 1028.95,702.645 1029.51,718.685 1030.07,721.04 1030.63,721.116 1031.19,751.188 1031.75,765.162 1032.31,743.524 1032.87,738.813 1033.43,716.906 1033.99,733.588 1034.55,730.917 1035.1,775.601 1035.66,736 1036.22,735.076 1036.78,702.389 1037.34,667.968 1037.9,686.689 1038.46,685.299 1039.02,731.59 1039.58,692.621 1040.14,693.3 1040.7,739.477 1041.26,719.09 1041.82,715.42 1042.38,716.177 1042.93,728.875 1043.49,678.11 1044.05,711.156 1044.61,691.283 1045.17,672.311 1045.73,674.832 1046.29,689.685 1046.85,723.007 1047.41,700.164 1047.97,697.699 1048.53,694.939 1049.09,681.54 1049.65,700.692 1050.2,716.231 1050.76,700.838 1051.32,685.837 1051.88,716.201 1052.44,700.142 1053,669.733 1053.56,686.851 1054.12,669.74 1054.68,685.903 1055.24,700.859 1055.8,665.398 1056.36,698.619 1056.92,715.49 1057.48,683.385 1058.03,700.7 1058.59,699.24 1059.15,776.514 1059.71,768.108 1060.27,731.54 1060.83,683.088 1061.39,680.805 1061.95,696.606 1062.51,696.684 1063.07,698.232 1063.63,683.589 1064.19,697.533 1064.75,713.042 1065.3,726.86 1065.86,755.758 1066.42,753.312 1066.98,717.808 1067.54,702.061 1068.1,733.866 1068.66,729.442 1069.22,694.787 1069.78,694.974 1070.34,664.43 1070.9,698.031 1071.46,680.381 1072.02,665.417 1072.57,652.958 1073.13,653.909 1073.69,639.047 1074.25,641.931 1074.81,659.287 1075.37,625.462 1075.93,660.689 1076.49,661.538 1077.05,695.356 1077.61,724.737 1078.17,672.174 1078.73,641.338 1079.29,640.915 1079.85,611.547 1080.4,651.76 1080.96,670.183 1081.52,671.732 1082.08,657.932 1082.64,627.725 1083.2,626.583 1083.76,612.43 1084.32,568.65 1084.88,557.471 1085.44,596.304 1086,583.545 1086.56,572.789 1087.12,578.198 1087.67,569.722 1088.23,593.192 1088.79,614.521 1089.35,633.716 1089.91,620.501 1090.47,690.983 1091.03,693.037 1091.59,707.318 1092.15,675.433 1092.71,689.909 1093.27,669.97 1093.83,704.614 1094.39,686.384 1094.94,702.369 1095.5,717.485 1096.06,682.691 1096.62,665.121 1097.18,681.359 1097.74,669.616 1098.3,670.981 1098.86,670.423 1099.42,669.677 1099.98,639.618 1100.54,628.863 1101.1,634.858 1101.66,603.364 1102.22,624.047 1102.77,627.92 1103.33,614.873 1103.89,618.028 1104.45,637.981 1105.01,640.131 1105.57,658.262 1106.13,690.97 1106.69,738.623 1107.25,719.358 1107.81,731.056 1108.37,748.558 1108.93,731.741 1109.49,727.743 1110.04,775.657 1110.6,772.682 1111.16,798.168 1111.72,828.247 1112.28,789.545 1112.84,832.665 1113.4,840.449 1113.96,848.897 1114.52,809.698 1115.08,770.776 1115.64,750.354 1116.2,826.83 1116.76,815.884 1117.31,808.377 1117.87,752.256 1118.43,745.886 1118.99,740.172 1119.55,737.95 1120.11,705.61 1120.67,707.081 1121.23,675.318 1121.79,678.082 1122.35,695.886 1122.91,681.443 1123.47,708.87 1124.03,722.338 1124.59,705.156 1125.14,717.027 1125.7,698.107 1126.26,680.965 1126.82,680.167 1127.38,675.827 1127.94,673.689 1128.5,671.304 1129.06,671.733 1129.62,673.085 1130.18,642.066 1130.74,629.457 1131.3,599.666 1131.86,586.234 1132.41,540.051 1132.97,533.025 1133.53,539.835 1134.09,582.65 1134.65,589.16 1135.21,613.262 1135.77,603.314 1136.33,622.947 1136.89,625.631 1137.45,628.748 1138.01,627.625 1138.57,628.527 1139.13,614.971 1139.68,618.817 1140.24,624.864 1140.8,627.845 1141.36,625.138 1141.92,612.624 1142.48,631.901 1143.04,634.639 1143.6,635.817 1144.16,620.273 1144.72,638.77 1145.28,622.752 1145.84,638.979 1146.4,626.571 1146.96,614.32 1147.51,616.954 1148.07,630.939 1148.63,621.108 1149.19,640.727 1149.75,612.199 1150.31,611.988 1150.87,613.63 1151.43,601.171 1151.99,621.516 1152.55,626.502 1153.11,628.166 1153.67,633.94 1154.23,637.646 1154.78,623.968 1155.34,628.254 1155.9,630.333 1156.46,620.184 1157.02,607.791 1157.58,609.384 1158.14,581.797 1158.7,589.618 1159.26,622.446 1159.82,642.955 1160.38,661.453 1160.94,660.934 1161.5,663.338 1162.05,680.322 1162.61,663.839 1163.17,663.131 1163.73,662.138 1164.29,677.273 1164.85,695.347 1165.41,693.214 1165.97,721.021 1166.53,722.68 1167.09,672.217 1167.65,675.207 1168.21,709.193 1168.77,720.843 1169.33,705.864 1169.88,687.089 1170.44,671.975 1171,672.966 1171.56,657.82 1172.12,675.922 1172.68,674.994 1173.24,690.174 1173.8,705.384 1174.36,686.834 1174.92,700.503 1175.48,696.627 1176.04,713.017 1176.6,714.401 1177.15,696.223 1177.71,693.65 1178.27,677.194 1178.83,677.715 1179.39,664.055 1179.95,646.677 1180.51,649.185 1181.07,681.561 1181.63,696.352 1182.19,676.301 1182.75,676.623 1183.31,644.654 1183.87,580.652 1184.43,583.309 1184.98,606.671 1185.54,645.703 1186.1,679.101 1186.66,700.442 1187.22,716.476 1187.78,732.017 1188.34,715.435 1188.9,759.155 1189.46,753.087 1190.02,782.301 1190.58,793.963 1191.14,806.049 1191.7,753.957 1192.25,736.714 1192.81,817.457 1193.37,843.977 1193.93,832.735 1194.49,777.656 1195.05,758.184 1195.61,757.08 1196.17,786.451 1196.73,747.271 1197.29,746.096 1197.85,759.145 1198.41,736.205 1198.97,731.601 1199.52,697.531 1200.08,777.881 1200.64,740.906 1201.2,757.395 1201.76,767.94 1202.32,798.705 1202.88,746.467 1203.44,726.978 1204,730.885 1204.56,745.481 1205.12,757.538 1205.68,737.56 1206.24,714.946 1206.8,715.158 1207.35,716.401 1207.91,715.504 1208.47,727.41 1209.03,707.627 1209.59,673.893 1210.15,658.693 1210.71,643.683 1211.27,663.103 1211.83,613.904 1212.39,615.884 1212.95,619.636 1213.51,592.945 1214.07,582.609 1214.62,603.578 1215.18,590.42 1215.74,597.465 1216.3,633.103 1216.86,600.887 1217.42,607.003 1217.98,613.2 1218.54,617.037 1219.1,653.931 1219.66,656.986 1220.22,658.349 1220.78,659.125 1221.34,696.493 1221.89,692.393 1222.45,688.841 1223.01,654.412 1223.57,655.401 1224.13,656.673 1224.69,688.615 1225.25,688.231 1225.81,656.279 1226.37,660.033 1226.93,659.296 1227.49,624.996 1228.05,597.327 1228.61,587.773 1229.17,607.269 1229.72,627.806 1230.28,617.996 1230.84,619.38 1231.4,589.631 1231.96,596.611 1232.52,652.243 1233.08,655.517 1233.64,638.731 1234.2,655.649 1234.76,673.699 1235.32,675.037 1235.88,644.81 1236.44,634.143 1236.99,655.112 1237.55,718.417 1238.11,747.967 1238.67,712.193 1239.23,678.745 1239.79,680.439 1240.35,665.272 1240.91,635.909 1241.47,635.66 1242.03,620.291 1242.59,624.759 1243.15,612.288 1243.71,619.606 1244.26,619.194 1244.82,633.983 1245.38,650.383 1245.94,667.646 1246.5,652.557 1247.06,667.457 1247.62,671.751 1248.18,687.971 1248.74,687.329 1249.3,704.789 1249.86,736.598 1250.42,732.48 1250.98,746.197 1251.54,824.133 1252.09,829.719 1252.65,802.449 1253.21,811.166 1253.77,818.022 1254.33,811.884 1254.89,788.4 1255.45,800.022 1256.01,793.833 1256.57,805.672 1257.13,850.872 1257.69,859.331 1258.25,830.666 1258.81,823.049 1259.36,818.558 1259.92,811.15 1260.48,754.496 1261.04,735.429 1261.6,760.31 1262.16,736.746 1262.72,718.524 1263.28,698.979 1263.84,716.88 1264.4,709.874 1264.96,706.761 1265.52,687.256 1266.08,669.856 1266.63,686.409 1267.19,684.27 1267.75,683.385 1268.31,664.582 1268.87,647.172 1269.43,615.712 1269.99,617.502 1270.55,602.95 1271.11,608.11 1271.67,614.363 1272.23,648.006 1272.79,648.1 1273.35,621.83 1273.91,626.03 1274.46,660.084 1275.02,678.599 1275.58,643.07 1276.14,611.658 1276.7,631.731 1277.26,650.33 1277.82,669.128 1278.38,668.307 1278.94,684.338 1279.5,664.957 1280.06,729.917 1280.62,709.047 1281.18,676.811 1281.73,675.573 1282.29,691.354 1282.85,705.516 1283.41,705.441 1283.97,670.346 1284.53,656.78 1285.09,703.835 1285.65,670.578 1286.21,654.466 1286.77,653.179 1287.33,637.445 1287.89,640.809 1288.45,660.203 1289,643.584 1289.56,647.226 1290.12,645.927 1290.68,668.301 1291.24,702.455 1291.8,670.128 1292.36,672.787 1292.92,688.8 1293.48,703.698 1294.04,673.432 1294.6,642.577 1295.16,612.695 1295.72,600.453 1296.28,590.683 1296.83,580.217 1297.39,619.841 1297.95,625.711 1298.51,597.688 1299.07,584.637 1299.63,591.815 1300.19,613.251 1300.75,616.707 1301.31,657.145 1301.87,672.584 1302.43,690.807 1302.99,688.455 1303.55,686.608 1304.1,687.518 1304.66,689.804 1305.22,686.39 1305.78,653.199 1306.34,658.243 1306.9,661.639 1307.46,646.648 1308.02,648.276 1308.58,634.392 1309.14,588.206 1309.7,574.987 1310.26,626.975 1310.82,618.482 1311.38,590.964 1311.93,598.81 1312.49,571.286 1313.05,596.234 1313.61,606.064 1314.17,612.179 1314.73,594.212 1315.29,597.087 1315.85,649.627 1316.41,685.673 1316.97,704.126 1317.53,701.586 1318.09,687.796 1318.65,687.835 1319.2,673.43 1319.76,691.499 1320.32,692.167 1320.88,721.067 1321.44,737.139 1322,716.344 1322.56,732.919 1323.12,746.084 1323.68,696.284 1324.24,695.425 1324.8,710.514 1325.36,723.981 1325.92,739.932 1326.47,721.879 1327.03,719.407 1327.59,701.427 1328.15,685.995 1328.71,684.83 1329.27,698.178 1329.83,714.81 1330.39,762.51 1330.95,761.574 1331.51,745.312 1332.07,759.472 1332.63,769.116 1333.19,732.684 1333.75,714.711 1334.3,712.561 1334.86,713.061 1335.42,710.432 1335.98,709.892 1336.54,710.61 1337.1,689.673 1337.66,690.041 1338.22,705.758 1338.78,699.162 1339.34,715.884 1339.9,729.25 1340.46,725.657 1341.02,702.091 1341.57,704.988 1342.13,705.538 1342.69,671.91 1343.25,670.806 1343.81,652.269 1344.37,670.12 1344.93,717.184 1345.49,730.576 1346.05,711.421 1346.61,757.436 1347.17,752.706 1347.73,735.452 1348.29,743.43 1348.84,739.874 1349.4,719.289 1349.96,729.922 1350.52,696.77 1351.08,677.659 1351.64,680.879 1352.2,683.715 1352.76,667.515 1353.32,698.954 1353.88,697.706 1354.44,680.627 1355,651.416 1355.56,654.279 1356.12,690.408 1356.67,693.339 1357.23,692.763 1357.79,688.939 1358.35,672.185 1358.91,670.435 1359.47,654.988 1360.03,689.188 1360.59,687.09 1361.15,736.112 1361.71,736.078 1362.27,764.77 1362.83,761.042 1363.39,755.552 1363.94,734.282 1364.5,766.96 1365.06,746.137 1365.62,728.027 1366.18,706.835 1366.74,724.55 1367.3,706.657 1367.86,691.598 1368.42,725.831 1368.98,690.404 1369.54,708.169 1370.1,707.066 1370.66,723.261 1371.21,702.142 1371.77,717.082 1372.33,726.59 1372.89,704.957 1373.45,687.809 1374.01,668.786 1374.57,670.928 1375.13,670.864 1375.69,654.65 1376.25,702.938 1376.81,672.465 1377.37,673.804 1377.93,656.039 1378.49,637.823 1379.04,656.435 1379.6,657.592 1380.16,646.468 1380.72,695.726 1381.28,710.685 1381.84,746.648 1382.4,773.833 1382.96,751.964 1383.52,696.88 1384.08,648.91 1384.64,716.84 1385.2,713.67 1385.76,711.233 1386.31,741.072 1386.87,738.317 1387.43,747.859 1387.99,732.77 1388.55,697.842 1389.11,698.949 1389.67,701.525 1390.23,698.658 1390.79,681.64 1391.35,680.441 1391.91,680.846 1392.47,696.359 1393.03,678.286 1393.58,679.061 1394.14,697.715 1394.7,711.834 1395.26,742.789 1395.82,757.544 1396.38,769.883 1396.94,780.855 1397.5,775.059 1398.06,755.854 1398.62,718.431 1399.18,713.302 1399.74,731.144 1400.3,777.707 1400.86,761.051 1401.41,787.569 1401.97,782.244 1402.53,775.643 1403.09,769.427 1403.65,795.498 1404.21,786.854 1404.77,768.52 1405.33,699.129 1405.89,684.996 1406.45,702.548 1407.01,671.775 1407.57,672.01 1408.13,673.786 1408.68,624.908 1409.24,612.49 1409.8,581.146 1410.36,620.47 1410.92,640.441 1411.48,659.858 1412.04,626.939 1412.6,629.183 1413.16,636.297 1413.72,605.163 1414.28,577.304 1414.84,620.165 1415.4,612.556 1415.95,601.751 1416.51,574.456 1417.07,600.926 1417.63,587.899 1418.19,577.472 1418.75,584.524 1419.31,607.041 1419.87,613.256 1420.43,636.698 1420.99,641.54 1421.55,628.891 1422.11,635.042 1422.67,654.226 1423.23,672.68 1423.78,703.109 1424.34,704.706 1424.9,719.495 1425.46,751.339 1426.02,749.256 1426.58,745.922 1427.14,761.543 1427.7,775.302 1428.26,771.446 1428.82,765.735 1429.38,792.387 1429.94,768.011 1430.5,747.992 1431.05,792.226 1431.61,775.053 1432.17,734.825 1432.73,733.123 1433.29,680.46 1433.85,697.954 1434.41,677.874 1434.97,709.464 1435.53,702.834 1436.09,685.12 1436.65,717.764 1437.21,735.605 1437.77,717.762 1438.33,718.78 1438.88,697.967 1439.44,684.003 1440,632.994 1440.56,619.919 1441.12,625.266 1441.68,598.623 1442.24,602.22 1442.8,605.37 1443.36,624.458 1443.92,630.229 1444.48,665.988 1445.04,666.537 1445.6,701.782 1446.15,715.999 1446.71,699.768 1447.27,648.737 1447.83,634.847 1448.39,652.324 1448.95,670.408 1449.51,657.917 1450.07,659.399 1450.63,646.424 1451.19,647.732 1451.75,631.382 1452.31,602.82 1452.87,623.378 1453.42,631.472 1453.98,681.695 1454.54,696.198 1455.1,679.744 1455.66,649.95 1456.22,649.61 1456.78,635.62 1457.34,624.537 1457.9,629.472 1458.46,602.07 1459.02,606.322 1459.58,594.298 1460.14,616.257 1460.7,621.224 1461.25,625.905 1461.81,613.093 1462.37,597.459 1462.93,636.596 1463.49,669.263 1464.05,619.256 1464.61,624.36 1465.17,629.267 1465.73,632.271 1466.29,650.091 1466.85,636.056 1467.41,637.327 1467.97,636.952 1468.52,657.654 1469.08,676.6 1469.64,658.171 1470.2,646.004 1470.76,665.265 1471.32,669.479 1471.88,688.992 1472.44,706.641 1473,723.428 1473.56,723.672 1474.12,723.508 1474.68,723.386 1475.24,716.747 1475.79,711.595 1476.35,724.49 1476.91,723.238 1477.47,721.25 1478.03,684.438 1478.59,699.295 1479.15,680.364 1479.71,662.764 1480.27,664.759 1480.83,685.603 1481.39,699.869 1481.95,699.941 1482.51,717.359 1483.07,730.773 1483.62,710.405 1484.18,705.061 1484.74,702.099 1485.3,717.152 1485.86,696.626 1486.42,692.695 1486.98,687.792 1487.54,719.97 1488.1,716.596 1488.66,728.497 1489.22,725.367 1489.78,708.469 1490.34,725.594 1490.89,739.988 1491.45,764.666 1492.01,761.981 1492.57,761.536 1493.13,744.532 1493.69,777.347 1494.25,808.816 1494.81,784.497 1495.37,797.474 1495.93,792.72 1496.49,787.445 1497.05,809.885 1497.61,787.861 1498.16,785.445 1498.72,795.944 1499.28,773.144 1499.84,769.363 1500.4,769.117 1500.96,730.612 1501.52,725.807 1502.08,724.248 1502.64,724.579 1503.2,737.679 1503.76,720.473 1504.32,701.091 1504.88,713.847 1505.44,732.928 1505.99,746.624 1506.55,727.759 1507.11,724.521 1507.67,737.246 1508.23,766.055 1508.79,777.014 1509.35,760.268 1509.91,725.789 1510.47,708.982 1511.03,711.165 1511.59,708.121 1512.15,720.079 1512.71,684.224 1513.26,668.792 1513.82,687.869 1514.38,669.94 1514.94,652.161 1515.5,669.466 1516.06,653.427 1516.62,657.312 1517.18,687.616 1517.74,702.846 1518.3,701.919 1518.86,699.982 1519.42,681.905 1519.98,716.067 1520.53,717.075 1521.09,733.064 1521.65,732.212 1522.21,713.846 1522.77,712.657 1523.33,713.715 1523.89,710.776 1524.45,727.51 1525.01,745.615 1525.57,741.697 1526.13,723.342 1526.69,739.371 1527.25,736.512 1527.81,699.549 1528.36,682.326 1528.92,668.331 1529.48,683.296 1530.04,696.769 1530.6,647.774 1531.16,665.07 1531.72,649.366 1532.28,651.313 1532.84,633.484 1533.4,666.175 1533.96,620.122 1534.52,637.855 1535.08,554.703 1535.63,543.968 1536.19,550.231 1536.75,573.66 1537.31,611.343 1537.87,646.9 1538.43,648.686 1538.99,672.75 1539.55,672.461 1540.11,685.007 1540.67,687.231 1541.23,688.089 1541.79,666.191 1542.35,682.857 1542.9,649.675 1543.46,620.994 1544.02,607.938 1544.58,626.799 1545.14,627.095 1545.7,595.858 1546.26,600.807 1546.82,588.262 1547.38,596.031 1547.94,601.807 1548.5,603.528 1549.06,593.413 1549.62,566.472 1550.18,590.065 1550.73,577.941 1551.29,615.167 1551.85,618.453 1552.41,605.244 1552.97,625.682 1553.53,616.256 1554.09,602.903 1554.65,625.474 1555.21,598.069 1555.77,605.467 1556.33,629.378 1556.89,618.118 1557.45,671.115 1558,671.325 1558.56,688.208 1559.12,688.612 1559.68,690.505 1560.24,689.793 1560.8,705.1 1561.36,704.748 1561.92,691.107 1562.48,689.876 1563.04,706.673 1563.6,722.725 1564.16,721.251 1564.72,689.555 1565.28,707.167 1565.83,739.197 1566.39,752.152 1566.95,732.638 1567.51,732.809 1568.07,712.613 1568.63,726.813 1569.19,707.34 1569.75,686.302 1570.31,700.018 1570.87,714.662 1571.43,713.433 1571.99,693.315 1572.55,692.736 1573.1,693.562 1573.66,675.459 1574.22,672.535 1574.78,690.322 1575.34,708.199 1575.9,706.603 1576.46,684.996 1577.02,698.169 1577.58,725.113 1578.14,692.599 1578.7,672.759 1579.26,672.791 1579.82,688.145 1580.37,687.654 1580.93,687.975 1581.49,718.761 1582.05,717.167 1582.61,698.065 1583.17,683.5 1583.73,663.487 1584.29,681.987 1584.85,665.504 1585.41,697.538 1585.97,714.805 1586.53,716.741 1587.09,734.526 1587.65,732.845 1588.2,713.413 1588.76,711.872 1589.32,676.511 1589.88,694.007 1590.44,712.454 1591,745.473 1591.56,711.135 1592.12,690.655 1592.68,705.485 1593.24,702.456 1593.8,683.343 1594.36,617.027 1594.92,608.194 1595.47,629.606 1596.03,647.098 1596.59,701.973 1597.15,702.338 1597.71,702.186 1598.27,717.305 1598.83,733.266 1599.39,715.953 1599.95,698.714 1600.51,679.328 1601.07,679.041 1601.63,680.216 1602.19,663.856 1602.74,644.978 1603.3,628.658 1603.86,632.541 1604.42,637.412 1604.98,624.937 1605.54,642.971 1606.1,628.274 1606.66,632.066 1607.22,650.144 1607.78,669.322 1608.34,653.287 1608.9,654.553 1609.46,673.179 1610.02,674.005 1610.57,678.02 1611.13,694.925 1611.69,728.243 1612.25,724.615 1612.81,706.28 1613.37,705.76 1613.93,708.963 1614.49,705.794 1615.05,704.162 1615.61,705.168 1616.17,657.432 1616.73,656.886 1617.29,640.075 1617.84,670.568 1618.4,719.518 1618.96,701.655 1619.52,685.576 1620.08,679.633 1620.64,682.018 1621.2,648.807 1621.76,669.197 1622.32,671.747 1622.88,673.729 1623.44,660.169 1624,661.203 1624.56,667.041 1625.11,667.201 1625.67,671.066 1626.23,689.143 1626.79,671.135 1627.35,654.14 1627.91,639.01 1628.47,672.761 1629.03,687.265 1629.59,703.714 1630.15,716.858 1630.71,729.677 1631.27,728.77 1631.83,726.742 1632.39,726.176 1632.94,707.254 1633.5,704.423 1634.06,689.171 1634.62,718.996 1635.18,754.471 1635.74,749.608 1636.3,730.155 1636.86,746.181 1637.42,761.352 1637.98,758.162 1638.54,722.565 1639.1,703.711 1639.66,684.345 1640.21,684.343 1640.77,685.728 1641.33,668.625 1641.89,650.699 1642.45,608.597 1643.01,598.053 1643.57,615.683 1644.13,623.753 1644.69,630.182 1645.25,632.036 1645.81,631.68 1646.37,648.103 1646.93,677.809 1647.48,660.327 1648.04,645.179 1648.6,648 1649.16,630.68 1649.72,615.342 1650.28,618.775 1650.84,603.04 1651.4,591.864 1651.96,613.97 1652.52,635.568 1653.08,636.348 1653.64,641.394 1654.2,692.107 1654.76,673.269 1655.31,657.389 1655.87,643.621 1656.43,631.41 1656.99,650.045 1657.55,650.527 1658.11,635.569 1658.67,652.312 1659.23,669.27 1659.79,685.639 1660.35,671.403 1660.91,685.694 1661.47,699.69 1662.03,714.189 1662.58,774.627 1663.14,784.092 1663.7,774.867 1664.26,789.781 1664.82,769.246 1665.38,751.008 1665.94,748.754 1666.5,761.449 1667.06,738.499 1667.62,719.246 1668.18,730.892 1668.74,697.067 1669.3,699.089 1669.85,729.964 1670.41,758.85 1670.97,754.463 1671.53,747.356 1672.09,777.373 1672.65,786.998 1673.21,750.644 1673.77,731.411 1674.33,717.11 1674.89,715.726 1675.45,715.155 1676.01,697.673 1676.57,695.351 1677.13,727.094 1677.68,710.632 1678.24,723.648 1678.8,689.616 1679.36,682.538 1679.92,714.071 1680.48,728.137 1681.04,721.956 1681.6,700.831 1682.16,685.671 1682.72,717.685 1683.28,717.383 1683.84,682.262 1684.4,712.896 1684.95,711.846 1685.51,693.27 1686.07,724.125 1686.63,721.542 1687.19,704.468 1687.75,683.923 1688.31,664.511 1688.87,701.811 1689.43,718.825 1689.99,729.917 1690.55,725.885 1691.11,691.895 1691.67,708.286 1692.23,709.723 1692.78,692.773 1693.34,660.878 1693.9,662.073 1694.46,644.147 1695.02,595.354 1695.58,629.923 1696.14,637.833 1696.7,658.574 1697.26,660.502 1697.82,642.132 1698.38,628.795 1698.94,614.112 1699.5,601.397 1700.05,609.224 1700.61,629.617 1701.17,618.74 1701.73,609.087 1702.29,612.711 1702.85,601.337 1703.41,603.237 1703.97,622.466 1704.53,610.074 1705.09,579.038 1705.65,617.709 1706.21,624.423 1706.77,646.129 1707.32,649.865 1707.88,651.357 1708.44,669.889 1709,680.881 1709.56,663.277 1710.12,679.164 1710.68,700.151 1711.24,701.065 1711.8,715.729 1712.36,730.287 1712.92,726.524 1713.48,721.368 1714.04,730.283 1714.6,743.238 1715.15,721.752 1715.71,703.141 1716.27,716.671 1716.83,685.551 1717.39,701.753 1717.95,704.093 1718.51,720.674 1719.07,717.88 1719.63,732.162 1720.19,732.403 1720.75,699.521 1721.31,718.373 1721.87,714.967 1722.42,694.682 1722.98,695.508 1723.54,678.838 1724.1,645.918 1724.66,646.337 1725.22,663.682 1725.78,669.112 1726.34,684.765 1726.9,684.642 1727.46,684.03 1728.02,684.756 1728.58,669.07 1729.14,669.876 1729.69,620.31 1730.25,624.789 1730.81,644.086 1731.37,679.543 1731.93,678.458 1732.49,696.504 1733.05,699.102 1733.61,682.601 1734.17,685.043 1734.73,666.758 1735.29,721.526 1735.85,689.082 1736.41,672.259 1736.97,657.894 1737.52,656.88 1738.08,675.666 1738.64,709.925 1739.2,725.447 1739.76,757.539 1740.32,756.996 1740.88,751.874 1741.44,751.19 1742,748.405 1742.56,709.672 1743.12,706.977 1743.68,706.365 1744.24,691.76 1744.79,707.205 1745.35,709.466 1745.91,707.823 1746.47,689.043 1747.03,689.42 1747.59,640.806 1748.15,624.379 1748.71,659.379 1749.27,632.904 1749.83,634.564 1750.39,684.853 1750.95,716.106 1751.51,730.324 1752.06,730.079 1752.62,693.671 1753.18,694.01 1753.74,730.486 1754.3,729.205 1754.86,744.119 1755.42,744.279 1755.98,776.061 1756.54,757.897 1757.1,770.062 1757.66,746.83 1758.22,757.508 1758.78,770.253 1759.34,779.972 1759.89,788.149 1760.45,797.645 1761.01,790.491 1761.57,801.611 1762.13,777.61 1762.69,786.45 1763.25,765.989 1763.81,763.852 1764.37,776.161 1764.93,773.337 1765.49,720.851 1766.05,704.415 1766.61,688.134 1767.16,707.301 1767.72,706.963 1768.28,704.052 1768.84,684.976 1769.4,652.721 1769.96,657.544 1770.52,660.33 1771.08,676.192 1771.64,688.826 1772.2,669.598 1772.76,685.837 1773.32,638.22 1773.88,640.334 1774.43,641.955 1774.99,646.07 1775.55,676.626 1776.11,677.397 1776.67,676.568 1777.23,724.526 1777.79,722.154 1778.35,657.581 1778.91,659.631 1779.47,679.024 1780.03,680.866 1780.59,695.003 1781.15,710.015 1781.71,707.438 1782.26,670.727 1782.82,700.795 1783.38,701.676 1783.94,717.711 1784.5,729.744 1785.06,741.283 1785.62,706.427 1786.18,719.496 1786.74,729.027 1787.3,697.013 1787.86,704.341 1788.42,674.173 1788.98,690.187 1789.53,686.411 1790.09,674.05 1790.65,654.27 1791.21,625.646 1791.77,660.832 1792.33,661.207 1792.89,661.11 1793.45,677.073 1794.01,608.721 1794.57,595.283 1795.13,582.93 1795.69,607.203 1796.25,630.694 1796.8,617.225 1797.36,623.658 1797.92,625.6 1798.48,611.055 1799.04,616.243 1799.6,606.924 1800.16,643.038 1800.72,681.463 1801.28,667.301 1801.84,668.219 1802.4,681.396 1802.96,681.995 1803.52,701.142 1804.08,683.405 1804.63,670.711 1805.19,653.285 1805.75,656.033 1806.31,659.02 1806.87,692.674 1807.43,679.522 1807.99,682.641 1808.55,681.812 1809.11,681.243 1809.67,695.184 1810.23,677.713 1810.79,678.576 1811.35,678.936 1811.9,696.123 1812.46,711.185 1813.02,771.106 1813.58,749.233 1814.14,778.941 1814.7,723.483 1815.26,755.711 1815.82,700.974 1816.38,719.498 1816.94,716.628 1817.5,710.523 1818.06,712.532 1818.62,728.897 1819.18,728.614 1819.73,713.769 1820.29,664.83 1820.85,634.484 1821.41,622.145 1821.97,628.473 1822.53,660.633 1823.09,646.94 1823.65,632.534 1824.21,605.242 1824.77,594.511 1825.33,615.949 1825.89,602.309 1826.45,587.927 1827,576.247 1827.56,581.456 1828.12,616.114 1828.68,605.325 1829.24,623.174 1829.8,626.929 1830.36,617.237 1830.92,624.258 1831.48,630.68 1832.04,634.221 1832.6,651.769 1833.16,638.357 1833.72,641.101 1834.27,612.401 1834.83,616.414 1835.39,604.868 1835.95,591.31 1836.51,595.493 1837.07,617.014 1837.63,619.432 1838.19,618.898 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 688.654 L720.806 688.654 L721.365 688.654 L721.924 688.654 L722.484 688.654 L723.043 688.654 L723.602 688.654 L724.161 688.654 L724.721 688.654 L725.28 688.654 L725.839 688.654 L726.398 688.654 L726.958 688.654 L727.517 688.654 L728.076 688.654 L728.635 688.654 L729.195 688.654 L729.754 688.654 L730.313 688.654 L730.872 688.654 L731.432 688.654 L731.991 688.654 L732.55 688.654 L733.109 688.654 L733.669 688.654 L734.228 688.654 L734.787 688.654 L735.346 688.654 L735.906 688.654 L736.465 688.654 L737.024 688.654 L737.583 688.654 L738.143 688.654 L738.702 688.654 L739.261 688.654 L739.82 688.654 L740.38 688.654 L740.939 688.654 L741.498 688.654 L742.057 688.654 L742.617 688.654 L743.176 688.654 L743.735 688.654 L744.294 688.654 L744.854 688.654 L745.413 688.654 L745.972 688.654 L746.531 688.654 L747.091 688.654 L747.65 688.654 L748.209 688.654 L748.768 688.654 L749.328 688.654 L749.887 688.654 L750.446 688.654 L751.005 688.654 L751.565 688.654 L752.124 688.654 L752.683 688.654 L753.242 688.654 L753.802 688.654 L754.361 688.654 L754.92 688.654 L755.479 688.654 L756.039 688.654 L756.598 688.654 L757.157 688.654 L757.716 688.654 L758.276 688.654 L758.835 688.654 L759.394 688.654 L759.953 688.654 L760.513 688.654 L761.072 688.654 L761.631 688.654 L762.19 688.654 L762.75 688.654 L763.309 688.654 L763.868 688.654 L764.427 688.654 L764.987 688.654 L765.546 688.654 L766.105 688.654 L766.664 688.654 L767.224 688.654 L767.783 688.654 L768.342 688.654 L768.901 688.654 L769.461 688.654 L770.02 688.654 L770.579 688.654 L771.138 688.654 L771.698 688.654 L772.257 688.654 L772.816 688.654 L773.375 688.654 L773.935 688.654 L774.494 688.654 L775.053 688.654 L775.612 688.654 L776.172 688.654 L776.731 688.654 L777.29 688.654 L777.849 688.654 L778.409 688.654 L778.968 688.654 L779.527 688.654 L780.086 688.654 L780.646 688.654 L781.205 688.654 L781.764 688.654 L782.323 688.654 L782.883 688.654 L783.442 688.654 L784.001 688.654 L784.56 688.654 L785.12 688.654 L785.679 688.654 L786.238 688.654 L786.797 688.654 L787.357 688.654 L787.916 688.654 L788.475 688.654 L789.034 688.654 L789.594 688.654 L790.153 688.654 L790.712 688.654 L791.271 688.654 L791.831 688.654 L792.39 688.654 L792.949 688.654 L793.508 688.654 L794.068 688.654 L794.627 688.654 L795.186 688.654 L795.745 688.654 L796.305 688.654 L796.864 688.654 L797.423 688.654 L797.982 688.654 L798.542 688.654 L799.101 688.654 L799.66 688.654 L800.219 688.654 L800.779 688.654 L801.338 688.654 L801.897 688.654 L802.456 688.654 L803.016 688.654 L803.575 688.654 L804.134 688.654 L804.693 688.654 L805.253 688.654 L805.812 688.654 L806.371 688.654 L806.931 688.654 L807.49 688.654 L808.049 688.654 L808.608 688.654 L809.168 688.654 L809.727 688.654 L810.286 688.654 L810.845 688.654 L811.405 688.654 L811.964 688.654 L812.523 688.654 L813.082 688.654 L813.642 688.654 L814.201 688.654 L814.76 688.654 L815.319 688.654 L815.879 688.654 L816.438 688.654 L816.997 688.654 L817.556 688.654 L818.116 688.654 L818.675 688.654 L819.234 688.654 L819.793 688.654 L820.353 688.654 L820.912 688.654 L821.471 688.654 L822.03 688.654 L822.59 688.654 L823.149 688.654 L823.708 688.654 L824.267 688.654 L824.827 688.654 L825.386 688.654 L825.945 688.654 L826.504 688.654 L827.064 688.654 L827.623 688.654 L828.182 688.654 L828.741 688.654 L829.301 688.654 L829.86 688.654 L830.419 688.654 L830.978 688.654 L831.538 688.654 L832.097 688.654 L832.656 688.654 L833.215 688.654 L833.775 688.654 L834.334 688.654 L834.893 688.654 L835.452 688.654 L836.012 688.654 L836.571 688.654 L837.13 688.654 L837.689 688.654 L838.249 688.654 L838.808 688.654 L839.367 688.654 L839.926 688.654 L840.486 688.654 L841.045 688.654 L841.604 688.654 L842.163 688.654 L842.723 688.654 L843.282 688.654 L843.841 688.654 L844.4 688.654 L844.96 688.654 L845.519 688.654 L846.078 688.654 L846.637 688.654 L847.197 688.654 L847.756 688.654 L848.315 688.654 L848.874 688.654 L849.434 688.654 L849.993 688.654 L850.552 688.654 L851.111 688.654 L851.671 688.654 L852.23 688.654 L852.789 688.654 L853.348 688.654 L853.908 688.654 L854.467 688.654 L855.026 688.654 L855.585 688.654 L856.145 688.654 L856.704 688.654 L857.263 688.654 L857.822 688.654 L858.382 688.654 L858.941 688.654 L859.5 688.654 L860.059 688.654 L860.619 688.654 L861.178 688.654 L861.737 688.654 L862.296 688.654 L862.856 688.654 L863.415 688.654 L863.974 688.654 L864.533 688.654 L865.093 688.654 L865.652 688.654 L866.211 688.654 L866.77 688.654 L867.33 688.654 L867.889 688.654 L868.448 688.654 L869.007 688.654 L869.567 688.654 L870.126 688.654 L870.685 688.654 L871.244 688.654 L871.804 688.654 L872.363 688.654 L872.922 688.654 L873.481 688.654 L874.041 688.654 L874.6 688.654 L875.159 688.654 L875.718 688.654 L876.278 688.654 L876.837 688.654 L877.396 688.654 L877.955 688.654 L878.515 688.654 L879.074 688.654 L879.633 688.654 L880.192 688.654 L880.752 688.654 L881.311 688.654 L881.87 688.654 L882.429 688.654 L882.989 688.654 L883.548 688.654 L884.107 688.654 L884.666 688.654 L885.226 688.654 L885.785 688.654 L886.344 688.654 L886.903 688.654 L887.463 688.654 L888.022 688.654 L888.581 688.654 L889.14 688.654 L889.7 688.654 L890.259 688.654 L890.818 688.654 L891.377 688.654 L891.937 688.654 L892.496 688.654 L893.055 688.654 L893.614 688.654 L894.174 688.654 L894.733 688.654 L895.292 688.654 L895.851 688.654 L896.411 688.654 L896.97 688.654 L897.529 688.654 L898.088 688.654 L898.648 688.654 L899.207 688.654 L899.766 688.654 L900.325 688.654 L900.885 688.654 L901.444 688.654 L902.003 688.654 L902.562 688.654 L903.122 688.654 L903.681 688.654 L904.24 688.654 L904.799 688.654 L905.359 688.654 L905.918 688.654 L906.477 688.654 L907.036 688.654 L907.596 688.654 L908.155 688.654 L908.714 688.654 L909.273 688.654 L909.833 688.654 L910.392 688.654 L910.951 688.654 L911.51 688.654 L912.07 688.654 L912.629 688.654 L913.188 688.654 L913.747 688.654 L914.307 688.654 L914.866 688.654 L915.425 688.654 L915.984 688.654 L916.544 688.654 L917.103 688.654 L917.662 688.654 L918.221 688.654 L918.781 688.654 L919.34 688.654 L919.899 688.654 L920.458 688.654 L921.018 688.654 L921.577 688.654 L922.136 688.654 L922.695 688.654 L923.255 688.654 L923.814 688.654 L924.373 688.654 L924.932 688.654 L925.492 688.654 L926.051 688.654 L926.61 688.654 L927.169 688.654 L927.729 688.654 L928.288 688.654 L928.847 688.654 L929.406 688.654 L929.966 688.654 L930.525 688.654 L931.084 688.654 L931.644 688.654 L932.203 688.654 L932.762 688.654 L933.321 688.654 L933.881 688.654 L934.44 688.654 L934.999 688.654 L935.558 688.654 L936.118 688.654 L936.677 688.654 L937.236 688.654 L937.795 688.654 L938.355 688.654 L938.914 688.654 L939.473 688.654 L940.032 688.654 L940.592 688.654 L941.151 688.654 L941.71 688.654 L942.269 688.654 L942.829 688.654 L943.388 688.654 L943.947 688.654 L944.506 688.654 L945.066 688.654 L945.625 688.654 L946.184 688.654 L946.743 688.654 L947.303 688.654 L947.862 688.654 L948.421 688.654 L948.98 688.654 L949.54 688.654 L950.099 688.654 L950.658 688.654 L951.217 688.654 L951.777 688.654 L952.336 688.654 L952.895 688.654 L953.454 688.654 L954.014 688.654 L954.573 688.654 L955.132 688.654 L955.691 688.654 L956.251 688.654 L956.81 688.654 L957.369 688.654 L957.928 688.654 L958.488 688.654 L959.047 688.654 L959.606 688.654 L960.165 688.654 L960.725 688.654 L961.284 688.654 L961.843 688.654 L962.402 688.654 L962.962 688.654 L963.521 688.654 L964.08 688.654 L964.639 688.654 L965.199 688.654 L965.758 688.654 L966.317 688.654 L966.876 688.654 L967.436 688.654 L967.995 688.654 L968.554 688.654 L969.113 688.654 L969.673 688.654 L970.232 688.654 L970.791 688.654 L971.35 688.654 L971.91 688.654 L972.469 688.654 L973.028 688.654 L973.587 688.654 L974.147 688.654 L974.706 688.654 L975.265 688.654 L975.824 688.654 L976.384 688.654 L976.943 688.654 L977.502 688.654 L978.061 688.654 L978.621 688.654 L979.18 688.654 L979.739 688.654 L980.298 688.654 L980.858 688.654 L981.417 688.654 L981.976 688.654 L982.535 688.654 L983.095 688.654 L983.654 688.654 L984.213 688.654 L984.772 688.654 L985.332 688.654 L985.891 688.654 L986.45 688.654 L987.009 688.654 L987.569 688.654 L988.128 688.654 L988.687 688.654 L989.246 688.654 L989.806 688.654 L990.365 688.654 L990.924 688.654 L991.483 688.654 L992.043 688.654 L992.602 688.654 L993.161 688.654 L993.72 688.654 L994.28 688.654 L994.839 688.654 L995.398 688.654 L995.957 688.654 L996.517 688.654 L997.076 688.654 L997.635 688.654 L998.194 688.654 L998.754 688.654 L999.313 688.654 L999.872 688.654 L1000.43 688.654 L1000.99 688.654 L1001.55 688.654 L1002.11 688.654 L1002.67 688.654 L1003.23 688.654 L1003.79 688.654 L1004.35 688.654 L1004.91 688.654 L1005.46 688.654 L1006.02 688.654 L1006.58 688.654 L1007.14 688.654 L1007.7 688.654 L1008.26 688.654 L1008.82 688.654 L1009.38 688.654 L1009.94 688.654 L1010.5 688.654 L1011.06 688.654 L1011.62 688.654 L1012.18 688.654 L1012.73 688.654 L1013.29 688.654 L1013.85 688.654 L1014.41 688.654 L1014.97 688.654 L1015.53 688.654 L1016.09 688.654 L1016.65 688.654 L1017.21 688.654 L1017.77 688.654 L1018.33 688.654 L1018.89 688.654 L1019.45 688.654 L1020.01 688.654 L1020.56 688.654 L1021.12 688.654 L1021.68 688.654 L1022.24 688.654 L1022.8 688.654 L1023.36 688.654 L1023.92 688.654 L1024.48 688.654 L1025.04 688.654 L1025.6 688.654 L1026.16 688.654 L1026.72 688.654 L1027.28 688.654 L1027.83 688.654 L1028.39 688.654 L1028.95 688.654 L1029.51 688.654 L1030.07 688.654 L1030.63 688.654 L1031.19 688.654 L1031.75 688.654 L1032.31 688.654 L1032.87 688.654 L1033.43 688.654 L1033.99 688.654 L1034.55 688.654 L1035.1 688.654 L1035.66 688.654 L1036.22 688.654 L1036.78 688.654 L1037.34 688.654 L1037.9 688.654 L1038.46 688.654 L1039.02 688.654 L1039.58 688.654 L1040.14 688.654 L1040.7 688.654 L1041.26 688.654 L1041.82 688.654 L1042.38 688.654 L1042.93 688.654 L1043.49 688.654 L1044.05 688.654 L1044.61 688.654 L1045.17 688.654 L1045.73 688.654 L1046.29 688.654 L1046.85 688.654 L1047.41 688.654 L1047.97 688.654 L1048.53 688.654 L1049.09 688.654 L1049.65 688.654 L1050.2 688.654 L1050.76 688.654 L1051.32 688.654 L1051.88 688.654 L1052.44 688.654 L1053 688.654 L1053.56 688.654 L1054.12 688.654 L1054.68 688.654 L1055.24 688.654 L1055.8 688.654 L1056.36 688.654 L1056.92 688.654 L1057.48 688.654 L1058.03 688.654 L1058.59 688.654 L1059.15 688.654 L1059.71 688.654 L1060.27 688.654 L1060.83 688.654 L1061.39 688.654 L1061.95 688.654 L1062.51 688.654 L1063.07 688.654 L1063.63 688.654 L1064.19 688.654 L1064.75 688.654 L1065.3 688.654 L1065.86 688.654 L1066.42 688.654 L1066.98 688.654 L1067.54 688.654 L1068.1 688.654 L1068.66 688.654 L1069.22 688.654 L1069.78 688.654 L1070.34 688.654 L1070.9 688.654 L1071.46 688.654 L1072.02 688.654 L1072.57 688.654 L1073.13 688.654 L1073.69 688.654 L1074.25 688.654 L1074.81 688.654 L1075.37 688.654 L1075.93 688.654 L1076.49 688.654 L1077.05 688.654 L1077.61 688.654 L1078.17 688.654 L1078.73 688.654 L1079.29 688.654 L1079.85 688.654 L1080.4 688.654 L1080.96 688.654 L1081.52 688.654 L1082.08 688.654 L1082.64 688.654 L1083.2 688.654 L1083.76 688.654 L1084.32 688.654 L1084.88 688.654 L1085.44 688.654 L1086 688.654 L1086.56 688.654 L1087.12 688.654 L1087.67 688.654 L1088.23 688.654 L1088.79 688.654 L1089.35 688.654 L1089.91 688.654 L1090.47 688.654 L1091.03 688.654 L1091.59 688.654 L1092.15 688.654 L1092.71 688.654 L1093.27 688.654 L1093.83 688.654 L1094.39 688.654 L1094.94 688.654 L1095.5 688.654 L1096.06 688.654 L1096.62 688.654 L1097.18 688.654 L1097.74 688.654 L1098.3 688.654 L1098.86 688.654 L1099.42 688.654 L1099.98 688.654 L1100.54 688.654 L1101.1 688.654 L1101.66 688.654 L1102.22 688.654 L1102.77 688.654 L1103.33 688.654 L1103.89 688.654 L1104.45 688.654 L1105.01 688.654 L1105.57 688.654 L1106.13 688.654 L1106.69 688.654 L1107.25 688.654 L1107.81 688.654 L1108.37 688.654 L1108.93 688.654 L1109.49 688.654 L1110.04 688.654 L1110.6 688.654 L1111.16 688.654 L1111.72 688.654 L1112.28 688.654 L1112.84 688.654 L1113.4 688.654 L1113.96 688.654 L1114.52 688.654 L1115.08 688.654 L1115.64 688.654 L1116.2 688.654 L1116.76 688.654 L1117.31 688.654 L1117.87 688.654 L1118.43 688.654 L1118.99 688.654 L1119.55 688.654 L1120.11 688.654 L1120.67 688.654 L1121.23 688.654 L1121.79 688.654 L1122.35 688.654 L1122.91 688.654 L1123.47 688.654 L1124.03 688.654 L1124.59 688.654 L1125.14 688.654 L1125.7 688.654 L1126.26 688.654 L1126.82 688.654 L1127.38 688.654 L1127.94 688.654 L1128.5 688.654 L1129.06 688.654 L1129.62 688.654 L1130.18 688.654 L1130.74 688.654 L1131.3 688.654 L1131.86 688.654 L1132.41 688.654 L1132.97 688.654 L1133.53 688.654 L1134.09 688.654 L1134.65 688.654 L1135.21 688.654 L1135.77 688.654 L1136.33 688.654 L1136.89 688.654 L1137.45 688.654 L1138.01 688.654 L1138.57 688.654 L1139.13 688.654 L1139.68 688.654 L1140.24 688.654 L1140.8 688.654 L1141.36 688.654 L1141.92 688.654 L1142.48 688.654 L1143.04 688.654 L1143.6 688.654 L1144.16 688.654 L1144.72 688.654 L1145.28 688.654 L1145.84 688.654 L1146.4 688.654 L1146.96 688.654 L1147.51 688.654 L1148.07 688.654 L1148.63 688.654 L1149.19 688.654 L1149.75 688.654 L1150.31 688.654 L1150.87 688.654 L1151.43 688.654 L1151.99 688.654 L1152.55 688.654 L1153.11 688.654 L1153.67 688.654 L1154.23 688.654 L1154.78 688.654 L1155.34 688.654 L1155.9 688.654 L1156.46 688.654 L1157.02 688.654 L1157.58 688.654 L1158.14 688.654 L1158.7 688.654 L1159.26 688.654 L1159.82 688.654 L1160.38 688.654 L1160.94 688.654 L1161.5 688.654 L1162.05 688.654 L1162.61 688.654 L1163.17 688.654 L1163.73 688.654 L1164.29 688.654 L1164.85 688.654 L1165.41 688.654 L1165.97 688.654 L1166.53 688.654 L1167.09 688.654 L1167.65 688.654 L1168.21 688.654 L1168.77 688.654 L1169.33 688.654 L1169.88 688.654 L1170.44 688.654 L1171 688.654 L1171.56 688.654 L1172.12 688.654 L1172.68 688.654 L1173.24 688.654 L1173.8 688.654 L1174.36 688.654 L1174.92 688.654 L1175.48 688.654 L1176.04 688.654 L1176.6 688.654 L1177.15 688.654 L1177.71 688.654 L1178.27 688.654 L1178.83 688.654 L1179.39 688.654 L1179.95 688.654 L1180.51 688.654 L1181.07 688.654 L1181.63 688.654 L1182.19 688.654 L1182.75 688.654 L1183.31 688.654 L1183.87 688.654 L1184.43 688.654 L1184.98 688.654 L1185.54 688.654 L1186.1 688.654 L1186.66 688.654 L1187.22 688.654 L1187.78 688.654 L1188.34 688.654 L1188.9 688.654 L1189.46 688.654 L1190.02 688.654 L1190.58 688.654 L1191.14 688.654 L1191.7 688.654 L1192.25 688.654 L1192.81 688.654 L1193.37 688.654 L1193.93 688.654 L1194.49 688.654 L1195.05 688.654 L1195.61 688.654 L1196.17 688.654 L1196.73 688.654 L1197.29 688.654 L1197.85 688.654 L1198.41 688.654 L1198.97 688.654 L1199.52 688.654 L1200.08 688.654 L1200.64 688.654 L1201.2 688.654 L1201.76 688.654 L1202.32 688.654 L1202.88 688.654 L1203.44 688.654 L1204 688.654 L1204.56 688.654 L1205.12 688.654 L1205.68 688.654 L1206.24 688.654 L1206.8 688.654 L1207.35 688.654 L1207.91 688.654 L1208.47 688.654 L1209.03 688.654 L1209.59 688.654 L1210.15 688.654 L1210.71 688.654 L1211.27 688.654 L1211.83 688.654 L1212.39 688.654 L1212.95 688.654 L1213.51 688.654 L1214.07 688.654 L1214.62 688.654 L1215.18 688.654 L1215.74 688.654 L1216.3 688.654 L1216.86 688.654 L1217.42 688.654 L1217.98 688.654 L1218.54 688.654 L1219.1 688.654 L1219.66 688.654 L1220.22 688.654 L1220.78 688.654 L1221.34 688.654 L1221.89 688.654 L1222.45 688.654 L1223.01 688.654 L1223.57 688.654 L1224.13 688.654 L1224.69 688.654 L1225.25 688.654 L1225.81 688.654 L1226.37 688.654 L1226.93 688.654 L1227.49 688.654 L1228.05 688.654 L1228.61 688.654 L1229.17 688.654 L1229.72 688.654 L1230.28 688.654 L1230.84 688.654 L1231.4 688.654 L1231.96 688.654 L1232.52 688.654 L1233.08 688.654 L1233.64 688.654 L1234.2 688.654 L1234.76 688.654 L1235.32 688.654 L1235.88 688.654 L1236.44 688.654 L1236.99 688.654 L1237.55 688.654 L1238.11 688.654 L1238.67 688.654 L1239.23 688.654 L1239.79 688.654 L1240.35 688.654 L1240.91 688.654 L1241.47 688.654 L1242.03 688.654 L1242.59 688.654 L1243.15 688.654 L1243.71 688.654 L1244.26 688.654 L1244.82 688.654 L1245.38 688.654 L1245.94 688.654 L1246.5 688.654 L1247.06 688.654 L1247.62 688.654 L1248.18 688.654 L1248.74 688.654 L1249.3 688.654 L1249.86 688.654 L1250.42 688.654 L1250.98 688.654 L1251.54 688.654 L1252.09 688.654 L1252.65 688.654 L1253.21 688.654 L1253.77 688.654 L1254.33 688.654 L1254.89 688.654 L1255.45 688.654 L1256.01 688.654 L1256.57 688.654 L1257.13 688.654 L1257.69 688.654 L1258.25 688.654 L1258.81 688.654 L1259.36 688.654 L1259.92 688.654 L1260.48 688.654 L1261.04 688.654 L1261.6 688.654 L1262.16 688.654 L1262.72 688.654 L1263.28 688.654 L1263.84 688.654 L1264.4 688.654 L1264.96 688.654 L1265.52 688.654 L1266.08 688.654 L1266.63 688.654 L1267.19 688.654 L1267.75 688.654 L1268.31 688.654 L1268.87 688.654 L1269.43 688.654 L1269.99 688.654 L1270.55 688.654 L1271.11 688.654 L1271.67 688.654 L1272.23 688.654 L1272.79 688.654 L1273.35 688.654 L1273.91 688.654 L1274.46 688.654 L1275.02 688.654 L1275.58 688.654 L1276.14 688.654 L1276.7 688.654 L1277.26 688.654 L1277.82 688.654 L1278.38 688.654 L1278.94 688.654 L1279.5 688.654 L1280.06 688.654 L1280.62 688.654 L1281.18 688.654 L1281.73 688.654 L1282.29 688.654 L1282.85 688.654 L1283.41 688.654 L1283.97 688.654 L1284.53 688.654 L1285.09 688.654 L1285.65 688.654 L1286.21 688.654 L1286.77 688.654 L1287.33 688.654 L1287.89 688.654 L1288.45 688.654 L1289 688.654 L1289.56 688.654 L1290.12 688.654 L1290.68 688.654 L1291.24 688.654 L1291.8 688.654 L1292.36 688.654 L1292.92 688.654 L1293.48 688.654 L1294.04 688.654 L1294.6 688.654 L1295.16 688.654 L1295.72 688.654 L1296.28 688.654 L1296.83 688.654 L1297.39 688.654 L1297.95 688.654 L1298.51 688.654 L1299.07 688.654 L1299.63 688.654 L1300.19 688.654 L1300.75 688.654 L1301.31 688.654 L1301.87 688.654 L1302.43 688.654 L1302.99 688.654 L1303.55 688.654 L1304.1 688.654 L1304.66 688.654 L1305.22 688.654 L1305.78 688.654 L1306.34 688.654 L1306.9 688.654 L1307.46 688.654 L1308.02 688.654 L1308.58 688.654 L1309.14 688.654 L1309.7 688.654 L1310.26 688.654 L1310.82 688.654 L1311.38 688.654 L1311.93 688.654 L1312.49 688.654 L1313.05 688.654 L1313.61 688.654 L1314.17 688.654 L1314.73 688.654 L1315.29 688.654 L1315.85 688.654 L1316.41 688.654 L1316.97 688.654 L1317.53 688.654 L1318.09 688.654 L1318.65 688.654 L1319.2 688.654 L1319.76 688.654 L1320.32 688.654 L1320.88 688.654 L1321.44 688.654 L1322 688.654 L1322.56 688.654 L1323.12 688.654 L1323.68 688.654 L1324.24 688.654 L1324.8 688.654 L1325.36 688.654 L1325.92 688.654 L1326.47 688.654 L1327.03 688.654 L1327.59 688.654 L1328.15 688.654 L1328.71 688.654 L1329.27 688.654 L1329.83 688.654 L1330.39 688.654 L1330.95 688.654 L1331.51 688.654 L1332.07 688.654 L1332.63 688.654 L1333.19 688.654 L1333.75 688.654 L1334.3 688.654 L1334.86 688.654 L1335.42 688.654 L1335.98 688.654 L1336.54 688.654 L1337.1 688.654 L1337.66 688.654 L1338.22 688.654 L1338.78 688.654 L1339.34 688.654 L1339.9 688.654 L1340.46 688.654 L1341.02 688.654 L1341.57 688.654 L1342.13 688.654 L1342.69 688.654 L1343.25 688.654 L1343.81 688.654 L1344.37 688.654 L1344.93 688.654 L1345.49 688.654 L1346.05 688.654 L1346.61 688.654 L1347.17 688.654 L1347.73 688.654 L1348.29 688.654 L1348.84 688.654 L1349.4 688.654 L1349.96 688.654 L1350.52 688.654 L1351.08 688.654 L1351.64 688.654 L1352.2 688.654 L1352.76 688.654 L1353.32 688.654 L1353.88 688.654 L1354.44 688.654 L1355 688.654 L1355.56 688.654 L1356.12 688.654 L1356.67 688.654 L1357.23 688.654 L1357.79 688.654 L1358.35 688.654 L1358.91 688.654 L1359.47 688.654 L1360.03 688.654 L1360.59 688.654 L1361.15 688.654 L1361.71 688.654 L1362.27 688.654 L1362.83 688.654 L1363.39 688.654 L1363.94 688.654 L1364.5 688.654 L1365.06 688.654 L1365.62 688.654 L1366.18 688.654 L1366.74 688.654 L1367.3 688.654 L1367.86 688.654 L1368.42 688.654 L1368.98 688.654 L1369.54 688.654 L1370.1 688.654 L1370.66 688.654 L1371.21 688.654 L1371.77 688.654 L1372.33 688.654 L1372.89 688.654 L1373.45 688.654 L1374.01 688.654 L1374.57 688.654 L1375.13 688.654 L1375.69 688.654 L1376.25 688.654 L1376.81 688.654 L1377.37 688.654 L1377.93 688.654 L1378.49 688.654 L1379.04 688.654 L1379.6 688.654 L1380.16 688.654 L1380.72 688.654 L1381.28 688.654 L1381.84 688.654 L1382.4 688.654 L1382.96 688.654 L1383.52 688.654 L1384.08 688.654 L1384.64 688.654 L1385.2 688.654 L1385.76 688.654 L1386.31 688.654 L1386.87 688.654 L1387.43 688.654 L1387.99 688.654 L1388.55 688.654 L1389.11 688.654 L1389.67 688.654 L1390.23 688.654 L1390.79 688.654 L1391.35 688.654 L1391.91 688.654 L1392.47 688.654 L1393.03 688.654 L1393.58 688.654 L1394.14 688.654 L1394.7 688.654 L1395.26 688.654 L1395.82 688.654 L1396.38 688.654 L1396.94 688.654 L1397.5 688.654 L1398.06 688.654 L1398.62 688.654 L1399.18 688.654 L1399.74 688.654 L1400.3 688.654 L1400.86 688.654 L1401.41 688.654 L1401.97 688.654 L1402.53 688.654 L1403.09 688.654 L1403.65 688.654 L1404.21 688.654 L1404.77 688.654 L1405.33 688.654 L1405.89 688.654 L1406.45 688.654 L1407.01 688.654 L1407.57 688.654 L1408.13 688.654 L1408.68 688.654 L1409.24 688.654 L1409.8 688.654 L1410.36 688.654 L1410.92 688.654 L1411.48 688.654 L1412.04 688.654 L1412.6 688.654 L1413.16 688.654 L1413.72 688.654 L1414.28 688.654 L1414.84 688.654 L1415.4 688.654 L1415.95 688.654 L1416.51 688.654 L1417.07 688.654 L1417.63 688.654 L1418.19 688.654 L1418.75 688.654 L1419.31 688.654 L1419.87 688.654 L1420.43 688.654 L1420.99 688.654 L1421.55 688.654 L1422.11 688.654 L1422.67 688.654 L1423.23 688.654 L1423.78 688.654 L1424.34 688.654 L1424.9 688.654 L1425.46 688.654 L1426.02 688.654 L1426.58 688.654 L1427.14 688.654 L1427.7 688.654 L1428.26 688.654 L1428.82 688.654 L1429.38 688.654 L1429.94 688.654 L1430.5 688.654 L1431.05 688.654 L1431.61 688.654 L1432.17 688.654 L1432.73 688.654 L1433.29 688.654 L1433.85 688.654 L1434.41 688.654 L1434.97 688.654 L1435.53 688.654 L1436.09 688.654 L1436.65 688.654 L1437.21 688.654 L1437.77 688.654 L1438.33 688.654 L1438.88 688.654 L1439.44 688.654 L1440 688.654 L1440.56 688.654 L1441.12 688.654 L1441.68 688.654 L1442.24 688.654 L1442.8 688.654 L1443.36 688.654 L1443.92 688.654 L1444.48 688.654 L1445.04 688.654 L1445.6 688.654 L1446.15 688.654 L1446.71 688.654 L1447.27 688.654 L1447.83 688.654 L1448.39 688.654 L1448.95 688.654 L1449.51 688.654 L1450.07 688.654 L1450.63 688.654 L1451.19 688.654 L1451.75 688.654 L1452.31 688.654 L1452.87 688.654 L1453.42 688.654 L1453.98 688.654 L1454.54 688.654 L1455.1 688.654 L1455.66 688.654 L1456.22 688.654 L1456.78 688.654 L1457.34 688.654 L1457.9 688.654 L1458.46 688.654 L1459.02 688.654 L1459.58 688.654 L1460.14 688.654 L1460.7 688.654 L1461.25 688.654 L1461.81 688.654 L1462.37 688.654 L1462.93 688.654 L1463.49 688.654 L1464.05 688.654 L1464.61 688.654 L1465.17 688.654 L1465.73 688.654 L1466.29 688.654 L1466.85 688.654 L1467.41 688.654 L1467.97 688.654 L1468.52 688.654 L1469.08 688.654 L1469.64 688.654 L1470.2 688.654 L1470.76 688.654 L1471.32 688.654 L1471.88 688.654 L1472.44 688.654 L1473 688.654 L1473.56 688.654 L1474.12 688.654 L1474.68 688.654 L1475.24 688.654 L1475.79 688.654 L1476.35 688.654 L1476.91 688.654 L1477.47 688.654 L1478.03 688.654 L1478.59 688.654 L1479.15 688.654 L1479.71 688.654 L1480.27 688.654 L1480.83 688.654 L1481.39 688.654 L1481.95 688.654 L1482.51 688.654 L1483.07 688.654 L1483.62 688.654 L1484.18 688.654 L1484.74 688.654 L1485.3 688.654 L1485.86 688.654 L1486.42 688.654 L1486.98 688.654 L1487.54 688.654 L1488.1 688.654 L1488.66 688.654 L1489.22 688.654 L1489.78 688.654 L1490.34 688.654 L1490.89 688.654 L1491.45 688.654 L1492.01 688.654 L1492.57 688.654 L1493.13 688.654 L1493.69 688.654 L1494.25 688.654 L1494.81 688.654 L1495.37 688.654 L1495.93 688.654 L1496.49 688.654 L1497.05 688.654 L1497.61 688.654 L1498.16 688.654 L1498.72 688.654 L1499.28 688.654 L1499.84 688.654 L1500.4 688.654 L1500.96 688.654 L1501.52 688.654 L1502.08 688.654 L1502.64 688.654 L1503.2 688.654 L1503.76 688.654 L1504.32 688.654 L1504.88 688.654 L1505.44 688.654 L1505.99 688.654 L1506.55 688.654 L1507.11 688.654 L1507.67 688.654 L1508.23 688.654 L1508.79 688.654 L1509.35 688.654 L1509.91 688.654 L1510.47 688.654 L1511.03 688.654 L1511.59 688.654 L1512.15 688.654 L1512.71 688.654 L1513.26 688.654 L1513.82 688.654 L1514.38 688.654 L1514.94 688.654 L1515.5 688.654 L1516.06 688.654 L1516.62 688.654 L1517.18 688.654 L1517.74 688.654 L1518.3 688.654 L1518.86 688.654 L1519.42 688.654 L1519.98 688.654 L1520.53 688.654 L1521.09 688.654 L1521.65 688.654 L1522.21 688.654 L1522.77 688.654 L1523.33 688.654 L1523.89 688.654 L1524.45 688.654 L1525.01 688.654 L1525.57 688.654 L1526.13 688.654 L1526.69 688.654 L1527.25 688.654 L1527.81 688.654 L1528.36 688.654 L1528.92 688.654 L1529.48 688.654 L1530.04 688.654 L1530.6 688.654 L1531.16 688.654 L1531.72 688.654 L1532.28 688.654 L1532.84 688.654 L1533.4 688.654 L1533.96 688.654 L1534.52 688.654 L1535.08 688.654 L1535.63 688.654 L1536.19 688.654 L1536.75 688.654 L1537.31 688.654 L1537.87 688.654 L1538.43 688.654 L1538.99 688.654 L1539.55 688.654 L1540.11 688.654 L1540.67 688.654 L1541.23 688.654 L1541.79 688.654 L1542.35 688.654 L1542.9 688.654 L1543.46 688.654 L1544.02 688.654 L1544.58 688.654 L1545.14 688.654 L1545.7 688.654 L1546.26 688.654 L1546.82 688.654 L1547.38 688.654 L1547.94 688.654 L1548.5 688.654 L1549.06 688.654 L1549.62 688.654 L1550.18 688.654 L1550.73 688.654 L1551.29 688.654 L1551.85 688.654 L1552.41 688.654 L1552.97 688.654 L1553.53 688.654 L1554.09 688.654 L1554.65 688.654 L1555.21 688.654 L1555.77 688.654 L1556.33 688.654 L1556.89 688.654 L1557.45 688.654 L1558 688.654 L1558.56 688.654 L1559.12 688.654 L1559.68 688.654 L1560.24 688.654 L1560.8 688.654 L1561.36 688.654 L1561.92 688.654 L1562.48 688.654 L1563.04 688.654 L1563.6 688.654 L1564.16 688.654 L1564.72 688.654 L1565.28 688.654 L1565.83 688.654 L1566.39 688.654 L1566.95 688.654 L1567.51 688.654 L1568.07 688.654 L1568.63 688.654 L1569.19 688.654 L1569.75 688.654 L1570.31 688.654 L1570.87 688.654 L1571.43 688.654 L1571.99 688.654 L1572.55 688.654 L1573.1 688.654 L1573.66 688.654 L1574.22 688.654 L1574.78 688.654 L1575.34 688.654 L1575.9 688.654 L1576.46 688.654 L1577.02 688.654 L1577.58 688.654 L1578.14 688.654 L1578.7 688.654 L1579.26 688.654 L1579.82 688.654 L1580.37 688.654 L1580.93 688.654 L1581.49 688.654 L1582.05 688.654 L1582.61 688.654 L1583.17 688.654 L1583.73 688.654 L1584.29 688.654 L1584.85 688.654 L1585.41 688.654 L1585.97 688.654 L1586.53 688.654 L1587.09 688.654 L1587.65 688.654 L1588.2 688.654 L1588.76 688.654 L1589.32 688.654 L1589.88 688.654 L1590.44 688.654 L1591 688.654 L1591.56 688.654 L1592.12 688.654 L1592.68 688.654 L1593.24 688.654 L1593.8 688.654 L1594.36 688.654 L1594.92 688.654 L1595.47 688.654 L1596.03 688.654 L1596.59 688.654 L1597.15 688.654 L1597.71 688.654 L1598.27 688.654 L1598.83 688.654 L1599.39 688.654 L1599.95 688.654 L1600.51 688.654 L1601.07 688.654 L1601.63 688.654 L1602.19 688.654 L1602.74 688.654 L1603.3 688.654 L1603.86 688.654 L1604.42 688.654 L1604.98 688.654 L1605.54 688.654 L1606.1 688.654 L1606.66 688.654 L1607.22 688.654 L1607.78 688.654 L1608.34 688.654 L1608.9 688.654 L1609.46 688.654 L1610.02 688.654 L1610.57 688.654 L1611.13 688.654 L1611.69 688.654 L1612.25 688.654 L1612.81 688.654 L1613.37 688.654 L1613.93 688.654 L1614.49 688.654 L1615.05 688.654 L1615.61 688.654 L1616.17 688.654 L1616.73 688.654 L1617.29 688.654 L1617.84 688.654 L1618.4 688.654 L1618.96 688.654 L1619.52 688.654 L1620.08 688.654 L1620.64 688.654 L1621.2 688.654 L1621.76 688.654 L1622.32 688.654 L1622.88 688.654 L1623.44 688.654 L1624 688.654 L1624.56 688.654 L1625.11 688.654 L1625.67 688.654 L1626.23 688.654 L1626.79 688.654 L1627.35 688.654 L1627.91 688.654 L1628.47 688.654 L1629.03 688.654 L1629.59 688.654 L1630.15 688.654 L1630.71 688.654 L1631.27 688.654 L1631.83 688.654 L1632.39 688.654 L1632.94 688.654 L1633.5 688.654 L1634.06 688.654 L1634.62 688.654 L1635.18 688.654 L1635.74 688.654 L1636.3 688.654 L1636.86 688.654 L1637.42 688.654 L1637.98 688.654 L1638.54 688.654 L1639.1 688.654 L1639.66 688.654 L1640.21 688.654 L1640.77 688.654 L1641.33 688.654 L1641.89 688.654 L1642.45 688.654 L1643.01 688.654 L1643.57 688.654 L1644.13 688.654 L1644.69 688.654 L1645.25 688.654 L1645.81 688.654 L1646.37 688.654 L1646.93 688.654 L1647.48 688.654 L1648.04 688.654 L1648.6 688.654 L1649.16 688.654 L1649.72 688.654 L1650.28 688.654 L1650.84 688.654 L1651.4 688.654 L1651.96 688.654 L1652.52 688.654 L1653.08 688.654 L1653.64 688.654 L1654.2 688.654 L1654.76 688.654 L1655.31 688.654 L1655.87 688.654 L1656.43 688.654 L1656.99 688.654 L1657.55 688.654 L1658.11 688.654 L1658.67 688.654 L1659.23 688.654 L1659.79 688.654 L1660.35 688.654 L1660.91 688.654 L1661.47 688.654 L1662.03 688.654 L1662.58 688.654 L1663.14 688.654 L1663.7 688.654 L1664.26 688.654 L1664.82 688.654 L1665.38 688.654 L1665.94 688.654 L1666.5 688.654 L1667.06 688.654 L1667.62 688.654 L1668.18 688.654 L1668.74 688.654 L1669.3 688.654 L1669.85 688.654 L1670.41 688.654 L1670.97 688.654 L1671.53 688.654 L1672.09 688.654 L1672.65 688.654 L1673.21 688.654 L1673.77 688.654 L1674.33 688.654 L1674.89 688.654 L1675.45 688.654 L1676.01 688.654 L1676.57 688.654 L1677.13 688.654 L1677.68 688.654 L1678.24 688.654 L1678.8 688.654 L1679.36 688.654 L1679.92 688.654 L1680.48 688.654 L1681.04 688.654 L1681.6 688.654 L1682.16 688.654 L1682.72 688.654 L1683.28 688.654 L1683.84 688.654 L1684.4 688.654 L1684.95 688.654 L1685.51 688.654 L1686.07 688.654 L1686.63 688.654 L1687.19 688.654 L1687.75 688.654 L1688.31 688.654 L1688.87 688.654 L1689.43 688.654 L1689.99 688.654 L1690.55 688.654 L1691.11 688.654 L1691.67 688.654 L1692.23 688.654 L1692.78 688.654 L1693.34 688.654 L1693.9 688.654 L1694.46 688.654 L1695.02 688.654 L1695.58 688.654 L1696.14 688.654 L1696.7 688.654 L1697.26 688.654 L1697.82 688.654 L1698.38 688.654 L1698.94 688.654 L1699.5 688.654 L1700.05 688.654 L1700.61 688.654 L1701.17 688.654 L1701.73 688.654 L1702.29 688.654 L1702.85 688.654 L1703.41 688.654 L1703.97 688.654 L1704.53 688.654 L1705.09 688.654 L1705.65 688.654 L1706.21 688.654 L1706.77 688.654 L1707.32 688.654 L1707.88 688.654 L1708.44 688.654 L1709 688.654 L1709.56 688.654 L1710.12 688.654 L1710.68 688.654 L1711.24 688.654 L1711.8 688.654 L1712.36 688.654 L1712.92 688.654 L1713.48 688.654 L1714.04 688.654 L1714.6 688.654 L1715.15 688.654 L1715.71 688.654 L1716.27 688.654 L1716.83 688.654 L1717.39 688.654 L1717.95 688.654 L1718.51 688.654 L1719.07 688.654 L1719.63 688.654 L1720.19 688.654 L1720.75 688.654 L1721.31 688.654 L1721.87 688.654 L1722.42 688.654 L1722.98 688.654 L1723.54 688.654 L1724.1 688.654 L1724.66 688.654 L1725.22 688.654 L1725.78 688.654 L1726.34 688.654 L1726.9 688.654 L1727.46 688.654 L1728.02 688.654 L1728.58 688.654 L1729.14 688.654 L1729.69 688.654 L1730.25 688.654 L1730.81 688.654 L1731.37 688.654 L1731.93 688.654 L1732.49 688.654 L1733.05 688.654 L1733.61 688.654 L1734.17 688.654 L1734.73 688.654 L1735.29 688.654 L1735.85 688.654 L1736.41 688.654 L1736.97 688.654 L1737.52 688.654 L1738.08 688.654 L1738.64 688.654 L1739.2 688.654 L1739.76 688.654 L1740.32 688.654 L1740.88 688.654 L1741.44 688.654 L1742 688.654 L1742.56 688.654 L1743.12 688.654 L1743.68 688.654 L1744.24 688.654 L1744.79 688.654 L1745.35 688.654 L1745.91 688.654 L1746.47 688.654 L1747.03 688.654 L1747.59 688.654 L1748.15 688.654 L1748.71 688.654 L1749.27 688.654 L1749.83 688.654 L1750.39 688.654 L1750.95 688.654 L1751.51 688.654 L1752.06 688.654 L1752.62 688.654 L1753.18 688.654 L1753.74 688.654 L1754.3 688.654 L1754.86 688.654 L1755.42 688.654 L1755.98 688.654 L1756.54 688.654 L1757.1 688.654 L1757.66 688.654 L1758.22 688.654 L1758.78 688.654 L1759.34 688.654 L1759.89 688.654 L1760.45 688.654 L1761.01 688.654 L1761.57 688.654 L1762.13 688.654 L1762.69 688.654 L1763.25 688.654 L1763.81 688.654 L1764.37 688.654 L1764.93 688.654 L1765.49 688.654 L1766.05 688.654 L1766.61 688.654 L1767.16 688.654 L1767.72 688.654 L1768.28 688.654 L1768.84 688.654 L1769.4 688.654 L1769.96 688.654 L1770.52 688.654 L1771.08 688.654 L1771.64 688.654 L1772.2 688.654 L1772.76 688.654 L1773.32 688.654 L1773.88 688.654 L1774.43 688.654 L1774.99 688.654 L1775.55 688.654 L1776.11 688.654 L1776.67 688.654 L1777.23 688.654 L1777.79 688.654 L1778.35 688.654 L1778.91 688.654 L1779.47 688.654 L1780.03 688.654 L1780.59 688.654 L1781.15 688.654 L1781.71 688.654 L1782.26 688.654 L1782.82 688.654 L1783.38 688.654 L1783.94 688.654 L1784.5 688.654 L1785.06 688.654 L1785.62 688.654 L1786.18 688.654 L1786.74 688.654 L1787.3 688.654 L1787.86 688.654 L1788.42 688.654 L1788.98 688.654 L1789.53 688.654 L1790.09 688.654 L1790.65 688.654 L1791.21 688.654 L1791.77 688.654 L1792.33 688.654 L1792.89 688.654 L1793.45 688.654 L1794.01 688.654 L1794.57 688.654 L1795.13 688.654 L1795.69 688.654 L1796.25 688.654 L1796.8 688.654 L1797.36 688.654 L1797.92 688.654 L1798.48 688.654 L1799.04 688.654 L1799.6 688.654 L1800.16 688.654 L1800.72 688.654 L1801.28 688.654 L1801.84 688.654 L1802.4 688.654 L1802.96 688.654 L1803.52 688.654 L1804.08 688.654 L1804.63 688.654 L1805.19 688.654 L1805.75 688.654 L1806.31 688.654 L1806.87 688.654 L1807.43 688.654 L1807.99 688.654 L1808.55 688.654 L1809.11 688.654 L1809.67 688.654 L1810.23 688.654 L1810.79 688.654 L1811.35 688.654 L1811.9 688.654 L1812.46 688.654 L1813.02 688.654 L1813.58 688.654 L1814.14 688.654 L1814.7 688.654 L1815.26 688.654 L1815.82 688.654 L1816.38 688.654 L1816.94 688.654 L1817.5 688.654 L1818.06 688.654 L1818.62 688.654 L1819.18 688.654 L1819.73 688.654 L1820.29 688.654 L1820.85 688.654 L1821.41 688.654 L1821.97 688.654 L1822.53 688.654 L1823.09 688.654 L1823.65 688.654 L1824.21 688.654 L1824.77 688.654 L1825.33 688.654 L1825.89 688.654 L1826.45 688.654 L1827 688.654 L1827.56 688.654 L1828.12 688.654 L1828.68 688.654 L1829.24 688.654 L1829.8 688.654 L1830.36 688.654 L1830.92 688.654 L1831.48 688.654 L1832.04 688.654 L1832.6 688.654 L1833.16 688.654 L1833.72 688.654 L1834.27 688.654 L1834.83 688.654 L1835.39 688.654 L1835.95 688.654 L1836.51 688.654 L1837.07 688.654 L1837.63 688.654 L1838.19 688.654 L1838.19 680.59 L1837.63 680.59 L1837.07 680.59 L1836.51 680.59 L1835.95 680.59 L1835.39 680.59 L1834.83 680.59 L1834.27 680.59 L1833.72 680.59 L1833.16 680.59 L1832.6 680.59 L1832.04 680.59 L1831.48 680.59 L1830.92 680.59 L1830.36 680.59 L1829.8 680.59 L1829.24 680.59 L1828.68 680.59 L1828.12 680.59 L1827.56 680.59 L1827 680.59 L1826.45 680.59 L1825.89 680.59 L1825.33 680.59 L1824.77 680.59 L1824.21 680.59 L1823.65 680.59 L1823.09 680.59 L1822.53 680.59 L1821.97 680.59 L1821.41 680.59 L1820.85 680.59 L1820.29 680.59 L1819.73 680.59 L1819.18 680.59 L1818.62 680.59 L1818.06 680.59 L1817.5 680.59 L1816.94 680.59 L1816.38 680.59 L1815.82 680.59 L1815.26 680.59 L1814.7 680.59 L1814.14 680.59 L1813.58 680.59 L1813.02 680.59 L1812.46 680.59 L1811.9 680.59 L1811.35 680.59 L1810.79 680.59 L1810.23 680.59 L1809.67 680.59 L1809.11 680.59 L1808.55 680.59 L1807.99 680.59 L1807.43 680.59 L1806.87 680.59 L1806.31 680.59 L1805.75 680.59 L1805.19 680.59 L1804.63 680.59 L1804.08 680.59 L1803.52 680.59 L1802.96 680.59 L1802.4 680.59 L1801.84 680.59 L1801.28 680.59 L1800.72 680.59 L1800.16 680.59 L1799.6 680.59 L1799.04 680.59 L1798.48 680.59 L1797.92 680.59 L1797.36 680.59 L1796.8 680.59 L1796.25 680.59 L1795.69 680.59 L1795.13 680.59 L1794.57 680.59 L1794.01 680.59 L1793.45 680.59 L1792.89 680.59 L1792.33 680.59 L1791.77 680.59 L1791.21 680.59 L1790.65 680.59 L1790.09 680.59 L1789.53 680.59 L1788.98 680.59 L1788.42 680.59 L1787.86 680.59 L1787.3 680.59 L1786.74 680.59 L1786.18 680.59 L1785.62 680.59 L1785.06 680.59 L1784.5 680.59 L1783.94 680.59 L1783.38 680.59 L1782.82 680.59 L1782.26 680.59 L1781.71 680.59 L1781.15 680.59 L1780.59 680.59 L1780.03 680.59 L1779.47 680.59 L1778.91 680.59 L1778.35 680.59 L1777.79 680.59 L1777.23 680.59 L1776.67 680.59 L1776.11 680.59 L1775.55 680.59 L1774.99 680.59 L1774.43 680.59 L1773.88 680.59 L1773.32 680.59 L1772.76 680.59 L1772.2 680.59 L1771.64 680.59 L1771.08 680.59 L1770.52 680.59 L1769.96 680.59 L1769.4 680.59 L1768.84 680.59 L1768.28 680.59 L1767.72 680.59 L1767.16 680.59 L1766.61 680.59 L1766.05 680.59 L1765.49 680.59 L1764.93 680.59 L1764.37 680.59 L1763.81 680.59 L1763.25 680.59 L1762.69 680.59 L1762.13 680.59 L1761.57 680.59 L1761.01 680.59 L1760.45 680.59 L1759.89 680.59 L1759.34 680.59 L1758.78 680.59 L1758.22 680.59 L1757.66 680.59 L1757.1 680.59 L1756.54 680.59 L1755.98 680.59 L1755.42 680.59 L1754.86 680.59 L1754.3 680.59 L1753.74 680.59 L1753.18 680.59 L1752.62 680.59 L1752.06 680.59 L1751.51 680.59 L1750.95 680.59 L1750.39 680.59 L1749.83 680.59 L1749.27 680.59 L1748.71 680.59 L1748.15 680.59 L1747.59 680.59 L1747.03 680.59 L1746.47 680.59 L1745.91 680.59 L1745.35 680.59 L1744.79 680.59 L1744.24 680.59 L1743.68 680.59 L1743.12 680.59 L1742.56 680.59 L1742 680.59 L1741.44 680.59 L1740.88 680.59 L1740.32 680.59 L1739.76 680.59 L1739.2 680.59 L1738.64 680.59 L1738.08 680.59 L1737.52 680.59 L1736.97 680.59 L1736.41 680.59 L1735.85 680.59 L1735.29 680.59 L1734.73 680.59 L1734.17 680.59 L1733.61 680.59 L1733.05 680.59 L1732.49 680.59 L1731.93 680.59 L1731.37 680.59 L1730.81 680.59 L1730.25 680.59 L1729.69 680.59 L1729.14 680.59 L1728.58 680.59 L1728.02 680.59 L1727.46 680.59 L1726.9 680.59 L1726.34 680.59 L1725.78 680.59 L1725.22 680.59 L1724.66 680.59 L1724.1 680.59 L1723.54 680.59 L1722.98 680.59 L1722.42 680.59 L1721.87 680.59 L1721.31 680.59 L1720.75 680.59 L1720.19 680.59 L1719.63 680.59 L1719.07 680.59 L1718.51 680.59 L1717.95 680.59 L1717.39 680.59 L1716.83 680.59 L1716.27 680.59 L1715.71 680.59 L1715.15 680.59 L1714.6 680.59 L1714.04 680.59 L1713.48 680.59 L1712.92 680.59 L1712.36 680.59 L1711.8 680.59 L1711.24 680.59 L1710.68 680.59 L1710.12 680.59 L1709.56 680.59 L1709 680.59 L1708.44 680.59 L1707.88 680.59 L1707.32 680.59 L1706.77 680.59 L1706.21 680.59 L1705.65 680.59 L1705.09 680.59 L1704.53 680.59 L1703.97 680.59 L1703.41 680.59 L1702.85 680.59 L1702.29 680.59 L1701.73 680.59 L1701.17 680.59 L1700.61 680.59 L1700.05 680.59 L1699.5 680.59 L1698.94 680.59 L1698.38 680.59 L1697.82 680.59 L1697.26 680.59 L1696.7 680.59 L1696.14 680.59 L1695.58 680.59 L1695.02 680.59 L1694.46 680.59 L1693.9 680.59 L1693.34 680.59 L1692.78 680.59 L1692.23 680.59 L1691.67 680.59 L1691.11 680.59 L1690.55 680.59 L1689.99 680.59 L1689.43 680.59 L1688.87 680.59 L1688.31 680.59 L1687.75 680.59 L1687.19 680.59 L1686.63 680.59 L1686.07 680.59 L1685.51 680.59 L1684.95 680.59 L1684.4 680.59 L1683.84 680.59 L1683.28 680.59 L1682.72 680.59 L1682.16 680.59 L1681.6 680.59 L1681.04 680.59 L1680.48 680.59 L1679.92 680.59 L1679.36 680.59 L1678.8 680.59 L1678.24 680.59 L1677.68 680.59 L1677.13 680.59 L1676.57 680.59 L1676.01 680.59 L1675.45 680.59 L1674.89 680.59 L1674.33 680.59 L1673.77 680.59 L1673.21 680.59 L1672.65 680.59 L1672.09 680.59 L1671.53 680.59 L1670.97 680.59 L1670.41 680.59 L1669.85 680.59 L1669.3 680.59 L1668.74 680.59 L1668.18 680.59 L1667.62 680.59 L1667.06 680.59 L1666.5 680.59 L1665.94 680.59 L1665.38 680.59 L1664.82 680.59 L1664.26 680.59 L1663.7 680.59 L1663.14 680.59 L1662.58 680.59 L1662.03 680.59 L1661.47 680.59 L1660.91 680.59 L1660.35 680.59 L1659.79 680.59 L1659.23 680.59 L1658.67 680.59 L1658.11 680.59 L1657.55 680.59 L1656.99 680.59 L1656.43 680.59 L1655.87 680.59 L1655.31 680.59 L1654.76 680.59 L1654.2 680.59 L1653.64 680.59 L1653.08 680.59 L1652.52 680.59 L1651.96 680.59 L1651.4 680.59 L1650.84 680.59 L1650.28 680.59 L1649.72 680.59 L1649.16 680.59 L1648.6 680.59 L1648.04 680.59 L1647.48 680.59 L1646.93 680.59 L1646.37 680.59 L1645.81 680.59 L1645.25 680.59 L1644.69 680.59 L1644.13 680.59 L1643.57 680.59 L1643.01 680.59 L1642.45 680.59 L1641.89 680.59 L1641.33 680.59 L1640.77 680.59 L1640.21 680.59 L1639.66 680.59 L1639.1 680.59 L1638.54 680.59 L1637.98 680.59 L1637.42 680.59 L1636.86 680.59 L1636.3 680.59 L1635.74 680.59 L1635.18 680.59 L1634.62 680.59 L1634.06 680.59 L1633.5 680.59 L1632.94 680.59 L1632.39 680.59 L1631.83 680.59 L1631.27 680.59 L1630.71 680.59 L1630.15 680.59 L1629.59 680.59 L1629.03 680.59 L1628.47 680.59 L1627.91 680.59 L1627.35 680.59 L1626.79 680.59 L1626.23 680.59 L1625.67 680.59 L1625.11 680.59 L1624.56 680.59 L1624 680.59 L1623.44 680.59 L1622.88 680.59 L1622.32 680.59 L1621.76 680.59 L1621.2 680.59 L1620.64 680.59 L1620.08 680.59 L1619.52 680.59 L1618.96 680.59 L1618.4 680.59 L1617.84 680.59 L1617.29 680.59 L1616.73 680.59 L1616.17 680.59 L1615.61 680.59 L1615.05 680.59 L1614.49 680.59 L1613.93 680.59 L1613.37 680.59 L1612.81 680.59 L1612.25 680.59 L1611.69 680.59 L1611.13 680.59 L1610.57 680.59 L1610.02 680.59 L1609.46 680.59 L1608.9 680.59 L1608.34 680.59 L1607.78 680.59 L1607.22 680.59 L1606.66 680.59 L1606.1 680.59 L1605.54 680.59 L1604.98 680.59 L1604.42 680.59 L1603.86 680.59 L1603.3 680.59 L1602.74 680.59 L1602.19 680.59 L1601.63 680.59 L1601.07 680.59 L1600.51 680.59 L1599.95 680.59 L1599.39 680.59 L1598.83 680.59 L1598.27 680.59 L1597.71 680.59 L1597.15 680.59 L1596.59 680.59 L1596.03 680.59 L1595.47 680.59 L1594.92 680.59 L1594.36 680.59 L1593.8 680.59 L1593.24 680.59 L1592.68 680.59 L1592.12 680.59 L1591.56 680.59 L1591 680.59 L1590.44 680.59 L1589.88 680.59 L1589.32 680.59 L1588.76 680.59 L1588.2 680.59 L1587.65 680.59 L1587.09 680.59 L1586.53 680.59 L1585.97 680.59 L1585.41 680.59 L1584.85 680.59 L1584.29 680.59 L1583.73 680.59 L1583.17 680.59 L1582.61 680.59 L1582.05 680.59 L1581.49 680.59 L1580.93 680.59 L1580.37 680.59 L1579.82 680.59 L1579.26 680.59 L1578.7 680.59 L1578.14 680.59 L1577.58 680.59 L1577.02 680.59 L1576.46 680.59 L1575.9 680.59 L1575.34 680.59 L1574.78 680.59 L1574.22 680.59 L1573.66 680.59 L1573.1 680.59 L1572.55 680.59 L1571.99 680.59 L1571.43 680.59 L1570.87 680.59 L1570.31 680.59 L1569.75 680.59 L1569.19 680.59 L1568.63 680.59 L1568.07 680.59 L1567.51 680.59 L1566.95 680.59 L1566.39 680.59 L1565.83 680.59 L1565.28 680.59 L1564.72 680.59 L1564.16 680.59 L1563.6 680.59 L1563.04 680.59 L1562.48 680.59 L1561.92 680.59 L1561.36 680.59 L1560.8 680.59 L1560.24 680.59 L1559.68 680.59 L1559.12 680.59 L1558.56 680.59 L1558 680.59 L1557.45 680.59 L1556.89 680.59 L1556.33 680.59 L1555.77 680.59 L1555.21 680.59 L1554.65 680.59 L1554.09 680.59 L1553.53 680.59 L1552.97 680.59 L1552.41 680.59 L1551.85 680.59 L1551.29 680.59 L1550.73 680.59 L1550.18 680.59 L1549.62 680.59 L1549.06 680.59 L1548.5 680.59 L1547.94 680.59 L1547.38 680.59 L1546.82 680.59 L1546.26 680.59 L1545.7 680.59 L1545.14 680.59 L1544.58 680.59 L1544.02 680.59 L1543.46 680.59 L1542.9 680.59 L1542.35 680.59 L1541.79 680.59 L1541.23 680.59 L1540.67 680.59 L1540.11 680.59 L1539.55 680.59 L1538.99 680.59 L1538.43 680.59 L1537.87 680.59 L1537.31 680.59 L1536.75 680.59 L1536.19 680.59 L1535.63 680.59 L1535.08 680.59 L1534.52 680.59 L1533.96 680.59 L1533.4 680.59 L1532.84 680.59 L1532.28 680.59 L1531.72 680.59 L1531.16 680.59 L1530.6 680.59 L1530.04 680.59 L1529.48 680.59 L1528.92 680.59 L1528.36 680.59 L1527.81 680.59 L1527.25 680.59 L1526.69 680.59 L1526.13 680.59 L1525.57 680.59 L1525.01 680.59 L1524.45 680.59 L1523.89 680.59 L1523.33 680.59 L1522.77 680.59 L1522.21 680.59 L1521.65 680.59 L1521.09 680.59 L1520.53 680.59 L1519.98 680.59 L1519.42 680.59 L1518.86 680.59 L1518.3 680.59 L1517.74 680.59 L1517.18 680.59 L1516.62 680.59 L1516.06 680.59 L1515.5 680.59 L1514.94 680.59 L1514.38 680.59 L1513.82 680.59 L1513.26 680.59 L1512.71 680.59 L1512.15 680.59 L1511.59 680.59 L1511.03 680.59 L1510.47 680.59 L1509.91 680.59 L1509.35 680.59 L1508.79 680.59 L1508.23 680.59 L1507.67 680.59 L1507.11 680.59 L1506.55 680.59 L1505.99 680.59 L1505.44 680.59 L1504.88 680.59 L1504.32 680.59 L1503.76 680.59 L1503.2 680.59 L1502.64 680.59 L1502.08 680.59 L1501.52 680.59 L1500.96 680.59 L1500.4 680.59 L1499.84 680.59 L1499.28 680.59 L1498.72 680.59 L1498.16 680.59 L1497.61 680.59 L1497.05 680.59 L1496.49 680.59 L1495.93 680.59 L1495.37 680.59 L1494.81 680.59 L1494.25 680.59 L1493.69 680.59 L1493.13 680.59 L1492.57 680.59 L1492.01 680.59 L1491.45 680.59 L1490.89 680.59 L1490.34 680.59 L1489.78 680.59 L1489.22 680.59 L1488.66 680.59 L1488.1 680.59 L1487.54 680.59 L1486.98 680.59 L1486.42 680.59 L1485.86 680.59 L1485.3 680.59 L1484.74 680.59 L1484.18 680.59 L1483.62 680.59 L1483.07 680.59 L1482.51 680.59 L1481.95 680.59 L1481.39 680.59 L1480.83 680.59 L1480.27 680.59 L1479.71 680.59 L1479.15 680.59 L1478.59 680.59 L1478.03 680.59 L1477.47 680.59 L1476.91 680.59 L1476.35 680.59 L1475.79 680.59 L1475.24 680.59 L1474.68 680.59 L1474.12 680.59 L1473.56 680.59 L1473 680.59 L1472.44 680.59 L1471.88 680.59 L1471.32 680.59 L1470.76 680.59 L1470.2 680.59 L1469.64 680.59 L1469.08 680.59 L1468.52 680.59 L1467.97 680.59 L1467.41 680.59 L1466.85 680.59 L1466.29 680.59 L1465.73 680.59 L1465.17 680.59 L1464.61 680.59 L1464.05 680.59 L1463.49 680.59 L1462.93 680.59 L1462.37 680.59 L1461.81 680.59 L1461.25 680.59 L1460.7 680.59 L1460.14 680.59 L1459.58 680.59 L1459.02 680.59 L1458.46 680.59 L1457.9 680.59 L1457.34 680.59 L1456.78 680.59 L1456.22 680.59 L1455.66 680.59 L1455.1 680.59 L1454.54 680.59 L1453.98 680.59 L1453.42 680.59 L1452.87 680.59 L1452.31 680.59 L1451.75 680.59 L1451.19 680.59 L1450.63 680.59 L1450.07 680.59 L1449.51 680.59 L1448.95 680.59 L1448.39 680.59 L1447.83 680.59 L1447.27 680.59 L1446.71 680.59 L1446.15 680.59 L1445.6 680.59 L1445.04 680.59 L1444.48 680.59 L1443.92 680.59 L1443.36 680.59 L1442.8 680.59 L1442.24 680.59 L1441.68 680.59 L1441.12 680.59 L1440.56 680.59 L1440 680.59 L1439.44 680.59 L1438.88 680.59 L1438.33 680.59 L1437.77 680.59 L1437.21 680.59 L1436.65 680.59 L1436.09 680.59 L1435.53 680.59 L1434.97 680.59 L1434.41 680.59 L1433.85 680.59 L1433.29 680.59 L1432.73 680.59 L1432.17 680.59 L1431.61 680.59 L1431.05 680.59 L1430.5 680.59 L1429.94 680.59 L1429.38 680.59 L1428.82 680.59 L1428.26 680.59 L1427.7 680.59 L1427.14 680.59 L1426.58 680.59 L1426.02 680.59 L1425.46 680.59 L1424.9 680.59 L1424.34 680.59 L1423.78 680.59 L1423.23 680.59 L1422.67 680.59 L1422.11 680.59 L1421.55 680.59 L1420.99 680.59 L1420.43 680.59 L1419.87 680.59 L1419.31 680.59 L1418.75 680.59 L1418.19 680.59 L1417.63 680.59 L1417.07 680.59 L1416.51 680.59 L1415.95 680.59 L1415.4 680.59 L1414.84 680.59 L1414.28 680.59 L1413.72 680.59 L1413.16 680.59 L1412.6 680.59 L1412.04 680.59 L1411.48 680.59 L1410.92 680.59 L1410.36 680.59 L1409.8 680.59 L1409.24 680.59 L1408.68 680.59 L1408.13 680.59 L1407.57 680.59 L1407.01 680.59 L1406.45 680.59 L1405.89 680.59 L1405.33 680.59 L1404.77 680.59 L1404.21 680.59 L1403.65 680.59 L1403.09 680.59 L1402.53 680.59 L1401.97 680.59 L1401.41 680.59 L1400.86 680.59 L1400.3 680.59 L1399.74 680.59 L1399.18 680.59 L1398.62 680.59 L1398.06 680.59 L1397.5 680.59 L1396.94 680.59 L1396.38 680.59 L1395.82 680.59 L1395.26 680.59 L1394.7 680.59 L1394.14 680.59 L1393.58 680.59 L1393.03 680.59 L1392.47 680.59 L1391.91 680.59 L1391.35 680.59 L1390.79 680.59 L1390.23 680.59 L1389.67 680.59 L1389.11 680.59 L1388.55 680.59 L1387.99 680.59 L1387.43 680.59 L1386.87 680.59 L1386.31 680.59 L1385.76 680.59 L1385.2 680.59 L1384.64 680.59 L1384.08 680.59 L1383.52 680.59 L1382.96 680.59 L1382.4 680.59 L1381.84 680.59 L1381.28 680.59 L1380.72 680.59 L1380.16 680.59 L1379.6 680.59 L1379.04 680.59 L1378.49 680.59 L1377.93 680.59 L1377.37 680.59 L1376.81 680.59 L1376.25 680.59 L1375.69 680.59 L1375.13 680.59 L1374.57 680.59 L1374.01 680.59 L1373.45 680.59 L1372.89 680.59 L1372.33 680.59 L1371.77 680.59 L1371.21 680.59 L1370.66 680.59 L1370.1 680.59 L1369.54 680.59 L1368.98 680.59 L1368.42 680.59 L1367.86 680.59 L1367.3 680.59 L1366.74 680.59 L1366.18 680.59 L1365.62 680.59 L1365.06 680.59 L1364.5 680.59 L1363.94 680.59 L1363.39 680.59 L1362.83 680.59 L1362.27 680.59 L1361.71 680.59 L1361.15 680.59 L1360.59 680.59 L1360.03 680.59 L1359.47 680.59 L1358.91 680.59 L1358.35 680.59 L1357.79 680.59 L1357.23 680.59 L1356.67 680.59 L1356.12 680.59 L1355.56 680.59 L1355 680.59 L1354.44 680.59 L1353.88 680.59 L1353.32 680.59 L1352.76 680.59 L1352.2 680.59 L1351.64 680.59 L1351.08 680.59 L1350.52 680.59 L1349.96 680.59 L1349.4 680.59 L1348.84 680.59 L1348.29 680.59 L1347.73 680.59 L1347.17 680.59 L1346.61 680.59 L1346.05 680.59 L1345.49 680.59 L1344.93 680.59 L1344.37 680.59 L1343.81 680.59 L1343.25 680.59 L1342.69 680.59 L1342.13 680.59 L1341.57 680.59 L1341.02 680.59 L1340.46 680.59 L1339.9 680.59 L1339.34 680.59 L1338.78 680.59 L1338.22 680.59 L1337.66 680.59 L1337.1 680.59 L1336.54 680.59 L1335.98 680.59 L1335.42 680.59 L1334.86 680.59 L1334.3 680.59 L1333.75 680.59 L1333.19 680.59 L1332.63 680.59 L1332.07 680.59 L1331.51 680.59 L1330.95 680.59 L1330.39 680.59 L1329.83 680.59 L1329.27 680.59 L1328.71 680.59 L1328.15 680.59 L1327.59 680.59 L1327.03 680.59 L1326.47 680.59 L1325.92 680.59 L1325.36 680.59 L1324.8 680.59 L1324.24 680.59 L1323.68 680.59 L1323.12 680.59 L1322.56 680.59 L1322 680.59 L1321.44 680.59 L1320.88 680.59 L1320.32 680.59 L1319.76 680.59 L1319.2 680.59 L1318.65 680.59 L1318.09 680.59 L1317.53 680.59 L1316.97 680.59 L1316.41 680.59 L1315.85 680.59 L1315.29 680.59 L1314.73 680.59 L1314.17 680.59 L1313.61 680.59 L1313.05 680.59 L1312.49 680.59 L1311.93 680.59 L1311.38 680.59 L1310.82 680.59 L1310.26 680.59 L1309.7 680.59 L1309.14 680.59 L1308.58 680.59 L1308.02 680.59 L1307.46 680.59 L1306.9 680.59 L1306.34 680.59 L1305.78 680.59 L1305.22 680.59 L1304.66 680.59 L1304.1 680.59 L1303.55 680.59 L1302.99 680.59 L1302.43 680.59 L1301.87 680.59 L1301.31 680.59 L1300.75 680.59 L1300.19 680.59 L1299.63 680.59 L1299.07 680.59 L1298.51 680.59 L1297.95 680.59 L1297.39 680.59 L1296.83 680.59 L1296.28 680.59 L1295.72 680.59 L1295.16 680.59 L1294.6 680.59 L1294.04 680.59 L1293.48 680.59 L1292.92 680.59 L1292.36 680.59 L1291.8 680.59 L1291.24 680.59 L1290.68 680.59 L1290.12 680.59 L1289.56 680.59 L1289 680.59 L1288.45 680.59 L1287.89 680.59 L1287.33 680.59 L1286.77 680.59 L1286.21 680.59 L1285.65 680.59 L1285.09 680.59 L1284.53 680.59 L1283.97 680.59 L1283.41 680.59 L1282.85 680.59 L1282.29 680.59 L1281.73 680.59 L1281.18 680.59 L1280.62 680.59 L1280.06 680.59 L1279.5 680.59 L1278.94 680.59 L1278.38 680.59 L1277.82 680.59 L1277.26 680.59 L1276.7 680.59 L1276.14 680.59 L1275.58 680.59 L1275.02 680.59 L1274.46 680.59 L1273.91 680.59 L1273.35 680.59 L1272.79 680.59 L1272.23 680.59 L1271.67 680.59 L1271.11 680.59 L1270.55 680.59 L1269.99 680.59 L1269.43 680.59 L1268.87 680.59 L1268.31 680.59 L1267.75 680.59 L1267.19 680.59 L1266.63 680.59 L1266.08 680.59 L1265.52 680.59 L1264.96 680.59 L1264.4 680.59 L1263.84 680.59 L1263.28 680.59 L1262.72 680.59 L1262.16 680.59 L1261.6 680.59 L1261.04 680.59 L1260.48 680.59 L1259.92 680.59 L1259.36 680.59 L1258.81 680.59 L1258.25 680.59 L1257.69 680.59 L1257.13 680.59 L1256.57 680.59 L1256.01 680.59 L1255.45 680.59 L1254.89 680.59 L1254.33 680.59 L1253.77 680.59 L1253.21 680.59 L1252.65 680.59 L1252.09 680.59 L1251.54 680.59 L1250.98 680.59 L1250.42 680.59 L1249.86 680.59 L1249.3 680.59 L1248.74 680.59 L1248.18 680.59 L1247.62 680.59 L1247.06 680.59 L1246.5 680.59 L1245.94 680.59 L1245.38 680.59 L1244.82 680.59 L1244.26 680.59 L1243.71 680.59 L1243.15 680.59 L1242.59 680.59 L1242.03 680.59 L1241.47 680.59 L1240.91 680.59 L1240.35 680.59 L1239.79 680.59 L1239.23 680.59 L1238.67 680.59 L1238.11 680.59 L1237.55 680.59 L1236.99 680.59 L1236.44 680.59 L1235.88 680.59 L1235.32 680.59 L1234.76 680.59 L1234.2 680.59 L1233.64 680.59 L1233.08 680.59 L1232.52 680.59 L1231.96 680.59 L1231.4 680.59 L1230.84 680.59 L1230.28 680.59 L1229.72 680.59 L1229.17 680.59 L1228.61 680.59 L1228.05 680.59 L1227.49 680.59 L1226.93 680.59 L1226.37 680.59 L1225.81 680.59 L1225.25 680.59 L1224.69 680.59 L1224.13 680.59 L1223.57 680.59 L1223.01 680.59 L1222.45 680.59 L1221.89 680.59 L1221.34 680.59 L1220.78 680.59 L1220.22 680.59 L1219.66 680.59 L1219.1 680.59 L1218.54 680.59 L1217.98 680.59 L1217.42 680.59 L1216.86 680.59 L1216.3 680.59 L1215.74 680.59 L1215.18 680.59 L1214.62 680.59 L1214.07 680.59 L1213.51 680.59 L1212.95 680.59 L1212.39 680.59 L1211.83 680.59 L1211.27 680.59 L1210.71 680.59 L1210.15 680.59 L1209.59 680.59 L1209.03 680.59 L1208.47 680.59 L1207.91 680.59 L1207.35 680.59 L1206.8 680.59 L1206.24 680.59 L1205.68 680.59 L1205.12 680.59 L1204.56 680.59 L1204 680.59 L1203.44 680.59 L1202.88 680.59 L1202.32 680.59 L1201.76 680.59 L1201.2 680.59 L1200.64 680.59 L1200.08 680.59 L1199.52 680.59 L1198.97 680.59 L1198.41 680.59 L1197.85 680.59 L1197.29 680.59 L1196.73 680.59 L1196.17 680.59 L1195.61 680.59 L1195.05 680.59 L1194.49 680.59 L1193.93 680.59 L1193.37 680.59 L1192.81 680.59 L1192.25 680.59 L1191.7 680.59 L1191.14 680.59 L1190.58 680.59 L1190.02 680.59 L1189.46 680.59 L1188.9 680.59 L1188.34 680.59 L1187.78 680.59 L1187.22 680.59 L1186.66 680.59 L1186.1 680.59 L1185.54 680.59 L1184.98 680.59 L1184.43 680.59 L1183.87 680.59 L1183.31 680.59 L1182.75 680.59 L1182.19 680.59 L1181.63 680.59 L1181.07 680.59 L1180.51 680.59 L1179.95 680.59 L1179.39 680.59 L1178.83 680.59 L1178.27 680.59 L1177.71 680.59 L1177.15 680.59 L1176.6 680.59 L1176.04 680.59 L1175.48 680.59 L1174.92 680.59 L1174.36 680.59 L1173.8 680.59 L1173.24 680.59 L1172.68 680.59 L1172.12 680.59 L1171.56 680.59 L1171 680.59 L1170.44 680.59 L1169.88 680.59 L1169.33 680.59 L1168.77 680.59 L1168.21 680.59 L1167.65 680.59 L1167.09 680.59 L1166.53 680.59 L1165.97 680.59 L1165.41 680.59 L1164.85 680.59 L1164.29 680.59 L1163.73 680.59 L1163.17 680.59 L1162.61 680.59 L1162.05 680.59 L1161.5 680.59 L1160.94 680.59 L1160.38 680.59 L1159.82 680.59 L1159.26 680.59 L1158.7 680.59 L1158.14 680.59 L1157.58 680.59 L1157.02 680.59 L1156.46 680.59 L1155.9 680.59 L1155.34 680.59 L1154.78 680.59 L1154.23 680.59 L1153.67 680.59 L1153.11 680.59 L1152.55 680.59 L1151.99 680.59 L1151.43 680.59 L1150.87 680.59 L1150.31 680.59 L1149.75 680.59 L1149.19 680.59 L1148.63 680.59 L1148.07 680.59 L1147.51 680.59 L1146.96 680.59 L1146.4 680.59 L1145.84 680.59 L1145.28 680.59 L1144.72 680.59 L1144.16 680.59 L1143.6 680.59 L1143.04 680.59 L1142.48 680.59 L1141.92 680.59 L1141.36 680.59 L1140.8 680.59 L1140.24 680.59 L1139.68 680.59 L1139.13 680.59 L1138.57 680.59 L1138.01 680.59 L1137.45 680.59 L1136.89 680.59 L1136.33 680.59 L1135.77 680.59 L1135.21 680.59 L1134.65 680.59 L1134.09 680.59 L1133.53 680.59 L1132.97 680.59 L1132.41 680.59 L1131.86 680.59 L1131.3 680.59 L1130.74 680.59 L1130.18 680.59 L1129.62 680.59 L1129.06 680.59 L1128.5 680.59 L1127.94 680.59 L1127.38 680.59 L1126.82 680.59 L1126.26 680.59 L1125.7 680.59 L1125.14 680.59 L1124.59 680.59 L1124.03 680.59 L1123.47 680.59 L1122.91 680.59 L1122.35 680.59 L1121.79 680.59 L1121.23 680.59 L1120.67 680.59 L1120.11 680.59 L1119.55 680.59 L1118.99 680.59 L1118.43 680.59 L1117.87 680.59 L1117.31 680.59 L1116.76 680.59 L1116.2 680.59 L1115.64 680.59 L1115.08 680.59 L1114.52 680.59 L1113.96 680.59 L1113.4 680.59 L1112.84 680.59 L1112.28 680.59 L1111.72 680.59 L1111.16 680.59 L1110.6 680.59 L1110.04 680.59 L1109.49 680.59 L1108.93 680.59 L1108.37 680.59 L1107.81 680.59 L1107.25 680.59 L1106.69 680.59 L1106.13 680.59 L1105.57 680.59 L1105.01 680.59 L1104.45 680.59 L1103.89 680.59 L1103.33 680.59 L1102.77 680.59 L1102.22 680.59 L1101.66 680.59 L1101.1 680.59 L1100.54 680.59 L1099.98 680.59 L1099.42 680.59 L1098.86 680.59 L1098.3 680.59 L1097.74 680.59 L1097.18 680.59 L1096.62 680.59 L1096.06 680.59 L1095.5 680.59 L1094.94 680.59 L1094.39 680.59 L1093.83 680.59 L1093.27 680.59 L1092.71 680.59 L1092.15 680.59 L1091.59 680.59 L1091.03 680.59 L1090.47 680.59 L1089.91 680.59 L1089.35 680.59 L1088.79 680.59 L1088.23 680.59 L1087.67 680.59 L1087.12 680.59 L1086.56 680.59 L1086 680.59 L1085.44 680.59 L1084.88 680.59 L1084.32 680.59 L1083.76 680.59 L1083.2 680.59 L1082.64 680.59 L1082.08 680.59 L1081.52 680.59 L1080.96 680.59 L1080.4 680.59 L1079.85 680.59 L1079.29 680.59 L1078.73 680.59 L1078.17 680.59 L1077.61 680.59 L1077.05 680.59 L1076.49 680.59 L1075.93 680.59 L1075.37 680.59 L1074.81 680.59 L1074.25 680.59 L1073.69 680.59 L1073.13 680.59 L1072.57 680.59 L1072.02 680.59 L1071.46 680.59 L1070.9 680.59 L1070.34 680.59 L1069.78 680.59 L1069.22 680.59 L1068.66 680.59 L1068.1 680.59 L1067.54 680.59 L1066.98 680.59 L1066.42 680.59 L1065.86 680.59 L1065.3 680.59 L1064.75 680.59 L1064.19 680.59 L1063.63 680.59 L1063.07 680.59 L1062.51 680.59 L1061.95 680.59 L1061.39 680.59 L1060.83 680.59 L1060.27 680.59 L1059.71 680.59 L1059.15 680.59 L1058.59 680.59 L1058.03 680.59 L1057.48 680.59 L1056.92 680.59 L1056.36 680.59 L1055.8 680.59 L1055.24 680.59 L1054.68 680.59 L1054.12 680.59 L1053.56 680.59 L1053 680.59 L1052.44 680.59 L1051.88 680.59 L1051.32 680.59 L1050.76 680.59 L1050.2 680.59 L1049.65 680.59 L1049.09 680.59 L1048.53 680.59 L1047.97 680.59 L1047.41 680.59 L1046.85 680.59 L1046.29 680.59 L1045.73 680.59 L1045.17 680.59 L1044.61 680.59 L1044.05 680.59 L1043.49 680.59 L1042.93 680.59 L1042.38 680.59 L1041.82 680.59 L1041.26 680.59 L1040.7 680.59 L1040.14 680.59 L1039.58 680.59 L1039.02 680.59 L1038.46 680.59 L1037.9 680.59 L1037.34 680.59 L1036.78 680.59 L1036.22 680.59 L1035.66 680.59 L1035.1 680.59 L1034.55 680.59 L1033.99 680.59 L1033.43 680.59 L1032.87 680.59 L1032.31 680.59 L1031.75 680.59 L1031.19 680.59 L1030.63 680.59 L1030.07 680.59 L1029.51 680.59 L1028.95 680.59 L1028.39 680.59 L1027.83 680.59 L1027.28 680.59 L1026.72 680.59 L1026.16 680.59 L1025.6 680.59 L1025.04 680.59 L1024.48 680.59 L1023.92 680.59 L1023.36 680.59 L1022.8 680.59 L1022.24 680.59 L1021.68 680.59 L1021.12 680.59 L1020.56 680.59 L1020.01 680.59 L1019.45 680.59 L1018.89 680.59 L1018.33 680.59 L1017.77 680.59 L1017.21 680.59 L1016.65 680.59 L1016.09 680.59 L1015.53 680.59 L1014.97 680.59 L1014.41 680.59 L1013.85 680.59 L1013.29 680.59 L1012.73 680.59 L1012.18 680.59 L1011.62 680.59 L1011.06 680.59 L1010.5 680.59 L1009.94 680.59 L1009.38 680.59 L1008.82 680.59 L1008.26 680.59 L1007.7 680.59 L1007.14 680.59 L1006.58 680.59 L1006.02 680.59 L1005.46 680.59 L1004.91 680.59 L1004.35 680.59 L1003.79 680.59 L1003.23 680.59 L1002.67 680.59 L1002.11 680.59 L1001.55 680.59 L1000.99 680.59 L1000.43 680.59 L999.872 680.59 L999.313 680.59 L998.754 680.59 L998.194 680.59 L997.635 680.59 L997.076 680.59 L996.517 680.59 L995.957 680.59 L995.398 680.59 L994.839 680.59 L994.28 680.59 L993.72 680.59 L993.161 680.59 L992.602 680.59 L992.043 680.59 L991.483 680.59 L990.924 680.59 L990.365 680.59 L989.806 680.59 L989.246 680.59 L988.687 680.59 L988.128 680.59 L987.569 680.59 L987.009 680.59 L986.45 680.59 L985.891 680.59 L985.332 680.59 L984.772 680.59 L984.213 680.59 L983.654 680.59 L983.095 680.59 L982.535 680.59 L981.976 680.59 L981.417 680.59 L980.858 680.59 L980.298 680.59 L979.739 680.59 L979.18 680.59 L978.621 680.59 L978.061 680.59 L977.502 680.59 L976.943 680.59 L976.384 680.59 L975.824 680.59 L975.265 680.59 L974.706 680.59 L974.147 680.59 L973.587 680.59 L973.028 680.59 L972.469 680.59 L971.91 680.59 L971.35 680.59 L970.791 680.59 L970.232 680.59 L969.673 680.59 L969.113 680.59 L968.554 680.59 L967.995 680.59 L967.436 680.59 L966.876 680.59 L966.317 680.59 L965.758 680.59 L965.199 680.59 L964.639 680.59 L964.08 680.59 L963.521 680.59 L962.962 680.59 L962.402 680.59 L961.843 680.59 L961.284 680.59 L960.725 680.59 L960.165 680.59 L959.606 680.59 L959.047 680.59 L958.488 680.59 L957.928 680.59 L957.369 680.59 L956.81 680.59 L956.251 680.59 L955.691 680.59 L955.132 680.59 L954.573 680.59 L954.014 680.59 L953.454 680.59 L952.895 680.59 L952.336 680.59 L951.777 680.59 L951.217 680.59 L950.658 680.59 L950.099 680.59 L949.54 680.59 L948.98 680.59 L948.421 680.59 L947.862 680.59 L947.303 680.59 L946.743 680.59 L946.184 680.59 L945.625 680.59 L945.066 680.59 L944.506 680.59 L943.947 680.59 L943.388 680.59 L942.829 680.59 L942.269 680.59 L941.71 680.59 L941.151 680.59 L940.592 680.59 L940.032 680.59 L939.473 680.59 L938.914 680.59 L938.355 680.59 L937.795 680.59 L937.236 680.59 L936.677 680.59 L936.118 680.59 L935.558 680.59 L934.999 680.59 L934.44 680.59 L933.881 680.59 L933.321 680.59 L932.762 680.59 L932.203 680.59 L931.644 680.59 L931.084 680.59 L930.525 680.59 L929.966 680.59 L929.406 680.59 L928.847 680.59 L928.288 680.59 L927.729 680.59 L927.169 680.59 L926.61 680.59 L926.051 680.59 L925.492 680.59 L924.932 680.59 L924.373 680.59 L923.814 680.59 L923.255 680.59 L922.695 680.59 L922.136 680.59 L921.577 680.59 L921.018 680.59 L920.458 680.59 L919.899 680.59 L919.34 680.59 L918.781 680.59 L918.221 680.59 L917.662 680.59 L917.103 680.59 L916.544 680.59 L915.984 680.59 L915.425 680.59 L914.866 680.59 L914.307 680.59 L913.747 680.59 L913.188 680.59 L912.629 680.59 L912.07 680.59 L911.51 680.59 L910.951 680.59 L910.392 680.59 L909.833 680.59 L909.273 680.59 L908.714 680.59 L908.155 680.59 L907.596 680.59 L907.036 680.59 L906.477 680.59 L905.918 680.59 L905.359 680.59 L904.799 680.59 L904.24 680.59 L903.681 680.59 L903.122 680.59 L902.562 680.59 L902.003 680.59 L901.444 680.59 L900.885 680.59 L900.325 680.59 L899.766 680.59 L899.207 680.59 L898.648 680.59 L898.088 680.59 L897.529 680.59 L896.97 680.59 L896.411 680.59 L895.851 680.59 L895.292 680.59 L894.733 680.59 L894.174 680.59 L893.614 680.59 L893.055 680.59 L892.496 680.59 L891.937 680.59 L891.377 680.59 L890.818 680.59 L890.259 680.59 L889.7 680.59 L889.14 680.59 L888.581 680.59 L888.022 680.59 L887.463 680.59 L886.903 680.59 L886.344 680.59 L885.785 680.59 L885.226 680.59 L884.666 680.59 L884.107 680.59 L883.548 680.59 L882.989 680.59 L882.429 680.59 L881.87 680.59 L881.311 680.59 L880.752 680.59 L880.192 680.59 L879.633 680.59 L879.074 680.59 L878.515 680.59 L877.955 680.59 L877.396 680.59 L876.837 680.59 L876.278 680.59 L875.718 680.59 L875.159 680.59 L874.6 680.59 L874.041 680.59 L873.481 680.59 L872.922 680.59 L872.363 680.59 L871.804 680.59 L871.244 680.59 L870.685 680.59 L870.126 680.59 L869.567 680.59 L869.007 680.59 L868.448 680.59 L867.889 680.59 L867.33 680.59 L866.77 680.59 L866.211 680.59 L865.652 680.59 L865.093 680.59 L864.533 680.59 L863.974 680.59 L863.415 680.59 L862.856 680.59 L862.296 680.59 L861.737 680.59 L861.178 680.59 L860.619 680.59 L860.059 680.59 L859.5 680.59 L858.941 680.59 L858.382 680.59 L857.822 680.59 L857.263 680.59 L856.704 680.59 L856.145 680.59 L855.585 680.59 L855.026 680.59 L854.467 680.59 L853.908 680.59 L853.348 680.59 L852.789 680.59 L852.23 680.59 L851.671 680.59 L851.111 680.59 L850.552 680.59 L849.993 680.59 L849.434 680.59 L848.874 680.59 L848.315 680.59 L847.756 680.59 L847.197 680.59 L846.637 680.59 L846.078 680.59 L845.519 680.59 L844.96 680.59 L844.4 680.59 L843.841 680.59 L843.282 680.59 L842.723 680.59 L842.163 680.59 L841.604 680.59 L841.045 680.59 L840.486 680.59 L839.926 680.59 L839.367 680.59 L838.808 680.59 L838.249 680.59 L837.689 680.59 L837.13 680.59 L836.571 680.59 L836.012 680.59 L835.452 680.59 L834.893 680.59 L834.334 680.59 L833.775 680.59 L833.215 680.59 L832.656 680.59 L832.097 680.59 L831.538 680.59 L830.978 680.59 L830.419 680.59 L829.86 680.59 L829.301 680.59 L828.741 680.59 L828.182 680.59 L827.623 680.59 L827.064 680.59 L826.504 680.59 L825.945 680.59 L825.386 680.59 L824.827 680.59 L824.267 680.59 L823.708 680.59 L823.149 680.59 L822.59 680.59 L822.03 680.59 L821.471 680.59 L820.912 680.59 L820.353 680.59 L819.793 680.59 L819.234 680.59 L818.675 680.59 L818.116 680.59 L817.556 680.59 L816.997 680.59 L816.438 680.59 L815.879 680.59 L815.319 680.59 L814.76 680.59 L814.201 680.59 L813.642 680.59 L813.082 680.59 L812.523 680.59 L811.964 680.59 L811.405 680.59 L810.845 680.59 L810.286 680.59 L809.727 680.59 L809.168 680.59 L808.608 680.59 L808.049 680.59 L807.49 680.59 L806.931 680.59 L806.371 680.59 L805.812 680.59 L805.253 680.59 L804.693 680.59 L804.134 680.59 L803.575 680.59 L803.016 680.59 L802.456 680.59 L801.897 680.59 L801.338 680.59 L800.779 680.59 L800.219 680.59 L799.66 680.59 L799.101 680.59 L798.542 680.59 L797.982 680.59 L797.423 680.59 L796.864 680.59 L796.305 680.59 L795.745 680.59 L795.186 680.59 L794.627 680.59 L794.068 680.59 L793.508 680.59 L792.949 680.59 L792.39 680.59 L791.831 680.59 L791.271 680.59 L790.712 680.59 L790.153 680.59 L789.594 680.59 L789.034 680.59 L788.475 680.59 L787.916 680.59 L787.357 680.59 L786.797 680.59 L786.238 680.59 L785.679 680.59 L785.12 680.59 L784.56 680.59 L784.001 680.59 L783.442 680.59 L782.883 680.59 L782.323 680.59 L781.764 680.59 L781.205 680.59 L780.646 680.59 L780.086 680.59 L779.527 680.59 L778.968 680.59 L778.409 680.59 L777.849 680.59 L777.29 680.59 L776.731 680.59 L776.172 680.59 L775.612 680.59 L775.053 680.59 L774.494 680.59 L773.935 680.59 L773.375 680.59 L772.816 680.59 L772.257 680.59 L771.698 680.59 L771.138 680.59 L770.579 680.59 L770.02 680.59 L769.461 680.59 L768.901 680.59 L768.342 680.59 L767.783 680.59 L767.224 680.59 L766.664 680.59 L766.105 680.59 L765.546 680.59 L764.987 680.59 L764.427 680.59 L763.868 680.59 L763.309 680.59 L762.75 680.59 L762.19 680.59 L761.631 680.59 L761.072 680.59 L760.513 680.59 L759.953 680.59 L759.394 680.59 L758.835 680.59 L758.276 680.59 L757.716 680.59 L757.157 680.59 L756.598 680.59 L756.039 680.59 L755.479 680.59 L754.92 680.59 L754.361 680.59 L753.802 680.59 L753.242 680.59 L752.683 680.59 L752.124 680.59 L751.565 680.59 L751.005 680.59 L750.446 680.59 L749.887 680.59 L749.328 680.59 L748.768 680.59 L748.209 680.59 L747.65 680.59 L747.091 680.59 L746.531 680.59 L745.972 680.59 L745.413 680.59 L744.854 680.59 L744.294 680.59 L743.735 680.59 L743.176 680.59 L742.617 680.59 L742.057 680.59 L741.498 680.59 L740.939 680.59 L740.38 680.59 L739.82 680.59 L739.261 680.59 L738.702 680.59 L738.143 680.59 L737.583 680.59 L737.024 680.59 L736.465 680.59 L735.906 680.59 L735.346 680.59 L734.787 680.59 L734.228 680.59 L733.669 680.59 L733.109 680.59 L732.55 680.59 L731.991 680.59 L731.432 680.59 L730.872 680.59 L730.313 680.59 L729.754 680.59 L729.195 680.59 L728.635 680.59 L728.076 680.59 L727.517 680.59 L726.958 680.59 L726.398 680.59 L725.839 680.59 L725.28 680.59 L724.721 680.59 L724.161 680.59 L723.602 680.59 L723.043 680.59 L722.484 680.59 L721.924 680.59 L721.365 680.59 L720.806 680.59 L720.247 680.59  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.622 720.806,684.622 721.365,684.622 721.924,684.622 722.484,684.622 723.043,684.622 723.602,684.622 724.161,684.622 724.721,684.622 725.28,684.622 725.839,684.622 726.398,684.622 726.958,684.622 727.517,684.622 728.076,684.622 728.635,684.622 729.195,684.622 729.754,684.622 730.313,684.622 730.872,684.622 731.432,684.622 731.991,684.622 732.55,684.622 733.109,684.622 733.669,684.622 734.228,684.622 734.787,684.622 735.346,684.622 735.906,684.622 736.465,684.622 737.024,684.622 737.583,684.622 738.143,684.622 738.702,684.622 739.261,684.622 739.82,684.622 740.38,684.622 740.939,684.622 741.498,684.622 742.057,684.622 742.617,684.622 743.176,684.622 743.735,684.622 744.294,684.622 744.854,684.622 745.413,684.622 745.972,684.622 746.531,684.622 747.091,684.622 747.65,684.622 748.209,684.622 748.768,684.622 749.328,684.622 749.887,684.622 750.446,684.622 751.005,684.622 751.565,684.622 752.124,684.622 752.683,684.622 753.242,684.622 753.802,684.622 754.361,684.622 754.92,684.622 755.479,684.622 756.039,684.622 756.598,684.622 757.157,684.622 757.716,684.622 758.276,684.622 758.835,684.622 759.394,684.622 759.953,684.622 760.513,684.622 761.072,684.622 761.631,684.622 762.19,684.622 762.75,684.622 763.309,684.622 763.868,684.622 764.427,684.622 764.987,684.622 765.546,684.622 766.105,684.622 766.664,684.622 767.224,684.622 767.783,684.622 768.342,684.622 768.901,684.622 769.461,684.622 770.02,684.622 770.579,684.622 771.138,684.622 771.698,684.622 772.257,684.622 772.816,684.622 773.375,684.622 773.935,684.622 774.494,684.622 775.053,684.622 775.612,684.622 776.172,684.622 776.731,684.622 777.29,684.622 777.849,684.622 778.409,684.622 778.968,684.622 779.527,684.622 780.086,684.622 780.646,684.622 781.205,684.622 781.764,684.622 782.323,684.622 782.883,684.622 783.442,684.622 784.001,684.622 784.56,684.622 785.12,684.622 785.679,684.622 786.238,684.622 786.797,684.622 787.357,684.622 787.916,684.622 788.475,684.622 789.034,684.622 789.594,684.622 790.153,684.622 790.712,684.622 791.271,684.622 791.831,684.622 792.39,684.622 792.949,684.622 793.508,684.622 794.068,684.622 794.627,684.622 795.186,684.622 795.745,684.622 796.305,684.622 796.864,684.622 797.423,684.622 797.982,684.622 798.542,684.622 799.101,684.622 799.66,684.622 800.219,684.622 800.779,684.622 801.338,684.622 801.897,684.622 802.456,684.622 803.016,684.622 803.575,684.622 804.134,684.622 804.693,684.622 805.253,684.622 805.812,684.622 806.371,684.622 806.931,684.622 807.49,684.622 808.049,684.622 808.608,684.622 809.168,684.622 809.727,684.622 810.286,684.622 810.845,684.622 811.405,684.622 811.964,684.622 812.523,684.622 813.082,684.622 813.642,684.622 814.201,684.622 814.76,684.622 815.319,684.622 815.879,684.622 816.438,684.622 816.997,684.622 817.556,684.622 818.116,684.622 818.675,684.622 819.234,684.622 819.793,684.622 820.353,684.622 820.912,684.622 821.471,684.622 822.03,684.622 822.59,684.622 823.149,684.622 823.708,684.622 824.267,684.622 824.827,684.622 825.386,684.622 825.945,684.622 826.504,684.622 827.064,684.622 827.623,684.622 828.182,684.622 828.741,684.622 829.301,684.622 829.86,684.622 830.419,684.622 830.978,684.622 831.538,684.622 832.097,684.622 832.656,684.622 833.215,684.622 833.775,684.622 834.334,684.622 834.893,684.622 835.452,684.622 836.012,684.622 836.571,684.622 837.13,684.622 837.689,684.622 838.249,684.622 838.808,684.622 839.367,684.622 839.926,684.622 840.486,684.622 841.045,684.622 841.604,684.622 842.163,684.622 842.723,684.622 843.282,684.622 843.841,684.622 844.4,684.622 844.96,684.622 845.519,684.622 846.078,684.622 846.637,684.622 847.197,684.622 847.756,684.622 848.315,684.622 848.874,684.622 849.434,684.622 849.993,684.622 850.552,684.622 851.111,684.622 851.671,684.622 852.23,684.622 852.789,684.622 853.348,684.622 853.908,684.622 854.467,684.622 855.026,684.622 855.585,684.622 856.145,684.622 856.704,684.622 857.263,684.622 857.822,684.622 858.382,684.622 858.941,684.622 859.5,684.622 860.059,684.622 860.619,684.622 861.178,684.622 861.737,684.622 862.296,684.622 862.856,684.622 863.415,684.622 863.974,684.622 864.533,684.622 865.093,684.622 865.652,684.622 866.211,684.622 866.77,684.622 867.33,684.622 867.889,684.622 868.448,684.622 869.007,684.622 869.567,684.622 870.126,684.622 870.685,684.622 871.244,684.622 871.804,684.622 872.363,684.622 872.922,684.622 873.481,684.622 874.041,684.622 874.6,684.622 875.159,684.622 875.718,684.622 876.278,684.622 876.837,684.622 877.396,684.622 877.955,684.622 878.515,684.622 879.074,684.622 879.633,684.622 880.192,684.622 880.752,684.622 881.311,684.622 881.87,684.622 882.429,684.622 882.989,684.622 883.548,684.622 884.107,684.622 884.666,684.622 885.226,684.622 885.785,684.622 886.344,684.622 886.903,684.622 887.463,684.622 888.022,684.622 888.581,684.622 889.14,684.622 889.7,684.622 890.259,684.622 890.818,684.622 891.377,684.622 891.937,684.622 892.496,684.622 893.055,684.622 893.614,684.622 894.174,684.622 894.733,684.622 895.292,684.622 895.851,684.622 896.411,684.622 896.97,684.622 897.529,684.622 898.088,684.622 898.648,684.622 899.207,684.622 899.766,684.622 900.325,684.622 900.885,684.622 901.444,684.622 902.003,684.622 902.562,684.622 903.122,684.622 903.681,684.622 904.24,684.622 904.799,684.622 905.359,684.622 905.918,684.622 906.477,684.622 907.036,684.622 907.596,684.622 908.155,684.622 908.714,684.622 909.273,684.622 909.833,684.622 910.392,684.622 910.951,684.622 911.51,684.622 912.07,684.622 912.629,684.622 913.188,684.622 913.747,684.622 914.307,684.622 914.866,684.622 915.425,684.622 915.984,684.622 916.544,684.622 917.103,684.622 917.662,684.622 918.221,684.622 918.781,684.622 919.34,684.622 919.899,684.622 920.458,684.622 921.018,684.622 921.577,684.622 922.136,684.622 922.695,684.622 923.255,684.622 923.814,684.622 924.373,684.622 924.932,684.622 925.492,684.622 926.051,684.622 926.61,684.622 927.169,684.622 927.729,684.622 928.288,684.622 928.847,684.622 929.406,684.622 929.966,684.622 930.525,684.622 931.084,684.622 931.644,684.622 932.203,684.622 932.762,684.622 933.321,684.622 933.881,684.622 934.44,684.622 934.999,684.622 935.558,684.622 936.118,684.622 936.677,684.622 937.236,684.622 937.795,684.622 938.355,684.622 938.914,684.622 939.473,684.622 940.032,684.622 940.592,684.622 941.151,684.622 941.71,684.622 942.269,684.622 942.829,684.622 943.388,684.622 943.947,684.622 944.506,684.622 945.066,684.622 945.625,684.622 946.184,684.622 946.743,684.622 947.303,684.622 947.862,684.622 948.421,684.622 948.98,684.622 949.54,684.622 950.099,684.622 950.658,684.622 951.217,684.622 951.777,684.622 952.336,684.622 952.895,684.622 953.454,684.622 954.014,684.622 954.573,684.622 955.132,684.622 955.691,684.622 956.251,684.622 956.81,684.622 957.369,684.622 957.928,684.622 958.488,684.622 959.047,684.622 959.606,684.622 960.165,684.622 960.725,684.622 961.284,684.622 961.843,684.622 962.402,684.622 962.962,684.622 963.521,684.622 964.08,684.622 964.639,684.622 965.199,684.622 965.758,684.622 966.317,684.622 966.876,684.622 967.436,684.622 967.995,684.622 968.554,684.622 969.113,684.622 969.673,684.622 970.232,684.622 970.791,684.622 971.35,684.622 971.91,684.622 972.469,684.622 973.028,684.622 973.587,684.622 974.147,684.622 974.706,684.622 975.265,684.622 975.824,684.622 976.384,684.622 976.943,684.622 977.502,684.622 978.061,684.622 978.621,684.622 979.18,684.622 979.739,684.622 980.298,684.622 980.858,684.622 981.417,684.622 981.976,684.622 982.535,684.622 983.095,684.622 983.654,684.622 984.213,684.622 984.772,684.622 985.332,684.622 985.891,684.622 986.45,684.622 987.009,684.622 987.569,684.622 988.128,684.622 988.687,684.622 989.246,684.622 989.806,684.622 990.365,684.622 990.924,684.622 991.483,684.622 992.043,684.622 992.602,684.622 993.161,684.622 993.72,684.622 994.28,684.622 994.839,684.622 995.398,684.622 995.957,684.622 996.517,684.622 997.076,684.622 997.635,684.622 998.194,684.622 998.754,684.622 999.313,684.622 999.872,684.622 1000.43,684.622 1000.99,684.622 1001.55,684.622 1002.11,684.622 1002.67,684.622 1003.23,684.622 1003.79,684.622 1004.35,684.622 1004.91,684.622 1005.46,684.622 1006.02,684.622 1006.58,684.622 1007.14,684.622 1007.7,684.622 1008.26,684.622 1008.82,684.622 1009.38,684.622 1009.94,684.622 1010.5,684.622 1011.06,684.622 1011.62,684.622 1012.18,684.622 1012.73,684.622 1013.29,684.622 1013.85,684.622 1014.41,684.622 1014.97,684.622 1015.53,684.622 1016.09,684.622 1016.65,684.622 1017.21,684.622 1017.77,684.622 1018.33,684.622 1018.89,684.622 1019.45,684.622 1020.01,684.622 1020.56,684.622 1021.12,684.622 1021.68,684.622 1022.24,684.622 1022.8,684.622 1023.36,684.622 1023.92,684.622 1024.48,684.622 1025.04,684.622 1025.6,684.622 1026.16,684.622 1026.72,684.622 1027.28,684.622 1027.83,684.622 1028.39,684.622 1028.95,684.622 1029.51,684.622 1030.07,684.622 1030.63,684.622 1031.19,684.622 1031.75,684.622 1032.31,684.622 1032.87,684.622 1033.43,684.622 1033.99,684.622 1034.55,684.622 1035.1,684.622 1035.66,684.622 1036.22,684.622 1036.78,684.622 1037.34,684.622 1037.9,684.622 1038.46,684.622 1039.02,684.622 1039.58,684.622 1040.14,684.622 1040.7,684.622 1041.26,684.622 1041.82,684.622 1042.38,684.622 1042.93,684.622 1043.49,684.622 1044.05,684.622 1044.61,684.622 1045.17,684.622 1045.73,684.622 1046.29,684.622 1046.85,684.622 1047.41,684.622 1047.97,684.622 1048.53,684.622 1049.09,684.622 1049.65,684.622 1050.2,684.622 1050.76,684.622 1051.32,684.622 1051.88,684.622 1052.44,684.622 1053,684.622 1053.56,684.622 1054.12,684.622 1054.68,684.622 1055.24,684.622 1055.8,684.622 1056.36,684.622 1056.92,684.622 1057.48,684.622 1058.03,684.622 1058.59,684.622 1059.15,684.622 1059.71,684.622 1060.27,684.622 1060.83,684.622 1061.39,684.622 1061.95,684.622 1062.51,684.622 1063.07,684.622 1063.63,684.622 1064.19,684.622 1064.75,684.622 1065.3,684.622 1065.86,684.622 1066.42,684.622 1066.98,684.622 1067.54,684.622 1068.1,684.622 1068.66,684.622 1069.22,684.622 1069.78,684.622 1070.34,684.622 1070.9,684.622 1071.46,684.622 1072.02,684.622 1072.57,684.622 1073.13,684.622 1073.69,684.622 1074.25,684.622 1074.81,684.622 1075.37,684.622 1075.93,684.622 1076.49,684.622 1077.05,684.622 1077.61,684.622 1078.17,684.622 1078.73,684.622 1079.29,684.622 1079.85,684.622 1080.4,684.622 1080.96,684.622 1081.52,684.622 1082.08,684.622 1082.64,684.622 1083.2,684.622 1083.76,684.622 1084.32,684.622 1084.88,684.622 1085.44,684.622 1086,684.622 1086.56,684.622 1087.12,684.622 1087.67,684.622 1088.23,684.622 1088.79,684.622 1089.35,684.622 1089.91,684.622 1090.47,684.622 1091.03,684.622 1091.59,684.622 1092.15,684.622 1092.71,684.622 1093.27,684.622 1093.83,684.622 1094.39,684.622 1094.94,684.622 1095.5,684.622 1096.06,684.622 1096.62,684.622 1097.18,684.622 1097.74,684.622 1098.3,684.622 1098.86,684.622 1099.42,684.622 1099.98,684.622 1100.54,684.622 1101.1,684.622 1101.66,684.622 1102.22,684.622 1102.77,684.622 1103.33,684.622 1103.89,684.622 1104.45,684.622 1105.01,684.622 1105.57,684.622 1106.13,684.622 1106.69,684.622 1107.25,684.622 1107.81,684.622 1108.37,684.622 1108.93,684.622 1109.49,684.622 1110.04,684.622 1110.6,684.622 1111.16,684.622 1111.72,684.622 1112.28,684.622 1112.84,684.622 1113.4,684.622 1113.96,684.622 1114.52,684.622 1115.08,684.622 1115.64,684.622 1116.2,684.622 1116.76,684.622 1117.31,684.622 1117.87,684.622 1118.43,684.622 1118.99,684.622 1119.55,684.622 1120.11,684.622 1120.67,684.622 1121.23,684.622 1121.79,684.622 1122.35,684.622 1122.91,684.622 1123.47,684.622 1124.03,684.622 1124.59,684.622 1125.14,684.622 1125.7,684.622 1126.26,684.622 1126.82,684.622 1127.38,684.622 1127.94,684.622 1128.5,684.622 1129.06,684.622 1129.62,684.622 1130.18,684.622 1130.74,684.622 1131.3,684.622 1131.86,684.622 1132.41,684.622 1132.97,684.622 1133.53,684.622 1134.09,684.622 1134.65,684.622 1135.21,684.622 1135.77,684.622 1136.33,684.622 1136.89,684.622 1137.45,684.622 1138.01,684.622 1138.57,684.622 1139.13,684.622 1139.68,684.622 1140.24,684.622 1140.8,684.622 1141.36,684.622 1141.92,684.622 1142.48,684.622 1143.04,684.622 1143.6,684.622 1144.16,684.622 1144.72,684.622 1145.28,684.622 1145.84,684.622 1146.4,684.622 1146.96,684.622 1147.51,684.622 1148.07,684.622 1148.63,684.622 1149.19,684.622 1149.75,684.622 1150.31,684.622 1150.87,684.622 1151.43,684.622 1151.99,684.622 1152.55,684.622 1153.11,684.622 1153.67,684.622 1154.23,684.622 1154.78,684.622 1155.34,684.622 1155.9,684.622 1156.46,684.622 1157.02,684.622 1157.58,684.622 1158.14,684.622 1158.7,684.622 1159.26,684.622 1159.82,684.622 1160.38,684.622 1160.94,684.622 1161.5,684.622 1162.05,684.622 1162.61,684.622 1163.17,684.622 1163.73,684.622 1164.29,684.622 1164.85,684.622 1165.41,684.622 1165.97,684.622 1166.53,684.622 1167.09,684.622 1167.65,684.622 1168.21,684.622 1168.77,684.622 1169.33,684.622 1169.88,684.622 1170.44,684.622 1171,684.622 1171.56,684.622 1172.12,684.622 1172.68,684.622 1173.24,684.622 1173.8,684.622 1174.36,684.622 1174.92,684.622 1175.48,684.622 1176.04,684.622 1176.6,684.622 1177.15,684.622 1177.71,684.622 1178.27,684.622 1178.83,684.622 1179.39,684.622 1179.95,684.622 1180.51,684.622 1181.07,684.622 1181.63,684.622 1182.19,684.622 1182.75,684.622 1183.31,684.622 1183.87,684.622 1184.43,684.622 1184.98,684.622 1185.54,684.622 1186.1,684.622 1186.66,684.622 1187.22,684.622 1187.78,684.622 1188.34,684.622 1188.9,684.622 1189.46,684.622 1190.02,684.622 1190.58,684.622 1191.14,684.622 1191.7,684.622 1192.25,684.622 1192.81,684.622 1193.37,684.622 1193.93,684.622 1194.49,684.622 1195.05,684.622 1195.61,684.622 1196.17,684.622 1196.73,684.622 1197.29,684.622 1197.85,684.622 1198.41,684.622 1198.97,684.622 1199.52,684.622 1200.08,684.622 1200.64,684.622 1201.2,684.622 1201.76,684.622 1202.32,684.622 1202.88,684.622 1203.44,684.622 1204,684.622 1204.56,684.622 1205.12,684.622 1205.68,684.622 1206.24,684.622 1206.8,684.622 1207.35,684.622 1207.91,684.622 1208.47,684.622 1209.03,684.622 1209.59,684.622 1210.15,684.622 1210.71,684.622 1211.27,684.622 1211.83,684.622 1212.39,684.622 1212.95,684.622 1213.51,684.622 1214.07,684.622 1214.62,684.622 1215.18,684.622 1215.74,684.622 1216.3,684.622 1216.86,684.622 1217.42,684.622 1217.98,684.622 1218.54,684.622 1219.1,684.622 1219.66,684.622 1220.22,684.622 1220.78,684.622 1221.34,684.622 1221.89,684.622 1222.45,684.622 1223.01,684.622 1223.57,684.622 1224.13,684.622 1224.69,684.622 1225.25,684.622 1225.81,684.622 1226.37,684.622 1226.93,684.622 1227.49,684.622 1228.05,684.622 1228.61,684.622 1229.17,684.622 1229.72,684.622 1230.28,684.622 1230.84,684.622 1231.4,684.622 1231.96,684.622 1232.52,684.622 1233.08,684.622 1233.64,684.622 1234.2,684.622 1234.76,684.622 1235.32,684.622 1235.88,684.622 1236.44,684.622 1236.99,684.622 1237.55,684.622 1238.11,684.622 1238.67,684.622 1239.23,684.622 1239.79,684.622 1240.35,684.622 1240.91,684.622 1241.47,684.622 1242.03,684.622 1242.59,684.622 1243.15,684.622 1243.71,684.622 1244.26,684.622 1244.82,684.622 1245.38,684.622 1245.94,684.622 1246.5,684.622 1247.06,684.622 1247.62,684.622 1248.18,684.622 1248.74,684.622 1249.3,684.622 1249.86,684.622 1250.42,684.622 1250.98,684.622 1251.54,684.622 1252.09,684.622 1252.65,684.622 1253.21,684.622 1253.77,684.622 1254.33,684.622 1254.89,684.622 1255.45,684.622 1256.01,684.622 1256.57,684.622 1257.13,684.622 1257.69,684.622 1258.25,684.622 1258.81,684.622 1259.36,684.622 1259.92,684.622 1260.48,684.622 1261.04,684.622 1261.6,684.622 1262.16,684.622 1262.72,684.622 1263.28,684.622 1263.84,684.622 1264.4,684.622 1264.96,684.622 1265.52,684.622 1266.08,684.622 1266.63,684.622 1267.19,684.622 1267.75,684.622 1268.31,684.622 1268.87,684.622 1269.43,684.622 1269.99,684.622 1270.55,684.622 1271.11,684.622 1271.67,684.622 1272.23,684.622 1272.79,684.622 1273.35,684.622 1273.91,684.622 1274.46,684.622 1275.02,684.622 1275.58,684.622 1276.14,684.622 1276.7,684.622 1277.26,684.622 1277.82,684.622 1278.38,684.622 1278.94,684.622 1279.5,684.622 1280.06,684.622 1280.62,684.622 1281.18,684.622 1281.73,684.622 1282.29,684.622 1282.85,684.622 1283.41,684.622 1283.97,684.622 1284.53,684.622 1285.09,684.622 1285.65,684.622 1286.21,684.622 1286.77,684.622 1287.33,684.622 1287.89,684.622 1288.45,684.622 1289,684.622 1289.56,684.622 1290.12,684.622 1290.68,684.622 1291.24,684.622 1291.8,684.622 1292.36,684.622 1292.92,684.622 1293.48,684.622 1294.04,684.622 1294.6,684.622 1295.16,684.622 1295.72,684.622 1296.28,684.622 1296.83,684.622 1297.39,684.622 1297.95,684.622 1298.51,684.622 1299.07,684.622 1299.63,684.622 1300.19,684.622 1300.75,684.622 1301.31,684.622 1301.87,684.622 1302.43,684.622 1302.99,684.622 1303.55,684.622 1304.1,684.622 1304.66,684.622 1305.22,684.622 1305.78,684.622 1306.34,684.622 1306.9,684.622 1307.46,684.622 1308.02,684.622 1308.58,684.622 1309.14,684.622 1309.7,684.622 1310.26,684.622 1310.82,684.622 1311.38,684.622 1311.93,684.622 1312.49,684.622 1313.05,684.622 1313.61,684.622 1314.17,684.622 1314.73,684.622 1315.29,684.622 1315.85,684.622 1316.41,684.622 1316.97,684.622 1317.53,684.622 1318.09,684.622 1318.65,684.622 1319.2,684.622 1319.76,684.622 1320.32,684.622 1320.88,684.622 1321.44,684.622 1322,684.622 1322.56,684.622 1323.12,684.622 1323.68,684.622 1324.24,684.622 1324.8,684.622 1325.36,684.622 1325.92,684.622 1326.47,684.622 1327.03,684.622 1327.59,684.622 1328.15,684.622 1328.71,684.622 1329.27,684.622 1329.83,684.622 1330.39,684.622 1330.95,684.622 1331.51,684.622 1332.07,684.622 1332.63,684.622 1333.19,684.622 1333.75,684.622 1334.3,684.622 1334.86,684.622 1335.42,684.622 1335.98,684.622 1336.54,684.622 1337.1,684.622 1337.66,684.622 1338.22,684.622 1338.78,684.622 1339.34,684.622 1339.9,684.622 1340.46,684.622 1341.02,684.622 1341.57,684.622 1342.13,684.622 1342.69,684.622 1343.25,684.622 1343.81,684.622 1344.37,684.622 1344.93,684.622 1345.49,684.622 1346.05,684.622 1346.61,684.622 1347.17,684.622 1347.73,684.622 1348.29,684.622 1348.84,684.622 1349.4,684.622 1349.96,684.622 1350.52,684.622 1351.08,684.622 1351.64,684.622 1352.2,684.622 1352.76,684.622 1353.32,684.622 1353.88,684.622 1354.44,684.622 1355,684.622 1355.56,684.622 1356.12,684.622 1356.67,684.622 1357.23,684.622 1357.79,684.622 1358.35,684.622 1358.91,684.622 1359.47,684.622 1360.03,684.622 1360.59,684.622 1361.15,684.622 1361.71,684.622 1362.27,684.622 1362.83,684.622 1363.39,684.622 1363.94,684.622 1364.5,684.622 1365.06,684.622 1365.62,684.622 1366.18,684.622 1366.74,684.622 1367.3,684.622 1367.86,684.622 1368.42,684.622 1368.98,684.622 1369.54,684.622 1370.1,684.622 1370.66,684.622 1371.21,684.622 1371.77,684.622 1372.33,684.622 1372.89,684.622 1373.45,684.622 1374.01,684.622 1374.57,684.622 1375.13,684.622 1375.69,684.622 1376.25,684.622 1376.81,684.622 1377.37,684.622 1377.93,684.622 1378.49,684.622 1379.04,684.622 1379.6,684.622 1380.16,684.622 1380.72,684.622 1381.28,684.622 1381.84,684.622 1382.4,684.622 1382.96,684.622 1383.52,684.622 1384.08,684.622 1384.64,684.622 1385.2,684.622 1385.76,684.622 1386.31,684.622 1386.87,684.622 1387.43,684.622 1387.99,684.622 1388.55,684.622 1389.11,684.622 1389.67,684.622 1390.23,684.622 1390.79,684.622 1391.35,684.622 1391.91,684.622 1392.47,684.622 1393.03,684.622 1393.58,684.622 1394.14,684.622 1394.7,684.622 1395.26,684.622 1395.82,684.622 1396.38,684.622 1396.94,684.622 1397.5,684.622 1398.06,684.622 1398.62,684.622 1399.18,684.622 1399.74,684.622 1400.3,684.622 1400.86,684.622 1401.41,684.622 1401.97,684.622 1402.53,684.622 1403.09,684.622 1403.65,684.622 1404.21,684.622 1404.77,684.622 1405.33,684.622 1405.89,684.622 1406.45,684.622 1407.01,684.622 1407.57,684.622 1408.13,684.622 1408.68,684.622 1409.24,684.622 1409.8,684.622 1410.36,684.622 1410.92,684.622 1411.48,684.622 1412.04,684.622 1412.6,684.622 1413.16,684.622 1413.72,684.622 1414.28,684.622 1414.84,684.622 1415.4,684.622 1415.95,684.622 1416.51,684.622 1417.07,684.622 1417.63,684.622 1418.19,684.622 1418.75,684.622 1419.31,684.622 1419.87,684.622 1420.43,684.622 1420.99,684.622 1421.55,684.622 1422.11,684.622 1422.67,684.622 1423.23,684.622 1423.78,684.622 1424.34,684.622 1424.9,684.622 1425.46,684.622 1426.02,684.622 1426.58,684.622 1427.14,684.622 1427.7,684.622 1428.26,684.622 1428.82,684.622 1429.38,684.622 1429.94,684.622 1430.5,684.622 1431.05,684.622 1431.61,684.622 1432.17,684.622 1432.73,684.622 1433.29,684.622 1433.85,684.622 1434.41,684.622 1434.97,684.622 1435.53,684.622 1436.09,684.622 1436.65,684.622 1437.21,684.622 1437.77,684.622 1438.33,684.622 1438.88,684.622 1439.44,684.622 1440,684.622 1440.56,684.622 1441.12,684.622 1441.68,684.622 1442.24,684.622 1442.8,684.622 1443.36,684.622 1443.92,684.622 1444.48,684.622 1445.04,684.622 1445.6,684.622 1446.15,684.622 1446.71,684.622 1447.27,684.622 1447.83,684.622 1448.39,684.622 1448.95,684.622 1449.51,684.622 1450.07,684.622 1450.63,684.622 1451.19,684.622 1451.75,684.622 1452.31,684.622 1452.87,684.622 1453.42,684.622 1453.98,684.622 1454.54,684.622 1455.1,684.622 1455.66,684.622 1456.22,684.622 1456.78,684.622 1457.34,684.622 1457.9,684.622 1458.46,684.622 1459.02,684.622 1459.58,684.622 1460.14,684.622 1460.7,684.622 1461.25,684.622 1461.81,684.622 1462.37,684.622 1462.93,684.622 1463.49,684.622 1464.05,684.622 1464.61,684.622 1465.17,684.622 1465.73,684.622 1466.29,684.622 1466.85,684.622 1467.41,684.622 1467.97,684.622 1468.52,684.622 1469.08,684.622 1469.64,684.622 1470.2,684.622 1470.76,684.622 1471.32,684.622 1471.88,684.622 1472.44,684.622 1473,684.622 1473.56,684.622 1474.12,684.622 1474.68,684.622 1475.24,684.622 1475.79,684.622 1476.35,684.622 1476.91,684.622 1477.47,684.622 1478.03,684.622 1478.59,684.622 1479.15,684.622 1479.71,684.622 1480.27,684.622 1480.83,684.622 1481.39,684.622 1481.95,684.622 1482.51,684.622 1483.07,684.622 1483.62,684.622 1484.18,684.622 1484.74,684.622 1485.3,684.622 1485.86,684.622 1486.42,684.622 1486.98,684.622 1487.54,684.622 1488.1,684.622 1488.66,684.622 1489.22,684.622 1489.78,684.622 1490.34,684.622 1490.89,684.622 1491.45,684.622 1492.01,684.622 1492.57,684.622 1493.13,684.622 1493.69,684.622 1494.25,684.622 1494.81,684.622 1495.37,684.622 1495.93,684.622 1496.49,684.622 1497.05,684.622 1497.61,684.622 1498.16,684.622 1498.72,684.622 1499.28,684.622 1499.84,684.622 1500.4,684.622 1500.96,684.622 1501.52,684.622 1502.08,684.622 1502.64,684.622 1503.2,684.622 1503.76,684.622 1504.32,684.622 1504.88,684.622 1505.44,684.622 1505.99,684.622 1506.55,684.622 1507.11,684.622 1507.67,684.622 1508.23,684.622 1508.79,684.622 1509.35,684.622 1509.91,684.622 1510.47,684.622 1511.03,684.622 1511.59,684.622 1512.15,684.622 1512.71,684.622 1513.26,684.622 1513.82,684.622 1514.38,684.622 1514.94,684.622 1515.5,684.622 1516.06,684.622 1516.62,684.622 1517.18,684.622 1517.74,684.622 1518.3,684.622 1518.86,684.622 1519.42,684.622 1519.98,684.622 1520.53,684.622 1521.09,684.622 1521.65,684.622 1522.21,684.622 1522.77,684.622 1523.33,684.622 1523.89,684.622 1524.45,684.622 1525.01,684.622 1525.57,684.622 1526.13,684.622 1526.69,684.622 1527.25,684.622 1527.81,684.622 1528.36,684.622 1528.92,684.622 1529.48,684.622 1530.04,684.622 1530.6,684.622 1531.16,684.622 1531.72,684.622 1532.28,684.622 1532.84,684.622 1533.4,684.622 1533.96,684.622 1534.52,684.622 1535.08,684.622 1535.63,684.622 1536.19,684.622 1536.75,684.622 1537.31,684.622 1537.87,684.622 1538.43,684.622 1538.99,684.622 1539.55,684.622 1540.11,684.622 1540.67,684.622 1541.23,684.622 1541.79,684.622 1542.35,684.622 1542.9,684.622 1543.46,684.622 1544.02,684.622 1544.58,684.622 1545.14,684.622 1545.7,684.622 1546.26,684.622 1546.82,684.622 1547.38,684.622 1547.94,684.622 1548.5,684.622 1549.06,684.622 1549.62,684.622 1550.18,684.622 1550.73,684.622 1551.29,684.622 1551.85,684.622 1552.41,684.622 1552.97,684.622 1553.53,684.622 1554.09,684.622 1554.65,684.622 1555.21,684.622 1555.77,684.622 1556.33,684.622 1556.89,684.622 1557.45,684.622 1558,684.622 1558.56,684.622 1559.12,684.622 1559.68,684.622 1560.24,684.622 1560.8,684.622 1561.36,684.622 1561.92,684.622 1562.48,684.622 1563.04,684.622 1563.6,684.622 1564.16,684.622 1564.72,684.622 1565.28,684.622 1565.83,684.622 1566.39,684.622 1566.95,684.622 1567.51,684.622 1568.07,684.622 1568.63,684.622 1569.19,684.622 1569.75,684.622 1570.31,684.622 1570.87,684.622 1571.43,684.622 1571.99,684.622 1572.55,684.622 1573.1,684.622 1573.66,684.622 1574.22,684.622 1574.78,684.622 1575.34,684.622 1575.9,684.622 1576.46,684.622 1577.02,684.622 1577.58,684.622 1578.14,684.622 1578.7,684.622 1579.26,684.622 1579.82,684.622 1580.37,684.622 1580.93,684.622 1581.49,684.622 1582.05,684.622 1582.61,684.622 1583.17,684.622 1583.73,684.622 1584.29,684.622 1584.85,684.622 1585.41,684.622 1585.97,684.622 1586.53,684.622 1587.09,684.622 1587.65,684.622 1588.2,684.622 1588.76,684.622 1589.32,684.622 1589.88,684.622 1590.44,684.622 1591,684.622 1591.56,684.622 1592.12,684.622 1592.68,684.622 1593.24,684.622 1593.8,684.622 1594.36,684.622 1594.92,684.622 1595.47,684.622 1596.03,684.622 1596.59,684.622 1597.15,684.622 1597.71,684.622 1598.27,684.622 1598.83,684.622 1599.39,684.622 1599.95,684.622 1600.51,684.622 1601.07,684.622 1601.63,684.622 1602.19,684.622 1602.74,684.622 1603.3,684.622 1603.86,684.622 1604.42,684.622 1604.98,684.622 1605.54,684.622 1606.1,684.622 1606.66,684.622 1607.22,684.622 1607.78,684.622 1608.34,684.622 1608.9,684.622 1609.46,684.622 1610.02,684.622 1610.57,684.622 1611.13,684.622 1611.69,684.622 1612.25,684.622 1612.81,684.622 1613.37,684.622 1613.93,684.622 1614.49,684.622 1615.05,684.622 1615.61,684.622 1616.17,684.622 1616.73,684.622 1617.29,684.622 1617.84,684.622 1618.4,684.622 1618.96,684.622 1619.52,684.622 1620.08,684.622 1620.64,684.622 1621.2,684.622 1621.76,684.622 1622.32,684.622 1622.88,684.622 1623.44,684.622 1624,684.622 1624.56,684.622 1625.11,684.622 1625.67,684.622 1626.23,684.622 1626.79,684.622 1627.35,684.622 1627.91,684.622 1628.47,684.622 1629.03,684.622 1629.59,684.622 1630.15,684.622 1630.71,684.622 1631.27,684.622 1631.83,684.622 1632.39,684.622 1632.94,684.622 1633.5,684.622 1634.06,684.622 1634.62,684.622 1635.18,684.622 1635.74,684.622 1636.3,684.622 1636.86,684.622 1637.42,684.622 1637.98,684.622 1638.54,684.622 1639.1,684.622 1639.66,684.622 1640.21,684.622 1640.77,684.622 1641.33,684.622 1641.89,684.622 1642.45,684.622 1643.01,684.622 1643.57,684.622 1644.13,684.622 1644.69,684.622 1645.25,684.622 1645.81,684.622 1646.37,684.622 1646.93,684.622 1647.48,684.622 1648.04,684.622 1648.6,684.622 1649.16,684.622 1649.72,684.622 1650.28,684.622 1650.84,684.622 1651.4,684.622 1651.96,684.622 1652.52,684.622 1653.08,684.622 1653.64,684.622 1654.2,684.622 1654.76,684.622 1655.31,684.622 1655.87,684.622 1656.43,684.622 1656.99,684.622 1657.55,684.622 1658.11,684.622 1658.67,684.622 1659.23,684.622 1659.79,684.622 1660.35,684.622 1660.91,684.622 1661.47,684.622 1662.03,684.622 1662.58,684.622 1663.14,684.622 1663.7,684.622 1664.26,684.622 1664.82,684.622 1665.38,684.622 1665.94,684.622 1666.5,684.622 1667.06,684.622 1667.62,684.622 1668.18,684.622 1668.74,684.622 1669.3,684.622 1669.85,684.622 1670.41,684.622 1670.97,684.622 1671.53,684.622 1672.09,684.622 1672.65,684.622 1673.21,684.622 1673.77,684.622 1674.33,684.622 1674.89,684.622 1675.45,684.622 1676.01,684.622 1676.57,684.622 1677.13,684.622 1677.68,684.622 1678.24,684.622 1678.8,684.622 1679.36,684.622 1679.92,684.622 1680.48,684.622 1681.04,684.622 1681.6,684.622 1682.16,684.622 1682.72,684.622 1683.28,684.622 1683.84,684.622 1684.4,684.622 1684.95,684.622 1685.51,684.622 1686.07,684.622 1686.63,684.622 1687.19,684.622 1687.75,684.622 1688.31,684.622 1688.87,684.622 1689.43,684.622 1689.99,684.622 1690.55,684.622 1691.11,684.622 1691.67,684.622 1692.23,684.622 1692.78,684.622 1693.34,684.622 1693.9,684.622 1694.46,684.622 1695.02,684.622 1695.58,684.622 1696.14,684.622 1696.7,684.622 1697.26,684.622 1697.82,684.622 1698.38,684.622 1698.94,684.622 1699.5,684.622 1700.05,684.622 1700.61,684.622 1701.17,684.622 1701.73,684.622 1702.29,684.622 1702.85,684.622 1703.41,684.622 1703.97,684.622 1704.53,684.622 1705.09,684.622 1705.65,684.622 1706.21,684.622 1706.77,684.622 1707.32,684.622 1707.88,684.622 1708.44,684.622 1709,684.622 1709.56,684.622 1710.12,684.622 1710.68,684.622 1711.24,684.622 1711.8,684.622 1712.36,684.622 1712.92,684.622 1713.48,684.622 1714.04,684.622 1714.6,684.622 1715.15,684.622 1715.71,684.622 1716.27,684.622 1716.83,684.622 1717.39,684.622 1717.95,684.622 1718.51,684.622 1719.07,684.622 1719.63,684.622 1720.19,684.622 1720.75,684.622 1721.31,684.622 1721.87,684.622 1722.42,684.622 1722.98,684.622 1723.54,684.622 1724.1,684.622 1724.66,684.622 1725.22,684.622 1725.78,684.622 1726.34,684.622 1726.9,684.622 1727.46,684.622 1728.02,684.622 1728.58,684.622 1729.14,684.622 1729.69,684.622 1730.25,684.622 1730.81,684.622 1731.37,684.622 1731.93,684.622 1732.49,684.622 1733.05,684.622 1733.61,684.622 1734.17,684.622 1734.73,684.622 1735.29,684.622 1735.85,684.622 1736.41,684.622 1736.97,684.622 1737.52,684.622 1738.08,684.622 1738.64,684.622 1739.2,684.622 1739.76,684.622 1740.32,684.622 1740.88,684.622 1741.44,684.622 1742,684.622 1742.56,684.622 1743.12,684.622 1743.68,684.622 1744.24,684.622 1744.79,684.622 1745.35,684.622 1745.91,684.622 1746.47,684.622 1747.03,684.622 1747.59,684.622 1748.15,684.622 1748.71,684.622 1749.27,684.622 1749.83,684.622 1750.39,684.622 1750.95,684.622 1751.51,684.622 1752.06,684.622 1752.62,684.622 1753.18,684.622 1753.74,684.622 1754.3,684.622 1754.86,684.622 1755.42,684.622 1755.98,684.622 1756.54,684.622 1757.1,684.622 1757.66,684.622 1758.22,684.622 1758.78,684.622 1759.34,684.622 1759.89,684.622 1760.45,684.622 1761.01,684.622 1761.57,684.622 1762.13,684.622 1762.69,684.622 1763.25,684.622 1763.81,684.622 1764.37,684.622 1764.93,684.622 1765.49,684.622 1766.05,684.622 1766.61,684.622 1767.16,684.622 1767.72,684.622 1768.28,684.622 1768.84,684.622 1769.4,684.622 1769.96,684.622 1770.52,684.622 1771.08,684.622 1771.64,684.622 1772.2,684.622 1772.76,684.622 1773.32,684.622 1773.88,684.622 1774.43,684.622 1774.99,684.622 1775.55,684.622 1776.11,684.622 1776.67,684.622 1777.23,684.622 1777.79,684.622 1778.35,684.622 1778.91,684.622 1779.47,684.622 1780.03,684.622 1780.59,684.622 1781.15,684.622 1781.71,684.622 1782.26,684.622 1782.82,684.622 1783.38,684.622 1783.94,684.622 1784.5,684.622 1785.06,684.622 1785.62,684.622 1786.18,684.622 1786.74,684.622 1787.3,684.622 1787.86,684.622 1788.42,684.622 1788.98,684.622 1789.53,684.622 1790.09,684.622 1790.65,684.622 1791.21,684.622 1791.77,684.622 1792.33,684.622 1792.89,684.622 1793.45,684.622 1794.01,684.622 1794.57,684.622 1795.13,684.622 1795.69,684.622 1796.25,684.622 1796.8,684.622 1797.36,684.622 1797.92,684.622 1798.48,684.622 1799.04,684.622 1799.6,684.622 1800.16,684.622 1800.72,684.622 1801.28,684.622 1801.84,684.622 1802.4,684.622 1802.96,684.622 1803.52,684.622 1804.08,684.622 1804.63,684.622 1805.19,684.622 1805.75,684.622 1806.31,684.622 1806.87,684.622 1807.43,684.622 1807.99,684.622 1808.55,684.622 1809.11,684.622 1809.67,684.622 1810.23,684.622 1810.79,684.622 1811.35,684.622 1811.9,684.622 1812.46,684.622 1813.02,684.622 1813.58,684.622 1814.14,684.622 1814.7,684.622 1815.26,684.622 1815.82,684.622 1816.38,684.622 1816.94,684.622 1817.5,684.622 1818.06,684.622 1818.62,684.622 1819.18,684.622 1819.73,684.622 1820.29,684.622 1820.85,684.622 1821.41,684.622 1821.97,684.622 1822.53,684.622 1823.09,684.622 1823.65,684.622 1824.21,684.622 1824.77,684.622 1825.33,684.622 1825.89,684.622 1826.45,684.622 1827,684.622 1827.56,684.622 1828.12,684.622 1828.68,684.622 1829.24,684.622 1829.8,684.622 1830.36,684.622 1830.92,684.622 1831.48,684.622 1832.04,684.622 1832.6,684.622 1833.16,684.622 1833.72,684.622 1834.27,684.622 1834.83,684.622 1835.39,684.622 1835.95,684.622 1836.51,684.622 1837.07,684.622 1837.63,684.622 1838.19,684.622 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 684.647 L720.806 684.647 L721.365 684.647 L721.924 684.647 L722.484 684.647 L723.043 684.647 L723.602 684.647 L724.161 684.647 L724.721 684.647 L725.28 684.647 L725.839 684.647 L726.398 684.647 L726.958 684.647 L727.517 684.647 L728.076 684.647 L728.635 684.647 L729.195 684.647 L729.754 684.647 L730.313 684.647 L730.872 684.647 L731.432 684.647 L731.991 684.647 L732.55 684.647 L733.109 684.647 L733.669 684.647 L734.228 684.647 L734.787 684.647 L735.346 684.647 L735.906 684.647 L736.465 684.647 L737.024 684.647 L737.583 684.647 L738.143 684.647 L738.702 684.647 L739.261 684.647 L739.82 684.647 L740.38 684.647 L740.939 684.647 L741.498 684.647 L742.057 684.647 L742.617 684.647 L743.176 684.647 L743.735 684.647 L744.294 684.647 L744.854 684.647 L745.413 684.647 L745.972 684.647 L746.531 684.647 L747.091 684.647 L747.65 684.647 L748.209 684.647 L748.768 684.647 L749.328 684.647 L749.887 684.647 L750.446 684.647 L751.005 684.647 L751.565 684.647 L752.124 684.647 L752.683 684.647 L753.242 684.647 L753.802 684.647 L754.361 684.647 L754.92 684.647 L755.479 684.647 L756.039 684.647 L756.598 684.647 L757.157 684.647 L757.716 684.647 L758.276 684.647 L758.835 684.647 L759.394 684.647 L759.953 684.647 L760.513 684.647 L761.072 684.647 L761.631 684.647 L762.19 684.647 L762.75 684.647 L763.309 684.647 L763.868 684.647 L764.427 684.647 L764.987 684.647 L765.546 684.647 L766.105 684.647 L766.664 684.647 L767.224 684.647 L767.783 684.647 L768.342 684.647 L768.901 684.647 L769.461 684.647 L770.02 684.647 L770.579 684.647 L771.138 684.647 L771.698 684.647 L772.257 684.647 L772.816 684.647 L773.375 684.647 L773.935 684.647 L774.494 684.647 L775.053 684.647 L775.612 684.647 L776.172 684.647 L776.731 684.647 L777.29 684.647 L777.849 684.647 L778.409 684.647 L778.968 684.647 L779.527 684.647 L780.086 684.647 L780.646 684.647 L781.205 684.647 L781.764 684.647 L782.323 684.647 L782.883 684.647 L783.442 684.647 L784.001 684.647 L784.56 684.647 L785.12 684.647 L785.679 684.647 L786.238 684.647 L786.797 684.647 L787.357 684.647 L787.916 684.647 L788.475 684.647 L789.034 684.647 L789.594 684.647 L790.153 684.647 L790.712 684.647 L791.271 684.647 L791.831 684.647 L792.39 684.647 L792.949 684.647 L793.508 684.647 L794.068 684.647 L794.627 684.647 L795.186 684.647 L795.745 684.647 L796.305 684.647 L796.864 684.647 L797.423 684.647 L797.982 684.647 L798.542 684.647 L799.101 684.647 L799.66 684.647 L800.219 684.647 L800.779 684.647 L801.338 684.647 L801.897 684.647 L802.456 684.647 L803.016 684.647 L803.575 684.647 L804.134 684.647 L804.693 684.647 L805.253 684.647 L805.812 684.647 L806.371 684.647 L806.931 684.647 L807.49 684.647 L808.049 684.647 L808.608 684.647 L809.168 684.647 L809.727 684.647 L810.286 684.647 L810.845 684.647 L811.405 684.647 L811.964 684.647 L812.523 684.647 L813.082 684.647 L813.642 684.647 L814.201 684.647 L814.76 684.647 L815.319 684.647 L815.879 684.647 L816.438 684.647 L816.997 684.647 L817.556 684.647 L818.116 684.647 L818.675 684.647 L819.234 684.647 L819.793 684.647 L820.353 684.647 L820.912 684.647 L821.471 684.647 L822.03 684.647 L822.59 684.647 L823.149 684.647 L823.708 684.647 L824.267 684.647 L824.827 684.647 L825.386 684.647 L825.945 684.647 L826.504 684.647 L827.064 684.647 L827.623 684.647 L828.182 684.647 L828.741 684.647 L829.301 684.647 L829.86 684.647 L830.419 684.647 L830.978 684.647 L831.538 684.647 L832.097 684.647 L832.656 684.647 L833.215 684.647 L833.775 684.647 L834.334 684.647 L834.893 684.647 L835.452 684.647 L836.012 684.647 L836.571 684.647 L837.13 684.647 L837.689 684.647 L838.249 684.647 L838.808 684.647 L839.367 684.647 L839.926 684.647 L840.486 684.647 L841.045 684.647 L841.604 684.647 L842.163 684.647 L842.723 684.647 L843.282 684.647 L843.841 684.647 L844.4 684.647 L844.96 684.647 L845.519 684.647 L846.078 684.647 L846.637 684.647 L847.197 684.647 L847.756 684.647 L848.315 684.647 L848.874 684.647 L849.434 684.647 L849.993 684.647 L850.552 684.647 L851.111 684.647 L851.671 684.647 L852.23 684.647 L852.789 684.647 L853.348 684.647 L853.908 684.647 L854.467 684.647 L855.026 684.647 L855.585 684.647 L856.145 684.647 L856.704 684.647 L857.263 684.647 L857.822 684.647 L858.382 684.647 L858.941 684.647 L859.5 684.647 L860.059 684.647 L860.619 684.647 L861.178 684.647 L861.737 684.647 L862.296 684.647 L862.856 684.647 L863.415 684.647 L863.974 684.647 L864.533 684.647 L865.093 684.647 L865.652 684.647 L866.211 684.647 L866.77 684.647 L867.33 684.647 L867.889 684.647 L868.448 684.647 L869.007 684.647 L869.567 684.647 L870.126 684.647 L870.685 684.647 L871.244 684.647 L871.804 684.647 L872.363 684.647 L872.922 684.647 L873.481 684.647 L874.041 684.647 L874.6 684.647 L875.159 684.647 L875.718 684.647 L876.278 684.647 L876.837 684.647 L877.396 684.647 L877.955 684.647 L878.515 684.647 L879.074 684.647 L879.633 684.647 L880.192 684.647 L880.752 684.647 L881.311 684.647 L881.87 684.647 L882.429 684.647 L882.989 684.647 L883.548 684.647 L884.107 684.647 L884.666 684.647 L885.226 684.647 L885.785 684.647 L886.344 684.647 L886.903 684.647 L887.463 684.647 L888.022 684.647 L888.581 684.647 L889.14 684.647 L889.7 684.647 L890.259 684.647 L890.818 684.647 L891.377 684.647 L891.937 684.647 L892.496 684.647 L893.055 684.647 L893.614 684.647 L894.174 684.647 L894.733 684.647 L895.292 684.647 L895.851 684.647 L896.411 684.647 L896.97 684.647 L897.529 684.647 L898.088 684.647 L898.648 684.647 L899.207 684.647 L899.766 684.647 L900.325 684.647 L900.885 684.647 L901.444 684.647 L902.003 684.647 L902.562 684.647 L903.122 684.647 L903.681 684.647 L904.24 684.647 L904.799 684.647 L905.359 684.647 L905.918 684.647 L906.477 684.647 L907.036 684.647 L907.596 684.647 L908.155 684.647 L908.714 684.647 L909.273 684.647 L909.833 684.647 L910.392 684.647 L910.951 684.647 L911.51 684.647 L912.07 684.647 L912.629 684.647 L913.188 684.647 L913.747 684.647 L914.307 684.647 L914.866 684.647 L915.425 684.647 L915.984 684.647 L916.544 684.647 L917.103 684.647 L917.662 684.647 L918.221 684.647 L918.781 684.647 L919.34 684.647 L919.899 684.647 L920.458 684.647 L921.018 684.647 L921.577 684.647 L922.136 684.647 L922.695 684.647 L923.255 684.647 L923.814 684.647 L924.373 684.647 L924.932 684.647 L925.492 684.647 L926.051 684.647 L926.61 684.647 L927.169 684.647 L927.729 684.647 L928.288 684.647 L928.847 684.647 L929.406 684.647 L929.966 684.647 L930.525 684.647 L931.084 684.647 L931.644 684.647 L932.203 684.647 L932.762 684.647 L933.321 684.647 L933.881 684.647 L934.44 684.647 L934.999 684.647 L935.558 684.647 L936.118 684.647 L936.677 684.647 L937.236 684.647 L937.795 684.647 L938.355 684.647 L938.914 684.647 L939.473 684.647 L940.032 684.647 L940.592 684.647 L941.151 684.647 L941.71 684.647 L942.269 684.647 L942.829 684.647 L943.388 684.647 L943.947 684.647 L944.506 684.647 L945.066 684.647 L945.625 684.647 L946.184 684.647 L946.743 684.647 L947.303 684.647 L947.862 684.647 L948.421 684.647 L948.98 684.647 L949.54 684.647 L950.099 684.647 L950.658 684.647 L951.217 684.647 L951.777 684.647 L952.336 684.647 L952.895 684.647 L953.454 684.647 L954.014 684.647 L954.573 684.647 L955.132 684.647 L955.691 684.647 L956.251 684.647 L956.81 684.647 L957.369 684.647 L957.928 684.647 L958.488 684.647 L959.047 684.647 L959.606 684.647 L960.165 684.647 L960.725 684.647 L961.284 684.647 L961.843 684.647 L962.402 684.647 L962.962 684.647 L963.521 684.647 L964.08 684.647 L964.639 684.647 L965.199 684.647 L965.758 684.647 L966.317 684.647 L966.876 684.647 L967.436 684.647 L967.995 684.647 L968.554 684.647 L969.113 684.647 L969.673 684.647 L970.232 684.647 L970.791 684.647 L971.35 684.647 L971.91 684.647 L972.469 684.647 L973.028 684.647 L973.587 684.647 L974.147 684.647 L974.706 684.647 L975.265 684.647 L975.824 684.647 L976.384 684.647 L976.943 684.647 L977.502 684.647 L978.061 684.647 L978.621 684.647 L979.18 684.647 L979.739 684.647 L980.298 684.647 L980.858 684.647 L981.417 684.647 L981.976 684.647 L982.535 684.647 L983.095 684.647 L983.654 684.647 L984.213 684.647 L984.772 684.647 L985.332 684.647 L985.891 684.647 L986.45 684.647 L987.009 684.647 L987.569 684.647 L988.128 684.647 L988.687 684.647 L989.246 684.647 L989.806 684.647 L990.365 684.647 L990.924 684.647 L991.483 684.647 L992.043 684.647 L992.602 684.647 L993.161 684.647 L993.72 684.647 L994.28 684.647 L994.839 684.647 L995.398 684.647 L995.957 684.647 L996.517 684.647 L997.076 684.647 L997.635 684.647 L998.194 684.647 L998.754 684.647 L999.313 684.647 L999.872 684.647 L1000.43 684.647 L1000.99 684.647 L1001.55 684.647 L1002.11 684.647 L1002.67 684.647 L1003.23 684.647 L1003.79 684.647 L1004.35 684.647 L1004.91 684.647 L1005.46 684.647 L1006.02 684.647 L1006.58 684.647 L1007.14 684.647 L1007.7 684.647 L1008.26 684.647 L1008.82 684.647 L1009.38 684.647 L1009.94 684.647 L1010.5 684.647 L1011.06 684.647 L1011.62 684.647 L1012.18 684.647 L1012.73 684.647 L1013.29 684.647 L1013.85 684.647 L1014.41 684.647 L1014.97 684.647 L1015.53 684.647 L1016.09 684.647 L1016.65 684.647 L1017.21 684.647 L1017.77 684.647 L1018.33 684.647 L1018.89 684.647 L1019.45 684.647 L1020.01 684.647 L1020.56 684.647 L1021.12 684.647 L1021.68 684.647 L1022.24 684.647 L1022.8 684.647 L1023.36 684.647 L1023.92 684.647 L1024.48 684.647 L1025.04 684.647 L1025.6 684.647 L1026.16 684.647 L1026.72 684.647 L1027.28 684.647 L1027.83 684.647 L1028.39 684.647 L1028.95 684.647 L1029.51 684.647 L1030.07 684.647 L1030.63 684.647 L1031.19 684.647 L1031.75 684.647 L1032.31 684.647 L1032.87 684.647 L1033.43 684.647 L1033.99 684.647 L1034.55 684.647 L1035.1 684.647 L1035.66 684.647 L1036.22 684.647 L1036.78 684.647 L1037.34 684.647 L1037.9 684.647 L1038.46 684.647 L1039.02 684.647 L1039.58 684.647 L1040.14 684.647 L1040.7 684.647 L1041.26 684.647 L1041.82 684.647 L1042.38 684.647 L1042.93 684.647 L1043.49 684.647 L1044.05 684.647 L1044.61 684.647 L1045.17 684.647 L1045.73 684.647 L1046.29 684.647 L1046.85 684.647 L1047.41 684.647 L1047.97 684.647 L1048.53 684.647 L1049.09 684.647 L1049.65 684.647 L1050.2 684.647 L1050.76 684.647 L1051.32 684.647 L1051.88 684.647 L1052.44 684.647 L1053 684.647 L1053.56 684.647 L1054.12 684.647 L1054.68 684.647 L1055.24 684.647 L1055.8 684.647 L1056.36 684.647 L1056.92 684.647 L1057.48 684.647 L1058.03 684.647 L1058.59 684.647 L1059.15 684.647 L1059.71 684.647 L1060.27 684.647 L1060.83 684.647 L1061.39 684.647 L1061.95 684.647 L1062.51 684.647 L1063.07 684.647 L1063.63 684.647 L1064.19 684.647 L1064.75 684.647 L1065.3 684.647 L1065.86 684.647 L1066.42 684.647 L1066.98 684.647 L1067.54 684.647 L1068.1 684.647 L1068.66 684.647 L1069.22 684.647 L1069.78 684.647 L1070.34 684.647 L1070.9 684.647 L1071.46 684.647 L1072.02 684.647 L1072.57 684.647 L1073.13 684.647 L1073.69 684.647 L1074.25 684.647 L1074.81 684.647 L1075.37 684.647 L1075.93 684.647 L1076.49 684.647 L1077.05 684.647 L1077.61 684.647 L1078.17 684.647 L1078.73 684.647 L1079.29 684.647 L1079.85 684.647 L1080.4 684.647 L1080.96 684.647 L1081.52 684.647 L1082.08 684.647 L1082.64 684.647 L1083.2 684.647 L1083.76 684.647 L1084.32 684.647 L1084.88 684.647 L1085.44 684.647 L1086 684.647 L1086.56 684.647 L1087.12 684.647 L1087.67 684.647 L1088.23 684.647 L1088.79 684.647 L1089.35 684.647 L1089.91 684.647 L1090.47 684.647 L1091.03 684.647 L1091.59 684.647 L1092.15 684.647 L1092.71 684.647 L1093.27 684.647 L1093.83 684.647 L1094.39 684.647 L1094.94 684.647 L1095.5 684.647 L1096.06 684.647 L1096.62 684.647 L1097.18 684.647 L1097.74 684.647 L1098.3 684.647 L1098.86 684.647 L1099.42 684.647 L1099.98 684.647 L1100.54 684.647 L1101.1 684.647 L1101.66 684.647 L1102.22 684.647 L1102.77 684.647 L1103.33 684.647 L1103.89 684.647 L1104.45 684.647 L1105.01 684.647 L1105.57 684.647 L1106.13 684.647 L1106.69 684.647 L1107.25 684.647 L1107.81 684.647 L1108.37 684.647 L1108.93 684.647 L1109.49 684.647 L1110.04 684.647 L1110.6 684.647 L1111.16 684.647 L1111.72 684.647 L1112.28 684.647 L1112.84 684.647 L1113.4 684.647 L1113.96 684.647 L1114.52 684.647 L1115.08 684.647 L1115.64 684.647 L1116.2 684.647 L1116.76 684.647 L1117.31 684.647 L1117.87 684.647 L1118.43 684.647 L1118.99 684.647 L1119.55 684.647 L1120.11 684.647 L1120.67 684.647 L1121.23 684.647 L1121.79 684.647 L1122.35 684.647 L1122.91 684.647 L1123.47 684.647 L1124.03 684.647 L1124.59 684.647 L1125.14 684.647 L1125.7 684.647 L1126.26 684.647 L1126.82 684.647 L1127.38 684.647 L1127.94 684.647 L1128.5 684.647 L1129.06 684.647 L1129.62 684.647 L1130.18 684.647 L1130.74 684.647 L1131.3 684.647 L1131.86 684.647 L1132.41 684.647 L1132.97 684.647 L1133.53 684.647 L1134.09 684.647 L1134.65 684.647 L1135.21 684.647 L1135.77 684.647 L1136.33 684.647 L1136.89 684.647 L1137.45 684.647 L1138.01 684.647 L1138.57 684.647 L1139.13 684.647 L1139.68 684.647 L1140.24 684.647 L1140.8 684.647 L1141.36 684.647 L1141.92 684.647 L1142.48 684.647 L1143.04 684.647 L1143.6 684.647 L1144.16 684.647 L1144.72 684.647 L1145.28 684.647 L1145.84 684.647 L1146.4 684.647 L1146.96 684.647 L1147.51 684.647 L1148.07 684.647 L1148.63 684.647 L1149.19 684.647 L1149.75 684.647 L1150.31 684.647 L1150.87 684.647 L1151.43 684.647 L1151.99 684.647 L1152.55 684.647 L1153.11 684.647 L1153.67 684.647 L1154.23 684.647 L1154.78 684.647 L1155.34 684.647 L1155.9 684.647 L1156.46 684.647 L1157.02 684.647 L1157.58 684.647 L1158.14 684.647 L1158.7 684.647 L1159.26 684.647 L1159.82 684.647 L1160.38 684.647 L1160.94 684.647 L1161.5 684.647 L1162.05 684.647 L1162.61 684.647 L1163.17 684.647 L1163.73 684.647 L1164.29 684.647 L1164.85 684.647 L1165.41 684.647 L1165.97 684.647 L1166.53 684.647 L1167.09 684.647 L1167.65 684.647 L1168.21 684.647 L1168.77 684.647 L1169.33 684.647 L1169.88 684.647 L1170.44 684.647 L1171 684.647 L1171.56 684.647 L1172.12 684.647 L1172.68 684.647 L1173.24 684.647 L1173.8 684.647 L1174.36 684.647 L1174.92 684.647 L1175.48 684.647 L1176.04 684.647 L1176.6 684.647 L1177.15 684.647 L1177.71 684.647 L1178.27 684.647 L1178.83 684.647 L1179.39 684.647 L1179.95 684.647 L1180.51 684.647 L1181.07 684.647 L1181.63 684.647 L1182.19 684.647 L1182.75 684.647 L1183.31 684.647 L1183.87 684.647 L1184.43 684.647 L1184.98 684.647 L1185.54 684.647 L1186.1 684.647 L1186.66 684.647 L1187.22 684.647 L1187.78 684.647 L1188.34 684.647 L1188.9 684.647 L1189.46 684.647 L1190.02 684.647 L1190.58 684.647 L1191.14 684.647 L1191.7 684.647 L1192.25 684.647 L1192.81 684.647 L1193.37 684.647 L1193.93 684.647 L1194.49 684.647 L1195.05 684.647 L1195.61 684.647 L1196.17 684.647 L1196.73 684.647 L1197.29 684.647 L1197.85 684.647 L1198.41 684.647 L1198.97 684.647 L1199.52 684.647 L1200.08 684.647 L1200.64 684.647 L1201.2 684.647 L1201.76 684.647 L1202.32 684.647 L1202.88 684.647 L1203.44 684.647 L1204 684.647 L1204.56 684.647 L1205.12 684.647 L1205.68 684.647 L1206.24 684.647 L1206.8 684.647 L1207.35 684.647 L1207.91 684.647 L1208.47 684.647 L1209.03 684.647 L1209.59 684.647 L1210.15 684.647 L1210.71 684.647 L1211.27 684.647 L1211.83 684.647 L1212.39 684.647 L1212.95 684.647 L1213.51 684.647 L1214.07 684.647 L1214.62 684.647 L1215.18 684.647 L1215.74 684.647 L1216.3 684.647 L1216.86 684.647 L1217.42 684.647 L1217.98 684.647 L1218.54 684.647 L1219.1 684.647 L1219.66 684.647 L1220.22 684.647 L1220.78 684.647 L1221.34 684.647 L1221.89 684.647 L1222.45 684.647 L1223.01 684.647 L1223.57 684.647 L1224.13 684.647 L1224.69 684.647 L1225.25 684.647 L1225.81 684.647 L1226.37 684.647 L1226.93 684.647 L1227.49 684.647 L1228.05 684.647 L1228.61 684.647 L1229.17 684.647 L1229.72 684.647 L1230.28 684.647 L1230.84 684.647 L1231.4 684.647 L1231.96 684.647 L1232.52 684.647 L1233.08 684.647 L1233.64 684.647 L1234.2 684.647 L1234.76 684.647 L1235.32 684.647 L1235.88 684.647 L1236.44 684.647 L1236.99 684.647 L1237.55 684.647 L1238.11 684.647 L1238.67 684.647 L1239.23 684.647 L1239.79 684.647 L1240.35 684.647 L1240.91 684.647 L1241.47 684.647 L1242.03 684.647 L1242.59 684.647 L1243.15 684.647 L1243.71 684.647 L1244.26 684.647 L1244.82 684.647 L1245.38 684.647 L1245.94 684.647 L1246.5 684.647 L1247.06 684.647 L1247.62 684.647 L1248.18 684.647 L1248.74 684.647 L1249.3 684.647 L1249.86 684.647 L1250.42 684.647 L1250.98 684.647 L1251.54 684.647 L1252.09 684.647 L1252.65 684.647 L1253.21 684.647 L1253.77 684.647 L1254.33 684.647 L1254.89 684.647 L1255.45 684.647 L1256.01 684.647 L1256.57 684.647 L1257.13 684.647 L1257.69 684.647 L1258.25 684.647 L1258.81 684.647 L1259.36 684.647 L1259.92 684.647 L1260.48 684.647 L1261.04 684.647 L1261.6 684.647 L1262.16 684.647 L1262.72 684.647 L1263.28 684.647 L1263.84 684.647 L1264.4 684.647 L1264.96 684.647 L1265.52 684.647 L1266.08 684.647 L1266.63 684.647 L1267.19 684.647 L1267.75 684.647 L1268.31 684.647 L1268.87 684.647 L1269.43 684.647 L1269.99 684.647 L1270.55 684.647 L1271.11 684.647 L1271.67 684.647 L1272.23 684.647 L1272.79 684.647 L1273.35 684.647 L1273.91 684.647 L1274.46 684.647 L1275.02 684.647 L1275.58 684.647 L1276.14 684.647 L1276.7 684.647 L1277.26 684.647 L1277.82 684.647 L1278.38 684.647 L1278.94 684.647 L1279.5 684.647 L1280.06 684.647 L1280.62 684.647 L1281.18 684.647 L1281.73 684.647 L1282.29 684.647 L1282.85 684.647 L1283.41 684.647 L1283.97 684.647 L1284.53 684.647 L1285.09 684.647 L1285.65 684.647 L1286.21 684.647 L1286.77 684.647 L1287.33 684.647 L1287.89 684.647 L1288.45 684.647 L1289 684.647 L1289.56 684.647 L1290.12 684.647 L1290.68 684.647 L1291.24 684.647 L1291.8 684.647 L1292.36 684.647 L1292.92 684.647 L1293.48 684.647 L1294.04 684.647 L1294.6 684.647 L1295.16 684.647 L1295.72 684.647 L1296.28 684.647 L1296.83 684.647 L1297.39 684.647 L1297.95 684.647 L1298.51 684.647 L1299.07 684.647 L1299.63 684.647 L1300.19 684.647 L1300.75 684.647 L1301.31 684.647 L1301.87 684.647 L1302.43 684.647 L1302.99 684.647 L1303.55 684.647 L1304.1 684.647 L1304.66 684.647 L1305.22 684.647 L1305.78 684.647 L1306.34 684.647 L1306.9 684.647 L1307.46 684.647 L1308.02 684.647 L1308.58 684.647 L1309.14 684.647 L1309.7 684.647 L1310.26 684.647 L1310.82 684.647 L1311.38 684.647 L1311.93 684.647 L1312.49 684.647 L1313.05 684.647 L1313.61 684.647 L1314.17 684.647 L1314.73 684.647 L1315.29 684.647 L1315.85 684.647 L1316.41 684.647 L1316.97 684.647 L1317.53 684.647 L1318.09 684.647 L1318.65 684.647 L1319.2 684.647 L1319.76 684.647 L1320.32 684.647 L1320.88 684.647 L1321.44 684.647 L1322 684.647 L1322.56 684.647 L1323.12 684.647 L1323.68 684.647 L1324.24 684.647 L1324.8 684.647 L1325.36 684.647 L1325.92 684.647 L1326.47 684.647 L1327.03 684.647 L1327.59 684.647 L1328.15 684.647 L1328.71 684.647 L1329.27 684.647 L1329.83 684.647 L1330.39 684.647 L1330.95 684.647 L1331.51 684.647 L1332.07 684.647 L1332.63 684.647 L1333.19 684.647 L1333.75 684.647 L1334.3 684.647 L1334.86 684.647 L1335.42 684.647 L1335.98 684.647 L1336.54 684.647 L1337.1 684.647 L1337.66 684.647 L1338.22 684.647 L1338.78 684.647 L1339.34 684.647 L1339.9 684.647 L1340.46 684.647 L1341.02 684.647 L1341.57 684.647 L1342.13 684.647 L1342.69 684.647 L1343.25 684.647 L1343.81 684.647 L1344.37 684.647 L1344.93 684.647 L1345.49 684.647 L1346.05 684.647 L1346.61 684.647 L1347.17 684.647 L1347.73 684.647 L1348.29 684.647 L1348.84 684.647 L1349.4 684.647 L1349.96 684.647 L1350.52 684.647 L1351.08 684.647 L1351.64 684.647 L1352.2 684.647 L1352.76 684.647 L1353.32 684.647 L1353.88 684.647 L1354.44 684.647 L1355 684.647 L1355.56 684.647 L1356.12 684.647 L1356.67 684.647 L1357.23 684.647 L1357.79 684.647 L1358.35 684.647 L1358.91 684.647 L1359.47 684.647 L1360.03 684.647 L1360.59 684.647 L1361.15 684.647 L1361.71 684.647 L1362.27 684.647 L1362.83 684.647 L1363.39 684.647 L1363.94 684.647 L1364.5 684.647 L1365.06 684.647 L1365.62 684.647 L1366.18 684.647 L1366.74 684.647 L1367.3 684.647 L1367.86 684.647 L1368.42 684.647 L1368.98 684.647 L1369.54 684.647 L1370.1 684.647 L1370.66 684.647 L1371.21 684.647 L1371.77 684.647 L1372.33 684.647 L1372.89 684.647 L1373.45 684.647 L1374.01 684.647 L1374.57 684.647 L1375.13 684.647 L1375.69 684.647 L1376.25 684.647 L1376.81 684.647 L1377.37 684.647 L1377.93 684.647 L1378.49 684.647 L1379.04 684.647 L1379.6 684.647 L1380.16 684.647 L1380.72 684.647 L1381.28 684.647 L1381.84 684.647 L1382.4 684.647 L1382.96 684.647 L1383.52 684.647 L1384.08 684.647 L1384.64 684.647 L1385.2 684.647 L1385.76 684.647 L1386.31 684.647 L1386.87 684.647 L1387.43 684.647 L1387.99 684.647 L1388.55 684.647 L1389.11 684.647 L1389.67 684.647 L1390.23 684.647 L1390.79 684.647 L1391.35 684.647 L1391.91 684.647 L1392.47 684.647 L1393.03 684.647 L1393.58 684.647 L1394.14 684.647 L1394.7 684.647 L1395.26 684.647 L1395.82 684.647 L1396.38 684.647 L1396.94 684.647 L1397.5 684.647 L1398.06 684.647 L1398.62 684.647 L1399.18 684.647 L1399.74 684.647 L1400.3 684.647 L1400.86 684.647 L1401.41 684.647 L1401.97 684.647 L1402.53 684.647 L1403.09 684.647 L1403.65 684.647 L1404.21 684.647 L1404.77 684.647 L1405.33 684.647 L1405.89 684.647 L1406.45 684.647 L1407.01 684.647 L1407.57 684.647 L1408.13 684.647 L1408.68 684.647 L1409.24 684.647 L1409.8 684.647 L1410.36 684.647 L1410.92 684.647 L1411.48 684.647 L1412.04 684.647 L1412.6 684.647 L1413.16 684.647 L1413.72 684.647 L1414.28 684.647 L1414.84 684.647 L1415.4 684.647 L1415.95 684.647 L1416.51 684.647 L1417.07 684.647 L1417.63 684.647 L1418.19 684.647 L1418.75 684.647 L1419.31 684.647 L1419.87 684.647 L1420.43 684.647 L1420.99 684.647 L1421.55 684.647 L1422.11 684.647 L1422.67 684.647 L1423.23 684.647 L1423.78 684.647 L1424.34 684.647 L1424.9 684.647 L1425.46 684.647 L1426.02 684.647 L1426.58 684.647 L1427.14 684.647 L1427.7 684.647 L1428.26 684.647 L1428.82 684.647 L1429.38 684.647 L1429.94 684.647 L1430.5 684.647 L1431.05 684.647 L1431.61 684.647 L1432.17 684.647 L1432.73 684.647 L1433.29 684.647 L1433.85 684.647 L1434.41 684.647 L1434.97 684.647 L1435.53 684.647 L1436.09 684.647 L1436.65 684.647 L1437.21 684.647 L1437.77 684.647 L1438.33 684.647 L1438.88 684.647 L1439.44 684.647 L1440 684.647 L1440.56 684.647 L1441.12 684.647 L1441.68 684.647 L1442.24 684.647 L1442.8 684.647 L1443.36 684.647 L1443.92 684.647 L1444.48 684.647 L1445.04 684.647 L1445.6 684.647 L1446.15 684.647 L1446.71 684.647 L1447.27 684.647 L1447.83 684.647 L1448.39 684.647 L1448.95 684.647 L1449.51 684.647 L1450.07 684.647 L1450.63 684.647 L1451.19 684.647 L1451.75 684.647 L1452.31 684.647 L1452.87 684.647 L1453.42 684.647 L1453.98 684.647 L1454.54 684.647 L1455.1 684.647 L1455.66 684.647 L1456.22 684.647 L1456.78 684.647 L1457.34 684.647 L1457.9 684.647 L1458.46 684.647 L1459.02 684.647 L1459.58 684.647 L1460.14 684.647 L1460.7 684.647 L1461.25 684.647 L1461.81 684.647 L1462.37 684.647 L1462.93 684.647 L1463.49 684.647 L1464.05 684.647 L1464.61 684.647 L1465.17 684.647 L1465.73 684.647 L1466.29 684.647 L1466.85 684.647 L1467.41 684.647 L1467.97 684.647 L1468.52 684.647 L1469.08 684.647 L1469.64 684.647 L1470.2 684.647 L1470.76 684.647 L1471.32 684.647 L1471.88 684.647 L1472.44 684.647 L1473 684.647 L1473.56 684.647 L1474.12 684.647 L1474.68 684.647 L1475.24 684.647 L1475.79 684.647 L1476.35 684.647 L1476.91 684.647 L1477.47 684.647 L1478.03 684.647 L1478.59 684.647 L1479.15 684.647 L1479.71 684.647 L1480.27 684.647 L1480.83 684.647 L1481.39 684.647 L1481.95 684.647 L1482.51 684.647 L1483.07 684.647 L1483.62 684.647 L1484.18 684.647 L1484.74 684.647 L1485.3 684.647 L1485.86 684.647 L1486.42 684.647 L1486.98 684.647 L1487.54 684.647 L1488.1 684.647 L1488.66 684.647 L1489.22 684.647 L1489.78 684.647 L1490.34 684.647 L1490.89 684.647 L1491.45 684.647 L1492.01 684.647 L1492.57 684.647 L1493.13 684.647 L1493.69 684.647 L1494.25 684.647 L1494.81 684.647 L1495.37 684.647 L1495.93 684.647 L1496.49 684.647 L1497.05 684.647 L1497.61 684.647 L1498.16 684.647 L1498.72 684.647 L1499.28 684.647 L1499.84 684.647 L1500.4 684.647 L1500.96 684.647 L1501.52 684.647 L1502.08 684.647 L1502.64 684.647 L1503.2 684.647 L1503.76 684.647 L1504.32 684.647 L1504.88 684.647 L1505.44 684.647 L1505.99 684.647 L1506.55 684.647 L1507.11 684.647 L1507.67 684.647 L1508.23 684.647 L1508.79 684.647 L1509.35 684.647 L1509.91 684.647 L1510.47 684.647 L1511.03 684.647 L1511.59 684.647 L1512.15 684.647 L1512.71 684.647 L1513.26 684.647 L1513.82 684.647 L1514.38 684.647 L1514.94 684.647 L1515.5 684.647 L1516.06 684.647 L1516.62 684.647 L1517.18 684.647 L1517.74 684.647 L1518.3 684.647 L1518.86 684.647 L1519.42 684.647 L1519.98 684.647 L1520.53 684.647 L1521.09 684.647 L1521.65 684.647 L1522.21 684.647 L1522.77 684.647 L1523.33 684.647 L1523.89 684.647 L1524.45 684.647 L1525.01 684.647 L1525.57 684.647 L1526.13 684.647 L1526.69 684.647 L1527.25 684.647 L1527.81 684.647 L1528.36 684.647 L1528.92 684.647 L1529.48 684.647 L1530.04 684.647 L1530.6 684.647 L1531.16 684.647 L1531.72 684.647 L1532.28 684.647 L1532.84 684.647 L1533.4 684.647 L1533.96 684.647 L1534.52 684.647 L1535.08 684.647 L1535.63 684.647 L1536.19 684.647 L1536.75 684.647 L1537.31 684.647 L1537.87 684.647 L1538.43 684.647 L1538.99 684.647 L1539.55 684.647 L1540.11 684.647 L1540.67 684.647 L1541.23 684.647 L1541.79 684.647 L1542.35 684.647 L1542.9 684.647 L1543.46 684.647 L1544.02 684.647 L1544.58 684.647 L1545.14 684.647 L1545.7 684.647 L1546.26 684.647 L1546.82 684.647 L1547.38 684.647 L1547.94 684.647 L1548.5 684.647 L1549.06 684.647 L1549.62 684.647 L1550.18 684.647 L1550.73 684.647 L1551.29 684.647 L1551.85 684.647 L1552.41 684.647 L1552.97 684.647 L1553.53 684.647 L1554.09 684.647 L1554.65 684.647 L1555.21 684.647 L1555.77 684.647 L1556.33 684.647 L1556.89 684.647 L1557.45 684.647 L1558 684.647 L1558.56 684.647 L1559.12 684.647 L1559.68 684.647 L1560.24 684.647 L1560.8 684.647 L1561.36 684.647 L1561.92 684.647 L1562.48 684.647 L1563.04 684.647 L1563.6 684.647 L1564.16 684.647 L1564.72 684.647 L1565.28 684.647 L1565.83 684.647 L1566.39 684.647 L1566.95 684.647 L1567.51 684.647 L1568.07 684.647 L1568.63 684.647 L1569.19 684.647 L1569.75 684.647 L1570.31 684.647 L1570.87 684.647 L1571.43 684.647 L1571.99 684.647 L1572.55 684.647 L1573.1 684.647 L1573.66 684.647 L1574.22 684.647 L1574.78 684.647 L1575.34 684.647 L1575.9 684.647 L1576.46 684.647 L1577.02 684.647 L1577.58 684.647 L1578.14 684.647 L1578.7 684.647 L1579.26 684.647 L1579.82 684.647 L1580.37 684.647 L1580.93 684.647 L1581.49 684.647 L1582.05 684.647 L1582.61 684.647 L1583.17 684.647 L1583.73 684.647 L1584.29 684.647 L1584.85 684.647 L1585.41 684.647 L1585.97 684.647 L1586.53 684.647 L1587.09 684.647 L1587.65 684.647 L1588.2 684.647 L1588.76 684.647 L1589.32 684.647 L1589.88 684.647 L1590.44 684.647 L1591 684.647 L1591.56 684.647 L1592.12 684.647 L1592.68 684.647 L1593.24 684.647 L1593.8 684.647 L1594.36 684.647 L1594.92 684.647 L1595.47 684.647 L1596.03 684.647 L1596.59 684.647 L1597.15 684.647 L1597.71 684.647 L1598.27 684.647 L1598.83 684.647 L1599.39 684.647 L1599.95 684.647 L1600.51 684.647 L1601.07 684.647 L1601.63 684.647 L1602.19 684.647 L1602.74 684.647 L1603.3 684.647 L1603.86 684.647 L1604.42 684.647 L1604.98 684.647 L1605.54 684.647 L1606.1 684.647 L1606.66 684.647 L1607.22 684.647 L1607.78 684.647 L1608.34 684.647 L1608.9 684.647 L1609.46 684.647 L1610.02 684.647 L1610.57 684.647 L1611.13 684.647 L1611.69 684.647 L1612.25 684.647 L1612.81 684.647 L1613.37 684.647 L1613.93 684.647 L1614.49 684.647 L1615.05 684.647 L1615.61 684.647 L1616.17 684.647 L1616.73 684.647 L1617.29 684.647 L1617.84 684.647 L1618.4 684.647 L1618.96 684.647 L1619.52 684.647 L1620.08 684.647 L1620.64 684.647 L1621.2 684.647 L1621.76 684.647 L1622.32 684.647 L1622.88 684.647 L1623.44 684.647 L1624 684.647 L1624.56 684.647 L1625.11 684.647 L1625.67 684.647 L1626.23 684.647 L1626.79 684.647 L1627.35 684.647 L1627.91 684.647 L1628.47 684.647 L1629.03 684.647 L1629.59 684.647 L1630.15 684.647 L1630.71 684.647 L1631.27 684.647 L1631.83 684.647 L1632.39 684.647 L1632.94 684.647 L1633.5 684.647 L1634.06 684.647 L1634.62 684.647 L1635.18 684.647 L1635.74 684.647 L1636.3 684.647 L1636.86 684.647 L1637.42 684.647 L1637.98 684.647 L1638.54 684.647 L1639.1 684.647 L1639.66 684.647 L1640.21 684.647 L1640.77 684.647 L1641.33 684.647 L1641.89 684.647 L1642.45 684.647 L1643.01 684.647 L1643.57 684.647 L1644.13 684.647 L1644.69 684.647 L1645.25 684.647 L1645.81 684.647 L1646.37 684.647 L1646.93 684.647 L1647.48 684.647 L1648.04 684.647 L1648.6 684.647 L1649.16 684.647 L1649.72 684.647 L1650.28 684.647 L1650.84 684.647 L1651.4 684.647 L1651.96 684.647 L1652.52 684.647 L1653.08 684.647 L1653.64 684.647 L1654.2 684.647 L1654.76 684.647 L1655.31 684.647 L1655.87 684.647 L1656.43 684.647 L1656.99 684.647 L1657.55 684.647 L1658.11 684.647 L1658.67 684.647 L1659.23 684.647 L1659.79 684.647 L1660.35 684.647 L1660.91 684.647 L1661.47 684.647 L1662.03 684.647 L1662.58 684.647 L1663.14 684.647 L1663.7 684.647 L1664.26 684.647 L1664.82 684.647 L1665.38 684.647 L1665.94 684.647 L1666.5 684.647 L1667.06 684.647 L1667.62 684.647 L1668.18 684.647 L1668.74 684.647 L1669.3 684.647 L1669.85 684.647 L1670.41 684.647 L1670.97 684.647 L1671.53 684.647 L1672.09 684.647 L1672.65 684.647 L1673.21 684.647 L1673.77 684.647 L1674.33 684.647 L1674.89 684.647 L1675.45 684.647 L1676.01 684.647 L1676.57 684.647 L1677.13 684.647 L1677.68 684.647 L1678.24 684.647 L1678.8 684.647 L1679.36 684.647 L1679.92 684.647 L1680.48 684.647 L1681.04 684.647 L1681.6 684.647 L1682.16 684.647 L1682.72 684.647 L1683.28 684.647 L1683.84 684.647 L1684.4 684.647 L1684.95 684.647 L1685.51 684.647 L1686.07 684.647 L1686.63 684.647 L1687.19 684.647 L1687.75 684.647 L1688.31 684.647 L1688.87 684.647 L1689.43 684.647 L1689.99 684.647 L1690.55 684.647 L1691.11 684.647 L1691.67 684.647 L1692.23 684.647 L1692.78 684.647 L1693.34 684.647 L1693.9 684.647 L1694.46 684.647 L1695.02 684.647 L1695.58 684.647 L1696.14 684.647 L1696.7 684.647 L1697.26 684.647 L1697.82 684.647 L1698.38 684.647 L1698.94 684.647 L1699.5 684.647 L1700.05 684.647 L1700.61 684.647 L1701.17 684.647 L1701.73 684.647 L1702.29 684.647 L1702.85 684.647 L1703.41 684.647 L1703.97 684.647 L1704.53 684.647 L1705.09 684.647 L1705.65 684.647 L1706.21 684.647 L1706.77 684.647 L1707.32 684.647 L1707.88 684.647 L1708.44 684.647 L1709 684.647 L1709.56 684.647 L1710.12 684.647 L1710.68 684.647 L1711.24 684.647 L1711.8 684.647 L1712.36 684.647 L1712.92 684.647 L1713.48 684.647 L1714.04 684.647 L1714.6 684.647 L1715.15 684.647 L1715.71 684.647 L1716.27 684.647 L1716.83 684.647 L1717.39 684.647 L1717.95 684.647 L1718.51 684.647 L1719.07 684.647 L1719.63 684.647 L1720.19 684.647 L1720.75 684.647 L1721.31 684.647 L1721.87 684.647 L1722.42 684.647 L1722.98 684.647 L1723.54 684.647 L1724.1 684.647 L1724.66 684.647 L1725.22 684.647 L1725.78 684.647 L1726.34 684.647 L1726.9 684.647 L1727.46 684.647 L1728.02 684.647 L1728.58 684.647 L1729.14 684.647 L1729.69 684.647 L1730.25 684.647 L1730.81 684.647 L1731.37 684.647 L1731.93 684.647 L1732.49 684.647 L1733.05 684.647 L1733.61 684.647 L1734.17 684.647 L1734.73 684.647 L1735.29 684.647 L1735.85 684.647 L1736.41 684.647 L1736.97 684.647 L1737.52 684.647 L1738.08 684.647 L1738.64 684.647 L1739.2 684.647 L1739.76 684.647 L1740.32 684.647 L1740.88 684.647 L1741.44 684.647 L1742 684.647 L1742.56 684.647 L1743.12 684.647 L1743.68 684.647 L1744.24 684.647 L1744.79 684.647 L1745.35 684.647 L1745.91 684.647 L1746.47 684.647 L1747.03 684.647 L1747.59 684.647 L1748.15 684.647 L1748.71 684.647 L1749.27 684.647 L1749.83 684.647 L1750.39 684.647 L1750.95 684.647 L1751.51 684.647 L1752.06 684.647 L1752.62 684.647 L1753.18 684.647 L1753.74 684.647 L1754.3 684.647 L1754.86 684.647 L1755.42 684.647 L1755.98 684.647 L1756.54 684.647 L1757.1 684.647 L1757.66 684.647 L1758.22 684.647 L1758.78 684.647 L1759.34 684.647 L1759.89 684.647 L1760.45 684.647 L1761.01 684.647 L1761.57 684.647 L1762.13 684.647 L1762.69 684.647 L1763.25 684.647 L1763.81 684.647 L1764.37 684.647 L1764.93 684.647 L1765.49 684.647 L1766.05 684.647 L1766.61 684.647 L1767.16 684.647 L1767.72 684.647 L1768.28 684.647 L1768.84 684.647 L1769.4 684.647 L1769.96 684.647 L1770.52 684.647 L1771.08 684.647 L1771.64 684.647 L1772.2 684.647 L1772.76 684.647 L1773.32 684.647 L1773.88 684.647 L1774.43 684.647 L1774.99 684.647 L1775.55 684.647 L1776.11 684.647 L1776.67 684.647 L1777.23 684.647 L1777.79 684.647 L1778.35 684.647 L1778.91 684.647 L1779.47 684.647 L1780.03 684.647 L1780.59 684.647 L1781.15 684.647 L1781.71 684.647 L1782.26 684.647 L1782.82 684.647 L1783.38 684.647 L1783.94 684.647 L1784.5 684.647 L1785.06 684.647 L1785.62 684.647 L1786.18 684.647 L1786.74 684.647 L1787.3 684.647 L1787.86 684.647 L1788.42 684.647 L1788.98 684.647 L1789.53 684.647 L1790.09 684.647 L1790.65 684.647 L1791.21 684.647 L1791.77 684.647 L1792.33 684.647 L1792.89 684.647 L1793.45 684.647 L1794.01 684.647 L1794.57 684.647 L1795.13 684.647 L1795.69 684.647 L1796.25 684.647 L1796.8 684.647 L1797.36 684.647 L1797.92 684.647 L1798.48 684.647 L1799.04 684.647 L1799.6 684.647 L1800.16 684.647 L1800.72 684.647 L1801.28 684.647 L1801.84 684.647 L1802.4 684.647 L1802.96 684.647 L1803.52 684.647 L1804.08 684.647 L1804.63 684.647 L1805.19 684.647 L1805.75 684.647 L1806.31 684.647 L1806.87 684.647 L1807.43 684.647 L1807.99 684.647 L1808.55 684.647 L1809.11 684.647 L1809.67 684.647 L1810.23 684.647 L1810.79 684.647 L1811.35 684.647 L1811.9 684.647 L1812.46 684.647 L1813.02 684.647 L1813.58 684.647 L1814.14 684.647 L1814.7 684.647 L1815.26 684.647 L1815.82 684.647 L1816.38 684.647 L1816.94 684.647 L1817.5 684.647 L1818.06 684.647 L1818.62 684.647 L1819.18 684.647 L1819.73 684.647 L1820.29 684.647 L1820.85 684.647 L1821.41 684.647 L1821.97 684.647 L1822.53 684.647 L1823.09 684.647 L1823.65 684.647 L1824.21 684.647 L1824.77 684.647 L1825.33 684.647 L1825.89 684.647 L1826.45 684.647 L1827 684.647 L1827.56 684.647 L1828.12 684.647 L1828.68 684.647 L1829.24 684.647 L1829.8 684.647 L1830.36 684.647 L1830.92 684.647 L1831.48 684.647 L1832.04 684.647 L1832.6 684.647 L1833.16 684.647 L1833.72 684.647 L1834.27 684.647 L1834.83 684.647 L1835.39 684.647 L1835.95 684.647 L1836.51 684.647 L1837.07 684.647 L1837.63 684.647 L1838.19 684.647 L1838.19 683.163 L1837.63 683.163 L1837.07 683.163 L1836.51 683.163 L1835.95 683.163 L1835.39 683.163 L1834.83 683.163 L1834.27 683.163 L1833.72 683.163 L1833.16 683.163 L1832.6 683.163 L1832.04 683.163 L1831.48 683.163 L1830.92 683.163 L1830.36 683.163 L1829.8 683.163 L1829.24 683.163 L1828.68 683.163 L1828.12 683.163 L1827.56 683.163 L1827 683.163 L1826.45 683.163 L1825.89 683.163 L1825.33 683.163 L1824.77 683.163 L1824.21 683.163 L1823.65 683.163 L1823.09 683.163 L1822.53 683.163 L1821.97 683.163 L1821.41 683.163 L1820.85 683.163 L1820.29 683.163 L1819.73 683.163 L1819.18 683.163 L1818.62 683.163 L1818.06 683.163 L1817.5 683.163 L1816.94 683.163 L1816.38 683.163 L1815.82 683.163 L1815.26 683.163 L1814.7 683.163 L1814.14 683.163 L1813.58 683.163 L1813.02 683.163 L1812.46 683.163 L1811.9 683.163 L1811.35 683.163 L1810.79 683.163 L1810.23 683.163 L1809.67 683.163 L1809.11 683.163 L1808.55 683.163 L1807.99 683.163 L1807.43 683.163 L1806.87 683.163 L1806.31 683.163 L1805.75 683.163 L1805.19 683.163 L1804.63 683.163 L1804.08 683.163 L1803.52 683.163 L1802.96 683.163 L1802.4 683.163 L1801.84 683.163 L1801.28 683.163 L1800.72 683.163 L1800.16 683.163 L1799.6 683.163 L1799.04 683.163 L1798.48 683.163 L1797.92 683.163 L1797.36 683.163 L1796.8 683.163 L1796.25 683.163 L1795.69 683.163 L1795.13 683.163 L1794.57 683.163 L1794.01 683.163 L1793.45 683.163 L1792.89 683.163 L1792.33 683.163 L1791.77 683.163 L1791.21 683.163 L1790.65 683.163 L1790.09 683.163 L1789.53 683.163 L1788.98 683.163 L1788.42 683.163 L1787.86 683.163 L1787.3 683.163 L1786.74 683.163 L1786.18 683.163 L1785.62 683.163 L1785.06 683.163 L1784.5 683.163 L1783.94 683.163 L1783.38 683.163 L1782.82 683.163 L1782.26 683.163 L1781.71 683.163 L1781.15 683.163 L1780.59 683.163 L1780.03 683.163 L1779.47 683.163 L1778.91 683.163 L1778.35 683.163 L1777.79 683.163 L1777.23 683.163 L1776.67 683.163 L1776.11 683.163 L1775.55 683.163 L1774.99 683.163 L1774.43 683.163 L1773.88 683.163 L1773.32 683.163 L1772.76 683.163 L1772.2 683.163 L1771.64 683.163 L1771.08 683.163 L1770.52 683.163 L1769.96 683.163 L1769.4 683.163 L1768.84 683.163 L1768.28 683.163 L1767.72 683.163 L1767.16 683.163 L1766.61 683.163 L1766.05 683.163 L1765.49 683.163 L1764.93 683.163 L1764.37 683.163 L1763.81 683.163 L1763.25 683.163 L1762.69 683.163 L1762.13 683.163 L1761.57 683.163 L1761.01 683.163 L1760.45 683.163 L1759.89 683.163 L1759.34 683.163 L1758.78 683.163 L1758.22 683.163 L1757.66 683.163 L1757.1 683.163 L1756.54 683.163 L1755.98 683.163 L1755.42 683.163 L1754.86 683.163 L1754.3 683.163 L1753.74 683.163 L1753.18 683.163 L1752.62 683.163 L1752.06 683.163 L1751.51 683.163 L1750.95 683.163 L1750.39 683.163 L1749.83 683.163 L1749.27 683.163 L1748.71 683.163 L1748.15 683.163 L1747.59 683.163 L1747.03 683.163 L1746.47 683.163 L1745.91 683.163 L1745.35 683.163 L1744.79 683.163 L1744.24 683.163 L1743.68 683.163 L1743.12 683.163 L1742.56 683.163 L1742 683.163 L1741.44 683.163 L1740.88 683.163 L1740.32 683.163 L1739.76 683.163 L1739.2 683.163 L1738.64 683.163 L1738.08 683.163 L1737.52 683.163 L1736.97 683.163 L1736.41 683.163 L1735.85 683.163 L1735.29 683.163 L1734.73 683.163 L1734.17 683.163 L1733.61 683.163 L1733.05 683.163 L1732.49 683.163 L1731.93 683.163 L1731.37 683.163 L1730.81 683.163 L1730.25 683.163 L1729.69 683.163 L1729.14 683.163 L1728.58 683.163 L1728.02 683.163 L1727.46 683.163 L1726.9 683.163 L1726.34 683.163 L1725.78 683.163 L1725.22 683.163 L1724.66 683.163 L1724.1 683.163 L1723.54 683.163 L1722.98 683.163 L1722.42 683.163 L1721.87 683.163 L1721.31 683.163 L1720.75 683.163 L1720.19 683.163 L1719.63 683.163 L1719.07 683.163 L1718.51 683.163 L1717.95 683.163 L1717.39 683.163 L1716.83 683.163 L1716.27 683.163 L1715.71 683.163 L1715.15 683.163 L1714.6 683.163 L1714.04 683.163 L1713.48 683.163 L1712.92 683.163 L1712.36 683.163 L1711.8 683.163 L1711.24 683.163 L1710.68 683.163 L1710.12 683.163 L1709.56 683.163 L1709 683.163 L1708.44 683.163 L1707.88 683.163 L1707.32 683.163 L1706.77 683.163 L1706.21 683.163 L1705.65 683.163 L1705.09 683.163 L1704.53 683.163 L1703.97 683.163 L1703.41 683.163 L1702.85 683.163 L1702.29 683.163 L1701.73 683.163 L1701.17 683.163 L1700.61 683.163 L1700.05 683.163 L1699.5 683.163 L1698.94 683.163 L1698.38 683.163 L1697.82 683.163 L1697.26 683.163 L1696.7 683.163 L1696.14 683.163 L1695.58 683.163 L1695.02 683.163 L1694.46 683.163 L1693.9 683.163 L1693.34 683.163 L1692.78 683.163 L1692.23 683.163 L1691.67 683.163 L1691.11 683.163 L1690.55 683.163 L1689.99 683.163 L1689.43 683.163 L1688.87 683.163 L1688.31 683.163 L1687.75 683.163 L1687.19 683.163 L1686.63 683.163 L1686.07 683.163 L1685.51 683.163 L1684.95 683.163 L1684.4 683.163 L1683.84 683.163 L1683.28 683.163 L1682.72 683.163 L1682.16 683.163 L1681.6 683.163 L1681.04 683.163 L1680.48 683.163 L1679.92 683.163 L1679.36 683.163 L1678.8 683.163 L1678.24 683.163 L1677.68 683.163 L1677.13 683.163 L1676.57 683.163 L1676.01 683.163 L1675.45 683.163 L1674.89 683.163 L1674.33 683.163 L1673.77 683.163 L1673.21 683.163 L1672.65 683.163 L1672.09 683.163 L1671.53 683.163 L1670.97 683.163 L1670.41 683.163 L1669.85 683.163 L1669.3 683.163 L1668.74 683.163 L1668.18 683.163 L1667.62 683.163 L1667.06 683.163 L1666.5 683.163 L1665.94 683.163 L1665.38 683.163 L1664.82 683.163 L1664.26 683.163 L1663.7 683.163 L1663.14 683.163 L1662.58 683.163 L1662.03 683.163 L1661.47 683.163 L1660.91 683.163 L1660.35 683.163 L1659.79 683.163 L1659.23 683.163 L1658.67 683.163 L1658.11 683.163 L1657.55 683.163 L1656.99 683.163 L1656.43 683.163 L1655.87 683.163 L1655.31 683.163 L1654.76 683.163 L1654.2 683.163 L1653.64 683.163 L1653.08 683.163 L1652.52 683.163 L1651.96 683.163 L1651.4 683.163 L1650.84 683.163 L1650.28 683.163 L1649.72 683.163 L1649.16 683.163 L1648.6 683.163 L1648.04 683.163 L1647.48 683.163 L1646.93 683.163 L1646.37 683.163 L1645.81 683.163 L1645.25 683.163 L1644.69 683.163 L1644.13 683.163 L1643.57 683.163 L1643.01 683.163 L1642.45 683.163 L1641.89 683.163 L1641.33 683.163 L1640.77 683.163 L1640.21 683.163 L1639.66 683.163 L1639.1 683.163 L1638.54 683.163 L1637.98 683.163 L1637.42 683.163 L1636.86 683.163 L1636.3 683.163 L1635.74 683.163 L1635.18 683.163 L1634.62 683.163 L1634.06 683.163 L1633.5 683.163 L1632.94 683.163 L1632.39 683.163 L1631.83 683.163 L1631.27 683.163 L1630.71 683.163 L1630.15 683.163 L1629.59 683.163 L1629.03 683.163 L1628.47 683.163 L1627.91 683.163 L1627.35 683.163 L1626.79 683.163 L1626.23 683.163 L1625.67 683.163 L1625.11 683.163 L1624.56 683.163 L1624 683.163 L1623.44 683.163 L1622.88 683.163 L1622.32 683.163 L1621.76 683.163 L1621.2 683.163 L1620.64 683.163 L1620.08 683.163 L1619.52 683.163 L1618.96 683.163 L1618.4 683.163 L1617.84 683.163 L1617.29 683.163 L1616.73 683.163 L1616.17 683.163 L1615.61 683.163 L1615.05 683.163 L1614.49 683.163 L1613.93 683.163 L1613.37 683.163 L1612.81 683.163 L1612.25 683.163 L1611.69 683.163 L1611.13 683.163 L1610.57 683.163 L1610.02 683.163 L1609.46 683.163 L1608.9 683.163 L1608.34 683.163 L1607.78 683.163 L1607.22 683.163 L1606.66 683.163 L1606.1 683.163 L1605.54 683.163 L1604.98 683.163 L1604.42 683.163 L1603.86 683.163 L1603.3 683.163 L1602.74 683.163 L1602.19 683.163 L1601.63 683.163 L1601.07 683.163 L1600.51 683.163 L1599.95 683.163 L1599.39 683.163 L1598.83 683.163 L1598.27 683.163 L1597.71 683.163 L1597.15 683.163 L1596.59 683.163 L1596.03 683.163 L1595.47 683.163 L1594.92 683.163 L1594.36 683.163 L1593.8 683.163 L1593.24 683.163 L1592.68 683.163 L1592.12 683.163 L1591.56 683.163 L1591 683.163 L1590.44 683.163 L1589.88 683.163 L1589.32 683.163 L1588.76 683.163 L1588.2 683.163 L1587.65 683.163 L1587.09 683.163 L1586.53 683.163 L1585.97 683.163 L1585.41 683.163 L1584.85 683.163 L1584.29 683.163 L1583.73 683.163 L1583.17 683.163 L1582.61 683.163 L1582.05 683.163 L1581.49 683.163 L1580.93 683.163 L1580.37 683.163 L1579.82 683.163 L1579.26 683.163 L1578.7 683.163 L1578.14 683.163 L1577.58 683.163 L1577.02 683.163 L1576.46 683.163 L1575.9 683.163 L1575.34 683.163 L1574.78 683.163 L1574.22 683.163 L1573.66 683.163 L1573.1 683.163 L1572.55 683.163 L1571.99 683.163 L1571.43 683.163 L1570.87 683.163 L1570.31 683.163 L1569.75 683.163 L1569.19 683.163 L1568.63 683.163 L1568.07 683.163 L1567.51 683.163 L1566.95 683.163 L1566.39 683.163 L1565.83 683.163 L1565.28 683.163 L1564.72 683.163 L1564.16 683.163 L1563.6 683.163 L1563.04 683.163 L1562.48 683.163 L1561.92 683.163 L1561.36 683.163 L1560.8 683.163 L1560.24 683.163 L1559.68 683.163 L1559.12 683.163 L1558.56 683.163 L1558 683.163 L1557.45 683.163 L1556.89 683.163 L1556.33 683.163 L1555.77 683.163 L1555.21 683.163 L1554.65 683.163 L1554.09 683.163 L1553.53 683.163 L1552.97 683.163 L1552.41 683.163 L1551.85 683.163 L1551.29 683.163 L1550.73 683.163 L1550.18 683.163 L1549.62 683.163 L1549.06 683.163 L1548.5 683.163 L1547.94 683.163 L1547.38 683.163 L1546.82 683.163 L1546.26 683.163 L1545.7 683.163 L1545.14 683.163 L1544.58 683.163 L1544.02 683.163 L1543.46 683.163 L1542.9 683.163 L1542.35 683.163 L1541.79 683.163 L1541.23 683.163 L1540.67 683.163 L1540.11 683.163 L1539.55 683.163 L1538.99 683.163 L1538.43 683.163 L1537.87 683.163 L1537.31 683.163 L1536.75 683.163 L1536.19 683.163 L1535.63 683.163 L1535.08 683.163 L1534.52 683.163 L1533.96 683.163 L1533.4 683.163 L1532.84 683.163 L1532.28 683.163 L1531.72 683.163 L1531.16 683.163 L1530.6 683.163 L1530.04 683.163 L1529.48 683.163 L1528.92 683.163 L1528.36 683.163 L1527.81 683.163 L1527.25 683.163 L1526.69 683.163 L1526.13 683.163 L1525.57 683.163 L1525.01 683.163 L1524.45 683.163 L1523.89 683.163 L1523.33 683.163 L1522.77 683.163 L1522.21 683.163 L1521.65 683.163 L1521.09 683.163 L1520.53 683.163 L1519.98 683.163 L1519.42 683.163 L1518.86 683.163 L1518.3 683.163 L1517.74 683.163 L1517.18 683.163 L1516.62 683.163 L1516.06 683.163 L1515.5 683.163 L1514.94 683.163 L1514.38 683.163 L1513.82 683.163 L1513.26 683.163 L1512.71 683.163 L1512.15 683.163 L1511.59 683.163 L1511.03 683.163 L1510.47 683.163 L1509.91 683.163 L1509.35 683.163 L1508.79 683.163 L1508.23 683.163 L1507.67 683.163 L1507.11 683.163 L1506.55 683.163 L1505.99 683.163 L1505.44 683.163 L1504.88 683.163 L1504.32 683.163 L1503.76 683.163 L1503.2 683.163 L1502.64 683.163 L1502.08 683.163 L1501.52 683.163 L1500.96 683.163 L1500.4 683.163 L1499.84 683.163 L1499.28 683.163 L1498.72 683.163 L1498.16 683.163 L1497.61 683.163 L1497.05 683.163 L1496.49 683.163 L1495.93 683.163 L1495.37 683.163 L1494.81 683.163 L1494.25 683.163 L1493.69 683.163 L1493.13 683.163 L1492.57 683.163 L1492.01 683.163 L1491.45 683.163 L1490.89 683.163 L1490.34 683.163 L1489.78 683.163 L1489.22 683.163 L1488.66 683.163 L1488.1 683.163 L1487.54 683.163 L1486.98 683.163 L1486.42 683.163 L1485.86 683.163 L1485.3 683.163 L1484.74 683.163 L1484.18 683.163 L1483.62 683.163 L1483.07 683.163 L1482.51 683.163 L1481.95 683.163 L1481.39 683.163 L1480.83 683.163 L1480.27 683.163 L1479.71 683.163 L1479.15 683.163 L1478.59 683.163 L1478.03 683.163 L1477.47 683.163 L1476.91 683.163 L1476.35 683.163 L1475.79 683.163 L1475.24 683.163 L1474.68 683.163 L1474.12 683.163 L1473.56 683.163 L1473 683.163 L1472.44 683.163 L1471.88 683.163 L1471.32 683.163 L1470.76 683.163 L1470.2 683.163 L1469.64 683.163 L1469.08 683.163 L1468.52 683.163 L1467.97 683.163 L1467.41 683.163 L1466.85 683.163 L1466.29 683.163 L1465.73 683.163 L1465.17 683.163 L1464.61 683.163 L1464.05 683.163 L1463.49 683.163 L1462.93 683.163 L1462.37 683.163 L1461.81 683.163 L1461.25 683.163 L1460.7 683.163 L1460.14 683.163 L1459.58 683.163 L1459.02 683.163 L1458.46 683.163 L1457.9 683.163 L1457.34 683.163 L1456.78 683.163 L1456.22 683.163 L1455.66 683.163 L1455.1 683.163 L1454.54 683.163 L1453.98 683.163 L1453.42 683.163 L1452.87 683.163 L1452.31 683.163 L1451.75 683.163 L1451.19 683.163 L1450.63 683.163 L1450.07 683.163 L1449.51 683.163 L1448.95 683.163 L1448.39 683.163 L1447.83 683.163 L1447.27 683.163 L1446.71 683.163 L1446.15 683.163 L1445.6 683.163 L1445.04 683.163 L1444.48 683.163 L1443.92 683.163 L1443.36 683.163 L1442.8 683.163 L1442.24 683.163 L1441.68 683.163 L1441.12 683.163 L1440.56 683.163 L1440 683.163 L1439.44 683.163 L1438.88 683.163 L1438.33 683.163 L1437.77 683.163 L1437.21 683.163 L1436.65 683.163 L1436.09 683.163 L1435.53 683.163 L1434.97 683.163 L1434.41 683.163 L1433.85 683.163 L1433.29 683.163 L1432.73 683.163 L1432.17 683.163 L1431.61 683.163 L1431.05 683.163 L1430.5 683.163 L1429.94 683.163 L1429.38 683.163 L1428.82 683.163 L1428.26 683.163 L1427.7 683.163 L1427.14 683.163 L1426.58 683.163 L1426.02 683.163 L1425.46 683.163 L1424.9 683.163 L1424.34 683.163 L1423.78 683.163 L1423.23 683.163 L1422.67 683.163 L1422.11 683.163 L1421.55 683.163 L1420.99 683.163 L1420.43 683.163 L1419.87 683.163 L1419.31 683.163 L1418.75 683.163 L1418.19 683.163 L1417.63 683.163 L1417.07 683.163 L1416.51 683.163 L1415.95 683.163 L1415.4 683.163 L1414.84 683.163 L1414.28 683.163 L1413.72 683.163 L1413.16 683.163 L1412.6 683.163 L1412.04 683.163 L1411.48 683.163 L1410.92 683.163 L1410.36 683.163 L1409.8 683.163 L1409.24 683.163 L1408.68 683.163 L1408.13 683.163 L1407.57 683.163 L1407.01 683.163 L1406.45 683.163 L1405.89 683.163 L1405.33 683.163 L1404.77 683.163 L1404.21 683.163 L1403.65 683.163 L1403.09 683.163 L1402.53 683.163 L1401.97 683.163 L1401.41 683.163 L1400.86 683.163 L1400.3 683.163 L1399.74 683.163 L1399.18 683.163 L1398.62 683.163 L1398.06 683.163 L1397.5 683.163 L1396.94 683.163 L1396.38 683.163 L1395.82 683.163 L1395.26 683.163 L1394.7 683.163 L1394.14 683.163 L1393.58 683.163 L1393.03 683.163 L1392.47 683.163 L1391.91 683.163 L1391.35 683.163 L1390.79 683.163 L1390.23 683.163 L1389.67 683.163 L1389.11 683.163 L1388.55 683.163 L1387.99 683.163 L1387.43 683.163 L1386.87 683.163 L1386.31 683.163 L1385.76 683.163 L1385.2 683.163 L1384.64 683.163 L1384.08 683.163 L1383.52 683.163 L1382.96 683.163 L1382.4 683.163 L1381.84 683.163 L1381.28 683.163 L1380.72 683.163 L1380.16 683.163 L1379.6 683.163 L1379.04 683.163 L1378.49 683.163 L1377.93 683.163 L1377.37 683.163 L1376.81 683.163 L1376.25 683.163 L1375.69 683.163 L1375.13 683.163 L1374.57 683.163 L1374.01 683.163 L1373.45 683.163 L1372.89 683.163 L1372.33 683.163 L1371.77 683.163 L1371.21 683.163 L1370.66 683.163 L1370.1 683.163 L1369.54 683.163 L1368.98 683.163 L1368.42 683.163 L1367.86 683.163 L1367.3 683.163 L1366.74 683.163 L1366.18 683.163 L1365.62 683.163 L1365.06 683.163 L1364.5 683.163 L1363.94 683.163 L1363.39 683.163 L1362.83 683.163 L1362.27 683.163 L1361.71 683.163 L1361.15 683.163 L1360.59 683.163 L1360.03 683.163 L1359.47 683.163 L1358.91 683.163 L1358.35 683.163 L1357.79 683.163 L1357.23 683.163 L1356.67 683.163 L1356.12 683.163 L1355.56 683.163 L1355 683.163 L1354.44 683.163 L1353.88 683.163 L1353.32 683.163 L1352.76 683.163 L1352.2 683.163 L1351.64 683.163 L1351.08 683.163 L1350.52 683.163 L1349.96 683.163 L1349.4 683.163 L1348.84 683.163 L1348.29 683.163 L1347.73 683.163 L1347.17 683.163 L1346.61 683.163 L1346.05 683.163 L1345.49 683.163 L1344.93 683.163 L1344.37 683.163 L1343.81 683.163 L1343.25 683.163 L1342.69 683.163 L1342.13 683.163 L1341.57 683.163 L1341.02 683.163 L1340.46 683.163 L1339.9 683.163 L1339.34 683.163 L1338.78 683.163 L1338.22 683.163 L1337.66 683.163 L1337.1 683.163 L1336.54 683.163 L1335.98 683.163 L1335.42 683.163 L1334.86 683.163 L1334.3 683.163 L1333.75 683.163 L1333.19 683.163 L1332.63 683.163 L1332.07 683.163 L1331.51 683.163 L1330.95 683.163 L1330.39 683.163 L1329.83 683.163 L1329.27 683.163 L1328.71 683.163 L1328.15 683.163 L1327.59 683.163 L1327.03 683.163 L1326.47 683.163 L1325.92 683.163 L1325.36 683.163 L1324.8 683.163 L1324.24 683.163 L1323.68 683.163 L1323.12 683.163 L1322.56 683.163 L1322 683.163 L1321.44 683.163 L1320.88 683.163 L1320.32 683.163 L1319.76 683.163 L1319.2 683.163 L1318.65 683.163 L1318.09 683.163 L1317.53 683.163 L1316.97 683.163 L1316.41 683.163 L1315.85 683.163 L1315.29 683.163 L1314.73 683.163 L1314.17 683.163 L1313.61 683.163 L1313.05 683.163 L1312.49 683.163 L1311.93 683.163 L1311.38 683.163 L1310.82 683.163 L1310.26 683.163 L1309.7 683.163 L1309.14 683.163 L1308.58 683.163 L1308.02 683.163 L1307.46 683.163 L1306.9 683.163 L1306.34 683.163 L1305.78 683.163 L1305.22 683.163 L1304.66 683.163 L1304.1 683.163 L1303.55 683.163 L1302.99 683.163 L1302.43 683.163 L1301.87 683.163 L1301.31 683.163 L1300.75 683.163 L1300.19 683.163 L1299.63 683.163 L1299.07 683.163 L1298.51 683.163 L1297.95 683.163 L1297.39 683.163 L1296.83 683.163 L1296.28 683.163 L1295.72 683.163 L1295.16 683.163 L1294.6 683.163 L1294.04 683.163 L1293.48 683.163 L1292.92 683.163 L1292.36 683.163 L1291.8 683.163 L1291.24 683.163 L1290.68 683.163 L1290.12 683.163 L1289.56 683.163 L1289 683.163 L1288.45 683.163 L1287.89 683.163 L1287.33 683.163 L1286.77 683.163 L1286.21 683.163 L1285.65 683.163 L1285.09 683.163 L1284.53 683.163 L1283.97 683.163 L1283.41 683.163 L1282.85 683.163 L1282.29 683.163 L1281.73 683.163 L1281.18 683.163 L1280.62 683.163 L1280.06 683.163 L1279.5 683.163 L1278.94 683.163 L1278.38 683.163 L1277.82 683.163 L1277.26 683.163 L1276.7 683.163 L1276.14 683.163 L1275.58 683.163 L1275.02 683.163 L1274.46 683.163 L1273.91 683.163 L1273.35 683.163 L1272.79 683.163 L1272.23 683.163 L1271.67 683.163 L1271.11 683.163 L1270.55 683.163 L1269.99 683.163 L1269.43 683.163 L1268.87 683.163 L1268.31 683.163 L1267.75 683.163 L1267.19 683.163 L1266.63 683.163 L1266.08 683.163 L1265.52 683.163 L1264.96 683.163 L1264.4 683.163 L1263.84 683.163 L1263.28 683.163 L1262.72 683.163 L1262.16 683.163 L1261.6 683.163 L1261.04 683.163 L1260.48 683.163 L1259.92 683.163 L1259.36 683.163 L1258.81 683.163 L1258.25 683.163 L1257.69 683.163 L1257.13 683.163 L1256.57 683.163 L1256.01 683.163 L1255.45 683.163 L1254.89 683.163 L1254.33 683.163 L1253.77 683.163 L1253.21 683.163 L1252.65 683.163 L1252.09 683.163 L1251.54 683.163 L1250.98 683.163 L1250.42 683.163 L1249.86 683.163 L1249.3 683.163 L1248.74 683.163 L1248.18 683.163 L1247.62 683.163 L1247.06 683.163 L1246.5 683.163 L1245.94 683.163 L1245.38 683.163 L1244.82 683.163 L1244.26 683.163 L1243.71 683.163 L1243.15 683.163 L1242.59 683.163 L1242.03 683.163 L1241.47 683.163 L1240.91 683.163 L1240.35 683.163 L1239.79 683.163 L1239.23 683.163 L1238.67 683.163 L1238.11 683.163 L1237.55 683.163 L1236.99 683.163 L1236.44 683.163 L1235.88 683.163 L1235.32 683.163 L1234.76 683.163 L1234.2 683.163 L1233.64 683.163 L1233.08 683.163 L1232.52 683.163 L1231.96 683.163 L1231.4 683.163 L1230.84 683.163 L1230.28 683.163 L1229.72 683.163 L1229.17 683.163 L1228.61 683.163 L1228.05 683.163 L1227.49 683.163 L1226.93 683.163 L1226.37 683.163 L1225.81 683.163 L1225.25 683.163 L1224.69 683.163 L1224.13 683.163 L1223.57 683.163 L1223.01 683.163 L1222.45 683.163 L1221.89 683.163 L1221.34 683.163 L1220.78 683.163 L1220.22 683.163 L1219.66 683.163 L1219.1 683.163 L1218.54 683.163 L1217.98 683.163 L1217.42 683.163 L1216.86 683.163 L1216.3 683.163 L1215.74 683.163 L1215.18 683.163 L1214.62 683.163 L1214.07 683.163 L1213.51 683.163 L1212.95 683.163 L1212.39 683.163 L1211.83 683.163 L1211.27 683.163 L1210.71 683.163 L1210.15 683.163 L1209.59 683.163 L1209.03 683.163 L1208.47 683.163 L1207.91 683.163 L1207.35 683.163 L1206.8 683.163 L1206.24 683.163 L1205.68 683.163 L1205.12 683.163 L1204.56 683.163 L1204 683.163 L1203.44 683.163 L1202.88 683.163 L1202.32 683.163 L1201.76 683.163 L1201.2 683.163 L1200.64 683.163 L1200.08 683.163 L1199.52 683.163 L1198.97 683.163 L1198.41 683.163 L1197.85 683.163 L1197.29 683.163 L1196.73 683.163 L1196.17 683.163 L1195.61 683.163 L1195.05 683.163 L1194.49 683.163 L1193.93 683.163 L1193.37 683.163 L1192.81 683.163 L1192.25 683.163 L1191.7 683.163 L1191.14 683.163 L1190.58 683.163 L1190.02 683.163 L1189.46 683.163 L1188.9 683.163 L1188.34 683.163 L1187.78 683.163 L1187.22 683.163 L1186.66 683.163 L1186.1 683.163 L1185.54 683.163 L1184.98 683.163 L1184.43 683.163 L1183.87 683.163 L1183.31 683.163 L1182.75 683.163 L1182.19 683.163 L1181.63 683.163 L1181.07 683.163 L1180.51 683.163 L1179.95 683.163 L1179.39 683.163 L1178.83 683.163 L1178.27 683.163 L1177.71 683.163 L1177.15 683.163 L1176.6 683.163 L1176.04 683.163 L1175.48 683.163 L1174.92 683.163 L1174.36 683.163 L1173.8 683.163 L1173.24 683.163 L1172.68 683.163 L1172.12 683.163 L1171.56 683.163 L1171 683.163 L1170.44 683.163 L1169.88 683.163 L1169.33 683.163 L1168.77 683.163 L1168.21 683.163 L1167.65 683.163 L1167.09 683.163 L1166.53 683.163 L1165.97 683.163 L1165.41 683.163 L1164.85 683.163 L1164.29 683.163 L1163.73 683.163 L1163.17 683.163 L1162.61 683.163 L1162.05 683.163 L1161.5 683.163 L1160.94 683.163 L1160.38 683.163 L1159.82 683.163 L1159.26 683.163 L1158.7 683.163 L1158.14 683.163 L1157.58 683.163 L1157.02 683.163 L1156.46 683.163 L1155.9 683.163 L1155.34 683.163 L1154.78 683.163 L1154.23 683.163 L1153.67 683.163 L1153.11 683.163 L1152.55 683.163 L1151.99 683.163 L1151.43 683.163 L1150.87 683.163 L1150.31 683.163 L1149.75 683.163 L1149.19 683.163 L1148.63 683.163 L1148.07 683.163 L1147.51 683.163 L1146.96 683.163 L1146.4 683.163 L1145.84 683.163 L1145.28 683.163 L1144.72 683.163 L1144.16 683.163 L1143.6 683.163 L1143.04 683.163 L1142.48 683.163 L1141.92 683.163 L1141.36 683.163 L1140.8 683.163 L1140.24 683.163 L1139.68 683.163 L1139.13 683.163 L1138.57 683.163 L1138.01 683.163 L1137.45 683.163 L1136.89 683.163 L1136.33 683.163 L1135.77 683.163 L1135.21 683.163 L1134.65 683.163 L1134.09 683.163 L1133.53 683.163 L1132.97 683.163 L1132.41 683.163 L1131.86 683.163 L1131.3 683.163 L1130.74 683.163 L1130.18 683.163 L1129.62 683.163 L1129.06 683.163 L1128.5 683.163 L1127.94 683.163 L1127.38 683.163 L1126.82 683.163 L1126.26 683.163 L1125.7 683.163 L1125.14 683.163 L1124.59 683.163 L1124.03 683.163 L1123.47 683.163 L1122.91 683.163 L1122.35 683.163 L1121.79 683.163 L1121.23 683.163 L1120.67 683.163 L1120.11 683.163 L1119.55 683.163 L1118.99 683.163 L1118.43 683.163 L1117.87 683.163 L1117.31 683.163 L1116.76 683.163 L1116.2 683.163 L1115.64 683.163 L1115.08 683.163 L1114.52 683.163 L1113.96 683.163 L1113.4 683.163 L1112.84 683.163 L1112.28 683.163 L1111.72 683.163 L1111.16 683.163 L1110.6 683.163 L1110.04 683.163 L1109.49 683.163 L1108.93 683.163 L1108.37 683.163 L1107.81 683.163 L1107.25 683.163 L1106.69 683.163 L1106.13 683.163 L1105.57 683.163 L1105.01 683.163 L1104.45 683.163 L1103.89 683.163 L1103.33 683.163 L1102.77 683.163 L1102.22 683.163 L1101.66 683.163 L1101.1 683.163 L1100.54 683.163 L1099.98 683.163 L1099.42 683.163 L1098.86 683.163 L1098.3 683.163 L1097.74 683.163 L1097.18 683.163 L1096.62 683.163 L1096.06 683.163 L1095.5 683.163 L1094.94 683.163 L1094.39 683.163 L1093.83 683.163 L1093.27 683.163 L1092.71 683.163 L1092.15 683.163 L1091.59 683.163 L1091.03 683.163 L1090.47 683.163 L1089.91 683.163 L1089.35 683.163 L1088.79 683.163 L1088.23 683.163 L1087.67 683.163 L1087.12 683.163 L1086.56 683.163 L1086 683.163 L1085.44 683.163 L1084.88 683.163 L1084.32 683.163 L1083.76 683.163 L1083.2 683.163 L1082.64 683.163 L1082.08 683.163 L1081.52 683.163 L1080.96 683.163 L1080.4 683.163 L1079.85 683.163 L1079.29 683.163 L1078.73 683.163 L1078.17 683.163 L1077.61 683.163 L1077.05 683.163 L1076.49 683.163 L1075.93 683.163 L1075.37 683.163 L1074.81 683.163 L1074.25 683.163 L1073.69 683.163 L1073.13 683.163 L1072.57 683.163 L1072.02 683.163 L1071.46 683.163 L1070.9 683.163 L1070.34 683.163 L1069.78 683.163 L1069.22 683.163 L1068.66 683.163 L1068.1 683.163 L1067.54 683.163 L1066.98 683.163 L1066.42 683.163 L1065.86 683.163 L1065.3 683.163 L1064.75 683.163 L1064.19 683.163 L1063.63 683.163 L1063.07 683.163 L1062.51 683.163 L1061.95 683.163 L1061.39 683.163 L1060.83 683.163 L1060.27 683.163 L1059.71 683.163 L1059.15 683.163 L1058.59 683.163 L1058.03 683.163 L1057.48 683.163 L1056.92 683.163 L1056.36 683.163 L1055.8 683.163 L1055.24 683.163 L1054.68 683.163 L1054.12 683.163 L1053.56 683.163 L1053 683.163 L1052.44 683.163 L1051.88 683.163 L1051.32 683.163 L1050.76 683.163 L1050.2 683.163 L1049.65 683.163 L1049.09 683.163 L1048.53 683.163 L1047.97 683.163 L1047.41 683.163 L1046.85 683.163 L1046.29 683.163 L1045.73 683.163 L1045.17 683.163 L1044.61 683.163 L1044.05 683.163 L1043.49 683.163 L1042.93 683.163 L1042.38 683.163 L1041.82 683.163 L1041.26 683.163 L1040.7 683.163 L1040.14 683.163 L1039.58 683.163 L1039.02 683.163 L1038.46 683.163 L1037.9 683.163 L1037.34 683.163 L1036.78 683.163 L1036.22 683.163 L1035.66 683.163 L1035.1 683.163 L1034.55 683.163 L1033.99 683.163 L1033.43 683.163 L1032.87 683.163 L1032.31 683.163 L1031.75 683.163 L1031.19 683.163 L1030.63 683.163 L1030.07 683.163 L1029.51 683.163 L1028.95 683.163 L1028.39 683.163 L1027.83 683.163 L1027.28 683.163 L1026.72 683.163 L1026.16 683.163 L1025.6 683.163 L1025.04 683.163 L1024.48 683.163 L1023.92 683.163 L1023.36 683.163 L1022.8 683.163 L1022.24 683.163 L1021.68 683.163 L1021.12 683.163 L1020.56 683.163 L1020.01 683.163 L1019.45 683.163 L1018.89 683.163 L1018.33 683.163 L1017.77 683.163 L1017.21 683.163 L1016.65 683.163 L1016.09 683.163 L1015.53 683.163 L1014.97 683.163 L1014.41 683.163 L1013.85 683.163 L1013.29 683.163 L1012.73 683.163 L1012.18 683.163 L1011.62 683.163 L1011.06 683.163 L1010.5 683.163 L1009.94 683.163 L1009.38 683.163 L1008.82 683.163 L1008.26 683.163 L1007.7 683.163 L1007.14 683.163 L1006.58 683.163 L1006.02 683.163 L1005.46 683.163 L1004.91 683.163 L1004.35 683.163 L1003.79 683.163 L1003.23 683.163 L1002.67 683.163 L1002.11 683.163 L1001.55 683.163 L1000.99 683.163 L1000.43 683.163 L999.872 683.163 L999.313 683.163 L998.754 683.163 L998.194 683.163 L997.635 683.163 L997.076 683.163 L996.517 683.163 L995.957 683.163 L995.398 683.163 L994.839 683.163 L994.28 683.163 L993.72 683.163 L993.161 683.163 L992.602 683.163 L992.043 683.163 L991.483 683.163 L990.924 683.163 L990.365 683.163 L989.806 683.163 L989.246 683.163 L988.687 683.163 L988.128 683.163 L987.569 683.163 L987.009 683.163 L986.45 683.163 L985.891 683.163 L985.332 683.163 L984.772 683.163 L984.213 683.163 L983.654 683.163 L983.095 683.163 L982.535 683.163 L981.976 683.163 L981.417 683.163 L980.858 683.163 L980.298 683.163 L979.739 683.163 L979.18 683.163 L978.621 683.163 L978.061 683.163 L977.502 683.163 L976.943 683.163 L976.384 683.163 L975.824 683.163 L975.265 683.163 L974.706 683.163 L974.147 683.163 L973.587 683.163 L973.028 683.163 L972.469 683.163 L971.91 683.163 L971.35 683.163 L970.791 683.163 L970.232 683.163 L969.673 683.163 L969.113 683.163 L968.554 683.163 L967.995 683.163 L967.436 683.163 L966.876 683.163 L966.317 683.163 L965.758 683.163 L965.199 683.163 L964.639 683.163 L964.08 683.163 L963.521 683.163 L962.962 683.163 L962.402 683.163 L961.843 683.163 L961.284 683.163 L960.725 683.163 L960.165 683.163 L959.606 683.163 L959.047 683.163 L958.488 683.163 L957.928 683.163 L957.369 683.163 L956.81 683.163 L956.251 683.163 L955.691 683.163 L955.132 683.163 L954.573 683.163 L954.014 683.163 L953.454 683.163 L952.895 683.163 L952.336 683.163 L951.777 683.163 L951.217 683.163 L950.658 683.163 L950.099 683.163 L949.54 683.163 L948.98 683.163 L948.421 683.163 L947.862 683.163 L947.303 683.163 L946.743 683.163 L946.184 683.163 L945.625 683.163 L945.066 683.163 L944.506 683.163 L943.947 683.163 L943.388 683.163 L942.829 683.163 L942.269 683.163 L941.71 683.163 L941.151 683.163 L940.592 683.163 L940.032 683.163 L939.473 683.163 L938.914 683.163 L938.355 683.163 L937.795 683.163 L937.236 683.163 L936.677 683.163 L936.118 683.163 L935.558 683.163 L934.999 683.163 L934.44 683.163 L933.881 683.163 L933.321 683.163 L932.762 683.163 L932.203 683.163 L931.644 683.163 L931.084 683.163 L930.525 683.163 L929.966 683.163 L929.406 683.163 L928.847 683.163 L928.288 683.163 L927.729 683.163 L927.169 683.163 L926.61 683.163 L926.051 683.163 L925.492 683.163 L924.932 683.163 L924.373 683.163 L923.814 683.163 L923.255 683.163 L922.695 683.163 L922.136 683.163 L921.577 683.163 L921.018 683.163 L920.458 683.163 L919.899 683.163 L919.34 683.163 L918.781 683.163 L918.221 683.163 L917.662 683.163 L917.103 683.163 L916.544 683.163 L915.984 683.163 L915.425 683.163 L914.866 683.163 L914.307 683.163 L913.747 683.163 L913.188 683.163 L912.629 683.163 L912.07 683.163 L911.51 683.163 L910.951 683.163 L910.392 683.163 L909.833 683.163 L909.273 683.163 L908.714 683.163 L908.155 683.163 L907.596 683.163 L907.036 683.163 L906.477 683.163 L905.918 683.163 L905.359 683.163 L904.799 683.163 L904.24 683.163 L903.681 683.163 L903.122 683.163 L902.562 683.163 L902.003 683.163 L901.444 683.163 L900.885 683.163 L900.325 683.163 L899.766 683.163 L899.207 683.163 L898.648 683.163 L898.088 683.163 L897.529 683.163 L896.97 683.163 L896.411 683.163 L895.851 683.163 L895.292 683.163 L894.733 683.163 L894.174 683.163 L893.614 683.163 L893.055 683.163 L892.496 683.163 L891.937 683.163 L891.377 683.163 L890.818 683.163 L890.259 683.163 L889.7 683.163 L889.14 683.163 L888.581 683.163 L888.022 683.163 L887.463 683.163 L886.903 683.163 L886.344 683.163 L885.785 683.163 L885.226 683.163 L884.666 683.163 L884.107 683.163 L883.548 683.163 L882.989 683.163 L882.429 683.163 L881.87 683.163 L881.311 683.163 L880.752 683.163 L880.192 683.163 L879.633 683.163 L879.074 683.163 L878.515 683.163 L877.955 683.163 L877.396 683.163 L876.837 683.163 L876.278 683.163 L875.718 683.163 L875.159 683.163 L874.6 683.163 L874.041 683.163 L873.481 683.163 L872.922 683.163 L872.363 683.163 L871.804 683.163 L871.244 683.163 L870.685 683.163 L870.126 683.163 L869.567 683.163 L869.007 683.163 L868.448 683.163 L867.889 683.163 L867.33 683.163 L866.77 683.163 L866.211 683.163 L865.652 683.163 L865.093 683.163 L864.533 683.163 L863.974 683.163 L863.415 683.163 L862.856 683.163 L862.296 683.163 L861.737 683.163 L861.178 683.163 L860.619 683.163 L860.059 683.163 L859.5 683.163 L858.941 683.163 L858.382 683.163 L857.822 683.163 L857.263 683.163 L856.704 683.163 L856.145 683.163 L855.585 683.163 L855.026 683.163 L854.467 683.163 L853.908 683.163 L853.348 683.163 L852.789 683.163 L852.23 683.163 L851.671 683.163 L851.111 683.163 L850.552 683.163 L849.993 683.163 L849.434 683.163 L848.874 683.163 L848.315 683.163 L847.756 683.163 L847.197 683.163 L846.637 683.163 L846.078 683.163 L845.519 683.163 L844.96 683.163 L844.4 683.163 L843.841 683.163 L843.282 683.163 L842.723 683.163 L842.163 683.163 L841.604 683.163 L841.045 683.163 L840.486 683.163 L839.926 683.163 L839.367 683.163 L838.808 683.163 L838.249 683.163 L837.689 683.163 L837.13 683.163 L836.571 683.163 L836.012 683.163 L835.452 683.163 L834.893 683.163 L834.334 683.163 L833.775 683.163 L833.215 683.163 L832.656 683.163 L832.097 683.163 L831.538 683.163 L830.978 683.163 L830.419 683.163 L829.86 683.163 L829.301 683.163 L828.741 683.163 L828.182 683.163 L827.623 683.163 L827.064 683.163 L826.504 683.163 L825.945 683.163 L825.386 683.163 L824.827 683.163 L824.267 683.163 L823.708 683.163 L823.149 683.163 L822.59 683.163 L822.03 683.163 L821.471 683.163 L820.912 683.163 L820.353 683.163 L819.793 683.163 L819.234 683.163 L818.675 683.163 L818.116 683.163 L817.556 683.163 L816.997 683.163 L816.438 683.163 L815.879 683.163 L815.319 683.163 L814.76 683.163 L814.201 683.163 L813.642 683.163 L813.082 683.163 L812.523 683.163 L811.964 683.163 L811.405 683.163 L810.845 683.163 L810.286 683.163 L809.727 683.163 L809.168 683.163 L808.608 683.163 L808.049 683.163 L807.49 683.163 L806.931 683.163 L806.371 683.163 L805.812 683.163 L805.253 683.163 L804.693 683.163 L804.134 683.163 L803.575 683.163 L803.016 683.163 L802.456 683.163 L801.897 683.163 L801.338 683.163 L800.779 683.163 L800.219 683.163 L799.66 683.163 L799.101 683.163 L798.542 683.163 L797.982 683.163 L797.423 683.163 L796.864 683.163 L796.305 683.163 L795.745 683.163 L795.186 683.163 L794.627 683.163 L794.068 683.163 L793.508 683.163 L792.949 683.163 L792.39 683.163 L791.831 683.163 L791.271 683.163 L790.712 683.163 L790.153 683.163 L789.594 683.163 L789.034 683.163 L788.475 683.163 L787.916 683.163 L787.357 683.163 L786.797 683.163 L786.238 683.163 L785.679 683.163 L785.12 683.163 L784.56 683.163 L784.001 683.163 L783.442 683.163 L782.883 683.163 L782.323 683.163 L781.764 683.163 L781.205 683.163 L780.646 683.163 L780.086 683.163 L779.527 683.163 L778.968 683.163 L778.409 683.163 L777.849 683.163 L777.29 683.163 L776.731 683.163 L776.172 683.163 L775.612 683.163 L775.053 683.163 L774.494 683.163 L773.935 683.163 L773.375 683.163 L772.816 683.163 L772.257 683.163 L771.698 683.163 L771.138 683.163 L770.579 683.163 L770.02 683.163 L769.461 683.163 L768.901 683.163 L768.342 683.163 L767.783 683.163 L767.224 683.163 L766.664 683.163 L766.105 683.163 L765.546 683.163 L764.987 683.163 L764.427 683.163 L763.868 683.163 L763.309 683.163 L762.75 683.163 L762.19 683.163 L761.631 683.163 L761.072 683.163 L760.513 683.163 L759.953 683.163 L759.394 683.163 L758.835 683.163 L758.276 683.163 L757.716 683.163 L757.157 683.163 L756.598 683.163 L756.039 683.163 L755.479 683.163 L754.92 683.163 L754.361 683.163 L753.802 683.163 L753.242 683.163 L752.683 683.163 L752.124 683.163 L751.565 683.163 L751.005 683.163 L750.446 683.163 L749.887 683.163 L749.328 683.163 L748.768 683.163 L748.209 683.163 L747.65 683.163 L747.091 683.163 L746.531 683.163 L745.972 683.163 L745.413 683.163 L744.854 683.163 L744.294 683.163 L743.735 683.163 L743.176 683.163 L742.617 683.163 L742.057 683.163 L741.498 683.163 L740.939 683.163 L740.38 683.163 L739.82 683.163 L739.261 683.163 L738.702 683.163 L738.143 683.163 L737.583 683.163 L737.024 683.163 L736.465 683.163 L735.906 683.163 L735.346 683.163 L734.787 683.163 L734.228 683.163 L733.669 683.163 L733.109 683.163 L732.55 683.163 L731.991 683.163 L731.432 683.163 L730.872 683.163 L730.313 683.163 L729.754 683.163 L729.195 683.163 L728.635 683.163 L728.076 683.163 L727.517 683.163 L726.958 683.163 L726.398 683.163 L725.839 683.163 L725.28 683.163 L724.721 683.163 L724.161 683.163 L723.602 683.163 L723.043 683.163 L722.484 683.163 L721.924 683.163 L721.365 683.163 L720.806 683.163 L720.247 683.163  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.921 720.806,683.921 721.365,683.921 721.924,683.921 722.484,683.921 723.043,683.921 723.602,683.921 724.161,683.921 724.721,683.921 725.28,683.921 725.839,683.921 726.398,683.921 726.958,683.921 727.517,683.921 728.076,683.921 728.635,683.921 729.195,683.921 729.754,683.921 730.313,683.921 730.872,683.921 731.432,683.921 731.991,683.921 732.55,683.921 733.109,683.921 733.669,683.921 734.228,683.921 734.787,683.921 735.346,683.921 735.906,683.921 736.465,683.921 737.024,683.921 737.583,683.921 738.143,683.921 738.702,683.921 739.261,683.921 739.82,683.921 740.38,683.921 740.939,683.921 741.498,683.921 742.057,683.921 742.617,683.921 743.176,683.921 743.735,683.921 744.294,683.921 744.854,683.921 745.413,683.921 745.972,683.921 746.531,683.921 747.091,683.921 747.65,683.921 748.209,683.921 748.768,683.921 749.328,683.921 749.887,683.921 750.446,683.921 751.005,683.921 751.565,683.921 752.124,683.921 752.683,683.921 753.242,683.921 753.802,683.921 754.361,683.921 754.92,683.921 755.479,683.921 756.039,683.921 756.598,683.921 757.157,683.921 757.716,683.921 758.276,683.921 758.835,683.921 759.394,683.921 759.953,683.921 760.513,683.921 761.072,683.921 761.631,683.921 762.19,683.921 762.75,683.921 763.309,683.921 763.868,683.921 764.427,683.921 764.987,683.921 765.546,683.921 766.105,683.921 766.664,683.921 767.224,683.921 767.783,683.921 768.342,683.921 768.901,683.921 769.461,683.921 770.02,683.921 770.579,683.921 771.138,683.921 771.698,683.921 772.257,683.921 772.816,683.921 773.375,683.921 773.935,683.921 774.494,683.921 775.053,683.921 775.612,683.921 776.172,683.921 776.731,683.921 777.29,683.921 777.849,683.921 778.409,683.921 778.968,683.921 779.527,683.921 780.086,683.921 780.646,683.921 781.205,683.921 781.764,683.921 782.323,683.921 782.883,683.921 783.442,683.921 784.001,683.921 784.56,683.921 785.12,683.921 785.679,683.921 786.238,683.921 786.797,683.921 787.357,683.921 787.916,683.921 788.475,683.921 789.034,683.921 789.594,683.921 790.153,683.921 790.712,683.921 791.271,683.921 791.831,683.921 792.39,683.921 792.949,683.921 793.508,683.921 794.068,683.921 794.627,683.921 795.186,683.921 795.745,683.921 796.305,683.921 796.864,683.921 797.423,683.921 797.982,683.921 798.542,683.921 799.101,683.921 799.66,683.921 800.219,683.921 800.779,683.921 801.338,683.921 801.897,683.921 802.456,683.921 803.016,683.921 803.575,683.921 804.134,683.921 804.693,683.921 805.253,683.921 805.812,683.921 806.371,683.921 806.931,683.921 807.49,683.921 808.049,683.921 808.608,683.921 809.168,683.921 809.727,683.921 810.286,683.921 810.845,683.921 811.405,683.921 811.964,683.921 812.523,683.921 813.082,683.921 813.642,683.921 814.201,683.921 814.76,683.921 815.319,683.921 815.879,683.921 816.438,683.921 816.997,683.921 817.556,683.921 818.116,683.921 818.675,683.921 819.234,683.921 819.793,683.921 820.353,683.921 820.912,683.921 821.471,683.921 822.03,683.921 822.59,683.921 823.149,683.921 823.708,683.921 824.267,683.921 824.827,683.921 825.386,683.921 825.945,683.921 826.504,683.921 827.064,683.921 827.623,683.921 828.182,683.921 828.741,683.921 829.301,683.921 829.86,683.921 830.419,683.921 830.978,683.921 831.538,683.921 832.097,683.921 832.656,683.921 833.215,683.921 833.775,683.921 834.334,683.921 834.893,683.921 835.452,683.921 836.012,683.921 836.571,683.921 837.13,683.921 837.689,683.921 838.249,683.921 838.808,683.921 839.367,683.921 839.926,683.921 840.486,683.921 841.045,683.921 841.604,683.921 842.163,683.921 842.723,683.921 843.282,683.921 843.841,683.921 844.4,683.921 844.96,683.921 845.519,683.921 846.078,683.921 846.637,683.921 847.197,683.921 847.756,683.921 848.315,683.921 848.874,683.921 849.434,683.921 849.993,683.921 850.552,683.921 851.111,683.921 851.671,683.921 852.23,683.921 852.789,683.921 853.348,683.921 853.908,683.921 854.467,683.921 855.026,683.921 855.585,683.921 856.145,683.921 856.704,683.921 857.263,683.921 857.822,683.921 858.382,683.921 858.941,683.921 859.5,683.921 860.059,683.921 860.619,683.921 861.178,683.921 861.737,683.921 862.296,683.921 862.856,683.921 863.415,683.921 863.974,683.921 864.533,683.921 865.093,683.921 865.652,683.921 866.211,683.921 866.77,683.921 867.33,683.921 867.889,683.921 868.448,683.921 869.007,683.921 869.567,683.921 870.126,683.921 870.685,683.921 871.244,683.921 871.804,683.921 872.363,683.921 872.922,683.921 873.481,683.921 874.041,683.921 874.6,683.921 875.159,683.921 875.718,683.921 876.278,683.921 876.837,683.921 877.396,683.921 877.955,683.921 878.515,683.921 879.074,683.921 879.633,683.921 880.192,683.921 880.752,683.921 881.311,683.921 881.87,683.921 882.429,683.921 882.989,683.921 883.548,683.921 884.107,683.921 884.666,683.921 885.226,683.921 885.785,683.921 886.344,683.921 886.903,683.921 887.463,683.921 888.022,683.921 888.581,683.921 889.14,683.921 889.7,683.921 890.259,683.921 890.818,683.921 891.377,683.921 891.937,683.921 892.496,683.921 893.055,683.921 893.614,683.921 894.174,683.921 894.733,683.921 895.292,683.921 895.851,683.921 896.411,683.921 896.97,683.921 897.529,683.921 898.088,683.921 898.648,683.921 899.207,683.921 899.766,683.921 900.325,683.921 900.885,683.921 901.444,683.921 902.003,683.921 902.562,683.921 903.122,683.921 903.681,683.921 904.24,683.921 904.799,683.921 905.359,683.921 905.918,683.921 906.477,683.921 907.036,683.921 907.596,683.921 908.155,683.921 908.714,683.921 909.273,683.921 909.833,683.921 910.392,683.921 910.951,683.921 911.51,683.921 912.07,683.921 912.629,683.921 913.188,683.921 913.747,683.921 914.307,683.921 914.866,683.921 915.425,683.921 915.984,683.921 916.544,683.921 917.103,683.921 917.662,683.921 918.221,683.921 918.781,683.921 919.34,683.921 919.899,683.921 920.458,683.921 921.018,683.921 921.577,683.921 922.136,683.921 922.695,683.921 923.255,683.921 923.814,683.921 924.373,683.921 924.932,683.921 925.492,683.921 926.051,683.921 926.61,683.921 927.169,683.921 927.729,683.921 928.288,683.921 928.847,683.921 929.406,683.921 929.966,683.921 930.525,683.921 931.084,683.921 931.644,683.921 932.203,683.921 932.762,683.921 933.321,683.921 933.881,683.921 934.44,683.921 934.999,683.921 935.558,683.921 936.118,683.921 936.677,683.921 937.236,683.921 937.795,683.921 938.355,683.921 938.914,683.921 939.473,683.921 940.032,683.921 940.592,683.921 941.151,683.921 941.71,683.921 942.269,683.921 942.829,683.921 943.388,683.921 943.947,683.921 944.506,683.921 945.066,683.921 945.625,683.921 946.184,683.921 946.743,683.921 947.303,683.921 947.862,683.921 948.421,683.921 948.98,683.921 949.54,683.921 950.099,683.921 950.658,683.921 951.217,683.921 951.777,683.921 952.336,683.921 952.895,683.921 953.454,683.921 954.014,683.921 954.573,683.921 955.132,683.921 955.691,683.921 956.251,683.921 956.81,683.921 957.369,683.921 957.928,683.921 958.488,683.921 959.047,683.921 959.606,683.921 960.165,683.921 960.725,683.921 961.284,683.921 961.843,683.921 962.402,683.921 962.962,683.921 963.521,683.921 964.08,683.921 964.639,683.921 965.199,683.921 965.758,683.921 966.317,683.921 966.876,683.921 967.436,683.921 967.995,683.921 968.554,683.921 969.113,683.921 969.673,683.921 970.232,683.921 970.791,683.921 971.35,683.921 971.91,683.921 972.469,683.921 973.028,683.921 973.587,683.921 974.147,683.921 974.706,683.921 975.265,683.921 975.824,683.921 976.384,683.921 976.943,683.921 977.502,683.921 978.061,683.921 978.621,683.921 979.18,683.921 979.739,683.921 980.298,683.921 980.858,683.921 981.417,683.921 981.976,683.921 982.535,683.921 983.095,683.921 983.654,683.921 984.213,683.921 984.772,683.921 985.332,683.921 985.891,683.921 986.45,683.921 987.009,683.921 987.569,683.921 988.128,683.921 988.687,683.921 989.246,683.921 989.806,683.921 990.365,683.921 990.924,683.921 991.483,683.921 992.043,683.921 992.602,683.921 993.161,683.921 993.72,683.921 994.28,683.921 994.839,683.921 995.398,683.921 995.957,683.921 996.517,683.921 997.076,683.921 997.635,683.921 998.194,683.921 998.754,683.921 999.313,683.921 999.872,683.921 1000.43,683.921 1000.99,683.921 1001.55,683.921 1002.11,683.921 1002.67,683.921 1003.23,683.921 1003.79,683.921 1004.35,683.921 1004.91,683.921 1005.46,683.921 1006.02,683.921 1006.58,683.921 1007.14,683.921 1007.7,683.921 1008.26,683.921 1008.82,683.921 1009.38,683.921 1009.94,683.921 1010.5,683.921 1011.06,683.921 1011.62,683.921 1012.18,683.921 1012.73,683.921 1013.29,683.921 1013.85,683.921 1014.41,683.921 1014.97,683.921 1015.53,683.921 1016.09,683.921 1016.65,683.921 1017.21,683.921 1017.77,683.921 1018.33,683.921 1018.89,683.921 1019.45,683.921 1020.01,683.921 1020.56,683.921 1021.12,683.921 1021.68,683.921 1022.24,683.921 1022.8,683.921 1023.36,683.921 1023.92,683.921 1024.48,683.921 1025.04,683.921 1025.6,683.921 1026.16,683.921 1026.72,683.921 1027.28,683.921 1027.83,683.921 1028.39,683.921 1028.95,683.921 1029.51,683.921 1030.07,683.921 1030.63,683.921 1031.19,683.921 1031.75,683.921 1032.31,683.921 1032.87,683.921 1033.43,683.921 1033.99,683.921 1034.55,683.921 1035.1,683.921 1035.66,683.921 1036.22,683.921 1036.78,683.921 1037.34,683.921 1037.9,683.921 1038.46,683.921 1039.02,683.921 1039.58,683.921 1040.14,683.921 1040.7,683.921 1041.26,683.921 1041.82,683.921 1042.38,683.921 1042.93,683.921 1043.49,683.921 1044.05,683.921 1044.61,683.921 1045.17,683.921 1045.73,683.921 1046.29,683.921 1046.85,683.921 1047.41,683.921 1047.97,683.921 1048.53,683.921 1049.09,683.921 1049.65,683.921 1050.2,683.921 1050.76,683.921 1051.32,683.921 1051.88,683.921 1052.44,683.921 1053,683.921 1053.56,683.921 1054.12,683.921 1054.68,683.921 1055.24,683.921 1055.8,683.921 1056.36,683.921 1056.92,683.921 1057.48,683.921 1058.03,683.921 1058.59,683.921 1059.15,683.921 1059.71,683.921 1060.27,683.921 1060.83,683.921 1061.39,683.921 1061.95,683.921 1062.51,683.921 1063.07,683.921 1063.63,683.921 1064.19,683.921 1064.75,683.921 1065.3,683.921 1065.86,683.921 1066.42,683.921 1066.98,683.921 1067.54,683.921 1068.1,683.921 1068.66,683.921 1069.22,683.921 1069.78,683.921 1070.34,683.921 1070.9,683.921 1071.46,683.921 1072.02,683.921 1072.57,683.921 1073.13,683.921 1073.69,683.921 1074.25,683.921 1074.81,683.921 1075.37,683.921 1075.93,683.921 1076.49,683.921 1077.05,683.921 1077.61,683.921 1078.17,683.921 1078.73,683.921 1079.29,683.921 1079.85,683.921 1080.4,683.921 1080.96,683.921 1081.52,683.921 1082.08,683.921 1082.64,683.921 1083.2,683.921 1083.76,683.921 1084.32,683.921 1084.88,683.921 1085.44,683.921 1086,683.921 1086.56,683.921 1087.12,683.921 1087.67,683.921 1088.23,683.921 1088.79,683.921 1089.35,683.921 1089.91,683.921 1090.47,683.921 1091.03,683.921 1091.59,683.921 1092.15,683.921 1092.71,683.921 1093.27,683.921 1093.83,683.921 1094.39,683.921 1094.94,683.921 1095.5,683.921 1096.06,683.921 1096.62,683.921 1097.18,683.921 1097.74,683.921 1098.3,683.921 1098.86,683.921 1099.42,683.921 1099.98,683.921 1100.54,683.921 1101.1,683.921 1101.66,683.921 1102.22,683.921 1102.77,683.921 1103.33,683.921 1103.89,683.921 1104.45,683.921 1105.01,683.921 1105.57,683.921 1106.13,683.921 1106.69,683.921 1107.25,683.921 1107.81,683.921 1108.37,683.921 1108.93,683.921 1109.49,683.921 1110.04,683.921 1110.6,683.921 1111.16,683.921 1111.72,683.921 1112.28,683.921 1112.84,683.921 1113.4,683.921 1113.96,683.921 1114.52,683.921 1115.08,683.921 1115.64,683.921 1116.2,683.921 1116.76,683.921 1117.31,683.921 1117.87,683.921 1118.43,683.921 1118.99,683.921 1119.55,683.921 1120.11,683.921 1120.67,683.921 1121.23,683.921 1121.79,683.921 1122.35,683.921 1122.91,683.921 1123.47,683.921 1124.03,683.921 1124.59,683.921 1125.14,683.921 1125.7,683.921 1126.26,683.921 1126.82,683.921 1127.38,683.921 1127.94,683.921 1128.5,683.921 1129.06,683.921 1129.62,683.921 1130.18,683.921 1130.74,683.921 1131.3,683.921 1131.86,683.921 1132.41,683.921 1132.97,683.921 1133.53,683.921 1134.09,683.921 1134.65,683.921 1135.21,683.921 1135.77,683.921 1136.33,683.921 1136.89,683.921 1137.45,683.921 1138.01,683.921 1138.57,683.921 1139.13,683.921 1139.68,683.921 1140.24,683.921 1140.8,683.921 1141.36,683.921 1141.92,683.921 1142.48,683.921 1143.04,683.921 1143.6,683.921 1144.16,683.921 1144.72,683.921 1145.28,683.921 1145.84,683.921 1146.4,683.921 1146.96,683.921 1147.51,683.921 1148.07,683.921 1148.63,683.921 1149.19,683.921 1149.75,683.921 1150.31,683.921 1150.87,683.921 1151.43,683.921 1151.99,683.921 1152.55,683.921 1153.11,683.921 1153.67,683.921 1154.23,683.921 1154.78,683.921 1155.34,683.921 1155.9,683.921 1156.46,683.921 1157.02,683.921 1157.58,683.921 1158.14,683.921 1158.7,683.921 1159.26,683.921 1159.82,683.921 1160.38,683.921 1160.94,683.921 1161.5,683.921 1162.05,683.921 1162.61,683.921 1163.17,683.921 1163.73,683.921 1164.29,683.921 1164.85,683.921 1165.41,683.921 1165.97,683.921 1166.53,683.921 1167.09,683.921 1167.65,683.921 1168.21,683.921 1168.77,683.921 1169.33,683.921 1169.88,683.921 1170.44,683.921 1171,683.921 1171.56,683.921 1172.12,683.921 1172.68,683.921 1173.24,683.921 1173.8,683.921 1174.36,683.921 1174.92,683.921 1175.48,683.921 1176.04,683.921 1176.6,683.921 1177.15,683.921 1177.71,683.921 1178.27,683.921 1178.83,683.921 1179.39,683.921 1179.95,683.921 1180.51,683.921 1181.07,683.921 1181.63,683.921 1182.19,683.921 1182.75,683.921 1183.31,683.921 1183.87,683.921 1184.43,683.921 1184.98,683.921 1185.54,683.921 1186.1,683.921 1186.66,683.921 1187.22,683.921 1187.78,683.921 1188.34,683.921 1188.9,683.921 1189.46,683.921 1190.02,683.921 1190.58,683.921 1191.14,683.921 1191.7,683.921 1192.25,683.921 1192.81,683.921 1193.37,683.921 1193.93,683.921 1194.49,683.921 1195.05,683.921 1195.61,683.921 1196.17,683.921 1196.73,683.921 1197.29,683.921 1197.85,683.921 1198.41,683.921 1198.97,683.921 1199.52,683.921 1200.08,683.921 1200.64,683.921 1201.2,683.921 1201.76,683.921 1202.32,683.921 1202.88,683.921 1203.44,683.921 1204,683.921 1204.56,683.921 1205.12,683.921 1205.68,683.921 1206.24,683.921 1206.8,683.921 1207.35,683.921 1207.91,683.921 1208.47,683.921 1209.03,683.921 1209.59,683.921 1210.15,683.921 1210.71,683.921 1211.27,683.921 1211.83,683.921 1212.39,683.921 1212.95,683.921 1213.51,683.921 1214.07,683.921 1214.62,683.921 1215.18,683.921 1215.74,683.921 1216.3,683.921 1216.86,683.921 1217.42,683.921 1217.98,683.921 1218.54,683.921 1219.1,683.921 1219.66,683.921 1220.22,683.921 1220.78,683.921 1221.34,683.921 1221.89,683.921 1222.45,683.921 1223.01,683.921 1223.57,683.921 1224.13,683.921 1224.69,683.921 1225.25,683.921 1225.81,683.921 1226.37,683.921 1226.93,683.921 1227.49,683.921 1228.05,683.921 1228.61,683.921 1229.17,683.921 1229.72,683.921 1230.28,683.921 1230.84,683.921 1231.4,683.921 1231.96,683.921 1232.52,683.921 1233.08,683.921 1233.64,683.921 1234.2,683.921 1234.76,683.921 1235.32,683.921 1235.88,683.921 1236.44,683.921 1236.99,683.921 1237.55,683.921 1238.11,683.921 1238.67,683.921 1239.23,683.921 1239.79,683.921 1240.35,683.921 1240.91,683.921 1241.47,683.921 1242.03,683.921 1242.59,683.921 1243.15,683.921 1243.71,683.921 1244.26,683.921 1244.82,683.921 1245.38,683.921 1245.94,683.921 1246.5,683.921 1247.06,683.921 1247.62,683.921 1248.18,683.921 1248.74,683.921 1249.3,683.921 1249.86,683.921 1250.42,683.921 1250.98,683.921 1251.54,683.921 1252.09,683.921 1252.65,683.921 1253.21,683.921 1253.77,683.921 1254.33,683.921 1254.89,683.921 1255.45,683.921 1256.01,683.921 1256.57,683.921 1257.13,683.921 1257.69,683.921 1258.25,683.921 1258.81,683.921 1259.36,683.921 1259.92,683.921 1260.48,683.921 1261.04,683.921 1261.6,683.921 1262.16,683.921 1262.72,683.921 1263.28,683.921 1263.84,683.921 1264.4,683.921 1264.96,683.921 1265.52,683.921 1266.08,683.921 1266.63,683.921 1267.19,683.921 1267.75,683.921 1268.31,683.921 1268.87,683.921 1269.43,683.921 1269.99,683.921 1270.55,683.921 1271.11,683.921 1271.67,683.921 1272.23,683.921 1272.79,683.921 1273.35,683.921 1273.91,683.921 1274.46,683.921 1275.02,683.921 1275.58,683.921 1276.14,683.921 1276.7,683.921 1277.26,683.921 1277.82,683.921 1278.38,683.921 1278.94,683.921 1279.5,683.921 1280.06,683.921 1280.62,683.921 1281.18,683.921 1281.73,683.921 1282.29,683.921 1282.85,683.921 1283.41,683.921 1283.97,683.921 1284.53,683.921 1285.09,683.921 1285.65,683.921 1286.21,683.921 1286.77,683.921 1287.33,683.921 1287.89,683.921 1288.45,683.921 1289,683.921 1289.56,683.921 1290.12,683.921 1290.68,683.921 1291.24,683.921 1291.8,683.921 1292.36,683.921 1292.92,683.921 1293.48,683.921 1294.04,683.921 1294.6,683.921 1295.16,683.921 1295.72,683.921 1296.28,683.921 1296.83,683.921 1297.39,683.921 1297.95,683.921 1298.51,683.921 1299.07,683.921 1299.63,683.921 1300.19,683.921 1300.75,683.921 1301.31,683.921 1301.87,683.921 1302.43,683.921 1302.99,683.921 1303.55,683.921 1304.1,683.921 1304.66,683.921 1305.22,683.921 1305.78,683.921 1306.34,683.921 1306.9,683.921 1307.46,683.921 1308.02,683.921 1308.58,683.921 1309.14,683.921 1309.7,683.921 1310.26,683.921 1310.82,683.921 1311.38,683.921 1311.93,683.921 1312.49,683.921 1313.05,683.921 1313.61,683.921 1314.17,683.921 1314.73,683.921 1315.29,683.921 1315.85,683.921 1316.41,683.921 1316.97,683.921 1317.53,683.921 1318.09,683.921 1318.65,683.921 1319.2,683.921 1319.76,683.921 1320.32,683.921 1320.88,683.921 1321.44,683.921 1322,683.921 1322.56,683.921 1323.12,683.921 1323.68,683.921 1324.24,683.921 1324.8,683.921 1325.36,683.921 1325.92,683.921 1326.47,683.921 1327.03,683.921 1327.59,683.921 1328.15,683.921 1328.71,683.921 1329.27,683.921 1329.83,683.921 1330.39,683.921 1330.95,683.921 1331.51,683.921 1332.07,683.921 1332.63,683.921 1333.19,683.921 1333.75,683.921 1334.3,683.921 1334.86,683.921 1335.42,683.921 1335.98,683.921 1336.54,683.921 1337.1,683.921 1337.66,683.921 1338.22,683.921 1338.78,683.921 1339.34,683.921 1339.9,683.921 1340.46,683.921 1341.02,683.921 1341.57,683.921 1342.13,683.921 1342.69,683.921 1343.25,683.921 1343.81,683.921 1344.37,683.921 1344.93,683.921 1345.49,683.921 1346.05,683.921 1346.61,683.921 1347.17,683.921 1347.73,683.921 1348.29,683.921 1348.84,683.921 1349.4,683.921 1349.96,683.921 1350.52,683.921 1351.08,683.921 1351.64,683.921 1352.2,683.921 1352.76,683.921 1353.32,683.921 1353.88,683.921 1354.44,683.921 1355,683.921 1355.56,683.921 1356.12,683.921 1356.67,683.921 1357.23,683.921 1357.79,683.921 1358.35,683.921 1358.91,683.921 1359.47,683.921 1360.03,683.921 1360.59,683.921 1361.15,683.921 1361.71,683.921 1362.27,683.921 1362.83,683.921 1363.39,683.921 1363.94,683.921 1364.5,683.921 1365.06,683.921 1365.62,683.921 1366.18,683.921 1366.74,683.921 1367.3,683.921 1367.86,683.921 1368.42,683.921 1368.98,683.921 1369.54,683.921 1370.1,683.921 1370.66,683.921 1371.21,683.921 1371.77,683.921 1372.33,683.921 1372.89,683.921 1373.45,683.921 1374.01,683.921 1374.57,683.921 1375.13,683.921 1375.69,683.921 1376.25,683.921 1376.81,683.921 1377.37,683.921 1377.93,683.921 1378.49,683.921 1379.04,683.921 1379.6,683.921 1380.16,683.921 1380.72,683.921 1381.28,683.921 1381.84,683.921 1382.4,683.921 1382.96,683.921 1383.52,683.921 1384.08,683.921 1384.64,683.921 1385.2,683.921 1385.76,683.921 1386.31,683.921 1386.87,683.921 1387.43,683.921 1387.99,683.921 1388.55,683.921 1389.11,683.921 1389.67,683.921 1390.23,683.921 1390.79,683.921 1391.35,683.921 1391.91,683.921 1392.47,683.921 1393.03,683.921 1393.58,683.921 1394.14,683.921 1394.7,683.921 1395.26,683.921 1395.82,683.921 1396.38,683.921 1396.94,683.921 1397.5,683.921 1398.06,683.921 1398.62,683.921 1399.18,683.921 1399.74,683.921 1400.3,683.921 1400.86,683.921 1401.41,683.921 1401.97,683.921 1402.53,683.921 1403.09,683.921 1403.65,683.921 1404.21,683.921 1404.77,683.921 1405.33,683.921 1405.89,683.921 1406.45,683.921 1407.01,683.921 1407.57,683.921 1408.13,683.921 1408.68,683.921 1409.24,683.921 1409.8,683.921 1410.36,683.921 1410.92,683.921 1411.48,683.921 1412.04,683.921 1412.6,683.921 1413.16,683.921 1413.72,683.921 1414.28,683.921 1414.84,683.921 1415.4,683.921 1415.95,683.921 1416.51,683.921 1417.07,683.921 1417.63,683.921 1418.19,683.921 1418.75,683.921 1419.31,683.921 1419.87,683.921 1420.43,683.921 1420.99,683.921 1421.55,683.921 1422.11,683.921 1422.67,683.921 1423.23,683.921 1423.78,683.921 1424.34,683.921 1424.9,683.921 1425.46,683.921 1426.02,683.921 1426.58,683.921 1427.14,683.921 1427.7,683.921 1428.26,683.921 1428.82,683.921 1429.38,683.921 1429.94,683.921 1430.5,683.921 1431.05,683.921 1431.61,683.921 1432.17,683.921 1432.73,683.921 1433.29,683.921 1433.85,683.921 1434.41,683.921 1434.97,683.921 1435.53,683.921 1436.09,683.921 1436.65,683.921 1437.21,683.921 1437.77,683.921 1438.33,683.921 1438.88,683.921 1439.44,683.921 1440,683.921 1440.56,683.921 1441.12,683.921 1441.68,683.921 1442.24,683.921 1442.8,683.921 1443.36,683.921 1443.92,683.921 1444.48,683.921 1445.04,683.921 1445.6,683.921 1446.15,683.921 1446.71,683.921 1447.27,683.921 1447.83,683.921 1448.39,683.921 1448.95,683.921 1449.51,683.921 1450.07,683.921 1450.63,683.921 1451.19,683.921 1451.75,683.921 1452.31,683.921 1452.87,683.921 1453.42,683.921 1453.98,683.921 1454.54,683.921 1455.1,683.921 1455.66,683.921 1456.22,683.921 1456.78,683.921 1457.34,683.921 1457.9,683.921 1458.46,683.921 1459.02,683.921 1459.58,683.921 1460.14,683.921 1460.7,683.921 1461.25,683.921 1461.81,683.921 1462.37,683.921 1462.93,683.921 1463.49,683.921 1464.05,683.921 1464.61,683.921 1465.17,683.921 1465.73,683.921 1466.29,683.921 1466.85,683.921 1467.41,683.921 1467.97,683.921 1468.52,683.921 1469.08,683.921 1469.64,683.921 1470.2,683.921 1470.76,683.921 1471.32,683.921 1471.88,683.921 1472.44,683.921 1473,683.921 1473.56,683.921 1474.12,683.921 1474.68,683.921 1475.24,683.921 1475.79,683.921 1476.35,683.921 1476.91,683.921 1477.47,683.921 1478.03,683.921 1478.59,683.921 1479.15,683.921 1479.71,683.921 1480.27,683.921 1480.83,683.921 1481.39,683.921 1481.95,683.921 1482.51,683.921 1483.07,683.921 1483.62,683.921 1484.18,683.921 1484.74,683.921 1485.3,683.921 1485.86,683.921 1486.42,683.921 1486.98,683.921 1487.54,683.921 1488.1,683.921 1488.66,683.921 1489.22,683.921 1489.78,683.921 1490.34,683.921 1490.89,683.921 1491.45,683.921 1492.01,683.921 1492.57,683.921 1493.13,683.921 1493.69,683.921 1494.25,683.921 1494.81,683.921 1495.37,683.921 1495.93,683.921 1496.49,683.921 1497.05,683.921 1497.61,683.921 1498.16,683.921 1498.72,683.921 1499.28,683.921 1499.84,683.921 1500.4,683.921 1500.96,683.921 1501.52,683.921 1502.08,683.921 1502.64,683.921 1503.2,683.921 1503.76,683.921 1504.32,683.921 1504.88,683.921 1505.44,683.921 1505.99,683.921 1506.55,683.921 1507.11,683.921 1507.67,683.921 1508.23,683.921 1508.79,683.921 1509.35,683.921 1509.91,683.921 1510.47,683.921 1511.03,683.921 1511.59,683.921 1512.15,683.921 1512.71,683.921 1513.26,683.921 1513.82,683.921 1514.38,683.921 1514.94,683.921 1515.5,683.921 1516.06,683.921 1516.62,683.921 1517.18,683.921 1517.74,683.921 1518.3,683.921 1518.86,683.921 1519.42,683.921 1519.98,683.921 1520.53,683.921 1521.09,683.921 1521.65,683.921 1522.21,683.921 1522.77,683.921 1523.33,683.921 1523.89,683.921 1524.45,683.921 1525.01,683.921 1525.57,683.921 1526.13,683.921 1526.69,683.921 1527.25,683.921 1527.81,683.921 1528.36,683.921 1528.92,683.921 1529.48,683.921 1530.04,683.921 1530.6,683.921 1531.16,683.921 1531.72,683.921 1532.28,683.921 1532.84,683.921 1533.4,683.921 1533.96,683.921 1534.52,683.921 1535.08,683.921 1535.63,683.921 1536.19,683.921 1536.75,683.921 1537.31,683.921 1537.87,683.921 1538.43,683.921 1538.99,683.921 1539.55,683.921 1540.11,683.921 1540.67,683.921 1541.23,683.921 1541.79,683.921 1542.35,683.921 1542.9,683.921 1543.46,683.921 1544.02,683.921 1544.58,683.921 1545.14,683.921 1545.7,683.921 1546.26,683.921 1546.82,683.921 1547.38,683.921 1547.94,683.921 1548.5,683.921 1549.06,683.921 1549.62,683.921 1550.18,683.921 1550.73,683.921 1551.29,683.921 1551.85,683.921 1552.41,683.921 1552.97,683.921 1553.53,683.921 1554.09,683.921 1554.65,683.921 1555.21,683.921 1555.77,683.921 1556.33,683.921 1556.89,683.921 1557.45,683.921 1558,683.921 1558.56,683.921 1559.12,683.921 1559.68,683.921 1560.24,683.921 1560.8,683.921 1561.36,683.921 1561.92,683.921 1562.48,683.921 1563.04,683.921 1563.6,683.921 1564.16,683.921 1564.72,683.921 1565.28,683.921 1565.83,683.921 1566.39,683.921 1566.95,683.921 1567.51,683.921 1568.07,683.921 1568.63,683.921 1569.19,683.921 1569.75,683.921 1570.31,683.921 1570.87,683.921 1571.43,683.921 1571.99,683.921 1572.55,683.921 1573.1,683.921 1573.66,683.921 1574.22,683.921 1574.78,683.921 1575.34,683.921 1575.9,683.921 1576.46,683.921 1577.02,683.921 1577.58,683.921 1578.14,683.921 1578.7,683.921 1579.26,683.921 1579.82,683.921 1580.37,683.921 1580.93,683.921 1581.49,683.921 1582.05,683.921 1582.61,683.921 1583.17,683.921 1583.73,683.921 1584.29,683.921 1584.85,683.921 1585.41,683.921 1585.97,683.921 1586.53,683.921 1587.09,683.921 1587.65,683.921 1588.2,683.921 1588.76,683.921 1589.32,683.921 1589.88,683.921 1590.44,683.921 1591,683.921 1591.56,683.921 1592.12,683.921 1592.68,683.921 1593.24,683.921 1593.8,683.921 1594.36,683.921 1594.92,683.921 1595.47,683.921 1596.03,683.921 1596.59,683.921 1597.15,683.921 1597.71,683.921 1598.27,683.921 1598.83,683.921 1599.39,683.921 1599.95,683.921 1600.51,683.921 1601.07,683.921 1601.63,683.921 1602.19,683.921 1602.74,683.921 1603.3,683.921 1603.86,683.921 1604.42,683.921 1604.98,683.921 1605.54,683.921 1606.1,683.921 1606.66,683.921 1607.22,683.921 1607.78,683.921 1608.34,683.921 1608.9,683.921 1609.46,683.921 1610.02,683.921 1610.57,683.921 1611.13,683.921 1611.69,683.921 1612.25,683.921 1612.81,683.921 1613.37,683.921 1613.93,683.921 1614.49,683.921 1615.05,683.921 1615.61,683.921 1616.17,683.921 1616.73,683.921 1617.29,683.921 1617.84,683.921 1618.4,683.921 1618.96,683.921 1619.52,683.921 1620.08,683.921 1620.64,683.921 1621.2,683.921 1621.76,683.921 1622.32,683.921 1622.88,683.921 1623.44,683.921 1624,683.921 1624.56,683.921 1625.11,683.921 1625.67,683.921 1626.23,683.921 1626.79,683.921 1627.35,683.921 1627.91,683.921 1628.47,683.921 1629.03,683.921 1629.59,683.921 1630.15,683.921 1630.71,683.921 1631.27,683.921 1631.83,683.921 1632.39,683.921 1632.94,683.921 1633.5,683.921 1634.06,683.921 1634.62,683.921 1635.18,683.921 1635.74,683.921 1636.3,683.921 1636.86,683.921 1637.42,683.921 1637.98,683.921 1638.54,683.921 1639.1,683.921 1639.66,683.921 1640.21,683.921 1640.77,683.921 1641.33,683.921 1641.89,683.921 1642.45,683.921 1643.01,683.921 1643.57,683.921 1644.13,683.921 1644.69,683.921 1645.25,683.921 1645.81,683.921 1646.37,683.921 1646.93,683.921 1647.48,683.921 1648.04,683.921 1648.6,683.921 1649.16,683.921 1649.72,683.921 1650.28,683.921 1650.84,683.921 1651.4,683.921 1651.96,683.921 1652.52,683.921 1653.08,683.921 1653.64,683.921 1654.2,683.921 1654.76,683.921 1655.31,683.921 1655.87,683.921 1656.43,683.921 1656.99,683.921 1657.55,683.921 1658.11,683.921 1658.67,683.921 1659.23,683.921 1659.79,683.921 1660.35,683.921 1660.91,683.921 1661.47,683.921 1662.03,683.921 1662.58,683.921 1663.14,683.921 1663.7,683.921 1664.26,683.921 1664.82,683.921 1665.38,683.921 1665.94,683.921 1666.5,683.921 1667.06,683.921 1667.62,683.921 1668.18,683.921 1668.74,683.921 1669.3,683.921 1669.85,683.921 1670.41,683.921 1670.97,683.921 1671.53,683.921 1672.09,683.921 1672.65,683.921 1673.21,683.921 1673.77,683.921 1674.33,683.921 1674.89,683.921 1675.45,683.921 1676.01,683.921 1676.57,683.921 1677.13,683.921 1677.68,683.921 1678.24,683.921 1678.8,683.921 1679.36,683.921 1679.92,683.921 1680.48,683.921 1681.04,683.921 1681.6,683.921 1682.16,683.921 1682.72,683.921 1683.28,683.921 1683.84,683.921 1684.4,683.921 1684.95,683.921 1685.51,683.921 1686.07,683.921 1686.63,683.921 1687.19,683.921 1687.75,683.921 1688.31,683.921 1688.87,683.921 1689.43,683.921 1689.99,683.921 1690.55,683.921 1691.11,683.921 1691.67,683.921 1692.23,683.921 1692.78,683.921 1693.34,683.921 1693.9,683.921 1694.46,683.921 1695.02,683.921 1695.58,683.921 1696.14,683.921 1696.7,683.921 1697.26,683.921 1697.82,683.921 1698.38,683.921 1698.94,683.921 1699.5,683.921 1700.05,683.921 1700.61,683.921 1701.17,683.921 1701.73,683.921 1702.29,683.921 1702.85,683.921 1703.41,683.921 1703.97,683.921 1704.53,683.921 1705.09,683.921 1705.65,683.921 1706.21,683.921 1706.77,683.921 1707.32,683.921 1707.88,683.921 1708.44,683.921 1709,683.921 1709.56,683.921 1710.12,683.921 1710.68,683.921 1711.24,683.921 1711.8,683.921 1712.36,683.921 1712.92,683.921 1713.48,683.921 1714.04,683.921 1714.6,683.921 1715.15,683.921 1715.71,683.921 1716.27,683.921 1716.83,683.921 1717.39,683.921 1717.95,683.921 1718.51,683.921 1719.07,683.921 1719.63,683.921 1720.19,683.921 1720.75,683.921 1721.31,683.921 1721.87,683.921 1722.42,683.921 1722.98,683.921 1723.54,683.921 1724.1,683.921 1724.66,683.921 1725.22,683.921 1725.78,683.921 1726.34,683.921 1726.9,683.921 1727.46,683.921 1728.02,683.921 1728.58,683.921 1729.14,683.921 1729.69,683.921 1730.25,683.921 1730.81,683.921 1731.37,683.921 1731.93,683.921 1732.49,683.921 1733.05,683.921 1733.61,683.921 1734.17,683.921 1734.73,683.921 1735.29,683.921 1735.85,683.921 1736.41,683.921 1736.97,683.921 1737.52,683.921 1738.08,683.921 1738.64,683.921 1739.2,683.921 1739.76,683.921 1740.32,683.921 1740.88,683.921 1741.44,683.921 1742,683.921 1742.56,683.921 1743.12,683.921 1743.68,683.921 1744.24,683.921 1744.79,683.921 1745.35,683.921 1745.91,683.921 1746.47,683.921 1747.03,683.921 1747.59,683.921 1748.15,683.921 1748.71,683.921 1749.27,683.921 1749.83,683.921 1750.39,683.921 1750.95,683.921 1751.51,683.921 1752.06,683.921 1752.62,683.921 1753.18,683.921 1753.74,683.921 1754.3,683.921 1754.86,683.921 1755.42,683.921 1755.98,683.921 1756.54,683.921 1757.1,683.921 1757.66,683.921 1758.22,683.921 1758.78,683.921 1759.34,683.921 1759.89,683.921 1760.45,683.921 1761.01,683.921 1761.57,683.921 1762.13,683.921 1762.69,683.921 1763.25,683.921 1763.81,683.921 1764.37,683.921 1764.93,683.921 1765.49,683.921 1766.05,683.921 1766.61,683.921 1767.16,683.921 1767.72,683.921 1768.28,683.921 1768.84,683.921 1769.4,683.921 1769.96,683.921 1770.52,683.921 1771.08,683.921 1771.64,683.921 1772.2,683.921 1772.76,683.921 1773.32,683.921 1773.88,683.921 1774.43,683.921 1774.99,683.921 1775.55,683.921 1776.11,683.921 1776.67,683.921 1777.23,683.921 1777.79,683.921 1778.35,683.921 1778.91,683.921 1779.47,683.921 1780.03,683.921 1780.59,683.921 1781.15,683.921 1781.71,683.921 1782.26,683.921 1782.82,683.921 1783.38,683.921 1783.94,683.921 1784.5,683.921 1785.06,683.921 1785.62,683.921 1786.18,683.921 1786.74,683.921 1787.3,683.921 1787.86,683.921 1788.42,683.921 1788.98,683.921 1789.53,683.921 1790.09,683.921 1790.65,683.921 1791.21,683.921 1791.77,683.921 1792.33,683.921 1792.89,683.921 1793.45,683.921 1794.01,683.921 1794.57,683.921 1795.13,683.921 1795.69,683.921 1796.25,683.921 1796.8,683.921 1797.36,683.921 1797.92,683.921 1798.48,683.921 1799.04,683.921 1799.6,683.921 1800.16,683.921 1800.72,683.921 1801.28,683.921 1801.84,683.921 1802.4,683.921 1802.96,683.921 1803.52,683.921 1804.08,683.921 1804.63,683.921 1805.19,683.921 1805.75,683.921 1806.31,683.921 1806.87,683.921 1807.43,683.921 1807.99,683.921 1808.55,683.921 1809.11,683.921 1809.67,683.921 1810.23,683.921 1810.79,683.921 1811.35,683.921 1811.9,683.921 1812.46,683.921 1813.02,683.921 1813.58,683.921 1814.14,683.921 1814.7,683.921 1815.26,683.921 1815.82,683.921 1816.38,683.921 1816.94,683.921 1817.5,683.921 1818.06,683.921 1818.62,683.921 1819.18,683.921 1819.73,683.921 1820.29,683.921 1820.85,683.921 1821.41,683.921 1821.97,683.921 1822.53,683.921 1823.09,683.921 1823.65,683.921 1824.21,683.921 1824.77,683.921 1825.33,683.921 1825.89,683.921 1826.45,683.921 1827,683.921 1827.56,683.921 1828.12,683.921 1828.68,683.921 1829.24,683.921 1829.8,683.921 1830.36,683.921 1830.92,683.921 1831.48,683.921 1832.04,683.921 1832.6,683.921 1833.16,683.921 1833.72,683.921 1834.27,683.921 1834.83,683.921 1835.39,683.921 1835.95,683.921 1836.51,683.921 1837.07,683.921 1837.63,683.921 1838.19,683.921 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.020306988788508 ± 0.020300314298173694\nProjected Energy: -4.016775642690138 ± (0.003655327509648032, 0.0038153078528386786)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.524933</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4036e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0199e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.046e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.362e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.735e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.829e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613369\n -0.7590191922770888\n  0.13584182219621077\n  0.15789998694609153\n  0.8767114411781307\n  1.5305929970973349\n  1.5835732611867366\n  3.0728703303258724\n  3.125672653951834\n  4.862107221562171\n  6.260694850380597\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
