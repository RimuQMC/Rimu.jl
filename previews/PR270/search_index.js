var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.214159461249661 ± 0.001442788806903886\n   G2(1) = 0.9165303348856961 ± 0.0006238718287512609\n   G2(2) = 0.9817603199207287 ± 0.000588194579177191\n   G2(3) = 0.9892592291374886 ± 0.0007276958939958778\n   G2(4) = 0.9817603199207287 ± 0.000588194579177191\n   G2(5) = 0.9165303348856961 ± 0.0006238718287512609\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.003862689246658 ± 0.12254352858507643\n   Replica 2: -4.020299946053301 ± 0.1167624713259383\n   Replica 3: -4.082306331394943 ± 0.1365817079725646\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.57 2211.02,1003.57 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.313 2211.02,746.313 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.061 2211.02,489.061 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.808 2211.02,231.808 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.57 423.181,1003.57 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.313 423.181,746.313 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.061 423.181,489.061 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.808 423.181,231.808 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M290.043 1016.91 L306.363 1016.91 L306.363 1020.85 L284.418 1020.85 L284.418 1016.91 Q287.08 1014.16 291.664 1009.53 Q296.27 1004.87 297.451 1003.53 Q299.696 1001.01 300.576 999.272 Q301.478 997.513 301.478 995.823 Q301.478 993.068 299.534 991.332 Q297.613 989.596 294.511 989.596 Q292.312 989.596 289.858 990.36 Q287.427 991.124 284.65 992.675 L284.65 987.953 Q287.474 986.818 289.927 986.24 Q292.381 985.661 294.418 985.661 Q299.789 985.661 302.983 988.346 Q306.177 991.031 306.177 995.522 Q306.177 997.652 305.367 999.573 Q304.58 1001.47 302.474 1004.06 Q301.895 1004.73 298.793 1007.95 Q295.691 1011.15 290.043 1016.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 986.286 L334.58 986.286 L334.58 990.221 L320.506 990.221 L320.506 998.693 Q321.524 998.346 322.543 998.184 Q323.562 997.999 324.58 997.999 Q330.367 997.999 333.747 1001.17 Q337.126 1004.34 337.126 1009.76 Q337.126 1015.34 333.654 1018.44 Q330.182 1021.52 323.862 1021.52 Q321.687 1021.52 319.418 1021.15 Q317.173 1020.78 314.765 1020.04 L314.765 1015.34 Q316.849 1016.47 319.071 1017.03 Q321.293 1017.58 323.77 1017.58 Q327.774 1017.58 330.112 1015.48 Q332.45 1013.37 332.45 1009.76 Q332.45 1006.15 330.112 1004.04 Q327.774 1001.93 323.77 1001.93 Q321.895 1001.93 320.02 1002.35 Q318.168 1002.77 316.224 1003.65 L316.224 986.286 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 989.365 Q352.728 989.365 350.899 992.929 Q349.094 996.471 349.094 1003.6 Q349.094 1010.71 350.899 1014.27 Q352.728 1017.81 356.339 1017.81 Q359.973 1017.81 361.779 1014.27 Q363.608 1010.71 363.608 1003.6 Q363.608 996.471 361.779 992.929 Q359.973 989.365 356.339 989.365 M356.339 985.661 Q362.149 985.661 365.205 990.267 Q368.284 994.851 368.284 1003.6 Q368.284 1012.33 365.205 1016.93 Q362.149 1021.52 356.339 1021.52 Q350.529 1021.52 347.45 1016.93 Q344.395 1012.33 344.395 1003.6 Q344.395 994.851 347.45 990.267 Q350.529 985.661 356.339 985.661 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M286.062 729.033 L304.418 729.033 L304.418 732.969 L290.344 732.969 L290.344 741.441 Q291.363 741.093 292.381 740.931 Q293.4 740.746 294.418 740.746 Q300.205 740.746 303.585 743.918 Q306.964 747.089 306.964 752.505 Q306.964 758.084 303.492 761.186 Q300.02 764.265 293.701 764.265 Q291.525 764.265 289.256 763.894 Q287.011 763.524 284.603 762.783 L284.603 758.084 Q286.687 759.218 288.909 759.774 Q291.131 760.329 293.608 760.329 Q297.613 760.329 299.951 758.223 Q302.288 756.117 302.288 752.505 Q302.288 748.894 299.951 746.788 Q297.613 744.681 293.608 744.681 Q291.733 744.681 289.858 745.098 Q288.006 745.515 286.062 746.394 L286.062 729.033 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 732.112 Q322.566 732.112 320.737 735.677 Q318.932 739.218 318.932 746.348 Q318.932 753.455 320.737 757.019 Q322.566 760.561 326.177 760.561 Q329.811 760.561 331.617 757.019 Q333.446 753.455 333.446 746.348 Q333.446 739.218 331.617 735.677 Q329.811 732.112 326.177 732.112 M326.177 728.408 Q331.987 728.408 335.043 733.015 Q338.122 737.598 338.122 746.348 Q338.122 755.075 335.043 759.681 Q331.987 764.265 326.177 764.265 Q320.367 764.265 317.288 759.681 Q314.233 755.075 314.233 746.348 Q314.233 737.598 317.288 733.015 Q320.367 728.408 326.177 728.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 732.112 Q352.728 732.112 350.899 735.677 Q349.094 739.218 349.094 746.348 Q349.094 753.455 350.899 757.019 Q352.728 760.561 356.339 760.561 Q359.973 760.561 361.779 757.019 Q363.608 753.455 363.608 746.348 Q363.608 739.218 361.779 735.677 Q359.973 732.112 356.339 732.112 M356.339 728.408 Q362.149 728.408 365.205 733.015 Q368.284 737.598 368.284 746.348 Q368.284 755.075 365.205 759.681 Q362.149 764.265 356.339 764.265 Q350.529 764.265 347.45 759.681 Q344.395 755.075 344.395 746.348 Q344.395 737.598 347.45 733.015 Q350.529 728.408 356.339 728.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M284.835 471.781 L307.057 471.781 L307.057 473.771 L294.511 506.341 L289.627 506.341 L301.432 475.716 L284.835 475.716 L284.835 471.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 471.781 L334.58 471.781 L334.58 475.716 L320.506 475.716 L320.506 484.188 Q321.524 483.841 322.543 483.679 Q323.562 483.494 324.58 483.494 Q330.367 483.494 333.747 486.665 Q337.126 489.836 337.126 495.253 Q337.126 500.831 333.654 503.933 Q330.182 507.012 323.862 507.012 Q321.687 507.012 319.418 506.642 Q317.173 506.271 314.765 505.531 L314.765 500.831 Q316.849 501.966 319.071 502.521 Q321.293 503.077 323.77 503.077 Q327.774 503.077 330.112 500.97 Q332.45 498.864 332.45 495.253 Q332.45 491.642 330.112 489.535 Q327.774 487.429 323.77 487.429 Q321.895 487.429 320.02 487.845 Q318.168 488.262 316.224 489.142 L316.224 471.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 474.859 Q352.728 474.859 350.899 478.424 Q349.094 481.966 349.094 489.095 Q349.094 496.202 350.899 499.767 Q352.728 503.308 356.339 503.308 Q359.973 503.308 361.779 499.767 Q363.608 496.202 363.608 489.095 Q363.608 481.966 361.779 478.424 Q359.973 474.859 356.339 474.859 M356.339 471.156 Q362.149 471.156 365.205 475.762 Q368.284 480.345 368.284 489.095 Q368.284 497.822 365.205 502.429 Q362.149 507.012 356.339 507.012 Q350.529 507.012 347.45 502.429 Q344.395 497.822 344.395 489.095 Q344.395 480.345 347.45 475.762 Q350.529 471.156 356.339 471.156 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M256.664 245.153 L264.303 245.153 L264.303 218.787 L255.992 220.454 L255.992 216.195 L264.256 214.528 L268.932 214.528 L268.932 245.153 L276.571 245.153 L276.571 249.088 L256.664 249.088 L256.664 245.153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M296.015 217.607 Q292.404 217.607 290.576 221.172 Q288.77 224.713 288.77 231.843 Q288.77 238.949 290.576 242.514 Q292.404 246.056 296.015 246.056 Q299.65 246.056 301.455 242.514 Q303.284 238.949 303.284 231.843 Q303.284 224.713 301.455 221.172 Q299.65 217.607 296.015 217.607 M296.015 213.903 Q301.826 213.903 304.881 218.509 Q307.96 223.093 307.96 231.843 Q307.96 240.57 304.881 245.176 Q301.826 249.759 296.015 249.759 Q290.205 249.759 287.127 245.176 Q284.071 240.57 284.071 231.843 Q284.071 223.093 287.127 218.509 Q290.205 213.903 296.015 213.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 217.607 Q322.566 217.607 320.737 221.172 Q318.932 224.713 318.932 231.843 Q318.932 238.949 320.737 242.514 Q322.566 246.056 326.177 246.056 Q329.811 246.056 331.617 242.514 Q333.446 238.949 333.446 231.843 Q333.446 224.713 331.617 221.172 Q329.811 217.607 326.177 217.607 M326.177 213.903 Q331.987 213.903 335.043 218.509 Q338.122 223.093 338.122 231.843 Q338.122 240.57 335.043 245.176 Q331.987 249.759 326.177 249.759 Q320.367 249.759 317.288 245.176 Q314.233 240.57 314.233 231.843 Q314.233 223.093 317.288 218.509 Q320.367 213.903 326.177 213.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 217.607 Q352.728 217.607 350.899 221.172 Q349.094 224.713 349.094 231.843 Q349.094 238.949 350.899 242.514 Q352.728 246.056 356.339 246.056 Q359.973 246.056 361.779 242.514 Q363.608 238.949 363.608 231.843 Q363.608 224.713 361.779 221.172 Q359.973 217.607 356.339 217.607 M356.339 213.903 Q362.149 213.903 365.205 218.509 Q368.284 223.093 368.284 231.843 Q368.284 240.57 365.205 245.176 Q362.149 249.759 356.339 249.759 Q350.529 249.759 347.45 245.176 Q344.395 240.57 344.395 231.843 Q344.395 223.093 347.45 218.509 Q350.529 213.903 356.339 213.903 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.808 4017.76,231.808 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1247.02 460.533,1246.43 461.101,1245.77 461.669,1245.03 462.238,1244.22 462.806,1243.29 463.375,1241.27 463.943,1240.18 464.511,1239.01 465.08,1235.67 465.648,1234.32 466.216,1232.82 466.785,1230.21 467.353,1228.49 467.921,1226.59 468.49,1224.59 469.058,1222.45 469.626,1220.18 470.195,1216.72 470.763,1213.02 471.331,1209.22 471.9,1206.27 472.468,1203.12 473.036,1199.76 473.605,1195.22 474.173,1191.5 474.741,1187.54 475.31,1182.41 475.878,1177.1 476.446,1172.51 477.015,1166.67 477.583,1161.74 478.152,1156.55 478.72,1147.05 479.288,1140.32 479.857,1133.44 480.425,1127.28 480.993,1120.03 481.562,1113.41 482.13,1105.59 482.698,1098.68 483.267,1089.41 483.835,1082.15 484.403,1073.46 484.972,1064.77 485.54,1056.84 486.108,1044.76 486.677,1036.59 487.245,1028.27 487.813,1019.78 488.382,1010.11 488.95,1001.26 489.518,988.192 490.087,979.124 490.655,969.969 491.224,958.646 491.792,946.363 492.36,935.093 492.929,925.823 493.497,916.377 494.065,906.975 494.634,896.37 495.202,885.645 495.77,875.156 496.339,864.498 496.907,853.934 497.475,842.376 498.044,831.866 498.612,820.497 499.18,810.08 499.749,798.683 500.317,788.356 500.885,776.983 501.454,767.725 502.022,756.549 502.59,747.619 503.159,738.807 503.727,730.834 504.295,719.834 504.864,709.861 505.432,698.008 506.001,689.452 506.569,677.727 507.137,667.171 507.706,657.897 508.274,647.686 508.842,639.565 509.411,630.676 509.979,620.84 510.547,611.145 511.116,601.522 511.684,592.122 512.252,583.654 512.821,577.596 513.389,570.513 513.957,562.475 514.526,554.512 515.094,544.604 515.662,537.367 516.231,527.862 516.799,518.562 517.367,511.784 517.936,501.904 518.504,495.26 519.072,489.124 519.641,481.807 520.209,476.57 520.778,470.551 521.346,465.66 521.914,460.876 522.483,455.195 523.051,450.778 523.619,447.097 524.188,442.463 524.756,436.661 525.324,430.19 525.893,422.848 526.461,415.708 527.029,408.85 527.598,403.534 528.166,400.113 528.734,396.085 529.303,392.09 529.871,388.071 530.439,384.1 531.008,380.184 531.576,377.571 532.144,374.954 532.713,372.191 533.281,366.456 533.85,360.743 534.418,356.632 534.986,355.676 535.555,351.398 536.123,348.41 536.691,343.509 537.26,340.71 537.828,340.079 538.396,338.424 538.965,335.701 539.533,333.145 540.101,331.761 540.67,328.262 541.238,326.886 541.806,324.458 542.375,323.041 542.943,321.695 543.511,320.308 544.08,316.773 544.648,315.548 545.216,313.317 545.785,311.044 546.353,308.801 546.921,306.75 547.49,305.753 548.058,304.956 548.627,302.867 549.195,303.166 549.763,299.115 550.332,300.577 550.9,299.647 551.468,297.758 552.037,295.851 552.605,293.924 553.173,293.003 553.742,291.213 554.31,287.157 554.878,287.553 555.447,286.804 556.015,286.212 556.583,285.35 557.152,281.603 557.72,282.079 558.288,281.363 558.857,280.858 559.425,279.29 559.993,277.915 560.562,275.454 561.13,273.916 561.698,273.34 562.267,274.243 562.835,273.904 563.404,272.217 563.972,271.89 564.54,271.341 565.109,275.081 565.677,275.299 566.245,273.581 566.814,272.885 567.382,272.298 567.95,269.66 568.519,269.152 569.087,268.696 569.655,265.091 570.224,263.863 570.792,263.634 571.36,264.421 571.929,259.983 572.497,260.969 573.065,261.016 573.634,262.911 574.202,262.458 574.77,262.215 575.339,262.998 575.907,260.639 576.476,259.209 577.044,258.004 577.612,258.202 578.181,257.808 578.749,256.701 579.317,255.621 579.886,255.558 580.454,253.389 581.022,256.534 581.591,255.141 582.159,253.987 582.727,253.06 583.296,252.017 583.864,252.071 584.432,249.929 585.001,250.186 585.569,249.101 586.137,249.264 586.706,248.55 587.274,246.636 587.842,246.744 588.411,245.931 588.979,245.202 589.547,245.444 590.116,241.884 590.684,243.317 591.253,246.001 591.821,248.199 592.389,247.14 592.958,248.479 593.526,248.643 594.094,248.663 594.663,247.438 595.231,249.579 595.799,248.567 596.368,250.548 596.936,250.588 597.504,250.503 598.073,246.114 598.641,246.027 599.209,245.868 599.778,245.842 600.346,245.82 600.914,242.803 601.483,242.804 602.051,246.044 602.619,251.333 603.188,248.917 603.756,246.66 604.325,244.514 604.893,246.72 605.461,245.658 606.03,243.737 606.598,243.661 607.166,242.765 607.735,241.97 608.303,239.264 608.871,238.738 609.44,239.983 610.008,242.477 610.576,242.542 611.145,241.74 611.713,241.856 612.281,240.853 612.85,240.282 613.418,240.57 613.986,239.74 614.555,239.839 615.123,240.975 615.691,238.301 616.26,237.492 616.828,238.957 617.396,239.307 617.965,238.52 618.533,236.712 619.102,237.447 619.67,237.913 620.238,240.227 620.807,240.447 621.375,239.594 621.943,238.728 622.512,236.906 623.08,239.426 623.648,238.468 624.217,238.943 624.785,240.191 625.353,239.362 625.922,238.554 626.49,235.724 627.058,233.017 627.627,232.815 628.195,232.671 628.763,232.388 629.332,232.078 629.9,231.794 630.468,231.696 631.037,233.737 631.605,234.437 632.173,234.915 632.742,235.615 633.31,234.205 633.879,233.938 634.447,232.554 635.015,233.222 635.584,234.035 636.152,234.725 636.72,236.327 637.289,235.764 637.857,236.255 638.425,238.749 638.994,239.232 639.562,238.409 640.13,237.568 640.699,239.054 641.267,240.333 641.835,239.553 642.404,241.728 642.972,240.862 643.54,239.813 644.109,241.192 644.677,239.361 645.245,240.502 645.814,238.635 646.382,237.848 646.951,235.981 647.519,237.562 648.087,237.809 648.656,239.243 649.224,238.377 649.792,239.54 650.361,240.683 650.929,240.784 651.497,238.766 652.066,239.984 652.634,241.096 653.202,238.172 653.771,237.236 654.339,237.61 654.907,237.775 655.476,240.225 656.044,241.366 656.612,241.413 657.181,241.246 657.749,239.962 658.317,238.905 658.886,239.23 659.454,238.35 660.022,239.43 660.591,239.566 661.159,237.495 661.728,238.565 662.296,236.496 662.864,237.762 663.433,235.638 664.001,235.962 664.569,234.292 665.138,235.571 665.706,235.727 666.274,238.048 666.843,236.992 667.411,237.065 667.979,238.302 668.548,239.366 669.116,239.191 669.684,240.153 670.253,237.996 670.821,236.062 671.389,235.129 671.958,235.406 672.526,235.662 673.094,235.827 673.663,237.109 674.231,236.363 674.799,236.59 675.368,234.588 675.936,234.822 676.505,235.099 677.073,237.292 677.641,237.382 678.21,233.41 678.778,232.885 679.346,232.479 679.915,233.965 680.483,233.263 681.051,233.967 681.62,234.339 682.188,232.559 682.756,233.094 683.325,233.493 683.893,233.947 684.461,234.362 685.03,235.89 685.598,234.803 686.166,233.93 686.735,233.35 687.303,234.778 687.871,236.032 688.44,235.172 689.008,235.407 689.577,233.695 690.145,234.156 690.713,232.479 691.282,233.797 691.85,234.079 692.418,235.412 692.987,234.489 693.555,235.781 694.123,235.662 694.692,237.99 695.26,239.164 695.828,239.213 696.397,239.06 696.965,239.097 697.533,242.019 698.102,241.878 698.67,240.669 699.238,241.457 699.807,240.221 700.375,237.928 700.943,233.651 701.512,234.881 702.08,233.09 702.648,233.252 703.217,233.652 703.785,234.057 704.354,235.249 704.922,235.358 705.49,235.123 706.059,234.536 706.627,234.793 707.195,234.979 707.764,231.942 708.332,232.196 708.9,231.533 709.469,232.966 710.037,232.515 710.605,233.734 711.174,235.035 711.742,237.282 712.31,239.267 712.879,241.361 713.447,241.085 714.015,240.699 714.584,242.373 715.152,243.122 715.72,243.611 716.289,243.18 716.857,243.856 717.425,245.416 717.994,244.853 718.562,243.065 719.131,242.426 719.699,239.9 720.267,240.597 720.836,241.108 721.404,241.961 721.972,242.396 722.541,242.92 723.109,243.31 723.677,242.725 724.246,244.032 724.814,242.485 725.382,240.896 725.951,240.436 726.519,238.901 727.087,236.284 727.656,233.966 728.224,234.873 728.792,233.663 729.361,230.356 729.929,230.509 730.497,230.664 731.066,230.849 731.634,230.022 732.203,232.371 732.771,232.558 733.339,232.569 733.908,231.685 734.476,229.855 735.044,229.999 735.613,231.275 736.181,232.642 736.749,233.783 737.318,231.767 737.886,229.515 738.454,228.818 739.023,229.005 739.591,227.277 740.159,228.758 740.728,229.299 741.296,229.488 741.864,228.817 742.433,228.332 743.001,228.591 743.569,228.101 744.138,229.597 744.706,229.842 745.274,230.222 745.843,230.53 746.411,231.881 746.98,231.195 747.548,229.172 748.116,228.375 748.685,230.862 749.253,230.881 749.821,230.093 750.39,228.274 750.958,226.673 751.526,229.213 752.095,229.719 752.663,230.967 753.231,231.173 753.8,232.389 754.368,232.298 754.936,232.7 755.505,231.671 756.073,232.889 756.641,234.966 757.21,235.005 757.778,232.989 758.346,232.208 758.915,232.463 759.483,231.713 760.052,232.866 760.62,235.055 761.188,236.191 761.757,235.996 762.325,237.975 762.893,239.867 763.462,239.428 764.03,239.253 764.598,240.26 765.167,239.031 765.735,241.886 766.303,241.428 766.872,242.84 767.44,243.026 768.008,242.484 768.577,242.082 769.145,242.274 769.713,242.87 770.282,240.196 770.85,239.792 771.418,238.198 771.987,237.027 772.555,238.778 773.123,234.343 773.692,234.447 774.26,236.24 774.829,236.025 775.397,235.847 775.965,235.71 776.534,236.716 777.102,236.54 777.67,234.323 778.239,231.101 778.807,231.204 779.375,234.371 779.944,232.159 780.512,234.125 781.08,231.981 781.649,231.988 782.217,228.905 782.785,228.951 783.354,230.212 783.922,231.324 784.49,233.414 785.059,234.196 785.627,234.145 786.195,234.091 786.764,234.003 787.332,231.92 787.9,231.507 788.469,231.52 789.037,227.556 789.606,229.923 790.174,227.922 790.742,226.271 791.311,226.673 791.879,229.023 792.447,230.097 793.016,231.4 793.584,233.234 794.152,232.269 794.721,234.35 795.289,233.101 795.857,234.094 796.426,232.902 796.994,233.075 797.562,233.022 798.131,232.092 798.699,232.063 799.267,233.153 799.836,233.243 800.404,233.287 800.972,233.141 801.541,234.253 802.109,235.229 802.678,234.101 803.246,233.77 803.814,233.69 804.383,232.597 804.951,232.579 805.519,230.382 806.088,230.311 806.656,230.419 807.224,230.511 807.793,231.72 808.361,234.929 808.929,233.841 809.498,233.749 810.066,235.61 810.634,236.333 811.203,234.158 811.771,233.117 812.339,231.136 812.908,228.954 813.476,229.319 814.044,230.473 814.613,231.766 815.181,232.786 815.749,231.893 816.318,231.843 816.886,232.825 817.455,231.726 818.023,230.82 818.591,231.813 819.16,232.088 819.728,227.01 820.296,227.328 820.865,227.775 821.433,227.079 822.001,231.001 822.57,230.31 823.138,231.336 823.706,230.4 824.275,232.681 824.843,231.395 825.411,231.487 825.98,231.738 826.548,231.747 827.116,231.976 827.685,231.059 828.253,230.998 828.821,232.223 829.39,232.454 829.958,230.587 830.526,230.676 831.095,232.823 831.663,231.845 832.232,230.794 832.8,228.867 833.368,229.134 833.937,230.441 834.505,230.506 835.073,232.809 835.642,232.875 836.21,230.755 836.778,229.969 837.347,231.269 837.915,231.491 838.483,229.582 839.052,229.768 839.62,231.09 840.188,235.084 840.757,235.929 841.325,233.853 841.893,232.639 842.462,232.866 843.03,232.97 843.598,233.905 844.167,233.094 844.735,234.208 845.304,233.12 845.872,234.23 846.44,234.275 847.009,233.301 847.577,234.382 848.145,235.016 848.714,233.799 849.282,236.753 849.85,236.581 850.419,235.219 850.987,238.113 851.555,238.661 852.124,237.092 852.692,237.571 853.26,233.039 853.829,232.936 854.397,234.992 854.965,233.806 855.534,235.906 856.102,236.641 856.67,236.263 857.239,235.861 857.807,235.536 858.375,233.273 858.944,232.23 859.512,233.423 860.081,234.515 860.649,233.357 861.217,233.076 861.786,232.901 862.354,234.007 862.922,232.791 863.491,233.644 864.059,232.302 864.627,233.268 865.196,234.226 865.764,233.105 866.332,232.163 866.901,232.153 867.469,232.231 868.037,231.04 868.606,231.198 869.174,229.339 869.742,230.531 870.311,229.301 870.879,227.592 871.447,228.083 872.016,229.443 872.584,230.764 873.152,229.783 873.721,230.781 874.289,229.761 874.858,233.047 875.426,234.101 875.994,234.035 876.563,232.892 877.131,232.941 877.699,228.863 878.268,229.172 878.836,227.322 879.404,227.695 879.973,228.11 880.541,228.504 881.109,228.948 881.678,228.372 882.246,228.609 882.814,227.973 883.383,230.369 883.951,229.548 884.519,229.573 885.088,228.82 885.656,231.206 886.224,230.18 886.793,232.431 887.361,232.465 887.93,234.488 888.498,234.67 889.066,234.554 889.635,234.437 890.203,235.422 890.771,234.189 891.34,234.366 891.908,231.225 892.476,231.304 893.045,231.522 893.613,231.554 894.181,229.56 894.75,231.875 895.318,233.949 895.886,232.631 896.455,232.759 897.023,234.763 897.591,234.5 898.16,234.145 898.728,233.003 899.296,231.117 899.865,232.14 900.433,230.915 901.001,230.832 901.57,232.001 902.138,229.989 902.707,230.239 903.275,228.566 903.843,225.979 904.412,226.563 904.98,228.129 905.548,228.418 906.117,228.798 906.685,229.292 907.253,229.696 907.822,234.075 908.39,237.132 908.958,236.934 909.527,236.865 910.095,236.753 910.663,237.539 911.232,236.171 911.8,235.898 912.368,233.837 912.937,234.811 913.505,235.669 914.073,235.355 914.642,237.493 915.21,239.148 915.779,238.65 916.347,237.158 916.915,237.045 917.484,235.711 918.052,234.347 918.62,234.316 919.189,234.162 919.757,234.132 920.325,234.036 920.894,232.857 921.462,233.743 922.03,232.496 922.599,231.456 923.167,232.542 923.735,232.529 924.304,233.443 924.872,235.461 925.44,236.001 926.009,237.758 926.577,234.186 927.145,234.052 927.714,236.129 928.282,235.953 928.85,235.748 929.419,235.508 929.987,233.184 930.556,232.088 931.124,232.958 931.692,231.793 932.261,231.695 932.829,234.545 933.397,234.541 933.966,233.179 934.534,232.925 935.102,232.881 935.671,232.667 936.239,234.634 936.807,233.524 937.376,232.356 937.944,232.141 938.512,232.72 939.081,233.678 939.649,232.361 940.217,232.182 940.786,230.968 941.354,231.074 941.922,230.956 942.491,231.063 943.059,231.012 943.627,230.029 944.196,230.185 944.764,229.21 945.333,226.226 945.901,229.656 946.469,229.755 947.038,230.904 947.606,228.962 948.174,229.154 948.743,232.379 949.311,231.221 949.879,230.137 950.448,229.134 951.016,228.375 951.584,228.557 952.153,228.928 952.721,229.161 953.289,228.311 953.858,230.817 954.426,228.022 954.994,229.276 955.563,228.411 956.131,229.455 956.699,228.729 957.268,228.972 957.836,229.277 958.405,229.657 958.973,231.868 959.541,231 960.11,229.92 960.678,226.003 961.246,226.345 961.815,227.616 962.383,230.122 962.951,227.392 963.52,228.843 964.088,230.168 964.656,230.388 965.225,230.504 965.793,230.652 966.361,229.775 966.93,232.137 967.498,232.051 968.066,231.842 968.635,232.963 969.203,233.867 969.771,232.742 970.34,231.815 970.908,231.931 971.476,231.994 972.045,233.288 972.613,232.258 973.182,232.571 973.75,232.653 974.318,233.76 974.887,233.677 975.455,234.508 976.023,234.401 976.592,236.047 977.16,235.729 977.728,236.594 978.297,235.085 978.865,235.92 979.433,235.695 980.002,234.295 980.57,234.296 981.138,233.134 981.707,231.247 982.275,231.475 982.843,231.556 983.412,231.449 983.98,231.597 984.548,230.598 985.117,232.804 985.685,234.007 986.253,230.869 986.822,230.956 987.39,230.102 987.959,232.284 988.527,230.346 989.095,230.637 989.664,228.746 990.232,229.046 990.8,230.455 991.369,232.484 991.937,233.667 992.505,235.597 993.074,237.474 993.642,237.073 994.21,234.584 994.779,235.669 995.347,234.199 995.915,231.006 996.484,231.279 997.052,230.34 997.62,229.434 998.189,228.721 998.757,227.967 999.325,226.257 999.894,228.612 1000.46,228.752 1001.03,231.031 1001.6,232.143 1002.17,233.342 1002.74,232.353 1003.3,232.438 1003.87,229.509 1004.44,230.78 1005.01,230.719 1005.58,229.803 1006.15,228.924 1006.71,229.145 1007.28,228.453 1007.85,227.651 1008.42,227.021 1008.99,227.477 1009.56,227.758 1010.12,228.135 1010.69,230.474 1011.26,228.469 1011.83,228.949 1012.4,228.082 1012.97,229.364 1013.53,229.592 1014.1,229.775 1014.67,229.968 1015.24,230.237 1015.81,230.465 1016.38,229.691 1016.94,228.982 1017.51,229.06 1018.08,230.405 1018.65,230.614 1019.22,229.818 1019.79,230.262 1020.35,232.631 1020.92,232.585 1021.49,233.694 1022.06,235.821 1022.63,235.591 1023.2,234.357 1023.76,233.33 1024.33,232.418 1024.9,233.345 1025.47,234.43 1026.04,236.402 1026.61,237.147 1027.17,237.876 1027.74,237.668 1028.31,239.452 1028.88,239.231 1029.45,236.829 1030.02,234.512 1030.58,235.446 1031.15,236.115 1031.72,234.84 1032.29,232.728 1032.86,233.78 1033.43,234.608 1033.99,231.191 1034.56,230.982 1035.13,233.294 1035.7,233.188 1036.27,235.059 1036.84,234.028 1037.4,235.982 1037.97,234.735 1038.54,232.45 1039.11,232.585 1039.68,231.642 1040.25,230.591 1040.81,229.824 1041.38,229.997 1041.95,230.348 1042.52,234.519 1043.09,236.463 1043.66,236.031 1044.22,235.825 1044.79,234.476 1045.36,234.241 1045.93,233.116 1046.5,231.124 1047.07,232.237 1047.63,232.133 1048.2,229.98 1048.77,228.116 1049.34,229.253 1049.91,230.407 1050.48,233.539 1051.05,231.38 1051.61,232.488 1052.18,230.337 1052.75,233.441 1053.32,231.338 1053.89,231.336 1054.46,230.164 1055.02,231.476 1055.59,232.579 1056.16,232.66 1056.73,231.764 1057.3,231.769 1057.87,232.857 1058.43,230.738 1059,227.642 1059.57,229.192 1060.14,231.516 1060.71,230.583 1061.28,230.632 1061.84,232.706 1062.41,232.88 1062.98,233.855 1063.55,233.827 1064.12,233.704 1064.69,235.659 1065.25,234.294 1065.82,234.119 1066.39,234.937 1066.96,233.761 1067.53,233.621 1068.1,232.423 1068.66,236.501 1069.23,237.043 1069.8,234.748 1070.37,234.691 1070.94,234.56 1071.51,236.609 1072.07,237.071 1072.64,235.607 1073.21,235.075 1073.78,235.885 1074.35,236.638 1074.92,236.378 1075.48,236.155 1076.05,234.583 1076.62,232.17 1077.19,231.198 1077.76,231.333 1078.33,231.298 1078.89,228.054 1079.46,229.456 1080.03,230.749 1080.6,230.993 1081.17,231.977 1081.74,233.012 1082.3,231.767 1082.87,232.653 1083.44,231.663 1084.01,233.863 1084.58,232.781 1085.15,233.709 1085.71,232.614 1086.28,230.384 1086.85,232.504 1087.42,231.448 1087.99,231.509 1088.56,230.339 1089.12,231.491 1089.69,231.584 1090.26,232.464 1090.83,232.622 1091.4,235.743 1091.97,234.654 1092.53,234.39 1093.1,233.225 1093.67,231.894 1094.24,232.941 1094.81,229.699 1095.38,229.83 1095.94,232.01 1096.51,231.051 1097.08,229.024 1097.65,229.186 1098.22,228.32 1098.79,226.606 1099.35,226.837 1099.92,225.973 1100.49,226.423 1101.06,228.792 1101.63,228.988 1102.2,230.056 1102.76,231.211 1103.33,232.16 1103.9,231.893 1104.47,226.951 1105.04,226.251 1105.61,229.559 1106.17,230.564 1106.74,230.539 1107.31,227.44 1107.88,229.801 1108.45,230.831 1109.02,230.834 1109.58,230.897 1110.15,231.155 1110.72,227.932 1111.29,229.196 1111.86,228.406 1112.43,229.712 1112.99,230.915 1113.56,228.142 1114.13,229.661 1114.7,229.711 1115.27,227.851 1115.84,228.401 1116.4,227.581 1116.97,227.715 1117.54,227.845 1118.11,227.997 1118.68,229.243 1119.25,226.466 1119.81,226.988 1120.38,225.56 1120.95,226.087 1121.52,226.77 1122.09,227.326 1122.66,226.775 1123.23,226.244 1123.79,226.964 1124.36,229.327 1124.93,232.026 1125.5,232.102 1126.07,232.093 1126.64,231.194 1127.2,229.313 1127.77,229.683 1128.34,229.795 1128.91,229.991 1129.48,231.395 1130.05,230.431 1130.61,230.742 1131.18,232.027 1131.75,232.907 1132.32,232.98 1132.89,233.183 1133.46,231.175 1134.02,232.594 1134.59,231.571 1135.16,231.78 1135.73,231.854 1136.3,232.054 1136.87,234.261 1137.43,236.189 1138,235.912 1138.57,236.711 1139.14,237.56 1139.71,238.081 1140.28,235.622 1140.84,236.387 1141.41,235.131 1141.98,232.876 1142.55,232.92 1143.12,233.111 1143.69,234.239 1144.25,232.004 1144.82,231.043 1145.39,231.186 1145.96,229.359 1146.53,229.602 1147.1,229.852 1147.66,224.996 1148.23,224.681 1148.8,229.536 1149.37,227.757 1149.94,228.292 1150.51,230.853 1151.07,233.049 1151.64,233.033 1152.21,233.073 1152.78,234.218 1153.35,233.227 1153.92,234.166 1154.48,232.249 1155.05,233.214 1155.62,233.243 1156.19,231.137 1156.76,230.423 1157.33,231.772 1157.89,231.997 1158.46,232.189 1159.03,230.416 1159.6,227.629 1160.17,230.227 1160.74,229.506 1161.3,229.853 1161.87,230.13 1162.44,231.522 1163.01,233.575 1163.58,234.658 1164.15,236.394 1164.71,241.432 1165.28,242.01 1165.85,242.167 1166.42,241.598 1166.99,238.709 1167.56,240.191 1168.12,239.436 1168.69,237.899 1169.26,236.61 1169.83,240.409 1170.4,238.968 1170.97,239.557 1171.53,237.946 1172.1,237.309 1172.67,235.82 1173.24,236.558 1173.81,237.32 1174.38,237.108 1174.94,236.81 1175.51,235.365 1176.08,234.95 1176.65,233.641 1177.22,231.503 1177.79,230.505 1178.35,231.643 1178.92,229.671 1179.49,228.732 1180.06,228.945 1180.63,228.098 1181.2,228.377 1181.76,227.606 1182.33,227.834 1182.9,229.056 1183.47,228.355 1184.04,228.647 1184.61,229.914 1185.17,232.147 1185.74,233.046 1186.31,230.881 1186.88,231.967 1187.45,234.087 1188.02,231.878 1188.58,231.681 1189.15,232.607 1189.72,232.529 1190.29,231.446 1190.86,231.229 1191.43,231.212 1192,231.113 1192.56,232.118 1193.13,230.14 1193.7,229.137 1194.27,230.46 1194.84,229.452 1195.41,230.658 1195.97,231.714 1196.54,230.733 1197.11,229.9 1197.68,224.897 1198.25,224.525 1198.82,224.903 1199.38,225.305 1199.95,228.045 1200.52,228.33 1201.09,231.818 1201.66,232.175 1202.23,234.327 1202.79,234.313 1203.36,234.1 1203.93,233.981 1204.5,233.032 1205.07,233.418 1205.64,235.478 1206.2,234.21 1206.77,234.066 1207.34,233.767 1207.91,234.599 1208.48,231.361 1209.05,231.454 1209.61,233.428 1210.18,235.264 1210.75,235.045 1211.32,232.656 1211.89,233.8 1212.46,234.651 1213.02,236.598 1213.59,237.238 1214.16,237.004 1214.73,236.796 1215.3,236.355 1215.87,236.192 1216.43,237.116 1217,237.611 1217.57,234.389 1218.14,235.2 1218.71,235.832 1219.28,236.552 1219.84,238.404 1220.41,237.956 1220.98,237.419 1221.55,238.083 1222.12,234.466 1222.69,232.235 1223.25,231.21 1223.82,231.293 1224.39,231.426 1224.96,231.345 1225.53,232.379 1226.1,232.393 1226.66,234.434 1227.23,238.169 1227.8,236.709 1228.37,233.963 1228.94,233.763 1229.51,232.476 1230.07,231.228 1230.64,231.132 1231.21,228.901 1231.78,227.996 1232.35,229.241 1232.92,230.32 1233.48,230.184 1234.05,232.301 1234.62,233.223 1235.19,233.126 1235.76,232.901 1236.33,234.854 1236.89,234.574 1237.46,235.327 1238.03,237.027 1238.6,238.694 1239.17,239.139 1239.74,238.463 1240.3,237.6 1240.87,237.952 1241.44,238.552 1242.01,238.87 1242.58,237.922 1243.15,236.152 1243.71,235.692 1244.28,234.202 1244.85,231.51 1245.42,231.224 1245.99,232.196 1246.56,230.98 1247.12,230.794 1247.69,231.738 1248.26,229.634 1248.83,230.519 1249.4,230.397 1249.97,230.335 1250.53,230.445 1251.1,229.396 1251.67,231.639 1252.24,229.347 1252.81,230.286 1253.38,233.1 1253.94,232.711 1254.51,232.352 1255.08,232.12 1255.65,232.95 1256.22,230.806 1256.79,231.551 1257.35,233.495 1257.92,232.947 1258.49,230.547 1259.06,231.628 1259.63,231.49 1260.2,231.498 1260.76,232.333 1261.33,231.124 1261.9,230.098 1262.47,227.882 1263.04,227.911 1263.61,228.244 1264.18,228.355 1264.74,228.775 1265.31,229.851 1265.88,231.804 1266.45,233.956 1267.02,233.468 1267.59,232.369 1268.15,232.121 1268.72,231.963 1269.29,231.683 1269.86,231.454 1270.43,230.335 1271,230.239 1271.56,228.008 1272.13,225.913 1272.7,228.153 1273.27,227.244 1273.84,225.478 1274.41,223.733 1274.97,224.282 1275.54,224.925 1276.11,224.267 1276.68,225.707 1277.25,225.96 1277.82,228.253 1278.38,229.474 1278.95,229.681 1279.52,229.818 1280.09,229.868 1280.66,228.883 1281.23,230.399 1281.79,228.415 1282.36,228.483 1282.93,231.81 1283.5,230.997 1284.07,232.26 1284.64,232.332 1285.2,231.218 1285.77,233.038 1286.34,232.909 1286.91,233.728 1287.48,233.462 1288.05,232.256 1288.61,234.159 1289.18,233.12 1289.75,232.992 1290.32,233.846 1290.89,232.432 1291.46,231.247 1292.02,229.966 1292.59,230.099 1293.16,231.304 1293.73,231.219 1294.3,231.228 1294.87,232.273 1295.43,229.892 1296,228.791 1296.57,230.015 1297.14,227.971 1297.71,231.295 1298.28,229.255 1298.84,230.476 1299.41,230.509 1299.98,232.52 1300.55,232.647 1301.12,230.647 1301.69,231.555 1302.25,231.413 1302.82,230.678 1303.39,230.942 1303.96,231.707 1304.53,233.809 1305.1,232.752 1305.66,230.769 1306.23,230.836 1306.8,230.862 1307.37,231.207 1307.94,231.369 1308.51,231.365 1309.07,231.41 1309.64,230.502 1310.21,231.674 1310.78,231.864 1311.35,230.866 1311.92,229.938 1312.48,230.12 1313.05,229.025 1313.62,228.126 1314.19,228.542 1314.76,227.675 1315.33,227.914 1315.89,228.181 1316.46,230.556 1317.03,227.511 1317.6,226.353 1318.17,225.673 1318.74,225.888 1319.3,226.213 1319.87,225.609 1320.44,227.01 1321.01,228.34 1321.58,229.576 1322.15,229.678 1322.71,230.888 1323.28,230.926 1323.85,230.963 1324.42,231.204 1324.99,232.148 1325.56,231.086 1326.12,231.45 1326.69,231.62 1327.26,230.714 1327.83,230.892 1328.4,231.013 1328.97,231.052 1329.53,233.279 1330.1,232.163 1330.67,232.461 1331.24,231.402 1331.81,231.575 1332.38,231.66 1332.94,233.773 1333.51,233.728 1334.08,232.533 1334.65,235.762 1335.22,236.581 1335.79,236.341 1336.36,235.155 1336.92,237.122 1337.49,234.762 1338.06,234.544 1338.63,235.416 1339.2,235.074 1339.77,235 1340.33,234.842 1340.9,236.767 1341.47,236.381 1342.04,236.073 1342.61,237.812 1343.18,238.325 1343.74,237.85 1344.31,236.501 1344.88,234.357 1345.45,233.069 1346.02,233.024 1346.59,231.923 1347.15,231.888 1347.72,233.04 1348.29,231.877 1348.86,231.594 1349.43,230.546 1350,230.469 1350.56,231.669 1351.13,230.515 1351.7,228.251 1352.27,229.579 1352.84,227.691 1353.41,226.021 1353.97,226.174 1354.54,224.281 1355.11,224.499 1355.68,224.913 1356.25,227.533 1356.82,227.959 1357.38,227.072 1357.95,228.469 1358.52,227.946 1359.09,227.347 1359.66,228.759 1360.23,229.18 1360.79,228.332 1361.36,229.526 1361.93,228.861 1362.5,229.087 1363.07,229.444 1363.64,231.898 1364.2,229.854 1364.77,231.081 1365.34,233.241 1365.91,234.245 1366.48,235.911 1367.05,236.591 1367.61,237.024 1368.18,235.559 1368.75,235.22 1369.32,238.832 1369.89,239.281 1370.46,238.874 1371.02,239.539 1371.59,238.004 1372.16,237.642 1372.73,234.236 1373.3,234.864 1373.87,234.865 1374.43,236.683 1375,235.542 1375.57,235.251 1376.14,233.973 1376.71,232.839 1377.28,230.869 1377.84,230.82 1378.41,230.885 1378.98,231.988 1379.55,231.856 1380.12,232.881 1380.69,234.912 1381.25,233.656 1381.82,231.537 1382.39,233.455 1382.96,232.27 1383.53,230.303 1384.1,230.54 1384.66,230.598 1385.23,229.698 1385.8,227.764 1386.37,227.091 1386.94,229.394 1387.51,228.583 1388.07,229.803 1388.64,230.015 1389.21,231.149 1389.78,230.887 1390.35,231.044 1390.92,231.096 1391.48,231.339 1392.05,231.473 1392.62,230.454 1393.19,232.367 1393.76,233.561 1394.33,232.634 1394.89,232.452 1395.46,231.311 1396.03,229.26 1396.6,228.481 1397.17,229.922 1397.74,230.232 1398.3,231.165 1398.87,232.381 1399.44,234.515 1400.01,234.389 1400.58,235.518 1401.15,234.425 1401.71,233.214 1402.28,232.992 1402.85,229.74 1403.42,230.587 1403.99,230.613 1404.56,230.687 1405.13,232.699 1405.69,232.92 1406.26,232.837 1406.83,231.712 1407.4,231.743 1407.97,231.847 1408.54,230.748 1409.1,231.113 1409.67,229.252 1410.24,230.284 1410.81,229.406 1411.38,228.783 1411.95,232.206 1412.51,233.208 1413.08,234.368 1413.65,236.307 1414.22,234.955 1414.79,233.864 1415.36,233.45 1415.92,232.407 1416.49,233.337 1417.06,234.282 1417.63,233.841 1418.2,232.655 1418.77,233.419 1419.33,233.092 1419.9,231.943 1420.47,233.153 1421.04,235.012 1421.61,236.646 1422.18,237.215 1422.74,235.781 1423.31,236.631 1423.88,236.353 1424.45,235.154 1425.02,233.924 1425.59,234.609 1426.15,232.343 1426.72,232.136 1427.29,234.102 1427.86,233.648 1428.43,232.534 1429,230.434 1429.56,230.6 1430.13,231.716 1430.7,233.906 1431.27,232.804 1431.84,231.681 1432.41,232.591 1432.97,231.298 1433.54,232.221 1434.11,232.072 1434.68,231.936 1435.25,231.154 1435.82,229.9 1436.38,228.048 1436.95,228.364 1437.52,229.651 1438.09,228.881 1438.66,229.009 1439.23,229.245 1439.79,230.437 1440.36,229.277 1440.93,229.503 1441.5,228.662 1442.07,228.544 1442.64,229.94 1443.2,231.186 1443.77,230.051 1444.34,230.029 1444.91,230.299 1445.48,228.565 1446.05,228.653 1446.61,228.56 1447.18,228.937 1447.75,225.004 1448.32,225.086 1448.89,223.537 1449.46,223.093 1450.02,221.651 1450.59,221.533 1451.16,224.376 1451.73,228.146 1452.3,229.577 1452.87,228.558 1453.43,229.983 1454,229.889 1454.57,228.888 1455.14,229.294 1455.71,230.674 1456.28,231.882 1456.84,232.973 1457.41,234.896 1457.98,232.839 1458.55,233.878 1459.12,234.817 1459.69,234.583 1460.25,235.464 1460.82,235.272 1461.39,235.066 1461.96,235.698 1462.53,234.505 1463.1,234.367 1463.66,236.42 1464.23,234.228 1464.8,234.019 1465.37,234.935 1465.94,233.58 1466.51,234.403 1467.07,235.276 1467.64,236.105 1468.21,236.732 1468.78,236.452 1469.35,237.231 1469.92,237.857 1470.48,238.475 1471.05,237.144 1471.62,235.601 1472.19,234.076 1472.76,234.704 1473.33,234.442 1473.89,235.193 1474.46,235.905 1475.03,235.619 1475.6,234.179 1476.17,233.041 1476.74,231.825 1477.31,232.924 1477.87,232.881 1478.44,232.585 1479.01,231.401 1479.58,231.269 1480.15,232.328 1480.72,234.144 1481.28,232.694 1481.85,232.586 1482.42,232.72 1482.99,232.503 1483.56,231.346 1484.13,231.095 1484.69,232.203 1485.26,233.091 1485.83,230.851 1486.4,229.835 1486.97,231.85 1487.54,231.969 1488.1,232.888 1488.67,233.821 1489.24,233.623 1489.81,232.501 1490.38,230.123 1490.95,229.293 1491.51,229.388 1492.08,227.305 1492.65,227.647 1493.22,228.856 1493.79,229.019 1494.36,229.166 1494.92,229.126 1495.49,228.368 1496.06,227.682 1496.63,227.043 1497.2,226.513 1497.77,225.921 1498.33,228.375 1498.9,229.538 1499.47,229.718 1500.04,227.748 1500.61,224.958 1501.18,226.476 1501.74,227.635 1502.31,226.193 1502.88,227.598 1503.45,227.978 1504.02,229.354 1504.59,229.575 1505.15,230.769 1505.72,229.846 1506.29,228.768 1506.86,228.202 1507.43,226.638 1508,226.1 1508.56,226.378 1509.13,226.773 1509.7,227.136 1510.27,227.516 1510.84,228.983 1511.41,229.125 1511.97,232.281 1512.54,234.549 1513.11,236.609 1513.68,235.282 1514.25,236.09 1514.82,233.909 1515.38,233.765 1515.95,232.84 1516.52,234.837 1517.09,235.934 1517.66,236.81 1518.23,235.545 1518.79,234.298 1519.36,233.2 1519.93,233.396 1520.5,234.386 1521.07,233.448 1521.64,235.35 1522.2,235.093 1522.77,234.844 1523.34,234.503 1523.91,234.247 1524.48,235.077 1525.05,234.788 1525.61,236.705 1526.18,236.347 1526.75,237.121 1527.32,235.881 1527.89,234.417 1528.46,231.94 1529.02,232.065 1529.59,229.921 1530.16,230.083 1530.73,227.152 1531.3,227.497 1531.87,228.873 1532.43,227.009 1533,225.375 1533.57,224.772 1534.14,226.289 1534.71,225.901 1535.28,226.453 1535.84,227.662 1536.41,229.036 1536.98,230.436 1537.55,228.531 1538.12,229.878 1538.69,231.444 1539.25,230.427 1539.82,230.55 1540.39,228.687 1540.96,229.83 1541.53,229.251 1542.1,229.57 1542.66,229.563 1543.23,232.058 1543.8,231.154 1544.37,231.354 1544.94,231.485 1545.51,228.454 1546.08,231.026 1546.64,229.965 1547.21,231.038 1547.78,232.304 1548.35,232.467 1548.92,234.562 1549.49,233.628 1550.05,233.529 1550.62,234.528 1551.19,234.493 1551.76,236.495 1552.33,236.367 1552.9,234.249 1553.46,235.085 1554.03,232.729 1554.6,232.957 1555.17,232.891 1555.74,232.987 1556.31,234.007 1556.87,234.917 1557.44,237.824 1558.01,234.459 1558.58,237.572 1559.15,236.097 1559.72,238.986 1560.28,237.455 1560.85,238.956 1561.42,239.602 1561.99,236.979 1562.56,238.486 1563.13,236.988 1563.69,236.559 1564.26,239.418 1564.83,240.206 1565.4,239.401 1565.97,237.769 1566.54,237.495 1567.1,235.122 1567.67,235.586 1568.24,235.368 1568.81,233.917 1569.38,229.493 1569.95,230.438 1570.51,227.336 1571.08,227.404 1571.65,226.588 1572.22,225.67 1572.79,224.74 1573.36,226.094 1573.92,225.503 1574.49,224.88 1575.06,225.506 1575.63,225.075 1576.2,225.642 1576.77,226.212 1577.33,225.448 1577.9,225.994 1578.47,225.317 1579.04,221.581 1579.61,224.312 1580.18,223.924 1580.74,225.423 1581.31,223.818 1581.88,227.692 1582.45,230.184 1583.02,230.328 1583.59,229.654 1584.15,227.795 1584.72,227.426 1585.29,225.823 1585.86,227.427 1586.43,228.834 1587,230.313 1587.56,229.543 1588.13,230.897 1588.7,231.26 1589.27,232.658 1589.84,232.651 1590.41,233.593 1590.97,235.453 1591.54,236.295 1592.11,235.974 1592.68,237.846 1593.25,237.382 1593.82,238.129 1594.38,239.002 1594.95,237.5 1595.52,237.149 1596.09,237.696 1596.66,237.327 1597.23,234.972 1597.79,234.825 1598.36,234.383 1598.93,231.221 1599.5,231.285 1600.07,231.226 1600.64,230.248 1601.2,230.307 1601.77,229.496 1602.34,228.618 1602.91,228.919 1603.48,228.021 1604.05,227.436 1604.61,227.895 1605.18,226.117 1605.75,228.84 1606.32,231.356 1606.89,231.302 1607.46,231.472 1608.02,230.616 1608.59,228.679 1609.16,228.878 1609.73,231.153 1610.3,230.21 1610.87,231.375 1611.43,231.538 1612,231.671 1612.57,233.751 1613.14,233.667 1613.71,231.692 1614.28,230.83 1614.84,231.8 1615.41,230.929 1615.98,231.094 1616.55,229.138 1617.12,230.334 1617.69,229.559 1618.26,229.722 1618.82,229.884 1619.39,230.152 1619.96,233.384 1620.53,234.312 1621.1,235.063 1621.67,233.729 1622.23,234.547 1622.8,231.343 1623.37,230.214 1623.94,231.658 1624.51,231.853 1625.08,233.054 1625.64,235.184 1626.21,233.931 1626.78,233.033 1627.35,233.045 1627.92,231.882 1628.49,232.642 1629.05,232.967 1629.62,232.05 1630.19,231.002 1630.76,230.932 1631.33,231.06 1631.9,230.141 1632.46,231.341 1633.03,231.464 1633.6,234.608 1634.17,233.49 1634.74,233.344 1635.31,233.58 1635.87,234.672 1636.44,234.474 1637.01,236.675 1637.58,235.368 1638.15,235.142 1638.72,237.013 1639.28,237.427 1639.85,233.845 1640.42,233.756 1640.99,231.922 1641.56,233.933 1642.13,234.976 1642.69,233.8 1643.26,234.713 1643.83,234.379 1644.4,233.165 1644.97,235.794 1645.54,233.441 1646.1,231.227 1646.67,230.878 1647.24,231.715 1647.81,232.668 1648.38,234.499 1648.95,234.12 1649.51,231.986 1650.08,230.8 1650.65,232.049 1651.22,231.029 1651.79,232.303 1652.36,233.424 1652.92,233.233 1653.49,232.072 1654.06,231.111 1654.63,230.358 1655.2,233.3 1655.77,235.953 1656.33,235.647 1656.9,233.294 1657.47,231.728 1658.04,228.527 1658.61,230.878 1659.18,230.982 1659.74,232.079 1660.31,230.973 1660.88,231.255 1661.45,231.457 1662.02,233.647 1662.59,234.468 1663.15,234.132 1663.72,232.946 1664.29,230.798 1664.86,233.836 1665.43,233.75 1666,231.45 1666.56,232.422 1667.13,232.229 1667.7,232.169 1668.27,234.15 1668.84,234.916 1669.41,234.756 1669.97,235.723 1670.54,236.417 1671.11,235.015 1671.68,233.486 1672.25,233.332 1672.82,233.06 1673.38,231.764 1673.95,232.672 1674.52,232.689 1675.09,234.327 1675.66,234.96 1676.23,235.616 1676.79,236.358 1677.36,234.017 1677.93,231.776 1678.5,233.725 1679.07,233.47 1679.64,234.425 1680.2,235.313 1680.77,234.847 1681.34,234.509 1681.91,234.056 1682.48,233.821 1683.05,234.581 1683.61,233.407 1684.18,233.276 1684.75,234.136 1685.32,232.874 1685.89,232.813 1686.46,232.883 1687.02,232.923 1687.59,232.94 1688.16,233.853 1688.73,234.779 1689.3,234.572 1689.87,233.246 1690.44,234.369 1691,232.996 1691.57,232.824 1692.14,233.66 1692.71,234.43 1693.28,235.255 1693.85,234.722 1694.41,236.285 1694.98,236.817 1695.55,237.328 1696.12,236.8 1696.69,234.948 1697.26,234.316 1697.82,235.028 1698.39,235.764 1698.96,234.246 1699.53,233.984 1700.1,233.599 1700.67,234.46 1701.23,231.009 1701.8,230.821 1702.37,231.881 1702.94,231.673 1703.51,230.354 1704.08,231.356 1704.64,230.079 1705.21,230.066 1705.78,227.996 1706.35,228.162 1706.92,229.502 1707.49,228.512 1708.05,228.752 1708.62,229.725 1709.19,231.61 1709.76,230.489 1710.33,229.362 1710.9,230.645 1711.46,230.428 1712.03,229.456 1712.6,229.359 1713.17,230.557 1713.74,231.476 1714.31,228.364 1714.87,229.589 1715.44,230.632 1716.01,230.473 1716.58,230.25 1717.15,230.187 1717.72,229.21 1718.28,229.123 1718.85,228.218 1719.42,227.33 1719.99,226.597 1720.56,227.866 1721.13,228.281 1721.69,227.468 1722.26,228.796 1722.83,226.74 1723.4,222.895 1723.97,225.545 1724.54,226.158 1725.1,228.423 1725.67,227.777 1726.24,227.845 1726.81,226.177 1727.38,227.451 1727.95,223.735 1728.51,224.401 1729.08,223.862 1729.65,222.376 1730.22,223.23 1730.79,219.895 1731.36,221.005 1731.92,220.711 1732.49,221.602 1733.06,221.295 1733.63,224.246 1734.2,224.902 1734.77,225.566 1735.33,226.288 1735.9,224.703 1736.47,224.53 1737.04,225.24 1737.61,225.924 1738.18,229.56 1738.74,230.885 1739.31,232.113 1739.88,233.39 1740.45,234.524 1741.02,234.401 1741.59,235.199 1742.15,237.06 1742.72,236.75 1743.29,238.353 1743.86,238.955 1744.43,237.637 1745,237.427 1745.56,239.256 1746.13,235.672 1746.7,235.452 1747.27,234.027 1747.84,231.922 1748.41,229.932 1748.97,229.149 1749.54,229.163 1750.11,229.436 1750.68,229.889 1751.25,231.289 1751.82,231.365 1752.38,228.322 1752.95,227.426 1753.52,226.711 1754.09,228.434 1754.66,230.871 1755.23,230.014 1755.79,231.313 1756.36,232.299 1756.93,232.286 1757.5,234.462 1758.07,233.405 1758.64,234.533 1759.21,235.376 1759.77,236.342 1760.34,236.189 1760.91,233.628 1761.48,233.539 1762.05,233.492 1762.62,234.291 1763.18,233.229 1763.75,234.088 1764.32,235.002 1764.89,235.687 1765.46,236.523 1766.03,235.263 1766.59,233.925 1767.16,233.837 1767.73,233.895 1768.3,233.772 1768.87,232.839 1769.44,230.952 1770,231.183 1770.57,230.358 1771.14,230.51 1771.71,230.634 1772.28,230.703 1772.85,231.864 1773.41,230.857 1773.98,230.943 1774.55,233.221 1775.12,233.034 1775.69,236.04 1776.26,236.898 1776.82,235.163 1777.39,233.855 1777.96,232.954 1778.53,229.905 1779.1,230.069 1779.67,228.194 1780.23,230.614 1780.8,230.397 1781.37,230.444 1781.94,231.526 1782.51,231.555 1783.08,230.527 1783.64,227.752 1784.21,227.203 1784.78,228.627 1785.35,229.811 1785.92,229.005 1786.49,228.197 1787.05,228.375 1787.62,227.821 1788.19,226.177 1788.76,227.775 1789.33,228.311 1789.9,229.742 1790.46,228.693 1791.03,229.979 1791.6,231.358 1792.17,229.684 1792.74,228.868 1793.31,227.184 1793.87,228.556 1794.44,228.768 1795.01,229.124 1795.58,227.295 1796.15,232.784 1796.72,233.589 1797.28,233.573 1797.85,234.483 1798.42,236.342 1798.99,236.162 1799.56,237.099 1800.13,236.932 1800.69,239.811 1801.26,241.286 1801.83,239.456 1802.4,238.019 1802.97,237.505 1803.54,238.03 1804.1,238.724 1804.67,239.469 1805.24,238.993 1805.81,237.471 1806.38,236.117 1806.95,237.693 1807.51,237.377 1808.08,237.012 1808.65,236.714 1809.22,237.544 1809.79,234.909 1810.36,236.637 1810.92,235.23 1811.49,235.946 1812.06,234.591 1812.63,235.257 1813.2,234.875 1813.77,232.605 1814.33,230.526 1814.9,231.477 1815.47,230.418 1816.04,228.402 1816.61,225.546 1817.18,225.909 1817.74,225.42 1818.31,227.987 1818.88,228.294 1819.45,228.723 1820.02,230.084 1820.59,229.126 1821.15,230.407 1821.72,232.642 1822.29,234.506 1822.86,236.459 1823.43,236.117 1824,233.901 1824.56,234.689 1825.13,232.395 1825.7,228.567 1826.27,227.739 1826.84,227.808 1827.41,225.906 1827.97,226.603 1828.54,227.851 1829.11,228.334 1829.68,227.673 1830.25,227.866 1830.82,227.23 1831.39,227.459 1831.95,227.746 1832.52,227.976 1833.09,230.346 1833.66,229.552 1834.23,230.874 1834.8,232.235 1835.36,231.272 1835.93,231.479 1836.5,233.591 1837.07,234.655 1837.64,235.572 1838.21,235.448 1838.77,235.077 1839.34,234.572 1839.91,234.294 1840.48,231.819 1841.05,231.609 1841.62,232.673 1842.18,234.68 1842.75,235.694 1843.32,234.452 1843.89,233.139 1844.46,233.001 1845.03,236.044 1845.59,235.909 1846.16,232.539 1846.73,230.66 1847.3,231.603 1847.87,231.565 1848.44,231.528 1849,232.631 1849.57,235.579 1850.14,235.61 1850.71,234.329 1851.28,234.101 1851.85,232.839 1852.41,232.482 1852.98,232.408 1853.55,231.138 1854.12,232.109 1854.69,230.982 1855.26,231.019 1855.82,231.979 1856.39,229.897 1856.96,230.165 1857.53,230.344 1858.1,230.499 1858.67,231.476 1859.23,233.692 1859.8,235.629 1860.37,237.156 1860.94,237.961 1861.51,237.752 1862.08,237.294 1862.64,235.77 1863.21,235.424 1863.78,235.189 1864.35,233.764 1864.92,232.713 1865.49,233.79 1866.05,231.628 1866.62,230.732 1867.19,231.706 1867.76,231.48 1868.33,230.427 1868.9,231.403 1869.46,231.146 1870.03,233.275 1870.6,232.1 1871.17,231.928 1871.74,232.047 1872.31,233.077 1872.87,232.929 1873.44,232.954 1874.01,232.82 1874.58,233.759 1875.15,234.471 1875.72,235.134 1876.28,232.776 1876.85,232.648 1877.42,234.414 1877.99,235.107 1878.56,234.822 1879.13,233.485 1879.69,234.096 1880.26,231.534 1880.83,230.404 1881.4,230.396 1881.97,231.12 1882.54,228.975 1883.1,229.04 1883.67,231.389 1884.24,230.444 1884.81,230.485 1885.38,231.722 1885.95,233.771 1886.51,232.481 1887.08,230.29 1887.65,229.437 1888.22,229.628 1888.79,229.778 1889.36,230.97 1889.92,230.166 1890.49,228.046 1891.06,229.515 1891.63,229.643 1892.2,229.902 1892.77,230.07 1893.33,231.297 1893.9,232.22 1894.47,233.225 1895.04,234.213 1895.61,236.157 1896.18,234.757 1896.74,232.339 1897.31,231.252 1897.88,232.224 1898.45,233.074 1899.02,230.862 1899.59,230.94 1900.16,230.845 1900.72,231.689 1901.29,233.851 1901.86,233.603 1902.43,233.559 1903,232.371 1903.57,232.212 1904.13,231.009 1904.7,231.032 1905.27,229.951 1905.84,229.282 1906.41,229.359 1906.98,231.679 1907.54,230.711 1908.11,229.782 1908.68,229.985 1909.25,229.136 1909.82,230.316 1910.39,231.338 1910.95,232.21 1911.52,233.196 1912.09,231.915 1912.66,229.557 1913.23,228.586 1913.8,230.962 1914.36,229.958 1914.93,229.167 1915.5,228.607 1916.07,229.745 1916.64,229.966 1917.21,230.018 1917.77,229.126 1918.34,229.077 1918.91,228.246 1919.48,228.562 1920.05,227.783 1920.62,227.072 1921.18,224.241 1921.75,224.762 1922.32,225.185 1922.89,226.73 1923.46,228.173 1924.03,227.517 1924.59,225.726 1925.16,226.006 1925.73,227.507 1926.3,228.954 1926.87,228.388 1927.44,227.565 1928,229.953 1928.57,232.084 1929.14,232.208 1929.71,232.247 1930.28,232.103 1930.85,235.167 1931.41,235.161 1931.98,234.907 1932.55,234.724 1933.12,235.724 1933.69,234.484 1934.26,233.269 1934.82,231.159 1935.39,231.089 1935.96,232.099 1936.53,232.021 1937.1,230.199 1937.67,231.227 1938.23,230.264 1938.8,229.424 1939.37,228.468 1939.94,228.969 1940.51,225.031 1941.08,224.489 1941.64,223.211 1942.21,224.723 1942.78,226.185 1943.35,225.696 1943.92,228.172 1944.49,230.562 1945.05,229.665 1945.62,230.04 1946.19,233.395 1946.76,236.57 1947.33,235.371 1947.9,234.182 1948.46,230.921 1949.03,231.201 1949.6,232.338 1950.17,230.439 1950.74,229.702 1951.31,229.943 1951.87,231.365 1952.44,232.57 1953.01,232.714 1953.58,233.744 1954.15,232.672 1954.72,232.901 1955.28,232.985 1955.85,230.874 1956.42,230.913 1956.99,230.92 1957.56,230.179 1958.13,231.292 1958.69,235.666 1959.26,233.432 1959.83,233.476 1960.4,231.345 1960.97,233.717 1961.54,233.614 1962.1,233.627 1962.67,233.636 1963.24,233.776 1963.81,232.837 1964.38,232.695 1964.95,231.366 1965.51,232.41 1966.08,232.321 1966.65,233.537 1967.22,232.281 1967.79,231.277 1968.36,230.395 1968.92,233.899 1969.49,233.787 1970.06,234.919 1970.63,234.784 1971.2,234.551 1971.77,230.382 1972.34,232.851 1972.9,232.836 1973.47,233.885 1974.04,233.58 1974.61,233.497 1975.18,232.281 1975.75,232.52 1976.31,232.795 1976.88,232.66 1977.45,230.433 1978.02,231.441 1978.59,231.644 1979.16,233.822 1979.72,231.521 1980.29,232.665 1980.86,229.702 1981.43,227.805 1982,231.016 1982.57,235.391 1983.13,235.048 1983.7,237.883 1984.27,236.376 1984.84,235.845 1985.41,235.639 1985.98,236.383 1986.54,235.965 1987.11,235.782 1987.68,235.579 1988.25,236.223 1988.82,234.797 1989.39,233.677 1989.95,234.548 1990.52,235.621 1991.09,235.351 1991.66,236.315 1992.23,236.142 1992.8,234.846 1993.36,233.735 1993.93,235.811 1994.5,237.501 1995.07,237.042 1995.64,235.711 1996.21,235.085 1996.77,235.506 1997.34,234.983 1997.91,234.849 1998.48,234.579 1999.05,232.366 1999.62,233.385 2000.18,234.383 2000.75,234.339 2001.32,235.23 2001.89,233.06 2002.46,234.163 2003.03,232.954 2003.59,232.679 2004.16,232.678 2004.73,234.506 2005.3,235.18 2005.87,234.918 2006.44,233.874 2007,232.531 2007.57,230.023 2008.14,229.952 2008.71,230.946 2009.28,229.679 2009.85,230.829 2010.41,233.083 2010.98,231.932 2011.55,228.735 2012.12,229.841 2012.69,229.824 2013.26,228.745 2013.82,230.175 2014.39,229.195 2014.96,229.118 2015.53,230.128 2016.1,227.09 2016.67,228.535 2017.23,228.567 2017.8,227.685 2018.37,226.829 2018.94,229.079 2019.51,229.112 2020.08,228.172 2020.64,229.505 2021.21,230.523 2021.78,231.825 2022.35,231.834 2022.92,235.005 2023.49,236.828 2024.05,235.297 2024.62,235.197 2025.19,234.875 2025.76,236.46 2026.33,238.145 2026.9,236.723 2027.46,234.248 2028.03,230.896 2028.6,233.123 2029.17,237.078 2029.74,236.6 2030.31,236.162 2030.87,237.673 2031.44,235.506 2032.01,237.137 2032.58,237.603 2033.15,236.163 2033.72,237.701 2034.28,236.179 2034.85,235.843 2035.42,235.544 2035.99,234.252 2036.56,235.04 2037.13,234.678 2037.69,234.073 2038.26,232.783 2038.83,231.565 2039.4,231.304 2039.97,233.172 2040.54,232.98 2041.11,231.565 2041.67,232.404 2042.24,232.013 2042.81,230.749 2043.38,230.549 2043.95,227.177 2044.52,226.32 2045.08,226.756 2045.65,227.077 2046.22,230.398 2046.79,230.587 2047.36,228.39 2047.93,227.522 2048.49,227.665 2049.06,228.02 2049.63,228.098 2050.2,227.146 2050.77,229.508 2051.34,230.764 2051.9,231.731 2052.47,231.585 2053.04,231.542 2053.61,230.356 2054.18,226.468 2054.75,226.815 2055.31,226.182 2055.88,226.67 2056.45,228.142 2057.02,227.475 2057.59,228.645 2058.16,230.702 2058.72,231.859 2059.29,234.02 2059.86,231.831 2060.43,233.745 2061,233.636 2061.57,232.222 2062.13,232.15 2062.7,231.122 2063.27,230.108 2063.84,232.121 2064.41,235.005 2064.98,233.641 2065.54,232.393 2066.11,232.335 2066.68,233.169 2067.25,232.984 2067.82,232.737 2068.39,233.468 2068.95,234.143 2069.52,233.935 2070.09,231.7 2070.66,230.672 2071.23,230.419 2071.8,231.401 2072.36,229.893 2072.93,228.958 2073.5,229.938 2074.07,229.847 2074.64,232.001 2075.21,232.834 2075.77,231.633 2076.34,231.658 2076.91,230.539 2077.48,231.541 2078.05,231.568 2078.62,232.504 2079.18,229.339 2079.75,230.464 2080.32,229.658 2080.89,229.906 2081.46,231.049 2082.03,232.113 2082.59,233.249 2083.16,233.101 2083.73,230.827 2084.3,229.926 2084.87,229.632 2085.44,229.681 2086,231.861 2086.57,231.742 2087.14,231.85 2087.71,228.689 2088.28,227.874 2088.85,228.002 2089.41,226.03 2089.98,227.261 2090.55,224.455 2091.12,224.845 2091.69,225.415 2092.26,226.786 2092.82,228.056 2093.39,226.391 2093.96,226.703 2094.53,227.117 2095.1,228.625 2095.67,228.824 2096.23,230.331 2096.8,231.501 2097.37,232.699 2097.94,232.511 2098.51,233.495 2099.08,232.412 2099.64,230.384 2100.21,230.638 2100.78,232.724 2101.35,232.774 2101.92,233.607 2102.49,232.406 2103.05,231.296 2103.62,229.025 2104.19,229.369 2104.76,226.287 2105.33,227.785 2105.9,229.052 2106.46,229.482 2107.03,229.73 2107.6,231.123 2108.17,229.171 2108.74,229.248 2109.31,229.56 2109.87,229.897 2110.44,227.934 2111.01,227.287 2111.58,225.849 2112.15,228.483 2112.72,227.575 2113.29,226.833 2113.85,227.171 2114.42,226.602 2114.99,227.149 2115.56,228.884 2116.13,229.26 2116.7,230.729 2117.26,230.929 2117.83,233.027 2118.4,234.192 2118.97,234.148 2119.54,235.201 2120.11,235.987 2120.67,236.903 2121.24,234.46 2121.81,233.39 2122.38,235.625 2122.95,237.718 2123.52,241.64 2124.08,244.377 2124.65,243.585 2125.22,242.634 2125.79,242.014 2126.36,241.462 2126.93,239.785 2127.49,238.354 2128.06,236.891 2128.63,235.479 2129.2,235.154 2129.77,233.995 2130.34,233.927 2130.9,235.72 2131.47,234.191 2132.04,234.208 2132.61,236.111 2133.18,235.972 2133.75,235.484 2134.31,235.054 2134.88,233.845 2135.45,233.561 2136.02,234.483 2136.59,235.368 2137.16,234.038 2137.72,231.701 2138.29,231.61 2138.86,229.5 2139.43,228.501 2140,229.514 2140.57,231.727 2141.13,231.522 2141.7,231.495 2142.27,231.495 2142.84,230.363 2143.41,232.372 2143.98,232.223 2144.54,233.06 2145.11,232.784 2145.68,233.737 2146.25,234.726 2146.82,233.15 2147.39,230.966 2147.95,230.993 2148.52,231.073 2149.09,229.181 2149.66,229.323 2150.23,229.575 2150.8,228.676 2151.36,229.808 2151.93,226.823 2152.5,228.172 2153.07,228.52 2153.64,229.793 2154.21,229.939 2154.77,231.074 2155.34,231.205 2155.91,231.041 2156.48,231.086 2157.05,230.236 2157.62,232.351 2158.18,230.338 2158.75,230.187 2159.32,230.234 2159.89,230.313 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.024\n  with uncertainty of ± 0.0021914082048223498\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0151 ± (0.00345517, 0.00361909) (MC)\n  95% confidence interval: [-4.02211, -4.008] (MC)\n  linear error propagation: -4.01548 ± 0.00361528\n  |δ_y| = |0.00246838| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015096174125968, val_l = 0.007012230932327945, val_u = 0.007096552264785672)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.37 2211.02,1146.37 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,984.404 2211.02,984.404 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,822.441 2211.02,822.441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,660.477 2211.02,660.477 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,498.514 2211.02,498.514 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,336.551 2211.02,336.551 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.37 365.751,1146.37 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,984.404 365.751,984.404 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,822.441 365.751,822.441 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,660.477 365.751,660.477 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,498.514 365.751,498.514 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,336.551 365.751,336.551 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M298.909 1132.17 Q295.298 1132.17 293.469 1135.73 Q291.664 1139.27 291.664 1146.4 Q291.664 1153.51 293.469 1157.07 Q295.298 1160.61 298.909 1160.61 Q302.543 1160.61 304.349 1157.07 Q306.177 1153.51 306.177 1146.4 Q306.177 1139.27 304.349 1135.73 Q302.543 1132.17 298.909 1132.17 M298.909 1128.46 Q304.719 1128.46 307.775 1133.07 Q310.853 1137.65 310.853 1146.4 Q310.853 1155.13 307.775 1159.74 Q304.719 1164.32 298.909 1164.32 Q293.099 1164.32 290.02 1159.74 Q286.964 1155.13 286.964 1146.4 Q286.964 1137.65 290.02 1133.07 Q293.099 1128.46 298.909 1128.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M259.557 997.749 L267.196 997.749 L267.196 971.383 L258.886 973.05 L258.886 968.791 L267.15 967.124 L271.826 967.124 L271.826 997.749 L279.465 997.749 L279.465 1001.68 L259.557 1001.68 L259.557 997.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 970.203 Q295.298 970.203 293.469 973.767 Q291.664 977.309 291.664 984.439 Q291.664 991.545 293.469 995.11 Q295.298 998.652 298.909 998.652 Q302.543 998.652 304.349 995.11 Q306.177 991.545 306.177 984.439 Q306.177 977.309 304.349 973.767 Q302.543 970.203 298.909 970.203 M298.909 966.499 Q304.719 966.499 307.775 971.105 Q310.853 975.689 310.853 984.439 Q310.853 993.166 307.775 997.772 Q304.719 1002.36 298.909 1002.36 Q293.099 1002.36 290.02 997.772 Q286.964 993.166 286.964 984.439 Q286.964 975.689 290.02 971.105 Q293.099 966.499 298.909 966.499 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M262.775 835.786 L279.094 835.786 L279.094 839.721 L257.15 839.721 L257.15 835.786 Q259.812 833.031 264.395 828.401 Q269.002 823.749 270.182 822.406 Q272.428 819.883 273.307 818.147 Q274.21 816.387 274.21 814.698 Q274.21 811.943 272.266 810.207 Q270.344 808.471 267.242 808.471 Q265.043 808.471 262.59 809.235 Q260.159 809.999 257.381 811.55 L257.381 806.827 Q260.205 805.693 262.659 805.114 Q265.113 804.536 267.15 804.536 Q272.52 804.536 275.715 807.221 Q278.909 809.906 278.909 814.397 Q278.909 816.526 278.099 818.448 Q277.312 820.346 275.205 822.938 Q274.627 823.61 271.525 826.827 Q268.423 830.022 262.775 835.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 808.239 Q295.298 808.239 293.469 811.804 Q291.664 815.346 291.664 822.475 Q291.664 829.582 293.469 833.147 Q295.298 836.688 298.909 836.688 Q302.543 836.688 304.349 833.147 Q306.177 829.582 306.177 822.475 Q306.177 815.346 304.349 811.804 Q302.543 808.239 298.909 808.239 M298.909 804.536 Q304.719 804.536 307.775 809.142 Q310.853 813.725 310.853 822.475 Q310.853 831.202 307.775 835.809 Q304.719 840.392 298.909 840.392 Q293.099 840.392 290.02 835.809 Q286.964 831.202 286.964 822.475 Q286.964 813.725 290.02 809.142 Q293.099 804.536 298.909 804.536 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M272.914 659.123 Q276.27 659.841 278.145 662.109 Q280.043 664.378 280.043 667.711 Q280.043 672.827 276.525 675.628 Q273.006 678.429 266.525 678.429 Q264.349 678.429 262.034 677.989 Q259.742 677.572 257.289 676.716 L257.289 672.202 Q259.233 673.336 261.548 673.915 Q263.863 674.493 266.386 674.493 Q270.784 674.493 273.076 672.757 Q275.39 671.021 275.39 667.711 Q275.39 664.656 273.238 662.943 Q271.108 661.207 267.289 661.207 L263.261 661.207 L263.261 657.364 L267.474 657.364 Q270.923 657.364 272.752 655.998 Q274.58 654.609 274.58 652.017 Q274.58 649.355 272.682 647.943 Q270.807 646.508 267.289 646.508 Q265.367 646.508 263.168 646.924 Q260.969 647.341 258.33 648.22 L258.33 644.054 Q260.992 643.313 263.307 642.943 Q265.645 642.572 267.705 642.572 Q273.029 642.572 276.131 645.003 Q279.233 647.41 279.233 651.531 Q279.233 654.401 277.59 656.392 Q275.946 658.359 272.914 659.123 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 646.276 Q295.298 646.276 293.469 649.841 Q291.664 653.382 291.664 660.512 Q291.664 667.619 293.469 671.183 Q295.298 674.725 298.909 674.725 Q302.543 674.725 304.349 671.183 Q306.177 667.619 306.177 660.512 Q306.177 653.382 304.349 649.841 Q302.543 646.276 298.909 646.276 M298.909 642.572 Q304.719 642.572 307.775 647.179 Q310.853 651.762 310.853 660.512 Q310.853 669.239 307.775 673.845 Q304.719 678.429 298.909 678.429 Q293.099 678.429 290.02 673.845 Q286.964 669.239 286.964 660.512 Q286.964 651.762 290.02 647.179 Q293.099 642.572 298.909 642.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M271.594 485.308 L259.789 503.757 L271.594 503.757 L271.594 485.308 M270.367 481.234 L276.247 481.234 L276.247 503.757 L281.177 503.757 L281.177 507.646 L276.247 507.646 L276.247 515.794 L271.594 515.794 L271.594 507.646 L255.992 507.646 L255.992 503.132 L270.367 481.234 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 484.313 Q295.298 484.313 293.469 487.878 Q291.664 491.419 291.664 498.549 Q291.664 505.655 293.469 509.22 Q295.298 512.762 298.909 512.762 Q302.543 512.762 304.349 509.22 Q306.177 505.655 306.177 498.549 Q306.177 491.419 304.349 487.878 Q302.543 484.313 298.909 484.313 M298.909 480.609 Q304.719 480.609 307.775 485.215 Q310.853 489.799 310.853 498.549 Q310.853 507.276 307.775 511.882 Q304.719 516.465 298.909 516.465 Q293.099 516.465 290.02 511.882 Q286.964 507.276 286.964 498.549 Q286.964 489.799 290.02 485.215 Q293.099 480.609 298.909 480.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M258.793 319.271 L277.15 319.271 L277.15 323.206 L263.076 323.206 L263.076 331.678 Q264.094 331.331 265.113 331.169 Q266.131 330.984 267.15 330.984 Q272.937 330.984 276.316 334.155 Q279.696 337.326 279.696 342.743 Q279.696 348.321 276.224 351.423 Q272.752 354.502 266.432 354.502 Q264.256 354.502 261.988 354.132 Q259.742 353.761 257.335 353.021 L257.335 348.321 Q259.418 349.456 261.641 350.011 Q263.863 350.567 266.34 350.567 Q270.344 350.567 272.682 348.46 Q275.02 346.354 275.02 342.743 Q275.02 339.132 272.682 337.025 Q270.344 334.919 266.34 334.919 Q264.465 334.919 262.59 335.335 Q260.738 335.752 258.793 336.632 L258.793 319.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 322.349 Q295.298 322.349 293.469 325.914 Q291.664 329.456 291.664 336.585 Q291.664 343.692 293.469 347.257 Q295.298 350.798 298.909 350.798 Q302.543 350.798 304.349 347.257 Q306.177 343.692 306.177 336.585 Q306.177 329.456 304.349 325.914 Q302.543 322.349 298.909 322.349 M298.909 318.646 Q304.719 318.646 307.775 323.252 Q310.853 327.835 310.853 336.585 Q310.853 345.312 307.775 349.919 Q304.719 354.502 298.909 354.502 Q293.099 354.502 290.02 349.919 Q286.964 345.312 286.964 336.585 Q286.964 327.835 290.02 323.252 Q293.099 318.646 298.909 318.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1027.03 400.199,917.392 400.786,816.797 401.372,724.635 401.958,640.345 402.545,563.407 403.131,493.341 403.718,429.699 404.304,474.46 404.891,417.545 405.477,366.145 406.063,319.904 406.65,278.489 407.236,242.96 407.823,281.674 408.409,250.769 408.995,222.713 409.582,311.063 410.168,283.759 410.755,261.548 411.341,286.023 411.927,267.324 412.514,253.142 413.1,239.855 413.687,229.042 414.273,219.895 414.86,244.125 415.446,269.025 416.032,290.382 416.619,286.452 417.205,284.538 417.792,284.713 418.378,306.154 418.964,307.865 419.551,311.334 420.137,332.242 420.724,352.098 421.31,357.673 421.896,378.719 422.483,384.124 423.069,391.009 423.656,446.94 424.242,465.775 424.829,483.614 425.415,491.829 426.001,508.863 426.588,518.055 427.174,535.981 427.761,544.554 428.347,570.073 428.933,578.454 429.52,595.853 430.106,611.681 430.693,621.089 431.279,655.187 431.865,663.787 432.452,672.493 433.038,681.312 433.625,695.69 434.211,704.967 434.798,734.179 435.384,743.001 435.97,751.699 436.557,769.434 437.143,790.337 437.73,806.152 438.316,813.433 438.902,821.1 439.489,828.333 440.075,839.694 440.662,851.129 441.248,861.425 441.835,872.023 442.421,882.062 443.007,895.036 443.594,904.503 444.18,916.401 444.767,925.309 445.353,936.919 445.939,945.382 446.526,956.647 447.112,962.142 447.699,972.7 448.285,977.415 448.871,981.888 449.458,984.334 450.044,994.291 450.631,1001.77 451.217,1013.71 451.804,1018.02 452.39,1029.62 452.976,1038.61 453.563,1044.84 454.149,1053.18 454.736,1057.16 455.322,1062.86 455.908,1070.62 456.495,1078.18 457.081,1085.7 457.668,1092.87 458.254,1098.33 458.84,1099.26 459.427,1102.28 460.013,1107.23 460.6,1112.17 461.186,1120.83 461.773,1124.73 462.359,1132.85 462.945,1140.72 463.532,1144.27 464.118,1153.36 464.705,1156.99 465.291,1159.87 465.877,1164.89 466.464,1166.53 467.05,1169.6 467.637,1170.91 468.223,1172.16 468.809,1174.98 469.396,1175.87 469.982,1175.66 470.569,1177.08 471.155,1180.48 471.742,1185.07 472.328,1191.15 472.914,1197.04 473.501,1202.62 474.087,1205.95 474.674,1206.48 475.26,1208.02 475.846,1209.61 476.433,1211.32 477.019,1213.05 477.606,1214.79 478.192,1214.67 478.778,1214.62 479.365,1214.85 479.951,1219.56 480.538,1224.34 481.124,1226.89 481.711,1224.94 482.297,1227.84 482.883,1228.98 483.47,1232.94 484.056,1233.99 484.643,1232 485.229,1231.49 485.815,1232.55 486.402,1233.44 486.988,1232.72 487.575,1235.04 488.161,1234.44 488.748,1235.36 489.334,1234.91 489.92,1234.4 490.507,1233.98 491.093,1236.61 491.68,1236.09 492.266,1237.01 492.852,1238.04 493.439,1239.08 494.025,1239.91 494.612,1239.33 495.198,1238.5 495.784,1239.47 496.371,1237.21 496.957,1240.92 497.544,1237.16 498.13,1236.65 498.717,1237.47 499.303,1238.37 499.889,1239.34 500.476,1238.99 501.062,1239.84 501.649,1243.82 502.235,1241.85 502.821,1241.42 503.408,1240.8 503.994,1240.56 504.581,1244.24 505.167,1242.31 505.753,1241.98 506.34,1241.38 506.926,1242.23 507.513,1242.86 508.099,1244.98 508.686,1245.91 509.272,1245.6 509.858,1243.33 510.445,1242.69 511.031,1243.86 511.618,1243.26 512.204,1242.97 512.79,1236.95 513.377,1235.54 513.963,1236.72 514.55,1236.58 515.136,1236.31 515.722,1238.79 516.309,1238.5 516.895,1238.15 517.482,1241.99 518.068,1242.77 518.655,1242.25 519.241,1240.4 519.827,1245.44 520.414,1243.41 521,1242.61 521.587,1239.35 522.173,1239.16 522.759,1238.7 523.346,1236.88 523.932,1239.21 524.519,1240.36 525.105,1241.25 525.691,1240.32 526.278,1240.16 526.864,1240.96 527.451,1241.74 528.037,1241.22 528.624,1243.46 529.21,1238.78 529.796,1239.98 530.383,1240.9 530.969,1241.56 531.556,1242.38 532.142,1241.8 532.728,1244.09 533.315,1243.29 533.901,1244.24 534.488,1243.59 535.074,1244.08 535.661,1246.15 536.247,1245.63 536.833,1246.31 537.42,1246.9 538.006,1246.25 538.593,1250.53 539.179,1248.41 539.765,1244.63 540.352,1241.41 540.938,1242.37 541.525,1240.23 542.111,1239.6 542.697,1239.14 543.284,1240.31 543.87,1237.12 544.457,1237.99 545.043,1234.98 545.63,1234.45 546.216,1234.08 546.802,1239.34 547.389,1239.09 547.975,1238.93 548.562,1238.61 549.148,1238.29 549.734,1241.85 550.321,1241.57 550.907,1237.08 551.494,1229.81 552.08,1232.48 552.666,1234.99 553.253,1237.4 553.839,1234.21 554.426,1235.21 555.012,1237.36 555.599,1237.16 556.185,1238.02 556.771,1238.78 557.358,1242.02 557.944,1242.52 558.531,1240.73 559.117,1237.29 559.703,1236.94 560.29,1237.71 560.876,1237.3 561.463,1238.35 562.049,1238.86 562.635,1238.27 563.222,1239.13 563.808,1238.8 564.395,1237.12 564.981,1240.35 565.568,1241.23 566.154,1239.2 566.74,1238.56 567.327,1239.39 567.913,1241.56 568.5,1240.48 569.086,1239.74 569.672,1236.59 570.259,1236.1 570.845,1236.98 571.432,1237.9 572.018,1240.08 572.605,1236.7 573.191,1237.74 573.777,1236.96 574.364,1235.17 574.95,1236.03 575.537,1236.88 576.123,1240.36 576.709,1243.75 577.296,1243.98 577.882,1244.14 578.469,1244.48 579.055,1244.87 579.641,1245.22 580.228,1245.35 580.814,1242.73 581.401,1241.78 581.987,1241.1 582.574,1240.12 583.16,1241.84 583.746,1242.12 584.333,1243.85 584.919,1242.97 585.506,1241.89 586.092,1240.94 586.678,1238.8 587.265,1239.42 587.851,1238.68 588.438,1235.35 589.024,1234.55 589.61,1235.43 590.197,1236.35 590.783,1234.28 591.37,1232.44 591.956,1233.24 592.543,1230.22 593.129,1231.1 593.715,1232.22 594.302,1230.24 594.888,1232.37 595.475,1230.7 596.061,1232.9 596.647,1233.74 597.234,1236 597.82,1233.85 598.407,1233.39 598.993,1231.38 599.579,1232.32 600.166,1230.65 600.752,1228.97 601.339,1228.61 601.925,1231 602.512,1229.25 603.098,1227.6 603.684,1231.15 604.271,1232.2 604.857,1231.58 605.444,1231.22 606.03,1227.9 606.616,1226.21 607.203,1225.91 607.789,1225.88 608.376,1227.3 608.962,1228.46 609.548,1227.87 610.135,1228.82 610.721,1227.25 611.308,1226.89 611.894,1229.37 612.481,1227.84 613.067,1230.34 613.653,1228.59 614.24,1231.18 614.826,1230.66 615.413,1232.71 615.999,1231 616.585,1230.71 617.172,1227.61 617.758,1228.82 618.345,1228.59 618.931,1226.86 619.518,1225.32 620.104,1225.36 620.69,1223.93 621.277,1226.5 621.863,1228.84 622.45,1229.94 623.036,1229.5 623.622,1229.08 624.209,1228.77 624.795,1227.01 625.382,1227.84 625.968,1227.43 626.554,1229.89 627.141,1229.52 627.727,1229.09 628.314,1226.18 628.9,1225.92 629.487,1230.9 630.073,1231.54 630.659,1232.03 631.246,1230.1 631.832,1230.95 632.419,1230.01 633.005,1229.48 633.591,1231.7 634.178,1231 634.764,1230.45 635.351,1229.82 635.937,1229.24 636.523,1227.2 637.11,1228.5 637.696,1229.55 638.283,1230.24 638.869,1228.36 639.456,1226.67 640.042,1227.68 640.628,1227.29 641.215,1229.4 641.801,1228.76 642.388,1230.86 642.974,1229.15 643.56,1228.73 644.147,1226.96 644.733,1228.06 645.32,1226.32 645.906,1226.38 646.492,1223.28 647.079,1221.6 647.665,1221.35 648.252,1221.36 648.838,1221.13 649.425,1217.16 650.011,1217.09 650.597,1218.4 651.184,1217.15 651.77,1218.51 652.357,1221.27 652.943,1226.63 653.529,1225 654.116,1227.22 654.702,1226.98 655.289,1226.43 655.875,1225.86 656.462,1224.27 657.048,1224.04 657.634,1224.26 658.221,1224.93 658.807,1224.53 659.394,1224.22 659.98,1228.04 660.566,1227.71 661.153,1228.56 661.739,1226.72 662.326,1227.27 662.912,1225.69 663.498,1223.96 664.085,1220.98 664.671,1218.28 665.258,1215.38 665.844,1215.49 666.431,1215.76 667.017,1213.36 667.603,1212.12 668.19,1211.2 668.776,1211.46 669.363,1210.3 669.949,1207.96 670.535,1208.35 671.122,1210.34 671.708,1210.89 672.295,1213.89 672.881,1212.79 673.467,1211.9 674.054,1210.56 674.64,1209.74 675.227,1208.79 675.813,1208 676.4,1208.47 676.986,1206.5 677.572,1208.2 678.159,1209.99 678.745,1210.35 679.332,1212.12 679.918,1215.32 680.504,1218.2 681.091,1216.97 681.677,1218.46 682.264,1222.66 682.85,1222.5 683.436,1222.33 684.023,1222.12 684.609,1223.21 685.196,1220.24 685.782,1219.98 686.369,1219.95 686.955,1221.07 687.541,1223.42 688.128,1223.28 688.714,1221.69 689.301,1219.95 689.887,1218.46 690.473,1221 691.06,1223.89 691.646,1224.84 692.233,1224.68 692.819,1226.96 693.405,1225.18 693.992,1224.56 694.578,1224.38 695.165,1225.3 695.751,1226 696.338,1225.75 696.924,1226.46 697.51,1224.64 698.097,1224.38 698.683,1223.94 699.27,1223.59 699.856,1221.89 700.442,1222.76 701.029,1225.37 701.615,1226.46 702.202,1223.36 702.788,1223.36 703.375,1224.39 703.961,1226.77 704.547,1228.9 705.134,1225.78 705.72,1225.2 706.307,1223.65 706.893,1223.41 707.479,1221.86 708.066,1221.96 708.652,1221.43 709.239,1222.73 709.825,1221.17 710.411,1218.47 710.998,1218.34 711.584,1220.86 712.171,1221.83 712.757,1221.49 713.344,1222.44 713.93,1220.96 714.516,1218.12 715.103,1216.57 715.689,1216.71 716.276,1214.05 716.862,1211.45 717.448,1211.81 718.035,1211.85 718.621,1210.36 719.208,1211.73 719.794,1207.85 720.38,1208.19 720.967,1206.12 721.553,1205.6 722.14,1206.01 722.726,1206.27 723.313,1205.76 723.899,1204.72 724.485,1207.9 725.072,1208.22 725.658,1210.08 726.245,1211.43 726.831,1209.03 727.417,1214.58 728.004,1214.38 728.59,1212 729.177,1212.17 729.763,1212.29 730.349,1212.37 730.936,1210.97 731.522,1211.07 732.109,1213.81 732.695,1217.89 733.282,1217.78 733.868,1213.72 734.454,1216.5 735.041,1213.96 735.627,1216.66 736.214,1216.65 736.8,1220.6 737.386,1220.61 737.973,1219.07 738.559,1217.68 739.146,1215.01 739.732,1213.96 740.318,1213.97 740.905,1213.98 741.491,1214.03 742.078,1216.66 742.664,1217.18 743.251,1217.18 743.837,1222.26 744.423,1219.34 745.01,1221.95 745.596,1224.16 746.183,1223.78 746.769,1220.9 747.355,1219.6 747.942,1217.97 748.528,1215.62 749.115,1216.83 749.701,1214.14 750.288,1215.68 750.874,1214.37 751.46,1215.85 752.047,1215.6 752.633,1215.63 753.22,1216.8 753.806,1216.83 754.392,1215.42 754.979,1215.27 755.565,1215.18 756.152,1215.33 756.738,1213.86 757.324,1212.55 757.911,1213.91 758.497,1214.28 759.084,1214.33 759.67,1215.69 760.257,1215.7 760.843,1218.5 761.429,1218.62 762.016,1218.52 762.602,1218.44 763.189,1216.92 763.775,1212.8 764.361,1214.12 764.948,1214.18 765.534,1211.74 766.121,1210.71 766.707,1213.4 767.293,1214.68 767.88,1217.19 768.466,1220.01 769.053,1219.61 769.639,1218.19 770.226,1216.57 770.812,1215.26 771.398,1216.38 771.985,1216.44 772.571,1215.18 773.158,1216.57 773.744,1217.73 774.33,1216.48 774.917,1216.13 775.503,1222.63 776.09,1222.34 776.676,1221.88 777.262,1222.88 777.849,1217.97 778.435,1218.88 779.022,1217.6 779.608,1218.81 780.195,1215.92 780.781,1217.55 781.367,1217.44 781.954,1217.13 782.54,1217.12 783.127,1216.82 783.713,1218 784.299,1218.1 784.886,1216.54 785.472,1216.23 786.059,1218.62 786.645,1218.53 787.232,1215.8 787.818,1217.03 788.404,1218.38 788.991,1220.88 789.577,1220.61 790.164,1219 790.75,1218.95 791.336,1216.03 791.923,1215.92 792.509,1218.61 793.096,1219.65 793.682,1218.03 794.268,1217.76 794.855,1220.21 795.441,1220.03 796.028,1218.39 796.614,1213.27 797.201,1212.1 797.787,1214.67 798.373,1216.18 798.96,1215.86 799.546,1215.7 800.133,1214.47 800.719,1215.46 801.305,1214 801.892,1215.34 802.478,1213.87 803.065,1213.76 803.651,1214.95 804.237,1213.52 804.824,1212.64 805.41,1214.12 805.997,1210.27 806.583,1210.36 807.17,1212 807.756,1208.18 808.342,1207.31 808.929,1209.16 809.515,1208.41 810.102,1214.11 810.688,1214.21 811.274,1211.53 811.861,1212.98 812.447,1210.22 813.034,1209.17 813.62,1209.54 814.206,1209.95 814.793,1210.26 815.379,1213.08 815.966,1214.39 816.552,1212.84 817.139,1211.4 817.725,1212.82 818.311,1213.14 818.898,1213.33 819.484,1211.88 820.071,1213.39 820.657,1212.27 821.243,1213.95 821.83,1212.69 822.416,1211.42 823.003,1212.81 823.589,1213.98 824.175,1213.99 824.762,1213.88 825.348,1215.4 825.935,1215.21 826.521,1217.61 827.108,1216.15 827.694,1217.76 828.28,1220.01 828.867,1219.49 829.453,1217.84 830.04,1216.2 830.626,1217.49 831.212,1216.26 831.799,1217.59 832.385,1213.43 832.972,1212.04 833.558,1212.07 834.145,1213.48 834.731,1213.39 835.317,1218.59 835.904,1218.27 836.49,1220.71 837.077,1220.34 837.663,1219.91 838.249,1219.5 838.836,1219.02 839.422,1219.83 840.009,1219.61 840.595,1220.5 841.181,1217.53 841.768,1218.62 842.354,1218.64 842.941,1219.67 843.527,1216.68 844.114,1218.01 844.7,1215.16 845.286,1215.1 845.873,1212.49 846.459,1212.18 847.046,1212.26 847.632,1212.34 848.218,1211.01 848.805,1212.5 849.391,1212.22 849.978,1216.19 850.564,1216.1 851.15,1215.84 851.737,1215.8 852.323,1218.37 852.91,1215.45 853.496,1212.78 854.083,1214.43 854.669,1214.24 855.255,1211.64 855.842,1211.9 856.428,1212.29 857.015,1213.7 857.601,1216.09 858.187,1214.8 858.774,1216.36 859.36,1216.49 859.947,1215.02 860.533,1217.59 861.119,1217.32 861.706,1219.5 862.292,1222.89 862.879,1222.29 863.465,1220.42 864.052,1220.14 864.638,1219.74 865.224,1219.18 865.811,1218.73 866.397,1213.16 866.984,1209.16 867.57,1209.28 868.156,1209.24 868.743,1209.26 869.329,1208.12 869.916,1209.74 870.502,1209.98 871.089,1212.53 871.675,1211.23 872.261,1210.05 872.848,1210.35 873.434,1207.51 874.021,1205.22 874.607,1205.68 875.193,1207.44 875.78,1207.45 876.366,1209.04 876.953,1210.7 877.539,1210.67 878.125,1210.81 878.712,1210.79 879.298,1210.85 879.885,1212.31 880.471,1211.15 881.058,1212.7 881.644,1214.02 882.23,1212.63 882.817,1212.63 883.403,1211.44 883.99,1208.8 884.576,1208.01 885.162,1205.64 885.749,1210.09 886.335,1210.2 886.922,1207.47 887.508,1207.59 888.094,1207.75 888.681,1207.96 889.267,1210.86 889.854,1212.23 890.44,1211.11 891.027,1212.57 891.613,1212.7 892.199,1209.04 892.786,1208.97 893.372,1210.66 893.959,1210.95 894.545,1210.98 895.131,1211.23 895.718,1208.67 896.304,1210.03 896.891,1211.49 897.477,1211.75 898.063,1211 898.65,1209.75 899.236,1211.39 899.823,1211.61 900.409,1213.16 900.996,1213.04 901.582,1213.21 902.168,1213.1 902.755,1213.18 903.341,1214.46 903.928,1214.31 904.514,1215.6 905.1,1219.48 905.687,1215.23 906.273,1215.16 906.86,1213.74 907.446,1216.25 908.032,1216.07 908.619,1212 909.205,1213.48 909.792,1214.88 910.378,1216.21 910.965,1217.25 911.551,1217.1 912.137,1216.71 912.724,1216.48 913.31,1217.64 913.897,1214.51 914.483,1218.12 915.069,1216.61 915.656,1217.78 916.242,1216.53 916.829,1217.52 917.415,1217.29 918.002,1216.97 918.588,1216.54 919.174,1213.76 919.761,1214.87 920.347,1216.28 920.934,1221.34 921.52,1221.05 922.106,1219.56 922.693,1216.45 923.279,1219.99 923.866,1218.25 924.452,1216.62 925.038,1216.38 925.625,1216.27 926.211,1216.11 926.798,1217.27 927.384,1214.29 927.971,1214.39 928.557,1214.65 929.143,1213.21 929.73,1212.02 930.316,1213.41 930.903,1214.58 931.489,1214.43 932.075,1214.35 932.662,1212.68 933.248,1213.97 933.835,1213.55 934.421,1213.43 935.007,1211.98 935.594,1212.04 936.18,1210.92 936.767,1210.99 937.353,1208.81 937.94,1209.11 938.526,1207.9 939.112,1209.72 939.699,1208.56 940.285,1208.75 940.872,1210.45 941.458,1210.39 942.044,1211.82 942.631,1214.21 943.217,1213.93 943.804,1213.84 944.39,1213.98 944.976,1213.8 945.563,1215.09 946.149,1212.29 946.736,1210.71 947.322,1214.69 947.909,1214.6 948.495,1215.72 949.081,1212.96 949.668,1215.44 950.254,1215.1 950.841,1217.56 951.427,1217.25 952.013,1215.51 952.6,1212.94 953.186,1211.4 953.773,1208.87 954.359,1206.35 954.945,1206.73 955.532,1209.8 956.118,1208.33 956.705,1210.13 957.291,1214.18 957.878,1213.84 958.464,1215.06 959.05,1216.26 959.637,1217.23 960.223,1218.28 960.81,1220.56 961.396,1217.69 961.982,1217.59 962.569,1214.74 963.155,1213.34 963.742,1211.79 964.328,1213.02 964.915,1212.9 965.501,1216.64 966.087,1215.07 966.674,1215.17 967.26,1216.37 967.847,1217.55 968.433,1217.34 969.019,1218.29 969.606,1219.4 970.192,1220.31 970.779,1219.85 971.365,1219.6 971.951,1219.22 972.538,1216.31 973.124,1218.92 973.711,1218.39 974.297,1219.57 974.884,1218.02 975.47,1217.79 976.056,1217.61 976.643,1217.41 977.229,1217.12 977.816,1216.86 978.402,1217.89 978.988,1218.85 979.575,1218.82 980.161,1217.17 980.748,1216.93 981.334,1217.99 981.92,1217.47 982.507,1214.46 983.093,1214.5 983.68,1213.06 984.266,1210.27 984.853,1210.46 985.439,1211.96 986.025,1213.22 986.612,1214.35 987.198,1213.14 987.785,1211.71 988.371,1209.1 988.957,1208.02 989.544,1206.95 990.13,1207.06 990.717,1204.61 991.303,1204.7 991.889,1207.62 992.476,1210.48 993.062,1209.21 993.649,1208.25 994.235,1209.79 994.822,1212.43 995.408,1211.05 995.994,1209.93 996.581,1214.26 997.167,1214.54 997.754,1211.59 998.34,1211.69 998.926,1209.25 999.513,1210.49 1000.1,1207.92 1000.69,1209.42 1001.27,1212.29 1001.86,1212.1 1002.44,1213.29 1003.03,1214.64 1003.62,1215.66 1004.2,1215.49 1004.79,1215.08 1005.38,1209.76 1005.96,1207.18 1006.55,1207.62 1007.14,1207.78 1007.72,1209.42 1008.31,1209.65 1008.9,1211.04 1009.48,1213.57 1010.07,1212.15 1010.65,1212.28 1011.24,1215.03 1011.83,1217.47 1012.41,1216.1 1013,1214.69 1013.59,1210.7 1014.17,1213.43 1014.76,1212.02 1015.35,1214.76 1015.93,1210.81 1016.52,1213.47 1017.11,1213.49 1017.69,1215 1018.28,1213.36 1018.86,1211.95 1019.45,1211.83 1020.04,1212.96 1020.62,1212.95 1021.21,1211.56 1021.8,1214.25 1022.38,1218.25 1022.97,1216.37 1023.56,1213.45 1024.14,1214.66 1024.73,1214.62 1025.32,1211.99 1025.9,1211.74 1026.49,1210.46 1027.07,1210.45 1027.66,1210.55 1028.25,1207.99 1028.83,1209.65 1029.42,1209.81 1030.01,1208.7 1030.59,1210.14 1031.18,1210.27 1031.77,1211.76 1032.35,1206.49 1032.94,1205.68 1033.52,1208.51 1034.11,1208.5 1034.7,1208.6 1035.28,1205.89 1035.87,1205.17 1036.46,1206.93 1037.04,1207.52 1037.63,1206.39 1038.22,1205.32 1038.8,1205.53 1039.39,1205.7 1039.98,1207.62 1040.56,1210.65 1041.15,1211.89 1041.73,1211.73 1042.32,1211.79 1042.91,1215.96 1043.49,1214.26 1044.08,1212.66 1044.67,1212.38 1045.25,1211.13 1045.84,1209.8 1046.43,1211.37 1047.01,1210.23 1047.6,1211.48 1048.19,1208.66 1048.77,1210 1049.36,1208.78 1049.94,1210.14 1050.53,1212.98 1051.12,1210.3 1051.7,1211.63 1052.29,1211.57 1052.88,1213.07 1053.46,1211.63 1054.05,1211.52 1054.64,1210.4 1055.22,1210.18 1055.81,1206.14 1056.39,1207.44 1056.98,1207.71 1057.57,1209.14 1058.15,1210.82 1058.74,1209.47 1059.33,1213.61 1059.91,1213.49 1060.5,1210.74 1061.09,1211.97 1061.67,1214.59 1062.26,1214.45 1062.85,1215.62 1063.43,1217.9 1064.02,1217.74 1064.6,1218.97 1065.19,1218.54 1065.78,1215.65 1066.36,1215.47 1066.95,1214.17 1067.54,1212.73 1068.12,1211.53 1068.71,1211.87 1069.3,1218.2 1069.88,1219.21 1070.47,1215.12 1071.06,1213.89 1071.64,1213.95 1072.23,1217.95 1072.81,1215.04 1073.4,1213.77 1073.99,1213.79 1074.57,1213.73 1075.16,1213.42 1075.75,1217.57 1076.33,1216.05 1076.92,1217.13 1077.51,1215.54 1078.09,1214.05 1078.68,1217.63 1079.26,1215.77 1079.85,1215.76 1080.44,1218.2 1081.02,1217.59 1081.61,1218.73 1082.2,1218.66 1082.78,1218.6 1083.37,1218.5 1083.96,1217 1084.54,1220.62 1085.13,1220.09 1085.72,1222.03 1086.3,1221.52 1086.89,1220.79 1087.47,1220.21 1088.06,1221.02 1088.65,1221.83 1089.23,1221.05 1089.82,1218.15 1090.41,1214.74 1090.99,1214.64 1091.58,1214.65 1092.17,1215.79 1092.75,1218.22 1093.34,1217.81 1093.93,1217.72 1094.51,1217.52 1095.1,1215.76 1095.68,1217.01 1096.27,1216.65 1096.86,1215.02 1097.44,1213.89 1098.03,1213.76 1098.62,1213.47 1099.2,1216.02 1099.79,1214.21 1100.38,1215.51 1100.96,1215.25 1101.55,1215.15 1102.14,1214.89 1102.72,1212.05 1103.31,1209.5 1103.89,1209.75 1104.48,1208.61 1105.07,1207.39 1105.65,1206.58 1106.24,1209.59 1106.83,1208.51 1107.41,1210.01 1108,1212.83 1108.59,1212.75 1109.17,1212.47 1109.76,1210.99 1110.34,1213.8 1110.93,1215.03 1111.52,1214.87 1112.1,1217.23 1112.69,1216.98 1113.28,1216.71 1113.86,1222.97 1114.45,1223.54 1115.04,1217.52 1115.62,1219.85 1116.21,1219.27 1116.8,1216.07 1117.38,1213.28 1117.97,1213.27 1118.55,1213.18 1119.14,1211.68 1119.73,1212.89 1120.31,1211.65 1120.9,1214.06 1121.49,1212.8 1122.07,1212.73 1122.66,1215.4 1123.25,1216.33 1123.83,1214.64 1124.42,1214.35 1125.01,1214.1 1125.59,1216.36 1126.18,1219.97 1126.76,1216.75 1127.35,1217.71 1127.94,1217.32 1128.52,1217.02 1129.11,1215.27 1129.7,1212.64 1130.28,1211.2 1130.87,1208.89 1131.46,1202.26 1132.04,1201.27 1132.63,1200.81 1133.21,1201.28 1133.8,1204.78 1134.39,1202.68 1134.97,1203.45 1135.56,1205.24 1136.15,1206.76 1136.73,1201.72 1137.32,1203.37 1137.91,1202.43 1138.49,1204.32 1139.08,1204.98 1139.67,1206.76 1140.25,1205.71 1140.84,1204.61 1141.42,1204.74 1142.01,1204.99 1142.6,1206.73 1143.18,1207.18 1143.77,1208.78 1144.36,1211.48 1144.94,1212.77 1145.53,1211.34 1146.12,1213.88 1146.7,1215.14 1147.29,1214.94 1147.88,1216.1 1148.46,1215.83 1149.05,1216.91 1149.63,1216.72 1150.22,1215.25 1150.81,1216.22 1151.39,1215.93 1151.98,1214.39 1152.57,1211.57 1153.15,1210.41 1153.74,1213.16 1154.33,1211.79 1154.91,1209.06 1155.5,1211.84 1156.09,1212.09 1156.67,1210.91 1157.26,1210.99 1157.84,1212.36 1158.43,1212.65 1159.02,1212.68 1159.6,1212.82 1160.19,1211.55 1160.78,1214.08 1161.36,1215.41 1161.95,1213.78 1162.54,1215.11 1163.12,1213.62 1163.71,1212.29 1164.29,1213.55 1164.88,1214.65 1165.47,1221.1 1166.05,1221.74 1166.64,1221.45 1167.23,1221.11 1167.81,1217.77 1168.4,1217.5 1168.99,1213.11 1169.57,1212.65 1170.16,1209.88 1170.75,1209.83 1171.33,1210.04 1171.92,1210.14 1172.5,1211.3 1173.09,1210.78 1173.68,1208.08 1174.26,1209.62 1174.85,1209.75 1175.44,1210.08 1176.02,1208.96 1176.61,1213.05 1177.2,1212.94 1177.78,1210.41 1178.37,1208.01 1178.96,1208.2 1179.54,1211.2 1180.13,1209.7 1180.71,1208.56 1181.3,1205.98 1181.89,1205.03 1182.47,1205.19 1183.06,1205.33 1183.65,1205.77 1184.23,1205.87 1184.82,1204.57 1185.41,1203.79 1185.99,1207.8 1186.58,1206.69 1187.16,1205.79 1187.75,1204.76 1188.34,1202.25 1188.92,1202.66 1189.51,1203.2 1190.1,1202.2 1190.68,1206.71 1191.27,1209.51 1191.86,1210.82 1192.44,1210.73 1193.03,1210.57 1193.62,1210.68 1194.2,1209.36 1194.79,1209.33 1195.37,1206.69 1195.96,1201.81 1196.55,1203.53 1197.13,1206.95 1197.72,1207.15 1198.31,1208.76 1198.89,1210.34 1199.48,1210.48 1200.07,1213.36 1200.65,1214.59 1201.24,1213.09 1201.83,1211.77 1202.41,1211.99 1203,1209.31 1203.58,1208.11 1204.17,1208.2 1204.76,1208.46 1205.34,1205.92 1205.93,1206.2 1206.52,1205.16 1207.1,1202.88 1207.69,1200.59 1208.28,1199.84 1208.86,1200.53 1209.45,1201.48 1210.03,1200.88 1210.62,1199.95 1211.21,1199.37 1211.79,1200.41 1212.38,1202.54 1212.97,1203.03 1213.55,1204.85 1214.14,1208.25 1214.73,1208.62 1215.31,1207.39 1215.9,1208.94 1216.49,1209.2 1217.07,1208.01 1217.66,1210.72 1218.24,1209.64 1218.83,1209.82 1219.42,1209.94 1220,1209.84 1220.59,1211.21 1221.18,1208.4 1221.76,1211.34 1222.35,1210.2 1222.94,1206.63 1223.52,1207.09 1224.11,1207.53 1224.7,1207.82 1225.28,1206.74 1225.87,1209.47 1226.45,1208.53 1227.04,1206.04 1227.63,1206.71 1228.21,1209.76 1228.8,1208.4 1229.39,1208.59 1229.97,1208.58 1230.56,1207.52 1231.15,1209.06 1231.73,1210.39 1232.32,1213.27 1232.91,1213.33 1233.49,1213.01 1234.08,1212.95 1234.66,1212.5 1235.25,1211.2 1235.84,1208.74 1236.42,1205.98 1237.01,1206.55 1237.6,1207.92 1238.18,1208.23 1238.77,1208.42 1239.36,1208.78 1239.94,1209.07 1240.53,1210.52 1241.11,1210.68 1241.7,1213.58 1242.29,1216.35 1242.87,1213.63 1243.46,1214.89 1244.05,1217.26 1244.63,1219.64 1245.22,1219.15 1245.81,1218.52 1246.39,1219.53 1246.98,1217.88 1247.57,1217.71 1248.15,1214.93 1248.74,1213.45 1249.32,1213.24 1249.91,1213.12 1250.5,1213.11 1251.08,1214.42 1251.67,1212.55 1252.26,1215.13 1252.84,1215.13 1253.43,1210.94 1254.02,1211.99 1254.6,1210.39 1255.19,1210.28 1255.78,1211.7 1256.36,1209.38 1256.95,1209.51 1257.53,1208.43 1258.12,1208.72 1258.71,1210.23 1259.29,1207.77 1259.88,1209.05 1260.47,1209.18 1261.05,1208.05 1261.64,1209.82 1262.23,1211.33 1262.81,1212.99 1263.4,1212.86 1263.98,1211.36 1264.57,1211.48 1265.16,1211.48 1265.74,1210.15 1266.33,1213.2 1266.92,1214.66 1267.5,1213.17 1268.09,1215.83 1268.68,1211.66 1269.26,1214.29 1269.85,1212.79 1270.44,1212.78 1271.02,1210.24 1271.61,1210.05 1272.19,1212.6 1272.78,1211.47 1273.37,1211.65 1273.95,1212.61 1274.54,1212.3 1275.13,1211.34 1275.71,1208.64 1276.3,1209.95 1276.89,1212.47 1277.47,1212.41 1278.06,1212.4 1278.65,1211.98 1279.23,1211.79 1279.82,1211.8 1280.4,1211.76 1280.99,1212.93 1281.58,1211.46 1282.16,1211.22 1282.75,1212.5 1283.34,1213.72 1283.92,1213.53 1284.51,1214.97 1285.1,1216.19 1285.68,1215.76 1286.27,1216.95 1286.86,1216.75 1287.44,1216.5 1288.03,1213.55 1288.61,1217.48 1289.2,1219.07 1289.79,1220.08 1290.37,1219.96 1290.96,1219.69 1291.55,1220.6 1292.13,1218.97 1292.72,1217.39 1293.31,1215.89 1293.89,1215.81 1294.48,1214.32 1295.06,1214.29 1295.65,1214.27 1296.24,1213.98 1296.82,1212.78 1297.41,1214.14 1298,1213.69 1298.58,1213.48 1299.17,1214.64 1299.76,1214.44 1300.34,1214.31 1300.93,1214.28 1301.52,1211.44 1302.1,1212.84 1302.69,1212.44 1303.27,1213.79 1303.86,1213.58 1304.45,1213.47 1305.03,1210.76 1305.62,1210.77 1306.21,1212.26 1306.79,1208.08 1307.38,1206.93 1307.97,1207.12 1308.55,1208.53 1309.14,1205.91 1309.73,1208.82 1310.31,1209.02 1310.9,1207.83 1311.48,1208.18 1312.07,1208.2 1312.66,1208.32 1313.24,1205.76 1313.83,1206.13 1314.42,1206.41 1315,1204.06 1315.59,1203.25 1316.18,1203.7 1316.76,1205.29 1317.35,1207.93 1317.93,1209.52 1318.52,1209.55 1319.11,1210.93 1319.69,1210.98 1320.28,1209.49 1320.87,1210.96 1321.45,1211.32 1322.04,1212.67 1322.63,1212.8 1323.21,1211.29 1323.8,1212.78 1324.39,1215.71 1324.97,1214.1 1325.56,1216.57 1326.14,1218.81 1326.73,1218.76 1327.32,1221.32 1327.9,1221.23 1328.49,1220.88 1329.08,1217.71 1329.66,1217.27 1330.25,1218.51 1330.84,1216.84 1331.42,1217.59 1332.01,1218.45 1332.6,1216.76 1333.18,1216.3 1333.77,1217.45 1334.35,1216.01 1334.94,1216.92 1335.53,1216.7 1336.11,1216.31 1336.7,1213.22 1337.29,1215.84 1337.87,1214.32 1338.46,1211.56 1339.05,1210.23 1339.63,1208.02 1340.22,1207.04 1340.8,1206.36 1341.39,1208.12 1341.98,1208.47 1342.56,1203.72 1343.15,1202.96 1343.74,1203.3 1344.32,1202.26 1344.91,1204.05 1345.5,1204.36 1346.08,1208.6 1346.67,1207.73 1347.26,1207.65 1347.84,1205.23 1348.43,1206.58 1349.01,1206.86 1349.6,1208.42 1350.19,1209.83 1350.77,1212.33 1351.36,1212.42 1351.95,1212.36 1352.53,1210.96 1353.12,1211.13 1353.71,1209.81 1354.29,1207.17 1354.88,1208.71 1355.47,1211.39 1356.05,1208.93 1356.64,1210.41 1357.22,1212.92 1357.81,1212.66 1358.4,1212.62 1358.98,1213.8 1359.57,1216.33 1360.16,1217.29 1360.74,1214.46 1361.33,1215.56 1361.92,1214.08 1362.5,1213.86 1363.09,1212.45 1363.68,1212.8 1364.26,1212.62 1364.85,1212.58 1365.43,1212.28 1366.02,1212.12 1366.61,1213.44 1367.19,1211.02 1367.78,1209.47 1368.37,1210.62 1368.95,1210.83 1369.54,1212.28 1370.13,1214.92 1370.71,1215.98 1371.3,1214.22 1371.88,1213.87 1372.47,1212.71 1373.06,1211.17 1373.64,1208.41 1374.23,1208.5 1374.82,1206.98 1375.4,1208.3 1375.99,1209.79 1376.58,1210.04 1377.16,1214.18 1377.75,1213.15 1378.34,1213.15 1378.92,1213.08 1379.51,1210.53 1380.09,1210.22 1380.68,1210.3 1381.27,1211.72 1381.85,1211.68 1382.44,1211.55 1383.03,1212.96 1383.61,1212.52 1384.2,1214.92 1384.79,1213.66 1385.37,1214.83 1385.96,1215.68 1386.55,1211.37 1387.13,1210.07 1387.72,1208.54 1388.3,1205.98 1388.89,1207.61 1389.48,1208.94 1390.06,1209.42 1390.65,1210.72 1391.24,1209.51 1391.82,1208.25 1392.41,1208.76 1393,1210.23 1393.58,1209.23 1394.17,1209.61 1394.75,1211.05 1395.34,1209.49 1395.93,1207.07 1396.51,1204.88 1397.1,1204.02 1397.69,1205.73 1398.27,1204.54 1398.86,1204.77 1399.45,1206.21 1400.03,1207.7 1400.62,1206.77 1401.21,1209.61 1401.79,1209.87 1402.38,1207.33 1402.96,1207.86 1403.55,1209.24 1404.14,1211.92 1404.72,1211.74 1405.31,1210.34 1405.9,1207.53 1406.48,1208.89 1407.07,1210.31 1407.66,1209.14 1408.24,1210.79 1408.83,1209.61 1409.42,1209.79 1410,1209.96 1410.59,1210.96 1411.17,1212.59 1411.76,1215.01 1412.35,1214.7 1412.93,1213.14 1413.52,1214.18 1414.11,1214.09 1414.69,1213.85 1415.28,1212.39 1415.87,1213.91 1416.45,1213.69 1417.04,1214.82 1417.63,1215.05 1418.21,1213.35 1418.8,1211.79 1419.38,1213.27 1419.97,1213.34 1420.56,1213.04 1421.14,1215.3 1421.73,1215.27 1422.32,1215.46 1422.9,1215.06 1423.49,1220.16 1424.08,1220.23 1424.66,1222.37 1425.25,1223.15 1425.83,1225.2 1426.42,1225.6 1427.01,1222.24 1427.59,1217.61 1428.18,1215.87 1428.77,1217.23 1429.35,1215.49 1429.94,1215.66 1430.53,1216.99 1431.11,1216.54 1431.7,1214.83 1432.29,1213.31 1432.87,1211.91 1433.46,1209.4 1434.04,1211.97 1434.63,1210.61 1435.22,1209.35 1435.8,1209.57 1436.39,1208.37 1436.98,1208.52 1437.56,1208.7 1438.15,1207.81 1438.74,1209.25 1439.32,1209.35 1439.91,1206.64 1440.5,1209.35 1441.08,1209.56 1441.67,1208.32 1442.25,1209.99 1442.84,1208.89 1443.43,1207.7 1444.01,1206.54 1444.6,1205.62 1445.19,1205.86 1445.77,1204.74 1446.36,1203.79 1446.95,1202.84 1447.53,1204.39 1448.12,1206.25 1448.7,1208.12 1449.29,1207.25 1449.88,1207.52 1450.46,1206.48 1451.05,1205.48 1451.64,1205.74 1452.22,1207.5 1452.81,1208.91 1453.4,1210.44 1453.98,1209.03 1454.57,1209.05 1455.16,1209.41 1455.74,1210.91 1456.33,1211.09 1456.91,1209.74 1457.5,1207.39 1458.09,1209.2 1458.67,1209.31 1459.26,1209.12 1459.85,1209.38 1460.43,1210.85 1461.02,1211.18 1461.61,1209.78 1462.19,1208.63 1462.78,1211.47 1463.37,1212.8 1463.95,1210.26 1464.54,1210.11 1465.12,1208.92 1465.71,1207.69 1466.3,1207.9 1466.88,1209.3 1467.47,1212.33 1468.06,1213.44 1468.64,1213.38 1469.23,1216.11 1469.82,1215.78 1470.4,1214.34 1470.99,1214.21 1471.57,1214.09 1472.16,1214.2 1472.75,1215.24 1473.33,1216.21 1473.92,1217.13 1474.51,1217.93 1475.09,1218.81 1475.68,1215.82 1476.27,1214.42 1476.85,1214.25 1477.44,1216.82 1478.03,1220.49 1478.61,1218.72 1479.2,1217.37 1479.78,1219.32 1480.37,1217.67 1480.96,1217.29 1481.54,1215.62 1482.13,1215.4 1482.72,1213.93 1483.3,1215.14 1483.89,1216.57 1484.48,1217.37 1485.06,1219.46 1485.65,1220.28 1486.24,1220.06 1486.82,1219.7 1487.41,1219.36 1487.99,1218.99 1488.58,1217.22 1489.17,1217.11 1489.75,1213.13 1490.34,1210.2 1490.93,1207.47 1491.51,1209.06 1492.1,1207.93 1492.69,1210.64 1493.27,1210.77 1493.86,1211.91 1494.45,1209.31 1495.03,1207.82 1495.62,1206.59 1496.2,1208.09 1496.79,1209.61 1497.38,1210.96 1497.96,1210.67 1498.55,1209.35 1499.14,1210.5 1499.72,1208.01 1500.31,1208.25 1500.9,1208.49 1501.48,1208.85 1502.07,1209.11 1502.65,1207.98 1503.24,1208.27 1503.83,1205.72 1504.41,1206.06 1505,1204.95 1505.59,1206.41 1506.17,1208.2 1506.76,1211.32 1507.35,1211.15 1507.93,1213.9 1508.52,1213.74 1509.11,1217.53 1509.69,1217.21 1510.28,1215.56 1510.86,1218.02 1511.45,1220.22 1512.04,1221.15 1512.62,1219.39 1513.21,1220.03 1513.8,1219.47 1514.38,1218.06 1514.97,1216.41 1515.56,1214.68 1516.14,1217.16 1516.73,1215.51 1517.32,1213.55 1517.9,1214.87 1518.49,1214.74 1519.07,1217.16 1519.66,1215.78 1520.25,1216.57 1520.83,1216.23 1521.42,1216.29 1522.01,1213.15 1522.59,1214.3 1523.18,1214.06 1523.77,1213.9 1524.35,1217.8 1524.94,1214.59 1525.52,1215.97 1526.11,1214.64 1526.7,1213.03 1527.28,1212.81 1527.87,1210.1 1528.46,1211.23 1529.04,1211.31 1529.63,1209.98 1530.22,1209.96 1530.8,1207.31 1531.39,1207.36 1531.98,1209.97 1532.56,1208.83 1533.15,1211.78 1533.73,1211.47 1534.32,1211.52 1534.91,1211.37 1535.49,1210.03 1536.08,1208.8 1536.67,1204.97 1537.25,1209.16 1537.84,1205.08 1538.43,1206.84 1539.01,1203 1539.6,1204.79 1540.19,1202.71 1540.77,1201.7 1541.36,1204.89 1541.94,1202.81 1542.53,1204.58 1543.12,1205 1543.7,1201.19 1544.29,1199.98 1544.88,1200.8 1545.46,1202.72 1546.05,1202.93 1546.64,1205.84 1547.22,1205.16 1547.81,1205.35 1548.4,1207.13 1548.98,1212.76 1549.57,1211.6 1550.15,1215.61 1550.74,1215.63 1551.33,1216.79 1551.91,1218.09 1552.5,1219.43 1553.09,1217.88 1553.67,1218.78 1554.26,1219.73 1554.85,1219.11 1555.43,1219.82 1556.02,1219.26 1556.6,1218.69 1557.19,1219.81 1557.78,1219.27 1558.36,1220.28 1558.95,1225.2 1559.54,1221.98 1560.12,1222.66 1560.71,1220.95 1561.3,1223.16 1561.88,1218.41 1562.47,1215.32 1563.06,1215.18 1563.64,1216.08 1564.23,1218.51 1564.81,1219.09 1565.4,1221.24 1565.99,1219.34 1566.57,1217.65 1567.16,1215.83 1567.75,1216.86 1568.33,1215.18 1568.92,1214.74 1569.51,1212.95 1570.09,1212.94 1570.68,1211.71 1571.27,1209.27 1571.85,1208.09 1572.44,1208.39 1573.02,1205.87 1573.61,1206.32 1574.2,1205.21 1574.78,1203.92 1575.37,1205.68 1575.96,1205.99 1576.54,1205.15 1577.13,1205.48 1577.72,1208.38 1578.3,1208.49 1578.89,1208.98 1579.47,1212.98 1580.06,1212.91 1580.65,1213 1581.23,1214.27 1581.82,1214.23 1582.41,1215.31 1582.99,1216.5 1583.58,1216.19 1584.17,1217.41 1584.75,1218.26 1585.34,1217.78 1585.93,1220.15 1586.51,1216.81 1587.1,1213.66 1587.68,1213.74 1588.27,1213.53 1588.86,1214.64 1589.44,1217.15 1590.03,1216.98 1590.62,1214.13 1591.2,1215.36 1591.79,1213.91 1592.38,1213.71 1592.96,1213.54 1593.55,1210.87 1594.14,1210.93 1594.72,1213.42 1595.31,1214.53 1595.89,1213.31 1596.48,1214.43 1597.07,1214.24 1597.65,1216.77 1598.24,1215.3 1598.83,1216.33 1599.41,1216.18 1600,1216.03 1600.59,1215.73 1601.17,1211.62 1601.76,1210.39 1602.34,1209.36 1602.93,1210.99 1603.52,1209.89 1604.1,1213.94 1604.69,1215.4 1605.28,1213.59 1605.86,1213.34 1606.45,1211.8 1607.04,1209.02 1607.62,1210.55 1608.21,1211.65 1608.8,1211.61 1609.38,1213.07 1609.97,1212.09 1610.55,1211.65 1611.14,1212.8 1611.73,1214.14 1612.31,1214.25 1612.9,1214.11 1613.49,1215.31 1614.07,1213.81 1614.66,1213.66 1615.25,1209.63 1615.83,1211 1616.42,1211.14 1617.01,1210.8 1617.59,1209.35 1618.18,1209.53 1618.76,1206.63 1619.35,1208.19 1619.94,1208.39 1620.52,1205.9 1621.11,1205.23 1621.7,1209.71 1622.28,1209.77 1622.87,1212.08 1623.46,1209.49 1624.04,1208.09 1624.63,1209.53 1625.22,1208.3 1625.8,1208.66 1626.39,1210.16 1626.97,1206.74 1627.56,1209.67 1628.15,1212.47 1628.73,1212.93 1629.32,1211.88 1629.91,1210.66 1630.49,1208.28 1631.08,1208.7 1631.67,1211.39 1632.25,1212.91 1632.84,1211.33 1633.42,1212.63 1634.01,1211.02 1634.6,1209.56 1635.18,1209.77 1635.77,1211.22 1636.36,1212.45 1636.94,1213.43 1637.53,1209.69 1638.12,1206.24 1638.7,1206.53 1639.29,1209.46 1639.88,1211.44 1640.46,1215.54 1641.05,1212.61 1641.63,1212.5 1642.22,1211.11 1642.81,1212.53 1643.39,1212.19 1643.98,1211.94 1644.57,1209.14 1645.15,1208.03 1645.74,1208.4 1646.33,1209.86 1646.91,1212.6 1647.5,1208.72 1648.09,1208.78 1648.67,1211.68 1649.26,1210.44 1649.84,1210.68 1650.43,1210.74 1651.02,1208.19 1651.6,1207.14 1652.19,1207.27 1652.78,1205.95 1653.36,1204.95 1653.95,1206.65 1654.54,1208.53 1655.12,1208.69 1655.71,1209 1656.29,1210.63 1656.88,1209.47 1657.47,1209.43 1658.05,1207.3 1658.64,1206.42 1659.23,1205.49 1659.81,1204.44 1660.4,1207.34 1660.99,1210.17 1661.57,1207.66 1662.16,1207.94 1662.75,1206.67 1663.33,1205.46 1663.92,1205.97 1664.5,1206.33 1665.09,1206.85 1665.68,1207.09 1666.26,1206.06 1666.85,1207.5 1667.44,1207.63 1668.02,1206.49 1668.61,1208.05 1669.2,1208.1 1669.78,1207.99 1670.37,1207.91 1670.96,1207.86 1671.54,1206.66 1672.13,1205.41 1672.71,1205.61 1673.3,1207.24 1673.89,1205.76 1674.47,1207.46 1675.06,1207.65 1675.65,1206.55 1676.23,1205.52 1676.82,1204.39 1677.41,1204.99 1677.99,1202.9 1678.58,1202.1 1679.17,1201.31 1679.75,1201.86 1680.34,1204.12 1680.92,1204.85 1681.51,1203.87 1682.1,1202.84 1682.68,1204.7 1683.27,1204.97 1683.86,1205.41 1684.44,1204.26 1685.03,1208.63 1685.62,1208.89 1686.2,1207.56 1686.79,1207.82 1687.37,1209.52 1687.96,1208.27 1688.55,1209.92 1689.13,1209.98 1689.72,1212.67 1690.31,1212.56 1690.89,1210.93 1691.48,1212.26 1692.07,1212.03 1692.65,1210.86 1693.24,1208.5 1693.83,1209.94 1694.41,1211.42 1695,1209.84 1695.58,1210.14 1696.17,1211.43 1696.76,1211.61 1697.34,1210.13 1697.93,1208.99 1698.52,1212.98 1699.1,1211.5 1699.69,1210.22 1700.28,1210.45 1700.86,1210.77 1701.45,1210.89 1702.04,1212.19 1702.62,1212.36 1703.21,1213.59 1703.79,1214.82 1704.38,1215.87 1704.97,1214.37 1705.55,1213.94 1706.14,1215.07 1706.73,1213.48 1707.31,1216.19 1707.9,1221.22 1708.49,1218.06 1709.07,1217.44 1709.66,1214.68 1710.24,1215.6 1710.83,1215.61 1711.42,1217.84 1712,1216.36 1712.59,1221.21 1713.18,1220.56 1713.76,1221.43 1714.35,1223.53 1714.94,1222.68 1715.52,1227.13 1716.11,1226.02 1716.7,1226.66 1717.28,1225.81 1717.87,1226.46 1718.45,1222.96 1719.04,1222.32 1719.63,1221.64 1720.21,1220.88 1720.8,1223.04 1721.39,1223.44 1721.97,1222.71 1722.56,1222.01 1723.15,1217.5 1723.73,1215.86 1724.32,1214.31 1724.91,1212.66 1725.49,1211.16 1726.08,1211.25 1726.66,1210.15 1727.25,1207.67 1727.84,1207.93 1728.42,1205.74 1729.01,1204.8 1729.6,1206.32 1730.18,1206.44 1730.77,1203.94 1731.36,1208.38 1731.94,1208.56 1732.53,1210.31 1733.11,1212.96 1733.7,1215.51 1734.29,1216.56 1734.87,1216.61 1735.46,1216.33 1736.05,1215.8 1736.63,1214.06 1737.22,1213.97 1737.81,1217.88 1738.39,1219.12 1738.98,1220.14 1739.57,1218.07 1740.15,1215.03 1740.74,1216.15 1741.32,1214.53 1741.91,1213.28 1742.5,1213.28 1743.08,1210.47 1743.67,1211.76 1744.26,1210.27 1744.84,1209.11 1745.43,1207.78 1746.02,1207.86 1746.6,1211.05 1747.19,1211.12 1747.78,1211.14 1748.36,1210.07 1748.95,1211.37 1749.53,1210.23 1750.12,1208.99 1750.71,1208.03 1751.29,1206.85 1751.88,1208.36 1752.47,1210 1753.05,1210.06 1753.64,1209.93 1754.23,1210.04 1754.81,1211.19 1755.4,1213.58 1755.99,1213.31 1756.57,1214.38 1757.16,1214.23 1757.74,1214.1 1758.33,1214.04 1758.92,1212.58 1759.5,1213.87 1760.09,1213.78 1760.68,1210.88 1761.26,1211.08 1761.85,1207.18 1762.44,1205.97 1763.02,1208.08 1763.61,1209.68 1764.19,1210.78 1764.78,1214.67 1765.37,1214.51 1765.95,1216.95 1766.54,1213.94 1767.13,1214.25 1767.71,1214.23 1768.3,1212.87 1768.89,1212.84 1769.47,1214.17 1770.06,1217.75 1770.65,1218.56 1771.23,1216.85 1771.82,1215.41 1772.4,1216.5 1772.99,1217.6 1773.58,1217.47 1774.16,1218.26 1774.75,1220.46 1775.34,1218.56 1775.92,1217.98 1776.51,1216.23 1777.1,1217.63 1777.68,1216.06 1778.27,1214.34 1778.86,1216.49 1779.44,1217.59 1780.03,1219.82 1780.61,1218.18 1781.2,1217.99 1781.79,1217.61 1782.37,1220.02 1782.96,1213.1 1783.55,1212.04 1784.13,1212.01 1784.72,1210.8 1785.31,1208.33 1785.89,1208.45 1786.48,1207.13 1787.06,1207.21 1787.65,1203.36 1788.24,1201.25 1788.82,1203.38 1789.41,1205.05 1790,1205.55 1790.58,1204.73 1791.17,1203.68 1791.76,1202.54 1792.34,1202.96 1792.93,1204.75 1793.52,1206.35 1794.1,1204.21 1794.69,1204.47 1795.27,1204.8 1795.86,1205.05 1796.45,1203.85 1797.03,1207.11 1797.62,1204.8 1798.21,1206.5 1798.79,1205.49 1799.38,1207.13 1799.97,1206.2 1800.55,1206.61 1801.14,1209.45 1801.73,1212.1 1802.31,1210.91 1802.9,1212.28 1803.48,1214.9 1804.07,1218.63 1804.66,1218.33 1805.24,1219.1 1805.83,1215.98 1806.42,1215.68 1807,1215.22 1807.59,1213.55 1808.18,1214.82 1808.76,1213.25 1809.35,1210.42 1809.94,1208 1810.52,1205.41 1811.11,1205.74 1811.69,1208.48 1812.28,1207.41 1812.87,1210.29 1813.45,1215.19 1814.04,1216.33 1814.63,1216.34 1815.21,1218.88 1815.8,1218.13 1816.39,1216.67 1816.97,1216.15 1817.56,1217.08 1818.14,1216.94 1818.73,1217.85 1819.32,1217.67 1819.9,1217.42 1820.49,1217.23 1821.08,1214.28 1821.66,1215.34 1822.25,1213.7 1822.84,1211.98 1823.42,1213.2 1824.01,1212.95 1824.6,1210.24 1825.18,1208.83 1825.77,1207.58 1826.35,1207.64 1826.94,1208.03 1827.53,1208.6 1828.11,1208.88 1828.7,1212 1829.29,1212.27 1829.87,1210.91 1830.46,1208.31 1831.05,1206.93 1831.63,1208.43 1832.22,1210.05 1832.81,1210.2 1833.39,1206.25 1833.98,1206.32 1834.56,1210.55 1835.15,1212.95 1835.74,1211.76 1836.32,1211.82 1836.91,1211.87 1837.5,1210.46 1838.08,1206.65 1838.67,1206.51 1839.26,1208.06 1839.84,1208.29 1840.43,1209.86 1841.01,1210.29 1841.6,1210.37 1842.19,1211.99 1842.77,1210.76 1843.36,1212.2 1843.95,1212.17 1844.53,1210.96 1845.12,1213.63 1845.71,1213.33 1846.29,1213.14 1846.88,1212.98 1847.47,1211.76 1848.05,1208.92 1848.64,1206.38 1849.22,1204.31 1849.81,1203.14 1850.4,1203.25 1850.98,1203.69 1851.57,1205.52 1852.16,1205.87 1852.74,1206.08 1853.33,1207.83 1853.92,1209.13 1854.5,1207.72 1855.09,1210.45 1855.68,1211.61 1856.26,1210.38 1856.85,1210.67 1857.43,1212.03 1858.02,1210.82 1858.61,1211.16 1859.19,1208.44 1859.78,1209.91 1860.37,1210.13 1860.95,1209.97 1861.54,1208.64 1862.13,1208.8 1862.71,1208.74 1863.3,1208.88 1863.88,1207.65 1864.47,1206.68 1865.06,1205.76 1865.64,1208.71 1866.23,1208.85 1866.82,1206.56 1867.4,1205.6 1867.99,1205.88 1868.58,1207.53 1869.16,1206.7 1869.75,1209.94 1870.34,1211.39 1870.92,1211.44 1871.51,1210.55 1872.09,1213.31 1872.68,1213.3 1873.27,1210.36 1873.85,1211.58 1874.44,1211.56 1875.03,1210.01 1875.61,1207.38 1876.2,1208.99 1876.79,1211.78 1877.37,1212.91 1877.96,1212.73 1878.55,1212.59 1879.13,1211.11 1879.72,1212.17 1880.3,1214.92 1880.89,1213.14 1881.48,1213.03 1882.06,1212.75 1882.65,1212.59 1883.24,1211.06 1883.82,1209.88 1884.41,1208.58 1885,1207.27 1885.58,1204.71 1886.17,1206.4 1886.76,1209.44 1887.34,1210.82 1887.93,1209.59 1888.51,1208.48 1889.1,1211.29 1889.69,1211.22 1890.27,1211.36 1890.86,1210.3 1891.45,1207.53 1892.03,1207.79 1892.62,1207.8 1893.21,1209.29 1893.79,1209.48 1894.38,1211.01 1894.96,1211 1895.55,1212.41 1896.14,1213.31 1896.72,1213.28 1897.31,1210.36 1897.9,1211.61 1898.48,1212.83 1899.07,1212.62 1899.66,1213.75 1900.24,1212.31 1900.83,1211.03 1901.42,1209.93 1902,1208.65 1902.59,1210.26 1903.17,1213.28 1903.76,1214.58 1904.35,1211.62 1904.93,1212.93 1905.52,1213.99 1906.11,1214.77 1906.69,1213.39 1907.28,1213.16 1907.87,1213.14 1908.45,1214.33 1909.04,1214.46 1909.63,1215.59 1910.21,1215.28 1910.8,1216.36 1911.38,1217.37 1911.97,1221.1 1912.56,1220.63 1913.14,1220.26 1913.73,1218.46 1914.32,1216.74 1914.9,1217.67 1915.49,1220.07 1916.08,1219.86 1916.66,1218.09 1917.25,1216.35 1917.83,1217.14 1918.42,1218.28 1919.01,1215.33 1919.59,1212.64 1920.18,1212.47 1920.77,1212.41 1921.35,1212.59 1921.94,1208.64 1922.53,1208.56 1923.11,1208.8 1923.7,1208.96 1924.29,1207.6 1924.87,1209.1 1925.46,1210.6 1926.04,1213.27 1926.63,1213.38 1927.22,1212.1 1927.8,1212.19 1928.39,1214.52 1928.98,1213.24 1929.56,1214.49 1930.15,1215.61 1930.74,1216.89 1931.32,1216.34 1931.91,1221.44 1932.5,1222.3 1933.08,1224.12 1933.67,1222.41 1934.25,1220.72 1934.84,1221.48 1935.43,1218.47 1936.01,1215.5 1936.6,1216.68 1937.19,1216.25 1937.77,1211.99 1938.36,1207.86 1938.95,1209.29 1939.53,1210.73 1940.12,1214.86 1940.71,1214.52 1941.29,1213.08 1941.88,1215.5 1942.46,1216.48 1943.05,1216.23 1943.64,1214.45 1944.22,1212.91 1944.81,1212.71 1945.4,1211.36 1945.98,1212.69 1946.57,1212.37 1947.16,1212.24 1947.74,1214.92 1948.33,1214.89 1948.91,1214.91 1949.5,1215.88 1950.09,1214.49 1950.67,1208.88 1951.26,1211.66 1951.85,1211.56 1952.43,1214.26 1953.02,1211.22 1953.61,1211.3 1954.19,1211.24 1954.78,1211.18 1955.37,1210.96 1955.95,1212.12 1956.54,1212.27 1957.12,1213.96 1957.71,1212.63 1958.3,1212.73 1958.88,1211.15 1959.47,1212.72 1960.06,1214 1960.64,1215.14 1961.23,1210.68 1961.82,1210.77 1962.4,1209.26 1962.99,1209.36 1963.58,1209.58 1964.16,1214.87 1964.75,1211.74 1965.33,1211.73 1965.92,1210.35 1966.51,1210.7 1967.09,1210.76 1967.68,1212.28 1968.27,1211.96 1968.85,1211.59 1969.44,1211.74 1970.03,1214.57 1970.61,1213.32 1971.2,1213.06 1971.78,1210.27 1972.37,1213.17 1972.96,1211.71 1973.54,1215.49 1974.13,1217.98 1974.72,1213.96 1975.3,1208.36 1975.89,1208.71 1976.48,1204.97 1977.06,1206.76 1977.65,1207.33 1978.24,1207.49 1978.82,1206.44 1979.41,1206.86 1979.99,1206.99 1980.58,1207.15 1981.17,1206.23 1981.75,1207.96 1982.34,1209.32 1982.93,1208.15 1983.51,1206.7 1984.1,1206.95 1984.69,1205.62 1985.27,1205.73 1985.86,1207.29 1986.45,1208.64 1987.03,1205.92 1987.62,1203.64 1988.2,1204.09 1988.79,1205.67 1989.38,1206.38 1989.96,1205.76 1990.55,1206.34 1991.14,1206.43 1991.72,1206.7 1992.31,1209.48 1992.9,1208.16 1993.48,1206.83 1994.07,1206.82 1994.65,1205.61 1995.24,1208.32 1995.83,1206.87 1996.41,1208.36 1997,1208.69 1997.59,1208.67 1998.17,1206.29 1998.76,1205.36 1999.35,1205.61 1999.93,1206.88 2000.52,1208.55 2001.11,1211.75 2001.69,1211.89 2002.28,1210.66 2002.86,1212.31 2003.45,1210.89 2004.04,1208.01 2004.62,1209.46 2005.21,1213.56 2005.8,1212.22 2006.38,1212.29 2006.97,1213.72 2007.56,1211.97 2008.14,1213.26 2008.73,1213.43 2009.32,1212.2 2009.9,1216.13 2010.49,1214.4 2011.07,1214.45 2011.66,1215.66 2012.25,1216.85 2012.83,1214.1 2013.42,1214.13 2014.01,1215.4 2014.59,1213.78 2015.18,1212.53 2015.77,1210.9 2016.35,1210.88 2016.94,1206.8 2017.53,1204.37 2018.11,1206.22 2018.7,1206.26 2019.28,1206.59 2019.87,1204.47 2020.46,1202.18 2021.04,1203.85 2021.63,1206.92 2022.22,1211.17 2022.8,1208.33 2023.39,1203.2 2023.98,1203.68 2024.56,1204.13 2025.15,1202.07 2025.73,1204.72 2026.32,1202.52 2026.91,1201.78 2027.49,1203.49 2028.08,1201.4 2028.67,1203.21 2029.25,1203.54 2029.84,1203.82 2030.43,1205.39 2031.01,1204.31 2031.6,1204.7 2032.19,1205.41 2032.77,1207.01 2033.36,1208.55 2033.94,1208.89 2034.53,1206.5 2035.12,1206.71 2035.7,1208.5 2036.29,1207.43 2036.88,1207.92 2037.46,1209.54 2038.05,1209.82 2038.64,1214.17 2039.22,1215.38 2039.81,1214.96 2040.4,1214.68 2040.98,1210.55 2041.57,1210.34 2042.15,1213.18 2042.74,1214.38 2043.33,1214.31 2043.91,1213.96 2044.5,1213.95 2045.09,1215.26 2045.67,1212.36 2046.26,1210.8 2046.85,1209.59 2047.43,1209.78 2048.02,1209.84 2048.6,1211.37 2049.19,1216.38 2049.78,1216.07 2050.36,1217.01 2050.95,1216.52 2051.54,1214.77 2052.12,1215.72 2052.71,1214.33 2053.3,1211.77 2053.88,1210.31 2054.47,1207.53 2055.06,1210.29 2055.64,1207.83 2056.23,1207.92 2056.81,1209.69 2057.4,1209.78 2057.99,1211.09 2058.57,1212.41 2059.16,1209.86 2059.75,1206.15 2060.33,1207.82 2060.92,1209.38 2061.51,1209.44 2062.09,1208.36 2062.68,1208.56 2063.27,1208.85 2063.85,1207.88 2064.44,1206.97 2065.02,1207.18 2065.61,1210 2066.2,1211.32 2066.78,1211.68 2067.37,1210.45 2067.96,1212.4 2068.54,1213.64 2069.13,1212.46 2069.72,1212.62 2070.3,1209.91 2070.89,1208.83 2071.48,1210.35 2072.06,1210.32 2072.65,1211.76 2073.23,1210.51 2073.82,1210.48 2074.41,1209.28 2074.99,1213.33 2075.58,1211.95 2076.17,1213.01 2076.75,1212.75 2077.34,1211.33 2077.93,1209.99 2078.51,1208.52 2079.1,1208.67 2079.68,1211.56 2080.27,1212.74 2080.86,1213.16 2081.44,1213.16 2082.03,1210.41 2082.62,1210.56 2083.2,1210.43 2083.79,1214.48 2084.38,1215.6 2084.96,1215.54 2085.55,1218.15 2086.14,1216.73 2086.72,1220.42 2087.31,1220.11 2087.89,1219.56 2088.48,1217.97 2089.07,1216.47 2089.65,1218.69 2090.24,1218.43 2090.83,1218.03 2091.41,1216.22 2092,1216.04 2092.59,1214.18 2093.17,1212.72 2093.76,1211.19 2094.35,1211.41 2094.93,1210.13 2095.52,1211.48 2096.1,1214.06 2096.69,1213.78 2097.28,1211.13 2097.86,1211.04 2098.45,1209.94 2099.04,1211.44 2099.62,1212.85 2100.21,1215.78 2100.8,1215.41 2101.38,1219.41 2101.97,1217.63 2102.55,1216.11 2103.14,1215.63 2103.73,1215.37 2104.31,1213.64 2104.9,1216.16 2105.49,1216.13 2106.07,1215.79 2106.66,1215.42 2107.25,1217.98 2107.83,1218.9 2108.42,1220.85 2109.01,1217.64 2109.59,1218.88 2110.18,1219.94 2110.76,1219.63 2111.35,1220.47 2111.94,1219.9 2112.52,1217.8 2113.11,1217.39 2113.7,1215.57 2114.28,1215.34 2114.87,1212.67 2115.46,1211.14 2116.04,1211.14 2116.63,1209.72 2117.22,1208.62 2117.8,1207.34 2118.39,1210.36 2118.97,1211.67 2119.56,1208.75 2120.15,1205.95 2120.73,1200.73 2121.32,1196.93 2121.91,1197.64 2122.49,1198.57 2123.08,1199.1 2123.67,1199.56 2124.25,1201.49 2124.84,1203.14 2125.42,1204.86 2126.01,1206.56 2126.6,1206.88 2127.18,1208.29 2127.77,1208.32 2128.36,1205.96 2128.94,1207.83 2129.53,1207.75 2130.12,1205.24 2130.7,1205.31 2131.29,1205.83 2131.88,1206.29 2132.46,1207.77 2133.05,1208.08 2133.63,1206.85 2134.22,1205.64 2134.81,1207.27 2135.39,1210.21 2135.98,1210.33 2136.57,1213.05 2137.15,1214.38 2137.74,1213.17 2138.33,1210.39 2138.91,1210.65 2139.5,1210.69 2140.09,1210.7 2140.67,1212.16 2141.26,1209.62 2141.84,1209.8 2142.43,1208.71 2143.02,1209.03 2143.6,1207.78 2144.19,1206.46 2144.78,1208.42 2145.36,1211.19 2145.95,1211.17 2146.54,1211.09 2147.12,1213.54 2147.71,1213.42 2148.3,1213.16 2148.88,1214.37 2149.47,1213 2150.05,1216.87 2150.64,1215.27 2151.23,1214.91 2151.81,1213.37 2152.4,1213.23 2152.99,1211.82 2153.57,1211.67 2154.16,1211.9 2154.75,1211.86 2155.33,1212.97 2155.92,1210.29 2156.5,1212.86 2157.09,1213.09 2157.68,1213.07 2158.26,1213.01 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1211.96 L986.612 1211.96 L987.198 1211.96 L987.785 1211.96 L988.371 1211.96 L988.957 1211.96 L989.544 1211.96 L990.13 1211.96 L990.717 1211.96 L991.303 1211.96 L991.889 1211.96 L992.476 1211.96 L993.062 1211.96 L993.649 1211.96 L994.235 1211.96 L994.822 1211.96 L995.408 1211.96 L995.994 1211.96 L996.581 1211.96 L997.167 1211.96 L997.754 1211.96 L998.34 1211.96 L998.926 1211.96 L999.513 1211.96 L1000.1 1211.96 L1000.69 1211.96 L1001.27 1211.96 L1001.86 1211.96 L1002.44 1211.96 L1003.03 1211.96 L1003.62 1211.96 L1004.2 1211.96 L1004.79 1211.96 L1005.38 1211.96 L1005.96 1211.96 L1006.55 1211.96 L1007.14 1211.96 L1007.72 1211.96 L1008.31 1211.96 L1008.9 1211.96 L1009.48 1211.96 L1010.07 1211.96 L1010.65 1211.96 L1011.24 1211.96 L1011.83 1211.96 L1012.41 1211.96 L1013 1211.96 L1013.59 1211.96 L1014.17 1211.96 L1014.76 1211.96 L1015.35 1211.96 L1015.93 1211.96 L1016.52 1211.96 L1017.11 1211.96 L1017.69 1211.96 L1018.28 1211.96 L1018.86 1211.96 L1019.45 1211.96 L1020.04 1211.96 L1020.62 1211.96 L1021.21 1211.96 L1021.8 1211.96 L1022.38 1211.96 L1022.97 1211.96 L1023.56 1211.96 L1024.14 1211.96 L1024.73 1211.96 L1025.32 1211.96 L1025.9 1211.96 L1026.49 1211.96 L1027.07 1211.96 L1027.66 1211.96 L1028.25 1211.96 L1028.83 1211.96 L1029.42 1211.96 L1030.01 1211.96 L1030.59 1211.96 L1031.18 1211.96 L1031.77 1211.96 L1032.35 1211.96 L1032.94 1211.96 L1033.52 1211.96 L1034.11 1211.96 L1034.7 1211.96 L1035.28 1211.96 L1035.87 1211.96 L1036.46 1211.96 L1037.04 1211.96 L1037.63 1211.96 L1038.22 1211.96 L1038.8 1211.96 L1039.39 1211.96 L1039.98 1211.96 L1040.56 1211.96 L1041.15 1211.96 L1041.73 1211.96 L1042.32 1211.96 L1042.91 1211.96 L1043.49 1211.96 L1044.08 1211.96 L1044.67 1211.96 L1045.25 1211.96 L1045.84 1211.96 L1046.43 1211.96 L1047.01 1211.96 L1047.6 1211.96 L1048.19 1211.96 L1048.77 1211.96 L1049.36 1211.96 L1049.94 1211.96 L1050.53 1211.96 L1051.12 1211.96 L1051.7 1211.96 L1052.29 1211.96 L1052.88 1211.96 L1053.46 1211.96 L1054.05 1211.96 L1054.64 1211.96 L1055.22 1211.96 L1055.81 1211.96 L1056.39 1211.96 L1056.98 1211.96 L1057.57 1211.96 L1058.15 1211.96 L1058.74 1211.96 L1059.33 1211.96 L1059.91 1211.96 L1060.5 1211.96 L1061.09 1211.96 L1061.67 1211.96 L1062.26 1211.96 L1062.85 1211.96 L1063.43 1211.96 L1064.02 1211.96 L1064.6 1211.96 L1065.19 1211.96 L1065.78 1211.96 L1066.36 1211.96 L1066.95 1211.96 L1067.54 1211.96 L1068.12 1211.96 L1068.71 1211.96 L1069.3 1211.96 L1069.88 1211.96 L1070.47 1211.96 L1071.06 1211.96 L1071.64 1211.96 L1072.23 1211.96 L1072.81 1211.96 L1073.4 1211.96 L1073.99 1211.96 L1074.57 1211.96 L1075.16 1211.96 L1075.75 1211.96 L1076.33 1211.96 L1076.92 1211.96 L1077.51 1211.96 L1078.09 1211.96 L1078.68 1211.96 L1079.26 1211.96 L1079.85 1211.96 L1080.44 1211.96 L1081.02 1211.96 L1081.61 1211.96 L1082.2 1211.96 L1082.78 1211.96 L1083.37 1211.96 L1083.96 1211.96 L1084.54 1211.96 L1085.13 1211.96 L1085.72 1211.96 L1086.3 1211.96 L1086.89 1211.96 L1087.47 1211.96 L1088.06 1211.96 L1088.65 1211.96 L1089.23 1211.96 L1089.82 1211.96 L1090.41 1211.96 L1090.99 1211.96 L1091.58 1211.96 L1092.17 1211.96 L1092.75 1211.96 L1093.34 1211.96 L1093.93 1211.96 L1094.51 1211.96 L1095.1 1211.96 L1095.68 1211.96 L1096.27 1211.96 L1096.86 1211.96 L1097.44 1211.96 L1098.03 1211.96 L1098.62 1211.96 L1099.2 1211.96 L1099.79 1211.96 L1100.38 1211.96 L1100.96 1211.96 L1101.55 1211.96 L1102.14 1211.96 L1102.72 1211.96 L1103.31 1211.96 L1103.89 1211.96 L1104.48 1211.96 L1105.07 1211.96 L1105.65 1211.96 L1106.24 1211.96 L1106.83 1211.96 L1107.41 1211.96 L1108 1211.96 L1108.59 1211.96 L1109.17 1211.96 L1109.76 1211.96 L1110.34 1211.96 L1110.93 1211.96 L1111.52 1211.96 L1112.1 1211.96 L1112.69 1211.96 L1113.28 1211.96 L1113.86 1211.96 L1114.45 1211.96 L1115.04 1211.96 L1115.62 1211.96 L1116.21 1211.96 L1116.8 1211.96 L1117.38 1211.96 L1117.97 1211.96 L1118.55 1211.96 L1119.14 1211.96 L1119.73 1211.96 L1120.31 1211.96 L1120.9 1211.96 L1121.49 1211.96 L1122.07 1211.96 L1122.66 1211.96 L1123.25 1211.96 L1123.83 1211.96 L1124.42 1211.96 L1125.01 1211.96 L1125.59 1211.96 L1126.18 1211.96 L1126.76 1211.96 L1127.35 1211.96 L1127.94 1211.96 L1128.52 1211.96 L1129.11 1211.96 L1129.7 1211.96 L1130.28 1211.96 L1130.87 1211.96 L1131.46 1211.96 L1132.04 1211.96 L1132.63 1211.96 L1133.21 1211.96 L1133.8 1211.96 L1134.39 1211.96 L1134.97 1211.96 L1135.56 1211.96 L1136.15 1211.96 L1136.73 1211.96 L1137.32 1211.96 L1137.91 1211.96 L1138.49 1211.96 L1139.08 1211.96 L1139.67 1211.96 L1140.25 1211.96 L1140.84 1211.96 L1141.42 1211.96 L1142.01 1211.96 L1142.6 1211.96 L1143.18 1211.96 L1143.77 1211.96 L1144.36 1211.96 L1144.94 1211.96 L1145.53 1211.96 L1146.12 1211.96 L1146.7 1211.96 L1147.29 1211.96 L1147.88 1211.96 L1148.46 1211.96 L1149.05 1211.96 L1149.63 1211.96 L1150.22 1211.96 L1150.81 1211.96 L1151.39 1211.96 L1151.98 1211.96 L1152.57 1211.96 L1153.15 1211.96 L1153.74 1211.96 L1154.33 1211.96 L1154.91 1211.96 L1155.5 1211.96 L1156.09 1211.96 L1156.67 1211.96 L1157.26 1211.96 L1157.84 1211.96 L1158.43 1211.96 L1159.02 1211.96 L1159.6 1211.96 L1160.19 1211.96 L1160.78 1211.96 L1161.36 1211.96 L1161.95 1211.96 L1162.54 1211.96 L1163.12 1211.96 L1163.71 1211.96 L1164.29 1211.96 L1164.88 1211.96 L1165.47 1211.96 L1166.05 1211.96 L1166.64 1211.96 L1167.23 1211.96 L1167.81 1211.96 L1168.4 1211.96 L1168.99 1211.96 L1169.57 1211.96 L1170.16 1211.96 L1170.75 1211.96 L1171.33 1211.96 L1171.92 1211.96 L1172.5 1211.96 L1173.09 1211.96 L1173.68 1211.96 L1174.26 1211.96 L1174.85 1211.96 L1175.44 1211.96 L1176.02 1211.96 L1176.61 1211.96 L1177.2 1211.96 L1177.78 1211.96 L1178.37 1211.96 L1178.96 1211.96 L1179.54 1211.96 L1180.13 1211.96 L1180.71 1211.96 L1181.3 1211.96 L1181.89 1211.96 L1182.47 1211.96 L1183.06 1211.96 L1183.65 1211.96 L1184.23 1211.96 L1184.82 1211.96 L1185.41 1211.96 L1185.99 1211.96 L1186.58 1211.96 L1187.16 1211.96 L1187.75 1211.96 L1188.34 1211.96 L1188.92 1211.96 L1189.51 1211.96 L1190.1 1211.96 L1190.68 1211.96 L1191.27 1211.96 L1191.86 1211.96 L1192.44 1211.96 L1193.03 1211.96 L1193.62 1211.96 L1194.2 1211.96 L1194.79 1211.96 L1195.37 1211.96 L1195.96 1211.96 L1196.55 1211.96 L1197.13 1211.96 L1197.72 1211.96 L1198.31 1211.96 L1198.89 1211.96 L1199.48 1211.96 L1200.07 1211.96 L1200.65 1211.96 L1201.24 1211.96 L1201.83 1211.96 L1202.41 1211.96 L1203 1211.96 L1203.58 1211.96 L1204.17 1211.96 L1204.76 1211.96 L1205.34 1211.96 L1205.93 1211.96 L1206.52 1211.96 L1207.1 1211.96 L1207.69 1211.96 L1208.28 1211.96 L1208.86 1211.96 L1209.45 1211.96 L1210.03 1211.96 L1210.62 1211.96 L1211.21 1211.96 L1211.79 1211.96 L1212.38 1211.96 L1212.97 1211.96 L1213.55 1211.96 L1214.14 1211.96 L1214.73 1211.96 L1215.31 1211.96 L1215.9 1211.96 L1216.49 1211.96 L1217.07 1211.96 L1217.66 1211.96 L1218.24 1211.96 L1218.83 1211.96 L1219.42 1211.96 L1220 1211.96 L1220.59 1211.96 L1221.18 1211.96 L1221.76 1211.96 L1222.35 1211.96 L1222.94 1211.96 L1223.52 1211.96 L1224.11 1211.96 L1224.7 1211.96 L1225.28 1211.96 L1225.87 1211.96 L1226.45 1211.96 L1227.04 1211.96 L1227.63 1211.96 L1228.21 1211.96 L1228.8 1211.96 L1229.39 1211.96 L1229.97 1211.96 L1230.56 1211.96 L1231.15 1211.96 L1231.73 1211.96 L1232.32 1211.96 L1232.91 1211.96 L1233.49 1211.96 L1234.08 1211.96 L1234.66 1211.96 L1235.25 1211.96 L1235.84 1211.96 L1236.42 1211.96 L1237.01 1211.96 L1237.6 1211.96 L1238.18 1211.96 L1238.77 1211.96 L1239.36 1211.96 L1239.94 1211.96 L1240.53 1211.96 L1241.11 1211.96 L1241.7 1211.96 L1242.29 1211.96 L1242.87 1211.96 L1243.46 1211.96 L1244.05 1211.96 L1244.63 1211.96 L1245.22 1211.96 L1245.81 1211.96 L1246.39 1211.96 L1246.98 1211.96 L1247.57 1211.96 L1248.15 1211.96 L1248.74 1211.96 L1249.32 1211.96 L1249.91 1211.96 L1250.5 1211.96 L1251.08 1211.96 L1251.67 1211.96 L1252.26 1211.96 L1252.84 1211.96 L1253.43 1211.96 L1254.02 1211.96 L1254.6 1211.96 L1255.19 1211.96 L1255.78 1211.96 L1256.36 1211.96 L1256.95 1211.96 L1257.53 1211.96 L1258.12 1211.96 L1258.71 1211.96 L1259.29 1211.96 L1259.88 1211.96 L1260.47 1211.96 L1261.05 1211.96 L1261.64 1211.96 L1262.23 1211.96 L1262.81 1211.96 L1263.4 1211.96 L1263.98 1211.96 L1264.57 1211.96 L1265.16 1211.96 L1265.74 1211.96 L1266.33 1211.96 L1266.92 1211.96 L1267.5 1211.96 L1268.09 1211.96 L1268.68 1211.96 L1269.26 1211.96 L1269.85 1211.96 L1270.44 1211.96 L1271.02 1211.96 L1271.61 1211.96 L1272.19 1211.96 L1272.78 1211.96 L1273.37 1211.96 L1273.95 1211.96 L1274.54 1211.96 L1275.13 1211.96 L1275.71 1211.96 L1276.3 1211.96 L1276.89 1211.96 L1277.47 1211.96 L1278.06 1211.96 L1278.65 1211.96 L1279.23 1211.96 L1279.82 1211.96 L1280.4 1211.96 L1280.99 1211.96 L1281.58 1211.96 L1282.16 1211.96 L1282.75 1211.96 L1283.34 1211.96 L1283.92 1211.96 L1284.51 1211.96 L1285.1 1211.96 L1285.68 1211.96 L1286.27 1211.96 L1286.86 1211.96 L1287.44 1211.96 L1288.03 1211.96 L1288.61 1211.96 L1289.2 1211.96 L1289.79 1211.96 L1290.37 1211.96 L1290.96 1211.96 L1291.55 1211.96 L1292.13 1211.96 L1292.72 1211.96 L1293.31 1211.96 L1293.89 1211.96 L1294.48 1211.96 L1295.06 1211.96 L1295.65 1211.96 L1296.24 1211.96 L1296.82 1211.96 L1297.41 1211.96 L1298 1211.96 L1298.58 1211.96 L1299.17 1211.96 L1299.76 1211.96 L1300.34 1211.96 L1300.93 1211.96 L1301.52 1211.96 L1302.1 1211.96 L1302.69 1211.96 L1303.27 1211.96 L1303.86 1211.96 L1304.45 1211.96 L1305.03 1211.96 L1305.62 1211.96 L1306.21 1211.96 L1306.79 1211.96 L1307.38 1211.96 L1307.97 1211.96 L1308.55 1211.96 L1309.14 1211.96 L1309.73 1211.96 L1310.31 1211.96 L1310.9 1211.96 L1311.48 1211.96 L1312.07 1211.96 L1312.66 1211.96 L1313.24 1211.96 L1313.83 1211.96 L1314.42 1211.96 L1315 1211.96 L1315.59 1211.96 L1316.18 1211.96 L1316.76 1211.96 L1317.35 1211.96 L1317.93 1211.96 L1318.52 1211.96 L1319.11 1211.96 L1319.69 1211.96 L1320.28 1211.96 L1320.87 1211.96 L1321.45 1211.96 L1322.04 1211.96 L1322.63 1211.96 L1323.21 1211.96 L1323.8 1211.96 L1324.39 1211.96 L1324.97 1211.96 L1325.56 1211.96 L1326.14 1211.96 L1326.73 1211.96 L1327.32 1211.96 L1327.9 1211.96 L1328.49 1211.96 L1329.08 1211.96 L1329.66 1211.96 L1330.25 1211.96 L1330.84 1211.96 L1331.42 1211.96 L1332.01 1211.96 L1332.6 1211.96 L1333.18 1211.96 L1333.77 1211.96 L1334.35 1211.96 L1334.94 1211.96 L1335.53 1211.96 L1336.11 1211.96 L1336.7 1211.96 L1337.29 1211.96 L1337.87 1211.96 L1338.46 1211.96 L1339.05 1211.96 L1339.63 1211.96 L1340.22 1211.96 L1340.8 1211.96 L1341.39 1211.96 L1341.98 1211.96 L1342.56 1211.96 L1343.15 1211.96 L1343.74 1211.96 L1344.32 1211.96 L1344.91 1211.96 L1345.5 1211.96 L1346.08 1211.96 L1346.67 1211.96 L1347.26 1211.96 L1347.84 1211.96 L1348.43 1211.96 L1349.01 1211.96 L1349.6 1211.96 L1350.19 1211.96 L1350.77 1211.96 L1351.36 1211.96 L1351.95 1211.96 L1352.53 1211.96 L1353.12 1211.96 L1353.71 1211.96 L1354.29 1211.96 L1354.88 1211.96 L1355.47 1211.96 L1356.05 1211.96 L1356.64 1211.96 L1357.22 1211.96 L1357.81 1211.96 L1358.4 1211.96 L1358.98 1211.96 L1359.57 1211.96 L1360.16 1211.96 L1360.74 1211.96 L1361.33 1211.96 L1361.92 1211.96 L1362.5 1211.96 L1363.09 1211.96 L1363.68 1211.96 L1364.26 1211.96 L1364.85 1211.96 L1365.43 1211.96 L1366.02 1211.96 L1366.61 1211.96 L1367.19 1211.96 L1367.78 1211.96 L1368.37 1211.96 L1368.95 1211.96 L1369.54 1211.96 L1370.13 1211.96 L1370.71 1211.96 L1371.3 1211.96 L1371.88 1211.96 L1372.47 1211.96 L1373.06 1211.96 L1373.64 1211.96 L1374.23 1211.96 L1374.82 1211.96 L1375.4 1211.96 L1375.99 1211.96 L1376.58 1211.96 L1377.16 1211.96 L1377.75 1211.96 L1378.34 1211.96 L1378.92 1211.96 L1379.51 1211.96 L1380.09 1211.96 L1380.68 1211.96 L1381.27 1211.96 L1381.85 1211.96 L1382.44 1211.96 L1383.03 1211.96 L1383.61 1211.96 L1384.2 1211.96 L1384.79 1211.96 L1385.37 1211.96 L1385.96 1211.96 L1386.55 1211.96 L1387.13 1211.96 L1387.72 1211.96 L1388.3 1211.96 L1388.89 1211.96 L1389.48 1211.96 L1390.06 1211.96 L1390.65 1211.96 L1391.24 1211.96 L1391.82 1211.96 L1392.41 1211.96 L1393 1211.96 L1393.58 1211.96 L1394.17 1211.96 L1394.75 1211.96 L1395.34 1211.96 L1395.93 1211.96 L1396.51 1211.96 L1397.1 1211.96 L1397.69 1211.96 L1398.27 1211.96 L1398.86 1211.96 L1399.45 1211.96 L1400.03 1211.96 L1400.62 1211.96 L1401.21 1211.96 L1401.79 1211.96 L1402.38 1211.96 L1402.96 1211.96 L1403.55 1211.96 L1404.14 1211.96 L1404.72 1211.96 L1405.31 1211.96 L1405.9 1211.96 L1406.48 1211.96 L1407.07 1211.96 L1407.66 1211.96 L1408.24 1211.96 L1408.83 1211.96 L1409.42 1211.96 L1410 1211.96 L1410.59 1211.96 L1411.17 1211.96 L1411.76 1211.96 L1412.35 1211.96 L1412.93 1211.96 L1413.52 1211.96 L1414.11 1211.96 L1414.69 1211.96 L1415.28 1211.96 L1415.87 1211.96 L1416.45 1211.96 L1417.04 1211.96 L1417.63 1211.96 L1418.21 1211.96 L1418.8 1211.96 L1419.38 1211.96 L1419.97 1211.96 L1420.56 1211.96 L1421.14 1211.96 L1421.73 1211.96 L1422.32 1211.96 L1422.9 1211.96 L1423.49 1211.96 L1424.08 1211.96 L1424.66 1211.96 L1425.25 1211.96 L1425.83 1211.96 L1426.42 1211.96 L1427.01 1211.96 L1427.59 1211.96 L1428.18 1211.96 L1428.77 1211.96 L1429.35 1211.96 L1429.94 1211.96 L1430.53 1211.96 L1431.11 1211.96 L1431.7 1211.96 L1432.29 1211.96 L1432.87 1211.96 L1433.46 1211.96 L1434.04 1211.96 L1434.63 1211.96 L1435.22 1211.96 L1435.8 1211.96 L1436.39 1211.96 L1436.98 1211.96 L1437.56 1211.96 L1438.15 1211.96 L1438.74 1211.96 L1439.32 1211.96 L1439.91 1211.96 L1440.5 1211.96 L1441.08 1211.96 L1441.67 1211.96 L1442.25 1211.96 L1442.84 1211.96 L1443.43 1211.96 L1444.01 1211.96 L1444.6 1211.96 L1445.19 1211.96 L1445.77 1211.96 L1446.36 1211.96 L1446.95 1211.96 L1447.53 1211.96 L1448.12 1211.96 L1448.7 1211.96 L1449.29 1211.96 L1449.88 1211.96 L1450.46 1211.96 L1451.05 1211.96 L1451.64 1211.96 L1452.22 1211.96 L1452.81 1211.96 L1453.4 1211.96 L1453.98 1211.96 L1454.57 1211.96 L1455.16 1211.96 L1455.74 1211.96 L1456.33 1211.96 L1456.91 1211.96 L1457.5 1211.96 L1458.09 1211.96 L1458.67 1211.96 L1459.26 1211.96 L1459.85 1211.96 L1460.43 1211.96 L1461.02 1211.96 L1461.61 1211.96 L1462.19 1211.96 L1462.78 1211.96 L1463.37 1211.96 L1463.95 1211.96 L1464.54 1211.96 L1465.12 1211.96 L1465.71 1211.96 L1466.3 1211.96 L1466.88 1211.96 L1467.47 1211.96 L1468.06 1211.96 L1468.64 1211.96 L1469.23 1211.96 L1469.82 1211.96 L1470.4 1211.96 L1470.99 1211.96 L1471.57 1211.96 L1472.16 1211.96 L1472.75 1211.96 L1473.33 1211.96 L1473.92 1211.96 L1474.51 1211.96 L1475.09 1211.96 L1475.68 1211.96 L1476.27 1211.96 L1476.85 1211.96 L1477.44 1211.96 L1478.03 1211.96 L1478.61 1211.96 L1479.2 1211.96 L1479.78 1211.96 L1480.37 1211.96 L1480.96 1211.96 L1481.54 1211.96 L1482.13 1211.96 L1482.72 1211.96 L1483.3 1211.96 L1483.89 1211.96 L1484.48 1211.96 L1485.06 1211.96 L1485.65 1211.96 L1486.24 1211.96 L1486.82 1211.96 L1487.41 1211.96 L1487.99 1211.96 L1488.58 1211.96 L1489.17 1211.96 L1489.75 1211.96 L1490.34 1211.96 L1490.93 1211.96 L1491.51 1211.96 L1492.1 1211.96 L1492.69 1211.96 L1493.27 1211.96 L1493.86 1211.96 L1494.45 1211.96 L1495.03 1211.96 L1495.62 1211.96 L1496.2 1211.96 L1496.79 1211.96 L1497.38 1211.96 L1497.96 1211.96 L1498.55 1211.96 L1499.14 1211.96 L1499.72 1211.96 L1500.31 1211.96 L1500.9 1211.96 L1501.48 1211.96 L1502.07 1211.96 L1502.65 1211.96 L1503.24 1211.96 L1503.83 1211.96 L1504.41 1211.96 L1505 1211.96 L1505.59 1211.96 L1506.17 1211.96 L1506.76 1211.96 L1507.35 1211.96 L1507.93 1211.96 L1508.52 1211.96 L1509.11 1211.96 L1509.69 1211.96 L1510.28 1211.96 L1510.86 1211.96 L1511.45 1211.96 L1512.04 1211.96 L1512.62 1211.96 L1513.21 1211.96 L1513.8 1211.96 L1514.38 1211.96 L1514.97 1211.96 L1515.56 1211.96 L1516.14 1211.96 L1516.73 1211.96 L1517.32 1211.96 L1517.9 1211.96 L1518.49 1211.96 L1519.07 1211.96 L1519.66 1211.96 L1520.25 1211.96 L1520.83 1211.96 L1521.42 1211.96 L1522.01 1211.96 L1522.59 1211.96 L1523.18 1211.96 L1523.77 1211.96 L1524.35 1211.96 L1524.94 1211.96 L1525.52 1211.96 L1526.11 1211.96 L1526.7 1211.96 L1527.28 1211.96 L1527.87 1211.96 L1528.46 1211.96 L1529.04 1211.96 L1529.63 1211.96 L1530.22 1211.96 L1530.8 1211.96 L1531.39 1211.96 L1531.98 1211.96 L1532.56 1211.96 L1533.15 1211.96 L1533.73 1211.96 L1534.32 1211.96 L1534.91 1211.96 L1535.49 1211.96 L1536.08 1211.96 L1536.67 1211.96 L1537.25 1211.96 L1537.84 1211.96 L1538.43 1211.96 L1539.01 1211.96 L1539.6 1211.96 L1540.19 1211.96 L1540.77 1211.96 L1541.36 1211.96 L1541.94 1211.96 L1542.53 1211.96 L1543.12 1211.96 L1543.7 1211.96 L1544.29 1211.96 L1544.88 1211.96 L1545.46 1211.96 L1546.05 1211.96 L1546.64 1211.96 L1547.22 1211.96 L1547.81 1211.96 L1548.4 1211.96 L1548.98 1211.96 L1549.57 1211.96 L1550.15 1211.96 L1550.74 1211.96 L1551.33 1211.96 L1551.91 1211.96 L1552.5 1211.96 L1553.09 1211.96 L1553.67 1211.96 L1554.26 1211.96 L1554.85 1211.96 L1555.43 1211.96 L1556.02 1211.96 L1556.6 1211.96 L1557.19 1211.96 L1557.78 1211.96 L1558.36 1211.96 L1558.95 1211.96 L1559.54 1211.96 L1560.12 1211.96 L1560.71 1211.96 L1561.3 1211.96 L1561.88 1211.96 L1562.47 1211.96 L1563.06 1211.96 L1563.64 1211.96 L1564.23 1211.96 L1564.81 1211.96 L1565.4 1211.96 L1565.99 1211.96 L1566.57 1211.96 L1567.16 1211.96 L1567.75 1211.96 L1568.33 1211.96 L1568.92 1211.96 L1569.51 1211.96 L1570.09 1211.96 L1570.68 1211.96 L1571.27 1211.96 L1571.85 1211.96 L1572.44 1211.96 L1573.02 1211.96 L1573.61 1211.96 L1574.2 1211.96 L1574.78 1211.96 L1575.37 1211.96 L1575.96 1211.96 L1576.54 1211.96 L1577.13 1211.96 L1577.72 1211.96 L1578.3 1211.96 L1578.89 1211.96 L1579.47 1211.96 L1580.06 1211.96 L1580.65 1211.96 L1581.23 1211.96 L1581.82 1211.96 L1582.41 1211.96 L1582.99 1211.96 L1583.58 1211.96 L1584.17 1211.96 L1584.75 1211.96 L1585.34 1211.96 L1585.93 1211.96 L1586.51 1211.96 L1587.1 1211.96 L1587.68 1211.96 L1588.27 1211.96 L1588.86 1211.96 L1589.44 1211.96 L1590.03 1211.96 L1590.62 1211.96 L1591.2 1211.96 L1591.79 1211.96 L1592.38 1211.96 L1592.96 1211.96 L1593.55 1211.96 L1594.14 1211.96 L1594.72 1211.96 L1595.31 1211.96 L1595.89 1211.96 L1596.48 1211.96 L1597.07 1211.96 L1597.65 1211.96 L1598.24 1211.96 L1598.83 1211.96 L1599.41 1211.96 L1600 1211.96 L1600.59 1211.96 L1601.17 1211.96 L1601.76 1211.96 L1602.34 1211.96 L1602.93 1211.96 L1603.52 1211.96 L1604.1 1211.96 L1604.69 1211.96 L1605.28 1211.96 L1605.86 1211.96 L1606.45 1211.96 L1607.04 1211.96 L1607.62 1211.96 L1608.21 1211.96 L1608.8 1211.96 L1609.38 1211.96 L1609.97 1211.96 L1610.55 1211.96 L1611.14 1211.96 L1611.73 1211.96 L1612.31 1211.96 L1612.9 1211.96 L1613.49 1211.96 L1614.07 1211.96 L1614.66 1211.96 L1615.25 1211.96 L1615.83 1211.96 L1616.42 1211.96 L1617.01 1211.96 L1617.59 1211.96 L1618.18 1211.96 L1618.76 1211.96 L1619.35 1211.96 L1619.94 1211.96 L1620.52 1211.96 L1621.11 1211.96 L1621.7 1211.96 L1622.28 1211.96 L1622.87 1211.96 L1623.46 1211.96 L1624.04 1211.96 L1624.63 1211.96 L1625.22 1211.96 L1625.8 1211.96 L1626.39 1211.96 L1626.97 1211.96 L1627.56 1211.96 L1628.15 1211.96 L1628.73 1211.96 L1629.32 1211.96 L1629.91 1211.96 L1630.49 1211.96 L1631.08 1211.96 L1631.67 1211.96 L1632.25 1211.96 L1632.84 1211.96 L1633.42 1211.96 L1634.01 1211.96 L1634.6 1211.96 L1635.18 1211.96 L1635.77 1211.96 L1636.36 1211.96 L1636.94 1211.96 L1637.53 1211.96 L1638.12 1211.96 L1638.7 1211.96 L1639.29 1211.96 L1639.88 1211.96 L1640.46 1211.96 L1641.05 1211.96 L1641.63 1211.96 L1642.22 1211.96 L1642.81 1211.96 L1643.39 1211.96 L1643.98 1211.96 L1644.57 1211.96 L1645.15 1211.96 L1645.74 1211.96 L1646.33 1211.96 L1646.91 1211.96 L1647.5 1211.96 L1648.09 1211.96 L1648.67 1211.96 L1649.26 1211.96 L1649.84 1211.96 L1650.43 1211.96 L1651.02 1211.96 L1651.6 1211.96 L1652.19 1211.96 L1652.78 1211.96 L1653.36 1211.96 L1653.95 1211.96 L1654.54 1211.96 L1655.12 1211.96 L1655.71 1211.96 L1656.29 1211.96 L1656.88 1211.96 L1657.47 1211.96 L1658.05 1211.96 L1658.64 1211.96 L1659.23 1211.96 L1659.81 1211.96 L1660.4 1211.96 L1660.99 1211.96 L1661.57 1211.96 L1662.16 1211.96 L1662.75 1211.96 L1663.33 1211.96 L1663.92 1211.96 L1664.5 1211.96 L1665.09 1211.96 L1665.68 1211.96 L1666.26 1211.96 L1666.85 1211.96 L1667.44 1211.96 L1668.02 1211.96 L1668.61 1211.96 L1669.2 1211.96 L1669.78 1211.96 L1670.37 1211.96 L1670.96 1211.96 L1671.54 1211.96 L1672.13 1211.96 L1672.71 1211.96 L1673.3 1211.96 L1673.89 1211.96 L1674.47 1211.96 L1675.06 1211.96 L1675.65 1211.96 L1676.23 1211.96 L1676.82 1211.96 L1677.41 1211.96 L1677.99 1211.96 L1678.58 1211.96 L1679.17 1211.96 L1679.75 1211.96 L1680.34 1211.96 L1680.92 1211.96 L1681.51 1211.96 L1682.1 1211.96 L1682.68 1211.96 L1683.27 1211.96 L1683.86 1211.96 L1684.44 1211.96 L1685.03 1211.96 L1685.62 1211.96 L1686.2 1211.96 L1686.79 1211.96 L1687.37 1211.96 L1687.96 1211.96 L1688.55 1211.96 L1689.13 1211.96 L1689.72 1211.96 L1690.31 1211.96 L1690.89 1211.96 L1691.48 1211.96 L1692.07 1211.96 L1692.65 1211.96 L1693.24 1211.96 L1693.83 1211.96 L1694.41 1211.96 L1695 1211.96 L1695.58 1211.96 L1696.17 1211.96 L1696.76 1211.96 L1697.34 1211.96 L1697.93 1211.96 L1698.52 1211.96 L1699.1 1211.96 L1699.69 1211.96 L1700.28 1211.96 L1700.86 1211.96 L1701.45 1211.96 L1702.04 1211.96 L1702.62 1211.96 L1703.21 1211.96 L1703.79 1211.96 L1704.38 1211.96 L1704.97 1211.96 L1705.55 1211.96 L1706.14 1211.96 L1706.73 1211.96 L1707.31 1211.96 L1707.9 1211.96 L1708.49 1211.96 L1709.07 1211.96 L1709.66 1211.96 L1710.24 1211.96 L1710.83 1211.96 L1711.42 1211.96 L1712 1211.96 L1712.59 1211.96 L1713.18 1211.96 L1713.76 1211.96 L1714.35 1211.96 L1714.94 1211.96 L1715.52 1211.96 L1716.11 1211.96 L1716.7 1211.96 L1717.28 1211.96 L1717.87 1211.96 L1718.45 1211.96 L1719.04 1211.96 L1719.63 1211.96 L1720.21 1211.96 L1720.8 1211.96 L1721.39 1211.96 L1721.97 1211.96 L1722.56 1211.96 L1723.15 1211.96 L1723.73 1211.96 L1724.32 1211.96 L1724.91 1211.96 L1725.49 1211.96 L1726.08 1211.96 L1726.66 1211.96 L1727.25 1211.96 L1727.84 1211.96 L1728.42 1211.96 L1729.01 1211.96 L1729.6 1211.96 L1730.18 1211.96 L1730.77 1211.96 L1731.36 1211.96 L1731.94 1211.96 L1732.53 1211.96 L1733.11 1211.96 L1733.7 1211.96 L1734.29 1211.96 L1734.87 1211.96 L1735.46 1211.96 L1736.05 1211.96 L1736.63 1211.96 L1737.22 1211.96 L1737.81 1211.96 L1738.39 1211.96 L1738.98 1211.96 L1739.57 1211.96 L1740.15 1211.96 L1740.74 1211.96 L1741.32 1211.96 L1741.91 1211.96 L1742.5 1211.96 L1743.08 1211.96 L1743.67 1211.96 L1744.26 1211.96 L1744.84 1211.96 L1745.43 1211.96 L1746.02 1211.96 L1746.6 1211.96 L1747.19 1211.96 L1747.78 1211.96 L1748.36 1211.96 L1748.95 1211.96 L1749.53 1211.96 L1750.12 1211.96 L1750.71 1211.96 L1751.29 1211.96 L1751.88 1211.96 L1752.47 1211.96 L1753.05 1211.96 L1753.64 1211.96 L1754.23 1211.96 L1754.81 1211.96 L1755.4 1211.96 L1755.99 1211.96 L1756.57 1211.96 L1757.16 1211.96 L1757.74 1211.96 L1758.33 1211.96 L1758.92 1211.96 L1759.5 1211.96 L1760.09 1211.96 L1760.68 1211.96 L1761.26 1211.96 L1761.85 1211.96 L1762.44 1211.96 L1763.02 1211.96 L1763.61 1211.96 L1764.19 1211.96 L1764.78 1211.96 L1765.37 1211.96 L1765.95 1211.96 L1766.54 1211.96 L1767.13 1211.96 L1767.71 1211.96 L1768.3 1211.96 L1768.89 1211.96 L1769.47 1211.96 L1770.06 1211.96 L1770.65 1211.96 L1771.23 1211.96 L1771.82 1211.96 L1772.4 1211.96 L1772.99 1211.96 L1773.58 1211.96 L1774.16 1211.96 L1774.75 1211.96 L1775.34 1211.96 L1775.92 1211.96 L1776.51 1211.96 L1777.1 1211.96 L1777.68 1211.96 L1778.27 1211.96 L1778.86 1211.96 L1779.44 1211.96 L1780.03 1211.96 L1780.61 1211.96 L1781.2 1211.96 L1781.79 1211.96 L1782.37 1211.96 L1782.96 1211.96 L1783.55 1211.96 L1784.13 1211.96 L1784.72 1211.96 L1785.31 1211.96 L1785.89 1211.96 L1786.48 1211.96 L1787.06 1211.96 L1787.65 1211.96 L1788.24 1211.96 L1788.82 1211.96 L1789.41 1211.96 L1790 1211.96 L1790.58 1211.96 L1791.17 1211.96 L1791.76 1211.96 L1792.34 1211.96 L1792.93 1211.96 L1793.52 1211.96 L1794.1 1211.96 L1794.69 1211.96 L1795.27 1211.96 L1795.86 1211.96 L1796.45 1211.96 L1797.03 1211.96 L1797.62 1211.96 L1798.21 1211.96 L1798.79 1211.96 L1799.38 1211.96 L1799.97 1211.96 L1800.55 1211.96 L1801.14 1211.96 L1801.73 1211.96 L1802.31 1211.96 L1802.9 1211.96 L1803.48 1211.96 L1804.07 1211.96 L1804.66 1211.96 L1805.24 1211.96 L1805.83 1211.96 L1806.42 1211.96 L1807 1211.96 L1807.59 1211.96 L1808.18 1211.96 L1808.76 1211.96 L1809.35 1211.96 L1809.94 1211.96 L1810.52 1211.96 L1811.11 1211.96 L1811.69 1211.96 L1812.28 1211.96 L1812.87 1211.96 L1813.45 1211.96 L1814.04 1211.96 L1814.63 1211.96 L1815.21 1211.96 L1815.8 1211.96 L1816.39 1211.96 L1816.97 1211.96 L1817.56 1211.96 L1818.14 1211.96 L1818.73 1211.96 L1819.32 1211.96 L1819.9 1211.96 L1820.49 1211.96 L1821.08 1211.96 L1821.66 1211.96 L1822.25 1211.96 L1822.84 1211.96 L1823.42 1211.96 L1824.01 1211.96 L1824.6 1211.96 L1825.18 1211.96 L1825.77 1211.96 L1826.35 1211.96 L1826.94 1211.96 L1827.53 1211.96 L1828.11 1211.96 L1828.7 1211.96 L1829.29 1211.96 L1829.87 1211.96 L1830.46 1211.96 L1831.05 1211.96 L1831.63 1211.96 L1832.22 1211.96 L1832.81 1211.96 L1833.39 1211.96 L1833.98 1211.96 L1834.56 1211.96 L1835.15 1211.96 L1835.74 1211.96 L1836.32 1211.96 L1836.91 1211.96 L1837.5 1211.96 L1838.08 1211.96 L1838.67 1211.96 L1839.26 1211.96 L1839.84 1211.96 L1840.43 1211.96 L1841.01 1211.96 L1841.6 1211.96 L1842.19 1211.96 L1842.77 1211.96 L1843.36 1211.96 L1843.95 1211.96 L1844.53 1211.96 L1845.12 1211.96 L1845.71 1211.96 L1846.29 1211.96 L1846.88 1211.96 L1847.47 1211.96 L1848.05 1211.96 L1848.64 1211.96 L1849.22 1211.96 L1849.81 1211.96 L1850.4 1211.96 L1850.98 1211.96 L1851.57 1211.96 L1852.16 1211.96 L1852.74 1211.96 L1853.33 1211.96 L1853.92 1211.96 L1854.5 1211.96 L1855.09 1211.96 L1855.68 1211.96 L1856.26 1211.96 L1856.85 1211.96 L1857.43 1211.96 L1858.02 1211.96 L1858.61 1211.96 L1859.19 1211.96 L1859.78 1211.96 L1860.37 1211.96 L1860.95 1211.96 L1861.54 1211.96 L1862.13 1211.96 L1862.71 1211.96 L1863.3 1211.96 L1863.88 1211.96 L1864.47 1211.96 L1865.06 1211.96 L1865.64 1211.96 L1866.23 1211.96 L1866.82 1211.96 L1867.4 1211.96 L1867.99 1211.96 L1868.58 1211.96 L1869.16 1211.96 L1869.75 1211.96 L1870.34 1211.96 L1870.92 1211.96 L1871.51 1211.96 L1872.09 1211.96 L1872.68 1211.96 L1873.27 1211.96 L1873.85 1211.96 L1874.44 1211.96 L1875.03 1211.96 L1875.61 1211.96 L1876.2 1211.96 L1876.79 1211.96 L1877.37 1211.96 L1877.96 1211.96 L1878.55 1211.96 L1879.13 1211.96 L1879.72 1211.96 L1880.3 1211.96 L1880.89 1211.96 L1881.48 1211.96 L1882.06 1211.96 L1882.65 1211.96 L1883.24 1211.96 L1883.82 1211.96 L1884.41 1211.96 L1885 1211.96 L1885.58 1211.96 L1886.17 1211.96 L1886.76 1211.96 L1887.34 1211.96 L1887.93 1211.96 L1888.51 1211.96 L1889.1 1211.96 L1889.69 1211.96 L1890.27 1211.96 L1890.86 1211.96 L1891.45 1211.96 L1892.03 1211.96 L1892.62 1211.96 L1893.21 1211.96 L1893.79 1211.96 L1894.38 1211.96 L1894.96 1211.96 L1895.55 1211.96 L1896.14 1211.96 L1896.72 1211.96 L1897.31 1211.96 L1897.9 1211.96 L1898.48 1211.96 L1899.07 1211.96 L1899.66 1211.96 L1900.24 1211.96 L1900.83 1211.96 L1901.42 1211.96 L1902 1211.96 L1902.59 1211.96 L1903.17 1211.96 L1903.76 1211.96 L1904.35 1211.96 L1904.93 1211.96 L1905.52 1211.96 L1906.11 1211.96 L1906.69 1211.96 L1907.28 1211.96 L1907.87 1211.96 L1908.45 1211.96 L1909.04 1211.96 L1909.63 1211.96 L1910.21 1211.96 L1910.8 1211.96 L1911.38 1211.96 L1911.97 1211.96 L1912.56 1211.96 L1913.14 1211.96 L1913.73 1211.96 L1914.32 1211.96 L1914.9 1211.96 L1915.49 1211.96 L1916.08 1211.96 L1916.66 1211.96 L1917.25 1211.96 L1917.83 1211.96 L1918.42 1211.96 L1919.01 1211.96 L1919.59 1211.96 L1920.18 1211.96 L1920.77 1211.96 L1921.35 1211.96 L1921.94 1211.96 L1922.53 1211.96 L1923.11 1211.96 L1923.7 1211.96 L1924.29 1211.96 L1924.87 1211.96 L1925.46 1211.96 L1926.04 1211.96 L1926.63 1211.96 L1927.22 1211.96 L1927.8 1211.96 L1928.39 1211.96 L1928.98 1211.96 L1929.56 1211.96 L1930.15 1211.96 L1930.74 1211.96 L1931.32 1211.96 L1931.91 1211.96 L1932.5 1211.96 L1933.08 1211.96 L1933.67 1211.96 L1934.25 1211.96 L1934.84 1211.96 L1935.43 1211.96 L1936.01 1211.96 L1936.6 1211.96 L1937.19 1211.96 L1937.77 1211.96 L1938.36 1211.96 L1938.95 1211.96 L1939.53 1211.96 L1940.12 1211.96 L1940.71 1211.96 L1941.29 1211.96 L1941.88 1211.96 L1942.46 1211.96 L1943.05 1211.96 L1943.64 1211.96 L1944.22 1211.96 L1944.81 1211.96 L1945.4 1211.96 L1945.98 1211.96 L1946.57 1211.96 L1947.16 1211.96 L1947.74 1211.96 L1948.33 1211.96 L1948.91 1211.96 L1949.5 1211.96 L1950.09 1211.96 L1950.67 1211.96 L1951.26 1211.96 L1951.85 1211.96 L1952.43 1211.96 L1953.02 1211.96 L1953.61 1211.96 L1954.19 1211.96 L1954.78 1211.96 L1955.37 1211.96 L1955.95 1211.96 L1956.54 1211.96 L1957.12 1211.96 L1957.71 1211.96 L1958.3 1211.96 L1958.88 1211.96 L1959.47 1211.96 L1960.06 1211.96 L1960.64 1211.96 L1961.23 1211.96 L1961.82 1211.96 L1962.4 1211.96 L1962.99 1211.96 L1963.58 1211.96 L1964.16 1211.96 L1964.75 1211.96 L1965.33 1211.96 L1965.92 1211.96 L1966.51 1211.96 L1967.09 1211.96 L1967.68 1211.96 L1968.27 1211.96 L1968.85 1211.96 L1969.44 1211.96 L1970.03 1211.96 L1970.61 1211.96 L1971.2 1211.96 L1971.78 1211.96 L1972.37 1211.96 L1972.96 1211.96 L1973.54 1211.96 L1974.13 1211.96 L1974.72 1211.96 L1975.3 1211.96 L1975.89 1211.96 L1976.48 1211.96 L1977.06 1211.96 L1977.65 1211.96 L1978.24 1211.96 L1978.82 1211.96 L1979.41 1211.96 L1979.99 1211.96 L1980.58 1211.96 L1981.17 1211.96 L1981.75 1211.96 L1982.34 1211.96 L1982.93 1211.96 L1983.51 1211.96 L1984.1 1211.96 L1984.69 1211.96 L1985.27 1211.96 L1985.86 1211.96 L1986.45 1211.96 L1987.03 1211.96 L1987.62 1211.96 L1988.2 1211.96 L1988.79 1211.96 L1989.38 1211.96 L1989.96 1211.96 L1990.55 1211.96 L1991.14 1211.96 L1991.72 1211.96 L1992.31 1211.96 L1992.9 1211.96 L1993.48 1211.96 L1994.07 1211.96 L1994.65 1211.96 L1995.24 1211.96 L1995.83 1211.96 L1996.41 1211.96 L1997 1211.96 L1997.59 1211.96 L1998.17 1211.96 L1998.76 1211.96 L1999.35 1211.96 L1999.93 1211.96 L2000.52 1211.96 L2001.11 1211.96 L2001.69 1211.96 L2002.28 1211.96 L2002.86 1211.96 L2003.45 1211.96 L2004.04 1211.96 L2004.62 1211.96 L2005.21 1211.96 L2005.8 1211.96 L2006.38 1211.96 L2006.97 1211.96 L2007.56 1211.96 L2008.14 1211.96 L2008.73 1211.96 L2009.32 1211.96 L2009.9 1211.96 L2010.49 1211.96 L2011.07 1211.96 L2011.66 1211.96 L2012.25 1211.96 L2012.83 1211.96 L2013.42 1211.96 L2014.01 1211.96 L2014.59 1211.96 L2015.18 1211.96 L2015.77 1211.96 L2016.35 1211.96 L2016.94 1211.96 L2017.53 1211.96 L2018.11 1211.96 L2018.7 1211.96 L2019.28 1211.96 L2019.87 1211.96 L2020.46 1211.96 L2021.04 1211.96 L2021.63 1211.96 L2022.22 1211.96 L2022.8 1211.96 L2023.39 1211.96 L2023.98 1211.96 L2024.56 1211.96 L2025.15 1211.96 L2025.73 1211.96 L2026.32 1211.96 L2026.91 1211.96 L2027.49 1211.96 L2028.08 1211.96 L2028.67 1211.96 L2029.25 1211.96 L2029.84 1211.96 L2030.43 1211.96 L2031.01 1211.96 L2031.6 1211.96 L2032.19 1211.96 L2032.77 1211.96 L2033.36 1211.96 L2033.94 1211.96 L2034.53 1211.96 L2035.12 1211.96 L2035.7 1211.96 L2036.29 1211.96 L2036.88 1211.96 L2037.46 1211.96 L2038.05 1211.96 L2038.64 1211.96 L2039.22 1211.96 L2039.81 1211.96 L2040.4 1211.96 L2040.98 1211.96 L2041.57 1211.96 L2042.15 1211.96 L2042.74 1211.96 L2043.33 1211.96 L2043.91 1211.96 L2044.5 1211.96 L2045.09 1211.96 L2045.67 1211.96 L2046.26 1211.96 L2046.85 1211.96 L2047.43 1211.96 L2048.02 1211.96 L2048.6 1211.96 L2049.19 1211.96 L2049.78 1211.96 L2050.36 1211.96 L2050.95 1211.96 L2051.54 1211.96 L2052.12 1211.96 L2052.71 1211.96 L2053.3 1211.96 L2053.88 1211.96 L2054.47 1211.96 L2055.06 1211.96 L2055.64 1211.96 L2056.23 1211.96 L2056.81 1211.96 L2057.4 1211.96 L2057.99 1211.96 L2058.57 1211.96 L2059.16 1211.96 L2059.75 1211.96 L2060.33 1211.96 L2060.92 1211.96 L2061.51 1211.96 L2062.09 1211.96 L2062.68 1211.96 L2063.27 1211.96 L2063.85 1211.96 L2064.44 1211.96 L2065.02 1211.96 L2065.61 1211.96 L2066.2 1211.96 L2066.78 1211.96 L2067.37 1211.96 L2067.96 1211.96 L2068.54 1211.96 L2069.13 1211.96 L2069.72 1211.96 L2070.3 1211.96 L2070.89 1211.96 L2071.48 1211.96 L2072.06 1211.96 L2072.65 1211.96 L2073.23 1211.96 L2073.82 1211.96 L2074.41 1211.96 L2074.99 1211.96 L2075.58 1211.96 L2076.17 1211.96 L2076.75 1211.96 L2077.34 1211.96 L2077.93 1211.96 L2078.51 1211.96 L2079.1 1211.96 L2079.68 1211.96 L2080.27 1211.96 L2080.86 1211.96 L2081.44 1211.96 L2082.03 1211.96 L2082.62 1211.96 L2083.2 1211.96 L2083.79 1211.96 L2084.38 1211.96 L2084.96 1211.96 L2085.55 1211.96 L2086.14 1211.96 L2086.72 1211.96 L2087.31 1211.96 L2087.89 1211.96 L2088.48 1211.96 L2089.07 1211.96 L2089.65 1211.96 L2090.24 1211.96 L2090.83 1211.96 L2091.41 1211.96 L2092 1211.96 L2092.59 1211.96 L2093.17 1211.96 L2093.76 1211.96 L2094.35 1211.96 L2094.93 1211.96 L2095.52 1211.96 L2096.1 1211.96 L2096.69 1211.96 L2097.28 1211.96 L2097.86 1211.96 L2098.45 1211.96 L2099.04 1211.96 L2099.62 1211.96 L2100.21 1211.96 L2100.8 1211.96 L2101.38 1211.96 L2101.97 1211.96 L2102.55 1211.96 L2103.14 1211.96 L2103.73 1211.96 L2104.31 1211.96 L2104.9 1211.96 L2105.49 1211.96 L2106.07 1211.96 L2106.66 1211.96 L2107.25 1211.96 L2107.83 1211.96 L2108.42 1211.96 L2109.01 1211.96 L2109.59 1211.96 L2110.18 1211.96 L2110.76 1211.96 L2111.35 1211.96 L2111.94 1211.96 L2112.52 1211.96 L2113.11 1211.96 L2113.7 1211.96 L2114.28 1211.96 L2114.87 1211.96 L2115.46 1211.96 L2116.04 1211.96 L2116.63 1211.96 L2117.22 1211.96 L2117.8 1211.96 L2118.39 1211.96 L2118.97 1211.96 L2119.56 1211.96 L2120.15 1211.96 L2120.73 1211.96 L2121.32 1211.96 L2121.91 1211.96 L2122.49 1211.96 L2123.08 1211.96 L2123.67 1211.96 L2124.25 1211.96 L2124.84 1211.96 L2125.42 1211.96 L2126.01 1211.96 L2126.6 1211.96 L2127.18 1211.96 L2127.77 1211.96 L2128.36 1211.96 L2128.94 1211.96 L2129.53 1211.96 L2130.12 1211.96 L2130.7 1211.96 L2131.29 1211.96 L2131.88 1211.96 L2132.46 1211.96 L2133.05 1211.96 L2133.63 1211.96 L2134.22 1211.96 L2134.81 1211.96 L2135.39 1211.96 L2135.98 1211.96 L2136.57 1211.96 L2137.15 1211.96 L2137.74 1211.96 L2138.33 1211.96 L2138.91 1211.96 L2139.5 1211.96 L2140.09 1211.96 L2140.67 1211.96 L2141.26 1211.96 L2141.84 1211.96 L2142.43 1211.96 L2143.02 1211.96 L2143.6 1211.96 L2144.19 1211.96 L2144.78 1211.96 L2145.36 1211.96 L2145.95 1211.96 L2146.54 1211.96 L2147.12 1211.96 L2147.71 1211.96 L2148.3 1211.96 L2148.88 1211.96 L2149.47 1211.96 L2150.05 1211.96 L2150.64 1211.96 L2151.23 1211.96 L2151.81 1211.96 L2152.4 1211.96 L2152.99 1211.96 L2153.57 1211.96 L2154.16 1211.96 L2154.75 1211.96 L2155.33 1211.96 L2155.92 1211.96 L2156.5 1211.96 L2157.09 1211.96 L2157.68 1211.96 L2158.26 1211.96 L2158.26 1211.18 L2157.68 1211.18 L2157.09 1211.18 L2156.5 1211.18 L2155.92 1211.18 L2155.33 1211.18 L2154.75 1211.18 L2154.16 1211.18 L2153.57 1211.18 L2152.99 1211.18 L2152.4 1211.18 L2151.81 1211.18 L2151.23 1211.18 L2150.64 1211.18 L2150.05 1211.18 L2149.47 1211.18 L2148.88 1211.18 L2148.3 1211.18 L2147.71 1211.18 L2147.12 1211.18 L2146.54 1211.18 L2145.95 1211.18 L2145.36 1211.18 L2144.78 1211.18 L2144.19 1211.18 L2143.6 1211.18 L2143.02 1211.18 L2142.43 1211.18 L2141.84 1211.18 L2141.26 1211.18 L2140.67 1211.18 L2140.09 1211.18 L2139.5 1211.18 L2138.91 1211.18 L2138.33 1211.18 L2137.74 1211.18 L2137.15 1211.18 L2136.57 1211.18 L2135.98 1211.18 L2135.39 1211.18 L2134.81 1211.18 L2134.22 1211.18 L2133.63 1211.18 L2133.05 1211.18 L2132.46 1211.18 L2131.88 1211.18 L2131.29 1211.18 L2130.7 1211.18 L2130.12 1211.18 L2129.53 1211.18 L2128.94 1211.18 L2128.36 1211.18 L2127.77 1211.18 L2127.18 1211.18 L2126.6 1211.18 L2126.01 1211.18 L2125.42 1211.18 L2124.84 1211.18 L2124.25 1211.18 L2123.67 1211.18 L2123.08 1211.18 L2122.49 1211.18 L2121.91 1211.18 L2121.32 1211.18 L2120.73 1211.18 L2120.15 1211.18 L2119.56 1211.18 L2118.97 1211.18 L2118.39 1211.18 L2117.8 1211.18 L2117.22 1211.18 L2116.63 1211.18 L2116.04 1211.18 L2115.46 1211.18 L2114.87 1211.18 L2114.28 1211.18 L2113.7 1211.18 L2113.11 1211.18 L2112.52 1211.18 L2111.94 1211.18 L2111.35 1211.18 L2110.76 1211.18 L2110.18 1211.18 L2109.59 1211.18 L2109.01 1211.18 L2108.42 1211.18 L2107.83 1211.18 L2107.25 1211.18 L2106.66 1211.18 L2106.07 1211.18 L2105.49 1211.18 L2104.9 1211.18 L2104.31 1211.18 L2103.73 1211.18 L2103.14 1211.18 L2102.55 1211.18 L2101.97 1211.18 L2101.38 1211.18 L2100.8 1211.18 L2100.21 1211.18 L2099.62 1211.18 L2099.04 1211.18 L2098.45 1211.18 L2097.86 1211.18 L2097.28 1211.18 L2096.69 1211.18 L2096.1 1211.18 L2095.52 1211.18 L2094.93 1211.18 L2094.35 1211.18 L2093.76 1211.18 L2093.17 1211.18 L2092.59 1211.18 L2092 1211.18 L2091.41 1211.18 L2090.83 1211.18 L2090.24 1211.18 L2089.65 1211.18 L2089.07 1211.18 L2088.48 1211.18 L2087.89 1211.18 L2087.31 1211.18 L2086.72 1211.18 L2086.14 1211.18 L2085.55 1211.18 L2084.96 1211.18 L2084.38 1211.18 L2083.79 1211.18 L2083.2 1211.18 L2082.62 1211.18 L2082.03 1211.18 L2081.44 1211.18 L2080.86 1211.18 L2080.27 1211.18 L2079.68 1211.18 L2079.1 1211.18 L2078.51 1211.18 L2077.93 1211.18 L2077.34 1211.18 L2076.75 1211.18 L2076.17 1211.18 L2075.58 1211.18 L2074.99 1211.18 L2074.41 1211.18 L2073.82 1211.18 L2073.23 1211.18 L2072.65 1211.18 L2072.06 1211.18 L2071.48 1211.18 L2070.89 1211.18 L2070.3 1211.18 L2069.72 1211.18 L2069.13 1211.18 L2068.54 1211.18 L2067.96 1211.18 L2067.37 1211.18 L2066.78 1211.18 L2066.2 1211.18 L2065.61 1211.18 L2065.02 1211.18 L2064.44 1211.18 L2063.85 1211.18 L2063.27 1211.18 L2062.68 1211.18 L2062.09 1211.18 L2061.51 1211.18 L2060.92 1211.18 L2060.33 1211.18 L2059.75 1211.18 L2059.16 1211.18 L2058.57 1211.18 L2057.99 1211.18 L2057.4 1211.18 L2056.81 1211.18 L2056.23 1211.18 L2055.64 1211.18 L2055.06 1211.18 L2054.47 1211.18 L2053.88 1211.18 L2053.3 1211.18 L2052.71 1211.18 L2052.12 1211.18 L2051.54 1211.18 L2050.95 1211.18 L2050.36 1211.18 L2049.78 1211.18 L2049.19 1211.18 L2048.6 1211.18 L2048.02 1211.18 L2047.43 1211.18 L2046.85 1211.18 L2046.26 1211.18 L2045.67 1211.18 L2045.09 1211.18 L2044.5 1211.18 L2043.91 1211.18 L2043.33 1211.18 L2042.74 1211.18 L2042.15 1211.18 L2041.57 1211.18 L2040.98 1211.18 L2040.4 1211.18 L2039.81 1211.18 L2039.22 1211.18 L2038.64 1211.18 L2038.05 1211.18 L2037.46 1211.18 L2036.88 1211.18 L2036.29 1211.18 L2035.7 1211.18 L2035.12 1211.18 L2034.53 1211.18 L2033.94 1211.18 L2033.36 1211.18 L2032.77 1211.18 L2032.19 1211.18 L2031.6 1211.18 L2031.01 1211.18 L2030.43 1211.18 L2029.84 1211.18 L2029.25 1211.18 L2028.67 1211.18 L2028.08 1211.18 L2027.49 1211.18 L2026.91 1211.18 L2026.32 1211.18 L2025.73 1211.18 L2025.15 1211.18 L2024.56 1211.18 L2023.98 1211.18 L2023.39 1211.18 L2022.8 1211.18 L2022.22 1211.18 L2021.63 1211.18 L2021.04 1211.18 L2020.46 1211.18 L2019.87 1211.18 L2019.28 1211.18 L2018.7 1211.18 L2018.11 1211.18 L2017.53 1211.18 L2016.94 1211.18 L2016.35 1211.18 L2015.77 1211.18 L2015.18 1211.18 L2014.59 1211.18 L2014.01 1211.18 L2013.42 1211.18 L2012.83 1211.18 L2012.25 1211.18 L2011.66 1211.18 L2011.07 1211.18 L2010.49 1211.18 L2009.9 1211.18 L2009.32 1211.18 L2008.73 1211.18 L2008.14 1211.18 L2007.56 1211.18 L2006.97 1211.18 L2006.38 1211.18 L2005.8 1211.18 L2005.21 1211.18 L2004.62 1211.18 L2004.04 1211.18 L2003.45 1211.18 L2002.86 1211.18 L2002.28 1211.18 L2001.69 1211.18 L2001.11 1211.18 L2000.52 1211.18 L1999.93 1211.18 L1999.35 1211.18 L1998.76 1211.18 L1998.17 1211.18 L1997.59 1211.18 L1997 1211.18 L1996.41 1211.18 L1995.83 1211.18 L1995.24 1211.18 L1994.65 1211.18 L1994.07 1211.18 L1993.48 1211.18 L1992.9 1211.18 L1992.31 1211.18 L1991.72 1211.18 L1991.14 1211.18 L1990.55 1211.18 L1989.96 1211.18 L1989.38 1211.18 L1988.79 1211.18 L1988.2 1211.18 L1987.62 1211.18 L1987.03 1211.18 L1986.45 1211.18 L1985.86 1211.18 L1985.27 1211.18 L1984.69 1211.18 L1984.1 1211.18 L1983.51 1211.18 L1982.93 1211.18 L1982.34 1211.18 L1981.75 1211.18 L1981.17 1211.18 L1980.58 1211.18 L1979.99 1211.18 L1979.41 1211.18 L1978.82 1211.18 L1978.24 1211.18 L1977.65 1211.18 L1977.06 1211.18 L1976.48 1211.18 L1975.89 1211.18 L1975.3 1211.18 L1974.72 1211.18 L1974.13 1211.18 L1973.54 1211.18 L1972.96 1211.18 L1972.37 1211.18 L1971.78 1211.18 L1971.2 1211.18 L1970.61 1211.18 L1970.03 1211.18 L1969.44 1211.18 L1968.85 1211.18 L1968.27 1211.18 L1967.68 1211.18 L1967.09 1211.18 L1966.51 1211.18 L1965.92 1211.18 L1965.33 1211.18 L1964.75 1211.18 L1964.16 1211.18 L1963.58 1211.18 L1962.99 1211.18 L1962.4 1211.18 L1961.82 1211.18 L1961.23 1211.18 L1960.64 1211.18 L1960.06 1211.18 L1959.47 1211.18 L1958.88 1211.18 L1958.3 1211.18 L1957.71 1211.18 L1957.12 1211.18 L1956.54 1211.18 L1955.95 1211.18 L1955.37 1211.18 L1954.78 1211.18 L1954.19 1211.18 L1953.61 1211.18 L1953.02 1211.18 L1952.43 1211.18 L1951.85 1211.18 L1951.26 1211.18 L1950.67 1211.18 L1950.09 1211.18 L1949.5 1211.18 L1948.91 1211.18 L1948.33 1211.18 L1947.74 1211.18 L1947.16 1211.18 L1946.57 1211.18 L1945.98 1211.18 L1945.4 1211.18 L1944.81 1211.18 L1944.22 1211.18 L1943.64 1211.18 L1943.05 1211.18 L1942.46 1211.18 L1941.88 1211.18 L1941.29 1211.18 L1940.71 1211.18 L1940.12 1211.18 L1939.53 1211.18 L1938.95 1211.18 L1938.36 1211.18 L1937.77 1211.18 L1937.19 1211.18 L1936.6 1211.18 L1936.01 1211.18 L1935.43 1211.18 L1934.84 1211.18 L1934.25 1211.18 L1933.67 1211.18 L1933.08 1211.18 L1932.5 1211.18 L1931.91 1211.18 L1931.32 1211.18 L1930.74 1211.18 L1930.15 1211.18 L1929.56 1211.18 L1928.98 1211.18 L1928.39 1211.18 L1927.8 1211.18 L1927.22 1211.18 L1926.63 1211.18 L1926.04 1211.18 L1925.46 1211.18 L1924.87 1211.18 L1924.29 1211.18 L1923.7 1211.18 L1923.11 1211.18 L1922.53 1211.18 L1921.94 1211.18 L1921.35 1211.18 L1920.77 1211.18 L1920.18 1211.18 L1919.59 1211.18 L1919.01 1211.18 L1918.42 1211.18 L1917.83 1211.18 L1917.25 1211.18 L1916.66 1211.18 L1916.08 1211.18 L1915.49 1211.18 L1914.9 1211.18 L1914.32 1211.18 L1913.73 1211.18 L1913.14 1211.18 L1912.56 1211.18 L1911.97 1211.18 L1911.38 1211.18 L1910.8 1211.18 L1910.21 1211.18 L1909.63 1211.18 L1909.04 1211.18 L1908.45 1211.18 L1907.87 1211.18 L1907.28 1211.18 L1906.69 1211.18 L1906.11 1211.18 L1905.52 1211.18 L1904.93 1211.18 L1904.35 1211.18 L1903.76 1211.18 L1903.17 1211.18 L1902.59 1211.18 L1902 1211.18 L1901.42 1211.18 L1900.83 1211.18 L1900.24 1211.18 L1899.66 1211.18 L1899.07 1211.18 L1898.48 1211.18 L1897.9 1211.18 L1897.31 1211.18 L1896.72 1211.18 L1896.14 1211.18 L1895.55 1211.18 L1894.96 1211.18 L1894.38 1211.18 L1893.79 1211.18 L1893.21 1211.18 L1892.62 1211.18 L1892.03 1211.18 L1891.45 1211.18 L1890.86 1211.18 L1890.27 1211.18 L1889.69 1211.18 L1889.1 1211.18 L1888.51 1211.18 L1887.93 1211.18 L1887.34 1211.18 L1886.76 1211.18 L1886.17 1211.18 L1885.58 1211.18 L1885 1211.18 L1884.41 1211.18 L1883.82 1211.18 L1883.24 1211.18 L1882.65 1211.18 L1882.06 1211.18 L1881.48 1211.18 L1880.89 1211.18 L1880.3 1211.18 L1879.72 1211.18 L1879.13 1211.18 L1878.55 1211.18 L1877.96 1211.18 L1877.37 1211.18 L1876.79 1211.18 L1876.2 1211.18 L1875.61 1211.18 L1875.03 1211.18 L1874.44 1211.18 L1873.85 1211.18 L1873.27 1211.18 L1872.68 1211.18 L1872.09 1211.18 L1871.51 1211.18 L1870.92 1211.18 L1870.34 1211.18 L1869.75 1211.18 L1869.16 1211.18 L1868.58 1211.18 L1867.99 1211.18 L1867.4 1211.18 L1866.82 1211.18 L1866.23 1211.18 L1865.64 1211.18 L1865.06 1211.18 L1864.47 1211.18 L1863.88 1211.18 L1863.3 1211.18 L1862.71 1211.18 L1862.13 1211.18 L1861.54 1211.18 L1860.95 1211.18 L1860.37 1211.18 L1859.78 1211.18 L1859.19 1211.18 L1858.61 1211.18 L1858.02 1211.18 L1857.43 1211.18 L1856.85 1211.18 L1856.26 1211.18 L1855.68 1211.18 L1855.09 1211.18 L1854.5 1211.18 L1853.92 1211.18 L1853.33 1211.18 L1852.74 1211.18 L1852.16 1211.18 L1851.57 1211.18 L1850.98 1211.18 L1850.4 1211.18 L1849.81 1211.18 L1849.22 1211.18 L1848.64 1211.18 L1848.05 1211.18 L1847.47 1211.18 L1846.88 1211.18 L1846.29 1211.18 L1845.71 1211.18 L1845.12 1211.18 L1844.53 1211.18 L1843.95 1211.18 L1843.36 1211.18 L1842.77 1211.18 L1842.19 1211.18 L1841.6 1211.18 L1841.01 1211.18 L1840.43 1211.18 L1839.84 1211.18 L1839.26 1211.18 L1838.67 1211.18 L1838.08 1211.18 L1837.5 1211.18 L1836.91 1211.18 L1836.32 1211.18 L1835.74 1211.18 L1835.15 1211.18 L1834.56 1211.18 L1833.98 1211.18 L1833.39 1211.18 L1832.81 1211.18 L1832.22 1211.18 L1831.63 1211.18 L1831.05 1211.18 L1830.46 1211.18 L1829.87 1211.18 L1829.29 1211.18 L1828.7 1211.18 L1828.11 1211.18 L1827.53 1211.18 L1826.94 1211.18 L1826.35 1211.18 L1825.77 1211.18 L1825.18 1211.18 L1824.6 1211.18 L1824.01 1211.18 L1823.42 1211.18 L1822.84 1211.18 L1822.25 1211.18 L1821.66 1211.18 L1821.08 1211.18 L1820.49 1211.18 L1819.9 1211.18 L1819.32 1211.18 L1818.73 1211.18 L1818.14 1211.18 L1817.56 1211.18 L1816.97 1211.18 L1816.39 1211.18 L1815.8 1211.18 L1815.21 1211.18 L1814.63 1211.18 L1814.04 1211.18 L1813.45 1211.18 L1812.87 1211.18 L1812.28 1211.18 L1811.69 1211.18 L1811.11 1211.18 L1810.52 1211.18 L1809.94 1211.18 L1809.35 1211.18 L1808.76 1211.18 L1808.18 1211.18 L1807.59 1211.18 L1807 1211.18 L1806.42 1211.18 L1805.83 1211.18 L1805.24 1211.18 L1804.66 1211.18 L1804.07 1211.18 L1803.48 1211.18 L1802.9 1211.18 L1802.31 1211.18 L1801.73 1211.18 L1801.14 1211.18 L1800.55 1211.18 L1799.97 1211.18 L1799.38 1211.18 L1798.79 1211.18 L1798.21 1211.18 L1797.62 1211.18 L1797.03 1211.18 L1796.45 1211.18 L1795.86 1211.18 L1795.27 1211.18 L1794.69 1211.18 L1794.1 1211.18 L1793.52 1211.18 L1792.93 1211.18 L1792.34 1211.18 L1791.76 1211.18 L1791.17 1211.18 L1790.58 1211.18 L1790 1211.18 L1789.41 1211.18 L1788.82 1211.18 L1788.24 1211.18 L1787.65 1211.18 L1787.06 1211.18 L1786.48 1211.18 L1785.89 1211.18 L1785.31 1211.18 L1784.72 1211.18 L1784.13 1211.18 L1783.55 1211.18 L1782.96 1211.18 L1782.37 1211.18 L1781.79 1211.18 L1781.2 1211.18 L1780.61 1211.18 L1780.03 1211.18 L1779.44 1211.18 L1778.86 1211.18 L1778.27 1211.18 L1777.68 1211.18 L1777.1 1211.18 L1776.51 1211.18 L1775.92 1211.18 L1775.34 1211.18 L1774.75 1211.18 L1774.16 1211.18 L1773.58 1211.18 L1772.99 1211.18 L1772.4 1211.18 L1771.82 1211.18 L1771.23 1211.18 L1770.65 1211.18 L1770.06 1211.18 L1769.47 1211.18 L1768.89 1211.18 L1768.3 1211.18 L1767.71 1211.18 L1767.13 1211.18 L1766.54 1211.18 L1765.95 1211.18 L1765.37 1211.18 L1764.78 1211.18 L1764.19 1211.18 L1763.61 1211.18 L1763.02 1211.18 L1762.44 1211.18 L1761.85 1211.18 L1761.26 1211.18 L1760.68 1211.18 L1760.09 1211.18 L1759.5 1211.18 L1758.92 1211.18 L1758.33 1211.18 L1757.74 1211.18 L1757.16 1211.18 L1756.57 1211.18 L1755.99 1211.18 L1755.4 1211.18 L1754.81 1211.18 L1754.23 1211.18 L1753.64 1211.18 L1753.05 1211.18 L1752.47 1211.18 L1751.88 1211.18 L1751.29 1211.18 L1750.71 1211.18 L1750.12 1211.18 L1749.53 1211.18 L1748.95 1211.18 L1748.36 1211.18 L1747.78 1211.18 L1747.19 1211.18 L1746.6 1211.18 L1746.02 1211.18 L1745.43 1211.18 L1744.84 1211.18 L1744.26 1211.18 L1743.67 1211.18 L1743.08 1211.18 L1742.5 1211.18 L1741.91 1211.18 L1741.32 1211.18 L1740.74 1211.18 L1740.15 1211.18 L1739.57 1211.18 L1738.98 1211.18 L1738.39 1211.18 L1737.81 1211.18 L1737.22 1211.18 L1736.63 1211.18 L1736.05 1211.18 L1735.46 1211.18 L1734.87 1211.18 L1734.29 1211.18 L1733.7 1211.18 L1733.11 1211.18 L1732.53 1211.18 L1731.94 1211.18 L1731.36 1211.18 L1730.77 1211.18 L1730.18 1211.18 L1729.6 1211.18 L1729.01 1211.18 L1728.42 1211.18 L1727.84 1211.18 L1727.25 1211.18 L1726.66 1211.18 L1726.08 1211.18 L1725.49 1211.18 L1724.91 1211.18 L1724.32 1211.18 L1723.73 1211.18 L1723.15 1211.18 L1722.56 1211.18 L1721.97 1211.18 L1721.39 1211.18 L1720.8 1211.18 L1720.21 1211.18 L1719.63 1211.18 L1719.04 1211.18 L1718.45 1211.18 L1717.87 1211.18 L1717.28 1211.18 L1716.7 1211.18 L1716.11 1211.18 L1715.52 1211.18 L1714.94 1211.18 L1714.35 1211.18 L1713.76 1211.18 L1713.18 1211.18 L1712.59 1211.18 L1712 1211.18 L1711.42 1211.18 L1710.83 1211.18 L1710.24 1211.18 L1709.66 1211.18 L1709.07 1211.18 L1708.49 1211.18 L1707.9 1211.18 L1707.31 1211.18 L1706.73 1211.18 L1706.14 1211.18 L1705.55 1211.18 L1704.97 1211.18 L1704.38 1211.18 L1703.79 1211.18 L1703.21 1211.18 L1702.62 1211.18 L1702.04 1211.18 L1701.45 1211.18 L1700.86 1211.18 L1700.28 1211.18 L1699.69 1211.18 L1699.1 1211.18 L1698.52 1211.18 L1697.93 1211.18 L1697.34 1211.18 L1696.76 1211.18 L1696.17 1211.18 L1695.58 1211.18 L1695 1211.18 L1694.41 1211.18 L1693.83 1211.18 L1693.24 1211.18 L1692.65 1211.18 L1692.07 1211.18 L1691.48 1211.18 L1690.89 1211.18 L1690.31 1211.18 L1689.72 1211.18 L1689.13 1211.18 L1688.55 1211.18 L1687.96 1211.18 L1687.37 1211.18 L1686.79 1211.18 L1686.2 1211.18 L1685.62 1211.18 L1685.03 1211.18 L1684.44 1211.18 L1683.86 1211.18 L1683.27 1211.18 L1682.68 1211.18 L1682.1 1211.18 L1681.51 1211.18 L1680.92 1211.18 L1680.34 1211.18 L1679.75 1211.18 L1679.17 1211.18 L1678.58 1211.18 L1677.99 1211.18 L1677.41 1211.18 L1676.82 1211.18 L1676.23 1211.18 L1675.65 1211.18 L1675.06 1211.18 L1674.47 1211.18 L1673.89 1211.18 L1673.3 1211.18 L1672.71 1211.18 L1672.13 1211.18 L1671.54 1211.18 L1670.96 1211.18 L1670.37 1211.18 L1669.78 1211.18 L1669.2 1211.18 L1668.61 1211.18 L1668.02 1211.18 L1667.44 1211.18 L1666.85 1211.18 L1666.26 1211.18 L1665.68 1211.18 L1665.09 1211.18 L1664.5 1211.18 L1663.92 1211.18 L1663.33 1211.18 L1662.75 1211.18 L1662.16 1211.18 L1661.57 1211.18 L1660.99 1211.18 L1660.4 1211.18 L1659.81 1211.18 L1659.23 1211.18 L1658.64 1211.18 L1658.05 1211.18 L1657.47 1211.18 L1656.88 1211.18 L1656.29 1211.18 L1655.71 1211.18 L1655.12 1211.18 L1654.54 1211.18 L1653.95 1211.18 L1653.36 1211.18 L1652.78 1211.18 L1652.19 1211.18 L1651.6 1211.18 L1651.02 1211.18 L1650.43 1211.18 L1649.84 1211.18 L1649.26 1211.18 L1648.67 1211.18 L1648.09 1211.18 L1647.5 1211.18 L1646.91 1211.18 L1646.33 1211.18 L1645.74 1211.18 L1645.15 1211.18 L1644.57 1211.18 L1643.98 1211.18 L1643.39 1211.18 L1642.81 1211.18 L1642.22 1211.18 L1641.63 1211.18 L1641.05 1211.18 L1640.46 1211.18 L1639.88 1211.18 L1639.29 1211.18 L1638.7 1211.18 L1638.12 1211.18 L1637.53 1211.18 L1636.94 1211.18 L1636.36 1211.18 L1635.77 1211.18 L1635.18 1211.18 L1634.6 1211.18 L1634.01 1211.18 L1633.42 1211.18 L1632.84 1211.18 L1632.25 1211.18 L1631.67 1211.18 L1631.08 1211.18 L1630.49 1211.18 L1629.91 1211.18 L1629.32 1211.18 L1628.73 1211.18 L1628.15 1211.18 L1627.56 1211.18 L1626.97 1211.18 L1626.39 1211.18 L1625.8 1211.18 L1625.22 1211.18 L1624.63 1211.18 L1624.04 1211.18 L1623.46 1211.18 L1622.87 1211.18 L1622.28 1211.18 L1621.7 1211.18 L1621.11 1211.18 L1620.52 1211.18 L1619.94 1211.18 L1619.35 1211.18 L1618.76 1211.18 L1618.18 1211.18 L1617.59 1211.18 L1617.01 1211.18 L1616.42 1211.18 L1615.83 1211.18 L1615.25 1211.18 L1614.66 1211.18 L1614.07 1211.18 L1613.49 1211.18 L1612.9 1211.18 L1612.31 1211.18 L1611.73 1211.18 L1611.14 1211.18 L1610.55 1211.18 L1609.97 1211.18 L1609.38 1211.18 L1608.8 1211.18 L1608.21 1211.18 L1607.62 1211.18 L1607.04 1211.18 L1606.45 1211.18 L1605.86 1211.18 L1605.28 1211.18 L1604.69 1211.18 L1604.1 1211.18 L1603.52 1211.18 L1602.93 1211.18 L1602.34 1211.18 L1601.76 1211.18 L1601.17 1211.18 L1600.59 1211.18 L1600 1211.18 L1599.41 1211.18 L1598.83 1211.18 L1598.24 1211.18 L1597.65 1211.18 L1597.07 1211.18 L1596.48 1211.18 L1595.89 1211.18 L1595.31 1211.18 L1594.72 1211.18 L1594.14 1211.18 L1593.55 1211.18 L1592.96 1211.18 L1592.38 1211.18 L1591.79 1211.18 L1591.2 1211.18 L1590.62 1211.18 L1590.03 1211.18 L1589.44 1211.18 L1588.86 1211.18 L1588.27 1211.18 L1587.68 1211.18 L1587.1 1211.18 L1586.51 1211.18 L1585.93 1211.18 L1585.34 1211.18 L1584.75 1211.18 L1584.17 1211.18 L1583.58 1211.18 L1582.99 1211.18 L1582.41 1211.18 L1581.82 1211.18 L1581.23 1211.18 L1580.65 1211.18 L1580.06 1211.18 L1579.47 1211.18 L1578.89 1211.18 L1578.3 1211.18 L1577.72 1211.18 L1577.13 1211.18 L1576.54 1211.18 L1575.96 1211.18 L1575.37 1211.18 L1574.78 1211.18 L1574.2 1211.18 L1573.61 1211.18 L1573.02 1211.18 L1572.44 1211.18 L1571.85 1211.18 L1571.27 1211.18 L1570.68 1211.18 L1570.09 1211.18 L1569.51 1211.18 L1568.92 1211.18 L1568.33 1211.18 L1567.75 1211.18 L1567.16 1211.18 L1566.57 1211.18 L1565.99 1211.18 L1565.4 1211.18 L1564.81 1211.18 L1564.23 1211.18 L1563.64 1211.18 L1563.06 1211.18 L1562.47 1211.18 L1561.88 1211.18 L1561.3 1211.18 L1560.71 1211.18 L1560.12 1211.18 L1559.54 1211.18 L1558.95 1211.18 L1558.36 1211.18 L1557.78 1211.18 L1557.19 1211.18 L1556.6 1211.18 L1556.02 1211.18 L1555.43 1211.18 L1554.85 1211.18 L1554.26 1211.18 L1553.67 1211.18 L1553.09 1211.18 L1552.5 1211.18 L1551.91 1211.18 L1551.33 1211.18 L1550.74 1211.18 L1550.15 1211.18 L1549.57 1211.18 L1548.98 1211.18 L1548.4 1211.18 L1547.81 1211.18 L1547.22 1211.18 L1546.64 1211.18 L1546.05 1211.18 L1545.46 1211.18 L1544.88 1211.18 L1544.29 1211.18 L1543.7 1211.18 L1543.12 1211.18 L1542.53 1211.18 L1541.94 1211.18 L1541.36 1211.18 L1540.77 1211.18 L1540.19 1211.18 L1539.6 1211.18 L1539.01 1211.18 L1538.43 1211.18 L1537.84 1211.18 L1537.25 1211.18 L1536.67 1211.18 L1536.08 1211.18 L1535.49 1211.18 L1534.91 1211.18 L1534.32 1211.18 L1533.73 1211.18 L1533.15 1211.18 L1532.56 1211.18 L1531.98 1211.18 L1531.39 1211.18 L1530.8 1211.18 L1530.22 1211.18 L1529.63 1211.18 L1529.04 1211.18 L1528.46 1211.18 L1527.87 1211.18 L1527.28 1211.18 L1526.7 1211.18 L1526.11 1211.18 L1525.52 1211.18 L1524.94 1211.18 L1524.35 1211.18 L1523.77 1211.18 L1523.18 1211.18 L1522.59 1211.18 L1522.01 1211.18 L1521.42 1211.18 L1520.83 1211.18 L1520.25 1211.18 L1519.66 1211.18 L1519.07 1211.18 L1518.49 1211.18 L1517.9 1211.18 L1517.32 1211.18 L1516.73 1211.18 L1516.14 1211.18 L1515.56 1211.18 L1514.97 1211.18 L1514.38 1211.18 L1513.8 1211.18 L1513.21 1211.18 L1512.62 1211.18 L1512.04 1211.18 L1511.45 1211.18 L1510.86 1211.18 L1510.28 1211.18 L1509.69 1211.18 L1509.11 1211.18 L1508.52 1211.18 L1507.93 1211.18 L1507.35 1211.18 L1506.76 1211.18 L1506.17 1211.18 L1505.59 1211.18 L1505 1211.18 L1504.41 1211.18 L1503.83 1211.18 L1503.24 1211.18 L1502.65 1211.18 L1502.07 1211.18 L1501.48 1211.18 L1500.9 1211.18 L1500.31 1211.18 L1499.72 1211.18 L1499.14 1211.18 L1498.55 1211.18 L1497.96 1211.18 L1497.38 1211.18 L1496.79 1211.18 L1496.2 1211.18 L1495.62 1211.18 L1495.03 1211.18 L1494.45 1211.18 L1493.86 1211.18 L1493.27 1211.18 L1492.69 1211.18 L1492.1 1211.18 L1491.51 1211.18 L1490.93 1211.18 L1490.34 1211.18 L1489.75 1211.18 L1489.17 1211.18 L1488.58 1211.18 L1487.99 1211.18 L1487.41 1211.18 L1486.82 1211.18 L1486.24 1211.18 L1485.65 1211.18 L1485.06 1211.18 L1484.48 1211.18 L1483.89 1211.18 L1483.3 1211.18 L1482.72 1211.18 L1482.13 1211.18 L1481.54 1211.18 L1480.96 1211.18 L1480.37 1211.18 L1479.78 1211.18 L1479.2 1211.18 L1478.61 1211.18 L1478.03 1211.18 L1477.44 1211.18 L1476.85 1211.18 L1476.27 1211.18 L1475.68 1211.18 L1475.09 1211.18 L1474.51 1211.18 L1473.92 1211.18 L1473.33 1211.18 L1472.75 1211.18 L1472.16 1211.18 L1471.57 1211.18 L1470.99 1211.18 L1470.4 1211.18 L1469.82 1211.18 L1469.23 1211.18 L1468.64 1211.18 L1468.06 1211.18 L1467.47 1211.18 L1466.88 1211.18 L1466.3 1211.18 L1465.71 1211.18 L1465.12 1211.18 L1464.54 1211.18 L1463.95 1211.18 L1463.37 1211.18 L1462.78 1211.18 L1462.19 1211.18 L1461.61 1211.18 L1461.02 1211.18 L1460.43 1211.18 L1459.85 1211.18 L1459.26 1211.18 L1458.67 1211.18 L1458.09 1211.18 L1457.5 1211.18 L1456.91 1211.18 L1456.33 1211.18 L1455.74 1211.18 L1455.16 1211.18 L1454.57 1211.18 L1453.98 1211.18 L1453.4 1211.18 L1452.81 1211.18 L1452.22 1211.18 L1451.64 1211.18 L1451.05 1211.18 L1450.46 1211.18 L1449.88 1211.18 L1449.29 1211.18 L1448.7 1211.18 L1448.12 1211.18 L1447.53 1211.18 L1446.95 1211.18 L1446.36 1211.18 L1445.77 1211.18 L1445.19 1211.18 L1444.6 1211.18 L1444.01 1211.18 L1443.43 1211.18 L1442.84 1211.18 L1442.25 1211.18 L1441.67 1211.18 L1441.08 1211.18 L1440.5 1211.18 L1439.91 1211.18 L1439.32 1211.18 L1438.74 1211.18 L1438.15 1211.18 L1437.56 1211.18 L1436.98 1211.18 L1436.39 1211.18 L1435.8 1211.18 L1435.22 1211.18 L1434.63 1211.18 L1434.04 1211.18 L1433.46 1211.18 L1432.87 1211.18 L1432.29 1211.18 L1431.7 1211.18 L1431.11 1211.18 L1430.53 1211.18 L1429.94 1211.18 L1429.35 1211.18 L1428.77 1211.18 L1428.18 1211.18 L1427.59 1211.18 L1427.01 1211.18 L1426.42 1211.18 L1425.83 1211.18 L1425.25 1211.18 L1424.66 1211.18 L1424.08 1211.18 L1423.49 1211.18 L1422.9 1211.18 L1422.32 1211.18 L1421.73 1211.18 L1421.14 1211.18 L1420.56 1211.18 L1419.97 1211.18 L1419.38 1211.18 L1418.8 1211.18 L1418.21 1211.18 L1417.63 1211.18 L1417.04 1211.18 L1416.45 1211.18 L1415.87 1211.18 L1415.28 1211.18 L1414.69 1211.18 L1414.11 1211.18 L1413.52 1211.18 L1412.93 1211.18 L1412.35 1211.18 L1411.76 1211.18 L1411.17 1211.18 L1410.59 1211.18 L1410 1211.18 L1409.42 1211.18 L1408.83 1211.18 L1408.24 1211.18 L1407.66 1211.18 L1407.07 1211.18 L1406.48 1211.18 L1405.9 1211.18 L1405.31 1211.18 L1404.72 1211.18 L1404.14 1211.18 L1403.55 1211.18 L1402.96 1211.18 L1402.38 1211.18 L1401.79 1211.18 L1401.21 1211.18 L1400.62 1211.18 L1400.03 1211.18 L1399.45 1211.18 L1398.86 1211.18 L1398.27 1211.18 L1397.69 1211.18 L1397.1 1211.18 L1396.51 1211.18 L1395.93 1211.18 L1395.34 1211.18 L1394.75 1211.18 L1394.17 1211.18 L1393.58 1211.18 L1393 1211.18 L1392.41 1211.18 L1391.82 1211.18 L1391.24 1211.18 L1390.65 1211.18 L1390.06 1211.18 L1389.48 1211.18 L1388.89 1211.18 L1388.3 1211.18 L1387.72 1211.18 L1387.13 1211.18 L1386.55 1211.18 L1385.96 1211.18 L1385.37 1211.18 L1384.79 1211.18 L1384.2 1211.18 L1383.61 1211.18 L1383.03 1211.18 L1382.44 1211.18 L1381.85 1211.18 L1381.27 1211.18 L1380.68 1211.18 L1380.09 1211.18 L1379.51 1211.18 L1378.92 1211.18 L1378.34 1211.18 L1377.75 1211.18 L1377.16 1211.18 L1376.58 1211.18 L1375.99 1211.18 L1375.4 1211.18 L1374.82 1211.18 L1374.23 1211.18 L1373.64 1211.18 L1373.06 1211.18 L1372.47 1211.18 L1371.88 1211.18 L1371.3 1211.18 L1370.71 1211.18 L1370.13 1211.18 L1369.54 1211.18 L1368.95 1211.18 L1368.37 1211.18 L1367.78 1211.18 L1367.19 1211.18 L1366.61 1211.18 L1366.02 1211.18 L1365.43 1211.18 L1364.85 1211.18 L1364.26 1211.18 L1363.68 1211.18 L1363.09 1211.18 L1362.5 1211.18 L1361.92 1211.18 L1361.33 1211.18 L1360.74 1211.18 L1360.16 1211.18 L1359.57 1211.18 L1358.98 1211.18 L1358.4 1211.18 L1357.81 1211.18 L1357.22 1211.18 L1356.64 1211.18 L1356.05 1211.18 L1355.47 1211.18 L1354.88 1211.18 L1354.29 1211.18 L1353.71 1211.18 L1353.12 1211.18 L1352.53 1211.18 L1351.95 1211.18 L1351.36 1211.18 L1350.77 1211.18 L1350.19 1211.18 L1349.6 1211.18 L1349.01 1211.18 L1348.43 1211.18 L1347.84 1211.18 L1347.26 1211.18 L1346.67 1211.18 L1346.08 1211.18 L1345.5 1211.18 L1344.91 1211.18 L1344.32 1211.18 L1343.74 1211.18 L1343.15 1211.18 L1342.56 1211.18 L1341.98 1211.18 L1341.39 1211.18 L1340.8 1211.18 L1340.22 1211.18 L1339.63 1211.18 L1339.05 1211.18 L1338.46 1211.18 L1337.87 1211.18 L1337.29 1211.18 L1336.7 1211.18 L1336.11 1211.18 L1335.53 1211.18 L1334.94 1211.18 L1334.35 1211.18 L1333.77 1211.18 L1333.18 1211.18 L1332.6 1211.18 L1332.01 1211.18 L1331.42 1211.18 L1330.84 1211.18 L1330.25 1211.18 L1329.66 1211.18 L1329.08 1211.18 L1328.49 1211.18 L1327.9 1211.18 L1327.32 1211.18 L1326.73 1211.18 L1326.14 1211.18 L1325.56 1211.18 L1324.97 1211.18 L1324.39 1211.18 L1323.8 1211.18 L1323.21 1211.18 L1322.63 1211.18 L1322.04 1211.18 L1321.45 1211.18 L1320.87 1211.18 L1320.28 1211.18 L1319.69 1211.18 L1319.11 1211.18 L1318.52 1211.18 L1317.93 1211.18 L1317.35 1211.18 L1316.76 1211.18 L1316.18 1211.18 L1315.59 1211.18 L1315 1211.18 L1314.42 1211.18 L1313.83 1211.18 L1313.24 1211.18 L1312.66 1211.18 L1312.07 1211.18 L1311.48 1211.18 L1310.9 1211.18 L1310.31 1211.18 L1309.73 1211.18 L1309.14 1211.18 L1308.55 1211.18 L1307.97 1211.18 L1307.38 1211.18 L1306.79 1211.18 L1306.21 1211.18 L1305.62 1211.18 L1305.03 1211.18 L1304.45 1211.18 L1303.86 1211.18 L1303.27 1211.18 L1302.69 1211.18 L1302.1 1211.18 L1301.52 1211.18 L1300.93 1211.18 L1300.34 1211.18 L1299.76 1211.18 L1299.17 1211.18 L1298.58 1211.18 L1298 1211.18 L1297.41 1211.18 L1296.82 1211.18 L1296.24 1211.18 L1295.65 1211.18 L1295.06 1211.18 L1294.48 1211.18 L1293.89 1211.18 L1293.31 1211.18 L1292.72 1211.18 L1292.13 1211.18 L1291.55 1211.18 L1290.96 1211.18 L1290.37 1211.18 L1289.79 1211.18 L1289.2 1211.18 L1288.61 1211.18 L1288.03 1211.18 L1287.44 1211.18 L1286.86 1211.18 L1286.27 1211.18 L1285.68 1211.18 L1285.1 1211.18 L1284.51 1211.18 L1283.92 1211.18 L1283.34 1211.18 L1282.75 1211.18 L1282.16 1211.18 L1281.58 1211.18 L1280.99 1211.18 L1280.4 1211.18 L1279.82 1211.18 L1279.23 1211.18 L1278.65 1211.18 L1278.06 1211.18 L1277.47 1211.18 L1276.89 1211.18 L1276.3 1211.18 L1275.71 1211.18 L1275.13 1211.18 L1274.54 1211.18 L1273.95 1211.18 L1273.37 1211.18 L1272.78 1211.18 L1272.19 1211.18 L1271.61 1211.18 L1271.02 1211.18 L1270.44 1211.18 L1269.85 1211.18 L1269.26 1211.18 L1268.68 1211.18 L1268.09 1211.18 L1267.5 1211.18 L1266.92 1211.18 L1266.33 1211.18 L1265.74 1211.18 L1265.16 1211.18 L1264.57 1211.18 L1263.98 1211.18 L1263.4 1211.18 L1262.81 1211.18 L1262.23 1211.18 L1261.64 1211.18 L1261.05 1211.18 L1260.47 1211.18 L1259.88 1211.18 L1259.29 1211.18 L1258.71 1211.18 L1258.12 1211.18 L1257.53 1211.18 L1256.95 1211.18 L1256.36 1211.18 L1255.78 1211.18 L1255.19 1211.18 L1254.6 1211.18 L1254.02 1211.18 L1253.43 1211.18 L1252.84 1211.18 L1252.26 1211.18 L1251.67 1211.18 L1251.08 1211.18 L1250.5 1211.18 L1249.91 1211.18 L1249.32 1211.18 L1248.74 1211.18 L1248.15 1211.18 L1247.57 1211.18 L1246.98 1211.18 L1246.39 1211.18 L1245.81 1211.18 L1245.22 1211.18 L1244.63 1211.18 L1244.05 1211.18 L1243.46 1211.18 L1242.87 1211.18 L1242.29 1211.18 L1241.7 1211.18 L1241.11 1211.18 L1240.53 1211.18 L1239.94 1211.18 L1239.36 1211.18 L1238.77 1211.18 L1238.18 1211.18 L1237.6 1211.18 L1237.01 1211.18 L1236.42 1211.18 L1235.84 1211.18 L1235.25 1211.18 L1234.66 1211.18 L1234.08 1211.18 L1233.49 1211.18 L1232.91 1211.18 L1232.32 1211.18 L1231.73 1211.18 L1231.15 1211.18 L1230.56 1211.18 L1229.97 1211.18 L1229.39 1211.18 L1228.8 1211.18 L1228.21 1211.18 L1227.63 1211.18 L1227.04 1211.18 L1226.45 1211.18 L1225.87 1211.18 L1225.28 1211.18 L1224.7 1211.18 L1224.11 1211.18 L1223.52 1211.18 L1222.94 1211.18 L1222.35 1211.18 L1221.76 1211.18 L1221.18 1211.18 L1220.59 1211.18 L1220 1211.18 L1219.42 1211.18 L1218.83 1211.18 L1218.24 1211.18 L1217.66 1211.18 L1217.07 1211.18 L1216.49 1211.18 L1215.9 1211.18 L1215.31 1211.18 L1214.73 1211.18 L1214.14 1211.18 L1213.55 1211.18 L1212.97 1211.18 L1212.38 1211.18 L1211.79 1211.18 L1211.21 1211.18 L1210.62 1211.18 L1210.03 1211.18 L1209.45 1211.18 L1208.86 1211.18 L1208.28 1211.18 L1207.69 1211.18 L1207.1 1211.18 L1206.52 1211.18 L1205.93 1211.18 L1205.34 1211.18 L1204.76 1211.18 L1204.17 1211.18 L1203.58 1211.18 L1203 1211.18 L1202.41 1211.18 L1201.83 1211.18 L1201.24 1211.18 L1200.65 1211.18 L1200.07 1211.18 L1199.48 1211.18 L1198.89 1211.18 L1198.31 1211.18 L1197.72 1211.18 L1197.13 1211.18 L1196.55 1211.18 L1195.96 1211.18 L1195.37 1211.18 L1194.79 1211.18 L1194.2 1211.18 L1193.62 1211.18 L1193.03 1211.18 L1192.44 1211.18 L1191.86 1211.18 L1191.27 1211.18 L1190.68 1211.18 L1190.1 1211.18 L1189.51 1211.18 L1188.92 1211.18 L1188.34 1211.18 L1187.75 1211.18 L1187.16 1211.18 L1186.58 1211.18 L1185.99 1211.18 L1185.41 1211.18 L1184.82 1211.18 L1184.23 1211.18 L1183.65 1211.18 L1183.06 1211.18 L1182.47 1211.18 L1181.89 1211.18 L1181.3 1211.18 L1180.71 1211.18 L1180.13 1211.18 L1179.54 1211.18 L1178.96 1211.18 L1178.37 1211.18 L1177.78 1211.18 L1177.2 1211.18 L1176.61 1211.18 L1176.02 1211.18 L1175.44 1211.18 L1174.85 1211.18 L1174.26 1211.18 L1173.68 1211.18 L1173.09 1211.18 L1172.5 1211.18 L1171.92 1211.18 L1171.33 1211.18 L1170.75 1211.18 L1170.16 1211.18 L1169.57 1211.18 L1168.99 1211.18 L1168.4 1211.18 L1167.81 1211.18 L1167.23 1211.18 L1166.64 1211.18 L1166.05 1211.18 L1165.47 1211.18 L1164.88 1211.18 L1164.29 1211.18 L1163.71 1211.18 L1163.12 1211.18 L1162.54 1211.18 L1161.95 1211.18 L1161.36 1211.18 L1160.78 1211.18 L1160.19 1211.18 L1159.6 1211.18 L1159.02 1211.18 L1158.43 1211.18 L1157.84 1211.18 L1157.26 1211.18 L1156.67 1211.18 L1156.09 1211.18 L1155.5 1211.18 L1154.91 1211.18 L1154.33 1211.18 L1153.74 1211.18 L1153.15 1211.18 L1152.57 1211.18 L1151.98 1211.18 L1151.39 1211.18 L1150.81 1211.18 L1150.22 1211.18 L1149.63 1211.18 L1149.05 1211.18 L1148.46 1211.18 L1147.88 1211.18 L1147.29 1211.18 L1146.7 1211.18 L1146.12 1211.18 L1145.53 1211.18 L1144.94 1211.18 L1144.36 1211.18 L1143.77 1211.18 L1143.18 1211.18 L1142.6 1211.18 L1142.01 1211.18 L1141.42 1211.18 L1140.84 1211.18 L1140.25 1211.18 L1139.67 1211.18 L1139.08 1211.18 L1138.49 1211.18 L1137.91 1211.18 L1137.32 1211.18 L1136.73 1211.18 L1136.15 1211.18 L1135.56 1211.18 L1134.97 1211.18 L1134.39 1211.18 L1133.8 1211.18 L1133.21 1211.18 L1132.63 1211.18 L1132.04 1211.18 L1131.46 1211.18 L1130.87 1211.18 L1130.28 1211.18 L1129.7 1211.18 L1129.11 1211.18 L1128.52 1211.18 L1127.94 1211.18 L1127.35 1211.18 L1126.76 1211.18 L1126.18 1211.18 L1125.59 1211.18 L1125.01 1211.18 L1124.42 1211.18 L1123.83 1211.18 L1123.25 1211.18 L1122.66 1211.18 L1122.07 1211.18 L1121.49 1211.18 L1120.9 1211.18 L1120.31 1211.18 L1119.73 1211.18 L1119.14 1211.18 L1118.55 1211.18 L1117.97 1211.18 L1117.38 1211.18 L1116.8 1211.18 L1116.21 1211.18 L1115.62 1211.18 L1115.04 1211.18 L1114.45 1211.18 L1113.86 1211.18 L1113.28 1211.18 L1112.69 1211.18 L1112.1 1211.18 L1111.52 1211.18 L1110.93 1211.18 L1110.34 1211.18 L1109.76 1211.18 L1109.17 1211.18 L1108.59 1211.18 L1108 1211.18 L1107.41 1211.18 L1106.83 1211.18 L1106.24 1211.18 L1105.65 1211.18 L1105.07 1211.18 L1104.48 1211.18 L1103.89 1211.18 L1103.31 1211.18 L1102.72 1211.18 L1102.14 1211.18 L1101.55 1211.18 L1100.96 1211.18 L1100.38 1211.18 L1099.79 1211.18 L1099.2 1211.18 L1098.62 1211.18 L1098.03 1211.18 L1097.44 1211.18 L1096.86 1211.18 L1096.27 1211.18 L1095.68 1211.18 L1095.1 1211.18 L1094.51 1211.18 L1093.93 1211.18 L1093.34 1211.18 L1092.75 1211.18 L1092.17 1211.18 L1091.58 1211.18 L1090.99 1211.18 L1090.41 1211.18 L1089.82 1211.18 L1089.23 1211.18 L1088.65 1211.18 L1088.06 1211.18 L1087.47 1211.18 L1086.89 1211.18 L1086.3 1211.18 L1085.72 1211.18 L1085.13 1211.18 L1084.54 1211.18 L1083.96 1211.18 L1083.37 1211.18 L1082.78 1211.18 L1082.2 1211.18 L1081.61 1211.18 L1081.02 1211.18 L1080.44 1211.18 L1079.85 1211.18 L1079.26 1211.18 L1078.68 1211.18 L1078.09 1211.18 L1077.51 1211.18 L1076.92 1211.18 L1076.33 1211.18 L1075.75 1211.18 L1075.16 1211.18 L1074.57 1211.18 L1073.99 1211.18 L1073.4 1211.18 L1072.81 1211.18 L1072.23 1211.18 L1071.64 1211.18 L1071.06 1211.18 L1070.47 1211.18 L1069.88 1211.18 L1069.3 1211.18 L1068.71 1211.18 L1068.12 1211.18 L1067.54 1211.18 L1066.95 1211.18 L1066.36 1211.18 L1065.78 1211.18 L1065.19 1211.18 L1064.6 1211.18 L1064.02 1211.18 L1063.43 1211.18 L1062.85 1211.18 L1062.26 1211.18 L1061.67 1211.18 L1061.09 1211.18 L1060.5 1211.18 L1059.91 1211.18 L1059.33 1211.18 L1058.74 1211.18 L1058.15 1211.18 L1057.57 1211.18 L1056.98 1211.18 L1056.39 1211.18 L1055.81 1211.18 L1055.22 1211.18 L1054.64 1211.18 L1054.05 1211.18 L1053.46 1211.18 L1052.88 1211.18 L1052.29 1211.18 L1051.7 1211.18 L1051.12 1211.18 L1050.53 1211.18 L1049.94 1211.18 L1049.36 1211.18 L1048.77 1211.18 L1048.19 1211.18 L1047.6 1211.18 L1047.01 1211.18 L1046.43 1211.18 L1045.84 1211.18 L1045.25 1211.18 L1044.67 1211.18 L1044.08 1211.18 L1043.49 1211.18 L1042.91 1211.18 L1042.32 1211.18 L1041.73 1211.18 L1041.15 1211.18 L1040.56 1211.18 L1039.98 1211.18 L1039.39 1211.18 L1038.8 1211.18 L1038.22 1211.18 L1037.63 1211.18 L1037.04 1211.18 L1036.46 1211.18 L1035.87 1211.18 L1035.28 1211.18 L1034.7 1211.18 L1034.11 1211.18 L1033.52 1211.18 L1032.94 1211.18 L1032.35 1211.18 L1031.77 1211.18 L1031.18 1211.18 L1030.59 1211.18 L1030.01 1211.18 L1029.42 1211.18 L1028.83 1211.18 L1028.25 1211.18 L1027.66 1211.18 L1027.07 1211.18 L1026.49 1211.18 L1025.9 1211.18 L1025.32 1211.18 L1024.73 1211.18 L1024.14 1211.18 L1023.56 1211.18 L1022.97 1211.18 L1022.38 1211.18 L1021.8 1211.18 L1021.21 1211.18 L1020.62 1211.18 L1020.04 1211.18 L1019.45 1211.18 L1018.86 1211.18 L1018.28 1211.18 L1017.69 1211.18 L1017.11 1211.18 L1016.52 1211.18 L1015.93 1211.18 L1015.35 1211.18 L1014.76 1211.18 L1014.17 1211.18 L1013.59 1211.18 L1013 1211.18 L1012.41 1211.18 L1011.83 1211.18 L1011.24 1211.18 L1010.65 1211.18 L1010.07 1211.18 L1009.48 1211.18 L1008.9 1211.18 L1008.31 1211.18 L1007.72 1211.18 L1007.14 1211.18 L1006.55 1211.18 L1005.96 1211.18 L1005.38 1211.18 L1004.79 1211.18 L1004.2 1211.18 L1003.62 1211.18 L1003.03 1211.18 L1002.44 1211.18 L1001.86 1211.18 L1001.27 1211.18 L1000.69 1211.18 L1000.1 1211.18 L999.513 1211.18 L998.926 1211.18 L998.34 1211.18 L997.754 1211.18 L997.167 1211.18 L996.581 1211.18 L995.994 1211.18 L995.408 1211.18 L994.822 1211.18 L994.235 1211.18 L993.649 1211.18 L993.062 1211.18 L992.476 1211.18 L991.889 1211.18 L991.303 1211.18 L990.717 1211.18 L990.13 1211.18 L989.544 1211.18 L988.957 1211.18 L988.371 1211.18 L987.785 1211.18 L987.198 1211.18 L986.612 1211.18 L986.025 1211.18  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.57 986.612,1211.57 987.198,1211.57 987.785,1211.57 988.371,1211.57 988.957,1211.57 989.544,1211.57 990.13,1211.57 990.717,1211.57 991.303,1211.57 991.889,1211.57 992.476,1211.57 993.062,1211.57 993.649,1211.57 994.235,1211.57 994.822,1211.57 995.408,1211.57 995.994,1211.57 996.581,1211.57 997.167,1211.57 997.754,1211.57 998.34,1211.57 998.926,1211.57 999.513,1211.57 1000.1,1211.57 1000.69,1211.57 1001.27,1211.57 1001.86,1211.57 1002.44,1211.57 1003.03,1211.57 1003.62,1211.57 1004.2,1211.57 1004.79,1211.57 1005.38,1211.57 1005.96,1211.57 1006.55,1211.57 1007.14,1211.57 1007.72,1211.57 1008.31,1211.57 1008.9,1211.57 1009.48,1211.57 1010.07,1211.57 1010.65,1211.57 1011.24,1211.57 1011.83,1211.57 1012.41,1211.57 1013,1211.57 1013.59,1211.57 1014.17,1211.57 1014.76,1211.57 1015.35,1211.57 1015.93,1211.57 1016.52,1211.57 1017.11,1211.57 1017.69,1211.57 1018.28,1211.57 1018.86,1211.57 1019.45,1211.57 1020.04,1211.57 1020.62,1211.57 1021.21,1211.57 1021.8,1211.57 1022.38,1211.57 1022.97,1211.57 1023.56,1211.57 1024.14,1211.57 1024.73,1211.57 1025.32,1211.57 1025.9,1211.57 1026.49,1211.57 1027.07,1211.57 1027.66,1211.57 1028.25,1211.57 1028.83,1211.57 1029.42,1211.57 1030.01,1211.57 1030.59,1211.57 1031.18,1211.57 1031.77,1211.57 1032.35,1211.57 1032.94,1211.57 1033.52,1211.57 1034.11,1211.57 1034.7,1211.57 1035.28,1211.57 1035.87,1211.57 1036.46,1211.57 1037.04,1211.57 1037.63,1211.57 1038.22,1211.57 1038.8,1211.57 1039.39,1211.57 1039.98,1211.57 1040.56,1211.57 1041.15,1211.57 1041.73,1211.57 1042.32,1211.57 1042.91,1211.57 1043.49,1211.57 1044.08,1211.57 1044.67,1211.57 1045.25,1211.57 1045.84,1211.57 1046.43,1211.57 1047.01,1211.57 1047.6,1211.57 1048.19,1211.57 1048.77,1211.57 1049.36,1211.57 1049.94,1211.57 1050.53,1211.57 1051.12,1211.57 1051.7,1211.57 1052.29,1211.57 1052.88,1211.57 1053.46,1211.57 1054.05,1211.57 1054.64,1211.57 1055.22,1211.57 1055.81,1211.57 1056.39,1211.57 1056.98,1211.57 1057.57,1211.57 1058.15,1211.57 1058.74,1211.57 1059.33,1211.57 1059.91,1211.57 1060.5,1211.57 1061.09,1211.57 1061.67,1211.57 1062.26,1211.57 1062.85,1211.57 1063.43,1211.57 1064.02,1211.57 1064.6,1211.57 1065.19,1211.57 1065.78,1211.57 1066.36,1211.57 1066.95,1211.57 1067.54,1211.57 1068.12,1211.57 1068.71,1211.57 1069.3,1211.57 1069.88,1211.57 1070.47,1211.57 1071.06,1211.57 1071.64,1211.57 1072.23,1211.57 1072.81,1211.57 1073.4,1211.57 1073.99,1211.57 1074.57,1211.57 1075.16,1211.57 1075.75,1211.57 1076.33,1211.57 1076.92,1211.57 1077.51,1211.57 1078.09,1211.57 1078.68,1211.57 1079.26,1211.57 1079.85,1211.57 1080.44,1211.57 1081.02,1211.57 1081.61,1211.57 1082.2,1211.57 1082.78,1211.57 1083.37,1211.57 1083.96,1211.57 1084.54,1211.57 1085.13,1211.57 1085.72,1211.57 1086.3,1211.57 1086.89,1211.57 1087.47,1211.57 1088.06,1211.57 1088.65,1211.57 1089.23,1211.57 1089.82,1211.57 1090.41,1211.57 1090.99,1211.57 1091.58,1211.57 1092.17,1211.57 1092.75,1211.57 1093.34,1211.57 1093.93,1211.57 1094.51,1211.57 1095.1,1211.57 1095.68,1211.57 1096.27,1211.57 1096.86,1211.57 1097.44,1211.57 1098.03,1211.57 1098.62,1211.57 1099.2,1211.57 1099.79,1211.57 1100.38,1211.57 1100.96,1211.57 1101.55,1211.57 1102.14,1211.57 1102.72,1211.57 1103.31,1211.57 1103.89,1211.57 1104.48,1211.57 1105.07,1211.57 1105.65,1211.57 1106.24,1211.57 1106.83,1211.57 1107.41,1211.57 1108,1211.57 1108.59,1211.57 1109.17,1211.57 1109.76,1211.57 1110.34,1211.57 1110.93,1211.57 1111.52,1211.57 1112.1,1211.57 1112.69,1211.57 1113.28,1211.57 1113.86,1211.57 1114.45,1211.57 1115.04,1211.57 1115.62,1211.57 1116.21,1211.57 1116.8,1211.57 1117.38,1211.57 1117.97,1211.57 1118.55,1211.57 1119.14,1211.57 1119.73,1211.57 1120.31,1211.57 1120.9,1211.57 1121.49,1211.57 1122.07,1211.57 1122.66,1211.57 1123.25,1211.57 1123.83,1211.57 1124.42,1211.57 1125.01,1211.57 1125.59,1211.57 1126.18,1211.57 1126.76,1211.57 1127.35,1211.57 1127.94,1211.57 1128.52,1211.57 1129.11,1211.57 1129.7,1211.57 1130.28,1211.57 1130.87,1211.57 1131.46,1211.57 1132.04,1211.57 1132.63,1211.57 1133.21,1211.57 1133.8,1211.57 1134.39,1211.57 1134.97,1211.57 1135.56,1211.57 1136.15,1211.57 1136.73,1211.57 1137.32,1211.57 1137.91,1211.57 1138.49,1211.57 1139.08,1211.57 1139.67,1211.57 1140.25,1211.57 1140.84,1211.57 1141.42,1211.57 1142.01,1211.57 1142.6,1211.57 1143.18,1211.57 1143.77,1211.57 1144.36,1211.57 1144.94,1211.57 1145.53,1211.57 1146.12,1211.57 1146.7,1211.57 1147.29,1211.57 1147.88,1211.57 1148.46,1211.57 1149.05,1211.57 1149.63,1211.57 1150.22,1211.57 1150.81,1211.57 1151.39,1211.57 1151.98,1211.57 1152.57,1211.57 1153.15,1211.57 1153.74,1211.57 1154.33,1211.57 1154.91,1211.57 1155.5,1211.57 1156.09,1211.57 1156.67,1211.57 1157.26,1211.57 1157.84,1211.57 1158.43,1211.57 1159.02,1211.57 1159.6,1211.57 1160.19,1211.57 1160.78,1211.57 1161.36,1211.57 1161.95,1211.57 1162.54,1211.57 1163.12,1211.57 1163.71,1211.57 1164.29,1211.57 1164.88,1211.57 1165.47,1211.57 1166.05,1211.57 1166.64,1211.57 1167.23,1211.57 1167.81,1211.57 1168.4,1211.57 1168.99,1211.57 1169.57,1211.57 1170.16,1211.57 1170.75,1211.57 1171.33,1211.57 1171.92,1211.57 1172.5,1211.57 1173.09,1211.57 1173.68,1211.57 1174.26,1211.57 1174.85,1211.57 1175.44,1211.57 1176.02,1211.57 1176.61,1211.57 1177.2,1211.57 1177.78,1211.57 1178.37,1211.57 1178.96,1211.57 1179.54,1211.57 1180.13,1211.57 1180.71,1211.57 1181.3,1211.57 1181.89,1211.57 1182.47,1211.57 1183.06,1211.57 1183.65,1211.57 1184.23,1211.57 1184.82,1211.57 1185.41,1211.57 1185.99,1211.57 1186.58,1211.57 1187.16,1211.57 1187.75,1211.57 1188.34,1211.57 1188.92,1211.57 1189.51,1211.57 1190.1,1211.57 1190.68,1211.57 1191.27,1211.57 1191.86,1211.57 1192.44,1211.57 1193.03,1211.57 1193.62,1211.57 1194.2,1211.57 1194.79,1211.57 1195.37,1211.57 1195.96,1211.57 1196.55,1211.57 1197.13,1211.57 1197.72,1211.57 1198.31,1211.57 1198.89,1211.57 1199.48,1211.57 1200.07,1211.57 1200.65,1211.57 1201.24,1211.57 1201.83,1211.57 1202.41,1211.57 1203,1211.57 1203.58,1211.57 1204.17,1211.57 1204.76,1211.57 1205.34,1211.57 1205.93,1211.57 1206.52,1211.57 1207.1,1211.57 1207.69,1211.57 1208.28,1211.57 1208.86,1211.57 1209.45,1211.57 1210.03,1211.57 1210.62,1211.57 1211.21,1211.57 1211.79,1211.57 1212.38,1211.57 1212.97,1211.57 1213.55,1211.57 1214.14,1211.57 1214.73,1211.57 1215.31,1211.57 1215.9,1211.57 1216.49,1211.57 1217.07,1211.57 1217.66,1211.57 1218.24,1211.57 1218.83,1211.57 1219.42,1211.57 1220,1211.57 1220.59,1211.57 1221.18,1211.57 1221.76,1211.57 1222.35,1211.57 1222.94,1211.57 1223.52,1211.57 1224.11,1211.57 1224.7,1211.57 1225.28,1211.57 1225.87,1211.57 1226.45,1211.57 1227.04,1211.57 1227.63,1211.57 1228.21,1211.57 1228.8,1211.57 1229.39,1211.57 1229.97,1211.57 1230.56,1211.57 1231.15,1211.57 1231.73,1211.57 1232.32,1211.57 1232.91,1211.57 1233.49,1211.57 1234.08,1211.57 1234.66,1211.57 1235.25,1211.57 1235.84,1211.57 1236.42,1211.57 1237.01,1211.57 1237.6,1211.57 1238.18,1211.57 1238.77,1211.57 1239.36,1211.57 1239.94,1211.57 1240.53,1211.57 1241.11,1211.57 1241.7,1211.57 1242.29,1211.57 1242.87,1211.57 1243.46,1211.57 1244.05,1211.57 1244.63,1211.57 1245.22,1211.57 1245.81,1211.57 1246.39,1211.57 1246.98,1211.57 1247.57,1211.57 1248.15,1211.57 1248.74,1211.57 1249.32,1211.57 1249.91,1211.57 1250.5,1211.57 1251.08,1211.57 1251.67,1211.57 1252.26,1211.57 1252.84,1211.57 1253.43,1211.57 1254.02,1211.57 1254.6,1211.57 1255.19,1211.57 1255.78,1211.57 1256.36,1211.57 1256.95,1211.57 1257.53,1211.57 1258.12,1211.57 1258.71,1211.57 1259.29,1211.57 1259.88,1211.57 1260.47,1211.57 1261.05,1211.57 1261.64,1211.57 1262.23,1211.57 1262.81,1211.57 1263.4,1211.57 1263.98,1211.57 1264.57,1211.57 1265.16,1211.57 1265.74,1211.57 1266.33,1211.57 1266.92,1211.57 1267.5,1211.57 1268.09,1211.57 1268.68,1211.57 1269.26,1211.57 1269.85,1211.57 1270.44,1211.57 1271.02,1211.57 1271.61,1211.57 1272.19,1211.57 1272.78,1211.57 1273.37,1211.57 1273.95,1211.57 1274.54,1211.57 1275.13,1211.57 1275.71,1211.57 1276.3,1211.57 1276.89,1211.57 1277.47,1211.57 1278.06,1211.57 1278.65,1211.57 1279.23,1211.57 1279.82,1211.57 1280.4,1211.57 1280.99,1211.57 1281.58,1211.57 1282.16,1211.57 1282.75,1211.57 1283.34,1211.57 1283.92,1211.57 1284.51,1211.57 1285.1,1211.57 1285.68,1211.57 1286.27,1211.57 1286.86,1211.57 1287.44,1211.57 1288.03,1211.57 1288.61,1211.57 1289.2,1211.57 1289.79,1211.57 1290.37,1211.57 1290.96,1211.57 1291.55,1211.57 1292.13,1211.57 1292.72,1211.57 1293.31,1211.57 1293.89,1211.57 1294.48,1211.57 1295.06,1211.57 1295.65,1211.57 1296.24,1211.57 1296.82,1211.57 1297.41,1211.57 1298,1211.57 1298.58,1211.57 1299.17,1211.57 1299.76,1211.57 1300.34,1211.57 1300.93,1211.57 1301.52,1211.57 1302.1,1211.57 1302.69,1211.57 1303.27,1211.57 1303.86,1211.57 1304.45,1211.57 1305.03,1211.57 1305.62,1211.57 1306.21,1211.57 1306.79,1211.57 1307.38,1211.57 1307.97,1211.57 1308.55,1211.57 1309.14,1211.57 1309.73,1211.57 1310.31,1211.57 1310.9,1211.57 1311.48,1211.57 1312.07,1211.57 1312.66,1211.57 1313.24,1211.57 1313.83,1211.57 1314.42,1211.57 1315,1211.57 1315.59,1211.57 1316.18,1211.57 1316.76,1211.57 1317.35,1211.57 1317.93,1211.57 1318.52,1211.57 1319.11,1211.57 1319.69,1211.57 1320.28,1211.57 1320.87,1211.57 1321.45,1211.57 1322.04,1211.57 1322.63,1211.57 1323.21,1211.57 1323.8,1211.57 1324.39,1211.57 1324.97,1211.57 1325.56,1211.57 1326.14,1211.57 1326.73,1211.57 1327.32,1211.57 1327.9,1211.57 1328.49,1211.57 1329.08,1211.57 1329.66,1211.57 1330.25,1211.57 1330.84,1211.57 1331.42,1211.57 1332.01,1211.57 1332.6,1211.57 1333.18,1211.57 1333.77,1211.57 1334.35,1211.57 1334.94,1211.57 1335.53,1211.57 1336.11,1211.57 1336.7,1211.57 1337.29,1211.57 1337.87,1211.57 1338.46,1211.57 1339.05,1211.57 1339.63,1211.57 1340.22,1211.57 1340.8,1211.57 1341.39,1211.57 1341.98,1211.57 1342.56,1211.57 1343.15,1211.57 1343.74,1211.57 1344.32,1211.57 1344.91,1211.57 1345.5,1211.57 1346.08,1211.57 1346.67,1211.57 1347.26,1211.57 1347.84,1211.57 1348.43,1211.57 1349.01,1211.57 1349.6,1211.57 1350.19,1211.57 1350.77,1211.57 1351.36,1211.57 1351.95,1211.57 1352.53,1211.57 1353.12,1211.57 1353.71,1211.57 1354.29,1211.57 1354.88,1211.57 1355.47,1211.57 1356.05,1211.57 1356.64,1211.57 1357.22,1211.57 1357.81,1211.57 1358.4,1211.57 1358.98,1211.57 1359.57,1211.57 1360.16,1211.57 1360.74,1211.57 1361.33,1211.57 1361.92,1211.57 1362.5,1211.57 1363.09,1211.57 1363.68,1211.57 1364.26,1211.57 1364.85,1211.57 1365.43,1211.57 1366.02,1211.57 1366.61,1211.57 1367.19,1211.57 1367.78,1211.57 1368.37,1211.57 1368.95,1211.57 1369.54,1211.57 1370.13,1211.57 1370.71,1211.57 1371.3,1211.57 1371.88,1211.57 1372.47,1211.57 1373.06,1211.57 1373.64,1211.57 1374.23,1211.57 1374.82,1211.57 1375.4,1211.57 1375.99,1211.57 1376.58,1211.57 1377.16,1211.57 1377.75,1211.57 1378.34,1211.57 1378.92,1211.57 1379.51,1211.57 1380.09,1211.57 1380.68,1211.57 1381.27,1211.57 1381.85,1211.57 1382.44,1211.57 1383.03,1211.57 1383.61,1211.57 1384.2,1211.57 1384.79,1211.57 1385.37,1211.57 1385.96,1211.57 1386.55,1211.57 1387.13,1211.57 1387.72,1211.57 1388.3,1211.57 1388.89,1211.57 1389.48,1211.57 1390.06,1211.57 1390.65,1211.57 1391.24,1211.57 1391.82,1211.57 1392.41,1211.57 1393,1211.57 1393.58,1211.57 1394.17,1211.57 1394.75,1211.57 1395.34,1211.57 1395.93,1211.57 1396.51,1211.57 1397.1,1211.57 1397.69,1211.57 1398.27,1211.57 1398.86,1211.57 1399.45,1211.57 1400.03,1211.57 1400.62,1211.57 1401.21,1211.57 1401.79,1211.57 1402.38,1211.57 1402.96,1211.57 1403.55,1211.57 1404.14,1211.57 1404.72,1211.57 1405.31,1211.57 1405.9,1211.57 1406.48,1211.57 1407.07,1211.57 1407.66,1211.57 1408.24,1211.57 1408.83,1211.57 1409.42,1211.57 1410,1211.57 1410.59,1211.57 1411.17,1211.57 1411.76,1211.57 1412.35,1211.57 1412.93,1211.57 1413.52,1211.57 1414.11,1211.57 1414.69,1211.57 1415.28,1211.57 1415.87,1211.57 1416.45,1211.57 1417.04,1211.57 1417.63,1211.57 1418.21,1211.57 1418.8,1211.57 1419.38,1211.57 1419.97,1211.57 1420.56,1211.57 1421.14,1211.57 1421.73,1211.57 1422.32,1211.57 1422.9,1211.57 1423.49,1211.57 1424.08,1211.57 1424.66,1211.57 1425.25,1211.57 1425.83,1211.57 1426.42,1211.57 1427.01,1211.57 1427.59,1211.57 1428.18,1211.57 1428.77,1211.57 1429.35,1211.57 1429.94,1211.57 1430.53,1211.57 1431.11,1211.57 1431.7,1211.57 1432.29,1211.57 1432.87,1211.57 1433.46,1211.57 1434.04,1211.57 1434.63,1211.57 1435.22,1211.57 1435.8,1211.57 1436.39,1211.57 1436.98,1211.57 1437.56,1211.57 1438.15,1211.57 1438.74,1211.57 1439.32,1211.57 1439.91,1211.57 1440.5,1211.57 1441.08,1211.57 1441.67,1211.57 1442.25,1211.57 1442.84,1211.57 1443.43,1211.57 1444.01,1211.57 1444.6,1211.57 1445.19,1211.57 1445.77,1211.57 1446.36,1211.57 1446.95,1211.57 1447.53,1211.57 1448.12,1211.57 1448.7,1211.57 1449.29,1211.57 1449.88,1211.57 1450.46,1211.57 1451.05,1211.57 1451.64,1211.57 1452.22,1211.57 1452.81,1211.57 1453.4,1211.57 1453.98,1211.57 1454.57,1211.57 1455.16,1211.57 1455.74,1211.57 1456.33,1211.57 1456.91,1211.57 1457.5,1211.57 1458.09,1211.57 1458.67,1211.57 1459.26,1211.57 1459.85,1211.57 1460.43,1211.57 1461.02,1211.57 1461.61,1211.57 1462.19,1211.57 1462.78,1211.57 1463.37,1211.57 1463.95,1211.57 1464.54,1211.57 1465.12,1211.57 1465.71,1211.57 1466.3,1211.57 1466.88,1211.57 1467.47,1211.57 1468.06,1211.57 1468.64,1211.57 1469.23,1211.57 1469.82,1211.57 1470.4,1211.57 1470.99,1211.57 1471.57,1211.57 1472.16,1211.57 1472.75,1211.57 1473.33,1211.57 1473.92,1211.57 1474.51,1211.57 1475.09,1211.57 1475.68,1211.57 1476.27,1211.57 1476.85,1211.57 1477.44,1211.57 1478.03,1211.57 1478.61,1211.57 1479.2,1211.57 1479.78,1211.57 1480.37,1211.57 1480.96,1211.57 1481.54,1211.57 1482.13,1211.57 1482.72,1211.57 1483.3,1211.57 1483.89,1211.57 1484.48,1211.57 1485.06,1211.57 1485.65,1211.57 1486.24,1211.57 1486.82,1211.57 1487.41,1211.57 1487.99,1211.57 1488.58,1211.57 1489.17,1211.57 1489.75,1211.57 1490.34,1211.57 1490.93,1211.57 1491.51,1211.57 1492.1,1211.57 1492.69,1211.57 1493.27,1211.57 1493.86,1211.57 1494.45,1211.57 1495.03,1211.57 1495.62,1211.57 1496.2,1211.57 1496.79,1211.57 1497.38,1211.57 1497.96,1211.57 1498.55,1211.57 1499.14,1211.57 1499.72,1211.57 1500.31,1211.57 1500.9,1211.57 1501.48,1211.57 1502.07,1211.57 1502.65,1211.57 1503.24,1211.57 1503.83,1211.57 1504.41,1211.57 1505,1211.57 1505.59,1211.57 1506.17,1211.57 1506.76,1211.57 1507.35,1211.57 1507.93,1211.57 1508.52,1211.57 1509.11,1211.57 1509.69,1211.57 1510.28,1211.57 1510.86,1211.57 1511.45,1211.57 1512.04,1211.57 1512.62,1211.57 1513.21,1211.57 1513.8,1211.57 1514.38,1211.57 1514.97,1211.57 1515.56,1211.57 1516.14,1211.57 1516.73,1211.57 1517.32,1211.57 1517.9,1211.57 1518.49,1211.57 1519.07,1211.57 1519.66,1211.57 1520.25,1211.57 1520.83,1211.57 1521.42,1211.57 1522.01,1211.57 1522.59,1211.57 1523.18,1211.57 1523.77,1211.57 1524.35,1211.57 1524.94,1211.57 1525.52,1211.57 1526.11,1211.57 1526.7,1211.57 1527.28,1211.57 1527.87,1211.57 1528.46,1211.57 1529.04,1211.57 1529.63,1211.57 1530.22,1211.57 1530.8,1211.57 1531.39,1211.57 1531.98,1211.57 1532.56,1211.57 1533.15,1211.57 1533.73,1211.57 1534.32,1211.57 1534.91,1211.57 1535.49,1211.57 1536.08,1211.57 1536.67,1211.57 1537.25,1211.57 1537.84,1211.57 1538.43,1211.57 1539.01,1211.57 1539.6,1211.57 1540.19,1211.57 1540.77,1211.57 1541.36,1211.57 1541.94,1211.57 1542.53,1211.57 1543.12,1211.57 1543.7,1211.57 1544.29,1211.57 1544.88,1211.57 1545.46,1211.57 1546.05,1211.57 1546.64,1211.57 1547.22,1211.57 1547.81,1211.57 1548.4,1211.57 1548.98,1211.57 1549.57,1211.57 1550.15,1211.57 1550.74,1211.57 1551.33,1211.57 1551.91,1211.57 1552.5,1211.57 1553.09,1211.57 1553.67,1211.57 1554.26,1211.57 1554.85,1211.57 1555.43,1211.57 1556.02,1211.57 1556.6,1211.57 1557.19,1211.57 1557.78,1211.57 1558.36,1211.57 1558.95,1211.57 1559.54,1211.57 1560.12,1211.57 1560.71,1211.57 1561.3,1211.57 1561.88,1211.57 1562.47,1211.57 1563.06,1211.57 1563.64,1211.57 1564.23,1211.57 1564.81,1211.57 1565.4,1211.57 1565.99,1211.57 1566.57,1211.57 1567.16,1211.57 1567.75,1211.57 1568.33,1211.57 1568.92,1211.57 1569.51,1211.57 1570.09,1211.57 1570.68,1211.57 1571.27,1211.57 1571.85,1211.57 1572.44,1211.57 1573.02,1211.57 1573.61,1211.57 1574.2,1211.57 1574.78,1211.57 1575.37,1211.57 1575.96,1211.57 1576.54,1211.57 1577.13,1211.57 1577.72,1211.57 1578.3,1211.57 1578.89,1211.57 1579.47,1211.57 1580.06,1211.57 1580.65,1211.57 1581.23,1211.57 1581.82,1211.57 1582.41,1211.57 1582.99,1211.57 1583.58,1211.57 1584.17,1211.57 1584.75,1211.57 1585.34,1211.57 1585.93,1211.57 1586.51,1211.57 1587.1,1211.57 1587.68,1211.57 1588.27,1211.57 1588.86,1211.57 1589.44,1211.57 1590.03,1211.57 1590.62,1211.57 1591.2,1211.57 1591.79,1211.57 1592.38,1211.57 1592.96,1211.57 1593.55,1211.57 1594.14,1211.57 1594.72,1211.57 1595.31,1211.57 1595.89,1211.57 1596.48,1211.57 1597.07,1211.57 1597.65,1211.57 1598.24,1211.57 1598.83,1211.57 1599.41,1211.57 1600,1211.57 1600.59,1211.57 1601.17,1211.57 1601.76,1211.57 1602.34,1211.57 1602.93,1211.57 1603.52,1211.57 1604.1,1211.57 1604.69,1211.57 1605.28,1211.57 1605.86,1211.57 1606.45,1211.57 1607.04,1211.57 1607.62,1211.57 1608.21,1211.57 1608.8,1211.57 1609.38,1211.57 1609.97,1211.57 1610.55,1211.57 1611.14,1211.57 1611.73,1211.57 1612.31,1211.57 1612.9,1211.57 1613.49,1211.57 1614.07,1211.57 1614.66,1211.57 1615.25,1211.57 1615.83,1211.57 1616.42,1211.57 1617.01,1211.57 1617.59,1211.57 1618.18,1211.57 1618.76,1211.57 1619.35,1211.57 1619.94,1211.57 1620.52,1211.57 1621.11,1211.57 1621.7,1211.57 1622.28,1211.57 1622.87,1211.57 1623.46,1211.57 1624.04,1211.57 1624.63,1211.57 1625.22,1211.57 1625.8,1211.57 1626.39,1211.57 1626.97,1211.57 1627.56,1211.57 1628.15,1211.57 1628.73,1211.57 1629.32,1211.57 1629.91,1211.57 1630.49,1211.57 1631.08,1211.57 1631.67,1211.57 1632.25,1211.57 1632.84,1211.57 1633.42,1211.57 1634.01,1211.57 1634.6,1211.57 1635.18,1211.57 1635.77,1211.57 1636.36,1211.57 1636.94,1211.57 1637.53,1211.57 1638.12,1211.57 1638.7,1211.57 1639.29,1211.57 1639.88,1211.57 1640.46,1211.57 1641.05,1211.57 1641.63,1211.57 1642.22,1211.57 1642.81,1211.57 1643.39,1211.57 1643.98,1211.57 1644.57,1211.57 1645.15,1211.57 1645.74,1211.57 1646.33,1211.57 1646.91,1211.57 1647.5,1211.57 1648.09,1211.57 1648.67,1211.57 1649.26,1211.57 1649.84,1211.57 1650.43,1211.57 1651.02,1211.57 1651.6,1211.57 1652.19,1211.57 1652.78,1211.57 1653.36,1211.57 1653.95,1211.57 1654.54,1211.57 1655.12,1211.57 1655.71,1211.57 1656.29,1211.57 1656.88,1211.57 1657.47,1211.57 1658.05,1211.57 1658.64,1211.57 1659.23,1211.57 1659.81,1211.57 1660.4,1211.57 1660.99,1211.57 1661.57,1211.57 1662.16,1211.57 1662.75,1211.57 1663.33,1211.57 1663.92,1211.57 1664.5,1211.57 1665.09,1211.57 1665.68,1211.57 1666.26,1211.57 1666.85,1211.57 1667.44,1211.57 1668.02,1211.57 1668.61,1211.57 1669.2,1211.57 1669.78,1211.57 1670.37,1211.57 1670.96,1211.57 1671.54,1211.57 1672.13,1211.57 1672.71,1211.57 1673.3,1211.57 1673.89,1211.57 1674.47,1211.57 1675.06,1211.57 1675.65,1211.57 1676.23,1211.57 1676.82,1211.57 1677.41,1211.57 1677.99,1211.57 1678.58,1211.57 1679.17,1211.57 1679.75,1211.57 1680.34,1211.57 1680.92,1211.57 1681.51,1211.57 1682.1,1211.57 1682.68,1211.57 1683.27,1211.57 1683.86,1211.57 1684.44,1211.57 1685.03,1211.57 1685.62,1211.57 1686.2,1211.57 1686.79,1211.57 1687.37,1211.57 1687.96,1211.57 1688.55,1211.57 1689.13,1211.57 1689.72,1211.57 1690.31,1211.57 1690.89,1211.57 1691.48,1211.57 1692.07,1211.57 1692.65,1211.57 1693.24,1211.57 1693.83,1211.57 1694.41,1211.57 1695,1211.57 1695.58,1211.57 1696.17,1211.57 1696.76,1211.57 1697.34,1211.57 1697.93,1211.57 1698.52,1211.57 1699.1,1211.57 1699.69,1211.57 1700.28,1211.57 1700.86,1211.57 1701.45,1211.57 1702.04,1211.57 1702.62,1211.57 1703.21,1211.57 1703.79,1211.57 1704.38,1211.57 1704.97,1211.57 1705.55,1211.57 1706.14,1211.57 1706.73,1211.57 1707.31,1211.57 1707.9,1211.57 1708.49,1211.57 1709.07,1211.57 1709.66,1211.57 1710.24,1211.57 1710.83,1211.57 1711.42,1211.57 1712,1211.57 1712.59,1211.57 1713.18,1211.57 1713.76,1211.57 1714.35,1211.57 1714.94,1211.57 1715.52,1211.57 1716.11,1211.57 1716.7,1211.57 1717.28,1211.57 1717.87,1211.57 1718.45,1211.57 1719.04,1211.57 1719.63,1211.57 1720.21,1211.57 1720.8,1211.57 1721.39,1211.57 1721.97,1211.57 1722.56,1211.57 1723.15,1211.57 1723.73,1211.57 1724.32,1211.57 1724.91,1211.57 1725.49,1211.57 1726.08,1211.57 1726.66,1211.57 1727.25,1211.57 1727.84,1211.57 1728.42,1211.57 1729.01,1211.57 1729.6,1211.57 1730.18,1211.57 1730.77,1211.57 1731.36,1211.57 1731.94,1211.57 1732.53,1211.57 1733.11,1211.57 1733.7,1211.57 1734.29,1211.57 1734.87,1211.57 1735.46,1211.57 1736.05,1211.57 1736.63,1211.57 1737.22,1211.57 1737.81,1211.57 1738.39,1211.57 1738.98,1211.57 1739.57,1211.57 1740.15,1211.57 1740.74,1211.57 1741.32,1211.57 1741.91,1211.57 1742.5,1211.57 1743.08,1211.57 1743.67,1211.57 1744.26,1211.57 1744.84,1211.57 1745.43,1211.57 1746.02,1211.57 1746.6,1211.57 1747.19,1211.57 1747.78,1211.57 1748.36,1211.57 1748.95,1211.57 1749.53,1211.57 1750.12,1211.57 1750.71,1211.57 1751.29,1211.57 1751.88,1211.57 1752.47,1211.57 1753.05,1211.57 1753.64,1211.57 1754.23,1211.57 1754.81,1211.57 1755.4,1211.57 1755.99,1211.57 1756.57,1211.57 1757.16,1211.57 1757.74,1211.57 1758.33,1211.57 1758.92,1211.57 1759.5,1211.57 1760.09,1211.57 1760.68,1211.57 1761.26,1211.57 1761.85,1211.57 1762.44,1211.57 1763.02,1211.57 1763.61,1211.57 1764.19,1211.57 1764.78,1211.57 1765.37,1211.57 1765.95,1211.57 1766.54,1211.57 1767.13,1211.57 1767.71,1211.57 1768.3,1211.57 1768.89,1211.57 1769.47,1211.57 1770.06,1211.57 1770.65,1211.57 1771.23,1211.57 1771.82,1211.57 1772.4,1211.57 1772.99,1211.57 1773.58,1211.57 1774.16,1211.57 1774.75,1211.57 1775.34,1211.57 1775.92,1211.57 1776.51,1211.57 1777.1,1211.57 1777.68,1211.57 1778.27,1211.57 1778.86,1211.57 1779.44,1211.57 1780.03,1211.57 1780.61,1211.57 1781.2,1211.57 1781.79,1211.57 1782.37,1211.57 1782.96,1211.57 1783.55,1211.57 1784.13,1211.57 1784.72,1211.57 1785.31,1211.57 1785.89,1211.57 1786.48,1211.57 1787.06,1211.57 1787.65,1211.57 1788.24,1211.57 1788.82,1211.57 1789.41,1211.57 1790,1211.57 1790.58,1211.57 1791.17,1211.57 1791.76,1211.57 1792.34,1211.57 1792.93,1211.57 1793.52,1211.57 1794.1,1211.57 1794.69,1211.57 1795.27,1211.57 1795.86,1211.57 1796.45,1211.57 1797.03,1211.57 1797.62,1211.57 1798.21,1211.57 1798.79,1211.57 1799.38,1211.57 1799.97,1211.57 1800.55,1211.57 1801.14,1211.57 1801.73,1211.57 1802.31,1211.57 1802.9,1211.57 1803.48,1211.57 1804.07,1211.57 1804.66,1211.57 1805.24,1211.57 1805.83,1211.57 1806.42,1211.57 1807,1211.57 1807.59,1211.57 1808.18,1211.57 1808.76,1211.57 1809.35,1211.57 1809.94,1211.57 1810.52,1211.57 1811.11,1211.57 1811.69,1211.57 1812.28,1211.57 1812.87,1211.57 1813.45,1211.57 1814.04,1211.57 1814.63,1211.57 1815.21,1211.57 1815.8,1211.57 1816.39,1211.57 1816.97,1211.57 1817.56,1211.57 1818.14,1211.57 1818.73,1211.57 1819.32,1211.57 1819.9,1211.57 1820.49,1211.57 1821.08,1211.57 1821.66,1211.57 1822.25,1211.57 1822.84,1211.57 1823.42,1211.57 1824.01,1211.57 1824.6,1211.57 1825.18,1211.57 1825.77,1211.57 1826.35,1211.57 1826.94,1211.57 1827.53,1211.57 1828.11,1211.57 1828.7,1211.57 1829.29,1211.57 1829.87,1211.57 1830.46,1211.57 1831.05,1211.57 1831.63,1211.57 1832.22,1211.57 1832.81,1211.57 1833.39,1211.57 1833.98,1211.57 1834.56,1211.57 1835.15,1211.57 1835.74,1211.57 1836.32,1211.57 1836.91,1211.57 1837.5,1211.57 1838.08,1211.57 1838.67,1211.57 1839.26,1211.57 1839.84,1211.57 1840.43,1211.57 1841.01,1211.57 1841.6,1211.57 1842.19,1211.57 1842.77,1211.57 1843.36,1211.57 1843.95,1211.57 1844.53,1211.57 1845.12,1211.57 1845.71,1211.57 1846.29,1211.57 1846.88,1211.57 1847.47,1211.57 1848.05,1211.57 1848.64,1211.57 1849.22,1211.57 1849.81,1211.57 1850.4,1211.57 1850.98,1211.57 1851.57,1211.57 1852.16,1211.57 1852.74,1211.57 1853.33,1211.57 1853.92,1211.57 1854.5,1211.57 1855.09,1211.57 1855.68,1211.57 1856.26,1211.57 1856.85,1211.57 1857.43,1211.57 1858.02,1211.57 1858.61,1211.57 1859.19,1211.57 1859.78,1211.57 1860.37,1211.57 1860.95,1211.57 1861.54,1211.57 1862.13,1211.57 1862.71,1211.57 1863.3,1211.57 1863.88,1211.57 1864.47,1211.57 1865.06,1211.57 1865.64,1211.57 1866.23,1211.57 1866.82,1211.57 1867.4,1211.57 1867.99,1211.57 1868.58,1211.57 1869.16,1211.57 1869.75,1211.57 1870.34,1211.57 1870.92,1211.57 1871.51,1211.57 1872.09,1211.57 1872.68,1211.57 1873.27,1211.57 1873.85,1211.57 1874.44,1211.57 1875.03,1211.57 1875.61,1211.57 1876.2,1211.57 1876.79,1211.57 1877.37,1211.57 1877.96,1211.57 1878.55,1211.57 1879.13,1211.57 1879.72,1211.57 1880.3,1211.57 1880.89,1211.57 1881.48,1211.57 1882.06,1211.57 1882.65,1211.57 1883.24,1211.57 1883.82,1211.57 1884.41,1211.57 1885,1211.57 1885.58,1211.57 1886.17,1211.57 1886.76,1211.57 1887.34,1211.57 1887.93,1211.57 1888.51,1211.57 1889.1,1211.57 1889.69,1211.57 1890.27,1211.57 1890.86,1211.57 1891.45,1211.57 1892.03,1211.57 1892.62,1211.57 1893.21,1211.57 1893.79,1211.57 1894.38,1211.57 1894.96,1211.57 1895.55,1211.57 1896.14,1211.57 1896.72,1211.57 1897.31,1211.57 1897.9,1211.57 1898.48,1211.57 1899.07,1211.57 1899.66,1211.57 1900.24,1211.57 1900.83,1211.57 1901.42,1211.57 1902,1211.57 1902.59,1211.57 1903.17,1211.57 1903.76,1211.57 1904.35,1211.57 1904.93,1211.57 1905.52,1211.57 1906.11,1211.57 1906.69,1211.57 1907.28,1211.57 1907.87,1211.57 1908.45,1211.57 1909.04,1211.57 1909.63,1211.57 1910.21,1211.57 1910.8,1211.57 1911.38,1211.57 1911.97,1211.57 1912.56,1211.57 1913.14,1211.57 1913.73,1211.57 1914.32,1211.57 1914.9,1211.57 1915.49,1211.57 1916.08,1211.57 1916.66,1211.57 1917.25,1211.57 1917.83,1211.57 1918.42,1211.57 1919.01,1211.57 1919.59,1211.57 1920.18,1211.57 1920.77,1211.57 1921.35,1211.57 1921.94,1211.57 1922.53,1211.57 1923.11,1211.57 1923.7,1211.57 1924.29,1211.57 1924.87,1211.57 1925.46,1211.57 1926.04,1211.57 1926.63,1211.57 1927.22,1211.57 1927.8,1211.57 1928.39,1211.57 1928.98,1211.57 1929.56,1211.57 1930.15,1211.57 1930.74,1211.57 1931.32,1211.57 1931.91,1211.57 1932.5,1211.57 1933.08,1211.57 1933.67,1211.57 1934.25,1211.57 1934.84,1211.57 1935.43,1211.57 1936.01,1211.57 1936.6,1211.57 1937.19,1211.57 1937.77,1211.57 1938.36,1211.57 1938.95,1211.57 1939.53,1211.57 1940.12,1211.57 1940.71,1211.57 1941.29,1211.57 1941.88,1211.57 1942.46,1211.57 1943.05,1211.57 1943.64,1211.57 1944.22,1211.57 1944.81,1211.57 1945.4,1211.57 1945.98,1211.57 1946.57,1211.57 1947.16,1211.57 1947.74,1211.57 1948.33,1211.57 1948.91,1211.57 1949.5,1211.57 1950.09,1211.57 1950.67,1211.57 1951.26,1211.57 1951.85,1211.57 1952.43,1211.57 1953.02,1211.57 1953.61,1211.57 1954.19,1211.57 1954.78,1211.57 1955.37,1211.57 1955.95,1211.57 1956.54,1211.57 1957.12,1211.57 1957.71,1211.57 1958.3,1211.57 1958.88,1211.57 1959.47,1211.57 1960.06,1211.57 1960.64,1211.57 1961.23,1211.57 1961.82,1211.57 1962.4,1211.57 1962.99,1211.57 1963.58,1211.57 1964.16,1211.57 1964.75,1211.57 1965.33,1211.57 1965.92,1211.57 1966.51,1211.57 1967.09,1211.57 1967.68,1211.57 1968.27,1211.57 1968.85,1211.57 1969.44,1211.57 1970.03,1211.57 1970.61,1211.57 1971.2,1211.57 1971.78,1211.57 1972.37,1211.57 1972.96,1211.57 1973.54,1211.57 1974.13,1211.57 1974.72,1211.57 1975.3,1211.57 1975.89,1211.57 1976.48,1211.57 1977.06,1211.57 1977.65,1211.57 1978.24,1211.57 1978.82,1211.57 1979.41,1211.57 1979.99,1211.57 1980.58,1211.57 1981.17,1211.57 1981.75,1211.57 1982.34,1211.57 1982.93,1211.57 1983.51,1211.57 1984.1,1211.57 1984.69,1211.57 1985.27,1211.57 1985.86,1211.57 1986.45,1211.57 1987.03,1211.57 1987.62,1211.57 1988.2,1211.57 1988.79,1211.57 1989.38,1211.57 1989.96,1211.57 1990.55,1211.57 1991.14,1211.57 1991.72,1211.57 1992.31,1211.57 1992.9,1211.57 1993.48,1211.57 1994.07,1211.57 1994.65,1211.57 1995.24,1211.57 1995.83,1211.57 1996.41,1211.57 1997,1211.57 1997.59,1211.57 1998.17,1211.57 1998.76,1211.57 1999.35,1211.57 1999.93,1211.57 2000.52,1211.57 2001.11,1211.57 2001.69,1211.57 2002.28,1211.57 2002.86,1211.57 2003.45,1211.57 2004.04,1211.57 2004.62,1211.57 2005.21,1211.57 2005.8,1211.57 2006.38,1211.57 2006.97,1211.57 2007.56,1211.57 2008.14,1211.57 2008.73,1211.57 2009.32,1211.57 2009.9,1211.57 2010.49,1211.57 2011.07,1211.57 2011.66,1211.57 2012.25,1211.57 2012.83,1211.57 2013.42,1211.57 2014.01,1211.57 2014.59,1211.57 2015.18,1211.57 2015.77,1211.57 2016.35,1211.57 2016.94,1211.57 2017.53,1211.57 2018.11,1211.57 2018.7,1211.57 2019.28,1211.57 2019.87,1211.57 2020.46,1211.57 2021.04,1211.57 2021.63,1211.57 2022.22,1211.57 2022.8,1211.57 2023.39,1211.57 2023.98,1211.57 2024.56,1211.57 2025.15,1211.57 2025.73,1211.57 2026.32,1211.57 2026.91,1211.57 2027.49,1211.57 2028.08,1211.57 2028.67,1211.57 2029.25,1211.57 2029.84,1211.57 2030.43,1211.57 2031.01,1211.57 2031.6,1211.57 2032.19,1211.57 2032.77,1211.57 2033.36,1211.57 2033.94,1211.57 2034.53,1211.57 2035.12,1211.57 2035.7,1211.57 2036.29,1211.57 2036.88,1211.57 2037.46,1211.57 2038.05,1211.57 2038.64,1211.57 2039.22,1211.57 2039.81,1211.57 2040.4,1211.57 2040.98,1211.57 2041.57,1211.57 2042.15,1211.57 2042.74,1211.57 2043.33,1211.57 2043.91,1211.57 2044.5,1211.57 2045.09,1211.57 2045.67,1211.57 2046.26,1211.57 2046.85,1211.57 2047.43,1211.57 2048.02,1211.57 2048.6,1211.57 2049.19,1211.57 2049.78,1211.57 2050.36,1211.57 2050.95,1211.57 2051.54,1211.57 2052.12,1211.57 2052.71,1211.57 2053.3,1211.57 2053.88,1211.57 2054.47,1211.57 2055.06,1211.57 2055.64,1211.57 2056.23,1211.57 2056.81,1211.57 2057.4,1211.57 2057.99,1211.57 2058.57,1211.57 2059.16,1211.57 2059.75,1211.57 2060.33,1211.57 2060.92,1211.57 2061.51,1211.57 2062.09,1211.57 2062.68,1211.57 2063.27,1211.57 2063.85,1211.57 2064.44,1211.57 2065.02,1211.57 2065.61,1211.57 2066.2,1211.57 2066.78,1211.57 2067.37,1211.57 2067.96,1211.57 2068.54,1211.57 2069.13,1211.57 2069.72,1211.57 2070.3,1211.57 2070.89,1211.57 2071.48,1211.57 2072.06,1211.57 2072.65,1211.57 2073.23,1211.57 2073.82,1211.57 2074.41,1211.57 2074.99,1211.57 2075.58,1211.57 2076.17,1211.57 2076.75,1211.57 2077.34,1211.57 2077.93,1211.57 2078.51,1211.57 2079.1,1211.57 2079.68,1211.57 2080.27,1211.57 2080.86,1211.57 2081.44,1211.57 2082.03,1211.57 2082.62,1211.57 2083.2,1211.57 2083.79,1211.57 2084.38,1211.57 2084.96,1211.57 2085.55,1211.57 2086.14,1211.57 2086.72,1211.57 2087.31,1211.57 2087.89,1211.57 2088.48,1211.57 2089.07,1211.57 2089.65,1211.57 2090.24,1211.57 2090.83,1211.57 2091.41,1211.57 2092,1211.57 2092.59,1211.57 2093.17,1211.57 2093.76,1211.57 2094.35,1211.57 2094.93,1211.57 2095.52,1211.57 2096.1,1211.57 2096.69,1211.57 2097.28,1211.57 2097.86,1211.57 2098.45,1211.57 2099.04,1211.57 2099.62,1211.57 2100.21,1211.57 2100.8,1211.57 2101.38,1211.57 2101.97,1211.57 2102.55,1211.57 2103.14,1211.57 2103.73,1211.57 2104.31,1211.57 2104.9,1211.57 2105.49,1211.57 2106.07,1211.57 2106.66,1211.57 2107.25,1211.57 2107.83,1211.57 2108.42,1211.57 2109.01,1211.57 2109.59,1211.57 2110.18,1211.57 2110.76,1211.57 2111.35,1211.57 2111.94,1211.57 2112.52,1211.57 2113.11,1211.57 2113.7,1211.57 2114.28,1211.57 2114.87,1211.57 2115.46,1211.57 2116.04,1211.57 2116.63,1211.57 2117.22,1211.57 2117.8,1211.57 2118.39,1211.57 2118.97,1211.57 2119.56,1211.57 2120.15,1211.57 2120.73,1211.57 2121.32,1211.57 2121.91,1211.57 2122.49,1211.57 2123.08,1211.57 2123.67,1211.57 2124.25,1211.57 2124.84,1211.57 2125.42,1211.57 2126.01,1211.57 2126.6,1211.57 2127.18,1211.57 2127.77,1211.57 2128.36,1211.57 2128.94,1211.57 2129.53,1211.57 2130.12,1211.57 2130.7,1211.57 2131.29,1211.57 2131.88,1211.57 2132.46,1211.57 2133.05,1211.57 2133.63,1211.57 2134.22,1211.57 2134.81,1211.57 2135.39,1211.57 2135.98,1211.57 2136.57,1211.57 2137.15,1211.57 2137.74,1211.57 2138.33,1211.57 2138.91,1211.57 2139.5,1211.57 2140.09,1211.57 2140.67,1211.57 2141.26,1211.57 2141.84,1211.57 2142.43,1211.57 2143.02,1211.57 2143.6,1211.57 2144.19,1211.57 2144.78,1211.57 2145.36,1211.57 2145.95,1211.57 2146.54,1211.57 2147.12,1211.57 2147.71,1211.57 2148.3,1211.57 2148.88,1211.57 2149.47,1211.57 2150.05,1211.57 2150.64,1211.57 2151.23,1211.57 2151.81,1211.57 2152.4,1211.57 2152.99,1211.57 2153.57,1211.57 2154.16,1211.57 2154.75,1211.57 2155.33,1211.57 2155.92,1211.57 2156.5,1211.57 2157.09,1211.57 2157.68,1211.57 2158.26,1211.57 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1211.51 L986.612 1211.51 L987.198 1211.51 L987.785 1211.51 L988.371 1211.51 L988.957 1211.51 L989.544 1211.51 L990.13 1211.51 L990.717 1211.51 L991.303 1211.51 L991.889 1211.51 L992.476 1211.51 L993.062 1211.51 L993.649 1211.51 L994.235 1211.51 L994.822 1211.51 L995.408 1211.51 L995.994 1211.51 L996.581 1211.51 L997.167 1211.51 L997.754 1211.51 L998.34 1211.51 L998.926 1211.51 L999.513 1211.51 L1000.1 1211.51 L1000.69 1211.51 L1001.27 1211.51 L1001.86 1211.51 L1002.44 1211.51 L1003.03 1211.51 L1003.62 1211.51 L1004.2 1211.51 L1004.79 1211.51 L1005.38 1211.51 L1005.96 1211.51 L1006.55 1211.51 L1007.14 1211.51 L1007.72 1211.51 L1008.31 1211.51 L1008.9 1211.51 L1009.48 1211.51 L1010.07 1211.51 L1010.65 1211.51 L1011.24 1211.51 L1011.83 1211.51 L1012.41 1211.51 L1013 1211.51 L1013.59 1211.51 L1014.17 1211.51 L1014.76 1211.51 L1015.35 1211.51 L1015.93 1211.51 L1016.52 1211.51 L1017.11 1211.51 L1017.69 1211.51 L1018.28 1211.51 L1018.86 1211.51 L1019.45 1211.51 L1020.04 1211.51 L1020.62 1211.51 L1021.21 1211.51 L1021.8 1211.51 L1022.38 1211.51 L1022.97 1211.51 L1023.56 1211.51 L1024.14 1211.51 L1024.73 1211.51 L1025.32 1211.51 L1025.9 1211.51 L1026.49 1211.51 L1027.07 1211.51 L1027.66 1211.51 L1028.25 1211.51 L1028.83 1211.51 L1029.42 1211.51 L1030.01 1211.51 L1030.59 1211.51 L1031.18 1211.51 L1031.77 1211.51 L1032.35 1211.51 L1032.94 1211.51 L1033.52 1211.51 L1034.11 1211.51 L1034.7 1211.51 L1035.28 1211.51 L1035.87 1211.51 L1036.46 1211.51 L1037.04 1211.51 L1037.63 1211.51 L1038.22 1211.51 L1038.8 1211.51 L1039.39 1211.51 L1039.98 1211.51 L1040.56 1211.51 L1041.15 1211.51 L1041.73 1211.51 L1042.32 1211.51 L1042.91 1211.51 L1043.49 1211.51 L1044.08 1211.51 L1044.67 1211.51 L1045.25 1211.51 L1045.84 1211.51 L1046.43 1211.51 L1047.01 1211.51 L1047.6 1211.51 L1048.19 1211.51 L1048.77 1211.51 L1049.36 1211.51 L1049.94 1211.51 L1050.53 1211.51 L1051.12 1211.51 L1051.7 1211.51 L1052.29 1211.51 L1052.88 1211.51 L1053.46 1211.51 L1054.05 1211.51 L1054.64 1211.51 L1055.22 1211.51 L1055.81 1211.51 L1056.39 1211.51 L1056.98 1211.51 L1057.57 1211.51 L1058.15 1211.51 L1058.74 1211.51 L1059.33 1211.51 L1059.91 1211.51 L1060.5 1211.51 L1061.09 1211.51 L1061.67 1211.51 L1062.26 1211.51 L1062.85 1211.51 L1063.43 1211.51 L1064.02 1211.51 L1064.6 1211.51 L1065.19 1211.51 L1065.78 1211.51 L1066.36 1211.51 L1066.95 1211.51 L1067.54 1211.51 L1068.12 1211.51 L1068.71 1211.51 L1069.3 1211.51 L1069.88 1211.51 L1070.47 1211.51 L1071.06 1211.51 L1071.64 1211.51 L1072.23 1211.51 L1072.81 1211.51 L1073.4 1211.51 L1073.99 1211.51 L1074.57 1211.51 L1075.16 1211.51 L1075.75 1211.51 L1076.33 1211.51 L1076.92 1211.51 L1077.51 1211.51 L1078.09 1211.51 L1078.68 1211.51 L1079.26 1211.51 L1079.85 1211.51 L1080.44 1211.51 L1081.02 1211.51 L1081.61 1211.51 L1082.2 1211.51 L1082.78 1211.51 L1083.37 1211.51 L1083.96 1211.51 L1084.54 1211.51 L1085.13 1211.51 L1085.72 1211.51 L1086.3 1211.51 L1086.89 1211.51 L1087.47 1211.51 L1088.06 1211.51 L1088.65 1211.51 L1089.23 1211.51 L1089.82 1211.51 L1090.41 1211.51 L1090.99 1211.51 L1091.58 1211.51 L1092.17 1211.51 L1092.75 1211.51 L1093.34 1211.51 L1093.93 1211.51 L1094.51 1211.51 L1095.1 1211.51 L1095.68 1211.51 L1096.27 1211.51 L1096.86 1211.51 L1097.44 1211.51 L1098.03 1211.51 L1098.62 1211.51 L1099.2 1211.51 L1099.79 1211.51 L1100.38 1211.51 L1100.96 1211.51 L1101.55 1211.51 L1102.14 1211.51 L1102.72 1211.51 L1103.31 1211.51 L1103.89 1211.51 L1104.48 1211.51 L1105.07 1211.51 L1105.65 1211.51 L1106.24 1211.51 L1106.83 1211.51 L1107.41 1211.51 L1108 1211.51 L1108.59 1211.51 L1109.17 1211.51 L1109.76 1211.51 L1110.34 1211.51 L1110.93 1211.51 L1111.52 1211.51 L1112.1 1211.51 L1112.69 1211.51 L1113.28 1211.51 L1113.86 1211.51 L1114.45 1211.51 L1115.04 1211.51 L1115.62 1211.51 L1116.21 1211.51 L1116.8 1211.51 L1117.38 1211.51 L1117.97 1211.51 L1118.55 1211.51 L1119.14 1211.51 L1119.73 1211.51 L1120.31 1211.51 L1120.9 1211.51 L1121.49 1211.51 L1122.07 1211.51 L1122.66 1211.51 L1123.25 1211.51 L1123.83 1211.51 L1124.42 1211.51 L1125.01 1211.51 L1125.59 1211.51 L1126.18 1211.51 L1126.76 1211.51 L1127.35 1211.51 L1127.94 1211.51 L1128.52 1211.51 L1129.11 1211.51 L1129.7 1211.51 L1130.28 1211.51 L1130.87 1211.51 L1131.46 1211.51 L1132.04 1211.51 L1132.63 1211.51 L1133.21 1211.51 L1133.8 1211.51 L1134.39 1211.51 L1134.97 1211.51 L1135.56 1211.51 L1136.15 1211.51 L1136.73 1211.51 L1137.32 1211.51 L1137.91 1211.51 L1138.49 1211.51 L1139.08 1211.51 L1139.67 1211.51 L1140.25 1211.51 L1140.84 1211.51 L1141.42 1211.51 L1142.01 1211.51 L1142.6 1211.51 L1143.18 1211.51 L1143.77 1211.51 L1144.36 1211.51 L1144.94 1211.51 L1145.53 1211.51 L1146.12 1211.51 L1146.7 1211.51 L1147.29 1211.51 L1147.88 1211.51 L1148.46 1211.51 L1149.05 1211.51 L1149.63 1211.51 L1150.22 1211.51 L1150.81 1211.51 L1151.39 1211.51 L1151.98 1211.51 L1152.57 1211.51 L1153.15 1211.51 L1153.74 1211.51 L1154.33 1211.51 L1154.91 1211.51 L1155.5 1211.51 L1156.09 1211.51 L1156.67 1211.51 L1157.26 1211.51 L1157.84 1211.51 L1158.43 1211.51 L1159.02 1211.51 L1159.6 1211.51 L1160.19 1211.51 L1160.78 1211.51 L1161.36 1211.51 L1161.95 1211.51 L1162.54 1211.51 L1163.12 1211.51 L1163.71 1211.51 L1164.29 1211.51 L1164.88 1211.51 L1165.47 1211.51 L1166.05 1211.51 L1166.64 1211.51 L1167.23 1211.51 L1167.81 1211.51 L1168.4 1211.51 L1168.99 1211.51 L1169.57 1211.51 L1170.16 1211.51 L1170.75 1211.51 L1171.33 1211.51 L1171.92 1211.51 L1172.5 1211.51 L1173.09 1211.51 L1173.68 1211.51 L1174.26 1211.51 L1174.85 1211.51 L1175.44 1211.51 L1176.02 1211.51 L1176.61 1211.51 L1177.2 1211.51 L1177.78 1211.51 L1178.37 1211.51 L1178.96 1211.51 L1179.54 1211.51 L1180.13 1211.51 L1180.71 1211.51 L1181.3 1211.51 L1181.89 1211.51 L1182.47 1211.51 L1183.06 1211.51 L1183.65 1211.51 L1184.23 1211.51 L1184.82 1211.51 L1185.41 1211.51 L1185.99 1211.51 L1186.58 1211.51 L1187.16 1211.51 L1187.75 1211.51 L1188.34 1211.51 L1188.92 1211.51 L1189.51 1211.51 L1190.1 1211.51 L1190.68 1211.51 L1191.27 1211.51 L1191.86 1211.51 L1192.44 1211.51 L1193.03 1211.51 L1193.62 1211.51 L1194.2 1211.51 L1194.79 1211.51 L1195.37 1211.51 L1195.96 1211.51 L1196.55 1211.51 L1197.13 1211.51 L1197.72 1211.51 L1198.31 1211.51 L1198.89 1211.51 L1199.48 1211.51 L1200.07 1211.51 L1200.65 1211.51 L1201.24 1211.51 L1201.83 1211.51 L1202.41 1211.51 L1203 1211.51 L1203.58 1211.51 L1204.17 1211.51 L1204.76 1211.51 L1205.34 1211.51 L1205.93 1211.51 L1206.52 1211.51 L1207.1 1211.51 L1207.69 1211.51 L1208.28 1211.51 L1208.86 1211.51 L1209.45 1211.51 L1210.03 1211.51 L1210.62 1211.51 L1211.21 1211.51 L1211.79 1211.51 L1212.38 1211.51 L1212.97 1211.51 L1213.55 1211.51 L1214.14 1211.51 L1214.73 1211.51 L1215.31 1211.51 L1215.9 1211.51 L1216.49 1211.51 L1217.07 1211.51 L1217.66 1211.51 L1218.24 1211.51 L1218.83 1211.51 L1219.42 1211.51 L1220 1211.51 L1220.59 1211.51 L1221.18 1211.51 L1221.76 1211.51 L1222.35 1211.51 L1222.94 1211.51 L1223.52 1211.51 L1224.11 1211.51 L1224.7 1211.51 L1225.28 1211.51 L1225.87 1211.51 L1226.45 1211.51 L1227.04 1211.51 L1227.63 1211.51 L1228.21 1211.51 L1228.8 1211.51 L1229.39 1211.51 L1229.97 1211.51 L1230.56 1211.51 L1231.15 1211.51 L1231.73 1211.51 L1232.32 1211.51 L1232.91 1211.51 L1233.49 1211.51 L1234.08 1211.51 L1234.66 1211.51 L1235.25 1211.51 L1235.84 1211.51 L1236.42 1211.51 L1237.01 1211.51 L1237.6 1211.51 L1238.18 1211.51 L1238.77 1211.51 L1239.36 1211.51 L1239.94 1211.51 L1240.53 1211.51 L1241.11 1211.51 L1241.7 1211.51 L1242.29 1211.51 L1242.87 1211.51 L1243.46 1211.51 L1244.05 1211.51 L1244.63 1211.51 L1245.22 1211.51 L1245.81 1211.51 L1246.39 1211.51 L1246.98 1211.51 L1247.57 1211.51 L1248.15 1211.51 L1248.74 1211.51 L1249.32 1211.51 L1249.91 1211.51 L1250.5 1211.51 L1251.08 1211.51 L1251.67 1211.51 L1252.26 1211.51 L1252.84 1211.51 L1253.43 1211.51 L1254.02 1211.51 L1254.6 1211.51 L1255.19 1211.51 L1255.78 1211.51 L1256.36 1211.51 L1256.95 1211.51 L1257.53 1211.51 L1258.12 1211.51 L1258.71 1211.51 L1259.29 1211.51 L1259.88 1211.51 L1260.47 1211.51 L1261.05 1211.51 L1261.64 1211.51 L1262.23 1211.51 L1262.81 1211.51 L1263.4 1211.51 L1263.98 1211.51 L1264.57 1211.51 L1265.16 1211.51 L1265.74 1211.51 L1266.33 1211.51 L1266.92 1211.51 L1267.5 1211.51 L1268.09 1211.51 L1268.68 1211.51 L1269.26 1211.51 L1269.85 1211.51 L1270.44 1211.51 L1271.02 1211.51 L1271.61 1211.51 L1272.19 1211.51 L1272.78 1211.51 L1273.37 1211.51 L1273.95 1211.51 L1274.54 1211.51 L1275.13 1211.51 L1275.71 1211.51 L1276.3 1211.51 L1276.89 1211.51 L1277.47 1211.51 L1278.06 1211.51 L1278.65 1211.51 L1279.23 1211.51 L1279.82 1211.51 L1280.4 1211.51 L1280.99 1211.51 L1281.58 1211.51 L1282.16 1211.51 L1282.75 1211.51 L1283.34 1211.51 L1283.92 1211.51 L1284.51 1211.51 L1285.1 1211.51 L1285.68 1211.51 L1286.27 1211.51 L1286.86 1211.51 L1287.44 1211.51 L1288.03 1211.51 L1288.61 1211.51 L1289.2 1211.51 L1289.79 1211.51 L1290.37 1211.51 L1290.96 1211.51 L1291.55 1211.51 L1292.13 1211.51 L1292.72 1211.51 L1293.31 1211.51 L1293.89 1211.51 L1294.48 1211.51 L1295.06 1211.51 L1295.65 1211.51 L1296.24 1211.51 L1296.82 1211.51 L1297.41 1211.51 L1298 1211.51 L1298.58 1211.51 L1299.17 1211.51 L1299.76 1211.51 L1300.34 1211.51 L1300.93 1211.51 L1301.52 1211.51 L1302.1 1211.51 L1302.69 1211.51 L1303.27 1211.51 L1303.86 1211.51 L1304.45 1211.51 L1305.03 1211.51 L1305.62 1211.51 L1306.21 1211.51 L1306.79 1211.51 L1307.38 1211.51 L1307.97 1211.51 L1308.55 1211.51 L1309.14 1211.51 L1309.73 1211.51 L1310.31 1211.51 L1310.9 1211.51 L1311.48 1211.51 L1312.07 1211.51 L1312.66 1211.51 L1313.24 1211.51 L1313.83 1211.51 L1314.42 1211.51 L1315 1211.51 L1315.59 1211.51 L1316.18 1211.51 L1316.76 1211.51 L1317.35 1211.51 L1317.93 1211.51 L1318.52 1211.51 L1319.11 1211.51 L1319.69 1211.51 L1320.28 1211.51 L1320.87 1211.51 L1321.45 1211.51 L1322.04 1211.51 L1322.63 1211.51 L1323.21 1211.51 L1323.8 1211.51 L1324.39 1211.51 L1324.97 1211.51 L1325.56 1211.51 L1326.14 1211.51 L1326.73 1211.51 L1327.32 1211.51 L1327.9 1211.51 L1328.49 1211.51 L1329.08 1211.51 L1329.66 1211.51 L1330.25 1211.51 L1330.84 1211.51 L1331.42 1211.51 L1332.01 1211.51 L1332.6 1211.51 L1333.18 1211.51 L1333.77 1211.51 L1334.35 1211.51 L1334.94 1211.51 L1335.53 1211.51 L1336.11 1211.51 L1336.7 1211.51 L1337.29 1211.51 L1337.87 1211.51 L1338.46 1211.51 L1339.05 1211.51 L1339.63 1211.51 L1340.22 1211.51 L1340.8 1211.51 L1341.39 1211.51 L1341.98 1211.51 L1342.56 1211.51 L1343.15 1211.51 L1343.74 1211.51 L1344.32 1211.51 L1344.91 1211.51 L1345.5 1211.51 L1346.08 1211.51 L1346.67 1211.51 L1347.26 1211.51 L1347.84 1211.51 L1348.43 1211.51 L1349.01 1211.51 L1349.6 1211.51 L1350.19 1211.51 L1350.77 1211.51 L1351.36 1211.51 L1351.95 1211.51 L1352.53 1211.51 L1353.12 1211.51 L1353.71 1211.51 L1354.29 1211.51 L1354.88 1211.51 L1355.47 1211.51 L1356.05 1211.51 L1356.64 1211.51 L1357.22 1211.51 L1357.81 1211.51 L1358.4 1211.51 L1358.98 1211.51 L1359.57 1211.51 L1360.16 1211.51 L1360.74 1211.51 L1361.33 1211.51 L1361.92 1211.51 L1362.5 1211.51 L1363.09 1211.51 L1363.68 1211.51 L1364.26 1211.51 L1364.85 1211.51 L1365.43 1211.51 L1366.02 1211.51 L1366.61 1211.51 L1367.19 1211.51 L1367.78 1211.51 L1368.37 1211.51 L1368.95 1211.51 L1369.54 1211.51 L1370.13 1211.51 L1370.71 1211.51 L1371.3 1211.51 L1371.88 1211.51 L1372.47 1211.51 L1373.06 1211.51 L1373.64 1211.51 L1374.23 1211.51 L1374.82 1211.51 L1375.4 1211.51 L1375.99 1211.51 L1376.58 1211.51 L1377.16 1211.51 L1377.75 1211.51 L1378.34 1211.51 L1378.92 1211.51 L1379.51 1211.51 L1380.09 1211.51 L1380.68 1211.51 L1381.27 1211.51 L1381.85 1211.51 L1382.44 1211.51 L1383.03 1211.51 L1383.61 1211.51 L1384.2 1211.51 L1384.79 1211.51 L1385.37 1211.51 L1385.96 1211.51 L1386.55 1211.51 L1387.13 1211.51 L1387.72 1211.51 L1388.3 1211.51 L1388.89 1211.51 L1389.48 1211.51 L1390.06 1211.51 L1390.65 1211.51 L1391.24 1211.51 L1391.82 1211.51 L1392.41 1211.51 L1393 1211.51 L1393.58 1211.51 L1394.17 1211.51 L1394.75 1211.51 L1395.34 1211.51 L1395.93 1211.51 L1396.51 1211.51 L1397.1 1211.51 L1397.69 1211.51 L1398.27 1211.51 L1398.86 1211.51 L1399.45 1211.51 L1400.03 1211.51 L1400.62 1211.51 L1401.21 1211.51 L1401.79 1211.51 L1402.38 1211.51 L1402.96 1211.51 L1403.55 1211.51 L1404.14 1211.51 L1404.72 1211.51 L1405.31 1211.51 L1405.9 1211.51 L1406.48 1211.51 L1407.07 1211.51 L1407.66 1211.51 L1408.24 1211.51 L1408.83 1211.51 L1409.42 1211.51 L1410 1211.51 L1410.59 1211.51 L1411.17 1211.51 L1411.76 1211.51 L1412.35 1211.51 L1412.93 1211.51 L1413.52 1211.51 L1414.11 1211.51 L1414.69 1211.51 L1415.28 1211.51 L1415.87 1211.51 L1416.45 1211.51 L1417.04 1211.51 L1417.63 1211.51 L1418.21 1211.51 L1418.8 1211.51 L1419.38 1211.51 L1419.97 1211.51 L1420.56 1211.51 L1421.14 1211.51 L1421.73 1211.51 L1422.32 1211.51 L1422.9 1211.51 L1423.49 1211.51 L1424.08 1211.51 L1424.66 1211.51 L1425.25 1211.51 L1425.83 1211.51 L1426.42 1211.51 L1427.01 1211.51 L1427.59 1211.51 L1428.18 1211.51 L1428.77 1211.51 L1429.35 1211.51 L1429.94 1211.51 L1430.53 1211.51 L1431.11 1211.51 L1431.7 1211.51 L1432.29 1211.51 L1432.87 1211.51 L1433.46 1211.51 L1434.04 1211.51 L1434.63 1211.51 L1435.22 1211.51 L1435.8 1211.51 L1436.39 1211.51 L1436.98 1211.51 L1437.56 1211.51 L1438.15 1211.51 L1438.74 1211.51 L1439.32 1211.51 L1439.91 1211.51 L1440.5 1211.51 L1441.08 1211.51 L1441.67 1211.51 L1442.25 1211.51 L1442.84 1211.51 L1443.43 1211.51 L1444.01 1211.51 L1444.6 1211.51 L1445.19 1211.51 L1445.77 1211.51 L1446.36 1211.51 L1446.95 1211.51 L1447.53 1211.51 L1448.12 1211.51 L1448.7 1211.51 L1449.29 1211.51 L1449.88 1211.51 L1450.46 1211.51 L1451.05 1211.51 L1451.64 1211.51 L1452.22 1211.51 L1452.81 1211.51 L1453.4 1211.51 L1453.98 1211.51 L1454.57 1211.51 L1455.16 1211.51 L1455.74 1211.51 L1456.33 1211.51 L1456.91 1211.51 L1457.5 1211.51 L1458.09 1211.51 L1458.67 1211.51 L1459.26 1211.51 L1459.85 1211.51 L1460.43 1211.51 L1461.02 1211.51 L1461.61 1211.51 L1462.19 1211.51 L1462.78 1211.51 L1463.37 1211.51 L1463.95 1211.51 L1464.54 1211.51 L1465.12 1211.51 L1465.71 1211.51 L1466.3 1211.51 L1466.88 1211.51 L1467.47 1211.51 L1468.06 1211.51 L1468.64 1211.51 L1469.23 1211.51 L1469.82 1211.51 L1470.4 1211.51 L1470.99 1211.51 L1471.57 1211.51 L1472.16 1211.51 L1472.75 1211.51 L1473.33 1211.51 L1473.92 1211.51 L1474.51 1211.51 L1475.09 1211.51 L1475.68 1211.51 L1476.27 1211.51 L1476.85 1211.51 L1477.44 1211.51 L1478.03 1211.51 L1478.61 1211.51 L1479.2 1211.51 L1479.78 1211.51 L1480.37 1211.51 L1480.96 1211.51 L1481.54 1211.51 L1482.13 1211.51 L1482.72 1211.51 L1483.3 1211.51 L1483.89 1211.51 L1484.48 1211.51 L1485.06 1211.51 L1485.65 1211.51 L1486.24 1211.51 L1486.82 1211.51 L1487.41 1211.51 L1487.99 1211.51 L1488.58 1211.51 L1489.17 1211.51 L1489.75 1211.51 L1490.34 1211.51 L1490.93 1211.51 L1491.51 1211.51 L1492.1 1211.51 L1492.69 1211.51 L1493.27 1211.51 L1493.86 1211.51 L1494.45 1211.51 L1495.03 1211.51 L1495.62 1211.51 L1496.2 1211.51 L1496.79 1211.51 L1497.38 1211.51 L1497.96 1211.51 L1498.55 1211.51 L1499.14 1211.51 L1499.72 1211.51 L1500.31 1211.51 L1500.9 1211.51 L1501.48 1211.51 L1502.07 1211.51 L1502.65 1211.51 L1503.24 1211.51 L1503.83 1211.51 L1504.41 1211.51 L1505 1211.51 L1505.59 1211.51 L1506.17 1211.51 L1506.76 1211.51 L1507.35 1211.51 L1507.93 1211.51 L1508.52 1211.51 L1509.11 1211.51 L1509.69 1211.51 L1510.28 1211.51 L1510.86 1211.51 L1511.45 1211.51 L1512.04 1211.51 L1512.62 1211.51 L1513.21 1211.51 L1513.8 1211.51 L1514.38 1211.51 L1514.97 1211.51 L1515.56 1211.51 L1516.14 1211.51 L1516.73 1211.51 L1517.32 1211.51 L1517.9 1211.51 L1518.49 1211.51 L1519.07 1211.51 L1519.66 1211.51 L1520.25 1211.51 L1520.83 1211.51 L1521.42 1211.51 L1522.01 1211.51 L1522.59 1211.51 L1523.18 1211.51 L1523.77 1211.51 L1524.35 1211.51 L1524.94 1211.51 L1525.52 1211.51 L1526.11 1211.51 L1526.7 1211.51 L1527.28 1211.51 L1527.87 1211.51 L1528.46 1211.51 L1529.04 1211.51 L1529.63 1211.51 L1530.22 1211.51 L1530.8 1211.51 L1531.39 1211.51 L1531.98 1211.51 L1532.56 1211.51 L1533.15 1211.51 L1533.73 1211.51 L1534.32 1211.51 L1534.91 1211.51 L1535.49 1211.51 L1536.08 1211.51 L1536.67 1211.51 L1537.25 1211.51 L1537.84 1211.51 L1538.43 1211.51 L1539.01 1211.51 L1539.6 1211.51 L1540.19 1211.51 L1540.77 1211.51 L1541.36 1211.51 L1541.94 1211.51 L1542.53 1211.51 L1543.12 1211.51 L1543.7 1211.51 L1544.29 1211.51 L1544.88 1211.51 L1545.46 1211.51 L1546.05 1211.51 L1546.64 1211.51 L1547.22 1211.51 L1547.81 1211.51 L1548.4 1211.51 L1548.98 1211.51 L1549.57 1211.51 L1550.15 1211.51 L1550.74 1211.51 L1551.33 1211.51 L1551.91 1211.51 L1552.5 1211.51 L1553.09 1211.51 L1553.67 1211.51 L1554.26 1211.51 L1554.85 1211.51 L1555.43 1211.51 L1556.02 1211.51 L1556.6 1211.51 L1557.19 1211.51 L1557.78 1211.51 L1558.36 1211.51 L1558.95 1211.51 L1559.54 1211.51 L1560.12 1211.51 L1560.71 1211.51 L1561.3 1211.51 L1561.88 1211.51 L1562.47 1211.51 L1563.06 1211.51 L1563.64 1211.51 L1564.23 1211.51 L1564.81 1211.51 L1565.4 1211.51 L1565.99 1211.51 L1566.57 1211.51 L1567.16 1211.51 L1567.75 1211.51 L1568.33 1211.51 L1568.92 1211.51 L1569.51 1211.51 L1570.09 1211.51 L1570.68 1211.51 L1571.27 1211.51 L1571.85 1211.51 L1572.44 1211.51 L1573.02 1211.51 L1573.61 1211.51 L1574.2 1211.51 L1574.78 1211.51 L1575.37 1211.51 L1575.96 1211.51 L1576.54 1211.51 L1577.13 1211.51 L1577.72 1211.51 L1578.3 1211.51 L1578.89 1211.51 L1579.47 1211.51 L1580.06 1211.51 L1580.65 1211.51 L1581.23 1211.51 L1581.82 1211.51 L1582.41 1211.51 L1582.99 1211.51 L1583.58 1211.51 L1584.17 1211.51 L1584.75 1211.51 L1585.34 1211.51 L1585.93 1211.51 L1586.51 1211.51 L1587.1 1211.51 L1587.68 1211.51 L1588.27 1211.51 L1588.86 1211.51 L1589.44 1211.51 L1590.03 1211.51 L1590.62 1211.51 L1591.2 1211.51 L1591.79 1211.51 L1592.38 1211.51 L1592.96 1211.51 L1593.55 1211.51 L1594.14 1211.51 L1594.72 1211.51 L1595.31 1211.51 L1595.89 1211.51 L1596.48 1211.51 L1597.07 1211.51 L1597.65 1211.51 L1598.24 1211.51 L1598.83 1211.51 L1599.41 1211.51 L1600 1211.51 L1600.59 1211.51 L1601.17 1211.51 L1601.76 1211.51 L1602.34 1211.51 L1602.93 1211.51 L1603.52 1211.51 L1604.1 1211.51 L1604.69 1211.51 L1605.28 1211.51 L1605.86 1211.51 L1606.45 1211.51 L1607.04 1211.51 L1607.62 1211.51 L1608.21 1211.51 L1608.8 1211.51 L1609.38 1211.51 L1609.97 1211.51 L1610.55 1211.51 L1611.14 1211.51 L1611.73 1211.51 L1612.31 1211.51 L1612.9 1211.51 L1613.49 1211.51 L1614.07 1211.51 L1614.66 1211.51 L1615.25 1211.51 L1615.83 1211.51 L1616.42 1211.51 L1617.01 1211.51 L1617.59 1211.51 L1618.18 1211.51 L1618.76 1211.51 L1619.35 1211.51 L1619.94 1211.51 L1620.52 1211.51 L1621.11 1211.51 L1621.7 1211.51 L1622.28 1211.51 L1622.87 1211.51 L1623.46 1211.51 L1624.04 1211.51 L1624.63 1211.51 L1625.22 1211.51 L1625.8 1211.51 L1626.39 1211.51 L1626.97 1211.51 L1627.56 1211.51 L1628.15 1211.51 L1628.73 1211.51 L1629.32 1211.51 L1629.91 1211.51 L1630.49 1211.51 L1631.08 1211.51 L1631.67 1211.51 L1632.25 1211.51 L1632.84 1211.51 L1633.42 1211.51 L1634.01 1211.51 L1634.6 1211.51 L1635.18 1211.51 L1635.77 1211.51 L1636.36 1211.51 L1636.94 1211.51 L1637.53 1211.51 L1638.12 1211.51 L1638.7 1211.51 L1639.29 1211.51 L1639.88 1211.51 L1640.46 1211.51 L1641.05 1211.51 L1641.63 1211.51 L1642.22 1211.51 L1642.81 1211.51 L1643.39 1211.51 L1643.98 1211.51 L1644.57 1211.51 L1645.15 1211.51 L1645.74 1211.51 L1646.33 1211.51 L1646.91 1211.51 L1647.5 1211.51 L1648.09 1211.51 L1648.67 1211.51 L1649.26 1211.51 L1649.84 1211.51 L1650.43 1211.51 L1651.02 1211.51 L1651.6 1211.51 L1652.19 1211.51 L1652.78 1211.51 L1653.36 1211.51 L1653.95 1211.51 L1654.54 1211.51 L1655.12 1211.51 L1655.71 1211.51 L1656.29 1211.51 L1656.88 1211.51 L1657.47 1211.51 L1658.05 1211.51 L1658.64 1211.51 L1659.23 1211.51 L1659.81 1211.51 L1660.4 1211.51 L1660.99 1211.51 L1661.57 1211.51 L1662.16 1211.51 L1662.75 1211.51 L1663.33 1211.51 L1663.92 1211.51 L1664.5 1211.51 L1665.09 1211.51 L1665.68 1211.51 L1666.26 1211.51 L1666.85 1211.51 L1667.44 1211.51 L1668.02 1211.51 L1668.61 1211.51 L1669.2 1211.51 L1669.78 1211.51 L1670.37 1211.51 L1670.96 1211.51 L1671.54 1211.51 L1672.13 1211.51 L1672.71 1211.51 L1673.3 1211.51 L1673.89 1211.51 L1674.47 1211.51 L1675.06 1211.51 L1675.65 1211.51 L1676.23 1211.51 L1676.82 1211.51 L1677.41 1211.51 L1677.99 1211.51 L1678.58 1211.51 L1679.17 1211.51 L1679.75 1211.51 L1680.34 1211.51 L1680.92 1211.51 L1681.51 1211.51 L1682.1 1211.51 L1682.68 1211.51 L1683.27 1211.51 L1683.86 1211.51 L1684.44 1211.51 L1685.03 1211.51 L1685.62 1211.51 L1686.2 1211.51 L1686.79 1211.51 L1687.37 1211.51 L1687.96 1211.51 L1688.55 1211.51 L1689.13 1211.51 L1689.72 1211.51 L1690.31 1211.51 L1690.89 1211.51 L1691.48 1211.51 L1692.07 1211.51 L1692.65 1211.51 L1693.24 1211.51 L1693.83 1211.51 L1694.41 1211.51 L1695 1211.51 L1695.58 1211.51 L1696.17 1211.51 L1696.76 1211.51 L1697.34 1211.51 L1697.93 1211.51 L1698.52 1211.51 L1699.1 1211.51 L1699.69 1211.51 L1700.28 1211.51 L1700.86 1211.51 L1701.45 1211.51 L1702.04 1211.51 L1702.62 1211.51 L1703.21 1211.51 L1703.79 1211.51 L1704.38 1211.51 L1704.97 1211.51 L1705.55 1211.51 L1706.14 1211.51 L1706.73 1211.51 L1707.31 1211.51 L1707.9 1211.51 L1708.49 1211.51 L1709.07 1211.51 L1709.66 1211.51 L1710.24 1211.51 L1710.83 1211.51 L1711.42 1211.51 L1712 1211.51 L1712.59 1211.51 L1713.18 1211.51 L1713.76 1211.51 L1714.35 1211.51 L1714.94 1211.51 L1715.52 1211.51 L1716.11 1211.51 L1716.7 1211.51 L1717.28 1211.51 L1717.87 1211.51 L1718.45 1211.51 L1719.04 1211.51 L1719.63 1211.51 L1720.21 1211.51 L1720.8 1211.51 L1721.39 1211.51 L1721.97 1211.51 L1722.56 1211.51 L1723.15 1211.51 L1723.73 1211.51 L1724.32 1211.51 L1724.91 1211.51 L1725.49 1211.51 L1726.08 1211.51 L1726.66 1211.51 L1727.25 1211.51 L1727.84 1211.51 L1728.42 1211.51 L1729.01 1211.51 L1729.6 1211.51 L1730.18 1211.51 L1730.77 1211.51 L1731.36 1211.51 L1731.94 1211.51 L1732.53 1211.51 L1733.11 1211.51 L1733.7 1211.51 L1734.29 1211.51 L1734.87 1211.51 L1735.46 1211.51 L1736.05 1211.51 L1736.63 1211.51 L1737.22 1211.51 L1737.81 1211.51 L1738.39 1211.51 L1738.98 1211.51 L1739.57 1211.51 L1740.15 1211.51 L1740.74 1211.51 L1741.32 1211.51 L1741.91 1211.51 L1742.5 1211.51 L1743.08 1211.51 L1743.67 1211.51 L1744.26 1211.51 L1744.84 1211.51 L1745.43 1211.51 L1746.02 1211.51 L1746.6 1211.51 L1747.19 1211.51 L1747.78 1211.51 L1748.36 1211.51 L1748.95 1211.51 L1749.53 1211.51 L1750.12 1211.51 L1750.71 1211.51 L1751.29 1211.51 L1751.88 1211.51 L1752.47 1211.51 L1753.05 1211.51 L1753.64 1211.51 L1754.23 1211.51 L1754.81 1211.51 L1755.4 1211.51 L1755.99 1211.51 L1756.57 1211.51 L1757.16 1211.51 L1757.74 1211.51 L1758.33 1211.51 L1758.92 1211.51 L1759.5 1211.51 L1760.09 1211.51 L1760.68 1211.51 L1761.26 1211.51 L1761.85 1211.51 L1762.44 1211.51 L1763.02 1211.51 L1763.61 1211.51 L1764.19 1211.51 L1764.78 1211.51 L1765.37 1211.51 L1765.95 1211.51 L1766.54 1211.51 L1767.13 1211.51 L1767.71 1211.51 L1768.3 1211.51 L1768.89 1211.51 L1769.47 1211.51 L1770.06 1211.51 L1770.65 1211.51 L1771.23 1211.51 L1771.82 1211.51 L1772.4 1211.51 L1772.99 1211.51 L1773.58 1211.51 L1774.16 1211.51 L1774.75 1211.51 L1775.34 1211.51 L1775.92 1211.51 L1776.51 1211.51 L1777.1 1211.51 L1777.68 1211.51 L1778.27 1211.51 L1778.86 1211.51 L1779.44 1211.51 L1780.03 1211.51 L1780.61 1211.51 L1781.2 1211.51 L1781.79 1211.51 L1782.37 1211.51 L1782.96 1211.51 L1783.55 1211.51 L1784.13 1211.51 L1784.72 1211.51 L1785.31 1211.51 L1785.89 1211.51 L1786.48 1211.51 L1787.06 1211.51 L1787.65 1211.51 L1788.24 1211.51 L1788.82 1211.51 L1789.41 1211.51 L1790 1211.51 L1790.58 1211.51 L1791.17 1211.51 L1791.76 1211.51 L1792.34 1211.51 L1792.93 1211.51 L1793.52 1211.51 L1794.1 1211.51 L1794.69 1211.51 L1795.27 1211.51 L1795.86 1211.51 L1796.45 1211.51 L1797.03 1211.51 L1797.62 1211.51 L1798.21 1211.51 L1798.79 1211.51 L1799.38 1211.51 L1799.97 1211.51 L1800.55 1211.51 L1801.14 1211.51 L1801.73 1211.51 L1802.31 1211.51 L1802.9 1211.51 L1803.48 1211.51 L1804.07 1211.51 L1804.66 1211.51 L1805.24 1211.51 L1805.83 1211.51 L1806.42 1211.51 L1807 1211.51 L1807.59 1211.51 L1808.18 1211.51 L1808.76 1211.51 L1809.35 1211.51 L1809.94 1211.51 L1810.52 1211.51 L1811.11 1211.51 L1811.69 1211.51 L1812.28 1211.51 L1812.87 1211.51 L1813.45 1211.51 L1814.04 1211.51 L1814.63 1211.51 L1815.21 1211.51 L1815.8 1211.51 L1816.39 1211.51 L1816.97 1211.51 L1817.56 1211.51 L1818.14 1211.51 L1818.73 1211.51 L1819.32 1211.51 L1819.9 1211.51 L1820.49 1211.51 L1821.08 1211.51 L1821.66 1211.51 L1822.25 1211.51 L1822.84 1211.51 L1823.42 1211.51 L1824.01 1211.51 L1824.6 1211.51 L1825.18 1211.51 L1825.77 1211.51 L1826.35 1211.51 L1826.94 1211.51 L1827.53 1211.51 L1828.11 1211.51 L1828.7 1211.51 L1829.29 1211.51 L1829.87 1211.51 L1830.46 1211.51 L1831.05 1211.51 L1831.63 1211.51 L1832.22 1211.51 L1832.81 1211.51 L1833.39 1211.51 L1833.98 1211.51 L1834.56 1211.51 L1835.15 1211.51 L1835.74 1211.51 L1836.32 1211.51 L1836.91 1211.51 L1837.5 1211.51 L1838.08 1211.51 L1838.67 1211.51 L1839.26 1211.51 L1839.84 1211.51 L1840.43 1211.51 L1841.01 1211.51 L1841.6 1211.51 L1842.19 1211.51 L1842.77 1211.51 L1843.36 1211.51 L1843.95 1211.51 L1844.53 1211.51 L1845.12 1211.51 L1845.71 1211.51 L1846.29 1211.51 L1846.88 1211.51 L1847.47 1211.51 L1848.05 1211.51 L1848.64 1211.51 L1849.22 1211.51 L1849.81 1211.51 L1850.4 1211.51 L1850.98 1211.51 L1851.57 1211.51 L1852.16 1211.51 L1852.74 1211.51 L1853.33 1211.51 L1853.92 1211.51 L1854.5 1211.51 L1855.09 1211.51 L1855.68 1211.51 L1856.26 1211.51 L1856.85 1211.51 L1857.43 1211.51 L1858.02 1211.51 L1858.61 1211.51 L1859.19 1211.51 L1859.78 1211.51 L1860.37 1211.51 L1860.95 1211.51 L1861.54 1211.51 L1862.13 1211.51 L1862.71 1211.51 L1863.3 1211.51 L1863.88 1211.51 L1864.47 1211.51 L1865.06 1211.51 L1865.64 1211.51 L1866.23 1211.51 L1866.82 1211.51 L1867.4 1211.51 L1867.99 1211.51 L1868.58 1211.51 L1869.16 1211.51 L1869.75 1211.51 L1870.34 1211.51 L1870.92 1211.51 L1871.51 1211.51 L1872.09 1211.51 L1872.68 1211.51 L1873.27 1211.51 L1873.85 1211.51 L1874.44 1211.51 L1875.03 1211.51 L1875.61 1211.51 L1876.2 1211.51 L1876.79 1211.51 L1877.37 1211.51 L1877.96 1211.51 L1878.55 1211.51 L1879.13 1211.51 L1879.72 1211.51 L1880.3 1211.51 L1880.89 1211.51 L1881.48 1211.51 L1882.06 1211.51 L1882.65 1211.51 L1883.24 1211.51 L1883.82 1211.51 L1884.41 1211.51 L1885 1211.51 L1885.58 1211.51 L1886.17 1211.51 L1886.76 1211.51 L1887.34 1211.51 L1887.93 1211.51 L1888.51 1211.51 L1889.1 1211.51 L1889.69 1211.51 L1890.27 1211.51 L1890.86 1211.51 L1891.45 1211.51 L1892.03 1211.51 L1892.62 1211.51 L1893.21 1211.51 L1893.79 1211.51 L1894.38 1211.51 L1894.96 1211.51 L1895.55 1211.51 L1896.14 1211.51 L1896.72 1211.51 L1897.31 1211.51 L1897.9 1211.51 L1898.48 1211.51 L1899.07 1211.51 L1899.66 1211.51 L1900.24 1211.51 L1900.83 1211.51 L1901.42 1211.51 L1902 1211.51 L1902.59 1211.51 L1903.17 1211.51 L1903.76 1211.51 L1904.35 1211.51 L1904.93 1211.51 L1905.52 1211.51 L1906.11 1211.51 L1906.69 1211.51 L1907.28 1211.51 L1907.87 1211.51 L1908.45 1211.51 L1909.04 1211.51 L1909.63 1211.51 L1910.21 1211.51 L1910.8 1211.51 L1911.38 1211.51 L1911.97 1211.51 L1912.56 1211.51 L1913.14 1211.51 L1913.73 1211.51 L1914.32 1211.51 L1914.9 1211.51 L1915.49 1211.51 L1916.08 1211.51 L1916.66 1211.51 L1917.25 1211.51 L1917.83 1211.51 L1918.42 1211.51 L1919.01 1211.51 L1919.59 1211.51 L1920.18 1211.51 L1920.77 1211.51 L1921.35 1211.51 L1921.94 1211.51 L1922.53 1211.51 L1923.11 1211.51 L1923.7 1211.51 L1924.29 1211.51 L1924.87 1211.51 L1925.46 1211.51 L1926.04 1211.51 L1926.63 1211.51 L1927.22 1211.51 L1927.8 1211.51 L1928.39 1211.51 L1928.98 1211.51 L1929.56 1211.51 L1930.15 1211.51 L1930.74 1211.51 L1931.32 1211.51 L1931.91 1211.51 L1932.5 1211.51 L1933.08 1211.51 L1933.67 1211.51 L1934.25 1211.51 L1934.84 1211.51 L1935.43 1211.51 L1936.01 1211.51 L1936.6 1211.51 L1937.19 1211.51 L1937.77 1211.51 L1938.36 1211.51 L1938.95 1211.51 L1939.53 1211.51 L1940.12 1211.51 L1940.71 1211.51 L1941.29 1211.51 L1941.88 1211.51 L1942.46 1211.51 L1943.05 1211.51 L1943.64 1211.51 L1944.22 1211.51 L1944.81 1211.51 L1945.4 1211.51 L1945.98 1211.51 L1946.57 1211.51 L1947.16 1211.51 L1947.74 1211.51 L1948.33 1211.51 L1948.91 1211.51 L1949.5 1211.51 L1950.09 1211.51 L1950.67 1211.51 L1951.26 1211.51 L1951.85 1211.51 L1952.43 1211.51 L1953.02 1211.51 L1953.61 1211.51 L1954.19 1211.51 L1954.78 1211.51 L1955.37 1211.51 L1955.95 1211.51 L1956.54 1211.51 L1957.12 1211.51 L1957.71 1211.51 L1958.3 1211.51 L1958.88 1211.51 L1959.47 1211.51 L1960.06 1211.51 L1960.64 1211.51 L1961.23 1211.51 L1961.82 1211.51 L1962.4 1211.51 L1962.99 1211.51 L1963.58 1211.51 L1964.16 1211.51 L1964.75 1211.51 L1965.33 1211.51 L1965.92 1211.51 L1966.51 1211.51 L1967.09 1211.51 L1967.68 1211.51 L1968.27 1211.51 L1968.85 1211.51 L1969.44 1211.51 L1970.03 1211.51 L1970.61 1211.51 L1971.2 1211.51 L1971.78 1211.51 L1972.37 1211.51 L1972.96 1211.51 L1973.54 1211.51 L1974.13 1211.51 L1974.72 1211.51 L1975.3 1211.51 L1975.89 1211.51 L1976.48 1211.51 L1977.06 1211.51 L1977.65 1211.51 L1978.24 1211.51 L1978.82 1211.51 L1979.41 1211.51 L1979.99 1211.51 L1980.58 1211.51 L1981.17 1211.51 L1981.75 1211.51 L1982.34 1211.51 L1982.93 1211.51 L1983.51 1211.51 L1984.1 1211.51 L1984.69 1211.51 L1985.27 1211.51 L1985.86 1211.51 L1986.45 1211.51 L1987.03 1211.51 L1987.62 1211.51 L1988.2 1211.51 L1988.79 1211.51 L1989.38 1211.51 L1989.96 1211.51 L1990.55 1211.51 L1991.14 1211.51 L1991.72 1211.51 L1992.31 1211.51 L1992.9 1211.51 L1993.48 1211.51 L1994.07 1211.51 L1994.65 1211.51 L1995.24 1211.51 L1995.83 1211.51 L1996.41 1211.51 L1997 1211.51 L1997.59 1211.51 L1998.17 1211.51 L1998.76 1211.51 L1999.35 1211.51 L1999.93 1211.51 L2000.52 1211.51 L2001.11 1211.51 L2001.69 1211.51 L2002.28 1211.51 L2002.86 1211.51 L2003.45 1211.51 L2004.04 1211.51 L2004.62 1211.51 L2005.21 1211.51 L2005.8 1211.51 L2006.38 1211.51 L2006.97 1211.51 L2007.56 1211.51 L2008.14 1211.51 L2008.73 1211.51 L2009.32 1211.51 L2009.9 1211.51 L2010.49 1211.51 L2011.07 1211.51 L2011.66 1211.51 L2012.25 1211.51 L2012.83 1211.51 L2013.42 1211.51 L2014.01 1211.51 L2014.59 1211.51 L2015.18 1211.51 L2015.77 1211.51 L2016.35 1211.51 L2016.94 1211.51 L2017.53 1211.51 L2018.11 1211.51 L2018.7 1211.51 L2019.28 1211.51 L2019.87 1211.51 L2020.46 1211.51 L2021.04 1211.51 L2021.63 1211.51 L2022.22 1211.51 L2022.8 1211.51 L2023.39 1211.51 L2023.98 1211.51 L2024.56 1211.51 L2025.15 1211.51 L2025.73 1211.51 L2026.32 1211.51 L2026.91 1211.51 L2027.49 1211.51 L2028.08 1211.51 L2028.67 1211.51 L2029.25 1211.51 L2029.84 1211.51 L2030.43 1211.51 L2031.01 1211.51 L2031.6 1211.51 L2032.19 1211.51 L2032.77 1211.51 L2033.36 1211.51 L2033.94 1211.51 L2034.53 1211.51 L2035.12 1211.51 L2035.7 1211.51 L2036.29 1211.51 L2036.88 1211.51 L2037.46 1211.51 L2038.05 1211.51 L2038.64 1211.51 L2039.22 1211.51 L2039.81 1211.51 L2040.4 1211.51 L2040.98 1211.51 L2041.57 1211.51 L2042.15 1211.51 L2042.74 1211.51 L2043.33 1211.51 L2043.91 1211.51 L2044.5 1211.51 L2045.09 1211.51 L2045.67 1211.51 L2046.26 1211.51 L2046.85 1211.51 L2047.43 1211.51 L2048.02 1211.51 L2048.6 1211.51 L2049.19 1211.51 L2049.78 1211.51 L2050.36 1211.51 L2050.95 1211.51 L2051.54 1211.51 L2052.12 1211.51 L2052.71 1211.51 L2053.3 1211.51 L2053.88 1211.51 L2054.47 1211.51 L2055.06 1211.51 L2055.64 1211.51 L2056.23 1211.51 L2056.81 1211.51 L2057.4 1211.51 L2057.99 1211.51 L2058.57 1211.51 L2059.16 1211.51 L2059.75 1211.51 L2060.33 1211.51 L2060.92 1211.51 L2061.51 1211.51 L2062.09 1211.51 L2062.68 1211.51 L2063.27 1211.51 L2063.85 1211.51 L2064.44 1211.51 L2065.02 1211.51 L2065.61 1211.51 L2066.2 1211.51 L2066.78 1211.51 L2067.37 1211.51 L2067.96 1211.51 L2068.54 1211.51 L2069.13 1211.51 L2069.72 1211.51 L2070.3 1211.51 L2070.89 1211.51 L2071.48 1211.51 L2072.06 1211.51 L2072.65 1211.51 L2073.23 1211.51 L2073.82 1211.51 L2074.41 1211.51 L2074.99 1211.51 L2075.58 1211.51 L2076.17 1211.51 L2076.75 1211.51 L2077.34 1211.51 L2077.93 1211.51 L2078.51 1211.51 L2079.1 1211.51 L2079.68 1211.51 L2080.27 1211.51 L2080.86 1211.51 L2081.44 1211.51 L2082.03 1211.51 L2082.62 1211.51 L2083.2 1211.51 L2083.79 1211.51 L2084.38 1211.51 L2084.96 1211.51 L2085.55 1211.51 L2086.14 1211.51 L2086.72 1211.51 L2087.31 1211.51 L2087.89 1211.51 L2088.48 1211.51 L2089.07 1211.51 L2089.65 1211.51 L2090.24 1211.51 L2090.83 1211.51 L2091.41 1211.51 L2092 1211.51 L2092.59 1211.51 L2093.17 1211.51 L2093.76 1211.51 L2094.35 1211.51 L2094.93 1211.51 L2095.52 1211.51 L2096.1 1211.51 L2096.69 1211.51 L2097.28 1211.51 L2097.86 1211.51 L2098.45 1211.51 L2099.04 1211.51 L2099.62 1211.51 L2100.21 1211.51 L2100.8 1211.51 L2101.38 1211.51 L2101.97 1211.51 L2102.55 1211.51 L2103.14 1211.51 L2103.73 1211.51 L2104.31 1211.51 L2104.9 1211.51 L2105.49 1211.51 L2106.07 1211.51 L2106.66 1211.51 L2107.25 1211.51 L2107.83 1211.51 L2108.42 1211.51 L2109.01 1211.51 L2109.59 1211.51 L2110.18 1211.51 L2110.76 1211.51 L2111.35 1211.51 L2111.94 1211.51 L2112.52 1211.51 L2113.11 1211.51 L2113.7 1211.51 L2114.28 1211.51 L2114.87 1211.51 L2115.46 1211.51 L2116.04 1211.51 L2116.63 1211.51 L2117.22 1211.51 L2117.8 1211.51 L2118.39 1211.51 L2118.97 1211.51 L2119.56 1211.51 L2120.15 1211.51 L2120.73 1211.51 L2121.32 1211.51 L2121.91 1211.51 L2122.49 1211.51 L2123.08 1211.51 L2123.67 1211.51 L2124.25 1211.51 L2124.84 1211.51 L2125.42 1211.51 L2126.01 1211.51 L2126.6 1211.51 L2127.18 1211.51 L2127.77 1211.51 L2128.36 1211.51 L2128.94 1211.51 L2129.53 1211.51 L2130.12 1211.51 L2130.7 1211.51 L2131.29 1211.51 L2131.88 1211.51 L2132.46 1211.51 L2133.05 1211.51 L2133.63 1211.51 L2134.22 1211.51 L2134.81 1211.51 L2135.39 1211.51 L2135.98 1211.51 L2136.57 1211.51 L2137.15 1211.51 L2137.74 1211.51 L2138.33 1211.51 L2138.91 1211.51 L2139.5 1211.51 L2140.09 1211.51 L2140.67 1211.51 L2141.26 1211.51 L2141.84 1211.51 L2142.43 1211.51 L2143.02 1211.51 L2143.6 1211.51 L2144.19 1211.51 L2144.78 1211.51 L2145.36 1211.51 L2145.95 1211.51 L2146.54 1211.51 L2147.12 1211.51 L2147.71 1211.51 L2148.3 1211.51 L2148.88 1211.51 L2149.47 1211.51 L2150.05 1211.51 L2150.64 1211.51 L2151.23 1211.51 L2151.81 1211.51 L2152.4 1211.51 L2152.99 1211.51 L2153.57 1211.51 L2154.16 1211.51 L2154.75 1211.51 L2155.33 1211.51 L2155.92 1211.51 L2156.5 1211.51 L2157.09 1211.51 L2157.68 1211.51 L2158.26 1211.51 L2158.26 1211.28 L2157.68 1211.28 L2157.09 1211.28 L2156.5 1211.28 L2155.92 1211.28 L2155.33 1211.28 L2154.75 1211.28 L2154.16 1211.28 L2153.57 1211.28 L2152.99 1211.28 L2152.4 1211.28 L2151.81 1211.28 L2151.23 1211.28 L2150.64 1211.28 L2150.05 1211.28 L2149.47 1211.28 L2148.88 1211.28 L2148.3 1211.28 L2147.71 1211.28 L2147.12 1211.28 L2146.54 1211.28 L2145.95 1211.28 L2145.36 1211.28 L2144.78 1211.28 L2144.19 1211.28 L2143.6 1211.28 L2143.02 1211.28 L2142.43 1211.28 L2141.84 1211.28 L2141.26 1211.28 L2140.67 1211.28 L2140.09 1211.28 L2139.5 1211.28 L2138.91 1211.28 L2138.33 1211.28 L2137.74 1211.28 L2137.15 1211.28 L2136.57 1211.28 L2135.98 1211.28 L2135.39 1211.28 L2134.81 1211.28 L2134.22 1211.28 L2133.63 1211.28 L2133.05 1211.28 L2132.46 1211.28 L2131.88 1211.28 L2131.29 1211.28 L2130.7 1211.28 L2130.12 1211.28 L2129.53 1211.28 L2128.94 1211.28 L2128.36 1211.28 L2127.77 1211.28 L2127.18 1211.28 L2126.6 1211.28 L2126.01 1211.28 L2125.42 1211.28 L2124.84 1211.28 L2124.25 1211.28 L2123.67 1211.28 L2123.08 1211.28 L2122.49 1211.28 L2121.91 1211.28 L2121.32 1211.28 L2120.73 1211.28 L2120.15 1211.28 L2119.56 1211.28 L2118.97 1211.28 L2118.39 1211.28 L2117.8 1211.28 L2117.22 1211.28 L2116.63 1211.28 L2116.04 1211.28 L2115.46 1211.28 L2114.87 1211.28 L2114.28 1211.28 L2113.7 1211.28 L2113.11 1211.28 L2112.52 1211.28 L2111.94 1211.28 L2111.35 1211.28 L2110.76 1211.28 L2110.18 1211.28 L2109.59 1211.28 L2109.01 1211.28 L2108.42 1211.28 L2107.83 1211.28 L2107.25 1211.28 L2106.66 1211.28 L2106.07 1211.28 L2105.49 1211.28 L2104.9 1211.28 L2104.31 1211.28 L2103.73 1211.28 L2103.14 1211.28 L2102.55 1211.28 L2101.97 1211.28 L2101.38 1211.28 L2100.8 1211.28 L2100.21 1211.28 L2099.62 1211.28 L2099.04 1211.28 L2098.45 1211.28 L2097.86 1211.28 L2097.28 1211.28 L2096.69 1211.28 L2096.1 1211.28 L2095.52 1211.28 L2094.93 1211.28 L2094.35 1211.28 L2093.76 1211.28 L2093.17 1211.28 L2092.59 1211.28 L2092 1211.28 L2091.41 1211.28 L2090.83 1211.28 L2090.24 1211.28 L2089.65 1211.28 L2089.07 1211.28 L2088.48 1211.28 L2087.89 1211.28 L2087.31 1211.28 L2086.72 1211.28 L2086.14 1211.28 L2085.55 1211.28 L2084.96 1211.28 L2084.38 1211.28 L2083.79 1211.28 L2083.2 1211.28 L2082.62 1211.28 L2082.03 1211.28 L2081.44 1211.28 L2080.86 1211.28 L2080.27 1211.28 L2079.68 1211.28 L2079.1 1211.28 L2078.51 1211.28 L2077.93 1211.28 L2077.34 1211.28 L2076.75 1211.28 L2076.17 1211.28 L2075.58 1211.28 L2074.99 1211.28 L2074.41 1211.28 L2073.82 1211.28 L2073.23 1211.28 L2072.65 1211.28 L2072.06 1211.28 L2071.48 1211.28 L2070.89 1211.28 L2070.3 1211.28 L2069.72 1211.28 L2069.13 1211.28 L2068.54 1211.28 L2067.96 1211.28 L2067.37 1211.28 L2066.78 1211.28 L2066.2 1211.28 L2065.61 1211.28 L2065.02 1211.28 L2064.44 1211.28 L2063.85 1211.28 L2063.27 1211.28 L2062.68 1211.28 L2062.09 1211.28 L2061.51 1211.28 L2060.92 1211.28 L2060.33 1211.28 L2059.75 1211.28 L2059.16 1211.28 L2058.57 1211.28 L2057.99 1211.28 L2057.4 1211.28 L2056.81 1211.28 L2056.23 1211.28 L2055.64 1211.28 L2055.06 1211.28 L2054.47 1211.28 L2053.88 1211.28 L2053.3 1211.28 L2052.71 1211.28 L2052.12 1211.28 L2051.54 1211.28 L2050.95 1211.28 L2050.36 1211.28 L2049.78 1211.28 L2049.19 1211.28 L2048.6 1211.28 L2048.02 1211.28 L2047.43 1211.28 L2046.85 1211.28 L2046.26 1211.28 L2045.67 1211.28 L2045.09 1211.28 L2044.5 1211.28 L2043.91 1211.28 L2043.33 1211.28 L2042.74 1211.28 L2042.15 1211.28 L2041.57 1211.28 L2040.98 1211.28 L2040.4 1211.28 L2039.81 1211.28 L2039.22 1211.28 L2038.64 1211.28 L2038.05 1211.28 L2037.46 1211.28 L2036.88 1211.28 L2036.29 1211.28 L2035.7 1211.28 L2035.12 1211.28 L2034.53 1211.28 L2033.94 1211.28 L2033.36 1211.28 L2032.77 1211.28 L2032.19 1211.28 L2031.6 1211.28 L2031.01 1211.28 L2030.43 1211.28 L2029.84 1211.28 L2029.25 1211.28 L2028.67 1211.28 L2028.08 1211.28 L2027.49 1211.28 L2026.91 1211.28 L2026.32 1211.28 L2025.73 1211.28 L2025.15 1211.28 L2024.56 1211.28 L2023.98 1211.28 L2023.39 1211.28 L2022.8 1211.28 L2022.22 1211.28 L2021.63 1211.28 L2021.04 1211.28 L2020.46 1211.28 L2019.87 1211.28 L2019.28 1211.28 L2018.7 1211.28 L2018.11 1211.28 L2017.53 1211.28 L2016.94 1211.28 L2016.35 1211.28 L2015.77 1211.28 L2015.18 1211.28 L2014.59 1211.28 L2014.01 1211.28 L2013.42 1211.28 L2012.83 1211.28 L2012.25 1211.28 L2011.66 1211.28 L2011.07 1211.28 L2010.49 1211.28 L2009.9 1211.28 L2009.32 1211.28 L2008.73 1211.28 L2008.14 1211.28 L2007.56 1211.28 L2006.97 1211.28 L2006.38 1211.28 L2005.8 1211.28 L2005.21 1211.28 L2004.62 1211.28 L2004.04 1211.28 L2003.45 1211.28 L2002.86 1211.28 L2002.28 1211.28 L2001.69 1211.28 L2001.11 1211.28 L2000.52 1211.28 L1999.93 1211.28 L1999.35 1211.28 L1998.76 1211.28 L1998.17 1211.28 L1997.59 1211.28 L1997 1211.28 L1996.41 1211.28 L1995.83 1211.28 L1995.24 1211.28 L1994.65 1211.28 L1994.07 1211.28 L1993.48 1211.28 L1992.9 1211.28 L1992.31 1211.28 L1991.72 1211.28 L1991.14 1211.28 L1990.55 1211.28 L1989.96 1211.28 L1989.38 1211.28 L1988.79 1211.28 L1988.2 1211.28 L1987.62 1211.28 L1987.03 1211.28 L1986.45 1211.28 L1985.86 1211.28 L1985.27 1211.28 L1984.69 1211.28 L1984.1 1211.28 L1983.51 1211.28 L1982.93 1211.28 L1982.34 1211.28 L1981.75 1211.28 L1981.17 1211.28 L1980.58 1211.28 L1979.99 1211.28 L1979.41 1211.28 L1978.82 1211.28 L1978.24 1211.28 L1977.65 1211.28 L1977.06 1211.28 L1976.48 1211.28 L1975.89 1211.28 L1975.3 1211.28 L1974.72 1211.28 L1974.13 1211.28 L1973.54 1211.28 L1972.96 1211.28 L1972.37 1211.28 L1971.78 1211.28 L1971.2 1211.28 L1970.61 1211.28 L1970.03 1211.28 L1969.44 1211.28 L1968.85 1211.28 L1968.27 1211.28 L1967.68 1211.28 L1967.09 1211.28 L1966.51 1211.28 L1965.92 1211.28 L1965.33 1211.28 L1964.75 1211.28 L1964.16 1211.28 L1963.58 1211.28 L1962.99 1211.28 L1962.4 1211.28 L1961.82 1211.28 L1961.23 1211.28 L1960.64 1211.28 L1960.06 1211.28 L1959.47 1211.28 L1958.88 1211.28 L1958.3 1211.28 L1957.71 1211.28 L1957.12 1211.28 L1956.54 1211.28 L1955.95 1211.28 L1955.37 1211.28 L1954.78 1211.28 L1954.19 1211.28 L1953.61 1211.28 L1953.02 1211.28 L1952.43 1211.28 L1951.85 1211.28 L1951.26 1211.28 L1950.67 1211.28 L1950.09 1211.28 L1949.5 1211.28 L1948.91 1211.28 L1948.33 1211.28 L1947.74 1211.28 L1947.16 1211.28 L1946.57 1211.28 L1945.98 1211.28 L1945.4 1211.28 L1944.81 1211.28 L1944.22 1211.28 L1943.64 1211.28 L1943.05 1211.28 L1942.46 1211.28 L1941.88 1211.28 L1941.29 1211.28 L1940.71 1211.28 L1940.12 1211.28 L1939.53 1211.28 L1938.95 1211.28 L1938.36 1211.28 L1937.77 1211.28 L1937.19 1211.28 L1936.6 1211.28 L1936.01 1211.28 L1935.43 1211.28 L1934.84 1211.28 L1934.25 1211.28 L1933.67 1211.28 L1933.08 1211.28 L1932.5 1211.28 L1931.91 1211.28 L1931.32 1211.28 L1930.74 1211.28 L1930.15 1211.28 L1929.56 1211.28 L1928.98 1211.28 L1928.39 1211.28 L1927.8 1211.28 L1927.22 1211.28 L1926.63 1211.28 L1926.04 1211.28 L1925.46 1211.28 L1924.87 1211.28 L1924.29 1211.28 L1923.7 1211.28 L1923.11 1211.28 L1922.53 1211.28 L1921.94 1211.28 L1921.35 1211.28 L1920.77 1211.28 L1920.18 1211.28 L1919.59 1211.28 L1919.01 1211.28 L1918.42 1211.28 L1917.83 1211.28 L1917.25 1211.28 L1916.66 1211.28 L1916.08 1211.28 L1915.49 1211.28 L1914.9 1211.28 L1914.32 1211.28 L1913.73 1211.28 L1913.14 1211.28 L1912.56 1211.28 L1911.97 1211.28 L1911.38 1211.28 L1910.8 1211.28 L1910.21 1211.28 L1909.63 1211.28 L1909.04 1211.28 L1908.45 1211.28 L1907.87 1211.28 L1907.28 1211.28 L1906.69 1211.28 L1906.11 1211.28 L1905.52 1211.28 L1904.93 1211.28 L1904.35 1211.28 L1903.76 1211.28 L1903.17 1211.28 L1902.59 1211.28 L1902 1211.28 L1901.42 1211.28 L1900.83 1211.28 L1900.24 1211.28 L1899.66 1211.28 L1899.07 1211.28 L1898.48 1211.28 L1897.9 1211.28 L1897.31 1211.28 L1896.72 1211.28 L1896.14 1211.28 L1895.55 1211.28 L1894.96 1211.28 L1894.38 1211.28 L1893.79 1211.28 L1893.21 1211.28 L1892.62 1211.28 L1892.03 1211.28 L1891.45 1211.28 L1890.86 1211.28 L1890.27 1211.28 L1889.69 1211.28 L1889.1 1211.28 L1888.51 1211.28 L1887.93 1211.28 L1887.34 1211.28 L1886.76 1211.28 L1886.17 1211.28 L1885.58 1211.28 L1885 1211.28 L1884.41 1211.28 L1883.82 1211.28 L1883.24 1211.28 L1882.65 1211.28 L1882.06 1211.28 L1881.48 1211.28 L1880.89 1211.28 L1880.3 1211.28 L1879.72 1211.28 L1879.13 1211.28 L1878.55 1211.28 L1877.96 1211.28 L1877.37 1211.28 L1876.79 1211.28 L1876.2 1211.28 L1875.61 1211.28 L1875.03 1211.28 L1874.44 1211.28 L1873.85 1211.28 L1873.27 1211.28 L1872.68 1211.28 L1872.09 1211.28 L1871.51 1211.28 L1870.92 1211.28 L1870.34 1211.28 L1869.75 1211.28 L1869.16 1211.28 L1868.58 1211.28 L1867.99 1211.28 L1867.4 1211.28 L1866.82 1211.28 L1866.23 1211.28 L1865.64 1211.28 L1865.06 1211.28 L1864.47 1211.28 L1863.88 1211.28 L1863.3 1211.28 L1862.71 1211.28 L1862.13 1211.28 L1861.54 1211.28 L1860.95 1211.28 L1860.37 1211.28 L1859.78 1211.28 L1859.19 1211.28 L1858.61 1211.28 L1858.02 1211.28 L1857.43 1211.28 L1856.85 1211.28 L1856.26 1211.28 L1855.68 1211.28 L1855.09 1211.28 L1854.5 1211.28 L1853.92 1211.28 L1853.33 1211.28 L1852.74 1211.28 L1852.16 1211.28 L1851.57 1211.28 L1850.98 1211.28 L1850.4 1211.28 L1849.81 1211.28 L1849.22 1211.28 L1848.64 1211.28 L1848.05 1211.28 L1847.47 1211.28 L1846.88 1211.28 L1846.29 1211.28 L1845.71 1211.28 L1845.12 1211.28 L1844.53 1211.28 L1843.95 1211.28 L1843.36 1211.28 L1842.77 1211.28 L1842.19 1211.28 L1841.6 1211.28 L1841.01 1211.28 L1840.43 1211.28 L1839.84 1211.28 L1839.26 1211.28 L1838.67 1211.28 L1838.08 1211.28 L1837.5 1211.28 L1836.91 1211.28 L1836.32 1211.28 L1835.74 1211.28 L1835.15 1211.28 L1834.56 1211.28 L1833.98 1211.28 L1833.39 1211.28 L1832.81 1211.28 L1832.22 1211.28 L1831.63 1211.28 L1831.05 1211.28 L1830.46 1211.28 L1829.87 1211.28 L1829.29 1211.28 L1828.7 1211.28 L1828.11 1211.28 L1827.53 1211.28 L1826.94 1211.28 L1826.35 1211.28 L1825.77 1211.28 L1825.18 1211.28 L1824.6 1211.28 L1824.01 1211.28 L1823.42 1211.28 L1822.84 1211.28 L1822.25 1211.28 L1821.66 1211.28 L1821.08 1211.28 L1820.49 1211.28 L1819.9 1211.28 L1819.32 1211.28 L1818.73 1211.28 L1818.14 1211.28 L1817.56 1211.28 L1816.97 1211.28 L1816.39 1211.28 L1815.8 1211.28 L1815.21 1211.28 L1814.63 1211.28 L1814.04 1211.28 L1813.45 1211.28 L1812.87 1211.28 L1812.28 1211.28 L1811.69 1211.28 L1811.11 1211.28 L1810.52 1211.28 L1809.94 1211.28 L1809.35 1211.28 L1808.76 1211.28 L1808.18 1211.28 L1807.59 1211.28 L1807 1211.28 L1806.42 1211.28 L1805.83 1211.28 L1805.24 1211.28 L1804.66 1211.28 L1804.07 1211.28 L1803.48 1211.28 L1802.9 1211.28 L1802.31 1211.28 L1801.73 1211.28 L1801.14 1211.28 L1800.55 1211.28 L1799.97 1211.28 L1799.38 1211.28 L1798.79 1211.28 L1798.21 1211.28 L1797.62 1211.28 L1797.03 1211.28 L1796.45 1211.28 L1795.86 1211.28 L1795.27 1211.28 L1794.69 1211.28 L1794.1 1211.28 L1793.52 1211.28 L1792.93 1211.28 L1792.34 1211.28 L1791.76 1211.28 L1791.17 1211.28 L1790.58 1211.28 L1790 1211.28 L1789.41 1211.28 L1788.82 1211.28 L1788.24 1211.28 L1787.65 1211.28 L1787.06 1211.28 L1786.48 1211.28 L1785.89 1211.28 L1785.31 1211.28 L1784.72 1211.28 L1784.13 1211.28 L1783.55 1211.28 L1782.96 1211.28 L1782.37 1211.28 L1781.79 1211.28 L1781.2 1211.28 L1780.61 1211.28 L1780.03 1211.28 L1779.44 1211.28 L1778.86 1211.28 L1778.27 1211.28 L1777.68 1211.28 L1777.1 1211.28 L1776.51 1211.28 L1775.92 1211.28 L1775.34 1211.28 L1774.75 1211.28 L1774.16 1211.28 L1773.58 1211.28 L1772.99 1211.28 L1772.4 1211.28 L1771.82 1211.28 L1771.23 1211.28 L1770.65 1211.28 L1770.06 1211.28 L1769.47 1211.28 L1768.89 1211.28 L1768.3 1211.28 L1767.71 1211.28 L1767.13 1211.28 L1766.54 1211.28 L1765.95 1211.28 L1765.37 1211.28 L1764.78 1211.28 L1764.19 1211.28 L1763.61 1211.28 L1763.02 1211.28 L1762.44 1211.28 L1761.85 1211.28 L1761.26 1211.28 L1760.68 1211.28 L1760.09 1211.28 L1759.5 1211.28 L1758.92 1211.28 L1758.33 1211.28 L1757.74 1211.28 L1757.16 1211.28 L1756.57 1211.28 L1755.99 1211.28 L1755.4 1211.28 L1754.81 1211.28 L1754.23 1211.28 L1753.64 1211.28 L1753.05 1211.28 L1752.47 1211.28 L1751.88 1211.28 L1751.29 1211.28 L1750.71 1211.28 L1750.12 1211.28 L1749.53 1211.28 L1748.95 1211.28 L1748.36 1211.28 L1747.78 1211.28 L1747.19 1211.28 L1746.6 1211.28 L1746.02 1211.28 L1745.43 1211.28 L1744.84 1211.28 L1744.26 1211.28 L1743.67 1211.28 L1743.08 1211.28 L1742.5 1211.28 L1741.91 1211.28 L1741.32 1211.28 L1740.74 1211.28 L1740.15 1211.28 L1739.57 1211.28 L1738.98 1211.28 L1738.39 1211.28 L1737.81 1211.28 L1737.22 1211.28 L1736.63 1211.28 L1736.05 1211.28 L1735.46 1211.28 L1734.87 1211.28 L1734.29 1211.28 L1733.7 1211.28 L1733.11 1211.28 L1732.53 1211.28 L1731.94 1211.28 L1731.36 1211.28 L1730.77 1211.28 L1730.18 1211.28 L1729.6 1211.28 L1729.01 1211.28 L1728.42 1211.28 L1727.84 1211.28 L1727.25 1211.28 L1726.66 1211.28 L1726.08 1211.28 L1725.49 1211.28 L1724.91 1211.28 L1724.32 1211.28 L1723.73 1211.28 L1723.15 1211.28 L1722.56 1211.28 L1721.97 1211.28 L1721.39 1211.28 L1720.8 1211.28 L1720.21 1211.28 L1719.63 1211.28 L1719.04 1211.28 L1718.45 1211.28 L1717.87 1211.28 L1717.28 1211.28 L1716.7 1211.28 L1716.11 1211.28 L1715.52 1211.28 L1714.94 1211.28 L1714.35 1211.28 L1713.76 1211.28 L1713.18 1211.28 L1712.59 1211.28 L1712 1211.28 L1711.42 1211.28 L1710.83 1211.28 L1710.24 1211.28 L1709.66 1211.28 L1709.07 1211.28 L1708.49 1211.28 L1707.9 1211.28 L1707.31 1211.28 L1706.73 1211.28 L1706.14 1211.28 L1705.55 1211.28 L1704.97 1211.28 L1704.38 1211.28 L1703.79 1211.28 L1703.21 1211.28 L1702.62 1211.28 L1702.04 1211.28 L1701.45 1211.28 L1700.86 1211.28 L1700.28 1211.28 L1699.69 1211.28 L1699.1 1211.28 L1698.52 1211.28 L1697.93 1211.28 L1697.34 1211.28 L1696.76 1211.28 L1696.17 1211.28 L1695.58 1211.28 L1695 1211.28 L1694.41 1211.28 L1693.83 1211.28 L1693.24 1211.28 L1692.65 1211.28 L1692.07 1211.28 L1691.48 1211.28 L1690.89 1211.28 L1690.31 1211.28 L1689.72 1211.28 L1689.13 1211.28 L1688.55 1211.28 L1687.96 1211.28 L1687.37 1211.28 L1686.79 1211.28 L1686.2 1211.28 L1685.62 1211.28 L1685.03 1211.28 L1684.44 1211.28 L1683.86 1211.28 L1683.27 1211.28 L1682.68 1211.28 L1682.1 1211.28 L1681.51 1211.28 L1680.92 1211.28 L1680.34 1211.28 L1679.75 1211.28 L1679.17 1211.28 L1678.58 1211.28 L1677.99 1211.28 L1677.41 1211.28 L1676.82 1211.28 L1676.23 1211.28 L1675.65 1211.28 L1675.06 1211.28 L1674.47 1211.28 L1673.89 1211.28 L1673.3 1211.28 L1672.71 1211.28 L1672.13 1211.28 L1671.54 1211.28 L1670.96 1211.28 L1670.37 1211.28 L1669.78 1211.28 L1669.2 1211.28 L1668.61 1211.28 L1668.02 1211.28 L1667.44 1211.28 L1666.85 1211.28 L1666.26 1211.28 L1665.68 1211.28 L1665.09 1211.28 L1664.5 1211.28 L1663.92 1211.28 L1663.33 1211.28 L1662.75 1211.28 L1662.16 1211.28 L1661.57 1211.28 L1660.99 1211.28 L1660.4 1211.28 L1659.81 1211.28 L1659.23 1211.28 L1658.64 1211.28 L1658.05 1211.28 L1657.47 1211.28 L1656.88 1211.28 L1656.29 1211.28 L1655.71 1211.28 L1655.12 1211.28 L1654.54 1211.28 L1653.95 1211.28 L1653.36 1211.28 L1652.78 1211.28 L1652.19 1211.28 L1651.6 1211.28 L1651.02 1211.28 L1650.43 1211.28 L1649.84 1211.28 L1649.26 1211.28 L1648.67 1211.28 L1648.09 1211.28 L1647.5 1211.28 L1646.91 1211.28 L1646.33 1211.28 L1645.74 1211.28 L1645.15 1211.28 L1644.57 1211.28 L1643.98 1211.28 L1643.39 1211.28 L1642.81 1211.28 L1642.22 1211.28 L1641.63 1211.28 L1641.05 1211.28 L1640.46 1211.28 L1639.88 1211.28 L1639.29 1211.28 L1638.7 1211.28 L1638.12 1211.28 L1637.53 1211.28 L1636.94 1211.28 L1636.36 1211.28 L1635.77 1211.28 L1635.18 1211.28 L1634.6 1211.28 L1634.01 1211.28 L1633.42 1211.28 L1632.84 1211.28 L1632.25 1211.28 L1631.67 1211.28 L1631.08 1211.28 L1630.49 1211.28 L1629.91 1211.28 L1629.32 1211.28 L1628.73 1211.28 L1628.15 1211.28 L1627.56 1211.28 L1626.97 1211.28 L1626.39 1211.28 L1625.8 1211.28 L1625.22 1211.28 L1624.63 1211.28 L1624.04 1211.28 L1623.46 1211.28 L1622.87 1211.28 L1622.28 1211.28 L1621.7 1211.28 L1621.11 1211.28 L1620.52 1211.28 L1619.94 1211.28 L1619.35 1211.28 L1618.76 1211.28 L1618.18 1211.28 L1617.59 1211.28 L1617.01 1211.28 L1616.42 1211.28 L1615.83 1211.28 L1615.25 1211.28 L1614.66 1211.28 L1614.07 1211.28 L1613.49 1211.28 L1612.9 1211.28 L1612.31 1211.28 L1611.73 1211.28 L1611.14 1211.28 L1610.55 1211.28 L1609.97 1211.28 L1609.38 1211.28 L1608.8 1211.28 L1608.21 1211.28 L1607.62 1211.28 L1607.04 1211.28 L1606.45 1211.28 L1605.86 1211.28 L1605.28 1211.28 L1604.69 1211.28 L1604.1 1211.28 L1603.52 1211.28 L1602.93 1211.28 L1602.34 1211.28 L1601.76 1211.28 L1601.17 1211.28 L1600.59 1211.28 L1600 1211.28 L1599.41 1211.28 L1598.83 1211.28 L1598.24 1211.28 L1597.65 1211.28 L1597.07 1211.28 L1596.48 1211.28 L1595.89 1211.28 L1595.31 1211.28 L1594.72 1211.28 L1594.14 1211.28 L1593.55 1211.28 L1592.96 1211.28 L1592.38 1211.28 L1591.79 1211.28 L1591.2 1211.28 L1590.62 1211.28 L1590.03 1211.28 L1589.44 1211.28 L1588.86 1211.28 L1588.27 1211.28 L1587.68 1211.28 L1587.1 1211.28 L1586.51 1211.28 L1585.93 1211.28 L1585.34 1211.28 L1584.75 1211.28 L1584.17 1211.28 L1583.58 1211.28 L1582.99 1211.28 L1582.41 1211.28 L1581.82 1211.28 L1581.23 1211.28 L1580.65 1211.28 L1580.06 1211.28 L1579.47 1211.28 L1578.89 1211.28 L1578.3 1211.28 L1577.72 1211.28 L1577.13 1211.28 L1576.54 1211.28 L1575.96 1211.28 L1575.37 1211.28 L1574.78 1211.28 L1574.2 1211.28 L1573.61 1211.28 L1573.02 1211.28 L1572.44 1211.28 L1571.85 1211.28 L1571.27 1211.28 L1570.68 1211.28 L1570.09 1211.28 L1569.51 1211.28 L1568.92 1211.28 L1568.33 1211.28 L1567.75 1211.28 L1567.16 1211.28 L1566.57 1211.28 L1565.99 1211.28 L1565.4 1211.28 L1564.81 1211.28 L1564.23 1211.28 L1563.64 1211.28 L1563.06 1211.28 L1562.47 1211.28 L1561.88 1211.28 L1561.3 1211.28 L1560.71 1211.28 L1560.12 1211.28 L1559.54 1211.28 L1558.95 1211.28 L1558.36 1211.28 L1557.78 1211.28 L1557.19 1211.28 L1556.6 1211.28 L1556.02 1211.28 L1555.43 1211.28 L1554.85 1211.28 L1554.26 1211.28 L1553.67 1211.28 L1553.09 1211.28 L1552.5 1211.28 L1551.91 1211.28 L1551.33 1211.28 L1550.74 1211.28 L1550.15 1211.28 L1549.57 1211.28 L1548.98 1211.28 L1548.4 1211.28 L1547.81 1211.28 L1547.22 1211.28 L1546.64 1211.28 L1546.05 1211.28 L1545.46 1211.28 L1544.88 1211.28 L1544.29 1211.28 L1543.7 1211.28 L1543.12 1211.28 L1542.53 1211.28 L1541.94 1211.28 L1541.36 1211.28 L1540.77 1211.28 L1540.19 1211.28 L1539.6 1211.28 L1539.01 1211.28 L1538.43 1211.28 L1537.84 1211.28 L1537.25 1211.28 L1536.67 1211.28 L1536.08 1211.28 L1535.49 1211.28 L1534.91 1211.28 L1534.32 1211.28 L1533.73 1211.28 L1533.15 1211.28 L1532.56 1211.28 L1531.98 1211.28 L1531.39 1211.28 L1530.8 1211.28 L1530.22 1211.28 L1529.63 1211.28 L1529.04 1211.28 L1528.46 1211.28 L1527.87 1211.28 L1527.28 1211.28 L1526.7 1211.28 L1526.11 1211.28 L1525.52 1211.28 L1524.94 1211.28 L1524.35 1211.28 L1523.77 1211.28 L1523.18 1211.28 L1522.59 1211.28 L1522.01 1211.28 L1521.42 1211.28 L1520.83 1211.28 L1520.25 1211.28 L1519.66 1211.28 L1519.07 1211.28 L1518.49 1211.28 L1517.9 1211.28 L1517.32 1211.28 L1516.73 1211.28 L1516.14 1211.28 L1515.56 1211.28 L1514.97 1211.28 L1514.38 1211.28 L1513.8 1211.28 L1513.21 1211.28 L1512.62 1211.28 L1512.04 1211.28 L1511.45 1211.28 L1510.86 1211.28 L1510.28 1211.28 L1509.69 1211.28 L1509.11 1211.28 L1508.52 1211.28 L1507.93 1211.28 L1507.35 1211.28 L1506.76 1211.28 L1506.17 1211.28 L1505.59 1211.28 L1505 1211.28 L1504.41 1211.28 L1503.83 1211.28 L1503.24 1211.28 L1502.65 1211.28 L1502.07 1211.28 L1501.48 1211.28 L1500.9 1211.28 L1500.31 1211.28 L1499.72 1211.28 L1499.14 1211.28 L1498.55 1211.28 L1497.96 1211.28 L1497.38 1211.28 L1496.79 1211.28 L1496.2 1211.28 L1495.62 1211.28 L1495.03 1211.28 L1494.45 1211.28 L1493.86 1211.28 L1493.27 1211.28 L1492.69 1211.28 L1492.1 1211.28 L1491.51 1211.28 L1490.93 1211.28 L1490.34 1211.28 L1489.75 1211.28 L1489.17 1211.28 L1488.58 1211.28 L1487.99 1211.28 L1487.41 1211.28 L1486.82 1211.28 L1486.24 1211.28 L1485.65 1211.28 L1485.06 1211.28 L1484.48 1211.28 L1483.89 1211.28 L1483.3 1211.28 L1482.72 1211.28 L1482.13 1211.28 L1481.54 1211.28 L1480.96 1211.28 L1480.37 1211.28 L1479.78 1211.28 L1479.2 1211.28 L1478.61 1211.28 L1478.03 1211.28 L1477.44 1211.28 L1476.85 1211.28 L1476.27 1211.28 L1475.68 1211.28 L1475.09 1211.28 L1474.51 1211.28 L1473.92 1211.28 L1473.33 1211.28 L1472.75 1211.28 L1472.16 1211.28 L1471.57 1211.28 L1470.99 1211.28 L1470.4 1211.28 L1469.82 1211.28 L1469.23 1211.28 L1468.64 1211.28 L1468.06 1211.28 L1467.47 1211.28 L1466.88 1211.28 L1466.3 1211.28 L1465.71 1211.28 L1465.12 1211.28 L1464.54 1211.28 L1463.95 1211.28 L1463.37 1211.28 L1462.78 1211.28 L1462.19 1211.28 L1461.61 1211.28 L1461.02 1211.28 L1460.43 1211.28 L1459.85 1211.28 L1459.26 1211.28 L1458.67 1211.28 L1458.09 1211.28 L1457.5 1211.28 L1456.91 1211.28 L1456.33 1211.28 L1455.74 1211.28 L1455.16 1211.28 L1454.57 1211.28 L1453.98 1211.28 L1453.4 1211.28 L1452.81 1211.28 L1452.22 1211.28 L1451.64 1211.28 L1451.05 1211.28 L1450.46 1211.28 L1449.88 1211.28 L1449.29 1211.28 L1448.7 1211.28 L1448.12 1211.28 L1447.53 1211.28 L1446.95 1211.28 L1446.36 1211.28 L1445.77 1211.28 L1445.19 1211.28 L1444.6 1211.28 L1444.01 1211.28 L1443.43 1211.28 L1442.84 1211.28 L1442.25 1211.28 L1441.67 1211.28 L1441.08 1211.28 L1440.5 1211.28 L1439.91 1211.28 L1439.32 1211.28 L1438.74 1211.28 L1438.15 1211.28 L1437.56 1211.28 L1436.98 1211.28 L1436.39 1211.28 L1435.8 1211.28 L1435.22 1211.28 L1434.63 1211.28 L1434.04 1211.28 L1433.46 1211.28 L1432.87 1211.28 L1432.29 1211.28 L1431.7 1211.28 L1431.11 1211.28 L1430.53 1211.28 L1429.94 1211.28 L1429.35 1211.28 L1428.77 1211.28 L1428.18 1211.28 L1427.59 1211.28 L1427.01 1211.28 L1426.42 1211.28 L1425.83 1211.28 L1425.25 1211.28 L1424.66 1211.28 L1424.08 1211.28 L1423.49 1211.28 L1422.9 1211.28 L1422.32 1211.28 L1421.73 1211.28 L1421.14 1211.28 L1420.56 1211.28 L1419.97 1211.28 L1419.38 1211.28 L1418.8 1211.28 L1418.21 1211.28 L1417.63 1211.28 L1417.04 1211.28 L1416.45 1211.28 L1415.87 1211.28 L1415.28 1211.28 L1414.69 1211.28 L1414.11 1211.28 L1413.52 1211.28 L1412.93 1211.28 L1412.35 1211.28 L1411.76 1211.28 L1411.17 1211.28 L1410.59 1211.28 L1410 1211.28 L1409.42 1211.28 L1408.83 1211.28 L1408.24 1211.28 L1407.66 1211.28 L1407.07 1211.28 L1406.48 1211.28 L1405.9 1211.28 L1405.31 1211.28 L1404.72 1211.28 L1404.14 1211.28 L1403.55 1211.28 L1402.96 1211.28 L1402.38 1211.28 L1401.79 1211.28 L1401.21 1211.28 L1400.62 1211.28 L1400.03 1211.28 L1399.45 1211.28 L1398.86 1211.28 L1398.27 1211.28 L1397.69 1211.28 L1397.1 1211.28 L1396.51 1211.28 L1395.93 1211.28 L1395.34 1211.28 L1394.75 1211.28 L1394.17 1211.28 L1393.58 1211.28 L1393 1211.28 L1392.41 1211.28 L1391.82 1211.28 L1391.24 1211.28 L1390.65 1211.28 L1390.06 1211.28 L1389.48 1211.28 L1388.89 1211.28 L1388.3 1211.28 L1387.72 1211.28 L1387.13 1211.28 L1386.55 1211.28 L1385.96 1211.28 L1385.37 1211.28 L1384.79 1211.28 L1384.2 1211.28 L1383.61 1211.28 L1383.03 1211.28 L1382.44 1211.28 L1381.85 1211.28 L1381.27 1211.28 L1380.68 1211.28 L1380.09 1211.28 L1379.51 1211.28 L1378.92 1211.28 L1378.34 1211.28 L1377.75 1211.28 L1377.16 1211.28 L1376.58 1211.28 L1375.99 1211.28 L1375.4 1211.28 L1374.82 1211.28 L1374.23 1211.28 L1373.64 1211.28 L1373.06 1211.28 L1372.47 1211.28 L1371.88 1211.28 L1371.3 1211.28 L1370.71 1211.28 L1370.13 1211.28 L1369.54 1211.28 L1368.95 1211.28 L1368.37 1211.28 L1367.78 1211.28 L1367.19 1211.28 L1366.61 1211.28 L1366.02 1211.28 L1365.43 1211.28 L1364.85 1211.28 L1364.26 1211.28 L1363.68 1211.28 L1363.09 1211.28 L1362.5 1211.28 L1361.92 1211.28 L1361.33 1211.28 L1360.74 1211.28 L1360.16 1211.28 L1359.57 1211.28 L1358.98 1211.28 L1358.4 1211.28 L1357.81 1211.28 L1357.22 1211.28 L1356.64 1211.28 L1356.05 1211.28 L1355.47 1211.28 L1354.88 1211.28 L1354.29 1211.28 L1353.71 1211.28 L1353.12 1211.28 L1352.53 1211.28 L1351.95 1211.28 L1351.36 1211.28 L1350.77 1211.28 L1350.19 1211.28 L1349.6 1211.28 L1349.01 1211.28 L1348.43 1211.28 L1347.84 1211.28 L1347.26 1211.28 L1346.67 1211.28 L1346.08 1211.28 L1345.5 1211.28 L1344.91 1211.28 L1344.32 1211.28 L1343.74 1211.28 L1343.15 1211.28 L1342.56 1211.28 L1341.98 1211.28 L1341.39 1211.28 L1340.8 1211.28 L1340.22 1211.28 L1339.63 1211.28 L1339.05 1211.28 L1338.46 1211.28 L1337.87 1211.28 L1337.29 1211.28 L1336.7 1211.28 L1336.11 1211.28 L1335.53 1211.28 L1334.94 1211.28 L1334.35 1211.28 L1333.77 1211.28 L1333.18 1211.28 L1332.6 1211.28 L1332.01 1211.28 L1331.42 1211.28 L1330.84 1211.28 L1330.25 1211.28 L1329.66 1211.28 L1329.08 1211.28 L1328.49 1211.28 L1327.9 1211.28 L1327.32 1211.28 L1326.73 1211.28 L1326.14 1211.28 L1325.56 1211.28 L1324.97 1211.28 L1324.39 1211.28 L1323.8 1211.28 L1323.21 1211.28 L1322.63 1211.28 L1322.04 1211.28 L1321.45 1211.28 L1320.87 1211.28 L1320.28 1211.28 L1319.69 1211.28 L1319.11 1211.28 L1318.52 1211.28 L1317.93 1211.28 L1317.35 1211.28 L1316.76 1211.28 L1316.18 1211.28 L1315.59 1211.28 L1315 1211.28 L1314.42 1211.28 L1313.83 1211.28 L1313.24 1211.28 L1312.66 1211.28 L1312.07 1211.28 L1311.48 1211.28 L1310.9 1211.28 L1310.31 1211.28 L1309.73 1211.28 L1309.14 1211.28 L1308.55 1211.28 L1307.97 1211.28 L1307.38 1211.28 L1306.79 1211.28 L1306.21 1211.28 L1305.62 1211.28 L1305.03 1211.28 L1304.45 1211.28 L1303.86 1211.28 L1303.27 1211.28 L1302.69 1211.28 L1302.1 1211.28 L1301.52 1211.28 L1300.93 1211.28 L1300.34 1211.28 L1299.76 1211.28 L1299.17 1211.28 L1298.58 1211.28 L1298 1211.28 L1297.41 1211.28 L1296.82 1211.28 L1296.24 1211.28 L1295.65 1211.28 L1295.06 1211.28 L1294.48 1211.28 L1293.89 1211.28 L1293.31 1211.28 L1292.72 1211.28 L1292.13 1211.28 L1291.55 1211.28 L1290.96 1211.28 L1290.37 1211.28 L1289.79 1211.28 L1289.2 1211.28 L1288.61 1211.28 L1288.03 1211.28 L1287.44 1211.28 L1286.86 1211.28 L1286.27 1211.28 L1285.68 1211.28 L1285.1 1211.28 L1284.51 1211.28 L1283.92 1211.28 L1283.34 1211.28 L1282.75 1211.28 L1282.16 1211.28 L1281.58 1211.28 L1280.99 1211.28 L1280.4 1211.28 L1279.82 1211.28 L1279.23 1211.28 L1278.65 1211.28 L1278.06 1211.28 L1277.47 1211.28 L1276.89 1211.28 L1276.3 1211.28 L1275.71 1211.28 L1275.13 1211.28 L1274.54 1211.28 L1273.95 1211.28 L1273.37 1211.28 L1272.78 1211.28 L1272.19 1211.28 L1271.61 1211.28 L1271.02 1211.28 L1270.44 1211.28 L1269.85 1211.28 L1269.26 1211.28 L1268.68 1211.28 L1268.09 1211.28 L1267.5 1211.28 L1266.92 1211.28 L1266.33 1211.28 L1265.74 1211.28 L1265.16 1211.28 L1264.57 1211.28 L1263.98 1211.28 L1263.4 1211.28 L1262.81 1211.28 L1262.23 1211.28 L1261.64 1211.28 L1261.05 1211.28 L1260.47 1211.28 L1259.88 1211.28 L1259.29 1211.28 L1258.71 1211.28 L1258.12 1211.28 L1257.53 1211.28 L1256.95 1211.28 L1256.36 1211.28 L1255.78 1211.28 L1255.19 1211.28 L1254.6 1211.28 L1254.02 1211.28 L1253.43 1211.28 L1252.84 1211.28 L1252.26 1211.28 L1251.67 1211.28 L1251.08 1211.28 L1250.5 1211.28 L1249.91 1211.28 L1249.32 1211.28 L1248.74 1211.28 L1248.15 1211.28 L1247.57 1211.28 L1246.98 1211.28 L1246.39 1211.28 L1245.81 1211.28 L1245.22 1211.28 L1244.63 1211.28 L1244.05 1211.28 L1243.46 1211.28 L1242.87 1211.28 L1242.29 1211.28 L1241.7 1211.28 L1241.11 1211.28 L1240.53 1211.28 L1239.94 1211.28 L1239.36 1211.28 L1238.77 1211.28 L1238.18 1211.28 L1237.6 1211.28 L1237.01 1211.28 L1236.42 1211.28 L1235.84 1211.28 L1235.25 1211.28 L1234.66 1211.28 L1234.08 1211.28 L1233.49 1211.28 L1232.91 1211.28 L1232.32 1211.28 L1231.73 1211.28 L1231.15 1211.28 L1230.56 1211.28 L1229.97 1211.28 L1229.39 1211.28 L1228.8 1211.28 L1228.21 1211.28 L1227.63 1211.28 L1227.04 1211.28 L1226.45 1211.28 L1225.87 1211.28 L1225.28 1211.28 L1224.7 1211.28 L1224.11 1211.28 L1223.52 1211.28 L1222.94 1211.28 L1222.35 1211.28 L1221.76 1211.28 L1221.18 1211.28 L1220.59 1211.28 L1220 1211.28 L1219.42 1211.28 L1218.83 1211.28 L1218.24 1211.28 L1217.66 1211.28 L1217.07 1211.28 L1216.49 1211.28 L1215.9 1211.28 L1215.31 1211.28 L1214.73 1211.28 L1214.14 1211.28 L1213.55 1211.28 L1212.97 1211.28 L1212.38 1211.28 L1211.79 1211.28 L1211.21 1211.28 L1210.62 1211.28 L1210.03 1211.28 L1209.45 1211.28 L1208.86 1211.28 L1208.28 1211.28 L1207.69 1211.28 L1207.1 1211.28 L1206.52 1211.28 L1205.93 1211.28 L1205.34 1211.28 L1204.76 1211.28 L1204.17 1211.28 L1203.58 1211.28 L1203 1211.28 L1202.41 1211.28 L1201.83 1211.28 L1201.24 1211.28 L1200.65 1211.28 L1200.07 1211.28 L1199.48 1211.28 L1198.89 1211.28 L1198.31 1211.28 L1197.72 1211.28 L1197.13 1211.28 L1196.55 1211.28 L1195.96 1211.28 L1195.37 1211.28 L1194.79 1211.28 L1194.2 1211.28 L1193.62 1211.28 L1193.03 1211.28 L1192.44 1211.28 L1191.86 1211.28 L1191.27 1211.28 L1190.68 1211.28 L1190.1 1211.28 L1189.51 1211.28 L1188.92 1211.28 L1188.34 1211.28 L1187.75 1211.28 L1187.16 1211.28 L1186.58 1211.28 L1185.99 1211.28 L1185.41 1211.28 L1184.82 1211.28 L1184.23 1211.28 L1183.65 1211.28 L1183.06 1211.28 L1182.47 1211.28 L1181.89 1211.28 L1181.3 1211.28 L1180.71 1211.28 L1180.13 1211.28 L1179.54 1211.28 L1178.96 1211.28 L1178.37 1211.28 L1177.78 1211.28 L1177.2 1211.28 L1176.61 1211.28 L1176.02 1211.28 L1175.44 1211.28 L1174.85 1211.28 L1174.26 1211.28 L1173.68 1211.28 L1173.09 1211.28 L1172.5 1211.28 L1171.92 1211.28 L1171.33 1211.28 L1170.75 1211.28 L1170.16 1211.28 L1169.57 1211.28 L1168.99 1211.28 L1168.4 1211.28 L1167.81 1211.28 L1167.23 1211.28 L1166.64 1211.28 L1166.05 1211.28 L1165.47 1211.28 L1164.88 1211.28 L1164.29 1211.28 L1163.71 1211.28 L1163.12 1211.28 L1162.54 1211.28 L1161.95 1211.28 L1161.36 1211.28 L1160.78 1211.28 L1160.19 1211.28 L1159.6 1211.28 L1159.02 1211.28 L1158.43 1211.28 L1157.84 1211.28 L1157.26 1211.28 L1156.67 1211.28 L1156.09 1211.28 L1155.5 1211.28 L1154.91 1211.28 L1154.33 1211.28 L1153.74 1211.28 L1153.15 1211.28 L1152.57 1211.28 L1151.98 1211.28 L1151.39 1211.28 L1150.81 1211.28 L1150.22 1211.28 L1149.63 1211.28 L1149.05 1211.28 L1148.46 1211.28 L1147.88 1211.28 L1147.29 1211.28 L1146.7 1211.28 L1146.12 1211.28 L1145.53 1211.28 L1144.94 1211.28 L1144.36 1211.28 L1143.77 1211.28 L1143.18 1211.28 L1142.6 1211.28 L1142.01 1211.28 L1141.42 1211.28 L1140.84 1211.28 L1140.25 1211.28 L1139.67 1211.28 L1139.08 1211.28 L1138.49 1211.28 L1137.91 1211.28 L1137.32 1211.28 L1136.73 1211.28 L1136.15 1211.28 L1135.56 1211.28 L1134.97 1211.28 L1134.39 1211.28 L1133.8 1211.28 L1133.21 1211.28 L1132.63 1211.28 L1132.04 1211.28 L1131.46 1211.28 L1130.87 1211.28 L1130.28 1211.28 L1129.7 1211.28 L1129.11 1211.28 L1128.52 1211.28 L1127.94 1211.28 L1127.35 1211.28 L1126.76 1211.28 L1126.18 1211.28 L1125.59 1211.28 L1125.01 1211.28 L1124.42 1211.28 L1123.83 1211.28 L1123.25 1211.28 L1122.66 1211.28 L1122.07 1211.28 L1121.49 1211.28 L1120.9 1211.28 L1120.31 1211.28 L1119.73 1211.28 L1119.14 1211.28 L1118.55 1211.28 L1117.97 1211.28 L1117.38 1211.28 L1116.8 1211.28 L1116.21 1211.28 L1115.62 1211.28 L1115.04 1211.28 L1114.45 1211.28 L1113.86 1211.28 L1113.28 1211.28 L1112.69 1211.28 L1112.1 1211.28 L1111.52 1211.28 L1110.93 1211.28 L1110.34 1211.28 L1109.76 1211.28 L1109.17 1211.28 L1108.59 1211.28 L1108 1211.28 L1107.41 1211.28 L1106.83 1211.28 L1106.24 1211.28 L1105.65 1211.28 L1105.07 1211.28 L1104.48 1211.28 L1103.89 1211.28 L1103.31 1211.28 L1102.72 1211.28 L1102.14 1211.28 L1101.55 1211.28 L1100.96 1211.28 L1100.38 1211.28 L1099.79 1211.28 L1099.2 1211.28 L1098.62 1211.28 L1098.03 1211.28 L1097.44 1211.28 L1096.86 1211.28 L1096.27 1211.28 L1095.68 1211.28 L1095.1 1211.28 L1094.51 1211.28 L1093.93 1211.28 L1093.34 1211.28 L1092.75 1211.28 L1092.17 1211.28 L1091.58 1211.28 L1090.99 1211.28 L1090.41 1211.28 L1089.82 1211.28 L1089.23 1211.28 L1088.65 1211.28 L1088.06 1211.28 L1087.47 1211.28 L1086.89 1211.28 L1086.3 1211.28 L1085.72 1211.28 L1085.13 1211.28 L1084.54 1211.28 L1083.96 1211.28 L1083.37 1211.28 L1082.78 1211.28 L1082.2 1211.28 L1081.61 1211.28 L1081.02 1211.28 L1080.44 1211.28 L1079.85 1211.28 L1079.26 1211.28 L1078.68 1211.28 L1078.09 1211.28 L1077.51 1211.28 L1076.92 1211.28 L1076.33 1211.28 L1075.75 1211.28 L1075.16 1211.28 L1074.57 1211.28 L1073.99 1211.28 L1073.4 1211.28 L1072.81 1211.28 L1072.23 1211.28 L1071.64 1211.28 L1071.06 1211.28 L1070.47 1211.28 L1069.88 1211.28 L1069.3 1211.28 L1068.71 1211.28 L1068.12 1211.28 L1067.54 1211.28 L1066.95 1211.28 L1066.36 1211.28 L1065.78 1211.28 L1065.19 1211.28 L1064.6 1211.28 L1064.02 1211.28 L1063.43 1211.28 L1062.85 1211.28 L1062.26 1211.28 L1061.67 1211.28 L1061.09 1211.28 L1060.5 1211.28 L1059.91 1211.28 L1059.33 1211.28 L1058.74 1211.28 L1058.15 1211.28 L1057.57 1211.28 L1056.98 1211.28 L1056.39 1211.28 L1055.81 1211.28 L1055.22 1211.28 L1054.64 1211.28 L1054.05 1211.28 L1053.46 1211.28 L1052.88 1211.28 L1052.29 1211.28 L1051.7 1211.28 L1051.12 1211.28 L1050.53 1211.28 L1049.94 1211.28 L1049.36 1211.28 L1048.77 1211.28 L1048.19 1211.28 L1047.6 1211.28 L1047.01 1211.28 L1046.43 1211.28 L1045.84 1211.28 L1045.25 1211.28 L1044.67 1211.28 L1044.08 1211.28 L1043.49 1211.28 L1042.91 1211.28 L1042.32 1211.28 L1041.73 1211.28 L1041.15 1211.28 L1040.56 1211.28 L1039.98 1211.28 L1039.39 1211.28 L1038.8 1211.28 L1038.22 1211.28 L1037.63 1211.28 L1037.04 1211.28 L1036.46 1211.28 L1035.87 1211.28 L1035.28 1211.28 L1034.7 1211.28 L1034.11 1211.28 L1033.52 1211.28 L1032.94 1211.28 L1032.35 1211.28 L1031.77 1211.28 L1031.18 1211.28 L1030.59 1211.28 L1030.01 1211.28 L1029.42 1211.28 L1028.83 1211.28 L1028.25 1211.28 L1027.66 1211.28 L1027.07 1211.28 L1026.49 1211.28 L1025.9 1211.28 L1025.32 1211.28 L1024.73 1211.28 L1024.14 1211.28 L1023.56 1211.28 L1022.97 1211.28 L1022.38 1211.28 L1021.8 1211.28 L1021.21 1211.28 L1020.62 1211.28 L1020.04 1211.28 L1019.45 1211.28 L1018.86 1211.28 L1018.28 1211.28 L1017.69 1211.28 L1017.11 1211.28 L1016.52 1211.28 L1015.93 1211.28 L1015.35 1211.28 L1014.76 1211.28 L1014.17 1211.28 L1013.59 1211.28 L1013 1211.28 L1012.41 1211.28 L1011.83 1211.28 L1011.24 1211.28 L1010.65 1211.28 L1010.07 1211.28 L1009.48 1211.28 L1008.9 1211.28 L1008.31 1211.28 L1007.72 1211.28 L1007.14 1211.28 L1006.55 1211.28 L1005.96 1211.28 L1005.38 1211.28 L1004.79 1211.28 L1004.2 1211.28 L1003.62 1211.28 L1003.03 1211.28 L1002.44 1211.28 L1001.86 1211.28 L1001.27 1211.28 L1000.69 1211.28 L1000.1 1211.28 L999.513 1211.28 L998.926 1211.28 L998.34 1211.28 L997.754 1211.28 L997.167 1211.28 L996.581 1211.28 L995.994 1211.28 L995.408 1211.28 L994.822 1211.28 L994.235 1211.28 L993.649 1211.28 L993.062 1211.28 L992.476 1211.28 L991.889 1211.28 L991.303 1211.28 L990.717 1211.28 L990.13 1211.28 L989.544 1211.28 L988.957 1211.28 L988.371 1211.28 L987.785 1211.28 L987.198 1211.28 L986.612 1211.28 L986.025 1211.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.4 986.612,1211.4 987.198,1211.4 987.785,1211.4 988.371,1211.4 988.957,1211.4 989.544,1211.4 990.13,1211.4 990.717,1211.4 991.303,1211.4 991.889,1211.4 992.476,1211.4 993.062,1211.4 993.649,1211.4 994.235,1211.4 994.822,1211.4 995.408,1211.4 995.994,1211.4 996.581,1211.4 997.167,1211.4 997.754,1211.4 998.34,1211.4 998.926,1211.4 999.513,1211.4 1000.1,1211.4 1000.69,1211.4 1001.27,1211.4 1001.86,1211.4 1002.44,1211.4 1003.03,1211.4 1003.62,1211.4 1004.2,1211.4 1004.79,1211.4 1005.38,1211.4 1005.96,1211.4 1006.55,1211.4 1007.14,1211.4 1007.72,1211.4 1008.31,1211.4 1008.9,1211.4 1009.48,1211.4 1010.07,1211.4 1010.65,1211.4 1011.24,1211.4 1011.83,1211.4 1012.41,1211.4 1013,1211.4 1013.59,1211.4 1014.17,1211.4 1014.76,1211.4 1015.35,1211.4 1015.93,1211.4 1016.52,1211.4 1017.11,1211.4 1017.69,1211.4 1018.28,1211.4 1018.86,1211.4 1019.45,1211.4 1020.04,1211.4 1020.62,1211.4 1021.21,1211.4 1021.8,1211.4 1022.38,1211.4 1022.97,1211.4 1023.56,1211.4 1024.14,1211.4 1024.73,1211.4 1025.32,1211.4 1025.9,1211.4 1026.49,1211.4 1027.07,1211.4 1027.66,1211.4 1028.25,1211.4 1028.83,1211.4 1029.42,1211.4 1030.01,1211.4 1030.59,1211.4 1031.18,1211.4 1031.77,1211.4 1032.35,1211.4 1032.94,1211.4 1033.52,1211.4 1034.11,1211.4 1034.7,1211.4 1035.28,1211.4 1035.87,1211.4 1036.46,1211.4 1037.04,1211.4 1037.63,1211.4 1038.22,1211.4 1038.8,1211.4 1039.39,1211.4 1039.98,1211.4 1040.56,1211.4 1041.15,1211.4 1041.73,1211.4 1042.32,1211.4 1042.91,1211.4 1043.49,1211.4 1044.08,1211.4 1044.67,1211.4 1045.25,1211.4 1045.84,1211.4 1046.43,1211.4 1047.01,1211.4 1047.6,1211.4 1048.19,1211.4 1048.77,1211.4 1049.36,1211.4 1049.94,1211.4 1050.53,1211.4 1051.12,1211.4 1051.7,1211.4 1052.29,1211.4 1052.88,1211.4 1053.46,1211.4 1054.05,1211.4 1054.64,1211.4 1055.22,1211.4 1055.81,1211.4 1056.39,1211.4 1056.98,1211.4 1057.57,1211.4 1058.15,1211.4 1058.74,1211.4 1059.33,1211.4 1059.91,1211.4 1060.5,1211.4 1061.09,1211.4 1061.67,1211.4 1062.26,1211.4 1062.85,1211.4 1063.43,1211.4 1064.02,1211.4 1064.6,1211.4 1065.19,1211.4 1065.78,1211.4 1066.36,1211.4 1066.95,1211.4 1067.54,1211.4 1068.12,1211.4 1068.71,1211.4 1069.3,1211.4 1069.88,1211.4 1070.47,1211.4 1071.06,1211.4 1071.64,1211.4 1072.23,1211.4 1072.81,1211.4 1073.4,1211.4 1073.99,1211.4 1074.57,1211.4 1075.16,1211.4 1075.75,1211.4 1076.33,1211.4 1076.92,1211.4 1077.51,1211.4 1078.09,1211.4 1078.68,1211.4 1079.26,1211.4 1079.85,1211.4 1080.44,1211.4 1081.02,1211.4 1081.61,1211.4 1082.2,1211.4 1082.78,1211.4 1083.37,1211.4 1083.96,1211.4 1084.54,1211.4 1085.13,1211.4 1085.72,1211.4 1086.3,1211.4 1086.89,1211.4 1087.47,1211.4 1088.06,1211.4 1088.65,1211.4 1089.23,1211.4 1089.82,1211.4 1090.41,1211.4 1090.99,1211.4 1091.58,1211.4 1092.17,1211.4 1092.75,1211.4 1093.34,1211.4 1093.93,1211.4 1094.51,1211.4 1095.1,1211.4 1095.68,1211.4 1096.27,1211.4 1096.86,1211.4 1097.44,1211.4 1098.03,1211.4 1098.62,1211.4 1099.2,1211.4 1099.79,1211.4 1100.38,1211.4 1100.96,1211.4 1101.55,1211.4 1102.14,1211.4 1102.72,1211.4 1103.31,1211.4 1103.89,1211.4 1104.48,1211.4 1105.07,1211.4 1105.65,1211.4 1106.24,1211.4 1106.83,1211.4 1107.41,1211.4 1108,1211.4 1108.59,1211.4 1109.17,1211.4 1109.76,1211.4 1110.34,1211.4 1110.93,1211.4 1111.52,1211.4 1112.1,1211.4 1112.69,1211.4 1113.28,1211.4 1113.86,1211.4 1114.45,1211.4 1115.04,1211.4 1115.62,1211.4 1116.21,1211.4 1116.8,1211.4 1117.38,1211.4 1117.97,1211.4 1118.55,1211.4 1119.14,1211.4 1119.73,1211.4 1120.31,1211.4 1120.9,1211.4 1121.49,1211.4 1122.07,1211.4 1122.66,1211.4 1123.25,1211.4 1123.83,1211.4 1124.42,1211.4 1125.01,1211.4 1125.59,1211.4 1126.18,1211.4 1126.76,1211.4 1127.35,1211.4 1127.94,1211.4 1128.52,1211.4 1129.11,1211.4 1129.7,1211.4 1130.28,1211.4 1130.87,1211.4 1131.46,1211.4 1132.04,1211.4 1132.63,1211.4 1133.21,1211.4 1133.8,1211.4 1134.39,1211.4 1134.97,1211.4 1135.56,1211.4 1136.15,1211.4 1136.73,1211.4 1137.32,1211.4 1137.91,1211.4 1138.49,1211.4 1139.08,1211.4 1139.67,1211.4 1140.25,1211.4 1140.84,1211.4 1141.42,1211.4 1142.01,1211.4 1142.6,1211.4 1143.18,1211.4 1143.77,1211.4 1144.36,1211.4 1144.94,1211.4 1145.53,1211.4 1146.12,1211.4 1146.7,1211.4 1147.29,1211.4 1147.88,1211.4 1148.46,1211.4 1149.05,1211.4 1149.63,1211.4 1150.22,1211.4 1150.81,1211.4 1151.39,1211.4 1151.98,1211.4 1152.57,1211.4 1153.15,1211.4 1153.74,1211.4 1154.33,1211.4 1154.91,1211.4 1155.5,1211.4 1156.09,1211.4 1156.67,1211.4 1157.26,1211.4 1157.84,1211.4 1158.43,1211.4 1159.02,1211.4 1159.6,1211.4 1160.19,1211.4 1160.78,1211.4 1161.36,1211.4 1161.95,1211.4 1162.54,1211.4 1163.12,1211.4 1163.71,1211.4 1164.29,1211.4 1164.88,1211.4 1165.47,1211.4 1166.05,1211.4 1166.64,1211.4 1167.23,1211.4 1167.81,1211.4 1168.4,1211.4 1168.99,1211.4 1169.57,1211.4 1170.16,1211.4 1170.75,1211.4 1171.33,1211.4 1171.92,1211.4 1172.5,1211.4 1173.09,1211.4 1173.68,1211.4 1174.26,1211.4 1174.85,1211.4 1175.44,1211.4 1176.02,1211.4 1176.61,1211.4 1177.2,1211.4 1177.78,1211.4 1178.37,1211.4 1178.96,1211.4 1179.54,1211.4 1180.13,1211.4 1180.71,1211.4 1181.3,1211.4 1181.89,1211.4 1182.47,1211.4 1183.06,1211.4 1183.65,1211.4 1184.23,1211.4 1184.82,1211.4 1185.41,1211.4 1185.99,1211.4 1186.58,1211.4 1187.16,1211.4 1187.75,1211.4 1188.34,1211.4 1188.92,1211.4 1189.51,1211.4 1190.1,1211.4 1190.68,1211.4 1191.27,1211.4 1191.86,1211.4 1192.44,1211.4 1193.03,1211.4 1193.62,1211.4 1194.2,1211.4 1194.79,1211.4 1195.37,1211.4 1195.96,1211.4 1196.55,1211.4 1197.13,1211.4 1197.72,1211.4 1198.31,1211.4 1198.89,1211.4 1199.48,1211.4 1200.07,1211.4 1200.65,1211.4 1201.24,1211.4 1201.83,1211.4 1202.41,1211.4 1203,1211.4 1203.58,1211.4 1204.17,1211.4 1204.76,1211.4 1205.34,1211.4 1205.93,1211.4 1206.52,1211.4 1207.1,1211.4 1207.69,1211.4 1208.28,1211.4 1208.86,1211.4 1209.45,1211.4 1210.03,1211.4 1210.62,1211.4 1211.21,1211.4 1211.79,1211.4 1212.38,1211.4 1212.97,1211.4 1213.55,1211.4 1214.14,1211.4 1214.73,1211.4 1215.31,1211.4 1215.9,1211.4 1216.49,1211.4 1217.07,1211.4 1217.66,1211.4 1218.24,1211.4 1218.83,1211.4 1219.42,1211.4 1220,1211.4 1220.59,1211.4 1221.18,1211.4 1221.76,1211.4 1222.35,1211.4 1222.94,1211.4 1223.52,1211.4 1224.11,1211.4 1224.7,1211.4 1225.28,1211.4 1225.87,1211.4 1226.45,1211.4 1227.04,1211.4 1227.63,1211.4 1228.21,1211.4 1228.8,1211.4 1229.39,1211.4 1229.97,1211.4 1230.56,1211.4 1231.15,1211.4 1231.73,1211.4 1232.32,1211.4 1232.91,1211.4 1233.49,1211.4 1234.08,1211.4 1234.66,1211.4 1235.25,1211.4 1235.84,1211.4 1236.42,1211.4 1237.01,1211.4 1237.6,1211.4 1238.18,1211.4 1238.77,1211.4 1239.36,1211.4 1239.94,1211.4 1240.53,1211.4 1241.11,1211.4 1241.7,1211.4 1242.29,1211.4 1242.87,1211.4 1243.46,1211.4 1244.05,1211.4 1244.63,1211.4 1245.22,1211.4 1245.81,1211.4 1246.39,1211.4 1246.98,1211.4 1247.57,1211.4 1248.15,1211.4 1248.74,1211.4 1249.32,1211.4 1249.91,1211.4 1250.5,1211.4 1251.08,1211.4 1251.67,1211.4 1252.26,1211.4 1252.84,1211.4 1253.43,1211.4 1254.02,1211.4 1254.6,1211.4 1255.19,1211.4 1255.78,1211.4 1256.36,1211.4 1256.95,1211.4 1257.53,1211.4 1258.12,1211.4 1258.71,1211.4 1259.29,1211.4 1259.88,1211.4 1260.47,1211.4 1261.05,1211.4 1261.64,1211.4 1262.23,1211.4 1262.81,1211.4 1263.4,1211.4 1263.98,1211.4 1264.57,1211.4 1265.16,1211.4 1265.74,1211.4 1266.33,1211.4 1266.92,1211.4 1267.5,1211.4 1268.09,1211.4 1268.68,1211.4 1269.26,1211.4 1269.85,1211.4 1270.44,1211.4 1271.02,1211.4 1271.61,1211.4 1272.19,1211.4 1272.78,1211.4 1273.37,1211.4 1273.95,1211.4 1274.54,1211.4 1275.13,1211.4 1275.71,1211.4 1276.3,1211.4 1276.89,1211.4 1277.47,1211.4 1278.06,1211.4 1278.65,1211.4 1279.23,1211.4 1279.82,1211.4 1280.4,1211.4 1280.99,1211.4 1281.58,1211.4 1282.16,1211.4 1282.75,1211.4 1283.34,1211.4 1283.92,1211.4 1284.51,1211.4 1285.1,1211.4 1285.68,1211.4 1286.27,1211.4 1286.86,1211.4 1287.44,1211.4 1288.03,1211.4 1288.61,1211.4 1289.2,1211.4 1289.79,1211.4 1290.37,1211.4 1290.96,1211.4 1291.55,1211.4 1292.13,1211.4 1292.72,1211.4 1293.31,1211.4 1293.89,1211.4 1294.48,1211.4 1295.06,1211.4 1295.65,1211.4 1296.24,1211.4 1296.82,1211.4 1297.41,1211.4 1298,1211.4 1298.58,1211.4 1299.17,1211.4 1299.76,1211.4 1300.34,1211.4 1300.93,1211.4 1301.52,1211.4 1302.1,1211.4 1302.69,1211.4 1303.27,1211.4 1303.86,1211.4 1304.45,1211.4 1305.03,1211.4 1305.62,1211.4 1306.21,1211.4 1306.79,1211.4 1307.38,1211.4 1307.97,1211.4 1308.55,1211.4 1309.14,1211.4 1309.73,1211.4 1310.31,1211.4 1310.9,1211.4 1311.48,1211.4 1312.07,1211.4 1312.66,1211.4 1313.24,1211.4 1313.83,1211.4 1314.42,1211.4 1315,1211.4 1315.59,1211.4 1316.18,1211.4 1316.76,1211.4 1317.35,1211.4 1317.93,1211.4 1318.52,1211.4 1319.11,1211.4 1319.69,1211.4 1320.28,1211.4 1320.87,1211.4 1321.45,1211.4 1322.04,1211.4 1322.63,1211.4 1323.21,1211.4 1323.8,1211.4 1324.39,1211.4 1324.97,1211.4 1325.56,1211.4 1326.14,1211.4 1326.73,1211.4 1327.32,1211.4 1327.9,1211.4 1328.49,1211.4 1329.08,1211.4 1329.66,1211.4 1330.25,1211.4 1330.84,1211.4 1331.42,1211.4 1332.01,1211.4 1332.6,1211.4 1333.18,1211.4 1333.77,1211.4 1334.35,1211.4 1334.94,1211.4 1335.53,1211.4 1336.11,1211.4 1336.7,1211.4 1337.29,1211.4 1337.87,1211.4 1338.46,1211.4 1339.05,1211.4 1339.63,1211.4 1340.22,1211.4 1340.8,1211.4 1341.39,1211.4 1341.98,1211.4 1342.56,1211.4 1343.15,1211.4 1343.74,1211.4 1344.32,1211.4 1344.91,1211.4 1345.5,1211.4 1346.08,1211.4 1346.67,1211.4 1347.26,1211.4 1347.84,1211.4 1348.43,1211.4 1349.01,1211.4 1349.6,1211.4 1350.19,1211.4 1350.77,1211.4 1351.36,1211.4 1351.95,1211.4 1352.53,1211.4 1353.12,1211.4 1353.71,1211.4 1354.29,1211.4 1354.88,1211.4 1355.47,1211.4 1356.05,1211.4 1356.64,1211.4 1357.22,1211.4 1357.81,1211.4 1358.4,1211.4 1358.98,1211.4 1359.57,1211.4 1360.16,1211.4 1360.74,1211.4 1361.33,1211.4 1361.92,1211.4 1362.5,1211.4 1363.09,1211.4 1363.68,1211.4 1364.26,1211.4 1364.85,1211.4 1365.43,1211.4 1366.02,1211.4 1366.61,1211.4 1367.19,1211.4 1367.78,1211.4 1368.37,1211.4 1368.95,1211.4 1369.54,1211.4 1370.13,1211.4 1370.71,1211.4 1371.3,1211.4 1371.88,1211.4 1372.47,1211.4 1373.06,1211.4 1373.64,1211.4 1374.23,1211.4 1374.82,1211.4 1375.4,1211.4 1375.99,1211.4 1376.58,1211.4 1377.16,1211.4 1377.75,1211.4 1378.34,1211.4 1378.92,1211.4 1379.51,1211.4 1380.09,1211.4 1380.68,1211.4 1381.27,1211.4 1381.85,1211.4 1382.44,1211.4 1383.03,1211.4 1383.61,1211.4 1384.2,1211.4 1384.79,1211.4 1385.37,1211.4 1385.96,1211.4 1386.55,1211.4 1387.13,1211.4 1387.72,1211.4 1388.3,1211.4 1388.89,1211.4 1389.48,1211.4 1390.06,1211.4 1390.65,1211.4 1391.24,1211.4 1391.82,1211.4 1392.41,1211.4 1393,1211.4 1393.58,1211.4 1394.17,1211.4 1394.75,1211.4 1395.34,1211.4 1395.93,1211.4 1396.51,1211.4 1397.1,1211.4 1397.69,1211.4 1398.27,1211.4 1398.86,1211.4 1399.45,1211.4 1400.03,1211.4 1400.62,1211.4 1401.21,1211.4 1401.79,1211.4 1402.38,1211.4 1402.96,1211.4 1403.55,1211.4 1404.14,1211.4 1404.72,1211.4 1405.31,1211.4 1405.9,1211.4 1406.48,1211.4 1407.07,1211.4 1407.66,1211.4 1408.24,1211.4 1408.83,1211.4 1409.42,1211.4 1410,1211.4 1410.59,1211.4 1411.17,1211.4 1411.76,1211.4 1412.35,1211.4 1412.93,1211.4 1413.52,1211.4 1414.11,1211.4 1414.69,1211.4 1415.28,1211.4 1415.87,1211.4 1416.45,1211.4 1417.04,1211.4 1417.63,1211.4 1418.21,1211.4 1418.8,1211.4 1419.38,1211.4 1419.97,1211.4 1420.56,1211.4 1421.14,1211.4 1421.73,1211.4 1422.32,1211.4 1422.9,1211.4 1423.49,1211.4 1424.08,1211.4 1424.66,1211.4 1425.25,1211.4 1425.83,1211.4 1426.42,1211.4 1427.01,1211.4 1427.59,1211.4 1428.18,1211.4 1428.77,1211.4 1429.35,1211.4 1429.94,1211.4 1430.53,1211.4 1431.11,1211.4 1431.7,1211.4 1432.29,1211.4 1432.87,1211.4 1433.46,1211.4 1434.04,1211.4 1434.63,1211.4 1435.22,1211.4 1435.8,1211.4 1436.39,1211.4 1436.98,1211.4 1437.56,1211.4 1438.15,1211.4 1438.74,1211.4 1439.32,1211.4 1439.91,1211.4 1440.5,1211.4 1441.08,1211.4 1441.67,1211.4 1442.25,1211.4 1442.84,1211.4 1443.43,1211.4 1444.01,1211.4 1444.6,1211.4 1445.19,1211.4 1445.77,1211.4 1446.36,1211.4 1446.95,1211.4 1447.53,1211.4 1448.12,1211.4 1448.7,1211.4 1449.29,1211.4 1449.88,1211.4 1450.46,1211.4 1451.05,1211.4 1451.64,1211.4 1452.22,1211.4 1452.81,1211.4 1453.4,1211.4 1453.98,1211.4 1454.57,1211.4 1455.16,1211.4 1455.74,1211.4 1456.33,1211.4 1456.91,1211.4 1457.5,1211.4 1458.09,1211.4 1458.67,1211.4 1459.26,1211.4 1459.85,1211.4 1460.43,1211.4 1461.02,1211.4 1461.61,1211.4 1462.19,1211.4 1462.78,1211.4 1463.37,1211.4 1463.95,1211.4 1464.54,1211.4 1465.12,1211.4 1465.71,1211.4 1466.3,1211.4 1466.88,1211.4 1467.47,1211.4 1468.06,1211.4 1468.64,1211.4 1469.23,1211.4 1469.82,1211.4 1470.4,1211.4 1470.99,1211.4 1471.57,1211.4 1472.16,1211.4 1472.75,1211.4 1473.33,1211.4 1473.92,1211.4 1474.51,1211.4 1475.09,1211.4 1475.68,1211.4 1476.27,1211.4 1476.85,1211.4 1477.44,1211.4 1478.03,1211.4 1478.61,1211.4 1479.2,1211.4 1479.78,1211.4 1480.37,1211.4 1480.96,1211.4 1481.54,1211.4 1482.13,1211.4 1482.72,1211.4 1483.3,1211.4 1483.89,1211.4 1484.48,1211.4 1485.06,1211.4 1485.65,1211.4 1486.24,1211.4 1486.82,1211.4 1487.41,1211.4 1487.99,1211.4 1488.58,1211.4 1489.17,1211.4 1489.75,1211.4 1490.34,1211.4 1490.93,1211.4 1491.51,1211.4 1492.1,1211.4 1492.69,1211.4 1493.27,1211.4 1493.86,1211.4 1494.45,1211.4 1495.03,1211.4 1495.62,1211.4 1496.2,1211.4 1496.79,1211.4 1497.38,1211.4 1497.96,1211.4 1498.55,1211.4 1499.14,1211.4 1499.72,1211.4 1500.31,1211.4 1500.9,1211.4 1501.48,1211.4 1502.07,1211.4 1502.65,1211.4 1503.24,1211.4 1503.83,1211.4 1504.41,1211.4 1505,1211.4 1505.59,1211.4 1506.17,1211.4 1506.76,1211.4 1507.35,1211.4 1507.93,1211.4 1508.52,1211.4 1509.11,1211.4 1509.69,1211.4 1510.28,1211.4 1510.86,1211.4 1511.45,1211.4 1512.04,1211.4 1512.62,1211.4 1513.21,1211.4 1513.8,1211.4 1514.38,1211.4 1514.97,1211.4 1515.56,1211.4 1516.14,1211.4 1516.73,1211.4 1517.32,1211.4 1517.9,1211.4 1518.49,1211.4 1519.07,1211.4 1519.66,1211.4 1520.25,1211.4 1520.83,1211.4 1521.42,1211.4 1522.01,1211.4 1522.59,1211.4 1523.18,1211.4 1523.77,1211.4 1524.35,1211.4 1524.94,1211.4 1525.52,1211.4 1526.11,1211.4 1526.7,1211.4 1527.28,1211.4 1527.87,1211.4 1528.46,1211.4 1529.04,1211.4 1529.63,1211.4 1530.22,1211.4 1530.8,1211.4 1531.39,1211.4 1531.98,1211.4 1532.56,1211.4 1533.15,1211.4 1533.73,1211.4 1534.32,1211.4 1534.91,1211.4 1535.49,1211.4 1536.08,1211.4 1536.67,1211.4 1537.25,1211.4 1537.84,1211.4 1538.43,1211.4 1539.01,1211.4 1539.6,1211.4 1540.19,1211.4 1540.77,1211.4 1541.36,1211.4 1541.94,1211.4 1542.53,1211.4 1543.12,1211.4 1543.7,1211.4 1544.29,1211.4 1544.88,1211.4 1545.46,1211.4 1546.05,1211.4 1546.64,1211.4 1547.22,1211.4 1547.81,1211.4 1548.4,1211.4 1548.98,1211.4 1549.57,1211.4 1550.15,1211.4 1550.74,1211.4 1551.33,1211.4 1551.91,1211.4 1552.5,1211.4 1553.09,1211.4 1553.67,1211.4 1554.26,1211.4 1554.85,1211.4 1555.43,1211.4 1556.02,1211.4 1556.6,1211.4 1557.19,1211.4 1557.78,1211.4 1558.36,1211.4 1558.95,1211.4 1559.54,1211.4 1560.12,1211.4 1560.71,1211.4 1561.3,1211.4 1561.88,1211.4 1562.47,1211.4 1563.06,1211.4 1563.64,1211.4 1564.23,1211.4 1564.81,1211.4 1565.4,1211.4 1565.99,1211.4 1566.57,1211.4 1567.16,1211.4 1567.75,1211.4 1568.33,1211.4 1568.92,1211.4 1569.51,1211.4 1570.09,1211.4 1570.68,1211.4 1571.27,1211.4 1571.85,1211.4 1572.44,1211.4 1573.02,1211.4 1573.61,1211.4 1574.2,1211.4 1574.78,1211.4 1575.37,1211.4 1575.96,1211.4 1576.54,1211.4 1577.13,1211.4 1577.72,1211.4 1578.3,1211.4 1578.89,1211.4 1579.47,1211.4 1580.06,1211.4 1580.65,1211.4 1581.23,1211.4 1581.82,1211.4 1582.41,1211.4 1582.99,1211.4 1583.58,1211.4 1584.17,1211.4 1584.75,1211.4 1585.34,1211.4 1585.93,1211.4 1586.51,1211.4 1587.1,1211.4 1587.68,1211.4 1588.27,1211.4 1588.86,1211.4 1589.44,1211.4 1590.03,1211.4 1590.62,1211.4 1591.2,1211.4 1591.79,1211.4 1592.38,1211.4 1592.96,1211.4 1593.55,1211.4 1594.14,1211.4 1594.72,1211.4 1595.31,1211.4 1595.89,1211.4 1596.48,1211.4 1597.07,1211.4 1597.65,1211.4 1598.24,1211.4 1598.83,1211.4 1599.41,1211.4 1600,1211.4 1600.59,1211.4 1601.17,1211.4 1601.76,1211.4 1602.34,1211.4 1602.93,1211.4 1603.52,1211.4 1604.1,1211.4 1604.69,1211.4 1605.28,1211.4 1605.86,1211.4 1606.45,1211.4 1607.04,1211.4 1607.62,1211.4 1608.21,1211.4 1608.8,1211.4 1609.38,1211.4 1609.97,1211.4 1610.55,1211.4 1611.14,1211.4 1611.73,1211.4 1612.31,1211.4 1612.9,1211.4 1613.49,1211.4 1614.07,1211.4 1614.66,1211.4 1615.25,1211.4 1615.83,1211.4 1616.42,1211.4 1617.01,1211.4 1617.59,1211.4 1618.18,1211.4 1618.76,1211.4 1619.35,1211.4 1619.94,1211.4 1620.52,1211.4 1621.11,1211.4 1621.7,1211.4 1622.28,1211.4 1622.87,1211.4 1623.46,1211.4 1624.04,1211.4 1624.63,1211.4 1625.22,1211.4 1625.8,1211.4 1626.39,1211.4 1626.97,1211.4 1627.56,1211.4 1628.15,1211.4 1628.73,1211.4 1629.32,1211.4 1629.91,1211.4 1630.49,1211.4 1631.08,1211.4 1631.67,1211.4 1632.25,1211.4 1632.84,1211.4 1633.42,1211.4 1634.01,1211.4 1634.6,1211.4 1635.18,1211.4 1635.77,1211.4 1636.36,1211.4 1636.94,1211.4 1637.53,1211.4 1638.12,1211.4 1638.7,1211.4 1639.29,1211.4 1639.88,1211.4 1640.46,1211.4 1641.05,1211.4 1641.63,1211.4 1642.22,1211.4 1642.81,1211.4 1643.39,1211.4 1643.98,1211.4 1644.57,1211.4 1645.15,1211.4 1645.74,1211.4 1646.33,1211.4 1646.91,1211.4 1647.5,1211.4 1648.09,1211.4 1648.67,1211.4 1649.26,1211.4 1649.84,1211.4 1650.43,1211.4 1651.02,1211.4 1651.6,1211.4 1652.19,1211.4 1652.78,1211.4 1653.36,1211.4 1653.95,1211.4 1654.54,1211.4 1655.12,1211.4 1655.71,1211.4 1656.29,1211.4 1656.88,1211.4 1657.47,1211.4 1658.05,1211.4 1658.64,1211.4 1659.23,1211.4 1659.81,1211.4 1660.4,1211.4 1660.99,1211.4 1661.57,1211.4 1662.16,1211.4 1662.75,1211.4 1663.33,1211.4 1663.92,1211.4 1664.5,1211.4 1665.09,1211.4 1665.68,1211.4 1666.26,1211.4 1666.85,1211.4 1667.44,1211.4 1668.02,1211.4 1668.61,1211.4 1669.2,1211.4 1669.78,1211.4 1670.37,1211.4 1670.96,1211.4 1671.54,1211.4 1672.13,1211.4 1672.71,1211.4 1673.3,1211.4 1673.89,1211.4 1674.47,1211.4 1675.06,1211.4 1675.65,1211.4 1676.23,1211.4 1676.82,1211.4 1677.41,1211.4 1677.99,1211.4 1678.58,1211.4 1679.17,1211.4 1679.75,1211.4 1680.34,1211.4 1680.92,1211.4 1681.51,1211.4 1682.1,1211.4 1682.68,1211.4 1683.27,1211.4 1683.86,1211.4 1684.44,1211.4 1685.03,1211.4 1685.62,1211.4 1686.2,1211.4 1686.79,1211.4 1687.37,1211.4 1687.96,1211.4 1688.55,1211.4 1689.13,1211.4 1689.72,1211.4 1690.31,1211.4 1690.89,1211.4 1691.48,1211.4 1692.07,1211.4 1692.65,1211.4 1693.24,1211.4 1693.83,1211.4 1694.41,1211.4 1695,1211.4 1695.58,1211.4 1696.17,1211.4 1696.76,1211.4 1697.34,1211.4 1697.93,1211.4 1698.52,1211.4 1699.1,1211.4 1699.69,1211.4 1700.28,1211.4 1700.86,1211.4 1701.45,1211.4 1702.04,1211.4 1702.62,1211.4 1703.21,1211.4 1703.79,1211.4 1704.38,1211.4 1704.97,1211.4 1705.55,1211.4 1706.14,1211.4 1706.73,1211.4 1707.31,1211.4 1707.9,1211.4 1708.49,1211.4 1709.07,1211.4 1709.66,1211.4 1710.24,1211.4 1710.83,1211.4 1711.42,1211.4 1712,1211.4 1712.59,1211.4 1713.18,1211.4 1713.76,1211.4 1714.35,1211.4 1714.94,1211.4 1715.52,1211.4 1716.11,1211.4 1716.7,1211.4 1717.28,1211.4 1717.87,1211.4 1718.45,1211.4 1719.04,1211.4 1719.63,1211.4 1720.21,1211.4 1720.8,1211.4 1721.39,1211.4 1721.97,1211.4 1722.56,1211.4 1723.15,1211.4 1723.73,1211.4 1724.32,1211.4 1724.91,1211.4 1725.49,1211.4 1726.08,1211.4 1726.66,1211.4 1727.25,1211.4 1727.84,1211.4 1728.42,1211.4 1729.01,1211.4 1729.6,1211.4 1730.18,1211.4 1730.77,1211.4 1731.36,1211.4 1731.94,1211.4 1732.53,1211.4 1733.11,1211.4 1733.7,1211.4 1734.29,1211.4 1734.87,1211.4 1735.46,1211.4 1736.05,1211.4 1736.63,1211.4 1737.22,1211.4 1737.81,1211.4 1738.39,1211.4 1738.98,1211.4 1739.57,1211.4 1740.15,1211.4 1740.74,1211.4 1741.32,1211.4 1741.91,1211.4 1742.5,1211.4 1743.08,1211.4 1743.67,1211.4 1744.26,1211.4 1744.84,1211.4 1745.43,1211.4 1746.02,1211.4 1746.6,1211.4 1747.19,1211.4 1747.78,1211.4 1748.36,1211.4 1748.95,1211.4 1749.53,1211.4 1750.12,1211.4 1750.71,1211.4 1751.29,1211.4 1751.88,1211.4 1752.47,1211.4 1753.05,1211.4 1753.64,1211.4 1754.23,1211.4 1754.81,1211.4 1755.4,1211.4 1755.99,1211.4 1756.57,1211.4 1757.16,1211.4 1757.74,1211.4 1758.33,1211.4 1758.92,1211.4 1759.5,1211.4 1760.09,1211.4 1760.68,1211.4 1761.26,1211.4 1761.85,1211.4 1762.44,1211.4 1763.02,1211.4 1763.61,1211.4 1764.19,1211.4 1764.78,1211.4 1765.37,1211.4 1765.95,1211.4 1766.54,1211.4 1767.13,1211.4 1767.71,1211.4 1768.3,1211.4 1768.89,1211.4 1769.47,1211.4 1770.06,1211.4 1770.65,1211.4 1771.23,1211.4 1771.82,1211.4 1772.4,1211.4 1772.99,1211.4 1773.58,1211.4 1774.16,1211.4 1774.75,1211.4 1775.34,1211.4 1775.92,1211.4 1776.51,1211.4 1777.1,1211.4 1777.68,1211.4 1778.27,1211.4 1778.86,1211.4 1779.44,1211.4 1780.03,1211.4 1780.61,1211.4 1781.2,1211.4 1781.79,1211.4 1782.37,1211.4 1782.96,1211.4 1783.55,1211.4 1784.13,1211.4 1784.72,1211.4 1785.31,1211.4 1785.89,1211.4 1786.48,1211.4 1787.06,1211.4 1787.65,1211.4 1788.24,1211.4 1788.82,1211.4 1789.41,1211.4 1790,1211.4 1790.58,1211.4 1791.17,1211.4 1791.76,1211.4 1792.34,1211.4 1792.93,1211.4 1793.52,1211.4 1794.1,1211.4 1794.69,1211.4 1795.27,1211.4 1795.86,1211.4 1796.45,1211.4 1797.03,1211.4 1797.62,1211.4 1798.21,1211.4 1798.79,1211.4 1799.38,1211.4 1799.97,1211.4 1800.55,1211.4 1801.14,1211.4 1801.73,1211.4 1802.31,1211.4 1802.9,1211.4 1803.48,1211.4 1804.07,1211.4 1804.66,1211.4 1805.24,1211.4 1805.83,1211.4 1806.42,1211.4 1807,1211.4 1807.59,1211.4 1808.18,1211.4 1808.76,1211.4 1809.35,1211.4 1809.94,1211.4 1810.52,1211.4 1811.11,1211.4 1811.69,1211.4 1812.28,1211.4 1812.87,1211.4 1813.45,1211.4 1814.04,1211.4 1814.63,1211.4 1815.21,1211.4 1815.8,1211.4 1816.39,1211.4 1816.97,1211.4 1817.56,1211.4 1818.14,1211.4 1818.73,1211.4 1819.32,1211.4 1819.9,1211.4 1820.49,1211.4 1821.08,1211.4 1821.66,1211.4 1822.25,1211.4 1822.84,1211.4 1823.42,1211.4 1824.01,1211.4 1824.6,1211.4 1825.18,1211.4 1825.77,1211.4 1826.35,1211.4 1826.94,1211.4 1827.53,1211.4 1828.11,1211.4 1828.7,1211.4 1829.29,1211.4 1829.87,1211.4 1830.46,1211.4 1831.05,1211.4 1831.63,1211.4 1832.22,1211.4 1832.81,1211.4 1833.39,1211.4 1833.98,1211.4 1834.56,1211.4 1835.15,1211.4 1835.74,1211.4 1836.32,1211.4 1836.91,1211.4 1837.5,1211.4 1838.08,1211.4 1838.67,1211.4 1839.26,1211.4 1839.84,1211.4 1840.43,1211.4 1841.01,1211.4 1841.6,1211.4 1842.19,1211.4 1842.77,1211.4 1843.36,1211.4 1843.95,1211.4 1844.53,1211.4 1845.12,1211.4 1845.71,1211.4 1846.29,1211.4 1846.88,1211.4 1847.47,1211.4 1848.05,1211.4 1848.64,1211.4 1849.22,1211.4 1849.81,1211.4 1850.4,1211.4 1850.98,1211.4 1851.57,1211.4 1852.16,1211.4 1852.74,1211.4 1853.33,1211.4 1853.92,1211.4 1854.5,1211.4 1855.09,1211.4 1855.68,1211.4 1856.26,1211.4 1856.85,1211.4 1857.43,1211.4 1858.02,1211.4 1858.61,1211.4 1859.19,1211.4 1859.78,1211.4 1860.37,1211.4 1860.95,1211.4 1861.54,1211.4 1862.13,1211.4 1862.71,1211.4 1863.3,1211.4 1863.88,1211.4 1864.47,1211.4 1865.06,1211.4 1865.64,1211.4 1866.23,1211.4 1866.82,1211.4 1867.4,1211.4 1867.99,1211.4 1868.58,1211.4 1869.16,1211.4 1869.75,1211.4 1870.34,1211.4 1870.92,1211.4 1871.51,1211.4 1872.09,1211.4 1872.68,1211.4 1873.27,1211.4 1873.85,1211.4 1874.44,1211.4 1875.03,1211.4 1875.61,1211.4 1876.2,1211.4 1876.79,1211.4 1877.37,1211.4 1877.96,1211.4 1878.55,1211.4 1879.13,1211.4 1879.72,1211.4 1880.3,1211.4 1880.89,1211.4 1881.48,1211.4 1882.06,1211.4 1882.65,1211.4 1883.24,1211.4 1883.82,1211.4 1884.41,1211.4 1885,1211.4 1885.58,1211.4 1886.17,1211.4 1886.76,1211.4 1887.34,1211.4 1887.93,1211.4 1888.51,1211.4 1889.1,1211.4 1889.69,1211.4 1890.27,1211.4 1890.86,1211.4 1891.45,1211.4 1892.03,1211.4 1892.62,1211.4 1893.21,1211.4 1893.79,1211.4 1894.38,1211.4 1894.96,1211.4 1895.55,1211.4 1896.14,1211.4 1896.72,1211.4 1897.31,1211.4 1897.9,1211.4 1898.48,1211.4 1899.07,1211.4 1899.66,1211.4 1900.24,1211.4 1900.83,1211.4 1901.42,1211.4 1902,1211.4 1902.59,1211.4 1903.17,1211.4 1903.76,1211.4 1904.35,1211.4 1904.93,1211.4 1905.52,1211.4 1906.11,1211.4 1906.69,1211.4 1907.28,1211.4 1907.87,1211.4 1908.45,1211.4 1909.04,1211.4 1909.63,1211.4 1910.21,1211.4 1910.8,1211.4 1911.38,1211.4 1911.97,1211.4 1912.56,1211.4 1913.14,1211.4 1913.73,1211.4 1914.32,1211.4 1914.9,1211.4 1915.49,1211.4 1916.08,1211.4 1916.66,1211.4 1917.25,1211.4 1917.83,1211.4 1918.42,1211.4 1919.01,1211.4 1919.59,1211.4 1920.18,1211.4 1920.77,1211.4 1921.35,1211.4 1921.94,1211.4 1922.53,1211.4 1923.11,1211.4 1923.7,1211.4 1924.29,1211.4 1924.87,1211.4 1925.46,1211.4 1926.04,1211.4 1926.63,1211.4 1927.22,1211.4 1927.8,1211.4 1928.39,1211.4 1928.98,1211.4 1929.56,1211.4 1930.15,1211.4 1930.74,1211.4 1931.32,1211.4 1931.91,1211.4 1932.5,1211.4 1933.08,1211.4 1933.67,1211.4 1934.25,1211.4 1934.84,1211.4 1935.43,1211.4 1936.01,1211.4 1936.6,1211.4 1937.19,1211.4 1937.77,1211.4 1938.36,1211.4 1938.95,1211.4 1939.53,1211.4 1940.12,1211.4 1940.71,1211.4 1941.29,1211.4 1941.88,1211.4 1942.46,1211.4 1943.05,1211.4 1943.64,1211.4 1944.22,1211.4 1944.81,1211.4 1945.4,1211.4 1945.98,1211.4 1946.57,1211.4 1947.16,1211.4 1947.74,1211.4 1948.33,1211.4 1948.91,1211.4 1949.5,1211.4 1950.09,1211.4 1950.67,1211.4 1951.26,1211.4 1951.85,1211.4 1952.43,1211.4 1953.02,1211.4 1953.61,1211.4 1954.19,1211.4 1954.78,1211.4 1955.37,1211.4 1955.95,1211.4 1956.54,1211.4 1957.12,1211.4 1957.71,1211.4 1958.3,1211.4 1958.88,1211.4 1959.47,1211.4 1960.06,1211.4 1960.64,1211.4 1961.23,1211.4 1961.82,1211.4 1962.4,1211.4 1962.99,1211.4 1963.58,1211.4 1964.16,1211.4 1964.75,1211.4 1965.33,1211.4 1965.92,1211.4 1966.51,1211.4 1967.09,1211.4 1967.68,1211.4 1968.27,1211.4 1968.85,1211.4 1969.44,1211.4 1970.03,1211.4 1970.61,1211.4 1971.2,1211.4 1971.78,1211.4 1972.37,1211.4 1972.96,1211.4 1973.54,1211.4 1974.13,1211.4 1974.72,1211.4 1975.3,1211.4 1975.89,1211.4 1976.48,1211.4 1977.06,1211.4 1977.65,1211.4 1978.24,1211.4 1978.82,1211.4 1979.41,1211.4 1979.99,1211.4 1980.58,1211.4 1981.17,1211.4 1981.75,1211.4 1982.34,1211.4 1982.93,1211.4 1983.51,1211.4 1984.1,1211.4 1984.69,1211.4 1985.27,1211.4 1985.86,1211.4 1986.45,1211.4 1987.03,1211.4 1987.62,1211.4 1988.2,1211.4 1988.79,1211.4 1989.38,1211.4 1989.96,1211.4 1990.55,1211.4 1991.14,1211.4 1991.72,1211.4 1992.31,1211.4 1992.9,1211.4 1993.48,1211.4 1994.07,1211.4 1994.65,1211.4 1995.24,1211.4 1995.83,1211.4 1996.41,1211.4 1997,1211.4 1997.59,1211.4 1998.17,1211.4 1998.76,1211.4 1999.35,1211.4 1999.93,1211.4 2000.52,1211.4 2001.11,1211.4 2001.69,1211.4 2002.28,1211.4 2002.86,1211.4 2003.45,1211.4 2004.04,1211.4 2004.62,1211.4 2005.21,1211.4 2005.8,1211.4 2006.38,1211.4 2006.97,1211.4 2007.56,1211.4 2008.14,1211.4 2008.73,1211.4 2009.32,1211.4 2009.9,1211.4 2010.49,1211.4 2011.07,1211.4 2011.66,1211.4 2012.25,1211.4 2012.83,1211.4 2013.42,1211.4 2014.01,1211.4 2014.59,1211.4 2015.18,1211.4 2015.77,1211.4 2016.35,1211.4 2016.94,1211.4 2017.53,1211.4 2018.11,1211.4 2018.7,1211.4 2019.28,1211.4 2019.87,1211.4 2020.46,1211.4 2021.04,1211.4 2021.63,1211.4 2022.22,1211.4 2022.8,1211.4 2023.39,1211.4 2023.98,1211.4 2024.56,1211.4 2025.15,1211.4 2025.73,1211.4 2026.32,1211.4 2026.91,1211.4 2027.49,1211.4 2028.08,1211.4 2028.67,1211.4 2029.25,1211.4 2029.84,1211.4 2030.43,1211.4 2031.01,1211.4 2031.6,1211.4 2032.19,1211.4 2032.77,1211.4 2033.36,1211.4 2033.94,1211.4 2034.53,1211.4 2035.12,1211.4 2035.7,1211.4 2036.29,1211.4 2036.88,1211.4 2037.46,1211.4 2038.05,1211.4 2038.64,1211.4 2039.22,1211.4 2039.81,1211.4 2040.4,1211.4 2040.98,1211.4 2041.57,1211.4 2042.15,1211.4 2042.74,1211.4 2043.33,1211.4 2043.91,1211.4 2044.5,1211.4 2045.09,1211.4 2045.67,1211.4 2046.26,1211.4 2046.85,1211.4 2047.43,1211.4 2048.02,1211.4 2048.6,1211.4 2049.19,1211.4 2049.78,1211.4 2050.36,1211.4 2050.95,1211.4 2051.54,1211.4 2052.12,1211.4 2052.71,1211.4 2053.3,1211.4 2053.88,1211.4 2054.47,1211.4 2055.06,1211.4 2055.64,1211.4 2056.23,1211.4 2056.81,1211.4 2057.4,1211.4 2057.99,1211.4 2058.57,1211.4 2059.16,1211.4 2059.75,1211.4 2060.33,1211.4 2060.92,1211.4 2061.51,1211.4 2062.09,1211.4 2062.68,1211.4 2063.27,1211.4 2063.85,1211.4 2064.44,1211.4 2065.02,1211.4 2065.61,1211.4 2066.2,1211.4 2066.78,1211.4 2067.37,1211.4 2067.96,1211.4 2068.54,1211.4 2069.13,1211.4 2069.72,1211.4 2070.3,1211.4 2070.89,1211.4 2071.48,1211.4 2072.06,1211.4 2072.65,1211.4 2073.23,1211.4 2073.82,1211.4 2074.41,1211.4 2074.99,1211.4 2075.58,1211.4 2076.17,1211.4 2076.75,1211.4 2077.34,1211.4 2077.93,1211.4 2078.51,1211.4 2079.1,1211.4 2079.68,1211.4 2080.27,1211.4 2080.86,1211.4 2081.44,1211.4 2082.03,1211.4 2082.62,1211.4 2083.2,1211.4 2083.79,1211.4 2084.38,1211.4 2084.96,1211.4 2085.55,1211.4 2086.14,1211.4 2086.72,1211.4 2087.31,1211.4 2087.89,1211.4 2088.48,1211.4 2089.07,1211.4 2089.65,1211.4 2090.24,1211.4 2090.83,1211.4 2091.41,1211.4 2092,1211.4 2092.59,1211.4 2093.17,1211.4 2093.76,1211.4 2094.35,1211.4 2094.93,1211.4 2095.52,1211.4 2096.1,1211.4 2096.69,1211.4 2097.28,1211.4 2097.86,1211.4 2098.45,1211.4 2099.04,1211.4 2099.62,1211.4 2100.21,1211.4 2100.8,1211.4 2101.38,1211.4 2101.97,1211.4 2102.55,1211.4 2103.14,1211.4 2103.73,1211.4 2104.31,1211.4 2104.9,1211.4 2105.49,1211.4 2106.07,1211.4 2106.66,1211.4 2107.25,1211.4 2107.83,1211.4 2108.42,1211.4 2109.01,1211.4 2109.59,1211.4 2110.18,1211.4 2110.76,1211.4 2111.35,1211.4 2111.94,1211.4 2112.52,1211.4 2113.11,1211.4 2113.7,1211.4 2114.28,1211.4 2114.87,1211.4 2115.46,1211.4 2116.04,1211.4 2116.63,1211.4 2117.22,1211.4 2117.8,1211.4 2118.39,1211.4 2118.97,1211.4 2119.56,1211.4 2120.15,1211.4 2120.73,1211.4 2121.32,1211.4 2121.91,1211.4 2122.49,1211.4 2123.08,1211.4 2123.67,1211.4 2124.25,1211.4 2124.84,1211.4 2125.42,1211.4 2126.01,1211.4 2126.6,1211.4 2127.18,1211.4 2127.77,1211.4 2128.36,1211.4 2128.94,1211.4 2129.53,1211.4 2130.12,1211.4 2130.7,1211.4 2131.29,1211.4 2131.88,1211.4 2132.46,1211.4 2133.05,1211.4 2133.63,1211.4 2134.22,1211.4 2134.81,1211.4 2135.39,1211.4 2135.98,1211.4 2136.57,1211.4 2137.15,1211.4 2137.74,1211.4 2138.33,1211.4 2138.91,1211.4 2139.5,1211.4 2140.09,1211.4 2140.67,1211.4 2141.26,1211.4 2141.84,1211.4 2142.43,1211.4 2143.02,1211.4 2143.6,1211.4 2144.19,1211.4 2144.78,1211.4 2145.36,1211.4 2145.95,1211.4 2146.54,1211.4 2147.12,1211.4 2147.71,1211.4 2148.3,1211.4 2148.88,1211.4 2149.47,1211.4 2150.05,1211.4 2150.64,1211.4 2151.23,1211.4 2151.81,1211.4 2152.4,1211.4 2152.99,1211.4 2153.57,1211.4 2154.16,1211.4 2154.75,1211.4 2155.33,1211.4 2155.92,1211.4 2156.5,1211.4 2157.09,1211.4 2157.68,1211.4 2158.26,1211.4 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.02,1193.34 1399.56,899.083 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.97 985.439,1193.34 2158.26,1193.34 2158.26,1228.97 985.439,1228.97 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip223\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-10249.6 167.706,-10757.6 168.266,-11193.3 168.825,-10718.5 169.384,-11097.5 169.943,-11441.6 170.503,-10358.1 171.062,-10692.9 171.621,-10965.3 172.18,-10665.2 172.74,-10894.5 173.299,-11068.4 173.858,-11231.4 174.417,-11364 174.977,-11476.1 175.536,-11179 176.095,-10873.6 176.655,-10611.7 177.214,-10659.9 177.773,-10683.4 178.332,-10681.2 178.892,-10418.3 179.451,-10397.3 180.01,-10354.7 180.569,-10098.3 181.129,-9854.83 181.688,-9786.45 182.247,-9528.34 182.806,-9462.06 183.366,-9377.62 183.925,-8691.69 184.484,-8460.69 185.043,-8241.92 185.603,-8141.17 186.162,-7932.26 186.721,-7819.54 187.28,-7599.68 187.84,-7494.55 188.399,-7181.59 188.958,-7078.8 189.517,-6865.42 190.077,-6671.31 190.636,-6555.93 191.195,-6137.75 191.754,-6032.27 192.314,-5925.52 192.873,-5817.36 193.432,-5641.02 193.991,-5527.25 194.551,-5168.99 195.11,-5060.8 195.669,-4954.13 196.228,-4736.64 196.788,-4480.28 197.347,-4286.32 197.906,-4197.03 198.465,-4103 199.025,-4014.3 199.584,-3874.96 200.143,-3734.73 200.702,-3608.45 201.262,-3478.49 201.821,-3355.36 202.38,-3196.25 202.939,-3080.15 203.499,-2934.23 204.058,-2824.99 204.617,-2682.6 205.176,-2578.81 205.736,-2440.66 206.295,-2373.27 206.854,-2243.79 207.413,-2185.97 207.973,-2131.1 208.532,-2101.11 209.091,-1979 209.65,-1887.29 210.21,-1740.81 210.769,-1688.04 211.328,-1545.76 211.887,-1435.47 212.447,-1359.05 213.006,-1256.73 213.565,-1208.02 214.124,-1138.11 214.684,-1042.92 215.243,-950.167 215.802,-857.999 216.361,-770.021 216.921,-703.054 217.48,-691.676 218.039,-654.658 218.598,-593.896 219.158,-533.313 219.717,-427.116 220.276,-379.337 220.835,-279.743 221.395,-183.193 221.954,-139.68 222.513,-28.2107 223.072,16.3197 223.632,51.7116 224.191,113.211 224.75,133.354 225.309,170.954 225.869,187.066 226.428,202.348 226.987,237.016 227.546,247.861 228.106,245.313 228.665,262.746 229.224,304.459 229.783,360.668 230.343,435.252 230.902,507.498 231.461,575.929 232.02,616.751 232.58,623.276 233.139,642.186 233.698,661.612 234.257,682.617 234.817,703.841 235.376,725.172 235.935,723.717 236.494,723.13 237.054,725.992 237.613,783.647 238.172,842.277 238.731,873.607 239.291,849.634 239.85,885.293 240.409,899.189 240.968,947.803 241.528,960.669 242.087,936.221 242.646,930.005 243.205,943.016 243.765,953.918 244.324,945.12 244.883,973.579 245.442,966.199 246.002,977.469 246.561,972.001 247.12,965.735 247.679,960.599 248.239,992.829 248.798,986.468 249.357,997.702 249.916,1010.31 250.476,1023.07 251.035,1033.24 251.594,1026.13 252.153,1015.95 252.713,1027.9 253.272,1000.11 253.831,1045.69 254.39,999.529 254.95,993.239 255.509,1003.37 256.068,1014.39 256.627,1026.3 257.187,1021.95 257.746,1032.41 258.305,1081.18 258.864,1057.02 259.424,1051.78 259.983,1044.17 260.542,1041.23 261.101,1086.39 261.661,1062.75 262.22,1058.69 262.779,1051.35 263.338,1061.74 263.898,1069.42 264.457,1095.39 265.016,1106.9 265.575,1103.07 266.135,1075.15 266.694,1067.33 267.253,1081.73 267.812,1074.36 268.372,1070.74 268.931,996.906 269.49,979.663 270.049,994.169 270.609,992.422 271.168,989.102 271.727,1019.55 272.286,1015.94 272.846,1011.65 273.405,1058.82 273.964,1068.35 274.523,1062.02 275.083,1039.24 275.642,1101.04 276.201,1076.24 276.76,1066.34 277.32,1026.43 277.879,1024.04 278.438,1018.37 278.997,996.131 279.557,1024.62 280.116,1038.75 280.675,1049.65 281.234,1038.26 281.794,1036.36 282.353,1046.12 282.912,1055.75 283.471,1049.32 284.031,1076.84 284.59,1019.43 285.149,1034.16 285.708,1045.45 286.268,1053.46 286.827,1063.58 287.386,1056.42 287.945,1084.48 288.505,1074.71 289.064,1086.37 289.623,1078.38 290.182,1084.37 290.742,1109.77 291.301,1103.43 291.86,1111.78 292.419,1119.03 292.979,1111 293.538,1163.49 294.097,1137.55 294.656,1091.17 295.216,1051.6 295.775,1063.45 296.334,1037.25 296.893,1029.44 297.453,1023.87 298.012,1038.23 298.571,999.077 299.13,1009.77 299.69,972.797 300.249,966.303 300.808,961.823 301.368,1026.26 301.927,1023.19 302.486,1021.3 303.045,1017.35 303.605,1013.34 304.164,1057.09 304.723,1053.66 305.282,998.567 305.842,909.449 306.401,942.111 306.96,972.894 307.519,1002.52 308.079,963.355 308.638,975.685 309.197,1002.02 309.756,999.521 310.316,1010.12 310.875,1019.36 311.434,1059.2 311.993,1065.24 312.553,1043.33 313.112,1001.15 313.671,996.807 314.23,1006.24 314.79,1001.31 315.349,1014.13 315.908,1020.39 316.467,1013.19 317.027,1023.66 317.586,1019.62 318.145,999.088 318.704,1038.68 319.264,1049.49 319.823,1024.51 320.382,1016.75 320.941,1026.91 321.501,1053.47 322.06,1040.31 322.619,1031.18 323.178,992.591 323.738,986.483 324.297,997.346 324.856,1008.66 325.415,1035.38 325.975,993.872 326.534,1006.7 327.093,997.11 327.652,975.095 328.212,985.65 328.771,996.132 329.33,1038.84 329.889,1080.37 330.449,1083.19 331.008,1085.15 331.567,1089.35 332.126,1094.05 332.686,1098.44 333.245,1099.99 333.804,1067.84 334.363,1056.2 334.923,1047.83 335.482,1035.81 336.041,1056.91 336.6,1060.38 337.16,1081.55 337.719,1070.8 338.278,1057.53 338.837,1045.94 339.397,1019.71 339.956,1027.21 340.515,1018.22 341.074,977.357 341.634,967.542 342.193,978.292 342.752,989.577 343.311,964.238 343.871,941.683 344.43,951.426 344.989,914.463 345.548,925.161 346.108,939.011 346.667,914.629 347.226,940.787 347.785,920.339 348.345,947.272 348.904,957.625 349.463,985.312 350.022,958.991 350.582,953.294 351.141,928.71 351.7,940.128 352.259,919.651 352.819,899.112 353.378,894.74 353.937,923.994 354.496,902.512 355.056,882.321 355.615,925.846 356.174,938.706 356.733,931.093 357.293,926.691 357.852,885.973 358.411,865.232 358.97,861.523 359.53,861.194 360.089,878.662 360.648,892.902 361.207,885.555 361.767,897.212 362.326,878.052 362.885,873.539 363.444,903.961 364.004,885.245 364.563,915.922 365.122,894.427 365.681,926.203 366.241,919.882 366.8,944.999 367.359,924.014 367.918,920.388 368.478,882.436 369.037,897.221 369.596,894.466 370.155,873.243 370.715,854.359 371.274,854.783 371.833,837.229 372.392,868.864 372.952,897.556 373.511,910.989 374.07,905.585 374.629,900.426 375.189,896.629 375.748,875.104 376.307,885.268 376.866,880.268 377.426,910.433 377.985,905.88 378.544,900.57 379.103,864.86 379.663,861.738 380.222,922.795 380.781,930.58 381.34,936.654 381.9,913.009 382.459,923.411 383.018,911.847 383.577,905.309 384.137,932.611 384.696,923.95 385.255,917.247 385.814,909.572 386.374,902.361 386.933,877.423 387.492,893.344 388.051,906.2 388.611,914.695 389.17,891.669 389.729,870.932 390.288,883.227 390.848,878.467 391.407,904.387 391.966,896.535 392.525,922.267 393.085,901.269 393.644,896.194 394.203,874.442 394.762,887.915 395.322,866.66 395.881,867.312 396.44,829.282 396.999,808.753 397.559,805.692 398.118,805.818 398.677,802.987 399.236,754.307 399.796,753.376 400.355,769.469 400.914,754.201 401.473,770.849 402.033,804.617 402.592,870.345 403.151,850.363 403.71,877.675 404.27,874.721 404.829,867.976 405.388,861.01 405.947,841.491 406.507,838.697 407.066,841.307 407.625,849.553 408.184,844.657 408.744,840.802 409.303,887.726 409.862,883.693 410.421,894.014 410.981,871.514 411.54,878.262 412.099,858.824 412.658,837.678 413.218,801.139 413.777,767.988 414.336,732.418 414.895,733.833 415.455,737.094 416.014,707.715 416.573,692.506 417.132,681.208 417.692,684.41 418.251,670.1 418.81,641.475 419.369,646.235 419.929,670.683 420.488,677.349 421.047,714.217 421.606,700.632 422.166,689.792 422.725,673.342 423.284,663.255 423.843,651.63 424.403,641.97 424.962,647.723 425.521,623.507 426.08,644.352 426.64,666.3 427.199,670.801 427.758,692.488 428.318,731.736 428.877,766.986 429.436,751.988 429.995,770.152 430.555,821.684 431.114,819.712 431.673,817.686 432.232,815.12 432.792,828.423 433.351,792.004 433.91,788.875 434.469,788.475 435.029,802.173 435.588,831.002 436.147,829.335 436.706,809.829 437.266,788.452 437.825,770.205 438.384,801.377 438.943,836.817 439.503,848.478 440.062,846.463 440.621,874.444 441.18,852.599 441.74,845.05 442.299,842.844 442.858,854.101 443.417,862.647 443.977,859.652 444.536,868.337 445.095,845.982 445.654,842.813 446.214,837.44 446.773,833.087 447.332,812.215 447.891,822.994 448.451,855.002 449.01,868.32 449.569,830.293 450.128,830.283 450.688,842.962 451.247,872.082 451.806,898.282 452.365,860.009 452.925,852.846 453.484,833.865 454.043,830.888 454.602,811.934 455.162,813.177 455.721,806.688 456.28,822.629 456.839,803.477 457.399,770.364 457.958,768.775 458.517,799.609 459.076,811.544 459.636,807.404 460.195,819.022 460.754,800.881 461.313,766.006 461.873,747.041 462.432,748.764 462.991,716.148 463.55,684.221 464.11,688.686 464.669,689.111 465.228,670.815 465.787,687.7 466.347,640.11 466.906,644.258 467.465,618.808 468.024,612.431 468.584,617.573 469.143,620.647 469.702,614.411 470.261,601.669 470.821,640.754 471.38,644.577 471.939,667.38 472.498,683.948 473.058,654.589 473.617,722.611 474.176,720.177 474.735,691.024 475.295,693.059 475.854,694.562 476.413,695.489 476.972,678.368 477.532,679.632 478.091,713.214 478.65,763.228 479.209,761.818 479.769,712.076 480.328,746.177 480.887,715.06 481.446,748.15 482.006,747.986 482.565,796.437 483.124,796.599 483.683,777.671 484.243,760.656 484.802,727.874 485.361,715.039 485.92,715.109 486.48,715.232 487.039,715.91 487.598,748.087 488.157,754.559 488.717,754.449 489.276,816.836 489.835,780.964 490.394,812.975 490.954,840.069 491.513,835.468 492.072,800.176 492.631,784.152 493.191,764.18 493.75,735.411 494.309,750.186 494.868,717.215 495.428,736.134 495.987,720.07 496.546,738.163 497.105,735.101 497.665,735.546 498.224,749.834 498.783,750.199 499.342,732.934 499.902,731.107 500.461,729.959 501.02,731.815 501.579,713.852 502.139,697.674 502.698,714.444 503.257,718.951 503.816,719.612 504.376,736.272 504.935,736.305 505.494,770.659 506.053,772.212 506.613,770.983 507.172,769.963 507.731,751.338 508.29,700.735 508.85,716.956 509.409,717.775 509.968,687.777 510.527,675.169 511.087,708.153 511.646,723.839 512.205,754.652 512.764,789.174 513.324,784.321 513.883,766.947 514.442,747.004 515.001,730.938 515.561,744.715 516.12,745.47 516.679,729.993 517.238,746.987 517.798,761.281 518.357,745.948 518.916,741.616 519.475,821.338 520.035,817.84 520.594,812.2 521.153,824.363 521.712,764.204 522.272,775.336 522.831,759.65 523.39,774.522 523.949,739.033 524.509,759.021 525.068,757.71 525.627,753.856 526.186,753.729 526.746,750.144 527.305,764.534 527.864,765.73 528.423,746.676 528.983,742.911 529.542,772.12 530.101,771.089 530.66,737.617 531.22,752.726 531.779,769.257 532.338,799.867 532.897,796.581 533.457,776.853 534.016,776.26 534.575,740.386 535.134,739.038 535.694,772.102 536.253,784.791 536.812,764.899 537.371,761.582 537.931,791.711 538.49,789.462 539.049,769.294 539.608,706.539 540.168,692.158 540.727,723.678 541.286,742.195 541.845,738.371 542.405,736.396 542.964,721.284 543.523,733.434 544.082,715.453 544.642,731.883 545.201,713.964 545.76,712.506 546.319,727.111 546.879,709.597 547.438,698.786 547.997,717.011 548.556,669.704 549.116,670.901 549.675,690.956 550.234,644.098 550.793,633.459 551.353,656.191 551.912,646.976 552.471,716.823 553.031,718.062 553.59,685.265 554.149,703.001 554.708,669.204 555.268,656.312 555.827,660.805 556.386,665.786 556.945,669.659 557.505,704.248 558.064,720.243 558.623,701.305 559.182,683.569 559.742,701.002 560.301,704.958 560.86,707.318 561.419,689.536 561.979,708.036 562.538,694.289 563.097,714.881 563.656,699.489 564.216,683.927 564.775,700.862 565.334,715.308 565.893,715.356 566.453,714.031 567.012,732.659 567.571,730.401 568.13,759.828 568.69,741.847 569.249,761.578 569.808,789.181 570.367,782.777 570.927,762.573 571.486,742.533 572.045,758.278 572.604,743.201 573.164,759.574 573.723,708.459 574.282,691.444 574.841,691.782 575.401,709.127 575.96,708.012 576.519,771.845 577.078,767.895 577.638,797.745 578.197,793.28 578.756,788.044 579.315,782.99 579.875,777.039 580.434,786.968 580.993,784.303 581.552,795.273 582.112,758.819 582.671,772.159 583.23,772.466 583.789,784.991 584.349,748.389 584.908,764.727 585.467,729.789 586.026,729.053 586.586,696.94 587.145,693.234 587.704,694.186 588.263,695.174 588.823,678.803 589.382,697.159 589.941,693.631 590.5,742.371 591.06,741.298 591.619,738.025 592.178,737.603 592.737,769.053 593.297,733.324 593.856,700.599 594.415,720.731 594.974,718.461 595.534,686.538 596.093,689.78 596.652,694.554 597.211,711.842 597.771,741.19 598.33,725.303 598.889,744.491 599.448,746.068 600.008,727.968 600.567,759.56 601.126,756.19 601.685,782.975 602.245,824.539 602.804,817.195 603.363,794.24 603.922,790.844 604.482,785.916 605.041,779.094 605.6,773.509 606.159,705.186 606.719,656.16 607.278,657.644 607.837,657.141 608.396,657.351 608.956,643.376 609.515,663.25 610.074,666.23 610.633,697.516 611.193,681.517 611.752,667.017 612.311,670.796 612.87,635.859 613.43,607.863 613.989,613.487 614.548,635.019 615.107,635.149 615.667,654.632 616.226,674.98 616.785,674.676 617.344,676.33 617.904,676.082 618.463,676.883 619.022,694.795 619.581,680.497 620.141,699.567 620.7,715.738 621.259,698.729 621.818,698.71 622.378,684.07 622.937,651.703 623.496,642.034 624.055,612.929 624.615,667.566 625.174,668.95 625.733,635.432 626.292,636.883 626.852,638.849 627.411,641.414 627.97,676.972 628.529,693.814 629.089,680.02 629.648,698.025 630.207,699.575 630.766,654.662 631.326,653.873 631.885,674.521 632.444,678.118 633.003,678.456 633.563,681.503 634.122,650.193 634.681,666.843 635.24,684.731 635.8,687.948 636.359,678.722 636.918,663.337 637.477,683.527 638.037,686.173 638.596,705.174 639.155,703.772 639.714,705.849 640.274,704.435 640.833,705.456 641.392,721.173 641.951,719.265 642.511,735.098 643.07,782.718 643.629,730.607 644.188,729.719 644.748,712.282 645.307,743.09 645.866,740.944 646.425,691.028 646.985,709.09 647.544,726.318 648.103,742.61 648.662,755.341 649.222,753.553 649.781,748.728 650.34,745.945 650.899,760.12 651.459,721.813 652.018,766.044 652.577,747.52 653.136,761.879 653.696,746.523 654.255,758.667 654.814,755.802 655.373,751.871 655.933,746.679 656.492,712.552 657.051,726.212 657.61,743.441 658.17,805.5 658.729,801.928 659.288,783.683 659.847,745.613 660.407,789.002 660.966,767.591 661.525,747.684 662.084,744.738 662.644,743.34 663.203,741.413 663.762,755.575 664.321,719.021 664.881,720.269 665.44,723.492 665.999,705.821 666.558,691.203 667.118,708.308 667.677,722.626 668.236,720.799 668.795,719.767 669.355,699.316 669.914,715.086 670.473,710.026 671.032,708.492 671.592,690.766 672.151,691.482 672.71,677.786 673.269,678.639 673.829,651.819 674.388,655.536 674.947,640.648 675.506,663.021 676.066,648.812 676.625,651.096 677.184,672.008 677.743,671.232 678.303,688.8 678.862,718.12 679.421,714.7 679.981,713.536 680.54,715.299 681.099,713.076 681.658,728.862 682.218,694.497 682.777,675.213 683.336,723.992 683.895,722.906 684.455,736.596 685.014,702.781 685.573,733.151 686.132,729.019 686.692,759.111 687.251,755.341 687.81,734.034 688.369,702.504 688.929,683.648 689.488,652.587 690.047,621.705 690.606,626.3 691.166,664.039 691.725,646.031 692.284,668.058 692.843,717.655 693.403,713.6 693.962,728.538 694.521,743.245 695.08,755.177 695.64,767.959 696.199,795.958 696.758,760.725 697.317,759.512 697.877,724.628 698.436,707.36 698.995,688.348 699.554,703.469 700.114,701.963 700.673,747.872 701.232,728.586 701.791,729.861 702.351,744.609 702.91,759.042 703.469,756.457 704.028,768.142 704.588,781.767 705.147,792.937 705.706,787.255 706.265,784.181 706.825,779.516 707.384,743.889 707.943,775.822 708.502,769.308 709.062,783.794 709.621,764.811 710.18,761.988 710.739,759.789 711.299,757.38 711.858,753.731 712.417,750.617 712.976,763.208 713.536,774.999 714.095,774.646 714.654,754.352 715.213,751.493 715.773,764.389 716.332,758.019 716.891,721.186 717.45,721.662 718.01,703.936 718.569,669.753 719.128,672.151 719.687,690.469 720.247,705.896 720.806,719.8 721.365,705.003 721.924,687.391 722.484,655.413 723.043,642.201 723.602,628.998 724.161,630.413 724.721,600.31 725.28,601.457 725.839,637.214 726.398,672.296 726.958,656.71 727.517,645.004 728.076,663.818 728.635,696.208 729.195,679.344 729.754,665.652 730.313,718.664 730.872,722.15 731.432,685.974 731.991,687.193 732.55,657.218 733.109,672.495 733.669,640.939 734.228,659.358 734.787,694.505 735.346,692.186 735.906,706.805 736.465,723.387 737.024,735.838 737.583,733.729 738.143,728.756 738.702,663.469 739.261,631.913 739.82,637.291 740.38,639.245 740.939,659.331 741.498,662.208 742.057,679.212 742.617,710.2 743.176,692.867 743.735,694.387 744.294,728.171 744.854,758.012 745.413,741.295 745.972,723.945 746.531,675.031 747.091,708.53 747.65,691.208 748.209,724.857 748.768,676.427 749.328,709.055 749.887,709.239 750.446,727.828 751.005,707.694 751.565,690.411 752.124,688.902 752.683,702.752 753.242,702.68 753.802,685.547 754.361,718.601 754.92,767.575 755.479,744.525 756.039,708.778 756.598,723.562 757.157,723.165 757.716,690.865 758.276,687.848 758.835,672.136 759.394,671.931 759.953,673.257 760.513,641.783 761.072,662.167 761.631,664.158 762.19,650.52 762.75,668.13 763.309,669.734 763.868,688.068 764.427,623.467 764.987,613.44 765.546,648.121 766.105,648.107 766.664,649.278 767.224,616.033 767.783,607.234 768.342,628.778 768.901,636.011 769.461,622.187 770.02,609.019 770.579,611.635 771.138,613.741 771.698,637.244 772.257,674.454 772.816,689.648 773.375,687.722 773.935,688.414 774.494,739.559 775.053,718.702 775.612,699.095 776.172,695.583 776.731,680.343 777.29,663.968 777.849,683.223 778.409,669.279 778.968,684.613 779.527,649.975 780.086,666.402 780.646,651.467 781.205,668.154 781.764,703.018 782.323,670.07 782.883,686.49 783.442,685.65 784.001,704.156 784.56,686.478 785.12,685.112 785.679,671.316 786.238,668.626 786.797,619.09 787.357,635.083 787.916,638.372 788.475,655.961 789.034,676.514 789.594,659.977 790.153,710.675 790.712,709.264 791.271,675.571 791.831,690.601 792.39,722.704 792.949,721.03 793.508,735.436 794.068,763.393 794.627,761.371 795.186,776.451 795.745,771.199 796.305,735.684 796.864,733.534 797.423,717.63 797.982,699.992 798.542,685.223 799.101,689.331 799.66,766.966 800.219,779.435 800.779,729.233 801.338,714.123 801.897,714.911 802.456,763.982 803.016,728.242 803.575,712.658 804.134,712.924 804.693,712.226 805.253,708.444 805.812,759.313 806.371,740.656 806.931,753.873 807.49,734.405 808.049,716.118 808.608,759.977 809.168,737.26 809.727,737.133 810.286,766.984 810.845,759.582 811.405,773.489 811.964,772.7 812.523,771.917 813.082,770.75 813.642,752.361 814.201,796.731 814.76,790.195 815.319,814.043 815.879,807.715 816.438,798.781 816.997,791.622 817.556,801.633 818.116,811.509 818.675,801.944 819.234,766.345 819.793,724.636 820.353,723.38 820.912,723.425 821.471,737.503 822.03,767.265 822.59,762.221 823.149,761.115 823.708,758.661 824.267,737.133 824.827,752.423 825.386,747.958 825.945,728.054 826.504,714.114 827.064,712.622 827.623,709.068 828.182,740.279 828.741,718.123 829.301,733.993 829.86,730.787 830.419,729.617 830.978,726.454 831.538,691.579 832.097,660.337 832.656,663.362 833.215,649.462 833.775,634.497 834.334,624.466 834.893,661.438 835.452,648.164 836.012,666.611 836.571,701.174 837.13,700.144 837.689,696.799 838.249,678.586 838.808,713.082 839.367,728.166 839.926,726.149 840.486,755.076 841.045,752.005 841.604,748.764 842.163,825.53 842.723,832.558 843.282,758.621 843.841,787.262 844.4,780.113 844.96,740.938 845.519,706.646 846.078,706.511 846.637,705.499 847.197,687.047 847.756,701.94 848.315,686.677 848.874,716.185 849.434,700.846 849.993,699.952 850.552,732.692 851.111,744.128 851.671,723.322 852.23,719.784 852.789,716.709 853.348,744.505 853.908,788.714 854.467,749.195 855.026,761.02 855.585,756.278 856.145,752.523 856.704,731.137 857.263,698.861 857.822,681.216 858.382,652.894 858.941,571.57 859.5,559.389 860.059,553.73 860.619,559.558 861.178,602.398 861.737,576.738 862.296,586.127 862.856,608.13 863.415,626.664 863.974,564.941 864.533,585.147 865.093,573.583 865.652,596.734 866.211,604.91 866.77,626.777 867.33,613.859 867.889,600.335 868.448,601.972 869.007,605.059 869.567,626.356 870.126,631.811 870.685,651.52 871.244,684.647 871.804,700.454 872.363,682.939 872.922,714.016 873.481,729.433 874.041,727.03 874.6,741.224 875.159,737.977 875.718,751.139 876.278,748.85 876.837,730.894 877.396,742.75 877.955,739.227 878.515,720.294 879.074,685.743 879.633,671.459 880.192,705.179 880.752,688.374 881.311,654.884 881.87,689.022 882.429,692.098 882.989,677.552 883.548,678.54 884.107,695.38 884.666,698.895 885.226,699.349 885.785,701.091 886.344,685.471 886.903,716.522 887.463,732.793 888.022,712.822 888.581,729.092 889.14,710.849 889.7,694.588 890.259,710.05 890.818,723.494 891.377,802.539 891.937,810.487 892.496,806.825 893.055,802.652 893.614,761.707 894.174,758.395 894.733,704.629 895.292,698.996 895.851,664.939 896.411,664.373 896.97,666.964 897.529,668.136 898.088,682.444 898.648,675.968 899.207,642.947 899.766,661.837 900.325,663.372 900.885,667.39 901.444,653.651 902.003,703.843 902.562,702.514 903.122,671.514 903.681,642.02 904.24,644.425 904.799,681.12 905.359,662.811 905.918,648.757 906.477,617.096 907.036,605.486 907.596,607.506 908.155,609.187 908.714,614.634 909.273,615.807 909.833,599.816 910.392,590.342 910.951,639.506 911.51,625.895 912.07,614.85 912.629,602.213 913.188,571.411 913.747,576.473 914.307,583.07 914.866,570.817 915.425,626.094 915.984,660.47 916.544,676.472 917.103,675.361 917.662,673.417 918.221,674.815 918.781,658.662 919.34,658.265 919.899,625.893 920.458,565.988 921.018,587.147 921.577,629.028 922.136,631.513 922.695,651.218 923.255,670.664 923.814,672.354 924.373,707.641 924.932,722.748 925.492,704.371 926.051,688.208 926.61,690.807 927.169,657.967 927.729,643.28 928.288,644.378 928.847,647.518 929.406,616.363 929.966,619.834 930.525,607.08 931.084,579.105 931.644,551.073 932.203,541.88 932.762,550.331 933.321,561.953 933.881,554.57 934.44,543.163 934.999,536.03 935.558,548.871 936.118,574.997 936.677,580.929 937.236,603.268 937.795,644.977 938.355,649.562 938.914,634.432 939.473,653.464 940.032,656.649 940.592,642.098 941.151,675.233 941.71,661.977 942.269,664.296 942.829,665.708 943.388,664.429 943.947,681.344 944.506,646.811 945.066,682.916 945.625,668.921 946.184,625.064 946.743,630.804 947.303,636.177 947.862,639.659 948.421,626.487 948.98,659.906 949.54,648.485 950.099,617.931 950.658,626.048 951.217,663.505 951.777,646.871 952.336,649.104 952.895,649.07 953.454,636.021 954.014,654.898 954.573,671.24 955.132,706.589 955.691,707.344 956.251,703.318 956.81,702.671 957.369,697.134 957.928,681.173 958.488,651.047 959.047,617.112 959.606,624.149 960.165,640.955 960.725,644.699 961.284,647.083 961.843,651.447 962.402,655.101 962.962,672.813 963.521,674.787 964.08,710.323 964.639,744.326 965.199,711.021 965.758,726.41 966.317,755.497 966.876,784.727 967.436,778.634 967.995,770.898 968.554,783.31 969.113,763.098 969.673,761.011 970.232,726.852 970.791,708.783 971.35,706.237 971.91,704.74 972.469,704.567 973.028,720.646 973.587,697.722 974.147,729.33 974.706,729.313 975.265,678.02 975.824,690.815 976.384,671.178 976.943,669.9 977.502,687.288 978.061,658.788 978.621,660.452 979.18,647.188 979.739,650.8 980.298,669.29 980.858,639.139 981.417,654.807 981.976,656.432 982.535,642.58 983.095,664.258 983.654,682.728 984.213,703.063 984.772,701.532 985.332,683.099 985.891,684.596 986.45,684.638 987.009,668.35 987.569,705.695 988.128,723.586 988.687,705.275 989.246,737.94 989.806,686.869 990.365,719.115 990.924,700.71 991.483,700.6 992.043,669.342 992.602,667.109 993.161,698.352 993.72,684.424 994.28,686.728 994.839,698.417 995.398,694.622 995.957,682.839 996.517,649.727 997.076,665.791 997.635,696.73 998.194,695.999 998.754,695.88 999.313,690.747 999.872,688.38 1000.43,688.588 1000.99,688.016 1001.55,702.419 1002.11,684.377 1002.67,681.42 1003.23,697.128 1003.79,712.017 1004.35,709.721 1004.91,727.453 1005.46,742.427 1006.02,737.04 1006.58,751.654 1007.14,749.177 1007.7,746.192 1008.26,709.99 1008.82,758.205 1009.38,777.681 1009.94,790.02 1010.5,788.541 1011.06,785.269 1011.62,796.443 1012.18,776.403 1012.73,757.022 1013.29,738.678 1013.85,737.759 1014.41,719.382 1014.97,719.077 1015.53,718.768 1016.09,715.237 1016.65,700.551 1017.21,717.176 1017.77,711.663 1018.33,709.103 1018.89,723.417 1019.45,720.958 1020.01,719.329 1020.56,718.959 1021.12,684.103 1021.68,701.253 1022.24,696.436 1022.8,712.926 1023.36,710.329 1023.92,709.053 1024.48,675.793 1025.04,675.89 1025.6,694.139 1026.16,642.95 1026.72,628.76 1027.28,631.085 1027.83,648.44 1028.39,616.279 1028.95,651.969 1029.51,654.487 1030.07,639.871 1030.63,644.161 1031.19,644.321 1031.75,645.822 1032.31,614.446 1032.87,619.025 1033.43,622.483 1033.99,593.631 1034.55,583.633 1035.1,589.141 1035.66,608.636 1036.22,641.072 1036.78,660.603 1037.34,660.93 1037.9,677.904 1038.46,678.42 1039.02,660.236 1039.58,678.192 1040.14,682.632 1040.7,699.19 1041.26,700.783 1041.82,682.314 1042.38,700.524 1042.93,736.499 1043.49,716.743 1044.05,747.066 1044.61,774.512 1045.17,773.899 1045.73,805.272 1046.29,804.177 1046.85,799.94 1047.41,761.025 1047.97,755.657 1048.53,770.762 1049.09,750.298 1049.65,759.531 1050.2,770.13 1050.76,749.336 1051.32,743.661 1051.88,757.8 1052.44,740.117 1053,751.265 1053.56,748.628 1054.12,743.858 1054.68,705.975 1055.24,738.117 1055.8,719.416 1056.36,685.595 1056.92,669.321 1057.48,642.23 1058.03,630.211 1058.59,621.872 1059.15,643.432 1059.71,647.633 1060.27,589.391 1060.83,580.089 1061.39,584.236 1061.95,571.492 1062.51,593.434 1063.07,597.26 1063.63,649.315 1064.19,638.648 1064.75,637.686 1065.3,607.994 1065.86,624.533 1066.42,627.978 1066.98,647.097 1067.54,664.313 1068.1,695.022 1068.66,696.092 1069.22,695.375 1069.78,678.284 1070.34,680.308 1070.9,664.15 1071.46,631.754 1072.02,650.627 1072.57,683.454 1073.13,653.311 1073.69,671.487 1074.25,702.31 1074.81,699.044 1075.37,698.524 1075.93,713.046 1076.49,744.071 1077.05,755.887 1077.61,721.178 1078.17,734.659 1078.73,716.497 1079.29,713.78 1079.85,696.491 1080.4,700.818 1080.96,698.628 1081.52,698.043 1082.08,694.439 1082.64,692.475 1083.2,708.618 1083.76,678.914 1084.32,659.923 1084.88,674 1085.44,676.608 1086,694.378 1086.56,726.798 1087.12,739.809 1087.67,718.207 1088.23,713.901 1088.79,699.719 1089.35,680.757 1089.91,646.914 1090.47,648.064 1091.03,629.427 1091.59,645.558 1092.15,663.853 1092.71,666.921 1093.27,717.755 1093.83,705.083 1094.39,705.043 1094.94,704.256 1095.5,672.912 1096.06,669.143 1096.62,670.117 1097.18,687.526 1097.74,687.067 1098.3,685.454 1098.86,702.741 1099.42,697.318 1099.98,726.807 1100.54,711.36 1101.1,725.647 1101.66,736.166 1102.22,683.255 1102.77,667.339 1103.33,648.596 1103.89,617.148 1104.45,637.14 1105.01,653.396 1105.57,659.284 1106.13,675.231 1106.69,660.386 1107.25,644.997 1107.81,651.19 1108.37,669.269 1108.93,656.96 1109.49,661.618 1110.04,679.326 1110.6,660.214 1111.16,630.463 1111.72,603.629 1112.28,593.116 1112.84,614.143 1113.4,599.455 1113.96,602.368 1114.52,619.923 1115.08,638.306 1115.64,626.835 1116.2,661.723 1116.76,664.824 1117.31,633.713 1117.87,640.17 1118.43,657.168 1118.99,690.012 1119.55,687.827 1120.11,670.629 1120.67,636.125 1121.23,652.858 1121.79,670.252 1122.35,655.95 1122.91,676.084 1123.47,661.699 1124.03,663.916 1124.59,665.988 1125.14,678.262 1125.7,698.185 1126.26,727.865 1126.82,724.071 1127.38,704.91 1127.94,717.677 1128.5,716.569 1129.06,713.729 1129.62,695.772 1130.18,714.436 1130.74,711.671 1131.3,725.592 1131.86,728.411 1132.41,707.486 1132.97,688.449 1133.53,706.498 1134.09,707.389 1134.65,703.696 1135.21,731.408 1135.77,731.026 1136.33,733.465 1136.89,728.552 1137.45,791.092 1138.01,791.895 1138.57,818.193 1139.13,827.673 1139.68,852.866 1140.24,857.827 1140.8,816.577 1141.36,759.808 1141.92,738.451 1142.48,755.149 1143.04,733.767 1143.6,735.809 1144.16,752.122 1144.72,746.657 1145.28,725.729 1145.84,707.067 1146.4,689.845 1146.96,659.13 1147.51,690.642 1148.07,673.927 1148.63,658.462 1149.19,661.233 1149.75,646.454 1150.31,648.355 1150.87,650.546 1151.43,639.539 1151.99,657.197 1152.55,658.538 1153.11,625.294 1153.67,658.516 1154.23,661.06 1154.78,645.907 1155.34,666.334 1155.9,652.796 1156.46,638.212 1157.02,624.028 1157.58,612.782 1158.14,615.683 1158.7,601.911 1159.26,590.319 1159.82,578.648 1160.38,597.668 1160.94,620.439 1161.5,643.356 1162.05,632.731 1162.61,635.982 1163.17,623.293 1163.73,610.992 1164.29,614.245 1164.85,635.827 1165.41,653.043 1165.97,671.825 1166.53,654.496 1167.09,654.842 1167.65,659.164 1168.21,677.585 1168.77,679.783 1169.33,663.278 1169.88,634.463 1170.44,656.625 1171,658.045 1171.56,655.694 1172.12,658.829 1172.68,676.85 1173.24,680.937 1173.8,663.704 1174.36,649.589 1174.92,684.484 1175.48,700.754 1176.04,669.66 1176.6,667.777 1177.15,653.231 1177.71,638.179 1178.27,640.681 1178.83,657.814 1179.39,695.042 1179.95,708.611 1180.51,707.893 1181.07,741.347 1181.63,737.36 1182.19,719.662 1182.75,718.024 1183.31,716.569 1183.87,718.02 1184.43,730.752 1184.98,742.568 1185.54,753.865 1186.1,763.647 1186.66,774.543 1187.22,737.875 1187.78,720.663 1188.34,718.542 1188.9,750.127 1189.46,795.093 1190.02,773.424 1190.58,756.898 1191.14,780.794 1191.7,760.499 1192.25,755.824 1192.81,735.4 1193.37,732.69 1193.93,714.593 1194.49,729.439 1195.05,746.988 1195.61,756.799 1196.17,782.444 1196.73,792.473 1197.29,789.866 1197.85,785.363 1198.41,781.216 1198.97,776.69 1199.52,754.987 1200.08,753.628 1200.64,704.798 1201.2,668.868 1201.76,635.454 1202.32,654.96 1202.88,641.115 1203.44,674.246 1204,675.861 1204.56,689.855 1205.12,658.018 1205.68,639.736 1206.24,624.611 1206.8,643.062 1207.35,661.612 1207.91,678.178 1208.47,674.648 1209.03,658.525 1209.59,672.542 1210.15,642.002 1210.71,644.967 1211.27,647.877 1211.83,652.334 1212.39,655.537 1212.95,641.676 1213.51,645.236 1214.07,614 1214.62,618.146 1215.18,604.484 1215.74,622.459 1216.3,644.336 1216.86,682.606 1217.42,680.597 1217.98,714.257 1218.54,712.299 1219.1,758.849 1219.66,754.871 1220.22,734.61 1220.78,764.764 1221.34,791.829 1221.89,803.246 1222.45,781.664 1223.01,789.451 1223.57,782.624 1224.13,765.314 1224.69,745.016 1225.25,723.867 1225.81,754.231 1226.37,734.081 1226.93,710.038 1227.49,726.147 1228.05,724.636 1228.61,754.313 1229.17,737.321 1229.72,747.032 1230.28,742.803 1230.84,743.604 1231.4,705.03 1231.96,719.195 1232.52,716.251 1233.08,714.318 1233.64,762.075 1234.2,722.683 1234.76,739.619 1235.32,723.303 1235.88,703.599 1236.44,700.887 1236.99,667.626 1237.55,681.513 1238.11,682.52 1238.67,666.221 1239.23,665.92 1239.79,633.455 1240.35,634.028 1240.91,666.092 1241.47,652.121 1242.03,688.302 1242.59,684.423 1243.15,685.11 1243.71,683.266 1244.26,666.804 1244.82,651.756 1245.38,604.798 1245.94,656.155 1246.5,606.111 1247.06,627.66 1247.62,580.572 1248.18,602.615 1248.74,577.082 1249.3,564.621 1249.86,603.773 1250.42,578.302 1250.98,599.968 1251.54,605.154 1252.09,558.375 1252.65,543.511 1253.21,553.679 1253.77,577.198 1254.33,579.697 1254.89,615.474 1255.45,607.124 1256.01,609.397 1256.57,631.207 1257.13,700.244 1257.69,686.096 1258.25,735.238 1258.81,735.556 1259.36,749.708 1259.92,765.696 1260.48,782.137 1261.04,763.112 1261.6,774.138 1262.16,785.819 1262.72,778.164 1263.28,786.841 1263.84,780.037 1264.4,773.015 1264.96,786.701 1265.52,780.112 1266.08,792.504 1266.63,852.865 1267.19,813.366 1267.75,821.742 1268.31,800.708 1268.87,827.794 1269.43,769.586 1269.99,731.714 1270.55,729.945 1271.11,741.003 1271.67,770.85 1272.23,777.879 1272.79,804.35 1273.35,781.058 1273.91,760.331 1274.46,738.001 1275.02,750.565 1275.58,729.967 1276.14,724.538 1276.7,702.691 1277.26,702.536 1277.82,687.407 1278.38,657.494 1278.94,643.045 1279.5,646.737 1280.06,615.811 1280.62,621.283 1281.18,607.736 1281.73,591.929 1282.29,613.503 1282.85,617.3 1283.41,606.987 1283.97,611.009 1284.53,646.548 1285.09,647.894 1285.65,653.941 1286.21,702.994 1286.77,702.171 1287.33,703.264 1287.89,718.827 1288.45,718.385 1289,731.598 1289.56,746.107 1290.12,742.367 1290.68,757.344 1291.24,767.703 1291.8,761.838 1292.36,790.928 1292.92,749.96 1293.48,711.31 1294.04,712.307 1294.6,709.789 1295.16,723.369 1295.72,754.175 1296.28,752.026 1296.83,717.147 1297.39,732.195 1297.95,714.348 1298.51,711.917 1299.07,709.911 1299.63,677.159 1300.19,677.883 1300.75,708.447 1301.31,722.044 1301.87,707.077 1302.43,720.798 1302.99,718.463 1303.55,749.453 1304.1,731.471 1304.66,744.115 1305.22,742.247 1305.78,740.345 1306.34,736.714 1306.9,686.329 1307.46,671.197 1308.02,658.548 1308.58,678.608 1309.14,665.1 1309.7,714.788 1310.26,732.683 1310.82,710.464 1311.38,707.439 1311.93,688.492 1312.49,654.476 1313.05,673.229 1313.61,686.731 1314.17,686.161 1314.73,704.12 1315.29,692.122 1315.85,686.734 1316.41,700.832 1316.97,717.254 1317.53,718.611 1318.09,716.87 1318.65,731.548 1319.2,713.192 1319.76,711.389 1320.32,661.916 1320.88,678.693 1321.44,680.478 1322,676.282 1322.56,658.492 1323.12,660.748 1323.68,625.125 1324.24,644.285 1324.8,646.758 1325.36,616.132 1325.92,607.957 1326.47,662.861 1327.03,663.627 1327.59,691.949 1328.15,660.206 1328.71,643.07 1329.27,660.667 1329.83,645.625 1330.39,649.999 1330.95,668.367 1331.51,626.438 1332.07,662.366 1332.63,696.75 1333.19,702.425 1333.75,689.539 1334.3,674.546 1334.86,645.391 1335.42,650.547 1335.98,683.482 1336.54,702.104 1337.1,682.752 1337.66,698.737 1338.22,678.91 1338.78,661.078 1339.34,663.591 1339.9,681.449 1340.46,696.511 1341.02,708.573 1341.57,662.684 1342.13,620.305 1342.69,623.873 1343.25,659.846 1343.81,684.058 1344.37,734.419 1344.93,698.479 1345.49,697.128 1346.05,680.112 1346.61,697.448 1347.17,693.258 1347.73,690.25 1348.29,655.845 1348.84,642.315 1349.4,646.805 1349.96,664.789 1350.52,698.278 1351.08,650.705 1351.64,651.436 1352.2,687.09 1352.76,671.891 1353.32,674.745 1353.88,675.563 1354.44,644.199 1355,631.387 1355.56,632.955 1356.12,616.753 1356.67,604.568 1357.23,625.307 1357.79,648.451 1358.35,650.367 1358.91,654.185 1359.47,674.23 1360.03,659.929 1360.59,659.4 1361.15,633.279 1361.71,622.499 1362.27,611.159 1362.83,598.243 1363.39,633.828 1363.94,668.484 1364.5,637.771 1365.06,641.198 1365.62,625.617 1366.18,610.776 1366.74,617.051 1367.3,621.449 1367.86,627.776 1368.42,630.792 1368.98,618.156 1369.54,635.845 1370.1,637.411 1370.66,623.389 1371.21,642.58 1371.77,643.208 1372.33,641.789 1372.89,640.83 1373.45,640.224 1374.01,625.462 1374.57,610.206 1375.13,612.556 1375.69,632.64 1376.25,614.472 1376.81,635.349 1377.37,637.686 1377.93,624.191 1378.49,611.455 1379.04,597.614 1379.6,604.968 1380.16,579.36 1380.72,569.555 1381.28,559.923 1381.84,566.564 1382.4,594.315 1382.96,603.327 1383.52,591.291 1384.08,578.674 1384.64,601.422 1385.2,604.819 1385.76,610.208 1386.31,596.068 1386.87,649.649 1387.43,652.866 1387.99,636.471 1388.55,639.737 1389.11,660.528 1389.67,645.218 1390.23,665.45 1390.79,666.177 1391.35,699.245 1391.91,697.814 1392.47,677.881 1393.03,694.153 1393.58,691.398 1394.14,677.059 1394.7,648.041 1395.26,665.736 1395.82,683.871 1396.38,664.448 1396.94,668.218 1397.5,683.931 1398.06,686.183 1398.62,668.1 1399.18,654.027 1399.74,703.048 1400.3,684.873 1400.86,669.154 1401.41,672.014 1401.97,675.939 1402.53,677.413 1403.09,693.263 1403.65,695.435 1404.21,710.482 1404.77,725.517 1405.33,738.391 1405.89,720.099 1406.45,714.796 1407.01,728.638 1407.57,709.127 1408.13,742.324 1408.68,804.036 1409.24,765.346 1409.8,757.667 1410.36,723.886 1410.92,735.071 1411.48,735.245 1412.04,762.614 1412.6,744.394 1413.16,803.916 1413.72,795.978 1414.28,806.685 1414.84,832.346 1415.4,821.91 1415.95,876.553 1416.51,862.931 1417.07,870.828 1417.63,860.341 1418.19,868.263 1418.75,825.427 1419.31,817.488 1419.87,809.218 1420.43,799.836 1420.99,826.346 1421.55,831.236 1422.11,822.377 1422.67,813.691 1423.23,758.456 1423.78,738.3 1424.34,719.255 1424.9,699.022 1425.46,680.643 1426.02,681.736 1426.58,668.326 1427.14,637.84 1427.7,641.123 1428.26,614.201 1428.82,602.637 1429.38,621.309 1429.94,622.829 1430.5,592.091 1431.05,646.558 1431.61,648.835 1432.17,670.213 1432.73,702.723 1433.29,734.015 1433.85,746.901 1434.41,747.494 1434.97,744.023 1435.53,737.628 1436.09,716.198 1436.65,715.156 1437.21,763.138 1437.77,778.271 1438.33,790.829 1438.88,765.38 1439.44,728.104 1440,741.877 1440.56,722 1441.12,706.62 1441.68,706.665 1442.24,672.2 1442.8,688.057 1443.36,669.755 1443.92,655.594 1444.48,639.216 1445.04,640.232 1445.6,679.338 1446.15,680.189 1446.71,680.395 1447.27,667.258 1447.83,683.246 1448.39,669.25 1448.95,654.121 1449.51,642.304 1450.07,627.872 1450.63,646.347 1451.19,666.402 1451.75,667.139 1452.31,665.594 1452.87,666.892 1453.42,680.998 1453.98,710.406 1454.54,707.038 1455.1,720.214 1455.66,718.27 1456.22,716.715 1456.78,715.993 1457.34,698.068 1457.9,713.892 1458.46,712.839 1459.02,677.209 1459.58,679.721 1460.14,631.876 1460.7,616.987 1461.25,642.855 1461.81,662.474 1462.37,676.045 1462.93,723.714 1463.49,721.72 1464.05,751.709 1464.61,714.801 1465.17,718.578 1465.73,718.279 1466.29,701.657 1466.85,701.3 1467.41,717.56 1467.97,761.541 1468.52,771.415 1469.08,750.481 1469.64,732.856 1470.2,746.134 1470.76,759.687 1471.32,758.015 1471.88,767.762 1472.44,794.776 1473,771.454 1473.56,764.283 1474.12,742.886 1474.68,760.006 1475.24,740.748 1475.79,719.621 1476.35,746.087 1476.91,759.575 1477.47,786.903 1478.03,766.81 1478.59,764.472 1479.15,759.817 1479.71,789.364 1480.27,704.446 1480.83,691.437 1481.39,691.149 1481.95,676.233 1482.51,646.012 1483.07,647.464 1483.62,631.292 1484.18,632.288 1484.74,585.066 1485.3,559.161 1485.86,585.276 1486.42,605.699 1486.98,611.918 1487.54,601.832 1488.1,588.911 1488.66,574.945 1489.22,580.125 1489.78,602.026 1490.34,621.691 1490.89,595.421 1491.45,598.592 1492.01,602.656 1492.57,605.758 1493.13,591.09 1493.69,631 1494.25,602.723 1494.81,623.475 1495.37,611.096 1495.93,631.234 1496.49,619.845 1497.05,624.823 1497.61,659.701 1498.16,692.193 1498.72,677.614 1499.28,694.387 1499.84,726.489 1500.4,772.318 1500.96,768.569 1501.52,778.04 1502.08,739.776 1502.64,736.131 1503.2,730.481 1503.76,710.048 1504.32,725.624 1504.88,706.319 1505.44,671.559 1505.99,641.884 1506.55,610.176 1507.11,614.153 1507.67,647.826 1508.23,634.749 1508.79,670.043 1509.35,730.085 1509.91,744.074 1510.47,744.256 1511.03,775.299 1511.59,766.202 1512.15,748.239 1512.71,741.878 1513.26,753.321 1513.82,751.57 1514.38,762.755 1514.94,760.571 1515.5,757.411 1516.06,755.06 1516.62,718.996 1517.18,731.935 1517.74,711.835 1518.3,690.698 1518.86,705.731 1519.42,702.638 1519.98,669.45 1520.53,652.107 1521.09,636.727 1521.65,637.524 1522.21,642.263 1522.77,649.225 1523.33,652.769 1523.89,691.022 1524.45,694.332 1525.01,677.625 1525.57,645.686 1526.13,628.773 1526.69,647.205 1527.25,667.102 1527.81,668.863 1528.36,620.45 1528.92,621.272 1529.48,673.206 1530.04,702.572 1530.6,688.084 1531.16,688.744 1531.72,689.407 1532.28,672.109 1532.84,625.318 1533.4,623.654 1533.96,642.721 1534.52,645.542 1535.08,664.751 1535.63,670.055 1536.19,671.016 1536.75,690.828 1537.31,675.752 1537.87,693.399 1538.43,693.075 1538.99,678.2 1539.55,710.917 1540.11,707.29 1540.67,704.975 1541.23,702.991 1541.79,688.016 1542.35,653.186 1542.9,622.01 1543.46,596.67 1544.02,582.272 1544.58,583.666 1545.14,589.077 1545.7,611.499 1546.26,615.75 1546.82,618.347 1547.38,639.804 1547.94,655.766 1548.5,638.505 1549.06,671.97 1549.62,686.139 1550.18,671.137 1550.73,674.728 1551.29,691.391 1551.85,676.46 1552.41,680.637 1552.97,647.293 1553.53,665.361 1554.09,667.989 1554.65,666.072 1555.21,649.755 1555.77,651.707 1556.33,650.965 1556.89,652.72 1557.45,637.592 1558,625.757 1558.56,614.46 1559.12,650.645 1559.68,652.365 1560.24,624.236 1560.8,612.494 1561.36,615.966 1561.92,636.141 1562.48,625.981 1563.04,665.675 1563.6,683.535 1564.16,684.109 1564.72,673.148 1565.28,707.093 1565.83,706.942 1566.39,670.843 1566.95,685.851 1567.51,685.632 1568.07,666.565 1568.63,634.281 1569.19,654.027 1569.75,688.315 1570.31,702.2 1570.87,699.931 1571.43,698.241 1571.99,680.117 1572.55,693.03 1573.1,726.828 1573.66,704.921 1574.22,703.623 1574.78,700.223 1575.34,698.161 1575.9,679.394 1576.46,665.008 1577.02,649.039 1577.58,633.018 1578.14,601.552 1578.7,622.331 1579.26,659.569 1579.82,676.528 1580.37,661.388 1580.93,647.868 1581.49,682.323 1582.05,681.387 1582.61,683.139 1583.17,670.152 1583.73,636.115 1584.29,639.395 1584.85,639.523 1585.41,657.726 1585.97,660.047 1586.53,678.879 1587.09,678.763 1587.65,696.002 1588.2,707.089 1588.76,706.656 1589.32,670.912 1589.88,686.199 1590.44,701.152 1591,698.586 1591.56,712.488 1592.12,694.763 1592.68,679.142 1593.24,665.553 1593.8,649.884 1594.36,669.637 1594.92,706.721 1595.47,722.665 1596.03,686.308 1596.59,702.354 1597.15,715.37 1597.71,724.976 1598.27,708.086 1598.83,705.246 1599.39,704.994 1599.95,719.565 1600.51,721.157 1601.07,735.059 1601.63,731.19 1602.19,744.425 1602.74,756.817 1603.3,802.606 1603.86,796.787 1604.42,792.334 1604.98,770.172 1605.54,749.102 1606.1,760.513 1606.66,789.913 1607.22,787.388 1607.78,765.658 1608.34,744.269 1608.9,754.03 1609.46,768.007 1610.02,731.816 1610.57,698.839 1611.13,696.804 1611.69,696.064 1612.25,698.197 1612.81,649.754 1613.37,648.814 1613.93,651.793 1614.49,653.716 1615.05,637.014 1615.61,655.406 1616.17,673.752 1616.73,706.548 1617.29,707.854 1617.84,692.163 1618.4,693.297 1618.96,721.924 1619.52,706.242 1620.08,721.567 1620.64,735.247 1621.2,751.01 1621.76,744.172 1622.32,806.787 1622.88,817.349 1623.44,839.573 1624,818.591 1624.56,797.878 1625.11,807.267 1625.67,770.33 1626.23,733.902 1626.79,748.392 1627.35,743.149 1627.91,690.868 1628.47,640.199 1629.03,657.699 1629.59,675.371 1630.15,726.033 1630.71,721.909 1631.27,704.181 1631.83,733.928 1632.39,745.93 1632.94,742.801 1633.5,721.003 1634.06,702.143 1634.62,699.649 1635.18,683.116 1635.74,699.427 1636.3,695.551 1636.86,693.892 1637.42,726.776 1637.98,726.452 1638.54,726.627 1639.1,738.559 1639.66,721.547 1640.21,652.695 1640.77,686.784 1641.33,685.589 1641.89,718.658 1642.45,681.409 1643.01,682.445 1643.57,681.677 1644.13,680.981 1644.69,678.204 1645.25,692.409 1645.81,694.321 1646.37,714.994 1646.93,698.69 1647.48,699.901 1648.04,680.574 1648.6,699.832 1649.16,715.508 1649.72,729.544 1650.28,674.778 1650.84,675.892 1651.4,657.406 1651.96,658.578 1652.52,661.336 1653.08,726.196 1653.64,687.75 1654.2,687.666 1654.76,670.801 1655.31,674.982 1655.87,675.733 1656.43,694.395 1656.99,690.47 1657.55,685.926 1658.11,687.742 1658.67,722.558 1659.23,707.112 1659.79,704.026 1660.35,669.74 1660.91,705.39 1661.47,687.453 1662.03,733.839 1662.58,764.282 1663.14,715.058 1663.7,646.292 1664.26,650.604 1664.82,604.74 1665.38,626.717 1665.94,633.706 1666.5,635.718 1667.06,622.755 1667.62,627.956 1668.18,629.56 1668.74,631.539 1669.3,620.19 1669.85,641.372 1670.41,658.127 1670.97,643.794 1671.53,625.998 1672.09,629.088 1672.65,612.739 1673.21,614.095 1673.77,633.236 1674.33,649.833 1674.89,616.446 1675.45,588.456 1676.01,593.966 1676.57,613.407 1677.13,622.091 1677.68,614.417 1678.24,621.539 1678.8,622.685 1679.36,626.01 1679.92,660.06 1680.48,643.829 1681.04,627.587 1681.6,627.479 1682.16,612.63 1682.72,645.825 1683.28,628.038 1683.84,646.386 1684.4,650.361 1684.95,650.102 1685.51,620.996 1686.07,609.511 1686.63,612.603 1687.19,628.14 1687.75,648.685 1688.31,687.938 1688.87,689.6 1689.43,674.549 1689.99,694.733 1690.55,677.308 1691.11,642.104 1691.67,659.853 1692.23,710.096 1692.78,693.661 1693.34,694.533 1693.9,712.112 1694.46,690.578 1695.02,706.49 1695.58,708.501 1696.14,693.458 1696.7,741.676 1697.26,720.461 1697.82,720.974 1698.38,735.814 1698.94,750.507 1699.5,716.737 1700.05,717.049 1700.61,732.645 1701.17,712.836 1701.73,697.531 1702.29,677.436 1702.85,677.29 1703.41,627.248 1703.97,597.429 1704.53,620.102 1705.09,620.594 1705.65,624.644 1706.21,598.632 1706.77,570.508 1707.32,591.068 1707.88,628.668 1708.44,680.747 1709,645.953 1709.56,583.039 1710.12,588.975 1710.68,594.429 1711.24,569.164 1711.8,601.64 1712.36,574.684 1712.92,565.648 1713.48,586.659 1714.04,560.967 1714.6,583.234 1715.15,587.187 1715.71,590.664 1716.27,609.924 1716.83,596.731 1717.39,601.439 1717.95,610.1 1718.51,629.763 1719.07,648.655 1719.63,652.838 1720.19,623.559 1720.75,626.158 1721.31,648.098 1721.87,634.958 1722.42,640.931 1722.98,660.767 1723.54,664.238 1724.1,717.601 1724.66,732.45 1725.22,727.316 1725.78,723.841 1726.34,673.14 1726.9,670.598 1727.46,705.512 1728.02,720.176 1728.58,719.256 1729.14,714.97 1729.69,714.912 1730.25,730.984 1730.81,695.342 1731.37,676.31 1731.93,661.409 1732.49,663.725 1733.05,664.469 1733.61,683.214 1734.17,744.714 1734.73,740.909 1735.29,752.375 1735.85,746.457 1736.41,724.96 1736.97,736.547 1737.52,719.52 1738.08,688.16 1738.64,670.287 1739.2,636.193 1739.76,670.026 1740.32,639.851 1740.88,640.967 1741.44,662.703 1742,663.703 1742.56,679.794 1743.12,695.964 1743.68,664.791 1744.24,619.195 1744.79,639.745 1745.35,658.861 1745.91,659.596 1746.47,646.283 1747.03,648.775 1747.59,652.313 1748.15,640.499 1748.71,629.326 1749.27,631.882 1749.83,666.463 1750.39,682.682 1750.95,687.008 1751.51,671.995 1752.06,695.836 1752.62,711.133 1753.18,696.608 1753.74,698.613 1754.3,665.318 1754.86,652.126 1755.42,670.744 1755.98,670.404 1756.54,688.06 1757.1,672.685 1757.66,672.338 1758.22,657.666 1758.78,707.252 1759.34,690.328 1759.89,703.416 1760.45,700.181 1761.01,682.799 1761.57,666.276 1762.13,648.275 1762.69,650.157 1763.25,685.586 1763.81,700.053 1764.37,705.266 1764.93,705.162 1765.49,671.517 1766.05,673.379 1766.61,671.683 1767.16,721.388 1767.72,735.154 1768.28,734.355 1768.84,766.436 1769.4,748.934 1769.96,794.27 1770.52,790.438 1771.08,783.667 1771.64,764.161 1772.2,745.784 1772.76,773.05 1773.32,769.824 1773.88,764.909 1774.43,742.691 1774.99,740.554 1775.55,717.776 1776.11,699.827 1776.67,681.053 1777.23,683.741 1777.79,668.005 1778.35,684.554 1778.91,716.294 1779.47,712.75 1780.03,680.253 1780.59,679.187 1781.15,665.742 1781.71,684.121 1782.26,701.431 1782.82,737.307 1783.38,732.76 1783.94,781.86 1784.5,760.081 1785.06,741.421 1785.62,735.518 1786.18,732.341 1786.74,711.065 1787.3,741.984 1787.86,741.582 1788.42,737.473 1788.98,732.865 1789.53,764.285 1790.09,775.63 1790.65,799.565 1791.21,760.095 1791.77,775.372 1792.33,788.31 1792.89,784.537 1793.45,794.897 1794.01,787.913 1794.57,762.13 1795.13,757.126 1795.69,734.808 1796.25,731.99 1796.8,699.208 1797.36,680.455 1797.92,680.412 1798.48,663.049 1799.04,649.581 1799.6,633.8 1800.16,670.848 1800.72,686.914 1801.28,651.131 1801.84,616.82 1802.4,552.733 1802.96,506.105 1803.52,514.812 1804.08,526.308 1804.63,532.811 1805.19,538.426 1805.75,562.076 1806.31,582.297 1806.87,603.44 1807.43,624.207 1807.99,628.201 1808.55,645.484 1809.11,645.867 1809.67,616.897 1810.23,639.838 1810.79,638.834 1811.35,608.019 1811.9,608.884 1812.46,615.316 1813.02,620.973 1813.58,639.066 1814.14,642.909 1814.7,627.814 1815.26,613.016 1815.82,632.912 1816.38,669.076 1816.94,670.533 1817.5,703.803 1818.06,720.197 1818.62,705.314 1819.18,671.192 1819.73,674.459 1820.29,674.972 1820.85,675.062 1821.41,692.98 1821.97,661.783 1822.53,663.959 1823.09,650.646 1823.65,654.603 1824.21,639.276 1824.77,623.055 1825.33,647.037 1825.89,681.029 1826.45,680.858 1827,679.857 1827.56,709.831 1828.12,708.41 1828.68,705.226 1829.24,720.039 1829.8,703.217 1830.36,750.686 1830.92,731.068 1831.48,726.727 1832.04,707.742 1832.6,706.064 1833.16,688.78 1833.72,686.948 1834.27,689.716 1834.83,689.247 1835.39,702.844 1835.95,670.032 1836.51,701.561 1837.07,704.382 1837.63,704.146 1838.19,703.386 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 690.538 L720.806 690.538 L721.365 690.538 L721.924 690.538 L722.484 690.538 L723.043 690.538 L723.602 690.538 L724.161 690.538 L724.721 690.538 L725.28 690.538 L725.839 690.538 L726.398 690.538 L726.958 690.538 L727.517 690.538 L728.076 690.538 L728.635 690.538 L729.195 690.538 L729.754 690.538 L730.313 690.538 L730.872 690.538 L731.432 690.538 L731.991 690.538 L732.55 690.538 L733.109 690.538 L733.669 690.538 L734.228 690.538 L734.787 690.538 L735.346 690.538 L735.906 690.538 L736.465 690.538 L737.024 690.538 L737.583 690.538 L738.143 690.538 L738.702 690.538 L739.261 690.538 L739.82 690.538 L740.38 690.538 L740.939 690.538 L741.498 690.538 L742.057 690.538 L742.617 690.538 L743.176 690.538 L743.735 690.538 L744.294 690.538 L744.854 690.538 L745.413 690.538 L745.972 690.538 L746.531 690.538 L747.091 690.538 L747.65 690.538 L748.209 690.538 L748.768 690.538 L749.328 690.538 L749.887 690.538 L750.446 690.538 L751.005 690.538 L751.565 690.538 L752.124 690.538 L752.683 690.538 L753.242 690.538 L753.802 690.538 L754.361 690.538 L754.92 690.538 L755.479 690.538 L756.039 690.538 L756.598 690.538 L757.157 690.538 L757.716 690.538 L758.276 690.538 L758.835 690.538 L759.394 690.538 L759.953 690.538 L760.513 690.538 L761.072 690.538 L761.631 690.538 L762.19 690.538 L762.75 690.538 L763.309 690.538 L763.868 690.538 L764.427 690.538 L764.987 690.538 L765.546 690.538 L766.105 690.538 L766.664 690.538 L767.224 690.538 L767.783 690.538 L768.342 690.538 L768.901 690.538 L769.461 690.538 L770.02 690.538 L770.579 690.538 L771.138 690.538 L771.698 690.538 L772.257 690.538 L772.816 690.538 L773.375 690.538 L773.935 690.538 L774.494 690.538 L775.053 690.538 L775.612 690.538 L776.172 690.538 L776.731 690.538 L777.29 690.538 L777.849 690.538 L778.409 690.538 L778.968 690.538 L779.527 690.538 L780.086 690.538 L780.646 690.538 L781.205 690.538 L781.764 690.538 L782.323 690.538 L782.883 690.538 L783.442 690.538 L784.001 690.538 L784.56 690.538 L785.12 690.538 L785.679 690.538 L786.238 690.538 L786.797 690.538 L787.357 690.538 L787.916 690.538 L788.475 690.538 L789.034 690.538 L789.594 690.538 L790.153 690.538 L790.712 690.538 L791.271 690.538 L791.831 690.538 L792.39 690.538 L792.949 690.538 L793.508 690.538 L794.068 690.538 L794.627 690.538 L795.186 690.538 L795.745 690.538 L796.305 690.538 L796.864 690.538 L797.423 690.538 L797.982 690.538 L798.542 690.538 L799.101 690.538 L799.66 690.538 L800.219 690.538 L800.779 690.538 L801.338 690.538 L801.897 690.538 L802.456 690.538 L803.016 690.538 L803.575 690.538 L804.134 690.538 L804.693 690.538 L805.253 690.538 L805.812 690.538 L806.371 690.538 L806.931 690.538 L807.49 690.538 L808.049 690.538 L808.608 690.538 L809.168 690.538 L809.727 690.538 L810.286 690.538 L810.845 690.538 L811.405 690.538 L811.964 690.538 L812.523 690.538 L813.082 690.538 L813.642 690.538 L814.201 690.538 L814.76 690.538 L815.319 690.538 L815.879 690.538 L816.438 690.538 L816.997 690.538 L817.556 690.538 L818.116 690.538 L818.675 690.538 L819.234 690.538 L819.793 690.538 L820.353 690.538 L820.912 690.538 L821.471 690.538 L822.03 690.538 L822.59 690.538 L823.149 690.538 L823.708 690.538 L824.267 690.538 L824.827 690.538 L825.386 690.538 L825.945 690.538 L826.504 690.538 L827.064 690.538 L827.623 690.538 L828.182 690.538 L828.741 690.538 L829.301 690.538 L829.86 690.538 L830.419 690.538 L830.978 690.538 L831.538 690.538 L832.097 690.538 L832.656 690.538 L833.215 690.538 L833.775 690.538 L834.334 690.538 L834.893 690.538 L835.452 690.538 L836.012 690.538 L836.571 690.538 L837.13 690.538 L837.689 690.538 L838.249 690.538 L838.808 690.538 L839.367 690.538 L839.926 690.538 L840.486 690.538 L841.045 690.538 L841.604 690.538 L842.163 690.538 L842.723 690.538 L843.282 690.538 L843.841 690.538 L844.4 690.538 L844.96 690.538 L845.519 690.538 L846.078 690.538 L846.637 690.538 L847.197 690.538 L847.756 690.538 L848.315 690.538 L848.874 690.538 L849.434 690.538 L849.993 690.538 L850.552 690.538 L851.111 690.538 L851.671 690.538 L852.23 690.538 L852.789 690.538 L853.348 690.538 L853.908 690.538 L854.467 690.538 L855.026 690.538 L855.585 690.538 L856.145 690.538 L856.704 690.538 L857.263 690.538 L857.822 690.538 L858.382 690.538 L858.941 690.538 L859.5 690.538 L860.059 690.538 L860.619 690.538 L861.178 690.538 L861.737 690.538 L862.296 690.538 L862.856 690.538 L863.415 690.538 L863.974 690.538 L864.533 690.538 L865.093 690.538 L865.652 690.538 L866.211 690.538 L866.77 690.538 L867.33 690.538 L867.889 690.538 L868.448 690.538 L869.007 690.538 L869.567 690.538 L870.126 690.538 L870.685 690.538 L871.244 690.538 L871.804 690.538 L872.363 690.538 L872.922 690.538 L873.481 690.538 L874.041 690.538 L874.6 690.538 L875.159 690.538 L875.718 690.538 L876.278 690.538 L876.837 690.538 L877.396 690.538 L877.955 690.538 L878.515 690.538 L879.074 690.538 L879.633 690.538 L880.192 690.538 L880.752 690.538 L881.311 690.538 L881.87 690.538 L882.429 690.538 L882.989 690.538 L883.548 690.538 L884.107 690.538 L884.666 690.538 L885.226 690.538 L885.785 690.538 L886.344 690.538 L886.903 690.538 L887.463 690.538 L888.022 690.538 L888.581 690.538 L889.14 690.538 L889.7 690.538 L890.259 690.538 L890.818 690.538 L891.377 690.538 L891.937 690.538 L892.496 690.538 L893.055 690.538 L893.614 690.538 L894.174 690.538 L894.733 690.538 L895.292 690.538 L895.851 690.538 L896.411 690.538 L896.97 690.538 L897.529 690.538 L898.088 690.538 L898.648 690.538 L899.207 690.538 L899.766 690.538 L900.325 690.538 L900.885 690.538 L901.444 690.538 L902.003 690.538 L902.562 690.538 L903.122 690.538 L903.681 690.538 L904.24 690.538 L904.799 690.538 L905.359 690.538 L905.918 690.538 L906.477 690.538 L907.036 690.538 L907.596 690.538 L908.155 690.538 L908.714 690.538 L909.273 690.538 L909.833 690.538 L910.392 690.538 L910.951 690.538 L911.51 690.538 L912.07 690.538 L912.629 690.538 L913.188 690.538 L913.747 690.538 L914.307 690.538 L914.866 690.538 L915.425 690.538 L915.984 690.538 L916.544 690.538 L917.103 690.538 L917.662 690.538 L918.221 690.538 L918.781 690.538 L919.34 690.538 L919.899 690.538 L920.458 690.538 L921.018 690.538 L921.577 690.538 L922.136 690.538 L922.695 690.538 L923.255 690.538 L923.814 690.538 L924.373 690.538 L924.932 690.538 L925.492 690.538 L926.051 690.538 L926.61 690.538 L927.169 690.538 L927.729 690.538 L928.288 690.538 L928.847 690.538 L929.406 690.538 L929.966 690.538 L930.525 690.538 L931.084 690.538 L931.644 690.538 L932.203 690.538 L932.762 690.538 L933.321 690.538 L933.881 690.538 L934.44 690.538 L934.999 690.538 L935.558 690.538 L936.118 690.538 L936.677 690.538 L937.236 690.538 L937.795 690.538 L938.355 690.538 L938.914 690.538 L939.473 690.538 L940.032 690.538 L940.592 690.538 L941.151 690.538 L941.71 690.538 L942.269 690.538 L942.829 690.538 L943.388 690.538 L943.947 690.538 L944.506 690.538 L945.066 690.538 L945.625 690.538 L946.184 690.538 L946.743 690.538 L947.303 690.538 L947.862 690.538 L948.421 690.538 L948.98 690.538 L949.54 690.538 L950.099 690.538 L950.658 690.538 L951.217 690.538 L951.777 690.538 L952.336 690.538 L952.895 690.538 L953.454 690.538 L954.014 690.538 L954.573 690.538 L955.132 690.538 L955.691 690.538 L956.251 690.538 L956.81 690.538 L957.369 690.538 L957.928 690.538 L958.488 690.538 L959.047 690.538 L959.606 690.538 L960.165 690.538 L960.725 690.538 L961.284 690.538 L961.843 690.538 L962.402 690.538 L962.962 690.538 L963.521 690.538 L964.08 690.538 L964.639 690.538 L965.199 690.538 L965.758 690.538 L966.317 690.538 L966.876 690.538 L967.436 690.538 L967.995 690.538 L968.554 690.538 L969.113 690.538 L969.673 690.538 L970.232 690.538 L970.791 690.538 L971.35 690.538 L971.91 690.538 L972.469 690.538 L973.028 690.538 L973.587 690.538 L974.147 690.538 L974.706 690.538 L975.265 690.538 L975.824 690.538 L976.384 690.538 L976.943 690.538 L977.502 690.538 L978.061 690.538 L978.621 690.538 L979.18 690.538 L979.739 690.538 L980.298 690.538 L980.858 690.538 L981.417 690.538 L981.976 690.538 L982.535 690.538 L983.095 690.538 L983.654 690.538 L984.213 690.538 L984.772 690.538 L985.332 690.538 L985.891 690.538 L986.45 690.538 L987.009 690.538 L987.569 690.538 L988.128 690.538 L988.687 690.538 L989.246 690.538 L989.806 690.538 L990.365 690.538 L990.924 690.538 L991.483 690.538 L992.043 690.538 L992.602 690.538 L993.161 690.538 L993.72 690.538 L994.28 690.538 L994.839 690.538 L995.398 690.538 L995.957 690.538 L996.517 690.538 L997.076 690.538 L997.635 690.538 L998.194 690.538 L998.754 690.538 L999.313 690.538 L999.872 690.538 L1000.43 690.538 L1000.99 690.538 L1001.55 690.538 L1002.11 690.538 L1002.67 690.538 L1003.23 690.538 L1003.79 690.538 L1004.35 690.538 L1004.91 690.538 L1005.46 690.538 L1006.02 690.538 L1006.58 690.538 L1007.14 690.538 L1007.7 690.538 L1008.26 690.538 L1008.82 690.538 L1009.38 690.538 L1009.94 690.538 L1010.5 690.538 L1011.06 690.538 L1011.62 690.538 L1012.18 690.538 L1012.73 690.538 L1013.29 690.538 L1013.85 690.538 L1014.41 690.538 L1014.97 690.538 L1015.53 690.538 L1016.09 690.538 L1016.65 690.538 L1017.21 690.538 L1017.77 690.538 L1018.33 690.538 L1018.89 690.538 L1019.45 690.538 L1020.01 690.538 L1020.56 690.538 L1021.12 690.538 L1021.68 690.538 L1022.24 690.538 L1022.8 690.538 L1023.36 690.538 L1023.92 690.538 L1024.48 690.538 L1025.04 690.538 L1025.6 690.538 L1026.16 690.538 L1026.72 690.538 L1027.28 690.538 L1027.83 690.538 L1028.39 690.538 L1028.95 690.538 L1029.51 690.538 L1030.07 690.538 L1030.63 690.538 L1031.19 690.538 L1031.75 690.538 L1032.31 690.538 L1032.87 690.538 L1033.43 690.538 L1033.99 690.538 L1034.55 690.538 L1035.1 690.538 L1035.66 690.538 L1036.22 690.538 L1036.78 690.538 L1037.34 690.538 L1037.9 690.538 L1038.46 690.538 L1039.02 690.538 L1039.58 690.538 L1040.14 690.538 L1040.7 690.538 L1041.26 690.538 L1041.82 690.538 L1042.38 690.538 L1042.93 690.538 L1043.49 690.538 L1044.05 690.538 L1044.61 690.538 L1045.17 690.538 L1045.73 690.538 L1046.29 690.538 L1046.85 690.538 L1047.41 690.538 L1047.97 690.538 L1048.53 690.538 L1049.09 690.538 L1049.65 690.538 L1050.2 690.538 L1050.76 690.538 L1051.32 690.538 L1051.88 690.538 L1052.44 690.538 L1053 690.538 L1053.56 690.538 L1054.12 690.538 L1054.68 690.538 L1055.24 690.538 L1055.8 690.538 L1056.36 690.538 L1056.92 690.538 L1057.48 690.538 L1058.03 690.538 L1058.59 690.538 L1059.15 690.538 L1059.71 690.538 L1060.27 690.538 L1060.83 690.538 L1061.39 690.538 L1061.95 690.538 L1062.51 690.538 L1063.07 690.538 L1063.63 690.538 L1064.19 690.538 L1064.75 690.538 L1065.3 690.538 L1065.86 690.538 L1066.42 690.538 L1066.98 690.538 L1067.54 690.538 L1068.1 690.538 L1068.66 690.538 L1069.22 690.538 L1069.78 690.538 L1070.34 690.538 L1070.9 690.538 L1071.46 690.538 L1072.02 690.538 L1072.57 690.538 L1073.13 690.538 L1073.69 690.538 L1074.25 690.538 L1074.81 690.538 L1075.37 690.538 L1075.93 690.538 L1076.49 690.538 L1077.05 690.538 L1077.61 690.538 L1078.17 690.538 L1078.73 690.538 L1079.29 690.538 L1079.85 690.538 L1080.4 690.538 L1080.96 690.538 L1081.52 690.538 L1082.08 690.538 L1082.64 690.538 L1083.2 690.538 L1083.76 690.538 L1084.32 690.538 L1084.88 690.538 L1085.44 690.538 L1086 690.538 L1086.56 690.538 L1087.12 690.538 L1087.67 690.538 L1088.23 690.538 L1088.79 690.538 L1089.35 690.538 L1089.91 690.538 L1090.47 690.538 L1091.03 690.538 L1091.59 690.538 L1092.15 690.538 L1092.71 690.538 L1093.27 690.538 L1093.83 690.538 L1094.39 690.538 L1094.94 690.538 L1095.5 690.538 L1096.06 690.538 L1096.62 690.538 L1097.18 690.538 L1097.74 690.538 L1098.3 690.538 L1098.86 690.538 L1099.42 690.538 L1099.98 690.538 L1100.54 690.538 L1101.1 690.538 L1101.66 690.538 L1102.22 690.538 L1102.77 690.538 L1103.33 690.538 L1103.89 690.538 L1104.45 690.538 L1105.01 690.538 L1105.57 690.538 L1106.13 690.538 L1106.69 690.538 L1107.25 690.538 L1107.81 690.538 L1108.37 690.538 L1108.93 690.538 L1109.49 690.538 L1110.04 690.538 L1110.6 690.538 L1111.16 690.538 L1111.72 690.538 L1112.28 690.538 L1112.84 690.538 L1113.4 690.538 L1113.96 690.538 L1114.52 690.538 L1115.08 690.538 L1115.64 690.538 L1116.2 690.538 L1116.76 690.538 L1117.31 690.538 L1117.87 690.538 L1118.43 690.538 L1118.99 690.538 L1119.55 690.538 L1120.11 690.538 L1120.67 690.538 L1121.23 690.538 L1121.79 690.538 L1122.35 690.538 L1122.91 690.538 L1123.47 690.538 L1124.03 690.538 L1124.59 690.538 L1125.14 690.538 L1125.7 690.538 L1126.26 690.538 L1126.82 690.538 L1127.38 690.538 L1127.94 690.538 L1128.5 690.538 L1129.06 690.538 L1129.62 690.538 L1130.18 690.538 L1130.74 690.538 L1131.3 690.538 L1131.86 690.538 L1132.41 690.538 L1132.97 690.538 L1133.53 690.538 L1134.09 690.538 L1134.65 690.538 L1135.21 690.538 L1135.77 690.538 L1136.33 690.538 L1136.89 690.538 L1137.45 690.538 L1138.01 690.538 L1138.57 690.538 L1139.13 690.538 L1139.68 690.538 L1140.24 690.538 L1140.8 690.538 L1141.36 690.538 L1141.92 690.538 L1142.48 690.538 L1143.04 690.538 L1143.6 690.538 L1144.16 690.538 L1144.72 690.538 L1145.28 690.538 L1145.84 690.538 L1146.4 690.538 L1146.96 690.538 L1147.51 690.538 L1148.07 690.538 L1148.63 690.538 L1149.19 690.538 L1149.75 690.538 L1150.31 690.538 L1150.87 690.538 L1151.43 690.538 L1151.99 690.538 L1152.55 690.538 L1153.11 690.538 L1153.67 690.538 L1154.23 690.538 L1154.78 690.538 L1155.34 690.538 L1155.9 690.538 L1156.46 690.538 L1157.02 690.538 L1157.58 690.538 L1158.14 690.538 L1158.7 690.538 L1159.26 690.538 L1159.82 690.538 L1160.38 690.538 L1160.94 690.538 L1161.5 690.538 L1162.05 690.538 L1162.61 690.538 L1163.17 690.538 L1163.73 690.538 L1164.29 690.538 L1164.85 690.538 L1165.41 690.538 L1165.97 690.538 L1166.53 690.538 L1167.09 690.538 L1167.65 690.538 L1168.21 690.538 L1168.77 690.538 L1169.33 690.538 L1169.88 690.538 L1170.44 690.538 L1171 690.538 L1171.56 690.538 L1172.12 690.538 L1172.68 690.538 L1173.24 690.538 L1173.8 690.538 L1174.36 690.538 L1174.92 690.538 L1175.48 690.538 L1176.04 690.538 L1176.6 690.538 L1177.15 690.538 L1177.71 690.538 L1178.27 690.538 L1178.83 690.538 L1179.39 690.538 L1179.95 690.538 L1180.51 690.538 L1181.07 690.538 L1181.63 690.538 L1182.19 690.538 L1182.75 690.538 L1183.31 690.538 L1183.87 690.538 L1184.43 690.538 L1184.98 690.538 L1185.54 690.538 L1186.1 690.538 L1186.66 690.538 L1187.22 690.538 L1187.78 690.538 L1188.34 690.538 L1188.9 690.538 L1189.46 690.538 L1190.02 690.538 L1190.58 690.538 L1191.14 690.538 L1191.7 690.538 L1192.25 690.538 L1192.81 690.538 L1193.37 690.538 L1193.93 690.538 L1194.49 690.538 L1195.05 690.538 L1195.61 690.538 L1196.17 690.538 L1196.73 690.538 L1197.29 690.538 L1197.85 690.538 L1198.41 690.538 L1198.97 690.538 L1199.52 690.538 L1200.08 690.538 L1200.64 690.538 L1201.2 690.538 L1201.76 690.538 L1202.32 690.538 L1202.88 690.538 L1203.44 690.538 L1204 690.538 L1204.56 690.538 L1205.12 690.538 L1205.68 690.538 L1206.24 690.538 L1206.8 690.538 L1207.35 690.538 L1207.91 690.538 L1208.47 690.538 L1209.03 690.538 L1209.59 690.538 L1210.15 690.538 L1210.71 690.538 L1211.27 690.538 L1211.83 690.538 L1212.39 690.538 L1212.95 690.538 L1213.51 690.538 L1214.07 690.538 L1214.62 690.538 L1215.18 690.538 L1215.74 690.538 L1216.3 690.538 L1216.86 690.538 L1217.42 690.538 L1217.98 690.538 L1218.54 690.538 L1219.1 690.538 L1219.66 690.538 L1220.22 690.538 L1220.78 690.538 L1221.34 690.538 L1221.89 690.538 L1222.45 690.538 L1223.01 690.538 L1223.57 690.538 L1224.13 690.538 L1224.69 690.538 L1225.25 690.538 L1225.81 690.538 L1226.37 690.538 L1226.93 690.538 L1227.49 690.538 L1228.05 690.538 L1228.61 690.538 L1229.17 690.538 L1229.72 690.538 L1230.28 690.538 L1230.84 690.538 L1231.4 690.538 L1231.96 690.538 L1232.52 690.538 L1233.08 690.538 L1233.64 690.538 L1234.2 690.538 L1234.76 690.538 L1235.32 690.538 L1235.88 690.538 L1236.44 690.538 L1236.99 690.538 L1237.55 690.538 L1238.11 690.538 L1238.67 690.538 L1239.23 690.538 L1239.79 690.538 L1240.35 690.538 L1240.91 690.538 L1241.47 690.538 L1242.03 690.538 L1242.59 690.538 L1243.15 690.538 L1243.71 690.538 L1244.26 690.538 L1244.82 690.538 L1245.38 690.538 L1245.94 690.538 L1246.5 690.538 L1247.06 690.538 L1247.62 690.538 L1248.18 690.538 L1248.74 690.538 L1249.3 690.538 L1249.86 690.538 L1250.42 690.538 L1250.98 690.538 L1251.54 690.538 L1252.09 690.538 L1252.65 690.538 L1253.21 690.538 L1253.77 690.538 L1254.33 690.538 L1254.89 690.538 L1255.45 690.538 L1256.01 690.538 L1256.57 690.538 L1257.13 690.538 L1257.69 690.538 L1258.25 690.538 L1258.81 690.538 L1259.36 690.538 L1259.92 690.538 L1260.48 690.538 L1261.04 690.538 L1261.6 690.538 L1262.16 690.538 L1262.72 690.538 L1263.28 690.538 L1263.84 690.538 L1264.4 690.538 L1264.96 690.538 L1265.52 690.538 L1266.08 690.538 L1266.63 690.538 L1267.19 690.538 L1267.75 690.538 L1268.31 690.538 L1268.87 690.538 L1269.43 690.538 L1269.99 690.538 L1270.55 690.538 L1271.11 690.538 L1271.67 690.538 L1272.23 690.538 L1272.79 690.538 L1273.35 690.538 L1273.91 690.538 L1274.46 690.538 L1275.02 690.538 L1275.58 690.538 L1276.14 690.538 L1276.7 690.538 L1277.26 690.538 L1277.82 690.538 L1278.38 690.538 L1278.94 690.538 L1279.5 690.538 L1280.06 690.538 L1280.62 690.538 L1281.18 690.538 L1281.73 690.538 L1282.29 690.538 L1282.85 690.538 L1283.41 690.538 L1283.97 690.538 L1284.53 690.538 L1285.09 690.538 L1285.65 690.538 L1286.21 690.538 L1286.77 690.538 L1287.33 690.538 L1287.89 690.538 L1288.45 690.538 L1289 690.538 L1289.56 690.538 L1290.12 690.538 L1290.68 690.538 L1291.24 690.538 L1291.8 690.538 L1292.36 690.538 L1292.92 690.538 L1293.48 690.538 L1294.04 690.538 L1294.6 690.538 L1295.16 690.538 L1295.72 690.538 L1296.28 690.538 L1296.83 690.538 L1297.39 690.538 L1297.95 690.538 L1298.51 690.538 L1299.07 690.538 L1299.63 690.538 L1300.19 690.538 L1300.75 690.538 L1301.31 690.538 L1301.87 690.538 L1302.43 690.538 L1302.99 690.538 L1303.55 690.538 L1304.1 690.538 L1304.66 690.538 L1305.22 690.538 L1305.78 690.538 L1306.34 690.538 L1306.9 690.538 L1307.46 690.538 L1308.02 690.538 L1308.58 690.538 L1309.14 690.538 L1309.7 690.538 L1310.26 690.538 L1310.82 690.538 L1311.38 690.538 L1311.93 690.538 L1312.49 690.538 L1313.05 690.538 L1313.61 690.538 L1314.17 690.538 L1314.73 690.538 L1315.29 690.538 L1315.85 690.538 L1316.41 690.538 L1316.97 690.538 L1317.53 690.538 L1318.09 690.538 L1318.65 690.538 L1319.2 690.538 L1319.76 690.538 L1320.32 690.538 L1320.88 690.538 L1321.44 690.538 L1322 690.538 L1322.56 690.538 L1323.12 690.538 L1323.68 690.538 L1324.24 690.538 L1324.8 690.538 L1325.36 690.538 L1325.92 690.538 L1326.47 690.538 L1327.03 690.538 L1327.59 690.538 L1328.15 690.538 L1328.71 690.538 L1329.27 690.538 L1329.83 690.538 L1330.39 690.538 L1330.95 690.538 L1331.51 690.538 L1332.07 690.538 L1332.63 690.538 L1333.19 690.538 L1333.75 690.538 L1334.3 690.538 L1334.86 690.538 L1335.42 690.538 L1335.98 690.538 L1336.54 690.538 L1337.1 690.538 L1337.66 690.538 L1338.22 690.538 L1338.78 690.538 L1339.34 690.538 L1339.9 690.538 L1340.46 690.538 L1341.02 690.538 L1341.57 690.538 L1342.13 690.538 L1342.69 690.538 L1343.25 690.538 L1343.81 690.538 L1344.37 690.538 L1344.93 690.538 L1345.49 690.538 L1346.05 690.538 L1346.61 690.538 L1347.17 690.538 L1347.73 690.538 L1348.29 690.538 L1348.84 690.538 L1349.4 690.538 L1349.96 690.538 L1350.52 690.538 L1351.08 690.538 L1351.64 690.538 L1352.2 690.538 L1352.76 690.538 L1353.32 690.538 L1353.88 690.538 L1354.44 690.538 L1355 690.538 L1355.56 690.538 L1356.12 690.538 L1356.67 690.538 L1357.23 690.538 L1357.79 690.538 L1358.35 690.538 L1358.91 690.538 L1359.47 690.538 L1360.03 690.538 L1360.59 690.538 L1361.15 690.538 L1361.71 690.538 L1362.27 690.538 L1362.83 690.538 L1363.39 690.538 L1363.94 690.538 L1364.5 690.538 L1365.06 690.538 L1365.62 690.538 L1366.18 690.538 L1366.74 690.538 L1367.3 690.538 L1367.86 690.538 L1368.42 690.538 L1368.98 690.538 L1369.54 690.538 L1370.1 690.538 L1370.66 690.538 L1371.21 690.538 L1371.77 690.538 L1372.33 690.538 L1372.89 690.538 L1373.45 690.538 L1374.01 690.538 L1374.57 690.538 L1375.13 690.538 L1375.69 690.538 L1376.25 690.538 L1376.81 690.538 L1377.37 690.538 L1377.93 690.538 L1378.49 690.538 L1379.04 690.538 L1379.6 690.538 L1380.16 690.538 L1380.72 690.538 L1381.28 690.538 L1381.84 690.538 L1382.4 690.538 L1382.96 690.538 L1383.52 690.538 L1384.08 690.538 L1384.64 690.538 L1385.2 690.538 L1385.76 690.538 L1386.31 690.538 L1386.87 690.538 L1387.43 690.538 L1387.99 690.538 L1388.55 690.538 L1389.11 690.538 L1389.67 690.538 L1390.23 690.538 L1390.79 690.538 L1391.35 690.538 L1391.91 690.538 L1392.47 690.538 L1393.03 690.538 L1393.58 690.538 L1394.14 690.538 L1394.7 690.538 L1395.26 690.538 L1395.82 690.538 L1396.38 690.538 L1396.94 690.538 L1397.5 690.538 L1398.06 690.538 L1398.62 690.538 L1399.18 690.538 L1399.74 690.538 L1400.3 690.538 L1400.86 690.538 L1401.41 690.538 L1401.97 690.538 L1402.53 690.538 L1403.09 690.538 L1403.65 690.538 L1404.21 690.538 L1404.77 690.538 L1405.33 690.538 L1405.89 690.538 L1406.45 690.538 L1407.01 690.538 L1407.57 690.538 L1408.13 690.538 L1408.68 690.538 L1409.24 690.538 L1409.8 690.538 L1410.36 690.538 L1410.92 690.538 L1411.48 690.538 L1412.04 690.538 L1412.6 690.538 L1413.16 690.538 L1413.72 690.538 L1414.28 690.538 L1414.84 690.538 L1415.4 690.538 L1415.95 690.538 L1416.51 690.538 L1417.07 690.538 L1417.63 690.538 L1418.19 690.538 L1418.75 690.538 L1419.31 690.538 L1419.87 690.538 L1420.43 690.538 L1420.99 690.538 L1421.55 690.538 L1422.11 690.538 L1422.67 690.538 L1423.23 690.538 L1423.78 690.538 L1424.34 690.538 L1424.9 690.538 L1425.46 690.538 L1426.02 690.538 L1426.58 690.538 L1427.14 690.538 L1427.7 690.538 L1428.26 690.538 L1428.82 690.538 L1429.38 690.538 L1429.94 690.538 L1430.5 690.538 L1431.05 690.538 L1431.61 690.538 L1432.17 690.538 L1432.73 690.538 L1433.29 690.538 L1433.85 690.538 L1434.41 690.538 L1434.97 690.538 L1435.53 690.538 L1436.09 690.538 L1436.65 690.538 L1437.21 690.538 L1437.77 690.538 L1438.33 690.538 L1438.88 690.538 L1439.44 690.538 L1440 690.538 L1440.56 690.538 L1441.12 690.538 L1441.68 690.538 L1442.24 690.538 L1442.8 690.538 L1443.36 690.538 L1443.92 690.538 L1444.48 690.538 L1445.04 690.538 L1445.6 690.538 L1446.15 690.538 L1446.71 690.538 L1447.27 690.538 L1447.83 690.538 L1448.39 690.538 L1448.95 690.538 L1449.51 690.538 L1450.07 690.538 L1450.63 690.538 L1451.19 690.538 L1451.75 690.538 L1452.31 690.538 L1452.87 690.538 L1453.42 690.538 L1453.98 690.538 L1454.54 690.538 L1455.1 690.538 L1455.66 690.538 L1456.22 690.538 L1456.78 690.538 L1457.34 690.538 L1457.9 690.538 L1458.46 690.538 L1459.02 690.538 L1459.58 690.538 L1460.14 690.538 L1460.7 690.538 L1461.25 690.538 L1461.81 690.538 L1462.37 690.538 L1462.93 690.538 L1463.49 690.538 L1464.05 690.538 L1464.61 690.538 L1465.17 690.538 L1465.73 690.538 L1466.29 690.538 L1466.85 690.538 L1467.41 690.538 L1467.97 690.538 L1468.52 690.538 L1469.08 690.538 L1469.64 690.538 L1470.2 690.538 L1470.76 690.538 L1471.32 690.538 L1471.88 690.538 L1472.44 690.538 L1473 690.538 L1473.56 690.538 L1474.12 690.538 L1474.68 690.538 L1475.24 690.538 L1475.79 690.538 L1476.35 690.538 L1476.91 690.538 L1477.47 690.538 L1478.03 690.538 L1478.59 690.538 L1479.15 690.538 L1479.71 690.538 L1480.27 690.538 L1480.83 690.538 L1481.39 690.538 L1481.95 690.538 L1482.51 690.538 L1483.07 690.538 L1483.62 690.538 L1484.18 690.538 L1484.74 690.538 L1485.3 690.538 L1485.86 690.538 L1486.42 690.538 L1486.98 690.538 L1487.54 690.538 L1488.1 690.538 L1488.66 690.538 L1489.22 690.538 L1489.78 690.538 L1490.34 690.538 L1490.89 690.538 L1491.45 690.538 L1492.01 690.538 L1492.57 690.538 L1493.13 690.538 L1493.69 690.538 L1494.25 690.538 L1494.81 690.538 L1495.37 690.538 L1495.93 690.538 L1496.49 690.538 L1497.05 690.538 L1497.61 690.538 L1498.16 690.538 L1498.72 690.538 L1499.28 690.538 L1499.84 690.538 L1500.4 690.538 L1500.96 690.538 L1501.52 690.538 L1502.08 690.538 L1502.64 690.538 L1503.2 690.538 L1503.76 690.538 L1504.32 690.538 L1504.88 690.538 L1505.44 690.538 L1505.99 690.538 L1506.55 690.538 L1507.11 690.538 L1507.67 690.538 L1508.23 690.538 L1508.79 690.538 L1509.35 690.538 L1509.91 690.538 L1510.47 690.538 L1511.03 690.538 L1511.59 690.538 L1512.15 690.538 L1512.71 690.538 L1513.26 690.538 L1513.82 690.538 L1514.38 690.538 L1514.94 690.538 L1515.5 690.538 L1516.06 690.538 L1516.62 690.538 L1517.18 690.538 L1517.74 690.538 L1518.3 690.538 L1518.86 690.538 L1519.42 690.538 L1519.98 690.538 L1520.53 690.538 L1521.09 690.538 L1521.65 690.538 L1522.21 690.538 L1522.77 690.538 L1523.33 690.538 L1523.89 690.538 L1524.45 690.538 L1525.01 690.538 L1525.57 690.538 L1526.13 690.538 L1526.69 690.538 L1527.25 690.538 L1527.81 690.538 L1528.36 690.538 L1528.92 690.538 L1529.48 690.538 L1530.04 690.538 L1530.6 690.538 L1531.16 690.538 L1531.72 690.538 L1532.28 690.538 L1532.84 690.538 L1533.4 690.538 L1533.96 690.538 L1534.52 690.538 L1535.08 690.538 L1535.63 690.538 L1536.19 690.538 L1536.75 690.538 L1537.31 690.538 L1537.87 690.538 L1538.43 690.538 L1538.99 690.538 L1539.55 690.538 L1540.11 690.538 L1540.67 690.538 L1541.23 690.538 L1541.79 690.538 L1542.35 690.538 L1542.9 690.538 L1543.46 690.538 L1544.02 690.538 L1544.58 690.538 L1545.14 690.538 L1545.7 690.538 L1546.26 690.538 L1546.82 690.538 L1547.38 690.538 L1547.94 690.538 L1548.5 690.538 L1549.06 690.538 L1549.62 690.538 L1550.18 690.538 L1550.73 690.538 L1551.29 690.538 L1551.85 690.538 L1552.41 690.538 L1552.97 690.538 L1553.53 690.538 L1554.09 690.538 L1554.65 690.538 L1555.21 690.538 L1555.77 690.538 L1556.33 690.538 L1556.89 690.538 L1557.45 690.538 L1558 690.538 L1558.56 690.538 L1559.12 690.538 L1559.68 690.538 L1560.24 690.538 L1560.8 690.538 L1561.36 690.538 L1561.92 690.538 L1562.48 690.538 L1563.04 690.538 L1563.6 690.538 L1564.16 690.538 L1564.72 690.538 L1565.28 690.538 L1565.83 690.538 L1566.39 690.538 L1566.95 690.538 L1567.51 690.538 L1568.07 690.538 L1568.63 690.538 L1569.19 690.538 L1569.75 690.538 L1570.31 690.538 L1570.87 690.538 L1571.43 690.538 L1571.99 690.538 L1572.55 690.538 L1573.1 690.538 L1573.66 690.538 L1574.22 690.538 L1574.78 690.538 L1575.34 690.538 L1575.9 690.538 L1576.46 690.538 L1577.02 690.538 L1577.58 690.538 L1578.14 690.538 L1578.7 690.538 L1579.26 690.538 L1579.82 690.538 L1580.37 690.538 L1580.93 690.538 L1581.49 690.538 L1582.05 690.538 L1582.61 690.538 L1583.17 690.538 L1583.73 690.538 L1584.29 690.538 L1584.85 690.538 L1585.41 690.538 L1585.97 690.538 L1586.53 690.538 L1587.09 690.538 L1587.65 690.538 L1588.2 690.538 L1588.76 690.538 L1589.32 690.538 L1589.88 690.538 L1590.44 690.538 L1591 690.538 L1591.56 690.538 L1592.12 690.538 L1592.68 690.538 L1593.24 690.538 L1593.8 690.538 L1594.36 690.538 L1594.92 690.538 L1595.47 690.538 L1596.03 690.538 L1596.59 690.538 L1597.15 690.538 L1597.71 690.538 L1598.27 690.538 L1598.83 690.538 L1599.39 690.538 L1599.95 690.538 L1600.51 690.538 L1601.07 690.538 L1601.63 690.538 L1602.19 690.538 L1602.74 690.538 L1603.3 690.538 L1603.86 690.538 L1604.42 690.538 L1604.98 690.538 L1605.54 690.538 L1606.1 690.538 L1606.66 690.538 L1607.22 690.538 L1607.78 690.538 L1608.34 690.538 L1608.9 690.538 L1609.46 690.538 L1610.02 690.538 L1610.57 690.538 L1611.13 690.538 L1611.69 690.538 L1612.25 690.538 L1612.81 690.538 L1613.37 690.538 L1613.93 690.538 L1614.49 690.538 L1615.05 690.538 L1615.61 690.538 L1616.17 690.538 L1616.73 690.538 L1617.29 690.538 L1617.84 690.538 L1618.4 690.538 L1618.96 690.538 L1619.52 690.538 L1620.08 690.538 L1620.64 690.538 L1621.2 690.538 L1621.76 690.538 L1622.32 690.538 L1622.88 690.538 L1623.44 690.538 L1624 690.538 L1624.56 690.538 L1625.11 690.538 L1625.67 690.538 L1626.23 690.538 L1626.79 690.538 L1627.35 690.538 L1627.91 690.538 L1628.47 690.538 L1629.03 690.538 L1629.59 690.538 L1630.15 690.538 L1630.71 690.538 L1631.27 690.538 L1631.83 690.538 L1632.39 690.538 L1632.94 690.538 L1633.5 690.538 L1634.06 690.538 L1634.62 690.538 L1635.18 690.538 L1635.74 690.538 L1636.3 690.538 L1636.86 690.538 L1637.42 690.538 L1637.98 690.538 L1638.54 690.538 L1639.1 690.538 L1639.66 690.538 L1640.21 690.538 L1640.77 690.538 L1641.33 690.538 L1641.89 690.538 L1642.45 690.538 L1643.01 690.538 L1643.57 690.538 L1644.13 690.538 L1644.69 690.538 L1645.25 690.538 L1645.81 690.538 L1646.37 690.538 L1646.93 690.538 L1647.48 690.538 L1648.04 690.538 L1648.6 690.538 L1649.16 690.538 L1649.72 690.538 L1650.28 690.538 L1650.84 690.538 L1651.4 690.538 L1651.96 690.538 L1652.52 690.538 L1653.08 690.538 L1653.64 690.538 L1654.2 690.538 L1654.76 690.538 L1655.31 690.538 L1655.87 690.538 L1656.43 690.538 L1656.99 690.538 L1657.55 690.538 L1658.11 690.538 L1658.67 690.538 L1659.23 690.538 L1659.79 690.538 L1660.35 690.538 L1660.91 690.538 L1661.47 690.538 L1662.03 690.538 L1662.58 690.538 L1663.14 690.538 L1663.7 690.538 L1664.26 690.538 L1664.82 690.538 L1665.38 690.538 L1665.94 690.538 L1666.5 690.538 L1667.06 690.538 L1667.62 690.538 L1668.18 690.538 L1668.74 690.538 L1669.3 690.538 L1669.85 690.538 L1670.41 690.538 L1670.97 690.538 L1671.53 690.538 L1672.09 690.538 L1672.65 690.538 L1673.21 690.538 L1673.77 690.538 L1674.33 690.538 L1674.89 690.538 L1675.45 690.538 L1676.01 690.538 L1676.57 690.538 L1677.13 690.538 L1677.68 690.538 L1678.24 690.538 L1678.8 690.538 L1679.36 690.538 L1679.92 690.538 L1680.48 690.538 L1681.04 690.538 L1681.6 690.538 L1682.16 690.538 L1682.72 690.538 L1683.28 690.538 L1683.84 690.538 L1684.4 690.538 L1684.95 690.538 L1685.51 690.538 L1686.07 690.538 L1686.63 690.538 L1687.19 690.538 L1687.75 690.538 L1688.31 690.538 L1688.87 690.538 L1689.43 690.538 L1689.99 690.538 L1690.55 690.538 L1691.11 690.538 L1691.67 690.538 L1692.23 690.538 L1692.78 690.538 L1693.34 690.538 L1693.9 690.538 L1694.46 690.538 L1695.02 690.538 L1695.58 690.538 L1696.14 690.538 L1696.7 690.538 L1697.26 690.538 L1697.82 690.538 L1698.38 690.538 L1698.94 690.538 L1699.5 690.538 L1700.05 690.538 L1700.61 690.538 L1701.17 690.538 L1701.73 690.538 L1702.29 690.538 L1702.85 690.538 L1703.41 690.538 L1703.97 690.538 L1704.53 690.538 L1705.09 690.538 L1705.65 690.538 L1706.21 690.538 L1706.77 690.538 L1707.32 690.538 L1707.88 690.538 L1708.44 690.538 L1709 690.538 L1709.56 690.538 L1710.12 690.538 L1710.68 690.538 L1711.24 690.538 L1711.8 690.538 L1712.36 690.538 L1712.92 690.538 L1713.48 690.538 L1714.04 690.538 L1714.6 690.538 L1715.15 690.538 L1715.71 690.538 L1716.27 690.538 L1716.83 690.538 L1717.39 690.538 L1717.95 690.538 L1718.51 690.538 L1719.07 690.538 L1719.63 690.538 L1720.19 690.538 L1720.75 690.538 L1721.31 690.538 L1721.87 690.538 L1722.42 690.538 L1722.98 690.538 L1723.54 690.538 L1724.1 690.538 L1724.66 690.538 L1725.22 690.538 L1725.78 690.538 L1726.34 690.538 L1726.9 690.538 L1727.46 690.538 L1728.02 690.538 L1728.58 690.538 L1729.14 690.538 L1729.69 690.538 L1730.25 690.538 L1730.81 690.538 L1731.37 690.538 L1731.93 690.538 L1732.49 690.538 L1733.05 690.538 L1733.61 690.538 L1734.17 690.538 L1734.73 690.538 L1735.29 690.538 L1735.85 690.538 L1736.41 690.538 L1736.97 690.538 L1737.52 690.538 L1738.08 690.538 L1738.64 690.538 L1739.2 690.538 L1739.76 690.538 L1740.32 690.538 L1740.88 690.538 L1741.44 690.538 L1742 690.538 L1742.56 690.538 L1743.12 690.538 L1743.68 690.538 L1744.24 690.538 L1744.79 690.538 L1745.35 690.538 L1745.91 690.538 L1746.47 690.538 L1747.03 690.538 L1747.59 690.538 L1748.15 690.538 L1748.71 690.538 L1749.27 690.538 L1749.83 690.538 L1750.39 690.538 L1750.95 690.538 L1751.51 690.538 L1752.06 690.538 L1752.62 690.538 L1753.18 690.538 L1753.74 690.538 L1754.3 690.538 L1754.86 690.538 L1755.42 690.538 L1755.98 690.538 L1756.54 690.538 L1757.1 690.538 L1757.66 690.538 L1758.22 690.538 L1758.78 690.538 L1759.34 690.538 L1759.89 690.538 L1760.45 690.538 L1761.01 690.538 L1761.57 690.538 L1762.13 690.538 L1762.69 690.538 L1763.25 690.538 L1763.81 690.538 L1764.37 690.538 L1764.93 690.538 L1765.49 690.538 L1766.05 690.538 L1766.61 690.538 L1767.16 690.538 L1767.72 690.538 L1768.28 690.538 L1768.84 690.538 L1769.4 690.538 L1769.96 690.538 L1770.52 690.538 L1771.08 690.538 L1771.64 690.538 L1772.2 690.538 L1772.76 690.538 L1773.32 690.538 L1773.88 690.538 L1774.43 690.538 L1774.99 690.538 L1775.55 690.538 L1776.11 690.538 L1776.67 690.538 L1777.23 690.538 L1777.79 690.538 L1778.35 690.538 L1778.91 690.538 L1779.47 690.538 L1780.03 690.538 L1780.59 690.538 L1781.15 690.538 L1781.71 690.538 L1782.26 690.538 L1782.82 690.538 L1783.38 690.538 L1783.94 690.538 L1784.5 690.538 L1785.06 690.538 L1785.62 690.538 L1786.18 690.538 L1786.74 690.538 L1787.3 690.538 L1787.86 690.538 L1788.42 690.538 L1788.98 690.538 L1789.53 690.538 L1790.09 690.538 L1790.65 690.538 L1791.21 690.538 L1791.77 690.538 L1792.33 690.538 L1792.89 690.538 L1793.45 690.538 L1794.01 690.538 L1794.57 690.538 L1795.13 690.538 L1795.69 690.538 L1796.25 690.538 L1796.8 690.538 L1797.36 690.538 L1797.92 690.538 L1798.48 690.538 L1799.04 690.538 L1799.6 690.538 L1800.16 690.538 L1800.72 690.538 L1801.28 690.538 L1801.84 690.538 L1802.4 690.538 L1802.96 690.538 L1803.52 690.538 L1804.08 690.538 L1804.63 690.538 L1805.19 690.538 L1805.75 690.538 L1806.31 690.538 L1806.87 690.538 L1807.43 690.538 L1807.99 690.538 L1808.55 690.538 L1809.11 690.538 L1809.67 690.538 L1810.23 690.538 L1810.79 690.538 L1811.35 690.538 L1811.9 690.538 L1812.46 690.538 L1813.02 690.538 L1813.58 690.538 L1814.14 690.538 L1814.7 690.538 L1815.26 690.538 L1815.82 690.538 L1816.38 690.538 L1816.94 690.538 L1817.5 690.538 L1818.06 690.538 L1818.62 690.538 L1819.18 690.538 L1819.73 690.538 L1820.29 690.538 L1820.85 690.538 L1821.41 690.538 L1821.97 690.538 L1822.53 690.538 L1823.09 690.538 L1823.65 690.538 L1824.21 690.538 L1824.77 690.538 L1825.33 690.538 L1825.89 690.538 L1826.45 690.538 L1827 690.538 L1827.56 690.538 L1828.12 690.538 L1828.68 690.538 L1829.24 690.538 L1829.8 690.538 L1830.36 690.538 L1830.92 690.538 L1831.48 690.538 L1832.04 690.538 L1832.6 690.538 L1833.16 690.538 L1833.72 690.538 L1834.27 690.538 L1834.83 690.538 L1835.39 690.538 L1835.95 690.538 L1836.51 690.538 L1837.07 690.538 L1837.63 690.538 L1838.19 690.538 L1838.19 680.922 L1837.63 680.922 L1837.07 680.922 L1836.51 680.922 L1835.95 680.922 L1835.39 680.922 L1834.83 680.922 L1834.27 680.922 L1833.72 680.922 L1833.16 680.922 L1832.6 680.922 L1832.04 680.922 L1831.48 680.922 L1830.92 680.922 L1830.36 680.922 L1829.8 680.922 L1829.24 680.922 L1828.68 680.922 L1828.12 680.922 L1827.56 680.922 L1827 680.922 L1826.45 680.922 L1825.89 680.922 L1825.33 680.922 L1824.77 680.922 L1824.21 680.922 L1823.65 680.922 L1823.09 680.922 L1822.53 680.922 L1821.97 680.922 L1821.41 680.922 L1820.85 680.922 L1820.29 680.922 L1819.73 680.922 L1819.18 680.922 L1818.62 680.922 L1818.06 680.922 L1817.5 680.922 L1816.94 680.922 L1816.38 680.922 L1815.82 680.922 L1815.26 680.922 L1814.7 680.922 L1814.14 680.922 L1813.58 680.922 L1813.02 680.922 L1812.46 680.922 L1811.9 680.922 L1811.35 680.922 L1810.79 680.922 L1810.23 680.922 L1809.67 680.922 L1809.11 680.922 L1808.55 680.922 L1807.99 680.922 L1807.43 680.922 L1806.87 680.922 L1806.31 680.922 L1805.75 680.922 L1805.19 680.922 L1804.63 680.922 L1804.08 680.922 L1803.52 680.922 L1802.96 680.922 L1802.4 680.922 L1801.84 680.922 L1801.28 680.922 L1800.72 680.922 L1800.16 680.922 L1799.6 680.922 L1799.04 680.922 L1798.48 680.922 L1797.92 680.922 L1797.36 680.922 L1796.8 680.922 L1796.25 680.922 L1795.69 680.922 L1795.13 680.922 L1794.57 680.922 L1794.01 680.922 L1793.45 680.922 L1792.89 680.922 L1792.33 680.922 L1791.77 680.922 L1791.21 680.922 L1790.65 680.922 L1790.09 680.922 L1789.53 680.922 L1788.98 680.922 L1788.42 680.922 L1787.86 680.922 L1787.3 680.922 L1786.74 680.922 L1786.18 680.922 L1785.62 680.922 L1785.06 680.922 L1784.5 680.922 L1783.94 680.922 L1783.38 680.922 L1782.82 680.922 L1782.26 680.922 L1781.71 680.922 L1781.15 680.922 L1780.59 680.922 L1780.03 680.922 L1779.47 680.922 L1778.91 680.922 L1778.35 680.922 L1777.79 680.922 L1777.23 680.922 L1776.67 680.922 L1776.11 680.922 L1775.55 680.922 L1774.99 680.922 L1774.43 680.922 L1773.88 680.922 L1773.32 680.922 L1772.76 680.922 L1772.2 680.922 L1771.64 680.922 L1771.08 680.922 L1770.52 680.922 L1769.96 680.922 L1769.4 680.922 L1768.84 680.922 L1768.28 680.922 L1767.72 680.922 L1767.16 680.922 L1766.61 680.922 L1766.05 680.922 L1765.49 680.922 L1764.93 680.922 L1764.37 680.922 L1763.81 680.922 L1763.25 680.922 L1762.69 680.922 L1762.13 680.922 L1761.57 680.922 L1761.01 680.922 L1760.45 680.922 L1759.89 680.922 L1759.34 680.922 L1758.78 680.922 L1758.22 680.922 L1757.66 680.922 L1757.1 680.922 L1756.54 680.922 L1755.98 680.922 L1755.42 680.922 L1754.86 680.922 L1754.3 680.922 L1753.74 680.922 L1753.18 680.922 L1752.62 680.922 L1752.06 680.922 L1751.51 680.922 L1750.95 680.922 L1750.39 680.922 L1749.83 680.922 L1749.27 680.922 L1748.71 680.922 L1748.15 680.922 L1747.59 680.922 L1747.03 680.922 L1746.47 680.922 L1745.91 680.922 L1745.35 680.922 L1744.79 680.922 L1744.24 680.922 L1743.68 680.922 L1743.12 680.922 L1742.56 680.922 L1742 680.922 L1741.44 680.922 L1740.88 680.922 L1740.32 680.922 L1739.76 680.922 L1739.2 680.922 L1738.64 680.922 L1738.08 680.922 L1737.52 680.922 L1736.97 680.922 L1736.41 680.922 L1735.85 680.922 L1735.29 680.922 L1734.73 680.922 L1734.17 680.922 L1733.61 680.922 L1733.05 680.922 L1732.49 680.922 L1731.93 680.922 L1731.37 680.922 L1730.81 680.922 L1730.25 680.922 L1729.69 680.922 L1729.14 680.922 L1728.58 680.922 L1728.02 680.922 L1727.46 680.922 L1726.9 680.922 L1726.34 680.922 L1725.78 680.922 L1725.22 680.922 L1724.66 680.922 L1724.1 680.922 L1723.54 680.922 L1722.98 680.922 L1722.42 680.922 L1721.87 680.922 L1721.31 680.922 L1720.75 680.922 L1720.19 680.922 L1719.63 680.922 L1719.07 680.922 L1718.51 680.922 L1717.95 680.922 L1717.39 680.922 L1716.83 680.922 L1716.27 680.922 L1715.71 680.922 L1715.15 680.922 L1714.6 680.922 L1714.04 680.922 L1713.48 680.922 L1712.92 680.922 L1712.36 680.922 L1711.8 680.922 L1711.24 680.922 L1710.68 680.922 L1710.12 680.922 L1709.56 680.922 L1709 680.922 L1708.44 680.922 L1707.88 680.922 L1707.32 680.922 L1706.77 680.922 L1706.21 680.922 L1705.65 680.922 L1705.09 680.922 L1704.53 680.922 L1703.97 680.922 L1703.41 680.922 L1702.85 680.922 L1702.29 680.922 L1701.73 680.922 L1701.17 680.922 L1700.61 680.922 L1700.05 680.922 L1699.5 680.922 L1698.94 680.922 L1698.38 680.922 L1697.82 680.922 L1697.26 680.922 L1696.7 680.922 L1696.14 680.922 L1695.58 680.922 L1695.02 680.922 L1694.46 680.922 L1693.9 680.922 L1693.34 680.922 L1692.78 680.922 L1692.23 680.922 L1691.67 680.922 L1691.11 680.922 L1690.55 680.922 L1689.99 680.922 L1689.43 680.922 L1688.87 680.922 L1688.31 680.922 L1687.75 680.922 L1687.19 680.922 L1686.63 680.922 L1686.07 680.922 L1685.51 680.922 L1684.95 680.922 L1684.4 680.922 L1683.84 680.922 L1683.28 680.922 L1682.72 680.922 L1682.16 680.922 L1681.6 680.922 L1681.04 680.922 L1680.48 680.922 L1679.92 680.922 L1679.36 680.922 L1678.8 680.922 L1678.24 680.922 L1677.68 680.922 L1677.13 680.922 L1676.57 680.922 L1676.01 680.922 L1675.45 680.922 L1674.89 680.922 L1674.33 680.922 L1673.77 680.922 L1673.21 680.922 L1672.65 680.922 L1672.09 680.922 L1671.53 680.922 L1670.97 680.922 L1670.41 680.922 L1669.85 680.922 L1669.3 680.922 L1668.74 680.922 L1668.18 680.922 L1667.62 680.922 L1667.06 680.922 L1666.5 680.922 L1665.94 680.922 L1665.38 680.922 L1664.82 680.922 L1664.26 680.922 L1663.7 680.922 L1663.14 680.922 L1662.58 680.922 L1662.03 680.922 L1661.47 680.922 L1660.91 680.922 L1660.35 680.922 L1659.79 680.922 L1659.23 680.922 L1658.67 680.922 L1658.11 680.922 L1657.55 680.922 L1656.99 680.922 L1656.43 680.922 L1655.87 680.922 L1655.31 680.922 L1654.76 680.922 L1654.2 680.922 L1653.64 680.922 L1653.08 680.922 L1652.52 680.922 L1651.96 680.922 L1651.4 680.922 L1650.84 680.922 L1650.28 680.922 L1649.72 680.922 L1649.16 680.922 L1648.6 680.922 L1648.04 680.922 L1647.48 680.922 L1646.93 680.922 L1646.37 680.922 L1645.81 680.922 L1645.25 680.922 L1644.69 680.922 L1644.13 680.922 L1643.57 680.922 L1643.01 680.922 L1642.45 680.922 L1641.89 680.922 L1641.33 680.922 L1640.77 680.922 L1640.21 680.922 L1639.66 680.922 L1639.1 680.922 L1638.54 680.922 L1637.98 680.922 L1637.42 680.922 L1636.86 680.922 L1636.3 680.922 L1635.74 680.922 L1635.18 680.922 L1634.62 680.922 L1634.06 680.922 L1633.5 680.922 L1632.94 680.922 L1632.39 680.922 L1631.83 680.922 L1631.27 680.922 L1630.71 680.922 L1630.15 680.922 L1629.59 680.922 L1629.03 680.922 L1628.47 680.922 L1627.91 680.922 L1627.35 680.922 L1626.79 680.922 L1626.23 680.922 L1625.67 680.922 L1625.11 680.922 L1624.56 680.922 L1624 680.922 L1623.44 680.922 L1622.88 680.922 L1622.32 680.922 L1621.76 680.922 L1621.2 680.922 L1620.64 680.922 L1620.08 680.922 L1619.52 680.922 L1618.96 680.922 L1618.4 680.922 L1617.84 680.922 L1617.29 680.922 L1616.73 680.922 L1616.17 680.922 L1615.61 680.922 L1615.05 680.922 L1614.49 680.922 L1613.93 680.922 L1613.37 680.922 L1612.81 680.922 L1612.25 680.922 L1611.69 680.922 L1611.13 680.922 L1610.57 680.922 L1610.02 680.922 L1609.46 680.922 L1608.9 680.922 L1608.34 680.922 L1607.78 680.922 L1607.22 680.922 L1606.66 680.922 L1606.1 680.922 L1605.54 680.922 L1604.98 680.922 L1604.42 680.922 L1603.86 680.922 L1603.3 680.922 L1602.74 680.922 L1602.19 680.922 L1601.63 680.922 L1601.07 680.922 L1600.51 680.922 L1599.95 680.922 L1599.39 680.922 L1598.83 680.922 L1598.27 680.922 L1597.71 680.922 L1597.15 680.922 L1596.59 680.922 L1596.03 680.922 L1595.47 680.922 L1594.92 680.922 L1594.36 680.922 L1593.8 680.922 L1593.24 680.922 L1592.68 680.922 L1592.12 680.922 L1591.56 680.922 L1591 680.922 L1590.44 680.922 L1589.88 680.922 L1589.32 680.922 L1588.76 680.922 L1588.2 680.922 L1587.65 680.922 L1587.09 680.922 L1586.53 680.922 L1585.97 680.922 L1585.41 680.922 L1584.85 680.922 L1584.29 680.922 L1583.73 680.922 L1583.17 680.922 L1582.61 680.922 L1582.05 680.922 L1581.49 680.922 L1580.93 680.922 L1580.37 680.922 L1579.82 680.922 L1579.26 680.922 L1578.7 680.922 L1578.14 680.922 L1577.58 680.922 L1577.02 680.922 L1576.46 680.922 L1575.9 680.922 L1575.34 680.922 L1574.78 680.922 L1574.22 680.922 L1573.66 680.922 L1573.1 680.922 L1572.55 680.922 L1571.99 680.922 L1571.43 680.922 L1570.87 680.922 L1570.31 680.922 L1569.75 680.922 L1569.19 680.922 L1568.63 680.922 L1568.07 680.922 L1567.51 680.922 L1566.95 680.922 L1566.39 680.922 L1565.83 680.922 L1565.28 680.922 L1564.72 680.922 L1564.16 680.922 L1563.6 680.922 L1563.04 680.922 L1562.48 680.922 L1561.92 680.922 L1561.36 680.922 L1560.8 680.922 L1560.24 680.922 L1559.68 680.922 L1559.12 680.922 L1558.56 680.922 L1558 680.922 L1557.45 680.922 L1556.89 680.922 L1556.33 680.922 L1555.77 680.922 L1555.21 680.922 L1554.65 680.922 L1554.09 680.922 L1553.53 680.922 L1552.97 680.922 L1552.41 680.922 L1551.85 680.922 L1551.29 680.922 L1550.73 680.922 L1550.18 680.922 L1549.62 680.922 L1549.06 680.922 L1548.5 680.922 L1547.94 680.922 L1547.38 680.922 L1546.82 680.922 L1546.26 680.922 L1545.7 680.922 L1545.14 680.922 L1544.58 680.922 L1544.02 680.922 L1543.46 680.922 L1542.9 680.922 L1542.35 680.922 L1541.79 680.922 L1541.23 680.922 L1540.67 680.922 L1540.11 680.922 L1539.55 680.922 L1538.99 680.922 L1538.43 680.922 L1537.87 680.922 L1537.31 680.922 L1536.75 680.922 L1536.19 680.922 L1535.63 680.922 L1535.08 680.922 L1534.52 680.922 L1533.96 680.922 L1533.4 680.922 L1532.84 680.922 L1532.28 680.922 L1531.72 680.922 L1531.16 680.922 L1530.6 680.922 L1530.04 680.922 L1529.48 680.922 L1528.92 680.922 L1528.36 680.922 L1527.81 680.922 L1527.25 680.922 L1526.69 680.922 L1526.13 680.922 L1525.57 680.922 L1525.01 680.922 L1524.45 680.922 L1523.89 680.922 L1523.33 680.922 L1522.77 680.922 L1522.21 680.922 L1521.65 680.922 L1521.09 680.922 L1520.53 680.922 L1519.98 680.922 L1519.42 680.922 L1518.86 680.922 L1518.3 680.922 L1517.74 680.922 L1517.18 680.922 L1516.62 680.922 L1516.06 680.922 L1515.5 680.922 L1514.94 680.922 L1514.38 680.922 L1513.82 680.922 L1513.26 680.922 L1512.71 680.922 L1512.15 680.922 L1511.59 680.922 L1511.03 680.922 L1510.47 680.922 L1509.91 680.922 L1509.35 680.922 L1508.79 680.922 L1508.23 680.922 L1507.67 680.922 L1507.11 680.922 L1506.55 680.922 L1505.99 680.922 L1505.44 680.922 L1504.88 680.922 L1504.32 680.922 L1503.76 680.922 L1503.2 680.922 L1502.64 680.922 L1502.08 680.922 L1501.52 680.922 L1500.96 680.922 L1500.4 680.922 L1499.84 680.922 L1499.28 680.922 L1498.72 680.922 L1498.16 680.922 L1497.61 680.922 L1497.05 680.922 L1496.49 680.922 L1495.93 680.922 L1495.37 680.922 L1494.81 680.922 L1494.25 680.922 L1493.69 680.922 L1493.13 680.922 L1492.57 680.922 L1492.01 680.922 L1491.45 680.922 L1490.89 680.922 L1490.34 680.922 L1489.78 680.922 L1489.22 680.922 L1488.66 680.922 L1488.1 680.922 L1487.54 680.922 L1486.98 680.922 L1486.42 680.922 L1485.86 680.922 L1485.3 680.922 L1484.74 680.922 L1484.18 680.922 L1483.62 680.922 L1483.07 680.922 L1482.51 680.922 L1481.95 680.922 L1481.39 680.922 L1480.83 680.922 L1480.27 680.922 L1479.71 680.922 L1479.15 680.922 L1478.59 680.922 L1478.03 680.922 L1477.47 680.922 L1476.91 680.922 L1476.35 680.922 L1475.79 680.922 L1475.24 680.922 L1474.68 680.922 L1474.12 680.922 L1473.56 680.922 L1473 680.922 L1472.44 680.922 L1471.88 680.922 L1471.32 680.922 L1470.76 680.922 L1470.2 680.922 L1469.64 680.922 L1469.08 680.922 L1468.52 680.922 L1467.97 680.922 L1467.41 680.922 L1466.85 680.922 L1466.29 680.922 L1465.73 680.922 L1465.17 680.922 L1464.61 680.922 L1464.05 680.922 L1463.49 680.922 L1462.93 680.922 L1462.37 680.922 L1461.81 680.922 L1461.25 680.922 L1460.7 680.922 L1460.14 680.922 L1459.58 680.922 L1459.02 680.922 L1458.46 680.922 L1457.9 680.922 L1457.34 680.922 L1456.78 680.922 L1456.22 680.922 L1455.66 680.922 L1455.1 680.922 L1454.54 680.922 L1453.98 680.922 L1453.42 680.922 L1452.87 680.922 L1452.31 680.922 L1451.75 680.922 L1451.19 680.922 L1450.63 680.922 L1450.07 680.922 L1449.51 680.922 L1448.95 680.922 L1448.39 680.922 L1447.83 680.922 L1447.27 680.922 L1446.71 680.922 L1446.15 680.922 L1445.6 680.922 L1445.04 680.922 L1444.48 680.922 L1443.92 680.922 L1443.36 680.922 L1442.8 680.922 L1442.24 680.922 L1441.68 680.922 L1441.12 680.922 L1440.56 680.922 L1440 680.922 L1439.44 680.922 L1438.88 680.922 L1438.33 680.922 L1437.77 680.922 L1437.21 680.922 L1436.65 680.922 L1436.09 680.922 L1435.53 680.922 L1434.97 680.922 L1434.41 680.922 L1433.85 680.922 L1433.29 680.922 L1432.73 680.922 L1432.17 680.922 L1431.61 680.922 L1431.05 680.922 L1430.5 680.922 L1429.94 680.922 L1429.38 680.922 L1428.82 680.922 L1428.26 680.922 L1427.7 680.922 L1427.14 680.922 L1426.58 680.922 L1426.02 680.922 L1425.46 680.922 L1424.9 680.922 L1424.34 680.922 L1423.78 680.922 L1423.23 680.922 L1422.67 680.922 L1422.11 680.922 L1421.55 680.922 L1420.99 680.922 L1420.43 680.922 L1419.87 680.922 L1419.31 680.922 L1418.75 680.922 L1418.19 680.922 L1417.63 680.922 L1417.07 680.922 L1416.51 680.922 L1415.95 680.922 L1415.4 680.922 L1414.84 680.922 L1414.28 680.922 L1413.72 680.922 L1413.16 680.922 L1412.6 680.922 L1412.04 680.922 L1411.48 680.922 L1410.92 680.922 L1410.36 680.922 L1409.8 680.922 L1409.24 680.922 L1408.68 680.922 L1408.13 680.922 L1407.57 680.922 L1407.01 680.922 L1406.45 680.922 L1405.89 680.922 L1405.33 680.922 L1404.77 680.922 L1404.21 680.922 L1403.65 680.922 L1403.09 680.922 L1402.53 680.922 L1401.97 680.922 L1401.41 680.922 L1400.86 680.922 L1400.3 680.922 L1399.74 680.922 L1399.18 680.922 L1398.62 680.922 L1398.06 680.922 L1397.5 680.922 L1396.94 680.922 L1396.38 680.922 L1395.82 680.922 L1395.26 680.922 L1394.7 680.922 L1394.14 680.922 L1393.58 680.922 L1393.03 680.922 L1392.47 680.922 L1391.91 680.922 L1391.35 680.922 L1390.79 680.922 L1390.23 680.922 L1389.67 680.922 L1389.11 680.922 L1388.55 680.922 L1387.99 680.922 L1387.43 680.922 L1386.87 680.922 L1386.31 680.922 L1385.76 680.922 L1385.2 680.922 L1384.64 680.922 L1384.08 680.922 L1383.52 680.922 L1382.96 680.922 L1382.4 680.922 L1381.84 680.922 L1381.28 680.922 L1380.72 680.922 L1380.16 680.922 L1379.6 680.922 L1379.04 680.922 L1378.49 680.922 L1377.93 680.922 L1377.37 680.922 L1376.81 680.922 L1376.25 680.922 L1375.69 680.922 L1375.13 680.922 L1374.57 680.922 L1374.01 680.922 L1373.45 680.922 L1372.89 680.922 L1372.33 680.922 L1371.77 680.922 L1371.21 680.922 L1370.66 680.922 L1370.1 680.922 L1369.54 680.922 L1368.98 680.922 L1368.42 680.922 L1367.86 680.922 L1367.3 680.922 L1366.74 680.922 L1366.18 680.922 L1365.62 680.922 L1365.06 680.922 L1364.5 680.922 L1363.94 680.922 L1363.39 680.922 L1362.83 680.922 L1362.27 680.922 L1361.71 680.922 L1361.15 680.922 L1360.59 680.922 L1360.03 680.922 L1359.47 680.922 L1358.91 680.922 L1358.35 680.922 L1357.79 680.922 L1357.23 680.922 L1356.67 680.922 L1356.12 680.922 L1355.56 680.922 L1355 680.922 L1354.44 680.922 L1353.88 680.922 L1353.32 680.922 L1352.76 680.922 L1352.2 680.922 L1351.64 680.922 L1351.08 680.922 L1350.52 680.922 L1349.96 680.922 L1349.4 680.922 L1348.84 680.922 L1348.29 680.922 L1347.73 680.922 L1347.17 680.922 L1346.61 680.922 L1346.05 680.922 L1345.49 680.922 L1344.93 680.922 L1344.37 680.922 L1343.81 680.922 L1343.25 680.922 L1342.69 680.922 L1342.13 680.922 L1341.57 680.922 L1341.02 680.922 L1340.46 680.922 L1339.9 680.922 L1339.34 680.922 L1338.78 680.922 L1338.22 680.922 L1337.66 680.922 L1337.1 680.922 L1336.54 680.922 L1335.98 680.922 L1335.42 680.922 L1334.86 680.922 L1334.3 680.922 L1333.75 680.922 L1333.19 680.922 L1332.63 680.922 L1332.07 680.922 L1331.51 680.922 L1330.95 680.922 L1330.39 680.922 L1329.83 680.922 L1329.27 680.922 L1328.71 680.922 L1328.15 680.922 L1327.59 680.922 L1327.03 680.922 L1326.47 680.922 L1325.92 680.922 L1325.36 680.922 L1324.8 680.922 L1324.24 680.922 L1323.68 680.922 L1323.12 680.922 L1322.56 680.922 L1322 680.922 L1321.44 680.922 L1320.88 680.922 L1320.32 680.922 L1319.76 680.922 L1319.2 680.922 L1318.65 680.922 L1318.09 680.922 L1317.53 680.922 L1316.97 680.922 L1316.41 680.922 L1315.85 680.922 L1315.29 680.922 L1314.73 680.922 L1314.17 680.922 L1313.61 680.922 L1313.05 680.922 L1312.49 680.922 L1311.93 680.922 L1311.38 680.922 L1310.82 680.922 L1310.26 680.922 L1309.7 680.922 L1309.14 680.922 L1308.58 680.922 L1308.02 680.922 L1307.46 680.922 L1306.9 680.922 L1306.34 680.922 L1305.78 680.922 L1305.22 680.922 L1304.66 680.922 L1304.1 680.922 L1303.55 680.922 L1302.99 680.922 L1302.43 680.922 L1301.87 680.922 L1301.31 680.922 L1300.75 680.922 L1300.19 680.922 L1299.63 680.922 L1299.07 680.922 L1298.51 680.922 L1297.95 680.922 L1297.39 680.922 L1296.83 680.922 L1296.28 680.922 L1295.72 680.922 L1295.16 680.922 L1294.6 680.922 L1294.04 680.922 L1293.48 680.922 L1292.92 680.922 L1292.36 680.922 L1291.8 680.922 L1291.24 680.922 L1290.68 680.922 L1290.12 680.922 L1289.56 680.922 L1289 680.922 L1288.45 680.922 L1287.89 680.922 L1287.33 680.922 L1286.77 680.922 L1286.21 680.922 L1285.65 680.922 L1285.09 680.922 L1284.53 680.922 L1283.97 680.922 L1283.41 680.922 L1282.85 680.922 L1282.29 680.922 L1281.73 680.922 L1281.18 680.922 L1280.62 680.922 L1280.06 680.922 L1279.5 680.922 L1278.94 680.922 L1278.38 680.922 L1277.82 680.922 L1277.26 680.922 L1276.7 680.922 L1276.14 680.922 L1275.58 680.922 L1275.02 680.922 L1274.46 680.922 L1273.91 680.922 L1273.35 680.922 L1272.79 680.922 L1272.23 680.922 L1271.67 680.922 L1271.11 680.922 L1270.55 680.922 L1269.99 680.922 L1269.43 680.922 L1268.87 680.922 L1268.31 680.922 L1267.75 680.922 L1267.19 680.922 L1266.63 680.922 L1266.08 680.922 L1265.52 680.922 L1264.96 680.922 L1264.4 680.922 L1263.84 680.922 L1263.28 680.922 L1262.72 680.922 L1262.16 680.922 L1261.6 680.922 L1261.04 680.922 L1260.48 680.922 L1259.92 680.922 L1259.36 680.922 L1258.81 680.922 L1258.25 680.922 L1257.69 680.922 L1257.13 680.922 L1256.57 680.922 L1256.01 680.922 L1255.45 680.922 L1254.89 680.922 L1254.33 680.922 L1253.77 680.922 L1253.21 680.922 L1252.65 680.922 L1252.09 680.922 L1251.54 680.922 L1250.98 680.922 L1250.42 680.922 L1249.86 680.922 L1249.3 680.922 L1248.74 680.922 L1248.18 680.922 L1247.62 680.922 L1247.06 680.922 L1246.5 680.922 L1245.94 680.922 L1245.38 680.922 L1244.82 680.922 L1244.26 680.922 L1243.71 680.922 L1243.15 680.922 L1242.59 680.922 L1242.03 680.922 L1241.47 680.922 L1240.91 680.922 L1240.35 680.922 L1239.79 680.922 L1239.23 680.922 L1238.67 680.922 L1238.11 680.922 L1237.55 680.922 L1236.99 680.922 L1236.44 680.922 L1235.88 680.922 L1235.32 680.922 L1234.76 680.922 L1234.2 680.922 L1233.64 680.922 L1233.08 680.922 L1232.52 680.922 L1231.96 680.922 L1231.4 680.922 L1230.84 680.922 L1230.28 680.922 L1229.72 680.922 L1229.17 680.922 L1228.61 680.922 L1228.05 680.922 L1227.49 680.922 L1226.93 680.922 L1226.37 680.922 L1225.81 680.922 L1225.25 680.922 L1224.69 680.922 L1224.13 680.922 L1223.57 680.922 L1223.01 680.922 L1222.45 680.922 L1221.89 680.922 L1221.34 680.922 L1220.78 680.922 L1220.22 680.922 L1219.66 680.922 L1219.1 680.922 L1218.54 680.922 L1217.98 680.922 L1217.42 680.922 L1216.86 680.922 L1216.3 680.922 L1215.74 680.922 L1215.18 680.922 L1214.62 680.922 L1214.07 680.922 L1213.51 680.922 L1212.95 680.922 L1212.39 680.922 L1211.83 680.922 L1211.27 680.922 L1210.71 680.922 L1210.15 680.922 L1209.59 680.922 L1209.03 680.922 L1208.47 680.922 L1207.91 680.922 L1207.35 680.922 L1206.8 680.922 L1206.24 680.922 L1205.68 680.922 L1205.12 680.922 L1204.56 680.922 L1204 680.922 L1203.44 680.922 L1202.88 680.922 L1202.32 680.922 L1201.76 680.922 L1201.2 680.922 L1200.64 680.922 L1200.08 680.922 L1199.52 680.922 L1198.97 680.922 L1198.41 680.922 L1197.85 680.922 L1197.29 680.922 L1196.73 680.922 L1196.17 680.922 L1195.61 680.922 L1195.05 680.922 L1194.49 680.922 L1193.93 680.922 L1193.37 680.922 L1192.81 680.922 L1192.25 680.922 L1191.7 680.922 L1191.14 680.922 L1190.58 680.922 L1190.02 680.922 L1189.46 680.922 L1188.9 680.922 L1188.34 680.922 L1187.78 680.922 L1187.22 680.922 L1186.66 680.922 L1186.1 680.922 L1185.54 680.922 L1184.98 680.922 L1184.43 680.922 L1183.87 680.922 L1183.31 680.922 L1182.75 680.922 L1182.19 680.922 L1181.63 680.922 L1181.07 680.922 L1180.51 680.922 L1179.95 680.922 L1179.39 680.922 L1178.83 680.922 L1178.27 680.922 L1177.71 680.922 L1177.15 680.922 L1176.6 680.922 L1176.04 680.922 L1175.48 680.922 L1174.92 680.922 L1174.36 680.922 L1173.8 680.922 L1173.24 680.922 L1172.68 680.922 L1172.12 680.922 L1171.56 680.922 L1171 680.922 L1170.44 680.922 L1169.88 680.922 L1169.33 680.922 L1168.77 680.922 L1168.21 680.922 L1167.65 680.922 L1167.09 680.922 L1166.53 680.922 L1165.97 680.922 L1165.41 680.922 L1164.85 680.922 L1164.29 680.922 L1163.73 680.922 L1163.17 680.922 L1162.61 680.922 L1162.05 680.922 L1161.5 680.922 L1160.94 680.922 L1160.38 680.922 L1159.82 680.922 L1159.26 680.922 L1158.7 680.922 L1158.14 680.922 L1157.58 680.922 L1157.02 680.922 L1156.46 680.922 L1155.9 680.922 L1155.34 680.922 L1154.78 680.922 L1154.23 680.922 L1153.67 680.922 L1153.11 680.922 L1152.55 680.922 L1151.99 680.922 L1151.43 680.922 L1150.87 680.922 L1150.31 680.922 L1149.75 680.922 L1149.19 680.922 L1148.63 680.922 L1148.07 680.922 L1147.51 680.922 L1146.96 680.922 L1146.4 680.922 L1145.84 680.922 L1145.28 680.922 L1144.72 680.922 L1144.16 680.922 L1143.6 680.922 L1143.04 680.922 L1142.48 680.922 L1141.92 680.922 L1141.36 680.922 L1140.8 680.922 L1140.24 680.922 L1139.68 680.922 L1139.13 680.922 L1138.57 680.922 L1138.01 680.922 L1137.45 680.922 L1136.89 680.922 L1136.33 680.922 L1135.77 680.922 L1135.21 680.922 L1134.65 680.922 L1134.09 680.922 L1133.53 680.922 L1132.97 680.922 L1132.41 680.922 L1131.86 680.922 L1131.3 680.922 L1130.74 680.922 L1130.18 680.922 L1129.62 680.922 L1129.06 680.922 L1128.5 680.922 L1127.94 680.922 L1127.38 680.922 L1126.82 680.922 L1126.26 680.922 L1125.7 680.922 L1125.14 680.922 L1124.59 680.922 L1124.03 680.922 L1123.47 680.922 L1122.91 680.922 L1122.35 680.922 L1121.79 680.922 L1121.23 680.922 L1120.67 680.922 L1120.11 680.922 L1119.55 680.922 L1118.99 680.922 L1118.43 680.922 L1117.87 680.922 L1117.31 680.922 L1116.76 680.922 L1116.2 680.922 L1115.64 680.922 L1115.08 680.922 L1114.52 680.922 L1113.96 680.922 L1113.4 680.922 L1112.84 680.922 L1112.28 680.922 L1111.72 680.922 L1111.16 680.922 L1110.6 680.922 L1110.04 680.922 L1109.49 680.922 L1108.93 680.922 L1108.37 680.922 L1107.81 680.922 L1107.25 680.922 L1106.69 680.922 L1106.13 680.922 L1105.57 680.922 L1105.01 680.922 L1104.45 680.922 L1103.89 680.922 L1103.33 680.922 L1102.77 680.922 L1102.22 680.922 L1101.66 680.922 L1101.1 680.922 L1100.54 680.922 L1099.98 680.922 L1099.42 680.922 L1098.86 680.922 L1098.3 680.922 L1097.74 680.922 L1097.18 680.922 L1096.62 680.922 L1096.06 680.922 L1095.5 680.922 L1094.94 680.922 L1094.39 680.922 L1093.83 680.922 L1093.27 680.922 L1092.71 680.922 L1092.15 680.922 L1091.59 680.922 L1091.03 680.922 L1090.47 680.922 L1089.91 680.922 L1089.35 680.922 L1088.79 680.922 L1088.23 680.922 L1087.67 680.922 L1087.12 680.922 L1086.56 680.922 L1086 680.922 L1085.44 680.922 L1084.88 680.922 L1084.32 680.922 L1083.76 680.922 L1083.2 680.922 L1082.64 680.922 L1082.08 680.922 L1081.52 680.922 L1080.96 680.922 L1080.4 680.922 L1079.85 680.922 L1079.29 680.922 L1078.73 680.922 L1078.17 680.922 L1077.61 680.922 L1077.05 680.922 L1076.49 680.922 L1075.93 680.922 L1075.37 680.922 L1074.81 680.922 L1074.25 680.922 L1073.69 680.922 L1073.13 680.922 L1072.57 680.922 L1072.02 680.922 L1071.46 680.922 L1070.9 680.922 L1070.34 680.922 L1069.78 680.922 L1069.22 680.922 L1068.66 680.922 L1068.1 680.922 L1067.54 680.922 L1066.98 680.922 L1066.42 680.922 L1065.86 680.922 L1065.3 680.922 L1064.75 680.922 L1064.19 680.922 L1063.63 680.922 L1063.07 680.922 L1062.51 680.922 L1061.95 680.922 L1061.39 680.922 L1060.83 680.922 L1060.27 680.922 L1059.71 680.922 L1059.15 680.922 L1058.59 680.922 L1058.03 680.922 L1057.48 680.922 L1056.92 680.922 L1056.36 680.922 L1055.8 680.922 L1055.24 680.922 L1054.68 680.922 L1054.12 680.922 L1053.56 680.922 L1053 680.922 L1052.44 680.922 L1051.88 680.922 L1051.32 680.922 L1050.76 680.922 L1050.2 680.922 L1049.65 680.922 L1049.09 680.922 L1048.53 680.922 L1047.97 680.922 L1047.41 680.922 L1046.85 680.922 L1046.29 680.922 L1045.73 680.922 L1045.17 680.922 L1044.61 680.922 L1044.05 680.922 L1043.49 680.922 L1042.93 680.922 L1042.38 680.922 L1041.82 680.922 L1041.26 680.922 L1040.7 680.922 L1040.14 680.922 L1039.58 680.922 L1039.02 680.922 L1038.46 680.922 L1037.9 680.922 L1037.34 680.922 L1036.78 680.922 L1036.22 680.922 L1035.66 680.922 L1035.1 680.922 L1034.55 680.922 L1033.99 680.922 L1033.43 680.922 L1032.87 680.922 L1032.31 680.922 L1031.75 680.922 L1031.19 680.922 L1030.63 680.922 L1030.07 680.922 L1029.51 680.922 L1028.95 680.922 L1028.39 680.922 L1027.83 680.922 L1027.28 680.922 L1026.72 680.922 L1026.16 680.922 L1025.6 680.922 L1025.04 680.922 L1024.48 680.922 L1023.92 680.922 L1023.36 680.922 L1022.8 680.922 L1022.24 680.922 L1021.68 680.922 L1021.12 680.922 L1020.56 680.922 L1020.01 680.922 L1019.45 680.922 L1018.89 680.922 L1018.33 680.922 L1017.77 680.922 L1017.21 680.922 L1016.65 680.922 L1016.09 680.922 L1015.53 680.922 L1014.97 680.922 L1014.41 680.922 L1013.85 680.922 L1013.29 680.922 L1012.73 680.922 L1012.18 680.922 L1011.62 680.922 L1011.06 680.922 L1010.5 680.922 L1009.94 680.922 L1009.38 680.922 L1008.82 680.922 L1008.26 680.922 L1007.7 680.922 L1007.14 680.922 L1006.58 680.922 L1006.02 680.922 L1005.46 680.922 L1004.91 680.922 L1004.35 680.922 L1003.79 680.922 L1003.23 680.922 L1002.67 680.922 L1002.11 680.922 L1001.55 680.922 L1000.99 680.922 L1000.43 680.922 L999.872 680.922 L999.313 680.922 L998.754 680.922 L998.194 680.922 L997.635 680.922 L997.076 680.922 L996.517 680.922 L995.957 680.922 L995.398 680.922 L994.839 680.922 L994.28 680.922 L993.72 680.922 L993.161 680.922 L992.602 680.922 L992.043 680.922 L991.483 680.922 L990.924 680.922 L990.365 680.922 L989.806 680.922 L989.246 680.922 L988.687 680.922 L988.128 680.922 L987.569 680.922 L987.009 680.922 L986.45 680.922 L985.891 680.922 L985.332 680.922 L984.772 680.922 L984.213 680.922 L983.654 680.922 L983.095 680.922 L982.535 680.922 L981.976 680.922 L981.417 680.922 L980.858 680.922 L980.298 680.922 L979.739 680.922 L979.18 680.922 L978.621 680.922 L978.061 680.922 L977.502 680.922 L976.943 680.922 L976.384 680.922 L975.824 680.922 L975.265 680.922 L974.706 680.922 L974.147 680.922 L973.587 680.922 L973.028 680.922 L972.469 680.922 L971.91 680.922 L971.35 680.922 L970.791 680.922 L970.232 680.922 L969.673 680.922 L969.113 680.922 L968.554 680.922 L967.995 680.922 L967.436 680.922 L966.876 680.922 L966.317 680.922 L965.758 680.922 L965.199 680.922 L964.639 680.922 L964.08 680.922 L963.521 680.922 L962.962 680.922 L962.402 680.922 L961.843 680.922 L961.284 680.922 L960.725 680.922 L960.165 680.922 L959.606 680.922 L959.047 680.922 L958.488 680.922 L957.928 680.922 L957.369 680.922 L956.81 680.922 L956.251 680.922 L955.691 680.922 L955.132 680.922 L954.573 680.922 L954.014 680.922 L953.454 680.922 L952.895 680.922 L952.336 680.922 L951.777 680.922 L951.217 680.922 L950.658 680.922 L950.099 680.922 L949.54 680.922 L948.98 680.922 L948.421 680.922 L947.862 680.922 L947.303 680.922 L946.743 680.922 L946.184 680.922 L945.625 680.922 L945.066 680.922 L944.506 680.922 L943.947 680.922 L943.388 680.922 L942.829 680.922 L942.269 680.922 L941.71 680.922 L941.151 680.922 L940.592 680.922 L940.032 680.922 L939.473 680.922 L938.914 680.922 L938.355 680.922 L937.795 680.922 L937.236 680.922 L936.677 680.922 L936.118 680.922 L935.558 680.922 L934.999 680.922 L934.44 680.922 L933.881 680.922 L933.321 680.922 L932.762 680.922 L932.203 680.922 L931.644 680.922 L931.084 680.922 L930.525 680.922 L929.966 680.922 L929.406 680.922 L928.847 680.922 L928.288 680.922 L927.729 680.922 L927.169 680.922 L926.61 680.922 L926.051 680.922 L925.492 680.922 L924.932 680.922 L924.373 680.922 L923.814 680.922 L923.255 680.922 L922.695 680.922 L922.136 680.922 L921.577 680.922 L921.018 680.922 L920.458 680.922 L919.899 680.922 L919.34 680.922 L918.781 680.922 L918.221 680.922 L917.662 680.922 L917.103 680.922 L916.544 680.922 L915.984 680.922 L915.425 680.922 L914.866 680.922 L914.307 680.922 L913.747 680.922 L913.188 680.922 L912.629 680.922 L912.07 680.922 L911.51 680.922 L910.951 680.922 L910.392 680.922 L909.833 680.922 L909.273 680.922 L908.714 680.922 L908.155 680.922 L907.596 680.922 L907.036 680.922 L906.477 680.922 L905.918 680.922 L905.359 680.922 L904.799 680.922 L904.24 680.922 L903.681 680.922 L903.122 680.922 L902.562 680.922 L902.003 680.922 L901.444 680.922 L900.885 680.922 L900.325 680.922 L899.766 680.922 L899.207 680.922 L898.648 680.922 L898.088 680.922 L897.529 680.922 L896.97 680.922 L896.411 680.922 L895.851 680.922 L895.292 680.922 L894.733 680.922 L894.174 680.922 L893.614 680.922 L893.055 680.922 L892.496 680.922 L891.937 680.922 L891.377 680.922 L890.818 680.922 L890.259 680.922 L889.7 680.922 L889.14 680.922 L888.581 680.922 L888.022 680.922 L887.463 680.922 L886.903 680.922 L886.344 680.922 L885.785 680.922 L885.226 680.922 L884.666 680.922 L884.107 680.922 L883.548 680.922 L882.989 680.922 L882.429 680.922 L881.87 680.922 L881.311 680.922 L880.752 680.922 L880.192 680.922 L879.633 680.922 L879.074 680.922 L878.515 680.922 L877.955 680.922 L877.396 680.922 L876.837 680.922 L876.278 680.922 L875.718 680.922 L875.159 680.922 L874.6 680.922 L874.041 680.922 L873.481 680.922 L872.922 680.922 L872.363 680.922 L871.804 680.922 L871.244 680.922 L870.685 680.922 L870.126 680.922 L869.567 680.922 L869.007 680.922 L868.448 680.922 L867.889 680.922 L867.33 680.922 L866.77 680.922 L866.211 680.922 L865.652 680.922 L865.093 680.922 L864.533 680.922 L863.974 680.922 L863.415 680.922 L862.856 680.922 L862.296 680.922 L861.737 680.922 L861.178 680.922 L860.619 680.922 L860.059 680.922 L859.5 680.922 L858.941 680.922 L858.382 680.922 L857.822 680.922 L857.263 680.922 L856.704 680.922 L856.145 680.922 L855.585 680.922 L855.026 680.922 L854.467 680.922 L853.908 680.922 L853.348 680.922 L852.789 680.922 L852.23 680.922 L851.671 680.922 L851.111 680.922 L850.552 680.922 L849.993 680.922 L849.434 680.922 L848.874 680.922 L848.315 680.922 L847.756 680.922 L847.197 680.922 L846.637 680.922 L846.078 680.922 L845.519 680.922 L844.96 680.922 L844.4 680.922 L843.841 680.922 L843.282 680.922 L842.723 680.922 L842.163 680.922 L841.604 680.922 L841.045 680.922 L840.486 680.922 L839.926 680.922 L839.367 680.922 L838.808 680.922 L838.249 680.922 L837.689 680.922 L837.13 680.922 L836.571 680.922 L836.012 680.922 L835.452 680.922 L834.893 680.922 L834.334 680.922 L833.775 680.922 L833.215 680.922 L832.656 680.922 L832.097 680.922 L831.538 680.922 L830.978 680.922 L830.419 680.922 L829.86 680.922 L829.301 680.922 L828.741 680.922 L828.182 680.922 L827.623 680.922 L827.064 680.922 L826.504 680.922 L825.945 680.922 L825.386 680.922 L824.827 680.922 L824.267 680.922 L823.708 680.922 L823.149 680.922 L822.59 680.922 L822.03 680.922 L821.471 680.922 L820.912 680.922 L820.353 680.922 L819.793 680.922 L819.234 680.922 L818.675 680.922 L818.116 680.922 L817.556 680.922 L816.997 680.922 L816.438 680.922 L815.879 680.922 L815.319 680.922 L814.76 680.922 L814.201 680.922 L813.642 680.922 L813.082 680.922 L812.523 680.922 L811.964 680.922 L811.405 680.922 L810.845 680.922 L810.286 680.922 L809.727 680.922 L809.168 680.922 L808.608 680.922 L808.049 680.922 L807.49 680.922 L806.931 680.922 L806.371 680.922 L805.812 680.922 L805.253 680.922 L804.693 680.922 L804.134 680.922 L803.575 680.922 L803.016 680.922 L802.456 680.922 L801.897 680.922 L801.338 680.922 L800.779 680.922 L800.219 680.922 L799.66 680.922 L799.101 680.922 L798.542 680.922 L797.982 680.922 L797.423 680.922 L796.864 680.922 L796.305 680.922 L795.745 680.922 L795.186 680.922 L794.627 680.922 L794.068 680.922 L793.508 680.922 L792.949 680.922 L792.39 680.922 L791.831 680.922 L791.271 680.922 L790.712 680.922 L790.153 680.922 L789.594 680.922 L789.034 680.922 L788.475 680.922 L787.916 680.922 L787.357 680.922 L786.797 680.922 L786.238 680.922 L785.679 680.922 L785.12 680.922 L784.56 680.922 L784.001 680.922 L783.442 680.922 L782.883 680.922 L782.323 680.922 L781.764 680.922 L781.205 680.922 L780.646 680.922 L780.086 680.922 L779.527 680.922 L778.968 680.922 L778.409 680.922 L777.849 680.922 L777.29 680.922 L776.731 680.922 L776.172 680.922 L775.612 680.922 L775.053 680.922 L774.494 680.922 L773.935 680.922 L773.375 680.922 L772.816 680.922 L772.257 680.922 L771.698 680.922 L771.138 680.922 L770.579 680.922 L770.02 680.922 L769.461 680.922 L768.901 680.922 L768.342 680.922 L767.783 680.922 L767.224 680.922 L766.664 680.922 L766.105 680.922 L765.546 680.922 L764.987 680.922 L764.427 680.922 L763.868 680.922 L763.309 680.922 L762.75 680.922 L762.19 680.922 L761.631 680.922 L761.072 680.922 L760.513 680.922 L759.953 680.922 L759.394 680.922 L758.835 680.922 L758.276 680.922 L757.716 680.922 L757.157 680.922 L756.598 680.922 L756.039 680.922 L755.479 680.922 L754.92 680.922 L754.361 680.922 L753.802 680.922 L753.242 680.922 L752.683 680.922 L752.124 680.922 L751.565 680.922 L751.005 680.922 L750.446 680.922 L749.887 680.922 L749.328 680.922 L748.768 680.922 L748.209 680.922 L747.65 680.922 L747.091 680.922 L746.531 680.922 L745.972 680.922 L745.413 680.922 L744.854 680.922 L744.294 680.922 L743.735 680.922 L743.176 680.922 L742.617 680.922 L742.057 680.922 L741.498 680.922 L740.939 680.922 L740.38 680.922 L739.82 680.922 L739.261 680.922 L738.702 680.922 L738.143 680.922 L737.583 680.922 L737.024 680.922 L736.465 680.922 L735.906 680.922 L735.346 680.922 L734.787 680.922 L734.228 680.922 L733.669 680.922 L733.109 680.922 L732.55 680.922 L731.991 680.922 L731.432 680.922 L730.872 680.922 L730.313 680.922 L729.754 680.922 L729.195 680.922 L728.635 680.922 L728.076 680.922 L727.517 680.922 L726.958 680.922 L726.398 680.922 L725.839 680.922 L725.28 680.922 L724.721 680.922 L724.161 680.922 L723.602 680.922 L723.043 680.922 L722.484 680.922 L721.924 680.922 L721.365 680.922 L720.806 680.922 L720.247 680.922  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.73 720.806,685.73 721.365,685.73 721.924,685.73 722.484,685.73 723.043,685.73 723.602,685.73 724.161,685.73 724.721,685.73 725.28,685.73 725.839,685.73 726.398,685.73 726.958,685.73 727.517,685.73 728.076,685.73 728.635,685.73 729.195,685.73 729.754,685.73 730.313,685.73 730.872,685.73 731.432,685.73 731.991,685.73 732.55,685.73 733.109,685.73 733.669,685.73 734.228,685.73 734.787,685.73 735.346,685.73 735.906,685.73 736.465,685.73 737.024,685.73 737.583,685.73 738.143,685.73 738.702,685.73 739.261,685.73 739.82,685.73 740.38,685.73 740.939,685.73 741.498,685.73 742.057,685.73 742.617,685.73 743.176,685.73 743.735,685.73 744.294,685.73 744.854,685.73 745.413,685.73 745.972,685.73 746.531,685.73 747.091,685.73 747.65,685.73 748.209,685.73 748.768,685.73 749.328,685.73 749.887,685.73 750.446,685.73 751.005,685.73 751.565,685.73 752.124,685.73 752.683,685.73 753.242,685.73 753.802,685.73 754.361,685.73 754.92,685.73 755.479,685.73 756.039,685.73 756.598,685.73 757.157,685.73 757.716,685.73 758.276,685.73 758.835,685.73 759.394,685.73 759.953,685.73 760.513,685.73 761.072,685.73 761.631,685.73 762.19,685.73 762.75,685.73 763.309,685.73 763.868,685.73 764.427,685.73 764.987,685.73 765.546,685.73 766.105,685.73 766.664,685.73 767.224,685.73 767.783,685.73 768.342,685.73 768.901,685.73 769.461,685.73 770.02,685.73 770.579,685.73 771.138,685.73 771.698,685.73 772.257,685.73 772.816,685.73 773.375,685.73 773.935,685.73 774.494,685.73 775.053,685.73 775.612,685.73 776.172,685.73 776.731,685.73 777.29,685.73 777.849,685.73 778.409,685.73 778.968,685.73 779.527,685.73 780.086,685.73 780.646,685.73 781.205,685.73 781.764,685.73 782.323,685.73 782.883,685.73 783.442,685.73 784.001,685.73 784.56,685.73 785.12,685.73 785.679,685.73 786.238,685.73 786.797,685.73 787.357,685.73 787.916,685.73 788.475,685.73 789.034,685.73 789.594,685.73 790.153,685.73 790.712,685.73 791.271,685.73 791.831,685.73 792.39,685.73 792.949,685.73 793.508,685.73 794.068,685.73 794.627,685.73 795.186,685.73 795.745,685.73 796.305,685.73 796.864,685.73 797.423,685.73 797.982,685.73 798.542,685.73 799.101,685.73 799.66,685.73 800.219,685.73 800.779,685.73 801.338,685.73 801.897,685.73 802.456,685.73 803.016,685.73 803.575,685.73 804.134,685.73 804.693,685.73 805.253,685.73 805.812,685.73 806.371,685.73 806.931,685.73 807.49,685.73 808.049,685.73 808.608,685.73 809.168,685.73 809.727,685.73 810.286,685.73 810.845,685.73 811.405,685.73 811.964,685.73 812.523,685.73 813.082,685.73 813.642,685.73 814.201,685.73 814.76,685.73 815.319,685.73 815.879,685.73 816.438,685.73 816.997,685.73 817.556,685.73 818.116,685.73 818.675,685.73 819.234,685.73 819.793,685.73 820.353,685.73 820.912,685.73 821.471,685.73 822.03,685.73 822.59,685.73 823.149,685.73 823.708,685.73 824.267,685.73 824.827,685.73 825.386,685.73 825.945,685.73 826.504,685.73 827.064,685.73 827.623,685.73 828.182,685.73 828.741,685.73 829.301,685.73 829.86,685.73 830.419,685.73 830.978,685.73 831.538,685.73 832.097,685.73 832.656,685.73 833.215,685.73 833.775,685.73 834.334,685.73 834.893,685.73 835.452,685.73 836.012,685.73 836.571,685.73 837.13,685.73 837.689,685.73 838.249,685.73 838.808,685.73 839.367,685.73 839.926,685.73 840.486,685.73 841.045,685.73 841.604,685.73 842.163,685.73 842.723,685.73 843.282,685.73 843.841,685.73 844.4,685.73 844.96,685.73 845.519,685.73 846.078,685.73 846.637,685.73 847.197,685.73 847.756,685.73 848.315,685.73 848.874,685.73 849.434,685.73 849.993,685.73 850.552,685.73 851.111,685.73 851.671,685.73 852.23,685.73 852.789,685.73 853.348,685.73 853.908,685.73 854.467,685.73 855.026,685.73 855.585,685.73 856.145,685.73 856.704,685.73 857.263,685.73 857.822,685.73 858.382,685.73 858.941,685.73 859.5,685.73 860.059,685.73 860.619,685.73 861.178,685.73 861.737,685.73 862.296,685.73 862.856,685.73 863.415,685.73 863.974,685.73 864.533,685.73 865.093,685.73 865.652,685.73 866.211,685.73 866.77,685.73 867.33,685.73 867.889,685.73 868.448,685.73 869.007,685.73 869.567,685.73 870.126,685.73 870.685,685.73 871.244,685.73 871.804,685.73 872.363,685.73 872.922,685.73 873.481,685.73 874.041,685.73 874.6,685.73 875.159,685.73 875.718,685.73 876.278,685.73 876.837,685.73 877.396,685.73 877.955,685.73 878.515,685.73 879.074,685.73 879.633,685.73 880.192,685.73 880.752,685.73 881.311,685.73 881.87,685.73 882.429,685.73 882.989,685.73 883.548,685.73 884.107,685.73 884.666,685.73 885.226,685.73 885.785,685.73 886.344,685.73 886.903,685.73 887.463,685.73 888.022,685.73 888.581,685.73 889.14,685.73 889.7,685.73 890.259,685.73 890.818,685.73 891.377,685.73 891.937,685.73 892.496,685.73 893.055,685.73 893.614,685.73 894.174,685.73 894.733,685.73 895.292,685.73 895.851,685.73 896.411,685.73 896.97,685.73 897.529,685.73 898.088,685.73 898.648,685.73 899.207,685.73 899.766,685.73 900.325,685.73 900.885,685.73 901.444,685.73 902.003,685.73 902.562,685.73 903.122,685.73 903.681,685.73 904.24,685.73 904.799,685.73 905.359,685.73 905.918,685.73 906.477,685.73 907.036,685.73 907.596,685.73 908.155,685.73 908.714,685.73 909.273,685.73 909.833,685.73 910.392,685.73 910.951,685.73 911.51,685.73 912.07,685.73 912.629,685.73 913.188,685.73 913.747,685.73 914.307,685.73 914.866,685.73 915.425,685.73 915.984,685.73 916.544,685.73 917.103,685.73 917.662,685.73 918.221,685.73 918.781,685.73 919.34,685.73 919.899,685.73 920.458,685.73 921.018,685.73 921.577,685.73 922.136,685.73 922.695,685.73 923.255,685.73 923.814,685.73 924.373,685.73 924.932,685.73 925.492,685.73 926.051,685.73 926.61,685.73 927.169,685.73 927.729,685.73 928.288,685.73 928.847,685.73 929.406,685.73 929.966,685.73 930.525,685.73 931.084,685.73 931.644,685.73 932.203,685.73 932.762,685.73 933.321,685.73 933.881,685.73 934.44,685.73 934.999,685.73 935.558,685.73 936.118,685.73 936.677,685.73 937.236,685.73 937.795,685.73 938.355,685.73 938.914,685.73 939.473,685.73 940.032,685.73 940.592,685.73 941.151,685.73 941.71,685.73 942.269,685.73 942.829,685.73 943.388,685.73 943.947,685.73 944.506,685.73 945.066,685.73 945.625,685.73 946.184,685.73 946.743,685.73 947.303,685.73 947.862,685.73 948.421,685.73 948.98,685.73 949.54,685.73 950.099,685.73 950.658,685.73 951.217,685.73 951.777,685.73 952.336,685.73 952.895,685.73 953.454,685.73 954.014,685.73 954.573,685.73 955.132,685.73 955.691,685.73 956.251,685.73 956.81,685.73 957.369,685.73 957.928,685.73 958.488,685.73 959.047,685.73 959.606,685.73 960.165,685.73 960.725,685.73 961.284,685.73 961.843,685.73 962.402,685.73 962.962,685.73 963.521,685.73 964.08,685.73 964.639,685.73 965.199,685.73 965.758,685.73 966.317,685.73 966.876,685.73 967.436,685.73 967.995,685.73 968.554,685.73 969.113,685.73 969.673,685.73 970.232,685.73 970.791,685.73 971.35,685.73 971.91,685.73 972.469,685.73 973.028,685.73 973.587,685.73 974.147,685.73 974.706,685.73 975.265,685.73 975.824,685.73 976.384,685.73 976.943,685.73 977.502,685.73 978.061,685.73 978.621,685.73 979.18,685.73 979.739,685.73 980.298,685.73 980.858,685.73 981.417,685.73 981.976,685.73 982.535,685.73 983.095,685.73 983.654,685.73 984.213,685.73 984.772,685.73 985.332,685.73 985.891,685.73 986.45,685.73 987.009,685.73 987.569,685.73 988.128,685.73 988.687,685.73 989.246,685.73 989.806,685.73 990.365,685.73 990.924,685.73 991.483,685.73 992.043,685.73 992.602,685.73 993.161,685.73 993.72,685.73 994.28,685.73 994.839,685.73 995.398,685.73 995.957,685.73 996.517,685.73 997.076,685.73 997.635,685.73 998.194,685.73 998.754,685.73 999.313,685.73 999.872,685.73 1000.43,685.73 1000.99,685.73 1001.55,685.73 1002.11,685.73 1002.67,685.73 1003.23,685.73 1003.79,685.73 1004.35,685.73 1004.91,685.73 1005.46,685.73 1006.02,685.73 1006.58,685.73 1007.14,685.73 1007.7,685.73 1008.26,685.73 1008.82,685.73 1009.38,685.73 1009.94,685.73 1010.5,685.73 1011.06,685.73 1011.62,685.73 1012.18,685.73 1012.73,685.73 1013.29,685.73 1013.85,685.73 1014.41,685.73 1014.97,685.73 1015.53,685.73 1016.09,685.73 1016.65,685.73 1017.21,685.73 1017.77,685.73 1018.33,685.73 1018.89,685.73 1019.45,685.73 1020.01,685.73 1020.56,685.73 1021.12,685.73 1021.68,685.73 1022.24,685.73 1022.8,685.73 1023.36,685.73 1023.92,685.73 1024.48,685.73 1025.04,685.73 1025.6,685.73 1026.16,685.73 1026.72,685.73 1027.28,685.73 1027.83,685.73 1028.39,685.73 1028.95,685.73 1029.51,685.73 1030.07,685.73 1030.63,685.73 1031.19,685.73 1031.75,685.73 1032.31,685.73 1032.87,685.73 1033.43,685.73 1033.99,685.73 1034.55,685.73 1035.1,685.73 1035.66,685.73 1036.22,685.73 1036.78,685.73 1037.34,685.73 1037.9,685.73 1038.46,685.73 1039.02,685.73 1039.58,685.73 1040.14,685.73 1040.7,685.73 1041.26,685.73 1041.82,685.73 1042.38,685.73 1042.93,685.73 1043.49,685.73 1044.05,685.73 1044.61,685.73 1045.17,685.73 1045.73,685.73 1046.29,685.73 1046.85,685.73 1047.41,685.73 1047.97,685.73 1048.53,685.73 1049.09,685.73 1049.65,685.73 1050.2,685.73 1050.76,685.73 1051.32,685.73 1051.88,685.73 1052.44,685.73 1053,685.73 1053.56,685.73 1054.12,685.73 1054.68,685.73 1055.24,685.73 1055.8,685.73 1056.36,685.73 1056.92,685.73 1057.48,685.73 1058.03,685.73 1058.59,685.73 1059.15,685.73 1059.71,685.73 1060.27,685.73 1060.83,685.73 1061.39,685.73 1061.95,685.73 1062.51,685.73 1063.07,685.73 1063.63,685.73 1064.19,685.73 1064.75,685.73 1065.3,685.73 1065.86,685.73 1066.42,685.73 1066.98,685.73 1067.54,685.73 1068.1,685.73 1068.66,685.73 1069.22,685.73 1069.78,685.73 1070.34,685.73 1070.9,685.73 1071.46,685.73 1072.02,685.73 1072.57,685.73 1073.13,685.73 1073.69,685.73 1074.25,685.73 1074.81,685.73 1075.37,685.73 1075.93,685.73 1076.49,685.73 1077.05,685.73 1077.61,685.73 1078.17,685.73 1078.73,685.73 1079.29,685.73 1079.85,685.73 1080.4,685.73 1080.96,685.73 1081.52,685.73 1082.08,685.73 1082.64,685.73 1083.2,685.73 1083.76,685.73 1084.32,685.73 1084.88,685.73 1085.44,685.73 1086,685.73 1086.56,685.73 1087.12,685.73 1087.67,685.73 1088.23,685.73 1088.79,685.73 1089.35,685.73 1089.91,685.73 1090.47,685.73 1091.03,685.73 1091.59,685.73 1092.15,685.73 1092.71,685.73 1093.27,685.73 1093.83,685.73 1094.39,685.73 1094.94,685.73 1095.5,685.73 1096.06,685.73 1096.62,685.73 1097.18,685.73 1097.74,685.73 1098.3,685.73 1098.86,685.73 1099.42,685.73 1099.98,685.73 1100.54,685.73 1101.1,685.73 1101.66,685.73 1102.22,685.73 1102.77,685.73 1103.33,685.73 1103.89,685.73 1104.45,685.73 1105.01,685.73 1105.57,685.73 1106.13,685.73 1106.69,685.73 1107.25,685.73 1107.81,685.73 1108.37,685.73 1108.93,685.73 1109.49,685.73 1110.04,685.73 1110.6,685.73 1111.16,685.73 1111.72,685.73 1112.28,685.73 1112.84,685.73 1113.4,685.73 1113.96,685.73 1114.52,685.73 1115.08,685.73 1115.64,685.73 1116.2,685.73 1116.76,685.73 1117.31,685.73 1117.87,685.73 1118.43,685.73 1118.99,685.73 1119.55,685.73 1120.11,685.73 1120.67,685.73 1121.23,685.73 1121.79,685.73 1122.35,685.73 1122.91,685.73 1123.47,685.73 1124.03,685.73 1124.59,685.73 1125.14,685.73 1125.7,685.73 1126.26,685.73 1126.82,685.73 1127.38,685.73 1127.94,685.73 1128.5,685.73 1129.06,685.73 1129.62,685.73 1130.18,685.73 1130.74,685.73 1131.3,685.73 1131.86,685.73 1132.41,685.73 1132.97,685.73 1133.53,685.73 1134.09,685.73 1134.65,685.73 1135.21,685.73 1135.77,685.73 1136.33,685.73 1136.89,685.73 1137.45,685.73 1138.01,685.73 1138.57,685.73 1139.13,685.73 1139.68,685.73 1140.24,685.73 1140.8,685.73 1141.36,685.73 1141.92,685.73 1142.48,685.73 1143.04,685.73 1143.6,685.73 1144.16,685.73 1144.72,685.73 1145.28,685.73 1145.84,685.73 1146.4,685.73 1146.96,685.73 1147.51,685.73 1148.07,685.73 1148.63,685.73 1149.19,685.73 1149.75,685.73 1150.31,685.73 1150.87,685.73 1151.43,685.73 1151.99,685.73 1152.55,685.73 1153.11,685.73 1153.67,685.73 1154.23,685.73 1154.78,685.73 1155.34,685.73 1155.9,685.73 1156.46,685.73 1157.02,685.73 1157.58,685.73 1158.14,685.73 1158.7,685.73 1159.26,685.73 1159.82,685.73 1160.38,685.73 1160.94,685.73 1161.5,685.73 1162.05,685.73 1162.61,685.73 1163.17,685.73 1163.73,685.73 1164.29,685.73 1164.85,685.73 1165.41,685.73 1165.97,685.73 1166.53,685.73 1167.09,685.73 1167.65,685.73 1168.21,685.73 1168.77,685.73 1169.33,685.73 1169.88,685.73 1170.44,685.73 1171,685.73 1171.56,685.73 1172.12,685.73 1172.68,685.73 1173.24,685.73 1173.8,685.73 1174.36,685.73 1174.92,685.73 1175.48,685.73 1176.04,685.73 1176.6,685.73 1177.15,685.73 1177.71,685.73 1178.27,685.73 1178.83,685.73 1179.39,685.73 1179.95,685.73 1180.51,685.73 1181.07,685.73 1181.63,685.73 1182.19,685.73 1182.75,685.73 1183.31,685.73 1183.87,685.73 1184.43,685.73 1184.98,685.73 1185.54,685.73 1186.1,685.73 1186.66,685.73 1187.22,685.73 1187.78,685.73 1188.34,685.73 1188.9,685.73 1189.46,685.73 1190.02,685.73 1190.58,685.73 1191.14,685.73 1191.7,685.73 1192.25,685.73 1192.81,685.73 1193.37,685.73 1193.93,685.73 1194.49,685.73 1195.05,685.73 1195.61,685.73 1196.17,685.73 1196.73,685.73 1197.29,685.73 1197.85,685.73 1198.41,685.73 1198.97,685.73 1199.52,685.73 1200.08,685.73 1200.64,685.73 1201.2,685.73 1201.76,685.73 1202.32,685.73 1202.88,685.73 1203.44,685.73 1204,685.73 1204.56,685.73 1205.12,685.73 1205.68,685.73 1206.24,685.73 1206.8,685.73 1207.35,685.73 1207.91,685.73 1208.47,685.73 1209.03,685.73 1209.59,685.73 1210.15,685.73 1210.71,685.73 1211.27,685.73 1211.83,685.73 1212.39,685.73 1212.95,685.73 1213.51,685.73 1214.07,685.73 1214.62,685.73 1215.18,685.73 1215.74,685.73 1216.3,685.73 1216.86,685.73 1217.42,685.73 1217.98,685.73 1218.54,685.73 1219.1,685.73 1219.66,685.73 1220.22,685.73 1220.78,685.73 1221.34,685.73 1221.89,685.73 1222.45,685.73 1223.01,685.73 1223.57,685.73 1224.13,685.73 1224.69,685.73 1225.25,685.73 1225.81,685.73 1226.37,685.73 1226.93,685.73 1227.49,685.73 1228.05,685.73 1228.61,685.73 1229.17,685.73 1229.72,685.73 1230.28,685.73 1230.84,685.73 1231.4,685.73 1231.96,685.73 1232.52,685.73 1233.08,685.73 1233.64,685.73 1234.2,685.73 1234.76,685.73 1235.32,685.73 1235.88,685.73 1236.44,685.73 1236.99,685.73 1237.55,685.73 1238.11,685.73 1238.67,685.73 1239.23,685.73 1239.79,685.73 1240.35,685.73 1240.91,685.73 1241.47,685.73 1242.03,685.73 1242.59,685.73 1243.15,685.73 1243.71,685.73 1244.26,685.73 1244.82,685.73 1245.38,685.73 1245.94,685.73 1246.5,685.73 1247.06,685.73 1247.62,685.73 1248.18,685.73 1248.74,685.73 1249.3,685.73 1249.86,685.73 1250.42,685.73 1250.98,685.73 1251.54,685.73 1252.09,685.73 1252.65,685.73 1253.21,685.73 1253.77,685.73 1254.33,685.73 1254.89,685.73 1255.45,685.73 1256.01,685.73 1256.57,685.73 1257.13,685.73 1257.69,685.73 1258.25,685.73 1258.81,685.73 1259.36,685.73 1259.92,685.73 1260.48,685.73 1261.04,685.73 1261.6,685.73 1262.16,685.73 1262.72,685.73 1263.28,685.73 1263.84,685.73 1264.4,685.73 1264.96,685.73 1265.52,685.73 1266.08,685.73 1266.63,685.73 1267.19,685.73 1267.75,685.73 1268.31,685.73 1268.87,685.73 1269.43,685.73 1269.99,685.73 1270.55,685.73 1271.11,685.73 1271.67,685.73 1272.23,685.73 1272.79,685.73 1273.35,685.73 1273.91,685.73 1274.46,685.73 1275.02,685.73 1275.58,685.73 1276.14,685.73 1276.7,685.73 1277.26,685.73 1277.82,685.73 1278.38,685.73 1278.94,685.73 1279.5,685.73 1280.06,685.73 1280.62,685.73 1281.18,685.73 1281.73,685.73 1282.29,685.73 1282.85,685.73 1283.41,685.73 1283.97,685.73 1284.53,685.73 1285.09,685.73 1285.65,685.73 1286.21,685.73 1286.77,685.73 1287.33,685.73 1287.89,685.73 1288.45,685.73 1289,685.73 1289.56,685.73 1290.12,685.73 1290.68,685.73 1291.24,685.73 1291.8,685.73 1292.36,685.73 1292.92,685.73 1293.48,685.73 1294.04,685.73 1294.6,685.73 1295.16,685.73 1295.72,685.73 1296.28,685.73 1296.83,685.73 1297.39,685.73 1297.95,685.73 1298.51,685.73 1299.07,685.73 1299.63,685.73 1300.19,685.73 1300.75,685.73 1301.31,685.73 1301.87,685.73 1302.43,685.73 1302.99,685.73 1303.55,685.73 1304.1,685.73 1304.66,685.73 1305.22,685.73 1305.78,685.73 1306.34,685.73 1306.9,685.73 1307.46,685.73 1308.02,685.73 1308.58,685.73 1309.14,685.73 1309.7,685.73 1310.26,685.73 1310.82,685.73 1311.38,685.73 1311.93,685.73 1312.49,685.73 1313.05,685.73 1313.61,685.73 1314.17,685.73 1314.73,685.73 1315.29,685.73 1315.85,685.73 1316.41,685.73 1316.97,685.73 1317.53,685.73 1318.09,685.73 1318.65,685.73 1319.2,685.73 1319.76,685.73 1320.32,685.73 1320.88,685.73 1321.44,685.73 1322,685.73 1322.56,685.73 1323.12,685.73 1323.68,685.73 1324.24,685.73 1324.8,685.73 1325.36,685.73 1325.92,685.73 1326.47,685.73 1327.03,685.73 1327.59,685.73 1328.15,685.73 1328.71,685.73 1329.27,685.73 1329.83,685.73 1330.39,685.73 1330.95,685.73 1331.51,685.73 1332.07,685.73 1332.63,685.73 1333.19,685.73 1333.75,685.73 1334.3,685.73 1334.86,685.73 1335.42,685.73 1335.98,685.73 1336.54,685.73 1337.1,685.73 1337.66,685.73 1338.22,685.73 1338.78,685.73 1339.34,685.73 1339.9,685.73 1340.46,685.73 1341.02,685.73 1341.57,685.73 1342.13,685.73 1342.69,685.73 1343.25,685.73 1343.81,685.73 1344.37,685.73 1344.93,685.73 1345.49,685.73 1346.05,685.73 1346.61,685.73 1347.17,685.73 1347.73,685.73 1348.29,685.73 1348.84,685.73 1349.4,685.73 1349.96,685.73 1350.52,685.73 1351.08,685.73 1351.64,685.73 1352.2,685.73 1352.76,685.73 1353.32,685.73 1353.88,685.73 1354.44,685.73 1355,685.73 1355.56,685.73 1356.12,685.73 1356.67,685.73 1357.23,685.73 1357.79,685.73 1358.35,685.73 1358.91,685.73 1359.47,685.73 1360.03,685.73 1360.59,685.73 1361.15,685.73 1361.71,685.73 1362.27,685.73 1362.83,685.73 1363.39,685.73 1363.94,685.73 1364.5,685.73 1365.06,685.73 1365.62,685.73 1366.18,685.73 1366.74,685.73 1367.3,685.73 1367.86,685.73 1368.42,685.73 1368.98,685.73 1369.54,685.73 1370.1,685.73 1370.66,685.73 1371.21,685.73 1371.77,685.73 1372.33,685.73 1372.89,685.73 1373.45,685.73 1374.01,685.73 1374.57,685.73 1375.13,685.73 1375.69,685.73 1376.25,685.73 1376.81,685.73 1377.37,685.73 1377.93,685.73 1378.49,685.73 1379.04,685.73 1379.6,685.73 1380.16,685.73 1380.72,685.73 1381.28,685.73 1381.84,685.73 1382.4,685.73 1382.96,685.73 1383.52,685.73 1384.08,685.73 1384.64,685.73 1385.2,685.73 1385.76,685.73 1386.31,685.73 1386.87,685.73 1387.43,685.73 1387.99,685.73 1388.55,685.73 1389.11,685.73 1389.67,685.73 1390.23,685.73 1390.79,685.73 1391.35,685.73 1391.91,685.73 1392.47,685.73 1393.03,685.73 1393.58,685.73 1394.14,685.73 1394.7,685.73 1395.26,685.73 1395.82,685.73 1396.38,685.73 1396.94,685.73 1397.5,685.73 1398.06,685.73 1398.62,685.73 1399.18,685.73 1399.74,685.73 1400.3,685.73 1400.86,685.73 1401.41,685.73 1401.97,685.73 1402.53,685.73 1403.09,685.73 1403.65,685.73 1404.21,685.73 1404.77,685.73 1405.33,685.73 1405.89,685.73 1406.45,685.73 1407.01,685.73 1407.57,685.73 1408.13,685.73 1408.68,685.73 1409.24,685.73 1409.8,685.73 1410.36,685.73 1410.92,685.73 1411.48,685.73 1412.04,685.73 1412.6,685.73 1413.16,685.73 1413.72,685.73 1414.28,685.73 1414.84,685.73 1415.4,685.73 1415.95,685.73 1416.51,685.73 1417.07,685.73 1417.63,685.73 1418.19,685.73 1418.75,685.73 1419.31,685.73 1419.87,685.73 1420.43,685.73 1420.99,685.73 1421.55,685.73 1422.11,685.73 1422.67,685.73 1423.23,685.73 1423.78,685.73 1424.34,685.73 1424.9,685.73 1425.46,685.73 1426.02,685.73 1426.58,685.73 1427.14,685.73 1427.7,685.73 1428.26,685.73 1428.82,685.73 1429.38,685.73 1429.94,685.73 1430.5,685.73 1431.05,685.73 1431.61,685.73 1432.17,685.73 1432.73,685.73 1433.29,685.73 1433.85,685.73 1434.41,685.73 1434.97,685.73 1435.53,685.73 1436.09,685.73 1436.65,685.73 1437.21,685.73 1437.77,685.73 1438.33,685.73 1438.88,685.73 1439.44,685.73 1440,685.73 1440.56,685.73 1441.12,685.73 1441.68,685.73 1442.24,685.73 1442.8,685.73 1443.36,685.73 1443.92,685.73 1444.48,685.73 1445.04,685.73 1445.6,685.73 1446.15,685.73 1446.71,685.73 1447.27,685.73 1447.83,685.73 1448.39,685.73 1448.95,685.73 1449.51,685.73 1450.07,685.73 1450.63,685.73 1451.19,685.73 1451.75,685.73 1452.31,685.73 1452.87,685.73 1453.42,685.73 1453.98,685.73 1454.54,685.73 1455.1,685.73 1455.66,685.73 1456.22,685.73 1456.78,685.73 1457.34,685.73 1457.9,685.73 1458.46,685.73 1459.02,685.73 1459.58,685.73 1460.14,685.73 1460.7,685.73 1461.25,685.73 1461.81,685.73 1462.37,685.73 1462.93,685.73 1463.49,685.73 1464.05,685.73 1464.61,685.73 1465.17,685.73 1465.73,685.73 1466.29,685.73 1466.85,685.73 1467.41,685.73 1467.97,685.73 1468.52,685.73 1469.08,685.73 1469.64,685.73 1470.2,685.73 1470.76,685.73 1471.32,685.73 1471.88,685.73 1472.44,685.73 1473,685.73 1473.56,685.73 1474.12,685.73 1474.68,685.73 1475.24,685.73 1475.79,685.73 1476.35,685.73 1476.91,685.73 1477.47,685.73 1478.03,685.73 1478.59,685.73 1479.15,685.73 1479.71,685.73 1480.27,685.73 1480.83,685.73 1481.39,685.73 1481.95,685.73 1482.51,685.73 1483.07,685.73 1483.62,685.73 1484.18,685.73 1484.74,685.73 1485.3,685.73 1485.86,685.73 1486.42,685.73 1486.98,685.73 1487.54,685.73 1488.1,685.73 1488.66,685.73 1489.22,685.73 1489.78,685.73 1490.34,685.73 1490.89,685.73 1491.45,685.73 1492.01,685.73 1492.57,685.73 1493.13,685.73 1493.69,685.73 1494.25,685.73 1494.81,685.73 1495.37,685.73 1495.93,685.73 1496.49,685.73 1497.05,685.73 1497.61,685.73 1498.16,685.73 1498.72,685.73 1499.28,685.73 1499.84,685.73 1500.4,685.73 1500.96,685.73 1501.52,685.73 1502.08,685.73 1502.64,685.73 1503.2,685.73 1503.76,685.73 1504.32,685.73 1504.88,685.73 1505.44,685.73 1505.99,685.73 1506.55,685.73 1507.11,685.73 1507.67,685.73 1508.23,685.73 1508.79,685.73 1509.35,685.73 1509.91,685.73 1510.47,685.73 1511.03,685.73 1511.59,685.73 1512.15,685.73 1512.71,685.73 1513.26,685.73 1513.82,685.73 1514.38,685.73 1514.94,685.73 1515.5,685.73 1516.06,685.73 1516.62,685.73 1517.18,685.73 1517.74,685.73 1518.3,685.73 1518.86,685.73 1519.42,685.73 1519.98,685.73 1520.53,685.73 1521.09,685.73 1521.65,685.73 1522.21,685.73 1522.77,685.73 1523.33,685.73 1523.89,685.73 1524.45,685.73 1525.01,685.73 1525.57,685.73 1526.13,685.73 1526.69,685.73 1527.25,685.73 1527.81,685.73 1528.36,685.73 1528.92,685.73 1529.48,685.73 1530.04,685.73 1530.6,685.73 1531.16,685.73 1531.72,685.73 1532.28,685.73 1532.84,685.73 1533.4,685.73 1533.96,685.73 1534.52,685.73 1535.08,685.73 1535.63,685.73 1536.19,685.73 1536.75,685.73 1537.31,685.73 1537.87,685.73 1538.43,685.73 1538.99,685.73 1539.55,685.73 1540.11,685.73 1540.67,685.73 1541.23,685.73 1541.79,685.73 1542.35,685.73 1542.9,685.73 1543.46,685.73 1544.02,685.73 1544.58,685.73 1545.14,685.73 1545.7,685.73 1546.26,685.73 1546.82,685.73 1547.38,685.73 1547.94,685.73 1548.5,685.73 1549.06,685.73 1549.62,685.73 1550.18,685.73 1550.73,685.73 1551.29,685.73 1551.85,685.73 1552.41,685.73 1552.97,685.73 1553.53,685.73 1554.09,685.73 1554.65,685.73 1555.21,685.73 1555.77,685.73 1556.33,685.73 1556.89,685.73 1557.45,685.73 1558,685.73 1558.56,685.73 1559.12,685.73 1559.68,685.73 1560.24,685.73 1560.8,685.73 1561.36,685.73 1561.92,685.73 1562.48,685.73 1563.04,685.73 1563.6,685.73 1564.16,685.73 1564.72,685.73 1565.28,685.73 1565.83,685.73 1566.39,685.73 1566.95,685.73 1567.51,685.73 1568.07,685.73 1568.63,685.73 1569.19,685.73 1569.75,685.73 1570.31,685.73 1570.87,685.73 1571.43,685.73 1571.99,685.73 1572.55,685.73 1573.1,685.73 1573.66,685.73 1574.22,685.73 1574.78,685.73 1575.34,685.73 1575.9,685.73 1576.46,685.73 1577.02,685.73 1577.58,685.73 1578.14,685.73 1578.7,685.73 1579.26,685.73 1579.82,685.73 1580.37,685.73 1580.93,685.73 1581.49,685.73 1582.05,685.73 1582.61,685.73 1583.17,685.73 1583.73,685.73 1584.29,685.73 1584.85,685.73 1585.41,685.73 1585.97,685.73 1586.53,685.73 1587.09,685.73 1587.65,685.73 1588.2,685.73 1588.76,685.73 1589.32,685.73 1589.88,685.73 1590.44,685.73 1591,685.73 1591.56,685.73 1592.12,685.73 1592.68,685.73 1593.24,685.73 1593.8,685.73 1594.36,685.73 1594.92,685.73 1595.47,685.73 1596.03,685.73 1596.59,685.73 1597.15,685.73 1597.71,685.73 1598.27,685.73 1598.83,685.73 1599.39,685.73 1599.95,685.73 1600.51,685.73 1601.07,685.73 1601.63,685.73 1602.19,685.73 1602.74,685.73 1603.3,685.73 1603.86,685.73 1604.42,685.73 1604.98,685.73 1605.54,685.73 1606.1,685.73 1606.66,685.73 1607.22,685.73 1607.78,685.73 1608.34,685.73 1608.9,685.73 1609.46,685.73 1610.02,685.73 1610.57,685.73 1611.13,685.73 1611.69,685.73 1612.25,685.73 1612.81,685.73 1613.37,685.73 1613.93,685.73 1614.49,685.73 1615.05,685.73 1615.61,685.73 1616.17,685.73 1616.73,685.73 1617.29,685.73 1617.84,685.73 1618.4,685.73 1618.96,685.73 1619.52,685.73 1620.08,685.73 1620.64,685.73 1621.2,685.73 1621.76,685.73 1622.32,685.73 1622.88,685.73 1623.44,685.73 1624,685.73 1624.56,685.73 1625.11,685.73 1625.67,685.73 1626.23,685.73 1626.79,685.73 1627.35,685.73 1627.91,685.73 1628.47,685.73 1629.03,685.73 1629.59,685.73 1630.15,685.73 1630.71,685.73 1631.27,685.73 1631.83,685.73 1632.39,685.73 1632.94,685.73 1633.5,685.73 1634.06,685.73 1634.62,685.73 1635.18,685.73 1635.74,685.73 1636.3,685.73 1636.86,685.73 1637.42,685.73 1637.98,685.73 1638.54,685.73 1639.1,685.73 1639.66,685.73 1640.21,685.73 1640.77,685.73 1641.33,685.73 1641.89,685.73 1642.45,685.73 1643.01,685.73 1643.57,685.73 1644.13,685.73 1644.69,685.73 1645.25,685.73 1645.81,685.73 1646.37,685.73 1646.93,685.73 1647.48,685.73 1648.04,685.73 1648.6,685.73 1649.16,685.73 1649.72,685.73 1650.28,685.73 1650.84,685.73 1651.4,685.73 1651.96,685.73 1652.52,685.73 1653.08,685.73 1653.64,685.73 1654.2,685.73 1654.76,685.73 1655.31,685.73 1655.87,685.73 1656.43,685.73 1656.99,685.73 1657.55,685.73 1658.11,685.73 1658.67,685.73 1659.23,685.73 1659.79,685.73 1660.35,685.73 1660.91,685.73 1661.47,685.73 1662.03,685.73 1662.58,685.73 1663.14,685.73 1663.7,685.73 1664.26,685.73 1664.82,685.73 1665.38,685.73 1665.94,685.73 1666.5,685.73 1667.06,685.73 1667.62,685.73 1668.18,685.73 1668.74,685.73 1669.3,685.73 1669.85,685.73 1670.41,685.73 1670.97,685.73 1671.53,685.73 1672.09,685.73 1672.65,685.73 1673.21,685.73 1673.77,685.73 1674.33,685.73 1674.89,685.73 1675.45,685.73 1676.01,685.73 1676.57,685.73 1677.13,685.73 1677.68,685.73 1678.24,685.73 1678.8,685.73 1679.36,685.73 1679.92,685.73 1680.48,685.73 1681.04,685.73 1681.6,685.73 1682.16,685.73 1682.72,685.73 1683.28,685.73 1683.84,685.73 1684.4,685.73 1684.95,685.73 1685.51,685.73 1686.07,685.73 1686.63,685.73 1687.19,685.73 1687.75,685.73 1688.31,685.73 1688.87,685.73 1689.43,685.73 1689.99,685.73 1690.55,685.73 1691.11,685.73 1691.67,685.73 1692.23,685.73 1692.78,685.73 1693.34,685.73 1693.9,685.73 1694.46,685.73 1695.02,685.73 1695.58,685.73 1696.14,685.73 1696.7,685.73 1697.26,685.73 1697.82,685.73 1698.38,685.73 1698.94,685.73 1699.5,685.73 1700.05,685.73 1700.61,685.73 1701.17,685.73 1701.73,685.73 1702.29,685.73 1702.85,685.73 1703.41,685.73 1703.97,685.73 1704.53,685.73 1705.09,685.73 1705.65,685.73 1706.21,685.73 1706.77,685.73 1707.32,685.73 1707.88,685.73 1708.44,685.73 1709,685.73 1709.56,685.73 1710.12,685.73 1710.68,685.73 1711.24,685.73 1711.8,685.73 1712.36,685.73 1712.92,685.73 1713.48,685.73 1714.04,685.73 1714.6,685.73 1715.15,685.73 1715.71,685.73 1716.27,685.73 1716.83,685.73 1717.39,685.73 1717.95,685.73 1718.51,685.73 1719.07,685.73 1719.63,685.73 1720.19,685.73 1720.75,685.73 1721.31,685.73 1721.87,685.73 1722.42,685.73 1722.98,685.73 1723.54,685.73 1724.1,685.73 1724.66,685.73 1725.22,685.73 1725.78,685.73 1726.34,685.73 1726.9,685.73 1727.46,685.73 1728.02,685.73 1728.58,685.73 1729.14,685.73 1729.69,685.73 1730.25,685.73 1730.81,685.73 1731.37,685.73 1731.93,685.73 1732.49,685.73 1733.05,685.73 1733.61,685.73 1734.17,685.73 1734.73,685.73 1735.29,685.73 1735.85,685.73 1736.41,685.73 1736.97,685.73 1737.52,685.73 1738.08,685.73 1738.64,685.73 1739.2,685.73 1739.76,685.73 1740.32,685.73 1740.88,685.73 1741.44,685.73 1742,685.73 1742.56,685.73 1743.12,685.73 1743.68,685.73 1744.24,685.73 1744.79,685.73 1745.35,685.73 1745.91,685.73 1746.47,685.73 1747.03,685.73 1747.59,685.73 1748.15,685.73 1748.71,685.73 1749.27,685.73 1749.83,685.73 1750.39,685.73 1750.95,685.73 1751.51,685.73 1752.06,685.73 1752.62,685.73 1753.18,685.73 1753.74,685.73 1754.3,685.73 1754.86,685.73 1755.42,685.73 1755.98,685.73 1756.54,685.73 1757.1,685.73 1757.66,685.73 1758.22,685.73 1758.78,685.73 1759.34,685.73 1759.89,685.73 1760.45,685.73 1761.01,685.73 1761.57,685.73 1762.13,685.73 1762.69,685.73 1763.25,685.73 1763.81,685.73 1764.37,685.73 1764.93,685.73 1765.49,685.73 1766.05,685.73 1766.61,685.73 1767.16,685.73 1767.72,685.73 1768.28,685.73 1768.84,685.73 1769.4,685.73 1769.96,685.73 1770.52,685.73 1771.08,685.73 1771.64,685.73 1772.2,685.73 1772.76,685.73 1773.32,685.73 1773.88,685.73 1774.43,685.73 1774.99,685.73 1775.55,685.73 1776.11,685.73 1776.67,685.73 1777.23,685.73 1777.79,685.73 1778.35,685.73 1778.91,685.73 1779.47,685.73 1780.03,685.73 1780.59,685.73 1781.15,685.73 1781.71,685.73 1782.26,685.73 1782.82,685.73 1783.38,685.73 1783.94,685.73 1784.5,685.73 1785.06,685.73 1785.62,685.73 1786.18,685.73 1786.74,685.73 1787.3,685.73 1787.86,685.73 1788.42,685.73 1788.98,685.73 1789.53,685.73 1790.09,685.73 1790.65,685.73 1791.21,685.73 1791.77,685.73 1792.33,685.73 1792.89,685.73 1793.45,685.73 1794.01,685.73 1794.57,685.73 1795.13,685.73 1795.69,685.73 1796.25,685.73 1796.8,685.73 1797.36,685.73 1797.92,685.73 1798.48,685.73 1799.04,685.73 1799.6,685.73 1800.16,685.73 1800.72,685.73 1801.28,685.73 1801.84,685.73 1802.4,685.73 1802.96,685.73 1803.52,685.73 1804.08,685.73 1804.63,685.73 1805.19,685.73 1805.75,685.73 1806.31,685.73 1806.87,685.73 1807.43,685.73 1807.99,685.73 1808.55,685.73 1809.11,685.73 1809.67,685.73 1810.23,685.73 1810.79,685.73 1811.35,685.73 1811.9,685.73 1812.46,685.73 1813.02,685.73 1813.58,685.73 1814.14,685.73 1814.7,685.73 1815.26,685.73 1815.82,685.73 1816.38,685.73 1816.94,685.73 1817.5,685.73 1818.06,685.73 1818.62,685.73 1819.18,685.73 1819.73,685.73 1820.29,685.73 1820.85,685.73 1821.41,685.73 1821.97,685.73 1822.53,685.73 1823.09,685.73 1823.65,685.73 1824.21,685.73 1824.77,685.73 1825.33,685.73 1825.89,685.73 1826.45,685.73 1827,685.73 1827.56,685.73 1828.12,685.73 1828.68,685.73 1829.24,685.73 1829.8,685.73 1830.36,685.73 1830.92,685.73 1831.48,685.73 1832.04,685.73 1832.6,685.73 1833.16,685.73 1833.72,685.73 1834.27,685.73 1834.83,685.73 1835.39,685.73 1835.95,685.73 1836.51,685.73 1837.07,685.73 1837.63,685.73 1838.19,685.73 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 684.98 L720.806 684.98 L721.365 684.98 L721.924 684.98 L722.484 684.98 L723.043 684.98 L723.602 684.98 L724.161 684.98 L724.721 684.98 L725.28 684.98 L725.839 684.98 L726.398 684.98 L726.958 684.98 L727.517 684.98 L728.076 684.98 L728.635 684.98 L729.195 684.98 L729.754 684.98 L730.313 684.98 L730.872 684.98 L731.432 684.98 L731.991 684.98 L732.55 684.98 L733.109 684.98 L733.669 684.98 L734.228 684.98 L734.787 684.98 L735.346 684.98 L735.906 684.98 L736.465 684.98 L737.024 684.98 L737.583 684.98 L738.143 684.98 L738.702 684.98 L739.261 684.98 L739.82 684.98 L740.38 684.98 L740.939 684.98 L741.498 684.98 L742.057 684.98 L742.617 684.98 L743.176 684.98 L743.735 684.98 L744.294 684.98 L744.854 684.98 L745.413 684.98 L745.972 684.98 L746.531 684.98 L747.091 684.98 L747.65 684.98 L748.209 684.98 L748.768 684.98 L749.328 684.98 L749.887 684.98 L750.446 684.98 L751.005 684.98 L751.565 684.98 L752.124 684.98 L752.683 684.98 L753.242 684.98 L753.802 684.98 L754.361 684.98 L754.92 684.98 L755.479 684.98 L756.039 684.98 L756.598 684.98 L757.157 684.98 L757.716 684.98 L758.276 684.98 L758.835 684.98 L759.394 684.98 L759.953 684.98 L760.513 684.98 L761.072 684.98 L761.631 684.98 L762.19 684.98 L762.75 684.98 L763.309 684.98 L763.868 684.98 L764.427 684.98 L764.987 684.98 L765.546 684.98 L766.105 684.98 L766.664 684.98 L767.224 684.98 L767.783 684.98 L768.342 684.98 L768.901 684.98 L769.461 684.98 L770.02 684.98 L770.579 684.98 L771.138 684.98 L771.698 684.98 L772.257 684.98 L772.816 684.98 L773.375 684.98 L773.935 684.98 L774.494 684.98 L775.053 684.98 L775.612 684.98 L776.172 684.98 L776.731 684.98 L777.29 684.98 L777.849 684.98 L778.409 684.98 L778.968 684.98 L779.527 684.98 L780.086 684.98 L780.646 684.98 L781.205 684.98 L781.764 684.98 L782.323 684.98 L782.883 684.98 L783.442 684.98 L784.001 684.98 L784.56 684.98 L785.12 684.98 L785.679 684.98 L786.238 684.98 L786.797 684.98 L787.357 684.98 L787.916 684.98 L788.475 684.98 L789.034 684.98 L789.594 684.98 L790.153 684.98 L790.712 684.98 L791.271 684.98 L791.831 684.98 L792.39 684.98 L792.949 684.98 L793.508 684.98 L794.068 684.98 L794.627 684.98 L795.186 684.98 L795.745 684.98 L796.305 684.98 L796.864 684.98 L797.423 684.98 L797.982 684.98 L798.542 684.98 L799.101 684.98 L799.66 684.98 L800.219 684.98 L800.779 684.98 L801.338 684.98 L801.897 684.98 L802.456 684.98 L803.016 684.98 L803.575 684.98 L804.134 684.98 L804.693 684.98 L805.253 684.98 L805.812 684.98 L806.371 684.98 L806.931 684.98 L807.49 684.98 L808.049 684.98 L808.608 684.98 L809.168 684.98 L809.727 684.98 L810.286 684.98 L810.845 684.98 L811.405 684.98 L811.964 684.98 L812.523 684.98 L813.082 684.98 L813.642 684.98 L814.201 684.98 L814.76 684.98 L815.319 684.98 L815.879 684.98 L816.438 684.98 L816.997 684.98 L817.556 684.98 L818.116 684.98 L818.675 684.98 L819.234 684.98 L819.793 684.98 L820.353 684.98 L820.912 684.98 L821.471 684.98 L822.03 684.98 L822.59 684.98 L823.149 684.98 L823.708 684.98 L824.267 684.98 L824.827 684.98 L825.386 684.98 L825.945 684.98 L826.504 684.98 L827.064 684.98 L827.623 684.98 L828.182 684.98 L828.741 684.98 L829.301 684.98 L829.86 684.98 L830.419 684.98 L830.978 684.98 L831.538 684.98 L832.097 684.98 L832.656 684.98 L833.215 684.98 L833.775 684.98 L834.334 684.98 L834.893 684.98 L835.452 684.98 L836.012 684.98 L836.571 684.98 L837.13 684.98 L837.689 684.98 L838.249 684.98 L838.808 684.98 L839.367 684.98 L839.926 684.98 L840.486 684.98 L841.045 684.98 L841.604 684.98 L842.163 684.98 L842.723 684.98 L843.282 684.98 L843.841 684.98 L844.4 684.98 L844.96 684.98 L845.519 684.98 L846.078 684.98 L846.637 684.98 L847.197 684.98 L847.756 684.98 L848.315 684.98 L848.874 684.98 L849.434 684.98 L849.993 684.98 L850.552 684.98 L851.111 684.98 L851.671 684.98 L852.23 684.98 L852.789 684.98 L853.348 684.98 L853.908 684.98 L854.467 684.98 L855.026 684.98 L855.585 684.98 L856.145 684.98 L856.704 684.98 L857.263 684.98 L857.822 684.98 L858.382 684.98 L858.941 684.98 L859.5 684.98 L860.059 684.98 L860.619 684.98 L861.178 684.98 L861.737 684.98 L862.296 684.98 L862.856 684.98 L863.415 684.98 L863.974 684.98 L864.533 684.98 L865.093 684.98 L865.652 684.98 L866.211 684.98 L866.77 684.98 L867.33 684.98 L867.889 684.98 L868.448 684.98 L869.007 684.98 L869.567 684.98 L870.126 684.98 L870.685 684.98 L871.244 684.98 L871.804 684.98 L872.363 684.98 L872.922 684.98 L873.481 684.98 L874.041 684.98 L874.6 684.98 L875.159 684.98 L875.718 684.98 L876.278 684.98 L876.837 684.98 L877.396 684.98 L877.955 684.98 L878.515 684.98 L879.074 684.98 L879.633 684.98 L880.192 684.98 L880.752 684.98 L881.311 684.98 L881.87 684.98 L882.429 684.98 L882.989 684.98 L883.548 684.98 L884.107 684.98 L884.666 684.98 L885.226 684.98 L885.785 684.98 L886.344 684.98 L886.903 684.98 L887.463 684.98 L888.022 684.98 L888.581 684.98 L889.14 684.98 L889.7 684.98 L890.259 684.98 L890.818 684.98 L891.377 684.98 L891.937 684.98 L892.496 684.98 L893.055 684.98 L893.614 684.98 L894.174 684.98 L894.733 684.98 L895.292 684.98 L895.851 684.98 L896.411 684.98 L896.97 684.98 L897.529 684.98 L898.088 684.98 L898.648 684.98 L899.207 684.98 L899.766 684.98 L900.325 684.98 L900.885 684.98 L901.444 684.98 L902.003 684.98 L902.562 684.98 L903.122 684.98 L903.681 684.98 L904.24 684.98 L904.799 684.98 L905.359 684.98 L905.918 684.98 L906.477 684.98 L907.036 684.98 L907.596 684.98 L908.155 684.98 L908.714 684.98 L909.273 684.98 L909.833 684.98 L910.392 684.98 L910.951 684.98 L911.51 684.98 L912.07 684.98 L912.629 684.98 L913.188 684.98 L913.747 684.98 L914.307 684.98 L914.866 684.98 L915.425 684.98 L915.984 684.98 L916.544 684.98 L917.103 684.98 L917.662 684.98 L918.221 684.98 L918.781 684.98 L919.34 684.98 L919.899 684.98 L920.458 684.98 L921.018 684.98 L921.577 684.98 L922.136 684.98 L922.695 684.98 L923.255 684.98 L923.814 684.98 L924.373 684.98 L924.932 684.98 L925.492 684.98 L926.051 684.98 L926.61 684.98 L927.169 684.98 L927.729 684.98 L928.288 684.98 L928.847 684.98 L929.406 684.98 L929.966 684.98 L930.525 684.98 L931.084 684.98 L931.644 684.98 L932.203 684.98 L932.762 684.98 L933.321 684.98 L933.881 684.98 L934.44 684.98 L934.999 684.98 L935.558 684.98 L936.118 684.98 L936.677 684.98 L937.236 684.98 L937.795 684.98 L938.355 684.98 L938.914 684.98 L939.473 684.98 L940.032 684.98 L940.592 684.98 L941.151 684.98 L941.71 684.98 L942.269 684.98 L942.829 684.98 L943.388 684.98 L943.947 684.98 L944.506 684.98 L945.066 684.98 L945.625 684.98 L946.184 684.98 L946.743 684.98 L947.303 684.98 L947.862 684.98 L948.421 684.98 L948.98 684.98 L949.54 684.98 L950.099 684.98 L950.658 684.98 L951.217 684.98 L951.777 684.98 L952.336 684.98 L952.895 684.98 L953.454 684.98 L954.014 684.98 L954.573 684.98 L955.132 684.98 L955.691 684.98 L956.251 684.98 L956.81 684.98 L957.369 684.98 L957.928 684.98 L958.488 684.98 L959.047 684.98 L959.606 684.98 L960.165 684.98 L960.725 684.98 L961.284 684.98 L961.843 684.98 L962.402 684.98 L962.962 684.98 L963.521 684.98 L964.08 684.98 L964.639 684.98 L965.199 684.98 L965.758 684.98 L966.317 684.98 L966.876 684.98 L967.436 684.98 L967.995 684.98 L968.554 684.98 L969.113 684.98 L969.673 684.98 L970.232 684.98 L970.791 684.98 L971.35 684.98 L971.91 684.98 L972.469 684.98 L973.028 684.98 L973.587 684.98 L974.147 684.98 L974.706 684.98 L975.265 684.98 L975.824 684.98 L976.384 684.98 L976.943 684.98 L977.502 684.98 L978.061 684.98 L978.621 684.98 L979.18 684.98 L979.739 684.98 L980.298 684.98 L980.858 684.98 L981.417 684.98 L981.976 684.98 L982.535 684.98 L983.095 684.98 L983.654 684.98 L984.213 684.98 L984.772 684.98 L985.332 684.98 L985.891 684.98 L986.45 684.98 L987.009 684.98 L987.569 684.98 L988.128 684.98 L988.687 684.98 L989.246 684.98 L989.806 684.98 L990.365 684.98 L990.924 684.98 L991.483 684.98 L992.043 684.98 L992.602 684.98 L993.161 684.98 L993.72 684.98 L994.28 684.98 L994.839 684.98 L995.398 684.98 L995.957 684.98 L996.517 684.98 L997.076 684.98 L997.635 684.98 L998.194 684.98 L998.754 684.98 L999.313 684.98 L999.872 684.98 L1000.43 684.98 L1000.99 684.98 L1001.55 684.98 L1002.11 684.98 L1002.67 684.98 L1003.23 684.98 L1003.79 684.98 L1004.35 684.98 L1004.91 684.98 L1005.46 684.98 L1006.02 684.98 L1006.58 684.98 L1007.14 684.98 L1007.7 684.98 L1008.26 684.98 L1008.82 684.98 L1009.38 684.98 L1009.94 684.98 L1010.5 684.98 L1011.06 684.98 L1011.62 684.98 L1012.18 684.98 L1012.73 684.98 L1013.29 684.98 L1013.85 684.98 L1014.41 684.98 L1014.97 684.98 L1015.53 684.98 L1016.09 684.98 L1016.65 684.98 L1017.21 684.98 L1017.77 684.98 L1018.33 684.98 L1018.89 684.98 L1019.45 684.98 L1020.01 684.98 L1020.56 684.98 L1021.12 684.98 L1021.68 684.98 L1022.24 684.98 L1022.8 684.98 L1023.36 684.98 L1023.92 684.98 L1024.48 684.98 L1025.04 684.98 L1025.6 684.98 L1026.16 684.98 L1026.72 684.98 L1027.28 684.98 L1027.83 684.98 L1028.39 684.98 L1028.95 684.98 L1029.51 684.98 L1030.07 684.98 L1030.63 684.98 L1031.19 684.98 L1031.75 684.98 L1032.31 684.98 L1032.87 684.98 L1033.43 684.98 L1033.99 684.98 L1034.55 684.98 L1035.1 684.98 L1035.66 684.98 L1036.22 684.98 L1036.78 684.98 L1037.34 684.98 L1037.9 684.98 L1038.46 684.98 L1039.02 684.98 L1039.58 684.98 L1040.14 684.98 L1040.7 684.98 L1041.26 684.98 L1041.82 684.98 L1042.38 684.98 L1042.93 684.98 L1043.49 684.98 L1044.05 684.98 L1044.61 684.98 L1045.17 684.98 L1045.73 684.98 L1046.29 684.98 L1046.85 684.98 L1047.41 684.98 L1047.97 684.98 L1048.53 684.98 L1049.09 684.98 L1049.65 684.98 L1050.2 684.98 L1050.76 684.98 L1051.32 684.98 L1051.88 684.98 L1052.44 684.98 L1053 684.98 L1053.56 684.98 L1054.12 684.98 L1054.68 684.98 L1055.24 684.98 L1055.8 684.98 L1056.36 684.98 L1056.92 684.98 L1057.48 684.98 L1058.03 684.98 L1058.59 684.98 L1059.15 684.98 L1059.71 684.98 L1060.27 684.98 L1060.83 684.98 L1061.39 684.98 L1061.95 684.98 L1062.51 684.98 L1063.07 684.98 L1063.63 684.98 L1064.19 684.98 L1064.75 684.98 L1065.3 684.98 L1065.86 684.98 L1066.42 684.98 L1066.98 684.98 L1067.54 684.98 L1068.1 684.98 L1068.66 684.98 L1069.22 684.98 L1069.78 684.98 L1070.34 684.98 L1070.9 684.98 L1071.46 684.98 L1072.02 684.98 L1072.57 684.98 L1073.13 684.98 L1073.69 684.98 L1074.25 684.98 L1074.81 684.98 L1075.37 684.98 L1075.93 684.98 L1076.49 684.98 L1077.05 684.98 L1077.61 684.98 L1078.17 684.98 L1078.73 684.98 L1079.29 684.98 L1079.85 684.98 L1080.4 684.98 L1080.96 684.98 L1081.52 684.98 L1082.08 684.98 L1082.64 684.98 L1083.2 684.98 L1083.76 684.98 L1084.32 684.98 L1084.88 684.98 L1085.44 684.98 L1086 684.98 L1086.56 684.98 L1087.12 684.98 L1087.67 684.98 L1088.23 684.98 L1088.79 684.98 L1089.35 684.98 L1089.91 684.98 L1090.47 684.98 L1091.03 684.98 L1091.59 684.98 L1092.15 684.98 L1092.71 684.98 L1093.27 684.98 L1093.83 684.98 L1094.39 684.98 L1094.94 684.98 L1095.5 684.98 L1096.06 684.98 L1096.62 684.98 L1097.18 684.98 L1097.74 684.98 L1098.3 684.98 L1098.86 684.98 L1099.42 684.98 L1099.98 684.98 L1100.54 684.98 L1101.1 684.98 L1101.66 684.98 L1102.22 684.98 L1102.77 684.98 L1103.33 684.98 L1103.89 684.98 L1104.45 684.98 L1105.01 684.98 L1105.57 684.98 L1106.13 684.98 L1106.69 684.98 L1107.25 684.98 L1107.81 684.98 L1108.37 684.98 L1108.93 684.98 L1109.49 684.98 L1110.04 684.98 L1110.6 684.98 L1111.16 684.98 L1111.72 684.98 L1112.28 684.98 L1112.84 684.98 L1113.4 684.98 L1113.96 684.98 L1114.52 684.98 L1115.08 684.98 L1115.64 684.98 L1116.2 684.98 L1116.76 684.98 L1117.31 684.98 L1117.87 684.98 L1118.43 684.98 L1118.99 684.98 L1119.55 684.98 L1120.11 684.98 L1120.67 684.98 L1121.23 684.98 L1121.79 684.98 L1122.35 684.98 L1122.91 684.98 L1123.47 684.98 L1124.03 684.98 L1124.59 684.98 L1125.14 684.98 L1125.7 684.98 L1126.26 684.98 L1126.82 684.98 L1127.38 684.98 L1127.94 684.98 L1128.5 684.98 L1129.06 684.98 L1129.62 684.98 L1130.18 684.98 L1130.74 684.98 L1131.3 684.98 L1131.86 684.98 L1132.41 684.98 L1132.97 684.98 L1133.53 684.98 L1134.09 684.98 L1134.65 684.98 L1135.21 684.98 L1135.77 684.98 L1136.33 684.98 L1136.89 684.98 L1137.45 684.98 L1138.01 684.98 L1138.57 684.98 L1139.13 684.98 L1139.68 684.98 L1140.24 684.98 L1140.8 684.98 L1141.36 684.98 L1141.92 684.98 L1142.48 684.98 L1143.04 684.98 L1143.6 684.98 L1144.16 684.98 L1144.72 684.98 L1145.28 684.98 L1145.84 684.98 L1146.4 684.98 L1146.96 684.98 L1147.51 684.98 L1148.07 684.98 L1148.63 684.98 L1149.19 684.98 L1149.75 684.98 L1150.31 684.98 L1150.87 684.98 L1151.43 684.98 L1151.99 684.98 L1152.55 684.98 L1153.11 684.98 L1153.67 684.98 L1154.23 684.98 L1154.78 684.98 L1155.34 684.98 L1155.9 684.98 L1156.46 684.98 L1157.02 684.98 L1157.58 684.98 L1158.14 684.98 L1158.7 684.98 L1159.26 684.98 L1159.82 684.98 L1160.38 684.98 L1160.94 684.98 L1161.5 684.98 L1162.05 684.98 L1162.61 684.98 L1163.17 684.98 L1163.73 684.98 L1164.29 684.98 L1164.85 684.98 L1165.41 684.98 L1165.97 684.98 L1166.53 684.98 L1167.09 684.98 L1167.65 684.98 L1168.21 684.98 L1168.77 684.98 L1169.33 684.98 L1169.88 684.98 L1170.44 684.98 L1171 684.98 L1171.56 684.98 L1172.12 684.98 L1172.68 684.98 L1173.24 684.98 L1173.8 684.98 L1174.36 684.98 L1174.92 684.98 L1175.48 684.98 L1176.04 684.98 L1176.6 684.98 L1177.15 684.98 L1177.71 684.98 L1178.27 684.98 L1178.83 684.98 L1179.39 684.98 L1179.95 684.98 L1180.51 684.98 L1181.07 684.98 L1181.63 684.98 L1182.19 684.98 L1182.75 684.98 L1183.31 684.98 L1183.87 684.98 L1184.43 684.98 L1184.98 684.98 L1185.54 684.98 L1186.1 684.98 L1186.66 684.98 L1187.22 684.98 L1187.78 684.98 L1188.34 684.98 L1188.9 684.98 L1189.46 684.98 L1190.02 684.98 L1190.58 684.98 L1191.14 684.98 L1191.7 684.98 L1192.25 684.98 L1192.81 684.98 L1193.37 684.98 L1193.93 684.98 L1194.49 684.98 L1195.05 684.98 L1195.61 684.98 L1196.17 684.98 L1196.73 684.98 L1197.29 684.98 L1197.85 684.98 L1198.41 684.98 L1198.97 684.98 L1199.52 684.98 L1200.08 684.98 L1200.64 684.98 L1201.2 684.98 L1201.76 684.98 L1202.32 684.98 L1202.88 684.98 L1203.44 684.98 L1204 684.98 L1204.56 684.98 L1205.12 684.98 L1205.68 684.98 L1206.24 684.98 L1206.8 684.98 L1207.35 684.98 L1207.91 684.98 L1208.47 684.98 L1209.03 684.98 L1209.59 684.98 L1210.15 684.98 L1210.71 684.98 L1211.27 684.98 L1211.83 684.98 L1212.39 684.98 L1212.95 684.98 L1213.51 684.98 L1214.07 684.98 L1214.62 684.98 L1215.18 684.98 L1215.74 684.98 L1216.3 684.98 L1216.86 684.98 L1217.42 684.98 L1217.98 684.98 L1218.54 684.98 L1219.1 684.98 L1219.66 684.98 L1220.22 684.98 L1220.78 684.98 L1221.34 684.98 L1221.89 684.98 L1222.45 684.98 L1223.01 684.98 L1223.57 684.98 L1224.13 684.98 L1224.69 684.98 L1225.25 684.98 L1225.81 684.98 L1226.37 684.98 L1226.93 684.98 L1227.49 684.98 L1228.05 684.98 L1228.61 684.98 L1229.17 684.98 L1229.72 684.98 L1230.28 684.98 L1230.84 684.98 L1231.4 684.98 L1231.96 684.98 L1232.52 684.98 L1233.08 684.98 L1233.64 684.98 L1234.2 684.98 L1234.76 684.98 L1235.32 684.98 L1235.88 684.98 L1236.44 684.98 L1236.99 684.98 L1237.55 684.98 L1238.11 684.98 L1238.67 684.98 L1239.23 684.98 L1239.79 684.98 L1240.35 684.98 L1240.91 684.98 L1241.47 684.98 L1242.03 684.98 L1242.59 684.98 L1243.15 684.98 L1243.71 684.98 L1244.26 684.98 L1244.82 684.98 L1245.38 684.98 L1245.94 684.98 L1246.5 684.98 L1247.06 684.98 L1247.62 684.98 L1248.18 684.98 L1248.74 684.98 L1249.3 684.98 L1249.86 684.98 L1250.42 684.98 L1250.98 684.98 L1251.54 684.98 L1252.09 684.98 L1252.65 684.98 L1253.21 684.98 L1253.77 684.98 L1254.33 684.98 L1254.89 684.98 L1255.45 684.98 L1256.01 684.98 L1256.57 684.98 L1257.13 684.98 L1257.69 684.98 L1258.25 684.98 L1258.81 684.98 L1259.36 684.98 L1259.92 684.98 L1260.48 684.98 L1261.04 684.98 L1261.6 684.98 L1262.16 684.98 L1262.72 684.98 L1263.28 684.98 L1263.84 684.98 L1264.4 684.98 L1264.96 684.98 L1265.52 684.98 L1266.08 684.98 L1266.63 684.98 L1267.19 684.98 L1267.75 684.98 L1268.31 684.98 L1268.87 684.98 L1269.43 684.98 L1269.99 684.98 L1270.55 684.98 L1271.11 684.98 L1271.67 684.98 L1272.23 684.98 L1272.79 684.98 L1273.35 684.98 L1273.91 684.98 L1274.46 684.98 L1275.02 684.98 L1275.58 684.98 L1276.14 684.98 L1276.7 684.98 L1277.26 684.98 L1277.82 684.98 L1278.38 684.98 L1278.94 684.98 L1279.5 684.98 L1280.06 684.98 L1280.62 684.98 L1281.18 684.98 L1281.73 684.98 L1282.29 684.98 L1282.85 684.98 L1283.41 684.98 L1283.97 684.98 L1284.53 684.98 L1285.09 684.98 L1285.65 684.98 L1286.21 684.98 L1286.77 684.98 L1287.33 684.98 L1287.89 684.98 L1288.45 684.98 L1289 684.98 L1289.56 684.98 L1290.12 684.98 L1290.68 684.98 L1291.24 684.98 L1291.8 684.98 L1292.36 684.98 L1292.92 684.98 L1293.48 684.98 L1294.04 684.98 L1294.6 684.98 L1295.16 684.98 L1295.72 684.98 L1296.28 684.98 L1296.83 684.98 L1297.39 684.98 L1297.95 684.98 L1298.51 684.98 L1299.07 684.98 L1299.63 684.98 L1300.19 684.98 L1300.75 684.98 L1301.31 684.98 L1301.87 684.98 L1302.43 684.98 L1302.99 684.98 L1303.55 684.98 L1304.1 684.98 L1304.66 684.98 L1305.22 684.98 L1305.78 684.98 L1306.34 684.98 L1306.9 684.98 L1307.46 684.98 L1308.02 684.98 L1308.58 684.98 L1309.14 684.98 L1309.7 684.98 L1310.26 684.98 L1310.82 684.98 L1311.38 684.98 L1311.93 684.98 L1312.49 684.98 L1313.05 684.98 L1313.61 684.98 L1314.17 684.98 L1314.73 684.98 L1315.29 684.98 L1315.85 684.98 L1316.41 684.98 L1316.97 684.98 L1317.53 684.98 L1318.09 684.98 L1318.65 684.98 L1319.2 684.98 L1319.76 684.98 L1320.32 684.98 L1320.88 684.98 L1321.44 684.98 L1322 684.98 L1322.56 684.98 L1323.12 684.98 L1323.68 684.98 L1324.24 684.98 L1324.8 684.98 L1325.36 684.98 L1325.92 684.98 L1326.47 684.98 L1327.03 684.98 L1327.59 684.98 L1328.15 684.98 L1328.71 684.98 L1329.27 684.98 L1329.83 684.98 L1330.39 684.98 L1330.95 684.98 L1331.51 684.98 L1332.07 684.98 L1332.63 684.98 L1333.19 684.98 L1333.75 684.98 L1334.3 684.98 L1334.86 684.98 L1335.42 684.98 L1335.98 684.98 L1336.54 684.98 L1337.1 684.98 L1337.66 684.98 L1338.22 684.98 L1338.78 684.98 L1339.34 684.98 L1339.9 684.98 L1340.46 684.98 L1341.02 684.98 L1341.57 684.98 L1342.13 684.98 L1342.69 684.98 L1343.25 684.98 L1343.81 684.98 L1344.37 684.98 L1344.93 684.98 L1345.49 684.98 L1346.05 684.98 L1346.61 684.98 L1347.17 684.98 L1347.73 684.98 L1348.29 684.98 L1348.84 684.98 L1349.4 684.98 L1349.96 684.98 L1350.52 684.98 L1351.08 684.98 L1351.64 684.98 L1352.2 684.98 L1352.76 684.98 L1353.32 684.98 L1353.88 684.98 L1354.44 684.98 L1355 684.98 L1355.56 684.98 L1356.12 684.98 L1356.67 684.98 L1357.23 684.98 L1357.79 684.98 L1358.35 684.98 L1358.91 684.98 L1359.47 684.98 L1360.03 684.98 L1360.59 684.98 L1361.15 684.98 L1361.71 684.98 L1362.27 684.98 L1362.83 684.98 L1363.39 684.98 L1363.94 684.98 L1364.5 684.98 L1365.06 684.98 L1365.62 684.98 L1366.18 684.98 L1366.74 684.98 L1367.3 684.98 L1367.86 684.98 L1368.42 684.98 L1368.98 684.98 L1369.54 684.98 L1370.1 684.98 L1370.66 684.98 L1371.21 684.98 L1371.77 684.98 L1372.33 684.98 L1372.89 684.98 L1373.45 684.98 L1374.01 684.98 L1374.57 684.98 L1375.13 684.98 L1375.69 684.98 L1376.25 684.98 L1376.81 684.98 L1377.37 684.98 L1377.93 684.98 L1378.49 684.98 L1379.04 684.98 L1379.6 684.98 L1380.16 684.98 L1380.72 684.98 L1381.28 684.98 L1381.84 684.98 L1382.4 684.98 L1382.96 684.98 L1383.52 684.98 L1384.08 684.98 L1384.64 684.98 L1385.2 684.98 L1385.76 684.98 L1386.31 684.98 L1386.87 684.98 L1387.43 684.98 L1387.99 684.98 L1388.55 684.98 L1389.11 684.98 L1389.67 684.98 L1390.23 684.98 L1390.79 684.98 L1391.35 684.98 L1391.91 684.98 L1392.47 684.98 L1393.03 684.98 L1393.58 684.98 L1394.14 684.98 L1394.7 684.98 L1395.26 684.98 L1395.82 684.98 L1396.38 684.98 L1396.94 684.98 L1397.5 684.98 L1398.06 684.98 L1398.62 684.98 L1399.18 684.98 L1399.74 684.98 L1400.3 684.98 L1400.86 684.98 L1401.41 684.98 L1401.97 684.98 L1402.53 684.98 L1403.09 684.98 L1403.65 684.98 L1404.21 684.98 L1404.77 684.98 L1405.33 684.98 L1405.89 684.98 L1406.45 684.98 L1407.01 684.98 L1407.57 684.98 L1408.13 684.98 L1408.68 684.98 L1409.24 684.98 L1409.8 684.98 L1410.36 684.98 L1410.92 684.98 L1411.48 684.98 L1412.04 684.98 L1412.6 684.98 L1413.16 684.98 L1413.72 684.98 L1414.28 684.98 L1414.84 684.98 L1415.4 684.98 L1415.95 684.98 L1416.51 684.98 L1417.07 684.98 L1417.63 684.98 L1418.19 684.98 L1418.75 684.98 L1419.31 684.98 L1419.87 684.98 L1420.43 684.98 L1420.99 684.98 L1421.55 684.98 L1422.11 684.98 L1422.67 684.98 L1423.23 684.98 L1423.78 684.98 L1424.34 684.98 L1424.9 684.98 L1425.46 684.98 L1426.02 684.98 L1426.58 684.98 L1427.14 684.98 L1427.7 684.98 L1428.26 684.98 L1428.82 684.98 L1429.38 684.98 L1429.94 684.98 L1430.5 684.98 L1431.05 684.98 L1431.61 684.98 L1432.17 684.98 L1432.73 684.98 L1433.29 684.98 L1433.85 684.98 L1434.41 684.98 L1434.97 684.98 L1435.53 684.98 L1436.09 684.98 L1436.65 684.98 L1437.21 684.98 L1437.77 684.98 L1438.33 684.98 L1438.88 684.98 L1439.44 684.98 L1440 684.98 L1440.56 684.98 L1441.12 684.98 L1441.68 684.98 L1442.24 684.98 L1442.8 684.98 L1443.36 684.98 L1443.92 684.98 L1444.48 684.98 L1445.04 684.98 L1445.6 684.98 L1446.15 684.98 L1446.71 684.98 L1447.27 684.98 L1447.83 684.98 L1448.39 684.98 L1448.95 684.98 L1449.51 684.98 L1450.07 684.98 L1450.63 684.98 L1451.19 684.98 L1451.75 684.98 L1452.31 684.98 L1452.87 684.98 L1453.42 684.98 L1453.98 684.98 L1454.54 684.98 L1455.1 684.98 L1455.66 684.98 L1456.22 684.98 L1456.78 684.98 L1457.34 684.98 L1457.9 684.98 L1458.46 684.98 L1459.02 684.98 L1459.58 684.98 L1460.14 684.98 L1460.7 684.98 L1461.25 684.98 L1461.81 684.98 L1462.37 684.98 L1462.93 684.98 L1463.49 684.98 L1464.05 684.98 L1464.61 684.98 L1465.17 684.98 L1465.73 684.98 L1466.29 684.98 L1466.85 684.98 L1467.41 684.98 L1467.97 684.98 L1468.52 684.98 L1469.08 684.98 L1469.64 684.98 L1470.2 684.98 L1470.76 684.98 L1471.32 684.98 L1471.88 684.98 L1472.44 684.98 L1473 684.98 L1473.56 684.98 L1474.12 684.98 L1474.68 684.98 L1475.24 684.98 L1475.79 684.98 L1476.35 684.98 L1476.91 684.98 L1477.47 684.98 L1478.03 684.98 L1478.59 684.98 L1479.15 684.98 L1479.71 684.98 L1480.27 684.98 L1480.83 684.98 L1481.39 684.98 L1481.95 684.98 L1482.51 684.98 L1483.07 684.98 L1483.62 684.98 L1484.18 684.98 L1484.74 684.98 L1485.3 684.98 L1485.86 684.98 L1486.42 684.98 L1486.98 684.98 L1487.54 684.98 L1488.1 684.98 L1488.66 684.98 L1489.22 684.98 L1489.78 684.98 L1490.34 684.98 L1490.89 684.98 L1491.45 684.98 L1492.01 684.98 L1492.57 684.98 L1493.13 684.98 L1493.69 684.98 L1494.25 684.98 L1494.81 684.98 L1495.37 684.98 L1495.93 684.98 L1496.49 684.98 L1497.05 684.98 L1497.61 684.98 L1498.16 684.98 L1498.72 684.98 L1499.28 684.98 L1499.84 684.98 L1500.4 684.98 L1500.96 684.98 L1501.52 684.98 L1502.08 684.98 L1502.64 684.98 L1503.2 684.98 L1503.76 684.98 L1504.32 684.98 L1504.88 684.98 L1505.44 684.98 L1505.99 684.98 L1506.55 684.98 L1507.11 684.98 L1507.67 684.98 L1508.23 684.98 L1508.79 684.98 L1509.35 684.98 L1509.91 684.98 L1510.47 684.98 L1511.03 684.98 L1511.59 684.98 L1512.15 684.98 L1512.71 684.98 L1513.26 684.98 L1513.82 684.98 L1514.38 684.98 L1514.94 684.98 L1515.5 684.98 L1516.06 684.98 L1516.62 684.98 L1517.18 684.98 L1517.74 684.98 L1518.3 684.98 L1518.86 684.98 L1519.42 684.98 L1519.98 684.98 L1520.53 684.98 L1521.09 684.98 L1521.65 684.98 L1522.21 684.98 L1522.77 684.98 L1523.33 684.98 L1523.89 684.98 L1524.45 684.98 L1525.01 684.98 L1525.57 684.98 L1526.13 684.98 L1526.69 684.98 L1527.25 684.98 L1527.81 684.98 L1528.36 684.98 L1528.92 684.98 L1529.48 684.98 L1530.04 684.98 L1530.6 684.98 L1531.16 684.98 L1531.72 684.98 L1532.28 684.98 L1532.84 684.98 L1533.4 684.98 L1533.96 684.98 L1534.52 684.98 L1535.08 684.98 L1535.63 684.98 L1536.19 684.98 L1536.75 684.98 L1537.31 684.98 L1537.87 684.98 L1538.43 684.98 L1538.99 684.98 L1539.55 684.98 L1540.11 684.98 L1540.67 684.98 L1541.23 684.98 L1541.79 684.98 L1542.35 684.98 L1542.9 684.98 L1543.46 684.98 L1544.02 684.98 L1544.58 684.98 L1545.14 684.98 L1545.7 684.98 L1546.26 684.98 L1546.82 684.98 L1547.38 684.98 L1547.94 684.98 L1548.5 684.98 L1549.06 684.98 L1549.62 684.98 L1550.18 684.98 L1550.73 684.98 L1551.29 684.98 L1551.85 684.98 L1552.41 684.98 L1552.97 684.98 L1553.53 684.98 L1554.09 684.98 L1554.65 684.98 L1555.21 684.98 L1555.77 684.98 L1556.33 684.98 L1556.89 684.98 L1557.45 684.98 L1558 684.98 L1558.56 684.98 L1559.12 684.98 L1559.68 684.98 L1560.24 684.98 L1560.8 684.98 L1561.36 684.98 L1561.92 684.98 L1562.48 684.98 L1563.04 684.98 L1563.6 684.98 L1564.16 684.98 L1564.72 684.98 L1565.28 684.98 L1565.83 684.98 L1566.39 684.98 L1566.95 684.98 L1567.51 684.98 L1568.07 684.98 L1568.63 684.98 L1569.19 684.98 L1569.75 684.98 L1570.31 684.98 L1570.87 684.98 L1571.43 684.98 L1571.99 684.98 L1572.55 684.98 L1573.1 684.98 L1573.66 684.98 L1574.22 684.98 L1574.78 684.98 L1575.34 684.98 L1575.9 684.98 L1576.46 684.98 L1577.02 684.98 L1577.58 684.98 L1578.14 684.98 L1578.7 684.98 L1579.26 684.98 L1579.82 684.98 L1580.37 684.98 L1580.93 684.98 L1581.49 684.98 L1582.05 684.98 L1582.61 684.98 L1583.17 684.98 L1583.73 684.98 L1584.29 684.98 L1584.85 684.98 L1585.41 684.98 L1585.97 684.98 L1586.53 684.98 L1587.09 684.98 L1587.65 684.98 L1588.2 684.98 L1588.76 684.98 L1589.32 684.98 L1589.88 684.98 L1590.44 684.98 L1591 684.98 L1591.56 684.98 L1592.12 684.98 L1592.68 684.98 L1593.24 684.98 L1593.8 684.98 L1594.36 684.98 L1594.92 684.98 L1595.47 684.98 L1596.03 684.98 L1596.59 684.98 L1597.15 684.98 L1597.71 684.98 L1598.27 684.98 L1598.83 684.98 L1599.39 684.98 L1599.95 684.98 L1600.51 684.98 L1601.07 684.98 L1601.63 684.98 L1602.19 684.98 L1602.74 684.98 L1603.3 684.98 L1603.86 684.98 L1604.42 684.98 L1604.98 684.98 L1605.54 684.98 L1606.1 684.98 L1606.66 684.98 L1607.22 684.98 L1607.78 684.98 L1608.34 684.98 L1608.9 684.98 L1609.46 684.98 L1610.02 684.98 L1610.57 684.98 L1611.13 684.98 L1611.69 684.98 L1612.25 684.98 L1612.81 684.98 L1613.37 684.98 L1613.93 684.98 L1614.49 684.98 L1615.05 684.98 L1615.61 684.98 L1616.17 684.98 L1616.73 684.98 L1617.29 684.98 L1617.84 684.98 L1618.4 684.98 L1618.96 684.98 L1619.52 684.98 L1620.08 684.98 L1620.64 684.98 L1621.2 684.98 L1621.76 684.98 L1622.32 684.98 L1622.88 684.98 L1623.44 684.98 L1624 684.98 L1624.56 684.98 L1625.11 684.98 L1625.67 684.98 L1626.23 684.98 L1626.79 684.98 L1627.35 684.98 L1627.91 684.98 L1628.47 684.98 L1629.03 684.98 L1629.59 684.98 L1630.15 684.98 L1630.71 684.98 L1631.27 684.98 L1631.83 684.98 L1632.39 684.98 L1632.94 684.98 L1633.5 684.98 L1634.06 684.98 L1634.62 684.98 L1635.18 684.98 L1635.74 684.98 L1636.3 684.98 L1636.86 684.98 L1637.42 684.98 L1637.98 684.98 L1638.54 684.98 L1639.1 684.98 L1639.66 684.98 L1640.21 684.98 L1640.77 684.98 L1641.33 684.98 L1641.89 684.98 L1642.45 684.98 L1643.01 684.98 L1643.57 684.98 L1644.13 684.98 L1644.69 684.98 L1645.25 684.98 L1645.81 684.98 L1646.37 684.98 L1646.93 684.98 L1647.48 684.98 L1648.04 684.98 L1648.6 684.98 L1649.16 684.98 L1649.72 684.98 L1650.28 684.98 L1650.84 684.98 L1651.4 684.98 L1651.96 684.98 L1652.52 684.98 L1653.08 684.98 L1653.64 684.98 L1654.2 684.98 L1654.76 684.98 L1655.31 684.98 L1655.87 684.98 L1656.43 684.98 L1656.99 684.98 L1657.55 684.98 L1658.11 684.98 L1658.67 684.98 L1659.23 684.98 L1659.79 684.98 L1660.35 684.98 L1660.91 684.98 L1661.47 684.98 L1662.03 684.98 L1662.58 684.98 L1663.14 684.98 L1663.7 684.98 L1664.26 684.98 L1664.82 684.98 L1665.38 684.98 L1665.94 684.98 L1666.5 684.98 L1667.06 684.98 L1667.62 684.98 L1668.18 684.98 L1668.74 684.98 L1669.3 684.98 L1669.85 684.98 L1670.41 684.98 L1670.97 684.98 L1671.53 684.98 L1672.09 684.98 L1672.65 684.98 L1673.21 684.98 L1673.77 684.98 L1674.33 684.98 L1674.89 684.98 L1675.45 684.98 L1676.01 684.98 L1676.57 684.98 L1677.13 684.98 L1677.68 684.98 L1678.24 684.98 L1678.8 684.98 L1679.36 684.98 L1679.92 684.98 L1680.48 684.98 L1681.04 684.98 L1681.6 684.98 L1682.16 684.98 L1682.72 684.98 L1683.28 684.98 L1683.84 684.98 L1684.4 684.98 L1684.95 684.98 L1685.51 684.98 L1686.07 684.98 L1686.63 684.98 L1687.19 684.98 L1687.75 684.98 L1688.31 684.98 L1688.87 684.98 L1689.43 684.98 L1689.99 684.98 L1690.55 684.98 L1691.11 684.98 L1691.67 684.98 L1692.23 684.98 L1692.78 684.98 L1693.34 684.98 L1693.9 684.98 L1694.46 684.98 L1695.02 684.98 L1695.58 684.98 L1696.14 684.98 L1696.7 684.98 L1697.26 684.98 L1697.82 684.98 L1698.38 684.98 L1698.94 684.98 L1699.5 684.98 L1700.05 684.98 L1700.61 684.98 L1701.17 684.98 L1701.73 684.98 L1702.29 684.98 L1702.85 684.98 L1703.41 684.98 L1703.97 684.98 L1704.53 684.98 L1705.09 684.98 L1705.65 684.98 L1706.21 684.98 L1706.77 684.98 L1707.32 684.98 L1707.88 684.98 L1708.44 684.98 L1709 684.98 L1709.56 684.98 L1710.12 684.98 L1710.68 684.98 L1711.24 684.98 L1711.8 684.98 L1712.36 684.98 L1712.92 684.98 L1713.48 684.98 L1714.04 684.98 L1714.6 684.98 L1715.15 684.98 L1715.71 684.98 L1716.27 684.98 L1716.83 684.98 L1717.39 684.98 L1717.95 684.98 L1718.51 684.98 L1719.07 684.98 L1719.63 684.98 L1720.19 684.98 L1720.75 684.98 L1721.31 684.98 L1721.87 684.98 L1722.42 684.98 L1722.98 684.98 L1723.54 684.98 L1724.1 684.98 L1724.66 684.98 L1725.22 684.98 L1725.78 684.98 L1726.34 684.98 L1726.9 684.98 L1727.46 684.98 L1728.02 684.98 L1728.58 684.98 L1729.14 684.98 L1729.69 684.98 L1730.25 684.98 L1730.81 684.98 L1731.37 684.98 L1731.93 684.98 L1732.49 684.98 L1733.05 684.98 L1733.61 684.98 L1734.17 684.98 L1734.73 684.98 L1735.29 684.98 L1735.85 684.98 L1736.41 684.98 L1736.97 684.98 L1737.52 684.98 L1738.08 684.98 L1738.64 684.98 L1739.2 684.98 L1739.76 684.98 L1740.32 684.98 L1740.88 684.98 L1741.44 684.98 L1742 684.98 L1742.56 684.98 L1743.12 684.98 L1743.68 684.98 L1744.24 684.98 L1744.79 684.98 L1745.35 684.98 L1745.91 684.98 L1746.47 684.98 L1747.03 684.98 L1747.59 684.98 L1748.15 684.98 L1748.71 684.98 L1749.27 684.98 L1749.83 684.98 L1750.39 684.98 L1750.95 684.98 L1751.51 684.98 L1752.06 684.98 L1752.62 684.98 L1753.18 684.98 L1753.74 684.98 L1754.3 684.98 L1754.86 684.98 L1755.42 684.98 L1755.98 684.98 L1756.54 684.98 L1757.1 684.98 L1757.66 684.98 L1758.22 684.98 L1758.78 684.98 L1759.34 684.98 L1759.89 684.98 L1760.45 684.98 L1761.01 684.98 L1761.57 684.98 L1762.13 684.98 L1762.69 684.98 L1763.25 684.98 L1763.81 684.98 L1764.37 684.98 L1764.93 684.98 L1765.49 684.98 L1766.05 684.98 L1766.61 684.98 L1767.16 684.98 L1767.72 684.98 L1768.28 684.98 L1768.84 684.98 L1769.4 684.98 L1769.96 684.98 L1770.52 684.98 L1771.08 684.98 L1771.64 684.98 L1772.2 684.98 L1772.76 684.98 L1773.32 684.98 L1773.88 684.98 L1774.43 684.98 L1774.99 684.98 L1775.55 684.98 L1776.11 684.98 L1776.67 684.98 L1777.23 684.98 L1777.79 684.98 L1778.35 684.98 L1778.91 684.98 L1779.47 684.98 L1780.03 684.98 L1780.59 684.98 L1781.15 684.98 L1781.71 684.98 L1782.26 684.98 L1782.82 684.98 L1783.38 684.98 L1783.94 684.98 L1784.5 684.98 L1785.06 684.98 L1785.62 684.98 L1786.18 684.98 L1786.74 684.98 L1787.3 684.98 L1787.86 684.98 L1788.42 684.98 L1788.98 684.98 L1789.53 684.98 L1790.09 684.98 L1790.65 684.98 L1791.21 684.98 L1791.77 684.98 L1792.33 684.98 L1792.89 684.98 L1793.45 684.98 L1794.01 684.98 L1794.57 684.98 L1795.13 684.98 L1795.69 684.98 L1796.25 684.98 L1796.8 684.98 L1797.36 684.98 L1797.92 684.98 L1798.48 684.98 L1799.04 684.98 L1799.6 684.98 L1800.16 684.98 L1800.72 684.98 L1801.28 684.98 L1801.84 684.98 L1802.4 684.98 L1802.96 684.98 L1803.52 684.98 L1804.08 684.98 L1804.63 684.98 L1805.19 684.98 L1805.75 684.98 L1806.31 684.98 L1806.87 684.98 L1807.43 684.98 L1807.99 684.98 L1808.55 684.98 L1809.11 684.98 L1809.67 684.98 L1810.23 684.98 L1810.79 684.98 L1811.35 684.98 L1811.9 684.98 L1812.46 684.98 L1813.02 684.98 L1813.58 684.98 L1814.14 684.98 L1814.7 684.98 L1815.26 684.98 L1815.82 684.98 L1816.38 684.98 L1816.94 684.98 L1817.5 684.98 L1818.06 684.98 L1818.62 684.98 L1819.18 684.98 L1819.73 684.98 L1820.29 684.98 L1820.85 684.98 L1821.41 684.98 L1821.97 684.98 L1822.53 684.98 L1823.09 684.98 L1823.65 684.98 L1824.21 684.98 L1824.77 684.98 L1825.33 684.98 L1825.89 684.98 L1826.45 684.98 L1827 684.98 L1827.56 684.98 L1828.12 684.98 L1828.68 684.98 L1829.24 684.98 L1829.8 684.98 L1830.36 684.98 L1830.92 684.98 L1831.48 684.98 L1832.04 684.98 L1832.6 684.98 L1833.16 684.98 L1833.72 684.98 L1834.27 684.98 L1834.83 684.98 L1835.39 684.98 L1835.95 684.98 L1836.51 684.98 L1837.07 684.98 L1837.63 684.98 L1838.19 684.98 L1838.19 682.177 L1837.63 682.177 L1837.07 682.177 L1836.51 682.177 L1835.95 682.177 L1835.39 682.177 L1834.83 682.177 L1834.27 682.177 L1833.72 682.177 L1833.16 682.177 L1832.6 682.177 L1832.04 682.177 L1831.48 682.177 L1830.92 682.177 L1830.36 682.177 L1829.8 682.177 L1829.24 682.177 L1828.68 682.177 L1828.12 682.177 L1827.56 682.177 L1827 682.177 L1826.45 682.177 L1825.89 682.177 L1825.33 682.177 L1824.77 682.177 L1824.21 682.177 L1823.65 682.177 L1823.09 682.177 L1822.53 682.177 L1821.97 682.177 L1821.41 682.177 L1820.85 682.177 L1820.29 682.177 L1819.73 682.177 L1819.18 682.177 L1818.62 682.177 L1818.06 682.177 L1817.5 682.177 L1816.94 682.177 L1816.38 682.177 L1815.82 682.177 L1815.26 682.177 L1814.7 682.177 L1814.14 682.177 L1813.58 682.177 L1813.02 682.177 L1812.46 682.177 L1811.9 682.177 L1811.35 682.177 L1810.79 682.177 L1810.23 682.177 L1809.67 682.177 L1809.11 682.177 L1808.55 682.177 L1807.99 682.177 L1807.43 682.177 L1806.87 682.177 L1806.31 682.177 L1805.75 682.177 L1805.19 682.177 L1804.63 682.177 L1804.08 682.177 L1803.52 682.177 L1802.96 682.177 L1802.4 682.177 L1801.84 682.177 L1801.28 682.177 L1800.72 682.177 L1800.16 682.177 L1799.6 682.177 L1799.04 682.177 L1798.48 682.177 L1797.92 682.177 L1797.36 682.177 L1796.8 682.177 L1796.25 682.177 L1795.69 682.177 L1795.13 682.177 L1794.57 682.177 L1794.01 682.177 L1793.45 682.177 L1792.89 682.177 L1792.33 682.177 L1791.77 682.177 L1791.21 682.177 L1790.65 682.177 L1790.09 682.177 L1789.53 682.177 L1788.98 682.177 L1788.42 682.177 L1787.86 682.177 L1787.3 682.177 L1786.74 682.177 L1786.18 682.177 L1785.62 682.177 L1785.06 682.177 L1784.5 682.177 L1783.94 682.177 L1783.38 682.177 L1782.82 682.177 L1782.26 682.177 L1781.71 682.177 L1781.15 682.177 L1780.59 682.177 L1780.03 682.177 L1779.47 682.177 L1778.91 682.177 L1778.35 682.177 L1777.79 682.177 L1777.23 682.177 L1776.67 682.177 L1776.11 682.177 L1775.55 682.177 L1774.99 682.177 L1774.43 682.177 L1773.88 682.177 L1773.32 682.177 L1772.76 682.177 L1772.2 682.177 L1771.64 682.177 L1771.08 682.177 L1770.52 682.177 L1769.96 682.177 L1769.4 682.177 L1768.84 682.177 L1768.28 682.177 L1767.72 682.177 L1767.16 682.177 L1766.61 682.177 L1766.05 682.177 L1765.49 682.177 L1764.93 682.177 L1764.37 682.177 L1763.81 682.177 L1763.25 682.177 L1762.69 682.177 L1762.13 682.177 L1761.57 682.177 L1761.01 682.177 L1760.45 682.177 L1759.89 682.177 L1759.34 682.177 L1758.78 682.177 L1758.22 682.177 L1757.66 682.177 L1757.1 682.177 L1756.54 682.177 L1755.98 682.177 L1755.42 682.177 L1754.86 682.177 L1754.3 682.177 L1753.74 682.177 L1753.18 682.177 L1752.62 682.177 L1752.06 682.177 L1751.51 682.177 L1750.95 682.177 L1750.39 682.177 L1749.83 682.177 L1749.27 682.177 L1748.71 682.177 L1748.15 682.177 L1747.59 682.177 L1747.03 682.177 L1746.47 682.177 L1745.91 682.177 L1745.35 682.177 L1744.79 682.177 L1744.24 682.177 L1743.68 682.177 L1743.12 682.177 L1742.56 682.177 L1742 682.177 L1741.44 682.177 L1740.88 682.177 L1740.32 682.177 L1739.76 682.177 L1739.2 682.177 L1738.64 682.177 L1738.08 682.177 L1737.52 682.177 L1736.97 682.177 L1736.41 682.177 L1735.85 682.177 L1735.29 682.177 L1734.73 682.177 L1734.17 682.177 L1733.61 682.177 L1733.05 682.177 L1732.49 682.177 L1731.93 682.177 L1731.37 682.177 L1730.81 682.177 L1730.25 682.177 L1729.69 682.177 L1729.14 682.177 L1728.58 682.177 L1728.02 682.177 L1727.46 682.177 L1726.9 682.177 L1726.34 682.177 L1725.78 682.177 L1725.22 682.177 L1724.66 682.177 L1724.1 682.177 L1723.54 682.177 L1722.98 682.177 L1722.42 682.177 L1721.87 682.177 L1721.31 682.177 L1720.75 682.177 L1720.19 682.177 L1719.63 682.177 L1719.07 682.177 L1718.51 682.177 L1717.95 682.177 L1717.39 682.177 L1716.83 682.177 L1716.27 682.177 L1715.71 682.177 L1715.15 682.177 L1714.6 682.177 L1714.04 682.177 L1713.48 682.177 L1712.92 682.177 L1712.36 682.177 L1711.8 682.177 L1711.24 682.177 L1710.68 682.177 L1710.12 682.177 L1709.56 682.177 L1709 682.177 L1708.44 682.177 L1707.88 682.177 L1707.32 682.177 L1706.77 682.177 L1706.21 682.177 L1705.65 682.177 L1705.09 682.177 L1704.53 682.177 L1703.97 682.177 L1703.41 682.177 L1702.85 682.177 L1702.29 682.177 L1701.73 682.177 L1701.17 682.177 L1700.61 682.177 L1700.05 682.177 L1699.5 682.177 L1698.94 682.177 L1698.38 682.177 L1697.82 682.177 L1697.26 682.177 L1696.7 682.177 L1696.14 682.177 L1695.58 682.177 L1695.02 682.177 L1694.46 682.177 L1693.9 682.177 L1693.34 682.177 L1692.78 682.177 L1692.23 682.177 L1691.67 682.177 L1691.11 682.177 L1690.55 682.177 L1689.99 682.177 L1689.43 682.177 L1688.87 682.177 L1688.31 682.177 L1687.75 682.177 L1687.19 682.177 L1686.63 682.177 L1686.07 682.177 L1685.51 682.177 L1684.95 682.177 L1684.4 682.177 L1683.84 682.177 L1683.28 682.177 L1682.72 682.177 L1682.16 682.177 L1681.6 682.177 L1681.04 682.177 L1680.48 682.177 L1679.92 682.177 L1679.36 682.177 L1678.8 682.177 L1678.24 682.177 L1677.68 682.177 L1677.13 682.177 L1676.57 682.177 L1676.01 682.177 L1675.45 682.177 L1674.89 682.177 L1674.33 682.177 L1673.77 682.177 L1673.21 682.177 L1672.65 682.177 L1672.09 682.177 L1671.53 682.177 L1670.97 682.177 L1670.41 682.177 L1669.85 682.177 L1669.3 682.177 L1668.74 682.177 L1668.18 682.177 L1667.62 682.177 L1667.06 682.177 L1666.5 682.177 L1665.94 682.177 L1665.38 682.177 L1664.82 682.177 L1664.26 682.177 L1663.7 682.177 L1663.14 682.177 L1662.58 682.177 L1662.03 682.177 L1661.47 682.177 L1660.91 682.177 L1660.35 682.177 L1659.79 682.177 L1659.23 682.177 L1658.67 682.177 L1658.11 682.177 L1657.55 682.177 L1656.99 682.177 L1656.43 682.177 L1655.87 682.177 L1655.31 682.177 L1654.76 682.177 L1654.2 682.177 L1653.64 682.177 L1653.08 682.177 L1652.52 682.177 L1651.96 682.177 L1651.4 682.177 L1650.84 682.177 L1650.28 682.177 L1649.72 682.177 L1649.16 682.177 L1648.6 682.177 L1648.04 682.177 L1647.48 682.177 L1646.93 682.177 L1646.37 682.177 L1645.81 682.177 L1645.25 682.177 L1644.69 682.177 L1644.13 682.177 L1643.57 682.177 L1643.01 682.177 L1642.45 682.177 L1641.89 682.177 L1641.33 682.177 L1640.77 682.177 L1640.21 682.177 L1639.66 682.177 L1639.1 682.177 L1638.54 682.177 L1637.98 682.177 L1637.42 682.177 L1636.86 682.177 L1636.3 682.177 L1635.74 682.177 L1635.18 682.177 L1634.62 682.177 L1634.06 682.177 L1633.5 682.177 L1632.94 682.177 L1632.39 682.177 L1631.83 682.177 L1631.27 682.177 L1630.71 682.177 L1630.15 682.177 L1629.59 682.177 L1629.03 682.177 L1628.47 682.177 L1627.91 682.177 L1627.35 682.177 L1626.79 682.177 L1626.23 682.177 L1625.67 682.177 L1625.11 682.177 L1624.56 682.177 L1624 682.177 L1623.44 682.177 L1622.88 682.177 L1622.32 682.177 L1621.76 682.177 L1621.2 682.177 L1620.64 682.177 L1620.08 682.177 L1619.52 682.177 L1618.96 682.177 L1618.4 682.177 L1617.84 682.177 L1617.29 682.177 L1616.73 682.177 L1616.17 682.177 L1615.61 682.177 L1615.05 682.177 L1614.49 682.177 L1613.93 682.177 L1613.37 682.177 L1612.81 682.177 L1612.25 682.177 L1611.69 682.177 L1611.13 682.177 L1610.57 682.177 L1610.02 682.177 L1609.46 682.177 L1608.9 682.177 L1608.34 682.177 L1607.78 682.177 L1607.22 682.177 L1606.66 682.177 L1606.1 682.177 L1605.54 682.177 L1604.98 682.177 L1604.42 682.177 L1603.86 682.177 L1603.3 682.177 L1602.74 682.177 L1602.19 682.177 L1601.63 682.177 L1601.07 682.177 L1600.51 682.177 L1599.95 682.177 L1599.39 682.177 L1598.83 682.177 L1598.27 682.177 L1597.71 682.177 L1597.15 682.177 L1596.59 682.177 L1596.03 682.177 L1595.47 682.177 L1594.92 682.177 L1594.36 682.177 L1593.8 682.177 L1593.24 682.177 L1592.68 682.177 L1592.12 682.177 L1591.56 682.177 L1591 682.177 L1590.44 682.177 L1589.88 682.177 L1589.32 682.177 L1588.76 682.177 L1588.2 682.177 L1587.65 682.177 L1587.09 682.177 L1586.53 682.177 L1585.97 682.177 L1585.41 682.177 L1584.85 682.177 L1584.29 682.177 L1583.73 682.177 L1583.17 682.177 L1582.61 682.177 L1582.05 682.177 L1581.49 682.177 L1580.93 682.177 L1580.37 682.177 L1579.82 682.177 L1579.26 682.177 L1578.7 682.177 L1578.14 682.177 L1577.58 682.177 L1577.02 682.177 L1576.46 682.177 L1575.9 682.177 L1575.34 682.177 L1574.78 682.177 L1574.22 682.177 L1573.66 682.177 L1573.1 682.177 L1572.55 682.177 L1571.99 682.177 L1571.43 682.177 L1570.87 682.177 L1570.31 682.177 L1569.75 682.177 L1569.19 682.177 L1568.63 682.177 L1568.07 682.177 L1567.51 682.177 L1566.95 682.177 L1566.39 682.177 L1565.83 682.177 L1565.28 682.177 L1564.72 682.177 L1564.16 682.177 L1563.6 682.177 L1563.04 682.177 L1562.48 682.177 L1561.92 682.177 L1561.36 682.177 L1560.8 682.177 L1560.24 682.177 L1559.68 682.177 L1559.12 682.177 L1558.56 682.177 L1558 682.177 L1557.45 682.177 L1556.89 682.177 L1556.33 682.177 L1555.77 682.177 L1555.21 682.177 L1554.65 682.177 L1554.09 682.177 L1553.53 682.177 L1552.97 682.177 L1552.41 682.177 L1551.85 682.177 L1551.29 682.177 L1550.73 682.177 L1550.18 682.177 L1549.62 682.177 L1549.06 682.177 L1548.5 682.177 L1547.94 682.177 L1547.38 682.177 L1546.82 682.177 L1546.26 682.177 L1545.7 682.177 L1545.14 682.177 L1544.58 682.177 L1544.02 682.177 L1543.46 682.177 L1542.9 682.177 L1542.35 682.177 L1541.79 682.177 L1541.23 682.177 L1540.67 682.177 L1540.11 682.177 L1539.55 682.177 L1538.99 682.177 L1538.43 682.177 L1537.87 682.177 L1537.31 682.177 L1536.75 682.177 L1536.19 682.177 L1535.63 682.177 L1535.08 682.177 L1534.52 682.177 L1533.96 682.177 L1533.4 682.177 L1532.84 682.177 L1532.28 682.177 L1531.72 682.177 L1531.16 682.177 L1530.6 682.177 L1530.04 682.177 L1529.48 682.177 L1528.92 682.177 L1528.36 682.177 L1527.81 682.177 L1527.25 682.177 L1526.69 682.177 L1526.13 682.177 L1525.57 682.177 L1525.01 682.177 L1524.45 682.177 L1523.89 682.177 L1523.33 682.177 L1522.77 682.177 L1522.21 682.177 L1521.65 682.177 L1521.09 682.177 L1520.53 682.177 L1519.98 682.177 L1519.42 682.177 L1518.86 682.177 L1518.3 682.177 L1517.74 682.177 L1517.18 682.177 L1516.62 682.177 L1516.06 682.177 L1515.5 682.177 L1514.94 682.177 L1514.38 682.177 L1513.82 682.177 L1513.26 682.177 L1512.71 682.177 L1512.15 682.177 L1511.59 682.177 L1511.03 682.177 L1510.47 682.177 L1509.91 682.177 L1509.35 682.177 L1508.79 682.177 L1508.23 682.177 L1507.67 682.177 L1507.11 682.177 L1506.55 682.177 L1505.99 682.177 L1505.44 682.177 L1504.88 682.177 L1504.32 682.177 L1503.76 682.177 L1503.2 682.177 L1502.64 682.177 L1502.08 682.177 L1501.52 682.177 L1500.96 682.177 L1500.4 682.177 L1499.84 682.177 L1499.28 682.177 L1498.72 682.177 L1498.16 682.177 L1497.61 682.177 L1497.05 682.177 L1496.49 682.177 L1495.93 682.177 L1495.37 682.177 L1494.81 682.177 L1494.25 682.177 L1493.69 682.177 L1493.13 682.177 L1492.57 682.177 L1492.01 682.177 L1491.45 682.177 L1490.89 682.177 L1490.34 682.177 L1489.78 682.177 L1489.22 682.177 L1488.66 682.177 L1488.1 682.177 L1487.54 682.177 L1486.98 682.177 L1486.42 682.177 L1485.86 682.177 L1485.3 682.177 L1484.74 682.177 L1484.18 682.177 L1483.62 682.177 L1483.07 682.177 L1482.51 682.177 L1481.95 682.177 L1481.39 682.177 L1480.83 682.177 L1480.27 682.177 L1479.71 682.177 L1479.15 682.177 L1478.59 682.177 L1478.03 682.177 L1477.47 682.177 L1476.91 682.177 L1476.35 682.177 L1475.79 682.177 L1475.24 682.177 L1474.68 682.177 L1474.12 682.177 L1473.56 682.177 L1473 682.177 L1472.44 682.177 L1471.88 682.177 L1471.32 682.177 L1470.76 682.177 L1470.2 682.177 L1469.64 682.177 L1469.08 682.177 L1468.52 682.177 L1467.97 682.177 L1467.41 682.177 L1466.85 682.177 L1466.29 682.177 L1465.73 682.177 L1465.17 682.177 L1464.61 682.177 L1464.05 682.177 L1463.49 682.177 L1462.93 682.177 L1462.37 682.177 L1461.81 682.177 L1461.25 682.177 L1460.7 682.177 L1460.14 682.177 L1459.58 682.177 L1459.02 682.177 L1458.46 682.177 L1457.9 682.177 L1457.34 682.177 L1456.78 682.177 L1456.22 682.177 L1455.66 682.177 L1455.1 682.177 L1454.54 682.177 L1453.98 682.177 L1453.42 682.177 L1452.87 682.177 L1452.31 682.177 L1451.75 682.177 L1451.19 682.177 L1450.63 682.177 L1450.07 682.177 L1449.51 682.177 L1448.95 682.177 L1448.39 682.177 L1447.83 682.177 L1447.27 682.177 L1446.71 682.177 L1446.15 682.177 L1445.6 682.177 L1445.04 682.177 L1444.48 682.177 L1443.92 682.177 L1443.36 682.177 L1442.8 682.177 L1442.24 682.177 L1441.68 682.177 L1441.12 682.177 L1440.56 682.177 L1440 682.177 L1439.44 682.177 L1438.88 682.177 L1438.33 682.177 L1437.77 682.177 L1437.21 682.177 L1436.65 682.177 L1436.09 682.177 L1435.53 682.177 L1434.97 682.177 L1434.41 682.177 L1433.85 682.177 L1433.29 682.177 L1432.73 682.177 L1432.17 682.177 L1431.61 682.177 L1431.05 682.177 L1430.5 682.177 L1429.94 682.177 L1429.38 682.177 L1428.82 682.177 L1428.26 682.177 L1427.7 682.177 L1427.14 682.177 L1426.58 682.177 L1426.02 682.177 L1425.46 682.177 L1424.9 682.177 L1424.34 682.177 L1423.78 682.177 L1423.23 682.177 L1422.67 682.177 L1422.11 682.177 L1421.55 682.177 L1420.99 682.177 L1420.43 682.177 L1419.87 682.177 L1419.31 682.177 L1418.75 682.177 L1418.19 682.177 L1417.63 682.177 L1417.07 682.177 L1416.51 682.177 L1415.95 682.177 L1415.4 682.177 L1414.84 682.177 L1414.28 682.177 L1413.72 682.177 L1413.16 682.177 L1412.6 682.177 L1412.04 682.177 L1411.48 682.177 L1410.92 682.177 L1410.36 682.177 L1409.8 682.177 L1409.24 682.177 L1408.68 682.177 L1408.13 682.177 L1407.57 682.177 L1407.01 682.177 L1406.45 682.177 L1405.89 682.177 L1405.33 682.177 L1404.77 682.177 L1404.21 682.177 L1403.65 682.177 L1403.09 682.177 L1402.53 682.177 L1401.97 682.177 L1401.41 682.177 L1400.86 682.177 L1400.3 682.177 L1399.74 682.177 L1399.18 682.177 L1398.62 682.177 L1398.06 682.177 L1397.5 682.177 L1396.94 682.177 L1396.38 682.177 L1395.82 682.177 L1395.26 682.177 L1394.7 682.177 L1394.14 682.177 L1393.58 682.177 L1393.03 682.177 L1392.47 682.177 L1391.91 682.177 L1391.35 682.177 L1390.79 682.177 L1390.23 682.177 L1389.67 682.177 L1389.11 682.177 L1388.55 682.177 L1387.99 682.177 L1387.43 682.177 L1386.87 682.177 L1386.31 682.177 L1385.76 682.177 L1385.2 682.177 L1384.64 682.177 L1384.08 682.177 L1383.52 682.177 L1382.96 682.177 L1382.4 682.177 L1381.84 682.177 L1381.28 682.177 L1380.72 682.177 L1380.16 682.177 L1379.6 682.177 L1379.04 682.177 L1378.49 682.177 L1377.93 682.177 L1377.37 682.177 L1376.81 682.177 L1376.25 682.177 L1375.69 682.177 L1375.13 682.177 L1374.57 682.177 L1374.01 682.177 L1373.45 682.177 L1372.89 682.177 L1372.33 682.177 L1371.77 682.177 L1371.21 682.177 L1370.66 682.177 L1370.1 682.177 L1369.54 682.177 L1368.98 682.177 L1368.42 682.177 L1367.86 682.177 L1367.3 682.177 L1366.74 682.177 L1366.18 682.177 L1365.62 682.177 L1365.06 682.177 L1364.5 682.177 L1363.94 682.177 L1363.39 682.177 L1362.83 682.177 L1362.27 682.177 L1361.71 682.177 L1361.15 682.177 L1360.59 682.177 L1360.03 682.177 L1359.47 682.177 L1358.91 682.177 L1358.35 682.177 L1357.79 682.177 L1357.23 682.177 L1356.67 682.177 L1356.12 682.177 L1355.56 682.177 L1355 682.177 L1354.44 682.177 L1353.88 682.177 L1353.32 682.177 L1352.76 682.177 L1352.2 682.177 L1351.64 682.177 L1351.08 682.177 L1350.52 682.177 L1349.96 682.177 L1349.4 682.177 L1348.84 682.177 L1348.29 682.177 L1347.73 682.177 L1347.17 682.177 L1346.61 682.177 L1346.05 682.177 L1345.49 682.177 L1344.93 682.177 L1344.37 682.177 L1343.81 682.177 L1343.25 682.177 L1342.69 682.177 L1342.13 682.177 L1341.57 682.177 L1341.02 682.177 L1340.46 682.177 L1339.9 682.177 L1339.34 682.177 L1338.78 682.177 L1338.22 682.177 L1337.66 682.177 L1337.1 682.177 L1336.54 682.177 L1335.98 682.177 L1335.42 682.177 L1334.86 682.177 L1334.3 682.177 L1333.75 682.177 L1333.19 682.177 L1332.63 682.177 L1332.07 682.177 L1331.51 682.177 L1330.95 682.177 L1330.39 682.177 L1329.83 682.177 L1329.27 682.177 L1328.71 682.177 L1328.15 682.177 L1327.59 682.177 L1327.03 682.177 L1326.47 682.177 L1325.92 682.177 L1325.36 682.177 L1324.8 682.177 L1324.24 682.177 L1323.68 682.177 L1323.12 682.177 L1322.56 682.177 L1322 682.177 L1321.44 682.177 L1320.88 682.177 L1320.32 682.177 L1319.76 682.177 L1319.2 682.177 L1318.65 682.177 L1318.09 682.177 L1317.53 682.177 L1316.97 682.177 L1316.41 682.177 L1315.85 682.177 L1315.29 682.177 L1314.73 682.177 L1314.17 682.177 L1313.61 682.177 L1313.05 682.177 L1312.49 682.177 L1311.93 682.177 L1311.38 682.177 L1310.82 682.177 L1310.26 682.177 L1309.7 682.177 L1309.14 682.177 L1308.58 682.177 L1308.02 682.177 L1307.46 682.177 L1306.9 682.177 L1306.34 682.177 L1305.78 682.177 L1305.22 682.177 L1304.66 682.177 L1304.1 682.177 L1303.55 682.177 L1302.99 682.177 L1302.43 682.177 L1301.87 682.177 L1301.31 682.177 L1300.75 682.177 L1300.19 682.177 L1299.63 682.177 L1299.07 682.177 L1298.51 682.177 L1297.95 682.177 L1297.39 682.177 L1296.83 682.177 L1296.28 682.177 L1295.72 682.177 L1295.16 682.177 L1294.6 682.177 L1294.04 682.177 L1293.48 682.177 L1292.92 682.177 L1292.36 682.177 L1291.8 682.177 L1291.24 682.177 L1290.68 682.177 L1290.12 682.177 L1289.56 682.177 L1289 682.177 L1288.45 682.177 L1287.89 682.177 L1287.33 682.177 L1286.77 682.177 L1286.21 682.177 L1285.65 682.177 L1285.09 682.177 L1284.53 682.177 L1283.97 682.177 L1283.41 682.177 L1282.85 682.177 L1282.29 682.177 L1281.73 682.177 L1281.18 682.177 L1280.62 682.177 L1280.06 682.177 L1279.5 682.177 L1278.94 682.177 L1278.38 682.177 L1277.82 682.177 L1277.26 682.177 L1276.7 682.177 L1276.14 682.177 L1275.58 682.177 L1275.02 682.177 L1274.46 682.177 L1273.91 682.177 L1273.35 682.177 L1272.79 682.177 L1272.23 682.177 L1271.67 682.177 L1271.11 682.177 L1270.55 682.177 L1269.99 682.177 L1269.43 682.177 L1268.87 682.177 L1268.31 682.177 L1267.75 682.177 L1267.19 682.177 L1266.63 682.177 L1266.08 682.177 L1265.52 682.177 L1264.96 682.177 L1264.4 682.177 L1263.84 682.177 L1263.28 682.177 L1262.72 682.177 L1262.16 682.177 L1261.6 682.177 L1261.04 682.177 L1260.48 682.177 L1259.92 682.177 L1259.36 682.177 L1258.81 682.177 L1258.25 682.177 L1257.69 682.177 L1257.13 682.177 L1256.57 682.177 L1256.01 682.177 L1255.45 682.177 L1254.89 682.177 L1254.33 682.177 L1253.77 682.177 L1253.21 682.177 L1252.65 682.177 L1252.09 682.177 L1251.54 682.177 L1250.98 682.177 L1250.42 682.177 L1249.86 682.177 L1249.3 682.177 L1248.74 682.177 L1248.18 682.177 L1247.62 682.177 L1247.06 682.177 L1246.5 682.177 L1245.94 682.177 L1245.38 682.177 L1244.82 682.177 L1244.26 682.177 L1243.71 682.177 L1243.15 682.177 L1242.59 682.177 L1242.03 682.177 L1241.47 682.177 L1240.91 682.177 L1240.35 682.177 L1239.79 682.177 L1239.23 682.177 L1238.67 682.177 L1238.11 682.177 L1237.55 682.177 L1236.99 682.177 L1236.44 682.177 L1235.88 682.177 L1235.32 682.177 L1234.76 682.177 L1234.2 682.177 L1233.64 682.177 L1233.08 682.177 L1232.52 682.177 L1231.96 682.177 L1231.4 682.177 L1230.84 682.177 L1230.28 682.177 L1229.72 682.177 L1229.17 682.177 L1228.61 682.177 L1228.05 682.177 L1227.49 682.177 L1226.93 682.177 L1226.37 682.177 L1225.81 682.177 L1225.25 682.177 L1224.69 682.177 L1224.13 682.177 L1223.57 682.177 L1223.01 682.177 L1222.45 682.177 L1221.89 682.177 L1221.34 682.177 L1220.78 682.177 L1220.22 682.177 L1219.66 682.177 L1219.1 682.177 L1218.54 682.177 L1217.98 682.177 L1217.42 682.177 L1216.86 682.177 L1216.3 682.177 L1215.74 682.177 L1215.18 682.177 L1214.62 682.177 L1214.07 682.177 L1213.51 682.177 L1212.95 682.177 L1212.39 682.177 L1211.83 682.177 L1211.27 682.177 L1210.71 682.177 L1210.15 682.177 L1209.59 682.177 L1209.03 682.177 L1208.47 682.177 L1207.91 682.177 L1207.35 682.177 L1206.8 682.177 L1206.24 682.177 L1205.68 682.177 L1205.12 682.177 L1204.56 682.177 L1204 682.177 L1203.44 682.177 L1202.88 682.177 L1202.32 682.177 L1201.76 682.177 L1201.2 682.177 L1200.64 682.177 L1200.08 682.177 L1199.52 682.177 L1198.97 682.177 L1198.41 682.177 L1197.85 682.177 L1197.29 682.177 L1196.73 682.177 L1196.17 682.177 L1195.61 682.177 L1195.05 682.177 L1194.49 682.177 L1193.93 682.177 L1193.37 682.177 L1192.81 682.177 L1192.25 682.177 L1191.7 682.177 L1191.14 682.177 L1190.58 682.177 L1190.02 682.177 L1189.46 682.177 L1188.9 682.177 L1188.34 682.177 L1187.78 682.177 L1187.22 682.177 L1186.66 682.177 L1186.1 682.177 L1185.54 682.177 L1184.98 682.177 L1184.43 682.177 L1183.87 682.177 L1183.31 682.177 L1182.75 682.177 L1182.19 682.177 L1181.63 682.177 L1181.07 682.177 L1180.51 682.177 L1179.95 682.177 L1179.39 682.177 L1178.83 682.177 L1178.27 682.177 L1177.71 682.177 L1177.15 682.177 L1176.6 682.177 L1176.04 682.177 L1175.48 682.177 L1174.92 682.177 L1174.36 682.177 L1173.8 682.177 L1173.24 682.177 L1172.68 682.177 L1172.12 682.177 L1171.56 682.177 L1171 682.177 L1170.44 682.177 L1169.88 682.177 L1169.33 682.177 L1168.77 682.177 L1168.21 682.177 L1167.65 682.177 L1167.09 682.177 L1166.53 682.177 L1165.97 682.177 L1165.41 682.177 L1164.85 682.177 L1164.29 682.177 L1163.73 682.177 L1163.17 682.177 L1162.61 682.177 L1162.05 682.177 L1161.5 682.177 L1160.94 682.177 L1160.38 682.177 L1159.82 682.177 L1159.26 682.177 L1158.7 682.177 L1158.14 682.177 L1157.58 682.177 L1157.02 682.177 L1156.46 682.177 L1155.9 682.177 L1155.34 682.177 L1154.78 682.177 L1154.23 682.177 L1153.67 682.177 L1153.11 682.177 L1152.55 682.177 L1151.99 682.177 L1151.43 682.177 L1150.87 682.177 L1150.31 682.177 L1149.75 682.177 L1149.19 682.177 L1148.63 682.177 L1148.07 682.177 L1147.51 682.177 L1146.96 682.177 L1146.4 682.177 L1145.84 682.177 L1145.28 682.177 L1144.72 682.177 L1144.16 682.177 L1143.6 682.177 L1143.04 682.177 L1142.48 682.177 L1141.92 682.177 L1141.36 682.177 L1140.8 682.177 L1140.24 682.177 L1139.68 682.177 L1139.13 682.177 L1138.57 682.177 L1138.01 682.177 L1137.45 682.177 L1136.89 682.177 L1136.33 682.177 L1135.77 682.177 L1135.21 682.177 L1134.65 682.177 L1134.09 682.177 L1133.53 682.177 L1132.97 682.177 L1132.41 682.177 L1131.86 682.177 L1131.3 682.177 L1130.74 682.177 L1130.18 682.177 L1129.62 682.177 L1129.06 682.177 L1128.5 682.177 L1127.94 682.177 L1127.38 682.177 L1126.82 682.177 L1126.26 682.177 L1125.7 682.177 L1125.14 682.177 L1124.59 682.177 L1124.03 682.177 L1123.47 682.177 L1122.91 682.177 L1122.35 682.177 L1121.79 682.177 L1121.23 682.177 L1120.67 682.177 L1120.11 682.177 L1119.55 682.177 L1118.99 682.177 L1118.43 682.177 L1117.87 682.177 L1117.31 682.177 L1116.76 682.177 L1116.2 682.177 L1115.64 682.177 L1115.08 682.177 L1114.52 682.177 L1113.96 682.177 L1113.4 682.177 L1112.84 682.177 L1112.28 682.177 L1111.72 682.177 L1111.16 682.177 L1110.6 682.177 L1110.04 682.177 L1109.49 682.177 L1108.93 682.177 L1108.37 682.177 L1107.81 682.177 L1107.25 682.177 L1106.69 682.177 L1106.13 682.177 L1105.57 682.177 L1105.01 682.177 L1104.45 682.177 L1103.89 682.177 L1103.33 682.177 L1102.77 682.177 L1102.22 682.177 L1101.66 682.177 L1101.1 682.177 L1100.54 682.177 L1099.98 682.177 L1099.42 682.177 L1098.86 682.177 L1098.3 682.177 L1097.74 682.177 L1097.18 682.177 L1096.62 682.177 L1096.06 682.177 L1095.5 682.177 L1094.94 682.177 L1094.39 682.177 L1093.83 682.177 L1093.27 682.177 L1092.71 682.177 L1092.15 682.177 L1091.59 682.177 L1091.03 682.177 L1090.47 682.177 L1089.91 682.177 L1089.35 682.177 L1088.79 682.177 L1088.23 682.177 L1087.67 682.177 L1087.12 682.177 L1086.56 682.177 L1086 682.177 L1085.44 682.177 L1084.88 682.177 L1084.32 682.177 L1083.76 682.177 L1083.2 682.177 L1082.64 682.177 L1082.08 682.177 L1081.52 682.177 L1080.96 682.177 L1080.4 682.177 L1079.85 682.177 L1079.29 682.177 L1078.73 682.177 L1078.17 682.177 L1077.61 682.177 L1077.05 682.177 L1076.49 682.177 L1075.93 682.177 L1075.37 682.177 L1074.81 682.177 L1074.25 682.177 L1073.69 682.177 L1073.13 682.177 L1072.57 682.177 L1072.02 682.177 L1071.46 682.177 L1070.9 682.177 L1070.34 682.177 L1069.78 682.177 L1069.22 682.177 L1068.66 682.177 L1068.1 682.177 L1067.54 682.177 L1066.98 682.177 L1066.42 682.177 L1065.86 682.177 L1065.3 682.177 L1064.75 682.177 L1064.19 682.177 L1063.63 682.177 L1063.07 682.177 L1062.51 682.177 L1061.95 682.177 L1061.39 682.177 L1060.83 682.177 L1060.27 682.177 L1059.71 682.177 L1059.15 682.177 L1058.59 682.177 L1058.03 682.177 L1057.48 682.177 L1056.92 682.177 L1056.36 682.177 L1055.8 682.177 L1055.24 682.177 L1054.68 682.177 L1054.12 682.177 L1053.56 682.177 L1053 682.177 L1052.44 682.177 L1051.88 682.177 L1051.32 682.177 L1050.76 682.177 L1050.2 682.177 L1049.65 682.177 L1049.09 682.177 L1048.53 682.177 L1047.97 682.177 L1047.41 682.177 L1046.85 682.177 L1046.29 682.177 L1045.73 682.177 L1045.17 682.177 L1044.61 682.177 L1044.05 682.177 L1043.49 682.177 L1042.93 682.177 L1042.38 682.177 L1041.82 682.177 L1041.26 682.177 L1040.7 682.177 L1040.14 682.177 L1039.58 682.177 L1039.02 682.177 L1038.46 682.177 L1037.9 682.177 L1037.34 682.177 L1036.78 682.177 L1036.22 682.177 L1035.66 682.177 L1035.1 682.177 L1034.55 682.177 L1033.99 682.177 L1033.43 682.177 L1032.87 682.177 L1032.31 682.177 L1031.75 682.177 L1031.19 682.177 L1030.63 682.177 L1030.07 682.177 L1029.51 682.177 L1028.95 682.177 L1028.39 682.177 L1027.83 682.177 L1027.28 682.177 L1026.72 682.177 L1026.16 682.177 L1025.6 682.177 L1025.04 682.177 L1024.48 682.177 L1023.92 682.177 L1023.36 682.177 L1022.8 682.177 L1022.24 682.177 L1021.68 682.177 L1021.12 682.177 L1020.56 682.177 L1020.01 682.177 L1019.45 682.177 L1018.89 682.177 L1018.33 682.177 L1017.77 682.177 L1017.21 682.177 L1016.65 682.177 L1016.09 682.177 L1015.53 682.177 L1014.97 682.177 L1014.41 682.177 L1013.85 682.177 L1013.29 682.177 L1012.73 682.177 L1012.18 682.177 L1011.62 682.177 L1011.06 682.177 L1010.5 682.177 L1009.94 682.177 L1009.38 682.177 L1008.82 682.177 L1008.26 682.177 L1007.7 682.177 L1007.14 682.177 L1006.58 682.177 L1006.02 682.177 L1005.46 682.177 L1004.91 682.177 L1004.35 682.177 L1003.79 682.177 L1003.23 682.177 L1002.67 682.177 L1002.11 682.177 L1001.55 682.177 L1000.99 682.177 L1000.43 682.177 L999.872 682.177 L999.313 682.177 L998.754 682.177 L998.194 682.177 L997.635 682.177 L997.076 682.177 L996.517 682.177 L995.957 682.177 L995.398 682.177 L994.839 682.177 L994.28 682.177 L993.72 682.177 L993.161 682.177 L992.602 682.177 L992.043 682.177 L991.483 682.177 L990.924 682.177 L990.365 682.177 L989.806 682.177 L989.246 682.177 L988.687 682.177 L988.128 682.177 L987.569 682.177 L987.009 682.177 L986.45 682.177 L985.891 682.177 L985.332 682.177 L984.772 682.177 L984.213 682.177 L983.654 682.177 L983.095 682.177 L982.535 682.177 L981.976 682.177 L981.417 682.177 L980.858 682.177 L980.298 682.177 L979.739 682.177 L979.18 682.177 L978.621 682.177 L978.061 682.177 L977.502 682.177 L976.943 682.177 L976.384 682.177 L975.824 682.177 L975.265 682.177 L974.706 682.177 L974.147 682.177 L973.587 682.177 L973.028 682.177 L972.469 682.177 L971.91 682.177 L971.35 682.177 L970.791 682.177 L970.232 682.177 L969.673 682.177 L969.113 682.177 L968.554 682.177 L967.995 682.177 L967.436 682.177 L966.876 682.177 L966.317 682.177 L965.758 682.177 L965.199 682.177 L964.639 682.177 L964.08 682.177 L963.521 682.177 L962.962 682.177 L962.402 682.177 L961.843 682.177 L961.284 682.177 L960.725 682.177 L960.165 682.177 L959.606 682.177 L959.047 682.177 L958.488 682.177 L957.928 682.177 L957.369 682.177 L956.81 682.177 L956.251 682.177 L955.691 682.177 L955.132 682.177 L954.573 682.177 L954.014 682.177 L953.454 682.177 L952.895 682.177 L952.336 682.177 L951.777 682.177 L951.217 682.177 L950.658 682.177 L950.099 682.177 L949.54 682.177 L948.98 682.177 L948.421 682.177 L947.862 682.177 L947.303 682.177 L946.743 682.177 L946.184 682.177 L945.625 682.177 L945.066 682.177 L944.506 682.177 L943.947 682.177 L943.388 682.177 L942.829 682.177 L942.269 682.177 L941.71 682.177 L941.151 682.177 L940.592 682.177 L940.032 682.177 L939.473 682.177 L938.914 682.177 L938.355 682.177 L937.795 682.177 L937.236 682.177 L936.677 682.177 L936.118 682.177 L935.558 682.177 L934.999 682.177 L934.44 682.177 L933.881 682.177 L933.321 682.177 L932.762 682.177 L932.203 682.177 L931.644 682.177 L931.084 682.177 L930.525 682.177 L929.966 682.177 L929.406 682.177 L928.847 682.177 L928.288 682.177 L927.729 682.177 L927.169 682.177 L926.61 682.177 L926.051 682.177 L925.492 682.177 L924.932 682.177 L924.373 682.177 L923.814 682.177 L923.255 682.177 L922.695 682.177 L922.136 682.177 L921.577 682.177 L921.018 682.177 L920.458 682.177 L919.899 682.177 L919.34 682.177 L918.781 682.177 L918.221 682.177 L917.662 682.177 L917.103 682.177 L916.544 682.177 L915.984 682.177 L915.425 682.177 L914.866 682.177 L914.307 682.177 L913.747 682.177 L913.188 682.177 L912.629 682.177 L912.07 682.177 L911.51 682.177 L910.951 682.177 L910.392 682.177 L909.833 682.177 L909.273 682.177 L908.714 682.177 L908.155 682.177 L907.596 682.177 L907.036 682.177 L906.477 682.177 L905.918 682.177 L905.359 682.177 L904.799 682.177 L904.24 682.177 L903.681 682.177 L903.122 682.177 L902.562 682.177 L902.003 682.177 L901.444 682.177 L900.885 682.177 L900.325 682.177 L899.766 682.177 L899.207 682.177 L898.648 682.177 L898.088 682.177 L897.529 682.177 L896.97 682.177 L896.411 682.177 L895.851 682.177 L895.292 682.177 L894.733 682.177 L894.174 682.177 L893.614 682.177 L893.055 682.177 L892.496 682.177 L891.937 682.177 L891.377 682.177 L890.818 682.177 L890.259 682.177 L889.7 682.177 L889.14 682.177 L888.581 682.177 L888.022 682.177 L887.463 682.177 L886.903 682.177 L886.344 682.177 L885.785 682.177 L885.226 682.177 L884.666 682.177 L884.107 682.177 L883.548 682.177 L882.989 682.177 L882.429 682.177 L881.87 682.177 L881.311 682.177 L880.752 682.177 L880.192 682.177 L879.633 682.177 L879.074 682.177 L878.515 682.177 L877.955 682.177 L877.396 682.177 L876.837 682.177 L876.278 682.177 L875.718 682.177 L875.159 682.177 L874.6 682.177 L874.041 682.177 L873.481 682.177 L872.922 682.177 L872.363 682.177 L871.804 682.177 L871.244 682.177 L870.685 682.177 L870.126 682.177 L869.567 682.177 L869.007 682.177 L868.448 682.177 L867.889 682.177 L867.33 682.177 L866.77 682.177 L866.211 682.177 L865.652 682.177 L865.093 682.177 L864.533 682.177 L863.974 682.177 L863.415 682.177 L862.856 682.177 L862.296 682.177 L861.737 682.177 L861.178 682.177 L860.619 682.177 L860.059 682.177 L859.5 682.177 L858.941 682.177 L858.382 682.177 L857.822 682.177 L857.263 682.177 L856.704 682.177 L856.145 682.177 L855.585 682.177 L855.026 682.177 L854.467 682.177 L853.908 682.177 L853.348 682.177 L852.789 682.177 L852.23 682.177 L851.671 682.177 L851.111 682.177 L850.552 682.177 L849.993 682.177 L849.434 682.177 L848.874 682.177 L848.315 682.177 L847.756 682.177 L847.197 682.177 L846.637 682.177 L846.078 682.177 L845.519 682.177 L844.96 682.177 L844.4 682.177 L843.841 682.177 L843.282 682.177 L842.723 682.177 L842.163 682.177 L841.604 682.177 L841.045 682.177 L840.486 682.177 L839.926 682.177 L839.367 682.177 L838.808 682.177 L838.249 682.177 L837.689 682.177 L837.13 682.177 L836.571 682.177 L836.012 682.177 L835.452 682.177 L834.893 682.177 L834.334 682.177 L833.775 682.177 L833.215 682.177 L832.656 682.177 L832.097 682.177 L831.538 682.177 L830.978 682.177 L830.419 682.177 L829.86 682.177 L829.301 682.177 L828.741 682.177 L828.182 682.177 L827.623 682.177 L827.064 682.177 L826.504 682.177 L825.945 682.177 L825.386 682.177 L824.827 682.177 L824.267 682.177 L823.708 682.177 L823.149 682.177 L822.59 682.177 L822.03 682.177 L821.471 682.177 L820.912 682.177 L820.353 682.177 L819.793 682.177 L819.234 682.177 L818.675 682.177 L818.116 682.177 L817.556 682.177 L816.997 682.177 L816.438 682.177 L815.879 682.177 L815.319 682.177 L814.76 682.177 L814.201 682.177 L813.642 682.177 L813.082 682.177 L812.523 682.177 L811.964 682.177 L811.405 682.177 L810.845 682.177 L810.286 682.177 L809.727 682.177 L809.168 682.177 L808.608 682.177 L808.049 682.177 L807.49 682.177 L806.931 682.177 L806.371 682.177 L805.812 682.177 L805.253 682.177 L804.693 682.177 L804.134 682.177 L803.575 682.177 L803.016 682.177 L802.456 682.177 L801.897 682.177 L801.338 682.177 L800.779 682.177 L800.219 682.177 L799.66 682.177 L799.101 682.177 L798.542 682.177 L797.982 682.177 L797.423 682.177 L796.864 682.177 L796.305 682.177 L795.745 682.177 L795.186 682.177 L794.627 682.177 L794.068 682.177 L793.508 682.177 L792.949 682.177 L792.39 682.177 L791.831 682.177 L791.271 682.177 L790.712 682.177 L790.153 682.177 L789.594 682.177 L789.034 682.177 L788.475 682.177 L787.916 682.177 L787.357 682.177 L786.797 682.177 L786.238 682.177 L785.679 682.177 L785.12 682.177 L784.56 682.177 L784.001 682.177 L783.442 682.177 L782.883 682.177 L782.323 682.177 L781.764 682.177 L781.205 682.177 L780.646 682.177 L780.086 682.177 L779.527 682.177 L778.968 682.177 L778.409 682.177 L777.849 682.177 L777.29 682.177 L776.731 682.177 L776.172 682.177 L775.612 682.177 L775.053 682.177 L774.494 682.177 L773.935 682.177 L773.375 682.177 L772.816 682.177 L772.257 682.177 L771.698 682.177 L771.138 682.177 L770.579 682.177 L770.02 682.177 L769.461 682.177 L768.901 682.177 L768.342 682.177 L767.783 682.177 L767.224 682.177 L766.664 682.177 L766.105 682.177 L765.546 682.177 L764.987 682.177 L764.427 682.177 L763.868 682.177 L763.309 682.177 L762.75 682.177 L762.19 682.177 L761.631 682.177 L761.072 682.177 L760.513 682.177 L759.953 682.177 L759.394 682.177 L758.835 682.177 L758.276 682.177 L757.716 682.177 L757.157 682.177 L756.598 682.177 L756.039 682.177 L755.479 682.177 L754.92 682.177 L754.361 682.177 L753.802 682.177 L753.242 682.177 L752.683 682.177 L752.124 682.177 L751.565 682.177 L751.005 682.177 L750.446 682.177 L749.887 682.177 L749.328 682.177 L748.768 682.177 L748.209 682.177 L747.65 682.177 L747.091 682.177 L746.531 682.177 L745.972 682.177 L745.413 682.177 L744.854 682.177 L744.294 682.177 L743.735 682.177 L743.176 682.177 L742.617 682.177 L742.057 682.177 L741.498 682.177 L740.939 682.177 L740.38 682.177 L739.82 682.177 L739.261 682.177 L738.702 682.177 L738.143 682.177 L737.583 682.177 L737.024 682.177 L736.465 682.177 L735.906 682.177 L735.346 682.177 L734.787 682.177 L734.228 682.177 L733.669 682.177 L733.109 682.177 L732.55 682.177 L731.991 682.177 L731.432 682.177 L730.872 682.177 L730.313 682.177 L729.754 682.177 L729.195 682.177 L728.635 682.177 L728.076 682.177 L727.517 682.177 L726.958 682.177 L726.398 682.177 L725.839 682.177 L725.28 682.177 L724.721 682.177 L724.161 682.177 L723.602 682.177 L723.043 682.177 L722.484 682.177 L721.924 682.177 L721.365 682.177 L720.806 682.177 L720.247 682.177  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.587 720.806,683.587 721.365,683.587 721.924,683.587 722.484,683.587 723.043,683.587 723.602,683.587 724.161,683.587 724.721,683.587 725.28,683.587 725.839,683.587 726.398,683.587 726.958,683.587 727.517,683.587 728.076,683.587 728.635,683.587 729.195,683.587 729.754,683.587 730.313,683.587 730.872,683.587 731.432,683.587 731.991,683.587 732.55,683.587 733.109,683.587 733.669,683.587 734.228,683.587 734.787,683.587 735.346,683.587 735.906,683.587 736.465,683.587 737.024,683.587 737.583,683.587 738.143,683.587 738.702,683.587 739.261,683.587 739.82,683.587 740.38,683.587 740.939,683.587 741.498,683.587 742.057,683.587 742.617,683.587 743.176,683.587 743.735,683.587 744.294,683.587 744.854,683.587 745.413,683.587 745.972,683.587 746.531,683.587 747.091,683.587 747.65,683.587 748.209,683.587 748.768,683.587 749.328,683.587 749.887,683.587 750.446,683.587 751.005,683.587 751.565,683.587 752.124,683.587 752.683,683.587 753.242,683.587 753.802,683.587 754.361,683.587 754.92,683.587 755.479,683.587 756.039,683.587 756.598,683.587 757.157,683.587 757.716,683.587 758.276,683.587 758.835,683.587 759.394,683.587 759.953,683.587 760.513,683.587 761.072,683.587 761.631,683.587 762.19,683.587 762.75,683.587 763.309,683.587 763.868,683.587 764.427,683.587 764.987,683.587 765.546,683.587 766.105,683.587 766.664,683.587 767.224,683.587 767.783,683.587 768.342,683.587 768.901,683.587 769.461,683.587 770.02,683.587 770.579,683.587 771.138,683.587 771.698,683.587 772.257,683.587 772.816,683.587 773.375,683.587 773.935,683.587 774.494,683.587 775.053,683.587 775.612,683.587 776.172,683.587 776.731,683.587 777.29,683.587 777.849,683.587 778.409,683.587 778.968,683.587 779.527,683.587 780.086,683.587 780.646,683.587 781.205,683.587 781.764,683.587 782.323,683.587 782.883,683.587 783.442,683.587 784.001,683.587 784.56,683.587 785.12,683.587 785.679,683.587 786.238,683.587 786.797,683.587 787.357,683.587 787.916,683.587 788.475,683.587 789.034,683.587 789.594,683.587 790.153,683.587 790.712,683.587 791.271,683.587 791.831,683.587 792.39,683.587 792.949,683.587 793.508,683.587 794.068,683.587 794.627,683.587 795.186,683.587 795.745,683.587 796.305,683.587 796.864,683.587 797.423,683.587 797.982,683.587 798.542,683.587 799.101,683.587 799.66,683.587 800.219,683.587 800.779,683.587 801.338,683.587 801.897,683.587 802.456,683.587 803.016,683.587 803.575,683.587 804.134,683.587 804.693,683.587 805.253,683.587 805.812,683.587 806.371,683.587 806.931,683.587 807.49,683.587 808.049,683.587 808.608,683.587 809.168,683.587 809.727,683.587 810.286,683.587 810.845,683.587 811.405,683.587 811.964,683.587 812.523,683.587 813.082,683.587 813.642,683.587 814.201,683.587 814.76,683.587 815.319,683.587 815.879,683.587 816.438,683.587 816.997,683.587 817.556,683.587 818.116,683.587 818.675,683.587 819.234,683.587 819.793,683.587 820.353,683.587 820.912,683.587 821.471,683.587 822.03,683.587 822.59,683.587 823.149,683.587 823.708,683.587 824.267,683.587 824.827,683.587 825.386,683.587 825.945,683.587 826.504,683.587 827.064,683.587 827.623,683.587 828.182,683.587 828.741,683.587 829.301,683.587 829.86,683.587 830.419,683.587 830.978,683.587 831.538,683.587 832.097,683.587 832.656,683.587 833.215,683.587 833.775,683.587 834.334,683.587 834.893,683.587 835.452,683.587 836.012,683.587 836.571,683.587 837.13,683.587 837.689,683.587 838.249,683.587 838.808,683.587 839.367,683.587 839.926,683.587 840.486,683.587 841.045,683.587 841.604,683.587 842.163,683.587 842.723,683.587 843.282,683.587 843.841,683.587 844.4,683.587 844.96,683.587 845.519,683.587 846.078,683.587 846.637,683.587 847.197,683.587 847.756,683.587 848.315,683.587 848.874,683.587 849.434,683.587 849.993,683.587 850.552,683.587 851.111,683.587 851.671,683.587 852.23,683.587 852.789,683.587 853.348,683.587 853.908,683.587 854.467,683.587 855.026,683.587 855.585,683.587 856.145,683.587 856.704,683.587 857.263,683.587 857.822,683.587 858.382,683.587 858.941,683.587 859.5,683.587 860.059,683.587 860.619,683.587 861.178,683.587 861.737,683.587 862.296,683.587 862.856,683.587 863.415,683.587 863.974,683.587 864.533,683.587 865.093,683.587 865.652,683.587 866.211,683.587 866.77,683.587 867.33,683.587 867.889,683.587 868.448,683.587 869.007,683.587 869.567,683.587 870.126,683.587 870.685,683.587 871.244,683.587 871.804,683.587 872.363,683.587 872.922,683.587 873.481,683.587 874.041,683.587 874.6,683.587 875.159,683.587 875.718,683.587 876.278,683.587 876.837,683.587 877.396,683.587 877.955,683.587 878.515,683.587 879.074,683.587 879.633,683.587 880.192,683.587 880.752,683.587 881.311,683.587 881.87,683.587 882.429,683.587 882.989,683.587 883.548,683.587 884.107,683.587 884.666,683.587 885.226,683.587 885.785,683.587 886.344,683.587 886.903,683.587 887.463,683.587 888.022,683.587 888.581,683.587 889.14,683.587 889.7,683.587 890.259,683.587 890.818,683.587 891.377,683.587 891.937,683.587 892.496,683.587 893.055,683.587 893.614,683.587 894.174,683.587 894.733,683.587 895.292,683.587 895.851,683.587 896.411,683.587 896.97,683.587 897.529,683.587 898.088,683.587 898.648,683.587 899.207,683.587 899.766,683.587 900.325,683.587 900.885,683.587 901.444,683.587 902.003,683.587 902.562,683.587 903.122,683.587 903.681,683.587 904.24,683.587 904.799,683.587 905.359,683.587 905.918,683.587 906.477,683.587 907.036,683.587 907.596,683.587 908.155,683.587 908.714,683.587 909.273,683.587 909.833,683.587 910.392,683.587 910.951,683.587 911.51,683.587 912.07,683.587 912.629,683.587 913.188,683.587 913.747,683.587 914.307,683.587 914.866,683.587 915.425,683.587 915.984,683.587 916.544,683.587 917.103,683.587 917.662,683.587 918.221,683.587 918.781,683.587 919.34,683.587 919.899,683.587 920.458,683.587 921.018,683.587 921.577,683.587 922.136,683.587 922.695,683.587 923.255,683.587 923.814,683.587 924.373,683.587 924.932,683.587 925.492,683.587 926.051,683.587 926.61,683.587 927.169,683.587 927.729,683.587 928.288,683.587 928.847,683.587 929.406,683.587 929.966,683.587 930.525,683.587 931.084,683.587 931.644,683.587 932.203,683.587 932.762,683.587 933.321,683.587 933.881,683.587 934.44,683.587 934.999,683.587 935.558,683.587 936.118,683.587 936.677,683.587 937.236,683.587 937.795,683.587 938.355,683.587 938.914,683.587 939.473,683.587 940.032,683.587 940.592,683.587 941.151,683.587 941.71,683.587 942.269,683.587 942.829,683.587 943.388,683.587 943.947,683.587 944.506,683.587 945.066,683.587 945.625,683.587 946.184,683.587 946.743,683.587 947.303,683.587 947.862,683.587 948.421,683.587 948.98,683.587 949.54,683.587 950.099,683.587 950.658,683.587 951.217,683.587 951.777,683.587 952.336,683.587 952.895,683.587 953.454,683.587 954.014,683.587 954.573,683.587 955.132,683.587 955.691,683.587 956.251,683.587 956.81,683.587 957.369,683.587 957.928,683.587 958.488,683.587 959.047,683.587 959.606,683.587 960.165,683.587 960.725,683.587 961.284,683.587 961.843,683.587 962.402,683.587 962.962,683.587 963.521,683.587 964.08,683.587 964.639,683.587 965.199,683.587 965.758,683.587 966.317,683.587 966.876,683.587 967.436,683.587 967.995,683.587 968.554,683.587 969.113,683.587 969.673,683.587 970.232,683.587 970.791,683.587 971.35,683.587 971.91,683.587 972.469,683.587 973.028,683.587 973.587,683.587 974.147,683.587 974.706,683.587 975.265,683.587 975.824,683.587 976.384,683.587 976.943,683.587 977.502,683.587 978.061,683.587 978.621,683.587 979.18,683.587 979.739,683.587 980.298,683.587 980.858,683.587 981.417,683.587 981.976,683.587 982.535,683.587 983.095,683.587 983.654,683.587 984.213,683.587 984.772,683.587 985.332,683.587 985.891,683.587 986.45,683.587 987.009,683.587 987.569,683.587 988.128,683.587 988.687,683.587 989.246,683.587 989.806,683.587 990.365,683.587 990.924,683.587 991.483,683.587 992.043,683.587 992.602,683.587 993.161,683.587 993.72,683.587 994.28,683.587 994.839,683.587 995.398,683.587 995.957,683.587 996.517,683.587 997.076,683.587 997.635,683.587 998.194,683.587 998.754,683.587 999.313,683.587 999.872,683.587 1000.43,683.587 1000.99,683.587 1001.55,683.587 1002.11,683.587 1002.67,683.587 1003.23,683.587 1003.79,683.587 1004.35,683.587 1004.91,683.587 1005.46,683.587 1006.02,683.587 1006.58,683.587 1007.14,683.587 1007.7,683.587 1008.26,683.587 1008.82,683.587 1009.38,683.587 1009.94,683.587 1010.5,683.587 1011.06,683.587 1011.62,683.587 1012.18,683.587 1012.73,683.587 1013.29,683.587 1013.85,683.587 1014.41,683.587 1014.97,683.587 1015.53,683.587 1016.09,683.587 1016.65,683.587 1017.21,683.587 1017.77,683.587 1018.33,683.587 1018.89,683.587 1019.45,683.587 1020.01,683.587 1020.56,683.587 1021.12,683.587 1021.68,683.587 1022.24,683.587 1022.8,683.587 1023.36,683.587 1023.92,683.587 1024.48,683.587 1025.04,683.587 1025.6,683.587 1026.16,683.587 1026.72,683.587 1027.28,683.587 1027.83,683.587 1028.39,683.587 1028.95,683.587 1029.51,683.587 1030.07,683.587 1030.63,683.587 1031.19,683.587 1031.75,683.587 1032.31,683.587 1032.87,683.587 1033.43,683.587 1033.99,683.587 1034.55,683.587 1035.1,683.587 1035.66,683.587 1036.22,683.587 1036.78,683.587 1037.34,683.587 1037.9,683.587 1038.46,683.587 1039.02,683.587 1039.58,683.587 1040.14,683.587 1040.7,683.587 1041.26,683.587 1041.82,683.587 1042.38,683.587 1042.93,683.587 1043.49,683.587 1044.05,683.587 1044.61,683.587 1045.17,683.587 1045.73,683.587 1046.29,683.587 1046.85,683.587 1047.41,683.587 1047.97,683.587 1048.53,683.587 1049.09,683.587 1049.65,683.587 1050.2,683.587 1050.76,683.587 1051.32,683.587 1051.88,683.587 1052.44,683.587 1053,683.587 1053.56,683.587 1054.12,683.587 1054.68,683.587 1055.24,683.587 1055.8,683.587 1056.36,683.587 1056.92,683.587 1057.48,683.587 1058.03,683.587 1058.59,683.587 1059.15,683.587 1059.71,683.587 1060.27,683.587 1060.83,683.587 1061.39,683.587 1061.95,683.587 1062.51,683.587 1063.07,683.587 1063.63,683.587 1064.19,683.587 1064.75,683.587 1065.3,683.587 1065.86,683.587 1066.42,683.587 1066.98,683.587 1067.54,683.587 1068.1,683.587 1068.66,683.587 1069.22,683.587 1069.78,683.587 1070.34,683.587 1070.9,683.587 1071.46,683.587 1072.02,683.587 1072.57,683.587 1073.13,683.587 1073.69,683.587 1074.25,683.587 1074.81,683.587 1075.37,683.587 1075.93,683.587 1076.49,683.587 1077.05,683.587 1077.61,683.587 1078.17,683.587 1078.73,683.587 1079.29,683.587 1079.85,683.587 1080.4,683.587 1080.96,683.587 1081.52,683.587 1082.08,683.587 1082.64,683.587 1083.2,683.587 1083.76,683.587 1084.32,683.587 1084.88,683.587 1085.44,683.587 1086,683.587 1086.56,683.587 1087.12,683.587 1087.67,683.587 1088.23,683.587 1088.79,683.587 1089.35,683.587 1089.91,683.587 1090.47,683.587 1091.03,683.587 1091.59,683.587 1092.15,683.587 1092.71,683.587 1093.27,683.587 1093.83,683.587 1094.39,683.587 1094.94,683.587 1095.5,683.587 1096.06,683.587 1096.62,683.587 1097.18,683.587 1097.74,683.587 1098.3,683.587 1098.86,683.587 1099.42,683.587 1099.98,683.587 1100.54,683.587 1101.1,683.587 1101.66,683.587 1102.22,683.587 1102.77,683.587 1103.33,683.587 1103.89,683.587 1104.45,683.587 1105.01,683.587 1105.57,683.587 1106.13,683.587 1106.69,683.587 1107.25,683.587 1107.81,683.587 1108.37,683.587 1108.93,683.587 1109.49,683.587 1110.04,683.587 1110.6,683.587 1111.16,683.587 1111.72,683.587 1112.28,683.587 1112.84,683.587 1113.4,683.587 1113.96,683.587 1114.52,683.587 1115.08,683.587 1115.64,683.587 1116.2,683.587 1116.76,683.587 1117.31,683.587 1117.87,683.587 1118.43,683.587 1118.99,683.587 1119.55,683.587 1120.11,683.587 1120.67,683.587 1121.23,683.587 1121.79,683.587 1122.35,683.587 1122.91,683.587 1123.47,683.587 1124.03,683.587 1124.59,683.587 1125.14,683.587 1125.7,683.587 1126.26,683.587 1126.82,683.587 1127.38,683.587 1127.94,683.587 1128.5,683.587 1129.06,683.587 1129.62,683.587 1130.18,683.587 1130.74,683.587 1131.3,683.587 1131.86,683.587 1132.41,683.587 1132.97,683.587 1133.53,683.587 1134.09,683.587 1134.65,683.587 1135.21,683.587 1135.77,683.587 1136.33,683.587 1136.89,683.587 1137.45,683.587 1138.01,683.587 1138.57,683.587 1139.13,683.587 1139.68,683.587 1140.24,683.587 1140.8,683.587 1141.36,683.587 1141.92,683.587 1142.48,683.587 1143.04,683.587 1143.6,683.587 1144.16,683.587 1144.72,683.587 1145.28,683.587 1145.84,683.587 1146.4,683.587 1146.96,683.587 1147.51,683.587 1148.07,683.587 1148.63,683.587 1149.19,683.587 1149.75,683.587 1150.31,683.587 1150.87,683.587 1151.43,683.587 1151.99,683.587 1152.55,683.587 1153.11,683.587 1153.67,683.587 1154.23,683.587 1154.78,683.587 1155.34,683.587 1155.9,683.587 1156.46,683.587 1157.02,683.587 1157.58,683.587 1158.14,683.587 1158.7,683.587 1159.26,683.587 1159.82,683.587 1160.38,683.587 1160.94,683.587 1161.5,683.587 1162.05,683.587 1162.61,683.587 1163.17,683.587 1163.73,683.587 1164.29,683.587 1164.85,683.587 1165.41,683.587 1165.97,683.587 1166.53,683.587 1167.09,683.587 1167.65,683.587 1168.21,683.587 1168.77,683.587 1169.33,683.587 1169.88,683.587 1170.44,683.587 1171,683.587 1171.56,683.587 1172.12,683.587 1172.68,683.587 1173.24,683.587 1173.8,683.587 1174.36,683.587 1174.92,683.587 1175.48,683.587 1176.04,683.587 1176.6,683.587 1177.15,683.587 1177.71,683.587 1178.27,683.587 1178.83,683.587 1179.39,683.587 1179.95,683.587 1180.51,683.587 1181.07,683.587 1181.63,683.587 1182.19,683.587 1182.75,683.587 1183.31,683.587 1183.87,683.587 1184.43,683.587 1184.98,683.587 1185.54,683.587 1186.1,683.587 1186.66,683.587 1187.22,683.587 1187.78,683.587 1188.34,683.587 1188.9,683.587 1189.46,683.587 1190.02,683.587 1190.58,683.587 1191.14,683.587 1191.7,683.587 1192.25,683.587 1192.81,683.587 1193.37,683.587 1193.93,683.587 1194.49,683.587 1195.05,683.587 1195.61,683.587 1196.17,683.587 1196.73,683.587 1197.29,683.587 1197.85,683.587 1198.41,683.587 1198.97,683.587 1199.52,683.587 1200.08,683.587 1200.64,683.587 1201.2,683.587 1201.76,683.587 1202.32,683.587 1202.88,683.587 1203.44,683.587 1204,683.587 1204.56,683.587 1205.12,683.587 1205.68,683.587 1206.24,683.587 1206.8,683.587 1207.35,683.587 1207.91,683.587 1208.47,683.587 1209.03,683.587 1209.59,683.587 1210.15,683.587 1210.71,683.587 1211.27,683.587 1211.83,683.587 1212.39,683.587 1212.95,683.587 1213.51,683.587 1214.07,683.587 1214.62,683.587 1215.18,683.587 1215.74,683.587 1216.3,683.587 1216.86,683.587 1217.42,683.587 1217.98,683.587 1218.54,683.587 1219.1,683.587 1219.66,683.587 1220.22,683.587 1220.78,683.587 1221.34,683.587 1221.89,683.587 1222.45,683.587 1223.01,683.587 1223.57,683.587 1224.13,683.587 1224.69,683.587 1225.25,683.587 1225.81,683.587 1226.37,683.587 1226.93,683.587 1227.49,683.587 1228.05,683.587 1228.61,683.587 1229.17,683.587 1229.72,683.587 1230.28,683.587 1230.84,683.587 1231.4,683.587 1231.96,683.587 1232.52,683.587 1233.08,683.587 1233.64,683.587 1234.2,683.587 1234.76,683.587 1235.32,683.587 1235.88,683.587 1236.44,683.587 1236.99,683.587 1237.55,683.587 1238.11,683.587 1238.67,683.587 1239.23,683.587 1239.79,683.587 1240.35,683.587 1240.91,683.587 1241.47,683.587 1242.03,683.587 1242.59,683.587 1243.15,683.587 1243.71,683.587 1244.26,683.587 1244.82,683.587 1245.38,683.587 1245.94,683.587 1246.5,683.587 1247.06,683.587 1247.62,683.587 1248.18,683.587 1248.74,683.587 1249.3,683.587 1249.86,683.587 1250.42,683.587 1250.98,683.587 1251.54,683.587 1252.09,683.587 1252.65,683.587 1253.21,683.587 1253.77,683.587 1254.33,683.587 1254.89,683.587 1255.45,683.587 1256.01,683.587 1256.57,683.587 1257.13,683.587 1257.69,683.587 1258.25,683.587 1258.81,683.587 1259.36,683.587 1259.92,683.587 1260.48,683.587 1261.04,683.587 1261.6,683.587 1262.16,683.587 1262.72,683.587 1263.28,683.587 1263.84,683.587 1264.4,683.587 1264.96,683.587 1265.52,683.587 1266.08,683.587 1266.63,683.587 1267.19,683.587 1267.75,683.587 1268.31,683.587 1268.87,683.587 1269.43,683.587 1269.99,683.587 1270.55,683.587 1271.11,683.587 1271.67,683.587 1272.23,683.587 1272.79,683.587 1273.35,683.587 1273.91,683.587 1274.46,683.587 1275.02,683.587 1275.58,683.587 1276.14,683.587 1276.7,683.587 1277.26,683.587 1277.82,683.587 1278.38,683.587 1278.94,683.587 1279.5,683.587 1280.06,683.587 1280.62,683.587 1281.18,683.587 1281.73,683.587 1282.29,683.587 1282.85,683.587 1283.41,683.587 1283.97,683.587 1284.53,683.587 1285.09,683.587 1285.65,683.587 1286.21,683.587 1286.77,683.587 1287.33,683.587 1287.89,683.587 1288.45,683.587 1289,683.587 1289.56,683.587 1290.12,683.587 1290.68,683.587 1291.24,683.587 1291.8,683.587 1292.36,683.587 1292.92,683.587 1293.48,683.587 1294.04,683.587 1294.6,683.587 1295.16,683.587 1295.72,683.587 1296.28,683.587 1296.83,683.587 1297.39,683.587 1297.95,683.587 1298.51,683.587 1299.07,683.587 1299.63,683.587 1300.19,683.587 1300.75,683.587 1301.31,683.587 1301.87,683.587 1302.43,683.587 1302.99,683.587 1303.55,683.587 1304.1,683.587 1304.66,683.587 1305.22,683.587 1305.78,683.587 1306.34,683.587 1306.9,683.587 1307.46,683.587 1308.02,683.587 1308.58,683.587 1309.14,683.587 1309.7,683.587 1310.26,683.587 1310.82,683.587 1311.38,683.587 1311.93,683.587 1312.49,683.587 1313.05,683.587 1313.61,683.587 1314.17,683.587 1314.73,683.587 1315.29,683.587 1315.85,683.587 1316.41,683.587 1316.97,683.587 1317.53,683.587 1318.09,683.587 1318.65,683.587 1319.2,683.587 1319.76,683.587 1320.32,683.587 1320.88,683.587 1321.44,683.587 1322,683.587 1322.56,683.587 1323.12,683.587 1323.68,683.587 1324.24,683.587 1324.8,683.587 1325.36,683.587 1325.92,683.587 1326.47,683.587 1327.03,683.587 1327.59,683.587 1328.15,683.587 1328.71,683.587 1329.27,683.587 1329.83,683.587 1330.39,683.587 1330.95,683.587 1331.51,683.587 1332.07,683.587 1332.63,683.587 1333.19,683.587 1333.75,683.587 1334.3,683.587 1334.86,683.587 1335.42,683.587 1335.98,683.587 1336.54,683.587 1337.1,683.587 1337.66,683.587 1338.22,683.587 1338.78,683.587 1339.34,683.587 1339.9,683.587 1340.46,683.587 1341.02,683.587 1341.57,683.587 1342.13,683.587 1342.69,683.587 1343.25,683.587 1343.81,683.587 1344.37,683.587 1344.93,683.587 1345.49,683.587 1346.05,683.587 1346.61,683.587 1347.17,683.587 1347.73,683.587 1348.29,683.587 1348.84,683.587 1349.4,683.587 1349.96,683.587 1350.52,683.587 1351.08,683.587 1351.64,683.587 1352.2,683.587 1352.76,683.587 1353.32,683.587 1353.88,683.587 1354.44,683.587 1355,683.587 1355.56,683.587 1356.12,683.587 1356.67,683.587 1357.23,683.587 1357.79,683.587 1358.35,683.587 1358.91,683.587 1359.47,683.587 1360.03,683.587 1360.59,683.587 1361.15,683.587 1361.71,683.587 1362.27,683.587 1362.83,683.587 1363.39,683.587 1363.94,683.587 1364.5,683.587 1365.06,683.587 1365.62,683.587 1366.18,683.587 1366.74,683.587 1367.3,683.587 1367.86,683.587 1368.42,683.587 1368.98,683.587 1369.54,683.587 1370.1,683.587 1370.66,683.587 1371.21,683.587 1371.77,683.587 1372.33,683.587 1372.89,683.587 1373.45,683.587 1374.01,683.587 1374.57,683.587 1375.13,683.587 1375.69,683.587 1376.25,683.587 1376.81,683.587 1377.37,683.587 1377.93,683.587 1378.49,683.587 1379.04,683.587 1379.6,683.587 1380.16,683.587 1380.72,683.587 1381.28,683.587 1381.84,683.587 1382.4,683.587 1382.96,683.587 1383.52,683.587 1384.08,683.587 1384.64,683.587 1385.2,683.587 1385.76,683.587 1386.31,683.587 1386.87,683.587 1387.43,683.587 1387.99,683.587 1388.55,683.587 1389.11,683.587 1389.67,683.587 1390.23,683.587 1390.79,683.587 1391.35,683.587 1391.91,683.587 1392.47,683.587 1393.03,683.587 1393.58,683.587 1394.14,683.587 1394.7,683.587 1395.26,683.587 1395.82,683.587 1396.38,683.587 1396.94,683.587 1397.5,683.587 1398.06,683.587 1398.62,683.587 1399.18,683.587 1399.74,683.587 1400.3,683.587 1400.86,683.587 1401.41,683.587 1401.97,683.587 1402.53,683.587 1403.09,683.587 1403.65,683.587 1404.21,683.587 1404.77,683.587 1405.33,683.587 1405.89,683.587 1406.45,683.587 1407.01,683.587 1407.57,683.587 1408.13,683.587 1408.68,683.587 1409.24,683.587 1409.8,683.587 1410.36,683.587 1410.92,683.587 1411.48,683.587 1412.04,683.587 1412.6,683.587 1413.16,683.587 1413.72,683.587 1414.28,683.587 1414.84,683.587 1415.4,683.587 1415.95,683.587 1416.51,683.587 1417.07,683.587 1417.63,683.587 1418.19,683.587 1418.75,683.587 1419.31,683.587 1419.87,683.587 1420.43,683.587 1420.99,683.587 1421.55,683.587 1422.11,683.587 1422.67,683.587 1423.23,683.587 1423.78,683.587 1424.34,683.587 1424.9,683.587 1425.46,683.587 1426.02,683.587 1426.58,683.587 1427.14,683.587 1427.7,683.587 1428.26,683.587 1428.82,683.587 1429.38,683.587 1429.94,683.587 1430.5,683.587 1431.05,683.587 1431.61,683.587 1432.17,683.587 1432.73,683.587 1433.29,683.587 1433.85,683.587 1434.41,683.587 1434.97,683.587 1435.53,683.587 1436.09,683.587 1436.65,683.587 1437.21,683.587 1437.77,683.587 1438.33,683.587 1438.88,683.587 1439.44,683.587 1440,683.587 1440.56,683.587 1441.12,683.587 1441.68,683.587 1442.24,683.587 1442.8,683.587 1443.36,683.587 1443.92,683.587 1444.48,683.587 1445.04,683.587 1445.6,683.587 1446.15,683.587 1446.71,683.587 1447.27,683.587 1447.83,683.587 1448.39,683.587 1448.95,683.587 1449.51,683.587 1450.07,683.587 1450.63,683.587 1451.19,683.587 1451.75,683.587 1452.31,683.587 1452.87,683.587 1453.42,683.587 1453.98,683.587 1454.54,683.587 1455.1,683.587 1455.66,683.587 1456.22,683.587 1456.78,683.587 1457.34,683.587 1457.9,683.587 1458.46,683.587 1459.02,683.587 1459.58,683.587 1460.14,683.587 1460.7,683.587 1461.25,683.587 1461.81,683.587 1462.37,683.587 1462.93,683.587 1463.49,683.587 1464.05,683.587 1464.61,683.587 1465.17,683.587 1465.73,683.587 1466.29,683.587 1466.85,683.587 1467.41,683.587 1467.97,683.587 1468.52,683.587 1469.08,683.587 1469.64,683.587 1470.2,683.587 1470.76,683.587 1471.32,683.587 1471.88,683.587 1472.44,683.587 1473,683.587 1473.56,683.587 1474.12,683.587 1474.68,683.587 1475.24,683.587 1475.79,683.587 1476.35,683.587 1476.91,683.587 1477.47,683.587 1478.03,683.587 1478.59,683.587 1479.15,683.587 1479.71,683.587 1480.27,683.587 1480.83,683.587 1481.39,683.587 1481.95,683.587 1482.51,683.587 1483.07,683.587 1483.62,683.587 1484.18,683.587 1484.74,683.587 1485.3,683.587 1485.86,683.587 1486.42,683.587 1486.98,683.587 1487.54,683.587 1488.1,683.587 1488.66,683.587 1489.22,683.587 1489.78,683.587 1490.34,683.587 1490.89,683.587 1491.45,683.587 1492.01,683.587 1492.57,683.587 1493.13,683.587 1493.69,683.587 1494.25,683.587 1494.81,683.587 1495.37,683.587 1495.93,683.587 1496.49,683.587 1497.05,683.587 1497.61,683.587 1498.16,683.587 1498.72,683.587 1499.28,683.587 1499.84,683.587 1500.4,683.587 1500.96,683.587 1501.52,683.587 1502.08,683.587 1502.64,683.587 1503.2,683.587 1503.76,683.587 1504.32,683.587 1504.88,683.587 1505.44,683.587 1505.99,683.587 1506.55,683.587 1507.11,683.587 1507.67,683.587 1508.23,683.587 1508.79,683.587 1509.35,683.587 1509.91,683.587 1510.47,683.587 1511.03,683.587 1511.59,683.587 1512.15,683.587 1512.71,683.587 1513.26,683.587 1513.82,683.587 1514.38,683.587 1514.94,683.587 1515.5,683.587 1516.06,683.587 1516.62,683.587 1517.18,683.587 1517.74,683.587 1518.3,683.587 1518.86,683.587 1519.42,683.587 1519.98,683.587 1520.53,683.587 1521.09,683.587 1521.65,683.587 1522.21,683.587 1522.77,683.587 1523.33,683.587 1523.89,683.587 1524.45,683.587 1525.01,683.587 1525.57,683.587 1526.13,683.587 1526.69,683.587 1527.25,683.587 1527.81,683.587 1528.36,683.587 1528.92,683.587 1529.48,683.587 1530.04,683.587 1530.6,683.587 1531.16,683.587 1531.72,683.587 1532.28,683.587 1532.84,683.587 1533.4,683.587 1533.96,683.587 1534.52,683.587 1535.08,683.587 1535.63,683.587 1536.19,683.587 1536.75,683.587 1537.31,683.587 1537.87,683.587 1538.43,683.587 1538.99,683.587 1539.55,683.587 1540.11,683.587 1540.67,683.587 1541.23,683.587 1541.79,683.587 1542.35,683.587 1542.9,683.587 1543.46,683.587 1544.02,683.587 1544.58,683.587 1545.14,683.587 1545.7,683.587 1546.26,683.587 1546.82,683.587 1547.38,683.587 1547.94,683.587 1548.5,683.587 1549.06,683.587 1549.62,683.587 1550.18,683.587 1550.73,683.587 1551.29,683.587 1551.85,683.587 1552.41,683.587 1552.97,683.587 1553.53,683.587 1554.09,683.587 1554.65,683.587 1555.21,683.587 1555.77,683.587 1556.33,683.587 1556.89,683.587 1557.45,683.587 1558,683.587 1558.56,683.587 1559.12,683.587 1559.68,683.587 1560.24,683.587 1560.8,683.587 1561.36,683.587 1561.92,683.587 1562.48,683.587 1563.04,683.587 1563.6,683.587 1564.16,683.587 1564.72,683.587 1565.28,683.587 1565.83,683.587 1566.39,683.587 1566.95,683.587 1567.51,683.587 1568.07,683.587 1568.63,683.587 1569.19,683.587 1569.75,683.587 1570.31,683.587 1570.87,683.587 1571.43,683.587 1571.99,683.587 1572.55,683.587 1573.1,683.587 1573.66,683.587 1574.22,683.587 1574.78,683.587 1575.34,683.587 1575.9,683.587 1576.46,683.587 1577.02,683.587 1577.58,683.587 1578.14,683.587 1578.7,683.587 1579.26,683.587 1579.82,683.587 1580.37,683.587 1580.93,683.587 1581.49,683.587 1582.05,683.587 1582.61,683.587 1583.17,683.587 1583.73,683.587 1584.29,683.587 1584.85,683.587 1585.41,683.587 1585.97,683.587 1586.53,683.587 1587.09,683.587 1587.65,683.587 1588.2,683.587 1588.76,683.587 1589.32,683.587 1589.88,683.587 1590.44,683.587 1591,683.587 1591.56,683.587 1592.12,683.587 1592.68,683.587 1593.24,683.587 1593.8,683.587 1594.36,683.587 1594.92,683.587 1595.47,683.587 1596.03,683.587 1596.59,683.587 1597.15,683.587 1597.71,683.587 1598.27,683.587 1598.83,683.587 1599.39,683.587 1599.95,683.587 1600.51,683.587 1601.07,683.587 1601.63,683.587 1602.19,683.587 1602.74,683.587 1603.3,683.587 1603.86,683.587 1604.42,683.587 1604.98,683.587 1605.54,683.587 1606.1,683.587 1606.66,683.587 1607.22,683.587 1607.78,683.587 1608.34,683.587 1608.9,683.587 1609.46,683.587 1610.02,683.587 1610.57,683.587 1611.13,683.587 1611.69,683.587 1612.25,683.587 1612.81,683.587 1613.37,683.587 1613.93,683.587 1614.49,683.587 1615.05,683.587 1615.61,683.587 1616.17,683.587 1616.73,683.587 1617.29,683.587 1617.84,683.587 1618.4,683.587 1618.96,683.587 1619.52,683.587 1620.08,683.587 1620.64,683.587 1621.2,683.587 1621.76,683.587 1622.32,683.587 1622.88,683.587 1623.44,683.587 1624,683.587 1624.56,683.587 1625.11,683.587 1625.67,683.587 1626.23,683.587 1626.79,683.587 1627.35,683.587 1627.91,683.587 1628.47,683.587 1629.03,683.587 1629.59,683.587 1630.15,683.587 1630.71,683.587 1631.27,683.587 1631.83,683.587 1632.39,683.587 1632.94,683.587 1633.5,683.587 1634.06,683.587 1634.62,683.587 1635.18,683.587 1635.74,683.587 1636.3,683.587 1636.86,683.587 1637.42,683.587 1637.98,683.587 1638.54,683.587 1639.1,683.587 1639.66,683.587 1640.21,683.587 1640.77,683.587 1641.33,683.587 1641.89,683.587 1642.45,683.587 1643.01,683.587 1643.57,683.587 1644.13,683.587 1644.69,683.587 1645.25,683.587 1645.81,683.587 1646.37,683.587 1646.93,683.587 1647.48,683.587 1648.04,683.587 1648.6,683.587 1649.16,683.587 1649.72,683.587 1650.28,683.587 1650.84,683.587 1651.4,683.587 1651.96,683.587 1652.52,683.587 1653.08,683.587 1653.64,683.587 1654.2,683.587 1654.76,683.587 1655.31,683.587 1655.87,683.587 1656.43,683.587 1656.99,683.587 1657.55,683.587 1658.11,683.587 1658.67,683.587 1659.23,683.587 1659.79,683.587 1660.35,683.587 1660.91,683.587 1661.47,683.587 1662.03,683.587 1662.58,683.587 1663.14,683.587 1663.7,683.587 1664.26,683.587 1664.82,683.587 1665.38,683.587 1665.94,683.587 1666.5,683.587 1667.06,683.587 1667.62,683.587 1668.18,683.587 1668.74,683.587 1669.3,683.587 1669.85,683.587 1670.41,683.587 1670.97,683.587 1671.53,683.587 1672.09,683.587 1672.65,683.587 1673.21,683.587 1673.77,683.587 1674.33,683.587 1674.89,683.587 1675.45,683.587 1676.01,683.587 1676.57,683.587 1677.13,683.587 1677.68,683.587 1678.24,683.587 1678.8,683.587 1679.36,683.587 1679.92,683.587 1680.48,683.587 1681.04,683.587 1681.6,683.587 1682.16,683.587 1682.72,683.587 1683.28,683.587 1683.84,683.587 1684.4,683.587 1684.95,683.587 1685.51,683.587 1686.07,683.587 1686.63,683.587 1687.19,683.587 1687.75,683.587 1688.31,683.587 1688.87,683.587 1689.43,683.587 1689.99,683.587 1690.55,683.587 1691.11,683.587 1691.67,683.587 1692.23,683.587 1692.78,683.587 1693.34,683.587 1693.9,683.587 1694.46,683.587 1695.02,683.587 1695.58,683.587 1696.14,683.587 1696.7,683.587 1697.26,683.587 1697.82,683.587 1698.38,683.587 1698.94,683.587 1699.5,683.587 1700.05,683.587 1700.61,683.587 1701.17,683.587 1701.73,683.587 1702.29,683.587 1702.85,683.587 1703.41,683.587 1703.97,683.587 1704.53,683.587 1705.09,683.587 1705.65,683.587 1706.21,683.587 1706.77,683.587 1707.32,683.587 1707.88,683.587 1708.44,683.587 1709,683.587 1709.56,683.587 1710.12,683.587 1710.68,683.587 1711.24,683.587 1711.8,683.587 1712.36,683.587 1712.92,683.587 1713.48,683.587 1714.04,683.587 1714.6,683.587 1715.15,683.587 1715.71,683.587 1716.27,683.587 1716.83,683.587 1717.39,683.587 1717.95,683.587 1718.51,683.587 1719.07,683.587 1719.63,683.587 1720.19,683.587 1720.75,683.587 1721.31,683.587 1721.87,683.587 1722.42,683.587 1722.98,683.587 1723.54,683.587 1724.1,683.587 1724.66,683.587 1725.22,683.587 1725.78,683.587 1726.34,683.587 1726.9,683.587 1727.46,683.587 1728.02,683.587 1728.58,683.587 1729.14,683.587 1729.69,683.587 1730.25,683.587 1730.81,683.587 1731.37,683.587 1731.93,683.587 1732.49,683.587 1733.05,683.587 1733.61,683.587 1734.17,683.587 1734.73,683.587 1735.29,683.587 1735.85,683.587 1736.41,683.587 1736.97,683.587 1737.52,683.587 1738.08,683.587 1738.64,683.587 1739.2,683.587 1739.76,683.587 1740.32,683.587 1740.88,683.587 1741.44,683.587 1742,683.587 1742.56,683.587 1743.12,683.587 1743.68,683.587 1744.24,683.587 1744.79,683.587 1745.35,683.587 1745.91,683.587 1746.47,683.587 1747.03,683.587 1747.59,683.587 1748.15,683.587 1748.71,683.587 1749.27,683.587 1749.83,683.587 1750.39,683.587 1750.95,683.587 1751.51,683.587 1752.06,683.587 1752.62,683.587 1753.18,683.587 1753.74,683.587 1754.3,683.587 1754.86,683.587 1755.42,683.587 1755.98,683.587 1756.54,683.587 1757.1,683.587 1757.66,683.587 1758.22,683.587 1758.78,683.587 1759.34,683.587 1759.89,683.587 1760.45,683.587 1761.01,683.587 1761.57,683.587 1762.13,683.587 1762.69,683.587 1763.25,683.587 1763.81,683.587 1764.37,683.587 1764.93,683.587 1765.49,683.587 1766.05,683.587 1766.61,683.587 1767.16,683.587 1767.72,683.587 1768.28,683.587 1768.84,683.587 1769.4,683.587 1769.96,683.587 1770.52,683.587 1771.08,683.587 1771.64,683.587 1772.2,683.587 1772.76,683.587 1773.32,683.587 1773.88,683.587 1774.43,683.587 1774.99,683.587 1775.55,683.587 1776.11,683.587 1776.67,683.587 1777.23,683.587 1777.79,683.587 1778.35,683.587 1778.91,683.587 1779.47,683.587 1780.03,683.587 1780.59,683.587 1781.15,683.587 1781.71,683.587 1782.26,683.587 1782.82,683.587 1783.38,683.587 1783.94,683.587 1784.5,683.587 1785.06,683.587 1785.62,683.587 1786.18,683.587 1786.74,683.587 1787.3,683.587 1787.86,683.587 1788.42,683.587 1788.98,683.587 1789.53,683.587 1790.09,683.587 1790.65,683.587 1791.21,683.587 1791.77,683.587 1792.33,683.587 1792.89,683.587 1793.45,683.587 1794.01,683.587 1794.57,683.587 1795.13,683.587 1795.69,683.587 1796.25,683.587 1796.8,683.587 1797.36,683.587 1797.92,683.587 1798.48,683.587 1799.04,683.587 1799.6,683.587 1800.16,683.587 1800.72,683.587 1801.28,683.587 1801.84,683.587 1802.4,683.587 1802.96,683.587 1803.52,683.587 1804.08,683.587 1804.63,683.587 1805.19,683.587 1805.75,683.587 1806.31,683.587 1806.87,683.587 1807.43,683.587 1807.99,683.587 1808.55,683.587 1809.11,683.587 1809.67,683.587 1810.23,683.587 1810.79,683.587 1811.35,683.587 1811.9,683.587 1812.46,683.587 1813.02,683.587 1813.58,683.587 1814.14,683.587 1814.7,683.587 1815.26,683.587 1815.82,683.587 1816.38,683.587 1816.94,683.587 1817.5,683.587 1818.06,683.587 1818.62,683.587 1819.18,683.587 1819.73,683.587 1820.29,683.587 1820.85,683.587 1821.41,683.587 1821.97,683.587 1822.53,683.587 1823.09,683.587 1823.65,683.587 1824.21,683.587 1824.77,683.587 1825.33,683.587 1825.89,683.587 1826.45,683.587 1827,683.587 1827.56,683.587 1828.12,683.587 1828.68,683.587 1829.24,683.587 1829.8,683.587 1830.36,683.587 1830.92,683.587 1831.48,683.587 1832.04,683.587 1832.6,683.587 1833.16,683.587 1833.72,683.587 1834.27,683.587 1834.83,683.587 1835.39,683.587 1835.95,683.587 1836.51,683.587 1837.07,683.587 1837.63,683.587 1838.19,683.587 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025885325583915 ± 0.0242048947582891\nProjected Energy: -4.015096174125968 ± (0.007012230932327945, 0.007096552264785672)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.520834</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4356e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3205e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.061e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.372e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.915e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.417e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321594\n -3.3631242916133655\n -0.759019192277087\n  0.13584182219622143\n  0.15789998694607377\n  0.8767114411781325\n  1.5305929970973358\n  1.5835732611867384\n  3.0728703303258644\n  3.125672653951842\n  4.86210722156217\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
