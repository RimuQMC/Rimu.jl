var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2116076471235571 ± 0.001354917245979155\n   G2(1) = 0.9187444302560478 ± 0.0006954435467211164\n   G2(2) = 0.9811235137797363 ± 0.0005767987629534541\n   G2(3) = 0.9886564648048745 ± 0.0010122956762763848\n   G2(4) = 0.9811235137797363 ± 0.0005767987629534541\n   G2(5) = 0.9187444302560478 ± 0.0006954435467211164\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.025974992440863 ± 0.11518354918386833\n   Replica 2: -3.9818879560026965 ± 0.13664761307657286\n   Replica 3: -3.994738091076605 ± 0.13821296553595638\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip850\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip851\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip850)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip852\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.85 2211.02,1261.85 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.55 2211.02,1004.55 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.258 2211.02,747.258 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.963 2211.02,489.963 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.667 2211.02,232.667 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.85 423.181,1261.85 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.55 423.181,1004.55 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.258 423.181,747.258 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.963 423.181,489.963 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.667 423.181,232.667 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M356.339 1247.65 Q352.728 1247.65 350.899 1251.21 Q349.094 1254.75 349.094 1261.88 Q349.094 1268.99 350.899 1272.56 Q352.728 1276.1 356.339 1276.1 Q359.973 1276.1 361.779 1272.56 Q363.608 1268.99 363.608 1261.88 Q363.608 1254.75 361.779 1251.21 Q359.973 1247.65 356.339 1247.65 M356.339 1243.94 Q362.149 1243.94 365.205 1248.55 Q368.284 1253.13 368.284 1261.88 Q368.284 1270.61 365.205 1275.22 Q362.149 1279.8 356.339 1279.8 Q350.529 1279.8 347.45 1275.22 Q344.395 1270.61 344.395 1261.88 Q344.395 1253.13 347.45 1248.55 Q350.529 1243.94 356.339 1243.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M290.043 1017.9 L306.363 1017.9 L306.363 1021.83 L284.418 1021.83 L284.418 1017.9 Q287.08 1015.14 291.664 1010.51 Q296.27 1005.86 297.451 1004.52 Q299.696 1002 300.576 1000.26 Q301.478 998.501 301.478 996.811 Q301.478 994.056 299.534 992.32 Q297.613 990.584 294.511 990.584 Q292.312 990.584 289.858 991.348 Q287.427 992.112 284.65 993.663 L284.65 988.941 Q287.474 987.806 289.927 987.228 Q292.381 986.649 294.418 986.649 Q299.789 986.649 302.983 989.334 Q306.177 992.019 306.177 996.51 Q306.177 998.64 305.367 1000.56 Q304.58 1002.46 302.474 1005.05 Q301.895 1005.72 298.793 1008.94 Q295.691 1012.13 290.043 1017.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M316.224 987.274 L334.58 987.274 L334.58 991.209 L320.506 991.209 L320.506 999.681 Q321.524 999.334 322.543 999.172 Q323.562 998.987 324.58 998.987 Q330.367 998.987 333.747 1002.16 Q337.126 1005.33 337.126 1010.75 Q337.126 1016.32 333.654 1019.43 Q330.182 1022.51 323.862 1022.51 Q321.687 1022.51 319.418 1022.13 Q317.173 1021.76 314.765 1021.02 L314.765 1016.32 Q316.849 1017.46 319.071 1018.01 Q321.293 1018.57 323.77 1018.57 Q327.774 1018.57 330.112 1016.46 Q332.45 1014.36 332.45 1010.75 Q332.45 1007.13 330.112 1005.03 Q327.774 1002.92 323.77 1002.92 Q321.895 1002.92 320.02 1003.34 Q318.168 1003.76 316.224 1004.63 L316.224 987.274 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M356.339 990.353 Q352.728 990.353 350.899 993.917 Q349.094 997.459 349.094 1004.59 Q349.094 1011.7 350.899 1015.26 Q352.728 1018.8 356.339 1018.8 Q359.973 1018.8 361.779 1015.26 Q363.608 1011.7 363.608 1004.59 Q363.608 997.459 361.779 993.917 Q359.973 990.353 356.339 990.353 M356.339 986.649 Q362.149 986.649 365.205 991.255 Q368.284 995.839 368.284 1004.59 Q368.284 1013.32 365.205 1017.92 Q362.149 1022.51 356.339 1022.51 Q350.529 1022.51 347.45 1017.92 Q344.395 1013.32 344.395 1004.59 Q344.395 995.839 347.45 991.255 Q350.529 986.649 356.339 986.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M286.062 729.978 L304.418 729.978 L304.418 733.913 L290.344 733.913 L290.344 742.386 Q291.363 742.038 292.381 741.876 Q293.4 741.691 294.418 741.691 Q300.205 741.691 303.585 744.862 Q306.964 748.034 306.964 753.45 Q306.964 759.029 303.492 762.131 Q300.02 765.21 293.701 765.21 Q291.525 765.21 289.256 764.839 Q287.011 764.469 284.603 763.728 L284.603 759.029 Q286.687 760.163 288.909 760.719 Q291.131 761.274 293.608 761.274 Q297.613 761.274 299.951 759.168 Q302.288 757.061 302.288 753.45 Q302.288 749.839 299.951 747.733 Q297.613 745.626 293.608 745.626 Q291.733 745.626 289.858 746.043 Q288.006 746.46 286.062 747.339 L286.062 729.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M326.177 733.057 Q322.566 733.057 320.737 736.622 Q318.932 740.163 318.932 747.293 Q318.932 754.399 320.737 757.964 Q322.566 761.506 326.177 761.506 Q329.811 761.506 331.617 757.964 Q333.446 754.399 333.446 747.293 Q333.446 740.163 331.617 736.622 Q329.811 733.057 326.177 733.057 M326.177 729.353 Q331.987 729.353 335.043 733.96 Q338.122 738.543 338.122 747.293 Q338.122 756.02 335.043 760.626 Q331.987 765.21 326.177 765.21 Q320.367 765.21 317.288 760.626 Q314.233 756.02 314.233 747.293 Q314.233 738.543 317.288 733.96 Q320.367 729.353 326.177 729.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M356.339 733.057 Q352.728 733.057 350.899 736.622 Q349.094 740.163 349.094 747.293 Q349.094 754.399 350.899 757.964 Q352.728 761.506 356.339 761.506 Q359.973 761.506 361.779 757.964 Q363.608 754.399 363.608 747.293 Q363.608 740.163 361.779 736.622 Q359.973 733.057 356.339 733.057 M356.339 729.353 Q362.149 729.353 365.205 733.96 Q368.284 738.543 368.284 747.293 Q368.284 756.02 365.205 760.626 Q362.149 765.21 356.339 765.21 Q350.529 765.21 347.45 760.626 Q344.395 756.02 344.395 747.293 Q344.395 738.543 347.45 733.96 Q350.529 729.353 356.339 729.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M284.835 472.683 L307.057 472.683 L307.057 474.673 L294.511 507.243 L289.627 507.243 L301.432 476.618 L284.835 476.618 L284.835 472.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M316.224 472.683 L334.58 472.683 L334.58 476.618 L320.506 476.618 L320.506 485.09 Q321.524 484.743 322.543 484.581 Q323.562 484.396 324.58 484.396 Q330.367 484.396 333.747 487.567 Q337.126 490.738 337.126 496.155 Q337.126 501.733 333.654 504.835 Q330.182 507.914 323.862 507.914 Q321.687 507.914 319.418 507.544 Q317.173 507.173 314.765 506.432 L314.765 501.733 Q316.849 502.868 319.071 503.423 Q321.293 503.979 323.77 503.979 Q327.774 503.979 330.112 501.872 Q332.45 499.766 332.45 496.155 Q332.45 492.544 330.112 490.437 Q327.774 488.331 323.77 488.331 Q321.895 488.331 320.02 488.747 Q318.168 489.164 316.224 490.044 L316.224 472.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M356.339 475.761 Q352.728 475.761 350.899 479.326 Q349.094 482.868 349.094 489.997 Q349.094 497.104 350.899 500.669 Q352.728 504.21 356.339 504.21 Q359.973 504.21 361.779 500.669 Q363.608 497.104 363.608 489.997 Q363.608 482.868 361.779 479.326 Q359.973 475.761 356.339 475.761 M356.339 472.058 Q362.149 472.058 365.205 476.664 Q368.284 481.247 368.284 489.997 Q368.284 498.724 365.205 503.331 Q362.149 507.914 356.339 507.914 Q350.529 507.914 347.45 503.331 Q344.395 498.724 344.395 489.997 Q344.395 481.247 347.45 476.664 Q350.529 472.058 356.339 472.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M256.664 246.012 L264.303 246.012 L264.303 219.646 L255.992 221.313 L255.992 217.054 L264.256 215.387 L268.932 215.387 L268.932 246.012 L276.571 246.012 L276.571 249.947 L256.664 249.947 L256.664 246.012 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M296.015 218.466 Q292.404 218.466 290.576 222.03 Q288.77 225.572 288.77 232.702 Q288.77 239.808 290.576 243.373 Q292.404 246.915 296.015 246.915 Q299.65 246.915 301.455 243.373 Q303.284 239.808 303.284 232.702 Q303.284 225.572 301.455 222.03 Q299.65 218.466 296.015 218.466 M296.015 214.762 Q301.826 214.762 304.881 219.368 Q307.96 223.952 307.96 232.702 Q307.96 241.429 304.881 246.035 Q301.826 250.618 296.015 250.618 Q290.205 250.618 287.127 246.035 Q284.071 241.429 284.071 232.702 Q284.071 223.952 287.127 219.368 Q290.205 214.762 296.015 214.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M326.177 218.466 Q322.566 218.466 320.737 222.03 Q318.932 225.572 318.932 232.702 Q318.932 239.808 320.737 243.373 Q322.566 246.915 326.177 246.915 Q329.811 246.915 331.617 243.373 Q333.446 239.808 333.446 232.702 Q333.446 225.572 331.617 222.03 Q329.811 218.466 326.177 218.466 M326.177 214.762 Q331.987 214.762 335.043 219.368 Q338.122 223.952 338.122 232.702 Q338.122 241.429 335.043 246.035 Q331.987 250.618 326.177 250.618 Q320.367 250.618 317.288 246.035 Q314.233 241.429 314.233 232.702 Q314.233 223.952 317.288 219.368 Q320.367 214.762 326.177 214.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M356.339 218.466 Q352.728 218.466 350.899 222.03 Q349.094 225.572 349.094 232.702 Q349.094 239.808 350.899 243.373 Q352.728 246.915 356.339 246.915 Q359.973 246.915 361.779 243.373 Q363.608 239.808 363.608 232.702 Q363.608 225.572 361.779 222.03 Q359.973 218.466 356.339 218.466 M356.339 214.762 Q362.149 214.762 365.205 219.368 Q368.284 223.952 368.284 232.702 Q368.284 241.429 365.205 246.035 Q362.149 250.618 356.339 250.618 Q350.529 250.618 347.45 246.035 Q344.395 241.429 344.395 232.702 Q344.395 223.952 347.45 219.368 Q350.529 214.762 356.339 214.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip852)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.667 4017.76,232.667 \"/>\n<polyline clip-path=\"url(#clip852)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1248.46 456.554,1248.48 457.123,1247.41 457.691,1247.4 458.259,1247.28 458.828,1247.03 459.396,1246.74 459.964,1246.33 460.533,1245.85 461.101,1245.27 461.669,1244.65 462.238,1243.95 462.806,1243.12 463.375,1241.18 463.943,1240.19 464.511,1239.11 465.08,1237.9 465.648,1236.6 466.216,1234.16 466.785,1232.64 467.353,1231.02 467.921,1229.26 468.49,1227.38 469.058,1224.35 469.626,1222.18 470.195,1219.82 470.763,1217.32 471.331,1213.63 471.9,1210.79 472.468,1207.78 473.036,1203.53 473.605,1199.16 474.173,1195.62 474.741,1191.85 475.31,1187.84 475.878,1182.62 476.446,1178.28 477.015,1172.68 477.583,1166.9 478.152,1161.89 478.72,1156.63 479.288,1151.14 479.857,1144.42 480.425,1138.57 480.993,1132.47 481.562,1125.18 482.13,1118.66 482.698,1110.87 483.267,1102.96 483.835,1094.62 484.403,1087.13 484.972,1078.4 485.54,1068.55 486.108,1059.48 486.677,1051.31 487.245,1040.98 487.813,1031.55 488.382,1021.95 488.95,1009.9 489.518,998.035 490.087,986.918 490.655,973.657 491.224,963.457 491.792,954.082 492.36,942.622 492.929,931.154 493.497,919.636 494.065,910.157 494.634,897.605 495.202,888.009 495.77,876.428 496.339,865.85 496.907,854.15 497.475,842.594 498.044,833.168 498.612,822.689 499.18,812.378 499.749,801.947 500.317,790.594 500.885,780.247 501.454,770.038 502.022,757.811 502.59,746.673 503.159,734.828 503.727,726.3 504.295,716.44 504.864,706.783 505.432,695.225 506.001,684.871 506.569,674.757 507.137,664.673 507.706,655.687 508.274,644.803 508.842,636.203 509.411,627.676 509.979,618.174 510.547,609.919 511.116,602.871 511.684,595.713 512.252,588.68 512.821,580.784 513.389,571.694 513.957,564.002 514.526,555.373 515.094,546.862 515.662,540.697 516.231,532.665 516.799,525.618 517.367,519.831 517.936,512.934 518.504,505.199 519.072,496.497 519.641,490.049 520.209,485.831 520.778,478.787 521.346,472.754 521.914,466.816 522.483,462.172 523.051,455.476 523.619,449.851 524.188,444.539 524.756,440.535 525.324,435.192 525.893,428.993 526.461,424.045 527.029,421.277 527.598,419.477 528.166,414.469 528.734,408.18 529.303,402.285 529.871,398.691 530.439,395.096 531.008,390.621 531.576,385.235 532.144,381.076 532.713,378.268 533.281,376.161 533.85,371.122 534.418,365.05 534.986,361.345 535.555,358.819 536.123,355.395 536.691,353.144 537.26,350.744 537.828,349.387 538.396,346.927 538.965,343.761 539.533,341.614 540.101,334.232 540.67,330.184 541.238,328.854 541.806,327.074 542.375,325.363 542.943,323.986 543.511,321.363 544.08,319.602 544.648,315.938 545.216,314.552 545.785,312.006 546.353,308.793 546.921,306.582 547.49,305.642 548.058,303.238 548.627,301.393 549.195,300.399 549.763,298.53 550.332,295.383 550.9,292.375 551.468,289.601 552.037,289.958 552.605,287.397 553.173,287.964 553.742,286.433 554.31,285.919 554.878,285.341 555.447,285.862 556.015,285.283 556.583,283.466 557.152,282.622 557.72,281.966 558.288,280.175 558.857,278.867 559.425,276.308 559.993,276.295 560.562,275.979 561.13,274.401 561.698,273.038 562.267,270.647 562.835,270.317 563.404,269.908 563.972,269.658 564.54,269.283 565.109,267.103 565.677,265.965 566.245,264.784 566.814,264.73 567.382,263.382 567.95,262.256 568.519,260.24 569.087,260.155 569.655,261.231 570.224,258.757 570.792,256.64 571.36,255.863 571.929,257.179 572.497,256.162 573.065,255.344 573.634,256.477 574.202,256.392 574.77,257.367 575.339,255.197 575.907,255.224 576.476,256.379 577.044,256.468 577.612,252.262 578.181,252.481 578.749,252.717 579.317,252.695 579.886,251.832 580.454,253.123 581.022,253.252 581.591,253.179 582.159,253.265 582.727,253.227 583.296,252.983 583.864,249.859 584.432,252.096 585.001,250.056 585.569,250.226 586.137,250.585 586.706,247.583 587.274,248.192 587.842,248.213 588.411,248.391 588.979,247.645 589.547,246.69 590.116,245.072 590.684,240.415 591.253,239.187 591.821,241.165 592.389,239.696 592.958,241.467 593.526,241.986 594.094,242.626 594.663,242.107 595.231,244.967 595.799,244.334 596.368,244.782 596.936,243.056 597.504,243.441 598.073,241.896 598.641,241.259 599.209,244.919 599.778,245.186 600.346,246.897 600.914,247.267 601.483,248.415 602.051,246.323 602.619,246.606 603.188,244.548 603.756,247.85 604.325,246.68 604.893,246.752 605.461,247.626 606.03,247.548 606.598,247.519 607.166,246.638 607.735,244.58 608.303,244.695 608.871,245.835 609.44,246.008 610.008,249.114 610.576,249.147 611.145,249.89 611.713,246.439 612.281,245.527 612.85,244.481 613.418,242.38 613.986,245.891 614.555,247.844 615.123,247.59 615.691,247.589 616.26,246.651 616.828,246.513 617.396,245.051 617.965,247.987 618.533,245.737 619.102,242.396 619.67,242.576 620.238,242.748 620.807,240.526 621.375,241.713 621.943,243.917 622.512,243.843 623.08,244.884 623.648,245.748 624.217,244.76 624.785,244.571 625.353,244.474 625.922,244.442 626.49,244.373 627.058,243.147 627.627,241.953 628.195,242.06 628.763,242.017 629.332,240.86 629.9,239.819 630.468,239.975 631.037,240.973 631.605,238.911 632.173,239.039 632.742,241.319 633.31,240.186 633.879,238.171 634.447,237.372 635.015,234.5 635.584,233.918 636.152,231.097 636.72,231.752 637.289,230.477 637.857,232.254 638.425,232.715 638.994,232.421 639.562,232.038 640.13,231.975 640.699,232.697 641.267,233.244 641.835,233.777 642.404,234.222 642.972,234.794 643.54,235.358 644.109,235.859 644.677,237.327 645.245,236.363 645.814,235.835 646.382,238.455 646.951,237.713 647.519,238.947 648.087,238.033 648.656,237.171 649.224,236.547 649.792,237.059 650.361,238.219 650.929,238.561 651.497,239.821 652.066,239.918 652.634,240.886 653.202,241.86 653.771,241.916 654.339,241.713 654.907,243.798 655.476,243.648 656.044,244.461 656.612,244.088 657.181,242.899 657.749,243.654 658.317,243.209 658.886,241.995 659.454,241.635 660.022,243.498 660.591,241.232 661.159,241.134 661.728,238.79 662.296,238.775 662.864,239.91 663.433,240.962 664.001,240.749 664.569,237.424 665.138,238.597 665.706,237.722 666.274,236.949 666.843,238.058 667.411,238.988 667.979,238.733 668.548,240.862 669.116,240.8 669.684,240.544 670.253,237.324 670.821,236.142 671.389,235.109 671.958,233.415 672.526,233.705 673.094,234.158 673.663,234.464 674.231,234.682 674.799,233.824 675.368,229.979 675.936,231.55 676.505,232.004 677.073,233.335 677.641,231.578 678.21,234.134 678.778,235.221 679.346,234.412 679.915,234.711 680.483,234.111 681.051,233.667 681.62,234.883 682.188,236.011 682.756,236.185 683.325,235.366 683.893,235.636 684.461,233.913 685.03,234.172 685.598,233.542 686.166,232.967 686.735,234.404 687.303,237.794 687.871,237.828 688.44,239.811 689.008,237.62 689.577,237.896 690.145,237.908 690.713,235.774 691.282,234.642 691.85,234.671 692.418,236.972 692.987,237.836 693.555,236.893 694.123,236.85 694.692,237.755 695.26,236.511 695.828,236.368 696.397,235.291 696.965,235.414 697.533,234.414 698.102,234.793 698.67,235.876 699.238,235.069 699.807,235.368 700.375,234.56 700.943,235.908 701.512,238.026 702.08,238.082 702.648,239.043 703.217,238.007 703.785,237.843 704.354,237.74 704.922,234.769 705.49,238.077 706.059,236.969 706.627,232.829 707.195,233.105 707.764,231.251 708.332,231.702 708.9,231.261 709.469,233.606 710.037,232.936 710.605,234.537 711.174,234.753 711.742,233.763 712.31,234.137 712.879,236.353 713.447,238.257 714.015,236.267 714.584,232.999 715.152,233.426 715.72,233.746 716.289,234.053 716.857,233.392 717.425,234.625 717.994,233.919 718.562,231.191 719.131,231.382 719.699,230.685 720.267,231.152 720.836,232.697 721.404,235.831 721.972,237.065 722.541,237.073 723.109,238.028 723.677,237.971 724.246,238.931 724.814,236.67 725.382,239.873 725.951,238.416 726.519,237.22 727.087,238.23 727.656,238.134 728.224,239.237 728.792,239.905 729.361,239.74 729.929,239.368 730.497,237.801 731.066,237.683 731.634,237.652 732.203,234.593 732.771,238.997 733.339,236.687 733.908,235.492 734.476,236.5 735.044,234.306 735.613,235.539 736.181,235.672 736.749,235.664 737.318,234.654 737.886,234.84 738.454,234.892 739.023,233.89 739.591,231.92 740.159,232.365 740.728,232.691 741.296,234.725 741.864,233.863 742.433,233.013 743.001,232.242 743.569,231.422 744.138,231.716 744.706,230.061 745.274,230.603 745.843,230.773 746.411,230.89 746.98,232.285 747.548,233.445 748.116,231.656 748.685,232.964 749.253,235.22 749.821,235.308 750.39,236.324 750.958,237.232 751.526,237.222 752.095,235.212 752.663,237.32 753.231,239.193 753.8,241 754.368,239.576 754.936,239.231 755.505,240.888 756.073,241.399 756.641,241.946 757.21,242.561 757.778,243.088 758.346,242.559 758.915,239.967 759.483,238.539 760.052,238.247 760.62,239.025 761.188,239.62 761.757,239.135 762.325,236.461 762.893,235.166 763.462,234.171 764.03,233.008 764.598,236.325 765.167,236.197 765.735,234.071 766.303,235.18 766.872,235.077 767.44,236.025 768.008,235.985 768.577,236.757 769.145,234.732 769.713,235.579 770.282,234.455 770.85,234.149 771.418,233.022 771.987,231.896 772.555,233.087 773.123,234.116 773.692,233.893 774.26,233.773 774.829,233.715 775.397,233.548 775.965,236.666 776.534,236.225 777.102,234.858 777.67,232.773 778.239,230.907 778.807,228.949 779.375,232.44 779.944,234.661 780.512,232.7 781.08,232.795 781.649,234.774 782.217,235.655 782.785,237.447 783.354,236.289 783.922,236.167 784.49,234.829 785.059,233.563 785.627,235.645 786.195,231.263 786.764,231.357 787.332,233.372 787.9,233.379 788.469,234.352 789.037,235.11 789.606,231.879 790.174,231.005 790.742,228.07 791.311,229.302 791.879,227.769 792.447,227.326 793.016,228.842 793.584,228.199 794.152,228.898 794.721,231.361 795.289,231.571 795.857,232.707 796.426,232.597 796.994,231.617 797.562,231.869 798.131,232.916 798.699,231.016 799.267,231.225 799.836,230.293 800.404,229.686 800.972,230.025 801.541,229.531 802.109,229.769 802.678,229.107 803.246,231.709 803.814,230.9 804.383,232.192 804.951,231.396 805.519,230.583 806.088,230.67 806.656,231.74 807.224,232.069 807.793,232.266 808.361,233.456 808.929,233.508 809.498,234.29 810.066,234.348 810.634,233.327 811.203,234.46 811.771,234.176 812.339,235.269 812.908,234.219 813.476,234.009 814.044,235.049 814.613,238.025 815.181,237.803 815.749,235.514 816.318,234.529 816.886,233.324 817.455,233.546 818.023,234.672 818.591,233.645 819.16,231.562 819.728,236.048 820.296,236.742 820.865,233.354 821.433,231.176 822.001,232.511 822.57,232.473 823.138,230.556 823.706,230.978 824.275,231.104 824.843,232.229 825.411,231.302 825.98,230.397 826.548,230.555 827.116,230.815 827.685,232.004 828.253,232.225 828.821,233.366 829.39,232.645 829.958,231.799 830.526,231.823 831.095,231.082 831.663,230.286 832.232,230.394 832.8,231.654 833.368,231.083 833.937,232.258 834.505,232.21 835.073,233.311 835.642,233.267 836.21,233.322 836.778,232.413 837.347,233.57 837.915,233.534 838.483,234.434 839.052,233.453 839.62,233.681 840.188,234.697 840.757,234.76 841.325,233.986 841.893,233.841 842.462,231.867 843.03,234.007 843.598,233.132 844.167,233.345 844.735,234.502 845.304,233.353 845.872,233.395 846.44,231.53 847.009,230.649 847.577,232.127 848.145,230.28 848.714,228.778 849.282,226.991 849.85,227.609 850.419,229.523 850.987,230.113 851.555,229.511 852.124,231.984 852.692,232.4 853.26,232.461 853.829,232.697 854.397,233.002 854.965,232.217 855.534,234.68 856.102,233.822 856.67,237.083 857.239,236.859 857.807,237.599 858.375,237.423 858.944,238.299 859.512,237.826 860.081,238.348 860.649,235.829 861.217,237.681 861.786,239.484 862.354,240.108 862.922,238.809 863.491,239.488 864.059,236.912 864.627,235.757 865.196,236.63 865.764,236.377 866.332,236.301 866.901,234.983 867.469,233.905 868.037,232.822 868.606,236.082 869.174,233.834 869.742,231.881 870.311,232.907 870.879,231.017 871.447,230.121 872.016,232.529 872.584,232.68 873.152,231.694 873.721,233.744 874.289,236.838 874.858,234.697 875.426,233.72 875.994,233.914 876.563,235.081 877.131,235.813 877.699,235.737 878.268,235.622 878.836,234.39 879.404,233.364 879.973,234.484 880.541,234.165 881.109,232.097 881.678,231.077 882.246,232.284 882.814,234.38 883.383,236.328 883.951,237.132 884.519,236.706 885.088,237.614 885.656,237.235 886.224,236.735 886.793,235.365 887.361,238.606 887.93,237.087 888.498,236.866 889.066,236.738 889.635,235.502 890.203,232.297 890.771,233.377 891.34,233.443 891.908,233.365 892.476,232.032 893.045,230.963 893.613,229.868 894.181,230.162 894.75,231.469 895.318,233.635 895.886,234.446 896.455,236.4 897.023,238.3 897.591,235.918 898.16,235.679 898.728,233.264 899.296,232.385 899.865,233.549 900.433,232.36 901.001,232.583 901.57,233.5 902.138,234.296 902.707,232.97 903.275,233.082 903.843,232.82 904.412,233.028 904.98,229.888 905.548,232.06 906.117,233.053 906.685,231.917 907.253,229.927 907.822,230.096 908.39,230.301 908.958,231.709 909.527,233.706 910.095,234.609 910.663,232.462 911.232,232.375 911.8,231.508 912.368,230.384 912.937,231.544 913.505,228.682 914.073,229.745 914.642,231.012 915.21,233.023 915.779,235.273 916.347,234.053 916.915,233.763 917.484,234.725 918.052,235.75 918.62,236.478 919.189,235.231 919.757,233.785 920.325,233.826 920.894,232.776 921.462,232.876 922.03,232.997 922.599,233.873 923.167,233.701 923.735,234.677 924.304,235.639 924.872,234.41 925.44,233.191 926.009,232.286 926.577,231.224 927.145,230.357 927.714,230.599 928.282,230.735 928.85,228.676 929.419,231.028 929.987,231.129 930.556,230.342 931.124,230.616 931.692,231.689 932.261,231.859 932.829,231.907 933.397,232.075 933.966,232.108 934.534,232.24 935.102,231.103 935.671,233.334 936.239,232.381 936.807,232.405 937.376,231.172 937.944,229.205 938.512,229.527 939.081,230.802 939.649,228.946 940.217,224.089 940.786,226.957 941.354,227.521 941.922,228.88 942.491,230 943.059,230.323 943.627,231.377 944.196,230.579 944.764,232.967 945.333,232.854 945.901,229.622 946.469,230.871 947.038,230.289 947.606,231.478 948.174,231.969 948.743,230.212 949.311,230.478 949.879,228.792 950.448,227.152 951.016,227.792 951.584,228.53 952.153,232.169 952.721,232.391 953.289,233.582 953.858,232.522 954.426,233.804 954.994,234.833 955.563,234.861 956.131,236.909 956.699,235.811 957.268,232.616 957.836,230.558 958.405,232.613 958.973,233.703 959.541,232.797 960.11,233.063 960.678,240.297 961.246,238.889 961.815,240.497 962.383,238.753 962.951,239.416 963.52,237.887 964.088,239.619 964.656,239.096 965.225,238.721 965.793,238.298 966.361,239.958 966.93,237.451 967.498,236.203 968.066,236.901 968.635,235.461 969.203,235.39 969.771,235.471 970.34,234.296 970.908,234.38 971.476,234.343 972.045,231.153 972.613,231.206 973.182,232.547 973.75,233.707 974.318,233.611 974.887,234.663 975.455,235.49 976.023,234.366 976.592,236.224 977.16,235.067 977.728,234.007 978.297,232.991 978.865,231.706 979.433,230.752 980.002,231.785 980.57,229.908 981.138,231.13 981.707,233.356 982.275,235.246 982.843,234.086 983.412,234.104 983.98,235.12 984.548,235.025 985.117,234.891 985.685,235.669 986.253,237.543 986.822,239.205 987.39,239.584 987.959,242.017 988.527,242.513 989.095,241.841 989.664,240.086 990.232,238.354 990.8,237.854 991.369,237.532 991.937,237.164 992.505,235.716 993.074,235.27 993.642,234.944 994.21,235.648 994.779,234.315 995.347,234.9 995.915,234.629 996.484,234.515 997.052,234.313 997.62,233.983 998.189,233.887 998.757,233.595 999.325,231.195 999.894,230.147 1000.46,230.12 1001.03,229.197 1001.6,230.503 1002.17,231.642 1002.74,228.459 1003.3,227.669 1003.87,226.877 1004.44,228.031 1005.01,228.232 1005.58,225.178 1006.15,225.777 1006.71,226.201 1007.28,227.526 1007.85,225.789 1008.42,227.195 1008.99,229.702 1009.56,231.129 1010.12,231.275 1010.69,230.211 1011.26,229.284 1011.83,230.278 1012.4,229.299 1012.97,228.679 1013.53,230.625 1014.1,229.97 1014.67,230.034 1015.24,231.512 1015.81,233.724 1016.38,232.501 1016.94,233.609 1017.51,233.886 1018.08,232.836 1018.65,232.84 1019.22,232.873 1019.79,234.054 1020.35,232.895 1020.92,234.077 1021.49,233.945 1022.06,232.883 1022.63,233.847 1023.2,231.716 1023.76,230.587 1024.33,230.65 1024.9,231.856 1025.47,233.092 1026.04,233.104 1026.61,234.143 1027.17,235.149 1027.74,236.165 1028.31,236.937 1028.88,236.544 1029.45,235.1 1030.02,235.918 1030.58,233.54 1031.15,233.544 1031.72,233.498 1032.29,234.509 1032.86,236.409 1033.43,236.438 1033.99,236.027 1034.56,233.422 1035.13,233.24 1035.7,232.18 1036.27,231.203 1036.84,230.265 1037.4,229.377 1037.97,231.866 1038.54,230.834 1039.11,231.925 1039.68,231.035 1040.25,231.202 1040.81,233.496 1041.38,231.366 1041.95,232.435 1042.52,232.453 1043.09,229.431 1043.66,228.874 1044.22,230.022 1044.79,230.114 1045.36,231.357 1045.93,231.571 1046.5,231.749 1047.07,233.771 1047.63,235.705 1048.2,236.587 1048.77,234.279 1049.34,235.123 1049.91,235.034 1050.48,231.78 1051.05,231.839 1051.61,232.941 1052.18,232.673 1052.75,231.784 1053.32,230.84 1053.89,232.897 1054.46,232.779 1055.02,231.939 1055.59,231.07 1056.16,231.904 1056.73,231.99 1057.3,230.97 1057.87,233.158 1058.43,233.976 1059,235.698 1059.57,234.423 1060.14,235.56 1060.71,235.564 1061.28,232.134 1061.84,231.092 1062.41,230.169 1062.98,230.061 1063.55,229.233 1064.12,227.349 1064.69,226.732 1065.25,228.183 1065.82,229.701 1066.39,229.877 1066.96,228.236 1067.53,228.488 1068.1,226.743 1068.66,225.239 1069.23,224.691 1069.8,225.252 1070.37,225.876 1070.94,226.502 1071.51,228.09 1072.07,228.61 1072.64,231.024 1073.21,230.787 1073.78,231.126 1074.35,233.251 1074.92,232.317 1075.48,231.261 1076.05,232.527 1076.62,231.717 1077.19,230.838 1077.76,230.147 1078.33,229.516 1078.89,228.61 1079.46,230.277 1080.03,228.438 1080.6,228.752 1081.17,228.013 1081.74,228.437 1082.3,227.65 1082.87,228.19 1083.44,228.642 1084.01,229.072 1084.58,231.63 1085.15,232.984 1085.71,233.242 1086.28,232.404 1086.85,231.572 1087.42,232.99 1087.99,233.105 1088.56,233.268 1089.12,233.443 1089.69,232.498 1090.26,230.542 1090.83,231.942 1091.4,232.289 1091.97,235.614 1092.53,236.577 1093.1,235.578 1093.67,237.523 1094.24,235.225 1094.81,236.332 1095.38,235.25 1095.94,235.279 1096.51,235.169 1097.08,233.03 1097.65,233.054 1098.22,234.219 1098.79,233.447 1099.35,230.308 1099.92,229.792 1100.49,232.149 1101.06,235.503 1101.63,234.294 1102.2,234.332 1102.76,236.506 1103.33,233.302 1103.9,231.371 1104.47,231.532 1105.04,231.614 1105.61,233.723 1106.17,232.622 1106.74,233.6 1107.31,235.789 1107.88,236.604 1108.45,236.643 1109.02,236.401 1109.58,237.071 1110.15,239.035 1110.72,238.74 1111.29,238.473 1111.86,239.22 1112.43,237.982 1112.99,237.721 1113.56,239.519 1114.13,238.212 1114.7,238.003 1115.27,237.51 1115.84,238.174 1116.4,238.003 1116.97,237.467 1117.54,239.328 1118.11,234.704 1118.68,233.688 1119.25,231.666 1119.81,232.855 1120.38,236.079 1120.95,233.83 1121.52,233.766 1122.09,234.9 1122.66,236.722 1123.23,235.177 1123.79,236.21 1124.36,237.202 1124.93,237.997 1125.5,236.585 1126.07,239.139 1126.64,239.526 1127.2,238.062 1127.77,239.701 1128.34,240.268 1128.91,237.539 1129.48,238.01 1130.05,236.557 1130.61,236.269 1131.18,236.929 1131.75,236.643 1132.32,234.177 1132.89,233.978 1133.46,233.596 1134.02,234.569 1134.59,234.485 1135.16,238.288 1135.73,238.658 1136.3,239.153 1136.87,237.302 1137.43,233.723 1138,235.764 1138.57,233.562 1139.14,233.436 1139.71,234.06 1140.28,233.75 1140.84,232.426 1141.41,230.153 1141.98,230.005 1142.55,232.044 1143.12,232.901 1143.69,233.594 1144.25,234.704 1144.82,234.347 1145.39,233.961 1145.96,232.727 1146.53,232.553 1147.1,231.378 1147.66,230.178 1148.23,229.066 1148.8,229.195 1149.37,228.321 1149.94,228.363 1150.51,226.489 1151.07,226.002 1151.64,226.308 1152.21,224.773 1152.78,224.272 1153.35,223.909 1153.92,225.588 1154.48,224.916 1155.05,225.422 1155.62,226.838 1156.19,227.069 1156.76,227.42 1157.33,227.824 1157.89,226.269 1158.46,226.823 1159.03,224.068 1159.6,226.794 1160.17,229.138 1160.74,227.304 1161.3,229.553 1161.87,228.824 1162.44,230.2 1163.01,230.615 1163.58,232.025 1164.15,233.176 1164.71,233.303 1165.28,233.682 1165.85,231.67 1166.42,234.748 1166.99,234.834 1167.56,236.958 1168.12,237.554 1168.69,239.301 1169.26,238.94 1169.83,236.573 1170.4,236.418 1170.97,238.224 1171.53,238.654 1172.1,238.084 1172.67,237.514 1173.24,237.227 1173.81,236.634 1174.38,235.385 1174.94,234.212 1175.51,233.963 1176.08,234.837 1176.65,235.605 1177.22,234.379 1177.79,235.229 1178.35,232.862 1178.92,232.847 1179.49,229.831 1180.06,229.889 1180.63,228.875 1181.2,229.285 1181.76,231.693 1182.33,230.667 1182.9,231.768 1183.47,231.844 1184.04,231.851 1184.61,231.605 1185.17,230.738 1185.74,231.959 1186.31,232.92 1186.88,232.86 1187.45,233.865 1188.02,231.638 1188.58,231.645 1189.15,232.987 1189.72,234.056 1190.29,234.725 1190.86,234.787 1191.43,236.709 1192,236.505 1192.56,237.195 1193.13,234.754 1193.7,234.638 1194.27,234.456 1194.84,234.342 1195.41,234.038 1195.97,236.002 1196.54,235.575 1197.11,235.331 1197.68,237.192 1198.25,235.852 1198.82,236.456 1199.38,237.311 1199.95,236.727 1200.52,234.242 1201.09,232.236 1201.66,233.385 1202.23,232.185 1202.79,231.015 1203.36,229.183 1203.93,230.416 1204.5,231.706 1205.07,229.467 1205.64,229.739 1206.2,231.881 1206.77,231.839 1207.34,230.712 1207.91,230.754 1208.48,232.139 1209.05,231.188 1209.61,230.162 1210.18,232.497 1210.75,233.565 1211.32,234.378 1211.89,236.349 1212.46,236.138 1213.02,234.815 1213.59,234.585 1214.16,236.544 1214.73,235.93 1215.3,234.691 1215.87,234.519 1216.43,234.302 1217,234.11 1217.57,231.741 1218.14,232.695 1218.71,232.599 1219.28,233.673 1219.84,233.77 1220.41,231.619 1220.98,232.507 1221.55,233.262 1222.12,233.11 1222.69,230.877 1223.25,230.075 1223.82,228.183 1224.39,229.663 1224.96,230.002 1225.53,229.318 1226.1,230.596 1226.66,231.761 1227.23,228.747 1227.8,232.047 1228.37,230.903 1228.94,229.041 1229.51,228.172 1230.07,227.508 1230.64,227.881 1231.21,229.225 1231.78,232.437 1232.35,231.637 1232.92,230.716 1233.48,229.956 1234.05,231.136 1234.62,234.248 1235.19,235.004 1235.76,234.663 1236.33,235.5 1236.89,233.107 1237.46,230.893 1238.03,229 1238.6,229.185 1239.17,230.345 1239.74,231.356 1240.3,233.395 1240.87,231.274 1241.44,231.284 1242.01,232.335 1242.58,233.641 1243.15,232.723 1243.71,233.817 1244.28,232.597 1244.85,233.838 1245.42,234.616 1245.99,236.534 1246.56,235.327 1247.12,235.857 1247.69,235.511 1248.26,233.02 1248.83,230.899 1249.4,229.835 1249.97,228.729 1250.53,229.885 1251.1,228.983 1251.67,230.256 1252.24,230.412 1252.81,229.528 1253.38,229.761 1253.94,229.129 1254.51,227.995 1255.08,229.365 1255.65,227.568 1256.22,230.005 1256.79,228.255 1257.35,230.801 1257.92,229.274 1258.49,227.629 1259.06,226.953 1259.63,225.04 1260.2,227.835 1260.76,227.186 1261.33,227.678 1261.9,225.146 1262.47,226.902 1263.04,227.279 1263.61,231.896 1264.18,232.065 1264.74,231.241 1265.31,231.421 1265.88,231.73 1266.45,231.992 1267.02,230.981 1267.59,233.283 1268.15,232.555 1268.72,232.601 1269.29,231.765 1269.86,232.992 1270.43,234.237 1271,232.142 1271.56,233.536 1272.13,236.618 1272.7,240.742 1273.27,240.267 1273.84,239.6 1274.41,238.075 1274.97,236.662 1275.54,236.394 1276.11,235.418 1276.68,234.342 1277.25,234.365 1277.82,235.385 1278.38,235.181 1278.95,234.288 1279.52,232.232 1280.09,233.359 1280.66,235.524 1281.23,235.31 1281.79,232.96 1282.36,230.821 1282.93,230.126 1283.5,227.209 1284.07,230.662 1284.64,231.896 1285.2,233.047 1285.77,235.923 1286.34,236.6 1286.91,236.239 1287.48,233.838 1288.05,233.756 1288.61,234.638 1289.18,234.598 1289.75,234.325 1290.32,236.187 1290.89,233.924 1291.46,233.809 1292.02,232.763 1292.59,233.051 1293.16,232.929 1293.73,232.851 1294.3,234.674 1294.87,232.886 1295.43,233.048 1296,233.11 1296.57,232.179 1297.14,232.529 1297.71,234.931 1298.28,233.833 1298.84,232.621 1299.41,231.847 1299.98,233.979 1300.55,234.182 1301.12,231.021 1301.69,232.156 1302.25,233.098 1302.82,234.318 1303.39,234.13 1303.96,237.093 1304.53,235.447 1305.1,235.194 1305.66,238.158 1306.23,236.441 1306.8,236.206 1307.37,236.767 1307.94,237.397 1308.51,236.95 1309.07,237.581 1309.64,234.129 1310.21,231.084 1310.78,230.159 1311.35,230.278 1311.92,232.6 1312.48,233.427 1313.05,232.445 1313.62,233.395 1314.19,233.22 1314.76,234.253 1315.33,233.052 1315.89,231.933 1316.46,231.18 1317.03,229.498 1317.6,229.678 1318.17,227.679 1318.74,229.067 1319.3,229.478 1319.87,230.675 1320.44,230.779 1321.01,231.175 1321.58,231.348 1322.15,228.341 1322.71,228.732 1323.28,230.04 1323.85,229.319 1324.42,230.673 1324.99,230.882 1325.56,230.267 1326.12,232.43 1326.69,233.724 1327.26,232.609 1327.83,234.618 1328.4,236.579 1328.97,235.513 1329.53,234.155 1330.1,234.046 1330.67,231.807 1331.24,233.64 1331.81,237.589 1332.38,236.003 1332.94,235.679 1333.51,234.514 1334.08,235.564 1334.65,233.596 1335.22,232.476 1335.79,233.447 1336.36,233.561 1336.92,232.65 1337.49,231.449 1338.06,229.354 1338.63,229.51 1339.2,230.809 1339.77,229.818 1340.33,229.976 1340.9,227.086 1341.47,225.469 1342.04,226.039 1342.61,227.351 1343.18,229.846 1343.74,229.988 1344.31,228.205 1344.88,229.713 1345.45,231.971 1346.02,233.003 1346.59,231.964 1347.15,233.053 1347.72,231.071 1348.29,235.223 1348.86,238.083 1349.43,238.603 1350,238.208 1350.56,236.747 1351.13,236.661 1351.7,236.507 1352.27,237.272 1352.84,237.975 1353.41,237.695 1353.97,234.271 1354.54,232.108 1355.11,233.429 1355.68,234.253 1356.25,232.976 1356.82,232.909 1357.38,230.006 1357.95,229.171 1358.52,229.206 1359.09,228.276 1359.66,228.619 1360.23,230.02 1360.79,228.971 1361.36,227.359 1361.93,228.705 1362.5,232.111 1363.07,233.433 1363.64,234.295 1364.2,233.302 1364.77,233.268 1365.34,235.223 1365.91,236.143 1366.48,236.86 1367.05,236.641 1367.61,235.23 1368.18,235.428 1368.75,236.264 1369.32,234.924 1369.89,233.672 1370.46,231.513 1371.02,231.656 1371.59,233.645 1372.16,233.273 1372.73,232.27 1373.3,231.2 1373.87,230.508 1374.43,230.692 1375,229.605 1375.57,228.751 1376.14,228.851 1376.71,230.18 1377.28,230.284 1377.84,233.227 1378.41,233.376 1378.98,232.13 1379.55,235.069 1380.12,232.731 1380.69,234.059 1381.25,235.05 1381.82,233.719 1382.39,234.699 1382.96,233.562 1383.53,235.669 1384.1,237.523 1384.66,235.98 1385.23,236.711 1385.8,238.519 1386.37,236.083 1386.94,237.914 1387.51,236.395 1388.07,236.994 1388.64,234.587 1389.21,234.232 1389.78,233.08 1390.35,234.168 1390.92,233.9 1391.48,235.478 1392.05,236.189 1392.62,232.885 1393.19,232.759 1393.76,233.591 1394.33,231.075 1394.89,229.929 1395.46,228.183 1396.03,228.691 1396.6,228.948 1397.17,228.341 1397.74,228.534 1398.3,226.502 1398.87,226.977 1399.44,229.317 1400.01,229.383 1400.58,230.864 1401.15,229.926 1401.71,231.26 1402.28,232.355 1402.85,232.156 1403.42,234.198 1403.99,233.972 1404.56,234.009 1405.13,232.723 1405.69,233.634 1406.26,232.537 1406.83,231.627 1407.4,233.798 1407.97,234.843 1408.54,231.808 1409.1,231.845 1409.67,231.904 1410.24,234.98 1410.81,233.77 1411.38,233.748 1411.95,233.83 1412.51,233.439 1413.08,232.345 1413.65,232.372 1414.22,232.381 1414.79,228.14 1415.36,230.319 1415.92,231.531 1416.49,232.827 1417.06,231.881 1417.63,231.066 1418.2,233.147 1418.77,233.055 1419.33,234.007 1419.9,231.851 1420.47,231.138 1421.04,231.355 1421.61,233.481 1422.18,234.57 1422.74,234.638 1423.31,233.529 1423.88,233.462 1424.45,234.323 1425.02,233.303 1425.59,233.247 1426.15,232.169 1426.72,234.131 1427.29,232.8 1427.86,232.935 1428.43,233.112 1429,232.99 1429.56,233.109 1430.13,234.944 1430.7,234.856 1431.27,235.806 1431.84,236.683 1432.41,237.392 1432.97,239.265 1433.54,237.583 1434.11,235.218 1434.68,234.952 1435.25,234.774 1435.82,232.496 1436.38,233.619 1436.95,234.554 1437.52,233.206 1438.09,231.94 1438.66,232.84 1439.23,230.594 1439.79,230.567 1440.36,229.743 1440.93,228.793 1441.5,233.24 1442.07,232.149 1442.64,230.936 1443.2,231.079 1443.77,231.317 1444.34,232.618 1444.91,231.379 1445.48,232.415 1446.05,234.448 1446.61,234.392 1447.18,235.475 1447.75,234.477 1448.32,234.366 1448.89,232.939 1449.46,232.791 1450.02,232.638 1450.59,232.544 1451.16,233.547 1451.73,236.548 1452.3,236.406 1452.87,239.279 1453.43,239.028 1454,237.355 1454.57,233.761 1455.14,232.704 1455.71,232.62 1456.28,232.613 1456.84,233.585 1457.41,233.223 1457.98,232.977 1458.55,231.768 1459.12,232.876 1459.69,229.574 1460.25,231.601 1460.82,231.458 1461.39,229.5 1461.96,226.505 1462.53,225.743 1463.1,227.218 1463.66,228.651 1464.23,231.114 1464.8,232.183 1465.37,232.225 1465.94,231.849 1466.51,231.983 1467.07,231.863 1467.64,230.85 1468.21,229.977 1468.78,230.105 1469.35,229.21 1469.92,230.49 1470.48,230.66 1471.05,230.696 1471.62,231.911 1472.19,231.1 1472.76,230.314 1473.33,229.43 1473.89,228.551 1474.46,229.792 1475.03,229.978 1475.6,231.158 1476.17,230.356 1476.74,230.666 1477.31,232.975 1477.87,234.955 1478.44,232.573 1479.01,234.688 1479.58,233.62 1480.15,232.783 1480.72,232.837 1481.28,234.642 1481.85,234.5 1482.42,234.467 1482.99,235.13 1483.56,234.018 1484.13,231.144 1484.69,231.136 1485.26,231.275 1485.83,230.318 1486.4,230.4 1486.97,228.354 1487.54,230.643 1488.1,231.668 1488.67,230.632 1489.24,232.902 1489.81,233.046 1490.38,233.158 1490.95,234.251 1491.51,235.316 1492.08,234.175 1492.65,236.022 1493.22,234.608 1493.79,234.144 1494.36,236.219 1494.92,236.98 1495.49,234.825 1496.06,232.9 1496.63,234.894 1497.2,234.692 1497.77,233.692 1498.33,232.367 1498.9,229.392 1499.47,228.474 1500.04,228.796 1500.61,227.932 1501.18,226.274 1501.74,228.846 1502.31,230.043 1502.88,230.133 1503.45,227.414 1504.02,230.101 1504.59,228.243 1505.15,228.656 1505.72,228.97 1506.29,228.242 1506.86,227.489 1507.43,229.857 1508,228.192 1508.56,226.672 1509.13,226.214 1509.7,226.698 1510.27,230.411 1510.84,229.67 1511.41,231.106 1511.97,229.132 1512.54,231.492 1513.11,231.607 1513.68,230.734 1514.25,230.003 1514.82,231.453 1515.38,232.624 1515.95,232.813 1516.52,232.991 1517.09,234.153 1517.66,233.084 1518.23,232.25 1518.79,234.396 1519.36,238.46 1519.93,237.109 1520.5,238.83 1521.07,238.545 1521.64,238.377 1522.2,239.263 1522.77,239.908 1523.34,240.548 1523.91,241.913 1524.48,241.184 1525.05,240.508 1525.61,239.007 1526.18,238.563 1526.75,239.148 1527.32,238.68 1527.89,239.586 1528.46,238.948 1529.02,238.406 1529.59,240.152 1530.16,239.392 1530.73,237.911 1531.3,237.497 1531.87,236.9 1532.43,237.612 1533,235.834 1533.57,236.669 1534.14,236.08 1534.71,232.699 1535.28,232.505 1535.84,233.385 1536.41,232.997 1536.98,233.887 1537.55,231.475 1538.12,231.445 1538.69,232.64 1539.25,229.577 1539.82,229.781 1540.39,230.964 1540.96,231.022 1541.53,228.863 1542.1,230.274 1542.66,229.347 1543.23,227.47 1543.8,229.819 1544.37,227.893 1544.94,229.077 1545.51,227.325 1546.08,228.563 1546.64,228.855 1547.21,229.278 1547.78,228.598 1548.35,230.942 1548.92,231.126 1549.49,230.077 1550.05,231.063 1550.62,231.145 1551.19,230.118 1551.76,231.455 1552.33,230.379 1552.9,230.594 1553.46,231.858 1554.03,232.926 1554.6,233.881 1555.17,234.522 1555.74,235.337 1556.31,234.172 1556.87,233.984 1557.44,236.106 1558.01,234.842 1558.58,233.707 1559.15,233.519 1559.72,232.249 1560.28,233.333 1560.85,231.278 1561.42,232.435 1561.99,233.312 1562.56,235.255 1563.13,235.064 1563.69,235.79 1564.26,235.517 1564.83,234.161 1565.4,233.827 1565.97,234.779 1566.54,234.681 1567.1,234.521 1567.67,234.116 1568.24,233.03 1568.81,235 1569.38,233.982 1569.95,233.835 1570.51,231.525 1571.08,231.399 1571.65,230.307 1572.22,230.134 1572.79,228.13 1573.36,226.233 1573.92,226.775 1574.49,230.32 1575.06,228.459 1575.63,228.859 1576.2,228.021 1576.77,228.382 1577.33,229.513 1577.9,228.933 1578.47,230.143 1579.04,230.305 1579.61,230.666 1580.18,230.842 1580.74,231.137 1581.31,231.347 1581.88,231.643 1582.45,230.902 1583.02,231.364 1583.59,233.653 1584.15,235.696 1584.72,235.439 1585.29,234.217 1585.86,233.178 1586.43,231.94 1587,233.078 1587.56,229.114 1588.13,231.422 1588.7,231.609 1589.27,230.706 1589.84,230.659 1590.41,230.72 1590.97,229.795 1591.54,230.947 1592.11,233.146 1592.68,235.054 1593.25,235.07 1593.82,235.11 1594.38,232.859 1594.95,231.913 1595.52,231.932 1596.09,228.731 1596.66,227.925 1597.23,228.241 1597.79,229.594 1598.36,232.207 1598.93,233.261 1599.5,232.278 1600.07,234.308 1600.64,236.23 1601.2,233.025 1601.77,233.989 1602.34,234.042 1602.91,232.837 1603.48,232.728 1604.05,233.79 1604.61,232.643 1605.18,236.751 1605.75,237.463 1606.32,236.939 1606.89,237.801 1607.46,236.312 1608.02,236.043 1608.59,235.846 1609.16,236.734 1609.73,236.624 1610.3,236.27 1610.87,233.97 1611.43,235.701 1612,234.38 1612.57,233.111 1613.14,230.73 1613.71,231.977 1614.28,233.174 1614.84,232.167 1615.41,231.138 1615.98,230.254 1616.55,230.226 1617.12,229.428 1617.69,229.401 1618.26,228.626 1618.82,228.686 1619.39,229.024 1619.96,229.442 1620.53,229.941 1621.1,230.987 1621.67,233.333 1622.23,234.39 1622.8,232.059 1623.37,232.172 1623.94,236.361 1624.51,235.136 1625.08,232.986 1625.64,228.889 1626.21,230.239 1626.78,231.481 1627.35,232.586 1627.92,232.631 1628.49,236.754 1629.05,235.251 1629.62,235.397 1630.19,234.331 1630.76,233.287 1631.33,231.458 1631.9,231.704 1632.46,232.872 1633.03,233.818 1633.6,233.667 1634.17,234.805 1634.74,233.719 1635.31,234.773 1635.87,234.762 1636.44,233.482 1637.01,233.228 1637.58,232.109 1638.15,231.195 1638.72,231.098 1639.28,231.3 1639.85,232.308 1640.42,232.629 1640.99,231.475 1641.56,231.355 1642.13,234.524 1642.69,234.201 1643.26,232.259 1643.83,230.422 1644.4,231.587 1644.97,230.749 1645.54,232.897 1646.1,233.798 1646.67,234.778 1647.24,233.474 1647.81,231.349 1648.38,230.393 1648.95,230.625 1649.51,230.959 1650.08,233.156 1650.65,234.217 1651.22,235.198 1651.79,233.072 1652.36,234.292 1652.92,233.007 1653.49,230.936 1654.06,231.952 1654.63,231.009 1655.2,233.248 1655.77,235.245 1656.33,237.043 1656.9,236.645 1657.47,235.274 1658.04,233.179 1658.61,233.127 1659.18,233.949 1659.74,232.814 1660.31,232.743 1660.88,230.856 1661.45,230.97 1662.02,232.139 1662.59,232.266 1663.15,234.488 1663.72,235.096 1664.29,234.92 1664.86,232.591 1665.43,230.512 1666,229.505 1666.56,230.761 1667.13,229.963 1667.7,230.26 1668.27,231.523 1668.84,233.931 1669.41,233.978 1669.97,233.996 1670.54,233.095 1671.11,230.894 1671.68,231.07 1672.25,231.187 1672.82,232.295 1673.38,233.117 1673.95,233.001 1674.52,230.898 1675.09,229.294 1675.66,227.71 1676.23,231.121 1676.79,232.286 1677.36,233.303 1677.93,232.19 1678.5,232.207 1679.07,234.561 1679.64,233.438 1680.2,232.353 1680.77,231.41 1681.34,231.193 1681.91,231.377 1682.48,232.366 1683.05,233.45 1683.61,232.335 1684.18,231.291 1684.75,233.604 1685.32,231.568 1685.89,231.67 1686.46,229.901 1687.02,229.198 1687.59,231.41 1688.16,229.352 1688.73,230.536 1689.3,229.778 1689.87,228.872 1690.44,231.268 1691,230.314 1691.57,231.481 1692.14,231.572 1692.71,232.696 1693.28,230.667 1693.85,230.867 1694.41,234.085 1694.98,234.89 1695.55,236.8 1696.12,236.603 1696.69,236.544 1697.26,235.048 1697.82,233.702 1698.39,232.609 1698.96,234.724 1699.53,234.818 1700.1,234.598 1700.67,234.46 1701.23,234.374 1701.8,235.181 1702.37,232.829 1702.94,231.573 1703.51,231.819 1704.08,231.7 1704.64,234.675 1705.21,233.481 1705.78,234.577 1706.35,235.528 1706.92,236.327 1707.49,234.018 1708.05,235.046 1708.62,234.744 1709.19,232.585 1709.76,233.748 1710.33,232.682 1710.9,232.593 1711.46,232.582 1712.03,231.536 1712.6,231.608 1713.17,231.367 1713.74,232.33 1714.31,231.486 1714.87,231.743 1715.44,235.696 1716.01,235.467 1716.58,236.181 1717.15,233.917 1717.72,230.723 1718.28,229.82 1718.85,230.15 1719.42,229.192 1719.99,228.645 1720.56,229.053 1721.13,230.46 1721.69,229.605 1722.26,230.803 1722.83,232.098 1723.4,231.217 1723.97,232.606 1724.54,233.851 1725.1,232.579 1725.67,231.677 1726.24,232.441 1726.81,231.56 1727.38,230.532 1727.95,230.811 1728.51,231.994 1729.08,232.07 1729.65,232.112 1730.22,230.157 1730.79,229.165 1731.36,229.543 1731.92,228.747 1732.49,228.248 1733.06,229.905 1733.63,229.984 1734.2,231.452 1734.77,229.67 1735.33,232.013 1735.9,231.926 1736.47,232.15 1737.04,233.128 1737.61,234.112 1738.18,234.33 1738.74,236.437 1739.31,238.218 1739.88,237.023 1740.45,237.931 1741.02,237.624 1741.59,237.373 1742.15,234.007 1742.72,234.8 1743.29,238.763 1743.86,237.31 1744.43,236.853 1745,236.648 1745.56,236.595 1746.13,237.529 1746.7,238.038 1747.27,237.507 1747.84,237.042 1748.41,235.792 1748.97,234.458 1749.54,232.3 1750.11,232.397 1750.68,232.409 1751.25,229.156 1751.82,227.258 1752.38,227.542 1752.95,227.901 1753.52,229.301 1754.09,231.58 1754.66,230.575 1755.23,228.823 1755.79,228.972 1756.36,231.444 1756.93,230.407 1757.5,231.63 1758.07,232.616 1758.64,235.606 1759.21,235.365 1759.77,234.249 1760.34,233.781 1760.91,232.726 1761.48,233.798 1762.05,235.715 1762.62,237.542 1763.18,238.108 1763.75,235.583 1764.32,236.328 1764.89,237.009 1765.46,238.687 1766.03,239.29 1766.59,237.569 1767.16,238.117 1767.73,237.743 1768.3,234.458 1768.87,234.395 1769.44,236.181 1770,237.728 1770.57,237.257 1771.14,236.928 1771.71,238.525 1772.28,239.061 1772.85,238.641 1773.41,239.07 1773.98,237.443 1774.55,236.932 1775.12,235.586 1775.69,234.179 1776.26,232.852 1776.82,233.584 1777.39,231.511 1777.96,232.554 1778.53,232.446 1779.1,231.108 1779.67,231.22 1780.23,228.996 1780.8,230.186 1781.37,230.373 1781.94,229.612 1782.51,229.813 1783.08,229.791 1783.64,227.935 1784.21,228.304 1784.78,229.654 1785.35,230.939 1785.92,229.939 1786.49,230.107 1787.05,229.245 1787.62,229.495 1788.19,229.744 1788.76,228.588 1789.33,233.008 1789.9,231.941 1790.46,232.081 1791.03,232.015 1791.6,233.088 1792.17,233.068 1792.74,235.184 1793.31,234.949 1793.87,234.567 1794.44,235.34 1795.01,232.83 1795.58,232.77 1796.15,232.689 1796.72,232.687 1797.28,232.855 1797.85,232.686 1798.42,232.613 1798.99,231.418 1799.56,229.395 1800.13,230.9 1800.69,232.823 1801.26,231.615 1801.83,229.458 1802.4,229.643 1802.97,229.972 1803.54,230.004 1804.1,231.249 1804.67,232.303 1805.24,233.368 1805.81,233.386 1806.38,231.368 1806.95,231.23 1807.51,232.481 1808.08,232.472 1808.65,232.576 1809.22,233.655 1809.79,231.69 1810.36,232.785 1810.92,233.745 1811.49,234.68 1812.06,234.469 1812.63,236.328 1813.2,233.978 1813.77,232.747 1814.33,233.657 1814.9,234.654 1815.47,234.463 1816.04,232.075 1816.61,229.678 1817.18,235.014 1817.74,234.899 1818.31,233.632 1818.88,231.278 1819.45,231.32 1820.02,232.41 1820.59,232.429 1821.15,231.232 1821.72,229.179 1822.29,228.204 1822.86,229.488 1823.43,228.624 1824,229.988 1824.56,230.26 1825.13,230.317 1825.7,230.393 1826.27,233.544 1826.84,232.416 1827.41,231.145 1827.97,231.06 1828.54,231.127 1829.11,229.209 1829.68,227.459 1830.25,227.777 1830.82,228.129 1831.39,226.357 1831.95,228.106 1832.52,228.363 1833.09,226.801 1833.66,227.969 1834.23,228.186 1834.8,229.492 1835.36,228.54 1835.93,228.851 1836.5,228.178 1837.07,226.346 1837.64,227.012 1838.21,227.411 1838.77,225.826 1839.34,226.309 1839.91,226.814 1840.48,228.472 1841.05,228.896 1841.62,229.389 1842.18,229.729 1842.75,233.153 1843.32,236.22 1843.89,236.055 1844.46,235.819 1845.03,235.354 1845.59,235.405 1846.16,234.222 1846.73,232.285 1847.3,231.393 1847.87,229.465 1848.44,227.634 1849,229.058 1849.57,228.502 1850.14,229.871 1850.71,233.441 1851.28,234.699 1851.85,234.758 1852.41,234.798 1852.98,233.885 1853.55,235.028 1854.12,235.868 1854.69,235.555 1855.26,235.483 1855.82,236.115 1856.39,235.721 1856.96,236.594 1857.53,236.404 1858.1,234.201 1858.67,234.356 1859.23,235.28 1859.8,234.16 1860.37,237.067 1860.94,237.95 1861.51,236.628 1862.08,237.453 1862.64,237.147 1863.21,238.843 1863.78,238.521 1864.35,237.011 1864.92,236.832 1865.49,237.413 1866.05,235.951 1866.62,235.763 1867.19,233.535 1867.76,233.548 1868.33,235.745 1868.9,235.714 1869.46,233.486 1870.03,233.463 1870.6,232.356 1871.17,230.087 1871.74,226.05 1872.31,224.505 1872.87,222.059 1873.44,219.976 1874.01,219.895 1874.58,224.794 1875.15,226.495 1875.72,228.016 1876.28,229.326 1876.85,228.793 1877.42,229.215 1877.99,232.215 1878.56,233.494 1879.13,237.669 1879.69,237.28 1880.26,237.072 1880.83,236.702 1881.4,237.524 1881.97,236.415 1882.54,235.027 1883.1,236.925 1883.67,235.548 1884.24,237.562 1884.81,235.998 1885.38,234.707 1885.95,236.534 1886.51,234.245 1887.08,234.238 1887.65,234.362 1888.22,233.21 1888.79,233.015 1889.36,230.115 1889.92,229.269 1890.49,230.473 1891.06,231.467 1891.63,231.425 1892.2,231.633 1892.77,229.452 1893.33,231.034 1893.9,232.178 1894.47,233.299 1895.04,230.325 1895.61,228.329 1896.18,229.825 1896.74,229.961 1897.31,233.26 1897.88,234.515 1898.45,235.479 1899.02,236.489 1899.59,235.179 1900.16,235.171 1900.72,232.034 1901.29,233.146 1901.86,232.116 1902.43,232.227 1903,234.217 1903.57,236.108 1904.13,235.998 1904.7,234.799 1905.27,234.781 1905.84,233.731 1906.41,232.608 1906.98,232.488 1907.54,232.554 1908.11,234.5 1908.68,231.286 1909.25,231.329 1909.82,228.424 1910.39,228.771 1910.95,231.121 1911.52,229.141 1912.09,230.31 1912.66,230.682 1913.23,231.766 1913.8,231.914 1914.36,232.978 1914.93,236.394 1915.5,235.1 1916.07,235.809 1916.64,234.528 1917.21,235.791 1917.77,235.624 1918.34,236.277 1918.91,237.042 1919.48,235.752 1920.05,235.746 1920.62,236.421 1921.18,237.4 1921.75,239.059 1922.32,240.618 1922.89,238.937 1923.46,237.404 1924.03,239.202 1924.59,238.805 1925.16,237.416 1925.73,236.094 1926.3,235.829 1926.87,233.512 1927.44,231.23 1928,231.385 1928.57,232.596 1929.14,232.485 1929.71,230.282 1930.28,228.285 1930.85,228.613 1931.41,229.836 1931.98,231.071 1932.55,228.972 1933.12,229.194 1933.69,228.563 1934.26,227.927 1934.82,226.015 1935.39,226.728 1935.96,226.052 1936.53,226.625 1937.1,224.911 1937.67,226.489 1938.23,226.894 1938.8,225.465 1939.37,229.398 1939.94,229.72 1940.51,233.138 1941.08,232.397 1941.64,233.49 1942.21,232.247 1942.78,232.381 1943.35,229.226 1943.92,231.705 1944.49,232.996 1945.05,235.073 1945.62,235.002 1946.19,236.027 1946.76,234.696 1947.33,232.466 1947.9,231.709 1948.46,232.86 1949.03,232.896 1949.6,232.804 1950.17,231.941 1950.74,231.961 1951.31,232.828 1951.87,232.906 1952.44,233.02 1953.01,232.046 1953.58,233.897 1954.15,234.818 1954.72,233.565 1955.28,233.701 1955.85,233.927 1956.42,234.848 1956.99,236.784 1957.56,236.476 1958.13,237.236 1958.69,236.978 1959.26,235.74 1959.83,235.665 1960.4,232.513 1960.97,230.53 1961.54,230.513 1962.1,231.425 1962.67,233.521 1963.24,231.348 1963.81,230.472 1964.38,231.846 1964.95,231.7 1965.51,233.748 1966.08,233.652 1966.65,233.694 1967.22,233.648 1967.79,233.482 1968.36,231.303 1968.92,231.477 1969.49,230.52 1970.06,228.659 1970.63,230.037 1971.2,228.43 1971.77,227.836 1972.34,225.183 1972.9,225.848 1973.47,227.505 1974.04,227.893 1974.61,228.351 1975.18,230.663 1975.75,234.03 1976.31,233.158 1976.88,233.314 1977.45,234.441 1978.02,234.37 1978.59,232.219 1979.16,232.486 1979.72,231.7 1980.29,230.931 1980.86,231.18 1981.43,231.362 1982,230.84 1982.57,231.131 1983.13,233.094 1983.7,234.024 1984.27,233.206 1984.84,234.244 1985.41,235.115 1985.98,233.897 1986.54,231.652 1987.11,232.747 1987.68,231.615 1988.25,233.855 1988.82,233.638 1989.39,234.798 1989.95,235.824 1990.52,235.318 1991.09,237.159 1991.66,239.906 1992.23,237.258 1992.8,237.73 1993.36,236.484 1993.93,235.157 1994.5,234.945 1995.07,234.952 1995.64,235.767 1996.21,237.466 1996.77,235.867 1997.34,235.522 1997.91,235.354 1998.48,235.154 1999.05,237.929 1999.62,237.341 2000.18,236.915 2000.75,236.505 2001.32,236.222 2001.89,236.109 2002.46,236.934 2003.03,235.372 2003.59,236.283 2004.16,236.984 2004.73,236.492 2005.3,236.282 2005.87,234.875 2006.44,233.63 2007,231.311 2007.57,233.335 2008.14,232.397 2008.71,231.396 2009.28,231.494 2009.85,231.639 2010.41,229.862 2010.98,229.853 2011.55,232.177 2012.12,230.988 2012.69,229.965 2013.26,229.029 2013.82,227.471 2014.39,223.612 2014.96,224.244 2015.53,225.813 2016.1,225.404 2016.67,226.239 2017.23,226.677 2017.8,225.827 2018.37,226.337 2018.94,226.907 2019.51,227.364 2020.08,228.622 2020.64,233.916 2021.21,233.824 2021.78,233.928 2022.35,235.965 2022.92,235.678 2023.49,234.461 2024.05,235.322 2024.62,235.152 2025.19,235.03 2025.76,232.079 2026.33,234.317 2026.9,234.556 2027.46,234.224 2028.03,233.089 2028.6,232.044 2029.17,233.961 2029.74,235.832 2030.31,234.61 2030.87,234.353 2031.44,234.347 2032.01,233.17 2032.58,233.107 2033.15,233.042 2033.72,232.054 2034.28,233.361 2034.85,232.381 2035.42,232.4 2035.99,232.473 2036.56,232.589 2037.13,233.49 2037.69,231.185 2038.26,231.299 2038.83,231.47 2039.4,232.265 2039.97,230.299 2040.54,236.596 2041.11,238.273 2041.67,238.12 2042.24,238.825 2042.81,239.46 2043.38,240.878 2043.95,239.154 2044.52,239.878 2045.08,240.237 2045.65,235.484 2046.22,235.292 2046.79,235.033 2047.36,233.726 2047.93,232.567 2048.49,232.602 2049.06,232.596 2049.63,232.421 2050.2,233.469 2050.77,233.284 2051.34,232.319 2051.9,234.187 2052.47,233.977 2053.04,232.605 2053.61,230.476 2054.18,231.46 2054.75,230.424 2055.31,229.666 2055.88,228.95 2056.45,229.279 2057.02,228.478 2057.59,232.07 2058.16,233.015 2058.72,231.863 2059.29,230.725 2059.86,230.946 2060.43,229.87 2061,227.956 2061.57,228.249 2062.13,230.551 2062.7,231.703 2063.27,231.836 2063.84,233.732 2064.41,232.7 2064.98,233.656 2065.54,233.526 2066.11,234.586 2066.68,233.292 2067.25,234.412 2067.82,233.161 2068.39,233.313 2068.95,234.264 2069.52,235.103 2070.09,236.963 2070.66,235.49 2071.23,234.248 2071.8,233.143 2072.36,229.033 2072.93,230.31 2073.5,229.357 2074.07,228.487 2074.64,230.847 2075.21,227.792 2075.77,225.965 2076.34,225.336 2076.91,226.904 2077.48,226.392 2078.05,227.907 2078.62,230.187 2079.18,230.513 2079.75,229.711 2080.32,228.188 2080.89,228.639 2081.46,228.95 2082.03,229.375 2082.59,228.418 2083.16,228.797 2083.73,231.315 2084.3,231.497 2084.87,231.649 2085.44,231.796 2086,233.8 2086.57,233.735 2087.14,232.721 2087.71,232.879 2088.28,233.24 2088.85,233.344 2089.41,234.396 2089.98,233.525 2090.55,234.522 2091.12,235.457 2091.69,237.606 2092.26,237.392 2092.82,240.046 2093.39,238.363 2093.96,236.931 2094.53,236.445 2095.1,236.313 2095.67,235.125 2096.23,236.106 2096.8,234.697 2097.37,237.461 2097.94,237.163 2098.51,237.747 2099.08,236.303 2099.64,235.909 2100.21,234.57 2100.78,234.255 2101.35,235.199 2101.92,235.858 2102.49,233.422 2103.05,232.47 2103.62,232.589 2104.19,231.548 2104.76,232.588 2105.33,234.412 2105.9,234.119 2106.46,233.931 2107.03,233.7 2107.6,235.53 2108.17,233.323 2108.74,232.169 2109.31,231.037 2109.87,232.981 2110.44,234.783 2111.01,234.422 2111.58,235.087 2112.15,234.938 2112.72,236.662 2113.29,237.304 2113.85,235.773 2114.42,235.324 2114.99,233.764 2115.56,233.632 2116.13,232.36 2116.7,230.314 2117.26,230.301 2117.83,231.415 2118.4,231.568 2118.97,232.698 2119.54,232.514 2120.11,231.494 2120.67,229.313 2121.24,229.365 2121.81,229.47 2122.38,226.46 2122.95,226.606 2123.52,226.993 2124.08,228.5 2124.65,229.868 2125.22,229.094 2125.79,231.115 2126.36,231.372 2126.93,231.578 2127.49,232.853 2128.06,232.941 2128.63,233.989 2129.2,234.845 2129.77,233.638 2130.34,233.697 2130.9,232.421 2131.47,231.574 2132.04,230.474 2132.61,230.484 2133.18,229.689 2133.75,228.957 2134.31,229.32 2134.88,227.473 2135.45,226.877 2136.02,227.091 2136.59,227.493 2137.16,226.639 2137.72,227.164 2138.29,228.557 2138.86,227.998 2139.43,228.465 2140,228.042 2140.57,228.297 2141.13,228.706 2141.7,230.919 2142.27,231.995 2142.84,232.13 2143.41,232.342 2143.98,234.675 2144.54,234.487 2145.11,236.57 2145.68,238.348 2146.25,236.897 2146.82,236.599 2147.39,237.338 2147.95,238.009 2148.52,236.591 2149.09,236.45 2149.66,235.366 2150.23,233.32 2150.8,232.394 2151.36,232.332 2151.93,234.368 2152.5,235.474 2153.07,233.096 2153.64,233.032 2154.21,234.064 2154.77,230.956 2155.34,230.106 2155.91,230.303 2156.48,227.35 2157.05,227.918 2157.62,229.561 2158.18,231.762 2158.75,233.764 2159.32,232.786 2159.89,235.769 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip850)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip850)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip850)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip850)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.017\n  with uncertainty of ± 0.001099833642137863\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01656 ± (0.00240316, 0.00237294) (MC)\n  95% confidence interval: [-4.02149, -4.01171]) (MC)\n  linear error propagation: -4.01665 ± 0.0024622\n  |δ_y| = |0.00120769| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016562146011715, val_l = 0.004923480022869242, val_u = 0.004856737007261636)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip880\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip881\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip882\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1138.93 2211.02,1138.93 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,976.371 2211.02,976.371 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,813.816 2211.02,813.816 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,651.26 2211.02,651.26 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,488.705 2211.02,488.705 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,326.149 2211.02,326.149 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1138.93 365.751,1138.93 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,976.371 365.751,976.371 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,813.816 365.751,813.816 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,651.26 365.751,651.26 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,488.705 365.751,488.705 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,326.149 365.751,326.149 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M298.909 1124.73 Q295.298 1124.73 293.469 1128.29 Q291.664 1131.83 291.664 1138.96 Q291.664 1146.07 293.469 1149.63 Q295.298 1153.17 298.909 1153.17 Q302.543 1153.17 304.349 1149.63 Q306.177 1146.07 306.177 1138.96 Q306.177 1131.83 304.349 1128.29 Q302.543 1124.73 298.909 1124.73 M298.909 1121.02 Q304.719 1121.02 307.775 1125.63 Q310.853 1130.21 310.853 1138.96 Q310.853 1147.69 307.775 1152.29 Q304.719 1156.88 298.909 1156.88 Q293.099 1156.88 290.02 1152.29 Q286.964 1147.69 286.964 1138.96 Q286.964 1130.21 290.02 1125.63 Q293.099 1121.02 298.909 1121.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M259.557 989.716 L267.196 989.716 L267.196 963.35 L258.886 965.017 L258.886 960.758 L267.15 959.091 L271.826 959.091 L271.826 989.716 L279.465 989.716 L279.465 993.651 L259.557 993.651 L259.557 989.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M298.909 962.17 Q295.298 962.17 293.469 965.735 Q291.664 969.276 291.664 976.406 Q291.664 983.512 293.469 987.077 Q295.298 990.619 298.909 990.619 Q302.543 990.619 304.349 987.077 Q306.177 983.512 306.177 976.406 Q306.177 969.276 304.349 965.735 Q302.543 962.17 298.909 962.17 M298.909 958.466 Q304.719 958.466 307.775 963.072 Q310.853 967.656 310.853 976.406 Q310.853 985.133 307.775 989.739 Q304.719 994.322 298.909 994.322 Q293.099 994.322 290.02 989.739 Q286.964 985.133 286.964 976.406 Q286.964 967.656 290.02 963.072 Q293.099 958.466 298.909 958.466 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M262.775 827.16 L279.094 827.16 L279.094 831.096 L257.15 831.096 L257.15 827.16 Q259.812 824.406 264.395 819.776 Q269.002 815.124 270.182 813.781 Q272.428 811.258 273.307 809.522 Q274.21 807.762 274.21 806.073 Q274.21 803.318 272.266 801.582 Q270.344 799.846 267.242 799.846 Q265.043 799.846 262.59 800.61 Q260.159 801.374 257.381 802.924 L257.381 798.202 Q260.205 797.068 262.659 796.489 Q265.113 795.911 267.15 795.911 Q272.52 795.911 275.715 798.596 Q278.909 801.281 278.909 805.772 Q278.909 807.901 278.099 809.823 Q277.312 811.721 275.205 814.313 Q274.627 814.985 271.525 818.202 Q268.423 821.397 262.775 827.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M298.909 799.614 Q295.298 799.614 293.469 803.179 Q291.664 806.721 291.664 813.85 Q291.664 820.957 293.469 824.522 Q295.298 828.063 298.909 828.063 Q302.543 828.063 304.349 824.522 Q306.177 820.957 306.177 813.85 Q306.177 806.721 304.349 803.179 Q302.543 799.614 298.909 799.614 M298.909 795.911 Q304.719 795.911 307.775 800.517 Q310.853 805.1 310.853 813.85 Q310.853 822.577 307.775 827.184 Q304.719 831.767 298.909 831.767 Q293.099 831.767 290.02 827.184 Q286.964 822.577 286.964 813.85 Q286.964 805.1 290.02 800.517 Q293.099 795.911 298.909 795.911 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M272.914 649.906 Q276.27 650.624 278.145 652.892 Q280.043 655.161 280.043 658.494 Q280.043 663.61 276.525 666.411 Q273.006 669.212 266.525 669.212 Q264.349 669.212 262.034 668.772 Q259.742 668.355 257.289 667.499 L257.289 662.985 Q259.233 664.119 261.548 664.698 Q263.863 665.276 266.386 665.276 Q270.784 665.276 273.076 663.54 Q275.39 661.804 275.39 658.494 Q275.39 655.438 273.238 653.726 Q271.108 651.989 267.289 651.989 L263.261 651.989 L263.261 648.147 L267.474 648.147 Q270.923 648.147 272.752 646.781 Q274.58 645.392 274.58 642.8 Q274.58 640.138 272.682 638.726 Q270.807 637.29 267.289 637.29 Q265.367 637.29 263.168 637.707 Q260.969 638.124 258.33 639.003 L258.33 634.837 Q260.992 634.096 263.307 633.726 Q265.645 633.355 267.705 633.355 Q273.029 633.355 276.131 635.786 Q279.233 638.193 279.233 642.314 Q279.233 645.184 277.59 647.175 Q275.946 649.142 272.914 649.906 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M298.909 637.059 Q295.298 637.059 293.469 640.624 Q291.664 644.165 291.664 651.295 Q291.664 658.401 293.469 661.966 Q295.298 665.508 298.909 665.508 Q302.543 665.508 304.349 661.966 Q306.177 658.401 306.177 651.295 Q306.177 644.165 304.349 640.624 Q302.543 637.059 298.909 637.059 M298.909 633.355 Q304.719 633.355 307.775 637.962 Q310.853 642.545 310.853 651.295 Q310.853 660.022 307.775 664.628 Q304.719 669.212 298.909 669.212 Q293.099 669.212 290.02 664.628 Q286.964 660.022 286.964 651.295 Q286.964 642.545 290.02 637.962 Q293.099 633.355 298.909 633.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M271.594 475.499 L259.789 493.948 L271.594 493.948 L271.594 475.499 M270.367 471.425 L276.247 471.425 L276.247 493.948 L281.177 493.948 L281.177 497.837 L276.247 497.837 L276.247 505.985 L271.594 505.985 L271.594 497.837 L255.992 497.837 L255.992 493.323 L270.367 471.425 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M298.909 474.504 Q295.298 474.504 293.469 478.068 Q291.664 481.61 291.664 488.74 Q291.664 495.846 293.469 499.411 Q295.298 502.952 298.909 502.952 Q302.543 502.952 304.349 499.411 Q306.177 495.846 306.177 488.74 Q306.177 481.61 304.349 478.068 Q302.543 474.504 298.909 474.504 M298.909 470.8 Q304.719 470.8 307.775 475.406 Q310.853 479.99 310.853 488.74 Q310.853 497.466 307.775 502.073 Q304.719 506.656 298.909 506.656 Q293.099 506.656 290.02 502.073 Q286.964 497.466 286.964 488.74 Q286.964 479.99 290.02 475.406 Q293.099 470.8 298.909 470.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M258.793 308.869 L277.15 308.869 L277.15 312.805 L263.076 312.805 L263.076 321.277 Q264.094 320.93 265.113 320.768 Q266.131 320.582 267.15 320.582 Q272.937 320.582 276.316 323.754 Q279.696 326.925 279.696 332.342 Q279.696 337.92 276.224 341.022 Q272.752 344.101 266.432 344.101 Q264.256 344.101 261.988 343.73 Q259.742 343.36 257.335 342.619 L257.335 337.92 Q259.418 339.054 261.641 339.61 Q263.863 340.166 266.34 340.166 Q270.344 340.166 272.682 338.059 Q275.02 335.953 275.02 332.342 Q275.02 328.73 272.682 326.624 Q270.344 324.518 266.34 324.518 Q264.465 324.518 262.59 324.934 Q260.738 325.351 258.793 326.23 L258.793 308.869 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M298.909 311.948 Q295.298 311.948 293.469 315.513 Q291.664 319.055 291.664 326.184 Q291.664 333.291 293.469 336.855 Q295.298 340.397 298.909 340.397 Q302.543 340.397 304.349 336.855 Q306.177 333.291 306.177 326.184 Q306.177 319.055 304.349 315.513 Q302.543 311.948 298.909 311.948 M298.909 308.244 Q304.719 308.244 307.775 312.851 Q310.853 317.434 310.853 326.184 Q310.853 334.911 307.775 339.517 Q304.719 344.101 298.909 344.101 Q293.099 344.101 290.02 339.517 Q286.964 334.911 286.964 326.184 Q286.964 317.434 290.02 312.851 Q293.099 308.244 298.909 308.244 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip882)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1145.58 400.199,1250.53 400.786,1135.54 401.372,1124.83 401.958,1014.96 402.545,915.315 403.131,826.477 403.718,742.28 404.304,668.174 404.891,599.322 405.477,538.213 406.063,479.473 406.65,426.296 407.236,380.616 407.823,407.39 408.409,367.556 408.995,332.005 409.582,301.761 410.168,273.886 410.755,299.753 411.341,276.638 411.927,255.478 412.514,237.928 413.1,222.574 413.687,246.159 414.273,234.614 414.86,226.534 415.446,219.895 416.032,243.777 416.619,240.206 417.205,238.037 417.792,261.73 418.378,282.952 418.964,283.008 419.551,285.064 420.137,289.092 420.724,311.052 421.31,315.006 421.896,335.818 422.483,355.446 423.069,361.645 423.656,369.098 424.242,377.251 424.829,397.445 425.415,405.441 426.001,414.319 426.588,433.119 427.174,442.338 427.761,461.308 428.347,479.202 428.933,498.419 429.52,509.273 430.106,527.851 430.693,552.342 431.279,569.674 431.865,579.871 432.452,602.175 433.038,617.562 433.625,632.817 434.211,659.946 434.798,684.384 435.384,703.725 435.97,731.88 436.557,744.909 437.143,753.74 437.73,770.837 438.316,787.207 438.902,803.091 439.489,810.697 440.075,829.286 440.662,836.761 441.248,850.892 441.835,861.259 442.421,875.042 443.007,888.032 443.594,894.166 444.18,903.422 444.767,912.055 445.353,920.939 445.939,932.336 446.526,940.83 447.112,948.904 447.699,962.272 448.285,972.696 448.871,984.85 449.458,988.736 450.044,995.946 450.631,1002.71 451.217,1013.99 451.804,1022.49 452.39,1030.48 452.976,1038.47 453.563,1044.13 454.149,1053.97 454.736,1059.02 455.322,1064.03 455.908,1071.16 456.495,1075.86 457.081,1078.25 457.668,1080.98 458.254,1083.6 458.84,1088.03 459.427,1094.88 460.013,1099.19 460.6,1105.38 461.186,1111.48 461.773,1113.39 462.359,1118.84 462.945,1122.63 463.532,1124.3 464.118,1128.07 464.705,1133.43 465.291,1140.6 465.877,1144.02 466.464,1143.77 467.05,1148.41 467.637,1151.48 468.223,1154.52 468.809,1155.53 469.396,1160.03 469.982,1162.9 470.569,1165.39 471.155,1165.87 471.742,1168.61 472.328,1172.82 472.914,1175.17 473.501,1174.19 474.087,1171.77 474.674,1174.42 475.26,1179.17 475.846,1183.44 476.433,1184.29 477.019,1185.23 477.606,1187.59 478.192,1191.43 478.778,1193.53 479.365,1193.71 479.951,1192.9 480.538,1196.52 481.124,1201.77 481.711,1203.66 482.297,1203.9 482.883,1205.52 483.47,1205.51 484.056,1205.77 484.643,1204.57 485.229,1205.02 485.815,1206.54 486.402,1206.66 486.988,1214.35 487.575,1217.43 488.161,1216.73 488.748,1216.7 489.334,1216.63 489.92,1216.12 490.507,1217.41 491.093,1217.55 491.68,1220.4 492.266,1220.15 492.852,1221.55 493.439,1223.94 494.025,1225.02 494.612,1224.39 495.198,1225.8 495.784,1226.51 496.371,1226.08 496.957,1226.89 497.544,1229.49 498.13,1231.98 498.717,1234.22 499.303,1232.25 499.889,1234.25 500.476,1232.06 501.062,1232.7 501.649,1232.01 502.235,1231.41 502.821,1229.34 503.408,1228.74 503.994,1229.84 504.581,1229.67 505.167,1229.26 505.753,1230.41 506.34,1230.95 506.926,1233.2 507.513,1232.09 508.099,1231.39 508.686,1232.39 509.272,1233.15 509.858,1235.31 510.445,1234.77 511.031,1234.35 511.618,1233.73 512.204,1233.28 512.79,1235.24 513.377,1235.87 513.963,1236.59 514.55,1235.84 515.136,1236.81 515.722,1237.51 516.309,1239.43 516.895,1238.83 517.482,1236.71 518.068,1239.25 518.655,1241.38 519.241,1241.79 519.827,1239.46 520.414,1240.17 521,1240.65 521.587,1238.58 522.173,1238.08 522.759,1236.19 523.346,1238.42 523.932,1237.81 524.519,1235.71 525.105,1234.99 525.691,1239.91 526.278,1239.13 526.864,1238.31 527.451,1237.83 528.037,1238.45 528.624,1236.26 529.21,1235.57 529.796,1235.14 530.383,1234.51 530.969,1234.03 531.556,1233.83 532.142,1237.41 532.728,1234.04 533.315,1236.22 533.901,1235.55 534.488,1234.63 535.074,1238.11 535.661,1236.93 536.247,1236.51 536.833,1235.88 537.42,1236.46 538.006,1237.32 538.593,1239.08 539.179,1244.82 539.765,1246.22 540.352,1243.49 540.938,1245.18 541.525,1242.7 542.111,1241.8 542.697,1240.74 543.284,1241.16 543.87,1237.19 544.457,1237.7 545.043,1236.82 545.63,1238.77 546.216,1238 546.802,1239.74 547.389,1240.33 547.975,1235.35 548.562,1234.69 549.148,1232.14 549.734,1231.29 550.321,1229.42 550.907,1231.75 551.494,1231.03 552.08,1233.37 552.666,1228.75 553.253,1229.89 553.839,1229.44 554.426,1227.94 555.012,1227.66 555.599,1227.32 556.185,1228.1 556.771,1230.43 557.358,1229.97 557.944,1228.18 558.531,1227.62 559.117,1223.22 559.703,1222.76 560.29,1221.36 560.876,1225.44 561.463,1226.28 562.049,1227.32 562.635,1229.75 563.222,1224.93 563.808,1222.04 564.395,1221.99 564.981,1221.61 565.568,1222.46 566.154,1222.28 566.74,1223.84 567.327,1219.69 567.913,1222.24 568.5,1226.26 569.086,1225.78 569.672,1225.3 570.259,1227.93 570.845,1226.19 571.432,1223.09 572.018,1222.91 572.605,1221.26 573.191,1219.83 573.777,1220.78 574.364,1220.72 574.95,1220.54 575.537,1220.29 576.123,1220.08 576.709,1221.38 577.296,1222.66 577.882,1222.29 578.469,1222.11 579.055,1223.37 579.641,1224.52 580.228,1224.13 580.814,1222.65 581.401,1225.12 581.987,1224.79 582.574,1221.67 583.16,1222.92 583.746,1225.35 584.333,1226.24 584.919,1229.84 585.506,1230.54 586.092,1234.15 586.678,1233.34 587.265,1235.01 587.851,1232.77 588.438,1232.19 589.024,1232.57 589.61,1233.07 590.197,1233.17 590.783,1232.25 591.37,1231.55 591.956,1230.84 592.543,1230.24 593.129,1229.46 593.715,1228.68 594.302,1227.97 594.888,1225.99 595.475,1227.11 596.061,1227.7 596.647,1224.23 597.234,1225.05 597.82,1223.32 598.407,1224.35 598.993,1225.33 599.579,1226.02 600.166,1225.26 600.752,1223.65 601.339,1223.06 601.925,1221.28 602.512,1220.97 603.098,1219.53 603.684,1218.06 604.271,1217.75 604.857,1217.78 605.444,1214.83 606.03,1214.75 606.616,1213.41 607.203,1213.59 607.789,1214.85 608.376,1213.61 608.962,1213.91 609.548,1215.22 610.135,1215.45 610.721,1212.8 611.308,1215.48 611.894,1215.39 612.481,1218.21 613.067,1218.08 613.653,1216.45 614.24,1214.9 614.826,1214.97 615.413,1219.07 615.999,1217.43 616.585,1218.42 617.172,1219.29 617.758,1217.74 618.345,1216.4 618.931,1216.57 619.518,1213.66 620.104,1213.53 620.69,1213.65 621.277,1217.63 621.863,1219.04 622.45,1220.29 623.036,1222.41 623.622,1222.02 624.209,1221.41 624.795,1220.98 625.382,1220.65 625.968,1221.71 626.554,1226.63 627.141,1224.68 627.727,1224.12 628.314,1222.42 628.9,1224.67 629.487,1221.4 630.073,1219.96 630.659,1220.94 631.246,1220.51 631.832,1221.23 632.419,1221.77 633.005,1220.17 633.591,1218.66 634.178,1218.35 634.764,1219.32 635.351,1218.9 635.937,1221.05 636.523,1220.69 637.11,1221.46 637.696,1222.18 638.283,1220.32 638.869,1215.89 639.456,1215.72 640.042,1213.02 640.628,1215.68 641.215,1215.19 641.801,1215.05 642.388,1217.68 642.974,1219.06 643.56,1218.97 644.147,1215.95 644.733,1214.72 645.32,1215.81 645.906,1215.76 646.492,1214.48 647.079,1215.96 647.665,1216.05 648.252,1217.35 648.838,1217.12 649.425,1218.34 650.011,1217.81 650.597,1216.36 651.184,1217.32 651.77,1216.87 652.357,1217.85 652.943,1216.06 653.529,1213.23 654.116,1213.03 654.702,1211.64 655.289,1212.82 655.875,1212.9 656.462,1212.9 657.048,1216.62 657.634,1212.29 658.221,1213.58 658.807,1218.82 659.394,1218.46 659.98,1220.84 660.566,1220.29 661.153,1220.89 661.739,1217.9 662.326,1218.74 662.912,1216.67 663.498,1216.34 664.085,1217.57 664.671,1217.06 665.258,1214.16 665.844,1211.6 666.431,1214.03 667.017,1218.16 667.603,1217.6 668.19,1217.17 668.776,1216.75 669.363,1217.56 669.949,1215.96 670.535,1216.82 671.122,1220.3 671.708,1220.09 672.295,1221.02 672.881,1220.47 673.467,1218.52 674.054,1214.47 674.64,1212.8 675.227,1212.68 675.813,1211.33 676.4,1211.27 676.986,1209.89 677.572,1212.66 678.159,1208.4 678.745,1210.11 679.332,1211.51 679.918,1210.09 680.504,1210.07 681.091,1208.51 681.677,1207.47 682.264,1207.5 682.85,1207.81 683.436,1209.67 684.023,1209.69 684.609,1209.6 685.196,1213.43 685.782,1207.69 686.369,1210.52 686.955,1211.96 687.541,1210.59 688.128,1213.32 688.714,1211.69 689.301,1211.45 689.887,1211.38 690.473,1212.61 691.06,1212.32 691.646,1212.2 692.233,1213.43 692.819,1215.94 693.405,1215.39 693.992,1214.98 694.578,1212.35 695.165,1213.41 695.751,1214.48 696.338,1215.46 696.924,1216.53 697.51,1216.18 698.097,1218.34 698.683,1217.7 699.27,1217.54 699.856,1217.43 700.442,1215.68 701.029,1214.2 701.615,1216.48 702.202,1214.82 702.788,1211.91 703.375,1211.73 703.961,1210.35 704.547,1209.08 705.134,1208.98 705.72,1211.46 706.307,1208.67 706.893,1206.12 707.479,1203.61 708.066,1205.25 708.652,1205.52 709.239,1203.21 709.825,1202.33 710.411,1201.4 710.998,1200.37 711.584,1199.43 712.171,1199.85 712.757,1202.97 713.344,1204.64 713.93,1204.87 714.516,1203.72 715.103,1202.78 715.689,1203.24 716.276,1206.54 716.862,1208.11 717.448,1209.34 718.035,1210.8 718.621,1206.51 719.208,1206.58 719.794,1209.24 720.38,1207.77 720.967,1207.84 721.553,1206.55 722.14,1206.52 722.726,1205.44 723.313,1207.95 723.899,1206.8 724.485,1208.18 725.072,1208.53 725.658,1209.95 726.245,1211.39 726.831,1209.87 727.417,1208.54 728.004,1208.79 728.59,1208.91 729.177,1208.96 729.763,1209.15 730.349,1205.1 730.936,1205.57 731.522,1207.24 732.109,1209.88 732.695,1212.28 733.282,1214.84 733.868,1210.44 734.454,1207.58 735.041,1210.06 735.627,1209.94 736.214,1207.38 736.8,1206.19 737.386,1203.8 737.973,1205.17 738.559,1205.24 739.146,1206.88 739.732,1208.46 740.318,1205.75 740.905,1211.33 741.491,1211.24 742.078,1208.68 742.664,1208.65 743.251,1207.38 743.837,1206.36 744.423,1210.46 745.01,1211.61 745.596,1215.42 746.183,1213.95 746.769,1216.01 747.355,1216.7 747.942,1214.89 748.528,1215.81 749.115,1215.02 749.701,1211.95 750.288,1211.72 750.874,1210.28 751.46,1210.42 752.047,1211.68 752.633,1211.39 753.22,1210.06 753.806,1212.5 754.392,1212.27 754.979,1213.51 755.565,1214.35 756.152,1213.99 756.738,1214.69 757.324,1214.46 757.911,1215.38 758.497,1212.13 759.084,1213.19 759.67,1211.58 760.257,1212.61 760.843,1213.69 761.429,1213.63 762.016,1212.31 762.602,1211.9 763.189,1211.67 763.775,1210.14 764.361,1210.06 764.948,1209.03 765.534,1208.91 766.121,1210.18 766.707,1208.71 767.293,1209.03 767.88,1207.58 768.466,1208.87 769.053,1209.1 769.639,1207.72 770.226,1203.81 770.812,1203.96 771.398,1206.79 771.985,1208 772.571,1209.5 773.158,1209.2 773.744,1207.73 774.33,1209 774.917,1211.66 775.503,1205.9 776.09,1204.92 776.676,1209.19 777.262,1211.98 777.849,1210.3 778.435,1210.35 779.022,1212.82 779.608,1212.33 780.195,1212.21 780.781,1210.8 781.367,1212.01 781.954,1213.21 782.54,1213.06 783.127,1212.78 783.713,1211.3 784.299,1211.03 784.886,1209.57 785.472,1210.48 786.059,1211.57 786.645,1211.56 787.232,1212.54 787.818,1213.6 788.404,1213.52 788.991,1211.96 789.577,1212.72 790.164,1211.25 790.75,1211.32 791.336,1209.91 791.923,1209.95 792.509,1209.87 793.096,1211.02 793.682,1209.54 794.268,1209.56 794.855,1208.38 795.441,1209.6 796.028,1209.28 796.614,1207.95 797.201,1207.81 797.787,1208.76 798.373,1208.91 798.96,1211.43 799.546,1208.69 800.133,1209.78 800.719,1209.5 801.305,1207.99 801.892,1209.42 802.478,1209.35 803.065,1211.74 803.651,1212.9 804.237,1211.05 804.824,1213.44 805.41,1215.43 805.997,1217.82 806.583,1217.17 807.17,1214.84 807.756,1214.16 808.342,1215 808.929,1211.9 809.515,1211.38 810.102,1211.31 810.688,1211.01 811.274,1210.62 811.861,1211.62 812.447,1208.45 813.034,1209.51 813.62,1205.27 814.206,1205.44 814.793,1204.38 815.379,1204.48 815.966,1203.23 816.552,1203.7 817.139,1202.89 817.725,1206.01 818.311,1203.53 818.898,1201.07 819.484,1200.08 820.071,1201.58 820.657,1200.54 821.243,1203.71 821.83,1205.1 822.416,1203.89 823.003,1204.12 823.589,1204.12 824.175,1205.73 824.762,1207.06 825.348,1208.43 825.935,1204.22 826.521,1207.03 827.108,1209.52 827.694,1208.22 828.28,1210.65 828.867,1211.84 829.453,1208.81 830.04,1208.62 830.626,1209.89 831.212,1207.27 831.799,1203.24 832.385,1205.91 832.972,1207.11 833.558,1206.84 834.145,1205.3 834.731,1204.29 835.317,1204.31 835.904,1204.38 836.49,1205.9 837.077,1207.18 837.663,1205.72 838.249,1206.08 838.836,1208.71 839.422,1210.04 840.009,1208.52 840.595,1205.83 841.181,1203.27 841.768,1202.14 842.354,1202.58 842.941,1201.3 843.527,1201.66 844.114,1202.2 844.7,1203.86 845.286,1199.6 845.873,1201.42 846.459,1201.59 847.046,1201.65 847.632,1203.15 848.218,1207.21 848.805,1205.83 849.391,1205.73 849.978,1205.81 850.564,1207.51 851.15,1208.9 851.737,1210.35 852.323,1210.04 852.91,1208.42 853.496,1205.66 854.083,1204.59 854.669,1202.02 855.255,1199.47 855.842,1202.41 856.428,1202.63 857.015,1205.68 857.601,1206.79 858.187,1205.3 858.774,1206.81 859.36,1206.53 859.947,1205.35 860.533,1204.3 861.119,1205.97 861.706,1205.82 862.292,1206.15 862.879,1205.88 863.465,1209.91 864.052,1207.18 864.638,1205.92 865.224,1207.37 865.811,1209.95 866.397,1209.81 866.984,1209.61 867.57,1207.85 868.156,1205.31 868.743,1204.11 869.329,1206.83 869.916,1206.95 870.502,1208.07 871.089,1209.55 871.675,1208.12 872.261,1211.82 872.848,1210.56 873.434,1209 874.021,1206.45 874.607,1203.54 875.193,1205.05 875.78,1205.39 876.366,1204.12 876.953,1202.74 877.539,1201.72 878.125,1203.24 878.712,1205.04 879.298,1204.96 879.885,1206.29 880.471,1206.15 881.058,1205.99 881.644,1204.85 882.23,1205.05 882.817,1203.76 883.403,1202.47 883.99,1203.98 884.576,1205.51 885.162,1206.66 885.749,1208.04 886.335,1209.19 886.922,1208.94 887.508,1208.81 888.094,1211.51 888.681,1208.59 889.267,1208.5 889.854,1209.55 890.44,1209.26 891.027,1207.93 891.613,1207.73 892.199,1207.69 892.786,1207.49 893.372,1207.47 893.959,1207.31 894.545,1208.79 895.131,1205.95 895.718,1207.16 896.304,1207.14 896.891,1208.73 897.477,1211.3 898.063,1210.97 898.65,1209.41 899.236,1211.85 899.823,1218.16 900.409,1214.71 900.996,1214.13 901.582,1212.51 902.168,1211.17 902.755,1210.82 903.341,1209.53 903.928,1210.58 904.514,1207.56 905.1,1207.7 905.687,1211.86 906.273,1210.33 906.86,1211.12 907.446,1209.65 908.032,1209.05 908.619,1211.33 909.205,1211.05 909.792,1213.27 910.378,1215.47 910.965,1214.79 911.551,1213.97 912.137,1209.39 912.724,1209.12 913.31,1207.59 913.897,1208.93 914.483,1207.28 915.069,1205.92 915.656,1205.83 916.242,1203.13 916.829,1204.44 917.415,1208.49 918.002,1211.14 918.588,1208.55 919.174,1207.14 919.761,1208.28 920.347,1207.94 920.934,1198.57 921.52,1200.2 922.106,1197.96 922.693,1200.02 923.279,1199.01 923.866,1200.82 924.452,1198.44 925.038,1198.94 925.625,1199.27 926.211,1199.66 926.798,1197.37 927.384,1200.43 927.971,1201.92 928.557,1200.93 929.143,1202.69 929.73,1202.71 930.316,1202.53 930.903,1203.98 931.489,1203.83 932.075,1203.84 932.662,1207.91 933.248,1207.88 933.835,1206.19 934.421,1204.69 935.007,1204.79 935.594,1203.41 936.18,1202.29 936.767,1203.67 937.353,1201.23 937.94,1202.63 938.526,1203.94 939.112,1205.22 939.699,1206.86 940.285,1208.12 940.872,1206.83 941.458,1209.27 942.044,1207.77 942.631,1204.94 943.217,1202.48 943.804,1203.92 944.39,1203.86 944.976,1202.51 945.563,1202.57 946.149,1202.68 946.736,1201.62 947.322,1199.12 947.909,1196.84 948.495,1196.19 949.081,1192.85 949.668,1191.97 950.254,1192.59 950.841,1194.64 951.427,1196.7 952.013,1197.2 952.6,1197.49 953.186,1197.84 953.773,1199.6 954.359,1200.1 954.945,1200.45 955.532,1199.49 956.118,1201.13 956.705,1200.34 957.291,1200.63 957.878,1200.73 958.464,1200.94 959.05,1201.32 959.637,1201.42 960.223,1201.76 960.81,1204.83 961.396,1206.22 961.982,1206.31 962.569,1207.56 963.155,1205.97 963.742,1204.56 964.328,1208.68 964.915,1209.8 965.501,1210.94 966.087,1209.61 966.674,1209.47 967.26,1213.49 967.847,1212.91 968.433,1212.54 969.019,1211.01 969.606,1213.36 970.192,1211.74 970.779,1208.66 971.365,1206.9 971.951,1206.75 972.538,1208.15 973.124,1209.4 973.711,1208.21 974.297,1209.53 974.884,1210.41 975.47,1208.01 976.056,1208.9 976.643,1208.89 977.229,1207.06 977.816,1204.23 978.402,1205.79 978.988,1204.36 979.575,1203.98 980.161,1205.3 980.748,1205.29 981.334,1205.25 981.92,1203.72 982.507,1205.18 983.093,1203.65 983.68,1203.78 984.266,1205.12 984.853,1203.87 985.439,1206.59 986.025,1208.06 986.612,1208.04 987.198,1206.54 987.785,1204.96 988.371,1204.94 988.957,1203.58 989.544,1202.25 990.13,1200.87 990.717,1199.79 991.303,1200.19 991.889,1201.95 992.476,1200.84 993.062,1203.82 993.649,1203.8 994.235,1203.83 994.822,1202.51 995.408,1200.01 995.994,1199.87 996.581,1200.31 997.167,1203.59 997.754,1203.8 998.34,1205.16 998.926,1206.43 999.513,1207.67 1000.1,1208.87 1000.69,1205.75 1001.27,1207.1 1001.86,1205.75 1002.44,1206.91 1003.03,1206.73 1003.62,1203.82 1004.2,1206.54 1004.79,1205.2 1005.38,1205.18 1005.96,1209.07 1006.55,1209.87 1007.14,1208.49 1007.72,1208.44 1008.31,1206.9 1008.9,1206.66 1009.48,1206.46 1010.07,1203.88 1010.65,1201.35 1011.24,1200.13 1011.83,1203.02 1012.41,1201.89 1013,1201.94 1013.59,1206.08 1014.17,1206.02 1014.76,1204.62 1015.35,1204.96 1015.93,1206.11 1016.52,1207.35 1017.11,1204.74 1017.69,1204.89 1018.28,1205.97 1018.86,1207.11 1019.45,1206.07 1020.04,1205.98 1020.62,1207.31 1021.21,1204.54 1021.8,1203.47 1022.38,1201.21 1022.97,1202.78 1023.56,1201.27 1024.14,1201.19 1024.73,1205.54 1025.32,1206.9 1025.9,1208.12 1026.49,1208.33 1027.07,1209.46 1027.66,1211.96 1028.25,1212.89 1028.83,1211.17 1029.42,1209.34 1030.01,1209.19 1030.59,1211.36 1031.18,1211.15 1031.77,1213.5 1032.35,1215.57 1032.94,1216.46 1033.52,1215.94 1034.11,1215.33 1034.7,1214.7 1035.28,1212.82 1035.87,1212.27 1036.46,1209.27 1037.04,1209.61 1037.63,1209.22 1038.22,1206.53 1038.8,1207.71 1039.39,1209.08 1039.98,1207.49 1040.56,1208.54 1041.15,1209.69 1041.73,1210.63 1042.32,1211.5 1042.91,1212.74 1043.49,1210.7 1044.08,1213.13 1044.67,1212.83 1045.25,1213.88 1045.84,1213.45 1046.43,1214.57 1047.01,1214 1047.6,1213.53 1048.19,1213.08 1048.77,1209.88 1049.36,1208.17 1049.94,1207.83 1050.53,1208.89 1051.12,1209.97 1051.7,1208.17 1052.29,1208.01 1052.88,1207.79 1053.46,1207.55 1054.05,1208.75 1054.64,1211.27 1055.22,1209.52 1055.81,1209.1 1056.39,1204.81 1056.98,1203.49 1057.57,1204.69 1058.15,1202.1 1058.74,1204.95 1059.33,1203.45 1059.91,1204.76 1060.5,1204.65 1061.09,1204.73 1061.67,1207.43 1062.26,1207.39 1062.85,1205.88 1063.43,1206.83 1064.02,1210.86 1064.6,1211.58 1065.19,1208.62 1065.78,1204.3 1066.36,1205.79 1066.95,1205.7 1067.54,1202.85 1068.12,1206.89 1068.71,1209.36 1069.3,1209.19 1069.88,1209.11 1070.47,1206.42 1071.06,1207.81 1071.64,1206.55 1072.23,1203.7 1072.81,1202.57 1073.4,1202.42 1073.99,1202.63 1074.57,1201.67 1075.16,1199.02 1075.75,1199.24 1076.33,1199.43 1076.92,1198.31 1077.51,1199.75 1078.09,1199.96 1078.68,1197.5 1079.26,1199.02 1079.85,1199.15 1080.44,1199.65 1081.02,1198.67 1081.61,1198.75 1082.2,1199.31 1082.78,1196.78 1083.37,1202.59 1083.96,1203.85 1084.54,1206.43 1085.13,1204.93 1085.72,1200.76 1086.3,1203.58 1086.89,1203.63 1087.47,1202.14 1088.06,1199.73 1088.65,1201.62 1089.23,1200.22 1089.82,1198.85 1090.41,1197.71 1090.99,1199.4 1091.58,1195.99 1092.17,1195.32 1092.75,1197.05 1093.34,1194.79 1093.93,1193.87 1094.51,1197.22 1095.1,1196.48 1095.68,1198.23 1096.27,1198.5 1096.86,1197.56 1097.44,1197.82 1098.03,1200.91 1098.62,1201.13 1099.2,1201.59 1099.79,1200.31 1100.38,1200.37 1100.96,1195.4 1101.55,1194.78 1102.14,1193.99 1102.72,1196.22 1103.31,1200.73 1103.89,1198.07 1104.48,1200.83 1105.07,1200.97 1105.65,1200.15 1106.24,1200.51 1106.83,1202.19 1107.41,1205.12 1108,1205.38 1108.59,1202.82 1109.17,1201.73 1109.76,1200.83 1110.34,1199.38 1110.93,1199.78 1111.52,1200.24 1112.1,1201.8 1112.69,1202.02 1113.28,1203.54 1113.86,1205.11 1114.45,1206.61 1115.04,1206.53 1115.62,1207.74 1116.21,1207.8 1116.8,1210.31 1117.38,1211.09 1117.97,1210.86 1118.55,1212.99 1119.14,1213.83 1119.73,1214.5 1120.31,1212.58 1120.9,1213.61 1121.49,1213.16 1122.07,1211.53 1122.66,1211.38 1123.25,1211.07 1123.83,1210.69 1124.42,1212.8 1125.01,1212.25 1125.59,1215.93 1126.18,1212.66 1126.76,1209.8 1127.35,1212.24 1127.94,1209.49 1128.52,1210.5 1129.11,1208.83 1129.7,1208.36 1130.28,1206.6 1130.87,1205.13 1131.46,1204.95 1132.04,1204.45 1132.63,1207.02 1133.21,1203.07 1133.8,1202.91 1134.39,1200.11 1134.97,1199.23 1135.56,1196.84 1136.15,1197.14 1136.73,1200.05 1137.32,1200.15 1137.91,1197.71 1138.49,1197.01 1139.08,1197.6 1139.67,1198.2 1140.25,1198.45 1140.84,1199.1 1141.42,1200.62 1142.01,1202.07 1142.6,1202.35 1143.18,1201.19 1143.77,1200.14 1144.36,1201.65 1144.94,1200.51 1145.53,1203.5 1146.12,1203.51 1146.7,1207.39 1147.29,1207.39 1147.88,1208.76 1148.46,1208.33 1149.05,1205.32 1149.63,1206.66 1150.22,1205.29 1150.81,1205.22 1151.39,1205.23 1151.98,1205.57 1152.57,1206.71 1153.15,1205.19 1153.74,1203.97 1154.33,1204.04 1154.91,1202.74 1155.5,1205.58 1156.09,1205.59 1156.67,1203.89 1157.26,1202.51 1157.84,1201.61 1158.43,1201.47 1159.02,1198.94 1159.6,1199.1 1160.19,1198.11 1160.78,1201.15 1161.36,1201.25 1161.95,1201.43 1162.54,1201.53 1163.12,1201.88 1163.71,1199.31 1164.29,1199.78 1164.88,1200.02 1165.47,1197.55 1166.05,1199.17 1166.64,1198.3 1167.23,1197.1 1167.81,1197.74 1168.4,1200.85 1168.99,1203.4 1169.57,1201.92 1170.16,1203.45 1170.75,1204.97 1171.33,1207.37 1171.92,1205.87 1172.5,1204.27 1173.09,1207.17 1173.68,1206.9 1174.26,1204.22 1174.85,1204.3 1175.44,1205.77 1176.02,1205.76 1176.61,1204.03 1177.2,1205.27 1177.78,1206.62 1178.37,1203.68 1178.96,1202.31 1179.54,1201.24 1180.13,1198.65 1180.71,1198.83 1181.3,1200.45 1181.89,1200.69 1182.47,1198.11 1183.06,1198.81 1183.65,1200.32 1184.23,1200.5 1184.82,1200.73 1185.41,1200.94 1185.99,1203.95 1186.58,1202.75 1187.16,1202.87 1187.75,1201.49 1188.34,1201.34 1188.92,1204.08 1189.51,1202.96 1190.1,1201.99 1190.68,1202.17 1191.27,1205.04 1191.86,1206.12 1192.44,1208.61 1193.03,1206.83 1193.62,1206.46 1194.2,1207.41 1194.79,1205.85 1195.37,1204.41 1195.96,1208.3 1196.55,1204.16 1197.13,1205.65 1197.72,1208.09 1198.31,1209.29 1198.89,1210.26 1199.48,1209.91 1200.07,1208.31 1200.65,1204.26 1201.24,1205.3 1201.83,1206.51 1202.41,1207.53 1203,1206.08 1203.58,1202.11 1204.17,1201.1 1204.76,1201.48 1205.34,1200.35 1205.93,1203.36 1206.52,1206.2 1207.1,1208.68 1207.69,1208.54 1208.28,1207.13 1208.86,1205.89 1209.45,1203.3 1210.03,1206.01 1210.62,1206.03 1211.21,1204.72 1211.79,1203.04 1212.38,1204.2 1212.97,1202.79 1213.55,1204.33 1214.14,1202.73 1214.73,1201.7 1215.31,1199.17 1215.9,1200.63 1216.49,1199.88 1217.07,1200.25 1217.66,1203.39 1218.24,1206.11 1218.83,1207.53 1219.42,1209.02 1220,1207.63 1220.59,1208.86 1221.18,1207.32 1221.76,1207.18 1222.35,1208.37 1222.94,1208.15 1223.52,1209.04 1224.11,1210.58 1224.7,1208.94 1225.28,1211.33 1225.87,1208.33 1226.45,1210.65 1227.04,1207.49 1227.63,1209.5 1228.21,1211.69 1228.8,1212.69 1229.39,1215.28 1229.97,1211.89 1230.56,1212.85 1231.15,1212.35 1231.73,1215.72 1232.32,1213.66 1232.91,1213.33 1233.49,1207.53 1234.08,1207.33 1234.66,1208.41 1235.25,1208.21 1235.84,1207.84 1236.42,1207.53 1237.01,1208.85 1237.6,1205.93 1238.18,1206.85 1238.77,1206.79 1239.36,1207.87 1239.94,1206.31 1240.53,1204.7 1241.11,1207.36 1241.7,1205.58 1242.29,1201.57 1242.87,1196.13 1243.46,1196.54 1244.05,1197.21 1244.63,1199.01 1245.22,1200.71 1245.81,1200.95 1246.39,1202.12 1246.98,1203.44 1247.57,1203.37 1248.15,1202.01 1248.74,1202.2 1249.32,1203.29 1249.91,1205.9 1250.5,1204.46 1251.08,1201.65 1251.67,1201.85 1252.26,1204.82 1252.84,1207.56 1253.43,1208.51 1254.02,1212.31 1254.6,1208.02 1255.19,1206.48 1255.78,1205.02 1256.36,1201.29 1256.95,1200.34 1257.53,1200.7 1258.12,1203.71 1258.71,1203.79 1259.29,1202.62 1259.88,1202.63 1260.47,1202.93 1261.05,1200.48 1261.64,1203.32 1262.23,1203.43 1262.81,1204.75 1263.4,1204.38 1263.98,1204.53 1264.57,1204.62 1265.16,1202.26 1265.74,1204.52 1266.33,1204.31 1266.92,1204.22 1267.5,1205.41 1268.09,1204.97 1268.68,1201.87 1269.26,1203.23 1269.85,1204.76 1270.44,1205.76 1271.02,1203.04 1271.61,1202.74 1272.19,1206.78 1272.78,1205.36 1273.37,1204.16 1273.95,1202.57 1274.54,1202.77 1275.13,1198.9 1275.71,1200.92 1276.3,1201.18 1276.89,1197.28 1277.47,1199.36 1278.06,1199.57 1278.65,1198.76 1279.23,1197.84 1279.82,1198.29 1280.4,1197.37 1280.99,1201.71 1281.58,1205.6 1282.16,1206.82 1282.75,1206.74 1283.34,1203.81 1283.92,1202.74 1284.51,1203.99 1285.1,1202.77 1285.68,1202.98 1286.27,1201.63 1286.86,1203.14 1287.44,1204.57 1288.03,1205.56 1288.61,1207.76 1289.2,1207.61 1289.79,1210.25 1290.37,1208.59 1290.96,1208.16 1291.55,1206.7 1292.13,1206.62 1292.72,1206.15 1293.31,1205.97 1293.89,1209.87 1294.48,1209.47 1295.06,1207.89 1295.65,1208.89 1296.24,1207.23 1296.82,1207.01 1297.41,1207.85 1298,1205.12 1298.58,1203.46 1299.17,1204.87 1299.76,1202.28 1300.34,1199.7 1300.93,1200.98 1301.52,1202.66 1302.1,1202.76 1302.69,1205.61 1303.27,1203.27 1303.86,1198.14 1304.45,1200.07 1305.03,1200.41 1305.62,1201.83 1306.21,1200.43 1306.79,1202.9 1307.38,1204.32 1307.97,1203.07 1308.55,1202.91 1309.14,1204.06 1309.73,1205.61 1310.31,1208.33 1310.9,1208.21 1311.48,1206.62 1312.07,1207.95 1312.66,1207.81 1313.24,1211.59 1313.83,1213.8 1314.42,1213.25 1315,1211.74 1315.59,1208.67 1316.18,1208.56 1316.76,1210.92 1317.35,1209.09 1317.93,1206.26 1318.52,1204.95 1319.11,1206.28 1319.69,1204.9 1320.28,1207.44 1320.87,1202.13 1321.45,1198.36 1322.04,1197.55 1322.63,1197.91 1323.21,1199.66 1323.8,1199.67 1324.39,1199.77 1324.97,1198.68 1325.56,1197.65 1326.14,1197.88 1326.73,1202.18 1327.32,1204.93 1327.9,1203.24 1328.49,1202.16 1329.08,1203.77 1329.66,1203.85 1330.25,1207.58 1330.84,1208.72 1331.42,1208.76 1332.01,1210.04 1332.6,1209.71 1333.18,1208.01 1333.77,1209.43 1334.35,1211.59 1334.94,1210 1335.53,1205.72 1336.11,1204.03 1336.7,1202.9 1337.29,1204.14 1337.87,1204.16 1338.46,1201.63 1339.05,1200.37 1339.63,1199.36 1340.22,1199.53 1340.8,1201.26 1341.39,1200.94 1341.98,1199.78 1342.56,1201.43 1343.15,1202.99 1343.74,1205.74 1344.32,1205.59 1344.91,1203.05 1345.5,1203.5 1346.08,1204.78 1346.67,1206.17 1347.26,1207.1 1347.84,1206.91 1348.43,1208.36 1349.01,1209.54 1349.6,1209.51 1350.19,1207.9 1350.77,1207.82 1351.36,1204.09 1351.95,1203.89 1352.53,1205.48 1353.12,1201.7 1353.71,1204.66 1354.29,1202.94 1354.88,1201.63 1355.47,1203.28 1356.05,1201.99 1356.64,1203.41 1357.22,1200.67 1357.81,1198.19 1358.4,1200.06 1358.98,1199.03 1359.57,1196.59 1360.16,1199.6 1360.74,1197.14 1361.33,1198.97 1361.92,1198.1 1362.5,1201.11 1363.09,1201.52 1363.68,1202.96 1364.26,1201.55 1364.85,1201.86 1365.43,1199.79 1366.02,1198.8 1366.61,1202.97 1367.19,1203.13 1367.78,1202.06 1368.37,1205.27 1368.95,1206.79 1369.54,1209.1 1370.13,1208.56 1370.71,1208.33 1371.3,1209.2 1371.88,1209.07 1372.47,1211.78 1373.06,1211.32 1373.64,1208.46 1374.23,1208.46 1374.82,1206.64 1375.4,1207.89 1375.99,1206.25 1376.58,1204.87 1377.16,1205.14 1377.75,1202.52 1378.34,1202.77 1378.92,1202.69 1379.51,1204.31 1380.09,1203.14 1380.68,1204.53 1381.27,1205.7 1381.85,1202.93 1382.44,1201.55 1383.03,1205.41 1383.61,1205.39 1384.2,1205.33 1384.79,1201.38 1385.37,1202.89 1385.96,1202.89 1386.55,1202.75 1387.13,1203.23 1387.72,1204.62 1388.3,1204.59 1388.89,1204.59 1389.48,1210.05 1390.06,1207.36 1390.65,1205.86 1391.24,1204.22 1391.82,1205.44 1392.41,1206.51 1393,1203.87 1393.58,1203.97 1394.17,1202.73 1394.75,1205.48 1395.34,1206.42 1395.93,1206.18 1396.51,1203.47 1397.1,1202.05 1397.69,1201.91 1398.27,1203.29 1398.86,1203.36 1399.45,1202.23 1400.03,1203.5 1400.62,1203.56 1401.21,1204.93 1401.79,1202.41 1402.38,1204.09 1402.96,1203.91 1403.55,1203.68 1404.14,1203.83 1404.72,1203.67 1405.31,1201.29 1405.9,1201.34 1406.48,1200.06 1407.07,1198.85 1407.66,1197.83 1408.24,1195.28 1408.83,1197.29 1409.42,1200.23 1410,1200.51 1410.59,1200.68 1411.17,1203.56 1411.76,1202.12 1412.35,1200.89 1412.93,1202.58 1413.52,1204.2 1414.11,1203.06 1414.69,1205.94 1415.28,1206.03 1415.87,1207.14 1416.45,1208.44 1417.04,1202.81 1417.63,1204.21 1418.21,1205.78 1418.8,1205.64 1419.38,1205.37 1419.97,1203.73 1420.56,1205.33 1421.14,1204.03 1421.73,1201.41 1422.32,1201.44 1422.9,1200 1423.49,1201.21 1424.08,1201.31 1424.66,1203.11 1425.25,1203.29 1425.83,1203.49 1426.42,1203.61 1427.01,1202.32 1427.59,1198.42 1428.18,1198.51 1428.77,1194.69 1429.35,1194.85 1429.94,1196.85 1430.53,1201.38 1431.11,1202.72 1431.7,1202.82 1432.29,1202.83 1432.87,1201.58 1433.46,1202.02 1434.04,1202.33 1434.63,1203.88 1435.22,1202.47 1435.8,1206.72 1436.39,1204.19 1436.98,1204.4 1437.56,1206.95 1438.15,1210.87 1438.74,1212 1439.32,1210.29 1439.91,1208.59 1440.5,1205.52 1441.08,1204.18 1441.67,1204.14 1442.25,1204.64 1442.84,1204.49 1443.43,1204.66 1444.01,1205.98 1444.6,1207.15 1445.19,1207.05 1445.77,1208.27 1446.36,1206.71 1446.95,1206.55 1447.53,1206.55 1448.12,1205.04 1448.7,1206.1 1449.29,1207.15 1449.88,1208.35 1450.46,1209.56 1451.05,1208.07 1451.64,1207.9 1452.22,1206.45 1452.81,1207.52 1453.4,1207.18 1453.98,1204.26 1454.57,1201.69 1455.16,1204.71 1455.74,1201.98 1456.33,1203.31 1456.91,1204.37 1457.5,1204.29 1458.09,1201.96 1458.67,1202.09 1459.26,1202.09 1459.85,1201.19 1460.43,1202.56 1461.02,1206.23 1461.61,1206.28 1462.19,1206.14 1462.78,1207.41 1463.37,1207.36 1463.95,1210.05 1464.54,1207.21 1465.12,1205.95 1465.71,1207.3 1466.3,1204.43 1466.88,1204.24 1467.47,1204.09 1468.06,1202.66 1468.64,1201.25 1469.23,1202.66 1469.82,1200.23 1470.4,1201.97 1470.99,1202.52 1471.57,1199.8 1472.16,1198.73 1472.75,1201.41 1473.33,1203.84 1473.92,1201.26 1474.51,1201.46 1475.09,1202.7 1475.68,1204.38 1476.27,1208.22 1476.85,1209.48 1477.44,1209.17 1478.03,1210.38 1478.61,1212.62 1479.2,1209.49 1479.78,1208.05 1480.37,1208 1480.96,1211.55 1481.54,1208.23 1482.13,1210.68 1482.72,1210.27 1483.3,1209.96 1483.89,1210.99 1484.48,1212.07 1485.06,1209.16 1485.65,1211.37 1486.24,1213.43 1486.82,1214.17 1487.41,1213.71 1487.99,1209.1 1488.58,1210.1 1489.17,1208.33 1489.75,1210.91 1490.34,1207.97 1490.93,1207.85 1491.51,1209 1492.1,1209.99 1492.69,1208.19 1493.27,1206.71 1493.86,1206.47 1494.45,1206.23 1495.03,1204.73 1495.62,1206.07 1496.2,1207.13 1496.79,1204.38 1497.38,1199.08 1497.96,1200.68 1498.55,1198.34 1499.14,1198.55 1499.72,1198.62 1500.31,1197.33 1500.9,1196.32 1501.48,1195.31 1502.07,1193.33 1502.65,1194.05 1503.24,1194.71 1503.83,1196.46 1504.41,1196.87 1505,1195.96 1505.59,1196.41 1506.17,1195.08 1506.76,1195.73 1507.35,1196.28 1507.93,1193.86 1508.52,1194.66 1509.11,1196.41 1509.69,1196.81 1510.28,1197.46 1510.86,1196.44 1511.45,1198.61 1512.04,1197.45 1512.62,1198.11 1513.21,1202.39 1513.8,1202.64 1514.38,1201.51 1514.97,1201.99 1515.56,1200.83 1516.14,1203.91 1516.73,1203.98 1517.32,1202.47 1517.9,1206.42 1518.49,1206.23 1519.07,1204.78 1519.66,1204.75 1520.25,1207.57 1520.83,1205.85 1521.42,1207.1 1522.01,1209.6 1522.59,1206.71 1523.18,1209.26 1523.77,1207.86 1524.35,1210.19 1524.94,1208.74 1525.52,1208.47 1526.11,1208.02 1526.7,1208.98 1527.28,1206.07 1527.87,1205.88 1528.46,1207.27 1529.04,1206.06 1529.63,1206 1530.22,1207.36 1530.8,1205.7 1531.39,1207.12 1531.98,1206.9 1532.56,1205.32 1533.15,1203.97 1533.73,1202.73 1534.32,1201.87 1534.91,1200.77 1535.49,1202.21 1536.08,1202.41 1536.67,1199.64 1537.25,1201.19 1537.84,1202.6 1538.43,1202.81 1539.01,1204.43 1539.6,1203.04 1540.19,1205.67 1540.77,1204.22 1541.36,1203.09 1541.94,1200.57 1542.53,1200.75 1543.12,1199.75 1543.7,1200.02 1544.29,1201.7 1544.88,1202.1 1545.46,1200.84 1546.05,1200.91 1546.64,1201.07 1547.22,1201.54 1547.81,1202.91 1548.4,1200.36 1548.98,1201.61 1549.57,1201.77 1550.15,1204.72 1550.74,1204.91 1551.33,1206.34 1551.91,1206.63 1552.5,1209.26 1553.09,1211.81 1553.67,1211.28 1554.26,1206.88 1554.85,1209.33 1555.43,1208.92 1556.02,1210.09 1556.6,1209.74 1557.19,1208.4 1557.78,1209.22 1558.36,1207.76 1558.95,1207.62 1559.54,1207.21 1560.12,1207.04 1560.71,1206.71 1561.3,1206.47 1561.88,1206.13 1562.47,1207.11 1563.06,1206.56 1563.64,1203.64 1564.23,1200.97 1564.81,1201.23 1565.4,1202.74 1565.99,1204.04 1566.57,1205.62 1567.16,1204.17 1567.75,1209.26 1568.33,1206.39 1568.92,1206.18 1569.51,1207.37 1570.09,1207.48 1570.68,1207.45 1571.27,1208.69 1571.85,1207.28 1572.44,1204.49 1573.02,1202.01 1573.61,1201.93 1574.2,1201.82 1574.78,1204.66 1575.37,1205.88 1575.96,1205.87 1576.54,1210.01 1577.13,1211.14 1577.72,1210.86 1578.3,1209.23 1578.89,1205.95 1579.47,1204.6 1580.06,1205.85 1580.65,1203.24 1581.23,1200.72 1581.82,1204.77 1582.41,1203.51 1582.99,1203.41 1583.58,1204.93 1584.17,1205.07 1584.75,1203.7 1585.34,1205.15 1585.93,1199.84 1586.51,1198.82 1587.1,1199.37 1587.68,1198.15 1588.27,1199.95 1588.86,1200.2 1589.44,1200.37 1590.03,1199.14 1590.62,1199.18 1591.2,1199.54 1591.79,1202.42 1592.38,1200.15 1592.96,1201.78 1593.55,1203.38 1594.14,1206.43 1594.72,1204.87 1595.31,1203.35 1595.89,1204.63 1596.48,1205.97 1597.07,1207.15 1597.65,1207.24 1598.24,1208.33 1598.83,1208.45 1599.41,1209.53 1600,1209.55 1600.59,1209.22 1601.17,1208.77 1601.76,1208.21 1602.34,1206.94 1602.93,1203.96 1603.52,1202.58 1604.1,1205.54 1604.69,1205.41 1605.28,1200.01 1605.86,1201.5 1606.45,1204.21 1607.04,1209.48 1607.62,1207.84 1608.21,1206.3 1608.8,1204.91 1609.38,1204.85 1609.97,1199.53 1610.55,1201.37 1611.14,1201.12 1611.73,1202.42 1612.31,1203.73 1612.9,1206.07 1613.49,1205.78 1614.07,1204.3 1614.66,1203.08 1615.25,1203.24 1615.83,1201.75 1616.42,1203.1 1617.01,1201.71 1617.59,1201.67 1618.18,1203.27 1618.76,1203.58 1619.35,1205 1619.94,1206.2 1620.52,1206.36 1621.11,1206.14 1621.7,1204.87 1622.28,1204.47 1622.87,1205.96 1623.46,1206.14 1624.04,1202.09 1624.63,1202.46 1625.22,1204.92 1625.8,1207.3 1626.39,1205.86 1626.97,1206.96 1627.56,1204.24 1628.15,1203.08 1628.73,1201.78 1629.32,1203.41 1629.91,1206.13 1630.49,1207.39 1631.08,1207.15 1631.67,1206.77 1632.25,1203.99 1632.84,1202.61 1633.42,1201.3 1634.01,1203.98 1634.6,1202.4 1635.18,1204.01 1635.77,1206.67 1636.36,1205.41 1636.94,1206.64 1637.53,1203.8 1638.12,1201.2 1638.7,1198.81 1639.29,1199.22 1639.88,1200.89 1640.46,1203.53 1641.05,1203.58 1641.63,1202.51 1642.22,1203.94 1642.81,1204.03 1643.39,1206.46 1643.98,1206.36 1644.57,1204.9 1645.15,1204.75 1645.74,1201.89 1646.33,1201.06 1646.91,1201.22 1647.5,1204.17 1648.09,1206.85 1648.67,1208.2 1649.26,1206.66 1649.84,1207.74 1650.43,1207.42 1651.02,1205.86 1651.6,1202.79 1652.19,1202.69 1652.78,1202.64 1653.36,1203.77 1653.95,1206.59 1654.54,1206.41 1655.12,1206.3 1655.71,1204.91 1656.29,1203.86 1656.88,1204 1657.47,1206.7 1658.05,1208.8 1658.64,1210.92 1659.23,1206.66 1659.81,1205.2 1660.4,1203.9 1660.99,1205.32 1661.57,1205.31 1662.16,1202.29 1662.75,1203.69 1663.33,1205.07 1663.92,1206.29 1664.5,1206.6 1665.09,1206.4 1665.68,1205.16 1666.26,1203.77 1666.85,1205.19 1667.44,1206.54 1668.02,1203.59 1668.61,1206.19 1669.2,1206.09 1669.78,1208.39 1670.37,1209.36 1670.96,1206.61 1671.54,1209.29 1672.13,1207.85 1672.71,1208.88 1673.3,1210.11 1673.89,1207.13 1674.47,1208.39 1675.06,1206.95 1675.65,1206.86 1676.23,1205.44 1676.82,1208.05 1677.41,1207.85 1677.99,1203.75 1678.58,1202.67 1679.17,1200.14 1679.75,1200.3 1680.34,1200.27 1680.92,1202.11 1681.51,1203.78 1682.1,1205.17 1682.68,1202.44 1683.27,1202.27 1683.86,1202.5 1684.44,1202.63 1685.03,1202.69 1685.62,1201.61 1686.2,1204.58 1686.79,1206.19 1687.37,1205.9 1687.96,1206.08 1688.55,1202.27 1689.13,1203.76 1689.72,1202.32 1690.31,1201.04 1690.89,1199.94 1691.48,1202.83 1692.07,1201.47 1692.65,1201.8 1693.24,1204.53 1693.83,1203.03 1694.41,1204.38 1695,1204.49 1695.58,1204.51 1696.17,1205.86 1696.76,1205.8 1697.34,1206.13 1697.93,1204.93 1698.52,1206.02 1699.1,1205.72 1699.69,1200.64 1700.28,1200.86 1700.86,1199.87 1701.45,1202.7 1702.04,1206.79 1702.62,1208 1703.21,1207.65 1703.79,1208.94 1704.38,1209.73 1704.97,1209.31 1705.55,1207.59 1706.14,1208.75 1706.73,1207.28 1707.31,1205.66 1707.9,1206.81 1708.49,1205.06 1709.07,1203.46 1709.66,1205.07 1710.24,1206.23 1710.83,1205.27 1711.42,1206.41 1712,1207.76 1712.59,1207.46 1713.18,1205.98 1713.76,1205.9 1714.35,1205.86 1714.94,1208.39 1715.52,1209.73 1716.11,1209.33 1716.7,1210.43 1717.28,1211.17 1717.87,1209.16 1718.45,1209.12 1719.04,1207.3 1719.63,1209.63 1720.21,1206.69 1720.8,1206.82 1721.39,1206.55 1721.97,1205.3 1722.56,1204.02 1723.15,1203.7 1723.73,1200.94 1724.32,1198.53 1724.91,1199.94 1725.49,1198.65 1726.08,1198.92 1726.66,1199.12 1727.25,1203.35 1727.84,1202.29 1728.42,1197.11 1729.01,1198.84 1729.6,1199.31 1730.18,1199.47 1730.77,1199.44 1731.36,1198.13 1731.94,1197.35 1732.53,1197.9 1733.11,1198.38 1733.7,1199.89 1734.29,1201.53 1734.87,1204.27 1735.46,1204.15 1736.05,1204.14 1736.63,1208.34 1737.22,1210.86 1737.81,1210.63 1738.39,1210.3 1738.98,1208.62 1739.57,1205.78 1740.15,1207.1 1740.74,1209.4 1741.32,1209.31 1741.91,1206.22 1742.5,1207.59 1743.08,1206.07 1743.67,1204.83 1744.26,1200.97 1744.84,1201.21 1745.43,1202.58 1746.02,1203.14 1746.6,1204.48 1747.19,1203.09 1747.78,1200.59 1748.36,1198.15 1748.95,1197.29 1749.53,1200.42 1750.12,1199.38 1750.71,1198.41 1751.29,1196.13 1751.88,1195.19 1752.47,1197.25 1753.05,1196.42 1753.64,1196.77 1754.23,1200.89 1754.81,1200.92 1755.4,1198.57 1755.99,1196.48 1756.57,1196.96 1757.16,1197.27 1757.74,1195.09 1758.33,1194.25 1758.92,1194.63 1759.5,1193.93 1760.09,1195.87 1760.68,1196.41 1761.26,1198.04 1761.85,1199.79 1762.44,1201.46 1763.02,1200.51 1763.61,1203.16 1764.19,1201.85 1764.78,1201.99 1765.37,1203.72 1765.95,1203.61 1766.54,1206.51 1767.13,1205.07 1767.71,1204.89 1768.3,1205.93 1768.89,1205.75 1769.47,1205.85 1770.06,1208.31 1770.65,1207.95 1771.23,1206.33 1771.82,1204.75 1772.4,1206.08 1772.99,1205.93 1773.58,1207.11 1774.16,1206.87 1774.75,1206.63 1775.34,1208.19 1775.92,1202.61 1776.51,1203.97 1777.1,1203.81 1777.68,1203.91 1778.27,1202.54 1778.86,1202.56 1779.44,1199.82 1780.03,1200.06 1780.61,1200.49 1781.2,1199.45 1781.79,1202.62 1782.37,1202.69 1782.96,1202.79 1783.55,1202.8 1784.13,1202.58 1784.72,1202.79 1785.31,1202.89 1785.89,1204.43 1786.48,1207.06 1787.06,1205.21 1787.65,1202.77 1788.24,1204.33 1788.82,1207.13 1789.41,1206.97 1790,1206.62 1790.58,1206.65 1791.17,1205.12 1791.76,1203.8 1792.34,1202.43 1792.93,1202.39 1793.52,1204.97 1794.1,1205.18 1794.69,1203.61 1795.27,1203.63 1795.86,1203.5 1796.45,1202.11 1797.03,1204.62 1797.62,1203.23 1798.21,1201.99 1798.79,1200.75 1799.38,1200.98 1799.97,1198.53 1800.55,1201.47 1801.14,1203.03 1801.73,1201.85 1802.31,1200.54 1802.9,1200.73 1803.48,1203.77 1804.07,1206.87 1804.66,1200.07 1805.24,1200.16 1805.83,1201.74 1806.42,1204.75 1807,1204.73 1807.59,1203.36 1808.18,1203.34 1808.76,1204.89 1809.35,1207.56 1809.94,1208.9 1810.52,1207.37 1811.11,1208.56 1811.69,1206.91 1812.28,1206.62 1812.87,1206.61 1813.45,1206.57 1814.04,1202.57 1814.63,1204 1815.21,1205.65 1815.8,1205.79 1816.39,1205.75 1816.97,1208.25 1817.56,1210.59 1818.14,1210.31 1818.73,1209.98 1819.32,1212.37 1819.9,1210.28 1820.49,1210.07 1821.08,1212.18 1821.66,1210.83 1822.25,1210.67 1822.84,1209.11 1823.42,1210.41 1824.01,1210.12 1824.6,1211.08 1825.18,1213.54 1825.77,1212.84 1826.35,1212.47 1826.94,1214.64 1827.53,1214.19 1828.11,1213.7 1828.7,1211.73 1829.29,1211.29 1829.87,1210.75 1830.46,1210.39 1831.05,1206.06 1831.63,1202.09 1832.22,1202.21 1832.81,1202.43 1833.39,1202.95 1833.98,1202.82 1834.56,1204.28 1835.15,1206.74 1835.74,1207.89 1836.32,1210.41 1836.91,1212.84 1837.5,1211.14 1838.08,1211.94 1838.67,1210.29 1839.26,1205.76 1839.84,1204.12 1840.43,1203.99 1841.01,1203.89 1841.6,1205.01 1842.19,1203.5 1842.77,1202.36 1843.36,1202.68 1843.95,1202.7 1844.53,1201.81 1845.12,1202.24 1845.71,1201.03 1846.29,1201.18 1846.88,1203.93 1847.47,1203.69 1848.05,1202.45 1848.64,1203.83 1849.22,1200.04 1849.81,1198.78 1850.4,1200.36 1850.98,1199.19 1851.57,1199.47 1852.16,1197.16 1852.74,1197.42 1853.33,1199.23 1853.92,1199.35 1854.5,1198.49 1855.09,1200.26 1855.68,1200.42 1856.26,1203.22 1856.85,1203.18 1857.43,1200.32 1858.02,1200.28 1858.61,1203.08 1859.19,1203.09 1859.78,1204.5 1860.37,1207.43 1860.95,1212.67 1861.54,1214.82 1862.13,1218.15 1862.71,1221.07 1863.3,1221.49 1863.88,1215.56 1864.47,1213.58 1865.06,1211.78 1865.64,1210.22 1866.23,1210.99 1866.82,1210.55 1867.4,1206.77 1867.99,1205.14 1868.58,1199.72 1869.16,1200.1 1869.75,1200.25 1870.34,1200.62 1870.92,1199.45 1871.51,1200.76 1872.09,1202.46 1872.68,1199.95 1873.27,1201.62 1873.85,1198.94 1874.44,1200.84 1875.03,1202.43 1875.61,1200.01 1876.2,1202.87 1876.79,1202.84 1877.37,1202.64 1877.96,1204.09 1878.55,1204.32 1879.13,1208.05 1879.72,1209.2 1880.3,1207.74 1880.89,1206.51 1881.48,1206.6 1882.06,1206.36 1882.65,1209.19 1883.24,1207.24 1883.82,1205.81 1884.41,1204.38 1885,1208.19 1885.58,1210.81 1886.17,1209 1886.76,1208.9 1887.34,1204.72 1887.93,1203.08 1888.51,1201.79 1889.1,1200.41 1889.69,1202.01 1890.27,1201.96 1890.86,1205.94 1891.45,1204.52 1892.03,1205.84 1892.62,1205.71 1893.21,1203.16 1893.79,1200.67 1894.38,1200.73 1894.96,1202.19 1895.55,1202.16 1896.14,1203.47 1896.72,1204.89 1897.31,1205.04 1897.9,1204.96 1898.48,1202.46 1899.07,1206.55 1899.66,1206.53 1900.24,1210.3 1900.83,1209.96 1901.42,1207.04 1902,1209.62 1902.59,1208.21 1903.17,1207.79 1903.76,1206.45 1904.35,1206.28 1904.93,1204.93 1905.52,1200.51 1906.11,1202.09 1906.69,1201.11 1907.28,1202.68 1907.87,1201 1908.45,1201.14 1909.04,1200.22 1909.63,1199.14 1910.21,1200.7 1910.8,1200.63 1911.38,1199.68 1911.97,1198.31 1912.56,1196.05 1913.14,1193.86 1913.73,1195.84 1914.32,1197.67 1914.9,1195.22 1915.49,1195.57 1916.08,1197.21 1916.66,1198.8 1917.25,1199.06 1917.83,1201.97 1918.42,1204.89 1919.01,1204.72 1919.59,1203.2 1920.18,1203.34 1920.77,1206.18 1921.35,1208.81 1921.94,1208.5 1922.53,1207.03 1923.11,1205.51 1923.7,1208.25 1924.29,1208.06 1924.87,1208.96 1925.46,1209.88 1926.04,1212.45 1926.63,1211.7 1927.22,1212.72 1927.8,1212.15 1928.39,1214.5 1928.98,1212.67 1929.56,1212.31 1930.15,1214.28 1930.74,1209.42 1931.32,1209.09 1931.91,1204.76 1932.5,1205.71 1933.08,1204.3 1933.67,1205.89 1934.25,1205.72 1934.84,1209.79 1935.43,1206.69 1936.01,1205.05 1936.6,1202.36 1937.19,1202.39 1937.77,1201.01 1938.36,1202.64 1938.95,1205.47 1939.53,1206.45 1940.12,1204.99 1940.71,1204.94 1941.29,1205.05 1941.88,1206.16 1942.46,1206.15 1943.05,1205.05 1943.64,1204.95 1944.22,1204.8 1944.81,1206.04 1945.4,1203.67 1945.98,1202.45 1946.57,1204.01 1947.16,1203.82 1947.74,1203.5 1948.33,1202.28 1948.91,1199.72 1949.5,1200.01 1950.09,1198.93 1950.67,1199.15 1951.26,1200.64 1951.85,1200.66 1952.43,1204.66 1953.02,1207.21 1953.61,1207.29 1954.19,1206.17 1954.78,1203.5 1955.37,1206.28 1955.95,1207.44 1956.54,1205.73 1957.12,1205.93 1957.71,1203.32 1958.3,1203.42 1958.88,1203.34 1959.47,1203.37 1960.06,1203.56 1960.64,1206.35 1961.23,1206.16 1961.82,1207.42 1962.4,1209.86 1962.99,1208.19 1963.58,1210.33 1964.16,1211.19 1964.75,1214.72 1965.33,1214.05 1965.92,1212.1 1966.51,1211.73 1967.09,1211.27 1967.68,1208.4 1968.27,1204.12 1968.85,1205.21 1969.44,1204.99 1970.03,1203.52 1970.61,1203.57 1971.2,1206.3 1971.78,1205.97 1972.37,1206.99 1972.96,1208 1973.54,1207.72 1974.13,1207.53 1974.72,1208.23 1975.3,1207.9 1975.89,1205.41 1976.48,1204.2 1977.06,1205.22 1977.65,1203.87 1978.24,1202.71 1978.82,1204.22 1979.41,1207.08 1979.99,1205.69 1980.58,1207.15 1981.17,1204.29 1981.75,1204.54 1982.34,1203.02 1982.93,1201.64 1983.51,1202.21 1984.1,1199.76 1984.69,1196.09 1985.27,1199.34 1985.86,1198.61 1986.45,1200.09 1987.03,1201.71 1987.62,1201.93 1988.2,1201.86 1988.79,1200.75 1989.38,1198.47 1989.96,1200.42 1990.55,1200.78 1991.14,1200.93 1991.72,1201.12 1992.31,1197.46 1992.9,1198.09 1993.48,1198.53 1994.07,1198.95 1994.65,1199.22 1995.24,1199.27 1995.83,1198.12 1996.41,1200.03 1997,1198.79 1997.59,1197.79 1998.17,1198.32 1998.76,1198.49 1999.35,1200.22 1999.93,1201.77 2000.52,1204.73 2001.11,1202.16 2001.69,1203.35 2002.28,1204.65 2002.86,1204.55 2003.45,1204.4 2004.04,1206.71 2004.62,1206.79 2005.21,1203.87 2005.8,1205.41 2006.38,1206.77 2006.97,1208.04 2007.56,1210.13 2008.14,1215.2 2008.73,1214.62 2009.32,1212.83 2009.9,1213.52 2010.49,1212.64 2011.07,1212.24 2011.66,1213.48 2012.25,1213 2012.83,1212.43 2013.42,1211.99 2014.01,1210.51 2014.59,1203.79 2015.18,1203.88 2015.77,1203.72 2016.35,1201.05 2016.94,1201.34 2017.53,1202.84 2018.11,1201.68 2018.7,1201.83 2019.28,1201.93 2019.87,1205.68 2020.46,1202.8 2021.04,1202.45 2021.63,1202.83 2022.22,1204.26 2022.8,1205.59 2023.39,1203.14 2023.98,1200.69 2024.56,1202.19 2025.15,1202.47 2025.73,1202.44 2026.32,1203.91 2026.91,1203.98 2027.49,1204.05 2028.08,1205.32 2028.67,1203.65 2029.25,1204.9 2029.84,1204.88 2030.43,1204.79 2031.01,1204.65 2031.6,1203.49 2032.19,1206.43 2032.77,1206.33 2033.36,1206.14 2033.94,1205.15 2034.53,1207.69 2035.12,1199.62 2035.7,1197.35 2036.29,1197.41 2036.88,1196.36 2037.46,1195.38 2038.05,1193.36 2038.64,1195.4 2039.22,1194.29 2039.81,1193.64 2040.4,1199.61 2040.98,1199.78 2041.57,1200.05 2042.15,1201.68 2042.74,1203.15 2043.33,1203.1 2043.91,1203.11 2044.5,1203.34 2045.09,1202 2045.67,1202.21 2046.26,1203.44 2046.85,1201.04 2047.43,1201.27 2048.02,1203.01 2048.6,1205.75 2049.19,1204.54 2049.78,1205.91 2050.36,1206.94 2050.95,1207.93 2051.54,1207.61 2052.12,1208.72 2052.71,1204.21 2053.3,1203 2053.88,1204.48 2054.47,1205.96 2055.06,1205.73 2055.64,1207.16 2056.23,1209.68 2056.81,1209.43 2057.4,1206.58 2057.99,1205.15 2058.57,1205.01 2059.16,1202.58 2059.75,1203.89 2060.33,1202.65 2060.92,1202.79 2061.51,1201.41 2062.09,1203.03 2062.68,1201.57 2063.27,1203.13 2063.85,1202.93 2064.44,1201.68 2065.02,1200.56 2065.61,1198.09 2066.2,1199.89 2066.78,1201.42 2067.37,1202.81 2067.96,1208.08 2068.54,1206.54 2069.13,1207.82 2069.72,1209.02 2070.3,1206.09 2070.89,1210.06 2071.48,1212.53 2072.06,1213.5 2072.65,1211.68 2073.23,1212.48 2073.82,1210.7 2074.41,1207.89 2074.99,1207.53 2075.58,1208.62 2076.17,1210.65 2076.75,1210.18 2077.34,1209.88 2077.93,1209.43 2078.51,1210.74 2079.1,1210.36 2079.68,1207.22 2080.27,1207.02 2080.86,1206.86 2081.44,1206.69 2082.03,1204.13 2082.62,1204.19 2083.2,1205.47 2083.79,1205.26 2084.38,1204.79 2084.96,1204.64 2085.55,1203.27 2086.14,1204.35 2086.72,1203.04 2087.31,1201.79 2087.89,1198.94 2088.48,1199.09 2089.07,1195.53 2089.65,1197.52 2090.24,1199.23 2090.83,1199.75 2091.41,1199.83 2092,1201.27 2092.59,1199.94 2093.17,1201.68 2093.76,1198.05 2094.35,1198.32 2094.93,1197.45 2095.52,1199.19 2096.1,1199.6 2096.69,1201.25 2097.28,1201.61 2097.86,1200.35 2098.45,1199.44 2099.04,1202.5 2099.62,1203.71 2100.21,1203.56 2100.8,1204.9 2101.38,1203.59 2101.97,1201.24 2102.55,1201.57 2103.14,1201.78 2103.73,1202.05 2104.31,1199.66 2104.9,1202.43 2105.49,1203.9 2106.07,1205.38 2106.66,1202.91 2107.25,1200.58 2107.83,1200.99 2108.42,1200.09 2109.01,1200.22 2109.59,1197.93 2110.18,1197 2110.76,1198.87 2111.35,1199.37 2111.94,1201.31 2112.52,1201.46 2113.11,1203.07 2113.7,1205.71 2114.28,1205.79 2114.87,1204.41 2115.46,1204.25 2116.04,1202.82 2116.63,1203.06 2117.22,1204.38 2117.8,1207.21 2118.39,1207.23 2118.97,1207.18 2119.56,1211.12 2120.15,1211.09 2120.73,1210.75 2121.32,1208.95 2121.91,1207.3 2122.49,1208.37 2123.08,1205.86 2123.67,1205.57 2124.25,1205.34 2124.84,1203.72 2125.42,1203.6 2126.01,1202.24 2126.6,1201.11 2127.18,1202.61 2127.77,1202.51 2128.36,1204.13 2128.94,1205.22 2129.53,1206.67 2130.12,1206.71 2130.7,1207.79 2131.29,1208.8 2131.88,1208.43 2132.46,1210.88 2133.05,1211.78 2133.63,1211.65 2134.22,1211.28 2134.81,1212.5 2135.39,1211.98 2135.98,1210.33 2136.57,1211.15 2137.15,1210.67 2137.74,1211.32 2138.33,1211.11 2138.91,1210.7 2139.5,1207.95 2140.09,1206.61 2140.67,1206.45 2141.26,1206.19 2141.84,1203.19 2142.43,1203.38 2143.02,1200.65 2143.6,1198.24 2144.19,1199.98 2144.78,1200.26 2145.36,1199.2 2145.95,1198.22 2146.54,1199.92 2147.12,1200 2147.71,1201.3 2148.3,1203.88 2148.88,1205.05 2149.47,1205.14 2150.05,1202.52 2150.64,1201.05 2151.23,1204.05 2151.81,1204.12 2152.4,1202.78 2152.99,1206.75 2153.57,1207.89 2154.16,1207.7 2154.75,1211.55 2155.33,1210.96 2155.92,1208.97 2156.5,1206.21 2157.09,1203.66 2157.68,1204.89 2158.26,1201.04 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M986.025 1204.78 L986.612 1204.78 L987.198 1204.78 L987.785 1204.78 L988.371 1204.78 L988.957 1204.78 L989.544 1204.78 L990.13 1204.78 L990.717 1204.78 L991.303 1204.78 L991.889 1204.78 L992.476 1204.78 L993.062 1204.78 L993.649 1204.78 L994.235 1204.78 L994.822 1204.78 L995.408 1204.78 L995.994 1204.78 L996.581 1204.78 L997.167 1204.78 L997.754 1204.78 L998.34 1204.78 L998.926 1204.78 L999.513 1204.78 L1000.1 1204.78 L1000.69 1204.78 L1001.27 1204.78 L1001.86 1204.78 L1002.44 1204.78 L1003.03 1204.78 L1003.62 1204.78 L1004.2 1204.78 L1004.79 1204.78 L1005.38 1204.78 L1005.96 1204.78 L1006.55 1204.78 L1007.14 1204.78 L1007.72 1204.78 L1008.31 1204.78 L1008.9 1204.78 L1009.48 1204.78 L1010.07 1204.78 L1010.65 1204.78 L1011.24 1204.78 L1011.83 1204.78 L1012.41 1204.78 L1013 1204.78 L1013.59 1204.78 L1014.17 1204.78 L1014.76 1204.78 L1015.35 1204.78 L1015.93 1204.78 L1016.52 1204.78 L1017.11 1204.78 L1017.69 1204.78 L1018.28 1204.78 L1018.86 1204.78 L1019.45 1204.78 L1020.04 1204.78 L1020.62 1204.78 L1021.21 1204.78 L1021.8 1204.78 L1022.38 1204.78 L1022.97 1204.78 L1023.56 1204.78 L1024.14 1204.78 L1024.73 1204.78 L1025.32 1204.78 L1025.9 1204.78 L1026.49 1204.78 L1027.07 1204.78 L1027.66 1204.78 L1028.25 1204.78 L1028.83 1204.78 L1029.42 1204.78 L1030.01 1204.78 L1030.59 1204.78 L1031.18 1204.78 L1031.77 1204.78 L1032.35 1204.78 L1032.94 1204.78 L1033.52 1204.78 L1034.11 1204.78 L1034.7 1204.78 L1035.28 1204.78 L1035.87 1204.78 L1036.46 1204.78 L1037.04 1204.78 L1037.63 1204.78 L1038.22 1204.78 L1038.8 1204.78 L1039.39 1204.78 L1039.98 1204.78 L1040.56 1204.78 L1041.15 1204.78 L1041.73 1204.78 L1042.32 1204.78 L1042.91 1204.78 L1043.49 1204.78 L1044.08 1204.78 L1044.67 1204.78 L1045.25 1204.78 L1045.84 1204.78 L1046.43 1204.78 L1047.01 1204.78 L1047.6 1204.78 L1048.19 1204.78 L1048.77 1204.78 L1049.36 1204.78 L1049.94 1204.78 L1050.53 1204.78 L1051.12 1204.78 L1051.7 1204.78 L1052.29 1204.78 L1052.88 1204.78 L1053.46 1204.78 L1054.05 1204.78 L1054.64 1204.78 L1055.22 1204.78 L1055.81 1204.78 L1056.39 1204.78 L1056.98 1204.78 L1057.57 1204.78 L1058.15 1204.78 L1058.74 1204.78 L1059.33 1204.78 L1059.91 1204.78 L1060.5 1204.78 L1061.09 1204.78 L1061.67 1204.78 L1062.26 1204.78 L1062.85 1204.78 L1063.43 1204.78 L1064.02 1204.78 L1064.6 1204.78 L1065.19 1204.78 L1065.78 1204.78 L1066.36 1204.78 L1066.95 1204.78 L1067.54 1204.78 L1068.12 1204.78 L1068.71 1204.78 L1069.3 1204.78 L1069.88 1204.78 L1070.47 1204.78 L1071.06 1204.78 L1071.64 1204.78 L1072.23 1204.78 L1072.81 1204.78 L1073.4 1204.78 L1073.99 1204.78 L1074.57 1204.78 L1075.16 1204.78 L1075.75 1204.78 L1076.33 1204.78 L1076.92 1204.78 L1077.51 1204.78 L1078.09 1204.78 L1078.68 1204.78 L1079.26 1204.78 L1079.85 1204.78 L1080.44 1204.78 L1081.02 1204.78 L1081.61 1204.78 L1082.2 1204.78 L1082.78 1204.78 L1083.37 1204.78 L1083.96 1204.78 L1084.54 1204.78 L1085.13 1204.78 L1085.72 1204.78 L1086.3 1204.78 L1086.89 1204.78 L1087.47 1204.78 L1088.06 1204.78 L1088.65 1204.78 L1089.23 1204.78 L1089.82 1204.78 L1090.41 1204.78 L1090.99 1204.78 L1091.58 1204.78 L1092.17 1204.78 L1092.75 1204.78 L1093.34 1204.78 L1093.93 1204.78 L1094.51 1204.78 L1095.1 1204.78 L1095.68 1204.78 L1096.27 1204.78 L1096.86 1204.78 L1097.44 1204.78 L1098.03 1204.78 L1098.62 1204.78 L1099.2 1204.78 L1099.79 1204.78 L1100.38 1204.78 L1100.96 1204.78 L1101.55 1204.78 L1102.14 1204.78 L1102.72 1204.78 L1103.31 1204.78 L1103.89 1204.78 L1104.48 1204.78 L1105.07 1204.78 L1105.65 1204.78 L1106.24 1204.78 L1106.83 1204.78 L1107.41 1204.78 L1108 1204.78 L1108.59 1204.78 L1109.17 1204.78 L1109.76 1204.78 L1110.34 1204.78 L1110.93 1204.78 L1111.52 1204.78 L1112.1 1204.78 L1112.69 1204.78 L1113.28 1204.78 L1113.86 1204.78 L1114.45 1204.78 L1115.04 1204.78 L1115.62 1204.78 L1116.21 1204.78 L1116.8 1204.78 L1117.38 1204.78 L1117.97 1204.78 L1118.55 1204.78 L1119.14 1204.78 L1119.73 1204.78 L1120.31 1204.78 L1120.9 1204.78 L1121.49 1204.78 L1122.07 1204.78 L1122.66 1204.78 L1123.25 1204.78 L1123.83 1204.78 L1124.42 1204.78 L1125.01 1204.78 L1125.59 1204.78 L1126.18 1204.78 L1126.76 1204.78 L1127.35 1204.78 L1127.94 1204.78 L1128.52 1204.78 L1129.11 1204.78 L1129.7 1204.78 L1130.28 1204.78 L1130.87 1204.78 L1131.46 1204.78 L1132.04 1204.78 L1132.63 1204.78 L1133.21 1204.78 L1133.8 1204.78 L1134.39 1204.78 L1134.97 1204.78 L1135.56 1204.78 L1136.15 1204.78 L1136.73 1204.78 L1137.32 1204.78 L1137.91 1204.78 L1138.49 1204.78 L1139.08 1204.78 L1139.67 1204.78 L1140.25 1204.78 L1140.84 1204.78 L1141.42 1204.78 L1142.01 1204.78 L1142.6 1204.78 L1143.18 1204.78 L1143.77 1204.78 L1144.36 1204.78 L1144.94 1204.78 L1145.53 1204.78 L1146.12 1204.78 L1146.7 1204.78 L1147.29 1204.78 L1147.88 1204.78 L1148.46 1204.78 L1149.05 1204.78 L1149.63 1204.78 L1150.22 1204.78 L1150.81 1204.78 L1151.39 1204.78 L1151.98 1204.78 L1152.57 1204.78 L1153.15 1204.78 L1153.74 1204.78 L1154.33 1204.78 L1154.91 1204.78 L1155.5 1204.78 L1156.09 1204.78 L1156.67 1204.78 L1157.26 1204.78 L1157.84 1204.78 L1158.43 1204.78 L1159.02 1204.78 L1159.6 1204.78 L1160.19 1204.78 L1160.78 1204.78 L1161.36 1204.78 L1161.95 1204.78 L1162.54 1204.78 L1163.12 1204.78 L1163.71 1204.78 L1164.29 1204.78 L1164.88 1204.78 L1165.47 1204.78 L1166.05 1204.78 L1166.64 1204.78 L1167.23 1204.78 L1167.81 1204.78 L1168.4 1204.78 L1168.99 1204.78 L1169.57 1204.78 L1170.16 1204.78 L1170.75 1204.78 L1171.33 1204.78 L1171.92 1204.78 L1172.5 1204.78 L1173.09 1204.78 L1173.68 1204.78 L1174.26 1204.78 L1174.85 1204.78 L1175.44 1204.78 L1176.02 1204.78 L1176.61 1204.78 L1177.2 1204.78 L1177.78 1204.78 L1178.37 1204.78 L1178.96 1204.78 L1179.54 1204.78 L1180.13 1204.78 L1180.71 1204.78 L1181.3 1204.78 L1181.89 1204.78 L1182.47 1204.78 L1183.06 1204.78 L1183.65 1204.78 L1184.23 1204.78 L1184.82 1204.78 L1185.41 1204.78 L1185.99 1204.78 L1186.58 1204.78 L1187.16 1204.78 L1187.75 1204.78 L1188.34 1204.78 L1188.92 1204.78 L1189.51 1204.78 L1190.1 1204.78 L1190.68 1204.78 L1191.27 1204.78 L1191.86 1204.78 L1192.44 1204.78 L1193.03 1204.78 L1193.62 1204.78 L1194.2 1204.78 L1194.79 1204.78 L1195.37 1204.78 L1195.96 1204.78 L1196.55 1204.78 L1197.13 1204.78 L1197.72 1204.78 L1198.31 1204.78 L1198.89 1204.78 L1199.48 1204.78 L1200.07 1204.78 L1200.65 1204.78 L1201.24 1204.78 L1201.83 1204.78 L1202.41 1204.78 L1203 1204.78 L1203.58 1204.78 L1204.17 1204.78 L1204.76 1204.78 L1205.34 1204.78 L1205.93 1204.78 L1206.52 1204.78 L1207.1 1204.78 L1207.69 1204.78 L1208.28 1204.78 L1208.86 1204.78 L1209.45 1204.78 L1210.03 1204.78 L1210.62 1204.78 L1211.21 1204.78 L1211.79 1204.78 L1212.38 1204.78 L1212.97 1204.78 L1213.55 1204.78 L1214.14 1204.78 L1214.73 1204.78 L1215.31 1204.78 L1215.9 1204.78 L1216.49 1204.78 L1217.07 1204.78 L1217.66 1204.78 L1218.24 1204.78 L1218.83 1204.78 L1219.42 1204.78 L1220 1204.78 L1220.59 1204.78 L1221.18 1204.78 L1221.76 1204.78 L1222.35 1204.78 L1222.94 1204.78 L1223.52 1204.78 L1224.11 1204.78 L1224.7 1204.78 L1225.28 1204.78 L1225.87 1204.78 L1226.45 1204.78 L1227.04 1204.78 L1227.63 1204.78 L1228.21 1204.78 L1228.8 1204.78 L1229.39 1204.78 L1229.97 1204.78 L1230.56 1204.78 L1231.15 1204.78 L1231.73 1204.78 L1232.32 1204.78 L1232.91 1204.78 L1233.49 1204.78 L1234.08 1204.78 L1234.66 1204.78 L1235.25 1204.78 L1235.84 1204.78 L1236.42 1204.78 L1237.01 1204.78 L1237.6 1204.78 L1238.18 1204.78 L1238.77 1204.78 L1239.36 1204.78 L1239.94 1204.78 L1240.53 1204.78 L1241.11 1204.78 L1241.7 1204.78 L1242.29 1204.78 L1242.87 1204.78 L1243.46 1204.78 L1244.05 1204.78 L1244.63 1204.78 L1245.22 1204.78 L1245.81 1204.78 L1246.39 1204.78 L1246.98 1204.78 L1247.57 1204.78 L1248.15 1204.78 L1248.74 1204.78 L1249.32 1204.78 L1249.91 1204.78 L1250.5 1204.78 L1251.08 1204.78 L1251.67 1204.78 L1252.26 1204.78 L1252.84 1204.78 L1253.43 1204.78 L1254.02 1204.78 L1254.6 1204.78 L1255.19 1204.78 L1255.78 1204.78 L1256.36 1204.78 L1256.95 1204.78 L1257.53 1204.78 L1258.12 1204.78 L1258.71 1204.78 L1259.29 1204.78 L1259.88 1204.78 L1260.47 1204.78 L1261.05 1204.78 L1261.64 1204.78 L1262.23 1204.78 L1262.81 1204.78 L1263.4 1204.78 L1263.98 1204.78 L1264.57 1204.78 L1265.16 1204.78 L1265.74 1204.78 L1266.33 1204.78 L1266.92 1204.78 L1267.5 1204.78 L1268.09 1204.78 L1268.68 1204.78 L1269.26 1204.78 L1269.85 1204.78 L1270.44 1204.78 L1271.02 1204.78 L1271.61 1204.78 L1272.19 1204.78 L1272.78 1204.78 L1273.37 1204.78 L1273.95 1204.78 L1274.54 1204.78 L1275.13 1204.78 L1275.71 1204.78 L1276.3 1204.78 L1276.89 1204.78 L1277.47 1204.78 L1278.06 1204.78 L1278.65 1204.78 L1279.23 1204.78 L1279.82 1204.78 L1280.4 1204.78 L1280.99 1204.78 L1281.58 1204.78 L1282.16 1204.78 L1282.75 1204.78 L1283.34 1204.78 L1283.92 1204.78 L1284.51 1204.78 L1285.1 1204.78 L1285.68 1204.78 L1286.27 1204.78 L1286.86 1204.78 L1287.44 1204.78 L1288.03 1204.78 L1288.61 1204.78 L1289.2 1204.78 L1289.79 1204.78 L1290.37 1204.78 L1290.96 1204.78 L1291.55 1204.78 L1292.13 1204.78 L1292.72 1204.78 L1293.31 1204.78 L1293.89 1204.78 L1294.48 1204.78 L1295.06 1204.78 L1295.65 1204.78 L1296.24 1204.78 L1296.82 1204.78 L1297.41 1204.78 L1298 1204.78 L1298.58 1204.78 L1299.17 1204.78 L1299.76 1204.78 L1300.34 1204.78 L1300.93 1204.78 L1301.52 1204.78 L1302.1 1204.78 L1302.69 1204.78 L1303.27 1204.78 L1303.86 1204.78 L1304.45 1204.78 L1305.03 1204.78 L1305.62 1204.78 L1306.21 1204.78 L1306.79 1204.78 L1307.38 1204.78 L1307.97 1204.78 L1308.55 1204.78 L1309.14 1204.78 L1309.73 1204.78 L1310.31 1204.78 L1310.9 1204.78 L1311.48 1204.78 L1312.07 1204.78 L1312.66 1204.78 L1313.24 1204.78 L1313.83 1204.78 L1314.42 1204.78 L1315 1204.78 L1315.59 1204.78 L1316.18 1204.78 L1316.76 1204.78 L1317.35 1204.78 L1317.93 1204.78 L1318.52 1204.78 L1319.11 1204.78 L1319.69 1204.78 L1320.28 1204.78 L1320.87 1204.78 L1321.45 1204.78 L1322.04 1204.78 L1322.63 1204.78 L1323.21 1204.78 L1323.8 1204.78 L1324.39 1204.78 L1324.97 1204.78 L1325.56 1204.78 L1326.14 1204.78 L1326.73 1204.78 L1327.32 1204.78 L1327.9 1204.78 L1328.49 1204.78 L1329.08 1204.78 L1329.66 1204.78 L1330.25 1204.78 L1330.84 1204.78 L1331.42 1204.78 L1332.01 1204.78 L1332.6 1204.78 L1333.18 1204.78 L1333.77 1204.78 L1334.35 1204.78 L1334.94 1204.78 L1335.53 1204.78 L1336.11 1204.78 L1336.7 1204.78 L1337.29 1204.78 L1337.87 1204.78 L1338.46 1204.78 L1339.05 1204.78 L1339.63 1204.78 L1340.22 1204.78 L1340.8 1204.78 L1341.39 1204.78 L1341.98 1204.78 L1342.56 1204.78 L1343.15 1204.78 L1343.74 1204.78 L1344.32 1204.78 L1344.91 1204.78 L1345.5 1204.78 L1346.08 1204.78 L1346.67 1204.78 L1347.26 1204.78 L1347.84 1204.78 L1348.43 1204.78 L1349.01 1204.78 L1349.6 1204.78 L1350.19 1204.78 L1350.77 1204.78 L1351.36 1204.78 L1351.95 1204.78 L1352.53 1204.78 L1353.12 1204.78 L1353.71 1204.78 L1354.29 1204.78 L1354.88 1204.78 L1355.47 1204.78 L1356.05 1204.78 L1356.64 1204.78 L1357.22 1204.78 L1357.81 1204.78 L1358.4 1204.78 L1358.98 1204.78 L1359.57 1204.78 L1360.16 1204.78 L1360.74 1204.78 L1361.33 1204.78 L1361.92 1204.78 L1362.5 1204.78 L1363.09 1204.78 L1363.68 1204.78 L1364.26 1204.78 L1364.85 1204.78 L1365.43 1204.78 L1366.02 1204.78 L1366.61 1204.78 L1367.19 1204.78 L1367.78 1204.78 L1368.37 1204.78 L1368.95 1204.78 L1369.54 1204.78 L1370.13 1204.78 L1370.71 1204.78 L1371.3 1204.78 L1371.88 1204.78 L1372.47 1204.78 L1373.06 1204.78 L1373.64 1204.78 L1374.23 1204.78 L1374.82 1204.78 L1375.4 1204.78 L1375.99 1204.78 L1376.58 1204.78 L1377.16 1204.78 L1377.75 1204.78 L1378.34 1204.78 L1378.92 1204.78 L1379.51 1204.78 L1380.09 1204.78 L1380.68 1204.78 L1381.27 1204.78 L1381.85 1204.78 L1382.44 1204.78 L1383.03 1204.78 L1383.61 1204.78 L1384.2 1204.78 L1384.79 1204.78 L1385.37 1204.78 L1385.96 1204.78 L1386.55 1204.78 L1387.13 1204.78 L1387.72 1204.78 L1388.3 1204.78 L1388.89 1204.78 L1389.48 1204.78 L1390.06 1204.78 L1390.65 1204.78 L1391.24 1204.78 L1391.82 1204.78 L1392.41 1204.78 L1393 1204.78 L1393.58 1204.78 L1394.17 1204.78 L1394.75 1204.78 L1395.34 1204.78 L1395.93 1204.78 L1396.51 1204.78 L1397.1 1204.78 L1397.69 1204.78 L1398.27 1204.78 L1398.86 1204.78 L1399.45 1204.78 L1400.03 1204.78 L1400.62 1204.78 L1401.21 1204.78 L1401.79 1204.78 L1402.38 1204.78 L1402.96 1204.78 L1403.55 1204.78 L1404.14 1204.78 L1404.72 1204.78 L1405.31 1204.78 L1405.9 1204.78 L1406.48 1204.78 L1407.07 1204.78 L1407.66 1204.78 L1408.24 1204.78 L1408.83 1204.78 L1409.42 1204.78 L1410 1204.78 L1410.59 1204.78 L1411.17 1204.78 L1411.76 1204.78 L1412.35 1204.78 L1412.93 1204.78 L1413.52 1204.78 L1414.11 1204.78 L1414.69 1204.78 L1415.28 1204.78 L1415.87 1204.78 L1416.45 1204.78 L1417.04 1204.78 L1417.63 1204.78 L1418.21 1204.78 L1418.8 1204.78 L1419.38 1204.78 L1419.97 1204.78 L1420.56 1204.78 L1421.14 1204.78 L1421.73 1204.78 L1422.32 1204.78 L1422.9 1204.78 L1423.49 1204.78 L1424.08 1204.78 L1424.66 1204.78 L1425.25 1204.78 L1425.83 1204.78 L1426.42 1204.78 L1427.01 1204.78 L1427.59 1204.78 L1428.18 1204.78 L1428.77 1204.78 L1429.35 1204.78 L1429.94 1204.78 L1430.53 1204.78 L1431.11 1204.78 L1431.7 1204.78 L1432.29 1204.78 L1432.87 1204.78 L1433.46 1204.78 L1434.04 1204.78 L1434.63 1204.78 L1435.22 1204.78 L1435.8 1204.78 L1436.39 1204.78 L1436.98 1204.78 L1437.56 1204.78 L1438.15 1204.78 L1438.74 1204.78 L1439.32 1204.78 L1439.91 1204.78 L1440.5 1204.78 L1441.08 1204.78 L1441.67 1204.78 L1442.25 1204.78 L1442.84 1204.78 L1443.43 1204.78 L1444.01 1204.78 L1444.6 1204.78 L1445.19 1204.78 L1445.77 1204.78 L1446.36 1204.78 L1446.95 1204.78 L1447.53 1204.78 L1448.12 1204.78 L1448.7 1204.78 L1449.29 1204.78 L1449.88 1204.78 L1450.46 1204.78 L1451.05 1204.78 L1451.64 1204.78 L1452.22 1204.78 L1452.81 1204.78 L1453.4 1204.78 L1453.98 1204.78 L1454.57 1204.78 L1455.16 1204.78 L1455.74 1204.78 L1456.33 1204.78 L1456.91 1204.78 L1457.5 1204.78 L1458.09 1204.78 L1458.67 1204.78 L1459.26 1204.78 L1459.85 1204.78 L1460.43 1204.78 L1461.02 1204.78 L1461.61 1204.78 L1462.19 1204.78 L1462.78 1204.78 L1463.37 1204.78 L1463.95 1204.78 L1464.54 1204.78 L1465.12 1204.78 L1465.71 1204.78 L1466.3 1204.78 L1466.88 1204.78 L1467.47 1204.78 L1468.06 1204.78 L1468.64 1204.78 L1469.23 1204.78 L1469.82 1204.78 L1470.4 1204.78 L1470.99 1204.78 L1471.57 1204.78 L1472.16 1204.78 L1472.75 1204.78 L1473.33 1204.78 L1473.92 1204.78 L1474.51 1204.78 L1475.09 1204.78 L1475.68 1204.78 L1476.27 1204.78 L1476.85 1204.78 L1477.44 1204.78 L1478.03 1204.78 L1478.61 1204.78 L1479.2 1204.78 L1479.78 1204.78 L1480.37 1204.78 L1480.96 1204.78 L1481.54 1204.78 L1482.13 1204.78 L1482.72 1204.78 L1483.3 1204.78 L1483.89 1204.78 L1484.48 1204.78 L1485.06 1204.78 L1485.65 1204.78 L1486.24 1204.78 L1486.82 1204.78 L1487.41 1204.78 L1487.99 1204.78 L1488.58 1204.78 L1489.17 1204.78 L1489.75 1204.78 L1490.34 1204.78 L1490.93 1204.78 L1491.51 1204.78 L1492.1 1204.78 L1492.69 1204.78 L1493.27 1204.78 L1493.86 1204.78 L1494.45 1204.78 L1495.03 1204.78 L1495.62 1204.78 L1496.2 1204.78 L1496.79 1204.78 L1497.38 1204.78 L1497.96 1204.78 L1498.55 1204.78 L1499.14 1204.78 L1499.72 1204.78 L1500.31 1204.78 L1500.9 1204.78 L1501.48 1204.78 L1502.07 1204.78 L1502.65 1204.78 L1503.24 1204.78 L1503.83 1204.78 L1504.41 1204.78 L1505 1204.78 L1505.59 1204.78 L1506.17 1204.78 L1506.76 1204.78 L1507.35 1204.78 L1507.93 1204.78 L1508.52 1204.78 L1509.11 1204.78 L1509.69 1204.78 L1510.28 1204.78 L1510.86 1204.78 L1511.45 1204.78 L1512.04 1204.78 L1512.62 1204.78 L1513.21 1204.78 L1513.8 1204.78 L1514.38 1204.78 L1514.97 1204.78 L1515.56 1204.78 L1516.14 1204.78 L1516.73 1204.78 L1517.32 1204.78 L1517.9 1204.78 L1518.49 1204.78 L1519.07 1204.78 L1519.66 1204.78 L1520.25 1204.78 L1520.83 1204.78 L1521.42 1204.78 L1522.01 1204.78 L1522.59 1204.78 L1523.18 1204.78 L1523.77 1204.78 L1524.35 1204.78 L1524.94 1204.78 L1525.52 1204.78 L1526.11 1204.78 L1526.7 1204.78 L1527.28 1204.78 L1527.87 1204.78 L1528.46 1204.78 L1529.04 1204.78 L1529.63 1204.78 L1530.22 1204.78 L1530.8 1204.78 L1531.39 1204.78 L1531.98 1204.78 L1532.56 1204.78 L1533.15 1204.78 L1533.73 1204.78 L1534.32 1204.78 L1534.91 1204.78 L1535.49 1204.78 L1536.08 1204.78 L1536.67 1204.78 L1537.25 1204.78 L1537.84 1204.78 L1538.43 1204.78 L1539.01 1204.78 L1539.6 1204.78 L1540.19 1204.78 L1540.77 1204.78 L1541.36 1204.78 L1541.94 1204.78 L1542.53 1204.78 L1543.12 1204.78 L1543.7 1204.78 L1544.29 1204.78 L1544.88 1204.78 L1545.46 1204.78 L1546.05 1204.78 L1546.64 1204.78 L1547.22 1204.78 L1547.81 1204.78 L1548.4 1204.78 L1548.98 1204.78 L1549.57 1204.78 L1550.15 1204.78 L1550.74 1204.78 L1551.33 1204.78 L1551.91 1204.78 L1552.5 1204.78 L1553.09 1204.78 L1553.67 1204.78 L1554.26 1204.78 L1554.85 1204.78 L1555.43 1204.78 L1556.02 1204.78 L1556.6 1204.78 L1557.19 1204.78 L1557.78 1204.78 L1558.36 1204.78 L1558.95 1204.78 L1559.54 1204.78 L1560.12 1204.78 L1560.71 1204.78 L1561.3 1204.78 L1561.88 1204.78 L1562.47 1204.78 L1563.06 1204.78 L1563.64 1204.78 L1564.23 1204.78 L1564.81 1204.78 L1565.4 1204.78 L1565.99 1204.78 L1566.57 1204.78 L1567.16 1204.78 L1567.75 1204.78 L1568.33 1204.78 L1568.92 1204.78 L1569.51 1204.78 L1570.09 1204.78 L1570.68 1204.78 L1571.27 1204.78 L1571.85 1204.78 L1572.44 1204.78 L1573.02 1204.78 L1573.61 1204.78 L1574.2 1204.78 L1574.78 1204.78 L1575.37 1204.78 L1575.96 1204.78 L1576.54 1204.78 L1577.13 1204.78 L1577.72 1204.78 L1578.3 1204.78 L1578.89 1204.78 L1579.47 1204.78 L1580.06 1204.78 L1580.65 1204.78 L1581.23 1204.78 L1581.82 1204.78 L1582.41 1204.78 L1582.99 1204.78 L1583.58 1204.78 L1584.17 1204.78 L1584.75 1204.78 L1585.34 1204.78 L1585.93 1204.78 L1586.51 1204.78 L1587.1 1204.78 L1587.68 1204.78 L1588.27 1204.78 L1588.86 1204.78 L1589.44 1204.78 L1590.03 1204.78 L1590.62 1204.78 L1591.2 1204.78 L1591.79 1204.78 L1592.38 1204.78 L1592.96 1204.78 L1593.55 1204.78 L1594.14 1204.78 L1594.72 1204.78 L1595.31 1204.78 L1595.89 1204.78 L1596.48 1204.78 L1597.07 1204.78 L1597.65 1204.78 L1598.24 1204.78 L1598.83 1204.78 L1599.41 1204.78 L1600 1204.78 L1600.59 1204.78 L1601.17 1204.78 L1601.76 1204.78 L1602.34 1204.78 L1602.93 1204.78 L1603.52 1204.78 L1604.1 1204.78 L1604.69 1204.78 L1605.28 1204.78 L1605.86 1204.78 L1606.45 1204.78 L1607.04 1204.78 L1607.62 1204.78 L1608.21 1204.78 L1608.8 1204.78 L1609.38 1204.78 L1609.97 1204.78 L1610.55 1204.78 L1611.14 1204.78 L1611.73 1204.78 L1612.31 1204.78 L1612.9 1204.78 L1613.49 1204.78 L1614.07 1204.78 L1614.66 1204.78 L1615.25 1204.78 L1615.83 1204.78 L1616.42 1204.78 L1617.01 1204.78 L1617.59 1204.78 L1618.18 1204.78 L1618.76 1204.78 L1619.35 1204.78 L1619.94 1204.78 L1620.52 1204.78 L1621.11 1204.78 L1621.7 1204.78 L1622.28 1204.78 L1622.87 1204.78 L1623.46 1204.78 L1624.04 1204.78 L1624.63 1204.78 L1625.22 1204.78 L1625.8 1204.78 L1626.39 1204.78 L1626.97 1204.78 L1627.56 1204.78 L1628.15 1204.78 L1628.73 1204.78 L1629.32 1204.78 L1629.91 1204.78 L1630.49 1204.78 L1631.08 1204.78 L1631.67 1204.78 L1632.25 1204.78 L1632.84 1204.78 L1633.42 1204.78 L1634.01 1204.78 L1634.6 1204.78 L1635.18 1204.78 L1635.77 1204.78 L1636.36 1204.78 L1636.94 1204.78 L1637.53 1204.78 L1638.12 1204.78 L1638.7 1204.78 L1639.29 1204.78 L1639.88 1204.78 L1640.46 1204.78 L1641.05 1204.78 L1641.63 1204.78 L1642.22 1204.78 L1642.81 1204.78 L1643.39 1204.78 L1643.98 1204.78 L1644.57 1204.78 L1645.15 1204.78 L1645.74 1204.78 L1646.33 1204.78 L1646.91 1204.78 L1647.5 1204.78 L1648.09 1204.78 L1648.67 1204.78 L1649.26 1204.78 L1649.84 1204.78 L1650.43 1204.78 L1651.02 1204.78 L1651.6 1204.78 L1652.19 1204.78 L1652.78 1204.78 L1653.36 1204.78 L1653.95 1204.78 L1654.54 1204.78 L1655.12 1204.78 L1655.71 1204.78 L1656.29 1204.78 L1656.88 1204.78 L1657.47 1204.78 L1658.05 1204.78 L1658.64 1204.78 L1659.23 1204.78 L1659.81 1204.78 L1660.4 1204.78 L1660.99 1204.78 L1661.57 1204.78 L1662.16 1204.78 L1662.75 1204.78 L1663.33 1204.78 L1663.92 1204.78 L1664.5 1204.78 L1665.09 1204.78 L1665.68 1204.78 L1666.26 1204.78 L1666.85 1204.78 L1667.44 1204.78 L1668.02 1204.78 L1668.61 1204.78 L1669.2 1204.78 L1669.78 1204.78 L1670.37 1204.78 L1670.96 1204.78 L1671.54 1204.78 L1672.13 1204.78 L1672.71 1204.78 L1673.3 1204.78 L1673.89 1204.78 L1674.47 1204.78 L1675.06 1204.78 L1675.65 1204.78 L1676.23 1204.78 L1676.82 1204.78 L1677.41 1204.78 L1677.99 1204.78 L1678.58 1204.78 L1679.17 1204.78 L1679.75 1204.78 L1680.34 1204.78 L1680.92 1204.78 L1681.51 1204.78 L1682.1 1204.78 L1682.68 1204.78 L1683.27 1204.78 L1683.86 1204.78 L1684.44 1204.78 L1685.03 1204.78 L1685.62 1204.78 L1686.2 1204.78 L1686.79 1204.78 L1687.37 1204.78 L1687.96 1204.78 L1688.55 1204.78 L1689.13 1204.78 L1689.72 1204.78 L1690.31 1204.78 L1690.89 1204.78 L1691.48 1204.78 L1692.07 1204.78 L1692.65 1204.78 L1693.24 1204.78 L1693.83 1204.78 L1694.41 1204.78 L1695 1204.78 L1695.58 1204.78 L1696.17 1204.78 L1696.76 1204.78 L1697.34 1204.78 L1697.93 1204.78 L1698.52 1204.78 L1699.1 1204.78 L1699.69 1204.78 L1700.28 1204.78 L1700.86 1204.78 L1701.45 1204.78 L1702.04 1204.78 L1702.62 1204.78 L1703.21 1204.78 L1703.79 1204.78 L1704.38 1204.78 L1704.97 1204.78 L1705.55 1204.78 L1706.14 1204.78 L1706.73 1204.78 L1707.31 1204.78 L1707.9 1204.78 L1708.49 1204.78 L1709.07 1204.78 L1709.66 1204.78 L1710.24 1204.78 L1710.83 1204.78 L1711.42 1204.78 L1712 1204.78 L1712.59 1204.78 L1713.18 1204.78 L1713.76 1204.78 L1714.35 1204.78 L1714.94 1204.78 L1715.52 1204.78 L1716.11 1204.78 L1716.7 1204.78 L1717.28 1204.78 L1717.87 1204.78 L1718.45 1204.78 L1719.04 1204.78 L1719.63 1204.78 L1720.21 1204.78 L1720.8 1204.78 L1721.39 1204.78 L1721.97 1204.78 L1722.56 1204.78 L1723.15 1204.78 L1723.73 1204.78 L1724.32 1204.78 L1724.91 1204.78 L1725.49 1204.78 L1726.08 1204.78 L1726.66 1204.78 L1727.25 1204.78 L1727.84 1204.78 L1728.42 1204.78 L1729.01 1204.78 L1729.6 1204.78 L1730.18 1204.78 L1730.77 1204.78 L1731.36 1204.78 L1731.94 1204.78 L1732.53 1204.78 L1733.11 1204.78 L1733.7 1204.78 L1734.29 1204.78 L1734.87 1204.78 L1735.46 1204.78 L1736.05 1204.78 L1736.63 1204.78 L1737.22 1204.78 L1737.81 1204.78 L1738.39 1204.78 L1738.98 1204.78 L1739.57 1204.78 L1740.15 1204.78 L1740.74 1204.78 L1741.32 1204.78 L1741.91 1204.78 L1742.5 1204.78 L1743.08 1204.78 L1743.67 1204.78 L1744.26 1204.78 L1744.84 1204.78 L1745.43 1204.78 L1746.02 1204.78 L1746.6 1204.78 L1747.19 1204.78 L1747.78 1204.78 L1748.36 1204.78 L1748.95 1204.78 L1749.53 1204.78 L1750.12 1204.78 L1750.71 1204.78 L1751.29 1204.78 L1751.88 1204.78 L1752.47 1204.78 L1753.05 1204.78 L1753.64 1204.78 L1754.23 1204.78 L1754.81 1204.78 L1755.4 1204.78 L1755.99 1204.78 L1756.57 1204.78 L1757.16 1204.78 L1757.74 1204.78 L1758.33 1204.78 L1758.92 1204.78 L1759.5 1204.78 L1760.09 1204.78 L1760.68 1204.78 L1761.26 1204.78 L1761.85 1204.78 L1762.44 1204.78 L1763.02 1204.78 L1763.61 1204.78 L1764.19 1204.78 L1764.78 1204.78 L1765.37 1204.78 L1765.95 1204.78 L1766.54 1204.78 L1767.13 1204.78 L1767.71 1204.78 L1768.3 1204.78 L1768.89 1204.78 L1769.47 1204.78 L1770.06 1204.78 L1770.65 1204.78 L1771.23 1204.78 L1771.82 1204.78 L1772.4 1204.78 L1772.99 1204.78 L1773.58 1204.78 L1774.16 1204.78 L1774.75 1204.78 L1775.34 1204.78 L1775.92 1204.78 L1776.51 1204.78 L1777.1 1204.78 L1777.68 1204.78 L1778.27 1204.78 L1778.86 1204.78 L1779.44 1204.78 L1780.03 1204.78 L1780.61 1204.78 L1781.2 1204.78 L1781.79 1204.78 L1782.37 1204.78 L1782.96 1204.78 L1783.55 1204.78 L1784.13 1204.78 L1784.72 1204.78 L1785.31 1204.78 L1785.89 1204.78 L1786.48 1204.78 L1787.06 1204.78 L1787.65 1204.78 L1788.24 1204.78 L1788.82 1204.78 L1789.41 1204.78 L1790 1204.78 L1790.58 1204.78 L1791.17 1204.78 L1791.76 1204.78 L1792.34 1204.78 L1792.93 1204.78 L1793.52 1204.78 L1794.1 1204.78 L1794.69 1204.78 L1795.27 1204.78 L1795.86 1204.78 L1796.45 1204.78 L1797.03 1204.78 L1797.62 1204.78 L1798.21 1204.78 L1798.79 1204.78 L1799.38 1204.78 L1799.97 1204.78 L1800.55 1204.78 L1801.14 1204.78 L1801.73 1204.78 L1802.31 1204.78 L1802.9 1204.78 L1803.48 1204.78 L1804.07 1204.78 L1804.66 1204.78 L1805.24 1204.78 L1805.83 1204.78 L1806.42 1204.78 L1807 1204.78 L1807.59 1204.78 L1808.18 1204.78 L1808.76 1204.78 L1809.35 1204.78 L1809.94 1204.78 L1810.52 1204.78 L1811.11 1204.78 L1811.69 1204.78 L1812.28 1204.78 L1812.87 1204.78 L1813.45 1204.78 L1814.04 1204.78 L1814.63 1204.78 L1815.21 1204.78 L1815.8 1204.78 L1816.39 1204.78 L1816.97 1204.78 L1817.56 1204.78 L1818.14 1204.78 L1818.73 1204.78 L1819.32 1204.78 L1819.9 1204.78 L1820.49 1204.78 L1821.08 1204.78 L1821.66 1204.78 L1822.25 1204.78 L1822.84 1204.78 L1823.42 1204.78 L1824.01 1204.78 L1824.6 1204.78 L1825.18 1204.78 L1825.77 1204.78 L1826.35 1204.78 L1826.94 1204.78 L1827.53 1204.78 L1828.11 1204.78 L1828.7 1204.78 L1829.29 1204.78 L1829.87 1204.78 L1830.46 1204.78 L1831.05 1204.78 L1831.63 1204.78 L1832.22 1204.78 L1832.81 1204.78 L1833.39 1204.78 L1833.98 1204.78 L1834.56 1204.78 L1835.15 1204.78 L1835.74 1204.78 L1836.32 1204.78 L1836.91 1204.78 L1837.5 1204.78 L1838.08 1204.78 L1838.67 1204.78 L1839.26 1204.78 L1839.84 1204.78 L1840.43 1204.78 L1841.01 1204.78 L1841.6 1204.78 L1842.19 1204.78 L1842.77 1204.78 L1843.36 1204.78 L1843.95 1204.78 L1844.53 1204.78 L1845.12 1204.78 L1845.71 1204.78 L1846.29 1204.78 L1846.88 1204.78 L1847.47 1204.78 L1848.05 1204.78 L1848.64 1204.78 L1849.22 1204.78 L1849.81 1204.78 L1850.4 1204.78 L1850.98 1204.78 L1851.57 1204.78 L1852.16 1204.78 L1852.74 1204.78 L1853.33 1204.78 L1853.92 1204.78 L1854.5 1204.78 L1855.09 1204.78 L1855.68 1204.78 L1856.26 1204.78 L1856.85 1204.78 L1857.43 1204.78 L1858.02 1204.78 L1858.61 1204.78 L1859.19 1204.78 L1859.78 1204.78 L1860.37 1204.78 L1860.95 1204.78 L1861.54 1204.78 L1862.13 1204.78 L1862.71 1204.78 L1863.3 1204.78 L1863.88 1204.78 L1864.47 1204.78 L1865.06 1204.78 L1865.64 1204.78 L1866.23 1204.78 L1866.82 1204.78 L1867.4 1204.78 L1867.99 1204.78 L1868.58 1204.78 L1869.16 1204.78 L1869.75 1204.78 L1870.34 1204.78 L1870.92 1204.78 L1871.51 1204.78 L1872.09 1204.78 L1872.68 1204.78 L1873.27 1204.78 L1873.85 1204.78 L1874.44 1204.78 L1875.03 1204.78 L1875.61 1204.78 L1876.2 1204.78 L1876.79 1204.78 L1877.37 1204.78 L1877.96 1204.78 L1878.55 1204.78 L1879.13 1204.78 L1879.72 1204.78 L1880.3 1204.78 L1880.89 1204.78 L1881.48 1204.78 L1882.06 1204.78 L1882.65 1204.78 L1883.24 1204.78 L1883.82 1204.78 L1884.41 1204.78 L1885 1204.78 L1885.58 1204.78 L1886.17 1204.78 L1886.76 1204.78 L1887.34 1204.78 L1887.93 1204.78 L1888.51 1204.78 L1889.1 1204.78 L1889.69 1204.78 L1890.27 1204.78 L1890.86 1204.78 L1891.45 1204.78 L1892.03 1204.78 L1892.62 1204.78 L1893.21 1204.78 L1893.79 1204.78 L1894.38 1204.78 L1894.96 1204.78 L1895.55 1204.78 L1896.14 1204.78 L1896.72 1204.78 L1897.31 1204.78 L1897.9 1204.78 L1898.48 1204.78 L1899.07 1204.78 L1899.66 1204.78 L1900.24 1204.78 L1900.83 1204.78 L1901.42 1204.78 L1902 1204.78 L1902.59 1204.78 L1903.17 1204.78 L1903.76 1204.78 L1904.35 1204.78 L1904.93 1204.78 L1905.52 1204.78 L1906.11 1204.78 L1906.69 1204.78 L1907.28 1204.78 L1907.87 1204.78 L1908.45 1204.78 L1909.04 1204.78 L1909.63 1204.78 L1910.21 1204.78 L1910.8 1204.78 L1911.38 1204.78 L1911.97 1204.78 L1912.56 1204.78 L1913.14 1204.78 L1913.73 1204.78 L1914.32 1204.78 L1914.9 1204.78 L1915.49 1204.78 L1916.08 1204.78 L1916.66 1204.78 L1917.25 1204.78 L1917.83 1204.78 L1918.42 1204.78 L1919.01 1204.78 L1919.59 1204.78 L1920.18 1204.78 L1920.77 1204.78 L1921.35 1204.78 L1921.94 1204.78 L1922.53 1204.78 L1923.11 1204.78 L1923.7 1204.78 L1924.29 1204.78 L1924.87 1204.78 L1925.46 1204.78 L1926.04 1204.78 L1926.63 1204.78 L1927.22 1204.78 L1927.8 1204.78 L1928.39 1204.78 L1928.98 1204.78 L1929.56 1204.78 L1930.15 1204.78 L1930.74 1204.78 L1931.32 1204.78 L1931.91 1204.78 L1932.5 1204.78 L1933.08 1204.78 L1933.67 1204.78 L1934.25 1204.78 L1934.84 1204.78 L1935.43 1204.78 L1936.01 1204.78 L1936.6 1204.78 L1937.19 1204.78 L1937.77 1204.78 L1938.36 1204.78 L1938.95 1204.78 L1939.53 1204.78 L1940.12 1204.78 L1940.71 1204.78 L1941.29 1204.78 L1941.88 1204.78 L1942.46 1204.78 L1943.05 1204.78 L1943.64 1204.78 L1944.22 1204.78 L1944.81 1204.78 L1945.4 1204.78 L1945.98 1204.78 L1946.57 1204.78 L1947.16 1204.78 L1947.74 1204.78 L1948.33 1204.78 L1948.91 1204.78 L1949.5 1204.78 L1950.09 1204.78 L1950.67 1204.78 L1951.26 1204.78 L1951.85 1204.78 L1952.43 1204.78 L1953.02 1204.78 L1953.61 1204.78 L1954.19 1204.78 L1954.78 1204.78 L1955.37 1204.78 L1955.95 1204.78 L1956.54 1204.78 L1957.12 1204.78 L1957.71 1204.78 L1958.3 1204.78 L1958.88 1204.78 L1959.47 1204.78 L1960.06 1204.78 L1960.64 1204.78 L1961.23 1204.78 L1961.82 1204.78 L1962.4 1204.78 L1962.99 1204.78 L1963.58 1204.78 L1964.16 1204.78 L1964.75 1204.78 L1965.33 1204.78 L1965.92 1204.78 L1966.51 1204.78 L1967.09 1204.78 L1967.68 1204.78 L1968.27 1204.78 L1968.85 1204.78 L1969.44 1204.78 L1970.03 1204.78 L1970.61 1204.78 L1971.2 1204.78 L1971.78 1204.78 L1972.37 1204.78 L1972.96 1204.78 L1973.54 1204.78 L1974.13 1204.78 L1974.72 1204.78 L1975.3 1204.78 L1975.89 1204.78 L1976.48 1204.78 L1977.06 1204.78 L1977.65 1204.78 L1978.24 1204.78 L1978.82 1204.78 L1979.41 1204.78 L1979.99 1204.78 L1980.58 1204.78 L1981.17 1204.78 L1981.75 1204.78 L1982.34 1204.78 L1982.93 1204.78 L1983.51 1204.78 L1984.1 1204.78 L1984.69 1204.78 L1985.27 1204.78 L1985.86 1204.78 L1986.45 1204.78 L1987.03 1204.78 L1987.62 1204.78 L1988.2 1204.78 L1988.79 1204.78 L1989.38 1204.78 L1989.96 1204.78 L1990.55 1204.78 L1991.14 1204.78 L1991.72 1204.78 L1992.31 1204.78 L1992.9 1204.78 L1993.48 1204.78 L1994.07 1204.78 L1994.65 1204.78 L1995.24 1204.78 L1995.83 1204.78 L1996.41 1204.78 L1997 1204.78 L1997.59 1204.78 L1998.17 1204.78 L1998.76 1204.78 L1999.35 1204.78 L1999.93 1204.78 L2000.52 1204.78 L2001.11 1204.78 L2001.69 1204.78 L2002.28 1204.78 L2002.86 1204.78 L2003.45 1204.78 L2004.04 1204.78 L2004.62 1204.78 L2005.21 1204.78 L2005.8 1204.78 L2006.38 1204.78 L2006.97 1204.78 L2007.56 1204.78 L2008.14 1204.78 L2008.73 1204.78 L2009.32 1204.78 L2009.9 1204.78 L2010.49 1204.78 L2011.07 1204.78 L2011.66 1204.78 L2012.25 1204.78 L2012.83 1204.78 L2013.42 1204.78 L2014.01 1204.78 L2014.59 1204.78 L2015.18 1204.78 L2015.77 1204.78 L2016.35 1204.78 L2016.94 1204.78 L2017.53 1204.78 L2018.11 1204.78 L2018.7 1204.78 L2019.28 1204.78 L2019.87 1204.78 L2020.46 1204.78 L2021.04 1204.78 L2021.63 1204.78 L2022.22 1204.78 L2022.8 1204.78 L2023.39 1204.78 L2023.98 1204.78 L2024.56 1204.78 L2025.15 1204.78 L2025.73 1204.78 L2026.32 1204.78 L2026.91 1204.78 L2027.49 1204.78 L2028.08 1204.78 L2028.67 1204.78 L2029.25 1204.78 L2029.84 1204.78 L2030.43 1204.78 L2031.01 1204.78 L2031.6 1204.78 L2032.19 1204.78 L2032.77 1204.78 L2033.36 1204.78 L2033.94 1204.78 L2034.53 1204.78 L2035.12 1204.78 L2035.7 1204.78 L2036.29 1204.78 L2036.88 1204.78 L2037.46 1204.78 L2038.05 1204.78 L2038.64 1204.78 L2039.22 1204.78 L2039.81 1204.78 L2040.4 1204.78 L2040.98 1204.78 L2041.57 1204.78 L2042.15 1204.78 L2042.74 1204.78 L2043.33 1204.78 L2043.91 1204.78 L2044.5 1204.78 L2045.09 1204.78 L2045.67 1204.78 L2046.26 1204.78 L2046.85 1204.78 L2047.43 1204.78 L2048.02 1204.78 L2048.6 1204.78 L2049.19 1204.78 L2049.78 1204.78 L2050.36 1204.78 L2050.95 1204.78 L2051.54 1204.78 L2052.12 1204.78 L2052.71 1204.78 L2053.3 1204.78 L2053.88 1204.78 L2054.47 1204.78 L2055.06 1204.78 L2055.64 1204.78 L2056.23 1204.78 L2056.81 1204.78 L2057.4 1204.78 L2057.99 1204.78 L2058.57 1204.78 L2059.16 1204.78 L2059.75 1204.78 L2060.33 1204.78 L2060.92 1204.78 L2061.51 1204.78 L2062.09 1204.78 L2062.68 1204.78 L2063.27 1204.78 L2063.85 1204.78 L2064.44 1204.78 L2065.02 1204.78 L2065.61 1204.78 L2066.2 1204.78 L2066.78 1204.78 L2067.37 1204.78 L2067.96 1204.78 L2068.54 1204.78 L2069.13 1204.78 L2069.72 1204.78 L2070.3 1204.78 L2070.89 1204.78 L2071.48 1204.78 L2072.06 1204.78 L2072.65 1204.78 L2073.23 1204.78 L2073.82 1204.78 L2074.41 1204.78 L2074.99 1204.78 L2075.58 1204.78 L2076.17 1204.78 L2076.75 1204.78 L2077.34 1204.78 L2077.93 1204.78 L2078.51 1204.78 L2079.1 1204.78 L2079.68 1204.78 L2080.27 1204.78 L2080.86 1204.78 L2081.44 1204.78 L2082.03 1204.78 L2082.62 1204.78 L2083.2 1204.78 L2083.79 1204.78 L2084.38 1204.78 L2084.96 1204.78 L2085.55 1204.78 L2086.14 1204.78 L2086.72 1204.78 L2087.31 1204.78 L2087.89 1204.78 L2088.48 1204.78 L2089.07 1204.78 L2089.65 1204.78 L2090.24 1204.78 L2090.83 1204.78 L2091.41 1204.78 L2092 1204.78 L2092.59 1204.78 L2093.17 1204.78 L2093.76 1204.78 L2094.35 1204.78 L2094.93 1204.78 L2095.52 1204.78 L2096.1 1204.78 L2096.69 1204.78 L2097.28 1204.78 L2097.86 1204.78 L2098.45 1204.78 L2099.04 1204.78 L2099.62 1204.78 L2100.21 1204.78 L2100.8 1204.78 L2101.38 1204.78 L2101.97 1204.78 L2102.55 1204.78 L2103.14 1204.78 L2103.73 1204.78 L2104.31 1204.78 L2104.9 1204.78 L2105.49 1204.78 L2106.07 1204.78 L2106.66 1204.78 L2107.25 1204.78 L2107.83 1204.78 L2108.42 1204.78 L2109.01 1204.78 L2109.59 1204.78 L2110.18 1204.78 L2110.76 1204.78 L2111.35 1204.78 L2111.94 1204.78 L2112.52 1204.78 L2113.11 1204.78 L2113.7 1204.78 L2114.28 1204.78 L2114.87 1204.78 L2115.46 1204.78 L2116.04 1204.78 L2116.63 1204.78 L2117.22 1204.78 L2117.8 1204.78 L2118.39 1204.78 L2118.97 1204.78 L2119.56 1204.78 L2120.15 1204.78 L2120.73 1204.78 L2121.32 1204.78 L2121.91 1204.78 L2122.49 1204.78 L2123.08 1204.78 L2123.67 1204.78 L2124.25 1204.78 L2124.84 1204.78 L2125.42 1204.78 L2126.01 1204.78 L2126.6 1204.78 L2127.18 1204.78 L2127.77 1204.78 L2128.36 1204.78 L2128.94 1204.78 L2129.53 1204.78 L2130.12 1204.78 L2130.7 1204.78 L2131.29 1204.78 L2131.88 1204.78 L2132.46 1204.78 L2133.05 1204.78 L2133.63 1204.78 L2134.22 1204.78 L2134.81 1204.78 L2135.39 1204.78 L2135.98 1204.78 L2136.57 1204.78 L2137.15 1204.78 L2137.74 1204.78 L2138.33 1204.78 L2138.91 1204.78 L2139.5 1204.78 L2140.09 1204.78 L2140.67 1204.78 L2141.26 1204.78 L2141.84 1204.78 L2142.43 1204.78 L2143.02 1204.78 L2143.6 1204.78 L2144.19 1204.78 L2144.78 1204.78 L2145.36 1204.78 L2145.95 1204.78 L2146.54 1204.78 L2147.12 1204.78 L2147.71 1204.78 L2148.3 1204.78 L2148.88 1204.78 L2149.47 1204.78 L2150.05 1204.78 L2150.64 1204.78 L2151.23 1204.78 L2151.81 1204.78 L2152.4 1204.78 L2152.99 1204.78 L2153.57 1204.78 L2154.16 1204.78 L2154.75 1204.78 L2155.33 1204.78 L2155.92 1204.78 L2156.5 1204.78 L2157.09 1204.78 L2157.68 1204.78 L2158.26 1204.78 L2158.26 1204.22 L2157.68 1204.22 L2157.09 1204.22 L2156.5 1204.22 L2155.92 1204.22 L2155.33 1204.22 L2154.75 1204.22 L2154.16 1204.22 L2153.57 1204.22 L2152.99 1204.22 L2152.4 1204.22 L2151.81 1204.22 L2151.23 1204.22 L2150.64 1204.22 L2150.05 1204.22 L2149.47 1204.22 L2148.88 1204.22 L2148.3 1204.22 L2147.71 1204.22 L2147.12 1204.22 L2146.54 1204.22 L2145.95 1204.22 L2145.36 1204.22 L2144.78 1204.22 L2144.19 1204.22 L2143.6 1204.22 L2143.02 1204.22 L2142.43 1204.22 L2141.84 1204.22 L2141.26 1204.22 L2140.67 1204.22 L2140.09 1204.22 L2139.5 1204.22 L2138.91 1204.22 L2138.33 1204.22 L2137.74 1204.22 L2137.15 1204.22 L2136.57 1204.22 L2135.98 1204.22 L2135.39 1204.22 L2134.81 1204.22 L2134.22 1204.22 L2133.63 1204.22 L2133.05 1204.22 L2132.46 1204.22 L2131.88 1204.22 L2131.29 1204.22 L2130.7 1204.22 L2130.12 1204.22 L2129.53 1204.22 L2128.94 1204.22 L2128.36 1204.22 L2127.77 1204.22 L2127.18 1204.22 L2126.6 1204.22 L2126.01 1204.22 L2125.42 1204.22 L2124.84 1204.22 L2124.25 1204.22 L2123.67 1204.22 L2123.08 1204.22 L2122.49 1204.22 L2121.91 1204.22 L2121.32 1204.22 L2120.73 1204.22 L2120.15 1204.22 L2119.56 1204.22 L2118.97 1204.22 L2118.39 1204.22 L2117.8 1204.22 L2117.22 1204.22 L2116.63 1204.22 L2116.04 1204.22 L2115.46 1204.22 L2114.87 1204.22 L2114.28 1204.22 L2113.7 1204.22 L2113.11 1204.22 L2112.52 1204.22 L2111.94 1204.22 L2111.35 1204.22 L2110.76 1204.22 L2110.18 1204.22 L2109.59 1204.22 L2109.01 1204.22 L2108.42 1204.22 L2107.83 1204.22 L2107.25 1204.22 L2106.66 1204.22 L2106.07 1204.22 L2105.49 1204.22 L2104.9 1204.22 L2104.31 1204.22 L2103.73 1204.22 L2103.14 1204.22 L2102.55 1204.22 L2101.97 1204.22 L2101.38 1204.22 L2100.8 1204.22 L2100.21 1204.22 L2099.62 1204.22 L2099.04 1204.22 L2098.45 1204.22 L2097.86 1204.22 L2097.28 1204.22 L2096.69 1204.22 L2096.1 1204.22 L2095.52 1204.22 L2094.93 1204.22 L2094.35 1204.22 L2093.76 1204.22 L2093.17 1204.22 L2092.59 1204.22 L2092 1204.22 L2091.41 1204.22 L2090.83 1204.22 L2090.24 1204.22 L2089.65 1204.22 L2089.07 1204.22 L2088.48 1204.22 L2087.89 1204.22 L2087.31 1204.22 L2086.72 1204.22 L2086.14 1204.22 L2085.55 1204.22 L2084.96 1204.22 L2084.38 1204.22 L2083.79 1204.22 L2083.2 1204.22 L2082.62 1204.22 L2082.03 1204.22 L2081.44 1204.22 L2080.86 1204.22 L2080.27 1204.22 L2079.68 1204.22 L2079.1 1204.22 L2078.51 1204.22 L2077.93 1204.22 L2077.34 1204.22 L2076.75 1204.22 L2076.17 1204.22 L2075.58 1204.22 L2074.99 1204.22 L2074.41 1204.22 L2073.82 1204.22 L2073.23 1204.22 L2072.65 1204.22 L2072.06 1204.22 L2071.48 1204.22 L2070.89 1204.22 L2070.3 1204.22 L2069.72 1204.22 L2069.13 1204.22 L2068.54 1204.22 L2067.96 1204.22 L2067.37 1204.22 L2066.78 1204.22 L2066.2 1204.22 L2065.61 1204.22 L2065.02 1204.22 L2064.44 1204.22 L2063.85 1204.22 L2063.27 1204.22 L2062.68 1204.22 L2062.09 1204.22 L2061.51 1204.22 L2060.92 1204.22 L2060.33 1204.22 L2059.75 1204.22 L2059.16 1204.22 L2058.57 1204.22 L2057.99 1204.22 L2057.4 1204.22 L2056.81 1204.22 L2056.23 1204.22 L2055.64 1204.22 L2055.06 1204.22 L2054.47 1204.22 L2053.88 1204.22 L2053.3 1204.22 L2052.71 1204.22 L2052.12 1204.22 L2051.54 1204.22 L2050.95 1204.22 L2050.36 1204.22 L2049.78 1204.22 L2049.19 1204.22 L2048.6 1204.22 L2048.02 1204.22 L2047.43 1204.22 L2046.85 1204.22 L2046.26 1204.22 L2045.67 1204.22 L2045.09 1204.22 L2044.5 1204.22 L2043.91 1204.22 L2043.33 1204.22 L2042.74 1204.22 L2042.15 1204.22 L2041.57 1204.22 L2040.98 1204.22 L2040.4 1204.22 L2039.81 1204.22 L2039.22 1204.22 L2038.64 1204.22 L2038.05 1204.22 L2037.46 1204.22 L2036.88 1204.22 L2036.29 1204.22 L2035.7 1204.22 L2035.12 1204.22 L2034.53 1204.22 L2033.94 1204.22 L2033.36 1204.22 L2032.77 1204.22 L2032.19 1204.22 L2031.6 1204.22 L2031.01 1204.22 L2030.43 1204.22 L2029.84 1204.22 L2029.25 1204.22 L2028.67 1204.22 L2028.08 1204.22 L2027.49 1204.22 L2026.91 1204.22 L2026.32 1204.22 L2025.73 1204.22 L2025.15 1204.22 L2024.56 1204.22 L2023.98 1204.22 L2023.39 1204.22 L2022.8 1204.22 L2022.22 1204.22 L2021.63 1204.22 L2021.04 1204.22 L2020.46 1204.22 L2019.87 1204.22 L2019.28 1204.22 L2018.7 1204.22 L2018.11 1204.22 L2017.53 1204.22 L2016.94 1204.22 L2016.35 1204.22 L2015.77 1204.22 L2015.18 1204.22 L2014.59 1204.22 L2014.01 1204.22 L2013.42 1204.22 L2012.83 1204.22 L2012.25 1204.22 L2011.66 1204.22 L2011.07 1204.22 L2010.49 1204.22 L2009.9 1204.22 L2009.32 1204.22 L2008.73 1204.22 L2008.14 1204.22 L2007.56 1204.22 L2006.97 1204.22 L2006.38 1204.22 L2005.8 1204.22 L2005.21 1204.22 L2004.62 1204.22 L2004.04 1204.22 L2003.45 1204.22 L2002.86 1204.22 L2002.28 1204.22 L2001.69 1204.22 L2001.11 1204.22 L2000.52 1204.22 L1999.93 1204.22 L1999.35 1204.22 L1998.76 1204.22 L1998.17 1204.22 L1997.59 1204.22 L1997 1204.22 L1996.41 1204.22 L1995.83 1204.22 L1995.24 1204.22 L1994.65 1204.22 L1994.07 1204.22 L1993.48 1204.22 L1992.9 1204.22 L1992.31 1204.22 L1991.72 1204.22 L1991.14 1204.22 L1990.55 1204.22 L1989.96 1204.22 L1989.38 1204.22 L1988.79 1204.22 L1988.2 1204.22 L1987.62 1204.22 L1987.03 1204.22 L1986.45 1204.22 L1985.86 1204.22 L1985.27 1204.22 L1984.69 1204.22 L1984.1 1204.22 L1983.51 1204.22 L1982.93 1204.22 L1982.34 1204.22 L1981.75 1204.22 L1981.17 1204.22 L1980.58 1204.22 L1979.99 1204.22 L1979.41 1204.22 L1978.82 1204.22 L1978.24 1204.22 L1977.65 1204.22 L1977.06 1204.22 L1976.48 1204.22 L1975.89 1204.22 L1975.3 1204.22 L1974.72 1204.22 L1974.13 1204.22 L1973.54 1204.22 L1972.96 1204.22 L1972.37 1204.22 L1971.78 1204.22 L1971.2 1204.22 L1970.61 1204.22 L1970.03 1204.22 L1969.44 1204.22 L1968.85 1204.22 L1968.27 1204.22 L1967.68 1204.22 L1967.09 1204.22 L1966.51 1204.22 L1965.92 1204.22 L1965.33 1204.22 L1964.75 1204.22 L1964.16 1204.22 L1963.58 1204.22 L1962.99 1204.22 L1962.4 1204.22 L1961.82 1204.22 L1961.23 1204.22 L1960.64 1204.22 L1960.06 1204.22 L1959.47 1204.22 L1958.88 1204.22 L1958.3 1204.22 L1957.71 1204.22 L1957.12 1204.22 L1956.54 1204.22 L1955.95 1204.22 L1955.37 1204.22 L1954.78 1204.22 L1954.19 1204.22 L1953.61 1204.22 L1953.02 1204.22 L1952.43 1204.22 L1951.85 1204.22 L1951.26 1204.22 L1950.67 1204.22 L1950.09 1204.22 L1949.5 1204.22 L1948.91 1204.22 L1948.33 1204.22 L1947.74 1204.22 L1947.16 1204.22 L1946.57 1204.22 L1945.98 1204.22 L1945.4 1204.22 L1944.81 1204.22 L1944.22 1204.22 L1943.64 1204.22 L1943.05 1204.22 L1942.46 1204.22 L1941.88 1204.22 L1941.29 1204.22 L1940.71 1204.22 L1940.12 1204.22 L1939.53 1204.22 L1938.95 1204.22 L1938.36 1204.22 L1937.77 1204.22 L1937.19 1204.22 L1936.6 1204.22 L1936.01 1204.22 L1935.43 1204.22 L1934.84 1204.22 L1934.25 1204.22 L1933.67 1204.22 L1933.08 1204.22 L1932.5 1204.22 L1931.91 1204.22 L1931.32 1204.22 L1930.74 1204.22 L1930.15 1204.22 L1929.56 1204.22 L1928.98 1204.22 L1928.39 1204.22 L1927.8 1204.22 L1927.22 1204.22 L1926.63 1204.22 L1926.04 1204.22 L1925.46 1204.22 L1924.87 1204.22 L1924.29 1204.22 L1923.7 1204.22 L1923.11 1204.22 L1922.53 1204.22 L1921.94 1204.22 L1921.35 1204.22 L1920.77 1204.22 L1920.18 1204.22 L1919.59 1204.22 L1919.01 1204.22 L1918.42 1204.22 L1917.83 1204.22 L1917.25 1204.22 L1916.66 1204.22 L1916.08 1204.22 L1915.49 1204.22 L1914.9 1204.22 L1914.32 1204.22 L1913.73 1204.22 L1913.14 1204.22 L1912.56 1204.22 L1911.97 1204.22 L1911.38 1204.22 L1910.8 1204.22 L1910.21 1204.22 L1909.63 1204.22 L1909.04 1204.22 L1908.45 1204.22 L1907.87 1204.22 L1907.28 1204.22 L1906.69 1204.22 L1906.11 1204.22 L1905.52 1204.22 L1904.93 1204.22 L1904.35 1204.22 L1903.76 1204.22 L1903.17 1204.22 L1902.59 1204.22 L1902 1204.22 L1901.42 1204.22 L1900.83 1204.22 L1900.24 1204.22 L1899.66 1204.22 L1899.07 1204.22 L1898.48 1204.22 L1897.9 1204.22 L1897.31 1204.22 L1896.72 1204.22 L1896.14 1204.22 L1895.55 1204.22 L1894.96 1204.22 L1894.38 1204.22 L1893.79 1204.22 L1893.21 1204.22 L1892.62 1204.22 L1892.03 1204.22 L1891.45 1204.22 L1890.86 1204.22 L1890.27 1204.22 L1889.69 1204.22 L1889.1 1204.22 L1888.51 1204.22 L1887.93 1204.22 L1887.34 1204.22 L1886.76 1204.22 L1886.17 1204.22 L1885.58 1204.22 L1885 1204.22 L1884.41 1204.22 L1883.82 1204.22 L1883.24 1204.22 L1882.65 1204.22 L1882.06 1204.22 L1881.48 1204.22 L1880.89 1204.22 L1880.3 1204.22 L1879.72 1204.22 L1879.13 1204.22 L1878.55 1204.22 L1877.96 1204.22 L1877.37 1204.22 L1876.79 1204.22 L1876.2 1204.22 L1875.61 1204.22 L1875.03 1204.22 L1874.44 1204.22 L1873.85 1204.22 L1873.27 1204.22 L1872.68 1204.22 L1872.09 1204.22 L1871.51 1204.22 L1870.92 1204.22 L1870.34 1204.22 L1869.75 1204.22 L1869.16 1204.22 L1868.58 1204.22 L1867.99 1204.22 L1867.4 1204.22 L1866.82 1204.22 L1866.23 1204.22 L1865.64 1204.22 L1865.06 1204.22 L1864.47 1204.22 L1863.88 1204.22 L1863.3 1204.22 L1862.71 1204.22 L1862.13 1204.22 L1861.54 1204.22 L1860.95 1204.22 L1860.37 1204.22 L1859.78 1204.22 L1859.19 1204.22 L1858.61 1204.22 L1858.02 1204.22 L1857.43 1204.22 L1856.85 1204.22 L1856.26 1204.22 L1855.68 1204.22 L1855.09 1204.22 L1854.5 1204.22 L1853.92 1204.22 L1853.33 1204.22 L1852.74 1204.22 L1852.16 1204.22 L1851.57 1204.22 L1850.98 1204.22 L1850.4 1204.22 L1849.81 1204.22 L1849.22 1204.22 L1848.64 1204.22 L1848.05 1204.22 L1847.47 1204.22 L1846.88 1204.22 L1846.29 1204.22 L1845.71 1204.22 L1845.12 1204.22 L1844.53 1204.22 L1843.95 1204.22 L1843.36 1204.22 L1842.77 1204.22 L1842.19 1204.22 L1841.6 1204.22 L1841.01 1204.22 L1840.43 1204.22 L1839.84 1204.22 L1839.26 1204.22 L1838.67 1204.22 L1838.08 1204.22 L1837.5 1204.22 L1836.91 1204.22 L1836.32 1204.22 L1835.74 1204.22 L1835.15 1204.22 L1834.56 1204.22 L1833.98 1204.22 L1833.39 1204.22 L1832.81 1204.22 L1832.22 1204.22 L1831.63 1204.22 L1831.05 1204.22 L1830.46 1204.22 L1829.87 1204.22 L1829.29 1204.22 L1828.7 1204.22 L1828.11 1204.22 L1827.53 1204.22 L1826.94 1204.22 L1826.35 1204.22 L1825.77 1204.22 L1825.18 1204.22 L1824.6 1204.22 L1824.01 1204.22 L1823.42 1204.22 L1822.84 1204.22 L1822.25 1204.22 L1821.66 1204.22 L1821.08 1204.22 L1820.49 1204.22 L1819.9 1204.22 L1819.32 1204.22 L1818.73 1204.22 L1818.14 1204.22 L1817.56 1204.22 L1816.97 1204.22 L1816.39 1204.22 L1815.8 1204.22 L1815.21 1204.22 L1814.63 1204.22 L1814.04 1204.22 L1813.45 1204.22 L1812.87 1204.22 L1812.28 1204.22 L1811.69 1204.22 L1811.11 1204.22 L1810.52 1204.22 L1809.94 1204.22 L1809.35 1204.22 L1808.76 1204.22 L1808.18 1204.22 L1807.59 1204.22 L1807 1204.22 L1806.42 1204.22 L1805.83 1204.22 L1805.24 1204.22 L1804.66 1204.22 L1804.07 1204.22 L1803.48 1204.22 L1802.9 1204.22 L1802.31 1204.22 L1801.73 1204.22 L1801.14 1204.22 L1800.55 1204.22 L1799.97 1204.22 L1799.38 1204.22 L1798.79 1204.22 L1798.21 1204.22 L1797.62 1204.22 L1797.03 1204.22 L1796.45 1204.22 L1795.86 1204.22 L1795.27 1204.22 L1794.69 1204.22 L1794.1 1204.22 L1793.52 1204.22 L1792.93 1204.22 L1792.34 1204.22 L1791.76 1204.22 L1791.17 1204.22 L1790.58 1204.22 L1790 1204.22 L1789.41 1204.22 L1788.82 1204.22 L1788.24 1204.22 L1787.65 1204.22 L1787.06 1204.22 L1786.48 1204.22 L1785.89 1204.22 L1785.31 1204.22 L1784.72 1204.22 L1784.13 1204.22 L1783.55 1204.22 L1782.96 1204.22 L1782.37 1204.22 L1781.79 1204.22 L1781.2 1204.22 L1780.61 1204.22 L1780.03 1204.22 L1779.44 1204.22 L1778.86 1204.22 L1778.27 1204.22 L1777.68 1204.22 L1777.1 1204.22 L1776.51 1204.22 L1775.92 1204.22 L1775.34 1204.22 L1774.75 1204.22 L1774.16 1204.22 L1773.58 1204.22 L1772.99 1204.22 L1772.4 1204.22 L1771.82 1204.22 L1771.23 1204.22 L1770.65 1204.22 L1770.06 1204.22 L1769.47 1204.22 L1768.89 1204.22 L1768.3 1204.22 L1767.71 1204.22 L1767.13 1204.22 L1766.54 1204.22 L1765.95 1204.22 L1765.37 1204.22 L1764.78 1204.22 L1764.19 1204.22 L1763.61 1204.22 L1763.02 1204.22 L1762.44 1204.22 L1761.85 1204.22 L1761.26 1204.22 L1760.68 1204.22 L1760.09 1204.22 L1759.5 1204.22 L1758.92 1204.22 L1758.33 1204.22 L1757.74 1204.22 L1757.16 1204.22 L1756.57 1204.22 L1755.99 1204.22 L1755.4 1204.22 L1754.81 1204.22 L1754.23 1204.22 L1753.64 1204.22 L1753.05 1204.22 L1752.47 1204.22 L1751.88 1204.22 L1751.29 1204.22 L1750.71 1204.22 L1750.12 1204.22 L1749.53 1204.22 L1748.95 1204.22 L1748.36 1204.22 L1747.78 1204.22 L1747.19 1204.22 L1746.6 1204.22 L1746.02 1204.22 L1745.43 1204.22 L1744.84 1204.22 L1744.26 1204.22 L1743.67 1204.22 L1743.08 1204.22 L1742.5 1204.22 L1741.91 1204.22 L1741.32 1204.22 L1740.74 1204.22 L1740.15 1204.22 L1739.57 1204.22 L1738.98 1204.22 L1738.39 1204.22 L1737.81 1204.22 L1737.22 1204.22 L1736.63 1204.22 L1736.05 1204.22 L1735.46 1204.22 L1734.87 1204.22 L1734.29 1204.22 L1733.7 1204.22 L1733.11 1204.22 L1732.53 1204.22 L1731.94 1204.22 L1731.36 1204.22 L1730.77 1204.22 L1730.18 1204.22 L1729.6 1204.22 L1729.01 1204.22 L1728.42 1204.22 L1727.84 1204.22 L1727.25 1204.22 L1726.66 1204.22 L1726.08 1204.22 L1725.49 1204.22 L1724.91 1204.22 L1724.32 1204.22 L1723.73 1204.22 L1723.15 1204.22 L1722.56 1204.22 L1721.97 1204.22 L1721.39 1204.22 L1720.8 1204.22 L1720.21 1204.22 L1719.63 1204.22 L1719.04 1204.22 L1718.45 1204.22 L1717.87 1204.22 L1717.28 1204.22 L1716.7 1204.22 L1716.11 1204.22 L1715.52 1204.22 L1714.94 1204.22 L1714.35 1204.22 L1713.76 1204.22 L1713.18 1204.22 L1712.59 1204.22 L1712 1204.22 L1711.42 1204.22 L1710.83 1204.22 L1710.24 1204.22 L1709.66 1204.22 L1709.07 1204.22 L1708.49 1204.22 L1707.9 1204.22 L1707.31 1204.22 L1706.73 1204.22 L1706.14 1204.22 L1705.55 1204.22 L1704.97 1204.22 L1704.38 1204.22 L1703.79 1204.22 L1703.21 1204.22 L1702.62 1204.22 L1702.04 1204.22 L1701.45 1204.22 L1700.86 1204.22 L1700.28 1204.22 L1699.69 1204.22 L1699.1 1204.22 L1698.52 1204.22 L1697.93 1204.22 L1697.34 1204.22 L1696.76 1204.22 L1696.17 1204.22 L1695.58 1204.22 L1695 1204.22 L1694.41 1204.22 L1693.83 1204.22 L1693.24 1204.22 L1692.65 1204.22 L1692.07 1204.22 L1691.48 1204.22 L1690.89 1204.22 L1690.31 1204.22 L1689.72 1204.22 L1689.13 1204.22 L1688.55 1204.22 L1687.96 1204.22 L1687.37 1204.22 L1686.79 1204.22 L1686.2 1204.22 L1685.62 1204.22 L1685.03 1204.22 L1684.44 1204.22 L1683.86 1204.22 L1683.27 1204.22 L1682.68 1204.22 L1682.1 1204.22 L1681.51 1204.22 L1680.92 1204.22 L1680.34 1204.22 L1679.75 1204.22 L1679.17 1204.22 L1678.58 1204.22 L1677.99 1204.22 L1677.41 1204.22 L1676.82 1204.22 L1676.23 1204.22 L1675.65 1204.22 L1675.06 1204.22 L1674.47 1204.22 L1673.89 1204.22 L1673.3 1204.22 L1672.71 1204.22 L1672.13 1204.22 L1671.54 1204.22 L1670.96 1204.22 L1670.37 1204.22 L1669.78 1204.22 L1669.2 1204.22 L1668.61 1204.22 L1668.02 1204.22 L1667.44 1204.22 L1666.85 1204.22 L1666.26 1204.22 L1665.68 1204.22 L1665.09 1204.22 L1664.5 1204.22 L1663.92 1204.22 L1663.33 1204.22 L1662.75 1204.22 L1662.16 1204.22 L1661.57 1204.22 L1660.99 1204.22 L1660.4 1204.22 L1659.81 1204.22 L1659.23 1204.22 L1658.64 1204.22 L1658.05 1204.22 L1657.47 1204.22 L1656.88 1204.22 L1656.29 1204.22 L1655.71 1204.22 L1655.12 1204.22 L1654.54 1204.22 L1653.95 1204.22 L1653.36 1204.22 L1652.78 1204.22 L1652.19 1204.22 L1651.6 1204.22 L1651.02 1204.22 L1650.43 1204.22 L1649.84 1204.22 L1649.26 1204.22 L1648.67 1204.22 L1648.09 1204.22 L1647.5 1204.22 L1646.91 1204.22 L1646.33 1204.22 L1645.74 1204.22 L1645.15 1204.22 L1644.57 1204.22 L1643.98 1204.22 L1643.39 1204.22 L1642.81 1204.22 L1642.22 1204.22 L1641.63 1204.22 L1641.05 1204.22 L1640.46 1204.22 L1639.88 1204.22 L1639.29 1204.22 L1638.7 1204.22 L1638.12 1204.22 L1637.53 1204.22 L1636.94 1204.22 L1636.36 1204.22 L1635.77 1204.22 L1635.18 1204.22 L1634.6 1204.22 L1634.01 1204.22 L1633.42 1204.22 L1632.84 1204.22 L1632.25 1204.22 L1631.67 1204.22 L1631.08 1204.22 L1630.49 1204.22 L1629.91 1204.22 L1629.32 1204.22 L1628.73 1204.22 L1628.15 1204.22 L1627.56 1204.22 L1626.97 1204.22 L1626.39 1204.22 L1625.8 1204.22 L1625.22 1204.22 L1624.63 1204.22 L1624.04 1204.22 L1623.46 1204.22 L1622.87 1204.22 L1622.28 1204.22 L1621.7 1204.22 L1621.11 1204.22 L1620.52 1204.22 L1619.94 1204.22 L1619.35 1204.22 L1618.76 1204.22 L1618.18 1204.22 L1617.59 1204.22 L1617.01 1204.22 L1616.42 1204.22 L1615.83 1204.22 L1615.25 1204.22 L1614.66 1204.22 L1614.07 1204.22 L1613.49 1204.22 L1612.9 1204.22 L1612.31 1204.22 L1611.73 1204.22 L1611.14 1204.22 L1610.55 1204.22 L1609.97 1204.22 L1609.38 1204.22 L1608.8 1204.22 L1608.21 1204.22 L1607.62 1204.22 L1607.04 1204.22 L1606.45 1204.22 L1605.86 1204.22 L1605.28 1204.22 L1604.69 1204.22 L1604.1 1204.22 L1603.52 1204.22 L1602.93 1204.22 L1602.34 1204.22 L1601.76 1204.22 L1601.17 1204.22 L1600.59 1204.22 L1600 1204.22 L1599.41 1204.22 L1598.83 1204.22 L1598.24 1204.22 L1597.65 1204.22 L1597.07 1204.22 L1596.48 1204.22 L1595.89 1204.22 L1595.31 1204.22 L1594.72 1204.22 L1594.14 1204.22 L1593.55 1204.22 L1592.96 1204.22 L1592.38 1204.22 L1591.79 1204.22 L1591.2 1204.22 L1590.62 1204.22 L1590.03 1204.22 L1589.44 1204.22 L1588.86 1204.22 L1588.27 1204.22 L1587.68 1204.22 L1587.1 1204.22 L1586.51 1204.22 L1585.93 1204.22 L1585.34 1204.22 L1584.75 1204.22 L1584.17 1204.22 L1583.58 1204.22 L1582.99 1204.22 L1582.41 1204.22 L1581.82 1204.22 L1581.23 1204.22 L1580.65 1204.22 L1580.06 1204.22 L1579.47 1204.22 L1578.89 1204.22 L1578.3 1204.22 L1577.72 1204.22 L1577.13 1204.22 L1576.54 1204.22 L1575.96 1204.22 L1575.37 1204.22 L1574.78 1204.22 L1574.2 1204.22 L1573.61 1204.22 L1573.02 1204.22 L1572.44 1204.22 L1571.85 1204.22 L1571.27 1204.22 L1570.68 1204.22 L1570.09 1204.22 L1569.51 1204.22 L1568.92 1204.22 L1568.33 1204.22 L1567.75 1204.22 L1567.16 1204.22 L1566.57 1204.22 L1565.99 1204.22 L1565.4 1204.22 L1564.81 1204.22 L1564.23 1204.22 L1563.64 1204.22 L1563.06 1204.22 L1562.47 1204.22 L1561.88 1204.22 L1561.3 1204.22 L1560.71 1204.22 L1560.12 1204.22 L1559.54 1204.22 L1558.95 1204.22 L1558.36 1204.22 L1557.78 1204.22 L1557.19 1204.22 L1556.6 1204.22 L1556.02 1204.22 L1555.43 1204.22 L1554.85 1204.22 L1554.26 1204.22 L1553.67 1204.22 L1553.09 1204.22 L1552.5 1204.22 L1551.91 1204.22 L1551.33 1204.22 L1550.74 1204.22 L1550.15 1204.22 L1549.57 1204.22 L1548.98 1204.22 L1548.4 1204.22 L1547.81 1204.22 L1547.22 1204.22 L1546.64 1204.22 L1546.05 1204.22 L1545.46 1204.22 L1544.88 1204.22 L1544.29 1204.22 L1543.7 1204.22 L1543.12 1204.22 L1542.53 1204.22 L1541.94 1204.22 L1541.36 1204.22 L1540.77 1204.22 L1540.19 1204.22 L1539.6 1204.22 L1539.01 1204.22 L1538.43 1204.22 L1537.84 1204.22 L1537.25 1204.22 L1536.67 1204.22 L1536.08 1204.22 L1535.49 1204.22 L1534.91 1204.22 L1534.32 1204.22 L1533.73 1204.22 L1533.15 1204.22 L1532.56 1204.22 L1531.98 1204.22 L1531.39 1204.22 L1530.8 1204.22 L1530.22 1204.22 L1529.63 1204.22 L1529.04 1204.22 L1528.46 1204.22 L1527.87 1204.22 L1527.28 1204.22 L1526.7 1204.22 L1526.11 1204.22 L1525.52 1204.22 L1524.94 1204.22 L1524.35 1204.22 L1523.77 1204.22 L1523.18 1204.22 L1522.59 1204.22 L1522.01 1204.22 L1521.42 1204.22 L1520.83 1204.22 L1520.25 1204.22 L1519.66 1204.22 L1519.07 1204.22 L1518.49 1204.22 L1517.9 1204.22 L1517.32 1204.22 L1516.73 1204.22 L1516.14 1204.22 L1515.56 1204.22 L1514.97 1204.22 L1514.38 1204.22 L1513.8 1204.22 L1513.21 1204.22 L1512.62 1204.22 L1512.04 1204.22 L1511.45 1204.22 L1510.86 1204.22 L1510.28 1204.22 L1509.69 1204.22 L1509.11 1204.22 L1508.52 1204.22 L1507.93 1204.22 L1507.35 1204.22 L1506.76 1204.22 L1506.17 1204.22 L1505.59 1204.22 L1505 1204.22 L1504.41 1204.22 L1503.83 1204.22 L1503.24 1204.22 L1502.65 1204.22 L1502.07 1204.22 L1501.48 1204.22 L1500.9 1204.22 L1500.31 1204.22 L1499.72 1204.22 L1499.14 1204.22 L1498.55 1204.22 L1497.96 1204.22 L1497.38 1204.22 L1496.79 1204.22 L1496.2 1204.22 L1495.62 1204.22 L1495.03 1204.22 L1494.45 1204.22 L1493.86 1204.22 L1493.27 1204.22 L1492.69 1204.22 L1492.1 1204.22 L1491.51 1204.22 L1490.93 1204.22 L1490.34 1204.22 L1489.75 1204.22 L1489.17 1204.22 L1488.58 1204.22 L1487.99 1204.22 L1487.41 1204.22 L1486.82 1204.22 L1486.24 1204.22 L1485.65 1204.22 L1485.06 1204.22 L1484.48 1204.22 L1483.89 1204.22 L1483.3 1204.22 L1482.72 1204.22 L1482.13 1204.22 L1481.54 1204.22 L1480.96 1204.22 L1480.37 1204.22 L1479.78 1204.22 L1479.2 1204.22 L1478.61 1204.22 L1478.03 1204.22 L1477.44 1204.22 L1476.85 1204.22 L1476.27 1204.22 L1475.68 1204.22 L1475.09 1204.22 L1474.51 1204.22 L1473.92 1204.22 L1473.33 1204.22 L1472.75 1204.22 L1472.16 1204.22 L1471.57 1204.22 L1470.99 1204.22 L1470.4 1204.22 L1469.82 1204.22 L1469.23 1204.22 L1468.64 1204.22 L1468.06 1204.22 L1467.47 1204.22 L1466.88 1204.22 L1466.3 1204.22 L1465.71 1204.22 L1465.12 1204.22 L1464.54 1204.22 L1463.95 1204.22 L1463.37 1204.22 L1462.78 1204.22 L1462.19 1204.22 L1461.61 1204.22 L1461.02 1204.22 L1460.43 1204.22 L1459.85 1204.22 L1459.26 1204.22 L1458.67 1204.22 L1458.09 1204.22 L1457.5 1204.22 L1456.91 1204.22 L1456.33 1204.22 L1455.74 1204.22 L1455.16 1204.22 L1454.57 1204.22 L1453.98 1204.22 L1453.4 1204.22 L1452.81 1204.22 L1452.22 1204.22 L1451.64 1204.22 L1451.05 1204.22 L1450.46 1204.22 L1449.88 1204.22 L1449.29 1204.22 L1448.7 1204.22 L1448.12 1204.22 L1447.53 1204.22 L1446.95 1204.22 L1446.36 1204.22 L1445.77 1204.22 L1445.19 1204.22 L1444.6 1204.22 L1444.01 1204.22 L1443.43 1204.22 L1442.84 1204.22 L1442.25 1204.22 L1441.67 1204.22 L1441.08 1204.22 L1440.5 1204.22 L1439.91 1204.22 L1439.32 1204.22 L1438.74 1204.22 L1438.15 1204.22 L1437.56 1204.22 L1436.98 1204.22 L1436.39 1204.22 L1435.8 1204.22 L1435.22 1204.22 L1434.63 1204.22 L1434.04 1204.22 L1433.46 1204.22 L1432.87 1204.22 L1432.29 1204.22 L1431.7 1204.22 L1431.11 1204.22 L1430.53 1204.22 L1429.94 1204.22 L1429.35 1204.22 L1428.77 1204.22 L1428.18 1204.22 L1427.59 1204.22 L1427.01 1204.22 L1426.42 1204.22 L1425.83 1204.22 L1425.25 1204.22 L1424.66 1204.22 L1424.08 1204.22 L1423.49 1204.22 L1422.9 1204.22 L1422.32 1204.22 L1421.73 1204.22 L1421.14 1204.22 L1420.56 1204.22 L1419.97 1204.22 L1419.38 1204.22 L1418.8 1204.22 L1418.21 1204.22 L1417.63 1204.22 L1417.04 1204.22 L1416.45 1204.22 L1415.87 1204.22 L1415.28 1204.22 L1414.69 1204.22 L1414.11 1204.22 L1413.52 1204.22 L1412.93 1204.22 L1412.35 1204.22 L1411.76 1204.22 L1411.17 1204.22 L1410.59 1204.22 L1410 1204.22 L1409.42 1204.22 L1408.83 1204.22 L1408.24 1204.22 L1407.66 1204.22 L1407.07 1204.22 L1406.48 1204.22 L1405.9 1204.22 L1405.31 1204.22 L1404.72 1204.22 L1404.14 1204.22 L1403.55 1204.22 L1402.96 1204.22 L1402.38 1204.22 L1401.79 1204.22 L1401.21 1204.22 L1400.62 1204.22 L1400.03 1204.22 L1399.45 1204.22 L1398.86 1204.22 L1398.27 1204.22 L1397.69 1204.22 L1397.1 1204.22 L1396.51 1204.22 L1395.93 1204.22 L1395.34 1204.22 L1394.75 1204.22 L1394.17 1204.22 L1393.58 1204.22 L1393 1204.22 L1392.41 1204.22 L1391.82 1204.22 L1391.24 1204.22 L1390.65 1204.22 L1390.06 1204.22 L1389.48 1204.22 L1388.89 1204.22 L1388.3 1204.22 L1387.72 1204.22 L1387.13 1204.22 L1386.55 1204.22 L1385.96 1204.22 L1385.37 1204.22 L1384.79 1204.22 L1384.2 1204.22 L1383.61 1204.22 L1383.03 1204.22 L1382.44 1204.22 L1381.85 1204.22 L1381.27 1204.22 L1380.68 1204.22 L1380.09 1204.22 L1379.51 1204.22 L1378.92 1204.22 L1378.34 1204.22 L1377.75 1204.22 L1377.16 1204.22 L1376.58 1204.22 L1375.99 1204.22 L1375.4 1204.22 L1374.82 1204.22 L1374.23 1204.22 L1373.64 1204.22 L1373.06 1204.22 L1372.47 1204.22 L1371.88 1204.22 L1371.3 1204.22 L1370.71 1204.22 L1370.13 1204.22 L1369.54 1204.22 L1368.95 1204.22 L1368.37 1204.22 L1367.78 1204.22 L1367.19 1204.22 L1366.61 1204.22 L1366.02 1204.22 L1365.43 1204.22 L1364.85 1204.22 L1364.26 1204.22 L1363.68 1204.22 L1363.09 1204.22 L1362.5 1204.22 L1361.92 1204.22 L1361.33 1204.22 L1360.74 1204.22 L1360.16 1204.22 L1359.57 1204.22 L1358.98 1204.22 L1358.4 1204.22 L1357.81 1204.22 L1357.22 1204.22 L1356.64 1204.22 L1356.05 1204.22 L1355.47 1204.22 L1354.88 1204.22 L1354.29 1204.22 L1353.71 1204.22 L1353.12 1204.22 L1352.53 1204.22 L1351.95 1204.22 L1351.36 1204.22 L1350.77 1204.22 L1350.19 1204.22 L1349.6 1204.22 L1349.01 1204.22 L1348.43 1204.22 L1347.84 1204.22 L1347.26 1204.22 L1346.67 1204.22 L1346.08 1204.22 L1345.5 1204.22 L1344.91 1204.22 L1344.32 1204.22 L1343.74 1204.22 L1343.15 1204.22 L1342.56 1204.22 L1341.98 1204.22 L1341.39 1204.22 L1340.8 1204.22 L1340.22 1204.22 L1339.63 1204.22 L1339.05 1204.22 L1338.46 1204.22 L1337.87 1204.22 L1337.29 1204.22 L1336.7 1204.22 L1336.11 1204.22 L1335.53 1204.22 L1334.94 1204.22 L1334.35 1204.22 L1333.77 1204.22 L1333.18 1204.22 L1332.6 1204.22 L1332.01 1204.22 L1331.42 1204.22 L1330.84 1204.22 L1330.25 1204.22 L1329.66 1204.22 L1329.08 1204.22 L1328.49 1204.22 L1327.9 1204.22 L1327.32 1204.22 L1326.73 1204.22 L1326.14 1204.22 L1325.56 1204.22 L1324.97 1204.22 L1324.39 1204.22 L1323.8 1204.22 L1323.21 1204.22 L1322.63 1204.22 L1322.04 1204.22 L1321.45 1204.22 L1320.87 1204.22 L1320.28 1204.22 L1319.69 1204.22 L1319.11 1204.22 L1318.52 1204.22 L1317.93 1204.22 L1317.35 1204.22 L1316.76 1204.22 L1316.18 1204.22 L1315.59 1204.22 L1315 1204.22 L1314.42 1204.22 L1313.83 1204.22 L1313.24 1204.22 L1312.66 1204.22 L1312.07 1204.22 L1311.48 1204.22 L1310.9 1204.22 L1310.31 1204.22 L1309.73 1204.22 L1309.14 1204.22 L1308.55 1204.22 L1307.97 1204.22 L1307.38 1204.22 L1306.79 1204.22 L1306.21 1204.22 L1305.62 1204.22 L1305.03 1204.22 L1304.45 1204.22 L1303.86 1204.22 L1303.27 1204.22 L1302.69 1204.22 L1302.1 1204.22 L1301.52 1204.22 L1300.93 1204.22 L1300.34 1204.22 L1299.76 1204.22 L1299.17 1204.22 L1298.58 1204.22 L1298 1204.22 L1297.41 1204.22 L1296.82 1204.22 L1296.24 1204.22 L1295.65 1204.22 L1295.06 1204.22 L1294.48 1204.22 L1293.89 1204.22 L1293.31 1204.22 L1292.72 1204.22 L1292.13 1204.22 L1291.55 1204.22 L1290.96 1204.22 L1290.37 1204.22 L1289.79 1204.22 L1289.2 1204.22 L1288.61 1204.22 L1288.03 1204.22 L1287.44 1204.22 L1286.86 1204.22 L1286.27 1204.22 L1285.68 1204.22 L1285.1 1204.22 L1284.51 1204.22 L1283.92 1204.22 L1283.34 1204.22 L1282.75 1204.22 L1282.16 1204.22 L1281.58 1204.22 L1280.99 1204.22 L1280.4 1204.22 L1279.82 1204.22 L1279.23 1204.22 L1278.65 1204.22 L1278.06 1204.22 L1277.47 1204.22 L1276.89 1204.22 L1276.3 1204.22 L1275.71 1204.22 L1275.13 1204.22 L1274.54 1204.22 L1273.95 1204.22 L1273.37 1204.22 L1272.78 1204.22 L1272.19 1204.22 L1271.61 1204.22 L1271.02 1204.22 L1270.44 1204.22 L1269.85 1204.22 L1269.26 1204.22 L1268.68 1204.22 L1268.09 1204.22 L1267.5 1204.22 L1266.92 1204.22 L1266.33 1204.22 L1265.74 1204.22 L1265.16 1204.22 L1264.57 1204.22 L1263.98 1204.22 L1263.4 1204.22 L1262.81 1204.22 L1262.23 1204.22 L1261.64 1204.22 L1261.05 1204.22 L1260.47 1204.22 L1259.88 1204.22 L1259.29 1204.22 L1258.71 1204.22 L1258.12 1204.22 L1257.53 1204.22 L1256.95 1204.22 L1256.36 1204.22 L1255.78 1204.22 L1255.19 1204.22 L1254.6 1204.22 L1254.02 1204.22 L1253.43 1204.22 L1252.84 1204.22 L1252.26 1204.22 L1251.67 1204.22 L1251.08 1204.22 L1250.5 1204.22 L1249.91 1204.22 L1249.32 1204.22 L1248.74 1204.22 L1248.15 1204.22 L1247.57 1204.22 L1246.98 1204.22 L1246.39 1204.22 L1245.81 1204.22 L1245.22 1204.22 L1244.63 1204.22 L1244.05 1204.22 L1243.46 1204.22 L1242.87 1204.22 L1242.29 1204.22 L1241.7 1204.22 L1241.11 1204.22 L1240.53 1204.22 L1239.94 1204.22 L1239.36 1204.22 L1238.77 1204.22 L1238.18 1204.22 L1237.6 1204.22 L1237.01 1204.22 L1236.42 1204.22 L1235.84 1204.22 L1235.25 1204.22 L1234.66 1204.22 L1234.08 1204.22 L1233.49 1204.22 L1232.91 1204.22 L1232.32 1204.22 L1231.73 1204.22 L1231.15 1204.22 L1230.56 1204.22 L1229.97 1204.22 L1229.39 1204.22 L1228.8 1204.22 L1228.21 1204.22 L1227.63 1204.22 L1227.04 1204.22 L1226.45 1204.22 L1225.87 1204.22 L1225.28 1204.22 L1224.7 1204.22 L1224.11 1204.22 L1223.52 1204.22 L1222.94 1204.22 L1222.35 1204.22 L1221.76 1204.22 L1221.18 1204.22 L1220.59 1204.22 L1220 1204.22 L1219.42 1204.22 L1218.83 1204.22 L1218.24 1204.22 L1217.66 1204.22 L1217.07 1204.22 L1216.49 1204.22 L1215.9 1204.22 L1215.31 1204.22 L1214.73 1204.22 L1214.14 1204.22 L1213.55 1204.22 L1212.97 1204.22 L1212.38 1204.22 L1211.79 1204.22 L1211.21 1204.22 L1210.62 1204.22 L1210.03 1204.22 L1209.45 1204.22 L1208.86 1204.22 L1208.28 1204.22 L1207.69 1204.22 L1207.1 1204.22 L1206.52 1204.22 L1205.93 1204.22 L1205.34 1204.22 L1204.76 1204.22 L1204.17 1204.22 L1203.58 1204.22 L1203 1204.22 L1202.41 1204.22 L1201.83 1204.22 L1201.24 1204.22 L1200.65 1204.22 L1200.07 1204.22 L1199.48 1204.22 L1198.89 1204.22 L1198.31 1204.22 L1197.72 1204.22 L1197.13 1204.22 L1196.55 1204.22 L1195.96 1204.22 L1195.37 1204.22 L1194.79 1204.22 L1194.2 1204.22 L1193.62 1204.22 L1193.03 1204.22 L1192.44 1204.22 L1191.86 1204.22 L1191.27 1204.22 L1190.68 1204.22 L1190.1 1204.22 L1189.51 1204.22 L1188.92 1204.22 L1188.34 1204.22 L1187.75 1204.22 L1187.16 1204.22 L1186.58 1204.22 L1185.99 1204.22 L1185.41 1204.22 L1184.82 1204.22 L1184.23 1204.22 L1183.65 1204.22 L1183.06 1204.22 L1182.47 1204.22 L1181.89 1204.22 L1181.3 1204.22 L1180.71 1204.22 L1180.13 1204.22 L1179.54 1204.22 L1178.96 1204.22 L1178.37 1204.22 L1177.78 1204.22 L1177.2 1204.22 L1176.61 1204.22 L1176.02 1204.22 L1175.44 1204.22 L1174.85 1204.22 L1174.26 1204.22 L1173.68 1204.22 L1173.09 1204.22 L1172.5 1204.22 L1171.92 1204.22 L1171.33 1204.22 L1170.75 1204.22 L1170.16 1204.22 L1169.57 1204.22 L1168.99 1204.22 L1168.4 1204.22 L1167.81 1204.22 L1167.23 1204.22 L1166.64 1204.22 L1166.05 1204.22 L1165.47 1204.22 L1164.88 1204.22 L1164.29 1204.22 L1163.71 1204.22 L1163.12 1204.22 L1162.54 1204.22 L1161.95 1204.22 L1161.36 1204.22 L1160.78 1204.22 L1160.19 1204.22 L1159.6 1204.22 L1159.02 1204.22 L1158.43 1204.22 L1157.84 1204.22 L1157.26 1204.22 L1156.67 1204.22 L1156.09 1204.22 L1155.5 1204.22 L1154.91 1204.22 L1154.33 1204.22 L1153.74 1204.22 L1153.15 1204.22 L1152.57 1204.22 L1151.98 1204.22 L1151.39 1204.22 L1150.81 1204.22 L1150.22 1204.22 L1149.63 1204.22 L1149.05 1204.22 L1148.46 1204.22 L1147.88 1204.22 L1147.29 1204.22 L1146.7 1204.22 L1146.12 1204.22 L1145.53 1204.22 L1144.94 1204.22 L1144.36 1204.22 L1143.77 1204.22 L1143.18 1204.22 L1142.6 1204.22 L1142.01 1204.22 L1141.42 1204.22 L1140.84 1204.22 L1140.25 1204.22 L1139.67 1204.22 L1139.08 1204.22 L1138.49 1204.22 L1137.91 1204.22 L1137.32 1204.22 L1136.73 1204.22 L1136.15 1204.22 L1135.56 1204.22 L1134.97 1204.22 L1134.39 1204.22 L1133.8 1204.22 L1133.21 1204.22 L1132.63 1204.22 L1132.04 1204.22 L1131.46 1204.22 L1130.87 1204.22 L1130.28 1204.22 L1129.7 1204.22 L1129.11 1204.22 L1128.52 1204.22 L1127.94 1204.22 L1127.35 1204.22 L1126.76 1204.22 L1126.18 1204.22 L1125.59 1204.22 L1125.01 1204.22 L1124.42 1204.22 L1123.83 1204.22 L1123.25 1204.22 L1122.66 1204.22 L1122.07 1204.22 L1121.49 1204.22 L1120.9 1204.22 L1120.31 1204.22 L1119.73 1204.22 L1119.14 1204.22 L1118.55 1204.22 L1117.97 1204.22 L1117.38 1204.22 L1116.8 1204.22 L1116.21 1204.22 L1115.62 1204.22 L1115.04 1204.22 L1114.45 1204.22 L1113.86 1204.22 L1113.28 1204.22 L1112.69 1204.22 L1112.1 1204.22 L1111.52 1204.22 L1110.93 1204.22 L1110.34 1204.22 L1109.76 1204.22 L1109.17 1204.22 L1108.59 1204.22 L1108 1204.22 L1107.41 1204.22 L1106.83 1204.22 L1106.24 1204.22 L1105.65 1204.22 L1105.07 1204.22 L1104.48 1204.22 L1103.89 1204.22 L1103.31 1204.22 L1102.72 1204.22 L1102.14 1204.22 L1101.55 1204.22 L1100.96 1204.22 L1100.38 1204.22 L1099.79 1204.22 L1099.2 1204.22 L1098.62 1204.22 L1098.03 1204.22 L1097.44 1204.22 L1096.86 1204.22 L1096.27 1204.22 L1095.68 1204.22 L1095.1 1204.22 L1094.51 1204.22 L1093.93 1204.22 L1093.34 1204.22 L1092.75 1204.22 L1092.17 1204.22 L1091.58 1204.22 L1090.99 1204.22 L1090.41 1204.22 L1089.82 1204.22 L1089.23 1204.22 L1088.65 1204.22 L1088.06 1204.22 L1087.47 1204.22 L1086.89 1204.22 L1086.3 1204.22 L1085.72 1204.22 L1085.13 1204.22 L1084.54 1204.22 L1083.96 1204.22 L1083.37 1204.22 L1082.78 1204.22 L1082.2 1204.22 L1081.61 1204.22 L1081.02 1204.22 L1080.44 1204.22 L1079.85 1204.22 L1079.26 1204.22 L1078.68 1204.22 L1078.09 1204.22 L1077.51 1204.22 L1076.92 1204.22 L1076.33 1204.22 L1075.75 1204.22 L1075.16 1204.22 L1074.57 1204.22 L1073.99 1204.22 L1073.4 1204.22 L1072.81 1204.22 L1072.23 1204.22 L1071.64 1204.22 L1071.06 1204.22 L1070.47 1204.22 L1069.88 1204.22 L1069.3 1204.22 L1068.71 1204.22 L1068.12 1204.22 L1067.54 1204.22 L1066.95 1204.22 L1066.36 1204.22 L1065.78 1204.22 L1065.19 1204.22 L1064.6 1204.22 L1064.02 1204.22 L1063.43 1204.22 L1062.85 1204.22 L1062.26 1204.22 L1061.67 1204.22 L1061.09 1204.22 L1060.5 1204.22 L1059.91 1204.22 L1059.33 1204.22 L1058.74 1204.22 L1058.15 1204.22 L1057.57 1204.22 L1056.98 1204.22 L1056.39 1204.22 L1055.81 1204.22 L1055.22 1204.22 L1054.64 1204.22 L1054.05 1204.22 L1053.46 1204.22 L1052.88 1204.22 L1052.29 1204.22 L1051.7 1204.22 L1051.12 1204.22 L1050.53 1204.22 L1049.94 1204.22 L1049.36 1204.22 L1048.77 1204.22 L1048.19 1204.22 L1047.6 1204.22 L1047.01 1204.22 L1046.43 1204.22 L1045.84 1204.22 L1045.25 1204.22 L1044.67 1204.22 L1044.08 1204.22 L1043.49 1204.22 L1042.91 1204.22 L1042.32 1204.22 L1041.73 1204.22 L1041.15 1204.22 L1040.56 1204.22 L1039.98 1204.22 L1039.39 1204.22 L1038.8 1204.22 L1038.22 1204.22 L1037.63 1204.22 L1037.04 1204.22 L1036.46 1204.22 L1035.87 1204.22 L1035.28 1204.22 L1034.7 1204.22 L1034.11 1204.22 L1033.52 1204.22 L1032.94 1204.22 L1032.35 1204.22 L1031.77 1204.22 L1031.18 1204.22 L1030.59 1204.22 L1030.01 1204.22 L1029.42 1204.22 L1028.83 1204.22 L1028.25 1204.22 L1027.66 1204.22 L1027.07 1204.22 L1026.49 1204.22 L1025.9 1204.22 L1025.32 1204.22 L1024.73 1204.22 L1024.14 1204.22 L1023.56 1204.22 L1022.97 1204.22 L1022.38 1204.22 L1021.8 1204.22 L1021.21 1204.22 L1020.62 1204.22 L1020.04 1204.22 L1019.45 1204.22 L1018.86 1204.22 L1018.28 1204.22 L1017.69 1204.22 L1017.11 1204.22 L1016.52 1204.22 L1015.93 1204.22 L1015.35 1204.22 L1014.76 1204.22 L1014.17 1204.22 L1013.59 1204.22 L1013 1204.22 L1012.41 1204.22 L1011.83 1204.22 L1011.24 1204.22 L1010.65 1204.22 L1010.07 1204.22 L1009.48 1204.22 L1008.9 1204.22 L1008.31 1204.22 L1007.72 1204.22 L1007.14 1204.22 L1006.55 1204.22 L1005.96 1204.22 L1005.38 1204.22 L1004.79 1204.22 L1004.2 1204.22 L1003.62 1204.22 L1003.03 1204.22 L1002.44 1204.22 L1001.86 1204.22 L1001.27 1204.22 L1000.69 1204.22 L1000.1 1204.22 L999.513 1204.22 L998.926 1204.22 L998.34 1204.22 L997.754 1204.22 L997.167 1204.22 L996.581 1204.22 L995.994 1204.22 L995.408 1204.22 L994.822 1204.22 L994.235 1204.22 L993.649 1204.22 L993.062 1204.22 L992.476 1204.22 L991.889 1204.22 L991.303 1204.22 L990.717 1204.22 L990.13 1204.22 L989.544 1204.22 L988.957 1204.22 L988.371 1204.22 L987.785 1204.22 L987.198 1204.22 L986.612 1204.22 L986.025 1204.22  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.5 986.612,1204.5 987.198,1204.5 987.785,1204.5 988.371,1204.5 988.957,1204.5 989.544,1204.5 990.13,1204.5 990.717,1204.5 991.303,1204.5 991.889,1204.5 992.476,1204.5 993.062,1204.5 993.649,1204.5 994.235,1204.5 994.822,1204.5 995.408,1204.5 995.994,1204.5 996.581,1204.5 997.167,1204.5 997.754,1204.5 998.34,1204.5 998.926,1204.5 999.513,1204.5 1000.1,1204.5 1000.69,1204.5 1001.27,1204.5 1001.86,1204.5 1002.44,1204.5 1003.03,1204.5 1003.62,1204.5 1004.2,1204.5 1004.79,1204.5 1005.38,1204.5 1005.96,1204.5 1006.55,1204.5 1007.14,1204.5 1007.72,1204.5 1008.31,1204.5 1008.9,1204.5 1009.48,1204.5 1010.07,1204.5 1010.65,1204.5 1011.24,1204.5 1011.83,1204.5 1012.41,1204.5 1013,1204.5 1013.59,1204.5 1014.17,1204.5 1014.76,1204.5 1015.35,1204.5 1015.93,1204.5 1016.52,1204.5 1017.11,1204.5 1017.69,1204.5 1018.28,1204.5 1018.86,1204.5 1019.45,1204.5 1020.04,1204.5 1020.62,1204.5 1021.21,1204.5 1021.8,1204.5 1022.38,1204.5 1022.97,1204.5 1023.56,1204.5 1024.14,1204.5 1024.73,1204.5 1025.32,1204.5 1025.9,1204.5 1026.49,1204.5 1027.07,1204.5 1027.66,1204.5 1028.25,1204.5 1028.83,1204.5 1029.42,1204.5 1030.01,1204.5 1030.59,1204.5 1031.18,1204.5 1031.77,1204.5 1032.35,1204.5 1032.94,1204.5 1033.52,1204.5 1034.11,1204.5 1034.7,1204.5 1035.28,1204.5 1035.87,1204.5 1036.46,1204.5 1037.04,1204.5 1037.63,1204.5 1038.22,1204.5 1038.8,1204.5 1039.39,1204.5 1039.98,1204.5 1040.56,1204.5 1041.15,1204.5 1041.73,1204.5 1042.32,1204.5 1042.91,1204.5 1043.49,1204.5 1044.08,1204.5 1044.67,1204.5 1045.25,1204.5 1045.84,1204.5 1046.43,1204.5 1047.01,1204.5 1047.6,1204.5 1048.19,1204.5 1048.77,1204.5 1049.36,1204.5 1049.94,1204.5 1050.53,1204.5 1051.12,1204.5 1051.7,1204.5 1052.29,1204.5 1052.88,1204.5 1053.46,1204.5 1054.05,1204.5 1054.64,1204.5 1055.22,1204.5 1055.81,1204.5 1056.39,1204.5 1056.98,1204.5 1057.57,1204.5 1058.15,1204.5 1058.74,1204.5 1059.33,1204.5 1059.91,1204.5 1060.5,1204.5 1061.09,1204.5 1061.67,1204.5 1062.26,1204.5 1062.85,1204.5 1063.43,1204.5 1064.02,1204.5 1064.6,1204.5 1065.19,1204.5 1065.78,1204.5 1066.36,1204.5 1066.95,1204.5 1067.54,1204.5 1068.12,1204.5 1068.71,1204.5 1069.3,1204.5 1069.88,1204.5 1070.47,1204.5 1071.06,1204.5 1071.64,1204.5 1072.23,1204.5 1072.81,1204.5 1073.4,1204.5 1073.99,1204.5 1074.57,1204.5 1075.16,1204.5 1075.75,1204.5 1076.33,1204.5 1076.92,1204.5 1077.51,1204.5 1078.09,1204.5 1078.68,1204.5 1079.26,1204.5 1079.85,1204.5 1080.44,1204.5 1081.02,1204.5 1081.61,1204.5 1082.2,1204.5 1082.78,1204.5 1083.37,1204.5 1083.96,1204.5 1084.54,1204.5 1085.13,1204.5 1085.72,1204.5 1086.3,1204.5 1086.89,1204.5 1087.47,1204.5 1088.06,1204.5 1088.65,1204.5 1089.23,1204.5 1089.82,1204.5 1090.41,1204.5 1090.99,1204.5 1091.58,1204.5 1092.17,1204.5 1092.75,1204.5 1093.34,1204.5 1093.93,1204.5 1094.51,1204.5 1095.1,1204.5 1095.68,1204.5 1096.27,1204.5 1096.86,1204.5 1097.44,1204.5 1098.03,1204.5 1098.62,1204.5 1099.2,1204.5 1099.79,1204.5 1100.38,1204.5 1100.96,1204.5 1101.55,1204.5 1102.14,1204.5 1102.72,1204.5 1103.31,1204.5 1103.89,1204.5 1104.48,1204.5 1105.07,1204.5 1105.65,1204.5 1106.24,1204.5 1106.83,1204.5 1107.41,1204.5 1108,1204.5 1108.59,1204.5 1109.17,1204.5 1109.76,1204.5 1110.34,1204.5 1110.93,1204.5 1111.52,1204.5 1112.1,1204.5 1112.69,1204.5 1113.28,1204.5 1113.86,1204.5 1114.45,1204.5 1115.04,1204.5 1115.62,1204.5 1116.21,1204.5 1116.8,1204.5 1117.38,1204.5 1117.97,1204.5 1118.55,1204.5 1119.14,1204.5 1119.73,1204.5 1120.31,1204.5 1120.9,1204.5 1121.49,1204.5 1122.07,1204.5 1122.66,1204.5 1123.25,1204.5 1123.83,1204.5 1124.42,1204.5 1125.01,1204.5 1125.59,1204.5 1126.18,1204.5 1126.76,1204.5 1127.35,1204.5 1127.94,1204.5 1128.52,1204.5 1129.11,1204.5 1129.7,1204.5 1130.28,1204.5 1130.87,1204.5 1131.46,1204.5 1132.04,1204.5 1132.63,1204.5 1133.21,1204.5 1133.8,1204.5 1134.39,1204.5 1134.97,1204.5 1135.56,1204.5 1136.15,1204.5 1136.73,1204.5 1137.32,1204.5 1137.91,1204.5 1138.49,1204.5 1139.08,1204.5 1139.67,1204.5 1140.25,1204.5 1140.84,1204.5 1141.42,1204.5 1142.01,1204.5 1142.6,1204.5 1143.18,1204.5 1143.77,1204.5 1144.36,1204.5 1144.94,1204.5 1145.53,1204.5 1146.12,1204.5 1146.7,1204.5 1147.29,1204.5 1147.88,1204.5 1148.46,1204.5 1149.05,1204.5 1149.63,1204.5 1150.22,1204.5 1150.81,1204.5 1151.39,1204.5 1151.98,1204.5 1152.57,1204.5 1153.15,1204.5 1153.74,1204.5 1154.33,1204.5 1154.91,1204.5 1155.5,1204.5 1156.09,1204.5 1156.67,1204.5 1157.26,1204.5 1157.84,1204.5 1158.43,1204.5 1159.02,1204.5 1159.6,1204.5 1160.19,1204.5 1160.78,1204.5 1161.36,1204.5 1161.95,1204.5 1162.54,1204.5 1163.12,1204.5 1163.71,1204.5 1164.29,1204.5 1164.88,1204.5 1165.47,1204.5 1166.05,1204.5 1166.64,1204.5 1167.23,1204.5 1167.81,1204.5 1168.4,1204.5 1168.99,1204.5 1169.57,1204.5 1170.16,1204.5 1170.75,1204.5 1171.33,1204.5 1171.92,1204.5 1172.5,1204.5 1173.09,1204.5 1173.68,1204.5 1174.26,1204.5 1174.85,1204.5 1175.44,1204.5 1176.02,1204.5 1176.61,1204.5 1177.2,1204.5 1177.78,1204.5 1178.37,1204.5 1178.96,1204.5 1179.54,1204.5 1180.13,1204.5 1180.71,1204.5 1181.3,1204.5 1181.89,1204.5 1182.47,1204.5 1183.06,1204.5 1183.65,1204.5 1184.23,1204.5 1184.82,1204.5 1185.41,1204.5 1185.99,1204.5 1186.58,1204.5 1187.16,1204.5 1187.75,1204.5 1188.34,1204.5 1188.92,1204.5 1189.51,1204.5 1190.1,1204.5 1190.68,1204.5 1191.27,1204.5 1191.86,1204.5 1192.44,1204.5 1193.03,1204.5 1193.62,1204.5 1194.2,1204.5 1194.79,1204.5 1195.37,1204.5 1195.96,1204.5 1196.55,1204.5 1197.13,1204.5 1197.72,1204.5 1198.31,1204.5 1198.89,1204.5 1199.48,1204.5 1200.07,1204.5 1200.65,1204.5 1201.24,1204.5 1201.83,1204.5 1202.41,1204.5 1203,1204.5 1203.58,1204.5 1204.17,1204.5 1204.76,1204.5 1205.34,1204.5 1205.93,1204.5 1206.52,1204.5 1207.1,1204.5 1207.69,1204.5 1208.28,1204.5 1208.86,1204.5 1209.45,1204.5 1210.03,1204.5 1210.62,1204.5 1211.21,1204.5 1211.79,1204.5 1212.38,1204.5 1212.97,1204.5 1213.55,1204.5 1214.14,1204.5 1214.73,1204.5 1215.31,1204.5 1215.9,1204.5 1216.49,1204.5 1217.07,1204.5 1217.66,1204.5 1218.24,1204.5 1218.83,1204.5 1219.42,1204.5 1220,1204.5 1220.59,1204.5 1221.18,1204.5 1221.76,1204.5 1222.35,1204.5 1222.94,1204.5 1223.52,1204.5 1224.11,1204.5 1224.7,1204.5 1225.28,1204.5 1225.87,1204.5 1226.45,1204.5 1227.04,1204.5 1227.63,1204.5 1228.21,1204.5 1228.8,1204.5 1229.39,1204.5 1229.97,1204.5 1230.56,1204.5 1231.15,1204.5 1231.73,1204.5 1232.32,1204.5 1232.91,1204.5 1233.49,1204.5 1234.08,1204.5 1234.66,1204.5 1235.25,1204.5 1235.84,1204.5 1236.42,1204.5 1237.01,1204.5 1237.6,1204.5 1238.18,1204.5 1238.77,1204.5 1239.36,1204.5 1239.94,1204.5 1240.53,1204.5 1241.11,1204.5 1241.7,1204.5 1242.29,1204.5 1242.87,1204.5 1243.46,1204.5 1244.05,1204.5 1244.63,1204.5 1245.22,1204.5 1245.81,1204.5 1246.39,1204.5 1246.98,1204.5 1247.57,1204.5 1248.15,1204.5 1248.74,1204.5 1249.32,1204.5 1249.91,1204.5 1250.5,1204.5 1251.08,1204.5 1251.67,1204.5 1252.26,1204.5 1252.84,1204.5 1253.43,1204.5 1254.02,1204.5 1254.6,1204.5 1255.19,1204.5 1255.78,1204.5 1256.36,1204.5 1256.95,1204.5 1257.53,1204.5 1258.12,1204.5 1258.71,1204.5 1259.29,1204.5 1259.88,1204.5 1260.47,1204.5 1261.05,1204.5 1261.64,1204.5 1262.23,1204.5 1262.81,1204.5 1263.4,1204.5 1263.98,1204.5 1264.57,1204.5 1265.16,1204.5 1265.74,1204.5 1266.33,1204.5 1266.92,1204.5 1267.5,1204.5 1268.09,1204.5 1268.68,1204.5 1269.26,1204.5 1269.85,1204.5 1270.44,1204.5 1271.02,1204.5 1271.61,1204.5 1272.19,1204.5 1272.78,1204.5 1273.37,1204.5 1273.95,1204.5 1274.54,1204.5 1275.13,1204.5 1275.71,1204.5 1276.3,1204.5 1276.89,1204.5 1277.47,1204.5 1278.06,1204.5 1278.65,1204.5 1279.23,1204.5 1279.82,1204.5 1280.4,1204.5 1280.99,1204.5 1281.58,1204.5 1282.16,1204.5 1282.75,1204.5 1283.34,1204.5 1283.92,1204.5 1284.51,1204.5 1285.1,1204.5 1285.68,1204.5 1286.27,1204.5 1286.86,1204.5 1287.44,1204.5 1288.03,1204.5 1288.61,1204.5 1289.2,1204.5 1289.79,1204.5 1290.37,1204.5 1290.96,1204.5 1291.55,1204.5 1292.13,1204.5 1292.72,1204.5 1293.31,1204.5 1293.89,1204.5 1294.48,1204.5 1295.06,1204.5 1295.65,1204.5 1296.24,1204.5 1296.82,1204.5 1297.41,1204.5 1298,1204.5 1298.58,1204.5 1299.17,1204.5 1299.76,1204.5 1300.34,1204.5 1300.93,1204.5 1301.52,1204.5 1302.1,1204.5 1302.69,1204.5 1303.27,1204.5 1303.86,1204.5 1304.45,1204.5 1305.03,1204.5 1305.62,1204.5 1306.21,1204.5 1306.79,1204.5 1307.38,1204.5 1307.97,1204.5 1308.55,1204.5 1309.14,1204.5 1309.73,1204.5 1310.31,1204.5 1310.9,1204.5 1311.48,1204.5 1312.07,1204.5 1312.66,1204.5 1313.24,1204.5 1313.83,1204.5 1314.42,1204.5 1315,1204.5 1315.59,1204.5 1316.18,1204.5 1316.76,1204.5 1317.35,1204.5 1317.93,1204.5 1318.52,1204.5 1319.11,1204.5 1319.69,1204.5 1320.28,1204.5 1320.87,1204.5 1321.45,1204.5 1322.04,1204.5 1322.63,1204.5 1323.21,1204.5 1323.8,1204.5 1324.39,1204.5 1324.97,1204.5 1325.56,1204.5 1326.14,1204.5 1326.73,1204.5 1327.32,1204.5 1327.9,1204.5 1328.49,1204.5 1329.08,1204.5 1329.66,1204.5 1330.25,1204.5 1330.84,1204.5 1331.42,1204.5 1332.01,1204.5 1332.6,1204.5 1333.18,1204.5 1333.77,1204.5 1334.35,1204.5 1334.94,1204.5 1335.53,1204.5 1336.11,1204.5 1336.7,1204.5 1337.29,1204.5 1337.87,1204.5 1338.46,1204.5 1339.05,1204.5 1339.63,1204.5 1340.22,1204.5 1340.8,1204.5 1341.39,1204.5 1341.98,1204.5 1342.56,1204.5 1343.15,1204.5 1343.74,1204.5 1344.32,1204.5 1344.91,1204.5 1345.5,1204.5 1346.08,1204.5 1346.67,1204.5 1347.26,1204.5 1347.84,1204.5 1348.43,1204.5 1349.01,1204.5 1349.6,1204.5 1350.19,1204.5 1350.77,1204.5 1351.36,1204.5 1351.95,1204.5 1352.53,1204.5 1353.12,1204.5 1353.71,1204.5 1354.29,1204.5 1354.88,1204.5 1355.47,1204.5 1356.05,1204.5 1356.64,1204.5 1357.22,1204.5 1357.81,1204.5 1358.4,1204.5 1358.98,1204.5 1359.57,1204.5 1360.16,1204.5 1360.74,1204.5 1361.33,1204.5 1361.92,1204.5 1362.5,1204.5 1363.09,1204.5 1363.68,1204.5 1364.26,1204.5 1364.85,1204.5 1365.43,1204.5 1366.02,1204.5 1366.61,1204.5 1367.19,1204.5 1367.78,1204.5 1368.37,1204.5 1368.95,1204.5 1369.54,1204.5 1370.13,1204.5 1370.71,1204.5 1371.3,1204.5 1371.88,1204.5 1372.47,1204.5 1373.06,1204.5 1373.64,1204.5 1374.23,1204.5 1374.82,1204.5 1375.4,1204.5 1375.99,1204.5 1376.58,1204.5 1377.16,1204.5 1377.75,1204.5 1378.34,1204.5 1378.92,1204.5 1379.51,1204.5 1380.09,1204.5 1380.68,1204.5 1381.27,1204.5 1381.85,1204.5 1382.44,1204.5 1383.03,1204.5 1383.61,1204.5 1384.2,1204.5 1384.79,1204.5 1385.37,1204.5 1385.96,1204.5 1386.55,1204.5 1387.13,1204.5 1387.72,1204.5 1388.3,1204.5 1388.89,1204.5 1389.48,1204.5 1390.06,1204.5 1390.65,1204.5 1391.24,1204.5 1391.82,1204.5 1392.41,1204.5 1393,1204.5 1393.58,1204.5 1394.17,1204.5 1394.75,1204.5 1395.34,1204.5 1395.93,1204.5 1396.51,1204.5 1397.1,1204.5 1397.69,1204.5 1398.27,1204.5 1398.86,1204.5 1399.45,1204.5 1400.03,1204.5 1400.62,1204.5 1401.21,1204.5 1401.79,1204.5 1402.38,1204.5 1402.96,1204.5 1403.55,1204.5 1404.14,1204.5 1404.72,1204.5 1405.31,1204.5 1405.9,1204.5 1406.48,1204.5 1407.07,1204.5 1407.66,1204.5 1408.24,1204.5 1408.83,1204.5 1409.42,1204.5 1410,1204.5 1410.59,1204.5 1411.17,1204.5 1411.76,1204.5 1412.35,1204.5 1412.93,1204.5 1413.52,1204.5 1414.11,1204.5 1414.69,1204.5 1415.28,1204.5 1415.87,1204.5 1416.45,1204.5 1417.04,1204.5 1417.63,1204.5 1418.21,1204.5 1418.8,1204.5 1419.38,1204.5 1419.97,1204.5 1420.56,1204.5 1421.14,1204.5 1421.73,1204.5 1422.32,1204.5 1422.9,1204.5 1423.49,1204.5 1424.08,1204.5 1424.66,1204.5 1425.25,1204.5 1425.83,1204.5 1426.42,1204.5 1427.01,1204.5 1427.59,1204.5 1428.18,1204.5 1428.77,1204.5 1429.35,1204.5 1429.94,1204.5 1430.53,1204.5 1431.11,1204.5 1431.7,1204.5 1432.29,1204.5 1432.87,1204.5 1433.46,1204.5 1434.04,1204.5 1434.63,1204.5 1435.22,1204.5 1435.8,1204.5 1436.39,1204.5 1436.98,1204.5 1437.56,1204.5 1438.15,1204.5 1438.74,1204.5 1439.32,1204.5 1439.91,1204.5 1440.5,1204.5 1441.08,1204.5 1441.67,1204.5 1442.25,1204.5 1442.84,1204.5 1443.43,1204.5 1444.01,1204.5 1444.6,1204.5 1445.19,1204.5 1445.77,1204.5 1446.36,1204.5 1446.95,1204.5 1447.53,1204.5 1448.12,1204.5 1448.7,1204.5 1449.29,1204.5 1449.88,1204.5 1450.46,1204.5 1451.05,1204.5 1451.64,1204.5 1452.22,1204.5 1452.81,1204.5 1453.4,1204.5 1453.98,1204.5 1454.57,1204.5 1455.16,1204.5 1455.74,1204.5 1456.33,1204.5 1456.91,1204.5 1457.5,1204.5 1458.09,1204.5 1458.67,1204.5 1459.26,1204.5 1459.85,1204.5 1460.43,1204.5 1461.02,1204.5 1461.61,1204.5 1462.19,1204.5 1462.78,1204.5 1463.37,1204.5 1463.95,1204.5 1464.54,1204.5 1465.12,1204.5 1465.71,1204.5 1466.3,1204.5 1466.88,1204.5 1467.47,1204.5 1468.06,1204.5 1468.64,1204.5 1469.23,1204.5 1469.82,1204.5 1470.4,1204.5 1470.99,1204.5 1471.57,1204.5 1472.16,1204.5 1472.75,1204.5 1473.33,1204.5 1473.92,1204.5 1474.51,1204.5 1475.09,1204.5 1475.68,1204.5 1476.27,1204.5 1476.85,1204.5 1477.44,1204.5 1478.03,1204.5 1478.61,1204.5 1479.2,1204.5 1479.78,1204.5 1480.37,1204.5 1480.96,1204.5 1481.54,1204.5 1482.13,1204.5 1482.72,1204.5 1483.3,1204.5 1483.89,1204.5 1484.48,1204.5 1485.06,1204.5 1485.65,1204.5 1486.24,1204.5 1486.82,1204.5 1487.41,1204.5 1487.99,1204.5 1488.58,1204.5 1489.17,1204.5 1489.75,1204.5 1490.34,1204.5 1490.93,1204.5 1491.51,1204.5 1492.1,1204.5 1492.69,1204.5 1493.27,1204.5 1493.86,1204.5 1494.45,1204.5 1495.03,1204.5 1495.62,1204.5 1496.2,1204.5 1496.79,1204.5 1497.38,1204.5 1497.96,1204.5 1498.55,1204.5 1499.14,1204.5 1499.72,1204.5 1500.31,1204.5 1500.9,1204.5 1501.48,1204.5 1502.07,1204.5 1502.65,1204.5 1503.24,1204.5 1503.83,1204.5 1504.41,1204.5 1505,1204.5 1505.59,1204.5 1506.17,1204.5 1506.76,1204.5 1507.35,1204.5 1507.93,1204.5 1508.52,1204.5 1509.11,1204.5 1509.69,1204.5 1510.28,1204.5 1510.86,1204.5 1511.45,1204.5 1512.04,1204.5 1512.62,1204.5 1513.21,1204.5 1513.8,1204.5 1514.38,1204.5 1514.97,1204.5 1515.56,1204.5 1516.14,1204.5 1516.73,1204.5 1517.32,1204.5 1517.9,1204.5 1518.49,1204.5 1519.07,1204.5 1519.66,1204.5 1520.25,1204.5 1520.83,1204.5 1521.42,1204.5 1522.01,1204.5 1522.59,1204.5 1523.18,1204.5 1523.77,1204.5 1524.35,1204.5 1524.94,1204.5 1525.52,1204.5 1526.11,1204.5 1526.7,1204.5 1527.28,1204.5 1527.87,1204.5 1528.46,1204.5 1529.04,1204.5 1529.63,1204.5 1530.22,1204.5 1530.8,1204.5 1531.39,1204.5 1531.98,1204.5 1532.56,1204.5 1533.15,1204.5 1533.73,1204.5 1534.32,1204.5 1534.91,1204.5 1535.49,1204.5 1536.08,1204.5 1536.67,1204.5 1537.25,1204.5 1537.84,1204.5 1538.43,1204.5 1539.01,1204.5 1539.6,1204.5 1540.19,1204.5 1540.77,1204.5 1541.36,1204.5 1541.94,1204.5 1542.53,1204.5 1543.12,1204.5 1543.7,1204.5 1544.29,1204.5 1544.88,1204.5 1545.46,1204.5 1546.05,1204.5 1546.64,1204.5 1547.22,1204.5 1547.81,1204.5 1548.4,1204.5 1548.98,1204.5 1549.57,1204.5 1550.15,1204.5 1550.74,1204.5 1551.33,1204.5 1551.91,1204.5 1552.5,1204.5 1553.09,1204.5 1553.67,1204.5 1554.26,1204.5 1554.85,1204.5 1555.43,1204.5 1556.02,1204.5 1556.6,1204.5 1557.19,1204.5 1557.78,1204.5 1558.36,1204.5 1558.95,1204.5 1559.54,1204.5 1560.12,1204.5 1560.71,1204.5 1561.3,1204.5 1561.88,1204.5 1562.47,1204.5 1563.06,1204.5 1563.64,1204.5 1564.23,1204.5 1564.81,1204.5 1565.4,1204.5 1565.99,1204.5 1566.57,1204.5 1567.16,1204.5 1567.75,1204.5 1568.33,1204.5 1568.92,1204.5 1569.51,1204.5 1570.09,1204.5 1570.68,1204.5 1571.27,1204.5 1571.85,1204.5 1572.44,1204.5 1573.02,1204.5 1573.61,1204.5 1574.2,1204.5 1574.78,1204.5 1575.37,1204.5 1575.96,1204.5 1576.54,1204.5 1577.13,1204.5 1577.72,1204.5 1578.3,1204.5 1578.89,1204.5 1579.47,1204.5 1580.06,1204.5 1580.65,1204.5 1581.23,1204.5 1581.82,1204.5 1582.41,1204.5 1582.99,1204.5 1583.58,1204.5 1584.17,1204.5 1584.75,1204.5 1585.34,1204.5 1585.93,1204.5 1586.51,1204.5 1587.1,1204.5 1587.68,1204.5 1588.27,1204.5 1588.86,1204.5 1589.44,1204.5 1590.03,1204.5 1590.62,1204.5 1591.2,1204.5 1591.79,1204.5 1592.38,1204.5 1592.96,1204.5 1593.55,1204.5 1594.14,1204.5 1594.72,1204.5 1595.31,1204.5 1595.89,1204.5 1596.48,1204.5 1597.07,1204.5 1597.65,1204.5 1598.24,1204.5 1598.83,1204.5 1599.41,1204.5 1600,1204.5 1600.59,1204.5 1601.17,1204.5 1601.76,1204.5 1602.34,1204.5 1602.93,1204.5 1603.52,1204.5 1604.1,1204.5 1604.69,1204.5 1605.28,1204.5 1605.86,1204.5 1606.45,1204.5 1607.04,1204.5 1607.62,1204.5 1608.21,1204.5 1608.8,1204.5 1609.38,1204.5 1609.97,1204.5 1610.55,1204.5 1611.14,1204.5 1611.73,1204.5 1612.31,1204.5 1612.9,1204.5 1613.49,1204.5 1614.07,1204.5 1614.66,1204.5 1615.25,1204.5 1615.83,1204.5 1616.42,1204.5 1617.01,1204.5 1617.59,1204.5 1618.18,1204.5 1618.76,1204.5 1619.35,1204.5 1619.94,1204.5 1620.52,1204.5 1621.11,1204.5 1621.7,1204.5 1622.28,1204.5 1622.87,1204.5 1623.46,1204.5 1624.04,1204.5 1624.63,1204.5 1625.22,1204.5 1625.8,1204.5 1626.39,1204.5 1626.97,1204.5 1627.56,1204.5 1628.15,1204.5 1628.73,1204.5 1629.32,1204.5 1629.91,1204.5 1630.49,1204.5 1631.08,1204.5 1631.67,1204.5 1632.25,1204.5 1632.84,1204.5 1633.42,1204.5 1634.01,1204.5 1634.6,1204.5 1635.18,1204.5 1635.77,1204.5 1636.36,1204.5 1636.94,1204.5 1637.53,1204.5 1638.12,1204.5 1638.7,1204.5 1639.29,1204.5 1639.88,1204.5 1640.46,1204.5 1641.05,1204.5 1641.63,1204.5 1642.22,1204.5 1642.81,1204.5 1643.39,1204.5 1643.98,1204.5 1644.57,1204.5 1645.15,1204.5 1645.74,1204.5 1646.33,1204.5 1646.91,1204.5 1647.5,1204.5 1648.09,1204.5 1648.67,1204.5 1649.26,1204.5 1649.84,1204.5 1650.43,1204.5 1651.02,1204.5 1651.6,1204.5 1652.19,1204.5 1652.78,1204.5 1653.36,1204.5 1653.95,1204.5 1654.54,1204.5 1655.12,1204.5 1655.71,1204.5 1656.29,1204.5 1656.88,1204.5 1657.47,1204.5 1658.05,1204.5 1658.64,1204.5 1659.23,1204.5 1659.81,1204.5 1660.4,1204.5 1660.99,1204.5 1661.57,1204.5 1662.16,1204.5 1662.75,1204.5 1663.33,1204.5 1663.92,1204.5 1664.5,1204.5 1665.09,1204.5 1665.68,1204.5 1666.26,1204.5 1666.85,1204.5 1667.44,1204.5 1668.02,1204.5 1668.61,1204.5 1669.2,1204.5 1669.78,1204.5 1670.37,1204.5 1670.96,1204.5 1671.54,1204.5 1672.13,1204.5 1672.71,1204.5 1673.3,1204.5 1673.89,1204.5 1674.47,1204.5 1675.06,1204.5 1675.65,1204.5 1676.23,1204.5 1676.82,1204.5 1677.41,1204.5 1677.99,1204.5 1678.58,1204.5 1679.17,1204.5 1679.75,1204.5 1680.34,1204.5 1680.92,1204.5 1681.51,1204.5 1682.1,1204.5 1682.68,1204.5 1683.27,1204.5 1683.86,1204.5 1684.44,1204.5 1685.03,1204.5 1685.62,1204.5 1686.2,1204.5 1686.79,1204.5 1687.37,1204.5 1687.96,1204.5 1688.55,1204.5 1689.13,1204.5 1689.72,1204.5 1690.31,1204.5 1690.89,1204.5 1691.48,1204.5 1692.07,1204.5 1692.65,1204.5 1693.24,1204.5 1693.83,1204.5 1694.41,1204.5 1695,1204.5 1695.58,1204.5 1696.17,1204.5 1696.76,1204.5 1697.34,1204.5 1697.93,1204.5 1698.52,1204.5 1699.1,1204.5 1699.69,1204.5 1700.28,1204.5 1700.86,1204.5 1701.45,1204.5 1702.04,1204.5 1702.62,1204.5 1703.21,1204.5 1703.79,1204.5 1704.38,1204.5 1704.97,1204.5 1705.55,1204.5 1706.14,1204.5 1706.73,1204.5 1707.31,1204.5 1707.9,1204.5 1708.49,1204.5 1709.07,1204.5 1709.66,1204.5 1710.24,1204.5 1710.83,1204.5 1711.42,1204.5 1712,1204.5 1712.59,1204.5 1713.18,1204.5 1713.76,1204.5 1714.35,1204.5 1714.94,1204.5 1715.52,1204.5 1716.11,1204.5 1716.7,1204.5 1717.28,1204.5 1717.87,1204.5 1718.45,1204.5 1719.04,1204.5 1719.63,1204.5 1720.21,1204.5 1720.8,1204.5 1721.39,1204.5 1721.97,1204.5 1722.56,1204.5 1723.15,1204.5 1723.73,1204.5 1724.32,1204.5 1724.91,1204.5 1725.49,1204.5 1726.08,1204.5 1726.66,1204.5 1727.25,1204.5 1727.84,1204.5 1728.42,1204.5 1729.01,1204.5 1729.6,1204.5 1730.18,1204.5 1730.77,1204.5 1731.36,1204.5 1731.94,1204.5 1732.53,1204.5 1733.11,1204.5 1733.7,1204.5 1734.29,1204.5 1734.87,1204.5 1735.46,1204.5 1736.05,1204.5 1736.63,1204.5 1737.22,1204.5 1737.81,1204.5 1738.39,1204.5 1738.98,1204.5 1739.57,1204.5 1740.15,1204.5 1740.74,1204.5 1741.32,1204.5 1741.91,1204.5 1742.5,1204.5 1743.08,1204.5 1743.67,1204.5 1744.26,1204.5 1744.84,1204.5 1745.43,1204.5 1746.02,1204.5 1746.6,1204.5 1747.19,1204.5 1747.78,1204.5 1748.36,1204.5 1748.95,1204.5 1749.53,1204.5 1750.12,1204.5 1750.71,1204.5 1751.29,1204.5 1751.88,1204.5 1752.47,1204.5 1753.05,1204.5 1753.64,1204.5 1754.23,1204.5 1754.81,1204.5 1755.4,1204.5 1755.99,1204.5 1756.57,1204.5 1757.16,1204.5 1757.74,1204.5 1758.33,1204.5 1758.92,1204.5 1759.5,1204.5 1760.09,1204.5 1760.68,1204.5 1761.26,1204.5 1761.85,1204.5 1762.44,1204.5 1763.02,1204.5 1763.61,1204.5 1764.19,1204.5 1764.78,1204.5 1765.37,1204.5 1765.95,1204.5 1766.54,1204.5 1767.13,1204.5 1767.71,1204.5 1768.3,1204.5 1768.89,1204.5 1769.47,1204.5 1770.06,1204.5 1770.65,1204.5 1771.23,1204.5 1771.82,1204.5 1772.4,1204.5 1772.99,1204.5 1773.58,1204.5 1774.16,1204.5 1774.75,1204.5 1775.34,1204.5 1775.92,1204.5 1776.51,1204.5 1777.1,1204.5 1777.68,1204.5 1778.27,1204.5 1778.86,1204.5 1779.44,1204.5 1780.03,1204.5 1780.61,1204.5 1781.2,1204.5 1781.79,1204.5 1782.37,1204.5 1782.96,1204.5 1783.55,1204.5 1784.13,1204.5 1784.72,1204.5 1785.31,1204.5 1785.89,1204.5 1786.48,1204.5 1787.06,1204.5 1787.65,1204.5 1788.24,1204.5 1788.82,1204.5 1789.41,1204.5 1790,1204.5 1790.58,1204.5 1791.17,1204.5 1791.76,1204.5 1792.34,1204.5 1792.93,1204.5 1793.52,1204.5 1794.1,1204.5 1794.69,1204.5 1795.27,1204.5 1795.86,1204.5 1796.45,1204.5 1797.03,1204.5 1797.62,1204.5 1798.21,1204.5 1798.79,1204.5 1799.38,1204.5 1799.97,1204.5 1800.55,1204.5 1801.14,1204.5 1801.73,1204.5 1802.31,1204.5 1802.9,1204.5 1803.48,1204.5 1804.07,1204.5 1804.66,1204.5 1805.24,1204.5 1805.83,1204.5 1806.42,1204.5 1807,1204.5 1807.59,1204.5 1808.18,1204.5 1808.76,1204.5 1809.35,1204.5 1809.94,1204.5 1810.52,1204.5 1811.11,1204.5 1811.69,1204.5 1812.28,1204.5 1812.87,1204.5 1813.45,1204.5 1814.04,1204.5 1814.63,1204.5 1815.21,1204.5 1815.8,1204.5 1816.39,1204.5 1816.97,1204.5 1817.56,1204.5 1818.14,1204.5 1818.73,1204.5 1819.32,1204.5 1819.9,1204.5 1820.49,1204.5 1821.08,1204.5 1821.66,1204.5 1822.25,1204.5 1822.84,1204.5 1823.42,1204.5 1824.01,1204.5 1824.6,1204.5 1825.18,1204.5 1825.77,1204.5 1826.35,1204.5 1826.94,1204.5 1827.53,1204.5 1828.11,1204.5 1828.7,1204.5 1829.29,1204.5 1829.87,1204.5 1830.46,1204.5 1831.05,1204.5 1831.63,1204.5 1832.22,1204.5 1832.81,1204.5 1833.39,1204.5 1833.98,1204.5 1834.56,1204.5 1835.15,1204.5 1835.74,1204.5 1836.32,1204.5 1836.91,1204.5 1837.5,1204.5 1838.08,1204.5 1838.67,1204.5 1839.26,1204.5 1839.84,1204.5 1840.43,1204.5 1841.01,1204.5 1841.6,1204.5 1842.19,1204.5 1842.77,1204.5 1843.36,1204.5 1843.95,1204.5 1844.53,1204.5 1845.12,1204.5 1845.71,1204.5 1846.29,1204.5 1846.88,1204.5 1847.47,1204.5 1848.05,1204.5 1848.64,1204.5 1849.22,1204.5 1849.81,1204.5 1850.4,1204.5 1850.98,1204.5 1851.57,1204.5 1852.16,1204.5 1852.74,1204.5 1853.33,1204.5 1853.92,1204.5 1854.5,1204.5 1855.09,1204.5 1855.68,1204.5 1856.26,1204.5 1856.85,1204.5 1857.43,1204.5 1858.02,1204.5 1858.61,1204.5 1859.19,1204.5 1859.78,1204.5 1860.37,1204.5 1860.95,1204.5 1861.54,1204.5 1862.13,1204.5 1862.71,1204.5 1863.3,1204.5 1863.88,1204.5 1864.47,1204.5 1865.06,1204.5 1865.64,1204.5 1866.23,1204.5 1866.82,1204.5 1867.4,1204.5 1867.99,1204.5 1868.58,1204.5 1869.16,1204.5 1869.75,1204.5 1870.34,1204.5 1870.92,1204.5 1871.51,1204.5 1872.09,1204.5 1872.68,1204.5 1873.27,1204.5 1873.85,1204.5 1874.44,1204.5 1875.03,1204.5 1875.61,1204.5 1876.2,1204.5 1876.79,1204.5 1877.37,1204.5 1877.96,1204.5 1878.55,1204.5 1879.13,1204.5 1879.72,1204.5 1880.3,1204.5 1880.89,1204.5 1881.48,1204.5 1882.06,1204.5 1882.65,1204.5 1883.24,1204.5 1883.82,1204.5 1884.41,1204.5 1885,1204.5 1885.58,1204.5 1886.17,1204.5 1886.76,1204.5 1887.34,1204.5 1887.93,1204.5 1888.51,1204.5 1889.1,1204.5 1889.69,1204.5 1890.27,1204.5 1890.86,1204.5 1891.45,1204.5 1892.03,1204.5 1892.62,1204.5 1893.21,1204.5 1893.79,1204.5 1894.38,1204.5 1894.96,1204.5 1895.55,1204.5 1896.14,1204.5 1896.72,1204.5 1897.31,1204.5 1897.9,1204.5 1898.48,1204.5 1899.07,1204.5 1899.66,1204.5 1900.24,1204.5 1900.83,1204.5 1901.42,1204.5 1902,1204.5 1902.59,1204.5 1903.17,1204.5 1903.76,1204.5 1904.35,1204.5 1904.93,1204.5 1905.52,1204.5 1906.11,1204.5 1906.69,1204.5 1907.28,1204.5 1907.87,1204.5 1908.45,1204.5 1909.04,1204.5 1909.63,1204.5 1910.21,1204.5 1910.8,1204.5 1911.38,1204.5 1911.97,1204.5 1912.56,1204.5 1913.14,1204.5 1913.73,1204.5 1914.32,1204.5 1914.9,1204.5 1915.49,1204.5 1916.08,1204.5 1916.66,1204.5 1917.25,1204.5 1917.83,1204.5 1918.42,1204.5 1919.01,1204.5 1919.59,1204.5 1920.18,1204.5 1920.77,1204.5 1921.35,1204.5 1921.94,1204.5 1922.53,1204.5 1923.11,1204.5 1923.7,1204.5 1924.29,1204.5 1924.87,1204.5 1925.46,1204.5 1926.04,1204.5 1926.63,1204.5 1927.22,1204.5 1927.8,1204.5 1928.39,1204.5 1928.98,1204.5 1929.56,1204.5 1930.15,1204.5 1930.74,1204.5 1931.32,1204.5 1931.91,1204.5 1932.5,1204.5 1933.08,1204.5 1933.67,1204.5 1934.25,1204.5 1934.84,1204.5 1935.43,1204.5 1936.01,1204.5 1936.6,1204.5 1937.19,1204.5 1937.77,1204.5 1938.36,1204.5 1938.95,1204.5 1939.53,1204.5 1940.12,1204.5 1940.71,1204.5 1941.29,1204.5 1941.88,1204.5 1942.46,1204.5 1943.05,1204.5 1943.64,1204.5 1944.22,1204.5 1944.81,1204.5 1945.4,1204.5 1945.98,1204.5 1946.57,1204.5 1947.16,1204.5 1947.74,1204.5 1948.33,1204.5 1948.91,1204.5 1949.5,1204.5 1950.09,1204.5 1950.67,1204.5 1951.26,1204.5 1951.85,1204.5 1952.43,1204.5 1953.02,1204.5 1953.61,1204.5 1954.19,1204.5 1954.78,1204.5 1955.37,1204.5 1955.95,1204.5 1956.54,1204.5 1957.12,1204.5 1957.71,1204.5 1958.3,1204.5 1958.88,1204.5 1959.47,1204.5 1960.06,1204.5 1960.64,1204.5 1961.23,1204.5 1961.82,1204.5 1962.4,1204.5 1962.99,1204.5 1963.58,1204.5 1964.16,1204.5 1964.75,1204.5 1965.33,1204.5 1965.92,1204.5 1966.51,1204.5 1967.09,1204.5 1967.68,1204.5 1968.27,1204.5 1968.85,1204.5 1969.44,1204.5 1970.03,1204.5 1970.61,1204.5 1971.2,1204.5 1971.78,1204.5 1972.37,1204.5 1972.96,1204.5 1973.54,1204.5 1974.13,1204.5 1974.72,1204.5 1975.3,1204.5 1975.89,1204.5 1976.48,1204.5 1977.06,1204.5 1977.65,1204.5 1978.24,1204.5 1978.82,1204.5 1979.41,1204.5 1979.99,1204.5 1980.58,1204.5 1981.17,1204.5 1981.75,1204.5 1982.34,1204.5 1982.93,1204.5 1983.51,1204.5 1984.1,1204.5 1984.69,1204.5 1985.27,1204.5 1985.86,1204.5 1986.45,1204.5 1987.03,1204.5 1987.62,1204.5 1988.2,1204.5 1988.79,1204.5 1989.38,1204.5 1989.96,1204.5 1990.55,1204.5 1991.14,1204.5 1991.72,1204.5 1992.31,1204.5 1992.9,1204.5 1993.48,1204.5 1994.07,1204.5 1994.65,1204.5 1995.24,1204.5 1995.83,1204.5 1996.41,1204.5 1997,1204.5 1997.59,1204.5 1998.17,1204.5 1998.76,1204.5 1999.35,1204.5 1999.93,1204.5 2000.52,1204.5 2001.11,1204.5 2001.69,1204.5 2002.28,1204.5 2002.86,1204.5 2003.45,1204.5 2004.04,1204.5 2004.62,1204.5 2005.21,1204.5 2005.8,1204.5 2006.38,1204.5 2006.97,1204.5 2007.56,1204.5 2008.14,1204.5 2008.73,1204.5 2009.32,1204.5 2009.9,1204.5 2010.49,1204.5 2011.07,1204.5 2011.66,1204.5 2012.25,1204.5 2012.83,1204.5 2013.42,1204.5 2014.01,1204.5 2014.59,1204.5 2015.18,1204.5 2015.77,1204.5 2016.35,1204.5 2016.94,1204.5 2017.53,1204.5 2018.11,1204.5 2018.7,1204.5 2019.28,1204.5 2019.87,1204.5 2020.46,1204.5 2021.04,1204.5 2021.63,1204.5 2022.22,1204.5 2022.8,1204.5 2023.39,1204.5 2023.98,1204.5 2024.56,1204.5 2025.15,1204.5 2025.73,1204.5 2026.32,1204.5 2026.91,1204.5 2027.49,1204.5 2028.08,1204.5 2028.67,1204.5 2029.25,1204.5 2029.84,1204.5 2030.43,1204.5 2031.01,1204.5 2031.6,1204.5 2032.19,1204.5 2032.77,1204.5 2033.36,1204.5 2033.94,1204.5 2034.53,1204.5 2035.12,1204.5 2035.7,1204.5 2036.29,1204.5 2036.88,1204.5 2037.46,1204.5 2038.05,1204.5 2038.64,1204.5 2039.22,1204.5 2039.81,1204.5 2040.4,1204.5 2040.98,1204.5 2041.57,1204.5 2042.15,1204.5 2042.74,1204.5 2043.33,1204.5 2043.91,1204.5 2044.5,1204.5 2045.09,1204.5 2045.67,1204.5 2046.26,1204.5 2046.85,1204.5 2047.43,1204.5 2048.02,1204.5 2048.6,1204.5 2049.19,1204.5 2049.78,1204.5 2050.36,1204.5 2050.95,1204.5 2051.54,1204.5 2052.12,1204.5 2052.71,1204.5 2053.3,1204.5 2053.88,1204.5 2054.47,1204.5 2055.06,1204.5 2055.64,1204.5 2056.23,1204.5 2056.81,1204.5 2057.4,1204.5 2057.99,1204.5 2058.57,1204.5 2059.16,1204.5 2059.75,1204.5 2060.33,1204.5 2060.92,1204.5 2061.51,1204.5 2062.09,1204.5 2062.68,1204.5 2063.27,1204.5 2063.85,1204.5 2064.44,1204.5 2065.02,1204.5 2065.61,1204.5 2066.2,1204.5 2066.78,1204.5 2067.37,1204.5 2067.96,1204.5 2068.54,1204.5 2069.13,1204.5 2069.72,1204.5 2070.3,1204.5 2070.89,1204.5 2071.48,1204.5 2072.06,1204.5 2072.65,1204.5 2073.23,1204.5 2073.82,1204.5 2074.41,1204.5 2074.99,1204.5 2075.58,1204.5 2076.17,1204.5 2076.75,1204.5 2077.34,1204.5 2077.93,1204.5 2078.51,1204.5 2079.1,1204.5 2079.68,1204.5 2080.27,1204.5 2080.86,1204.5 2081.44,1204.5 2082.03,1204.5 2082.62,1204.5 2083.2,1204.5 2083.79,1204.5 2084.38,1204.5 2084.96,1204.5 2085.55,1204.5 2086.14,1204.5 2086.72,1204.5 2087.31,1204.5 2087.89,1204.5 2088.48,1204.5 2089.07,1204.5 2089.65,1204.5 2090.24,1204.5 2090.83,1204.5 2091.41,1204.5 2092,1204.5 2092.59,1204.5 2093.17,1204.5 2093.76,1204.5 2094.35,1204.5 2094.93,1204.5 2095.52,1204.5 2096.1,1204.5 2096.69,1204.5 2097.28,1204.5 2097.86,1204.5 2098.45,1204.5 2099.04,1204.5 2099.62,1204.5 2100.21,1204.5 2100.8,1204.5 2101.38,1204.5 2101.97,1204.5 2102.55,1204.5 2103.14,1204.5 2103.73,1204.5 2104.31,1204.5 2104.9,1204.5 2105.49,1204.5 2106.07,1204.5 2106.66,1204.5 2107.25,1204.5 2107.83,1204.5 2108.42,1204.5 2109.01,1204.5 2109.59,1204.5 2110.18,1204.5 2110.76,1204.5 2111.35,1204.5 2111.94,1204.5 2112.52,1204.5 2113.11,1204.5 2113.7,1204.5 2114.28,1204.5 2114.87,1204.5 2115.46,1204.5 2116.04,1204.5 2116.63,1204.5 2117.22,1204.5 2117.8,1204.5 2118.39,1204.5 2118.97,1204.5 2119.56,1204.5 2120.15,1204.5 2120.73,1204.5 2121.32,1204.5 2121.91,1204.5 2122.49,1204.5 2123.08,1204.5 2123.67,1204.5 2124.25,1204.5 2124.84,1204.5 2125.42,1204.5 2126.01,1204.5 2126.6,1204.5 2127.18,1204.5 2127.77,1204.5 2128.36,1204.5 2128.94,1204.5 2129.53,1204.5 2130.12,1204.5 2130.7,1204.5 2131.29,1204.5 2131.88,1204.5 2132.46,1204.5 2133.05,1204.5 2133.63,1204.5 2134.22,1204.5 2134.81,1204.5 2135.39,1204.5 2135.98,1204.5 2136.57,1204.5 2137.15,1204.5 2137.74,1204.5 2138.33,1204.5 2138.91,1204.5 2139.5,1204.5 2140.09,1204.5 2140.67,1204.5 2141.26,1204.5 2141.84,1204.5 2142.43,1204.5 2143.02,1204.5 2143.6,1204.5 2144.19,1204.5 2144.78,1204.5 2145.36,1204.5 2145.95,1204.5 2146.54,1204.5 2147.12,1204.5 2147.71,1204.5 2148.3,1204.5 2148.88,1204.5 2149.47,1204.5 2150.05,1204.5 2150.64,1204.5 2151.23,1204.5 2151.81,1204.5 2152.4,1204.5 2152.99,1204.5 2153.57,1204.5 2154.16,1204.5 2154.75,1204.5 2155.33,1204.5 2155.92,1204.5 2156.5,1204.5 2157.09,1204.5 2157.68,1204.5 2158.26,1204.5 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M986.025 1204.3 L986.612 1204.3 L987.198 1204.3 L987.785 1204.3 L988.371 1204.3 L988.957 1204.3 L989.544 1204.3 L990.13 1204.3 L990.717 1204.3 L991.303 1204.3 L991.889 1204.3 L992.476 1204.3 L993.062 1204.3 L993.649 1204.3 L994.235 1204.3 L994.822 1204.3 L995.408 1204.3 L995.994 1204.3 L996.581 1204.3 L997.167 1204.3 L997.754 1204.3 L998.34 1204.3 L998.926 1204.3 L999.513 1204.3 L1000.1 1204.3 L1000.69 1204.3 L1001.27 1204.3 L1001.86 1204.3 L1002.44 1204.3 L1003.03 1204.3 L1003.62 1204.3 L1004.2 1204.3 L1004.79 1204.3 L1005.38 1204.3 L1005.96 1204.3 L1006.55 1204.3 L1007.14 1204.3 L1007.72 1204.3 L1008.31 1204.3 L1008.9 1204.3 L1009.48 1204.3 L1010.07 1204.3 L1010.65 1204.3 L1011.24 1204.3 L1011.83 1204.3 L1012.41 1204.3 L1013 1204.3 L1013.59 1204.3 L1014.17 1204.3 L1014.76 1204.3 L1015.35 1204.3 L1015.93 1204.3 L1016.52 1204.3 L1017.11 1204.3 L1017.69 1204.3 L1018.28 1204.3 L1018.86 1204.3 L1019.45 1204.3 L1020.04 1204.3 L1020.62 1204.3 L1021.21 1204.3 L1021.8 1204.3 L1022.38 1204.3 L1022.97 1204.3 L1023.56 1204.3 L1024.14 1204.3 L1024.73 1204.3 L1025.32 1204.3 L1025.9 1204.3 L1026.49 1204.3 L1027.07 1204.3 L1027.66 1204.3 L1028.25 1204.3 L1028.83 1204.3 L1029.42 1204.3 L1030.01 1204.3 L1030.59 1204.3 L1031.18 1204.3 L1031.77 1204.3 L1032.35 1204.3 L1032.94 1204.3 L1033.52 1204.3 L1034.11 1204.3 L1034.7 1204.3 L1035.28 1204.3 L1035.87 1204.3 L1036.46 1204.3 L1037.04 1204.3 L1037.63 1204.3 L1038.22 1204.3 L1038.8 1204.3 L1039.39 1204.3 L1039.98 1204.3 L1040.56 1204.3 L1041.15 1204.3 L1041.73 1204.3 L1042.32 1204.3 L1042.91 1204.3 L1043.49 1204.3 L1044.08 1204.3 L1044.67 1204.3 L1045.25 1204.3 L1045.84 1204.3 L1046.43 1204.3 L1047.01 1204.3 L1047.6 1204.3 L1048.19 1204.3 L1048.77 1204.3 L1049.36 1204.3 L1049.94 1204.3 L1050.53 1204.3 L1051.12 1204.3 L1051.7 1204.3 L1052.29 1204.3 L1052.88 1204.3 L1053.46 1204.3 L1054.05 1204.3 L1054.64 1204.3 L1055.22 1204.3 L1055.81 1204.3 L1056.39 1204.3 L1056.98 1204.3 L1057.57 1204.3 L1058.15 1204.3 L1058.74 1204.3 L1059.33 1204.3 L1059.91 1204.3 L1060.5 1204.3 L1061.09 1204.3 L1061.67 1204.3 L1062.26 1204.3 L1062.85 1204.3 L1063.43 1204.3 L1064.02 1204.3 L1064.6 1204.3 L1065.19 1204.3 L1065.78 1204.3 L1066.36 1204.3 L1066.95 1204.3 L1067.54 1204.3 L1068.12 1204.3 L1068.71 1204.3 L1069.3 1204.3 L1069.88 1204.3 L1070.47 1204.3 L1071.06 1204.3 L1071.64 1204.3 L1072.23 1204.3 L1072.81 1204.3 L1073.4 1204.3 L1073.99 1204.3 L1074.57 1204.3 L1075.16 1204.3 L1075.75 1204.3 L1076.33 1204.3 L1076.92 1204.3 L1077.51 1204.3 L1078.09 1204.3 L1078.68 1204.3 L1079.26 1204.3 L1079.85 1204.3 L1080.44 1204.3 L1081.02 1204.3 L1081.61 1204.3 L1082.2 1204.3 L1082.78 1204.3 L1083.37 1204.3 L1083.96 1204.3 L1084.54 1204.3 L1085.13 1204.3 L1085.72 1204.3 L1086.3 1204.3 L1086.89 1204.3 L1087.47 1204.3 L1088.06 1204.3 L1088.65 1204.3 L1089.23 1204.3 L1089.82 1204.3 L1090.41 1204.3 L1090.99 1204.3 L1091.58 1204.3 L1092.17 1204.3 L1092.75 1204.3 L1093.34 1204.3 L1093.93 1204.3 L1094.51 1204.3 L1095.1 1204.3 L1095.68 1204.3 L1096.27 1204.3 L1096.86 1204.3 L1097.44 1204.3 L1098.03 1204.3 L1098.62 1204.3 L1099.2 1204.3 L1099.79 1204.3 L1100.38 1204.3 L1100.96 1204.3 L1101.55 1204.3 L1102.14 1204.3 L1102.72 1204.3 L1103.31 1204.3 L1103.89 1204.3 L1104.48 1204.3 L1105.07 1204.3 L1105.65 1204.3 L1106.24 1204.3 L1106.83 1204.3 L1107.41 1204.3 L1108 1204.3 L1108.59 1204.3 L1109.17 1204.3 L1109.76 1204.3 L1110.34 1204.3 L1110.93 1204.3 L1111.52 1204.3 L1112.1 1204.3 L1112.69 1204.3 L1113.28 1204.3 L1113.86 1204.3 L1114.45 1204.3 L1115.04 1204.3 L1115.62 1204.3 L1116.21 1204.3 L1116.8 1204.3 L1117.38 1204.3 L1117.97 1204.3 L1118.55 1204.3 L1119.14 1204.3 L1119.73 1204.3 L1120.31 1204.3 L1120.9 1204.3 L1121.49 1204.3 L1122.07 1204.3 L1122.66 1204.3 L1123.25 1204.3 L1123.83 1204.3 L1124.42 1204.3 L1125.01 1204.3 L1125.59 1204.3 L1126.18 1204.3 L1126.76 1204.3 L1127.35 1204.3 L1127.94 1204.3 L1128.52 1204.3 L1129.11 1204.3 L1129.7 1204.3 L1130.28 1204.3 L1130.87 1204.3 L1131.46 1204.3 L1132.04 1204.3 L1132.63 1204.3 L1133.21 1204.3 L1133.8 1204.3 L1134.39 1204.3 L1134.97 1204.3 L1135.56 1204.3 L1136.15 1204.3 L1136.73 1204.3 L1137.32 1204.3 L1137.91 1204.3 L1138.49 1204.3 L1139.08 1204.3 L1139.67 1204.3 L1140.25 1204.3 L1140.84 1204.3 L1141.42 1204.3 L1142.01 1204.3 L1142.6 1204.3 L1143.18 1204.3 L1143.77 1204.3 L1144.36 1204.3 L1144.94 1204.3 L1145.53 1204.3 L1146.12 1204.3 L1146.7 1204.3 L1147.29 1204.3 L1147.88 1204.3 L1148.46 1204.3 L1149.05 1204.3 L1149.63 1204.3 L1150.22 1204.3 L1150.81 1204.3 L1151.39 1204.3 L1151.98 1204.3 L1152.57 1204.3 L1153.15 1204.3 L1153.74 1204.3 L1154.33 1204.3 L1154.91 1204.3 L1155.5 1204.3 L1156.09 1204.3 L1156.67 1204.3 L1157.26 1204.3 L1157.84 1204.3 L1158.43 1204.3 L1159.02 1204.3 L1159.6 1204.3 L1160.19 1204.3 L1160.78 1204.3 L1161.36 1204.3 L1161.95 1204.3 L1162.54 1204.3 L1163.12 1204.3 L1163.71 1204.3 L1164.29 1204.3 L1164.88 1204.3 L1165.47 1204.3 L1166.05 1204.3 L1166.64 1204.3 L1167.23 1204.3 L1167.81 1204.3 L1168.4 1204.3 L1168.99 1204.3 L1169.57 1204.3 L1170.16 1204.3 L1170.75 1204.3 L1171.33 1204.3 L1171.92 1204.3 L1172.5 1204.3 L1173.09 1204.3 L1173.68 1204.3 L1174.26 1204.3 L1174.85 1204.3 L1175.44 1204.3 L1176.02 1204.3 L1176.61 1204.3 L1177.2 1204.3 L1177.78 1204.3 L1178.37 1204.3 L1178.96 1204.3 L1179.54 1204.3 L1180.13 1204.3 L1180.71 1204.3 L1181.3 1204.3 L1181.89 1204.3 L1182.47 1204.3 L1183.06 1204.3 L1183.65 1204.3 L1184.23 1204.3 L1184.82 1204.3 L1185.41 1204.3 L1185.99 1204.3 L1186.58 1204.3 L1187.16 1204.3 L1187.75 1204.3 L1188.34 1204.3 L1188.92 1204.3 L1189.51 1204.3 L1190.1 1204.3 L1190.68 1204.3 L1191.27 1204.3 L1191.86 1204.3 L1192.44 1204.3 L1193.03 1204.3 L1193.62 1204.3 L1194.2 1204.3 L1194.79 1204.3 L1195.37 1204.3 L1195.96 1204.3 L1196.55 1204.3 L1197.13 1204.3 L1197.72 1204.3 L1198.31 1204.3 L1198.89 1204.3 L1199.48 1204.3 L1200.07 1204.3 L1200.65 1204.3 L1201.24 1204.3 L1201.83 1204.3 L1202.41 1204.3 L1203 1204.3 L1203.58 1204.3 L1204.17 1204.3 L1204.76 1204.3 L1205.34 1204.3 L1205.93 1204.3 L1206.52 1204.3 L1207.1 1204.3 L1207.69 1204.3 L1208.28 1204.3 L1208.86 1204.3 L1209.45 1204.3 L1210.03 1204.3 L1210.62 1204.3 L1211.21 1204.3 L1211.79 1204.3 L1212.38 1204.3 L1212.97 1204.3 L1213.55 1204.3 L1214.14 1204.3 L1214.73 1204.3 L1215.31 1204.3 L1215.9 1204.3 L1216.49 1204.3 L1217.07 1204.3 L1217.66 1204.3 L1218.24 1204.3 L1218.83 1204.3 L1219.42 1204.3 L1220 1204.3 L1220.59 1204.3 L1221.18 1204.3 L1221.76 1204.3 L1222.35 1204.3 L1222.94 1204.3 L1223.52 1204.3 L1224.11 1204.3 L1224.7 1204.3 L1225.28 1204.3 L1225.87 1204.3 L1226.45 1204.3 L1227.04 1204.3 L1227.63 1204.3 L1228.21 1204.3 L1228.8 1204.3 L1229.39 1204.3 L1229.97 1204.3 L1230.56 1204.3 L1231.15 1204.3 L1231.73 1204.3 L1232.32 1204.3 L1232.91 1204.3 L1233.49 1204.3 L1234.08 1204.3 L1234.66 1204.3 L1235.25 1204.3 L1235.84 1204.3 L1236.42 1204.3 L1237.01 1204.3 L1237.6 1204.3 L1238.18 1204.3 L1238.77 1204.3 L1239.36 1204.3 L1239.94 1204.3 L1240.53 1204.3 L1241.11 1204.3 L1241.7 1204.3 L1242.29 1204.3 L1242.87 1204.3 L1243.46 1204.3 L1244.05 1204.3 L1244.63 1204.3 L1245.22 1204.3 L1245.81 1204.3 L1246.39 1204.3 L1246.98 1204.3 L1247.57 1204.3 L1248.15 1204.3 L1248.74 1204.3 L1249.32 1204.3 L1249.91 1204.3 L1250.5 1204.3 L1251.08 1204.3 L1251.67 1204.3 L1252.26 1204.3 L1252.84 1204.3 L1253.43 1204.3 L1254.02 1204.3 L1254.6 1204.3 L1255.19 1204.3 L1255.78 1204.3 L1256.36 1204.3 L1256.95 1204.3 L1257.53 1204.3 L1258.12 1204.3 L1258.71 1204.3 L1259.29 1204.3 L1259.88 1204.3 L1260.47 1204.3 L1261.05 1204.3 L1261.64 1204.3 L1262.23 1204.3 L1262.81 1204.3 L1263.4 1204.3 L1263.98 1204.3 L1264.57 1204.3 L1265.16 1204.3 L1265.74 1204.3 L1266.33 1204.3 L1266.92 1204.3 L1267.5 1204.3 L1268.09 1204.3 L1268.68 1204.3 L1269.26 1204.3 L1269.85 1204.3 L1270.44 1204.3 L1271.02 1204.3 L1271.61 1204.3 L1272.19 1204.3 L1272.78 1204.3 L1273.37 1204.3 L1273.95 1204.3 L1274.54 1204.3 L1275.13 1204.3 L1275.71 1204.3 L1276.3 1204.3 L1276.89 1204.3 L1277.47 1204.3 L1278.06 1204.3 L1278.65 1204.3 L1279.23 1204.3 L1279.82 1204.3 L1280.4 1204.3 L1280.99 1204.3 L1281.58 1204.3 L1282.16 1204.3 L1282.75 1204.3 L1283.34 1204.3 L1283.92 1204.3 L1284.51 1204.3 L1285.1 1204.3 L1285.68 1204.3 L1286.27 1204.3 L1286.86 1204.3 L1287.44 1204.3 L1288.03 1204.3 L1288.61 1204.3 L1289.2 1204.3 L1289.79 1204.3 L1290.37 1204.3 L1290.96 1204.3 L1291.55 1204.3 L1292.13 1204.3 L1292.72 1204.3 L1293.31 1204.3 L1293.89 1204.3 L1294.48 1204.3 L1295.06 1204.3 L1295.65 1204.3 L1296.24 1204.3 L1296.82 1204.3 L1297.41 1204.3 L1298 1204.3 L1298.58 1204.3 L1299.17 1204.3 L1299.76 1204.3 L1300.34 1204.3 L1300.93 1204.3 L1301.52 1204.3 L1302.1 1204.3 L1302.69 1204.3 L1303.27 1204.3 L1303.86 1204.3 L1304.45 1204.3 L1305.03 1204.3 L1305.62 1204.3 L1306.21 1204.3 L1306.79 1204.3 L1307.38 1204.3 L1307.97 1204.3 L1308.55 1204.3 L1309.14 1204.3 L1309.73 1204.3 L1310.31 1204.3 L1310.9 1204.3 L1311.48 1204.3 L1312.07 1204.3 L1312.66 1204.3 L1313.24 1204.3 L1313.83 1204.3 L1314.42 1204.3 L1315 1204.3 L1315.59 1204.3 L1316.18 1204.3 L1316.76 1204.3 L1317.35 1204.3 L1317.93 1204.3 L1318.52 1204.3 L1319.11 1204.3 L1319.69 1204.3 L1320.28 1204.3 L1320.87 1204.3 L1321.45 1204.3 L1322.04 1204.3 L1322.63 1204.3 L1323.21 1204.3 L1323.8 1204.3 L1324.39 1204.3 L1324.97 1204.3 L1325.56 1204.3 L1326.14 1204.3 L1326.73 1204.3 L1327.32 1204.3 L1327.9 1204.3 L1328.49 1204.3 L1329.08 1204.3 L1329.66 1204.3 L1330.25 1204.3 L1330.84 1204.3 L1331.42 1204.3 L1332.01 1204.3 L1332.6 1204.3 L1333.18 1204.3 L1333.77 1204.3 L1334.35 1204.3 L1334.94 1204.3 L1335.53 1204.3 L1336.11 1204.3 L1336.7 1204.3 L1337.29 1204.3 L1337.87 1204.3 L1338.46 1204.3 L1339.05 1204.3 L1339.63 1204.3 L1340.22 1204.3 L1340.8 1204.3 L1341.39 1204.3 L1341.98 1204.3 L1342.56 1204.3 L1343.15 1204.3 L1343.74 1204.3 L1344.32 1204.3 L1344.91 1204.3 L1345.5 1204.3 L1346.08 1204.3 L1346.67 1204.3 L1347.26 1204.3 L1347.84 1204.3 L1348.43 1204.3 L1349.01 1204.3 L1349.6 1204.3 L1350.19 1204.3 L1350.77 1204.3 L1351.36 1204.3 L1351.95 1204.3 L1352.53 1204.3 L1353.12 1204.3 L1353.71 1204.3 L1354.29 1204.3 L1354.88 1204.3 L1355.47 1204.3 L1356.05 1204.3 L1356.64 1204.3 L1357.22 1204.3 L1357.81 1204.3 L1358.4 1204.3 L1358.98 1204.3 L1359.57 1204.3 L1360.16 1204.3 L1360.74 1204.3 L1361.33 1204.3 L1361.92 1204.3 L1362.5 1204.3 L1363.09 1204.3 L1363.68 1204.3 L1364.26 1204.3 L1364.85 1204.3 L1365.43 1204.3 L1366.02 1204.3 L1366.61 1204.3 L1367.19 1204.3 L1367.78 1204.3 L1368.37 1204.3 L1368.95 1204.3 L1369.54 1204.3 L1370.13 1204.3 L1370.71 1204.3 L1371.3 1204.3 L1371.88 1204.3 L1372.47 1204.3 L1373.06 1204.3 L1373.64 1204.3 L1374.23 1204.3 L1374.82 1204.3 L1375.4 1204.3 L1375.99 1204.3 L1376.58 1204.3 L1377.16 1204.3 L1377.75 1204.3 L1378.34 1204.3 L1378.92 1204.3 L1379.51 1204.3 L1380.09 1204.3 L1380.68 1204.3 L1381.27 1204.3 L1381.85 1204.3 L1382.44 1204.3 L1383.03 1204.3 L1383.61 1204.3 L1384.2 1204.3 L1384.79 1204.3 L1385.37 1204.3 L1385.96 1204.3 L1386.55 1204.3 L1387.13 1204.3 L1387.72 1204.3 L1388.3 1204.3 L1388.89 1204.3 L1389.48 1204.3 L1390.06 1204.3 L1390.65 1204.3 L1391.24 1204.3 L1391.82 1204.3 L1392.41 1204.3 L1393 1204.3 L1393.58 1204.3 L1394.17 1204.3 L1394.75 1204.3 L1395.34 1204.3 L1395.93 1204.3 L1396.51 1204.3 L1397.1 1204.3 L1397.69 1204.3 L1398.27 1204.3 L1398.86 1204.3 L1399.45 1204.3 L1400.03 1204.3 L1400.62 1204.3 L1401.21 1204.3 L1401.79 1204.3 L1402.38 1204.3 L1402.96 1204.3 L1403.55 1204.3 L1404.14 1204.3 L1404.72 1204.3 L1405.31 1204.3 L1405.9 1204.3 L1406.48 1204.3 L1407.07 1204.3 L1407.66 1204.3 L1408.24 1204.3 L1408.83 1204.3 L1409.42 1204.3 L1410 1204.3 L1410.59 1204.3 L1411.17 1204.3 L1411.76 1204.3 L1412.35 1204.3 L1412.93 1204.3 L1413.52 1204.3 L1414.11 1204.3 L1414.69 1204.3 L1415.28 1204.3 L1415.87 1204.3 L1416.45 1204.3 L1417.04 1204.3 L1417.63 1204.3 L1418.21 1204.3 L1418.8 1204.3 L1419.38 1204.3 L1419.97 1204.3 L1420.56 1204.3 L1421.14 1204.3 L1421.73 1204.3 L1422.32 1204.3 L1422.9 1204.3 L1423.49 1204.3 L1424.08 1204.3 L1424.66 1204.3 L1425.25 1204.3 L1425.83 1204.3 L1426.42 1204.3 L1427.01 1204.3 L1427.59 1204.3 L1428.18 1204.3 L1428.77 1204.3 L1429.35 1204.3 L1429.94 1204.3 L1430.53 1204.3 L1431.11 1204.3 L1431.7 1204.3 L1432.29 1204.3 L1432.87 1204.3 L1433.46 1204.3 L1434.04 1204.3 L1434.63 1204.3 L1435.22 1204.3 L1435.8 1204.3 L1436.39 1204.3 L1436.98 1204.3 L1437.56 1204.3 L1438.15 1204.3 L1438.74 1204.3 L1439.32 1204.3 L1439.91 1204.3 L1440.5 1204.3 L1441.08 1204.3 L1441.67 1204.3 L1442.25 1204.3 L1442.84 1204.3 L1443.43 1204.3 L1444.01 1204.3 L1444.6 1204.3 L1445.19 1204.3 L1445.77 1204.3 L1446.36 1204.3 L1446.95 1204.3 L1447.53 1204.3 L1448.12 1204.3 L1448.7 1204.3 L1449.29 1204.3 L1449.88 1204.3 L1450.46 1204.3 L1451.05 1204.3 L1451.64 1204.3 L1452.22 1204.3 L1452.81 1204.3 L1453.4 1204.3 L1453.98 1204.3 L1454.57 1204.3 L1455.16 1204.3 L1455.74 1204.3 L1456.33 1204.3 L1456.91 1204.3 L1457.5 1204.3 L1458.09 1204.3 L1458.67 1204.3 L1459.26 1204.3 L1459.85 1204.3 L1460.43 1204.3 L1461.02 1204.3 L1461.61 1204.3 L1462.19 1204.3 L1462.78 1204.3 L1463.37 1204.3 L1463.95 1204.3 L1464.54 1204.3 L1465.12 1204.3 L1465.71 1204.3 L1466.3 1204.3 L1466.88 1204.3 L1467.47 1204.3 L1468.06 1204.3 L1468.64 1204.3 L1469.23 1204.3 L1469.82 1204.3 L1470.4 1204.3 L1470.99 1204.3 L1471.57 1204.3 L1472.16 1204.3 L1472.75 1204.3 L1473.33 1204.3 L1473.92 1204.3 L1474.51 1204.3 L1475.09 1204.3 L1475.68 1204.3 L1476.27 1204.3 L1476.85 1204.3 L1477.44 1204.3 L1478.03 1204.3 L1478.61 1204.3 L1479.2 1204.3 L1479.78 1204.3 L1480.37 1204.3 L1480.96 1204.3 L1481.54 1204.3 L1482.13 1204.3 L1482.72 1204.3 L1483.3 1204.3 L1483.89 1204.3 L1484.48 1204.3 L1485.06 1204.3 L1485.65 1204.3 L1486.24 1204.3 L1486.82 1204.3 L1487.41 1204.3 L1487.99 1204.3 L1488.58 1204.3 L1489.17 1204.3 L1489.75 1204.3 L1490.34 1204.3 L1490.93 1204.3 L1491.51 1204.3 L1492.1 1204.3 L1492.69 1204.3 L1493.27 1204.3 L1493.86 1204.3 L1494.45 1204.3 L1495.03 1204.3 L1495.62 1204.3 L1496.2 1204.3 L1496.79 1204.3 L1497.38 1204.3 L1497.96 1204.3 L1498.55 1204.3 L1499.14 1204.3 L1499.72 1204.3 L1500.31 1204.3 L1500.9 1204.3 L1501.48 1204.3 L1502.07 1204.3 L1502.65 1204.3 L1503.24 1204.3 L1503.83 1204.3 L1504.41 1204.3 L1505 1204.3 L1505.59 1204.3 L1506.17 1204.3 L1506.76 1204.3 L1507.35 1204.3 L1507.93 1204.3 L1508.52 1204.3 L1509.11 1204.3 L1509.69 1204.3 L1510.28 1204.3 L1510.86 1204.3 L1511.45 1204.3 L1512.04 1204.3 L1512.62 1204.3 L1513.21 1204.3 L1513.8 1204.3 L1514.38 1204.3 L1514.97 1204.3 L1515.56 1204.3 L1516.14 1204.3 L1516.73 1204.3 L1517.32 1204.3 L1517.9 1204.3 L1518.49 1204.3 L1519.07 1204.3 L1519.66 1204.3 L1520.25 1204.3 L1520.83 1204.3 L1521.42 1204.3 L1522.01 1204.3 L1522.59 1204.3 L1523.18 1204.3 L1523.77 1204.3 L1524.35 1204.3 L1524.94 1204.3 L1525.52 1204.3 L1526.11 1204.3 L1526.7 1204.3 L1527.28 1204.3 L1527.87 1204.3 L1528.46 1204.3 L1529.04 1204.3 L1529.63 1204.3 L1530.22 1204.3 L1530.8 1204.3 L1531.39 1204.3 L1531.98 1204.3 L1532.56 1204.3 L1533.15 1204.3 L1533.73 1204.3 L1534.32 1204.3 L1534.91 1204.3 L1535.49 1204.3 L1536.08 1204.3 L1536.67 1204.3 L1537.25 1204.3 L1537.84 1204.3 L1538.43 1204.3 L1539.01 1204.3 L1539.6 1204.3 L1540.19 1204.3 L1540.77 1204.3 L1541.36 1204.3 L1541.94 1204.3 L1542.53 1204.3 L1543.12 1204.3 L1543.7 1204.3 L1544.29 1204.3 L1544.88 1204.3 L1545.46 1204.3 L1546.05 1204.3 L1546.64 1204.3 L1547.22 1204.3 L1547.81 1204.3 L1548.4 1204.3 L1548.98 1204.3 L1549.57 1204.3 L1550.15 1204.3 L1550.74 1204.3 L1551.33 1204.3 L1551.91 1204.3 L1552.5 1204.3 L1553.09 1204.3 L1553.67 1204.3 L1554.26 1204.3 L1554.85 1204.3 L1555.43 1204.3 L1556.02 1204.3 L1556.6 1204.3 L1557.19 1204.3 L1557.78 1204.3 L1558.36 1204.3 L1558.95 1204.3 L1559.54 1204.3 L1560.12 1204.3 L1560.71 1204.3 L1561.3 1204.3 L1561.88 1204.3 L1562.47 1204.3 L1563.06 1204.3 L1563.64 1204.3 L1564.23 1204.3 L1564.81 1204.3 L1565.4 1204.3 L1565.99 1204.3 L1566.57 1204.3 L1567.16 1204.3 L1567.75 1204.3 L1568.33 1204.3 L1568.92 1204.3 L1569.51 1204.3 L1570.09 1204.3 L1570.68 1204.3 L1571.27 1204.3 L1571.85 1204.3 L1572.44 1204.3 L1573.02 1204.3 L1573.61 1204.3 L1574.2 1204.3 L1574.78 1204.3 L1575.37 1204.3 L1575.96 1204.3 L1576.54 1204.3 L1577.13 1204.3 L1577.72 1204.3 L1578.3 1204.3 L1578.89 1204.3 L1579.47 1204.3 L1580.06 1204.3 L1580.65 1204.3 L1581.23 1204.3 L1581.82 1204.3 L1582.41 1204.3 L1582.99 1204.3 L1583.58 1204.3 L1584.17 1204.3 L1584.75 1204.3 L1585.34 1204.3 L1585.93 1204.3 L1586.51 1204.3 L1587.1 1204.3 L1587.68 1204.3 L1588.27 1204.3 L1588.86 1204.3 L1589.44 1204.3 L1590.03 1204.3 L1590.62 1204.3 L1591.2 1204.3 L1591.79 1204.3 L1592.38 1204.3 L1592.96 1204.3 L1593.55 1204.3 L1594.14 1204.3 L1594.72 1204.3 L1595.31 1204.3 L1595.89 1204.3 L1596.48 1204.3 L1597.07 1204.3 L1597.65 1204.3 L1598.24 1204.3 L1598.83 1204.3 L1599.41 1204.3 L1600 1204.3 L1600.59 1204.3 L1601.17 1204.3 L1601.76 1204.3 L1602.34 1204.3 L1602.93 1204.3 L1603.52 1204.3 L1604.1 1204.3 L1604.69 1204.3 L1605.28 1204.3 L1605.86 1204.3 L1606.45 1204.3 L1607.04 1204.3 L1607.62 1204.3 L1608.21 1204.3 L1608.8 1204.3 L1609.38 1204.3 L1609.97 1204.3 L1610.55 1204.3 L1611.14 1204.3 L1611.73 1204.3 L1612.31 1204.3 L1612.9 1204.3 L1613.49 1204.3 L1614.07 1204.3 L1614.66 1204.3 L1615.25 1204.3 L1615.83 1204.3 L1616.42 1204.3 L1617.01 1204.3 L1617.59 1204.3 L1618.18 1204.3 L1618.76 1204.3 L1619.35 1204.3 L1619.94 1204.3 L1620.52 1204.3 L1621.11 1204.3 L1621.7 1204.3 L1622.28 1204.3 L1622.87 1204.3 L1623.46 1204.3 L1624.04 1204.3 L1624.63 1204.3 L1625.22 1204.3 L1625.8 1204.3 L1626.39 1204.3 L1626.97 1204.3 L1627.56 1204.3 L1628.15 1204.3 L1628.73 1204.3 L1629.32 1204.3 L1629.91 1204.3 L1630.49 1204.3 L1631.08 1204.3 L1631.67 1204.3 L1632.25 1204.3 L1632.84 1204.3 L1633.42 1204.3 L1634.01 1204.3 L1634.6 1204.3 L1635.18 1204.3 L1635.77 1204.3 L1636.36 1204.3 L1636.94 1204.3 L1637.53 1204.3 L1638.12 1204.3 L1638.7 1204.3 L1639.29 1204.3 L1639.88 1204.3 L1640.46 1204.3 L1641.05 1204.3 L1641.63 1204.3 L1642.22 1204.3 L1642.81 1204.3 L1643.39 1204.3 L1643.98 1204.3 L1644.57 1204.3 L1645.15 1204.3 L1645.74 1204.3 L1646.33 1204.3 L1646.91 1204.3 L1647.5 1204.3 L1648.09 1204.3 L1648.67 1204.3 L1649.26 1204.3 L1649.84 1204.3 L1650.43 1204.3 L1651.02 1204.3 L1651.6 1204.3 L1652.19 1204.3 L1652.78 1204.3 L1653.36 1204.3 L1653.95 1204.3 L1654.54 1204.3 L1655.12 1204.3 L1655.71 1204.3 L1656.29 1204.3 L1656.88 1204.3 L1657.47 1204.3 L1658.05 1204.3 L1658.64 1204.3 L1659.23 1204.3 L1659.81 1204.3 L1660.4 1204.3 L1660.99 1204.3 L1661.57 1204.3 L1662.16 1204.3 L1662.75 1204.3 L1663.33 1204.3 L1663.92 1204.3 L1664.5 1204.3 L1665.09 1204.3 L1665.68 1204.3 L1666.26 1204.3 L1666.85 1204.3 L1667.44 1204.3 L1668.02 1204.3 L1668.61 1204.3 L1669.2 1204.3 L1669.78 1204.3 L1670.37 1204.3 L1670.96 1204.3 L1671.54 1204.3 L1672.13 1204.3 L1672.71 1204.3 L1673.3 1204.3 L1673.89 1204.3 L1674.47 1204.3 L1675.06 1204.3 L1675.65 1204.3 L1676.23 1204.3 L1676.82 1204.3 L1677.41 1204.3 L1677.99 1204.3 L1678.58 1204.3 L1679.17 1204.3 L1679.75 1204.3 L1680.34 1204.3 L1680.92 1204.3 L1681.51 1204.3 L1682.1 1204.3 L1682.68 1204.3 L1683.27 1204.3 L1683.86 1204.3 L1684.44 1204.3 L1685.03 1204.3 L1685.62 1204.3 L1686.2 1204.3 L1686.79 1204.3 L1687.37 1204.3 L1687.96 1204.3 L1688.55 1204.3 L1689.13 1204.3 L1689.72 1204.3 L1690.31 1204.3 L1690.89 1204.3 L1691.48 1204.3 L1692.07 1204.3 L1692.65 1204.3 L1693.24 1204.3 L1693.83 1204.3 L1694.41 1204.3 L1695 1204.3 L1695.58 1204.3 L1696.17 1204.3 L1696.76 1204.3 L1697.34 1204.3 L1697.93 1204.3 L1698.52 1204.3 L1699.1 1204.3 L1699.69 1204.3 L1700.28 1204.3 L1700.86 1204.3 L1701.45 1204.3 L1702.04 1204.3 L1702.62 1204.3 L1703.21 1204.3 L1703.79 1204.3 L1704.38 1204.3 L1704.97 1204.3 L1705.55 1204.3 L1706.14 1204.3 L1706.73 1204.3 L1707.31 1204.3 L1707.9 1204.3 L1708.49 1204.3 L1709.07 1204.3 L1709.66 1204.3 L1710.24 1204.3 L1710.83 1204.3 L1711.42 1204.3 L1712 1204.3 L1712.59 1204.3 L1713.18 1204.3 L1713.76 1204.3 L1714.35 1204.3 L1714.94 1204.3 L1715.52 1204.3 L1716.11 1204.3 L1716.7 1204.3 L1717.28 1204.3 L1717.87 1204.3 L1718.45 1204.3 L1719.04 1204.3 L1719.63 1204.3 L1720.21 1204.3 L1720.8 1204.3 L1721.39 1204.3 L1721.97 1204.3 L1722.56 1204.3 L1723.15 1204.3 L1723.73 1204.3 L1724.32 1204.3 L1724.91 1204.3 L1725.49 1204.3 L1726.08 1204.3 L1726.66 1204.3 L1727.25 1204.3 L1727.84 1204.3 L1728.42 1204.3 L1729.01 1204.3 L1729.6 1204.3 L1730.18 1204.3 L1730.77 1204.3 L1731.36 1204.3 L1731.94 1204.3 L1732.53 1204.3 L1733.11 1204.3 L1733.7 1204.3 L1734.29 1204.3 L1734.87 1204.3 L1735.46 1204.3 L1736.05 1204.3 L1736.63 1204.3 L1737.22 1204.3 L1737.81 1204.3 L1738.39 1204.3 L1738.98 1204.3 L1739.57 1204.3 L1740.15 1204.3 L1740.74 1204.3 L1741.32 1204.3 L1741.91 1204.3 L1742.5 1204.3 L1743.08 1204.3 L1743.67 1204.3 L1744.26 1204.3 L1744.84 1204.3 L1745.43 1204.3 L1746.02 1204.3 L1746.6 1204.3 L1747.19 1204.3 L1747.78 1204.3 L1748.36 1204.3 L1748.95 1204.3 L1749.53 1204.3 L1750.12 1204.3 L1750.71 1204.3 L1751.29 1204.3 L1751.88 1204.3 L1752.47 1204.3 L1753.05 1204.3 L1753.64 1204.3 L1754.23 1204.3 L1754.81 1204.3 L1755.4 1204.3 L1755.99 1204.3 L1756.57 1204.3 L1757.16 1204.3 L1757.74 1204.3 L1758.33 1204.3 L1758.92 1204.3 L1759.5 1204.3 L1760.09 1204.3 L1760.68 1204.3 L1761.26 1204.3 L1761.85 1204.3 L1762.44 1204.3 L1763.02 1204.3 L1763.61 1204.3 L1764.19 1204.3 L1764.78 1204.3 L1765.37 1204.3 L1765.95 1204.3 L1766.54 1204.3 L1767.13 1204.3 L1767.71 1204.3 L1768.3 1204.3 L1768.89 1204.3 L1769.47 1204.3 L1770.06 1204.3 L1770.65 1204.3 L1771.23 1204.3 L1771.82 1204.3 L1772.4 1204.3 L1772.99 1204.3 L1773.58 1204.3 L1774.16 1204.3 L1774.75 1204.3 L1775.34 1204.3 L1775.92 1204.3 L1776.51 1204.3 L1777.1 1204.3 L1777.68 1204.3 L1778.27 1204.3 L1778.86 1204.3 L1779.44 1204.3 L1780.03 1204.3 L1780.61 1204.3 L1781.2 1204.3 L1781.79 1204.3 L1782.37 1204.3 L1782.96 1204.3 L1783.55 1204.3 L1784.13 1204.3 L1784.72 1204.3 L1785.31 1204.3 L1785.89 1204.3 L1786.48 1204.3 L1787.06 1204.3 L1787.65 1204.3 L1788.24 1204.3 L1788.82 1204.3 L1789.41 1204.3 L1790 1204.3 L1790.58 1204.3 L1791.17 1204.3 L1791.76 1204.3 L1792.34 1204.3 L1792.93 1204.3 L1793.52 1204.3 L1794.1 1204.3 L1794.69 1204.3 L1795.27 1204.3 L1795.86 1204.3 L1796.45 1204.3 L1797.03 1204.3 L1797.62 1204.3 L1798.21 1204.3 L1798.79 1204.3 L1799.38 1204.3 L1799.97 1204.3 L1800.55 1204.3 L1801.14 1204.3 L1801.73 1204.3 L1802.31 1204.3 L1802.9 1204.3 L1803.48 1204.3 L1804.07 1204.3 L1804.66 1204.3 L1805.24 1204.3 L1805.83 1204.3 L1806.42 1204.3 L1807 1204.3 L1807.59 1204.3 L1808.18 1204.3 L1808.76 1204.3 L1809.35 1204.3 L1809.94 1204.3 L1810.52 1204.3 L1811.11 1204.3 L1811.69 1204.3 L1812.28 1204.3 L1812.87 1204.3 L1813.45 1204.3 L1814.04 1204.3 L1814.63 1204.3 L1815.21 1204.3 L1815.8 1204.3 L1816.39 1204.3 L1816.97 1204.3 L1817.56 1204.3 L1818.14 1204.3 L1818.73 1204.3 L1819.32 1204.3 L1819.9 1204.3 L1820.49 1204.3 L1821.08 1204.3 L1821.66 1204.3 L1822.25 1204.3 L1822.84 1204.3 L1823.42 1204.3 L1824.01 1204.3 L1824.6 1204.3 L1825.18 1204.3 L1825.77 1204.3 L1826.35 1204.3 L1826.94 1204.3 L1827.53 1204.3 L1828.11 1204.3 L1828.7 1204.3 L1829.29 1204.3 L1829.87 1204.3 L1830.46 1204.3 L1831.05 1204.3 L1831.63 1204.3 L1832.22 1204.3 L1832.81 1204.3 L1833.39 1204.3 L1833.98 1204.3 L1834.56 1204.3 L1835.15 1204.3 L1835.74 1204.3 L1836.32 1204.3 L1836.91 1204.3 L1837.5 1204.3 L1838.08 1204.3 L1838.67 1204.3 L1839.26 1204.3 L1839.84 1204.3 L1840.43 1204.3 L1841.01 1204.3 L1841.6 1204.3 L1842.19 1204.3 L1842.77 1204.3 L1843.36 1204.3 L1843.95 1204.3 L1844.53 1204.3 L1845.12 1204.3 L1845.71 1204.3 L1846.29 1204.3 L1846.88 1204.3 L1847.47 1204.3 L1848.05 1204.3 L1848.64 1204.3 L1849.22 1204.3 L1849.81 1204.3 L1850.4 1204.3 L1850.98 1204.3 L1851.57 1204.3 L1852.16 1204.3 L1852.74 1204.3 L1853.33 1204.3 L1853.92 1204.3 L1854.5 1204.3 L1855.09 1204.3 L1855.68 1204.3 L1856.26 1204.3 L1856.85 1204.3 L1857.43 1204.3 L1858.02 1204.3 L1858.61 1204.3 L1859.19 1204.3 L1859.78 1204.3 L1860.37 1204.3 L1860.95 1204.3 L1861.54 1204.3 L1862.13 1204.3 L1862.71 1204.3 L1863.3 1204.3 L1863.88 1204.3 L1864.47 1204.3 L1865.06 1204.3 L1865.64 1204.3 L1866.23 1204.3 L1866.82 1204.3 L1867.4 1204.3 L1867.99 1204.3 L1868.58 1204.3 L1869.16 1204.3 L1869.75 1204.3 L1870.34 1204.3 L1870.92 1204.3 L1871.51 1204.3 L1872.09 1204.3 L1872.68 1204.3 L1873.27 1204.3 L1873.85 1204.3 L1874.44 1204.3 L1875.03 1204.3 L1875.61 1204.3 L1876.2 1204.3 L1876.79 1204.3 L1877.37 1204.3 L1877.96 1204.3 L1878.55 1204.3 L1879.13 1204.3 L1879.72 1204.3 L1880.3 1204.3 L1880.89 1204.3 L1881.48 1204.3 L1882.06 1204.3 L1882.65 1204.3 L1883.24 1204.3 L1883.82 1204.3 L1884.41 1204.3 L1885 1204.3 L1885.58 1204.3 L1886.17 1204.3 L1886.76 1204.3 L1887.34 1204.3 L1887.93 1204.3 L1888.51 1204.3 L1889.1 1204.3 L1889.69 1204.3 L1890.27 1204.3 L1890.86 1204.3 L1891.45 1204.3 L1892.03 1204.3 L1892.62 1204.3 L1893.21 1204.3 L1893.79 1204.3 L1894.38 1204.3 L1894.96 1204.3 L1895.55 1204.3 L1896.14 1204.3 L1896.72 1204.3 L1897.31 1204.3 L1897.9 1204.3 L1898.48 1204.3 L1899.07 1204.3 L1899.66 1204.3 L1900.24 1204.3 L1900.83 1204.3 L1901.42 1204.3 L1902 1204.3 L1902.59 1204.3 L1903.17 1204.3 L1903.76 1204.3 L1904.35 1204.3 L1904.93 1204.3 L1905.52 1204.3 L1906.11 1204.3 L1906.69 1204.3 L1907.28 1204.3 L1907.87 1204.3 L1908.45 1204.3 L1909.04 1204.3 L1909.63 1204.3 L1910.21 1204.3 L1910.8 1204.3 L1911.38 1204.3 L1911.97 1204.3 L1912.56 1204.3 L1913.14 1204.3 L1913.73 1204.3 L1914.32 1204.3 L1914.9 1204.3 L1915.49 1204.3 L1916.08 1204.3 L1916.66 1204.3 L1917.25 1204.3 L1917.83 1204.3 L1918.42 1204.3 L1919.01 1204.3 L1919.59 1204.3 L1920.18 1204.3 L1920.77 1204.3 L1921.35 1204.3 L1921.94 1204.3 L1922.53 1204.3 L1923.11 1204.3 L1923.7 1204.3 L1924.29 1204.3 L1924.87 1204.3 L1925.46 1204.3 L1926.04 1204.3 L1926.63 1204.3 L1927.22 1204.3 L1927.8 1204.3 L1928.39 1204.3 L1928.98 1204.3 L1929.56 1204.3 L1930.15 1204.3 L1930.74 1204.3 L1931.32 1204.3 L1931.91 1204.3 L1932.5 1204.3 L1933.08 1204.3 L1933.67 1204.3 L1934.25 1204.3 L1934.84 1204.3 L1935.43 1204.3 L1936.01 1204.3 L1936.6 1204.3 L1937.19 1204.3 L1937.77 1204.3 L1938.36 1204.3 L1938.95 1204.3 L1939.53 1204.3 L1940.12 1204.3 L1940.71 1204.3 L1941.29 1204.3 L1941.88 1204.3 L1942.46 1204.3 L1943.05 1204.3 L1943.64 1204.3 L1944.22 1204.3 L1944.81 1204.3 L1945.4 1204.3 L1945.98 1204.3 L1946.57 1204.3 L1947.16 1204.3 L1947.74 1204.3 L1948.33 1204.3 L1948.91 1204.3 L1949.5 1204.3 L1950.09 1204.3 L1950.67 1204.3 L1951.26 1204.3 L1951.85 1204.3 L1952.43 1204.3 L1953.02 1204.3 L1953.61 1204.3 L1954.19 1204.3 L1954.78 1204.3 L1955.37 1204.3 L1955.95 1204.3 L1956.54 1204.3 L1957.12 1204.3 L1957.71 1204.3 L1958.3 1204.3 L1958.88 1204.3 L1959.47 1204.3 L1960.06 1204.3 L1960.64 1204.3 L1961.23 1204.3 L1961.82 1204.3 L1962.4 1204.3 L1962.99 1204.3 L1963.58 1204.3 L1964.16 1204.3 L1964.75 1204.3 L1965.33 1204.3 L1965.92 1204.3 L1966.51 1204.3 L1967.09 1204.3 L1967.68 1204.3 L1968.27 1204.3 L1968.85 1204.3 L1969.44 1204.3 L1970.03 1204.3 L1970.61 1204.3 L1971.2 1204.3 L1971.78 1204.3 L1972.37 1204.3 L1972.96 1204.3 L1973.54 1204.3 L1974.13 1204.3 L1974.72 1204.3 L1975.3 1204.3 L1975.89 1204.3 L1976.48 1204.3 L1977.06 1204.3 L1977.65 1204.3 L1978.24 1204.3 L1978.82 1204.3 L1979.41 1204.3 L1979.99 1204.3 L1980.58 1204.3 L1981.17 1204.3 L1981.75 1204.3 L1982.34 1204.3 L1982.93 1204.3 L1983.51 1204.3 L1984.1 1204.3 L1984.69 1204.3 L1985.27 1204.3 L1985.86 1204.3 L1986.45 1204.3 L1987.03 1204.3 L1987.62 1204.3 L1988.2 1204.3 L1988.79 1204.3 L1989.38 1204.3 L1989.96 1204.3 L1990.55 1204.3 L1991.14 1204.3 L1991.72 1204.3 L1992.31 1204.3 L1992.9 1204.3 L1993.48 1204.3 L1994.07 1204.3 L1994.65 1204.3 L1995.24 1204.3 L1995.83 1204.3 L1996.41 1204.3 L1997 1204.3 L1997.59 1204.3 L1998.17 1204.3 L1998.76 1204.3 L1999.35 1204.3 L1999.93 1204.3 L2000.52 1204.3 L2001.11 1204.3 L2001.69 1204.3 L2002.28 1204.3 L2002.86 1204.3 L2003.45 1204.3 L2004.04 1204.3 L2004.62 1204.3 L2005.21 1204.3 L2005.8 1204.3 L2006.38 1204.3 L2006.97 1204.3 L2007.56 1204.3 L2008.14 1204.3 L2008.73 1204.3 L2009.32 1204.3 L2009.9 1204.3 L2010.49 1204.3 L2011.07 1204.3 L2011.66 1204.3 L2012.25 1204.3 L2012.83 1204.3 L2013.42 1204.3 L2014.01 1204.3 L2014.59 1204.3 L2015.18 1204.3 L2015.77 1204.3 L2016.35 1204.3 L2016.94 1204.3 L2017.53 1204.3 L2018.11 1204.3 L2018.7 1204.3 L2019.28 1204.3 L2019.87 1204.3 L2020.46 1204.3 L2021.04 1204.3 L2021.63 1204.3 L2022.22 1204.3 L2022.8 1204.3 L2023.39 1204.3 L2023.98 1204.3 L2024.56 1204.3 L2025.15 1204.3 L2025.73 1204.3 L2026.32 1204.3 L2026.91 1204.3 L2027.49 1204.3 L2028.08 1204.3 L2028.67 1204.3 L2029.25 1204.3 L2029.84 1204.3 L2030.43 1204.3 L2031.01 1204.3 L2031.6 1204.3 L2032.19 1204.3 L2032.77 1204.3 L2033.36 1204.3 L2033.94 1204.3 L2034.53 1204.3 L2035.12 1204.3 L2035.7 1204.3 L2036.29 1204.3 L2036.88 1204.3 L2037.46 1204.3 L2038.05 1204.3 L2038.64 1204.3 L2039.22 1204.3 L2039.81 1204.3 L2040.4 1204.3 L2040.98 1204.3 L2041.57 1204.3 L2042.15 1204.3 L2042.74 1204.3 L2043.33 1204.3 L2043.91 1204.3 L2044.5 1204.3 L2045.09 1204.3 L2045.67 1204.3 L2046.26 1204.3 L2046.85 1204.3 L2047.43 1204.3 L2048.02 1204.3 L2048.6 1204.3 L2049.19 1204.3 L2049.78 1204.3 L2050.36 1204.3 L2050.95 1204.3 L2051.54 1204.3 L2052.12 1204.3 L2052.71 1204.3 L2053.3 1204.3 L2053.88 1204.3 L2054.47 1204.3 L2055.06 1204.3 L2055.64 1204.3 L2056.23 1204.3 L2056.81 1204.3 L2057.4 1204.3 L2057.99 1204.3 L2058.57 1204.3 L2059.16 1204.3 L2059.75 1204.3 L2060.33 1204.3 L2060.92 1204.3 L2061.51 1204.3 L2062.09 1204.3 L2062.68 1204.3 L2063.27 1204.3 L2063.85 1204.3 L2064.44 1204.3 L2065.02 1204.3 L2065.61 1204.3 L2066.2 1204.3 L2066.78 1204.3 L2067.37 1204.3 L2067.96 1204.3 L2068.54 1204.3 L2069.13 1204.3 L2069.72 1204.3 L2070.3 1204.3 L2070.89 1204.3 L2071.48 1204.3 L2072.06 1204.3 L2072.65 1204.3 L2073.23 1204.3 L2073.82 1204.3 L2074.41 1204.3 L2074.99 1204.3 L2075.58 1204.3 L2076.17 1204.3 L2076.75 1204.3 L2077.34 1204.3 L2077.93 1204.3 L2078.51 1204.3 L2079.1 1204.3 L2079.68 1204.3 L2080.27 1204.3 L2080.86 1204.3 L2081.44 1204.3 L2082.03 1204.3 L2082.62 1204.3 L2083.2 1204.3 L2083.79 1204.3 L2084.38 1204.3 L2084.96 1204.3 L2085.55 1204.3 L2086.14 1204.3 L2086.72 1204.3 L2087.31 1204.3 L2087.89 1204.3 L2088.48 1204.3 L2089.07 1204.3 L2089.65 1204.3 L2090.24 1204.3 L2090.83 1204.3 L2091.41 1204.3 L2092 1204.3 L2092.59 1204.3 L2093.17 1204.3 L2093.76 1204.3 L2094.35 1204.3 L2094.93 1204.3 L2095.52 1204.3 L2096.1 1204.3 L2096.69 1204.3 L2097.28 1204.3 L2097.86 1204.3 L2098.45 1204.3 L2099.04 1204.3 L2099.62 1204.3 L2100.21 1204.3 L2100.8 1204.3 L2101.38 1204.3 L2101.97 1204.3 L2102.55 1204.3 L2103.14 1204.3 L2103.73 1204.3 L2104.31 1204.3 L2104.9 1204.3 L2105.49 1204.3 L2106.07 1204.3 L2106.66 1204.3 L2107.25 1204.3 L2107.83 1204.3 L2108.42 1204.3 L2109.01 1204.3 L2109.59 1204.3 L2110.18 1204.3 L2110.76 1204.3 L2111.35 1204.3 L2111.94 1204.3 L2112.52 1204.3 L2113.11 1204.3 L2113.7 1204.3 L2114.28 1204.3 L2114.87 1204.3 L2115.46 1204.3 L2116.04 1204.3 L2116.63 1204.3 L2117.22 1204.3 L2117.8 1204.3 L2118.39 1204.3 L2118.97 1204.3 L2119.56 1204.3 L2120.15 1204.3 L2120.73 1204.3 L2121.32 1204.3 L2121.91 1204.3 L2122.49 1204.3 L2123.08 1204.3 L2123.67 1204.3 L2124.25 1204.3 L2124.84 1204.3 L2125.42 1204.3 L2126.01 1204.3 L2126.6 1204.3 L2127.18 1204.3 L2127.77 1204.3 L2128.36 1204.3 L2128.94 1204.3 L2129.53 1204.3 L2130.12 1204.3 L2130.7 1204.3 L2131.29 1204.3 L2131.88 1204.3 L2132.46 1204.3 L2133.05 1204.3 L2133.63 1204.3 L2134.22 1204.3 L2134.81 1204.3 L2135.39 1204.3 L2135.98 1204.3 L2136.57 1204.3 L2137.15 1204.3 L2137.74 1204.3 L2138.33 1204.3 L2138.91 1204.3 L2139.5 1204.3 L2140.09 1204.3 L2140.67 1204.3 L2141.26 1204.3 L2141.84 1204.3 L2142.43 1204.3 L2143.02 1204.3 L2143.6 1204.3 L2144.19 1204.3 L2144.78 1204.3 L2145.36 1204.3 L2145.95 1204.3 L2146.54 1204.3 L2147.12 1204.3 L2147.71 1204.3 L2148.3 1204.3 L2148.88 1204.3 L2149.47 1204.3 L2150.05 1204.3 L2150.64 1204.3 L2151.23 1204.3 L2151.81 1204.3 L2152.4 1204.3 L2152.99 1204.3 L2153.57 1204.3 L2154.16 1204.3 L2154.75 1204.3 L2155.33 1204.3 L2155.92 1204.3 L2156.5 1204.3 L2157.09 1204.3 L2157.68 1204.3 L2158.26 1204.3 L2158.26 1204.14 L2157.68 1204.14 L2157.09 1204.14 L2156.5 1204.14 L2155.92 1204.14 L2155.33 1204.14 L2154.75 1204.14 L2154.16 1204.14 L2153.57 1204.14 L2152.99 1204.14 L2152.4 1204.14 L2151.81 1204.14 L2151.23 1204.14 L2150.64 1204.14 L2150.05 1204.14 L2149.47 1204.14 L2148.88 1204.14 L2148.3 1204.14 L2147.71 1204.14 L2147.12 1204.14 L2146.54 1204.14 L2145.95 1204.14 L2145.36 1204.14 L2144.78 1204.14 L2144.19 1204.14 L2143.6 1204.14 L2143.02 1204.14 L2142.43 1204.14 L2141.84 1204.14 L2141.26 1204.14 L2140.67 1204.14 L2140.09 1204.14 L2139.5 1204.14 L2138.91 1204.14 L2138.33 1204.14 L2137.74 1204.14 L2137.15 1204.14 L2136.57 1204.14 L2135.98 1204.14 L2135.39 1204.14 L2134.81 1204.14 L2134.22 1204.14 L2133.63 1204.14 L2133.05 1204.14 L2132.46 1204.14 L2131.88 1204.14 L2131.29 1204.14 L2130.7 1204.14 L2130.12 1204.14 L2129.53 1204.14 L2128.94 1204.14 L2128.36 1204.14 L2127.77 1204.14 L2127.18 1204.14 L2126.6 1204.14 L2126.01 1204.14 L2125.42 1204.14 L2124.84 1204.14 L2124.25 1204.14 L2123.67 1204.14 L2123.08 1204.14 L2122.49 1204.14 L2121.91 1204.14 L2121.32 1204.14 L2120.73 1204.14 L2120.15 1204.14 L2119.56 1204.14 L2118.97 1204.14 L2118.39 1204.14 L2117.8 1204.14 L2117.22 1204.14 L2116.63 1204.14 L2116.04 1204.14 L2115.46 1204.14 L2114.87 1204.14 L2114.28 1204.14 L2113.7 1204.14 L2113.11 1204.14 L2112.52 1204.14 L2111.94 1204.14 L2111.35 1204.14 L2110.76 1204.14 L2110.18 1204.14 L2109.59 1204.14 L2109.01 1204.14 L2108.42 1204.14 L2107.83 1204.14 L2107.25 1204.14 L2106.66 1204.14 L2106.07 1204.14 L2105.49 1204.14 L2104.9 1204.14 L2104.31 1204.14 L2103.73 1204.14 L2103.14 1204.14 L2102.55 1204.14 L2101.97 1204.14 L2101.38 1204.14 L2100.8 1204.14 L2100.21 1204.14 L2099.62 1204.14 L2099.04 1204.14 L2098.45 1204.14 L2097.86 1204.14 L2097.28 1204.14 L2096.69 1204.14 L2096.1 1204.14 L2095.52 1204.14 L2094.93 1204.14 L2094.35 1204.14 L2093.76 1204.14 L2093.17 1204.14 L2092.59 1204.14 L2092 1204.14 L2091.41 1204.14 L2090.83 1204.14 L2090.24 1204.14 L2089.65 1204.14 L2089.07 1204.14 L2088.48 1204.14 L2087.89 1204.14 L2087.31 1204.14 L2086.72 1204.14 L2086.14 1204.14 L2085.55 1204.14 L2084.96 1204.14 L2084.38 1204.14 L2083.79 1204.14 L2083.2 1204.14 L2082.62 1204.14 L2082.03 1204.14 L2081.44 1204.14 L2080.86 1204.14 L2080.27 1204.14 L2079.68 1204.14 L2079.1 1204.14 L2078.51 1204.14 L2077.93 1204.14 L2077.34 1204.14 L2076.75 1204.14 L2076.17 1204.14 L2075.58 1204.14 L2074.99 1204.14 L2074.41 1204.14 L2073.82 1204.14 L2073.23 1204.14 L2072.65 1204.14 L2072.06 1204.14 L2071.48 1204.14 L2070.89 1204.14 L2070.3 1204.14 L2069.72 1204.14 L2069.13 1204.14 L2068.54 1204.14 L2067.96 1204.14 L2067.37 1204.14 L2066.78 1204.14 L2066.2 1204.14 L2065.61 1204.14 L2065.02 1204.14 L2064.44 1204.14 L2063.85 1204.14 L2063.27 1204.14 L2062.68 1204.14 L2062.09 1204.14 L2061.51 1204.14 L2060.92 1204.14 L2060.33 1204.14 L2059.75 1204.14 L2059.16 1204.14 L2058.57 1204.14 L2057.99 1204.14 L2057.4 1204.14 L2056.81 1204.14 L2056.23 1204.14 L2055.64 1204.14 L2055.06 1204.14 L2054.47 1204.14 L2053.88 1204.14 L2053.3 1204.14 L2052.71 1204.14 L2052.12 1204.14 L2051.54 1204.14 L2050.95 1204.14 L2050.36 1204.14 L2049.78 1204.14 L2049.19 1204.14 L2048.6 1204.14 L2048.02 1204.14 L2047.43 1204.14 L2046.85 1204.14 L2046.26 1204.14 L2045.67 1204.14 L2045.09 1204.14 L2044.5 1204.14 L2043.91 1204.14 L2043.33 1204.14 L2042.74 1204.14 L2042.15 1204.14 L2041.57 1204.14 L2040.98 1204.14 L2040.4 1204.14 L2039.81 1204.14 L2039.22 1204.14 L2038.64 1204.14 L2038.05 1204.14 L2037.46 1204.14 L2036.88 1204.14 L2036.29 1204.14 L2035.7 1204.14 L2035.12 1204.14 L2034.53 1204.14 L2033.94 1204.14 L2033.36 1204.14 L2032.77 1204.14 L2032.19 1204.14 L2031.6 1204.14 L2031.01 1204.14 L2030.43 1204.14 L2029.84 1204.14 L2029.25 1204.14 L2028.67 1204.14 L2028.08 1204.14 L2027.49 1204.14 L2026.91 1204.14 L2026.32 1204.14 L2025.73 1204.14 L2025.15 1204.14 L2024.56 1204.14 L2023.98 1204.14 L2023.39 1204.14 L2022.8 1204.14 L2022.22 1204.14 L2021.63 1204.14 L2021.04 1204.14 L2020.46 1204.14 L2019.87 1204.14 L2019.28 1204.14 L2018.7 1204.14 L2018.11 1204.14 L2017.53 1204.14 L2016.94 1204.14 L2016.35 1204.14 L2015.77 1204.14 L2015.18 1204.14 L2014.59 1204.14 L2014.01 1204.14 L2013.42 1204.14 L2012.83 1204.14 L2012.25 1204.14 L2011.66 1204.14 L2011.07 1204.14 L2010.49 1204.14 L2009.9 1204.14 L2009.32 1204.14 L2008.73 1204.14 L2008.14 1204.14 L2007.56 1204.14 L2006.97 1204.14 L2006.38 1204.14 L2005.8 1204.14 L2005.21 1204.14 L2004.62 1204.14 L2004.04 1204.14 L2003.45 1204.14 L2002.86 1204.14 L2002.28 1204.14 L2001.69 1204.14 L2001.11 1204.14 L2000.52 1204.14 L1999.93 1204.14 L1999.35 1204.14 L1998.76 1204.14 L1998.17 1204.14 L1997.59 1204.14 L1997 1204.14 L1996.41 1204.14 L1995.83 1204.14 L1995.24 1204.14 L1994.65 1204.14 L1994.07 1204.14 L1993.48 1204.14 L1992.9 1204.14 L1992.31 1204.14 L1991.72 1204.14 L1991.14 1204.14 L1990.55 1204.14 L1989.96 1204.14 L1989.38 1204.14 L1988.79 1204.14 L1988.2 1204.14 L1987.62 1204.14 L1987.03 1204.14 L1986.45 1204.14 L1985.86 1204.14 L1985.27 1204.14 L1984.69 1204.14 L1984.1 1204.14 L1983.51 1204.14 L1982.93 1204.14 L1982.34 1204.14 L1981.75 1204.14 L1981.17 1204.14 L1980.58 1204.14 L1979.99 1204.14 L1979.41 1204.14 L1978.82 1204.14 L1978.24 1204.14 L1977.65 1204.14 L1977.06 1204.14 L1976.48 1204.14 L1975.89 1204.14 L1975.3 1204.14 L1974.72 1204.14 L1974.13 1204.14 L1973.54 1204.14 L1972.96 1204.14 L1972.37 1204.14 L1971.78 1204.14 L1971.2 1204.14 L1970.61 1204.14 L1970.03 1204.14 L1969.44 1204.14 L1968.85 1204.14 L1968.27 1204.14 L1967.68 1204.14 L1967.09 1204.14 L1966.51 1204.14 L1965.92 1204.14 L1965.33 1204.14 L1964.75 1204.14 L1964.16 1204.14 L1963.58 1204.14 L1962.99 1204.14 L1962.4 1204.14 L1961.82 1204.14 L1961.23 1204.14 L1960.64 1204.14 L1960.06 1204.14 L1959.47 1204.14 L1958.88 1204.14 L1958.3 1204.14 L1957.71 1204.14 L1957.12 1204.14 L1956.54 1204.14 L1955.95 1204.14 L1955.37 1204.14 L1954.78 1204.14 L1954.19 1204.14 L1953.61 1204.14 L1953.02 1204.14 L1952.43 1204.14 L1951.85 1204.14 L1951.26 1204.14 L1950.67 1204.14 L1950.09 1204.14 L1949.5 1204.14 L1948.91 1204.14 L1948.33 1204.14 L1947.74 1204.14 L1947.16 1204.14 L1946.57 1204.14 L1945.98 1204.14 L1945.4 1204.14 L1944.81 1204.14 L1944.22 1204.14 L1943.64 1204.14 L1943.05 1204.14 L1942.46 1204.14 L1941.88 1204.14 L1941.29 1204.14 L1940.71 1204.14 L1940.12 1204.14 L1939.53 1204.14 L1938.95 1204.14 L1938.36 1204.14 L1937.77 1204.14 L1937.19 1204.14 L1936.6 1204.14 L1936.01 1204.14 L1935.43 1204.14 L1934.84 1204.14 L1934.25 1204.14 L1933.67 1204.14 L1933.08 1204.14 L1932.5 1204.14 L1931.91 1204.14 L1931.32 1204.14 L1930.74 1204.14 L1930.15 1204.14 L1929.56 1204.14 L1928.98 1204.14 L1928.39 1204.14 L1927.8 1204.14 L1927.22 1204.14 L1926.63 1204.14 L1926.04 1204.14 L1925.46 1204.14 L1924.87 1204.14 L1924.29 1204.14 L1923.7 1204.14 L1923.11 1204.14 L1922.53 1204.14 L1921.94 1204.14 L1921.35 1204.14 L1920.77 1204.14 L1920.18 1204.14 L1919.59 1204.14 L1919.01 1204.14 L1918.42 1204.14 L1917.83 1204.14 L1917.25 1204.14 L1916.66 1204.14 L1916.08 1204.14 L1915.49 1204.14 L1914.9 1204.14 L1914.32 1204.14 L1913.73 1204.14 L1913.14 1204.14 L1912.56 1204.14 L1911.97 1204.14 L1911.38 1204.14 L1910.8 1204.14 L1910.21 1204.14 L1909.63 1204.14 L1909.04 1204.14 L1908.45 1204.14 L1907.87 1204.14 L1907.28 1204.14 L1906.69 1204.14 L1906.11 1204.14 L1905.52 1204.14 L1904.93 1204.14 L1904.35 1204.14 L1903.76 1204.14 L1903.17 1204.14 L1902.59 1204.14 L1902 1204.14 L1901.42 1204.14 L1900.83 1204.14 L1900.24 1204.14 L1899.66 1204.14 L1899.07 1204.14 L1898.48 1204.14 L1897.9 1204.14 L1897.31 1204.14 L1896.72 1204.14 L1896.14 1204.14 L1895.55 1204.14 L1894.96 1204.14 L1894.38 1204.14 L1893.79 1204.14 L1893.21 1204.14 L1892.62 1204.14 L1892.03 1204.14 L1891.45 1204.14 L1890.86 1204.14 L1890.27 1204.14 L1889.69 1204.14 L1889.1 1204.14 L1888.51 1204.14 L1887.93 1204.14 L1887.34 1204.14 L1886.76 1204.14 L1886.17 1204.14 L1885.58 1204.14 L1885 1204.14 L1884.41 1204.14 L1883.82 1204.14 L1883.24 1204.14 L1882.65 1204.14 L1882.06 1204.14 L1881.48 1204.14 L1880.89 1204.14 L1880.3 1204.14 L1879.72 1204.14 L1879.13 1204.14 L1878.55 1204.14 L1877.96 1204.14 L1877.37 1204.14 L1876.79 1204.14 L1876.2 1204.14 L1875.61 1204.14 L1875.03 1204.14 L1874.44 1204.14 L1873.85 1204.14 L1873.27 1204.14 L1872.68 1204.14 L1872.09 1204.14 L1871.51 1204.14 L1870.92 1204.14 L1870.34 1204.14 L1869.75 1204.14 L1869.16 1204.14 L1868.58 1204.14 L1867.99 1204.14 L1867.4 1204.14 L1866.82 1204.14 L1866.23 1204.14 L1865.64 1204.14 L1865.06 1204.14 L1864.47 1204.14 L1863.88 1204.14 L1863.3 1204.14 L1862.71 1204.14 L1862.13 1204.14 L1861.54 1204.14 L1860.95 1204.14 L1860.37 1204.14 L1859.78 1204.14 L1859.19 1204.14 L1858.61 1204.14 L1858.02 1204.14 L1857.43 1204.14 L1856.85 1204.14 L1856.26 1204.14 L1855.68 1204.14 L1855.09 1204.14 L1854.5 1204.14 L1853.92 1204.14 L1853.33 1204.14 L1852.74 1204.14 L1852.16 1204.14 L1851.57 1204.14 L1850.98 1204.14 L1850.4 1204.14 L1849.81 1204.14 L1849.22 1204.14 L1848.64 1204.14 L1848.05 1204.14 L1847.47 1204.14 L1846.88 1204.14 L1846.29 1204.14 L1845.71 1204.14 L1845.12 1204.14 L1844.53 1204.14 L1843.95 1204.14 L1843.36 1204.14 L1842.77 1204.14 L1842.19 1204.14 L1841.6 1204.14 L1841.01 1204.14 L1840.43 1204.14 L1839.84 1204.14 L1839.26 1204.14 L1838.67 1204.14 L1838.08 1204.14 L1837.5 1204.14 L1836.91 1204.14 L1836.32 1204.14 L1835.74 1204.14 L1835.15 1204.14 L1834.56 1204.14 L1833.98 1204.14 L1833.39 1204.14 L1832.81 1204.14 L1832.22 1204.14 L1831.63 1204.14 L1831.05 1204.14 L1830.46 1204.14 L1829.87 1204.14 L1829.29 1204.14 L1828.7 1204.14 L1828.11 1204.14 L1827.53 1204.14 L1826.94 1204.14 L1826.35 1204.14 L1825.77 1204.14 L1825.18 1204.14 L1824.6 1204.14 L1824.01 1204.14 L1823.42 1204.14 L1822.84 1204.14 L1822.25 1204.14 L1821.66 1204.14 L1821.08 1204.14 L1820.49 1204.14 L1819.9 1204.14 L1819.32 1204.14 L1818.73 1204.14 L1818.14 1204.14 L1817.56 1204.14 L1816.97 1204.14 L1816.39 1204.14 L1815.8 1204.14 L1815.21 1204.14 L1814.63 1204.14 L1814.04 1204.14 L1813.45 1204.14 L1812.87 1204.14 L1812.28 1204.14 L1811.69 1204.14 L1811.11 1204.14 L1810.52 1204.14 L1809.94 1204.14 L1809.35 1204.14 L1808.76 1204.14 L1808.18 1204.14 L1807.59 1204.14 L1807 1204.14 L1806.42 1204.14 L1805.83 1204.14 L1805.24 1204.14 L1804.66 1204.14 L1804.07 1204.14 L1803.48 1204.14 L1802.9 1204.14 L1802.31 1204.14 L1801.73 1204.14 L1801.14 1204.14 L1800.55 1204.14 L1799.97 1204.14 L1799.38 1204.14 L1798.79 1204.14 L1798.21 1204.14 L1797.62 1204.14 L1797.03 1204.14 L1796.45 1204.14 L1795.86 1204.14 L1795.27 1204.14 L1794.69 1204.14 L1794.1 1204.14 L1793.52 1204.14 L1792.93 1204.14 L1792.34 1204.14 L1791.76 1204.14 L1791.17 1204.14 L1790.58 1204.14 L1790 1204.14 L1789.41 1204.14 L1788.82 1204.14 L1788.24 1204.14 L1787.65 1204.14 L1787.06 1204.14 L1786.48 1204.14 L1785.89 1204.14 L1785.31 1204.14 L1784.72 1204.14 L1784.13 1204.14 L1783.55 1204.14 L1782.96 1204.14 L1782.37 1204.14 L1781.79 1204.14 L1781.2 1204.14 L1780.61 1204.14 L1780.03 1204.14 L1779.44 1204.14 L1778.86 1204.14 L1778.27 1204.14 L1777.68 1204.14 L1777.1 1204.14 L1776.51 1204.14 L1775.92 1204.14 L1775.34 1204.14 L1774.75 1204.14 L1774.16 1204.14 L1773.58 1204.14 L1772.99 1204.14 L1772.4 1204.14 L1771.82 1204.14 L1771.23 1204.14 L1770.65 1204.14 L1770.06 1204.14 L1769.47 1204.14 L1768.89 1204.14 L1768.3 1204.14 L1767.71 1204.14 L1767.13 1204.14 L1766.54 1204.14 L1765.95 1204.14 L1765.37 1204.14 L1764.78 1204.14 L1764.19 1204.14 L1763.61 1204.14 L1763.02 1204.14 L1762.44 1204.14 L1761.85 1204.14 L1761.26 1204.14 L1760.68 1204.14 L1760.09 1204.14 L1759.5 1204.14 L1758.92 1204.14 L1758.33 1204.14 L1757.74 1204.14 L1757.16 1204.14 L1756.57 1204.14 L1755.99 1204.14 L1755.4 1204.14 L1754.81 1204.14 L1754.23 1204.14 L1753.64 1204.14 L1753.05 1204.14 L1752.47 1204.14 L1751.88 1204.14 L1751.29 1204.14 L1750.71 1204.14 L1750.12 1204.14 L1749.53 1204.14 L1748.95 1204.14 L1748.36 1204.14 L1747.78 1204.14 L1747.19 1204.14 L1746.6 1204.14 L1746.02 1204.14 L1745.43 1204.14 L1744.84 1204.14 L1744.26 1204.14 L1743.67 1204.14 L1743.08 1204.14 L1742.5 1204.14 L1741.91 1204.14 L1741.32 1204.14 L1740.74 1204.14 L1740.15 1204.14 L1739.57 1204.14 L1738.98 1204.14 L1738.39 1204.14 L1737.81 1204.14 L1737.22 1204.14 L1736.63 1204.14 L1736.05 1204.14 L1735.46 1204.14 L1734.87 1204.14 L1734.29 1204.14 L1733.7 1204.14 L1733.11 1204.14 L1732.53 1204.14 L1731.94 1204.14 L1731.36 1204.14 L1730.77 1204.14 L1730.18 1204.14 L1729.6 1204.14 L1729.01 1204.14 L1728.42 1204.14 L1727.84 1204.14 L1727.25 1204.14 L1726.66 1204.14 L1726.08 1204.14 L1725.49 1204.14 L1724.91 1204.14 L1724.32 1204.14 L1723.73 1204.14 L1723.15 1204.14 L1722.56 1204.14 L1721.97 1204.14 L1721.39 1204.14 L1720.8 1204.14 L1720.21 1204.14 L1719.63 1204.14 L1719.04 1204.14 L1718.45 1204.14 L1717.87 1204.14 L1717.28 1204.14 L1716.7 1204.14 L1716.11 1204.14 L1715.52 1204.14 L1714.94 1204.14 L1714.35 1204.14 L1713.76 1204.14 L1713.18 1204.14 L1712.59 1204.14 L1712 1204.14 L1711.42 1204.14 L1710.83 1204.14 L1710.24 1204.14 L1709.66 1204.14 L1709.07 1204.14 L1708.49 1204.14 L1707.9 1204.14 L1707.31 1204.14 L1706.73 1204.14 L1706.14 1204.14 L1705.55 1204.14 L1704.97 1204.14 L1704.38 1204.14 L1703.79 1204.14 L1703.21 1204.14 L1702.62 1204.14 L1702.04 1204.14 L1701.45 1204.14 L1700.86 1204.14 L1700.28 1204.14 L1699.69 1204.14 L1699.1 1204.14 L1698.52 1204.14 L1697.93 1204.14 L1697.34 1204.14 L1696.76 1204.14 L1696.17 1204.14 L1695.58 1204.14 L1695 1204.14 L1694.41 1204.14 L1693.83 1204.14 L1693.24 1204.14 L1692.65 1204.14 L1692.07 1204.14 L1691.48 1204.14 L1690.89 1204.14 L1690.31 1204.14 L1689.72 1204.14 L1689.13 1204.14 L1688.55 1204.14 L1687.96 1204.14 L1687.37 1204.14 L1686.79 1204.14 L1686.2 1204.14 L1685.62 1204.14 L1685.03 1204.14 L1684.44 1204.14 L1683.86 1204.14 L1683.27 1204.14 L1682.68 1204.14 L1682.1 1204.14 L1681.51 1204.14 L1680.92 1204.14 L1680.34 1204.14 L1679.75 1204.14 L1679.17 1204.14 L1678.58 1204.14 L1677.99 1204.14 L1677.41 1204.14 L1676.82 1204.14 L1676.23 1204.14 L1675.65 1204.14 L1675.06 1204.14 L1674.47 1204.14 L1673.89 1204.14 L1673.3 1204.14 L1672.71 1204.14 L1672.13 1204.14 L1671.54 1204.14 L1670.96 1204.14 L1670.37 1204.14 L1669.78 1204.14 L1669.2 1204.14 L1668.61 1204.14 L1668.02 1204.14 L1667.44 1204.14 L1666.85 1204.14 L1666.26 1204.14 L1665.68 1204.14 L1665.09 1204.14 L1664.5 1204.14 L1663.92 1204.14 L1663.33 1204.14 L1662.75 1204.14 L1662.16 1204.14 L1661.57 1204.14 L1660.99 1204.14 L1660.4 1204.14 L1659.81 1204.14 L1659.23 1204.14 L1658.64 1204.14 L1658.05 1204.14 L1657.47 1204.14 L1656.88 1204.14 L1656.29 1204.14 L1655.71 1204.14 L1655.12 1204.14 L1654.54 1204.14 L1653.95 1204.14 L1653.36 1204.14 L1652.78 1204.14 L1652.19 1204.14 L1651.6 1204.14 L1651.02 1204.14 L1650.43 1204.14 L1649.84 1204.14 L1649.26 1204.14 L1648.67 1204.14 L1648.09 1204.14 L1647.5 1204.14 L1646.91 1204.14 L1646.33 1204.14 L1645.74 1204.14 L1645.15 1204.14 L1644.57 1204.14 L1643.98 1204.14 L1643.39 1204.14 L1642.81 1204.14 L1642.22 1204.14 L1641.63 1204.14 L1641.05 1204.14 L1640.46 1204.14 L1639.88 1204.14 L1639.29 1204.14 L1638.7 1204.14 L1638.12 1204.14 L1637.53 1204.14 L1636.94 1204.14 L1636.36 1204.14 L1635.77 1204.14 L1635.18 1204.14 L1634.6 1204.14 L1634.01 1204.14 L1633.42 1204.14 L1632.84 1204.14 L1632.25 1204.14 L1631.67 1204.14 L1631.08 1204.14 L1630.49 1204.14 L1629.91 1204.14 L1629.32 1204.14 L1628.73 1204.14 L1628.15 1204.14 L1627.56 1204.14 L1626.97 1204.14 L1626.39 1204.14 L1625.8 1204.14 L1625.22 1204.14 L1624.63 1204.14 L1624.04 1204.14 L1623.46 1204.14 L1622.87 1204.14 L1622.28 1204.14 L1621.7 1204.14 L1621.11 1204.14 L1620.52 1204.14 L1619.94 1204.14 L1619.35 1204.14 L1618.76 1204.14 L1618.18 1204.14 L1617.59 1204.14 L1617.01 1204.14 L1616.42 1204.14 L1615.83 1204.14 L1615.25 1204.14 L1614.66 1204.14 L1614.07 1204.14 L1613.49 1204.14 L1612.9 1204.14 L1612.31 1204.14 L1611.73 1204.14 L1611.14 1204.14 L1610.55 1204.14 L1609.97 1204.14 L1609.38 1204.14 L1608.8 1204.14 L1608.21 1204.14 L1607.62 1204.14 L1607.04 1204.14 L1606.45 1204.14 L1605.86 1204.14 L1605.28 1204.14 L1604.69 1204.14 L1604.1 1204.14 L1603.52 1204.14 L1602.93 1204.14 L1602.34 1204.14 L1601.76 1204.14 L1601.17 1204.14 L1600.59 1204.14 L1600 1204.14 L1599.41 1204.14 L1598.83 1204.14 L1598.24 1204.14 L1597.65 1204.14 L1597.07 1204.14 L1596.48 1204.14 L1595.89 1204.14 L1595.31 1204.14 L1594.72 1204.14 L1594.14 1204.14 L1593.55 1204.14 L1592.96 1204.14 L1592.38 1204.14 L1591.79 1204.14 L1591.2 1204.14 L1590.62 1204.14 L1590.03 1204.14 L1589.44 1204.14 L1588.86 1204.14 L1588.27 1204.14 L1587.68 1204.14 L1587.1 1204.14 L1586.51 1204.14 L1585.93 1204.14 L1585.34 1204.14 L1584.75 1204.14 L1584.17 1204.14 L1583.58 1204.14 L1582.99 1204.14 L1582.41 1204.14 L1581.82 1204.14 L1581.23 1204.14 L1580.65 1204.14 L1580.06 1204.14 L1579.47 1204.14 L1578.89 1204.14 L1578.3 1204.14 L1577.72 1204.14 L1577.13 1204.14 L1576.54 1204.14 L1575.96 1204.14 L1575.37 1204.14 L1574.78 1204.14 L1574.2 1204.14 L1573.61 1204.14 L1573.02 1204.14 L1572.44 1204.14 L1571.85 1204.14 L1571.27 1204.14 L1570.68 1204.14 L1570.09 1204.14 L1569.51 1204.14 L1568.92 1204.14 L1568.33 1204.14 L1567.75 1204.14 L1567.16 1204.14 L1566.57 1204.14 L1565.99 1204.14 L1565.4 1204.14 L1564.81 1204.14 L1564.23 1204.14 L1563.64 1204.14 L1563.06 1204.14 L1562.47 1204.14 L1561.88 1204.14 L1561.3 1204.14 L1560.71 1204.14 L1560.12 1204.14 L1559.54 1204.14 L1558.95 1204.14 L1558.36 1204.14 L1557.78 1204.14 L1557.19 1204.14 L1556.6 1204.14 L1556.02 1204.14 L1555.43 1204.14 L1554.85 1204.14 L1554.26 1204.14 L1553.67 1204.14 L1553.09 1204.14 L1552.5 1204.14 L1551.91 1204.14 L1551.33 1204.14 L1550.74 1204.14 L1550.15 1204.14 L1549.57 1204.14 L1548.98 1204.14 L1548.4 1204.14 L1547.81 1204.14 L1547.22 1204.14 L1546.64 1204.14 L1546.05 1204.14 L1545.46 1204.14 L1544.88 1204.14 L1544.29 1204.14 L1543.7 1204.14 L1543.12 1204.14 L1542.53 1204.14 L1541.94 1204.14 L1541.36 1204.14 L1540.77 1204.14 L1540.19 1204.14 L1539.6 1204.14 L1539.01 1204.14 L1538.43 1204.14 L1537.84 1204.14 L1537.25 1204.14 L1536.67 1204.14 L1536.08 1204.14 L1535.49 1204.14 L1534.91 1204.14 L1534.32 1204.14 L1533.73 1204.14 L1533.15 1204.14 L1532.56 1204.14 L1531.98 1204.14 L1531.39 1204.14 L1530.8 1204.14 L1530.22 1204.14 L1529.63 1204.14 L1529.04 1204.14 L1528.46 1204.14 L1527.87 1204.14 L1527.28 1204.14 L1526.7 1204.14 L1526.11 1204.14 L1525.52 1204.14 L1524.94 1204.14 L1524.35 1204.14 L1523.77 1204.14 L1523.18 1204.14 L1522.59 1204.14 L1522.01 1204.14 L1521.42 1204.14 L1520.83 1204.14 L1520.25 1204.14 L1519.66 1204.14 L1519.07 1204.14 L1518.49 1204.14 L1517.9 1204.14 L1517.32 1204.14 L1516.73 1204.14 L1516.14 1204.14 L1515.56 1204.14 L1514.97 1204.14 L1514.38 1204.14 L1513.8 1204.14 L1513.21 1204.14 L1512.62 1204.14 L1512.04 1204.14 L1511.45 1204.14 L1510.86 1204.14 L1510.28 1204.14 L1509.69 1204.14 L1509.11 1204.14 L1508.52 1204.14 L1507.93 1204.14 L1507.35 1204.14 L1506.76 1204.14 L1506.17 1204.14 L1505.59 1204.14 L1505 1204.14 L1504.41 1204.14 L1503.83 1204.14 L1503.24 1204.14 L1502.65 1204.14 L1502.07 1204.14 L1501.48 1204.14 L1500.9 1204.14 L1500.31 1204.14 L1499.72 1204.14 L1499.14 1204.14 L1498.55 1204.14 L1497.96 1204.14 L1497.38 1204.14 L1496.79 1204.14 L1496.2 1204.14 L1495.62 1204.14 L1495.03 1204.14 L1494.45 1204.14 L1493.86 1204.14 L1493.27 1204.14 L1492.69 1204.14 L1492.1 1204.14 L1491.51 1204.14 L1490.93 1204.14 L1490.34 1204.14 L1489.75 1204.14 L1489.17 1204.14 L1488.58 1204.14 L1487.99 1204.14 L1487.41 1204.14 L1486.82 1204.14 L1486.24 1204.14 L1485.65 1204.14 L1485.06 1204.14 L1484.48 1204.14 L1483.89 1204.14 L1483.3 1204.14 L1482.72 1204.14 L1482.13 1204.14 L1481.54 1204.14 L1480.96 1204.14 L1480.37 1204.14 L1479.78 1204.14 L1479.2 1204.14 L1478.61 1204.14 L1478.03 1204.14 L1477.44 1204.14 L1476.85 1204.14 L1476.27 1204.14 L1475.68 1204.14 L1475.09 1204.14 L1474.51 1204.14 L1473.92 1204.14 L1473.33 1204.14 L1472.75 1204.14 L1472.16 1204.14 L1471.57 1204.14 L1470.99 1204.14 L1470.4 1204.14 L1469.82 1204.14 L1469.23 1204.14 L1468.64 1204.14 L1468.06 1204.14 L1467.47 1204.14 L1466.88 1204.14 L1466.3 1204.14 L1465.71 1204.14 L1465.12 1204.14 L1464.54 1204.14 L1463.95 1204.14 L1463.37 1204.14 L1462.78 1204.14 L1462.19 1204.14 L1461.61 1204.14 L1461.02 1204.14 L1460.43 1204.14 L1459.85 1204.14 L1459.26 1204.14 L1458.67 1204.14 L1458.09 1204.14 L1457.5 1204.14 L1456.91 1204.14 L1456.33 1204.14 L1455.74 1204.14 L1455.16 1204.14 L1454.57 1204.14 L1453.98 1204.14 L1453.4 1204.14 L1452.81 1204.14 L1452.22 1204.14 L1451.64 1204.14 L1451.05 1204.14 L1450.46 1204.14 L1449.88 1204.14 L1449.29 1204.14 L1448.7 1204.14 L1448.12 1204.14 L1447.53 1204.14 L1446.95 1204.14 L1446.36 1204.14 L1445.77 1204.14 L1445.19 1204.14 L1444.6 1204.14 L1444.01 1204.14 L1443.43 1204.14 L1442.84 1204.14 L1442.25 1204.14 L1441.67 1204.14 L1441.08 1204.14 L1440.5 1204.14 L1439.91 1204.14 L1439.32 1204.14 L1438.74 1204.14 L1438.15 1204.14 L1437.56 1204.14 L1436.98 1204.14 L1436.39 1204.14 L1435.8 1204.14 L1435.22 1204.14 L1434.63 1204.14 L1434.04 1204.14 L1433.46 1204.14 L1432.87 1204.14 L1432.29 1204.14 L1431.7 1204.14 L1431.11 1204.14 L1430.53 1204.14 L1429.94 1204.14 L1429.35 1204.14 L1428.77 1204.14 L1428.18 1204.14 L1427.59 1204.14 L1427.01 1204.14 L1426.42 1204.14 L1425.83 1204.14 L1425.25 1204.14 L1424.66 1204.14 L1424.08 1204.14 L1423.49 1204.14 L1422.9 1204.14 L1422.32 1204.14 L1421.73 1204.14 L1421.14 1204.14 L1420.56 1204.14 L1419.97 1204.14 L1419.38 1204.14 L1418.8 1204.14 L1418.21 1204.14 L1417.63 1204.14 L1417.04 1204.14 L1416.45 1204.14 L1415.87 1204.14 L1415.28 1204.14 L1414.69 1204.14 L1414.11 1204.14 L1413.52 1204.14 L1412.93 1204.14 L1412.35 1204.14 L1411.76 1204.14 L1411.17 1204.14 L1410.59 1204.14 L1410 1204.14 L1409.42 1204.14 L1408.83 1204.14 L1408.24 1204.14 L1407.66 1204.14 L1407.07 1204.14 L1406.48 1204.14 L1405.9 1204.14 L1405.31 1204.14 L1404.72 1204.14 L1404.14 1204.14 L1403.55 1204.14 L1402.96 1204.14 L1402.38 1204.14 L1401.79 1204.14 L1401.21 1204.14 L1400.62 1204.14 L1400.03 1204.14 L1399.45 1204.14 L1398.86 1204.14 L1398.27 1204.14 L1397.69 1204.14 L1397.1 1204.14 L1396.51 1204.14 L1395.93 1204.14 L1395.34 1204.14 L1394.75 1204.14 L1394.17 1204.14 L1393.58 1204.14 L1393 1204.14 L1392.41 1204.14 L1391.82 1204.14 L1391.24 1204.14 L1390.65 1204.14 L1390.06 1204.14 L1389.48 1204.14 L1388.89 1204.14 L1388.3 1204.14 L1387.72 1204.14 L1387.13 1204.14 L1386.55 1204.14 L1385.96 1204.14 L1385.37 1204.14 L1384.79 1204.14 L1384.2 1204.14 L1383.61 1204.14 L1383.03 1204.14 L1382.44 1204.14 L1381.85 1204.14 L1381.27 1204.14 L1380.68 1204.14 L1380.09 1204.14 L1379.51 1204.14 L1378.92 1204.14 L1378.34 1204.14 L1377.75 1204.14 L1377.16 1204.14 L1376.58 1204.14 L1375.99 1204.14 L1375.4 1204.14 L1374.82 1204.14 L1374.23 1204.14 L1373.64 1204.14 L1373.06 1204.14 L1372.47 1204.14 L1371.88 1204.14 L1371.3 1204.14 L1370.71 1204.14 L1370.13 1204.14 L1369.54 1204.14 L1368.95 1204.14 L1368.37 1204.14 L1367.78 1204.14 L1367.19 1204.14 L1366.61 1204.14 L1366.02 1204.14 L1365.43 1204.14 L1364.85 1204.14 L1364.26 1204.14 L1363.68 1204.14 L1363.09 1204.14 L1362.5 1204.14 L1361.92 1204.14 L1361.33 1204.14 L1360.74 1204.14 L1360.16 1204.14 L1359.57 1204.14 L1358.98 1204.14 L1358.4 1204.14 L1357.81 1204.14 L1357.22 1204.14 L1356.64 1204.14 L1356.05 1204.14 L1355.47 1204.14 L1354.88 1204.14 L1354.29 1204.14 L1353.71 1204.14 L1353.12 1204.14 L1352.53 1204.14 L1351.95 1204.14 L1351.36 1204.14 L1350.77 1204.14 L1350.19 1204.14 L1349.6 1204.14 L1349.01 1204.14 L1348.43 1204.14 L1347.84 1204.14 L1347.26 1204.14 L1346.67 1204.14 L1346.08 1204.14 L1345.5 1204.14 L1344.91 1204.14 L1344.32 1204.14 L1343.74 1204.14 L1343.15 1204.14 L1342.56 1204.14 L1341.98 1204.14 L1341.39 1204.14 L1340.8 1204.14 L1340.22 1204.14 L1339.63 1204.14 L1339.05 1204.14 L1338.46 1204.14 L1337.87 1204.14 L1337.29 1204.14 L1336.7 1204.14 L1336.11 1204.14 L1335.53 1204.14 L1334.94 1204.14 L1334.35 1204.14 L1333.77 1204.14 L1333.18 1204.14 L1332.6 1204.14 L1332.01 1204.14 L1331.42 1204.14 L1330.84 1204.14 L1330.25 1204.14 L1329.66 1204.14 L1329.08 1204.14 L1328.49 1204.14 L1327.9 1204.14 L1327.32 1204.14 L1326.73 1204.14 L1326.14 1204.14 L1325.56 1204.14 L1324.97 1204.14 L1324.39 1204.14 L1323.8 1204.14 L1323.21 1204.14 L1322.63 1204.14 L1322.04 1204.14 L1321.45 1204.14 L1320.87 1204.14 L1320.28 1204.14 L1319.69 1204.14 L1319.11 1204.14 L1318.52 1204.14 L1317.93 1204.14 L1317.35 1204.14 L1316.76 1204.14 L1316.18 1204.14 L1315.59 1204.14 L1315 1204.14 L1314.42 1204.14 L1313.83 1204.14 L1313.24 1204.14 L1312.66 1204.14 L1312.07 1204.14 L1311.48 1204.14 L1310.9 1204.14 L1310.31 1204.14 L1309.73 1204.14 L1309.14 1204.14 L1308.55 1204.14 L1307.97 1204.14 L1307.38 1204.14 L1306.79 1204.14 L1306.21 1204.14 L1305.62 1204.14 L1305.03 1204.14 L1304.45 1204.14 L1303.86 1204.14 L1303.27 1204.14 L1302.69 1204.14 L1302.1 1204.14 L1301.52 1204.14 L1300.93 1204.14 L1300.34 1204.14 L1299.76 1204.14 L1299.17 1204.14 L1298.58 1204.14 L1298 1204.14 L1297.41 1204.14 L1296.82 1204.14 L1296.24 1204.14 L1295.65 1204.14 L1295.06 1204.14 L1294.48 1204.14 L1293.89 1204.14 L1293.31 1204.14 L1292.72 1204.14 L1292.13 1204.14 L1291.55 1204.14 L1290.96 1204.14 L1290.37 1204.14 L1289.79 1204.14 L1289.2 1204.14 L1288.61 1204.14 L1288.03 1204.14 L1287.44 1204.14 L1286.86 1204.14 L1286.27 1204.14 L1285.68 1204.14 L1285.1 1204.14 L1284.51 1204.14 L1283.92 1204.14 L1283.34 1204.14 L1282.75 1204.14 L1282.16 1204.14 L1281.58 1204.14 L1280.99 1204.14 L1280.4 1204.14 L1279.82 1204.14 L1279.23 1204.14 L1278.65 1204.14 L1278.06 1204.14 L1277.47 1204.14 L1276.89 1204.14 L1276.3 1204.14 L1275.71 1204.14 L1275.13 1204.14 L1274.54 1204.14 L1273.95 1204.14 L1273.37 1204.14 L1272.78 1204.14 L1272.19 1204.14 L1271.61 1204.14 L1271.02 1204.14 L1270.44 1204.14 L1269.85 1204.14 L1269.26 1204.14 L1268.68 1204.14 L1268.09 1204.14 L1267.5 1204.14 L1266.92 1204.14 L1266.33 1204.14 L1265.74 1204.14 L1265.16 1204.14 L1264.57 1204.14 L1263.98 1204.14 L1263.4 1204.14 L1262.81 1204.14 L1262.23 1204.14 L1261.64 1204.14 L1261.05 1204.14 L1260.47 1204.14 L1259.88 1204.14 L1259.29 1204.14 L1258.71 1204.14 L1258.12 1204.14 L1257.53 1204.14 L1256.95 1204.14 L1256.36 1204.14 L1255.78 1204.14 L1255.19 1204.14 L1254.6 1204.14 L1254.02 1204.14 L1253.43 1204.14 L1252.84 1204.14 L1252.26 1204.14 L1251.67 1204.14 L1251.08 1204.14 L1250.5 1204.14 L1249.91 1204.14 L1249.32 1204.14 L1248.74 1204.14 L1248.15 1204.14 L1247.57 1204.14 L1246.98 1204.14 L1246.39 1204.14 L1245.81 1204.14 L1245.22 1204.14 L1244.63 1204.14 L1244.05 1204.14 L1243.46 1204.14 L1242.87 1204.14 L1242.29 1204.14 L1241.7 1204.14 L1241.11 1204.14 L1240.53 1204.14 L1239.94 1204.14 L1239.36 1204.14 L1238.77 1204.14 L1238.18 1204.14 L1237.6 1204.14 L1237.01 1204.14 L1236.42 1204.14 L1235.84 1204.14 L1235.25 1204.14 L1234.66 1204.14 L1234.08 1204.14 L1233.49 1204.14 L1232.91 1204.14 L1232.32 1204.14 L1231.73 1204.14 L1231.15 1204.14 L1230.56 1204.14 L1229.97 1204.14 L1229.39 1204.14 L1228.8 1204.14 L1228.21 1204.14 L1227.63 1204.14 L1227.04 1204.14 L1226.45 1204.14 L1225.87 1204.14 L1225.28 1204.14 L1224.7 1204.14 L1224.11 1204.14 L1223.52 1204.14 L1222.94 1204.14 L1222.35 1204.14 L1221.76 1204.14 L1221.18 1204.14 L1220.59 1204.14 L1220 1204.14 L1219.42 1204.14 L1218.83 1204.14 L1218.24 1204.14 L1217.66 1204.14 L1217.07 1204.14 L1216.49 1204.14 L1215.9 1204.14 L1215.31 1204.14 L1214.73 1204.14 L1214.14 1204.14 L1213.55 1204.14 L1212.97 1204.14 L1212.38 1204.14 L1211.79 1204.14 L1211.21 1204.14 L1210.62 1204.14 L1210.03 1204.14 L1209.45 1204.14 L1208.86 1204.14 L1208.28 1204.14 L1207.69 1204.14 L1207.1 1204.14 L1206.52 1204.14 L1205.93 1204.14 L1205.34 1204.14 L1204.76 1204.14 L1204.17 1204.14 L1203.58 1204.14 L1203 1204.14 L1202.41 1204.14 L1201.83 1204.14 L1201.24 1204.14 L1200.65 1204.14 L1200.07 1204.14 L1199.48 1204.14 L1198.89 1204.14 L1198.31 1204.14 L1197.72 1204.14 L1197.13 1204.14 L1196.55 1204.14 L1195.96 1204.14 L1195.37 1204.14 L1194.79 1204.14 L1194.2 1204.14 L1193.62 1204.14 L1193.03 1204.14 L1192.44 1204.14 L1191.86 1204.14 L1191.27 1204.14 L1190.68 1204.14 L1190.1 1204.14 L1189.51 1204.14 L1188.92 1204.14 L1188.34 1204.14 L1187.75 1204.14 L1187.16 1204.14 L1186.58 1204.14 L1185.99 1204.14 L1185.41 1204.14 L1184.82 1204.14 L1184.23 1204.14 L1183.65 1204.14 L1183.06 1204.14 L1182.47 1204.14 L1181.89 1204.14 L1181.3 1204.14 L1180.71 1204.14 L1180.13 1204.14 L1179.54 1204.14 L1178.96 1204.14 L1178.37 1204.14 L1177.78 1204.14 L1177.2 1204.14 L1176.61 1204.14 L1176.02 1204.14 L1175.44 1204.14 L1174.85 1204.14 L1174.26 1204.14 L1173.68 1204.14 L1173.09 1204.14 L1172.5 1204.14 L1171.92 1204.14 L1171.33 1204.14 L1170.75 1204.14 L1170.16 1204.14 L1169.57 1204.14 L1168.99 1204.14 L1168.4 1204.14 L1167.81 1204.14 L1167.23 1204.14 L1166.64 1204.14 L1166.05 1204.14 L1165.47 1204.14 L1164.88 1204.14 L1164.29 1204.14 L1163.71 1204.14 L1163.12 1204.14 L1162.54 1204.14 L1161.95 1204.14 L1161.36 1204.14 L1160.78 1204.14 L1160.19 1204.14 L1159.6 1204.14 L1159.02 1204.14 L1158.43 1204.14 L1157.84 1204.14 L1157.26 1204.14 L1156.67 1204.14 L1156.09 1204.14 L1155.5 1204.14 L1154.91 1204.14 L1154.33 1204.14 L1153.74 1204.14 L1153.15 1204.14 L1152.57 1204.14 L1151.98 1204.14 L1151.39 1204.14 L1150.81 1204.14 L1150.22 1204.14 L1149.63 1204.14 L1149.05 1204.14 L1148.46 1204.14 L1147.88 1204.14 L1147.29 1204.14 L1146.7 1204.14 L1146.12 1204.14 L1145.53 1204.14 L1144.94 1204.14 L1144.36 1204.14 L1143.77 1204.14 L1143.18 1204.14 L1142.6 1204.14 L1142.01 1204.14 L1141.42 1204.14 L1140.84 1204.14 L1140.25 1204.14 L1139.67 1204.14 L1139.08 1204.14 L1138.49 1204.14 L1137.91 1204.14 L1137.32 1204.14 L1136.73 1204.14 L1136.15 1204.14 L1135.56 1204.14 L1134.97 1204.14 L1134.39 1204.14 L1133.8 1204.14 L1133.21 1204.14 L1132.63 1204.14 L1132.04 1204.14 L1131.46 1204.14 L1130.87 1204.14 L1130.28 1204.14 L1129.7 1204.14 L1129.11 1204.14 L1128.52 1204.14 L1127.94 1204.14 L1127.35 1204.14 L1126.76 1204.14 L1126.18 1204.14 L1125.59 1204.14 L1125.01 1204.14 L1124.42 1204.14 L1123.83 1204.14 L1123.25 1204.14 L1122.66 1204.14 L1122.07 1204.14 L1121.49 1204.14 L1120.9 1204.14 L1120.31 1204.14 L1119.73 1204.14 L1119.14 1204.14 L1118.55 1204.14 L1117.97 1204.14 L1117.38 1204.14 L1116.8 1204.14 L1116.21 1204.14 L1115.62 1204.14 L1115.04 1204.14 L1114.45 1204.14 L1113.86 1204.14 L1113.28 1204.14 L1112.69 1204.14 L1112.1 1204.14 L1111.52 1204.14 L1110.93 1204.14 L1110.34 1204.14 L1109.76 1204.14 L1109.17 1204.14 L1108.59 1204.14 L1108 1204.14 L1107.41 1204.14 L1106.83 1204.14 L1106.24 1204.14 L1105.65 1204.14 L1105.07 1204.14 L1104.48 1204.14 L1103.89 1204.14 L1103.31 1204.14 L1102.72 1204.14 L1102.14 1204.14 L1101.55 1204.14 L1100.96 1204.14 L1100.38 1204.14 L1099.79 1204.14 L1099.2 1204.14 L1098.62 1204.14 L1098.03 1204.14 L1097.44 1204.14 L1096.86 1204.14 L1096.27 1204.14 L1095.68 1204.14 L1095.1 1204.14 L1094.51 1204.14 L1093.93 1204.14 L1093.34 1204.14 L1092.75 1204.14 L1092.17 1204.14 L1091.58 1204.14 L1090.99 1204.14 L1090.41 1204.14 L1089.82 1204.14 L1089.23 1204.14 L1088.65 1204.14 L1088.06 1204.14 L1087.47 1204.14 L1086.89 1204.14 L1086.3 1204.14 L1085.72 1204.14 L1085.13 1204.14 L1084.54 1204.14 L1083.96 1204.14 L1083.37 1204.14 L1082.78 1204.14 L1082.2 1204.14 L1081.61 1204.14 L1081.02 1204.14 L1080.44 1204.14 L1079.85 1204.14 L1079.26 1204.14 L1078.68 1204.14 L1078.09 1204.14 L1077.51 1204.14 L1076.92 1204.14 L1076.33 1204.14 L1075.75 1204.14 L1075.16 1204.14 L1074.57 1204.14 L1073.99 1204.14 L1073.4 1204.14 L1072.81 1204.14 L1072.23 1204.14 L1071.64 1204.14 L1071.06 1204.14 L1070.47 1204.14 L1069.88 1204.14 L1069.3 1204.14 L1068.71 1204.14 L1068.12 1204.14 L1067.54 1204.14 L1066.95 1204.14 L1066.36 1204.14 L1065.78 1204.14 L1065.19 1204.14 L1064.6 1204.14 L1064.02 1204.14 L1063.43 1204.14 L1062.85 1204.14 L1062.26 1204.14 L1061.67 1204.14 L1061.09 1204.14 L1060.5 1204.14 L1059.91 1204.14 L1059.33 1204.14 L1058.74 1204.14 L1058.15 1204.14 L1057.57 1204.14 L1056.98 1204.14 L1056.39 1204.14 L1055.81 1204.14 L1055.22 1204.14 L1054.64 1204.14 L1054.05 1204.14 L1053.46 1204.14 L1052.88 1204.14 L1052.29 1204.14 L1051.7 1204.14 L1051.12 1204.14 L1050.53 1204.14 L1049.94 1204.14 L1049.36 1204.14 L1048.77 1204.14 L1048.19 1204.14 L1047.6 1204.14 L1047.01 1204.14 L1046.43 1204.14 L1045.84 1204.14 L1045.25 1204.14 L1044.67 1204.14 L1044.08 1204.14 L1043.49 1204.14 L1042.91 1204.14 L1042.32 1204.14 L1041.73 1204.14 L1041.15 1204.14 L1040.56 1204.14 L1039.98 1204.14 L1039.39 1204.14 L1038.8 1204.14 L1038.22 1204.14 L1037.63 1204.14 L1037.04 1204.14 L1036.46 1204.14 L1035.87 1204.14 L1035.28 1204.14 L1034.7 1204.14 L1034.11 1204.14 L1033.52 1204.14 L1032.94 1204.14 L1032.35 1204.14 L1031.77 1204.14 L1031.18 1204.14 L1030.59 1204.14 L1030.01 1204.14 L1029.42 1204.14 L1028.83 1204.14 L1028.25 1204.14 L1027.66 1204.14 L1027.07 1204.14 L1026.49 1204.14 L1025.9 1204.14 L1025.32 1204.14 L1024.73 1204.14 L1024.14 1204.14 L1023.56 1204.14 L1022.97 1204.14 L1022.38 1204.14 L1021.8 1204.14 L1021.21 1204.14 L1020.62 1204.14 L1020.04 1204.14 L1019.45 1204.14 L1018.86 1204.14 L1018.28 1204.14 L1017.69 1204.14 L1017.11 1204.14 L1016.52 1204.14 L1015.93 1204.14 L1015.35 1204.14 L1014.76 1204.14 L1014.17 1204.14 L1013.59 1204.14 L1013 1204.14 L1012.41 1204.14 L1011.83 1204.14 L1011.24 1204.14 L1010.65 1204.14 L1010.07 1204.14 L1009.48 1204.14 L1008.9 1204.14 L1008.31 1204.14 L1007.72 1204.14 L1007.14 1204.14 L1006.55 1204.14 L1005.96 1204.14 L1005.38 1204.14 L1004.79 1204.14 L1004.2 1204.14 L1003.62 1204.14 L1003.03 1204.14 L1002.44 1204.14 L1001.86 1204.14 L1001.27 1204.14 L1000.69 1204.14 L1000.1 1204.14 L999.513 1204.14 L998.926 1204.14 L998.34 1204.14 L997.754 1204.14 L997.167 1204.14 L996.581 1204.14 L995.994 1204.14 L995.408 1204.14 L994.822 1204.14 L994.235 1204.14 L993.649 1204.14 L993.062 1204.14 L992.476 1204.14 L991.889 1204.14 L991.303 1204.14 L990.717 1204.14 L990.13 1204.14 L989.544 1204.14 L988.957 1204.14 L988.371 1204.14 L987.785 1204.14 L987.198 1204.14 L986.612 1204.14 L986.025 1204.14  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.22 986.612,1204.22 987.198,1204.22 987.785,1204.22 988.371,1204.22 988.957,1204.22 989.544,1204.22 990.13,1204.22 990.717,1204.22 991.303,1204.22 991.889,1204.22 992.476,1204.22 993.062,1204.22 993.649,1204.22 994.235,1204.22 994.822,1204.22 995.408,1204.22 995.994,1204.22 996.581,1204.22 997.167,1204.22 997.754,1204.22 998.34,1204.22 998.926,1204.22 999.513,1204.22 1000.1,1204.22 1000.69,1204.22 1001.27,1204.22 1001.86,1204.22 1002.44,1204.22 1003.03,1204.22 1003.62,1204.22 1004.2,1204.22 1004.79,1204.22 1005.38,1204.22 1005.96,1204.22 1006.55,1204.22 1007.14,1204.22 1007.72,1204.22 1008.31,1204.22 1008.9,1204.22 1009.48,1204.22 1010.07,1204.22 1010.65,1204.22 1011.24,1204.22 1011.83,1204.22 1012.41,1204.22 1013,1204.22 1013.59,1204.22 1014.17,1204.22 1014.76,1204.22 1015.35,1204.22 1015.93,1204.22 1016.52,1204.22 1017.11,1204.22 1017.69,1204.22 1018.28,1204.22 1018.86,1204.22 1019.45,1204.22 1020.04,1204.22 1020.62,1204.22 1021.21,1204.22 1021.8,1204.22 1022.38,1204.22 1022.97,1204.22 1023.56,1204.22 1024.14,1204.22 1024.73,1204.22 1025.32,1204.22 1025.9,1204.22 1026.49,1204.22 1027.07,1204.22 1027.66,1204.22 1028.25,1204.22 1028.83,1204.22 1029.42,1204.22 1030.01,1204.22 1030.59,1204.22 1031.18,1204.22 1031.77,1204.22 1032.35,1204.22 1032.94,1204.22 1033.52,1204.22 1034.11,1204.22 1034.7,1204.22 1035.28,1204.22 1035.87,1204.22 1036.46,1204.22 1037.04,1204.22 1037.63,1204.22 1038.22,1204.22 1038.8,1204.22 1039.39,1204.22 1039.98,1204.22 1040.56,1204.22 1041.15,1204.22 1041.73,1204.22 1042.32,1204.22 1042.91,1204.22 1043.49,1204.22 1044.08,1204.22 1044.67,1204.22 1045.25,1204.22 1045.84,1204.22 1046.43,1204.22 1047.01,1204.22 1047.6,1204.22 1048.19,1204.22 1048.77,1204.22 1049.36,1204.22 1049.94,1204.22 1050.53,1204.22 1051.12,1204.22 1051.7,1204.22 1052.29,1204.22 1052.88,1204.22 1053.46,1204.22 1054.05,1204.22 1054.64,1204.22 1055.22,1204.22 1055.81,1204.22 1056.39,1204.22 1056.98,1204.22 1057.57,1204.22 1058.15,1204.22 1058.74,1204.22 1059.33,1204.22 1059.91,1204.22 1060.5,1204.22 1061.09,1204.22 1061.67,1204.22 1062.26,1204.22 1062.85,1204.22 1063.43,1204.22 1064.02,1204.22 1064.6,1204.22 1065.19,1204.22 1065.78,1204.22 1066.36,1204.22 1066.95,1204.22 1067.54,1204.22 1068.12,1204.22 1068.71,1204.22 1069.3,1204.22 1069.88,1204.22 1070.47,1204.22 1071.06,1204.22 1071.64,1204.22 1072.23,1204.22 1072.81,1204.22 1073.4,1204.22 1073.99,1204.22 1074.57,1204.22 1075.16,1204.22 1075.75,1204.22 1076.33,1204.22 1076.92,1204.22 1077.51,1204.22 1078.09,1204.22 1078.68,1204.22 1079.26,1204.22 1079.85,1204.22 1080.44,1204.22 1081.02,1204.22 1081.61,1204.22 1082.2,1204.22 1082.78,1204.22 1083.37,1204.22 1083.96,1204.22 1084.54,1204.22 1085.13,1204.22 1085.72,1204.22 1086.3,1204.22 1086.89,1204.22 1087.47,1204.22 1088.06,1204.22 1088.65,1204.22 1089.23,1204.22 1089.82,1204.22 1090.41,1204.22 1090.99,1204.22 1091.58,1204.22 1092.17,1204.22 1092.75,1204.22 1093.34,1204.22 1093.93,1204.22 1094.51,1204.22 1095.1,1204.22 1095.68,1204.22 1096.27,1204.22 1096.86,1204.22 1097.44,1204.22 1098.03,1204.22 1098.62,1204.22 1099.2,1204.22 1099.79,1204.22 1100.38,1204.22 1100.96,1204.22 1101.55,1204.22 1102.14,1204.22 1102.72,1204.22 1103.31,1204.22 1103.89,1204.22 1104.48,1204.22 1105.07,1204.22 1105.65,1204.22 1106.24,1204.22 1106.83,1204.22 1107.41,1204.22 1108,1204.22 1108.59,1204.22 1109.17,1204.22 1109.76,1204.22 1110.34,1204.22 1110.93,1204.22 1111.52,1204.22 1112.1,1204.22 1112.69,1204.22 1113.28,1204.22 1113.86,1204.22 1114.45,1204.22 1115.04,1204.22 1115.62,1204.22 1116.21,1204.22 1116.8,1204.22 1117.38,1204.22 1117.97,1204.22 1118.55,1204.22 1119.14,1204.22 1119.73,1204.22 1120.31,1204.22 1120.9,1204.22 1121.49,1204.22 1122.07,1204.22 1122.66,1204.22 1123.25,1204.22 1123.83,1204.22 1124.42,1204.22 1125.01,1204.22 1125.59,1204.22 1126.18,1204.22 1126.76,1204.22 1127.35,1204.22 1127.94,1204.22 1128.52,1204.22 1129.11,1204.22 1129.7,1204.22 1130.28,1204.22 1130.87,1204.22 1131.46,1204.22 1132.04,1204.22 1132.63,1204.22 1133.21,1204.22 1133.8,1204.22 1134.39,1204.22 1134.97,1204.22 1135.56,1204.22 1136.15,1204.22 1136.73,1204.22 1137.32,1204.22 1137.91,1204.22 1138.49,1204.22 1139.08,1204.22 1139.67,1204.22 1140.25,1204.22 1140.84,1204.22 1141.42,1204.22 1142.01,1204.22 1142.6,1204.22 1143.18,1204.22 1143.77,1204.22 1144.36,1204.22 1144.94,1204.22 1145.53,1204.22 1146.12,1204.22 1146.7,1204.22 1147.29,1204.22 1147.88,1204.22 1148.46,1204.22 1149.05,1204.22 1149.63,1204.22 1150.22,1204.22 1150.81,1204.22 1151.39,1204.22 1151.98,1204.22 1152.57,1204.22 1153.15,1204.22 1153.74,1204.22 1154.33,1204.22 1154.91,1204.22 1155.5,1204.22 1156.09,1204.22 1156.67,1204.22 1157.26,1204.22 1157.84,1204.22 1158.43,1204.22 1159.02,1204.22 1159.6,1204.22 1160.19,1204.22 1160.78,1204.22 1161.36,1204.22 1161.95,1204.22 1162.54,1204.22 1163.12,1204.22 1163.71,1204.22 1164.29,1204.22 1164.88,1204.22 1165.47,1204.22 1166.05,1204.22 1166.64,1204.22 1167.23,1204.22 1167.81,1204.22 1168.4,1204.22 1168.99,1204.22 1169.57,1204.22 1170.16,1204.22 1170.75,1204.22 1171.33,1204.22 1171.92,1204.22 1172.5,1204.22 1173.09,1204.22 1173.68,1204.22 1174.26,1204.22 1174.85,1204.22 1175.44,1204.22 1176.02,1204.22 1176.61,1204.22 1177.2,1204.22 1177.78,1204.22 1178.37,1204.22 1178.96,1204.22 1179.54,1204.22 1180.13,1204.22 1180.71,1204.22 1181.3,1204.22 1181.89,1204.22 1182.47,1204.22 1183.06,1204.22 1183.65,1204.22 1184.23,1204.22 1184.82,1204.22 1185.41,1204.22 1185.99,1204.22 1186.58,1204.22 1187.16,1204.22 1187.75,1204.22 1188.34,1204.22 1188.92,1204.22 1189.51,1204.22 1190.1,1204.22 1190.68,1204.22 1191.27,1204.22 1191.86,1204.22 1192.44,1204.22 1193.03,1204.22 1193.62,1204.22 1194.2,1204.22 1194.79,1204.22 1195.37,1204.22 1195.96,1204.22 1196.55,1204.22 1197.13,1204.22 1197.72,1204.22 1198.31,1204.22 1198.89,1204.22 1199.48,1204.22 1200.07,1204.22 1200.65,1204.22 1201.24,1204.22 1201.83,1204.22 1202.41,1204.22 1203,1204.22 1203.58,1204.22 1204.17,1204.22 1204.76,1204.22 1205.34,1204.22 1205.93,1204.22 1206.52,1204.22 1207.1,1204.22 1207.69,1204.22 1208.28,1204.22 1208.86,1204.22 1209.45,1204.22 1210.03,1204.22 1210.62,1204.22 1211.21,1204.22 1211.79,1204.22 1212.38,1204.22 1212.97,1204.22 1213.55,1204.22 1214.14,1204.22 1214.73,1204.22 1215.31,1204.22 1215.9,1204.22 1216.49,1204.22 1217.07,1204.22 1217.66,1204.22 1218.24,1204.22 1218.83,1204.22 1219.42,1204.22 1220,1204.22 1220.59,1204.22 1221.18,1204.22 1221.76,1204.22 1222.35,1204.22 1222.94,1204.22 1223.52,1204.22 1224.11,1204.22 1224.7,1204.22 1225.28,1204.22 1225.87,1204.22 1226.45,1204.22 1227.04,1204.22 1227.63,1204.22 1228.21,1204.22 1228.8,1204.22 1229.39,1204.22 1229.97,1204.22 1230.56,1204.22 1231.15,1204.22 1231.73,1204.22 1232.32,1204.22 1232.91,1204.22 1233.49,1204.22 1234.08,1204.22 1234.66,1204.22 1235.25,1204.22 1235.84,1204.22 1236.42,1204.22 1237.01,1204.22 1237.6,1204.22 1238.18,1204.22 1238.77,1204.22 1239.36,1204.22 1239.94,1204.22 1240.53,1204.22 1241.11,1204.22 1241.7,1204.22 1242.29,1204.22 1242.87,1204.22 1243.46,1204.22 1244.05,1204.22 1244.63,1204.22 1245.22,1204.22 1245.81,1204.22 1246.39,1204.22 1246.98,1204.22 1247.57,1204.22 1248.15,1204.22 1248.74,1204.22 1249.32,1204.22 1249.91,1204.22 1250.5,1204.22 1251.08,1204.22 1251.67,1204.22 1252.26,1204.22 1252.84,1204.22 1253.43,1204.22 1254.02,1204.22 1254.6,1204.22 1255.19,1204.22 1255.78,1204.22 1256.36,1204.22 1256.95,1204.22 1257.53,1204.22 1258.12,1204.22 1258.71,1204.22 1259.29,1204.22 1259.88,1204.22 1260.47,1204.22 1261.05,1204.22 1261.64,1204.22 1262.23,1204.22 1262.81,1204.22 1263.4,1204.22 1263.98,1204.22 1264.57,1204.22 1265.16,1204.22 1265.74,1204.22 1266.33,1204.22 1266.92,1204.22 1267.5,1204.22 1268.09,1204.22 1268.68,1204.22 1269.26,1204.22 1269.85,1204.22 1270.44,1204.22 1271.02,1204.22 1271.61,1204.22 1272.19,1204.22 1272.78,1204.22 1273.37,1204.22 1273.95,1204.22 1274.54,1204.22 1275.13,1204.22 1275.71,1204.22 1276.3,1204.22 1276.89,1204.22 1277.47,1204.22 1278.06,1204.22 1278.65,1204.22 1279.23,1204.22 1279.82,1204.22 1280.4,1204.22 1280.99,1204.22 1281.58,1204.22 1282.16,1204.22 1282.75,1204.22 1283.34,1204.22 1283.92,1204.22 1284.51,1204.22 1285.1,1204.22 1285.68,1204.22 1286.27,1204.22 1286.86,1204.22 1287.44,1204.22 1288.03,1204.22 1288.61,1204.22 1289.2,1204.22 1289.79,1204.22 1290.37,1204.22 1290.96,1204.22 1291.55,1204.22 1292.13,1204.22 1292.72,1204.22 1293.31,1204.22 1293.89,1204.22 1294.48,1204.22 1295.06,1204.22 1295.65,1204.22 1296.24,1204.22 1296.82,1204.22 1297.41,1204.22 1298,1204.22 1298.58,1204.22 1299.17,1204.22 1299.76,1204.22 1300.34,1204.22 1300.93,1204.22 1301.52,1204.22 1302.1,1204.22 1302.69,1204.22 1303.27,1204.22 1303.86,1204.22 1304.45,1204.22 1305.03,1204.22 1305.62,1204.22 1306.21,1204.22 1306.79,1204.22 1307.38,1204.22 1307.97,1204.22 1308.55,1204.22 1309.14,1204.22 1309.73,1204.22 1310.31,1204.22 1310.9,1204.22 1311.48,1204.22 1312.07,1204.22 1312.66,1204.22 1313.24,1204.22 1313.83,1204.22 1314.42,1204.22 1315,1204.22 1315.59,1204.22 1316.18,1204.22 1316.76,1204.22 1317.35,1204.22 1317.93,1204.22 1318.52,1204.22 1319.11,1204.22 1319.69,1204.22 1320.28,1204.22 1320.87,1204.22 1321.45,1204.22 1322.04,1204.22 1322.63,1204.22 1323.21,1204.22 1323.8,1204.22 1324.39,1204.22 1324.97,1204.22 1325.56,1204.22 1326.14,1204.22 1326.73,1204.22 1327.32,1204.22 1327.9,1204.22 1328.49,1204.22 1329.08,1204.22 1329.66,1204.22 1330.25,1204.22 1330.84,1204.22 1331.42,1204.22 1332.01,1204.22 1332.6,1204.22 1333.18,1204.22 1333.77,1204.22 1334.35,1204.22 1334.94,1204.22 1335.53,1204.22 1336.11,1204.22 1336.7,1204.22 1337.29,1204.22 1337.87,1204.22 1338.46,1204.22 1339.05,1204.22 1339.63,1204.22 1340.22,1204.22 1340.8,1204.22 1341.39,1204.22 1341.98,1204.22 1342.56,1204.22 1343.15,1204.22 1343.74,1204.22 1344.32,1204.22 1344.91,1204.22 1345.5,1204.22 1346.08,1204.22 1346.67,1204.22 1347.26,1204.22 1347.84,1204.22 1348.43,1204.22 1349.01,1204.22 1349.6,1204.22 1350.19,1204.22 1350.77,1204.22 1351.36,1204.22 1351.95,1204.22 1352.53,1204.22 1353.12,1204.22 1353.71,1204.22 1354.29,1204.22 1354.88,1204.22 1355.47,1204.22 1356.05,1204.22 1356.64,1204.22 1357.22,1204.22 1357.81,1204.22 1358.4,1204.22 1358.98,1204.22 1359.57,1204.22 1360.16,1204.22 1360.74,1204.22 1361.33,1204.22 1361.92,1204.22 1362.5,1204.22 1363.09,1204.22 1363.68,1204.22 1364.26,1204.22 1364.85,1204.22 1365.43,1204.22 1366.02,1204.22 1366.61,1204.22 1367.19,1204.22 1367.78,1204.22 1368.37,1204.22 1368.95,1204.22 1369.54,1204.22 1370.13,1204.22 1370.71,1204.22 1371.3,1204.22 1371.88,1204.22 1372.47,1204.22 1373.06,1204.22 1373.64,1204.22 1374.23,1204.22 1374.82,1204.22 1375.4,1204.22 1375.99,1204.22 1376.58,1204.22 1377.16,1204.22 1377.75,1204.22 1378.34,1204.22 1378.92,1204.22 1379.51,1204.22 1380.09,1204.22 1380.68,1204.22 1381.27,1204.22 1381.85,1204.22 1382.44,1204.22 1383.03,1204.22 1383.61,1204.22 1384.2,1204.22 1384.79,1204.22 1385.37,1204.22 1385.96,1204.22 1386.55,1204.22 1387.13,1204.22 1387.72,1204.22 1388.3,1204.22 1388.89,1204.22 1389.48,1204.22 1390.06,1204.22 1390.65,1204.22 1391.24,1204.22 1391.82,1204.22 1392.41,1204.22 1393,1204.22 1393.58,1204.22 1394.17,1204.22 1394.75,1204.22 1395.34,1204.22 1395.93,1204.22 1396.51,1204.22 1397.1,1204.22 1397.69,1204.22 1398.27,1204.22 1398.86,1204.22 1399.45,1204.22 1400.03,1204.22 1400.62,1204.22 1401.21,1204.22 1401.79,1204.22 1402.38,1204.22 1402.96,1204.22 1403.55,1204.22 1404.14,1204.22 1404.72,1204.22 1405.31,1204.22 1405.9,1204.22 1406.48,1204.22 1407.07,1204.22 1407.66,1204.22 1408.24,1204.22 1408.83,1204.22 1409.42,1204.22 1410,1204.22 1410.59,1204.22 1411.17,1204.22 1411.76,1204.22 1412.35,1204.22 1412.93,1204.22 1413.52,1204.22 1414.11,1204.22 1414.69,1204.22 1415.28,1204.22 1415.87,1204.22 1416.45,1204.22 1417.04,1204.22 1417.63,1204.22 1418.21,1204.22 1418.8,1204.22 1419.38,1204.22 1419.97,1204.22 1420.56,1204.22 1421.14,1204.22 1421.73,1204.22 1422.32,1204.22 1422.9,1204.22 1423.49,1204.22 1424.08,1204.22 1424.66,1204.22 1425.25,1204.22 1425.83,1204.22 1426.42,1204.22 1427.01,1204.22 1427.59,1204.22 1428.18,1204.22 1428.77,1204.22 1429.35,1204.22 1429.94,1204.22 1430.53,1204.22 1431.11,1204.22 1431.7,1204.22 1432.29,1204.22 1432.87,1204.22 1433.46,1204.22 1434.04,1204.22 1434.63,1204.22 1435.22,1204.22 1435.8,1204.22 1436.39,1204.22 1436.98,1204.22 1437.56,1204.22 1438.15,1204.22 1438.74,1204.22 1439.32,1204.22 1439.91,1204.22 1440.5,1204.22 1441.08,1204.22 1441.67,1204.22 1442.25,1204.22 1442.84,1204.22 1443.43,1204.22 1444.01,1204.22 1444.6,1204.22 1445.19,1204.22 1445.77,1204.22 1446.36,1204.22 1446.95,1204.22 1447.53,1204.22 1448.12,1204.22 1448.7,1204.22 1449.29,1204.22 1449.88,1204.22 1450.46,1204.22 1451.05,1204.22 1451.64,1204.22 1452.22,1204.22 1452.81,1204.22 1453.4,1204.22 1453.98,1204.22 1454.57,1204.22 1455.16,1204.22 1455.74,1204.22 1456.33,1204.22 1456.91,1204.22 1457.5,1204.22 1458.09,1204.22 1458.67,1204.22 1459.26,1204.22 1459.85,1204.22 1460.43,1204.22 1461.02,1204.22 1461.61,1204.22 1462.19,1204.22 1462.78,1204.22 1463.37,1204.22 1463.95,1204.22 1464.54,1204.22 1465.12,1204.22 1465.71,1204.22 1466.3,1204.22 1466.88,1204.22 1467.47,1204.22 1468.06,1204.22 1468.64,1204.22 1469.23,1204.22 1469.82,1204.22 1470.4,1204.22 1470.99,1204.22 1471.57,1204.22 1472.16,1204.22 1472.75,1204.22 1473.33,1204.22 1473.92,1204.22 1474.51,1204.22 1475.09,1204.22 1475.68,1204.22 1476.27,1204.22 1476.85,1204.22 1477.44,1204.22 1478.03,1204.22 1478.61,1204.22 1479.2,1204.22 1479.78,1204.22 1480.37,1204.22 1480.96,1204.22 1481.54,1204.22 1482.13,1204.22 1482.72,1204.22 1483.3,1204.22 1483.89,1204.22 1484.48,1204.22 1485.06,1204.22 1485.65,1204.22 1486.24,1204.22 1486.82,1204.22 1487.41,1204.22 1487.99,1204.22 1488.58,1204.22 1489.17,1204.22 1489.75,1204.22 1490.34,1204.22 1490.93,1204.22 1491.51,1204.22 1492.1,1204.22 1492.69,1204.22 1493.27,1204.22 1493.86,1204.22 1494.45,1204.22 1495.03,1204.22 1495.62,1204.22 1496.2,1204.22 1496.79,1204.22 1497.38,1204.22 1497.96,1204.22 1498.55,1204.22 1499.14,1204.22 1499.72,1204.22 1500.31,1204.22 1500.9,1204.22 1501.48,1204.22 1502.07,1204.22 1502.65,1204.22 1503.24,1204.22 1503.83,1204.22 1504.41,1204.22 1505,1204.22 1505.59,1204.22 1506.17,1204.22 1506.76,1204.22 1507.35,1204.22 1507.93,1204.22 1508.52,1204.22 1509.11,1204.22 1509.69,1204.22 1510.28,1204.22 1510.86,1204.22 1511.45,1204.22 1512.04,1204.22 1512.62,1204.22 1513.21,1204.22 1513.8,1204.22 1514.38,1204.22 1514.97,1204.22 1515.56,1204.22 1516.14,1204.22 1516.73,1204.22 1517.32,1204.22 1517.9,1204.22 1518.49,1204.22 1519.07,1204.22 1519.66,1204.22 1520.25,1204.22 1520.83,1204.22 1521.42,1204.22 1522.01,1204.22 1522.59,1204.22 1523.18,1204.22 1523.77,1204.22 1524.35,1204.22 1524.94,1204.22 1525.52,1204.22 1526.11,1204.22 1526.7,1204.22 1527.28,1204.22 1527.87,1204.22 1528.46,1204.22 1529.04,1204.22 1529.63,1204.22 1530.22,1204.22 1530.8,1204.22 1531.39,1204.22 1531.98,1204.22 1532.56,1204.22 1533.15,1204.22 1533.73,1204.22 1534.32,1204.22 1534.91,1204.22 1535.49,1204.22 1536.08,1204.22 1536.67,1204.22 1537.25,1204.22 1537.84,1204.22 1538.43,1204.22 1539.01,1204.22 1539.6,1204.22 1540.19,1204.22 1540.77,1204.22 1541.36,1204.22 1541.94,1204.22 1542.53,1204.22 1543.12,1204.22 1543.7,1204.22 1544.29,1204.22 1544.88,1204.22 1545.46,1204.22 1546.05,1204.22 1546.64,1204.22 1547.22,1204.22 1547.81,1204.22 1548.4,1204.22 1548.98,1204.22 1549.57,1204.22 1550.15,1204.22 1550.74,1204.22 1551.33,1204.22 1551.91,1204.22 1552.5,1204.22 1553.09,1204.22 1553.67,1204.22 1554.26,1204.22 1554.85,1204.22 1555.43,1204.22 1556.02,1204.22 1556.6,1204.22 1557.19,1204.22 1557.78,1204.22 1558.36,1204.22 1558.95,1204.22 1559.54,1204.22 1560.12,1204.22 1560.71,1204.22 1561.3,1204.22 1561.88,1204.22 1562.47,1204.22 1563.06,1204.22 1563.64,1204.22 1564.23,1204.22 1564.81,1204.22 1565.4,1204.22 1565.99,1204.22 1566.57,1204.22 1567.16,1204.22 1567.75,1204.22 1568.33,1204.22 1568.92,1204.22 1569.51,1204.22 1570.09,1204.22 1570.68,1204.22 1571.27,1204.22 1571.85,1204.22 1572.44,1204.22 1573.02,1204.22 1573.61,1204.22 1574.2,1204.22 1574.78,1204.22 1575.37,1204.22 1575.96,1204.22 1576.54,1204.22 1577.13,1204.22 1577.72,1204.22 1578.3,1204.22 1578.89,1204.22 1579.47,1204.22 1580.06,1204.22 1580.65,1204.22 1581.23,1204.22 1581.82,1204.22 1582.41,1204.22 1582.99,1204.22 1583.58,1204.22 1584.17,1204.22 1584.75,1204.22 1585.34,1204.22 1585.93,1204.22 1586.51,1204.22 1587.1,1204.22 1587.68,1204.22 1588.27,1204.22 1588.86,1204.22 1589.44,1204.22 1590.03,1204.22 1590.62,1204.22 1591.2,1204.22 1591.79,1204.22 1592.38,1204.22 1592.96,1204.22 1593.55,1204.22 1594.14,1204.22 1594.72,1204.22 1595.31,1204.22 1595.89,1204.22 1596.48,1204.22 1597.07,1204.22 1597.65,1204.22 1598.24,1204.22 1598.83,1204.22 1599.41,1204.22 1600,1204.22 1600.59,1204.22 1601.17,1204.22 1601.76,1204.22 1602.34,1204.22 1602.93,1204.22 1603.52,1204.22 1604.1,1204.22 1604.69,1204.22 1605.28,1204.22 1605.86,1204.22 1606.45,1204.22 1607.04,1204.22 1607.62,1204.22 1608.21,1204.22 1608.8,1204.22 1609.38,1204.22 1609.97,1204.22 1610.55,1204.22 1611.14,1204.22 1611.73,1204.22 1612.31,1204.22 1612.9,1204.22 1613.49,1204.22 1614.07,1204.22 1614.66,1204.22 1615.25,1204.22 1615.83,1204.22 1616.42,1204.22 1617.01,1204.22 1617.59,1204.22 1618.18,1204.22 1618.76,1204.22 1619.35,1204.22 1619.94,1204.22 1620.52,1204.22 1621.11,1204.22 1621.7,1204.22 1622.28,1204.22 1622.87,1204.22 1623.46,1204.22 1624.04,1204.22 1624.63,1204.22 1625.22,1204.22 1625.8,1204.22 1626.39,1204.22 1626.97,1204.22 1627.56,1204.22 1628.15,1204.22 1628.73,1204.22 1629.32,1204.22 1629.91,1204.22 1630.49,1204.22 1631.08,1204.22 1631.67,1204.22 1632.25,1204.22 1632.84,1204.22 1633.42,1204.22 1634.01,1204.22 1634.6,1204.22 1635.18,1204.22 1635.77,1204.22 1636.36,1204.22 1636.94,1204.22 1637.53,1204.22 1638.12,1204.22 1638.7,1204.22 1639.29,1204.22 1639.88,1204.22 1640.46,1204.22 1641.05,1204.22 1641.63,1204.22 1642.22,1204.22 1642.81,1204.22 1643.39,1204.22 1643.98,1204.22 1644.57,1204.22 1645.15,1204.22 1645.74,1204.22 1646.33,1204.22 1646.91,1204.22 1647.5,1204.22 1648.09,1204.22 1648.67,1204.22 1649.26,1204.22 1649.84,1204.22 1650.43,1204.22 1651.02,1204.22 1651.6,1204.22 1652.19,1204.22 1652.78,1204.22 1653.36,1204.22 1653.95,1204.22 1654.54,1204.22 1655.12,1204.22 1655.71,1204.22 1656.29,1204.22 1656.88,1204.22 1657.47,1204.22 1658.05,1204.22 1658.64,1204.22 1659.23,1204.22 1659.81,1204.22 1660.4,1204.22 1660.99,1204.22 1661.57,1204.22 1662.16,1204.22 1662.75,1204.22 1663.33,1204.22 1663.92,1204.22 1664.5,1204.22 1665.09,1204.22 1665.68,1204.22 1666.26,1204.22 1666.85,1204.22 1667.44,1204.22 1668.02,1204.22 1668.61,1204.22 1669.2,1204.22 1669.78,1204.22 1670.37,1204.22 1670.96,1204.22 1671.54,1204.22 1672.13,1204.22 1672.71,1204.22 1673.3,1204.22 1673.89,1204.22 1674.47,1204.22 1675.06,1204.22 1675.65,1204.22 1676.23,1204.22 1676.82,1204.22 1677.41,1204.22 1677.99,1204.22 1678.58,1204.22 1679.17,1204.22 1679.75,1204.22 1680.34,1204.22 1680.92,1204.22 1681.51,1204.22 1682.1,1204.22 1682.68,1204.22 1683.27,1204.22 1683.86,1204.22 1684.44,1204.22 1685.03,1204.22 1685.62,1204.22 1686.2,1204.22 1686.79,1204.22 1687.37,1204.22 1687.96,1204.22 1688.55,1204.22 1689.13,1204.22 1689.72,1204.22 1690.31,1204.22 1690.89,1204.22 1691.48,1204.22 1692.07,1204.22 1692.65,1204.22 1693.24,1204.22 1693.83,1204.22 1694.41,1204.22 1695,1204.22 1695.58,1204.22 1696.17,1204.22 1696.76,1204.22 1697.34,1204.22 1697.93,1204.22 1698.52,1204.22 1699.1,1204.22 1699.69,1204.22 1700.28,1204.22 1700.86,1204.22 1701.45,1204.22 1702.04,1204.22 1702.62,1204.22 1703.21,1204.22 1703.79,1204.22 1704.38,1204.22 1704.97,1204.22 1705.55,1204.22 1706.14,1204.22 1706.73,1204.22 1707.31,1204.22 1707.9,1204.22 1708.49,1204.22 1709.07,1204.22 1709.66,1204.22 1710.24,1204.22 1710.83,1204.22 1711.42,1204.22 1712,1204.22 1712.59,1204.22 1713.18,1204.22 1713.76,1204.22 1714.35,1204.22 1714.94,1204.22 1715.52,1204.22 1716.11,1204.22 1716.7,1204.22 1717.28,1204.22 1717.87,1204.22 1718.45,1204.22 1719.04,1204.22 1719.63,1204.22 1720.21,1204.22 1720.8,1204.22 1721.39,1204.22 1721.97,1204.22 1722.56,1204.22 1723.15,1204.22 1723.73,1204.22 1724.32,1204.22 1724.91,1204.22 1725.49,1204.22 1726.08,1204.22 1726.66,1204.22 1727.25,1204.22 1727.84,1204.22 1728.42,1204.22 1729.01,1204.22 1729.6,1204.22 1730.18,1204.22 1730.77,1204.22 1731.36,1204.22 1731.94,1204.22 1732.53,1204.22 1733.11,1204.22 1733.7,1204.22 1734.29,1204.22 1734.87,1204.22 1735.46,1204.22 1736.05,1204.22 1736.63,1204.22 1737.22,1204.22 1737.81,1204.22 1738.39,1204.22 1738.98,1204.22 1739.57,1204.22 1740.15,1204.22 1740.74,1204.22 1741.32,1204.22 1741.91,1204.22 1742.5,1204.22 1743.08,1204.22 1743.67,1204.22 1744.26,1204.22 1744.84,1204.22 1745.43,1204.22 1746.02,1204.22 1746.6,1204.22 1747.19,1204.22 1747.78,1204.22 1748.36,1204.22 1748.95,1204.22 1749.53,1204.22 1750.12,1204.22 1750.71,1204.22 1751.29,1204.22 1751.88,1204.22 1752.47,1204.22 1753.05,1204.22 1753.64,1204.22 1754.23,1204.22 1754.81,1204.22 1755.4,1204.22 1755.99,1204.22 1756.57,1204.22 1757.16,1204.22 1757.74,1204.22 1758.33,1204.22 1758.92,1204.22 1759.5,1204.22 1760.09,1204.22 1760.68,1204.22 1761.26,1204.22 1761.85,1204.22 1762.44,1204.22 1763.02,1204.22 1763.61,1204.22 1764.19,1204.22 1764.78,1204.22 1765.37,1204.22 1765.95,1204.22 1766.54,1204.22 1767.13,1204.22 1767.71,1204.22 1768.3,1204.22 1768.89,1204.22 1769.47,1204.22 1770.06,1204.22 1770.65,1204.22 1771.23,1204.22 1771.82,1204.22 1772.4,1204.22 1772.99,1204.22 1773.58,1204.22 1774.16,1204.22 1774.75,1204.22 1775.34,1204.22 1775.92,1204.22 1776.51,1204.22 1777.1,1204.22 1777.68,1204.22 1778.27,1204.22 1778.86,1204.22 1779.44,1204.22 1780.03,1204.22 1780.61,1204.22 1781.2,1204.22 1781.79,1204.22 1782.37,1204.22 1782.96,1204.22 1783.55,1204.22 1784.13,1204.22 1784.72,1204.22 1785.31,1204.22 1785.89,1204.22 1786.48,1204.22 1787.06,1204.22 1787.65,1204.22 1788.24,1204.22 1788.82,1204.22 1789.41,1204.22 1790,1204.22 1790.58,1204.22 1791.17,1204.22 1791.76,1204.22 1792.34,1204.22 1792.93,1204.22 1793.52,1204.22 1794.1,1204.22 1794.69,1204.22 1795.27,1204.22 1795.86,1204.22 1796.45,1204.22 1797.03,1204.22 1797.62,1204.22 1798.21,1204.22 1798.79,1204.22 1799.38,1204.22 1799.97,1204.22 1800.55,1204.22 1801.14,1204.22 1801.73,1204.22 1802.31,1204.22 1802.9,1204.22 1803.48,1204.22 1804.07,1204.22 1804.66,1204.22 1805.24,1204.22 1805.83,1204.22 1806.42,1204.22 1807,1204.22 1807.59,1204.22 1808.18,1204.22 1808.76,1204.22 1809.35,1204.22 1809.94,1204.22 1810.52,1204.22 1811.11,1204.22 1811.69,1204.22 1812.28,1204.22 1812.87,1204.22 1813.45,1204.22 1814.04,1204.22 1814.63,1204.22 1815.21,1204.22 1815.8,1204.22 1816.39,1204.22 1816.97,1204.22 1817.56,1204.22 1818.14,1204.22 1818.73,1204.22 1819.32,1204.22 1819.9,1204.22 1820.49,1204.22 1821.08,1204.22 1821.66,1204.22 1822.25,1204.22 1822.84,1204.22 1823.42,1204.22 1824.01,1204.22 1824.6,1204.22 1825.18,1204.22 1825.77,1204.22 1826.35,1204.22 1826.94,1204.22 1827.53,1204.22 1828.11,1204.22 1828.7,1204.22 1829.29,1204.22 1829.87,1204.22 1830.46,1204.22 1831.05,1204.22 1831.63,1204.22 1832.22,1204.22 1832.81,1204.22 1833.39,1204.22 1833.98,1204.22 1834.56,1204.22 1835.15,1204.22 1835.74,1204.22 1836.32,1204.22 1836.91,1204.22 1837.5,1204.22 1838.08,1204.22 1838.67,1204.22 1839.26,1204.22 1839.84,1204.22 1840.43,1204.22 1841.01,1204.22 1841.6,1204.22 1842.19,1204.22 1842.77,1204.22 1843.36,1204.22 1843.95,1204.22 1844.53,1204.22 1845.12,1204.22 1845.71,1204.22 1846.29,1204.22 1846.88,1204.22 1847.47,1204.22 1848.05,1204.22 1848.64,1204.22 1849.22,1204.22 1849.81,1204.22 1850.4,1204.22 1850.98,1204.22 1851.57,1204.22 1852.16,1204.22 1852.74,1204.22 1853.33,1204.22 1853.92,1204.22 1854.5,1204.22 1855.09,1204.22 1855.68,1204.22 1856.26,1204.22 1856.85,1204.22 1857.43,1204.22 1858.02,1204.22 1858.61,1204.22 1859.19,1204.22 1859.78,1204.22 1860.37,1204.22 1860.95,1204.22 1861.54,1204.22 1862.13,1204.22 1862.71,1204.22 1863.3,1204.22 1863.88,1204.22 1864.47,1204.22 1865.06,1204.22 1865.64,1204.22 1866.23,1204.22 1866.82,1204.22 1867.4,1204.22 1867.99,1204.22 1868.58,1204.22 1869.16,1204.22 1869.75,1204.22 1870.34,1204.22 1870.92,1204.22 1871.51,1204.22 1872.09,1204.22 1872.68,1204.22 1873.27,1204.22 1873.85,1204.22 1874.44,1204.22 1875.03,1204.22 1875.61,1204.22 1876.2,1204.22 1876.79,1204.22 1877.37,1204.22 1877.96,1204.22 1878.55,1204.22 1879.13,1204.22 1879.72,1204.22 1880.3,1204.22 1880.89,1204.22 1881.48,1204.22 1882.06,1204.22 1882.65,1204.22 1883.24,1204.22 1883.82,1204.22 1884.41,1204.22 1885,1204.22 1885.58,1204.22 1886.17,1204.22 1886.76,1204.22 1887.34,1204.22 1887.93,1204.22 1888.51,1204.22 1889.1,1204.22 1889.69,1204.22 1890.27,1204.22 1890.86,1204.22 1891.45,1204.22 1892.03,1204.22 1892.62,1204.22 1893.21,1204.22 1893.79,1204.22 1894.38,1204.22 1894.96,1204.22 1895.55,1204.22 1896.14,1204.22 1896.72,1204.22 1897.31,1204.22 1897.9,1204.22 1898.48,1204.22 1899.07,1204.22 1899.66,1204.22 1900.24,1204.22 1900.83,1204.22 1901.42,1204.22 1902,1204.22 1902.59,1204.22 1903.17,1204.22 1903.76,1204.22 1904.35,1204.22 1904.93,1204.22 1905.52,1204.22 1906.11,1204.22 1906.69,1204.22 1907.28,1204.22 1907.87,1204.22 1908.45,1204.22 1909.04,1204.22 1909.63,1204.22 1910.21,1204.22 1910.8,1204.22 1911.38,1204.22 1911.97,1204.22 1912.56,1204.22 1913.14,1204.22 1913.73,1204.22 1914.32,1204.22 1914.9,1204.22 1915.49,1204.22 1916.08,1204.22 1916.66,1204.22 1917.25,1204.22 1917.83,1204.22 1918.42,1204.22 1919.01,1204.22 1919.59,1204.22 1920.18,1204.22 1920.77,1204.22 1921.35,1204.22 1921.94,1204.22 1922.53,1204.22 1923.11,1204.22 1923.7,1204.22 1924.29,1204.22 1924.87,1204.22 1925.46,1204.22 1926.04,1204.22 1926.63,1204.22 1927.22,1204.22 1927.8,1204.22 1928.39,1204.22 1928.98,1204.22 1929.56,1204.22 1930.15,1204.22 1930.74,1204.22 1931.32,1204.22 1931.91,1204.22 1932.5,1204.22 1933.08,1204.22 1933.67,1204.22 1934.25,1204.22 1934.84,1204.22 1935.43,1204.22 1936.01,1204.22 1936.6,1204.22 1937.19,1204.22 1937.77,1204.22 1938.36,1204.22 1938.95,1204.22 1939.53,1204.22 1940.12,1204.22 1940.71,1204.22 1941.29,1204.22 1941.88,1204.22 1942.46,1204.22 1943.05,1204.22 1943.64,1204.22 1944.22,1204.22 1944.81,1204.22 1945.4,1204.22 1945.98,1204.22 1946.57,1204.22 1947.16,1204.22 1947.74,1204.22 1948.33,1204.22 1948.91,1204.22 1949.5,1204.22 1950.09,1204.22 1950.67,1204.22 1951.26,1204.22 1951.85,1204.22 1952.43,1204.22 1953.02,1204.22 1953.61,1204.22 1954.19,1204.22 1954.78,1204.22 1955.37,1204.22 1955.95,1204.22 1956.54,1204.22 1957.12,1204.22 1957.71,1204.22 1958.3,1204.22 1958.88,1204.22 1959.47,1204.22 1960.06,1204.22 1960.64,1204.22 1961.23,1204.22 1961.82,1204.22 1962.4,1204.22 1962.99,1204.22 1963.58,1204.22 1964.16,1204.22 1964.75,1204.22 1965.33,1204.22 1965.92,1204.22 1966.51,1204.22 1967.09,1204.22 1967.68,1204.22 1968.27,1204.22 1968.85,1204.22 1969.44,1204.22 1970.03,1204.22 1970.61,1204.22 1971.2,1204.22 1971.78,1204.22 1972.37,1204.22 1972.96,1204.22 1973.54,1204.22 1974.13,1204.22 1974.72,1204.22 1975.3,1204.22 1975.89,1204.22 1976.48,1204.22 1977.06,1204.22 1977.65,1204.22 1978.24,1204.22 1978.82,1204.22 1979.41,1204.22 1979.99,1204.22 1980.58,1204.22 1981.17,1204.22 1981.75,1204.22 1982.34,1204.22 1982.93,1204.22 1983.51,1204.22 1984.1,1204.22 1984.69,1204.22 1985.27,1204.22 1985.86,1204.22 1986.45,1204.22 1987.03,1204.22 1987.62,1204.22 1988.2,1204.22 1988.79,1204.22 1989.38,1204.22 1989.96,1204.22 1990.55,1204.22 1991.14,1204.22 1991.72,1204.22 1992.31,1204.22 1992.9,1204.22 1993.48,1204.22 1994.07,1204.22 1994.65,1204.22 1995.24,1204.22 1995.83,1204.22 1996.41,1204.22 1997,1204.22 1997.59,1204.22 1998.17,1204.22 1998.76,1204.22 1999.35,1204.22 1999.93,1204.22 2000.52,1204.22 2001.11,1204.22 2001.69,1204.22 2002.28,1204.22 2002.86,1204.22 2003.45,1204.22 2004.04,1204.22 2004.62,1204.22 2005.21,1204.22 2005.8,1204.22 2006.38,1204.22 2006.97,1204.22 2007.56,1204.22 2008.14,1204.22 2008.73,1204.22 2009.32,1204.22 2009.9,1204.22 2010.49,1204.22 2011.07,1204.22 2011.66,1204.22 2012.25,1204.22 2012.83,1204.22 2013.42,1204.22 2014.01,1204.22 2014.59,1204.22 2015.18,1204.22 2015.77,1204.22 2016.35,1204.22 2016.94,1204.22 2017.53,1204.22 2018.11,1204.22 2018.7,1204.22 2019.28,1204.22 2019.87,1204.22 2020.46,1204.22 2021.04,1204.22 2021.63,1204.22 2022.22,1204.22 2022.8,1204.22 2023.39,1204.22 2023.98,1204.22 2024.56,1204.22 2025.15,1204.22 2025.73,1204.22 2026.32,1204.22 2026.91,1204.22 2027.49,1204.22 2028.08,1204.22 2028.67,1204.22 2029.25,1204.22 2029.84,1204.22 2030.43,1204.22 2031.01,1204.22 2031.6,1204.22 2032.19,1204.22 2032.77,1204.22 2033.36,1204.22 2033.94,1204.22 2034.53,1204.22 2035.12,1204.22 2035.7,1204.22 2036.29,1204.22 2036.88,1204.22 2037.46,1204.22 2038.05,1204.22 2038.64,1204.22 2039.22,1204.22 2039.81,1204.22 2040.4,1204.22 2040.98,1204.22 2041.57,1204.22 2042.15,1204.22 2042.74,1204.22 2043.33,1204.22 2043.91,1204.22 2044.5,1204.22 2045.09,1204.22 2045.67,1204.22 2046.26,1204.22 2046.85,1204.22 2047.43,1204.22 2048.02,1204.22 2048.6,1204.22 2049.19,1204.22 2049.78,1204.22 2050.36,1204.22 2050.95,1204.22 2051.54,1204.22 2052.12,1204.22 2052.71,1204.22 2053.3,1204.22 2053.88,1204.22 2054.47,1204.22 2055.06,1204.22 2055.64,1204.22 2056.23,1204.22 2056.81,1204.22 2057.4,1204.22 2057.99,1204.22 2058.57,1204.22 2059.16,1204.22 2059.75,1204.22 2060.33,1204.22 2060.92,1204.22 2061.51,1204.22 2062.09,1204.22 2062.68,1204.22 2063.27,1204.22 2063.85,1204.22 2064.44,1204.22 2065.02,1204.22 2065.61,1204.22 2066.2,1204.22 2066.78,1204.22 2067.37,1204.22 2067.96,1204.22 2068.54,1204.22 2069.13,1204.22 2069.72,1204.22 2070.3,1204.22 2070.89,1204.22 2071.48,1204.22 2072.06,1204.22 2072.65,1204.22 2073.23,1204.22 2073.82,1204.22 2074.41,1204.22 2074.99,1204.22 2075.58,1204.22 2076.17,1204.22 2076.75,1204.22 2077.34,1204.22 2077.93,1204.22 2078.51,1204.22 2079.1,1204.22 2079.68,1204.22 2080.27,1204.22 2080.86,1204.22 2081.44,1204.22 2082.03,1204.22 2082.62,1204.22 2083.2,1204.22 2083.79,1204.22 2084.38,1204.22 2084.96,1204.22 2085.55,1204.22 2086.14,1204.22 2086.72,1204.22 2087.31,1204.22 2087.89,1204.22 2088.48,1204.22 2089.07,1204.22 2089.65,1204.22 2090.24,1204.22 2090.83,1204.22 2091.41,1204.22 2092,1204.22 2092.59,1204.22 2093.17,1204.22 2093.76,1204.22 2094.35,1204.22 2094.93,1204.22 2095.52,1204.22 2096.1,1204.22 2096.69,1204.22 2097.28,1204.22 2097.86,1204.22 2098.45,1204.22 2099.04,1204.22 2099.62,1204.22 2100.21,1204.22 2100.8,1204.22 2101.38,1204.22 2101.97,1204.22 2102.55,1204.22 2103.14,1204.22 2103.73,1204.22 2104.31,1204.22 2104.9,1204.22 2105.49,1204.22 2106.07,1204.22 2106.66,1204.22 2107.25,1204.22 2107.83,1204.22 2108.42,1204.22 2109.01,1204.22 2109.59,1204.22 2110.18,1204.22 2110.76,1204.22 2111.35,1204.22 2111.94,1204.22 2112.52,1204.22 2113.11,1204.22 2113.7,1204.22 2114.28,1204.22 2114.87,1204.22 2115.46,1204.22 2116.04,1204.22 2116.63,1204.22 2117.22,1204.22 2117.8,1204.22 2118.39,1204.22 2118.97,1204.22 2119.56,1204.22 2120.15,1204.22 2120.73,1204.22 2121.32,1204.22 2121.91,1204.22 2122.49,1204.22 2123.08,1204.22 2123.67,1204.22 2124.25,1204.22 2124.84,1204.22 2125.42,1204.22 2126.01,1204.22 2126.6,1204.22 2127.18,1204.22 2127.77,1204.22 2128.36,1204.22 2128.94,1204.22 2129.53,1204.22 2130.12,1204.22 2130.7,1204.22 2131.29,1204.22 2131.88,1204.22 2132.46,1204.22 2133.05,1204.22 2133.63,1204.22 2134.22,1204.22 2134.81,1204.22 2135.39,1204.22 2135.98,1204.22 2136.57,1204.22 2137.15,1204.22 2137.74,1204.22 2138.33,1204.22 2138.91,1204.22 2139.5,1204.22 2140.09,1204.22 2140.67,1204.22 2141.26,1204.22 2141.84,1204.22 2142.43,1204.22 2143.02,1204.22 2143.6,1204.22 2144.19,1204.22 2144.78,1204.22 2145.36,1204.22 2145.95,1204.22 2146.54,1204.22 2147.12,1204.22 2147.71,1204.22 2148.3,1204.22 2148.88,1204.22 2149.47,1204.22 2150.05,1204.22 2150.64,1204.22 2151.23,1204.22 2151.81,1204.22 2152.4,1204.22 2152.99,1204.22 2153.57,1204.22 2154.16,1204.22 2154.75,1204.22 2155.33,1204.22 2155.92,1204.22 2156.5,1204.22 2157.09,1204.22 2157.68,1204.22 2158.26,1204.22 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.84,1186.07 1401.22,899.083 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1221.83 985.439,1186.07 2158.26,1186.07 2158.26,1221.83 985.439,1221.83 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip880)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip880)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip883\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip880)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip880)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip883)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,1249.76 162.114,-155.32 162.673,-286.204 163.232,-1628.76 163.792,-2846.31 164.351,-3931.84 164.91,-4960.67 165.469,-5866.19 166.029,-6707.52 166.588,-7454.23 167.147,-8171.99 167.706,-8821.78 168.266,-9379.95 168.825,-9052.79 169.384,-9539.53 169.943,-9973.94 170.503,-10343.5 171.062,-10684.1 171.621,-10368 172.18,-10650.5 172.74,-10909 173.299,-11123.5 173.858,-11311.1 174.417,-11022.9 174.977,-11164 175.536,-11262.7 176.095,-11343.8 176.655,-11052 177.214,-11095.7 177.773,-11122.2 178.332,-10832.7 178.892,-10573.3 179.451,-10572.7 180.01,-10547.5 180.569,-10498.3 181.129,-10230 181.688,-10181.7 182.247,-9927.35 182.806,-9687.51 183.366,-9611.76 183.925,-9520.69 184.484,-9421.07 185.043,-9174.32 185.603,-9076.61 186.162,-8968.12 186.721,-8738.4 187.28,-8625.76 187.84,-8393.96 188.399,-8175.3 188.958,-7940.48 189.517,-7807.85 190.077,-7580.84 190.636,-7281.58 191.195,-7069.8 191.754,-6945.19 192.314,-6672.65 192.873,-6484.64 193.432,-6298.23 193.991,-5966.73 194.551,-5668.13 195.11,-5431.78 195.669,-5087.76 196.228,-4928.55 196.788,-4820.64 197.347,-4611.73 197.906,-4411.7 198.465,-4217.61 199.025,-4124.67 199.584,-3897.53 200.143,-3806.18 200.702,-3633.52 201.262,-3506.84 201.821,-3338.42 202.38,-3179.69 202.939,-3104.74 203.499,-2991.63 204.058,-2886.14 204.617,-2777.58 205.176,-2638.33 205.736,-2534.54 206.295,-2435.88 206.854,-2272.53 207.413,-2145.16 207.973,-1996.64 208.532,-1949.15 209.091,-1861.05 209.65,-1778.38 210.21,-1640.59 210.769,-1536.76 211.328,-1439.03 211.887,-1341.4 212.447,-1272.29 213.006,-1152.09 213.565,-1090.34 214.124,-1029.1 214.684,-941.946 215.243,-884.554 215.802,-855.364 216.361,-821.955 216.921,-789.981 217.48,-735.888 218.039,-652.203 218.598,-599.547 219.158,-523.839 219.717,-449.298 220.276,-425.921 220.835,-359.416 221.395,-313.053 221.954,-292.604 222.513,-246.623 223.072,-181.093 223.632,-93.5253 224.191,-51.6683 224.75,-54.7875 225.309,1.93184 225.869,39.4674 226.428,76.573 226.987,88.9297 227.546,143.888 228.106,179.037 228.665,209.383 229.224,215.344 229.783,248.741 230.343,300.184 230.902,328.939 231.461,317.012 232.02,287.348 232.58,319.759 233.139,377.844 233.698,429.963 234.257,440.346 234.817,451.813 235.376,480.684 235.935,527.629 236.494,553.34 237.054,555.453 237.613,545.575 238.172,589.806 238.731,654.013 239.291,677.073 239.85,680.032 240.409,699.812 240.968,699.662 241.528,702.832 242.087,688.232 242.646,693.624 243.205,712.212 243.765,713.768 244.324,807.705 244.883,845.262 245.442,836.747 246.002,836.461 246.561,835.52 247.12,829.338 247.679,845.079 248.239,846.764 248.798,881.62 249.357,878.539 249.916,895.688 250.476,924.923 251.035,938.064 251.594,930.322 252.153,947.647 252.713,956.237 253.272,951.03 253.831,960.875 254.39,992.723 254.95,1023.11 255.509,1050.43 256.068,1026.38 256.627,1050.84 257.187,1024.04 257.746,1031.95 258.305,1023.44 258.864,1016.14 259.424,990.798 259.983,983.538 260.542,996.989 261.101,994.892 261.661,989.93 262.22,1003.92 262.779,1010.48 263.338,1038.03 263.898,1024.47 264.457,1015.9 265.016,1028.16 265.575,1037.36 266.135,1063.79 266.694,1057.24 267.253,1052.07 267.812,1044.44 268.372,1038.94 268.931,1062.99 269.49,1070.69 270.049,1079.46 270.609,1070.26 271.168,1082.09 271.727,1090.74 272.286,1114.12 272.846,1106.86 273.405,1080.85 273.964,1111.93 274.523,1137.94 275.083,1142.97 275.642,1114.5 276.201,1123.25 276.76,1129.08 277.32,1103.74 277.879,1097.68 278.438,1074.54 278.997,1101.79 279.557,1094.33 280.116,1068.68 280.675,1059.84 281.234,1120.07 281.794,1110.44 282.353,1100.47 282.912,1094.58 283.471,1102.19 284.031,1075.47 284.59,1067.03 285.149,1061.78 285.708,1053.99 286.268,1048.18 286.827,1045.68 287.386,1089.46 287.945,1048.25 288.505,1074.89 289.064,1066.76 289.623,1055.54 290.182,1097.99 290.742,1083.62 291.301,1078.45 291.86,1070.78 292.419,1077.81 292.979,1088.4 293.538,1109.86 294.097,1180.07 294.656,1197.14 295.216,1163.75 295.775,1184.43 296.334,1154.13 296.893,1143.15 297.453,1130.09 298.012,1135.25 298.571,1086.8 299.13,1093.07 299.69,1082.31 300.249,1106.03 300.808,1096.67 301.368,1117.9 301.927,1125.16 302.486,1064.27 303.045,1056.19 303.605,1025.02 304.164,1014.68 304.723,991.792 305.282,1020.31 305.842,1011.55 306.401,1040.04 306.96,983.652 307.519,997.611 308.079,992.111 308.638,973.774 309.197,970.363 309.756,966.194 310.316,975.648 310.875,1004.13 311.434,998.595 311.993,976.689 312.553,969.841 313.112,916.06 313.671,910.4 314.23,893.375 314.79,943.199 315.349,953.47 315.908,966.147 316.467,995.913 317.027,936.98 317.586,901.684 318.145,901.016 318.704,896.396 319.264,906.734 319.823,904.598 320.382,923.615 320.941,872.893 321.501,904.051 322.06,953.203 322.619,947.312 323.178,941.516 323.738,973.683 324.297,952.401 324.856,914.54 325.415,912.225 325.975,892.17 326.534,874.604 327.093,886.292 327.652,885.545 328.212,883.382 328.771,880.226 329.33,877.67 329.889,893.551 330.449,909.284 331.008,904.704 331.567,902.473 332.126,917.95 332.686,931.939 333.245,927.239 333.804,909.146 334.363,939.276 334.923,935.3 335.482,897.159 336.041,912.456 336.6,942.07 337.16,953.008 337.719,996.93 338.278,1005.53 338.837,1049.57 339.397,1039.76 339.956,1060.08 340.515,1032.81 341.074,1025.68 341.634,1030.3 342.193,1036.4 342.752,1037.6 343.311,1026.44 343.871,1017.81 344.43,1009.23 344.989,1001.87 345.548,992.371 346.108,982.809 346.667,974.063 347.226,949.869 347.785,963.662 348.345,970.863 348.904,928.45 349.463,938.401 350.022,917.295 350.582,929.834 351.141,941.8 351.7,950.275 352.259,940.977 352.819,921.265 353.378,914.127 353.937,892.344 354.496,888.584 355.056,870.981 355.615,852.961 356.174,849.221 356.733,849.569 357.293,813.606 357.852,812.541 358.411,796.184 358.97,798.455 359.53,813.842 360.089,798.646 360.648,802.316 361.207,818.347 361.767,821.174 362.326,788.767 362.885,821.438 363.444,820.335 364.004,854.886 364.563,853.23 365.122,833.346 365.681,814.407 366.241,815.215 366.8,865.4 367.359,845.37 367.918,857.376 368.478,868.038 369.037,849.165 369.596,832.776 370.155,834.862 370.715,799.216 371.274,797.658 371.833,799.193 372.392,847.777 372.952,865.029 373.511,880.262 374.07,906.231 374.629,901.434 375.189,893.971 375.748,888.68 376.307,884.678 376.866,897.588 377.426,957.743 377.985,933.877 378.544,927.086 379.103,906.325 379.663,933.778 380.222,893.861 380.781,876.258 381.34,888.232 381.9,882.977 382.459,891.803 383.018,898.361 383.577,878.863 384.137,860.373 384.696,856.593 385.255,868.436 385.814,863.335 386.374,889.61 386.933,885.145 387.492,894.615 388.051,903.405 388.611,880.663 389.17,826.554 389.729,824.434 390.288,791.411 390.848,823.914 391.407,818.001 391.966,816.195 392.525,848.316 393.085,865.232 393.644,864.159 394.203,827.196 394.762,812.196 395.322,825.515 395.881,824.883 396.44,809.273 396.999,827.374 397.559,828.449 398.118,844.317 398.677,841.563 399.236,856.486 399.796,849.966 400.355,832.213 400.914,843.975 401.473,838.505 402.033,850.416 402.592,828.549 403.151,794.052 403.71,791.505 404.27,774.615 404.829,789.042 405.388,789.984 405.947,790.01 406.507,835.399 407.066,782.468 407.625,798.326 408.184,862.335 408.744,857.935 409.303,886.984 409.862,880.326 410.421,887.553 410.981,851.077 411.54,861.334 412.099,836.016 412.658,832.024 413.218,846.992 413.777,840.761 414.336,805.329 414.895,774.066 415.455,803.807 416.014,854.266 416.573,847.434 417.132,842.156 417.692,836.978 418.251,846.97 418.81,827.3 419.369,837.842 419.929,880.41 420.488,877.86 421.047,889.209 421.606,882.482 422.166,858.637 422.725,809.2 423.284,788.705 423.843,787.229 424.403,770.74 424.962,769.996 425.521,753.141 426.08,786.984 426.64,735.03 427.199,755.885 427.758,773.037 428.318,755.651 428.877,755.445 429.436,736.28 429.995,723.65 430.555,724.019 431.114,727.726 431.673,750.482 432.232,750.748 432.792,749.693 433.351,796.486 433.91,726.26 434.469,760.85 435.029,778.497 435.588,761.689 436.147,795.149 436.706,775.183 437.266,772.202 437.825,771.4 438.384,786.417 438.943,782.867 439.503,781.373 440.062,796.486 440.621,827.152 441.18,820.376 441.74,815.326 442.299,783.263 442.858,796.223 443.417,809.246 443.977,821.28 444.536,834.308 445.095,830.082 445.654,856.395 446.214,848.677 446.773,846.635 447.332,845.382 447.891,823.993 448.451,805.827 449.01,833.768 449.569,813.478 450.128,777.817 450.688,775.633 451.247,758.77 451.806,743.287 452.365,742.02 452.925,772.383 453.484,738.275 454.043,707.176 454.602,676.493 455.162,696.5 455.721,699.828 456.28,671.506 456.839,660.853 457.399,649.444 457.958,636.804 458.517,625.344 459.076,630.525 459.636,668.62 460.195,688.985 460.754,691.796 461.313,677.738 461.873,666.341 462.432,671.882 462.991,712.195 463.55,731.474 464.11,746.413 464.669,764.278 465.228,711.83 465.787,712.714 466.347,745.189 466.906,727.265 467.465,728.115 468.024,712.384 468.584,711.989 469.143,698.76 469.702,729.483 470.261,715.476 470.821,732.305 471.38,736.59 471.939,753.889 472.498,771.504 473.058,753 473.617,736.64 474.176,739.712 474.735,741.231 475.295,741.797 475.854,744.114 476.413,694.62 476.972,700.356 477.532,720.836 478.091,753.037 478.65,782.365 479.209,813.664 479.769,759.929 480.328,724.997 480.887,755.295 481.446,753.779 482.006,722.542 482.565,707.992 483.124,678.728 483.683,695.57 484.243,696.368 484.802,716.414 485.361,735.721 485.92,702.593 486.48,770.729 487.039,769.688 487.598,738.366 488.157,738.04 488.717,722.477 489.276,710.002 489.835,760.167 490.394,774.156 490.954,820.759 491.513,802.84 492.072,827.928 492.631,836.383 493.191,814.255 493.75,825.517 494.309,815.928 494.868,778.397 495.428,775.493 495.987,757.949 496.546,759.682 497.105,775.116 497.665,771.474 498.224,755.247 498.783,785.069 499.342,782.294 499.902,797.385 500.461,807.65 501.02,803.25 501.579,811.822 502.139,809.054 502.698,820.33 503.257,780.546 503.816,793.56 504.376,773.786 504.935,786.454 505.494,799.63 506.053,798.9 506.613,782.704 507.172,777.807 507.731,774.895 508.29,756.276 508.85,755.212 509.409,742.623 509.968,741.2 510.527,756.776 511.087,738.712 511.646,742.639 512.205,724.915 512.764,740.685 513.324,743.519 513.883,726.7 514.442,678.92 515.001,680.775 515.561,715.367 516.12,730.039 516.679,748.469 517.238,744.752 517.798,726.735 518.357,742.304 518.916,774.81 519.475,704.415 520.035,692.409 520.594,744.62 521.153,778.707 521.712,758.153 522.272,758.804 522.831,789.016 523.39,783.041 523.949,781.577 524.509,764.361 525.068,779.077 525.627,793.73 526.186,791.95 526.746,788.51 527.305,770.376 527.864,767.103 528.423,749.268 528.983,760.407 529.542,773.73 530.101,773.621 530.66,785.537 531.22,798.542 531.779,797.575 532.338,778.473 532.897,787.762 533.457,769.767 534.016,770.64 534.575,753.444 535.134,753.949 535.694,752.886 536.253,767.011 536.812,748.855 537.371,749.151 537.931,734.691 538.49,749.612 539.049,745.774 539.608,729.43 540.168,727.815 540.727,739.377 541.286,741.251 541.845,771.993 542.405,738.525 542.964,751.896 543.523,748.399 544.082,729.949 544.642,747.493 545.201,746.63 545.76,775.768 546.319,789.967 546.879,767.337 547.438,796.56 547.997,820.871 548.556,850.079 549.116,842.149 549.675,813.682 550.234,805.385 550.793,815.634 551.353,777.728 551.912,771.393 552.471,770.512 553.031,766.861 553.59,762.051 554.149,774.304 554.708,735.628 555.268,748.544 555.827,696.679 556.386,698.869 556.945,685.855 557.505,687.12 558.064,671.781 558.623,677.521 559.182,667.667 559.742,705.752 560.301,675.489 560.86,645.38 561.419,633.368 561.979,651.649 562.538,638.997 563.097,677.665 563.656,694.604 564.216,679.858 564.775,682.631 565.334,682.686 565.893,702.377 566.453,718.659 567.012,735.35 567.571,683.865 568.13,718.298 568.69,748.706 569.249,732.796 569.808,762.453 570.367,777.056 570.927,739.966 571.486,737.622 572.045,753.145 572.604,721.152 573.164,671.98 573.723,704.499 574.282,719.278 574.841,715.897 575.401,697.103 575.96,684.794 576.519,685.022 577.078,685.887 577.638,704.427 578.197,720.064 578.756,702.188 579.315,706.668 579.875,738.78 580.434,755.003 580.993,736.5 581.552,703.593 582.112,672.303 582.671,658.458 583.23,663.812 583.789,648.198 584.349,652.677 584.908,659.17 585.467,679.558 586.026,627.455 586.586,649.665 587.145,651.791 587.704,652.518 588.263,670.796 588.823,720.451 589.382,703.545 589.941,702.297 590.5,703.284 591.06,724.062 591.619,741.064 592.178,758.801 592.737,755.042 593.297,735.276 593.856,701.538 594.415,688.45 594.974,657.037 595.534,625.829 596.093,661.762 596.652,664.524 597.211,701.693 597.771,715.355 598.33,697.104 598.889,715.573 599.448,712.148 600.008,697.736 600.567,684.923 601.126,705.314 601.685,703.459 602.245,707.455 602.804,704.14 603.363,753.414 603.922,720.122 604.482,704.679 605.041,722.444 605.6,753.97 606.159,752.154 606.719,749.723 607.278,728.32 607.837,697.169 608.396,682.606 608.956,715.841 609.515,717.269 610.074,731.007 610.633,749.037 611.193,731.505 611.752,776.811 612.311,761.361 612.87,742.341 613.43,711.205 613.989,675.608 614.548,694.053 615.107,698.192 615.667,682.693 616.226,665.864 616.785,653.415 617.344,671.931 617.904,693.954 618.463,692.964 619.022,709.143 619.581,707.539 620.141,705.572 620.7,691.66 621.259,694.004 621.818,678.285 622.378,662.474 622.937,680.953 623.496,699.642 624.055,713.735 624.615,730.566 625.174,744.633 625.733,741.542 626.292,740.041 626.852,772.98 627.411,737.261 627.97,736.175 628.529,749.034 629.089,745.443 629.648,729.201 630.207,726.828 630.766,726.316 631.326,723.915 631.885,723.571 632.444,721.663 633.003,739.686 633.563,705.043 634.122,719.861 634.681,719.566 635.24,739.05 635.8,770.407 636.359,766.426 636.918,747.361 637.477,777.096 638.037,854.271 638.596,812.056 639.155,804.983 639.714,785.248 640.274,768.83 640.833,764.584 641.392,748.732 641.951,761.68 642.511,724.754 643.07,726.443 643.629,777.216 644.188,758.522 644.748,768.224 645.307,750.274 645.866,742.911 646.425,770.76 646.985,767.325 647.544,794.481 648.103,821.386 648.662,813.059 649.222,802.988 649.781,747.083 650.34,743.739 650.899,725.066 651.459,741.483 652.018,721.329 652.577,704.738 653.136,703.622 653.696,670.596 654.255,686.634 654.814,736.057 655.373,768.457 655.933,736.768 656.492,719.619 657.051,733.564 657.61,729.347 658.17,614.845 658.729,634.803 659.288,607.382 659.847,632.606 660.407,620.212 660.966,642.34 661.525,613.287 662.084,619.422 662.644,623.37 663.203,628.204 663.762,600.152 664.321,637.605 664.881,655.855 665.44,643.723 665.999,665.181 666.558,665.425 667.118,663.306 667.677,680.992 668.236,679.163 668.795,679.221 669.355,728.936 669.914,728.574 670.473,707.917 671.032,689.688 671.592,690.87 672.151,673.988 672.71,660.317 673.269,677.189 673.829,647.322 674.388,664.492 674.947,680.483 675.506,696.078 676.066,716.205 676.625,731.518 677.184,715.856 677.743,745.633 678.303,727.286 678.862,692.708 679.421,662.687 679.981,680.197 680.54,679.466 681.099,663.001 681.658,663.737 682.218,665.12 682.777,652.151 683.336,621.603 683.895,593.761 684.455,585.735 685.014,544.977 685.573,534.191 686.132,541.816 686.692,566.827 687.251,591.984 687.81,598.132 688.369,601.633 688.929,605.948 689.488,627.442 690.047,633.534 690.606,637.879 691.166,626.07 691.725,646.182 692.284,636.447 692.843,640.025 693.403,641.227 693.962,643.843 694.521,648.526 695.08,649.633 695.64,653.869 696.199,691.358 696.758,708.287 697.317,709.496 697.877,724.77 698.436,705.335 698.995,688.084 699.554,738.412 700.114,752.085 700.673,766.043 701.232,749.741 701.791,748.016 702.351,797.199 702.91,790.131 703.469,785.625 704.028,766.855 704.588,795.646 705.147,775.748 705.706,738.109 706.265,716.597 706.825,714.781 707.384,731.932 707.943,747.254 708.502,732.689 709.062,748.793 709.621,759.567 710.18,730.229 710.739,741.152 711.299,740.986 711.858,718.566 712.417,684.076 712.976,703.029 713.536,685.616 714.095,680.965 714.654,697.127 715.213,697.015 715.773,696.451 716.332,677.767 716.891,695.608 717.45,676.911 718.01,678.551 718.569,694.887 719.128,679.63 719.687,712.843 720.247,730.881 720.806,730.537 721.365,712.196 721.924,692.983 722.484,692.655 723.043,676.14 723.602,659.82 724.161,643.003 724.721,629.715 725.28,634.612 725.839,656.222 726.398,642.553 726.958,679.067 727.517,678.732 728.076,679.187 728.635,662.997 729.195,632.416 729.754,630.799 730.313,636.131 730.872,676.192 731.432,678.833 731.991,695.358 732.55,710.866 733.109,726.064 733.669,740.75 734.228,702.643 734.787,719.127 735.346,702.541 735.906,716.77 736.465,714.634 737.024,678.984 737.583,712.257 738.143,695.843 738.702,695.628 739.261,743.209 739.82,752.95 740.38,736.095 740.939,735.467 741.498,716.714 742.057,713.744 742.617,711.289 743.176,679.718 743.735,648.861 744.294,633.984 744.854,669.213 745.413,655.407 745.972,656.04 746.531,706.59 747.091,705.942 747.65,688.847 748.209,692.989 748.768,706.982 749.328,722.103 749.887,690.292 750.446,692.074 751.005,705.274 751.565,719.165 752.124,706.534 752.683,705.414 753.242,721.674 753.802,687.766 754.361,674.719 754.92,647.134 755.479,666.321 756.039,647.832 756.598,646.881 757.157,700.058 757.716,716.624 758.276,731.606 758.835,734.084 759.394,747.878 759.953,778.482 760.513,789.789 761.072,768.886 761.631,746.441 762.19,744.591 762.75,771.202 763.309,768.611 763.868,797.253 764.427,822.617 764.987,833.464 765.546,827.14 766.105,819.671 766.664,811.966 767.224,788.973 767.783,782.234 768.342,745.577 768.901,749.803 769.461,745.059 770.02,712.085 770.579,726.611 771.138,743.344 771.698,723.855 772.257,736.634 772.816,750.759 773.375,762.179 773.935,772.875 774.494,788.067 775.053,763.146 775.612,792.749 776.172,789.128 776.731,801.92 777.29,796.712 777.849,810.341 778.409,803.423 778.968,797.722 779.527,792.216 780.086,753.125 780.646,732.128 781.205,727.963 781.764,740.993 782.323,754.165 782.883,732.18 783.442,730.269 784.001,727.557 784.56,724.619 785.12,739.271 785.679,770.085 786.238,748.724 786.797,743.493 787.357,691.171 787.916,675.042 788.475,689.615 789.034,657.982 789.594,692.794 790.153,674.519 790.712,690.481 791.271,689.214 791.831,690.142 792.39,723.104 792.949,722.613 793.508,704.133 794.068,715.82 794.627,764.982 795.186,773.821 795.745,737.635 796.305,684.919 796.864,703.127 797.423,702.02 797.982,667.179 798.542,716.562 799.101,746.76 799.66,744.631 800.219,743.693 800.779,710.812 801.338,727.831 801.897,712.429 802.456,677.608 803.016,663.755 803.575,661.923 804.134,664.524 804.693,652.772 805.253,620.317 805.812,623.006 806.371,625.367 806.931,611.722 807.49,629.308 808.049,631.79 808.608,601.746 809.168,620.327 809.727,621.92 810.286,628.082 810.845,616.061 811.405,617.069 811.964,623.9 812.523,592.947 813.082,664.014 813.642,679.408 814.201,710.938 814.76,692.526 815.319,641.611 815.879,676.043 816.438,676.694 816.997,658.465 817.556,628.998 818.116,652.157 818.675,635.054 819.234,618.272 819.793,604.302 820.353,624.98 820.912,583.35 821.471,575.211 822.03,596.273 822.59,568.638 823.149,557.458 823.708,598.343 824.267,589.378 824.827,610.717 825.386,614.057 825.945,602.522 826.504,605.72 827.064,643.421 827.623,646.093 828.182,651.724 828.741,636.083 829.301,636.819 829.86,576.155 830.419,568.553 830.978,558.848 831.538,586.147 832.097,641.239 832.656,608.709 833.215,642.5 833.775,644.209 834.334,634.12 834.893,638.578 835.452,659.105 836.012,694.938 836.571,698.029 837.13,666.801 837.689,653.496 838.249,642.496 838.808,624.715 839.367,629.712 839.926,635.285 840.486,654.334 841.045,657.05 841.604,675.572 842.163,694.838 842.723,713.061 843.282,712.146 843.841,726.938 844.4,727.614 844.96,758.299 845.519,767.828 846.078,765.095 846.637,791.059 847.197,801.31 847.756,809.564 848.315,786.022 848.874,798.7 849.434,793.169 849.993,773.249 850.552,771.422 851.111,767.642 851.671,762.928 852.23,788.783 852.789,782.076 853.348,826.967 853.908,786.975 854.467,752.043 855.026,781.884 855.585,748.267 856.145,760.667 856.704,740.24 857.263,734.489 857.822,712.939 858.382,695.013 858.941,692.862 859.5,686.681 860.059,718.064 860.619,669.87 861.178,667.867 861.737,633.639 862.296,622.889 862.856,593.699 863.415,597.367 863.974,632.894 864.533,634.132 865.093,604.401 865.652,595.863 866.211,603.033 866.77,610.379 867.33,613.431 867.889,621.389 868.448,639.899 869.007,657.573 869.567,661.022 870.126,646.832 870.685,634.034 871.244,652.479 871.804,638.543 872.363,675.076 872.922,675.252 873.481,722.634 874.041,722.591 874.6,739.365 875.159,734.106 875.718,697.298 876.278,713.741 876.837,697.041 877.396,696.118 877.955,696.265 878.515,700.387 879.074,714.341 879.633,695.733 880.192,680.828 880.752,681.69 881.311,665.792 881.87,700.496 882.429,700.701 882.989,679.892 883.548,662.955 884.107,651.959 884.666,650.343 885.226,619.335 885.785,621.312 886.344,609.217 886.903,646.376 887.463,647.554 888.022,649.828 888.581,651.075 889.14,655.354 889.7,623.926 890.259,629.628 890.818,632.595 891.377,602.353 891.937,622.144 892.496,611.602 893.055,596.913 893.614,604.72 894.174,642.7 894.733,673.825 895.292,655.861 895.851,674.541 896.411,693.087 896.97,722.376 897.529,704.091 898.088,684.498 898.648,719.991 899.207,716.707 899.766,683.933 900.325,684.835 900.885,702.819 901.444,702.754 902.003,681.565 902.562,696.689 903.122,713.275 903.681,677.323 904.24,660.543 904.799,647.453 905.359,615.802 905.918,617.997 906.477,637.81 907.036,640.775 907.596,609.243 908.155,617.746 908.714,636.299 909.273,638.396 909.833,641.243 910.392,643.77 910.951,680.634 911.51,665.904 912.07,667.41 912.629,650.516 913.188,648.67 913.747,682.212 914.307,668.558 914.866,656.707 915.425,658.915 915.984,693.93 916.544,707.084 917.103,737.57 917.662,715.737 918.221,711.336 918.781,722.902 919.34,703.86 919.899,686.181 920.458,733.817 921.018,683.159 921.577,701.35 922.136,731.143 922.695,745.886 923.255,757.681 923.814,753.431 924.373,733.826 924.932,684.394 925.492,697.046 926.051,711.854 926.61,724.388 927.169,706.683 927.729,658.152 928.288,645.734 928.847,650.388 929.406,636.56 929.966,673.435 930.525,708.139 931.084,738.427 931.644,736.646 932.203,719.499 932.762,704.324 933.321,672.626 933.881,705.79 934.44,706.061 934.999,689.964 935.558,669.483 936.118,683.653 936.677,666.39 937.236,685.254 937.795,665.72 938.355,653.092 938.914,622.207 939.473,640.08 940.032,630.882 940.592,635.359 941.151,673.768 941.71,707.047 942.269,724.302 942.829,742.542 943.388,725.603 943.947,740.623 944.506,721.772 945.066,720.073 945.625,734.652 946.184,731.951 946.743,742.768 947.303,761.657 947.862,741.598 948.421,770.804 948.98,734.138 949.54,762.425 950.099,723.816 950.658,748.366 951.217,775.219 951.777,787.361 952.336,819.048 952.895,777.654 953.454,789.306 954.014,783.291 954.573,824.453 955.132,799.296 955.691,795.162 956.251,724.335 956.81,721.909 957.369,735.055 957.928,732.662 958.488,728.185 959.047,724.35 959.606,740.463 960.165,704.759 960.725,716.031 961.284,715.348 961.843,728.524 962.402,709.48 962.962,689.758 963.521,722.284 964.08,700.486 964.639,651.57 965.199,585.014 965.758,590.045 966.317,598.277 966.876,620.282 967.436,640.961 967.995,643.971 968.554,658.239 969.113,674.367 969.673,673.486 970.232,656.868 970.791,659.244 971.35,672.56 971.91,704.462 972.469,686.831 973.028,652.464 973.587,654.963 974.147,691.211 974.706,724.776 975.265,736.269 975.824,782.816 976.384,730.312 976.943,711.531 977.502,693.632 978.061,648.151 978.621,636.449 979.18,640.936 979.739,677.733 980.298,678.652 980.858,664.413 981.417,664.435 981.976,668.15 982.535,638.227 983.095,672.867 983.654,674.289 984.213,690.422 984.772,685.857 985.332,687.655 985.891,688.803 986.45,660.01 987.009,687.58 987.569,684.963 988.128,683.862 988.687,698.388 989.246,693.028 989.806,655.209 990.365,671.83 990.924,690.559 991.483,702.768 992.043,669.426 992.602,665.828 993.161,715.13 993.72,697.792 994.28,683.113 994.839,663.74 995.398,666.202 995.957,618.941 996.517,643.597 997.076,646.732 997.635,599.076 998.194,624.547 998.754,627.088 999.313,617.135 999.872,605.895 1000.43,611.503 1000.99,600.2 1001.55,653.206 1002.11,700.709 1002.67,715.733 1003.23,714.643 1003.79,678.852 1004.35,665.839 1004.91,681.085 1005.46,666.175 1006.02,668.719 1006.58,652.252 1007.14,670.699 1007.7,688.199 1008.26,700.271 1008.82,727.16 1009.38,725.307 1009.94,757.592 1010.5,737.364 1011.06,732.029 1011.62,714.208 1012.18,713.173 1012.73,707.531 1013.29,705.27 1013.85,752.913 1014.41,748.115 1014.97,728.786 1015.53,740.914 1016.09,720.688 1016.65,718.009 1017.21,728.23 1017.77,694.952 1018.33,674.631 1018.89,691.875 1019.45,660.23 1020.01,628.654 1020.56,644.284 1021.12,664.84 1021.68,666.092 1022.24,700.942 1022.8,672.334 1023.36,609.671 1023.92,633.218 1024.48,637.314 1025.04,654.761 1025.6,637.624 1026.16,667.775 1026.72,685.142 1027.28,669.904 1027.83,667.857 1028.39,681.943 1028.95,700.851 1029.51,734.137 1030.07,732.714 1030.63,713.28 1031.19,729.429 1031.75,727.821 1032.31,773.988 1032.87,801.009 1033.43,794.301 1033.99,775.807 1034.55,738.312 1035.1,736.946 1035.66,765.757 1036.22,743.458 1036.78,708.883 1037.34,692.851 1037.9,709.1 1038.46,692.166 1039.02,723.246 1039.58,658.316 1040.14,612.309 1040.7,602.407 1041.26,606.823 1041.82,628.212 1042.38,628.311 1042.93,629.512 1043.49,616.222 1044.05,603.677 1044.61,606.473 1045.17,659.012 1045.73,692.589 1046.29,671.963 1046.85,658.738 1047.41,678.379 1047.97,679.334 1048.53,724.93 1049.09,738.861 1049.65,739.391 1050.2,755.048 1050.76,751.015 1051.32,730.267 1051.88,747.554 1052.44,773.965 1053,754.507 1053.56,702.195 1054.12,681.553 1054.68,667.718 1055.24,682.871 1055.8,683.213 1056.36,652.2 1056.92,636.873 1057.48,624.462 1058.03,626.635 1058.59,647.696 1059.15,643.769 1059.71,629.71 1060.27,649.762 1060.83,668.821 1061.39,702.502 1061.95,700.607 1062.51,669.605 1063.07,675.162 1063.63,690.771 1064.19,707.732 1064.75,719.054 1065.3,716.83 1065.86,734.52 1066.42,748.864 1066.98,748.506 1067.54,728.823 1068.1,727.947 1068.66,682.372 1069.22,679.859 1069.78,699.254 1070.34,653.103 1070.9,689.223 1071.46,668.271 1072.02,652.212 1072.57,672.474 1073.13,656.692 1073.69,673.989 1074.25,640.469 1074.81,610.227 1075.37,633.115 1075.93,620.538 1076.49,590.681 1077.05,627.413 1077.61,597.387 1078.17,619.791 1078.73,609.178 1079.29,645.852 1079.85,650.861 1080.4,668.532 1080.96,651.262 1081.52,655.016 1082.08,629.743 1082.64,617.645 1083.2,668.685 1083.76,670.602 1084.32,657.463 1084.88,696.784 1085.44,715.284 1086,743.538 1086.56,736.941 1087.12,734.143 1087.67,744.807 1088.23,743.114 1088.79,776.235 1089.35,770.695 1089.91,735.746 1090.47,735.741 1091.03,713.491 1091.59,728.788 1092.15,708.66 1092.71,691.867 1093.27,695.101 1093.83,663.085 1094.39,666.175 1094.94,665.195 1095.5,685.036 1096.06,670.663 1096.62,687.656 1097.18,702.012 1097.74,668.143 1098.3,651.314 1098.86,698.466 1099.42,698.15 1099.98,697.469 1100.54,649.238 1101.1,667.596 1101.66,667.603 1102.22,665.986 1102.77,671.793 1103.33,688.774 1103.89,688.454 1104.45,688.409 1105.01,755.123 1105.57,722.328 1106.13,703.994 1106.69,683.935 1107.25,698.791 1107.81,711.841 1108.37,679.58 1108.93,680.88 1109.49,665.758 1110.04,699.315 1110.6,710.783 1111.16,707.844 1111.72,674.772 1112.28,657.346 1112.84,655.685 1113.4,672.56 1113.96,673.352 1114.52,659.539 1115.08,675.103 1115.64,675.794 1116.2,692.588 1116.76,661.833 1117.31,682.347 1117.87,680.178 1118.43,677.306 1118.99,679.096 1119.55,677.13 1120.11,648.053 1120.67,648.742 1121.23,633.062 1121.79,618.227 1122.35,605.779 1122.91,574.654 1123.47,599.247 1124.03,635.111 1124.59,638.511 1125.14,640.613 1125.7,675.878 1126.26,658.228 1126.82,643.197 1127.38,663.872 1127.94,683.634 1128.5,669.686 1129.06,704.972 1129.62,706.033 1130.18,719.631 1130.74,735.438 1131.3,666.712 1131.86,683.724 1132.41,702.973 1132.97,701.254 1133.53,697.993 1134.09,677.932 1134.65,697.448 1135.21,681.554 1135.77,649.591 1136.33,649.92 1136.89,632.293 1137.45,647.183 1138.01,648.366 1138.57,670.341 1139.13,672.578 1139.68,674.956 1140.24,676.44 1140.8,660.676 1141.36,613.035 1141.92,614.081 1142.48,567.443 1143.04,569.378 1143.6,593.893 1144.16,649.215 1144.72,665.525 1145.28,666.838 1145.84,666.962 1146.4,651.659 1146.96,657.079 1147.51,660.785 1148.07,679.723 1148.63,662.558 1149.19,714.43 1149.75,683.526 1150.31,686.101 1150.87,717.239 1151.43,765.175 1151.99,779 1152.55,758.046 1153.11,737.251 1153.67,699.807 1154.23,683.463 1154.78,682.951 1155.34,689.002 1155.9,687.152 1156.46,689.252 1157.02,705.431 1157.58,719.719 1158.14,718.525 1158.7,733.376 1159.26,714.335 1159.82,712.331 1160.38,712.395 1160.94,693.892 1161.5,706.882 1162.05,719.712 1162.61,734.33 1163.17,749.124 1163.73,730.917 1164.29,728.882 1164.85,711.161 1165.41,724.226 1165.97,720.079 1166.53,684.364 1167.09,653.036 1167.65,689.882 1168.21,656.574 1168.77,672.803 1169.33,685.684 1169.88,684.799 1170.44,656.301 1171,657.921 1171.56,657.881 1172.12,646.861 1172.68,663.638 1173.24,708.476 1173.8,709.072 1174.36,707.358 1174.92,722.834 1175.48,722.271 1176.04,755.101 1176.6,720.486 1177.15,704.989 1177.71,721.583 1178.27,686.498 1178.83,684.166 1179.39,682.274 1179.95,664.9 1180.51,647.599 1181.07,664.782 1181.63,635.16 1182.19,656.457 1182.75,663.177 1183.31,629.95 1183.87,616.818 1184.43,649.537 1184.98,679.224 1185.54,647.713 1186.1,650.214 1186.66,665.355 1187.22,685.911 1187.78,732.775 1188.34,748.189 1188.9,744.43 1189.46,759.167 1190.02,786.598 1190.58,748.269 1191.14,730.649 1191.7,730.042 1192.25,773.489 1192.81,732.95 1193.37,762.899 1193.93,757.782 1194.49,754.104 1195.05,766.661 1195.61,779.831 1196.17,744.264 1196.73,771.263 1197.29,796.467 1197.85,805.474 1198.41,799.884 1198.97,743.478 1199.52,755.812 1200.08,734.175 1200.64,765.676 1201.2,729.674 1201.76,728.229 1202.32,742.294 1202.88,754.366 1203.44,732.404 1204,714.346 1204.56,711.373 1205.12,708.524 1205.68,690.111 1206.24,706.514 1206.8,719.512 1207.35,685.825 1207.91,621.056 1208.47,640.646 1209.03,612.029 1209.59,614.626 1210.15,615.47 1210.71,599.67 1211.27,587.397 1211.83,575 1212.39,550.868 1212.95,559.588 1213.51,567.674 1214.07,589.053 1214.62,594.118 1215.18,583.032 1215.74,588.439 1216.3,572.216 1216.86,580.186 1217.42,586.824 1217.98,557.374 1218.54,567.102 1219.1,588.478 1219.66,593.404 1220.22,601.362 1220.78,588.782 1221.34,615.364 1221.89,601.187 1222.45,609.254 1223.01,661.541 1223.57,664.585 1224.13,650.765 1224.69,656.662 1225.25,642.54 1225.81,680.146 1226.37,680.982 1226.93,662.548 1227.49,710.728 1228.05,708.477 1228.61,690.781 1229.17,690.398 1229.72,724.808 1230.28,703.82 1230.84,719.132 1231.4,749.594 1231.96,714.34 1232.52,745.437 1233.08,728.332 1233.64,756.915 1234.2,739.158 1234.76,735.833 1235.32,730.37 1235.88,742.095 1236.44,706.537 1236.99,704.163 1237.55,721.132 1238.11,706.427 1238.67,705.648 1239.23,722.254 1239.79,702.023 1240.35,719.32 1240.91,716.639 1241.47,697.405 1242.03,680.837 1242.59,665.699 1243.15,655.224 1243.71,641.787 1244.26,659.339 1244.82,661.839 1245.38,627.936 1245.94,646.842 1246.5,664.066 1247.06,666.701 1247.62,686.455 1248.18,669.505 1248.74,701.651 1249.3,683.869 1249.86,670.13 1250.42,639.289 1250.98,641.493 1251.54,629.296 1252.09,632.642 1252.65,653.164 1253.21,657.967 1253.77,642.592 1254.33,643.484 1254.89,645.39 1255.45,651.206 1256.01,667.864 1256.57,636.7 1257.13,652.033 1257.69,653.945 1258.25,689.959 1258.81,692.289 1259.36,709.854 1259.92,713.296 1260.48,745.532 1261.04,776.654 1261.6,770.15 1262.16,716.356 1262.72,746.293 1263.28,741.321 1263.84,755.63 1264.4,751.401 1264.96,734.968 1265.52,745.055 1266.08,727.198 1266.63,725.432 1267.19,720.491 1267.75,718.336 1268.31,714.275 1268.87,711.443 1269.43,707.193 1269.99,719.164 1270.55,712.442 1271.11,676.796 1271.67,644.248 1272.23,647.382 1272.79,665.806 1273.35,681.707 1273.91,701.037 1274.46,683.345 1275.02,745.547 1275.58,710.38 1276.14,707.83 1276.7,722.355 1277.26,723.691 1277.82,723.356 1278.38,738.491 1278.94,721.27 1279.5,687.203 1280.06,656.96 1280.62,655.975 1281.18,654.59 1281.73,689.333 1282.29,704.174 1282.85,704.11 1283.41,754.624 1283.97,768.484 1284.53,764.994 1285.09,745.115 1285.65,704.99 1286.21,688.532 1286.77,703.833 1287.33,671.955 1287.89,641.101 1288.45,690.569 1289,675.265 1289.56,674.029 1290.12,692.587 1290.68,694.257 1291.24,677.505 1291.8,695.224 1292.36,630.415 1292.92,617.888 1293.48,624.688 1294.04,609.74 1294.6,631.686 1295.16,634.808 1295.72,636.883 1296.28,621.874 1296.83,622.346 1297.39,626.713 1297.95,661.91 1298.51,634.184 1299.07,654.11 1299.63,673.586 1300.19,710.91 1300.75,691.901 1301.31,673.27 1301.87,688.964 1302.43,705.303 1302.99,719.681 1303.55,720.856 1304.1,734.143 1304.66,735.572 1305.22,748.74 1305.78,749.045 1306.34,744.967 1306.9,739.527 1307.46,732.693 1308.02,717.088 1308.58,680.684 1309.14,663.815 1309.7,700.005 1310.26,698.417 1310.82,632.487 1311.38,650.701 1311.93,683.842 1312.49,748.163 1313.05,728.131 1313.61,709.344 1314.17,692.317 1314.73,691.639 1315.29,626.588 1315.85,649.071 1316.41,645.973 1316.97,661.945 1317.53,677.888 1318.09,706.506 1318.65,703 1319.2,684.913 1319.76,669.939 1320.32,671.968 1320.88,653.715 1321.44,670.174 1322,653.227 1322.56,652.748 1323.12,672.293 1323.68,676.041 1324.24,693.493 1324.8,708.04 1325.36,710.021 1325.92,707.335 1326.47,691.884 1327.03,686.945 1327.59,705.121 1328.15,707.38 1328.71,657.855 1329.27,662.373 1329.83,692.515 1330.39,721.527 1330.95,703.897 1331.51,717.42 1332.07,684.199 1332.63,669.93 1333.19,654.124 1333.75,674.037 1334.3,707.25 1334.86,722.69 1335.42,719.741 1335.98,715.117 1336.54,681.06 1337.1,664.193 1337.66,648.231 1338.22,680.978 1338.78,661.627 1339.34,681.371 1339.9,713.859 1340.46,698.42 1341.02,713.463 1341.57,678.734 1342.13,647.053 1342.69,617.853 1343.25,622.794 1343.81,643.223 1344.37,675.452 1344.93,676.115 1345.49,663.017 1346.05,680.514 1346.61,681.577 1347.17,711.259 1347.73,710.027 1348.29,692.158 1348.84,690.325 1349.4,655.42 1349.96,645.269 1350.52,647.293 1351.08,683.307 1351.64,716.043 1352.2,732.534 1352.76,713.777 1353.32,726.895 1353.88,723.067 1354.44,703.958 1355,666.372 1355.56,665.243 1356.12,664.563 1356.67,678.353 1357.23,712.864 1357.79,710.631 1358.35,709.286 1358.91,692.314 1359.47,679.477 1360.03,681.176 1360.59,714.171 1361.15,739.905 1361.71,765.797 1362.27,713.764 1362.83,695.924 1363.39,680.015 1363.94,697.357 1364.5,697.228 1365.06,660.268 1365.62,677.392 1366.18,694.251 1366.74,709.193 1367.3,712.988 1367.86,710.541 1368.42,695.38 1368.98,678.408 1369.54,695.722 1370.1,712.254 1370.66,676.254 1371.21,708.034 1371.77,706.77 1372.33,734.878 1372.89,746.768 1373.45,713.079 1374.01,745.815 1374.57,728.237 1375.13,740.805 1375.69,755.916 1376.25,719.452 1376.81,734.878 1377.37,717.258 1377.93,716.193 1378.49,698.835 1379.04,730.751 1379.6,728.218 1380.16,678.109 1380.72,664.962 1381.28,634.104 1381.84,635.945 1382.4,635.657 1382.96,658.099 1383.52,678.586 1384.08,695.491 1384.64,662.175 1385.2,660.05 1385.76,662.861 1386.31,664.442 1386.87,665.244 1387.43,651.976 1387.99,688.289 1388.55,708.012 1389.11,704.477 1389.67,706.613 1390.23,660.032 1390.79,678.235 1391.35,660.7 1391.91,645.106 1392.47,631.601 1393.03,666.915 1393.58,650.273 1394.14,654.316 1394.7,687.709 1395.26,669.398 1395.82,685.86 1396.38,687.262 1396.94,687.467 1397.5,703.946 1398.06,703.168 1398.62,707.282 1399.18,692.534 1399.74,705.924 1400.3,702.233 1400.86,640.209 1401.41,642.88 1401.97,630.744 1402.53,665.384 1403.09,715.294 1403.65,730.082 1404.21,725.779 1404.77,741.589 1405.33,751.254 1405.89,746.088 1406.45,725.096 1407.01,739.217 1407.57,721.341 1408.13,701.535 1408.68,715.581 1409.24,694.169 1409.8,674.564 1410.36,694.246 1410.92,708.468 1411.48,696.744 1412.04,710.69 1412.6,727.188 1413.16,723.459 1413.72,705.433 1414.28,704.436 1414.84,703.969 1415.4,734.873 1415.95,751.233 1416.51,746.373 1417.07,759.832 1417.63,768.861 1418.19,744.22 1418.75,743.834 1419.31,721.59 1419.87,749.965 1420.43,714.053 1420.99,715.636 1421.55,712.329 1422.11,697.083 1422.67,681.439 1423.23,677.55 1423.78,643.77 1424.34,614.423 1424.9,631.616 1425.46,615.895 1426.02,619.126 1426.58,621.572 1427.14,673.282 1427.7,660.361 1428.26,597.032 1428.82,618.146 1429.38,623.939 1429.94,625.884 1430.5,625.486 1431.05,609.499 1431.61,599.941 1432.17,606.687 1432.73,612.539 1433.29,630.949 1433.85,651.037 1434.41,684.502 1434.97,683.082 1435.53,682.976 1436.09,734.195 1436.65,765.042 1437.21,762.253 1437.77,758.205 1438.33,737.704 1438.88,702.942 1439.44,719.067 1440,747.23 1440.56,746.077 1441.12,708.385 1441.68,725.062 1442.24,706.524 1442.8,691.321 1443.36,644.184 1443.92,647.079 1444.48,663.856 1445.04,670.756 1445.6,687.028 1446.15,670.116 1446.71,639.521 1447.27,609.698 1447.83,599.224 1448.39,637.474 1448.95,624.792 1449.51,612.9 1450.07,584.992 1450.63,573.582 1451.19,598.776 1451.75,588.583 1452.31,592.82 1452.87,643.161 1453.42,643.605 1453.98,614.859 1454.54,589.313 1455.1,595.202 1455.66,598.987 1456.22,572.396 1456.78,562.08 1457.34,566.752 1457.9,558.113 1458.46,581.883 1459.02,588.494 1459.58,608.45 1460.14,629.743 1460.7,650.196 1461.25,638.601 1461.81,670.962 1462.37,654.904 1462.93,656.639 1463.49,677.768 1464.05,676.492 1464.61,711.876 1465.17,694.316 1465.73,692.146 1466.29,704.799 1466.85,702.597 1467.41,703.812 1467.97,733.83 1468.52,729.49 1469.08,709.653 1469.64,690.39 1470.2,706.647 1470.76,704.85 1471.32,719.177 1471.88,716.306 1472.44,713.363 1473,732.409 1473.56,664.196 1474.12,680.88 1474.68,678.91 1475.24,680.125 1475.79,663.437 1476.35,663.621 1476.91,630.118 1477.47,633.047 1478.03,638.37 1478.59,625.589 1479.15,664.346 1479.71,665.232 1480.27,666.48 1480.83,666.502 1481.39,663.858 1481.95,666.461 1482.51,667.607 1483.07,686.426 1483.62,718.597 1484.18,695.971 1484.74,666.247 1485.3,685.222 1485.86,719.439 1486.42,717.531 1486.98,713.292 1487.54,713.62 1488.1,694.867 1488.66,678.726 1489.22,662.069 1489.78,661.571 1490.34,693.107 1490.89,695.688 1491.45,676.439 1492.01,676.649 1492.57,675.057 1493.13,658.092 1493.69,688.735 1494.25,671.791 1494.81,656.63 1495.37,641.554 1495.93,644.262 1496.49,614.35 1497.05,650.313 1497.61,669.307 1498.16,654.947 1498.72,638.91 1499.28,641.31 1499.84,678.391 1500.4,716.262 1500.96,633.176 1501.52,634.259 1502.08,653.557 1502.64,690.328 1503.2,690.092 1503.76,673.349 1504.32,673.137 1504.88,692.037 1505.44,724.733 1505.99,741.117 1506.55,722.346 1507.11,736.886 1507.67,716.714 1508.23,713.271 1508.79,713.115 1509.35,712.648 1509.91,663.762 1510.47,681.261 1511.03,701.326 1511.59,703.143 1512.15,702.574 1512.71,733.193 1513.26,761.704 1513.82,758.317 1514.38,754.313 1514.94,783.473 1515.5,758.005 1516.06,755.388 1516.62,781.192 1517.18,764.699 1517.74,762.74 1518.3,743.626 1518.86,759.554 1519.42,755.94 1519.98,767.669 1520.53,797.76 1521.09,789.283 1521.65,784.773 1522.21,811.206 1522.77,805.753 1523.33,799.796 1523.89,775.625 1524.45,770.255 1525.01,763.681 1525.57,759.348 1526.13,706.395 1526.69,657.858 1527.25,659.365 1527.81,662.043 1528.36,668.414 1528.92,666.78 1529.48,684.596 1530.04,714.638 1530.6,728.8 1531.16,759.484 1531.72,789.202 1532.28,768.421 1532.84,778.246 1533.4,758.05 1533.96,702.743 1534.52,682.663 1535.08,681.099 1535.63,679.832 1536.19,693.566 1536.75,675.162 1537.31,661.164 1537.87,665.113 1538.43,665.362 1538.99,654.502 1539.55,659.671 1540.11,644.92 1540.67,646.713 1541.23,680.346 1541.79,677.43 1542.35,662.326 1542.9,679.186 1543.46,632.811 1544.02,617.482 1544.58,636.759 1545.14,622.479 1545.7,625.844 1546.26,597.613 1546.82,600.798 1547.38,622.887 1547.94,624.36 1548.5,613.894 1549.06,635.534 1549.62,637.493 1550.18,671.685 1550.73,671.219 1551.29,636.278 1551.85,635.808 1552.41,670.03 1552.97,670.139 1553.53,687.33 1554.09,723.115 1554.65,787.205 1555.21,813.397 1555.77,854.077 1556.33,889.777 1556.89,894.923 1557.45,822.457 1558,798.278 1558.56,776.343 1559.12,757.237 1559.68,766.624 1560.24,761.201 1560.8,715.103 1561.36,695.103 1561.92,628.911 1562.48,633.512 1563.04,635.367 1563.6,639.867 1564.16,625.613 1564.72,641.651 1565.28,662.419 1565.83,631.694 1566.39,652.133 1566.95,619.414 1567.51,642.631 1568.07,661.976 1568.63,632.495 1569.19,667.443 1569.75,667.063 1570.31,664.622 1570.87,682.264 1571.43,685.16 1571.99,730.679 1572.55,744.746 1573.1,726.889 1573.66,711.937 1574.22,712.964 1574.78,710.077 1575.34,744.676 1575.9,720.805 1576.46,703.315 1577.02,685.807 1577.58,732.41 1578.14,764.475 1578.7,742.33 1579.26,741.075 1579.82,690.004 1580.37,670.025 1580.93,654.248 1581.49,637.408 1582.05,656.93 1582.61,656.28 1583.17,704.95 1583.73,687.631 1584.29,703.714 1584.85,702.126 1585.41,670.908 1585.97,640.578 1586.53,641.246 1587.09,659.151 1587.65,658.779 1588.2,674.684 1588.76,692.059 1589.32,693.966 1589.88,692.974 1590.44,662.346 1591,712.397 1591.56,712.145 1592.12,758.188 1592.68,754.053 1593.24,718.338 1593.8,749.918 1594.36,732.662 1594.92,727.535 1595.47,711.1 1596.03,709.044 1596.59,692.533 1597.15,638.536 1597.71,657.819 1598.27,645.865 1598.83,665.121 1599.39,644.598 1599.95,646.284 1600.51,635.039 1601.07,621.837 1601.63,640.868 1602.19,640.01 1602.74,628.386 1603.3,611.75 1603.86,584.017 1604.42,557.309 1604.98,581.509 1605.54,603.828 1606.1,573.899 1606.66,578.155 1607.22,598.258 1607.78,617.684 1608.34,620.82 1608.9,656.39 1609.46,692.069 1610.02,690.072 1610.57,671.404 1611.13,673.172 1611.69,707.888 1612.25,739.97 1612.81,736.17 1613.37,718.217 1613.93,699.684 1614.49,733.151 1615.05,730.8 1615.61,741.778 1616.17,753.02 1616.73,784.421 1617.29,775.313 1617.84,787.716 1618.4,780.788 1618.96,809.459 1619.52,787.171 1620.08,782.72 1620.64,806.872 1621.2,747.452 1621.76,743.403 1622.32,690.545 1622.88,702.075 1623.44,684.937 1624,704.262 1624.56,702.292 1625.11,751.966 1625.67,714.072 1626.23,694.043 1626.79,661.195 1627.35,661.566 1627.91,644.655 1628.47,664.641 1629.03,699.166 1629.59,711.14 1630.15,693.313 1630.71,692.681 1631.27,694.067 1631.83,707.609 1632.39,707.513 1632.94,694.09 1633.5,692.808 1634.06,690.946 1634.62,706.165 1635.18,677.199 1635.74,662.296 1636.3,681.389 1636.86,678.961 1637.42,675.087 1637.98,660.167 1638.54,628.905 1639.1,632.5 1639.66,619.303 1640.21,621.978 1640.77,640.213 1641.33,640.444 1641.89,689.232 1642.45,720.465 1643.01,721.395 1643.57,707.719 1644.13,675.107 1644.69,709.043 1645.25,723.226 1645.81,702.298 1646.37,704.848 1646.93,672.898 1647.48,674.079 1648.04,673.112 1648.6,673.51 1649.16,675.824 1649.72,709.888 1650.28,707.568 1650.84,722.98 1651.4,752.864 1651.96,732.47 1652.52,758.51 1653.08,769.119 1653.64,812.15 1654.2,804.038 1654.76,780.196 1655.31,775.713 1655.87,769.994 1656.43,735.027 1656.99,682.643 1657.55,695.965 1658.11,693.345 1658.67,675.38 1659.23,675.947 1659.79,709.319 1660.35,705.257 1660.91,717.694 1661.47,730.072 1662.03,726.706 1662.58,724.29 1663.14,732.908 1663.7,728.891 1664.26,698.479 1664.82,683.687 1665.38,696.154 1665.94,679.63 1666.5,665.395 1667.06,683.852 1667.62,718.838 1668.18,701.902 1668.74,719.706 1669.3,684.752 1669.85,687.8 1670.41,669.206 1670.97,652.344 1671.53,659.357 1672.09,629.448 1672.65,584.557 1673.21,624.255 1673.77,615.354 1674.33,633.495 1674.89,653.289 1675.45,655.862 1676.01,655.049 1676.57,641.466 1677.13,613.648 1677.68,637.438 1678.24,641.912 1678.8,643.669 1679.36,645.995 1679.92,601.359 1680.48,609.041 1681.04,614.327 1681.6,619.506 1682.16,622.783 1682.72,623.476 1683.28,609.368 1683.84,632.726 1684.4,617.496 1684.95,605.301 1685.51,611.751 1686.07,613.879 1686.63,634.987 1687.19,653.944 1687.75,690.148 1688.31,658.715 1688.87,673.273 1689.43,689.12 1689.99,687.963 1690.55,686.046 1691.11,714.292 1691.67,715.306 1692.23,679.621 1692.78,698.478 1693.34,715.082 1693.9,730.609 1694.46,756.163 1695.02,818.115 1695.58,811.034 1696.14,789.096 1696.7,797.596 1697.26,786.776 1697.82,781.902 1698.38,797.038 1698.94,791.175 1699.5,784.198 1700.05,778.81 1700.61,760.724 1701.17,678.707 1701.73,679.766 1702.29,677.773 1702.85,645.226 1703.41,648.746 1703.97,667.019 1704.53,652.883 1705.09,654.738 1705.65,655.904 1706.21,701.692 1706.77,666.604 1707.32,662.322 1707.88,666.976 1708.44,684.392 1709,700.706 1709.56,670.712 1710.12,640.772 1710.68,659.084 1711.24,662.55 1711.8,662.12 1712.36,680.151 1712.92,680.992 1713.48,681.885 1714.04,697.322 1714.6,676.934 1715.15,692.154 1715.71,691.936 1716.27,690.866 1716.83,689.105 1717.39,674.928 1717.95,710.971 1718.51,709.64 1719.07,707.373 1719.63,695.22 1720.19,726.264 1720.75,627.747 1721.31,600.004 1721.87,600.691 1722.42,587.837 1722.98,575.871 1723.54,551.259 1724.1,576.073 1724.66,562.581 1725.22,554.642 1725.78,627.535 1726.34,629.693 1726.9,632.969 1727.46,652.858 1728.02,670.799 1728.58,670.28 1729.14,670.389 1729.69,673.166 1730.25,656.729 1730.81,659.394 1731.37,674.417 1731.93,645.085 1732.49,647.918 1733.05,669.142 1733.61,702.656 1734.17,687.849 1734.73,704.515 1735.29,717.118 1735.85,729.284 1736.41,725.269 1736.97,738.88 1737.52,683.734 1738.08,669.038 1738.64,687.069 1739.2,705.211 1739.76,702.342 1740.32,719.78 1740.88,750.666 1741.44,747.525 1742,712.756 1742.56,695.296 1743.12,693.499 1743.68,663.882 1744.24,679.815 1744.79,664.744 1745.35,666.483 1745.91,649.51 1746.47,669.317 1747.03,651.463 1747.59,670.642 1748.15,668.096 1748.71,652.91 1749.27,639.175 1749.83,609.039 1750.39,630.976 1750.95,649.711 1751.51,666.646 1752.06,731.123 1752.62,712.196 1753.18,727.879 1753.74,742.564 1754.3,706.784 1754.86,755.313 1755.42,785.42 1755.98,797.319 1756.54,775.041 1757.1,784.836 1757.66,763.033 1758.22,728.711 1758.78,724.352 1759.34,737.628 1759.89,762.428 1760.45,756.738 1761.01,753.097 1761.57,747.576 1762.13,763.612 1762.69,758.976 1763.25,720.617 1763.81,718.16 1764.37,716.133 1764.93,714.141 1765.49,682.839 1766.05,683.514 1766.61,699.17 1767.16,696.651 1767.72,690.907 1768.28,689.089 1768.84,672.295 1769.4,685.486 1769.96,669.5 1770.52,654.171 1771.08,619.332 1771.64,621.191 1772.2,577.684 1772.76,602.074 1773.32,622.976 1773.88,629.336 1774.43,630.257 1774.99,647.901 1775.55,631.633 1776.11,652.82 1776.67,608.53 1777.23,611.755 1777.79,601.123 1778.35,622.388 1778.91,627.482 1779.47,647.625 1780.03,652.001 1780.59,636.624 1781.15,625.437 1781.71,662.875 1782.26,677.647 1782.82,675.827 1783.38,692.247 1783.94,676.222 1784.5,647.486 1785.06,651.576 1785.62,654.093 1786.18,657.347 1786.74,628.153 1787.3,662.083 1787.86,680.047 1788.42,698.022 1788.98,667.926 1789.53,639.413 1790.09,644.457 1790.65,633.414 1791.21,635.014 1791.77,607.079 1792.33,595.698 1792.89,618.471 1793.45,624.587 1794.01,648.383 1794.57,650.131 1795.13,669.863 1795.69,702.15 1796.25,703.066 1796.8,686.285 1797.36,684.268 1797.92,666.825 1798.48,669.715 1799.04,685.813 1799.6,720.439 1800.16,720.666 1800.72,720.036 1801.28,768.199 1801.84,767.836 1802.4,763.645 1802.96,741.76 1803.52,721.575 1804.08,734.593 1804.63,703.937 1805.19,700.388 1805.75,697.536 1806.31,677.81 1806.87,676.355 1807.43,659.766 1807.99,645.852 1808.55,664.212 1809.11,662.977 1809.67,682.773 1810.23,696.176 1810.79,713.807 1811.35,714.322 1811.9,727.495 1812.46,739.894 1813.02,735.339 1813.58,765.338 1814.14,776.278 1814.7,774.703 1815.26,770.126 1815.82,785.1 1816.38,778.733 1816.94,758.597 1817.5,768.627 1818.06,762.734 1818.62,770.663 1819.18,768.102 1819.73,763.034 1820.29,729.492 1820.85,713.107 1821.41,711.195 1821.97,708.01 1822.53,671.343 1823.09,673.69 1823.65,640.232 1824.21,610.893 1824.77,632.093 1825.33,635.504 1825.89,622.592 1826.45,610.535 1827,631.307 1827.56,632.326 1828.12,648.279 1828.68,679.718 1829.24,694.106 1829.8,695.164 1830.36,663.174 1830.92,645.195 1831.48,681.844 1832.04,682.709 1832.6,666.338 1833.16,714.839 1833.72,728.739 1834.27,726.432 1834.83,773.481 1835.39,766.226 1835.95,741.918 1836.51,708.279 1837.07,677.015 1837.63,692.094 1838.19,645.002 \"/>\n<path clip-path=\"url(#clip883)\" d=\"M720.247 690.765 L720.806 690.765 L721.365 690.765 L721.924 690.765 L722.484 690.765 L723.043 690.765 L723.602 690.765 L724.161 690.765 L724.721 690.765 L725.28 690.765 L725.839 690.765 L726.398 690.765 L726.958 690.765 L727.517 690.765 L728.076 690.765 L728.635 690.765 L729.195 690.765 L729.754 690.765 L730.313 690.765 L730.872 690.765 L731.432 690.765 L731.991 690.765 L732.55 690.765 L733.109 690.765 L733.669 690.765 L734.228 690.765 L734.787 690.765 L735.346 690.765 L735.906 690.765 L736.465 690.765 L737.024 690.765 L737.583 690.765 L738.143 690.765 L738.702 690.765 L739.261 690.765 L739.82 690.765 L740.38 690.765 L740.939 690.765 L741.498 690.765 L742.057 690.765 L742.617 690.765 L743.176 690.765 L743.735 690.765 L744.294 690.765 L744.854 690.765 L745.413 690.765 L745.972 690.765 L746.531 690.765 L747.091 690.765 L747.65 690.765 L748.209 690.765 L748.768 690.765 L749.328 690.765 L749.887 690.765 L750.446 690.765 L751.005 690.765 L751.565 690.765 L752.124 690.765 L752.683 690.765 L753.242 690.765 L753.802 690.765 L754.361 690.765 L754.92 690.765 L755.479 690.765 L756.039 690.765 L756.598 690.765 L757.157 690.765 L757.716 690.765 L758.276 690.765 L758.835 690.765 L759.394 690.765 L759.953 690.765 L760.513 690.765 L761.072 690.765 L761.631 690.765 L762.19 690.765 L762.75 690.765 L763.309 690.765 L763.868 690.765 L764.427 690.765 L764.987 690.765 L765.546 690.765 L766.105 690.765 L766.664 690.765 L767.224 690.765 L767.783 690.765 L768.342 690.765 L768.901 690.765 L769.461 690.765 L770.02 690.765 L770.579 690.765 L771.138 690.765 L771.698 690.765 L772.257 690.765 L772.816 690.765 L773.375 690.765 L773.935 690.765 L774.494 690.765 L775.053 690.765 L775.612 690.765 L776.172 690.765 L776.731 690.765 L777.29 690.765 L777.849 690.765 L778.409 690.765 L778.968 690.765 L779.527 690.765 L780.086 690.765 L780.646 690.765 L781.205 690.765 L781.764 690.765 L782.323 690.765 L782.883 690.765 L783.442 690.765 L784.001 690.765 L784.56 690.765 L785.12 690.765 L785.679 690.765 L786.238 690.765 L786.797 690.765 L787.357 690.765 L787.916 690.765 L788.475 690.765 L789.034 690.765 L789.594 690.765 L790.153 690.765 L790.712 690.765 L791.271 690.765 L791.831 690.765 L792.39 690.765 L792.949 690.765 L793.508 690.765 L794.068 690.765 L794.627 690.765 L795.186 690.765 L795.745 690.765 L796.305 690.765 L796.864 690.765 L797.423 690.765 L797.982 690.765 L798.542 690.765 L799.101 690.765 L799.66 690.765 L800.219 690.765 L800.779 690.765 L801.338 690.765 L801.897 690.765 L802.456 690.765 L803.016 690.765 L803.575 690.765 L804.134 690.765 L804.693 690.765 L805.253 690.765 L805.812 690.765 L806.371 690.765 L806.931 690.765 L807.49 690.765 L808.049 690.765 L808.608 690.765 L809.168 690.765 L809.727 690.765 L810.286 690.765 L810.845 690.765 L811.405 690.765 L811.964 690.765 L812.523 690.765 L813.082 690.765 L813.642 690.765 L814.201 690.765 L814.76 690.765 L815.319 690.765 L815.879 690.765 L816.438 690.765 L816.997 690.765 L817.556 690.765 L818.116 690.765 L818.675 690.765 L819.234 690.765 L819.793 690.765 L820.353 690.765 L820.912 690.765 L821.471 690.765 L822.03 690.765 L822.59 690.765 L823.149 690.765 L823.708 690.765 L824.267 690.765 L824.827 690.765 L825.386 690.765 L825.945 690.765 L826.504 690.765 L827.064 690.765 L827.623 690.765 L828.182 690.765 L828.741 690.765 L829.301 690.765 L829.86 690.765 L830.419 690.765 L830.978 690.765 L831.538 690.765 L832.097 690.765 L832.656 690.765 L833.215 690.765 L833.775 690.765 L834.334 690.765 L834.893 690.765 L835.452 690.765 L836.012 690.765 L836.571 690.765 L837.13 690.765 L837.689 690.765 L838.249 690.765 L838.808 690.765 L839.367 690.765 L839.926 690.765 L840.486 690.765 L841.045 690.765 L841.604 690.765 L842.163 690.765 L842.723 690.765 L843.282 690.765 L843.841 690.765 L844.4 690.765 L844.96 690.765 L845.519 690.765 L846.078 690.765 L846.637 690.765 L847.197 690.765 L847.756 690.765 L848.315 690.765 L848.874 690.765 L849.434 690.765 L849.993 690.765 L850.552 690.765 L851.111 690.765 L851.671 690.765 L852.23 690.765 L852.789 690.765 L853.348 690.765 L853.908 690.765 L854.467 690.765 L855.026 690.765 L855.585 690.765 L856.145 690.765 L856.704 690.765 L857.263 690.765 L857.822 690.765 L858.382 690.765 L858.941 690.765 L859.5 690.765 L860.059 690.765 L860.619 690.765 L861.178 690.765 L861.737 690.765 L862.296 690.765 L862.856 690.765 L863.415 690.765 L863.974 690.765 L864.533 690.765 L865.093 690.765 L865.652 690.765 L866.211 690.765 L866.77 690.765 L867.33 690.765 L867.889 690.765 L868.448 690.765 L869.007 690.765 L869.567 690.765 L870.126 690.765 L870.685 690.765 L871.244 690.765 L871.804 690.765 L872.363 690.765 L872.922 690.765 L873.481 690.765 L874.041 690.765 L874.6 690.765 L875.159 690.765 L875.718 690.765 L876.278 690.765 L876.837 690.765 L877.396 690.765 L877.955 690.765 L878.515 690.765 L879.074 690.765 L879.633 690.765 L880.192 690.765 L880.752 690.765 L881.311 690.765 L881.87 690.765 L882.429 690.765 L882.989 690.765 L883.548 690.765 L884.107 690.765 L884.666 690.765 L885.226 690.765 L885.785 690.765 L886.344 690.765 L886.903 690.765 L887.463 690.765 L888.022 690.765 L888.581 690.765 L889.14 690.765 L889.7 690.765 L890.259 690.765 L890.818 690.765 L891.377 690.765 L891.937 690.765 L892.496 690.765 L893.055 690.765 L893.614 690.765 L894.174 690.765 L894.733 690.765 L895.292 690.765 L895.851 690.765 L896.411 690.765 L896.97 690.765 L897.529 690.765 L898.088 690.765 L898.648 690.765 L899.207 690.765 L899.766 690.765 L900.325 690.765 L900.885 690.765 L901.444 690.765 L902.003 690.765 L902.562 690.765 L903.122 690.765 L903.681 690.765 L904.24 690.765 L904.799 690.765 L905.359 690.765 L905.918 690.765 L906.477 690.765 L907.036 690.765 L907.596 690.765 L908.155 690.765 L908.714 690.765 L909.273 690.765 L909.833 690.765 L910.392 690.765 L910.951 690.765 L911.51 690.765 L912.07 690.765 L912.629 690.765 L913.188 690.765 L913.747 690.765 L914.307 690.765 L914.866 690.765 L915.425 690.765 L915.984 690.765 L916.544 690.765 L917.103 690.765 L917.662 690.765 L918.221 690.765 L918.781 690.765 L919.34 690.765 L919.899 690.765 L920.458 690.765 L921.018 690.765 L921.577 690.765 L922.136 690.765 L922.695 690.765 L923.255 690.765 L923.814 690.765 L924.373 690.765 L924.932 690.765 L925.492 690.765 L926.051 690.765 L926.61 690.765 L927.169 690.765 L927.729 690.765 L928.288 690.765 L928.847 690.765 L929.406 690.765 L929.966 690.765 L930.525 690.765 L931.084 690.765 L931.644 690.765 L932.203 690.765 L932.762 690.765 L933.321 690.765 L933.881 690.765 L934.44 690.765 L934.999 690.765 L935.558 690.765 L936.118 690.765 L936.677 690.765 L937.236 690.765 L937.795 690.765 L938.355 690.765 L938.914 690.765 L939.473 690.765 L940.032 690.765 L940.592 690.765 L941.151 690.765 L941.71 690.765 L942.269 690.765 L942.829 690.765 L943.388 690.765 L943.947 690.765 L944.506 690.765 L945.066 690.765 L945.625 690.765 L946.184 690.765 L946.743 690.765 L947.303 690.765 L947.862 690.765 L948.421 690.765 L948.98 690.765 L949.54 690.765 L950.099 690.765 L950.658 690.765 L951.217 690.765 L951.777 690.765 L952.336 690.765 L952.895 690.765 L953.454 690.765 L954.014 690.765 L954.573 690.765 L955.132 690.765 L955.691 690.765 L956.251 690.765 L956.81 690.765 L957.369 690.765 L957.928 690.765 L958.488 690.765 L959.047 690.765 L959.606 690.765 L960.165 690.765 L960.725 690.765 L961.284 690.765 L961.843 690.765 L962.402 690.765 L962.962 690.765 L963.521 690.765 L964.08 690.765 L964.639 690.765 L965.199 690.765 L965.758 690.765 L966.317 690.765 L966.876 690.765 L967.436 690.765 L967.995 690.765 L968.554 690.765 L969.113 690.765 L969.673 690.765 L970.232 690.765 L970.791 690.765 L971.35 690.765 L971.91 690.765 L972.469 690.765 L973.028 690.765 L973.587 690.765 L974.147 690.765 L974.706 690.765 L975.265 690.765 L975.824 690.765 L976.384 690.765 L976.943 690.765 L977.502 690.765 L978.061 690.765 L978.621 690.765 L979.18 690.765 L979.739 690.765 L980.298 690.765 L980.858 690.765 L981.417 690.765 L981.976 690.765 L982.535 690.765 L983.095 690.765 L983.654 690.765 L984.213 690.765 L984.772 690.765 L985.332 690.765 L985.891 690.765 L986.45 690.765 L987.009 690.765 L987.569 690.765 L988.128 690.765 L988.687 690.765 L989.246 690.765 L989.806 690.765 L990.365 690.765 L990.924 690.765 L991.483 690.765 L992.043 690.765 L992.602 690.765 L993.161 690.765 L993.72 690.765 L994.28 690.765 L994.839 690.765 L995.398 690.765 L995.957 690.765 L996.517 690.765 L997.076 690.765 L997.635 690.765 L998.194 690.765 L998.754 690.765 L999.313 690.765 L999.872 690.765 L1000.43 690.765 L1000.99 690.765 L1001.55 690.765 L1002.11 690.765 L1002.67 690.765 L1003.23 690.765 L1003.79 690.765 L1004.35 690.765 L1004.91 690.765 L1005.46 690.765 L1006.02 690.765 L1006.58 690.765 L1007.14 690.765 L1007.7 690.765 L1008.26 690.765 L1008.82 690.765 L1009.38 690.765 L1009.94 690.765 L1010.5 690.765 L1011.06 690.765 L1011.62 690.765 L1012.18 690.765 L1012.73 690.765 L1013.29 690.765 L1013.85 690.765 L1014.41 690.765 L1014.97 690.765 L1015.53 690.765 L1016.09 690.765 L1016.65 690.765 L1017.21 690.765 L1017.77 690.765 L1018.33 690.765 L1018.89 690.765 L1019.45 690.765 L1020.01 690.765 L1020.56 690.765 L1021.12 690.765 L1021.68 690.765 L1022.24 690.765 L1022.8 690.765 L1023.36 690.765 L1023.92 690.765 L1024.48 690.765 L1025.04 690.765 L1025.6 690.765 L1026.16 690.765 L1026.72 690.765 L1027.28 690.765 L1027.83 690.765 L1028.39 690.765 L1028.95 690.765 L1029.51 690.765 L1030.07 690.765 L1030.63 690.765 L1031.19 690.765 L1031.75 690.765 L1032.31 690.765 L1032.87 690.765 L1033.43 690.765 L1033.99 690.765 L1034.55 690.765 L1035.1 690.765 L1035.66 690.765 L1036.22 690.765 L1036.78 690.765 L1037.34 690.765 L1037.9 690.765 L1038.46 690.765 L1039.02 690.765 L1039.58 690.765 L1040.14 690.765 L1040.7 690.765 L1041.26 690.765 L1041.82 690.765 L1042.38 690.765 L1042.93 690.765 L1043.49 690.765 L1044.05 690.765 L1044.61 690.765 L1045.17 690.765 L1045.73 690.765 L1046.29 690.765 L1046.85 690.765 L1047.41 690.765 L1047.97 690.765 L1048.53 690.765 L1049.09 690.765 L1049.65 690.765 L1050.2 690.765 L1050.76 690.765 L1051.32 690.765 L1051.88 690.765 L1052.44 690.765 L1053 690.765 L1053.56 690.765 L1054.12 690.765 L1054.68 690.765 L1055.24 690.765 L1055.8 690.765 L1056.36 690.765 L1056.92 690.765 L1057.48 690.765 L1058.03 690.765 L1058.59 690.765 L1059.15 690.765 L1059.71 690.765 L1060.27 690.765 L1060.83 690.765 L1061.39 690.765 L1061.95 690.765 L1062.51 690.765 L1063.07 690.765 L1063.63 690.765 L1064.19 690.765 L1064.75 690.765 L1065.3 690.765 L1065.86 690.765 L1066.42 690.765 L1066.98 690.765 L1067.54 690.765 L1068.1 690.765 L1068.66 690.765 L1069.22 690.765 L1069.78 690.765 L1070.34 690.765 L1070.9 690.765 L1071.46 690.765 L1072.02 690.765 L1072.57 690.765 L1073.13 690.765 L1073.69 690.765 L1074.25 690.765 L1074.81 690.765 L1075.37 690.765 L1075.93 690.765 L1076.49 690.765 L1077.05 690.765 L1077.61 690.765 L1078.17 690.765 L1078.73 690.765 L1079.29 690.765 L1079.85 690.765 L1080.4 690.765 L1080.96 690.765 L1081.52 690.765 L1082.08 690.765 L1082.64 690.765 L1083.2 690.765 L1083.76 690.765 L1084.32 690.765 L1084.88 690.765 L1085.44 690.765 L1086 690.765 L1086.56 690.765 L1087.12 690.765 L1087.67 690.765 L1088.23 690.765 L1088.79 690.765 L1089.35 690.765 L1089.91 690.765 L1090.47 690.765 L1091.03 690.765 L1091.59 690.765 L1092.15 690.765 L1092.71 690.765 L1093.27 690.765 L1093.83 690.765 L1094.39 690.765 L1094.94 690.765 L1095.5 690.765 L1096.06 690.765 L1096.62 690.765 L1097.18 690.765 L1097.74 690.765 L1098.3 690.765 L1098.86 690.765 L1099.42 690.765 L1099.98 690.765 L1100.54 690.765 L1101.1 690.765 L1101.66 690.765 L1102.22 690.765 L1102.77 690.765 L1103.33 690.765 L1103.89 690.765 L1104.45 690.765 L1105.01 690.765 L1105.57 690.765 L1106.13 690.765 L1106.69 690.765 L1107.25 690.765 L1107.81 690.765 L1108.37 690.765 L1108.93 690.765 L1109.49 690.765 L1110.04 690.765 L1110.6 690.765 L1111.16 690.765 L1111.72 690.765 L1112.28 690.765 L1112.84 690.765 L1113.4 690.765 L1113.96 690.765 L1114.52 690.765 L1115.08 690.765 L1115.64 690.765 L1116.2 690.765 L1116.76 690.765 L1117.31 690.765 L1117.87 690.765 L1118.43 690.765 L1118.99 690.765 L1119.55 690.765 L1120.11 690.765 L1120.67 690.765 L1121.23 690.765 L1121.79 690.765 L1122.35 690.765 L1122.91 690.765 L1123.47 690.765 L1124.03 690.765 L1124.59 690.765 L1125.14 690.765 L1125.7 690.765 L1126.26 690.765 L1126.82 690.765 L1127.38 690.765 L1127.94 690.765 L1128.5 690.765 L1129.06 690.765 L1129.62 690.765 L1130.18 690.765 L1130.74 690.765 L1131.3 690.765 L1131.86 690.765 L1132.41 690.765 L1132.97 690.765 L1133.53 690.765 L1134.09 690.765 L1134.65 690.765 L1135.21 690.765 L1135.77 690.765 L1136.33 690.765 L1136.89 690.765 L1137.45 690.765 L1138.01 690.765 L1138.57 690.765 L1139.13 690.765 L1139.68 690.765 L1140.24 690.765 L1140.8 690.765 L1141.36 690.765 L1141.92 690.765 L1142.48 690.765 L1143.04 690.765 L1143.6 690.765 L1144.16 690.765 L1144.72 690.765 L1145.28 690.765 L1145.84 690.765 L1146.4 690.765 L1146.96 690.765 L1147.51 690.765 L1148.07 690.765 L1148.63 690.765 L1149.19 690.765 L1149.75 690.765 L1150.31 690.765 L1150.87 690.765 L1151.43 690.765 L1151.99 690.765 L1152.55 690.765 L1153.11 690.765 L1153.67 690.765 L1154.23 690.765 L1154.78 690.765 L1155.34 690.765 L1155.9 690.765 L1156.46 690.765 L1157.02 690.765 L1157.58 690.765 L1158.14 690.765 L1158.7 690.765 L1159.26 690.765 L1159.82 690.765 L1160.38 690.765 L1160.94 690.765 L1161.5 690.765 L1162.05 690.765 L1162.61 690.765 L1163.17 690.765 L1163.73 690.765 L1164.29 690.765 L1164.85 690.765 L1165.41 690.765 L1165.97 690.765 L1166.53 690.765 L1167.09 690.765 L1167.65 690.765 L1168.21 690.765 L1168.77 690.765 L1169.33 690.765 L1169.88 690.765 L1170.44 690.765 L1171 690.765 L1171.56 690.765 L1172.12 690.765 L1172.68 690.765 L1173.24 690.765 L1173.8 690.765 L1174.36 690.765 L1174.92 690.765 L1175.48 690.765 L1176.04 690.765 L1176.6 690.765 L1177.15 690.765 L1177.71 690.765 L1178.27 690.765 L1178.83 690.765 L1179.39 690.765 L1179.95 690.765 L1180.51 690.765 L1181.07 690.765 L1181.63 690.765 L1182.19 690.765 L1182.75 690.765 L1183.31 690.765 L1183.87 690.765 L1184.43 690.765 L1184.98 690.765 L1185.54 690.765 L1186.1 690.765 L1186.66 690.765 L1187.22 690.765 L1187.78 690.765 L1188.34 690.765 L1188.9 690.765 L1189.46 690.765 L1190.02 690.765 L1190.58 690.765 L1191.14 690.765 L1191.7 690.765 L1192.25 690.765 L1192.81 690.765 L1193.37 690.765 L1193.93 690.765 L1194.49 690.765 L1195.05 690.765 L1195.61 690.765 L1196.17 690.765 L1196.73 690.765 L1197.29 690.765 L1197.85 690.765 L1198.41 690.765 L1198.97 690.765 L1199.52 690.765 L1200.08 690.765 L1200.64 690.765 L1201.2 690.765 L1201.76 690.765 L1202.32 690.765 L1202.88 690.765 L1203.44 690.765 L1204 690.765 L1204.56 690.765 L1205.12 690.765 L1205.68 690.765 L1206.24 690.765 L1206.8 690.765 L1207.35 690.765 L1207.91 690.765 L1208.47 690.765 L1209.03 690.765 L1209.59 690.765 L1210.15 690.765 L1210.71 690.765 L1211.27 690.765 L1211.83 690.765 L1212.39 690.765 L1212.95 690.765 L1213.51 690.765 L1214.07 690.765 L1214.62 690.765 L1215.18 690.765 L1215.74 690.765 L1216.3 690.765 L1216.86 690.765 L1217.42 690.765 L1217.98 690.765 L1218.54 690.765 L1219.1 690.765 L1219.66 690.765 L1220.22 690.765 L1220.78 690.765 L1221.34 690.765 L1221.89 690.765 L1222.45 690.765 L1223.01 690.765 L1223.57 690.765 L1224.13 690.765 L1224.69 690.765 L1225.25 690.765 L1225.81 690.765 L1226.37 690.765 L1226.93 690.765 L1227.49 690.765 L1228.05 690.765 L1228.61 690.765 L1229.17 690.765 L1229.72 690.765 L1230.28 690.765 L1230.84 690.765 L1231.4 690.765 L1231.96 690.765 L1232.52 690.765 L1233.08 690.765 L1233.64 690.765 L1234.2 690.765 L1234.76 690.765 L1235.32 690.765 L1235.88 690.765 L1236.44 690.765 L1236.99 690.765 L1237.55 690.765 L1238.11 690.765 L1238.67 690.765 L1239.23 690.765 L1239.79 690.765 L1240.35 690.765 L1240.91 690.765 L1241.47 690.765 L1242.03 690.765 L1242.59 690.765 L1243.15 690.765 L1243.71 690.765 L1244.26 690.765 L1244.82 690.765 L1245.38 690.765 L1245.94 690.765 L1246.5 690.765 L1247.06 690.765 L1247.62 690.765 L1248.18 690.765 L1248.74 690.765 L1249.3 690.765 L1249.86 690.765 L1250.42 690.765 L1250.98 690.765 L1251.54 690.765 L1252.09 690.765 L1252.65 690.765 L1253.21 690.765 L1253.77 690.765 L1254.33 690.765 L1254.89 690.765 L1255.45 690.765 L1256.01 690.765 L1256.57 690.765 L1257.13 690.765 L1257.69 690.765 L1258.25 690.765 L1258.81 690.765 L1259.36 690.765 L1259.92 690.765 L1260.48 690.765 L1261.04 690.765 L1261.6 690.765 L1262.16 690.765 L1262.72 690.765 L1263.28 690.765 L1263.84 690.765 L1264.4 690.765 L1264.96 690.765 L1265.52 690.765 L1266.08 690.765 L1266.63 690.765 L1267.19 690.765 L1267.75 690.765 L1268.31 690.765 L1268.87 690.765 L1269.43 690.765 L1269.99 690.765 L1270.55 690.765 L1271.11 690.765 L1271.67 690.765 L1272.23 690.765 L1272.79 690.765 L1273.35 690.765 L1273.91 690.765 L1274.46 690.765 L1275.02 690.765 L1275.58 690.765 L1276.14 690.765 L1276.7 690.765 L1277.26 690.765 L1277.82 690.765 L1278.38 690.765 L1278.94 690.765 L1279.5 690.765 L1280.06 690.765 L1280.62 690.765 L1281.18 690.765 L1281.73 690.765 L1282.29 690.765 L1282.85 690.765 L1283.41 690.765 L1283.97 690.765 L1284.53 690.765 L1285.09 690.765 L1285.65 690.765 L1286.21 690.765 L1286.77 690.765 L1287.33 690.765 L1287.89 690.765 L1288.45 690.765 L1289 690.765 L1289.56 690.765 L1290.12 690.765 L1290.68 690.765 L1291.24 690.765 L1291.8 690.765 L1292.36 690.765 L1292.92 690.765 L1293.48 690.765 L1294.04 690.765 L1294.6 690.765 L1295.16 690.765 L1295.72 690.765 L1296.28 690.765 L1296.83 690.765 L1297.39 690.765 L1297.95 690.765 L1298.51 690.765 L1299.07 690.765 L1299.63 690.765 L1300.19 690.765 L1300.75 690.765 L1301.31 690.765 L1301.87 690.765 L1302.43 690.765 L1302.99 690.765 L1303.55 690.765 L1304.1 690.765 L1304.66 690.765 L1305.22 690.765 L1305.78 690.765 L1306.34 690.765 L1306.9 690.765 L1307.46 690.765 L1308.02 690.765 L1308.58 690.765 L1309.14 690.765 L1309.7 690.765 L1310.26 690.765 L1310.82 690.765 L1311.38 690.765 L1311.93 690.765 L1312.49 690.765 L1313.05 690.765 L1313.61 690.765 L1314.17 690.765 L1314.73 690.765 L1315.29 690.765 L1315.85 690.765 L1316.41 690.765 L1316.97 690.765 L1317.53 690.765 L1318.09 690.765 L1318.65 690.765 L1319.2 690.765 L1319.76 690.765 L1320.32 690.765 L1320.88 690.765 L1321.44 690.765 L1322 690.765 L1322.56 690.765 L1323.12 690.765 L1323.68 690.765 L1324.24 690.765 L1324.8 690.765 L1325.36 690.765 L1325.92 690.765 L1326.47 690.765 L1327.03 690.765 L1327.59 690.765 L1328.15 690.765 L1328.71 690.765 L1329.27 690.765 L1329.83 690.765 L1330.39 690.765 L1330.95 690.765 L1331.51 690.765 L1332.07 690.765 L1332.63 690.765 L1333.19 690.765 L1333.75 690.765 L1334.3 690.765 L1334.86 690.765 L1335.42 690.765 L1335.98 690.765 L1336.54 690.765 L1337.1 690.765 L1337.66 690.765 L1338.22 690.765 L1338.78 690.765 L1339.34 690.765 L1339.9 690.765 L1340.46 690.765 L1341.02 690.765 L1341.57 690.765 L1342.13 690.765 L1342.69 690.765 L1343.25 690.765 L1343.81 690.765 L1344.37 690.765 L1344.93 690.765 L1345.49 690.765 L1346.05 690.765 L1346.61 690.765 L1347.17 690.765 L1347.73 690.765 L1348.29 690.765 L1348.84 690.765 L1349.4 690.765 L1349.96 690.765 L1350.52 690.765 L1351.08 690.765 L1351.64 690.765 L1352.2 690.765 L1352.76 690.765 L1353.32 690.765 L1353.88 690.765 L1354.44 690.765 L1355 690.765 L1355.56 690.765 L1356.12 690.765 L1356.67 690.765 L1357.23 690.765 L1357.79 690.765 L1358.35 690.765 L1358.91 690.765 L1359.47 690.765 L1360.03 690.765 L1360.59 690.765 L1361.15 690.765 L1361.71 690.765 L1362.27 690.765 L1362.83 690.765 L1363.39 690.765 L1363.94 690.765 L1364.5 690.765 L1365.06 690.765 L1365.62 690.765 L1366.18 690.765 L1366.74 690.765 L1367.3 690.765 L1367.86 690.765 L1368.42 690.765 L1368.98 690.765 L1369.54 690.765 L1370.1 690.765 L1370.66 690.765 L1371.21 690.765 L1371.77 690.765 L1372.33 690.765 L1372.89 690.765 L1373.45 690.765 L1374.01 690.765 L1374.57 690.765 L1375.13 690.765 L1375.69 690.765 L1376.25 690.765 L1376.81 690.765 L1377.37 690.765 L1377.93 690.765 L1378.49 690.765 L1379.04 690.765 L1379.6 690.765 L1380.16 690.765 L1380.72 690.765 L1381.28 690.765 L1381.84 690.765 L1382.4 690.765 L1382.96 690.765 L1383.52 690.765 L1384.08 690.765 L1384.64 690.765 L1385.2 690.765 L1385.76 690.765 L1386.31 690.765 L1386.87 690.765 L1387.43 690.765 L1387.99 690.765 L1388.55 690.765 L1389.11 690.765 L1389.67 690.765 L1390.23 690.765 L1390.79 690.765 L1391.35 690.765 L1391.91 690.765 L1392.47 690.765 L1393.03 690.765 L1393.58 690.765 L1394.14 690.765 L1394.7 690.765 L1395.26 690.765 L1395.82 690.765 L1396.38 690.765 L1396.94 690.765 L1397.5 690.765 L1398.06 690.765 L1398.62 690.765 L1399.18 690.765 L1399.74 690.765 L1400.3 690.765 L1400.86 690.765 L1401.41 690.765 L1401.97 690.765 L1402.53 690.765 L1403.09 690.765 L1403.65 690.765 L1404.21 690.765 L1404.77 690.765 L1405.33 690.765 L1405.89 690.765 L1406.45 690.765 L1407.01 690.765 L1407.57 690.765 L1408.13 690.765 L1408.68 690.765 L1409.24 690.765 L1409.8 690.765 L1410.36 690.765 L1410.92 690.765 L1411.48 690.765 L1412.04 690.765 L1412.6 690.765 L1413.16 690.765 L1413.72 690.765 L1414.28 690.765 L1414.84 690.765 L1415.4 690.765 L1415.95 690.765 L1416.51 690.765 L1417.07 690.765 L1417.63 690.765 L1418.19 690.765 L1418.75 690.765 L1419.31 690.765 L1419.87 690.765 L1420.43 690.765 L1420.99 690.765 L1421.55 690.765 L1422.11 690.765 L1422.67 690.765 L1423.23 690.765 L1423.78 690.765 L1424.34 690.765 L1424.9 690.765 L1425.46 690.765 L1426.02 690.765 L1426.58 690.765 L1427.14 690.765 L1427.7 690.765 L1428.26 690.765 L1428.82 690.765 L1429.38 690.765 L1429.94 690.765 L1430.5 690.765 L1431.05 690.765 L1431.61 690.765 L1432.17 690.765 L1432.73 690.765 L1433.29 690.765 L1433.85 690.765 L1434.41 690.765 L1434.97 690.765 L1435.53 690.765 L1436.09 690.765 L1436.65 690.765 L1437.21 690.765 L1437.77 690.765 L1438.33 690.765 L1438.88 690.765 L1439.44 690.765 L1440 690.765 L1440.56 690.765 L1441.12 690.765 L1441.68 690.765 L1442.24 690.765 L1442.8 690.765 L1443.36 690.765 L1443.92 690.765 L1444.48 690.765 L1445.04 690.765 L1445.6 690.765 L1446.15 690.765 L1446.71 690.765 L1447.27 690.765 L1447.83 690.765 L1448.39 690.765 L1448.95 690.765 L1449.51 690.765 L1450.07 690.765 L1450.63 690.765 L1451.19 690.765 L1451.75 690.765 L1452.31 690.765 L1452.87 690.765 L1453.42 690.765 L1453.98 690.765 L1454.54 690.765 L1455.1 690.765 L1455.66 690.765 L1456.22 690.765 L1456.78 690.765 L1457.34 690.765 L1457.9 690.765 L1458.46 690.765 L1459.02 690.765 L1459.58 690.765 L1460.14 690.765 L1460.7 690.765 L1461.25 690.765 L1461.81 690.765 L1462.37 690.765 L1462.93 690.765 L1463.49 690.765 L1464.05 690.765 L1464.61 690.765 L1465.17 690.765 L1465.73 690.765 L1466.29 690.765 L1466.85 690.765 L1467.41 690.765 L1467.97 690.765 L1468.52 690.765 L1469.08 690.765 L1469.64 690.765 L1470.2 690.765 L1470.76 690.765 L1471.32 690.765 L1471.88 690.765 L1472.44 690.765 L1473 690.765 L1473.56 690.765 L1474.12 690.765 L1474.68 690.765 L1475.24 690.765 L1475.79 690.765 L1476.35 690.765 L1476.91 690.765 L1477.47 690.765 L1478.03 690.765 L1478.59 690.765 L1479.15 690.765 L1479.71 690.765 L1480.27 690.765 L1480.83 690.765 L1481.39 690.765 L1481.95 690.765 L1482.51 690.765 L1483.07 690.765 L1483.62 690.765 L1484.18 690.765 L1484.74 690.765 L1485.3 690.765 L1485.86 690.765 L1486.42 690.765 L1486.98 690.765 L1487.54 690.765 L1488.1 690.765 L1488.66 690.765 L1489.22 690.765 L1489.78 690.765 L1490.34 690.765 L1490.89 690.765 L1491.45 690.765 L1492.01 690.765 L1492.57 690.765 L1493.13 690.765 L1493.69 690.765 L1494.25 690.765 L1494.81 690.765 L1495.37 690.765 L1495.93 690.765 L1496.49 690.765 L1497.05 690.765 L1497.61 690.765 L1498.16 690.765 L1498.72 690.765 L1499.28 690.765 L1499.84 690.765 L1500.4 690.765 L1500.96 690.765 L1501.52 690.765 L1502.08 690.765 L1502.64 690.765 L1503.2 690.765 L1503.76 690.765 L1504.32 690.765 L1504.88 690.765 L1505.44 690.765 L1505.99 690.765 L1506.55 690.765 L1507.11 690.765 L1507.67 690.765 L1508.23 690.765 L1508.79 690.765 L1509.35 690.765 L1509.91 690.765 L1510.47 690.765 L1511.03 690.765 L1511.59 690.765 L1512.15 690.765 L1512.71 690.765 L1513.26 690.765 L1513.82 690.765 L1514.38 690.765 L1514.94 690.765 L1515.5 690.765 L1516.06 690.765 L1516.62 690.765 L1517.18 690.765 L1517.74 690.765 L1518.3 690.765 L1518.86 690.765 L1519.42 690.765 L1519.98 690.765 L1520.53 690.765 L1521.09 690.765 L1521.65 690.765 L1522.21 690.765 L1522.77 690.765 L1523.33 690.765 L1523.89 690.765 L1524.45 690.765 L1525.01 690.765 L1525.57 690.765 L1526.13 690.765 L1526.69 690.765 L1527.25 690.765 L1527.81 690.765 L1528.36 690.765 L1528.92 690.765 L1529.48 690.765 L1530.04 690.765 L1530.6 690.765 L1531.16 690.765 L1531.72 690.765 L1532.28 690.765 L1532.84 690.765 L1533.4 690.765 L1533.96 690.765 L1534.52 690.765 L1535.08 690.765 L1535.63 690.765 L1536.19 690.765 L1536.75 690.765 L1537.31 690.765 L1537.87 690.765 L1538.43 690.765 L1538.99 690.765 L1539.55 690.765 L1540.11 690.765 L1540.67 690.765 L1541.23 690.765 L1541.79 690.765 L1542.35 690.765 L1542.9 690.765 L1543.46 690.765 L1544.02 690.765 L1544.58 690.765 L1545.14 690.765 L1545.7 690.765 L1546.26 690.765 L1546.82 690.765 L1547.38 690.765 L1547.94 690.765 L1548.5 690.765 L1549.06 690.765 L1549.62 690.765 L1550.18 690.765 L1550.73 690.765 L1551.29 690.765 L1551.85 690.765 L1552.41 690.765 L1552.97 690.765 L1553.53 690.765 L1554.09 690.765 L1554.65 690.765 L1555.21 690.765 L1555.77 690.765 L1556.33 690.765 L1556.89 690.765 L1557.45 690.765 L1558 690.765 L1558.56 690.765 L1559.12 690.765 L1559.68 690.765 L1560.24 690.765 L1560.8 690.765 L1561.36 690.765 L1561.92 690.765 L1562.48 690.765 L1563.04 690.765 L1563.6 690.765 L1564.16 690.765 L1564.72 690.765 L1565.28 690.765 L1565.83 690.765 L1566.39 690.765 L1566.95 690.765 L1567.51 690.765 L1568.07 690.765 L1568.63 690.765 L1569.19 690.765 L1569.75 690.765 L1570.31 690.765 L1570.87 690.765 L1571.43 690.765 L1571.99 690.765 L1572.55 690.765 L1573.1 690.765 L1573.66 690.765 L1574.22 690.765 L1574.78 690.765 L1575.34 690.765 L1575.9 690.765 L1576.46 690.765 L1577.02 690.765 L1577.58 690.765 L1578.14 690.765 L1578.7 690.765 L1579.26 690.765 L1579.82 690.765 L1580.37 690.765 L1580.93 690.765 L1581.49 690.765 L1582.05 690.765 L1582.61 690.765 L1583.17 690.765 L1583.73 690.765 L1584.29 690.765 L1584.85 690.765 L1585.41 690.765 L1585.97 690.765 L1586.53 690.765 L1587.09 690.765 L1587.65 690.765 L1588.2 690.765 L1588.76 690.765 L1589.32 690.765 L1589.88 690.765 L1590.44 690.765 L1591 690.765 L1591.56 690.765 L1592.12 690.765 L1592.68 690.765 L1593.24 690.765 L1593.8 690.765 L1594.36 690.765 L1594.92 690.765 L1595.47 690.765 L1596.03 690.765 L1596.59 690.765 L1597.15 690.765 L1597.71 690.765 L1598.27 690.765 L1598.83 690.765 L1599.39 690.765 L1599.95 690.765 L1600.51 690.765 L1601.07 690.765 L1601.63 690.765 L1602.19 690.765 L1602.74 690.765 L1603.3 690.765 L1603.86 690.765 L1604.42 690.765 L1604.98 690.765 L1605.54 690.765 L1606.1 690.765 L1606.66 690.765 L1607.22 690.765 L1607.78 690.765 L1608.34 690.765 L1608.9 690.765 L1609.46 690.765 L1610.02 690.765 L1610.57 690.765 L1611.13 690.765 L1611.69 690.765 L1612.25 690.765 L1612.81 690.765 L1613.37 690.765 L1613.93 690.765 L1614.49 690.765 L1615.05 690.765 L1615.61 690.765 L1616.17 690.765 L1616.73 690.765 L1617.29 690.765 L1617.84 690.765 L1618.4 690.765 L1618.96 690.765 L1619.52 690.765 L1620.08 690.765 L1620.64 690.765 L1621.2 690.765 L1621.76 690.765 L1622.32 690.765 L1622.88 690.765 L1623.44 690.765 L1624 690.765 L1624.56 690.765 L1625.11 690.765 L1625.67 690.765 L1626.23 690.765 L1626.79 690.765 L1627.35 690.765 L1627.91 690.765 L1628.47 690.765 L1629.03 690.765 L1629.59 690.765 L1630.15 690.765 L1630.71 690.765 L1631.27 690.765 L1631.83 690.765 L1632.39 690.765 L1632.94 690.765 L1633.5 690.765 L1634.06 690.765 L1634.62 690.765 L1635.18 690.765 L1635.74 690.765 L1636.3 690.765 L1636.86 690.765 L1637.42 690.765 L1637.98 690.765 L1638.54 690.765 L1639.1 690.765 L1639.66 690.765 L1640.21 690.765 L1640.77 690.765 L1641.33 690.765 L1641.89 690.765 L1642.45 690.765 L1643.01 690.765 L1643.57 690.765 L1644.13 690.765 L1644.69 690.765 L1645.25 690.765 L1645.81 690.765 L1646.37 690.765 L1646.93 690.765 L1647.48 690.765 L1648.04 690.765 L1648.6 690.765 L1649.16 690.765 L1649.72 690.765 L1650.28 690.765 L1650.84 690.765 L1651.4 690.765 L1651.96 690.765 L1652.52 690.765 L1653.08 690.765 L1653.64 690.765 L1654.2 690.765 L1654.76 690.765 L1655.31 690.765 L1655.87 690.765 L1656.43 690.765 L1656.99 690.765 L1657.55 690.765 L1658.11 690.765 L1658.67 690.765 L1659.23 690.765 L1659.79 690.765 L1660.35 690.765 L1660.91 690.765 L1661.47 690.765 L1662.03 690.765 L1662.58 690.765 L1663.14 690.765 L1663.7 690.765 L1664.26 690.765 L1664.82 690.765 L1665.38 690.765 L1665.94 690.765 L1666.5 690.765 L1667.06 690.765 L1667.62 690.765 L1668.18 690.765 L1668.74 690.765 L1669.3 690.765 L1669.85 690.765 L1670.41 690.765 L1670.97 690.765 L1671.53 690.765 L1672.09 690.765 L1672.65 690.765 L1673.21 690.765 L1673.77 690.765 L1674.33 690.765 L1674.89 690.765 L1675.45 690.765 L1676.01 690.765 L1676.57 690.765 L1677.13 690.765 L1677.68 690.765 L1678.24 690.765 L1678.8 690.765 L1679.36 690.765 L1679.92 690.765 L1680.48 690.765 L1681.04 690.765 L1681.6 690.765 L1682.16 690.765 L1682.72 690.765 L1683.28 690.765 L1683.84 690.765 L1684.4 690.765 L1684.95 690.765 L1685.51 690.765 L1686.07 690.765 L1686.63 690.765 L1687.19 690.765 L1687.75 690.765 L1688.31 690.765 L1688.87 690.765 L1689.43 690.765 L1689.99 690.765 L1690.55 690.765 L1691.11 690.765 L1691.67 690.765 L1692.23 690.765 L1692.78 690.765 L1693.34 690.765 L1693.9 690.765 L1694.46 690.765 L1695.02 690.765 L1695.58 690.765 L1696.14 690.765 L1696.7 690.765 L1697.26 690.765 L1697.82 690.765 L1698.38 690.765 L1698.94 690.765 L1699.5 690.765 L1700.05 690.765 L1700.61 690.765 L1701.17 690.765 L1701.73 690.765 L1702.29 690.765 L1702.85 690.765 L1703.41 690.765 L1703.97 690.765 L1704.53 690.765 L1705.09 690.765 L1705.65 690.765 L1706.21 690.765 L1706.77 690.765 L1707.32 690.765 L1707.88 690.765 L1708.44 690.765 L1709 690.765 L1709.56 690.765 L1710.12 690.765 L1710.68 690.765 L1711.24 690.765 L1711.8 690.765 L1712.36 690.765 L1712.92 690.765 L1713.48 690.765 L1714.04 690.765 L1714.6 690.765 L1715.15 690.765 L1715.71 690.765 L1716.27 690.765 L1716.83 690.765 L1717.39 690.765 L1717.95 690.765 L1718.51 690.765 L1719.07 690.765 L1719.63 690.765 L1720.19 690.765 L1720.75 690.765 L1721.31 690.765 L1721.87 690.765 L1722.42 690.765 L1722.98 690.765 L1723.54 690.765 L1724.1 690.765 L1724.66 690.765 L1725.22 690.765 L1725.78 690.765 L1726.34 690.765 L1726.9 690.765 L1727.46 690.765 L1728.02 690.765 L1728.58 690.765 L1729.14 690.765 L1729.69 690.765 L1730.25 690.765 L1730.81 690.765 L1731.37 690.765 L1731.93 690.765 L1732.49 690.765 L1733.05 690.765 L1733.61 690.765 L1734.17 690.765 L1734.73 690.765 L1735.29 690.765 L1735.85 690.765 L1736.41 690.765 L1736.97 690.765 L1737.52 690.765 L1738.08 690.765 L1738.64 690.765 L1739.2 690.765 L1739.76 690.765 L1740.32 690.765 L1740.88 690.765 L1741.44 690.765 L1742 690.765 L1742.56 690.765 L1743.12 690.765 L1743.68 690.765 L1744.24 690.765 L1744.79 690.765 L1745.35 690.765 L1745.91 690.765 L1746.47 690.765 L1747.03 690.765 L1747.59 690.765 L1748.15 690.765 L1748.71 690.765 L1749.27 690.765 L1749.83 690.765 L1750.39 690.765 L1750.95 690.765 L1751.51 690.765 L1752.06 690.765 L1752.62 690.765 L1753.18 690.765 L1753.74 690.765 L1754.3 690.765 L1754.86 690.765 L1755.42 690.765 L1755.98 690.765 L1756.54 690.765 L1757.1 690.765 L1757.66 690.765 L1758.22 690.765 L1758.78 690.765 L1759.34 690.765 L1759.89 690.765 L1760.45 690.765 L1761.01 690.765 L1761.57 690.765 L1762.13 690.765 L1762.69 690.765 L1763.25 690.765 L1763.81 690.765 L1764.37 690.765 L1764.93 690.765 L1765.49 690.765 L1766.05 690.765 L1766.61 690.765 L1767.16 690.765 L1767.72 690.765 L1768.28 690.765 L1768.84 690.765 L1769.4 690.765 L1769.96 690.765 L1770.52 690.765 L1771.08 690.765 L1771.64 690.765 L1772.2 690.765 L1772.76 690.765 L1773.32 690.765 L1773.88 690.765 L1774.43 690.765 L1774.99 690.765 L1775.55 690.765 L1776.11 690.765 L1776.67 690.765 L1777.23 690.765 L1777.79 690.765 L1778.35 690.765 L1778.91 690.765 L1779.47 690.765 L1780.03 690.765 L1780.59 690.765 L1781.15 690.765 L1781.71 690.765 L1782.26 690.765 L1782.82 690.765 L1783.38 690.765 L1783.94 690.765 L1784.5 690.765 L1785.06 690.765 L1785.62 690.765 L1786.18 690.765 L1786.74 690.765 L1787.3 690.765 L1787.86 690.765 L1788.42 690.765 L1788.98 690.765 L1789.53 690.765 L1790.09 690.765 L1790.65 690.765 L1791.21 690.765 L1791.77 690.765 L1792.33 690.765 L1792.89 690.765 L1793.45 690.765 L1794.01 690.765 L1794.57 690.765 L1795.13 690.765 L1795.69 690.765 L1796.25 690.765 L1796.8 690.765 L1797.36 690.765 L1797.92 690.765 L1798.48 690.765 L1799.04 690.765 L1799.6 690.765 L1800.16 690.765 L1800.72 690.765 L1801.28 690.765 L1801.84 690.765 L1802.4 690.765 L1802.96 690.765 L1803.52 690.765 L1804.08 690.765 L1804.63 690.765 L1805.19 690.765 L1805.75 690.765 L1806.31 690.765 L1806.87 690.765 L1807.43 690.765 L1807.99 690.765 L1808.55 690.765 L1809.11 690.765 L1809.67 690.765 L1810.23 690.765 L1810.79 690.765 L1811.35 690.765 L1811.9 690.765 L1812.46 690.765 L1813.02 690.765 L1813.58 690.765 L1814.14 690.765 L1814.7 690.765 L1815.26 690.765 L1815.82 690.765 L1816.38 690.765 L1816.94 690.765 L1817.5 690.765 L1818.06 690.765 L1818.62 690.765 L1819.18 690.765 L1819.73 690.765 L1820.29 690.765 L1820.85 690.765 L1821.41 690.765 L1821.97 690.765 L1822.53 690.765 L1823.09 690.765 L1823.65 690.765 L1824.21 690.765 L1824.77 690.765 L1825.33 690.765 L1825.89 690.765 L1826.45 690.765 L1827 690.765 L1827.56 690.765 L1828.12 690.765 L1828.68 690.765 L1829.24 690.765 L1829.8 690.765 L1830.36 690.765 L1830.92 690.765 L1831.48 690.765 L1832.04 690.765 L1832.6 690.765 L1833.16 690.765 L1833.72 690.765 L1834.27 690.765 L1834.83 690.765 L1835.39 690.765 L1835.95 690.765 L1836.51 690.765 L1837.07 690.765 L1837.63 690.765 L1838.19 690.765 L1838.19 683.885 L1837.63 683.885 L1837.07 683.885 L1836.51 683.885 L1835.95 683.885 L1835.39 683.885 L1834.83 683.885 L1834.27 683.885 L1833.72 683.885 L1833.16 683.885 L1832.6 683.885 L1832.04 683.885 L1831.48 683.885 L1830.92 683.885 L1830.36 683.885 L1829.8 683.885 L1829.24 683.885 L1828.68 683.885 L1828.12 683.885 L1827.56 683.885 L1827 683.885 L1826.45 683.885 L1825.89 683.885 L1825.33 683.885 L1824.77 683.885 L1824.21 683.885 L1823.65 683.885 L1823.09 683.885 L1822.53 683.885 L1821.97 683.885 L1821.41 683.885 L1820.85 683.885 L1820.29 683.885 L1819.73 683.885 L1819.18 683.885 L1818.62 683.885 L1818.06 683.885 L1817.5 683.885 L1816.94 683.885 L1816.38 683.885 L1815.82 683.885 L1815.26 683.885 L1814.7 683.885 L1814.14 683.885 L1813.58 683.885 L1813.02 683.885 L1812.46 683.885 L1811.9 683.885 L1811.35 683.885 L1810.79 683.885 L1810.23 683.885 L1809.67 683.885 L1809.11 683.885 L1808.55 683.885 L1807.99 683.885 L1807.43 683.885 L1806.87 683.885 L1806.31 683.885 L1805.75 683.885 L1805.19 683.885 L1804.63 683.885 L1804.08 683.885 L1803.52 683.885 L1802.96 683.885 L1802.4 683.885 L1801.84 683.885 L1801.28 683.885 L1800.72 683.885 L1800.16 683.885 L1799.6 683.885 L1799.04 683.885 L1798.48 683.885 L1797.92 683.885 L1797.36 683.885 L1796.8 683.885 L1796.25 683.885 L1795.69 683.885 L1795.13 683.885 L1794.57 683.885 L1794.01 683.885 L1793.45 683.885 L1792.89 683.885 L1792.33 683.885 L1791.77 683.885 L1791.21 683.885 L1790.65 683.885 L1790.09 683.885 L1789.53 683.885 L1788.98 683.885 L1788.42 683.885 L1787.86 683.885 L1787.3 683.885 L1786.74 683.885 L1786.18 683.885 L1785.62 683.885 L1785.06 683.885 L1784.5 683.885 L1783.94 683.885 L1783.38 683.885 L1782.82 683.885 L1782.26 683.885 L1781.71 683.885 L1781.15 683.885 L1780.59 683.885 L1780.03 683.885 L1779.47 683.885 L1778.91 683.885 L1778.35 683.885 L1777.79 683.885 L1777.23 683.885 L1776.67 683.885 L1776.11 683.885 L1775.55 683.885 L1774.99 683.885 L1774.43 683.885 L1773.88 683.885 L1773.32 683.885 L1772.76 683.885 L1772.2 683.885 L1771.64 683.885 L1771.08 683.885 L1770.52 683.885 L1769.96 683.885 L1769.4 683.885 L1768.84 683.885 L1768.28 683.885 L1767.72 683.885 L1767.16 683.885 L1766.61 683.885 L1766.05 683.885 L1765.49 683.885 L1764.93 683.885 L1764.37 683.885 L1763.81 683.885 L1763.25 683.885 L1762.69 683.885 L1762.13 683.885 L1761.57 683.885 L1761.01 683.885 L1760.45 683.885 L1759.89 683.885 L1759.34 683.885 L1758.78 683.885 L1758.22 683.885 L1757.66 683.885 L1757.1 683.885 L1756.54 683.885 L1755.98 683.885 L1755.42 683.885 L1754.86 683.885 L1754.3 683.885 L1753.74 683.885 L1753.18 683.885 L1752.62 683.885 L1752.06 683.885 L1751.51 683.885 L1750.95 683.885 L1750.39 683.885 L1749.83 683.885 L1749.27 683.885 L1748.71 683.885 L1748.15 683.885 L1747.59 683.885 L1747.03 683.885 L1746.47 683.885 L1745.91 683.885 L1745.35 683.885 L1744.79 683.885 L1744.24 683.885 L1743.68 683.885 L1743.12 683.885 L1742.56 683.885 L1742 683.885 L1741.44 683.885 L1740.88 683.885 L1740.32 683.885 L1739.76 683.885 L1739.2 683.885 L1738.64 683.885 L1738.08 683.885 L1737.52 683.885 L1736.97 683.885 L1736.41 683.885 L1735.85 683.885 L1735.29 683.885 L1734.73 683.885 L1734.17 683.885 L1733.61 683.885 L1733.05 683.885 L1732.49 683.885 L1731.93 683.885 L1731.37 683.885 L1730.81 683.885 L1730.25 683.885 L1729.69 683.885 L1729.14 683.885 L1728.58 683.885 L1728.02 683.885 L1727.46 683.885 L1726.9 683.885 L1726.34 683.885 L1725.78 683.885 L1725.22 683.885 L1724.66 683.885 L1724.1 683.885 L1723.54 683.885 L1722.98 683.885 L1722.42 683.885 L1721.87 683.885 L1721.31 683.885 L1720.75 683.885 L1720.19 683.885 L1719.63 683.885 L1719.07 683.885 L1718.51 683.885 L1717.95 683.885 L1717.39 683.885 L1716.83 683.885 L1716.27 683.885 L1715.71 683.885 L1715.15 683.885 L1714.6 683.885 L1714.04 683.885 L1713.48 683.885 L1712.92 683.885 L1712.36 683.885 L1711.8 683.885 L1711.24 683.885 L1710.68 683.885 L1710.12 683.885 L1709.56 683.885 L1709 683.885 L1708.44 683.885 L1707.88 683.885 L1707.32 683.885 L1706.77 683.885 L1706.21 683.885 L1705.65 683.885 L1705.09 683.885 L1704.53 683.885 L1703.97 683.885 L1703.41 683.885 L1702.85 683.885 L1702.29 683.885 L1701.73 683.885 L1701.17 683.885 L1700.61 683.885 L1700.05 683.885 L1699.5 683.885 L1698.94 683.885 L1698.38 683.885 L1697.82 683.885 L1697.26 683.885 L1696.7 683.885 L1696.14 683.885 L1695.58 683.885 L1695.02 683.885 L1694.46 683.885 L1693.9 683.885 L1693.34 683.885 L1692.78 683.885 L1692.23 683.885 L1691.67 683.885 L1691.11 683.885 L1690.55 683.885 L1689.99 683.885 L1689.43 683.885 L1688.87 683.885 L1688.31 683.885 L1687.75 683.885 L1687.19 683.885 L1686.63 683.885 L1686.07 683.885 L1685.51 683.885 L1684.95 683.885 L1684.4 683.885 L1683.84 683.885 L1683.28 683.885 L1682.72 683.885 L1682.16 683.885 L1681.6 683.885 L1681.04 683.885 L1680.48 683.885 L1679.92 683.885 L1679.36 683.885 L1678.8 683.885 L1678.24 683.885 L1677.68 683.885 L1677.13 683.885 L1676.57 683.885 L1676.01 683.885 L1675.45 683.885 L1674.89 683.885 L1674.33 683.885 L1673.77 683.885 L1673.21 683.885 L1672.65 683.885 L1672.09 683.885 L1671.53 683.885 L1670.97 683.885 L1670.41 683.885 L1669.85 683.885 L1669.3 683.885 L1668.74 683.885 L1668.18 683.885 L1667.62 683.885 L1667.06 683.885 L1666.5 683.885 L1665.94 683.885 L1665.38 683.885 L1664.82 683.885 L1664.26 683.885 L1663.7 683.885 L1663.14 683.885 L1662.58 683.885 L1662.03 683.885 L1661.47 683.885 L1660.91 683.885 L1660.35 683.885 L1659.79 683.885 L1659.23 683.885 L1658.67 683.885 L1658.11 683.885 L1657.55 683.885 L1656.99 683.885 L1656.43 683.885 L1655.87 683.885 L1655.31 683.885 L1654.76 683.885 L1654.2 683.885 L1653.64 683.885 L1653.08 683.885 L1652.52 683.885 L1651.96 683.885 L1651.4 683.885 L1650.84 683.885 L1650.28 683.885 L1649.72 683.885 L1649.16 683.885 L1648.6 683.885 L1648.04 683.885 L1647.48 683.885 L1646.93 683.885 L1646.37 683.885 L1645.81 683.885 L1645.25 683.885 L1644.69 683.885 L1644.13 683.885 L1643.57 683.885 L1643.01 683.885 L1642.45 683.885 L1641.89 683.885 L1641.33 683.885 L1640.77 683.885 L1640.21 683.885 L1639.66 683.885 L1639.1 683.885 L1638.54 683.885 L1637.98 683.885 L1637.42 683.885 L1636.86 683.885 L1636.3 683.885 L1635.74 683.885 L1635.18 683.885 L1634.62 683.885 L1634.06 683.885 L1633.5 683.885 L1632.94 683.885 L1632.39 683.885 L1631.83 683.885 L1631.27 683.885 L1630.71 683.885 L1630.15 683.885 L1629.59 683.885 L1629.03 683.885 L1628.47 683.885 L1627.91 683.885 L1627.35 683.885 L1626.79 683.885 L1626.23 683.885 L1625.67 683.885 L1625.11 683.885 L1624.56 683.885 L1624 683.885 L1623.44 683.885 L1622.88 683.885 L1622.32 683.885 L1621.76 683.885 L1621.2 683.885 L1620.64 683.885 L1620.08 683.885 L1619.52 683.885 L1618.96 683.885 L1618.4 683.885 L1617.84 683.885 L1617.29 683.885 L1616.73 683.885 L1616.17 683.885 L1615.61 683.885 L1615.05 683.885 L1614.49 683.885 L1613.93 683.885 L1613.37 683.885 L1612.81 683.885 L1612.25 683.885 L1611.69 683.885 L1611.13 683.885 L1610.57 683.885 L1610.02 683.885 L1609.46 683.885 L1608.9 683.885 L1608.34 683.885 L1607.78 683.885 L1607.22 683.885 L1606.66 683.885 L1606.1 683.885 L1605.54 683.885 L1604.98 683.885 L1604.42 683.885 L1603.86 683.885 L1603.3 683.885 L1602.74 683.885 L1602.19 683.885 L1601.63 683.885 L1601.07 683.885 L1600.51 683.885 L1599.95 683.885 L1599.39 683.885 L1598.83 683.885 L1598.27 683.885 L1597.71 683.885 L1597.15 683.885 L1596.59 683.885 L1596.03 683.885 L1595.47 683.885 L1594.92 683.885 L1594.36 683.885 L1593.8 683.885 L1593.24 683.885 L1592.68 683.885 L1592.12 683.885 L1591.56 683.885 L1591 683.885 L1590.44 683.885 L1589.88 683.885 L1589.32 683.885 L1588.76 683.885 L1588.2 683.885 L1587.65 683.885 L1587.09 683.885 L1586.53 683.885 L1585.97 683.885 L1585.41 683.885 L1584.85 683.885 L1584.29 683.885 L1583.73 683.885 L1583.17 683.885 L1582.61 683.885 L1582.05 683.885 L1581.49 683.885 L1580.93 683.885 L1580.37 683.885 L1579.82 683.885 L1579.26 683.885 L1578.7 683.885 L1578.14 683.885 L1577.58 683.885 L1577.02 683.885 L1576.46 683.885 L1575.9 683.885 L1575.34 683.885 L1574.78 683.885 L1574.22 683.885 L1573.66 683.885 L1573.1 683.885 L1572.55 683.885 L1571.99 683.885 L1571.43 683.885 L1570.87 683.885 L1570.31 683.885 L1569.75 683.885 L1569.19 683.885 L1568.63 683.885 L1568.07 683.885 L1567.51 683.885 L1566.95 683.885 L1566.39 683.885 L1565.83 683.885 L1565.28 683.885 L1564.72 683.885 L1564.16 683.885 L1563.6 683.885 L1563.04 683.885 L1562.48 683.885 L1561.92 683.885 L1561.36 683.885 L1560.8 683.885 L1560.24 683.885 L1559.68 683.885 L1559.12 683.885 L1558.56 683.885 L1558 683.885 L1557.45 683.885 L1556.89 683.885 L1556.33 683.885 L1555.77 683.885 L1555.21 683.885 L1554.65 683.885 L1554.09 683.885 L1553.53 683.885 L1552.97 683.885 L1552.41 683.885 L1551.85 683.885 L1551.29 683.885 L1550.73 683.885 L1550.18 683.885 L1549.62 683.885 L1549.06 683.885 L1548.5 683.885 L1547.94 683.885 L1547.38 683.885 L1546.82 683.885 L1546.26 683.885 L1545.7 683.885 L1545.14 683.885 L1544.58 683.885 L1544.02 683.885 L1543.46 683.885 L1542.9 683.885 L1542.35 683.885 L1541.79 683.885 L1541.23 683.885 L1540.67 683.885 L1540.11 683.885 L1539.55 683.885 L1538.99 683.885 L1538.43 683.885 L1537.87 683.885 L1537.31 683.885 L1536.75 683.885 L1536.19 683.885 L1535.63 683.885 L1535.08 683.885 L1534.52 683.885 L1533.96 683.885 L1533.4 683.885 L1532.84 683.885 L1532.28 683.885 L1531.72 683.885 L1531.16 683.885 L1530.6 683.885 L1530.04 683.885 L1529.48 683.885 L1528.92 683.885 L1528.36 683.885 L1527.81 683.885 L1527.25 683.885 L1526.69 683.885 L1526.13 683.885 L1525.57 683.885 L1525.01 683.885 L1524.45 683.885 L1523.89 683.885 L1523.33 683.885 L1522.77 683.885 L1522.21 683.885 L1521.65 683.885 L1521.09 683.885 L1520.53 683.885 L1519.98 683.885 L1519.42 683.885 L1518.86 683.885 L1518.3 683.885 L1517.74 683.885 L1517.18 683.885 L1516.62 683.885 L1516.06 683.885 L1515.5 683.885 L1514.94 683.885 L1514.38 683.885 L1513.82 683.885 L1513.26 683.885 L1512.71 683.885 L1512.15 683.885 L1511.59 683.885 L1511.03 683.885 L1510.47 683.885 L1509.91 683.885 L1509.35 683.885 L1508.79 683.885 L1508.23 683.885 L1507.67 683.885 L1507.11 683.885 L1506.55 683.885 L1505.99 683.885 L1505.44 683.885 L1504.88 683.885 L1504.32 683.885 L1503.76 683.885 L1503.2 683.885 L1502.64 683.885 L1502.08 683.885 L1501.52 683.885 L1500.96 683.885 L1500.4 683.885 L1499.84 683.885 L1499.28 683.885 L1498.72 683.885 L1498.16 683.885 L1497.61 683.885 L1497.05 683.885 L1496.49 683.885 L1495.93 683.885 L1495.37 683.885 L1494.81 683.885 L1494.25 683.885 L1493.69 683.885 L1493.13 683.885 L1492.57 683.885 L1492.01 683.885 L1491.45 683.885 L1490.89 683.885 L1490.34 683.885 L1489.78 683.885 L1489.22 683.885 L1488.66 683.885 L1488.1 683.885 L1487.54 683.885 L1486.98 683.885 L1486.42 683.885 L1485.86 683.885 L1485.3 683.885 L1484.74 683.885 L1484.18 683.885 L1483.62 683.885 L1483.07 683.885 L1482.51 683.885 L1481.95 683.885 L1481.39 683.885 L1480.83 683.885 L1480.27 683.885 L1479.71 683.885 L1479.15 683.885 L1478.59 683.885 L1478.03 683.885 L1477.47 683.885 L1476.91 683.885 L1476.35 683.885 L1475.79 683.885 L1475.24 683.885 L1474.68 683.885 L1474.12 683.885 L1473.56 683.885 L1473 683.885 L1472.44 683.885 L1471.88 683.885 L1471.32 683.885 L1470.76 683.885 L1470.2 683.885 L1469.64 683.885 L1469.08 683.885 L1468.52 683.885 L1467.97 683.885 L1467.41 683.885 L1466.85 683.885 L1466.29 683.885 L1465.73 683.885 L1465.17 683.885 L1464.61 683.885 L1464.05 683.885 L1463.49 683.885 L1462.93 683.885 L1462.37 683.885 L1461.81 683.885 L1461.25 683.885 L1460.7 683.885 L1460.14 683.885 L1459.58 683.885 L1459.02 683.885 L1458.46 683.885 L1457.9 683.885 L1457.34 683.885 L1456.78 683.885 L1456.22 683.885 L1455.66 683.885 L1455.1 683.885 L1454.54 683.885 L1453.98 683.885 L1453.42 683.885 L1452.87 683.885 L1452.31 683.885 L1451.75 683.885 L1451.19 683.885 L1450.63 683.885 L1450.07 683.885 L1449.51 683.885 L1448.95 683.885 L1448.39 683.885 L1447.83 683.885 L1447.27 683.885 L1446.71 683.885 L1446.15 683.885 L1445.6 683.885 L1445.04 683.885 L1444.48 683.885 L1443.92 683.885 L1443.36 683.885 L1442.8 683.885 L1442.24 683.885 L1441.68 683.885 L1441.12 683.885 L1440.56 683.885 L1440 683.885 L1439.44 683.885 L1438.88 683.885 L1438.33 683.885 L1437.77 683.885 L1437.21 683.885 L1436.65 683.885 L1436.09 683.885 L1435.53 683.885 L1434.97 683.885 L1434.41 683.885 L1433.85 683.885 L1433.29 683.885 L1432.73 683.885 L1432.17 683.885 L1431.61 683.885 L1431.05 683.885 L1430.5 683.885 L1429.94 683.885 L1429.38 683.885 L1428.82 683.885 L1428.26 683.885 L1427.7 683.885 L1427.14 683.885 L1426.58 683.885 L1426.02 683.885 L1425.46 683.885 L1424.9 683.885 L1424.34 683.885 L1423.78 683.885 L1423.23 683.885 L1422.67 683.885 L1422.11 683.885 L1421.55 683.885 L1420.99 683.885 L1420.43 683.885 L1419.87 683.885 L1419.31 683.885 L1418.75 683.885 L1418.19 683.885 L1417.63 683.885 L1417.07 683.885 L1416.51 683.885 L1415.95 683.885 L1415.4 683.885 L1414.84 683.885 L1414.28 683.885 L1413.72 683.885 L1413.16 683.885 L1412.6 683.885 L1412.04 683.885 L1411.48 683.885 L1410.92 683.885 L1410.36 683.885 L1409.8 683.885 L1409.24 683.885 L1408.68 683.885 L1408.13 683.885 L1407.57 683.885 L1407.01 683.885 L1406.45 683.885 L1405.89 683.885 L1405.33 683.885 L1404.77 683.885 L1404.21 683.885 L1403.65 683.885 L1403.09 683.885 L1402.53 683.885 L1401.97 683.885 L1401.41 683.885 L1400.86 683.885 L1400.3 683.885 L1399.74 683.885 L1399.18 683.885 L1398.62 683.885 L1398.06 683.885 L1397.5 683.885 L1396.94 683.885 L1396.38 683.885 L1395.82 683.885 L1395.26 683.885 L1394.7 683.885 L1394.14 683.885 L1393.58 683.885 L1393.03 683.885 L1392.47 683.885 L1391.91 683.885 L1391.35 683.885 L1390.79 683.885 L1390.23 683.885 L1389.67 683.885 L1389.11 683.885 L1388.55 683.885 L1387.99 683.885 L1387.43 683.885 L1386.87 683.885 L1386.31 683.885 L1385.76 683.885 L1385.2 683.885 L1384.64 683.885 L1384.08 683.885 L1383.52 683.885 L1382.96 683.885 L1382.4 683.885 L1381.84 683.885 L1381.28 683.885 L1380.72 683.885 L1380.16 683.885 L1379.6 683.885 L1379.04 683.885 L1378.49 683.885 L1377.93 683.885 L1377.37 683.885 L1376.81 683.885 L1376.25 683.885 L1375.69 683.885 L1375.13 683.885 L1374.57 683.885 L1374.01 683.885 L1373.45 683.885 L1372.89 683.885 L1372.33 683.885 L1371.77 683.885 L1371.21 683.885 L1370.66 683.885 L1370.1 683.885 L1369.54 683.885 L1368.98 683.885 L1368.42 683.885 L1367.86 683.885 L1367.3 683.885 L1366.74 683.885 L1366.18 683.885 L1365.62 683.885 L1365.06 683.885 L1364.5 683.885 L1363.94 683.885 L1363.39 683.885 L1362.83 683.885 L1362.27 683.885 L1361.71 683.885 L1361.15 683.885 L1360.59 683.885 L1360.03 683.885 L1359.47 683.885 L1358.91 683.885 L1358.35 683.885 L1357.79 683.885 L1357.23 683.885 L1356.67 683.885 L1356.12 683.885 L1355.56 683.885 L1355 683.885 L1354.44 683.885 L1353.88 683.885 L1353.32 683.885 L1352.76 683.885 L1352.2 683.885 L1351.64 683.885 L1351.08 683.885 L1350.52 683.885 L1349.96 683.885 L1349.4 683.885 L1348.84 683.885 L1348.29 683.885 L1347.73 683.885 L1347.17 683.885 L1346.61 683.885 L1346.05 683.885 L1345.49 683.885 L1344.93 683.885 L1344.37 683.885 L1343.81 683.885 L1343.25 683.885 L1342.69 683.885 L1342.13 683.885 L1341.57 683.885 L1341.02 683.885 L1340.46 683.885 L1339.9 683.885 L1339.34 683.885 L1338.78 683.885 L1338.22 683.885 L1337.66 683.885 L1337.1 683.885 L1336.54 683.885 L1335.98 683.885 L1335.42 683.885 L1334.86 683.885 L1334.3 683.885 L1333.75 683.885 L1333.19 683.885 L1332.63 683.885 L1332.07 683.885 L1331.51 683.885 L1330.95 683.885 L1330.39 683.885 L1329.83 683.885 L1329.27 683.885 L1328.71 683.885 L1328.15 683.885 L1327.59 683.885 L1327.03 683.885 L1326.47 683.885 L1325.92 683.885 L1325.36 683.885 L1324.8 683.885 L1324.24 683.885 L1323.68 683.885 L1323.12 683.885 L1322.56 683.885 L1322 683.885 L1321.44 683.885 L1320.88 683.885 L1320.32 683.885 L1319.76 683.885 L1319.2 683.885 L1318.65 683.885 L1318.09 683.885 L1317.53 683.885 L1316.97 683.885 L1316.41 683.885 L1315.85 683.885 L1315.29 683.885 L1314.73 683.885 L1314.17 683.885 L1313.61 683.885 L1313.05 683.885 L1312.49 683.885 L1311.93 683.885 L1311.38 683.885 L1310.82 683.885 L1310.26 683.885 L1309.7 683.885 L1309.14 683.885 L1308.58 683.885 L1308.02 683.885 L1307.46 683.885 L1306.9 683.885 L1306.34 683.885 L1305.78 683.885 L1305.22 683.885 L1304.66 683.885 L1304.1 683.885 L1303.55 683.885 L1302.99 683.885 L1302.43 683.885 L1301.87 683.885 L1301.31 683.885 L1300.75 683.885 L1300.19 683.885 L1299.63 683.885 L1299.07 683.885 L1298.51 683.885 L1297.95 683.885 L1297.39 683.885 L1296.83 683.885 L1296.28 683.885 L1295.72 683.885 L1295.16 683.885 L1294.6 683.885 L1294.04 683.885 L1293.48 683.885 L1292.92 683.885 L1292.36 683.885 L1291.8 683.885 L1291.24 683.885 L1290.68 683.885 L1290.12 683.885 L1289.56 683.885 L1289 683.885 L1288.45 683.885 L1287.89 683.885 L1287.33 683.885 L1286.77 683.885 L1286.21 683.885 L1285.65 683.885 L1285.09 683.885 L1284.53 683.885 L1283.97 683.885 L1283.41 683.885 L1282.85 683.885 L1282.29 683.885 L1281.73 683.885 L1281.18 683.885 L1280.62 683.885 L1280.06 683.885 L1279.5 683.885 L1278.94 683.885 L1278.38 683.885 L1277.82 683.885 L1277.26 683.885 L1276.7 683.885 L1276.14 683.885 L1275.58 683.885 L1275.02 683.885 L1274.46 683.885 L1273.91 683.885 L1273.35 683.885 L1272.79 683.885 L1272.23 683.885 L1271.67 683.885 L1271.11 683.885 L1270.55 683.885 L1269.99 683.885 L1269.43 683.885 L1268.87 683.885 L1268.31 683.885 L1267.75 683.885 L1267.19 683.885 L1266.63 683.885 L1266.08 683.885 L1265.52 683.885 L1264.96 683.885 L1264.4 683.885 L1263.84 683.885 L1263.28 683.885 L1262.72 683.885 L1262.16 683.885 L1261.6 683.885 L1261.04 683.885 L1260.48 683.885 L1259.92 683.885 L1259.36 683.885 L1258.81 683.885 L1258.25 683.885 L1257.69 683.885 L1257.13 683.885 L1256.57 683.885 L1256.01 683.885 L1255.45 683.885 L1254.89 683.885 L1254.33 683.885 L1253.77 683.885 L1253.21 683.885 L1252.65 683.885 L1252.09 683.885 L1251.54 683.885 L1250.98 683.885 L1250.42 683.885 L1249.86 683.885 L1249.3 683.885 L1248.74 683.885 L1248.18 683.885 L1247.62 683.885 L1247.06 683.885 L1246.5 683.885 L1245.94 683.885 L1245.38 683.885 L1244.82 683.885 L1244.26 683.885 L1243.71 683.885 L1243.15 683.885 L1242.59 683.885 L1242.03 683.885 L1241.47 683.885 L1240.91 683.885 L1240.35 683.885 L1239.79 683.885 L1239.23 683.885 L1238.67 683.885 L1238.11 683.885 L1237.55 683.885 L1236.99 683.885 L1236.44 683.885 L1235.88 683.885 L1235.32 683.885 L1234.76 683.885 L1234.2 683.885 L1233.64 683.885 L1233.08 683.885 L1232.52 683.885 L1231.96 683.885 L1231.4 683.885 L1230.84 683.885 L1230.28 683.885 L1229.72 683.885 L1229.17 683.885 L1228.61 683.885 L1228.05 683.885 L1227.49 683.885 L1226.93 683.885 L1226.37 683.885 L1225.81 683.885 L1225.25 683.885 L1224.69 683.885 L1224.13 683.885 L1223.57 683.885 L1223.01 683.885 L1222.45 683.885 L1221.89 683.885 L1221.34 683.885 L1220.78 683.885 L1220.22 683.885 L1219.66 683.885 L1219.1 683.885 L1218.54 683.885 L1217.98 683.885 L1217.42 683.885 L1216.86 683.885 L1216.3 683.885 L1215.74 683.885 L1215.18 683.885 L1214.62 683.885 L1214.07 683.885 L1213.51 683.885 L1212.95 683.885 L1212.39 683.885 L1211.83 683.885 L1211.27 683.885 L1210.71 683.885 L1210.15 683.885 L1209.59 683.885 L1209.03 683.885 L1208.47 683.885 L1207.91 683.885 L1207.35 683.885 L1206.8 683.885 L1206.24 683.885 L1205.68 683.885 L1205.12 683.885 L1204.56 683.885 L1204 683.885 L1203.44 683.885 L1202.88 683.885 L1202.32 683.885 L1201.76 683.885 L1201.2 683.885 L1200.64 683.885 L1200.08 683.885 L1199.52 683.885 L1198.97 683.885 L1198.41 683.885 L1197.85 683.885 L1197.29 683.885 L1196.73 683.885 L1196.17 683.885 L1195.61 683.885 L1195.05 683.885 L1194.49 683.885 L1193.93 683.885 L1193.37 683.885 L1192.81 683.885 L1192.25 683.885 L1191.7 683.885 L1191.14 683.885 L1190.58 683.885 L1190.02 683.885 L1189.46 683.885 L1188.9 683.885 L1188.34 683.885 L1187.78 683.885 L1187.22 683.885 L1186.66 683.885 L1186.1 683.885 L1185.54 683.885 L1184.98 683.885 L1184.43 683.885 L1183.87 683.885 L1183.31 683.885 L1182.75 683.885 L1182.19 683.885 L1181.63 683.885 L1181.07 683.885 L1180.51 683.885 L1179.95 683.885 L1179.39 683.885 L1178.83 683.885 L1178.27 683.885 L1177.71 683.885 L1177.15 683.885 L1176.6 683.885 L1176.04 683.885 L1175.48 683.885 L1174.92 683.885 L1174.36 683.885 L1173.8 683.885 L1173.24 683.885 L1172.68 683.885 L1172.12 683.885 L1171.56 683.885 L1171 683.885 L1170.44 683.885 L1169.88 683.885 L1169.33 683.885 L1168.77 683.885 L1168.21 683.885 L1167.65 683.885 L1167.09 683.885 L1166.53 683.885 L1165.97 683.885 L1165.41 683.885 L1164.85 683.885 L1164.29 683.885 L1163.73 683.885 L1163.17 683.885 L1162.61 683.885 L1162.05 683.885 L1161.5 683.885 L1160.94 683.885 L1160.38 683.885 L1159.82 683.885 L1159.26 683.885 L1158.7 683.885 L1158.14 683.885 L1157.58 683.885 L1157.02 683.885 L1156.46 683.885 L1155.9 683.885 L1155.34 683.885 L1154.78 683.885 L1154.23 683.885 L1153.67 683.885 L1153.11 683.885 L1152.55 683.885 L1151.99 683.885 L1151.43 683.885 L1150.87 683.885 L1150.31 683.885 L1149.75 683.885 L1149.19 683.885 L1148.63 683.885 L1148.07 683.885 L1147.51 683.885 L1146.96 683.885 L1146.4 683.885 L1145.84 683.885 L1145.28 683.885 L1144.72 683.885 L1144.16 683.885 L1143.6 683.885 L1143.04 683.885 L1142.48 683.885 L1141.92 683.885 L1141.36 683.885 L1140.8 683.885 L1140.24 683.885 L1139.68 683.885 L1139.13 683.885 L1138.57 683.885 L1138.01 683.885 L1137.45 683.885 L1136.89 683.885 L1136.33 683.885 L1135.77 683.885 L1135.21 683.885 L1134.65 683.885 L1134.09 683.885 L1133.53 683.885 L1132.97 683.885 L1132.41 683.885 L1131.86 683.885 L1131.3 683.885 L1130.74 683.885 L1130.18 683.885 L1129.62 683.885 L1129.06 683.885 L1128.5 683.885 L1127.94 683.885 L1127.38 683.885 L1126.82 683.885 L1126.26 683.885 L1125.7 683.885 L1125.14 683.885 L1124.59 683.885 L1124.03 683.885 L1123.47 683.885 L1122.91 683.885 L1122.35 683.885 L1121.79 683.885 L1121.23 683.885 L1120.67 683.885 L1120.11 683.885 L1119.55 683.885 L1118.99 683.885 L1118.43 683.885 L1117.87 683.885 L1117.31 683.885 L1116.76 683.885 L1116.2 683.885 L1115.64 683.885 L1115.08 683.885 L1114.52 683.885 L1113.96 683.885 L1113.4 683.885 L1112.84 683.885 L1112.28 683.885 L1111.72 683.885 L1111.16 683.885 L1110.6 683.885 L1110.04 683.885 L1109.49 683.885 L1108.93 683.885 L1108.37 683.885 L1107.81 683.885 L1107.25 683.885 L1106.69 683.885 L1106.13 683.885 L1105.57 683.885 L1105.01 683.885 L1104.45 683.885 L1103.89 683.885 L1103.33 683.885 L1102.77 683.885 L1102.22 683.885 L1101.66 683.885 L1101.1 683.885 L1100.54 683.885 L1099.98 683.885 L1099.42 683.885 L1098.86 683.885 L1098.3 683.885 L1097.74 683.885 L1097.18 683.885 L1096.62 683.885 L1096.06 683.885 L1095.5 683.885 L1094.94 683.885 L1094.39 683.885 L1093.83 683.885 L1093.27 683.885 L1092.71 683.885 L1092.15 683.885 L1091.59 683.885 L1091.03 683.885 L1090.47 683.885 L1089.91 683.885 L1089.35 683.885 L1088.79 683.885 L1088.23 683.885 L1087.67 683.885 L1087.12 683.885 L1086.56 683.885 L1086 683.885 L1085.44 683.885 L1084.88 683.885 L1084.32 683.885 L1083.76 683.885 L1083.2 683.885 L1082.64 683.885 L1082.08 683.885 L1081.52 683.885 L1080.96 683.885 L1080.4 683.885 L1079.85 683.885 L1079.29 683.885 L1078.73 683.885 L1078.17 683.885 L1077.61 683.885 L1077.05 683.885 L1076.49 683.885 L1075.93 683.885 L1075.37 683.885 L1074.81 683.885 L1074.25 683.885 L1073.69 683.885 L1073.13 683.885 L1072.57 683.885 L1072.02 683.885 L1071.46 683.885 L1070.9 683.885 L1070.34 683.885 L1069.78 683.885 L1069.22 683.885 L1068.66 683.885 L1068.1 683.885 L1067.54 683.885 L1066.98 683.885 L1066.42 683.885 L1065.86 683.885 L1065.3 683.885 L1064.75 683.885 L1064.19 683.885 L1063.63 683.885 L1063.07 683.885 L1062.51 683.885 L1061.95 683.885 L1061.39 683.885 L1060.83 683.885 L1060.27 683.885 L1059.71 683.885 L1059.15 683.885 L1058.59 683.885 L1058.03 683.885 L1057.48 683.885 L1056.92 683.885 L1056.36 683.885 L1055.8 683.885 L1055.24 683.885 L1054.68 683.885 L1054.12 683.885 L1053.56 683.885 L1053 683.885 L1052.44 683.885 L1051.88 683.885 L1051.32 683.885 L1050.76 683.885 L1050.2 683.885 L1049.65 683.885 L1049.09 683.885 L1048.53 683.885 L1047.97 683.885 L1047.41 683.885 L1046.85 683.885 L1046.29 683.885 L1045.73 683.885 L1045.17 683.885 L1044.61 683.885 L1044.05 683.885 L1043.49 683.885 L1042.93 683.885 L1042.38 683.885 L1041.82 683.885 L1041.26 683.885 L1040.7 683.885 L1040.14 683.885 L1039.58 683.885 L1039.02 683.885 L1038.46 683.885 L1037.9 683.885 L1037.34 683.885 L1036.78 683.885 L1036.22 683.885 L1035.66 683.885 L1035.1 683.885 L1034.55 683.885 L1033.99 683.885 L1033.43 683.885 L1032.87 683.885 L1032.31 683.885 L1031.75 683.885 L1031.19 683.885 L1030.63 683.885 L1030.07 683.885 L1029.51 683.885 L1028.95 683.885 L1028.39 683.885 L1027.83 683.885 L1027.28 683.885 L1026.72 683.885 L1026.16 683.885 L1025.6 683.885 L1025.04 683.885 L1024.48 683.885 L1023.92 683.885 L1023.36 683.885 L1022.8 683.885 L1022.24 683.885 L1021.68 683.885 L1021.12 683.885 L1020.56 683.885 L1020.01 683.885 L1019.45 683.885 L1018.89 683.885 L1018.33 683.885 L1017.77 683.885 L1017.21 683.885 L1016.65 683.885 L1016.09 683.885 L1015.53 683.885 L1014.97 683.885 L1014.41 683.885 L1013.85 683.885 L1013.29 683.885 L1012.73 683.885 L1012.18 683.885 L1011.62 683.885 L1011.06 683.885 L1010.5 683.885 L1009.94 683.885 L1009.38 683.885 L1008.82 683.885 L1008.26 683.885 L1007.7 683.885 L1007.14 683.885 L1006.58 683.885 L1006.02 683.885 L1005.46 683.885 L1004.91 683.885 L1004.35 683.885 L1003.79 683.885 L1003.23 683.885 L1002.67 683.885 L1002.11 683.885 L1001.55 683.885 L1000.99 683.885 L1000.43 683.885 L999.872 683.885 L999.313 683.885 L998.754 683.885 L998.194 683.885 L997.635 683.885 L997.076 683.885 L996.517 683.885 L995.957 683.885 L995.398 683.885 L994.839 683.885 L994.28 683.885 L993.72 683.885 L993.161 683.885 L992.602 683.885 L992.043 683.885 L991.483 683.885 L990.924 683.885 L990.365 683.885 L989.806 683.885 L989.246 683.885 L988.687 683.885 L988.128 683.885 L987.569 683.885 L987.009 683.885 L986.45 683.885 L985.891 683.885 L985.332 683.885 L984.772 683.885 L984.213 683.885 L983.654 683.885 L983.095 683.885 L982.535 683.885 L981.976 683.885 L981.417 683.885 L980.858 683.885 L980.298 683.885 L979.739 683.885 L979.18 683.885 L978.621 683.885 L978.061 683.885 L977.502 683.885 L976.943 683.885 L976.384 683.885 L975.824 683.885 L975.265 683.885 L974.706 683.885 L974.147 683.885 L973.587 683.885 L973.028 683.885 L972.469 683.885 L971.91 683.885 L971.35 683.885 L970.791 683.885 L970.232 683.885 L969.673 683.885 L969.113 683.885 L968.554 683.885 L967.995 683.885 L967.436 683.885 L966.876 683.885 L966.317 683.885 L965.758 683.885 L965.199 683.885 L964.639 683.885 L964.08 683.885 L963.521 683.885 L962.962 683.885 L962.402 683.885 L961.843 683.885 L961.284 683.885 L960.725 683.885 L960.165 683.885 L959.606 683.885 L959.047 683.885 L958.488 683.885 L957.928 683.885 L957.369 683.885 L956.81 683.885 L956.251 683.885 L955.691 683.885 L955.132 683.885 L954.573 683.885 L954.014 683.885 L953.454 683.885 L952.895 683.885 L952.336 683.885 L951.777 683.885 L951.217 683.885 L950.658 683.885 L950.099 683.885 L949.54 683.885 L948.98 683.885 L948.421 683.885 L947.862 683.885 L947.303 683.885 L946.743 683.885 L946.184 683.885 L945.625 683.885 L945.066 683.885 L944.506 683.885 L943.947 683.885 L943.388 683.885 L942.829 683.885 L942.269 683.885 L941.71 683.885 L941.151 683.885 L940.592 683.885 L940.032 683.885 L939.473 683.885 L938.914 683.885 L938.355 683.885 L937.795 683.885 L937.236 683.885 L936.677 683.885 L936.118 683.885 L935.558 683.885 L934.999 683.885 L934.44 683.885 L933.881 683.885 L933.321 683.885 L932.762 683.885 L932.203 683.885 L931.644 683.885 L931.084 683.885 L930.525 683.885 L929.966 683.885 L929.406 683.885 L928.847 683.885 L928.288 683.885 L927.729 683.885 L927.169 683.885 L926.61 683.885 L926.051 683.885 L925.492 683.885 L924.932 683.885 L924.373 683.885 L923.814 683.885 L923.255 683.885 L922.695 683.885 L922.136 683.885 L921.577 683.885 L921.018 683.885 L920.458 683.885 L919.899 683.885 L919.34 683.885 L918.781 683.885 L918.221 683.885 L917.662 683.885 L917.103 683.885 L916.544 683.885 L915.984 683.885 L915.425 683.885 L914.866 683.885 L914.307 683.885 L913.747 683.885 L913.188 683.885 L912.629 683.885 L912.07 683.885 L911.51 683.885 L910.951 683.885 L910.392 683.885 L909.833 683.885 L909.273 683.885 L908.714 683.885 L908.155 683.885 L907.596 683.885 L907.036 683.885 L906.477 683.885 L905.918 683.885 L905.359 683.885 L904.799 683.885 L904.24 683.885 L903.681 683.885 L903.122 683.885 L902.562 683.885 L902.003 683.885 L901.444 683.885 L900.885 683.885 L900.325 683.885 L899.766 683.885 L899.207 683.885 L898.648 683.885 L898.088 683.885 L897.529 683.885 L896.97 683.885 L896.411 683.885 L895.851 683.885 L895.292 683.885 L894.733 683.885 L894.174 683.885 L893.614 683.885 L893.055 683.885 L892.496 683.885 L891.937 683.885 L891.377 683.885 L890.818 683.885 L890.259 683.885 L889.7 683.885 L889.14 683.885 L888.581 683.885 L888.022 683.885 L887.463 683.885 L886.903 683.885 L886.344 683.885 L885.785 683.885 L885.226 683.885 L884.666 683.885 L884.107 683.885 L883.548 683.885 L882.989 683.885 L882.429 683.885 L881.87 683.885 L881.311 683.885 L880.752 683.885 L880.192 683.885 L879.633 683.885 L879.074 683.885 L878.515 683.885 L877.955 683.885 L877.396 683.885 L876.837 683.885 L876.278 683.885 L875.718 683.885 L875.159 683.885 L874.6 683.885 L874.041 683.885 L873.481 683.885 L872.922 683.885 L872.363 683.885 L871.804 683.885 L871.244 683.885 L870.685 683.885 L870.126 683.885 L869.567 683.885 L869.007 683.885 L868.448 683.885 L867.889 683.885 L867.33 683.885 L866.77 683.885 L866.211 683.885 L865.652 683.885 L865.093 683.885 L864.533 683.885 L863.974 683.885 L863.415 683.885 L862.856 683.885 L862.296 683.885 L861.737 683.885 L861.178 683.885 L860.619 683.885 L860.059 683.885 L859.5 683.885 L858.941 683.885 L858.382 683.885 L857.822 683.885 L857.263 683.885 L856.704 683.885 L856.145 683.885 L855.585 683.885 L855.026 683.885 L854.467 683.885 L853.908 683.885 L853.348 683.885 L852.789 683.885 L852.23 683.885 L851.671 683.885 L851.111 683.885 L850.552 683.885 L849.993 683.885 L849.434 683.885 L848.874 683.885 L848.315 683.885 L847.756 683.885 L847.197 683.885 L846.637 683.885 L846.078 683.885 L845.519 683.885 L844.96 683.885 L844.4 683.885 L843.841 683.885 L843.282 683.885 L842.723 683.885 L842.163 683.885 L841.604 683.885 L841.045 683.885 L840.486 683.885 L839.926 683.885 L839.367 683.885 L838.808 683.885 L838.249 683.885 L837.689 683.885 L837.13 683.885 L836.571 683.885 L836.012 683.885 L835.452 683.885 L834.893 683.885 L834.334 683.885 L833.775 683.885 L833.215 683.885 L832.656 683.885 L832.097 683.885 L831.538 683.885 L830.978 683.885 L830.419 683.885 L829.86 683.885 L829.301 683.885 L828.741 683.885 L828.182 683.885 L827.623 683.885 L827.064 683.885 L826.504 683.885 L825.945 683.885 L825.386 683.885 L824.827 683.885 L824.267 683.885 L823.708 683.885 L823.149 683.885 L822.59 683.885 L822.03 683.885 L821.471 683.885 L820.912 683.885 L820.353 683.885 L819.793 683.885 L819.234 683.885 L818.675 683.885 L818.116 683.885 L817.556 683.885 L816.997 683.885 L816.438 683.885 L815.879 683.885 L815.319 683.885 L814.76 683.885 L814.201 683.885 L813.642 683.885 L813.082 683.885 L812.523 683.885 L811.964 683.885 L811.405 683.885 L810.845 683.885 L810.286 683.885 L809.727 683.885 L809.168 683.885 L808.608 683.885 L808.049 683.885 L807.49 683.885 L806.931 683.885 L806.371 683.885 L805.812 683.885 L805.253 683.885 L804.693 683.885 L804.134 683.885 L803.575 683.885 L803.016 683.885 L802.456 683.885 L801.897 683.885 L801.338 683.885 L800.779 683.885 L800.219 683.885 L799.66 683.885 L799.101 683.885 L798.542 683.885 L797.982 683.885 L797.423 683.885 L796.864 683.885 L796.305 683.885 L795.745 683.885 L795.186 683.885 L794.627 683.885 L794.068 683.885 L793.508 683.885 L792.949 683.885 L792.39 683.885 L791.831 683.885 L791.271 683.885 L790.712 683.885 L790.153 683.885 L789.594 683.885 L789.034 683.885 L788.475 683.885 L787.916 683.885 L787.357 683.885 L786.797 683.885 L786.238 683.885 L785.679 683.885 L785.12 683.885 L784.56 683.885 L784.001 683.885 L783.442 683.885 L782.883 683.885 L782.323 683.885 L781.764 683.885 L781.205 683.885 L780.646 683.885 L780.086 683.885 L779.527 683.885 L778.968 683.885 L778.409 683.885 L777.849 683.885 L777.29 683.885 L776.731 683.885 L776.172 683.885 L775.612 683.885 L775.053 683.885 L774.494 683.885 L773.935 683.885 L773.375 683.885 L772.816 683.885 L772.257 683.885 L771.698 683.885 L771.138 683.885 L770.579 683.885 L770.02 683.885 L769.461 683.885 L768.901 683.885 L768.342 683.885 L767.783 683.885 L767.224 683.885 L766.664 683.885 L766.105 683.885 L765.546 683.885 L764.987 683.885 L764.427 683.885 L763.868 683.885 L763.309 683.885 L762.75 683.885 L762.19 683.885 L761.631 683.885 L761.072 683.885 L760.513 683.885 L759.953 683.885 L759.394 683.885 L758.835 683.885 L758.276 683.885 L757.716 683.885 L757.157 683.885 L756.598 683.885 L756.039 683.885 L755.479 683.885 L754.92 683.885 L754.361 683.885 L753.802 683.885 L753.242 683.885 L752.683 683.885 L752.124 683.885 L751.565 683.885 L751.005 683.885 L750.446 683.885 L749.887 683.885 L749.328 683.885 L748.768 683.885 L748.209 683.885 L747.65 683.885 L747.091 683.885 L746.531 683.885 L745.972 683.885 L745.413 683.885 L744.854 683.885 L744.294 683.885 L743.735 683.885 L743.176 683.885 L742.617 683.885 L742.057 683.885 L741.498 683.885 L740.939 683.885 L740.38 683.885 L739.82 683.885 L739.261 683.885 L738.702 683.885 L738.143 683.885 L737.583 683.885 L737.024 683.885 L736.465 683.885 L735.906 683.885 L735.346 683.885 L734.787 683.885 L734.228 683.885 L733.669 683.885 L733.109 683.885 L732.55 683.885 L731.991 683.885 L731.432 683.885 L730.872 683.885 L730.313 683.885 L729.754 683.885 L729.195 683.885 L728.635 683.885 L728.076 683.885 L727.517 683.885 L726.958 683.885 L726.398 683.885 L725.839 683.885 L725.28 683.885 L724.721 683.885 L724.161 683.885 L723.602 683.885 L723.043 683.885 L722.484 683.885 L721.924 683.885 L721.365 683.885 L720.806 683.885 L720.247 683.885  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.325 720.806,687.325 721.365,687.325 721.924,687.325 722.484,687.325 723.043,687.325 723.602,687.325 724.161,687.325 724.721,687.325 725.28,687.325 725.839,687.325 726.398,687.325 726.958,687.325 727.517,687.325 728.076,687.325 728.635,687.325 729.195,687.325 729.754,687.325 730.313,687.325 730.872,687.325 731.432,687.325 731.991,687.325 732.55,687.325 733.109,687.325 733.669,687.325 734.228,687.325 734.787,687.325 735.346,687.325 735.906,687.325 736.465,687.325 737.024,687.325 737.583,687.325 738.143,687.325 738.702,687.325 739.261,687.325 739.82,687.325 740.38,687.325 740.939,687.325 741.498,687.325 742.057,687.325 742.617,687.325 743.176,687.325 743.735,687.325 744.294,687.325 744.854,687.325 745.413,687.325 745.972,687.325 746.531,687.325 747.091,687.325 747.65,687.325 748.209,687.325 748.768,687.325 749.328,687.325 749.887,687.325 750.446,687.325 751.005,687.325 751.565,687.325 752.124,687.325 752.683,687.325 753.242,687.325 753.802,687.325 754.361,687.325 754.92,687.325 755.479,687.325 756.039,687.325 756.598,687.325 757.157,687.325 757.716,687.325 758.276,687.325 758.835,687.325 759.394,687.325 759.953,687.325 760.513,687.325 761.072,687.325 761.631,687.325 762.19,687.325 762.75,687.325 763.309,687.325 763.868,687.325 764.427,687.325 764.987,687.325 765.546,687.325 766.105,687.325 766.664,687.325 767.224,687.325 767.783,687.325 768.342,687.325 768.901,687.325 769.461,687.325 770.02,687.325 770.579,687.325 771.138,687.325 771.698,687.325 772.257,687.325 772.816,687.325 773.375,687.325 773.935,687.325 774.494,687.325 775.053,687.325 775.612,687.325 776.172,687.325 776.731,687.325 777.29,687.325 777.849,687.325 778.409,687.325 778.968,687.325 779.527,687.325 780.086,687.325 780.646,687.325 781.205,687.325 781.764,687.325 782.323,687.325 782.883,687.325 783.442,687.325 784.001,687.325 784.56,687.325 785.12,687.325 785.679,687.325 786.238,687.325 786.797,687.325 787.357,687.325 787.916,687.325 788.475,687.325 789.034,687.325 789.594,687.325 790.153,687.325 790.712,687.325 791.271,687.325 791.831,687.325 792.39,687.325 792.949,687.325 793.508,687.325 794.068,687.325 794.627,687.325 795.186,687.325 795.745,687.325 796.305,687.325 796.864,687.325 797.423,687.325 797.982,687.325 798.542,687.325 799.101,687.325 799.66,687.325 800.219,687.325 800.779,687.325 801.338,687.325 801.897,687.325 802.456,687.325 803.016,687.325 803.575,687.325 804.134,687.325 804.693,687.325 805.253,687.325 805.812,687.325 806.371,687.325 806.931,687.325 807.49,687.325 808.049,687.325 808.608,687.325 809.168,687.325 809.727,687.325 810.286,687.325 810.845,687.325 811.405,687.325 811.964,687.325 812.523,687.325 813.082,687.325 813.642,687.325 814.201,687.325 814.76,687.325 815.319,687.325 815.879,687.325 816.438,687.325 816.997,687.325 817.556,687.325 818.116,687.325 818.675,687.325 819.234,687.325 819.793,687.325 820.353,687.325 820.912,687.325 821.471,687.325 822.03,687.325 822.59,687.325 823.149,687.325 823.708,687.325 824.267,687.325 824.827,687.325 825.386,687.325 825.945,687.325 826.504,687.325 827.064,687.325 827.623,687.325 828.182,687.325 828.741,687.325 829.301,687.325 829.86,687.325 830.419,687.325 830.978,687.325 831.538,687.325 832.097,687.325 832.656,687.325 833.215,687.325 833.775,687.325 834.334,687.325 834.893,687.325 835.452,687.325 836.012,687.325 836.571,687.325 837.13,687.325 837.689,687.325 838.249,687.325 838.808,687.325 839.367,687.325 839.926,687.325 840.486,687.325 841.045,687.325 841.604,687.325 842.163,687.325 842.723,687.325 843.282,687.325 843.841,687.325 844.4,687.325 844.96,687.325 845.519,687.325 846.078,687.325 846.637,687.325 847.197,687.325 847.756,687.325 848.315,687.325 848.874,687.325 849.434,687.325 849.993,687.325 850.552,687.325 851.111,687.325 851.671,687.325 852.23,687.325 852.789,687.325 853.348,687.325 853.908,687.325 854.467,687.325 855.026,687.325 855.585,687.325 856.145,687.325 856.704,687.325 857.263,687.325 857.822,687.325 858.382,687.325 858.941,687.325 859.5,687.325 860.059,687.325 860.619,687.325 861.178,687.325 861.737,687.325 862.296,687.325 862.856,687.325 863.415,687.325 863.974,687.325 864.533,687.325 865.093,687.325 865.652,687.325 866.211,687.325 866.77,687.325 867.33,687.325 867.889,687.325 868.448,687.325 869.007,687.325 869.567,687.325 870.126,687.325 870.685,687.325 871.244,687.325 871.804,687.325 872.363,687.325 872.922,687.325 873.481,687.325 874.041,687.325 874.6,687.325 875.159,687.325 875.718,687.325 876.278,687.325 876.837,687.325 877.396,687.325 877.955,687.325 878.515,687.325 879.074,687.325 879.633,687.325 880.192,687.325 880.752,687.325 881.311,687.325 881.87,687.325 882.429,687.325 882.989,687.325 883.548,687.325 884.107,687.325 884.666,687.325 885.226,687.325 885.785,687.325 886.344,687.325 886.903,687.325 887.463,687.325 888.022,687.325 888.581,687.325 889.14,687.325 889.7,687.325 890.259,687.325 890.818,687.325 891.377,687.325 891.937,687.325 892.496,687.325 893.055,687.325 893.614,687.325 894.174,687.325 894.733,687.325 895.292,687.325 895.851,687.325 896.411,687.325 896.97,687.325 897.529,687.325 898.088,687.325 898.648,687.325 899.207,687.325 899.766,687.325 900.325,687.325 900.885,687.325 901.444,687.325 902.003,687.325 902.562,687.325 903.122,687.325 903.681,687.325 904.24,687.325 904.799,687.325 905.359,687.325 905.918,687.325 906.477,687.325 907.036,687.325 907.596,687.325 908.155,687.325 908.714,687.325 909.273,687.325 909.833,687.325 910.392,687.325 910.951,687.325 911.51,687.325 912.07,687.325 912.629,687.325 913.188,687.325 913.747,687.325 914.307,687.325 914.866,687.325 915.425,687.325 915.984,687.325 916.544,687.325 917.103,687.325 917.662,687.325 918.221,687.325 918.781,687.325 919.34,687.325 919.899,687.325 920.458,687.325 921.018,687.325 921.577,687.325 922.136,687.325 922.695,687.325 923.255,687.325 923.814,687.325 924.373,687.325 924.932,687.325 925.492,687.325 926.051,687.325 926.61,687.325 927.169,687.325 927.729,687.325 928.288,687.325 928.847,687.325 929.406,687.325 929.966,687.325 930.525,687.325 931.084,687.325 931.644,687.325 932.203,687.325 932.762,687.325 933.321,687.325 933.881,687.325 934.44,687.325 934.999,687.325 935.558,687.325 936.118,687.325 936.677,687.325 937.236,687.325 937.795,687.325 938.355,687.325 938.914,687.325 939.473,687.325 940.032,687.325 940.592,687.325 941.151,687.325 941.71,687.325 942.269,687.325 942.829,687.325 943.388,687.325 943.947,687.325 944.506,687.325 945.066,687.325 945.625,687.325 946.184,687.325 946.743,687.325 947.303,687.325 947.862,687.325 948.421,687.325 948.98,687.325 949.54,687.325 950.099,687.325 950.658,687.325 951.217,687.325 951.777,687.325 952.336,687.325 952.895,687.325 953.454,687.325 954.014,687.325 954.573,687.325 955.132,687.325 955.691,687.325 956.251,687.325 956.81,687.325 957.369,687.325 957.928,687.325 958.488,687.325 959.047,687.325 959.606,687.325 960.165,687.325 960.725,687.325 961.284,687.325 961.843,687.325 962.402,687.325 962.962,687.325 963.521,687.325 964.08,687.325 964.639,687.325 965.199,687.325 965.758,687.325 966.317,687.325 966.876,687.325 967.436,687.325 967.995,687.325 968.554,687.325 969.113,687.325 969.673,687.325 970.232,687.325 970.791,687.325 971.35,687.325 971.91,687.325 972.469,687.325 973.028,687.325 973.587,687.325 974.147,687.325 974.706,687.325 975.265,687.325 975.824,687.325 976.384,687.325 976.943,687.325 977.502,687.325 978.061,687.325 978.621,687.325 979.18,687.325 979.739,687.325 980.298,687.325 980.858,687.325 981.417,687.325 981.976,687.325 982.535,687.325 983.095,687.325 983.654,687.325 984.213,687.325 984.772,687.325 985.332,687.325 985.891,687.325 986.45,687.325 987.009,687.325 987.569,687.325 988.128,687.325 988.687,687.325 989.246,687.325 989.806,687.325 990.365,687.325 990.924,687.325 991.483,687.325 992.043,687.325 992.602,687.325 993.161,687.325 993.72,687.325 994.28,687.325 994.839,687.325 995.398,687.325 995.957,687.325 996.517,687.325 997.076,687.325 997.635,687.325 998.194,687.325 998.754,687.325 999.313,687.325 999.872,687.325 1000.43,687.325 1000.99,687.325 1001.55,687.325 1002.11,687.325 1002.67,687.325 1003.23,687.325 1003.79,687.325 1004.35,687.325 1004.91,687.325 1005.46,687.325 1006.02,687.325 1006.58,687.325 1007.14,687.325 1007.7,687.325 1008.26,687.325 1008.82,687.325 1009.38,687.325 1009.94,687.325 1010.5,687.325 1011.06,687.325 1011.62,687.325 1012.18,687.325 1012.73,687.325 1013.29,687.325 1013.85,687.325 1014.41,687.325 1014.97,687.325 1015.53,687.325 1016.09,687.325 1016.65,687.325 1017.21,687.325 1017.77,687.325 1018.33,687.325 1018.89,687.325 1019.45,687.325 1020.01,687.325 1020.56,687.325 1021.12,687.325 1021.68,687.325 1022.24,687.325 1022.8,687.325 1023.36,687.325 1023.92,687.325 1024.48,687.325 1025.04,687.325 1025.6,687.325 1026.16,687.325 1026.72,687.325 1027.28,687.325 1027.83,687.325 1028.39,687.325 1028.95,687.325 1029.51,687.325 1030.07,687.325 1030.63,687.325 1031.19,687.325 1031.75,687.325 1032.31,687.325 1032.87,687.325 1033.43,687.325 1033.99,687.325 1034.55,687.325 1035.1,687.325 1035.66,687.325 1036.22,687.325 1036.78,687.325 1037.34,687.325 1037.9,687.325 1038.46,687.325 1039.02,687.325 1039.58,687.325 1040.14,687.325 1040.7,687.325 1041.26,687.325 1041.82,687.325 1042.38,687.325 1042.93,687.325 1043.49,687.325 1044.05,687.325 1044.61,687.325 1045.17,687.325 1045.73,687.325 1046.29,687.325 1046.85,687.325 1047.41,687.325 1047.97,687.325 1048.53,687.325 1049.09,687.325 1049.65,687.325 1050.2,687.325 1050.76,687.325 1051.32,687.325 1051.88,687.325 1052.44,687.325 1053,687.325 1053.56,687.325 1054.12,687.325 1054.68,687.325 1055.24,687.325 1055.8,687.325 1056.36,687.325 1056.92,687.325 1057.48,687.325 1058.03,687.325 1058.59,687.325 1059.15,687.325 1059.71,687.325 1060.27,687.325 1060.83,687.325 1061.39,687.325 1061.95,687.325 1062.51,687.325 1063.07,687.325 1063.63,687.325 1064.19,687.325 1064.75,687.325 1065.3,687.325 1065.86,687.325 1066.42,687.325 1066.98,687.325 1067.54,687.325 1068.1,687.325 1068.66,687.325 1069.22,687.325 1069.78,687.325 1070.34,687.325 1070.9,687.325 1071.46,687.325 1072.02,687.325 1072.57,687.325 1073.13,687.325 1073.69,687.325 1074.25,687.325 1074.81,687.325 1075.37,687.325 1075.93,687.325 1076.49,687.325 1077.05,687.325 1077.61,687.325 1078.17,687.325 1078.73,687.325 1079.29,687.325 1079.85,687.325 1080.4,687.325 1080.96,687.325 1081.52,687.325 1082.08,687.325 1082.64,687.325 1083.2,687.325 1083.76,687.325 1084.32,687.325 1084.88,687.325 1085.44,687.325 1086,687.325 1086.56,687.325 1087.12,687.325 1087.67,687.325 1088.23,687.325 1088.79,687.325 1089.35,687.325 1089.91,687.325 1090.47,687.325 1091.03,687.325 1091.59,687.325 1092.15,687.325 1092.71,687.325 1093.27,687.325 1093.83,687.325 1094.39,687.325 1094.94,687.325 1095.5,687.325 1096.06,687.325 1096.62,687.325 1097.18,687.325 1097.74,687.325 1098.3,687.325 1098.86,687.325 1099.42,687.325 1099.98,687.325 1100.54,687.325 1101.1,687.325 1101.66,687.325 1102.22,687.325 1102.77,687.325 1103.33,687.325 1103.89,687.325 1104.45,687.325 1105.01,687.325 1105.57,687.325 1106.13,687.325 1106.69,687.325 1107.25,687.325 1107.81,687.325 1108.37,687.325 1108.93,687.325 1109.49,687.325 1110.04,687.325 1110.6,687.325 1111.16,687.325 1111.72,687.325 1112.28,687.325 1112.84,687.325 1113.4,687.325 1113.96,687.325 1114.52,687.325 1115.08,687.325 1115.64,687.325 1116.2,687.325 1116.76,687.325 1117.31,687.325 1117.87,687.325 1118.43,687.325 1118.99,687.325 1119.55,687.325 1120.11,687.325 1120.67,687.325 1121.23,687.325 1121.79,687.325 1122.35,687.325 1122.91,687.325 1123.47,687.325 1124.03,687.325 1124.59,687.325 1125.14,687.325 1125.7,687.325 1126.26,687.325 1126.82,687.325 1127.38,687.325 1127.94,687.325 1128.5,687.325 1129.06,687.325 1129.62,687.325 1130.18,687.325 1130.74,687.325 1131.3,687.325 1131.86,687.325 1132.41,687.325 1132.97,687.325 1133.53,687.325 1134.09,687.325 1134.65,687.325 1135.21,687.325 1135.77,687.325 1136.33,687.325 1136.89,687.325 1137.45,687.325 1138.01,687.325 1138.57,687.325 1139.13,687.325 1139.68,687.325 1140.24,687.325 1140.8,687.325 1141.36,687.325 1141.92,687.325 1142.48,687.325 1143.04,687.325 1143.6,687.325 1144.16,687.325 1144.72,687.325 1145.28,687.325 1145.84,687.325 1146.4,687.325 1146.96,687.325 1147.51,687.325 1148.07,687.325 1148.63,687.325 1149.19,687.325 1149.75,687.325 1150.31,687.325 1150.87,687.325 1151.43,687.325 1151.99,687.325 1152.55,687.325 1153.11,687.325 1153.67,687.325 1154.23,687.325 1154.78,687.325 1155.34,687.325 1155.9,687.325 1156.46,687.325 1157.02,687.325 1157.58,687.325 1158.14,687.325 1158.7,687.325 1159.26,687.325 1159.82,687.325 1160.38,687.325 1160.94,687.325 1161.5,687.325 1162.05,687.325 1162.61,687.325 1163.17,687.325 1163.73,687.325 1164.29,687.325 1164.85,687.325 1165.41,687.325 1165.97,687.325 1166.53,687.325 1167.09,687.325 1167.65,687.325 1168.21,687.325 1168.77,687.325 1169.33,687.325 1169.88,687.325 1170.44,687.325 1171,687.325 1171.56,687.325 1172.12,687.325 1172.68,687.325 1173.24,687.325 1173.8,687.325 1174.36,687.325 1174.92,687.325 1175.48,687.325 1176.04,687.325 1176.6,687.325 1177.15,687.325 1177.71,687.325 1178.27,687.325 1178.83,687.325 1179.39,687.325 1179.95,687.325 1180.51,687.325 1181.07,687.325 1181.63,687.325 1182.19,687.325 1182.75,687.325 1183.31,687.325 1183.87,687.325 1184.43,687.325 1184.98,687.325 1185.54,687.325 1186.1,687.325 1186.66,687.325 1187.22,687.325 1187.78,687.325 1188.34,687.325 1188.9,687.325 1189.46,687.325 1190.02,687.325 1190.58,687.325 1191.14,687.325 1191.7,687.325 1192.25,687.325 1192.81,687.325 1193.37,687.325 1193.93,687.325 1194.49,687.325 1195.05,687.325 1195.61,687.325 1196.17,687.325 1196.73,687.325 1197.29,687.325 1197.85,687.325 1198.41,687.325 1198.97,687.325 1199.52,687.325 1200.08,687.325 1200.64,687.325 1201.2,687.325 1201.76,687.325 1202.32,687.325 1202.88,687.325 1203.44,687.325 1204,687.325 1204.56,687.325 1205.12,687.325 1205.68,687.325 1206.24,687.325 1206.8,687.325 1207.35,687.325 1207.91,687.325 1208.47,687.325 1209.03,687.325 1209.59,687.325 1210.15,687.325 1210.71,687.325 1211.27,687.325 1211.83,687.325 1212.39,687.325 1212.95,687.325 1213.51,687.325 1214.07,687.325 1214.62,687.325 1215.18,687.325 1215.74,687.325 1216.3,687.325 1216.86,687.325 1217.42,687.325 1217.98,687.325 1218.54,687.325 1219.1,687.325 1219.66,687.325 1220.22,687.325 1220.78,687.325 1221.34,687.325 1221.89,687.325 1222.45,687.325 1223.01,687.325 1223.57,687.325 1224.13,687.325 1224.69,687.325 1225.25,687.325 1225.81,687.325 1226.37,687.325 1226.93,687.325 1227.49,687.325 1228.05,687.325 1228.61,687.325 1229.17,687.325 1229.72,687.325 1230.28,687.325 1230.84,687.325 1231.4,687.325 1231.96,687.325 1232.52,687.325 1233.08,687.325 1233.64,687.325 1234.2,687.325 1234.76,687.325 1235.32,687.325 1235.88,687.325 1236.44,687.325 1236.99,687.325 1237.55,687.325 1238.11,687.325 1238.67,687.325 1239.23,687.325 1239.79,687.325 1240.35,687.325 1240.91,687.325 1241.47,687.325 1242.03,687.325 1242.59,687.325 1243.15,687.325 1243.71,687.325 1244.26,687.325 1244.82,687.325 1245.38,687.325 1245.94,687.325 1246.5,687.325 1247.06,687.325 1247.62,687.325 1248.18,687.325 1248.74,687.325 1249.3,687.325 1249.86,687.325 1250.42,687.325 1250.98,687.325 1251.54,687.325 1252.09,687.325 1252.65,687.325 1253.21,687.325 1253.77,687.325 1254.33,687.325 1254.89,687.325 1255.45,687.325 1256.01,687.325 1256.57,687.325 1257.13,687.325 1257.69,687.325 1258.25,687.325 1258.81,687.325 1259.36,687.325 1259.92,687.325 1260.48,687.325 1261.04,687.325 1261.6,687.325 1262.16,687.325 1262.72,687.325 1263.28,687.325 1263.84,687.325 1264.4,687.325 1264.96,687.325 1265.52,687.325 1266.08,687.325 1266.63,687.325 1267.19,687.325 1267.75,687.325 1268.31,687.325 1268.87,687.325 1269.43,687.325 1269.99,687.325 1270.55,687.325 1271.11,687.325 1271.67,687.325 1272.23,687.325 1272.79,687.325 1273.35,687.325 1273.91,687.325 1274.46,687.325 1275.02,687.325 1275.58,687.325 1276.14,687.325 1276.7,687.325 1277.26,687.325 1277.82,687.325 1278.38,687.325 1278.94,687.325 1279.5,687.325 1280.06,687.325 1280.62,687.325 1281.18,687.325 1281.73,687.325 1282.29,687.325 1282.85,687.325 1283.41,687.325 1283.97,687.325 1284.53,687.325 1285.09,687.325 1285.65,687.325 1286.21,687.325 1286.77,687.325 1287.33,687.325 1287.89,687.325 1288.45,687.325 1289,687.325 1289.56,687.325 1290.12,687.325 1290.68,687.325 1291.24,687.325 1291.8,687.325 1292.36,687.325 1292.92,687.325 1293.48,687.325 1294.04,687.325 1294.6,687.325 1295.16,687.325 1295.72,687.325 1296.28,687.325 1296.83,687.325 1297.39,687.325 1297.95,687.325 1298.51,687.325 1299.07,687.325 1299.63,687.325 1300.19,687.325 1300.75,687.325 1301.31,687.325 1301.87,687.325 1302.43,687.325 1302.99,687.325 1303.55,687.325 1304.1,687.325 1304.66,687.325 1305.22,687.325 1305.78,687.325 1306.34,687.325 1306.9,687.325 1307.46,687.325 1308.02,687.325 1308.58,687.325 1309.14,687.325 1309.7,687.325 1310.26,687.325 1310.82,687.325 1311.38,687.325 1311.93,687.325 1312.49,687.325 1313.05,687.325 1313.61,687.325 1314.17,687.325 1314.73,687.325 1315.29,687.325 1315.85,687.325 1316.41,687.325 1316.97,687.325 1317.53,687.325 1318.09,687.325 1318.65,687.325 1319.2,687.325 1319.76,687.325 1320.32,687.325 1320.88,687.325 1321.44,687.325 1322,687.325 1322.56,687.325 1323.12,687.325 1323.68,687.325 1324.24,687.325 1324.8,687.325 1325.36,687.325 1325.92,687.325 1326.47,687.325 1327.03,687.325 1327.59,687.325 1328.15,687.325 1328.71,687.325 1329.27,687.325 1329.83,687.325 1330.39,687.325 1330.95,687.325 1331.51,687.325 1332.07,687.325 1332.63,687.325 1333.19,687.325 1333.75,687.325 1334.3,687.325 1334.86,687.325 1335.42,687.325 1335.98,687.325 1336.54,687.325 1337.1,687.325 1337.66,687.325 1338.22,687.325 1338.78,687.325 1339.34,687.325 1339.9,687.325 1340.46,687.325 1341.02,687.325 1341.57,687.325 1342.13,687.325 1342.69,687.325 1343.25,687.325 1343.81,687.325 1344.37,687.325 1344.93,687.325 1345.49,687.325 1346.05,687.325 1346.61,687.325 1347.17,687.325 1347.73,687.325 1348.29,687.325 1348.84,687.325 1349.4,687.325 1349.96,687.325 1350.52,687.325 1351.08,687.325 1351.64,687.325 1352.2,687.325 1352.76,687.325 1353.32,687.325 1353.88,687.325 1354.44,687.325 1355,687.325 1355.56,687.325 1356.12,687.325 1356.67,687.325 1357.23,687.325 1357.79,687.325 1358.35,687.325 1358.91,687.325 1359.47,687.325 1360.03,687.325 1360.59,687.325 1361.15,687.325 1361.71,687.325 1362.27,687.325 1362.83,687.325 1363.39,687.325 1363.94,687.325 1364.5,687.325 1365.06,687.325 1365.62,687.325 1366.18,687.325 1366.74,687.325 1367.3,687.325 1367.86,687.325 1368.42,687.325 1368.98,687.325 1369.54,687.325 1370.1,687.325 1370.66,687.325 1371.21,687.325 1371.77,687.325 1372.33,687.325 1372.89,687.325 1373.45,687.325 1374.01,687.325 1374.57,687.325 1375.13,687.325 1375.69,687.325 1376.25,687.325 1376.81,687.325 1377.37,687.325 1377.93,687.325 1378.49,687.325 1379.04,687.325 1379.6,687.325 1380.16,687.325 1380.72,687.325 1381.28,687.325 1381.84,687.325 1382.4,687.325 1382.96,687.325 1383.52,687.325 1384.08,687.325 1384.64,687.325 1385.2,687.325 1385.76,687.325 1386.31,687.325 1386.87,687.325 1387.43,687.325 1387.99,687.325 1388.55,687.325 1389.11,687.325 1389.67,687.325 1390.23,687.325 1390.79,687.325 1391.35,687.325 1391.91,687.325 1392.47,687.325 1393.03,687.325 1393.58,687.325 1394.14,687.325 1394.7,687.325 1395.26,687.325 1395.82,687.325 1396.38,687.325 1396.94,687.325 1397.5,687.325 1398.06,687.325 1398.62,687.325 1399.18,687.325 1399.74,687.325 1400.3,687.325 1400.86,687.325 1401.41,687.325 1401.97,687.325 1402.53,687.325 1403.09,687.325 1403.65,687.325 1404.21,687.325 1404.77,687.325 1405.33,687.325 1405.89,687.325 1406.45,687.325 1407.01,687.325 1407.57,687.325 1408.13,687.325 1408.68,687.325 1409.24,687.325 1409.8,687.325 1410.36,687.325 1410.92,687.325 1411.48,687.325 1412.04,687.325 1412.6,687.325 1413.16,687.325 1413.72,687.325 1414.28,687.325 1414.84,687.325 1415.4,687.325 1415.95,687.325 1416.51,687.325 1417.07,687.325 1417.63,687.325 1418.19,687.325 1418.75,687.325 1419.31,687.325 1419.87,687.325 1420.43,687.325 1420.99,687.325 1421.55,687.325 1422.11,687.325 1422.67,687.325 1423.23,687.325 1423.78,687.325 1424.34,687.325 1424.9,687.325 1425.46,687.325 1426.02,687.325 1426.58,687.325 1427.14,687.325 1427.7,687.325 1428.26,687.325 1428.82,687.325 1429.38,687.325 1429.94,687.325 1430.5,687.325 1431.05,687.325 1431.61,687.325 1432.17,687.325 1432.73,687.325 1433.29,687.325 1433.85,687.325 1434.41,687.325 1434.97,687.325 1435.53,687.325 1436.09,687.325 1436.65,687.325 1437.21,687.325 1437.77,687.325 1438.33,687.325 1438.88,687.325 1439.44,687.325 1440,687.325 1440.56,687.325 1441.12,687.325 1441.68,687.325 1442.24,687.325 1442.8,687.325 1443.36,687.325 1443.92,687.325 1444.48,687.325 1445.04,687.325 1445.6,687.325 1446.15,687.325 1446.71,687.325 1447.27,687.325 1447.83,687.325 1448.39,687.325 1448.95,687.325 1449.51,687.325 1450.07,687.325 1450.63,687.325 1451.19,687.325 1451.75,687.325 1452.31,687.325 1452.87,687.325 1453.42,687.325 1453.98,687.325 1454.54,687.325 1455.1,687.325 1455.66,687.325 1456.22,687.325 1456.78,687.325 1457.34,687.325 1457.9,687.325 1458.46,687.325 1459.02,687.325 1459.58,687.325 1460.14,687.325 1460.7,687.325 1461.25,687.325 1461.81,687.325 1462.37,687.325 1462.93,687.325 1463.49,687.325 1464.05,687.325 1464.61,687.325 1465.17,687.325 1465.73,687.325 1466.29,687.325 1466.85,687.325 1467.41,687.325 1467.97,687.325 1468.52,687.325 1469.08,687.325 1469.64,687.325 1470.2,687.325 1470.76,687.325 1471.32,687.325 1471.88,687.325 1472.44,687.325 1473,687.325 1473.56,687.325 1474.12,687.325 1474.68,687.325 1475.24,687.325 1475.79,687.325 1476.35,687.325 1476.91,687.325 1477.47,687.325 1478.03,687.325 1478.59,687.325 1479.15,687.325 1479.71,687.325 1480.27,687.325 1480.83,687.325 1481.39,687.325 1481.95,687.325 1482.51,687.325 1483.07,687.325 1483.62,687.325 1484.18,687.325 1484.74,687.325 1485.3,687.325 1485.86,687.325 1486.42,687.325 1486.98,687.325 1487.54,687.325 1488.1,687.325 1488.66,687.325 1489.22,687.325 1489.78,687.325 1490.34,687.325 1490.89,687.325 1491.45,687.325 1492.01,687.325 1492.57,687.325 1493.13,687.325 1493.69,687.325 1494.25,687.325 1494.81,687.325 1495.37,687.325 1495.93,687.325 1496.49,687.325 1497.05,687.325 1497.61,687.325 1498.16,687.325 1498.72,687.325 1499.28,687.325 1499.84,687.325 1500.4,687.325 1500.96,687.325 1501.52,687.325 1502.08,687.325 1502.64,687.325 1503.2,687.325 1503.76,687.325 1504.32,687.325 1504.88,687.325 1505.44,687.325 1505.99,687.325 1506.55,687.325 1507.11,687.325 1507.67,687.325 1508.23,687.325 1508.79,687.325 1509.35,687.325 1509.91,687.325 1510.47,687.325 1511.03,687.325 1511.59,687.325 1512.15,687.325 1512.71,687.325 1513.26,687.325 1513.82,687.325 1514.38,687.325 1514.94,687.325 1515.5,687.325 1516.06,687.325 1516.62,687.325 1517.18,687.325 1517.74,687.325 1518.3,687.325 1518.86,687.325 1519.42,687.325 1519.98,687.325 1520.53,687.325 1521.09,687.325 1521.65,687.325 1522.21,687.325 1522.77,687.325 1523.33,687.325 1523.89,687.325 1524.45,687.325 1525.01,687.325 1525.57,687.325 1526.13,687.325 1526.69,687.325 1527.25,687.325 1527.81,687.325 1528.36,687.325 1528.92,687.325 1529.48,687.325 1530.04,687.325 1530.6,687.325 1531.16,687.325 1531.72,687.325 1532.28,687.325 1532.84,687.325 1533.4,687.325 1533.96,687.325 1534.52,687.325 1535.08,687.325 1535.63,687.325 1536.19,687.325 1536.75,687.325 1537.31,687.325 1537.87,687.325 1538.43,687.325 1538.99,687.325 1539.55,687.325 1540.11,687.325 1540.67,687.325 1541.23,687.325 1541.79,687.325 1542.35,687.325 1542.9,687.325 1543.46,687.325 1544.02,687.325 1544.58,687.325 1545.14,687.325 1545.7,687.325 1546.26,687.325 1546.82,687.325 1547.38,687.325 1547.94,687.325 1548.5,687.325 1549.06,687.325 1549.62,687.325 1550.18,687.325 1550.73,687.325 1551.29,687.325 1551.85,687.325 1552.41,687.325 1552.97,687.325 1553.53,687.325 1554.09,687.325 1554.65,687.325 1555.21,687.325 1555.77,687.325 1556.33,687.325 1556.89,687.325 1557.45,687.325 1558,687.325 1558.56,687.325 1559.12,687.325 1559.68,687.325 1560.24,687.325 1560.8,687.325 1561.36,687.325 1561.92,687.325 1562.48,687.325 1563.04,687.325 1563.6,687.325 1564.16,687.325 1564.72,687.325 1565.28,687.325 1565.83,687.325 1566.39,687.325 1566.95,687.325 1567.51,687.325 1568.07,687.325 1568.63,687.325 1569.19,687.325 1569.75,687.325 1570.31,687.325 1570.87,687.325 1571.43,687.325 1571.99,687.325 1572.55,687.325 1573.1,687.325 1573.66,687.325 1574.22,687.325 1574.78,687.325 1575.34,687.325 1575.9,687.325 1576.46,687.325 1577.02,687.325 1577.58,687.325 1578.14,687.325 1578.7,687.325 1579.26,687.325 1579.82,687.325 1580.37,687.325 1580.93,687.325 1581.49,687.325 1582.05,687.325 1582.61,687.325 1583.17,687.325 1583.73,687.325 1584.29,687.325 1584.85,687.325 1585.41,687.325 1585.97,687.325 1586.53,687.325 1587.09,687.325 1587.65,687.325 1588.2,687.325 1588.76,687.325 1589.32,687.325 1589.88,687.325 1590.44,687.325 1591,687.325 1591.56,687.325 1592.12,687.325 1592.68,687.325 1593.24,687.325 1593.8,687.325 1594.36,687.325 1594.92,687.325 1595.47,687.325 1596.03,687.325 1596.59,687.325 1597.15,687.325 1597.71,687.325 1598.27,687.325 1598.83,687.325 1599.39,687.325 1599.95,687.325 1600.51,687.325 1601.07,687.325 1601.63,687.325 1602.19,687.325 1602.74,687.325 1603.3,687.325 1603.86,687.325 1604.42,687.325 1604.98,687.325 1605.54,687.325 1606.1,687.325 1606.66,687.325 1607.22,687.325 1607.78,687.325 1608.34,687.325 1608.9,687.325 1609.46,687.325 1610.02,687.325 1610.57,687.325 1611.13,687.325 1611.69,687.325 1612.25,687.325 1612.81,687.325 1613.37,687.325 1613.93,687.325 1614.49,687.325 1615.05,687.325 1615.61,687.325 1616.17,687.325 1616.73,687.325 1617.29,687.325 1617.84,687.325 1618.4,687.325 1618.96,687.325 1619.52,687.325 1620.08,687.325 1620.64,687.325 1621.2,687.325 1621.76,687.325 1622.32,687.325 1622.88,687.325 1623.44,687.325 1624,687.325 1624.56,687.325 1625.11,687.325 1625.67,687.325 1626.23,687.325 1626.79,687.325 1627.35,687.325 1627.91,687.325 1628.47,687.325 1629.03,687.325 1629.59,687.325 1630.15,687.325 1630.71,687.325 1631.27,687.325 1631.83,687.325 1632.39,687.325 1632.94,687.325 1633.5,687.325 1634.06,687.325 1634.62,687.325 1635.18,687.325 1635.74,687.325 1636.3,687.325 1636.86,687.325 1637.42,687.325 1637.98,687.325 1638.54,687.325 1639.1,687.325 1639.66,687.325 1640.21,687.325 1640.77,687.325 1641.33,687.325 1641.89,687.325 1642.45,687.325 1643.01,687.325 1643.57,687.325 1644.13,687.325 1644.69,687.325 1645.25,687.325 1645.81,687.325 1646.37,687.325 1646.93,687.325 1647.48,687.325 1648.04,687.325 1648.6,687.325 1649.16,687.325 1649.72,687.325 1650.28,687.325 1650.84,687.325 1651.4,687.325 1651.96,687.325 1652.52,687.325 1653.08,687.325 1653.64,687.325 1654.2,687.325 1654.76,687.325 1655.31,687.325 1655.87,687.325 1656.43,687.325 1656.99,687.325 1657.55,687.325 1658.11,687.325 1658.67,687.325 1659.23,687.325 1659.79,687.325 1660.35,687.325 1660.91,687.325 1661.47,687.325 1662.03,687.325 1662.58,687.325 1663.14,687.325 1663.7,687.325 1664.26,687.325 1664.82,687.325 1665.38,687.325 1665.94,687.325 1666.5,687.325 1667.06,687.325 1667.62,687.325 1668.18,687.325 1668.74,687.325 1669.3,687.325 1669.85,687.325 1670.41,687.325 1670.97,687.325 1671.53,687.325 1672.09,687.325 1672.65,687.325 1673.21,687.325 1673.77,687.325 1674.33,687.325 1674.89,687.325 1675.45,687.325 1676.01,687.325 1676.57,687.325 1677.13,687.325 1677.68,687.325 1678.24,687.325 1678.8,687.325 1679.36,687.325 1679.92,687.325 1680.48,687.325 1681.04,687.325 1681.6,687.325 1682.16,687.325 1682.72,687.325 1683.28,687.325 1683.84,687.325 1684.4,687.325 1684.95,687.325 1685.51,687.325 1686.07,687.325 1686.63,687.325 1687.19,687.325 1687.75,687.325 1688.31,687.325 1688.87,687.325 1689.43,687.325 1689.99,687.325 1690.55,687.325 1691.11,687.325 1691.67,687.325 1692.23,687.325 1692.78,687.325 1693.34,687.325 1693.9,687.325 1694.46,687.325 1695.02,687.325 1695.58,687.325 1696.14,687.325 1696.7,687.325 1697.26,687.325 1697.82,687.325 1698.38,687.325 1698.94,687.325 1699.5,687.325 1700.05,687.325 1700.61,687.325 1701.17,687.325 1701.73,687.325 1702.29,687.325 1702.85,687.325 1703.41,687.325 1703.97,687.325 1704.53,687.325 1705.09,687.325 1705.65,687.325 1706.21,687.325 1706.77,687.325 1707.32,687.325 1707.88,687.325 1708.44,687.325 1709,687.325 1709.56,687.325 1710.12,687.325 1710.68,687.325 1711.24,687.325 1711.8,687.325 1712.36,687.325 1712.92,687.325 1713.48,687.325 1714.04,687.325 1714.6,687.325 1715.15,687.325 1715.71,687.325 1716.27,687.325 1716.83,687.325 1717.39,687.325 1717.95,687.325 1718.51,687.325 1719.07,687.325 1719.63,687.325 1720.19,687.325 1720.75,687.325 1721.31,687.325 1721.87,687.325 1722.42,687.325 1722.98,687.325 1723.54,687.325 1724.1,687.325 1724.66,687.325 1725.22,687.325 1725.78,687.325 1726.34,687.325 1726.9,687.325 1727.46,687.325 1728.02,687.325 1728.58,687.325 1729.14,687.325 1729.69,687.325 1730.25,687.325 1730.81,687.325 1731.37,687.325 1731.93,687.325 1732.49,687.325 1733.05,687.325 1733.61,687.325 1734.17,687.325 1734.73,687.325 1735.29,687.325 1735.85,687.325 1736.41,687.325 1736.97,687.325 1737.52,687.325 1738.08,687.325 1738.64,687.325 1739.2,687.325 1739.76,687.325 1740.32,687.325 1740.88,687.325 1741.44,687.325 1742,687.325 1742.56,687.325 1743.12,687.325 1743.68,687.325 1744.24,687.325 1744.79,687.325 1745.35,687.325 1745.91,687.325 1746.47,687.325 1747.03,687.325 1747.59,687.325 1748.15,687.325 1748.71,687.325 1749.27,687.325 1749.83,687.325 1750.39,687.325 1750.95,687.325 1751.51,687.325 1752.06,687.325 1752.62,687.325 1753.18,687.325 1753.74,687.325 1754.3,687.325 1754.86,687.325 1755.42,687.325 1755.98,687.325 1756.54,687.325 1757.1,687.325 1757.66,687.325 1758.22,687.325 1758.78,687.325 1759.34,687.325 1759.89,687.325 1760.45,687.325 1761.01,687.325 1761.57,687.325 1762.13,687.325 1762.69,687.325 1763.25,687.325 1763.81,687.325 1764.37,687.325 1764.93,687.325 1765.49,687.325 1766.05,687.325 1766.61,687.325 1767.16,687.325 1767.72,687.325 1768.28,687.325 1768.84,687.325 1769.4,687.325 1769.96,687.325 1770.52,687.325 1771.08,687.325 1771.64,687.325 1772.2,687.325 1772.76,687.325 1773.32,687.325 1773.88,687.325 1774.43,687.325 1774.99,687.325 1775.55,687.325 1776.11,687.325 1776.67,687.325 1777.23,687.325 1777.79,687.325 1778.35,687.325 1778.91,687.325 1779.47,687.325 1780.03,687.325 1780.59,687.325 1781.15,687.325 1781.71,687.325 1782.26,687.325 1782.82,687.325 1783.38,687.325 1783.94,687.325 1784.5,687.325 1785.06,687.325 1785.62,687.325 1786.18,687.325 1786.74,687.325 1787.3,687.325 1787.86,687.325 1788.42,687.325 1788.98,687.325 1789.53,687.325 1790.09,687.325 1790.65,687.325 1791.21,687.325 1791.77,687.325 1792.33,687.325 1792.89,687.325 1793.45,687.325 1794.01,687.325 1794.57,687.325 1795.13,687.325 1795.69,687.325 1796.25,687.325 1796.8,687.325 1797.36,687.325 1797.92,687.325 1798.48,687.325 1799.04,687.325 1799.6,687.325 1800.16,687.325 1800.72,687.325 1801.28,687.325 1801.84,687.325 1802.4,687.325 1802.96,687.325 1803.52,687.325 1804.08,687.325 1804.63,687.325 1805.19,687.325 1805.75,687.325 1806.31,687.325 1806.87,687.325 1807.43,687.325 1807.99,687.325 1808.55,687.325 1809.11,687.325 1809.67,687.325 1810.23,687.325 1810.79,687.325 1811.35,687.325 1811.9,687.325 1812.46,687.325 1813.02,687.325 1813.58,687.325 1814.14,687.325 1814.7,687.325 1815.26,687.325 1815.82,687.325 1816.38,687.325 1816.94,687.325 1817.5,687.325 1818.06,687.325 1818.62,687.325 1819.18,687.325 1819.73,687.325 1820.29,687.325 1820.85,687.325 1821.41,687.325 1821.97,687.325 1822.53,687.325 1823.09,687.325 1823.65,687.325 1824.21,687.325 1824.77,687.325 1825.33,687.325 1825.89,687.325 1826.45,687.325 1827,687.325 1827.56,687.325 1828.12,687.325 1828.68,687.325 1829.24,687.325 1829.8,687.325 1830.36,687.325 1830.92,687.325 1831.48,687.325 1832.04,687.325 1832.6,687.325 1833.16,687.325 1833.72,687.325 1834.27,687.325 1834.83,687.325 1835.39,687.325 1835.95,687.325 1836.51,687.325 1837.07,687.325 1837.63,687.325 1838.19,687.325 \"/>\n<path clip-path=\"url(#clip883)\" d=\"M720.247 684.856 L720.806 684.856 L721.365 684.856 L721.924 684.856 L722.484 684.856 L723.043 684.856 L723.602 684.856 L724.161 684.856 L724.721 684.856 L725.28 684.856 L725.839 684.856 L726.398 684.856 L726.958 684.856 L727.517 684.856 L728.076 684.856 L728.635 684.856 L729.195 684.856 L729.754 684.856 L730.313 684.856 L730.872 684.856 L731.432 684.856 L731.991 684.856 L732.55 684.856 L733.109 684.856 L733.669 684.856 L734.228 684.856 L734.787 684.856 L735.346 684.856 L735.906 684.856 L736.465 684.856 L737.024 684.856 L737.583 684.856 L738.143 684.856 L738.702 684.856 L739.261 684.856 L739.82 684.856 L740.38 684.856 L740.939 684.856 L741.498 684.856 L742.057 684.856 L742.617 684.856 L743.176 684.856 L743.735 684.856 L744.294 684.856 L744.854 684.856 L745.413 684.856 L745.972 684.856 L746.531 684.856 L747.091 684.856 L747.65 684.856 L748.209 684.856 L748.768 684.856 L749.328 684.856 L749.887 684.856 L750.446 684.856 L751.005 684.856 L751.565 684.856 L752.124 684.856 L752.683 684.856 L753.242 684.856 L753.802 684.856 L754.361 684.856 L754.92 684.856 L755.479 684.856 L756.039 684.856 L756.598 684.856 L757.157 684.856 L757.716 684.856 L758.276 684.856 L758.835 684.856 L759.394 684.856 L759.953 684.856 L760.513 684.856 L761.072 684.856 L761.631 684.856 L762.19 684.856 L762.75 684.856 L763.309 684.856 L763.868 684.856 L764.427 684.856 L764.987 684.856 L765.546 684.856 L766.105 684.856 L766.664 684.856 L767.224 684.856 L767.783 684.856 L768.342 684.856 L768.901 684.856 L769.461 684.856 L770.02 684.856 L770.579 684.856 L771.138 684.856 L771.698 684.856 L772.257 684.856 L772.816 684.856 L773.375 684.856 L773.935 684.856 L774.494 684.856 L775.053 684.856 L775.612 684.856 L776.172 684.856 L776.731 684.856 L777.29 684.856 L777.849 684.856 L778.409 684.856 L778.968 684.856 L779.527 684.856 L780.086 684.856 L780.646 684.856 L781.205 684.856 L781.764 684.856 L782.323 684.856 L782.883 684.856 L783.442 684.856 L784.001 684.856 L784.56 684.856 L785.12 684.856 L785.679 684.856 L786.238 684.856 L786.797 684.856 L787.357 684.856 L787.916 684.856 L788.475 684.856 L789.034 684.856 L789.594 684.856 L790.153 684.856 L790.712 684.856 L791.271 684.856 L791.831 684.856 L792.39 684.856 L792.949 684.856 L793.508 684.856 L794.068 684.856 L794.627 684.856 L795.186 684.856 L795.745 684.856 L796.305 684.856 L796.864 684.856 L797.423 684.856 L797.982 684.856 L798.542 684.856 L799.101 684.856 L799.66 684.856 L800.219 684.856 L800.779 684.856 L801.338 684.856 L801.897 684.856 L802.456 684.856 L803.016 684.856 L803.575 684.856 L804.134 684.856 L804.693 684.856 L805.253 684.856 L805.812 684.856 L806.371 684.856 L806.931 684.856 L807.49 684.856 L808.049 684.856 L808.608 684.856 L809.168 684.856 L809.727 684.856 L810.286 684.856 L810.845 684.856 L811.405 684.856 L811.964 684.856 L812.523 684.856 L813.082 684.856 L813.642 684.856 L814.201 684.856 L814.76 684.856 L815.319 684.856 L815.879 684.856 L816.438 684.856 L816.997 684.856 L817.556 684.856 L818.116 684.856 L818.675 684.856 L819.234 684.856 L819.793 684.856 L820.353 684.856 L820.912 684.856 L821.471 684.856 L822.03 684.856 L822.59 684.856 L823.149 684.856 L823.708 684.856 L824.267 684.856 L824.827 684.856 L825.386 684.856 L825.945 684.856 L826.504 684.856 L827.064 684.856 L827.623 684.856 L828.182 684.856 L828.741 684.856 L829.301 684.856 L829.86 684.856 L830.419 684.856 L830.978 684.856 L831.538 684.856 L832.097 684.856 L832.656 684.856 L833.215 684.856 L833.775 684.856 L834.334 684.856 L834.893 684.856 L835.452 684.856 L836.012 684.856 L836.571 684.856 L837.13 684.856 L837.689 684.856 L838.249 684.856 L838.808 684.856 L839.367 684.856 L839.926 684.856 L840.486 684.856 L841.045 684.856 L841.604 684.856 L842.163 684.856 L842.723 684.856 L843.282 684.856 L843.841 684.856 L844.4 684.856 L844.96 684.856 L845.519 684.856 L846.078 684.856 L846.637 684.856 L847.197 684.856 L847.756 684.856 L848.315 684.856 L848.874 684.856 L849.434 684.856 L849.993 684.856 L850.552 684.856 L851.111 684.856 L851.671 684.856 L852.23 684.856 L852.789 684.856 L853.348 684.856 L853.908 684.856 L854.467 684.856 L855.026 684.856 L855.585 684.856 L856.145 684.856 L856.704 684.856 L857.263 684.856 L857.822 684.856 L858.382 684.856 L858.941 684.856 L859.5 684.856 L860.059 684.856 L860.619 684.856 L861.178 684.856 L861.737 684.856 L862.296 684.856 L862.856 684.856 L863.415 684.856 L863.974 684.856 L864.533 684.856 L865.093 684.856 L865.652 684.856 L866.211 684.856 L866.77 684.856 L867.33 684.856 L867.889 684.856 L868.448 684.856 L869.007 684.856 L869.567 684.856 L870.126 684.856 L870.685 684.856 L871.244 684.856 L871.804 684.856 L872.363 684.856 L872.922 684.856 L873.481 684.856 L874.041 684.856 L874.6 684.856 L875.159 684.856 L875.718 684.856 L876.278 684.856 L876.837 684.856 L877.396 684.856 L877.955 684.856 L878.515 684.856 L879.074 684.856 L879.633 684.856 L880.192 684.856 L880.752 684.856 L881.311 684.856 L881.87 684.856 L882.429 684.856 L882.989 684.856 L883.548 684.856 L884.107 684.856 L884.666 684.856 L885.226 684.856 L885.785 684.856 L886.344 684.856 L886.903 684.856 L887.463 684.856 L888.022 684.856 L888.581 684.856 L889.14 684.856 L889.7 684.856 L890.259 684.856 L890.818 684.856 L891.377 684.856 L891.937 684.856 L892.496 684.856 L893.055 684.856 L893.614 684.856 L894.174 684.856 L894.733 684.856 L895.292 684.856 L895.851 684.856 L896.411 684.856 L896.97 684.856 L897.529 684.856 L898.088 684.856 L898.648 684.856 L899.207 684.856 L899.766 684.856 L900.325 684.856 L900.885 684.856 L901.444 684.856 L902.003 684.856 L902.562 684.856 L903.122 684.856 L903.681 684.856 L904.24 684.856 L904.799 684.856 L905.359 684.856 L905.918 684.856 L906.477 684.856 L907.036 684.856 L907.596 684.856 L908.155 684.856 L908.714 684.856 L909.273 684.856 L909.833 684.856 L910.392 684.856 L910.951 684.856 L911.51 684.856 L912.07 684.856 L912.629 684.856 L913.188 684.856 L913.747 684.856 L914.307 684.856 L914.866 684.856 L915.425 684.856 L915.984 684.856 L916.544 684.856 L917.103 684.856 L917.662 684.856 L918.221 684.856 L918.781 684.856 L919.34 684.856 L919.899 684.856 L920.458 684.856 L921.018 684.856 L921.577 684.856 L922.136 684.856 L922.695 684.856 L923.255 684.856 L923.814 684.856 L924.373 684.856 L924.932 684.856 L925.492 684.856 L926.051 684.856 L926.61 684.856 L927.169 684.856 L927.729 684.856 L928.288 684.856 L928.847 684.856 L929.406 684.856 L929.966 684.856 L930.525 684.856 L931.084 684.856 L931.644 684.856 L932.203 684.856 L932.762 684.856 L933.321 684.856 L933.881 684.856 L934.44 684.856 L934.999 684.856 L935.558 684.856 L936.118 684.856 L936.677 684.856 L937.236 684.856 L937.795 684.856 L938.355 684.856 L938.914 684.856 L939.473 684.856 L940.032 684.856 L940.592 684.856 L941.151 684.856 L941.71 684.856 L942.269 684.856 L942.829 684.856 L943.388 684.856 L943.947 684.856 L944.506 684.856 L945.066 684.856 L945.625 684.856 L946.184 684.856 L946.743 684.856 L947.303 684.856 L947.862 684.856 L948.421 684.856 L948.98 684.856 L949.54 684.856 L950.099 684.856 L950.658 684.856 L951.217 684.856 L951.777 684.856 L952.336 684.856 L952.895 684.856 L953.454 684.856 L954.014 684.856 L954.573 684.856 L955.132 684.856 L955.691 684.856 L956.251 684.856 L956.81 684.856 L957.369 684.856 L957.928 684.856 L958.488 684.856 L959.047 684.856 L959.606 684.856 L960.165 684.856 L960.725 684.856 L961.284 684.856 L961.843 684.856 L962.402 684.856 L962.962 684.856 L963.521 684.856 L964.08 684.856 L964.639 684.856 L965.199 684.856 L965.758 684.856 L966.317 684.856 L966.876 684.856 L967.436 684.856 L967.995 684.856 L968.554 684.856 L969.113 684.856 L969.673 684.856 L970.232 684.856 L970.791 684.856 L971.35 684.856 L971.91 684.856 L972.469 684.856 L973.028 684.856 L973.587 684.856 L974.147 684.856 L974.706 684.856 L975.265 684.856 L975.824 684.856 L976.384 684.856 L976.943 684.856 L977.502 684.856 L978.061 684.856 L978.621 684.856 L979.18 684.856 L979.739 684.856 L980.298 684.856 L980.858 684.856 L981.417 684.856 L981.976 684.856 L982.535 684.856 L983.095 684.856 L983.654 684.856 L984.213 684.856 L984.772 684.856 L985.332 684.856 L985.891 684.856 L986.45 684.856 L987.009 684.856 L987.569 684.856 L988.128 684.856 L988.687 684.856 L989.246 684.856 L989.806 684.856 L990.365 684.856 L990.924 684.856 L991.483 684.856 L992.043 684.856 L992.602 684.856 L993.161 684.856 L993.72 684.856 L994.28 684.856 L994.839 684.856 L995.398 684.856 L995.957 684.856 L996.517 684.856 L997.076 684.856 L997.635 684.856 L998.194 684.856 L998.754 684.856 L999.313 684.856 L999.872 684.856 L1000.43 684.856 L1000.99 684.856 L1001.55 684.856 L1002.11 684.856 L1002.67 684.856 L1003.23 684.856 L1003.79 684.856 L1004.35 684.856 L1004.91 684.856 L1005.46 684.856 L1006.02 684.856 L1006.58 684.856 L1007.14 684.856 L1007.7 684.856 L1008.26 684.856 L1008.82 684.856 L1009.38 684.856 L1009.94 684.856 L1010.5 684.856 L1011.06 684.856 L1011.62 684.856 L1012.18 684.856 L1012.73 684.856 L1013.29 684.856 L1013.85 684.856 L1014.41 684.856 L1014.97 684.856 L1015.53 684.856 L1016.09 684.856 L1016.65 684.856 L1017.21 684.856 L1017.77 684.856 L1018.33 684.856 L1018.89 684.856 L1019.45 684.856 L1020.01 684.856 L1020.56 684.856 L1021.12 684.856 L1021.68 684.856 L1022.24 684.856 L1022.8 684.856 L1023.36 684.856 L1023.92 684.856 L1024.48 684.856 L1025.04 684.856 L1025.6 684.856 L1026.16 684.856 L1026.72 684.856 L1027.28 684.856 L1027.83 684.856 L1028.39 684.856 L1028.95 684.856 L1029.51 684.856 L1030.07 684.856 L1030.63 684.856 L1031.19 684.856 L1031.75 684.856 L1032.31 684.856 L1032.87 684.856 L1033.43 684.856 L1033.99 684.856 L1034.55 684.856 L1035.1 684.856 L1035.66 684.856 L1036.22 684.856 L1036.78 684.856 L1037.34 684.856 L1037.9 684.856 L1038.46 684.856 L1039.02 684.856 L1039.58 684.856 L1040.14 684.856 L1040.7 684.856 L1041.26 684.856 L1041.82 684.856 L1042.38 684.856 L1042.93 684.856 L1043.49 684.856 L1044.05 684.856 L1044.61 684.856 L1045.17 684.856 L1045.73 684.856 L1046.29 684.856 L1046.85 684.856 L1047.41 684.856 L1047.97 684.856 L1048.53 684.856 L1049.09 684.856 L1049.65 684.856 L1050.2 684.856 L1050.76 684.856 L1051.32 684.856 L1051.88 684.856 L1052.44 684.856 L1053 684.856 L1053.56 684.856 L1054.12 684.856 L1054.68 684.856 L1055.24 684.856 L1055.8 684.856 L1056.36 684.856 L1056.92 684.856 L1057.48 684.856 L1058.03 684.856 L1058.59 684.856 L1059.15 684.856 L1059.71 684.856 L1060.27 684.856 L1060.83 684.856 L1061.39 684.856 L1061.95 684.856 L1062.51 684.856 L1063.07 684.856 L1063.63 684.856 L1064.19 684.856 L1064.75 684.856 L1065.3 684.856 L1065.86 684.856 L1066.42 684.856 L1066.98 684.856 L1067.54 684.856 L1068.1 684.856 L1068.66 684.856 L1069.22 684.856 L1069.78 684.856 L1070.34 684.856 L1070.9 684.856 L1071.46 684.856 L1072.02 684.856 L1072.57 684.856 L1073.13 684.856 L1073.69 684.856 L1074.25 684.856 L1074.81 684.856 L1075.37 684.856 L1075.93 684.856 L1076.49 684.856 L1077.05 684.856 L1077.61 684.856 L1078.17 684.856 L1078.73 684.856 L1079.29 684.856 L1079.85 684.856 L1080.4 684.856 L1080.96 684.856 L1081.52 684.856 L1082.08 684.856 L1082.64 684.856 L1083.2 684.856 L1083.76 684.856 L1084.32 684.856 L1084.88 684.856 L1085.44 684.856 L1086 684.856 L1086.56 684.856 L1087.12 684.856 L1087.67 684.856 L1088.23 684.856 L1088.79 684.856 L1089.35 684.856 L1089.91 684.856 L1090.47 684.856 L1091.03 684.856 L1091.59 684.856 L1092.15 684.856 L1092.71 684.856 L1093.27 684.856 L1093.83 684.856 L1094.39 684.856 L1094.94 684.856 L1095.5 684.856 L1096.06 684.856 L1096.62 684.856 L1097.18 684.856 L1097.74 684.856 L1098.3 684.856 L1098.86 684.856 L1099.42 684.856 L1099.98 684.856 L1100.54 684.856 L1101.1 684.856 L1101.66 684.856 L1102.22 684.856 L1102.77 684.856 L1103.33 684.856 L1103.89 684.856 L1104.45 684.856 L1105.01 684.856 L1105.57 684.856 L1106.13 684.856 L1106.69 684.856 L1107.25 684.856 L1107.81 684.856 L1108.37 684.856 L1108.93 684.856 L1109.49 684.856 L1110.04 684.856 L1110.6 684.856 L1111.16 684.856 L1111.72 684.856 L1112.28 684.856 L1112.84 684.856 L1113.4 684.856 L1113.96 684.856 L1114.52 684.856 L1115.08 684.856 L1115.64 684.856 L1116.2 684.856 L1116.76 684.856 L1117.31 684.856 L1117.87 684.856 L1118.43 684.856 L1118.99 684.856 L1119.55 684.856 L1120.11 684.856 L1120.67 684.856 L1121.23 684.856 L1121.79 684.856 L1122.35 684.856 L1122.91 684.856 L1123.47 684.856 L1124.03 684.856 L1124.59 684.856 L1125.14 684.856 L1125.7 684.856 L1126.26 684.856 L1126.82 684.856 L1127.38 684.856 L1127.94 684.856 L1128.5 684.856 L1129.06 684.856 L1129.62 684.856 L1130.18 684.856 L1130.74 684.856 L1131.3 684.856 L1131.86 684.856 L1132.41 684.856 L1132.97 684.856 L1133.53 684.856 L1134.09 684.856 L1134.65 684.856 L1135.21 684.856 L1135.77 684.856 L1136.33 684.856 L1136.89 684.856 L1137.45 684.856 L1138.01 684.856 L1138.57 684.856 L1139.13 684.856 L1139.68 684.856 L1140.24 684.856 L1140.8 684.856 L1141.36 684.856 L1141.92 684.856 L1142.48 684.856 L1143.04 684.856 L1143.6 684.856 L1144.16 684.856 L1144.72 684.856 L1145.28 684.856 L1145.84 684.856 L1146.4 684.856 L1146.96 684.856 L1147.51 684.856 L1148.07 684.856 L1148.63 684.856 L1149.19 684.856 L1149.75 684.856 L1150.31 684.856 L1150.87 684.856 L1151.43 684.856 L1151.99 684.856 L1152.55 684.856 L1153.11 684.856 L1153.67 684.856 L1154.23 684.856 L1154.78 684.856 L1155.34 684.856 L1155.9 684.856 L1156.46 684.856 L1157.02 684.856 L1157.58 684.856 L1158.14 684.856 L1158.7 684.856 L1159.26 684.856 L1159.82 684.856 L1160.38 684.856 L1160.94 684.856 L1161.5 684.856 L1162.05 684.856 L1162.61 684.856 L1163.17 684.856 L1163.73 684.856 L1164.29 684.856 L1164.85 684.856 L1165.41 684.856 L1165.97 684.856 L1166.53 684.856 L1167.09 684.856 L1167.65 684.856 L1168.21 684.856 L1168.77 684.856 L1169.33 684.856 L1169.88 684.856 L1170.44 684.856 L1171 684.856 L1171.56 684.856 L1172.12 684.856 L1172.68 684.856 L1173.24 684.856 L1173.8 684.856 L1174.36 684.856 L1174.92 684.856 L1175.48 684.856 L1176.04 684.856 L1176.6 684.856 L1177.15 684.856 L1177.71 684.856 L1178.27 684.856 L1178.83 684.856 L1179.39 684.856 L1179.95 684.856 L1180.51 684.856 L1181.07 684.856 L1181.63 684.856 L1182.19 684.856 L1182.75 684.856 L1183.31 684.856 L1183.87 684.856 L1184.43 684.856 L1184.98 684.856 L1185.54 684.856 L1186.1 684.856 L1186.66 684.856 L1187.22 684.856 L1187.78 684.856 L1188.34 684.856 L1188.9 684.856 L1189.46 684.856 L1190.02 684.856 L1190.58 684.856 L1191.14 684.856 L1191.7 684.856 L1192.25 684.856 L1192.81 684.856 L1193.37 684.856 L1193.93 684.856 L1194.49 684.856 L1195.05 684.856 L1195.61 684.856 L1196.17 684.856 L1196.73 684.856 L1197.29 684.856 L1197.85 684.856 L1198.41 684.856 L1198.97 684.856 L1199.52 684.856 L1200.08 684.856 L1200.64 684.856 L1201.2 684.856 L1201.76 684.856 L1202.32 684.856 L1202.88 684.856 L1203.44 684.856 L1204 684.856 L1204.56 684.856 L1205.12 684.856 L1205.68 684.856 L1206.24 684.856 L1206.8 684.856 L1207.35 684.856 L1207.91 684.856 L1208.47 684.856 L1209.03 684.856 L1209.59 684.856 L1210.15 684.856 L1210.71 684.856 L1211.27 684.856 L1211.83 684.856 L1212.39 684.856 L1212.95 684.856 L1213.51 684.856 L1214.07 684.856 L1214.62 684.856 L1215.18 684.856 L1215.74 684.856 L1216.3 684.856 L1216.86 684.856 L1217.42 684.856 L1217.98 684.856 L1218.54 684.856 L1219.1 684.856 L1219.66 684.856 L1220.22 684.856 L1220.78 684.856 L1221.34 684.856 L1221.89 684.856 L1222.45 684.856 L1223.01 684.856 L1223.57 684.856 L1224.13 684.856 L1224.69 684.856 L1225.25 684.856 L1225.81 684.856 L1226.37 684.856 L1226.93 684.856 L1227.49 684.856 L1228.05 684.856 L1228.61 684.856 L1229.17 684.856 L1229.72 684.856 L1230.28 684.856 L1230.84 684.856 L1231.4 684.856 L1231.96 684.856 L1232.52 684.856 L1233.08 684.856 L1233.64 684.856 L1234.2 684.856 L1234.76 684.856 L1235.32 684.856 L1235.88 684.856 L1236.44 684.856 L1236.99 684.856 L1237.55 684.856 L1238.11 684.856 L1238.67 684.856 L1239.23 684.856 L1239.79 684.856 L1240.35 684.856 L1240.91 684.856 L1241.47 684.856 L1242.03 684.856 L1242.59 684.856 L1243.15 684.856 L1243.71 684.856 L1244.26 684.856 L1244.82 684.856 L1245.38 684.856 L1245.94 684.856 L1246.5 684.856 L1247.06 684.856 L1247.62 684.856 L1248.18 684.856 L1248.74 684.856 L1249.3 684.856 L1249.86 684.856 L1250.42 684.856 L1250.98 684.856 L1251.54 684.856 L1252.09 684.856 L1252.65 684.856 L1253.21 684.856 L1253.77 684.856 L1254.33 684.856 L1254.89 684.856 L1255.45 684.856 L1256.01 684.856 L1256.57 684.856 L1257.13 684.856 L1257.69 684.856 L1258.25 684.856 L1258.81 684.856 L1259.36 684.856 L1259.92 684.856 L1260.48 684.856 L1261.04 684.856 L1261.6 684.856 L1262.16 684.856 L1262.72 684.856 L1263.28 684.856 L1263.84 684.856 L1264.4 684.856 L1264.96 684.856 L1265.52 684.856 L1266.08 684.856 L1266.63 684.856 L1267.19 684.856 L1267.75 684.856 L1268.31 684.856 L1268.87 684.856 L1269.43 684.856 L1269.99 684.856 L1270.55 684.856 L1271.11 684.856 L1271.67 684.856 L1272.23 684.856 L1272.79 684.856 L1273.35 684.856 L1273.91 684.856 L1274.46 684.856 L1275.02 684.856 L1275.58 684.856 L1276.14 684.856 L1276.7 684.856 L1277.26 684.856 L1277.82 684.856 L1278.38 684.856 L1278.94 684.856 L1279.5 684.856 L1280.06 684.856 L1280.62 684.856 L1281.18 684.856 L1281.73 684.856 L1282.29 684.856 L1282.85 684.856 L1283.41 684.856 L1283.97 684.856 L1284.53 684.856 L1285.09 684.856 L1285.65 684.856 L1286.21 684.856 L1286.77 684.856 L1287.33 684.856 L1287.89 684.856 L1288.45 684.856 L1289 684.856 L1289.56 684.856 L1290.12 684.856 L1290.68 684.856 L1291.24 684.856 L1291.8 684.856 L1292.36 684.856 L1292.92 684.856 L1293.48 684.856 L1294.04 684.856 L1294.6 684.856 L1295.16 684.856 L1295.72 684.856 L1296.28 684.856 L1296.83 684.856 L1297.39 684.856 L1297.95 684.856 L1298.51 684.856 L1299.07 684.856 L1299.63 684.856 L1300.19 684.856 L1300.75 684.856 L1301.31 684.856 L1301.87 684.856 L1302.43 684.856 L1302.99 684.856 L1303.55 684.856 L1304.1 684.856 L1304.66 684.856 L1305.22 684.856 L1305.78 684.856 L1306.34 684.856 L1306.9 684.856 L1307.46 684.856 L1308.02 684.856 L1308.58 684.856 L1309.14 684.856 L1309.7 684.856 L1310.26 684.856 L1310.82 684.856 L1311.38 684.856 L1311.93 684.856 L1312.49 684.856 L1313.05 684.856 L1313.61 684.856 L1314.17 684.856 L1314.73 684.856 L1315.29 684.856 L1315.85 684.856 L1316.41 684.856 L1316.97 684.856 L1317.53 684.856 L1318.09 684.856 L1318.65 684.856 L1319.2 684.856 L1319.76 684.856 L1320.32 684.856 L1320.88 684.856 L1321.44 684.856 L1322 684.856 L1322.56 684.856 L1323.12 684.856 L1323.68 684.856 L1324.24 684.856 L1324.8 684.856 L1325.36 684.856 L1325.92 684.856 L1326.47 684.856 L1327.03 684.856 L1327.59 684.856 L1328.15 684.856 L1328.71 684.856 L1329.27 684.856 L1329.83 684.856 L1330.39 684.856 L1330.95 684.856 L1331.51 684.856 L1332.07 684.856 L1332.63 684.856 L1333.19 684.856 L1333.75 684.856 L1334.3 684.856 L1334.86 684.856 L1335.42 684.856 L1335.98 684.856 L1336.54 684.856 L1337.1 684.856 L1337.66 684.856 L1338.22 684.856 L1338.78 684.856 L1339.34 684.856 L1339.9 684.856 L1340.46 684.856 L1341.02 684.856 L1341.57 684.856 L1342.13 684.856 L1342.69 684.856 L1343.25 684.856 L1343.81 684.856 L1344.37 684.856 L1344.93 684.856 L1345.49 684.856 L1346.05 684.856 L1346.61 684.856 L1347.17 684.856 L1347.73 684.856 L1348.29 684.856 L1348.84 684.856 L1349.4 684.856 L1349.96 684.856 L1350.52 684.856 L1351.08 684.856 L1351.64 684.856 L1352.2 684.856 L1352.76 684.856 L1353.32 684.856 L1353.88 684.856 L1354.44 684.856 L1355 684.856 L1355.56 684.856 L1356.12 684.856 L1356.67 684.856 L1357.23 684.856 L1357.79 684.856 L1358.35 684.856 L1358.91 684.856 L1359.47 684.856 L1360.03 684.856 L1360.59 684.856 L1361.15 684.856 L1361.71 684.856 L1362.27 684.856 L1362.83 684.856 L1363.39 684.856 L1363.94 684.856 L1364.5 684.856 L1365.06 684.856 L1365.62 684.856 L1366.18 684.856 L1366.74 684.856 L1367.3 684.856 L1367.86 684.856 L1368.42 684.856 L1368.98 684.856 L1369.54 684.856 L1370.1 684.856 L1370.66 684.856 L1371.21 684.856 L1371.77 684.856 L1372.33 684.856 L1372.89 684.856 L1373.45 684.856 L1374.01 684.856 L1374.57 684.856 L1375.13 684.856 L1375.69 684.856 L1376.25 684.856 L1376.81 684.856 L1377.37 684.856 L1377.93 684.856 L1378.49 684.856 L1379.04 684.856 L1379.6 684.856 L1380.16 684.856 L1380.72 684.856 L1381.28 684.856 L1381.84 684.856 L1382.4 684.856 L1382.96 684.856 L1383.52 684.856 L1384.08 684.856 L1384.64 684.856 L1385.2 684.856 L1385.76 684.856 L1386.31 684.856 L1386.87 684.856 L1387.43 684.856 L1387.99 684.856 L1388.55 684.856 L1389.11 684.856 L1389.67 684.856 L1390.23 684.856 L1390.79 684.856 L1391.35 684.856 L1391.91 684.856 L1392.47 684.856 L1393.03 684.856 L1393.58 684.856 L1394.14 684.856 L1394.7 684.856 L1395.26 684.856 L1395.82 684.856 L1396.38 684.856 L1396.94 684.856 L1397.5 684.856 L1398.06 684.856 L1398.62 684.856 L1399.18 684.856 L1399.74 684.856 L1400.3 684.856 L1400.86 684.856 L1401.41 684.856 L1401.97 684.856 L1402.53 684.856 L1403.09 684.856 L1403.65 684.856 L1404.21 684.856 L1404.77 684.856 L1405.33 684.856 L1405.89 684.856 L1406.45 684.856 L1407.01 684.856 L1407.57 684.856 L1408.13 684.856 L1408.68 684.856 L1409.24 684.856 L1409.8 684.856 L1410.36 684.856 L1410.92 684.856 L1411.48 684.856 L1412.04 684.856 L1412.6 684.856 L1413.16 684.856 L1413.72 684.856 L1414.28 684.856 L1414.84 684.856 L1415.4 684.856 L1415.95 684.856 L1416.51 684.856 L1417.07 684.856 L1417.63 684.856 L1418.19 684.856 L1418.75 684.856 L1419.31 684.856 L1419.87 684.856 L1420.43 684.856 L1420.99 684.856 L1421.55 684.856 L1422.11 684.856 L1422.67 684.856 L1423.23 684.856 L1423.78 684.856 L1424.34 684.856 L1424.9 684.856 L1425.46 684.856 L1426.02 684.856 L1426.58 684.856 L1427.14 684.856 L1427.7 684.856 L1428.26 684.856 L1428.82 684.856 L1429.38 684.856 L1429.94 684.856 L1430.5 684.856 L1431.05 684.856 L1431.61 684.856 L1432.17 684.856 L1432.73 684.856 L1433.29 684.856 L1433.85 684.856 L1434.41 684.856 L1434.97 684.856 L1435.53 684.856 L1436.09 684.856 L1436.65 684.856 L1437.21 684.856 L1437.77 684.856 L1438.33 684.856 L1438.88 684.856 L1439.44 684.856 L1440 684.856 L1440.56 684.856 L1441.12 684.856 L1441.68 684.856 L1442.24 684.856 L1442.8 684.856 L1443.36 684.856 L1443.92 684.856 L1444.48 684.856 L1445.04 684.856 L1445.6 684.856 L1446.15 684.856 L1446.71 684.856 L1447.27 684.856 L1447.83 684.856 L1448.39 684.856 L1448.95 684.856 L1449.51 684.856 L1450.07 684.856 L1450.63 684.856 L1451.19 684.856 L1451.75 684.856 L1452.31 684.856 L1452.87 684.856 L1453.42 684.856 L1453.98 684.856 L1454.54 684.856 L1455.1 684.856 L1455.66 684.856 L1456.22 684.856 L1456.78 684.856 L1457.34 684.856 L1457.9 684.856 L1458.46 684.856 L1459.02 684.856 L1459.58 684.856 L1460.14 684.856 L1460.7 684.856 L1461.25 684.856 L1461.81 684.856 L1462.37 684.856 L1462.93 684.856 L1463.49 684.856 L1464.05 684.856 L1464.61 684.856 L1465.17 684.856 L1465.73 684.856 L1466.29 684.856 L1466.85 684.856 L1467.41 684.856 L1467.97 684.856 L1468.52 684.856 L1469.08 684.856 L1469.64 684.856 L1470.2 684.856 L1470.76 684.856 L1471.32 684.856 L1471.88 684.856 L1472.44 684.856 L1473 684.856 L1473.56 684.856 L1474.12 684.856 L1474.68 684.856 L1475.24 684.856 L1475.79 684.856 L1476.35 684.856 L1476.91 684.856 L1477.47 684.856 L1478.03 684.856 L1478.59 684.856 L1479.15 684.856 L1479.71 684.856 L1480.27 684.856 L1480.83 684.856 L1481.39 684.856 L1481.95 684.856 L1482.51 684.856 L1483.07 684.856 L1483.62 684.856 L1484.18 684.856 L1484.74 684.856 L1485.3 684.856 L1485.86 684.856 L1486.42 684.856 L1486.98 684.856 L1487.54 684.856 L1488.1 684.856 L1488.66 684.856 L1489.22 684.856 L1489.78 684.856 L1490.34 684.856 L1490.89 684.856 L1491.45 684.856 L1492.01 684.856 L1492.57 684.856 L1493.13 684.856 L1493.69 684.856 L1494.25 684.856 L1494.81 684.856 L1495.37 684.856 L1495.93 684.856 L1496.49 684.856 L1497.05 684.856 L1497.61 684.856 L1498.16 684.856 L1498.72 684.856 L1499.28 684.856 L1499.84 684.856 L1500.4 684.856 L1500.96 684.856 L1501.52 684.856 L1502.08 684.856 L1502.64 684.856 L1503.2 684.856 L1503.76 684.856 L1504.32 684.856 L1504.88 684.856 L1505.44 684.856 L1505.99 684.856 L1506.55 684.856 L1507.11 684.856 L1507.67 684.856 L1508.23 684.856 L1508.79 684.856 L1509.35 684.856 L1509.91 684.856 L1510.47 684.856 L1511.03 684.856 L1511.59 684.856 L1512.15 684.856 L1512.71 684.856 L1513.26 684.856 L1513.82 684.856 L1514.38 684.856 L1514.94 684.856 L1515.5 684.856 L1516.06 684.856 L1516.62 684.856 L1517.18 684.856 L1517.74 684.856 L1518.3 684.856 L1518.86 684.856 L1519.42 684.856 L1519.98 684.856 L1520.53 684.856 L1521.09 684.856 L1521.65 684.856 L1522.21 684.856 L1522.77 684.856 L1523.33 684.856 L1523.89 684.856 L1524.45 684.856 L1525.01 684.856 L1525.57 684.856 L1526.13 684.856 L1526.69 684.856 L1527.25 684.856 L1527.81 684.856 L1528.36 684.856 L1528.92 684.856 L1529.48 684.856 L1530.04 684.856 L1530.6 684.856 L1531.16 684.856 L1531.72 684.856 L1532.28 684.856 L1532.84 684.856 L1533.4 684.856 L1533.96 684.856 L1534.52 684.856 L1535.08 684.856 L1535.63 684.856 L1536.19 684.856 L1536.75 684.856 L1537.31 684.856 L1537.87 684.856 L1538.43 684.856 L1538.99 684.856 L1539.55 684.856 L1540.11 684.856 L1540.67 684.856 L1541.23 684.856 L1541.79 684.856 L1542.35 684.856 L1542.9 684.856 L1543.46 684.856 L1544.02 684.856 L1544.58 684.856 L1545.14 684.856 L1545.7 684.856 L1546.26 684.856 L1546.82 684.856 L1547.38 684.856 L1547.94 684.856 L1548.5 684.856 L1549.06 684.856 L1549.62 684.856 L1550.18 684.856 L1550.73 684.856 L1551.29 684.856 L1551.85 684.856 L1552.41 684.856 L1552.97 684.856 L1553.53 684.856 L1554.09 684.856 L1554.65 684.856 L1555.21 684.856 L1555.77 684.856 L1556.33 684.856 L1556.89 684.856 L1557.45 684.856 L1558 684.856 L1558.56 684.856 L1559.12 684.856 L1559.68 684.856 L1560.24 684.856 L1560.8 684.856 L1561.36 684.856 L1561.92 684.856 L1562.48 684.856 L1563.04 684.856 L1563.6 684.856 L1564.16 684.856 L1564.72 684.856 L1565.28 684.856 L1565.83 684.856 L1566.39 684.856 L1566.95 684.856 L1567.51 684.856 L1568.07 684.856 L1568.63 684.856 L1569.19 684.856 L1569.75 684.856 L1570.31 684.856 L1570.87 684.856 L1571.43 684.856 L1571.99 684.856 L1572.55 684.856 L1573.1 684.856 L1573.66 684.856 L1574.22 684.856 L1574.78 684.856 L1575.34 684.856 L1575.9 684.856 L1576.46 684.856 L1577.02 684.856 L1577.58 684.856 L1578.14 684.856 L1578.7 684.856 L1579.26 684.856 L1579.82 684.856 L1580.37 684.856 L1580.93 684.856 L1581.49 684.856 L1582.05 684.856 L1582.61 684.856 L1583.17 684.856 L1583.73 684.856 L1584.29 684.856 L1584.85 684.856 L1585.41 684.856 L1585.97 684.856 L1586.53 684.856 L1587.09 684.856 L1587.65 684.856 L1588.2 684.856 L1588.76 684.856 L1589.32 684.856 L1589.88 684.856 L1590.44 684.856 L1591 684.856 L1591.56 684.856 L1592.12 684.856 L1592.68 684.856 L1593.24 684.856 L1593.8 684.856 L1594.36 684.856 L1594.92 684.856 L1595.47 684.856 L1596.03 684.856 L1596.59 684.856 L1597.15 684.856 L1597.71 684.856 L1598.27 684.856 L1598.83 684.856 L1599.39 684.856 L1599.95 684.856 L1600.51 684.856 L1601.07 684.856 L1601.63 684.856 L1602.19 684.856 L1602.74 684.856 L1603.3 684.856 L1603.86 684.856 L1604.42 684.856 L1604.98 684.856 L1605.54 684.856 L1606.1 684.856 L1606.66 684.856 L1607.22 684.856 L1607.78 684.856 L1608.34 684.856 L1608.9 684.856 L1609.46 684.856 L1610.02 684.856 L1610.57 684.856 L1611.13 684.856 L1611.69 684.856 L1612.25 684.856 L1612.81 684.856 L1613.37 684.856 L1613.93 684.856 L1614.49 684.856 L1615.05 684.856 L1615.61 684.856 L1616.17 684.856 L1616.73 684.856 L1617.29 684.856 L1617.84 684.856 L1618.4 684.856 L1618.96 684.856 L1619.52 684.856 L1620.08 684.856 L1620.64 684.856 L1621.2 684.856 L1621.76 684.856 L1622.32 684.856 L1622.88 684.856 L1623.44 684.856 L1624 684.856 L1624.56 684.856 L1625.11 684.856 L1625.67 684.856 L1626.23 684.856 L1626.79 684.856 L1627.35 684.856 L1627.91 684.856 L1628.47 684.856 L1629.03 684.856 L1629.59 684.856 L1630.15 684.856 L1630.71 684.856 L1631.27 684.856 L1631.83 684.856 L1632.39 684.856 L1632.94 684.856 L1633.5 684.856 L1634.06 684.856 L1634.62 684.856 L1635.18 684.856 L1635.74 684.856 L1636.3 684.856 L1636.86 684.856 L1637.42 684.856 L1637.98 684.856 L1638.54 684.856 L1639.1 684.856 L1639.66 684.856 L1640.21 684.856 L1640.77 684.856 L1641.33 684.856 L1641.89 684.856 L1642.45 684.856 L1643.01 684.856 L1643.57 684.856 L1644.13 684.856 L1644.69 684.856 L1645.25 684.856 L1645.81 684.856 L1646.37 684.856 L1646.93 684.856 L1647.48 684.856 L1648.04 684.856 L1648.6 684.856 L1649.16 684.856 L1649.72 684.856 L1650.28 684.856 L1650.84 684.856 L1651.4 684.856 L1651.96 684.856 L1652.52 684.856 L1653.08 684.856 L1653.64 684.856 L1654.2 684.856 L1654.76 684.856 L1655.31 684.856 L1655.87 684.856 L1656.43 684.856 L1656.99 684.856 L1657.55 684.856 L1658.11 684.856 L1658.67 684.856 L1659.23 684.856 L1659.79 684.856 L1660.35 684.856 L1660.91 684.856 L1661.47 684.856 L1662.03 684.856 L1662.58 684.856 L1663.14 684.856 L1663.7 684.856 L1664.26 684.856 L1664.82 684.856 L1665.38 684.856 L1665.94 684.856 L1666.5 684.856 L1667.06 684.856 L1667.62 684.856 L1668.18 684.856 L1668.74 684.856 L1669.3 684.856 L1669.85 684.856 L1670.41 684.856 L1670.97 684.856 L1671.53 684.856 L1672.09 684.856 L1672.65 684.856 L1673.21 684.856 L1673.77 684.856 L1674.33 684.856 L1674.89 684.856 L1675.45 684.856 L1676.01 684.856 L1676.57 684.856 L1677.13 684.856 L1677.68 684.856 L1678.24 684.856 L1678.8 684.856 L1679.36 684.856 L1679.92 684.856 L1680.48 684.856 L1681.04 684.856 L1681.6 684.856 L1682.16 684.856 L1682.72 684.856 L1683.28 684.856 L1683.84 684.856 L1684.4 684.856 L1684.95 684.856 L1685.51 684.856 L1686.07 684.856 L1686.63 684.856 L1687.19 684.856 L1687.75 684.856 L1688.31 684.856 L1688.87 684.856 L1689.43 684.856 L1689.99 684.856 L1690.55 684.856 L1691.11 684.856 L1691.67 684.856 L1692.23 684.856 L1692.78 684.856 L1693.34 684.856 L1693.9 684.856 L1694.46 684.856 L1695.02 684.856 L1695.58 684.856 L1696.14 684.856 L1696.7 684.856 L1697.26 684.856 L1697.82 684.856 L1698.38 684.856 L1698.94 684.856 L1699.5 684.856 L1700.05 684.856 L1700.61 684.856 L1701.17 684.856 L1701.73 684.856 L1702.29 684.856 L1702.85 684.856 L1703.41 684.856 L1703.97 684.856 L1704.53 684.856 L1705.09 684.856 L1705.65 684.856 L1706.21 684.856 L1706.77 684.856 L1707.32 684.856 L1707.88 684.856 L1708.44 684.856 L1709 684.856 L1709.56 684.856 L1710.12 684.856 L1710.68 684.856 L1711.24 684.856 L1711.8 684.856 L1712.36 684.856 L1712.92 684.856 L1713.48 684.856 L1714.04 684.856 L1714.6 684.856 L1715.15 684.856 L1715.71 684.856 L1716.27 684.856 L1716.83 684.856 L1717.39 684.856 L1717.95 684.856 L1718.51 684.856 L1719.07 684.856 L1719.63 684.856 L1720.19 684.856 L1720.75 684.856 L1721.31 684.856 L1721.87 684.856 L1722.42 684.856 L1722.98 684.856 L1723.54 684.856 L1724.1 684.856 L1724.66 684.856 L1725.22 684.856 L1725.78 684.856 L1726.34 684.856 L1726.9 684.856 L1727.46 684.856 L1728.02 684.856 L1728.58 684.856 L1729.14 684.856 L1729.69 684.856 L1730.25 684.856 L1730.81 684.856 L1731.37 684.856 L1731.93 684.856 L1732.49 684.856 L1733.05 684.856 L1733.61 684.856 L1734.17 684.856 L1734.73 684.856 L1735.29 684.856 L1735.85 684.856 L1736.41 684.856 L1736.97 684.856 L1737.52 684.856 L1738.08 684.856 L1738.64 684.856 L1739.2 684.856 L1739.76 684.856 L1740.32 684.856 L1740.88 684.856 L1741.44 684.856 L1742 684.856 L1742.56 684.856 L1743.12 684.856 L1743.68 684.856 L1744.24 684.856 L1744.79 684.856 L1745.35 684.856 L1745.91 684.856 L1746.47 684.856 L1747.03 684.856 L1747.59 684.856 L1748.15 684.856 L1748.71 684.856 L1749.27 684.856 L1749.83 684.856 L1750.39 684.856 L1750.95 684.856 L1751.51 684.856 L1752.06 684.856 L1752.62 684.856 L1753.18 684.856 L1753.74 684.856 L1754.3 684.856 L1754.86 684.856 L1755.42 684.856 L1755.98 684.856 L1756.54 684.856 L1757.1 684.856 L1757.66 684.856 L1758.22 684.856 L1758.78 684.856 L1759.34 684.856 L1759.89 684.856 L1760.45 684.856 L1761.01 684.856 L1761.57 684.856 L1762.13 684.856 L1762.69 684.856 L1763.25 684.856 L1763.81 684.856 L1764.37 684.856 L1764.93 684.856 L1765.49 684.856 L1766.05 684.856 L1766.61 684.856 L1767.16 684.856 L1767.72 684.856 L1768.28 684.856 L1768.84 684.856 L1769.4 684.856 L1769.96 684.856 L1770.52 684.856 L1771.08 684.856 L1771.64 684.856 L1772.2 684.856 L1772.76 684.856 L1773.32 684.856 L1773.88 684.856 L1774.43 684.856 L1774.99 684.856 L1775.55 684.856 L1776.11 684.856 L1776.67 684.856 L1777.23 684.856 L1777.79 684.856 L1778.35 684.856 L1778.91 684.856 L1779.47 684.856 L1780.03 684.856 L1780.59 684.856 L1781.15 684.856 L1781.71 684.856 L1782.26 684.856 L1782.82 684.856 L1783.38 684.856 L1783.94 684.856 L1784.5 684.856 L1785.06 684.856 L1785.62 684.856 L1786.18 684.856 L1786.74 684.856 L1787.3 684.856 L1787.86 684.856 L1788.42 684.856 L1788.98 684.856 L1789.53 684.856 L1790.09 684.856 L1790.65 684.856 L1791.21 684.856 L1791.77 684.856 L1792.33 684.856 L1792.89 684.856 L1793.45 684.856 L1794.01 684.856 L1794.57 684.856 L1795.13 684.856 L1795.69 684.856 L1796.25 684.856 L1796.8 684.856 L1797.36 684.856 L1797.92 684.856 L1798.48 684.856 L1799.04 684.856 L1799.6 684.856 L1800.16 684.856 L1800.72 684.856 L1801.28 684.856 L1801.84 684.856 L1802.4 684.856 L1802.96 684.856 L1803.52 684.856 L1804.08 684.856 L1804.63 684.856 L1805.19 684.856 L1805.75 684.856 L1806.31 684.856 L1806.87 684.856 L1807.43 684.856 L1807.99 684.856 L1808.55 684.856 L1809.11 684.856 L1809.67 684.856 L1810.23 684.856 L1810.79 684.856 L1811.35 684.856 L1811.9 684.856 L1812.46 684.856 L1813.02 684.856 L1813.58 684.856 L1814.14 684.856 L1814.7 684.856 L1815.26 684.856 L1815.82 684.856 L1816.38 684.856 L1816.94 684.856 L1817.5 684.856 L1818.06 684.856 L1818.62 684.856 L1819.18 684.856 L1819.73 684.856 L1820.29 684.856 L1820.85 684.856 L1821.41 684.856 L1821.97 684.856 L1822.53 684.856 L1823.09 684.856 L1823.65 684.856 L1824.21 684.856 L1824.77 684.856 L1825.33 684.856 L1825.89 684.856 L1826.45 684.856 L1827 684.856 L1827.56 684.856 L1828.12 684.856 L1828.68 684.856 L1829.24 684.856 L1829.8 684.856 L1830.36 684.856 L1830.92 684.856 L1831.48 684.856 L1832.04 684.856 L1832.6 684.856 L1833.16 684.856 L1833.72 684.856 L1834.27 684.856 L1834.83 684.856 L1835.39 684.856 L1835.95 684.856 L1836.51 684.856 L1837.07 684.856 L1837.63 684.856 L1838.19 684.856 L1838.19 682.913 L1837.63 682.913 L1837.07 682.913 L1836.51 682.913 L1835.95 682.913 L1835.39 682.913 L1834.83 682.913 L1834.27 682.913 L1833.72 682.913 L1833.16 682.913 L1832.6 682.913 L1832.04 682.913 L1831.48 682.913 L1830.92 682.913 L1830.36 682.913 L1829.8 682.913 L1829.24 682.913 L1828.68 682.913 L1828.12 682.913 L1827.56 682.913 L1827 682.913 L1826.45 682.913 L1825.89 682.913 L1825.33 682.913 L1824.77 682.913 L1824.21 682.913 L1823.65 682.913 L1823.09 682.913 L1822.53 682.913 L1821.97 682.913 L1821.41 682.913 L1820.85 682.913 L1820.29 682.913 L1819.73 682.913 L1819.18 682.913 L1818.62 682.913 L1818.06 682.913 L1817.5 682.913 L1816.94 682.913 L1816.38 682.913 L1815.82 682.913 L1815.26 682.913 L1814.7 682.913 L1814.14 682.913 L1813.58 682.913 L1813.02 682.913 L1812.46 682.913 L1811.9 682.913 L1811.35 682.913 L1810.79 682.913 L1810.23 682.913 L1809.67 682.913 L1809.11 682.913 L1808.55 682.913 L1807.99 682.913 L1807.43 682.913 L1806.87 682.913 L1806.31 682.913 L1805.75 682.913 L1805.19 682.913 L1804.63 682.913 L1804.08 682.913 L1803.52 682.913 L1802.96 682.913 L1802.4 682.913 L1801.84 682.913 L1801.28 682.913 L1800.72 682.913 L1800.16 682.913 L1799.6 682.913 L1799.04 682.913 L1798.48 682.913 L1797.92 682.913 L1797.36 682.913 L1796.8 682.913 L1796.25 682.913 L1795.69 682.913 L1795.13 682.913 L1794.57 682.913 L1794.01 682.913 L1793.45 682.913 L1792.89 682.913 L1792.33 682.913 L1791.77 682.913 L1791.21 682.913 L1790.65 682.913 L1790.09 682.913 L1789.53 682.913 L1788.98 682.913 L1788.42 682.913 L1787.86 682.913 L1787.3 682.913 L1786.74 682.913 L1786.18 682.913 L1785.62 682.913 L1785.06 682.913 L1784.5 682.913 L1783.94 682.913 L1783.38 682.913 L1782.82 682.913 L1782.26 682.913 L1781.71 682.913 L1781.15 682.913 L1780.59 682.913 L1780.03 682.913 L1779.47 682.913 L1778.91 682.913 L1778.35 682.913 L1777.79 682.913 L1777.23 682.913 L1776.67 682.913 L1776.11 682.913 L1775.55 682.913 L1774.99 682.913 L1774.43 682.913 L1773.88 682.913 L1773.32 682.913 L1772.76 682.913 L1772.2 682.913 L1771.64 682.913 L1771.08 682.913 L1770.52 682.913 L1769.96 682.913 L1769.4 682.913 L1768.84 682.913 L1768.28 682.913 L1767.72 682.913 L1767.16 682.913 L1766.61 682.913 L1766.05 682.913 L1765.49 682.913 L1764.93 682.913 L1764.37 682.913 L1763.81 682.913 L1763.25 682.913 L1762.69 682.913 L1762.13 682.913 L1761.57 682.913 L1761.01 682.913 L1760.45 682.913 L1759.89 682.913 L1759.34 682.913 L1758.78 682.913 L1758.22 682.913 L1757.66 682.913 L1757.1 682.913 L1756.54 682.913 L1755.98 682.913 L1755.42 682.913 L1754.86 682.913 L1754.3 682.913 L1753.74 682.913 L1753.18 682.913 L1752.62 682.913 L1752.06 682.913 L1751.51 682.913 L1750.95 682.913 L1750.39 682.913 L1749.83 682.913 L1749.27 682.913 L1748.71 682.913 L1748.15 682.913 L1747.59 682.913 L1747.03 682.913 L1746.47 682.913 L1745.91 682.913 L1745.35 682.913 L1744.79 682.913 L1744.24 682.913 L1743.68 682.913 L1743.12 682.913 L1742.56 682.913 L1742 682.913 L1741.44 682.913 L1740.88 682.913 L1740.32 682.913 L1739.76 682.913 L1739.2 682.913 L1738.64 682.913 L1738.08 682.913 L1737.52 682.913 L1736.97 682.913 L1736.41 682.913 L1735.85 682.913 L1735.29 682.913 L1734.73 682.913 L1734.17 682.913 L1733.61 682.913 L1733.05 682.913 L1732.49 682.913 L1731.93 682.913 L1731.37 682.913 L1730.81 682.913 L1730.25 682.913 L1729.69 682.913 L1729.14 682.913 L1728.58 682.913 L1728.02 682.913 L1727.46 682.913 L1726.9 682.913 L1726.34 682.913 L1725.78 682.913 L1725.22 682.913 L1724.66 682.913 L1724.1 682.913 L1723.54 682.913 L1722.98 682.913 L1722.42 682.913 L1721.87 682.913 L1721.31 682.913 L1720.75 682.913 L1720.19 682.913 L1719.63 682.913 L1719.07 682.913 L1718.51 682.913 L1717.95 682.913 L1717.39 682.913 L1716.83 682.913 L1716.27 682.913 L1715.71 682.913 L1715.15 682.913 L1714.6 682.913 L1714.04 682.913 L1713.48 682.913 L1712.92 682.913 L1712.36 682.913 L1711.8 682.913 L1711.24 682.913 L1710.68 682.913 L1710.12 682.913 L1709.56 682.913 L1709 682.913 L1708.44 682.913 L1707.88 682.913 L1707.32 682.913 L1706.77 682.913 L1706.21 682.913 L1705.65 682.913 L1705.09 682.913 L1704.53 682.913 L1703.97 682.913 L1703.41 682.913 L1702.85 682.913 L1702.29 682.913 L1701.73 682.913 L1701.17 682.913 L1700.61 682.913 L1700.05 682.913 L1699.5 682.913 L1698.94 682.913 L1698.38 682.913 L1697.82 682.913 L1697.26 682.913 L1696.7 682.913 L1696.14 682.913 L1695.58 682.913 L1695.02 682.913 L1694.46 682.913 L1693.9 682.913 L1693.34 682.913 L1692.78 682.913 L1692.23 682.913 L1691.67 682.913 L1691.11 682.913 L1690.55 682.913 L1689.99 682.913 L1689.43 682.913 L1688.87 682.913 L1688.31 682.913 L1687.75 682.913 L1687.19 682.913 L1686.63 682.913 L1686.07 682.913 L1685.51 682.913 L1684.95 682.913 L1684.4 682.913 L1683.84 682.913 L1683.28 682.913 L1682.72 682.913 L1682.16 682.913 L1681.6 682.913 L1681.04 682.913 L1680.48 682.913 L1679.92 682.913 L1679.36 682.913 L1678.8 682.913 L1678.24 682.913 L1677.68 682.913 L1677.13 682.913 L1676.57 682.913 L1676.01 682.913 L1675.45 682.913 L1674.89 682.913 L1674.33 682.913 L1673.77 682.913 L1673.21 682.913 L1672.65 682.913 L1672.09 682.913 L1671.53 682.913 L1670.97 682.913 L1670.41 682.913 L1669.85 682.913 L1669.3 682.913 L1668.74 682.913 L1668.18 682.913 L1667.62 682.913 L1667.06 682.913 L1666.5 682.913 L1665.94 682.913 L1665.38 682.913 L1664.82 682.913 L1664.26 682.913 L1663.7 682.913 L1663.14 682.913 L1662.58 682.913 L1662.03 682.913 L1661.47 682.913 L1660.91 682.913 L1660.35 682.913 L1659.79 682.913 L1659.23 682.913 L1658.67 682.913 L1658.11 682.913 L1657.55 682.913 L1656.99 682.913 L1656.43 682.913 L1655.87 682.913 L1655.31 682.913 L1654.76 682.913 L1654.2 682.913 L1653.64 682.913 L1653.08 682.913 L1652.52 682.913 L1651.96 682.913 L1651.4 682.913 L1650.84 682.913 L1650.28 682.913 L1649.72 682.913 L1649.16 682.913 L1648.6 682.913 L1648.04 682.913 L1647.48 682.913 L1646.93 682.913 L1646.37 682.913 L1645.81 682.913 L1645.25 682.913 L1644.69 682.913 L1644.13 682.913 L1643.57 682.913 L1643.01 682.913 L1642.45 682.913 L1641.89 682.913 L1641.33 682.913 L1640.77 682.913 L1640.21 682.913 L1639.66 682.913 L1639.1 682.913 L1638.54 682.913 L1637.98 682.913 L1637.42 682.913 L1636.86 682.913 L1636.3 682.913 L1635.74 682.913 L1635.18 682.913 L1634.62 682.913 L1634.06 682.913 L1633.5 682.913 L1632.94 682.913 L1632.39 682.913 L1631.83 682.913 L1631.27 682.913 L1630.71 682.913 L1630.15 682.913 L1629.59 682.913 L1629.03 682.913 L1628.47 682.913 L1627.91 682.913 L1627.35 682.913 L1626.79 682.913 L1626.23 682.913 L1625.67 682.913 L1625.11 682.913 L1624.56 682.913 L1624 682.913 L1623.44 682.913 L1622.88 682.913 L1622.32 682.913 L1621.76 682.913 L1621.2 682.913 L1620.64 682.913 L1620.08 682.913 L1619.52 682.913 L1618.96 682.913 L1618.4 682.913 L1617.84 682.913 L1617.29 682.913 L1616.73 682.913 L1616.17 682.913 L1615.61 682.913 L1615.05 682.913 L1614.49 682.913 L1613.93 682.913 L1613.37 682.913 L1612.81 682.913 L1612.25 682.913 L1611.69 682.913 L1611.13 682.913 L1610.57 682.913 L1610.02 682.913 L1609.46 682.913 L1608.9 682.913 L1608.34 682.913 L1607.78 682.913 L1607.22 682.913 L1606.66 682.913 L1606.1 682.913 L1605.54 682.913 L1604.98 682.913 L1604.42 682.913 L1603.86 682.913 L1603.3 682.913 L1602.74 682.913 L1602.19 682.913 L1601.63 682.913 L1601.07 682.913 L1600.51 682.913 L1599.95 682.913 L1599.39 682.913 L1598.83 682.913 L1598.27 682.913 L1597.71 682.913 L1597.15 682.913 L1596.59 682.913 L1596.03 682.913 L1595.47 682.913 L1594.92 682.913 L1594.36 682.913 L1593.8 682.913 L1593.24 682.913 L1592.68 682.913 L1592.12 682.913 L1591.56 682.913 L1591 682.913 L1590.44 682.913 L1589.88 682.913 L1589.32 682.913 L1588.76 682.913 L1588.2 682.913 L1587.65 682.913 L1587.09 682.913 L1586.53 682.913 L1585.97 682.913 L1585.41 682.913 L1584.85 682.913 L1584.29 682.913 L1583.73 682.913 L1583.17 682.913 L1582.61 682.913 L1582.05 682.913 L1581.49 682.913 L1580.93 682.913 L1580.37 682.913 L1579.82 682.913 L1579.26 682.913 L1578.7 682.913 L1578.14 682.913 L1577.58 682.913 L1577.02 682.913 L1576.46 682.913 L1575.9 682.913 L1575.34 682.913 L1574.78 682.913 L1574.22 682.913 L1573.66 682.913 L1573.1 682.913 L1572.55 682.913 L1571.99 682.913 L1571.43 682.913 L1570.87 682.913 L1570.31 682.913 L1569.75 682.913 L1569.19 682.913 L1568.63 682.913 L1568.07 682.913 L1567.51 682.913 L1566.95 682.913 L1566.39 682.913 L1565.83 682.913 L1565.28 682.913 L1564.72 682.913 L1564.16 682.913 L1563.6 682.913 L1563.04 682.913 L1562.48 682.913 L1561.92 682.913 L1561.36 682.913 L1560.8 682.913 L1560.24 682.913 L1559.68 682.913 L1559.12 682.913 L1558.56 682.913 L1558 682.913 L1557.45 682.913 L1556.89 682.913 L1556.33 682.913 L1555.77 682.913 L1555.21 682.913 L1554.65 682.913 L1554.09 682.913 L1553.53 682.913 L1552.97 682.913 L1552.41 682.913 L1551.85 682.913 L1551.29 682.913 L1550.73 682.913 L1550.18 682.913 L1549.62 682.913 L1549.06 682.913 L1548.5 682.913 L1547.94 682.913 L1547.38 682.913 L1546.82 682.913 L1546.26 682.913 L1545.7 682.913 L1545.14 682.913 L1544.58 682.913 L1544.02 682.913 L1543.46 682.913 L1542.9 682.913 L1542.35 682.913 L1541.79 682.913 L1541.23 682.913 L1540.67 682.913 L1540.11 682.913 L1539.55 682.913 L1538.99 682.913 L1538.43 682.913 L1537.87 682.913 L1537.31 682.913 L1536.75 682.913 L1536.19 682.913 L1535.63 682.913 L1535.08 682.913 L1534.52 682.913 L1533.96 682.913 L1533.4 682.913 L1532.84 682.913 L1532.28 682.913 L1531.72 682.913 L1531.16 682.913 L1530.6 682.913 L1530.04 682.913 L1529.48 682.913 L1528.92 682.913 L1528.36 682.913 L1527.81 682.913 L1527.25 682.913 L1526.69 682.913 L1526.13 682.913 L1525.57 682.913 L1525.01 682.913 L1524.45 682.913 L1523.89 682.913 L1523.33 682.913 L1522.77 682.913 L1522.21 682.913 L1521.65 682.913 L1521.09 682.913 L1520.53 682.913 L1519.98 682.913 L1519.42 682.913 L1518.86 682.913 L1518.3 682.913 L1517.74 682.913 L1517.18 682.913 L1516.62 682.913 L1516.06 682.913 L1515.5 682.913 L1514.94 682.913 L1514.38 682.913 L1513.82 682.913 L1513.26 682.913 L1512.71 682.913 L1512.15 682.913 L1511.59 682.913 L1511.03 682.913 L1510.47 682.913 L1509.91 682.913 L1509.35 682.913 L1508.79 682.913 L1508.23 682.913 L1507.67 682.913 L1507.11 682.913 L1506.55 682.913 L1505.99 682.913 L1505.44 682.913 L1504.88 682.913 L1504.32 682.913 L1503.76 682.913 L1503.2 682.913 L1502.64 682.913 L1502.08 682.913 L1501.52 682.913 L1500.96 682.913 L1500.4 682.913 L1499.84 682.913 L1499.28 682.913 L1498.72 682.913 L1498.16 682.913 L1497.61 682.913 L1497.05 682.913 L1496.49 682.913 L1495.93 682.913 L1495.37 682.913 L1494.81 682.913 L1494.25 682.913 L1493.69 682.913 L1493.13 682.913 L1492.57 682.913 L1492.01 682.913 L1491.45 682.913 L1490.89 682.913 L1490.34 682.913 L1489.78 682.913 L1489.22 682.913 L1488.66 682.913 L1488.1 682.913 L1487.54 682.913 L1486.98 682.913 L1486.42 682.913 L1485.86 682.913 L1485.3 682.913 L1484.74 682.913 L1484.18 682.913 L1483.62 682.913 L1483.07 682.913 L1482.51 682.913 L1481.95 682.913 L1481.39 682.913 L1480.83 682.913 L1480.27 682.913 L1479.71 682.913 L1479.15 682.913 L1478.59 682.913 L1478.03 682.913 L1477.47 682.913 L1476.91 682.913 L1476.35 682.913 L1475.79 682.913 L1475.24 682.913 L1474.68 682.913 L1474.12 682.913 L1473.56 682.913 L1473 682.913 L1472.44 682.913 L1471.88 682.913 L1471.32 682.913 L1470.76 682.913 L1470.2 682.913 L1469.64 682.913 L1469.08 682.913 L1468.52 682.913 L1467.97 682.913 L1467.41 682.913 L1466.85 682.913 L1466.29 682.913 L1465.73 682.913 L1465.17 682.913 L1464.61 682.913 L1464.05 682.913 L1463.49 682.913 L1462.93 682.913 L1462.37 682.913 L1461.81 682.913 L1461.25 682.913 L1460.7 682.913 L1460.14 682.913 L1459.58 682.913 L1459.02 682.913 L1458.46 682.913 L1457.9 682.913 L1457.34 682.913 L1456.78 682.913 L1456.22 682.913 L1455.66 682.913 L1455.1 682.913 L1454.54 682.913 L1453.98 682.913 L1453.42 682.913 L1452.87 682.913 L1452.31 682.913 L1451.75 682.913 L1451.19 682.913 L1450.63 682.913 L1450.07 682.913 L1449.51 682.913 L1448.95 682.913 L1448.39 682.913 L1447.83 682.913 L1447.27 682.913 L1446.71 682.913 L1446.15 682.913 L1445.6 682.913 L1445.04 682.913 L1444.48 682.913 L1443.92 682.913 L1443.36 682.913 L1442.8 682.913 L1442.24 682.913 L1441.68 682.913 L1441.12 682.913 L1440.56 682.913 L1440 682.913 L1439.44 682.913 L1438.88 682.913 L1438.33 682.913 L1437.77 682.913 L1437.21 682.913 L1436.65 682.913 L1436.09 682.913 L1435.53 682.913 L1434.97 682.913 L1434.41 682.913 L1433.85 682.913 L1433.29 682.913 L1432.73 682.913 L1432.17 682.913 L1431.61 682.913 L1431.05 682.913 L1430.5 682.913 L1429.94 682.913 L1429.38 682.913 L1428.82 682.913 L1428.26 682.913 L1427.7 682.913 L1427.14 682.913 L1426.58 682.913 L1426.02 682.913 L1425.46 682.913 L1424.9 682.913 L1424.34 682.913 L1423.78 682.913 L1423.23 682.913 L1422.67 682.913 L1422.11 682.913 L1421.55 682.913 L1420.99 682.913 L1420.43 682.913 L1419.87 682.913 L1419.31 682.913 L1418.75 682.913 L1418.19 682.913 L1417.63 682.913 L1417.07 682.913 L1416.51 682.913 L1415.95 682.913 L1415.4 682.913 L1414.84 682.913 L1414.28 682.913 L1413.72 682.913 L1413.16 682.913 L1412.6 682.913 L1412.04 682.913 L1411.48 682.913 L1410.92 682.913 L1410.36 682.913 L1409.8 682.913 L1409.24 682.913 L1408.68 682.913 L1408.13 682.913 L1407.57 682.913 L1407.01 682.913 L1406.45 682.913 L1405.89 682.913 L1405.33 682.913 L1404.77 682.913 L1404.21 682.913 L1403.65 682.913 L1403.09 682.913 L1402.53 682.913 L1401.97 682.913 L1401.41 682.913 L1400.86 682.913 L1400.3 682.913 L1399.74 682.913 L1399.18 682.913 L1398.62 682.913 L1398.06 682.913 L1397.5 682.913 L1396.94 682.913 L1396.38 682.913 L1395.82 682.913 L1395.26 682.913 L1394.7 682.913 L1394.14 682.913 L1393.58 682.913 L1393.03 682.913 L1392.47 682.913 L1391.91 682.913 L1391.35 682.913 L1390.79 682.913 L1390.23 682.913 L1389.67 682.913 L1389.11 682.913 L1388.55 682.913 L1387.99 682.913 L1387.43 682.913 L1386.87 682.913 L1386.31 682.913 L1385.76 682.913 L1385.2 682.913 L1384.64 682.913 L1384.08 682.913 L1383.52 682.913 L1382.96 682.913 L1382.4 682.913 L1381.84 682.913 L1381.28 682.913 L1380.72 682.913 L1380.16 682.913 L1379.6 682.913 L1379.04 682.913 L1378.49 682.913 L1377.93 682.913 L1377.37 682.913 L1376.81 682.913 L1376.25 682.913 L1375.69 682.913 L1375.13 682.913 L1374.57 682.913 L1374.01 682.913 L1373.45 682.913 L1372.89 682.913 L1372.33 682.913 L1371.77 682.913 L1371.21 682.913 L1370.66 682.913 L1370.1 682.913 L1369.54 682.913 L1368.98 682.913 L1368.42 682.913 L1367.86 682.913 L1367.3 682.913 L1366.74 682.913 L1366.18 682.913 L1365.62 682.913 L1365.06 682.913 L1364.5 682.913 L1363.94 682.913 L1363.39 682.913 L1362.83 682.913 L1362.27 682.913 L1361.71 682.913 L1361.15 682.913 L1360.59 682.913 L1360.03 682.913 L1359.47 682.913 L1358.91 682.913 L1358.35 682.913 L1357.79 682.913 L1357.23 682.913 L1356.67 682.913 L1356.12 682.913 L1355.56 682.913 L1355 682.913 L1354.44 682.913 L1353.88 682.913 L1353.32 682.913 L1352.76 682.913 L1352.2 682.913 L1351.64 682.913 L1351.08 682.913 L1350.52 682.913 L1349.96 682.913 L1349.4 682.913 L1348.84 682.913 L1348.29 682.913 L1347.73 682.913 L1347.17 682.913 L1346.61 682.913 L1346.05 682.913 L1345.49 682.913 L1344.93 682.913 L1344.37 682.913 L1343.81 682.913 L1343.25 682.913 L1342.69 682.913 L1342.13 682.913 L1341.57 682.913 L1341.02 682.913 L1340.46 682.913 L1339.9 682.913 L1339.34 682.913 L1338.78 682.913 L1338.22 682.913 L1337.66 682.913 L1337.1 682.913 L1336.54 682.913 L1335.98 682.913 L1335.42 682.913 L1334.86 682.913 L1334.3 682.913 L1333.75 682.913 L1333.19 682.913 L1332.63 682.913 L1332.07 682.913 L1331.51 682.913 L1330.95 682.913 L1330.39 682.913 L1329.83 682.913 L1329.27 682.913 L1328.71 682.913 L1328.15 682.913 L1327.59 682.913 L1327.03 682.913 L1326.47 682.913 L1325.92 682.913 L1325.36 682.913 L1324.8 682.913 L1324.24 682.913 L1323.68 682.913 L1323.12 682.913 L1322.56 682.913 L1322 682.913 L1321.44 682.913 L1320.88 682.913 L1320.32 682.913 L1319.76 682.913 L1319.2 682.913 L1318.65 682.913 L1318.09 682.913 L1317.53 682.913 L1316.97 682.913 L1316.41 682.913 L1315.85 682.913 L1315.29 682.913 L1314.73 682.913 L1314.17 682.913 L1313.61 682.913 L1313.05 682.913 L1312.49 682.913 L1311.93 682.913 L1311.38 682.913 L1310.82 682.913 L1310.26 682.913 L1309.7 682.913 L1309.14 682.913 L1308.58 682.913 L1308.02 682.913 L1307.46 682.913 L1306.9 682.913 L1306.34 682.913 L1305.78 682.913 L1305.22 682.913 L1304.66 682.913 L1304.1 682.913 L1303.55 682.913 L1302.99 682.913 L1302.43 682.913 L1301.87 682.913 L1301.31 682.913 L1300.75 682.913 L1300.19 682.913 L1299.63 682.913 L1299.07 682.913 L1298.51 682.913 L1297.95 682.913 L1297.39 682.913 L1296.83 682.913 L1296.28 682.913 L1295.72 682.913 L1295.16 682.913 L1294.6 682.913 L1294.04 682.913 L1293.48 682.913 L1292.92 682.913 L1292.36 682.913 L1291.8 682.913 L1291.24 682.913 L1290.68 682.913 L1290.12 682.913 L1289.56 682.913 L1289 682.913 L1288.45 682.913 L1287.89 682.913 L1287.33 682.913 L1286.77 682.913 L1286.21 682.913 L1285.65 682.913 L1285.09 682.913 L1284.53 682.913 L1283.97 682.913 L1283.41 682.913 L1282.85 682.913 L1282.29 682.913 L1281.73 682.913 L1281.18 682.913 L1280.62 682.913 L1280.06 682.913 L1279.5 682.913 L1278.94 682.913 L1278.38 682.913 L1277.82 682.913 L1277.26 682.913 L1276.7 682.913 L1276.14 682.913 L1275.58 682.913 L1275.02 682.913 L1274.46 682.913 L1273.91 682.913 L1273.35 682.913 L1272.79 682.913 L1272.23 682.913 L1271.67 682.913 L1271.11 682.913 L1270.55 682.913 L1269.99 682.913 L1269.43 682.913 L1268.87 682.913 L1268.31 682.913 L1267.75 682.913 L1267.19 682.913 L1266.63 682.913 L1266.08 682.913 L1265.52 682.913 L1264.96 682.913 L1264.4 682.913 L1263.84 682.913 L1263.28 682.913 L1262.72 682.913 L1262.16 682.913 L1261.6 682.913 L1261.04 682.913 L1260.48 682.913 L1259.92 682.913 L1259.36 682.913 L1258.81 682.913 L1258.25 682.913 L1257.69 682.913 L1257.13 682.913 L1256.57 682.913 L1256.01 682.913 L1255.45 682.913 L1254.89 682.913 L1254.33 682.913 L1253.77 682.913 L1253.21 682.913 L1252.65 682.913 L1252.09 682.913 L1251.54 682.913 L1250.98 682.913 L1250.42 682.913 L1249.86 682.913 L1249.3 682.913 L1248.74 682.913 L1248.18 682.913 L1247.62 682.913 L1247.06 682.913 L1246.5 682.913 L1245.94 682.913 L1245.38 682.913 L1244.82 682.913 L1244.26 682.913 L1243.71 682.913 L1243.15 682.913 L1242.59 682.913 L1242.03 682.913 L1241.47 682.913 L1240.91 682.913 L1240.35 682.913 L1239.79 682.913 L1239.23 682.913 L1238.67 682.913 L1238.11 682.913 L1237.55 682.913 L1236.99 682.913 L1236.44 682.913 L1235.88 682.913 L1235.32 682.913 L1234.76 682.913 L1234.2 682.913 L1233.64 682.913 L1233.08 682.913 L1232.52 682.913 L1231.96 682.913 L1231.4 682.913 L1230.84 682.913 L1230.28 682.913 L1229.72 682.913 L1229.17 682.913 L1228.61 682.913 L1228.05 682.913 L1227.49 682.913 L1226.93 682.913 L1226.37 682.913 L1225.81 682.913 L1225.25 682.913 L1224.69 682.913 L1224.13 682.913 L1223.57 682.913 L1223.01 682.913 L1222.45 682.913 L1221.89 682.913 L1221.34 682.913 L1220.78 682.913 L1220.22 682.913 L1219.66 682.913 L1219.1 682.913 L1218.54 682.913 L1217.98 682.913 L1217.42 682.913 L1216.86 682.913 L1216.3 682.913 L1215.74 682.913 L1215.18 682.913 L1214.62 682.913 L1214.07 682.913 L1213.51 682.913 L1212.95 682.913 L1212.39 682.913 L1211.83 682.913 L1211.27 682.913 L1210.71 682.913 L1210.15 682.913 L1209.59 682.913 L1209.03 682.913 L1208.47 682.913 L1207.91 682.913 L1207.35 682.913 L1206.8 682.913 L1206.24 682.913 L1205.68 682.913 L1205.12 682.913 L1204.56 682.913 L1204 682.913 L1203.44 682.913 L1202.88 682.913 L1202.32 682.913 L1201.76 682.913 L1201.2 682.913 L1200.64 682.913 L1200.08 682.913 L1199.52 682.913 L1198.97 682.913 L1198.41 682.913 L1197.85 682.913 L1197.29 682.913 L1196.73 682.913 L1196.17 682.913 L1195.61 682.913 L1195.05 682.913 L1194.49 682.913 L1193.93 682.913 L1193.37 682.913 L1192.81 682.913 L1192.25 682.913 L1191.7 682.913 L1191.14 682.913 L1190.58 682.913 L1190.02 682.913 L1189.46 682.913 L1188.9 682.913 L1188.34 682.913 L1187.78 682.913 L1187.22 682.913 L1186.66 682.913 L1186.1 682.913 L1185.54 682.913 L1184.98 682.913 L1184.43 682.913 L1183.87 682.913 L1183.31 682.913 L1182.75 682.913 L1182.19 682.913 L1181.63 682.913 L1181.07 682.913 L1180.51 682.913 L1179.95 682.913 L1179.39 682.913 L1178.83 682.913 L1178.27 682.913 L1177.71 682.913 L1177.15 682.913 L1176.6 682.913 L1176.04 682.913 L1175.48 682.913 L1174.92 682.913 L1174.36 682.913 L1173.8 682.913 L1173.24 682.913 L1172.68 682.913 L1172.12 682.913 L1171.56 682.913 L1171 682.913 L1170.44 682.913 L1169.88 682.913 L1169.33 682.913 L1168.77 682.913 L1168.21 682.913 L1167.65 682.913 L1167.09 682.913 L1166.53 682.913 L1165.97 682.913 L1165.41 682.913 L1164.85 682.913 L1164.29 682.913 L1163.73 682.913 L1163.17 682.913 L1162.61 682.913 L1162.05 682.913 L1161.5 682.913 L1160.94 682.913 L1160.38 682.913 L1159.82 682.913 L1159.26 682.913 L1158.7 682.913 L1158.14 682.913 L1157.58 682.913 L1157.02 682.913 L1156.46 682.913 L1155.9 682.913 L1155.34 682.913 L1154.78 682.913 L1154.23 682.913 L1153.67 682.913 L1153.11 682.913 L1152.55 682.913 L1151.99 682.913 L1151.43 682.913 L1150.87 682.913 L1150.31 682.913 L1149.75 682.913 L1149.19 682.913 L1148.63 682.913 L1148.07 682.913 L1147.51 682.913 L1146.96 682.913 L1146.4 682.913 L1145.84 682.913 L1145.28 682.913 L1144.72 682.913 L1144.16 682.913 L1143.6 682.913 L1143.04 682.913 L1142.48 682.913 L1141.92 682.913 L1141.36 682.913 L1140.8 682.913 L1140.24 682.913 L1139.68 682.913 L1139.13 682.913 L1138.57 682.913 L1138.01 682.913 L1137.45 682.913 L1136.89 682.913 L1136.33 682.913 L1135.77 682.913 L1135.21 682.913 L1134.65 682.913 L1134.09 682.913 L1133.53 682.913 L1132.97 682.913 L1132.41 682.913 L1131.86 682.913 L1131.3 682.913 L1130.74 682.913 L1130.18 682.913 L1129.62 682.913 L1129.06 682.913 L1128.5 682.913 L1127.94 682.913 L1127.38 682.913 L1126.82 682.913 L1126.26 682.913 L1125.7 682.913 L1125.14 682.913 L1124.59 682.913 L1124.03 682.913 L1123.47 682.913 L1122.91 682.913 L1122.35 682.913 L1121.79 682.913 L1121.23 682.913 L1120.67 682.913 L1120.11 682.913 L1119.55 682.913 L1118.99 682.913 L1118.43 682.913 L1117.87 682.913 L1117.31 682.913 L1116.76 682.913 L1116.2 682.913 L1115.64 682.913 L1115.08 682.913 L1114.52 682.913 L1113.96 682.913 L1113.4 682.913 L1112.84 682.913 L1112.28 682.913 L1111.72 682.913 L1111.16 682.913 L1110.6 682.913 L1110.04 682.913 L1109.49 682.913 L1108.93 682.913 L1108.37 682.913 L1107.81 682.913 L1107.25 682.913 L1106.69 682.913 L1106.13 682.913 L1105.57 682.913 L1105.01 682.913 L1104.45 682.913 L1103.89 682.913 L1103.33 682.913 L1102.77 682.913 L1102.22 682.913 L1101.66 682.913 L1101.1 682.913 L1100.54 682.913 L1099.98 682.913 L1099.42 682.913 L1098.86 682.913 L1098.3 682.913 L1097.74 682.913 L1097.18 682.913 L1096.62 682.913 L1096.06 682.913 L1095.5 682.913 L1094.94 682.913 L1094.39 682.913 L1093.83 682.913 L1093.27 682.913 L1092.71 682.913 L1092.15 682.913 L1091.59 682.913 L1091.03 682.913 L1090.47 682.913 L1089.91 682.913 L1089.35 682.913 L1088.79 682.913 L1088.23 682.913 L1087.67 682.913 L1087.12 682.913 L1086.56 682.913 L1086 682.913 L1085.44 682.913 L1084.88 682.913 L1084.32 682.913 L1083.76 682.913 L1083.2 682.913 L1082.64 682.913 L1082.08 682.913 L1081.52 682.913 L1080.96 682.913 L1080.4 682.913 L1079.85 682.913 L1079.29 682.913 L1078.73 682.913 L1078.17 682.913 L1077.61 682.913 L1077.05 682.913 L1076.49 682.913 L1075.93 682.913 L1075.37 682.913 L1074.81 682.913 L1074.25 682.913 L1073.69 682.913 L1073.13 682.913 L1072.57 682.913 L1072.02 682.913 L1071.46 682.913 L1070.9 682.913 L1070.34 682.913 L1069.78 682.913 L1069.22 682.913 L1068.66 682.913 L1068.1 682.913 L1067.54 682.913 L1066.98 682.913 L1066.42 682.913 L1065.86 682.913 L1065.3 682.913 L1064.75 682.913 L1064.19 682.913 L1063.63 682.913 L1063.07 682.913 L1062.51 682.913 L1061.95 682.913 L1061.39 682.913 L1060.83 682.913 L1060.27 682.913 L1059.71 682.913 L1059.15 682.913 L1058.59 682.913 L1058.03 682.913 L1057.48 682.913 L1056.92 682.913 L1056.36 682.913 L1055.8 682.913 L1055.24 682.913 L1054.68 682.913 L1054.12 682.913 L1053.56 682.913 L1053 682.913 L1052.44 682.913 L1051.88 682.913 L1051.32 682.913 L1050.76 682.913 L1050.2 682.913 L1049.65 682.913 L1049.09 682.913 L1048.53 682.913 L1047.97 682.913 L1047.41 682.913 L1046.85 682.913 L1046.29 682.913 L1045.73 682.913 L1045.17 682.913 L1044.61 682.913 L1044.05 682.913 L1043.49 682.913 L1042.93 682.913 L1042.38 682.913 L1041.82 682.913 L1041.26 682.913 L1040.7 682.913 L1040.14 682.913 L1039.58 682.913 L1039.02 682.913 L1038.46 682.913 L1037.9 682.913 L1037.34 682.913 L1036.78 682.913 L1036.22 682.913 L1035.66 682.913 L1035.1 682.913 L1034.55 682.913 L1033.99 682.913 L1033.43 682.913 L1032.87 682.913 L1032.31 682.913 L1031.75 682.913 L1031.19 682.913 L1030.63 682.913 L1030.07 682.913 L1029.51 682.913 L1028.95 682.913 L1028.39 682.913 L1027.83 682.913 L1027.28 682.913 L1026.72 682.913 L1026.16 682.913 L1025.6 682.913 L1025.04 682.913 L1024.48 682.913 L1023.92 682.913 L1023.36 682.913 L1022.8 682.913 L1022.24 682.913 L1021.68 682.913 L1021.12 682.913 L1020.56 682.913 L1020.01 682.913 L1019.45 682.913 L1018.89 682.913 L1018.33 682.913 L1017.77 682.913 L1017.21 682.913 L1016.65 682.913 L1016.09 682.913 L1015.53 682.913 L1014.97 682.913 L1014.41 682.913 L1013.85 682.913 L1013.29 682.913 L1012.73 682.913 L1012.18 682.913 L1011.62 682.913 L1011.06 682.913 L1010.5 682.913 L1009.94 682.913 L1009.38 682.913 L1008.82 682.913 L1008.26 682.913 L1007.7 682.913 L1007.14 682.913 L1006.58 682.913 L1006.02 682.913 L1005.46 682.913 L1004.91 682.913 L1004.35 682.913 L1003.79 682.913 L1003.23 682.913 L1002.67 682.913 L1002.11 682.913 L1001.55 682.913 L1000.99 682.913 L1000.43 682.913 L999.872 682.913 L999.313 682.913 L998.754 682.913 L998.194 682.913 L997.635 682.913 L997.076 682.913 L996.517 682.913 L995.957 682.913 L995.398 682.913 L994.839 682.913 L994.28 682.913 L993.72 682.913 L993.161 682.913 L992.602 682.913 L992.043 682.913 L991.483 682.913 L990.924 682.913 L990.365 682.913 L989.806 682.913 L989.246 682.913 L988.687 682.913 L988.128 682.913 L987.569 682.913 L987.009 682.913 L986.45 682.913 L985.891 682.913 L985.332 682.913 L984.772 682.913 L984.213 682.913 L983.654 682.913 L983.095 682.913 L982.535 682.913 L981.976 682.913 L981.417 682.913 L980.858 682.913 L980.298 682.913 L979.739 682.913 L979.18 682.913 L978.621 682.913 L978.061 682.913 L977.502 682.913 L976.943 682.913 L976.384 682.913 L975.824 682.913 L975.265 682.913 L974.706 682.913 L974.147 682.913 L973.587 682.913 L973.028 682.913 L972.469 682.913 L971.91 682.913 L971.35 682.913 L970.791 682.913 L970.232 682.913 L969.673 682.913 L969.113 682.913 L968.554 682.913 L967.995 682.913 L967.436 682.913 L966.876 682.913 L966.317 682.913 L965.758 682.913 L965.199 682.913 L964.639 682.913 L964.08 682.913 L963.521 682.913 L962.962 682.913 L962.402 682.913 L961.843 682.913 L961.284 682.913 L960.725 682.913 L960.165 682.913 L959.606 682.913 L959.047 682.913 L958.488 682.913 L957.928 682.913 L957.369 682.913 L956.81 682.913 L956.251 682.913 L955.691 682.913 L955.132 682.913 L954.573 682.913 L954.014 682.913 L953.454 682.913 L952.895 682.913 L952.336 682.913 L951.777 682.913 L951.217 682.913 L950.658 682.913 L950.099 682.913 L949.54 682.913 L948.98 682.913 L948.421 682.913 L947.862 682.913 L947.303 682.913 L946.743 682.913 L946.184 682.913 L945.625 682.913 L945.066 682.913 L944.506 682.913 L943.947 682.913 L943.388 682.913 L942.829 682.913 L942.269 682.913 L941.71 682.913 L941.151 682.913 L940.592 682.913 L940.032 682.913 L939.473 682.913 L938.914 682.913 L938.355 682.913 L937.795 682.913 L937.236 682.913 L936.677 682.913 L936.118 682.913 L935.558 682.913 L934.999 682.913 L934.44 682.913 L933.881 682.913 L933.321 682.913 L932.762 682.913 L932.203 682.913 L931.644 682.913 L931.084 682.913 L930.525 682.913 L929.966 682.913 L929.406 682.913 L928.847 682.913 L928.288 682.913 L927.729 682.913 L927.169 682.913 L926.61 682.913 L926.051 682.913 L925.492 682.913 L924.932 682.913 L924.373 682.913 L923.814 682.913 L923.255 682.913 L922.695 682.913 L922.136 682.913 L921.577 682.913 L921.018 682.913 L920.458 682.913 L919.899 682.913 L919.34 682.913 L918.781 682.913 L918.221 682.913 L917.662 682.913 L917.103 682.913 L916.544 682.913 L915.984 682.913 L915.425 682.913 L914.866 682.913 L914.307 682.913 L913.747 682.913 L913.188 682.913 L912.629 682.913 L912.07 682.913 L911.51 682.913 L910.951 682.913 L910.392 682.913 L909.833 682.913 L909.273 682.913 L908.714 682.913 L908.155 682.913 L907.596 682.913 L907.036 682.913 L906.477 682.913 L905.918 682.913 L905.359 682.913 L904.799 682.913 L904.24 682.913 L903.681 682.913 L903.122 682.913 L902.562 682.913 L902.003 682.913 L901.444 682.913 L900.885 682.913 L900.325 682.913 L899.766 682.913 L899.207 682.913 L898.648 682.913 L898.088 682.913 L897.529 682.913 L896.97 682.913 L896.411 682.913 L895.851 682.913 L895.292 682.913 L894.733 682.913 L894.174 682.913 L893.614 682.913 L893.055 682.913 L892.496 682.913 L891.937 682.913 L891.377 682.913 L890.818 682.913 L890.259 682.913 L889.7 682.913 L889.14 682.913 L888.581 682.913 L888.022 682.913 L887.463 682.913 L886.903 682.913 L886.344 682.913 L885.785 682.913 L885.226 682.913 L884.666 682.913 L884.107 682.913 L883.548 682.913 L882.989 682.913 L882.429 682.913 L881.87 682.913 L881.311 682.913 L880.752 682.913 L880.192 682.913 L879.633 682.913 L879.074 682.913 L878.515 682.913 L877.955 682.913 L877.396 682.913 L876.837 682.913 L876.278 682.913 L875.718 682.913 L875.159 682.913 L874.6 682.913 L874.041 682.913 L873.481 682.913 L872.922 682.913 L872.363 682.913 L871.804 682.913 L871.244 682.913 L870.685 682.913 L870.126 682.913 L869.567 682.913 L869.007 682.913 L868.448 682.913 L867.889 682.913 L867.33 682.913 L866.77 682.913 L866.211 682.913 L865.652 682.913 L865.093 682.913 L864.533 682.913 L863.974 682.913 L863.415 682.913 L862.856 682.913 L862.296 682.913 L861.737 682.913 L861.178 682.913 L860.619 682.913 L860.059 682.913 L859.5 682.913 L858.941 682.913 L858.382 682.913 L857.822 682.913 L857.263 682.913 L856.704 682.913 L856.145 682.913 L855.585 682.913 L855.026 682.913 L854.467 682.913 L853.908 682.913 L853.348 682.913 L852.789 682.913 L852.23 682.913 L851.671 682.913 L851.111 682.913 L850.552 682.913 L849.993 682.913 L849.434 682.913 L848.874 682.913 L848.315 682.913 L847.756 682.913 L847.197 682.913 L846.637 682.913 L846.078 682.913 L845.519 682.913 L844.96 682.913 L844.4 682.913 L843.841 682.913 L843.282 682.913 L842.723 682.913 L842.163 682.913 L841.604 682.913 L841.045 682.913 L840.486 682.913 L839.926 682.913 L839.367 682.913 L838.808 682.913 L838.249 682.913 L837.689 682.913 L837.13 682.913 L836.571 682.913 L836.012 682.913 L835.452 682.913 L834.893 682.913 L834.334 682.913 L833.775 682.913 L833.215 682.913 L832.656 682.913 L832.097 682.913 L831.538 682.913 L830.978 682.913 L830.419 682.913 L829.86 682.913 L829.301 682.913 L828.741 682.913 L828.182 682.913 L827.623 682.913 L827.064 682.913 L826.504 682.913 L825.945 682.913 L825.386 682.913 L824.827 682.913 L824.267 682.913 L823.708 682.913 L823.149 682.913 L822.59 682.913 L822.03 682.913 L821.471 682.913 L820.912 682.913 L820.353 682.913 L819.793 682.913 L819.234 682.913 L818.675 682.913 L818.116 682.913 L817.556 682.913 L816.997 682.913 L816.438 682.913 L815.879 682.913 L815.319 682.913 L814.76 682.913 L814.201 682.913 L813.642 682.913 L813.082 682.913 L812.523 682.913 L811.964 682.913 L811.405 682.913 L810.845 682.913 L810.286 682.913 L809.727 682.913 L809.168 682.913 L808.608 682.913 L808.049 682.913 L807.49 682.913 L806.931 682.913 L806.371 682.913 L805.812 682.913 L805.253 682.913 L804.693 682.913 L804.134 682.913 L803.575 682.913 L803.016 682.913 L802.456 682.913 L801.897 682.913 L801.338 682.913 L800.779 682.913 L800.219 682.913 L799.66 682.913 L799.101 682.913 L798.542 682.913 L797.982 682.913 L797.423 682.913 L796.864 682.913 L796.305 682.913 L795.745 682.913 L795.186 682.913 L794.627 682.913 L794.068 682.913 L793.508 682.913 L792.949 682.913 L792.39 682.913 L791.831 682.913 L791.271 682.913 L790.712 682.913 L790.153 682.913 L789.594 682.913 L789.034 682.913 L788.475 682.913 L787.916 682.913 L787.357 682.913 L786.797 682.913 L786.238 682.913 L785.679 682.913 L785.12 682.913 L784.56 682.913 L784.001 682.913 L783.442 682.913 L782.883 682.913 L782.323 682.913 L781.764 682.913 L781.205 682.913 L780.646 682.913 L780.086 682.913 L779.527 682.913 L778.968 682.913 L778.409 682.913 L777.849 682.913 L777.29 682.913 L776.731 682.913 L776.172 682.913 L775.612 682.913 L775.053 682.913 L774.494 682.913 L773.935 682.913 L773.375 682.913 L772.816 682.913 L772.257 682.913 L771.698 682.913 L771.138 682.913 L770.579 682.913 L770.02 682.913 L769.461 682.913 L768.901 682.913 L768.342 682.913 L767.783 682.913 L767.224 682.913 L766.664 682.913 L766.105 682.913 L765.546 682.913 L764.987 682.913 L764.427 682.913 L763.868 682.913 L763.309 682.913 L762.75 682.913 L762.19 682.913 L761.631 682.913 L761.072 682.913 L760.513 682.913 L759.953 682.913 L759.394 682.913 L758.835 682.913 L758.276 682.913 L757.716 682.913 L757.157 682.913 L756.598 682.913 L756.039 682.913 L755.479 682.913 L754.92 682.913 L754.361 682.913 L753.802 682.913 L753.242 682.913 L752.683 682.913 L752.124 682.913 L751.565 682.913 L751.005 682.913 L750.446 682.913 L749.887 682.913 L749.328 682.913 L748.768 682.913 L748.209 682.913 L747.65 682.913 L747.091 682.913 L746.531 682.913 L745.972 682.913 L745.413 682.913 L744.854 682.913 L744.294 682.913 L743.735 682.913 L743.176 682.913 L742.617 682.913 L742.057 682.913 L741.498 682.913 L740.939 682.913 L740.38 682.913 L739.82 682.913 L739.261 682.913 L738.702 682.913 L738.143 682.913 L737.583 682.913 L737.024 682.913 L736.465 682.913 L735.906 682.913 L735.346 682.913 L734.787 682.913 L734.228 682.913 L733.669 682.913 L733.109 682.913 L732.55 682.913 L731.991 682.913 L731.432 682.913 L730.872 682.913 L730.313 682.913 L729.754 682.913 L729.195 682.913 L728.635 682.913 L728.076 682.913 L727.517 682.913 L726.958 682.913 L726.398 682.913 L725.839 682.913 L725.28 682.913 L724.721 682.913 L724.161 682.913 L723.602 682.913 L723.043 682.913 L722.484 682.913 L721.924 682.913 L721.365 682.913 L720.806 682.913 L720.247 682.913  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip883)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.878 720.806,683.878 721.365,683.878 721.924,683.878 722.484,683.878 723.043,683.878 723.602,683.878 724.161,683.878 724.721,683.878 725.28,683.878 725.839,683.878 726.398,683.878 726.958,683.878 727.517,683.878 728.076,683.878 728.635,683.878 729.195,683.878 729.754,683.878 730.313,683.878 730.872,683.878 731.432,683.878 731.991,683.878 732.55,683.878 733.109,683.878 733.669,683.878 734.228,683.878 734.787,683.878 735.346,683.878 735.906,683.878 736.465,683.878 737.024,683.878 737.583,683.878 738.143,683.878 738.702,683.878 739.261,683.878 739.82,683.878 740.38,683.878 740.939,683.878 741.498,683.878 742.057,683.878 742.617,683.878 743.176,683.878 743.735,683.878 744.294,683.878 744.854,683.878 745.413,683.878 745.972,683.878 746.531,683.878 747.091,683.878 747.65,683.878 748.209,683.878 748.768,683.878 749.328,683.878 749.887,683.878 750.446,683.878 751.005,683.878 751.565,683.878 752.124,683.878 752.683,683.878 753.242,683.878 753.802,683.878 754.361,683.878 754.92,683.878 755.479,683.878 756.039,683.878 756.598,683.878 757.157,683.878 757.716,683.878 758.276,683.878 758.835,683.878 759.394,683.878 759.953,683.878 760.513,683.878 761.072,683.878 761.631,683.878 762.19,683.878 762.75,683.878 763.309,683.878 763.868,683.878 764.427,683.878 764.987,683.878 765.546,683.878 766.105,683.878 766.664,683.878 767.224,683.878 767.783,683.878 768.342,683.878 768.901,683.878 769.461,683.878 770.02,683.878 770.579,683.878 771.138,683.878 771.698,683.878 772.257,683.878 772.816,683.878 773.375,683.878 773.935,683.878 774.494,683.878 775.053,683.878 775.612,683.878 776.172,683.878 776.731,683.878 777.29,683.878 777.849,683.878 778.409,683.878 778.968,683.878 779.527,683.878 780.086,683.878 780.646,683.878 781.205,683.878 781.764,683.878 782.323,683.878 782.883,683.878 783.442,683.878 784.001,683.878 784.56,683.878 785.12,683.878 785.679,683.878 786.238,683.878 786.797,683.878 787.357,683.878 787.916,683.878 788.475,683.878 789.034,683.878 789.594,683.878 790.153,683.878 790.712,683.878 791.271,683.878 791.831,683.878 792.39,683.878 792.949,683.878 793.508,683.878 794.068,683.878 794.627,683.878 795.186,683.878 795.745,683.878 796.305,683.878 796.864,683.878 797.423,683.878 797.982,683.878 798.542,683.878 799.101,683.878 799.66,683.878 800.219,683.878 800.779,683.878 801.338,683.878 801.897,683.878 802.456,683.878 803.016,683.878 803.575,683.878 804.134,683.878 804.693,683.878 805.253,683.878 805.812,683.878 806.371,683.878 806.931,683.878 807.49,683.878 808.049,683.878 808.608,683.878 809.168,683.878 809.727,683.878 810.286,683.878 810.845,683.878 811.405,683.878 811.964,683.878 812.523,683.878 813.082,683.878 813.642,683.878 814.201,683.878 814.76,683.878 815.319,683.878 815.879,683.878 816.438,683.878 816.997,683.878 817.556,683.878 818.116,683.878 818.675,683.878 819.234,683.878 819.793,683.878 820.353,683.878 820.912,683.878 821.471,683.878 822.03,683.878 822.59,683.878 823.149,683.878 823.708,683.878 824.267,683.878 824.827,683.878 825.386,683.878 825.945,683.878 826.504,683.878 827.064,683.878 827.623,683.878 828.182,683.878 828.741,683.878 829.301,683.878 829.86,683.878 830.419,683.878 830.978,683.878 831.538,683.878 832.097,683.878 832.656,683.878 833.215,683.878 833.775,683.878 834.334,683.878 834.893,683.878 835.452,683.878 836.012,683.878 836.571,683.878 837.13,683.878 837.689,683.878 838.249,683.878 838.808,683.878 839.367,683.878 839.926,683.878 840.486,683.878 841.045,683.878 841.604,683.878 842.163,683.878 842.723,683.878 843.282,683.878 843.841,683.878 844.4,683.878 844.96,683.878 845.519,683.878 846.078,683.878 846.637,683.878 847.197,683.878 847.756,683.878 848.315,683.878 848.874,683.878 849.434,683.878 849.993,683.878 850.552,683.878 851.111,683.878 851.671,683.878 852.23,683.878 852.789,683.878 853.348,683.878 853.908,683.878 854.467,683.878 855.026,683.878 855.585,683.878 856.145,683.878 856.704,683.878 857.263,683.878 857.822,683.878 858.382,683.878 858.941,683.878 859.5,683.878 860.059,683.878 860.619,683.878 861.178,683.878 861.737,683.878 862.296,683.878 862.856,683.878 863.415,683.878 863.974,683.878 864.533,683.878 865.093,683.878 865.652,683.878 866.211,683.878 866.77,683.878 867.33,683.878 867.889,683.878 868.448,683.878 869.007,683.878 869.567,683.878 870.126,683.878 870.685,683.878 871.244,683.878 871.804,683.878 872.363,683.878 872.922,683.878 873.481,683.878 874.041,683.878 874.6,683.878 875.159,683.878 875.718,683.878 876.278,683.878 876.837,683.878 877.396,683.878 877.955,683.878 878.515,683.878 879.074,683.878 879.633,683.878 880.192,683.878 880.752,683.878 881.311,683.878 881.87,683.878 882.429,683.878 882.989,683.878 883.548,683.878 884.107,683.878 884.666,683.878 885.226,683.878 885.785,683.878 886.344,683.878 886.903,683.878 887.463,683.878 888.022,683.878 888.581,683.878 889.14,683.878 889.7,683.878 890.259,683.878 890.818,683.878 891.377,683.878 891.937,683.878 892.496,683.878 893.055,683.878 893.614,683.878 894.174,683.878 894.733,683.878 895.292,683.878 895.851,683.878 896.411,683.878 896.97,683.878 897.529,683.878 898.088,683.878 898.648,683.878 899.207,683.878 899.766,683.878 900.325,683.878 900.885,683.878 901.444,683.878 902.003,683.878 902.562,683.878 903.122,683.878 903.681,683.878 904.24,683.878 904.799,683.878 905.359,683.878 905.918,683.878 906.477,683.878 907.036,683.878 907.596,683.878 908.155,683.878 908.714,683.878 909.273,683.878 909.833,683.878 910.392,683.878 910.951,683.878 911.51,683.878 912.07,683.878 912.629,683.878 913.188,683.878 913.747,683.878 914.307,683.878 914.866,683.878 915.425,683.878 915.984,683.878 916.544,683.878 917.103,683.878 917.662,683.878 918.221,683.878 918.781,683.878 919.34,683.878 919.899,683.878 920.458,683.878 921.018,683.878 921.577,683.878 922.136,683.878 922.695,683.878 923.255,683.878 923.814,683.878 924.373,683.878 924.932,683.878 925.492,683.878 926.051,683.878 926.61,683.878 927.169,683.878 927.729,683.878 928.288,683.878 928.847,683.878 929.406,683.878 929.966,683.878 930.525,683.878 931.084,683.878 931.644,683.878 932.203,683.878 932.762,683.878 933.321,683.878 933.881,683.878 934.44,683.878 934.999,683.878 935.558,683.878 936.118,683.878 936.677,683.878 937.236,683.878 937.795,683.878 938.355,683.878 938.914,683.878 939.473,683.878 940.032,683.878 940.592,683.878 941.151,683.878 941.71,683.878 942.269,683.878 942.829,683.878 943.388,683.878 943.947,683.878 944.506,683.878 945.066,683.878 945.625,683.878 946.184,683.878 946.743,683.878 947.303,683.878 947.862,683.878 948.421,683.878 948.98,683.878 949.54,683.878 950.099,683.878 950.658,683.878 951.217,683.878 951.777,683.878 952.336,683.878 952.895,683.878 953.454,683.878 954.014,683.878 954.573,683.878 955.132,683.878 955.691,683.878 956.251,683.878 956.81,683.878 957.369,683.878 957.928,683.878 958.488,683.878 959.047,683.878 959.606,683.878 960.165,683.878 960.725,683.878 961.284,683.878 961.843,683.878 962.402,683.878 962.962,683.878 963.521,683.878 964.08,683.878 964.639,683.878 965.199,683.878 965.758,683.878 966.317,683.878 966.876,683.878 967.436,683.878 967.995,683.878 968.554,683.878 969.113,683.878 969.673,683.878 970.232,683.878 970.791,683.878 971.35,683.878 971.91,683.878 972.469,683.878 973.028,683.878 973.587,683.878 974.147,683.878 974.706,683.878 975.265,683.878 975.824,683.878 976.384,683.878 976.943,683.878 977.502,683.878 978.061,683.878 978.621,683.878 979.18,683.878 979.739,683.878 980.298,683.878 980.858,683.878 981.417,683.878 981.976,683.878 982.535,683.878 983.095,683.878 983.654,683.878 984.213,683.878 984.772,683.878 985.332,683.878 985.891,683.878 986.45,683.878 987.009,683.878 987.569,683.878 988.128,683.878 988.687,683.878 989.246,683.878 989.806,683.878 990.365,683.878 990.924,683.878 991.483,683.878 992.043,683.878 992.602,683.878 993.161,683.878 993.72,683.878 994.28,683.878 994.839,683.878 995.398,683.878 995.957,683.878 996.517,683.878 997.076,683.878 997.635,683.878 998.194,683.878 998.754,683.878 999.313,683.878 999.872,683.878 1000.43,683.878 1000.99,683.878 1001.55,683.878 1002.11,683.878 1002.67,683.878 1003.23,683.878 1003.79,683.878 1004.35,683.878 1004.91,683.878 1005.46,683.878 1006.02,683.878 1006.58,683.878 1007.14,683.878 1007.7,683.878 1008.26,683.878 1008.82,683.878 1009.38,683.878 1009.94,683.878 1010.5,683.878 1011.06,683.878 1011.62,683.878 1012.18,683.878 1012.73,683.878 1013.29,683.878 1013.85,683.878 1014.41,683.878 1014.97,683.878 1015.53,683.878 1016.09,683.878 1016.65,683.878 1017.21,683.878 1017.77,683.878 1018.33,683.878 1018.89,683.878 1019.45,683.878 1020.01,683.878 1020.56,683.878 1021.12,683.878 1021.68,683.878 1022.24,683.878 1022.8,683.878 1023.36,683.878 1023.92,683.878 1024.48,683.878 1025.04,683.878 1025.6,683.878 1026.16,683.878 1026.72,683.878 1027.28,683.878 1027.83,683.878 1028.39,683.878 1028.95,683.878 1029.51,683.878 1030.07,683.878 1030.63,683.878 1031.19,683.878 1031.75,683.878 1032.31,683.878 1032.87,683.878 1033.43,683.878 1033.99,683.878 1034.55,683.878 1035.1,683.878 1035.66,683.878 1036.22,683.878 1036.78,683.878 1037.34,683.878 1037.9,683.878 1038.46,683.878 1039.02,683.878 1039.58,683.878 1040.14,683.878 1040.7,683.878 1041.26,683.878 1041.82,683.878 1042.38,683.878 1042.93,683.878 1043.49,683.878 1044.05,683.878 1044.61,683.878 1045.17,683.878 1045.73,683.878 1046.29,683.878 1046.85,683.878 1047.41,683.878 1047.97,683.878 1048.53,683.878 1049.09,683.878 1049.65,683.878 1050.2,683.878 1050.76,683.878 1051.32,683.878 1051.88,683.878 1052.44,683.878 1053,683.878 1053.56,683.878 1054.12,683.878 1054.68,683.878 1055.24,683.878 1055.8,683.878 1056.36,683.878 1056.92,683.878 1057.48,683.878 1058.03,683.878 1058.59,683.878 1059.15,683.878 1059.71,683.878 1060.27,683.878 1060.83,683.878 1061.39,683.878 1061.95,683.878 1062.51,683.878 1063.07,683.878 1063.63,683.878 1064.19,683.878 1064.75,683.878 1065.3,683.878 1065.86,683.878 1066.42,683.878 1066.98,683.878 1067.54,683.878 1068.1,683.878 1068.66,683.878 1069.22,683.878 1069.78,683.878 1070.34,683.878 1070.9,683.878 1071.46,683.878 1072.02,683.878 1072.57,683.878 1073.13,683.878 1073.69,683.878 1074.25,683.878 1074.81,683.878 1075.37,683.878 1075.93,683.878 1076.49,683.878 1077.05,683.878 1077.61,683.878 1078.17,683.878 1078.73,683.878 1079.29,683.878 1079.85,683.878 1080.4,683.878 1080.96,683.878 1081.52,683.878 1082.08,683.878 1082.64,683.878 1083.2,683.878 1083.76,683.878 1084.32,683.878 1084.88,683.878 1085.44,683.878 1086,683.878 1086.56,683.878 1087.12,683.878 1087.67,683.878 1088.23,683.878 1088.79,683.878 1089.35,683.878 1089.91,683.878 1090.47,683.878 1091.03,683.878 1091.59,683.878 1092.15,683.878 1092.71,683.878 1093.27,683.878 1093.83,683.878 1094.39,683.878 1094.94,683.878 1095.5,683.878 1096.06,683.878 1096.62,683.878 1097.18,683.878 1097.74,683.878 1098.3,683.878 1098.86,683.878 1099.42,683.878 1099.98,683.878 1100.54,683.878 1101.1,683.878 1101.66,683.878 1102.22,683.878 1102.77,683.878 1103.33,683.878 1103.89,683.878 1104.45,683.878 1105.01,683.878 1105.57,683.878 1106.13,683.878 1106.69,683.878 1107.25,683.878 1107.81,683.878 1108.37,683.878 1108.93,683.878 1109.49,683.878 1110.04,683.878 1110.6,683.878 1111.16,683.878 1111.72,683.878 1112.28,683.878 1112.84,683.878 1113.4,683.878 1113.96,683.878 1114.52,683.878 1115.08,683.878 1115.64,683.878 1116.2,683.878 1116.76,683.878 1117.31,683.878 1117.87,683.878 1118.43,683.878 1118.99,683.878 1119.55,683.878 1120.11,683.878 1120.67,683.878 1121.23,683.878 1121.79,683.878 1122.35,683.878 1122.91,683.878 1123.47,683.878 1124.03,683.878 1124.59,683.878 1125.14,683.878 1125.7,683.878 1126.26,683.878 1126.82,683.878 1127.38,683.878 1127.94,683.878 1128.5,683.878 1129.06,683.878 1129.62,683.878 1130.18,683.878 1130.74,683.878 1131.3,683.878 1131.86,683.878 1132.41,683.878 1132.97,683.878 1133.53,683.878 1134.09,683.878 1134.65,683.878 1135.21,683.878 1135.77,683.878 1136.33,683.878 1136.89,683.878 1137.45,683.878 1138.01,683.878 1138.57,683.878 1139.13,683.878 1139.68,683.878 1140.24,683.878 1140.8,683.878 1141.36,683.878 1141.92,683.878 1142.48,683.878 1143.04,683.878 1143.6,683.878 1144.16,683.878 1144.72,683.878 1145.28,683.878 1145.84,683.878 1146.4,683.878 1146.96,683.878 1147.51,683.878 1148.07,683.878 1148.63,683.878 1149.19,683.878 1149.75,683.878 1150.31,683.878 1150.87,683.878 1151.43,683.878 1151.99,683.878 1152.55,683.878 1153.11,683.878 1153.67,683.878 1154.23,683.878 1154.78,683.878 1155.34,683.878 1155.9,683.878 1156.46,683.878 1157.02,683.878 1157.58,683.878 1158.14,683.878 1158.7,683.878 1159.26,683.878 1159.82,683.878 1160.38,683.878 1160.94,683.878 1161.5,683.878 1162.05,683.878 1162.61,683.878 1163.17,683.878 1163.73,683.878 1164.29,683.878 1164.85,683.878 1165.41,683.878 1165.97,683.878 1166.53,683.878 1167.09,683.878 1167.65,683.878 1168.21,683.878 1168.77,683.878 1169.33,683.878 1169.88,683.878 1170.44,683.878 1171,683.878 1171.56,683.878 1172.12,683.878 1172.68,683.878 1173.24,683.878 1173.8,683.878 1174.36,683.878 1174.92,683.878 1175.48,683.878 1176.04,683.878 1176.6,683.878 1177.15,683.878 1177.71,683.878 1178.27,683.878 1178.83,683.878 1179.39,683.878 1179.95,683.878 1180.51,683.878 1181.07,683.878 1181.63,683.878 1182.19,683.878 1182.75,683.878 1183.31,683.878 1183.87,683.878 1184.43,683.878 1184.98,683.878 1185.54,683.878 1186.1,683.878 1186.66,683.878 1187.22,683.878 1187.78,683.878 1188.34,683.878 1188.9,683.878 1189.46,683.878 1190.02,683.878 1190.58,683.878 1191.14,683.878 1191.7,683.878 1192.25,683.878 1192.81,683.878 1193.37,683.878 1193.93,683.878 1194.49,683.878 1195.05,683.878 1195.61,683.878 1196.17,683.878 1196.73,683.878 1197.29,683.878 1197.85,683.878 1198.41,683.878 1198.97,683.878 1199.52,683.878 1200.08,683.878 1200.64,683.878 1201.2,683.878 1201.76,683.878 1202.32,683.878 1202.88,683.878 1203.44,683.878 1204,683.878 1204.56,683.878 1205.12,683.878 1205.68,683.878 1206.24,683.878 1206.8,683.878 1207.35,683.878 1207.91,683.878 1208.47,683.878 1209.03,683.878 1209.59,683.878 1210.15,683.878 1210.71,683.878 1211.27,683.878 1211.83,683.878 1212.39,683.878 1212.95,683.878 1213.51,683.878 1214.07,683.878 1214.62,683.878 1215.18,683.878 1215.74,683.878 1216.3,683.878 1216.86,683.878 1217.42,683.878 1217.98,683.878 1218.54,683.878 1219.1,683.878 1219.66,683.878 1220.22,683.878 1220.78,683.878 1221.34,683.878 1221.89,683.878 1222.45,683.878 1223.01,683.878 1223.57,683.878 1224.13,683.878 1224.69,683.878 1225.25,683.878 1225.81,683.878 1226.37,683.878 1226.93,683.878 1227.49,683.878 1228.05,683.878 1228.61,683.878 1229.17,683.878 1229.72,683.878 1230.28,683.878 1230.84,683.878 1231.4,683.878 1231.96,683.878 1232.52,683.878 1233.08,683.878 1233.64,683.878 1234.2,683.878 1234.76,683.878 1235.32,683.878 1235.88,683.878 1236.44,683.878 1236.99,683.878 1237.55,683.878 1238.11,683.878 1238.67,683.878 1239.23,683.878 1239.79,683.878 1240.35,683.878 1240.91,683.878 1241.47,683.878 1242.03,683.878 1242.59,683.878 1243.15,683.878 1243.71,683.878 1244.26,683.878 1244.82,683.878 1245.38,683.878 1245.94,683.878 1246.5,683.878 1247.06,683.878 1247.62,683.878 1248.18,683.878 1248.74,683.878 1249.3,683.878 1249.86,683.878 1250.42,683.878 1250.98,683.878 1251.54,683.878 1252.09,683.878 1252.65,683.878 1253.21,683.878 1253.77,683.878 1254.33,683.878 1254.89,683.878 1255.45,683.878 1256.01,683.878 1256.57,683.878 1257.13,683.878 1257.69,683.878 1258.25,683.878 1258.81,683.878 1259.36,683.878 1259.92,683.878 1260.48,683.878 1261.04,683.878 1261.6,683.878 1262.16,683.878 1262.72,683.878 1263.28,683.878 1263.84,683.878 1264.4,683.878 1264.96,683.878 1265.52,683.878 1266.08,683.878 1266.63,683.878 1267.19,683.878 1267.75,683.878 1268.31,683.878 1268.87,683.878 1269.43,683.878 1269.99,683.878 1270.55,683.878 1271.11,683.878 1271.67,683.878 1272.23,683.878 1272.79,683.878 1273.35,683.878 1273.91,683.878 1274.46,683.878 1275.02,683.878 1275.58,683.878 1276.14,683.878 1276.7,683.878 1277.26,683.878 1277.82,683.878 1278.38,683.878 1278.94,683.878 1279.5,683.878 1280.06,683.878 1280.62,683.878 1281.18,683.878 1281.73,683.878 1282.29,683.878 1282.85,683.878 1283.41,683.878 1283.97,683.878 1284.53,683.878 1285.09,683.878 1285.65,683.878 1286.21,683.878 1286.77,683.878 1287.33,683.878 1287.89,683.878 1288.45,683.878 1289,683.878 1289.56,683.878 1290.12,683.878 1290.68,683.878 1291.24,683.878 1291.8,683.878 1292.36,683.878 1292.92,683.878 1293.48,683.878 1294.04,683.878 1294.6,683.878 1295.16,683.878 1295.72,683.878 1296.28,683.878 1296.83,683.878 1297.39,683.878 1297.95,683.878 1298.51,683.878 1299.07,683.878 1299.63,683.878 1300.19,683.878 1300.75,683.878 1301.31,683.878 1301.87,683.878 1302.43,683.878 1302.99,683.878 1303.55,683.878 1304.1,683.878 1304.66,683.878 1305.22,683.878 1305.78,683.878 1306.34,683.878 1306.9,683.878 1307.46,683.878 1308.02,683.878 1308.58,683.878 1309.14,683.878 1309.7,683.878 1310.26,683.878 1310.82,683.878 1311.38,683.878 1311.93,683.878 1312.49,683.878 1313.05,683.878 1313.61,683.878 1314.17,683.878 1314.73,683.878 1315.29,683.878 1315.85,683.878 1316.41,683.878 1316.97,683.878 1317.53,683.878 1318.09,683.878 1318.65,683.878 1319.2,683.878 1319.76,683.878 1320.32,683.878 1320.88,683.878 1321.44,683.878 1322,683.878 1322.56,683.878 1323.12,683.878 1323.68,683.878 1324.24,683.878 1324.8,683.878 1325.36,683.878 1325.92,683.878 1326.47,683.878 1327.03,683.878 1327.59,683.878 1328.15,683.878 1328.71,683.878 1329.27,683.878 1329.83,683.878 1330.39,683.878 1330.95,683.878 1331.51,683.878 1332.07,683.878 1332.63,683.878 1333.19,683.878 1333.75,683.878 1334.3,683.878 1334.86,683.878 1335.42,683.878 1335.98,683.878 1336.54,683.878 1337.1,683.878 1337.66,683.878 1338.22,683.878 1338.78,683.878 1339.34,683.878 1339.9,683.878 1340.46,683.878 1341.02,683.878 1341.57,683.878 1342.13,683.878 1342.69,683.878 1343.25,683.878 1343.81,683.878 1344.37,683.878 1344.93,683.878 1345.49,683.878 1346.05,683.878 1346.61,683.878 1347.17,683.878 1347.73,683.878 1348.29,683.878 1348.84,683.878 1349.4,683.878 1349.96,683.878 1350.52,683.878 1351.08,683.878 1351.64,683.878 1352.2,683.878 1352.76,683.878 1353.32,683.878 1353.88,683.878 1354.44,683.878 1355,683.878 1355.56,683.878 1356.12,683.878 1356.67,683.878 1357.23,683.878 1357.79,683.878 1358.35,683.878 1358.91,683.878 1359.47,683.878 1360.03,683.878 1360.59,683.878 1361.15,683.878 1361.71,683.878 1362.27,683.878 1362.83,683.878 1363.39,683.878 1363.94,683.878 1364.5,683.878 1365.06,683.878 1365.62,683.878 1366.18,683.878 1366.74,683.878 1367.3,683.878 1367.86,683.878 1368.42,683.878 1368.98,683.878 1369.54,683.878 1370.1,683.878 1370.66,683.878 1371.21,683.878 1371.77,683.878 1372.33,683.878 1372.89,683.878 1373.45,683.878 1374.01,683.878 1374.57,683.878 1375.13,683.878 1375.69,683.878 1376.25,683.878 1376.81,683.878 1377.37,683.878 1377.93,683.878 1378.49,683.878 1379.04,683.878 1379.6,683.878 1380.16,683.878 1380.72,683.878 1381.28,683.878 1381.84,683.878 1382.4,683.878 1382.96,683.878 1383.52,683.878 1384.08,683.878 1384.64,683.878 1385.2,683.878 1385.76,683.878 1386.31,683.878 1386.87,683.878 1387.43,683.878 1387.99,683.878 1388.55,683.878 1389.11,683.878 1389.67,683.878 1390.23,683.878 1390.79,683.878 1391.35,683.878 1391.91,683.878 1392.47,683.878 1393.03,683.878 1393.58,683.878 1394.14,683.878 1394.7,683.878 1395.26,683.878 1395.82,683.878 1396.38,683.878 1396.94,683.878 1397.5,683.878 1398.06,683.878 1398.62,683.878 1399.18,683.878 1399.74,683.878 1400.3,683.878 1400.86,683.878 1401.41,683.878 1401.97,683.878 1402.53,683.878 1403.09,683.878 1403.65,683.878 1404.21,683.878 1404.77,683.878 1405.33,683.878 1405.89,683.878 1406.45,683.878 1407.01,683.878 1407.57,683.878 1408.13,683.878 1408.68,683.878 1409.24,683.878 1409.8,683.878 1410.36,683.878 1410.92,683.878 1411.48,683.878 1412.04,683.878 1412.6,683.878 1413.16,683.878 1413.72,683.878 1414.28,683.878 1414.84,683.878 1415.4,683.878 1415.95,683.878 1416.51,683.878 1417.07,683.878 1417.63,683.878 1418.19,683.878 1418.75,683.878 1419.31,683.878 1419.87,683.878 1420.43,683.878 1420.99,683.878 1421.55,683.878 1422.11,683.878 1422.67,683.878 1423.23,683.878 1423.78,683.878 1424.34,683.878 1424.9,683.878 1425.46,683.878 1426.02,683.878 1426.58,683.878 1427.14,683.878 1427.7,683.878 1428.26,683.878 1428.82,683.878 1429.38,683.878 1429.94,683.878 1430.5,683.878 1431.05,683.878 1431.61,683.878 1432.17,683.878 1432.73,683.878 1433.29,683.878 1433.85,683.878 1434.41,683.878 1434.97,683.878 1435.53,683.878 1436.09,683.878 1436.65,683.878 1437.21,683.878 1437.77,683.878 1438.33,683.878 1438.88,683.878 1439.44,683.878 1440,683.878 1440.56,683.878 1441.12,683.878 1441.68,683.878 1442.24,683.878 1442.8,683.878 1443.36,683.878 1443.92,683.878 1444.48,683.878 1445.04,683.878 1445.6,683.878 1446.15,683.878 1446.71,683.878 1447.27,683.878 1447.83,683.878 1448.39,683.878 1448.95,683.878 1449.51,683.878 1450.07,683.878 1450.63,683.878 1451.19,683.878 1451.75,683.878 1452.31,683.878 1452.87,683.878 1453.42,683.878 1453.98,683.878 1454.54,683.878 1455.1,683.878 1455.66,683.878 1456.22,683.878 1456.78,683.878 1457.34,683.878 1457.9,683.878 1458.46,683.878 1459.02,683.878 1459.58,683.878 1460.14,683.878 1460.7,683.878 1461.25,683.878 1461.81,683.878 1462.37,683.878 1462.93,683.878 1463.49,683.878 1464.05,683.878 1464.61,683.878 1465.17,683.878 1465.73,683.878 1466.29,683.878 1466.85,683.878 1467.41,683.878 1467.97,683.878 1468.52,683.878 1469.08,683.878 1469.64,683.878 1470.2,683.878 1470.76,683.878 1471.32,683.878 1471.88,683.878 1472.44,683.878 1473,683.878 1473.56,683.878 1474.12,683.878 1474.68,683.878 1475.24,683.878 1475.79,683.878 1476.35,683.878 1476.91,683.878 1477.47,683.878 1478.03,683.878 1478.59,683.878 1479.15,683.878 1479.71,683.878 1480.27,683.878 1480.83,683.878 1481.39,683.878 1481.95,683.878 1482.51,683.878 1483.07,683.878 1483.62,683.878 1484.18,683.878 1484.74,683.878 1485.3,683.878 1485.86,683.878 1486.42,683.878 1486.98,683.878 1487.54,683.878 1488.1,683.878 1488.66,683.878 1489.22,683.878 1489.78,683.878 1490.34,683.878 1490.89,683.878 1491.45,683.878 1492.01,683.878 1492.57,683.878 1493.13,683.878 1493.69,683.878 1494.25,683.878 1494.81,683.878 1495.37,683.878 1495.93,683.878 1496.49,683.878 1497.05,683.878 1497.61,683.878 1498.16,683.878 1498.72,683.878 1499.28,683.878 1499.84,683.878 1500.4,683.878 1500.96,683.878 1501.52,683.878 1502.08,683.878 1502.64,683.878 1503.2,683.878 1503.76,683.878 1504.32,683.878 1504.88,683.878 1505.44,683.878 1505.99,683.878 1506.55,683.878 1507.11,683.878 1507.67,683.878 1508.23,683.878 1508.79,683.878 1509.35,683.878 1509.91,683.878 1510.47,683.878 1511.03,683.878 1511.59,683.878 1512.15,683.878 1512.71,683.878 1513.26,683.878 1513.82,683.878 1514.38,683.878 1514.94,683.878 1515.5,683.878 1516.06,683.878 1516.62,683.878 1517.18,683.878 1517.74,683.878 1518.3,683.878 1518.86,683.878 1519.42,683.878 1519.98,683.878 1520.53,683.878 1521.09,683.878 1521.65,683.878 1522.21,683.878 1522.77,683.878 1523.33,683.878 1523.89,683.878 1524.45,683.878 1525.01,683.878 1525.57,683.878 1526.13,683.878 1526.69,683.878 1527.25,683.878 1527.81,683.878 1528.36,683.878 1528.92,683.878 1529.48,683.878 1530.04,683.878 1530.6,683.878 1531.16,683.878 1531.72,683.878 1532.28,683.878 1532.84,683.878 1533.4,683.878 1533.96,683.878 1534.52,683.878 1535.08,683.878 1535.63,683.878 1536.19,683.878 1536.75,683.878 1537.31,683.878 1537.87,683.878 1538.43,683.878 1538.99,683.878 1539.55,683.878 1540.11,683.878 1540.67,683.878 1541.23,683.878 1541.79,683.878 1542.35,683.878 1542.9,683.878 1543.46,683.878 1544.02,683.878 1544.58,683.878 1545.14,683.878 1545.7,683.878 1546.26,683.878 1546.82,683.878 1547.38,683.878 1547.94,683.878 1548.5,683.878 1549.06,683.878 1549.62,683.878 1550.18,683.878 1550.73,683.878 1551.29,683.878 1551.85,683.878 1552.41,683.878 1552.97,683.878 1553.53,683.878 1554.09,683.878 1554.65,683.878 1555.21,683.878 1555.77,683.878 1556.33,683.878 1556.89,683.878 1557.45,683.878 1558,683.878 1558.56,683.878 1559.12,683.878 1559.68,683.878 1560.24,683.878 1560.8,683.878 1561.36,683.878 1561.92,683.878 1562.48,683.878 1563.04,683.878 1563.6,683.878 1564.16,683.878 1564.72,683.878 1565.28,683.878 1565.83,683.878 1566.39,683.878 1566.95,683.878 1567.51,683.878 1568.07,683.878 1568.63,683.878 1569.19,683.878 1569.75,683.878 1570.31,683.878 1570.87,683.878 1571.43,683.878 1571.99,683.878 1572.55,683.878 1573.1,683.878 1573.66,683.878 1574.22,683.878 1574.78,683.878 1575.34,683.878 1575.9,683.878 1576.46,683.878 1577.02,683.878 1577.58,683.878 1578.14,683.878 1578.7,683.878 1579.26,683.878 1579.82,683.878 1580.37,683.878 1580.93,683.878 1581.49,683.878 1582.05,683.878 1582.61,683.878 1583.17,683.878 1583.73,683.878 1584.29,683.878 1584.85,683.878 1585.41,683.878 1585.97,683.878 1586.53,683.878 1587.09,683.878 1587.65,683.878 1588.2,683.878 1588.76,683.878 1589.32,683.878 1589.88,683.878 1590.44,683.878 1591,683.878 1591.56,683.878 1592.12,683.878 1592.68,683.878 1593.24,683.878 1593.8,683.878 1594.36,683.878 1594.92,683.878 1595.47,683.878 1596.03,683.878 1596.59,683.878 1597.15,683.878 1597.71,683.878 1598.27,683.878 1598.83,683.878 1599.39,683.878 1599.95,683.878 1600.51,683.878 1601.07,683.878 1601.63,683.878 1602.19,683.878 1602.74,683.878 1603.3,683.878 1603.86,683.878 1604.42,683.878 1604.98,683.878 1605.54,683.878 1606.1,683.878 1606.66,683.878 1607.22,683.878 1607.78,683.878 1608.34,683.878 1608.9,683.878 1609.46,683.878 1610.02,683.878 1610.57,683.878 1611.13,683.878 1611.69,683.878 1612.25,683.878 1612.81,683.878 1613.37,683.878 1613.93,683.878 1614.49,683.878 1615.05,683.878 1615.61,683.878 1616.17,683.878 1616.73,683.878 1617.29,683.878 1617.84,683.878 1618.4,683.878 1618.96,683.878 1619.52,683.878 1620.08,683.878 1620.64,683.878 1621.2,683.878 1621.76,683.878 1622.32,683.878 1622.88,683.878 1623.44,683.878 1624,683.878 1624.56,683.878 1625.11,683.878 1625.67,683.878 1626.23,683.878 1626.79,683.878 1627.35,683.878 1627.91,683.878 1628.47,683.878 1629.03,683.878 1629.59,683.878 1630.15,683.878 1630.71,683.878 1631.27,683.878 1631.83,683.878 1632.39,683.878 1632.94,683.878 1633.5,683.878 1634.06,683.878 1634.62,683.878 1635.18,683.878 1635.74,683.878 1636.3,683.878 1636.86,683.878 1637.42,683.878 1637.98,683.878 1638.54,683.878 1639.1,683.878 1639.66,683.878 1640.21,683.878 1640.77,683.878 1641.33,683.878 1641.89,683.878 1642.45,683.878 1643.01,683.878 1643.57,683.878 1644.13,683.878 1644.69,683.878 1645.25,683.878 1645.81,683.878 1646.37,683.878 1646.93,683.878 1647.48,683.878 1648.04,683.878 1648.6,683.878 1649.16,683.878 1649.72,683.878 1650.28,683.878 1650.84,683.878 1651.4,683.878 1651.96,683.878 1652.52,683.878 1653.08,683.878 1653.64,683.878 1654.2,683.878 1654.76,683.878 1655.31,683.878 1655.87,683.878 1656.43,683.878 1656.99,683.878 1657.55,683.878 1658.11,683.878 1658.67,683.878 1659.23,683.878 1659.79,683.878 1660.35,683.878 1660.91,683.878 1661.47,683.878 1662.03,683.878 1662.58,683.878 1663.14,683.878 1663.7,683.878 1664.26,683.878 1664.82,683.878 1665.38,683.878 1665.94,683.878 1666.5,683.878 1667.06,683.878 1667.62,683.878 1668.18,683.878 1668.74,683.878 1669.3,683.878 1669.85,683.878 1670.41,683.878 1670.97,683.878 1671.53,683.878 1672.09,683.878 1672.65,683.878 1673.21,683.878 1673.77,683.878 1674.33,683.878 1674.89,683.878 1675.45,683.878 1676.01,683.878 1676.57,683.878 1677.13,683.878 1677.68,683.878 1678.24,683.878 1678.8,683.878 1679.36,683.878 1679.92,683.878 1680.48,683.878 1681.04,683.878 1681.6,683.878 1682.16,683.878 1682.72,683.878 1683.28,683.878 1683.84,683.878 1684.4,683.878 1684.95,683.878 1685.51,683.878 1686.07,683.878 1686.63,683.878 1687.19,683.878 1687.75,683.878 1688.31,683.878 1688.87,683.878 1689.43,683.878 1689.99,683.878 1690.55,683.878 1691.11,683.878 1691.67,683.878 1692.23,683.878 1692.78,683.878 1693.34,683.878 1693.9,683.878 1694.46,683.878 1695.02,683.878 1695.58,683.878 1696.14,683.878 1696.7,683.878 1697.26,683.878 1697.82,683.878 1698.38,683.878 1698.94,683.878 1699.5,683.878 1700.05,683.878 1700.61,683.878 1701.17,683.878 1701.73,683.878 1702.29,683.878 1702.85,683.878 1703.41,683.878 1703.97,683.878 1704.53,683.878 1705.09,683.878 1705.65,683.878 1706.21,683.878 1706.77,683.878 1707.32,683.878 1707.88,683.878 1708.44,683.878 1709,683.878 1709.56,683.878 1710.12,683.878 1710.68,683.878 1711.24,683.878 1711.8,683.878 1712.36,683.878 1712.92,683.878 1713.48,683.878 1714.04,683.878 1714.6,683.878 1715.15,683.878 1715.71,683.878 1716.27,683.878 1716.83,683.878 1717.39,683.878 1717.95,683.878 1718.51,683.878 1719.07,683.878 1719.63,683.878 1720.19,683.878 1720.75,683.878 1721.31,683.878 1721.87,683.878 1722.42,683.878 1722.98,683.878 1723.54,683.878 1724.1,683.878 1724.66,683.878 1725.22,683.878 1725.78,683.878 1726.34,683.878 1726.9,683.878 1727.46,683.878 1728.02,683.878 1728.58,683.878 1729.14,683.878 1729.69,683.878 1730.25,683.878 1730.81,683.878 1731.37,683.878 1731.93,683.878 1732.49,683.878 1733.05,683.878 1733.61,683.878 1734.17,683.878 1734.73,683.878 1735.29,683.878 1735.85,683.878 1736.41,683.878 1736.97,683.878 1737.52,683.878 1738.08,683.878 1738.64,683.878 1739.2,683.878 1739.76,683.878 1740.32,683.878 1740.88,683.878 1741.44,683.878 1742,683.878 1742.56,683.878 1743.12,683.878 1743.68,683.878 1744.24,683.878 1744.79,683.878 1745.35,683.878 1745.91,683.878 1746.47,683.878 1747.03,683.878 1747.59,683.878 1748.15,683.878 1748.71,683.878 1749.27,683.878 1749.83,683.878 1750.39,683.878 1750.95,683.878 1751.51,683.878 1752.06,683.878 1752.62,683.878 1753.18,683.878 1753.74,683.878 1754.3,683.878 1754.86,683.878 1755.42,683.878 1755.98,683.878 1756.54,683.878 1757.1,683.878 1757.66,683.878 1758.22,683.878 1758.78,683.878 1759.34,683.878 1759.89,683.878 1760.45,683.878 1761.01,683.878 1761.57,683.878 1762.13,683.878 1762.69,683.878 1763.25,683.878 1763.81,683.878 1764.37,683.878 1764.93,683.878 1765.49,683.878 1766.05,683.878 1766.61,683.878 1767.16,683.878 1767.72,683.878 1768.28,683.878 1768.84,683.878 1769.4,683.878 1769.96,683.878 1770.52,683.878 1771.08,683.878 1771.64,683.878 1772.2,683.878 1772.76,683.878 1773.32,683.878 1773.88,683.878 1774.43,683.878 1774.99,683.878 1775.55,683.878 1776.11,683.878 1776.67,683.878 1777.23,683.878 1777.79,683.878 1778.35,683.878 1778.91,683.878 1779.47,683.878 1780.03,683.878 1780.59,683.878 1781.15,683.878 1781.71,683.878 1782.26,683.878 1782.82,683.878 1783.38,683.878 1783.94,683.878 1784.5,683.878 1785.06,683.878 1785.62,683.878 1786.18,683.878 1786.74,683.878 1787.3,683.878 1787.86,683.878 1788.42,683.878 1788.98,683.878 1789.53,683.878 1790.09,683.878 1790.65,683.878 1791.21,683.878 1791.77,683.878 1792.33,683.878 1792.89,683.878 1793.45,683.878 1794.01,683.878 1794.57,683.878 1795.13,683.878 1795.69,683.878 1796.25,683.878 1796.8,683.878 1797.36,683.878 1797.92,683.878 1798.48,683.878 1799.04,683.878 1799.6,683.878 1800.16,683.878 1800.72,683.878 1801.28,683.878 1801.84,683.878 1802.4,683.878 1802.96,683.878 1803.52,683.878 1804.08,683.878 1804.63,683.878 1805.19,683.878 1805.75,683.878 1806.31,683.878 1806.87,683.878 1807.43,683.878 1807.99,683.878 1808.55,683.878 1809.11,683.878 1809.67,683.878 1810.23,683.878 1810.79,683.878 1811.35,683.878 1811.9,683.878 1812.46,683.878 1813.02,683.878 1813.58,683.878 1814.14,683.878 1814.7,683.878 1815.26,683.878 1815.82,683.878 1816.38,683.878 1816.94,683.878 1817.5,683.878 1818.06,683.878 1818.62,683.878 1819.18,683.878 1819.73,683.878 1820.29,683.878 1820.85,683.878 1821.41,683.878 1821.97,683.878 1822.53,683.878 1823.09,683.878 1823.65,683.878 1824.21,683.878 1824.77,683.878 1825.33,683.878 1825.89,683.878 1826.45,683.878 1827,683.878 1827.56,683.878 1828.12,683.878 1828.68,683.878 1829.24,683.878 1829.8,683.878 1830.36,683.878 1830.92,683.878 1831.48,683.878 1832.04,683.878 1832.6,683.878 1833.16,683.878 1833.72,683.878 1834.27,683.878 1834.83,683.878 1835.39,683.878 1835.95,683.878 1836.51,683.878 1837.07,683.878 1837.63,683.878 1838.19,683.878 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033915699258131 ± 0.017320197516593243\nProjected Energy: -4.016562146011715 ± (0.004923480022869242, 0.004856737007261636)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.460264</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4307e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0389e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.636e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.203e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.695e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.025e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613369\n -0.7590191922770853\n  0.13584182219621965\n  0.15789998694608443\n  0.876711441178136\n  1.5305929970973295\n  1.5835732611867446\n  3.072870330325867\n  3.1256726539518436\n  4.862107221562164\n  6.2606948503805935\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
