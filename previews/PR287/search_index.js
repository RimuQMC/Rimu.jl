var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21894905702489467 ± 0.0013394767071335135\n   G2(1) = 0.914707581929612 ± 0.0006341631080882492\n   G2(2) = 0.9811014609314587 ± 0.0007087473774497477\n   G2(3) = 0.9894328572529656 ± 0.0009367903337616577\n   G2(4) = 0.9811014609314587 ± 0.0007087473774497477\n   G2(5) = 0.914707581929612 ± 0.0006341631080882492\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.06747046050108 ± 0.13050941339879452\n   Replica 2: -4.109999856701422 ± 0.14663757939418132\n   Replica 3: -4.1053543097329195 ± 0.12912123769623068\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.29 2211.02,1003.29 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.753 2211.02,745.753 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.214 2211.02,488.214 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.676 2211.02,230.676 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.29 423.181,1003.29 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.753 423.181,745.753 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.214 423.181,488.214 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.676 423.181,230.676 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M290.043 1016.64 L306.363 1016.64 L306.363 1020.57 L284.418 1020.57 L284.418 1016.64 Q287.08 1013.88 291.664 1009.25 Q296.27 1004.6 297.451 1003.26 Q299.696 1000.73 300.576 998.998 Q301.478 997.238 301.478 995.548 Q301.478 992.794 299.534 991.058 Q297.613 989.322 294.511 989.322 Q292.312 989.322 289.858 990.086 Q287.427 990.849 284.65 992.4 L284.65 987.678 Q287.474 986.544 289.927 985.965 Q292.381 985.386 294.418 985.386 Q299.789 985.386 302.983 988.072 Q306.177 990.757 306.177 995.248 Q306.177 997.377 305.367 999.298 Q304.58 1001.2 302.474 1003.79 Q301.895 1004.46 298.793 1007.68 Q295.691 1010.87 290.043 1016.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 986.011 L334.58 986.011 L334.58 989.947 L320.506 989.947 L320.506 998.419 Q321.524 998.072 322.543 997.91 Q323.562 997.724 324.58 997.724 Q330.367 997.724 333.747 1000.9 Q337.126 1004.07 337.126 1009.48 Q337.126 1015.06 333.654 1018.16 Q330.182 1021.24 323.862 1021.24 Q321.687 1021.24 319.418 1020.87 Q317.173 1020.5 314.765 1019.76 L314.765 1015.06 Q316.849 1016.2 319.071 1016.75 Q321.293 1017.31 323.77 1017.31 Q327.774 1017.31 330.112 1015.2 Q332.45 1013.09 332.45 1009.48 Q332.45 1005.87 330.112 1003.77 Q327.774 1001.66 323.77 1001.66 Q321.895 1001.66 320.02 1002.08 Q318.168 1002.49 316.224 1003.37 L316.224 986.011 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 989.09 Q352.728 989.09 350.899 992.655 Q349.094 996.197 349.094 1003.33 Q349.094 1010.43 350.899 1014 Q352.728 1017.54 356.339 1017.54 Q359.973 1017.54 361.779 1014 Q363.608 1010.43 363.608 1003.33 Q363.608 996.197 361.779 992.655 Q359.973 989.09 356.339 989.09 M356.339 985.386 Q362.149 985.386 365.205 989.993 Q368.284 994.576 368.284 1003.33 Q368.284 1012.05 365.205 1016.66 Q362.149 1021.24 356.339 1021.24 Q350.529 1021.24 347.45 1016.66 Q344.395 1012.05 344.395 1003.33 Q344.395 994.576 347.45 989.993 Q350.529 985.386 356.339 985.386 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M286.062 728.473 L304.418 728.473 L304.418 732.408 L290.344 732.408 L290.344 740.88 Q291.363 740.533 292.381 740.371 Q293.4 740.186 294.418 740.186 Q300.205 740.186 303.585 743.357 Q306.964 746.528 306.964 751.945 Q306.964 757.524 303.492 760.625 Q300.02 763.704 293.701 763.704 Q291.525 763.704 289.256 763.334 Q287.011 762.963 284.603 762.223 L284.603 757.524 Q286.687 758.658 288.909 759.213 Q291.131 759.769 293.608 759.769 Q297.613 759.769 299.951 757.662 Q302.288 755.556 302.288 751.945 Q302.288 748.334 299.951 746.227 Q297.613 744.121 293.608 744.121 Q291.733 744.121 289.858 744.538 Q288.006 744.954 286.062 745.834 L286.062 728.473 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 731.552 Q322.566 731.552 320.737 735.116 Q318.932 738.658 318.932 745.788 Q318.932 752.894 320.737 756.459 Q322.566 760 326.177 760 Q329.811 760 331.617 756.459 Q333.446 752.894 333.446 745.788 Q333.446 738.658 331.617 735.116 Q329.811 731.552 326.177 731.552 M326.177 727.848 Q331.987 727.848 335.043 732.454 Q338.122 737.038 338.122 745.788 Q338.122 754.514 335.043 759.121 Q331.987 763.704 326.177 763.704 Q320.367 763.704 317.288 759.121 Q314.233 754.514 314.233 745.788 Q314.233 737.038 317.288 732.454 Q320.367 727.848 326.177 727.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 731.552 Q352.728 731.552 350.899 735.116 Q349.094 738.658 349.094 745.788 Q349.094 752.894 350.899 756.459 Q352.728 760 356.339 760 Q359.973 760 361.779 756.459 Q363.608 752.894 363.608 745.788 Q363.608 738.658 361.779 735.116 Q359.973 731.552 356.339 731.552 M356.339 727.848 Q362.149 727.848 365.205 732.454 Q368.284 737.038 368.284 745.788 Q368.284 754.514 365.205 759.121 Q362.149 763.704 356.339 763.704 Q350.529 763.704 347.45 759.121 Q344.395 754.514 344.395 745.788 Q344.395 737.038 347.45 732.454 Q350.529 727.848 356.339 727.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M284.835 470.934 L307.057 470.934 L307.057 472.925 L294.511 505.494 L289.627 505.494 L301.432 474.869 L284.835 474.869 L284.835 470.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 470.934 L334.58 470.934 L334.58 474.869 L320.506 474.869 L320.506 483.342 Q321.524 482.994 322.543 482.832 Q323.562 482.647 324.58 482.647 Q330.367 482.647 333.747 485.818 Q337.126 488.99 337.126 494.406 Q337.126 499.985 333.654 503.087 Q330.182 506.165 323.862 506.165 Q321.687 506.165 319.418 505.795 Q317.173 505.425 314.765 504.684 L314.765 499.985 Q316.849 501.119 319.071 501.675 Q321.293 502.23 323.77 502.23 Q327.774 502.23 330.112 500.124 Q332.45 498.017 332.45 494.406 Q332.45 490.795 330.112 488.689 Q327.774 486.582 323.77 486.582 Q321.895 486.582 320.02 486.999 Q318.168 487.416 316.224 488.295 L316.224 470.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 474.013 Q352.728 474.013 350.899 477.578 Q349.094 481.119 349.094 488.249 Q349.094 495.355 350.899 498.92 Q352.728 502.462 356.339 502.462 Q359.973 502.462 361.779 498.92 Q363.608 495.355 363.608 488.249 Q363.608 481.119 361.779 477.578 Q359.973 474.013 356.339 474.013 M356.339 470.309 Q362.149 470.309 365.205 474.916 Q368.284 479.499 368.284 488.249 Q368.284 496.976 365.205 501.582 Q362.149 506.165 356.339 506.165 Q350.529 506.165 347.45 501.582 Q344.395 496.976 344.395 488.249 Q344.395 479.499 347.45 474.916 Q350.529 470.309 356.339 470.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M256.664 244.02 L264.303 244.02 L264.303 217.655 L255.992 219.321 L255.992 215.062 L264.256 213.396 L268.932 213.396 L268.932 244.02 L276.571 244.02 L276.571 247.956 L256.664 247.956 L256.664 244.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M296.015 216.474 Q292.404 216.474 290.576 220.039 Q288.77 223.581 288.77 230.71 Q288.77 237.817 290.576 241.382 Q292.404 244.923 296.015 244.923 Q299.65 244.923 301.455 241.382 Q303.284 237.817 303.284 230.71 Q303.284 223.581 301.455 220.039 Q299.65 216.474 296.015 216.474 M296.015 212.771 Q301.826 212.771 304.881 217.377 Q307.96 221.96 307.96 230.71 Q307.96 239.437 304.881 244.044 Q301.826 248.627 296.015 248.627 Q290.205 248.627 287.127 244.044 Q284.071 239.437 284.071 230.71 Q284.071 221.96 287.127 217.377 Q290.205 212.771 296.015 212.771 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 216.474 Q322.566 216.474 320.737 220.039 Q318.932 223.581 318.932 230.71 Q318.932 237.817 320.737 241.382 Q322.566 244.923 326.177 244.923 Q329.811 244.923 331.617 241.382 Q333.446 237.817 333.446 230.71 Q333.446 223.581 331.617 220.039 Q329.811 216.474 326.177 216.474 M326.177 212.771 Q331.987 212.771 335.043 217.377 Q338.122 221.96 338.122 230.71 Q338.122 239.437 335.043 244.044 Q331.987 248.627 326.177 248.627 Q320.367 248.627 317.288 244.044 Q314.233 239.437 314.233 230.71 Q314.233 221.96 317.288 217.377 Q320.367 212.771 326.177 212.771 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 216.474 Q352.728 216.474 350.899 220.039 Q349.094 223.581 349.094 230.71 Q349.094 237.817 350.899 241.382 Q352.728 244.923 356.339 244.923 Q359.973 244.923 361.779 241.382 Q363.608 237.817 363.608 230.71 Q363.608 223.581 361.779 220.039 Q359.973 216.474 356.339 216.474 M356.339 212.771 Q362.149 212.771 365.205 217.377 Q368.284 221.96 368.284 230.71 Q368.284 239.437 365.205 244.044 Q362.149 248.627 356.339 248.627 Q350.529 248.627 347.45 244.044 Q344.395 239.437 344.395 230.71 Q344.395 221.96 347.45 217.377 Q350.529 212.771 356.339 212.771 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.676 4017.76,230.676 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1244.23 463.375,1243.22 463.943,1242.12 464.511,1240.91 465.08,1239.61 465.648,1237.17 466.216,1234.6 466.785,1232.93 467.353,1231.13 467.921,1229.19 468.49,1226.08 469.058,1222.81 469.626,1219.36 470.195,1216.76 470.763,1213.99 471.331,1208.94 471.9,1205.77 472.468,1201.34 473.036,1197.75 473.605,1193.97 474.173,1189.95 474.741,1184.72 475.31,1180.25 475.878,1175.58 476.446,1170.65 477.015,1164.46 477.583,1155.99 478.152,1150.51 478.72,1143.66 479.288,1137.62 479.857,1131.31 480.425,1123.79 480.993,1114 481.562,1107.2 482.13,1100.17 482.698,1092.97 483.267,1084.53 483.835,1076.97 484.403,1067.27 484.972,1057.16 485.54,1048.19 486.108,1037.91 486.677,1028.53 487.245,1017.96 487.813,1009.44 488.382,998.675 488.95,989.116 489.518,980.419 490.087,970.441 490.655,960.551 491.224,949.46 491.792,939.311 492.36,928.119 492.929,916.928 493.497,904.613 494.065,895.452 494.634,885.109 495.202,874.952 495.77,863.654 496.339,854.389 496.907,844.21 497.475,834.929 498.044,824.583 498.612,815.312 499.18,802.892 499.749,793.788 500.317,783.608 500.885,773.285 501.454,762.148 502.022,751.02 502.59,738.995 503.159,729.212 503.727,719.539 504.295,708.857 504.864,700.385 505.432,687.828 506.001,677.676 506.569,668.527 507.137,657.479 507.706,647.808 508.274,638.025 508.842,630.342 509.411,622.837 509.979,614.231 510.547,607.796 511.116,599.331 511.684,590.781 512.252,582.469 512.821,573.278 513.389,562.214 513.957,553.522 514.526,546.147 515.094,538.819 515.662,531.735 516.231,524.748 516.799,516.953 517.367,510.32 517.936,503.822 518.504,497.242 519.072,492.011 519.641,483.659 520.209,477.785 520.778,472.927 521.346,467.001 521.914,462.459 522.483,456.806 523.051,451.254 523.619,444.641 524.188,438.26 524.756,435.277 525.324,432.216 525.893,428.081 526.461,423.889 527.029,419.771 527.598,415.809 528.166,409.873 528.734,403.962 529.303,400.536 529.871,397.136 530.439,393.709 531.008,388.401 531.576,382.049 532.144,377.223 532.713,372.514 533.281,367.76 533.85,364.38 534.418,363.094 534.986,359.726 535.555,357.453 536.123,357.074 536.691,352.613 537.26,350.238 537.828,347.898 538.396,344.896 538.965,341.85 539.533,339.793 540.101,334.699 540.67,333.828 541.238,330.089 541.806,327.533 542.375,324.813 542.943,322.132 543.511,318.555 544.08,316.294 544.648,314.048 545.216,311.086 545.785,309.957 546.353,309.019 546.921,307.839 547.49,304.603 548.058,303.625 548.627,301.516 549.195,299.698 549.763,297.7 550.332,295.026 550.9,295.444 551.468,293.556 552.037,292.028 552.605,290.427 553.173,288.901 553.742,288.543 554.31,287.069 554.878,285.438 555.447,286.042 556.015,285.34 556.583,283.702 557.152,281.241 557.72,279.634 558.288,277.224 558.857,275.084 559.425,275.046 559.993,272.81 560.562,273.768 561.13,271.439 561.698,269.275 562.267,267.38 562.835,267.55 563.404,267.553 563.972,269.725 564.54,266.798 565.109,266.762 565.677,265.659 566.245,269.942 566.814,270.753 567.382,270.263 567.95,266.805 568.519,264.666 569.087,265.891 569.655,264.743 570.224,262.641 570.792,261.415 571.36,260.466 571.929,260.581 572.497,257.667 573.065,258.077 573.634,259.122 574.202,259.079 574.77,259.289 575.339,257.407 575.907,258.62 576.476,259.674 577.044,257.415 577.612,254.308 578.181,254.473 578.749,252.53 579.317,252.969 579.886,253.17 580.454,253.44 581.022,253.682 581.591,251.624 582.159,250.899 582.727,254.261 583.296,254.281 583.864,254.351 584.432,254.329 585.001,253.442 585.569,254.554 586.137,252.364 586.706,250.412 587.274,248.574 587.842,250.096 588.411,248.4 588.979,244.478 589.547,246.069 590.116,243.547 590.684,244.986 591.253,246.623 591.821,250.091 592.389,250.035 592.958,250.006 593.526,250.161 594.094,249.061 594.663,248.104 595.231,251.176 595.799,251 596.368,249.996 596.936,251.118 597.504,249.874 598.073,249.825 598.641,249.903 599.209,248.952 599.778,248.642 600.346,249.421 600.914,247.194 601.483,245.185 602.051,245.326 602.619,248.387 603.188,249.276 603.756,247.884 604.325,246.619 604.893,247.515 605.461,246.466 606.03,245.242 606.598,242.944 607.166,242.023 607.735,243.369 608.303,243.535 608.871,244.67 609.44,245.611 610.008,246.742 610.576,245.49 611.145,246.306 611.713,248.239 612.281,246.902 612.85,244.689 613.418,246.606 613.986,247.611 614.555,249.437 615.123,249.001 615.691,251.606 616.26,251.799 616.828,250.302 617.396,248.556 617.965,243.954 618.533,243.716 619.102,244.646 619.67,244.588 620.238,243.283 620.807,243.993 621.375,241.695 621.943,241.69 622.512,239.522 623.08,239.639 623.648,239.647 624.217,237.57 624.785,237.911 625.353,239.062 625.922,238.061 626.49,238.167 627.058,234.044 627.627,235.502 628.195,237.879 628.763,236.979 629.332,238.345 629.9,237.582 630.468,236.714 631.037,235.838 631.605,232.012 632.173,233.463 632.742,234.01 633.31,233.559 633.879,231.771 634.447,232.266 635.015,232.663 635.584,233.25 636.152,235.623 636.72,234.933 637.289,236.108 637.857,237.166 638.425,237.334 638.994,237.48 639.562,238.698 640.13,238.913 640.699,241.125 641.267,235.865 641.835,235.012 642.404,236.18 642.972,235.318 643.54,234.558 644.109,232.718 644.677,232.055 645.245,231.713 645.814,233.446 646.382,234.922 646.951,235.322 647.519,233.551 648.087,232.984 648.656,231.274 649.224,231.722 649.792,232.247 650.361,232.73 650.929,234.13 651.497,235.396 652.066,235.632 652.634,236.086 653.202,236.324 653.771,235.611 654.339,234.974 654.907,235.464 655.476,234.623 656.044,233.917 656.612,232.464 657.181,231.954 657.749,232.383 658.317,232.877 658.886,232.362 659.454,233.021 660.022,232.47 660.591,232.008 661.159,232.509 661.728,232.746 662.296,233.153 662.864,234.658 663.433,234.889 664.001,234.254 664.569,233.553 665.138,233.979 665.706,238.451 666.274,238.565 666.843,239.469 667.411,239.538 667.979,238.579 668.548,238.763 669.116,237.928 669.684,238.791 670.253,236.686 670.821,236.896 671.389,237.974 671.958,237.91 672.526,235.666 673.094,236.994 673.663,238.035 674.231,238.115 674.799,239.162 675.368,238.01 675.936,236.896 676.505,234.85 677.073,233.03 677.641,232.348 678.21,234.665 678.778,233.693 679.346,236.832 679.915,235.83 680.483,235.931 681.051,234.903 681.62,236.194 682.188,234.998 682.756,235.002 683.325,233.193 683.893,231.227 684.461,231.401 685.03,232.834 685.598,234.089 686.166,232.367 686.735,232.684 687.303,231.958 687.871,231.339 688.44,230.779 689.008,231.182 689.577,231.683 690.145,232.981 690.713,232.149 691.282,231.679 691.85,232.263 692.418,233.709 692.987,234.19 693.555,234.428 694.123,235.784 694.692,236.842 695.26,237.494 695.828,237.564 696.397,237.615 696.965,236.379 697.533,237.623 698.102,235.687 698.67,236.934 699.238,233.818 699.807,232.066 700.375,232.228 700.943,236.489 701.512,235.355 702.08,237.528 702.648,236.499 703.217,237.523 703.785,236.234 704.354,236.2 704.922,234.296 705.49,234.406 706.059,232.561 706.627,234.124 707.195,232.099 707.764,233.3 708.332,234.274 708.9,232.182 709.469,231.484 710.037,233.774 710.605,232.765 711.174,234.033 711.742,233.16 712.31,233.405 712.879,234.565 713.447,233.59 714.015,234.825 714.584,234.992 715.152,235.18 715.72,233.246 716.289,234.435 716.857,233.215 717.425,235.212 717.994,234.111 718.562,235.538 719.131,236.395 719.699,238.316 720.267,239.191 720.836,238.767 721.404,239.667 721.972,239.29 722.541,238.908 723.109,237.602 723.677,236.138 724.246,236.037 724.814,231.904 725.382,234.127 725.951,231.075 726.519,232.36 727.087,233.574 727.656,232.657 728.224,234.803 728.792,235.798 729.361,237.801 729.929,237.757 730.497,236.356 731.066,233.006 731.634,232.866 732.203,232.019 732.771,234.172 733.339,233.999 733.908,233.864 734.476,233.729 735.044,233.856 735.613,232.883 736.181,230.868 736.749,228.137 737.318,227.71 737.886,229.221 738.454,229.558 739.023,229.959 739.591,231.341 740.159,231.438 740.728,230.607 741.296,232.724 741.864,235.967 742.433,236.976 743.001,236.82 743.569,236.475 744.138,235.22 744.706,235.983 745.274,236.762 745.843,238.617 746.411,236.41 746.98,236.293 747.548,235.815 748.116,235.65 748.685,233.516 749.253,232.633 749.821,232.622 750.39,232.646 750.958,231.613 751.526,229.55 752.095,229.697 752.663,227.815 753.231,228.208 753.8,227.793 754.368,227.929 754.936,228.378 755.505,230.775 756.073,231.724 756.641,231.794 757.21,232.955 757.778,232.964 758.346,232.857 758.915,233.891 759.483,232.796 760.052,231.878 760.62,231.875 761.188,228.851 761.757,232.3 762.325,231.383 762.893,231.235 763.462,231.341 764.03,232.505 764.598,234.833 765.167,235.678 765.735,235.516 766.303,234.186 766.872,232.328 767.44,230.426 768.008,230.665 768.577,231.743 769.145,231.948 769.713,232.106 770.282,232.324 770.85,233.396 771.418,233.345 771.987,230.162 772.555,229.463 773.123,229.707 773.692,229.922 774.26,230.001 774.829,228.97 775.397,230.328 775.965,231.508 776.534,229.604 777.102,228.75 777.67,226.819 778.239,228.383 778.807,229.804 779.375,231.113 779.944,231.271 780.512,230.445 781.08,234.91 781.649,234.946 782.217,233.974 782.785,231.109 783.354,232.094 783.922,232.018 784.49,232.299 785.059,231.463 785.627,233.55 786.195,233.638 786.764,231.733 787.332,231.659 787.9,230.737 788.469,231.001 789.037,229.042 789.606,230.327 790.174,230.449 790.742,230.688 791.311,230.907 791.879,233.217 792.447,231.975 793.016,231.957 793.584,229.7 794.152,229.853 794.721,229.836 795.289,227.121 795.857,226.789 796.426,227.087 796.994,228.586 797.562,227.819 798.131,227.194 798.699,229.564 799.267,231.766 799.836,231.753 800.404,232.887 800.972,231.868 801.541,230.971 802.109,231.983 802.678,232.233 803.246,233.366 803.814,232.184 804.383,232.167 804.951,233.309 805.519,233.405 806.088,234.43 806.656,237.453 807.224,238.108 807.793,237.735 808.361,236.27 808.929,237.12 809.498,235.697 810.066,237.584 810.634,237.212 811.203,237.996 811.771,237.522 812.339,236.022 812.908,234.608 813.476,233.595 814.044,234.379 814.613,233.44 815.181,232.388 815.749,232.275 816.318,231.521 816.886,229.501 817.455,230.813 818.023,229.646 818.591,231.915 819.16,232.841 819.728,231.6 820.296,230.372 820.865,233.289 821.433,233.335 822.001,233.119 822.57,234.132 823.138,236.128 823.706,232.787 824.275,233.741 824.843,234.9 825.411,232.558 825.98,232.46 826.548,232.373 827.116,233.388 827.685,234.121 828.253,233.959 828.821,234.619 829.39,235.369 829.958,235.945 830.526,235.639 831.095,234.219 831.663,236.172 832.232,235.789 832.8,234.53 833.368,232.244 833.937,231.007 834.505,231.019 835.073,232.245 835.642,230.117 836.21,231.246 836.778,230.976 837.347,232.073 837.915,232.971 838.483,230.665 839.052,231.673 839.62,231.555 840.188,231.303 840.757,231.335 841.325,230.366 841.893,229.476 842.462,229.502 843.03,229.715 843.598,227.746 844.167,229.091 844.735,229.293 845.304,229.7 845.872,230.826 846.44,231.247 847.009,231.24 847.577,231.105 848.145,231.134 848.714,232.274 849.282,233.35 849.85,232.134 850.419,229.983 850.987,228.054 851.555,230.395 852.124,231.523 852.692,230.385 853.26,231.579 853.829,231.52 854.397,233.819 854.965,233.483 855.534,230.121 856.102,232.332 856.67,234.307 857.239,232.089 857.807,230.826 858.375,233.204 858.944,232.99 859.512,235.94 860.081,235.571 860.649,234.348 861.217,234.001 861.786,233.67 862.354,232.408 862.922,233.57 863.491,232.083 864.059,231.892 864.627,229.752 865.196,227.589 865.764,228.974 866.332,230.251 866.901,228.174 867.469,229.481 868.037,227.396 868.606,227.41 869.174,226.424 869.742,224.712 870.311,226.129 870.879,226.614 871.447,227.915 872.016,226.138 872.584,227.445 873.152,227.873 873.721,227.026 874.289,228.324 874.858,226.416 875.426,226.904 875.994,228.229 876.563,228.312 877.131,227.44 877.699,228.875 878.268,228.256 878.836,228.409 879.404,230.756 879.973,231.806 880.541,231.833 881.109,231.825 881.678,227.658 882.246,227.919 882.814,226.94 883.383,227.348 883.951,227.693 884.519,229.327 885.088,228.51 885.656,230.729 886.224,230.922 886.793,232.031 887.361,232.055 887.93,227.952 888.498,230.467 889.066,231.662 889.635,233.796 890.203,234.652 890.771,233.453 891.34,234.591 891.908,236.489 892.476,235.165 893.045,233.902 893.613,234.749 894.181,233.722 894.75,232.484 895.318,232.398 895.886,231.29 896.455,230.043 897.023,234.353 897.591,235.173 898.16,233.822 898.728,234.614 899.296,234.278 899.865,235.107 900.433,232.782 901.001,232.746 901.57,233.825 902.138,236.749 902.707,237.487 903.275,237.999 903.843,238.667 904.412,238.086 904.98,235.784 905.548,235.553 906.117,235.068 906.685,235.627 907.253,233.032 907.822,233.837 908.39,233.635 908.958,237.604 909.527,235.087 910.095,234.642 910.663,232.15 911.232,234.004 911.8,233.786 912.368,234.605 912.937,232.175 913.505,230.923 914.073,232.955 914.642,233.821 915.21,232.555 915.779,232.323 916.347,231.181 916.915,231.206 917.484,230.995 918.052,230.994 918.62,234.133 919.189,234.93 919.757,233.662 920.325,233.588 920.894,231.353 921.462,230.374 922.03,230.201 922.599,231.063 923.167,231.03 923.735,230.763 924.304,233.827 924.872,233.688 925.44,235.584 926.009,235.308 926.577,235.032 927.145,236.559 927.714,234.946 928.282,233.463 928.85,236.357 929.419,236.128 929.987,235.524 930.556,234.963 931.124,232.423 931.692,230.961 932.261,229.818 932.829,231.709 933.397,234.457 933.966,231.99 934.534,232.594 935.102,233.455 935.671,229.967 936.239,230.859 936.807,231.686 937.376,230.508 937.944,231.311 938.512,232.158 939.081,230.921 939.649,232.771 940.217,232.299 940.786,231.865 941.354,230.528 941.922,230.346 942.491,231.348 943.059,230.059 943.627,228.943 944.196,227.859 944.764,228.786 945.333,228.796 945.901,227.597 946.469,226.591 947.038,225.806 947.606,228.163 948.174,226.404 948.743,225.853 949.311,226.784 949.879,226.826 950.448,228.034 951.016,228.098 951.584,228.125 952.153,229.207 952.721,227.213 953.289,228.47 953.858,226.371 954.426,226.546 954.994,227.707 955.563,224.742 956.131,227.16 956.699,227.327 957.268,228.406 957.836,228.679 958.405,228.99 958.973,228.199 959.541,229.629 960.11,229.869 960.678,233.065 961.246,234.103 961.815,233.85 962.383,231.574 962.951,232.749 963.52,232.533 964.088,232.301 964.656,232.177 965.225,232.251 965.793,236.075 966.361,236.782 966.93,235.301 967.498,236.11 968.066,233.537 968.635,234.099 969.203,232.755 969.771,231.512 970.34,229.314 970.908,226.301 971.476,225.362 972.045,224.653 972.613,225.091 973.182,226.548 973.75,225.709 974.318,225.358 974.887,223.668 975.455,225.111 976.023,226.394 976.592,228.934 977.16,230.182 977.728,232.172 978.297,230.047 978.865,232.056 979.433,233.099 980.002,231.848 980.57,231.561 981.138,231.436 981.707,229.286 982.275,228.434 982.843,229.73 983.412,229.639 983.98,229.533 984.548,229.376 985.117,228.525 985.685,230.627 986.253,229.785 986.822,228.79 987.39,226.847 987.959,226.952 988.527,228.129 989.095,228.174 989.664,227.262 990.232,225.536 990.8,224.093 991.369,224.728 991.937,225.508 992.505,226.878 993.074,226.155 993.642,226.631 994.21,225.85 994.779,227.363 995.347,225.485 995.915,226.948 996.484,227.204 997.052,225.556 997.62,224.973 998.189,225.458 998.757,225.953 999.325,226.248 999.894,227.652 1000.46,229.131 1001.03,230.416 1001.6,233.658 1002.17,232.473 1002.74,231.584 1003.3,231.695 1003.87,231.584 1004.44,231.498 1005.01,230.716 1005.58,231.047 1006.15,230.974 1006.71,235.286 1007.28,234.824 1007.85,231.594 1008.42,230.647 1008.99,231.868 1009.56,230.936 1010.12,229.987 1010.69,229.833 1011.26,228.925 1011.83,229.927 1012.4,230.716 1012.97,231.809 1013.53,234.046 1014.1,231.771 1014.67,228.71 1015.24,227.619 1015.81,227.935 1016.38,228.192 1016.94,228.475 1017.51,228.696 1018.08,228.949 1018.65,229.287 1019.22,229.555 1019.79,230.856 1020.35,231.08 1020.92,229.359 1021.49,229.63 1022.06,229.724 1022.63,228.6 1023.2,225.81 1023.76,227.37 1024.33,226.885 1024.9,227.226 1025.47,226.625 1026.04,227.444 1026.61,227.754 1027.17,225.046 1027.74,225.611 1028.31,227.15 1028.88,226.396 1029.45,223.808 1030.02,225.519 1030.58,226.242 1031.15,228.671 1031.72,229.886 1032.29,229.042 1032.86,231.411 1033.43,230.602 1033.99,231.726 1034.56,231.74 1035.13,230.883 1035.7,232.152 1036.27,231.194 1036.84,233.364 1037.4,233.25 1037.97,232.325 1038.54,232.507 1039.11,230.276 1039.68,232.366 1040.25,232.137 1040.81,233.344 1041.38,232.337 1041.95,232.488 1042.52,234.586 1043.09,235.521 1043.66,236.427 1044.22,236.217 1044.79,237.942 1045.36,237.728 1045.93,238.718 1046.5,235.263 1047.07,233.186 1047.63,234.16 1048.2,232.856 1048.77,235.024 1049.34,233.927 1049.91,233.614 1050.48,233.677 1051.05,231.446 1051.61,232.365 1052.18,234.376 1052.75,235.387 1053.32,234.955 1053.89,235.877 1054.46,236.58 1055.02,237.111 1055.59,235.695 1056.16,234.298 1056.73,237.287 1057.3,237.852 1057.87,236.456 1058.43,238.012 1059,237.488 1059.57,236.037 1060.14,236.618 1060.71,238.189 1061.28,239.349 1061.84,237.76 1062.41,237.445 1062.98,236.045 1063.55,236.688 1064.12,237.222 1064.69,235.651 1065.25,236.239 1065.82,234.701 1066.39,230.325 1066.96,230.197 1067.53,229.179 1068.1,228.161 1068.66,227.183 1069.23,227.36 1069.8,227.482 1070.37,225.538 1070.94,226.946 1071.51,226.257 1072.07,226.368 1072.64,226.738 1073.21,228.031 1073.78,229.409 1074.35,226.51 1074.92,225.614 1075.48,226.83 1076.05,225.802 1076.62,227.101 1077.19,227.475 1077.76,228.716 1078.33,228.795 1078.89,231.935 1079.46,232.836 1080.03,232.684 1080.6,230.487 1081.17,228.078 1081.74,229.41 1082.3,228.653 1082.87,226.648 1083.44,228.997 1084.01,228.061 1084.58,228.216 1085.15,227.226 1085.71,226.385 1086.28,223.623 1086.85,225.198 1087.42,225.765 1087.99,227.137 1088.56,227.545 1089.12,229.881 1089.69,227.914 1090.26,229.216 1090.83,227.116 1091.4,228.462 1091.97,228.638 1092.53,228.792 1093.1,228.867 1093.67,230.103 1094.24,231.195 1094.81,231.145 1095.38,230.031 1095.94,230.31 1096.51,229.422 1097.08,228.664 1097.65,231.918 1098.22,230.924 1098.79,231.137 1099.35,232.128 1099.92,232.267 1100.49,235.341 1101.06,237.282 1101.63,237.863 1102.2,236.625 1102.76,236.275 1103.33,233.792 1103.9,235.805 1104.47,236.263 1105.04,235.873 1105.61,235.452 1106.17,234.005 1106.74,232.595 1107.31,232.427 1107.88,231.612 1108.45,235.839 1109.02,234.39 1109.58,235.251 1110.15,234.799 1110.72,233.733 1111.29,233.533 1111.86,232.388 1112.43,232.147 1112.99,233.053 1113.56,232.886 1114.13,231.646 1114.7,231.403 1115.27,234.532 1115.84,231.211 1116.4,229.23 1116.97,229.229 1117.54,227.399 1118.11,225.647 1118.68,226.888 1119.25,227.009 1119.81,227.317 1120.38,227.521 1120.95,228.063 1121.52,227.221 1122.09,228.346 1122.66,227.356 1123.23,228.63 1123.79,229.819 1124.36,233.028 1124.93,232.027 1125.5,232.095 1126.07,233.146 1126.64,236.006 1127.2,236.828 1127.77,238.463 1128.34,238.091 1128.91,236.443 1129.48,234.898 1130.05,234.625 1130.61,235.299 1131.18,236.155 1131.75,235.764 1132.32,234.112 1132.89,234.67 1133.46,233.11 1134.02,234.791 1134.59,233.357 1135.16,231.035 1135.73,229.656 1136.3,229.58 1136.87,227.571 1137.43,225.893 1138,226.108 1138.57,228.367 1139.14,228.443 1139.71,228.659 1140.28,229.714 1140.84,227.742 1141.41,227.822 1141.98,229.253 1142.55,229.441 1143.12,227.619 1143.69,228.859 1144.25,231.031 1144.82,233.948 1145.39,235.834 1145.96,233.19 1146.53,231.928 1147.1,231.638 1147.66,231.466 1148.23,230.281 1148.8,232.359 1149.37,232.134 1149.94,233.101 1150.51,234.814 1151.07,234.282 1151.64,234.012 1152.21,233.689 1152.78,233.338 1153.35,233.909 1153.92,232.465 1154.48,232.316 1155.05,232.019 1155.62,231.713 1156.19,230.534 1156.76,229.057 1157.33,228.789 1157.89,231.118 1158.46,230.845 1159.03,228.595 1159.6,228.581 1160.17,228.407 1160.74,231.492 1161.3,230.108 1161.87,230.961 1162.44,230.693 1163.01,230.731 1163.58,228.495 1164.15,229.564 1164.71,228.567 1165.28,230.755 1165.85,231.463 1166.42,231.433 1166.99,230.163 1167.56,229.11 1168.12,228.252 1168.69,229.64 1169.26,230.707 1169.83,228.571 1170.4,229.58 1170.97,228.583 1171.53,229.858 1172.1,230.973 1172.67,228.595 1173.24,228.869 1173.81,230.073 1174.38,228.021 1174.94,229.289 1175.51,231.413 1176.08,230.23 1176.65,227.229 1177.22,226.369 1177.79,227.47 1178.35,225.551 1178.92,224.766 1179.49,224.218 1180.06,224.378 1180.63,221.658 1181.2,221.246 1181.76,219.895 1182.33,221.741 1182.9,222.538 1183.47,223.18 1184.04,224.759 1184.61,225.259 1185.17,221.472 1185.74,221.844 1186.31,221.727 1186.88,223.569 1187.45,222.142 1188.02,222.835 1188.58,223.356 1189.15,226.141 1189.72,229.764 1190.29,232.942 1190.86,231.756 1191.43,231.114 1192,230.364 1192.56,229.581 1193.13,229.88 1193.7,230.087 1194.27,231.365 1194.84,231.319 1195.41,232.428 1195.97,231.476 1196.54,230.573 1197.11,232.694 1197.68,233.368 1198.25,233.144 1198.82,235.192 1199.38,235.159 1199.95,233.866 1200.52,234.648 1201.09,232.389 1201.66,232.363 1202.23,234.378 1202.79,235.992 1203.36,234.679 1203.93,233.537 1204.5,234.401 1205.07,234.398 1205.64,236.312 1206.2,234.168 1206.77,235.174 1207.34,234.84 1207.91,234.55 1208.48,234.197 1209.05,234.085 1209.61,232.689 1210.18,231.378 1210.75,231.416 1211.32,231.271 1211.89,231.378 1212.46,232.391 1213.02,231.316 1213.59,233.421 1214.16,233.391 1214.73,232.535 1215.3,232.305 1215.87,231.455 1216.43,232.296 1217,232.337 1217.57,232.304 1218.14,232.297 1218.71,233.178 1219.28,230.862 1219.84,229.747 1220.41,229.799 1220.98,228.604 1221.55,231.806 1222.12,232.848 1222.69,232.794 1223.25,233.741 1223.82,233.527 1224.39,233.285 1224.96,233.079 1225.53,232.979 1226.1,233.747 1226.66,232.748 1227.23,232.636 1227.8,233.602 1228.37,233.284 1228.94,231.098 1229.51,231.956 1230.07,230.757 1230.64,231.753 1231.21,231.74 1231.78,231.644 1232.35,232.515 1232.92,233.499 1233.48,232.205 1234.05,232.066 1234.62,233.988 1235.19,233.732 1235.76,232.507 1236.33,231.414 1236.89,231.394 1237.46,231.414 1238.03,229.201 1238.6,228.239 1239.17,229.407 1239.74,231.432 1240.3,231.455 1240.87,230.397 1241.44,230.32 1242.01,230.454 1242.58,230.411 1243.15,231.451 1243.71,231.469 1244.28,231.499 1244.85,231.539 1245.42,231.307 1245.99,231.47 1246.56,232.27 1247.12,234.043 1247.69,234.877 1248.26,232.607 1248.83,234.26 1249.4,233.83 1249.97,231.318 1250.53,231.339 1251.1,229.972 1251.67,229.909 1252.24,229.018 1252.81,230.002 1253.38,230.066 1253.94,231.011 1254.51,229.869 1255.08,229.942 1255.65,229.97 1256.22,228.047 1256.79,226.319 1257.35,224.699 1257.92,226.179 1258.49,223.635 1259.06,224.098 1259.63,225.665 1260.2,225.11 1260.76,226.67 1261.33,228.082 1261.9,228.113 1262.47,229.214 1263.04,229.452 1263.61,228.51 1264.18,229.673 1264.74,229.811 1265.31,229.807 1265.88,230.881 1266.45,228.644 1267.02,227.69 1267.59,227.967 1268.15,230.238 1268.72,230.259 1269.29,227.27 1269.86,227.631 1270.43,228.022 1271,229.494 1271.56,230.598 1272.13,232.738 1272.7,231.449 1273.27,232.626 1273.84,231.455 1274.41,230.441 1274.97,230.563 1275.54,230.757 1276.11,229.84 1276.68,228.745 1277.25,228.933 1277.82,229.116 1278.38,226.399 1278.95,226.783 1279.52,227.209 1280.09,227.595 1280.66,228.837 1281.23,228.017 1281.79,228.319 1282.36,229.728 1282.93,230.749 1283.5,230.886 1284.07,232.954 1284.64,234.815 1285.2,236.727 1285.77,236.246 1286.34,234.925 1286.91,234.601 1287.48,235.351 1288.05,235.002 1288.61,234.601 1289.18,234.377 1289.75,235.027 1290.32,231.725 1290.89,231.548 1291.46,235.604 1292.02,232.026 1292.59,230.869 1293.16,227.787 1293.73,224.915 1294.3,225.384 1294.87,225.926 1295.43,228.505 1296,228.605 1296.57,227.793 1297.14,229.103 1297.71,230.199 1298.28,230.405 1298.84,229.354 1299.41,229.478 1299.98,226.668 1300.55,225.824 1301.12,223.348 1301.69,224.036 1302.25,224.536 1302.82,225.036 1303.39,224.756 1303.96,225.19 1304.53,226.725 1305.1,227.074 1305.66,227.503 1306.23,228.061 1306.8,229.257 1307.37,231.817 1307.94,230.797 1308.51,229.67 1309.07,230.73 1309.64,232.837 1310.21,230.661 1310.78,228.764 1311.35,230.927 1311.92,230.965 1312.48,232.079 1313.05,234.175 1313.62,237.093 1314.19,237.703 1314.76,240.395 1315.33,238.747 1315.89,238.13 1316.46,238.766 1317.03,236.078 1317.6,236.787 1318.17,236.355 1318.74,235.91 1319.3,235.632 1319.87,234.105 1320.44,234.961 1321.01,233.611 1321.58,232.446 1322.15,232.349 1322.71,230.141 1323.28,230.183 1323.85,230.063 1324.42,229.113 1324.99,227.21 1325.56,229.701 1326.12,228.916 1326.69,231.139 1327.26,230.204 1327.83,231.262 1328.4,232.204 1328.97,232.017 1329.53,230.776 1330.1,228.579 1330.67,228.73 1331.24,227.821 1331.81,227.96 1332.38,229.068 1332.94,230.376 1333.51,228.153 1334.08,228.479 1334.65,229.608 1335.22,229.687 1335.79,226.554 1336.36,228.836 1336.92,227.863 1337.49,229.093 1338.06,226.236 1338.63,228.554 1339.2,226.68 1339.77,228.126 1340.33,228.337 1340.9,229.672 1341.47,231.055 1342.04,232.159 1342.61,233.046 1343.18,232.007 1343.74,232.141 1344.31,231.002 1344.88,228.921 1345.45,227.021 1346.02,229.475 1346.59,229.637 1347.15,230.849 1347.72,231.832 1348.29,233.056 1348.86,232.941 1349.43,234.035 1350,235.758 1350.56,236.235 1351.13,235.705 1351.7,233.321 1352.27,233.009 1352.84,235.112 1353.41,234.736 1353.97,233.426 1354.54,231.319 1355.11,230.462 1355.68,231.469 1356.25,231.362 1356.82,231.356 1357.38,231.33 1357.95,231.373 1358.52,231.257 1359.09,228.984 1359.66,228.192 1360.23,229.534 1360.79,228.621 1361.36,227.778 1361.93,226.884 1362.5,227.348 1363.07,227.526 1363.64,226.762 1364.2,226.961 1364.77,227.225 1365.34,227.661 1365.91,227.88 1366.48,229.174 1367.05,226.46 1367.61,228.879 1368.18,231.154 1368.75,229.996 1369.32,227.949 1369.89,229.245 1370.46,229.39 1371.02,230.641 1371.59,230.762 1372.16,231.76 1372.73,230.384 1373.3,229.3 1373.87,228.468 1374.43,225.635 1375,227.23 1375.57,228.489 1376.14,228.815 1376.71,228.862 1377.28,228.123 1377.84,228.306 1378.41,231.518 1378.98,233.686 1379.55,233.517 1380.12,234.469 1380.69,232.25 1381.25,231.069 1381.82,232.257 1382.39,233.16 1382.96,233.221 1383.53,232.045 1384.1,235.994 1384.66,235.854 1385.23,235.397 1385.8,235.04 1386.37,234.642 1386.94,237.375 1387.51,236.781 1388.07,236.31 1388.64,234.783 1389.21,234.707 1389.78,234.373 1390.35,232.308 1390.92,230.265 1391.48,233.154 1392.05,232.989 1392.62,233.791 1393.19,231.365 1393.76,230.333 1394.33,229.308 1394.89,228.234 1395.46,228.595 1396.03,228.595 1396.6,227.745 1397.17,230.122 1397.74,231.239 1398.3,232.108 1398.87,233.257 1399.44,231.917 1400.01,230.806 1400.58,231.647 1401.15,233.476 1401.71,235.344 1402.28,233.754 1402.85,232.727 1403.42,232.674 1403.99,232.506 1404.56,234.313 1405.13,232.904 1405.69,232.768 1406.26,230.724 1406.83,229.6 1407.4,228.56 1407.97,228.595 1408.54,227.846 1409.1,226.919 1409.67,227.152 1410.24,226.399 1410.81,227.504 1411.38,229.776 1411.95,230.93 1412.51,231.056 1413.08,231.946 1413.65,233.068 1414.22,233.986 1414.79,238.016 1415.36,235.269 1415.92,237.913 1416.49,239.496 1417.06,236.867 1417.63,236.412 1418.2,234.77 1418.77,236.739 1419.33,238.244 1419.9,235.436 1420.47,236.212 1421.04,234.72 1421.61,235.286 1422.18,234.859 1422.74,234.455 1423.31,234.237 1423.88,233.993 1424.45,235.761 1425.02,233.104 1425.59,230.743 1426.15,231.922 1426.72,229.632 1427.29,226.354 1427.86,223.678 1428.43,224.034 1429,223.305 1429.56,224.692 1430.13,226.959 1430.7,227.09 1431.27,228.315 1431.84,227.28 1432.41,226.408 1432.97,227.903 1433.54,228.934 1434.11,228.854 1434.68,229.906 1435.25,226.783 1435.82,224.875 1436.38,224.408 1436.95,226.988 1437.52,227.128 1438.09,228.495 1438.66,228.578 1439.23,229.652 1439.79,228.551 1440.36,228.578 1440.93,227.638 1441.5,227.587 1442.07,226.624 1442.64,228.781 1443.2,228.813 1443.77,231.995 1444.34,229.738 1444.91,230.942 1445.48,229.949 1446.05,227.788 1446.61,232.262 1447.18,232.163 1447.75,231.104 1448.32,230.85 1448.89,231.877 1449.46,230.823 1450.02,230.663 1450.59,230.793 1451.16,229.784 1451.73,231.094 1452.3,230.996 1452.87,231.727 1453.43,231.398 1454,229.326 1454.57,230.509 1455.14,230.381 1455.71,229.418 1456.28,229.436 1456.84,232.812 1457.41,231.544 1457.98,229.506 1458.55,228.475 1459.12,226.415 1459.69,228.827 1460.25,228.891 1460.82,228.105 1461.39,230.276 1461.96,231.371 1462.53,231.376 1463.1,233.537 1463.66,233.156 1464.23,234.143 1464.8,234.906 1465.37,232.525 1465.94,232.577 1466.51,234.666 1467.07,234.57 1467.64,233.186 1468.21,234.992 1468.78,236.835 1469.35,234.28 1469.92,234.959 1470.48,235.606 1471.05,236.286 1471.62,234.742 1472.19,234.281 1472.76,232.961 1473.33,232.732 1473.89,230.225 1474.46,229.214 1475.03,230.119 1475.6,227.862 1476.17,227.949 1476.74,228.855 1477.31,228.892 1477.87,228.02 1478.44,226.226 1479.01,227.481 1479.58,227.552 1480.15,228.84 1480.72,229.117 1481.28,229.102 1481.85,228.049 1482.42,229.428 1482.99,229.602 1483.56,229.587 1484.13,228.558 1484.69,227.644 1485.26,227.873 1485.83,227.912 1486.4,227.887 1486.97,225.847 1487.54,227.274 1488.1,225.563 1488.67,223.985 1489.24,224.537 1489.81,223.072 1490.38,224.712 1490.95,227.439 1491.51,226.985 1492.08,229.309 1492.65,229.529 1493.22,230.789 1493.79,229.788 1494.36,225.98 1494.92,225.189 1495.49,223.714 1496.06,224.338 1496.63,227.762 1497.2,228.987 1497.77,229.121 1498.33,230.422 1498.9,230.544 1499.47,231.551 1500.04,231.543 1500.61,235.696 1501.18,235.444 1501.74,235.114 1502.31,234.683 1502.88,235.694 1503.45,234.141 1504.02,235.077 1504.59,234.993 1505.15,234.872 1505.72,232.549 1506.29,233.434 1506.86,233.486 1507.43,232.388 1508,235.52 1508.56,235.191 1509.13,233.996 1509.7,231.584 1510.27,230.481 1510.84,227.298 1511.41,227.583 1511.97,226.931 1512.54,227.383 1513.11,226.814 1513.68,228.055 1514.25,227.253 1514.82,226.284 1515.38,227.771 1515.95,229.229 1516.52,228.263 1517.09,229.322 1517.66,229.374 1518.23,231.298 1518.79,233.256 1519.36,233.098 1519.93,232.131 1520.5,233.383 1521.07,235.266 1521.64,234.922 1522.2,234.678 1522.77,233.282 1523.34,233.057 1523.91,231.949 1524.48,231.815 1525.05,231.539 1525.61,232.51 1526.18,231.403 1526.75,232.402 1527.32,230.489 1527.89,231.446 1528.46,231.603 1529.02,232.346 1529.59,232.151 1530.16,231.094 1530.73,230.109 1531.3,231.18 1531.87,230.892 1532.43,228.8 1533,224.873 1533.57,225.493 1534.14,222.875 1534.71,222.408 1535.28,222.881 1535.84,223.515 1536.41,224.967 1536.98,225.389 1537.55,228.928 1538.12,227.944 1538.69,229.017 1539.25,228.148 1539.82,226.383 1540.39,226.839 1540.96,225.086 1541.53,226.61 1542.1,228.079 1542.66,230.251 1543.23,231.515 1543.8,230.434 1544.37,230.845 1544.94,231.844 1545.51,228.774 1546.08,228.934 1546.64,229.008 1547.21,230.411 1547.78,232.702 1548.35,232.549 1548.92,233.636 1549.49,233.686 1550.05,233.548 1550.62,232.398 1551.19,233.334 1551.76,234.261 1552.33,234.207 1552.9,236.979 1553.46,234.171 1554.03,233.927 1554.6,234.628 1555.17,235.591 1555.74,235.096 1556.31,235.088 1556.87,234.824 1557.44,234.57 1558.01,236.358 1558.58,236.094 1559.15,235.652 1559.72,235.325 1560.28,234.927 1560.85,233.78 1561.42,234.632 1561.99,235.26 1562.56,235.911 1563.13,234.702 1563.69,235.326 1564.26,231.99 1564.83,232.821 1565.4,234.735 1565.97,234.565 1566.54,233.569 1567.1,229.201 1567.67,228.113 1568.24,228.476 1568.81,229.415 1569.38,229.301 1569.95,229.276 1570.51,229.35 1571.08,231.34 1571.65,231.443 1572.22,230.441 1572.79,232.399 1573.36,233.332 1573.92,233.165 1574.49,233.868 1575.06,233.565 1575.63,232.05 1576.2,231.644 1576.77,232.429 1577.33,232.168 1577.9,231.92 1578.47,230.849 1579.04,232.966 1579.61,232.778 1580.18,232.65 1580.74,233.443 1581.31,233.336 1581.88,231.887 1582.45,230.837 1583.02,231.83 1583.59,232.978 1584.15,232.799 1584.72,231.38 1585.29,232.175 1585.86,232.119 1586.43,234.004 1587,232.472 1587.56,229.119 1588.13,228.206 1588.7,230.198 1589.27,229.195 1589.84,230.285 1590.41,230.211 1590.97,228.955 1591.54,227.93 1592.11,229.111 1592.68,230.203 1593.25,230.318 1593.82,228.996 1594.38,228.16 1594.95,227.165 1595.52,225.336 1596.09,225.563 1596.66,224.744 1597.23,226.116 1597.79,225.285 1598.36,225.498 1598.93,228.897 1599.5,229.79 1600.07,230.994 1600.64,230.247 1601.2,229.276 1601.77,228.118 1602.34,227.084 1602.91,230.536 1603.48,234.299 1604.05,233.097 1604.61,234.96 1605.18,236.599 1605.75,236.073 1606.32,235.686 1606.89,235.297 1607.46,235.132 1608.02,234.72 1608.59,233.412 1609.16,234.415 1609.73,233.336 1610.3,233.138 1610.87,232.925 1611.43,230.626 1612,228.495 1612.57,229.664 1613.14,230.777 1613.71,230.695 1614.28,228.721 1614.84,230.73 1615.41,229.685 1615.98,227.517 1616.55,227.491 1617.12,228.513 1617.69,228.581 1618.26,227.546 1618.82,227.622 1619.39,228.776 1619.96,227.983 1620.53,227.121 1621.1,225.222 1621.67,224.423 1622.23,223.897 1622.8,223.367 1623.37,224.016 1623.94,223.396 1624.51,223.639 1625.08,224.164 1625.64,224.683 1626.21,223.083 1626.78,223.633 1627.35,225.342 1627.92,225.76 1628.49,229.369 1629.05,228.437 1629.62,229.7 1630.19,229.743 1630.76,230.035 1631.33,229.184 1631.9,228.141 1632.46,228.186 1633.03,228.624 1633.6,226.782 1634.17,228.266 1634.74,227.479 1635.31,230.794 1635.87,230.72 1636.44,230.05 1637.01,231.966 1637.58,231.956 1638.15,231.99 1638.72,233.149 1639.28,235.181 1639.85,235.119 1640.42,234.854 1640.99,236.637 1641.56,238.497 1642.13,240.195 1642.69,239.715 1643.26,237.013 1643.83,235.512 1644.4,234.125 1644.97,233.933 1645.54,233.643 1646.1,233.398 1646.67,235.03 1647.24,236.758 1647.81,236.049 1648.38,235.748 1648.95,234.339 1649.51,233.092 1650.08,230.954 1650.65,234.169 1651.22,236.203 1651.79,237.998 1652.36,236.34 1652.92,235.017 1653.49,234.544 1654.06,234.181 1654.63,234.998 1655.2,234.402 1655.77,230.683 1656.33,230.686 1656.9,229.597 1657.47,229.383 1658.04,229.34 1658.61,230.346 1659.18,229.273 1659.74,228.188 1660.31,228.172 1660.88,229.213 1661.45,229.205 1662.02,230.446 1662.59,230.236 1663.15,229.266 1663.72,229.245 1664.29,230.169 1664.86,230.177 1665.43,230.112 1666,233.24 1666.56,231.967 1667.13,233.07 1667.7,231.923 1668.27,230.902 1668.84,226.932 1669.41,226.97 1669.97,227.289 1670.54,228.498 1671.11,228.663 1671.68,225.876 1672.25,226.125 1672.82,227.378 1673.38,227.429 1673.95,227.558 1674.52,228.889 1675.09,230.916 1675.66,229.843 1676.23,229.86 1676.79,227.883 1677.36,228.096 1677.93,229.174 1678.5,230.303 1679.07,230.287 1679.64,230.401 1680.2,230.445 1680.77,230.554 1681.34,232.495 1681.91,234.429 1682.48,231.863 1683.05,230.791 1683.61,229.718 1684.18,226.865 1684.75,228.291 1685.32,230.466 1685.89,229.278 1686.46,229.224 1687.02,228.123 1687.59,227.14 1688.16,227.338 1688.73,227.623 1689.3,226.865 1689.87,228.125 1690.44,229.631 1691,229.801 1691.57,229.797 1692.14,228.991 1692.71,229.911 1693.28,229.002 1693.85,228.042 1694.41,228.303 1694.98,228.734 1695.55,229.969 1696.12,230.863 1696.69,230.977 1697.26,231.944 1697.82,231.781 1698.39,231.835 1698.96,230.747 1699.53,231.88 1700.1,231.597 1700.67,231.585 1701.23,232.803 1701.8,232.685 1702.37,232.764 1702.94,231.684 1703.51,232.563 1704.08,233.48 1704.64,232.215 1705.21,231.213 1705.78,231.075 1706.35,230.899 1706.92,230.801 1707.49,227.641 1708.05,228.001 1708.62,231.179 1709.19,230.131 1709.76,231.191 1710.33,230.172 1710.9,230.049 1711.46,231.07 1712.03,231.073 1712.6,233.072 1713.17,232.015 1713.74,231.851 1714.31,231.771 1714.87,232.612 1715.44,231.537 1716.01,232.481 1716.58,232.247 1717.15,233.056 1717.72,229.797 1718.28,229.808 1718.85,230.82 1719.42,231.686 1719.99,231.532 1720.56,229.367 1721.13,227.386 1721.69,225.705 1722.26,225.018 1722.83,225.402 1723.4,224.779 1723.97,225.364 1724.54,225.807 1725.1,228.426 1725.67,228.452 1726.24,227.511 1726.81,225.708 1727.38,226.097 1727.95,226.396 1728.51,225.644 1729.08,224.976 1729.65,224.309 1730.22,225.931 1730.79,226.704 1731.36,225.94 1731.92,225.313 1732.49,225.692 1733.06,227.341 1733.63,226.507 1734.2,226.936 1734.77,228.191 1735.33,227.529 1735.9,228.664 1736.47,229.007 1737.04,230.154 1737.61,231.398 1738.18,232.501 1738.74,232.671 1739.31,233.849 1739.88,234.637 1740.45,235.184 1741.02,235.07 1741.59,236.72 1742.15,236.442 1742.72,235.177 1743.29,235.97 1743.86,236.863 1744.43,235.564 1745,237.108 1745.56,237.648 1746.13,234.302 1746.7,232.994 1747.27,234.922 1747.84,234.588 1748.41,234.456 1748.97,236.34 1749.54,236.892 1750.11,238.71 1750.68,238.043 1751.25,240.702 1751.82,240.181 1752.38,240.721 1752.95,239.923 1753.52,238.482 1754.09,237.983 1754.66,237.487 1755.23,236.97 1755.79,237.296 1756.36,234.708 1756.93,234.404 1757.5,234.235 1758.07,233.688 1758.64,236.237 1759.21,235.765 1759.77,234.554 1760.34,234.074 1760.91,235.824 1761.48,235.405 1762.05,233.029 1762.62,232.748 1763.18,232.638 1763.75,232.122 1764.32,231.525 1764.89,231.425 1765.46,231.193 1766.03,228.991 1766.59,229.985 1767.16,228.872 1767.73,230.764 1768.3,230.683 1768.87,226.37 1769.44,225.505 1770,225.685 1770.57,226.944 1771.14,225.949 1771.71,227.483 1772.28,226.675 1772.85,226.718 1773.41,225.814 1773.98,227.242 1774.55,226.524 1775.12,228.001 1775.69,228.095 1776.26,228.032 1776.82,227.085 1777.39,227.161 1777.96,226.402 1778.53,226.711 1779.1,222.859 1779.67,223.273 1780.23,224.831 1780.8,224.268 1781.37,225.901 1781.94,226.136 1782.51,226.333 1783.08,226.293 1783.64,225.388 1784.21,225.77 1784.78,228.315 1785.35,228.376 1785.92,228.481 1786.49,227.641 1787.05,226.887 1787.62,229.216 1788.19,228.373 1788.76,227.401 1789.33,227.646 1789.9,227.802 1790.46,228.165 1791.03,226.312 1791.6,225.697 1792.17,227.079 1792.74,225.451 1793.31,226.816 1793.87,225.214 1794.44,225.707 1795.01,227.566 1795.58,224.805 1796.15,225.396 1796.72,225.738 1797.28,227.172 1797.85,226.446 1798.42,226.775 1798.99,229.033 1799.56,230.226 1800.13,231.454 1800.69,230.247 1801.26,230.41 1801.83,231.696 1802.4,232.737 1802.97,230.718 1803.54,230.845 1804.1,233.065 1804.67,233.075 1805.24,232.96 1805.81,232.931 1806.38,231.847 1806.95,231.709 1807.51,231.647 1808.08,233.7 1808.65,235.507 1809.22,232.094 1809.79,232.196 1810.36,231.356 1810.92,232.379 1811.49,232.361 1812.06,232.195 1812.63,230.982 1813.2,233.231 1813.77,235.208 1814.33,237.048 1814.9,237.851 1815.47,238.301 1816.04,235.636 1816.61,236.285 1817.18,235.074 1817.74,235.904 1818.31,234.599 1818.88,233.338 1819.45,233.978 1820.02,233.834 1820.59,233.574 1821.15,234.345 1821.72,235.157 1822.29,234.81 1822.86,232.44 1823.43,232.422 1824,232.052 1824.56,232.052 1825.13,232.706 1825.7,232.358 1826.27,232.342 1826.84,232.171 1827.41,232.19 1827.97,232.085 1828.54,230.753 1829.11,230.606 1829.68,229.619 1830.25,229.604 1830.82,230.476 1831.39,229.542 1831.95,231.664 1832.52,232.448 1833.09,233.179 1833.66,233.87 1834.23,234.77 1834.8,233.209 1835.36,232.895 1835.93,233.894 1836.5,232.406 1837.07,233.197 1837.64,232.92 1838.21,233.728 1838.77,233.409 1839.34,232.136 1839.91,230.042 1840.48,228.038 1841.05,228.105 1841.62,229.273 1842.18,227.299 1842.75,226.349 1843.32,226.55 1843.89,227.742 1844.46,228.975 1845.03,230.237 1845.59,227.208 1846.16,226.432 1846.73,227.664 1847.3,227.075 1847.87,228.205 1848.44,227.355 1849,227.709 1849.57,228.762 1850.14,226.784 1850.71,224.95 1851.28,224.158 1851.85,225.704 1852.41,226.917 1852.98,225.107 1853.55,223.378 1854.12,225.793 1854.69,225.1 1855.26,224.573 1855.82,226.126 1856.39,225.586 1856.96,225.958 1857.53,226.355 1858.1,228.681 1858.67,230.847 1859.23,227.726 1859.8,229.015 1860.37,228.149 1860.94,226.415 1861.51,225.708 1862.08,226.187 1862.64,225.58 1863.21,226.063 1863.78,226.189 1864.35,225.564 1864.92,226.02 1865.49,226.464 1866.05,226.598 1866.62,228.882 1867.19,230.075 1867.76,231.237 1868.33,231.314 1868.9,232.467 1869.46,233.664 1870.03,229.399 1870.6,231.492 1871.17,230.332 1871.74,231.548 1872.31,231.451 1872.87,233.469 1873.44,235.342 1874.01,236.112 1874.58,235.864 1875.15,235.459 1875.72,236.111 1876.28,238.537 1876.85,237 1877.42,235.848 1877.99,236.576 1878.56,237.305 1879.13,236.882 1879.69,235.427 1880.26,239.343 1880.83,239.757 1881.4,240.236 1881.97,241.664 1882.54,240.917 1883.1,240.173 1883.67,238.538 1884.24,237.143 1884.81,237.617 1885.38,236.159 1885.95,236.66 1886.51,235.296 1887.08,234.98 1887.65,234.497 1888.22,234.182 1888.79,231.874 1889.36,229.538 1889.92,227.493 1890.49,227.557 1891.06,227.828 1891.63,232.224 1892.2,232.194 1892.77,232.025 1893.33,230.82 1893.9,230.771 1894.47,229.555 1895.04,230.631 1895.61,230.626 1896.18,232.417 1896.74,233.1 1897.31,232.767 1897.88,232.271 1898.45,233.205 1899.02,232.748 1899.59,231.402 1900.16,231.51 1900.72,232.182 1901.29,230.932 1901.86,229.588 1902.43,227.686 1903,228.777 1903.57,229.903 1904.13,225.659 1904.7,225.876 1905.27,226.355 1905.84,224.813 1906.41,223.245 1906.98,221.772 1907.54,222.184 1908.11,224.096 1908.68,223.524 1909.25,225.151 1909.82,222.528 1910.39,223.283 1910.95,223.993 1911.52,225.532 1912.09,227.31 1912.66,228.665 1913.23,229.033 1913.8,228.243 1914.36,229.434 1914.93,230.322 1915.5,229.234 1916.07,230.151 1916.64,228.203 1917.21,228.52 1917.77,227.739 1918.34,232.111 1918.91,230.024 1919.48,230.96 1920.05,229.966 1920.62,226.002 1921.18,224.189 1921.75,226.62 1922.32,227.102 1922.89,226.418 1923.46,225.792 1924.03,227.353 1924.59,227.608 1925.16,227.779 1925.73,225.851 1926.3,223.053 1926.87,223.826 1927.44,223.482 1928,227.303 1928.57,225.499 1929.14,227.074 1929.71,228.51 1930.28,232.893 1930.85,233.955 1931.41,233.88 1931.98,234.717 1932.55,236.678 1933.12,233.332 1933.69,232.176 1934.26,232.188 1934.82,232.281 1935.39,230.034 1935.96,233.375 1936.53,232.4 1937.1,231.465 1937.67,232.586 1938.23,231.656 1938.8,231.413 1939.37,231.689 1939.94,230.621 1940.51,233.694 1941.08,232.574 1941.64,232.407 1942.21,231.376 1942.78,231.288 1943.35,231.485 1943.92,230.453 1944.49,231.592 1945.05,230.581 1945.62,231.657 1946.19,232.635 1946.76,230.821 1947.33,230.895 1947.9,230.941 1948.46,230.128 1949.03,230.328 1949.6,229.387 1950.17,230.558 1950.74,230.648 1951.31,231.838 1951.87,233.753 1952.44,234.588 1953.01,233.155 1953.58,233.318 1954.15,233.293 1954.72,232.151 1955.28,232.942 1955.85,233.696 1956.42,237.003 1956.99,235.538 1957.56,237.488 1958.13,237 1958.69,236.565 1959.26,235.104 1959.83,233.66 1960.4,234.322 1960.97,235.406 1961.54,237.166 1962.1,236.724 1962.67,236.36 1963.24,236.161 1963.81,236.924 1964.38,238.584 1964.95,235.778 1965.51,236.209 1966.08,234.786 1966.65,234.766 1967.22,232.454 1967.79,232.2 1968.36,234.32 1968.92,233.998 1969.49,233.626 1970.06,233.261 1970.63,232.875 1971.2,232.564 1971.77,233.161 1972.34,233.982 1972.9,232.57 1973.47,231.184 1974.04,231.095 1974.61,230.144 1975.18,228.16 1975.75,229.398 1976.31,228.18 1976.88,226.408 1977.45,224.757 1978.02,223.938 1978.59,226.385 1979.16,224.275 1979.72,223.291 1980.29,223.915 1980.86,224.507 1981.43,225.075 1982,225.379 1982.57,226.823 1983.13,226.95 1983.7,227.276 1984.27,227.672 1984.84,229.947 1985.41,229.94 1985.98,229.905 1986.54,230.988 1987.11,231.066 1987.68,232.025 1988.25,232.032 1988.82,231.821 1989.39,231.85 1989.95,233.875 1990.52,230.253 1991.09,231.444 1991.66,229.331 1992.23,227.471 1992.8,225.393 1993.36,225.701 1993.93,226.081 1994.5,227.648 1995.07,227.992 1995.64,229.173 1996.21,230.339 1996.77,229.37 1997.34,226.56 1997.91,225.836 1998.48,227.151 1999.05,227.607 1999.62,227.757 2000.18,228.862 2000.75,227.754 2001.32,227.08 2001.89,227.562 2002.46,228.887 2003.03,229.06 2003.59,228.114 2004.16,227.375 2004.73,228.617 2005.3,228.805 2005.87,228.996 2006.44,227.336 2007,228.515 2007.57,229.687 2008.14,228.863 2008.71,231.083 2009.28,232.238 2009.85,233.209 2010.41,234.23 2010.98,233.258 2011.55,234.329 2012.12,233.969 2012.69,238.719 2013.26,237.08 2013.82,236.621 2014.39,238.482 2014.96,237.075 2015.53,240.812 2016.1,240.169 2016.67,239.305 2017.23,237.471 2017.8,239.108 2018.37,239.405 2018.94,239.582 2019.51,238.021 2020.08,238.412 2020.64,238.697 2021.21,238.724 2021.78,238.935 2022.35,238.328 2022.92,237.447 2023.49,237.88 2024.05,235.122 2024.62,234.715 2025.19,232.306 2025.76,232.116 2026.33,231.884 2026.9,232.473 2027.46,229.032 2028.03,229.922 2028.6,228.961 2029.17,229.932 2029.74,231.996 2030.31,230.366 2030.87,231.202 2031.44,231 2032.01,232.906 2032.58,235.569 2033.15,235.065 2033.72,231.488 2034.28,230.244 2034.85,230.061 2035.42,231.08 2035.99,228.871 2036.56,228.791 2037.13,230.046 2037.69,228.852 2038.26,228.024 2038.83,226.94 2039.4,230.216 2039.97,229.031 2040.54,230.311 2041.11,228.317 2041.67,228.546 2042.24,227.793 2042.81,227.875 2043.38,228.909 2043.95,227.951 2044.52,228.818 2045.08,227.795 2045.65,228.016 2046.22,225.085 2046.79,227.547 2047.36,227.716 2047.93,226.657 2048.49,226.531 2049.06,227.796 2049.63,227.998 2050.2,229.079 2050.77,229.211 2051.34,230.353 2051.9,229.481 2052.47,229.577 2053.04,230.73 2053.61,231.585 2054.18,231.372 2054.75,229.364 2055.31,228.401 2055.88,228.561 2056.45,228.737 2057.02,229.721 2057.59,228.804 2058.16,230.103 2058.72,227.875 2059.29,228.096 2059.86,228.27 2060.43,228.387 2061,227.449 2061.57,229.604 2062.13,228.539 2062.7,228.848 2063.27,231.895 2063.84,231.591 2064.41,231.361 2064.98,231.152 2065.54,231.077 2066.11,231.149 2066.68,229.944 2067.25,229.799 2067.82,229.968 2068.39,229.966 2068.95,230.983 2069.52,230.834 2070.09,231.86 2070.66,231.849 2071.23,230.742 2071.8,230.678 2072.36,229.521 2072.93,229.327 2073.5,229.367 2074.07,229.351 2074.64,229.328 2075.21,228.468 2075.77,228.672 2076.34,229.02 2076.91,228.126 2077.48,231.661 2078.05,230.676 2078.62,230.556 2079.18,228.524 2079.75,230.672 2080.32,229.55 2080.89,230.403 2081.46,230.187 2082.03,230.29 2082.59,231.371 2083.16,234.411 2083.73,235.279 2084.3,236.973 2084.87,233.424 2085.44,233.121 2086,233.884 2086.57,234.863 2087.14,234.583 2087.71,233.148 2088.28,232.931 2088.85,231.6 2089.41,231.572 2089.98,231.329 2090.55,230.194 2091.12,230.129 2091.69,231.205 2092.26,230.239 2092.82,229.03 2093.39,227.947 2093.96,226.164 2094.53,225.219 2095.1,225.502 2095.67,227.761 2096.23,227.841 2096.8,227.935 2097.37,231.29 2097.94,232.141 2098.51,231.953 2099.08,229.847 2099.64,229.93 2100.21,229.789 2100.78,230.776 2101.35,230.979 2101.92,230.76 2102.49,228.72 2103.05,228.964 2103.62,228.208 2104.19,229.526 2104.76,231.795 2105.33,232.525 2105.9,232.051 2106.46,232.014 2107.03,231.85 2107.6,230.754 2108.17,231.805 2108.74,232.636 2109.31,231.301 2109.87,232.343 2110.44,233.24 2111.01,232.969 2111.58,234.673 2112.15,233.53 2112.72,234.62 2113.29,233.072 2113.85,230.011 2114.42,228.841 2114.99,229.006 2115.56,229.254 2116.13,229.559 2116.7,230.567 2117.26,229.667 2117.83,230.697 2118.4,229.598 2118.97,230.703 2119.54,230.569 2120.11,228.421 2120.67,227.578 2121.24,225.74 2121.81,228.137 2122.38,230.309 2122.95,228.201 2123.52,228.559 2124.08,229.766 2124.65,226.77 2125.22,226.265 2125.79,226.623 2126.36,226.872 2126.93,227.192 2127.49,227.634 2128.06,231.114 2128.63,232.252 2129.2,230.806 2129.77,228.869 2130.34,230.134 2130.9,228.176 2131.47,228.487 2132.04,227.524 2132.61,227.905 2133.18,227.282 2133.75,227.655 2134.31,226.724 2134.88,227.947 2135.45,228.132 2136.02,227.261 2136.59,229.772 2137.16,231.907 2137.72,230.769 2138.29,229.744 2138.86,230.164 2139.43,230.902 2140,230.909 2140.57,230.939 2141.13,230.117 2141.7,231.235 2142.27,229.989 2142.84,229.205 2143.41,228.36 2143.98,228.643 2144.54,227.831 2145.11,227.918 2145.68,229.121 2146.25,227.257 2146.82,227.346 2147.39,226.574 2147.95,227.643 2148.52,229.828 2149.09,228.011 2149.66,228.223 2150.23,229.443 2150.8,229.703 2151.36,230.944 2151.93,230.742 2152.5,230.813 2153.07,232.096 2153.64,231.167 2154.21,231.14 2154.77,231.171 2155.34,232.321 2155.91,232.06 2156.48,231.837 2157.05,231.758 2157.62,229.685 2158.18,229.936 2158.75,229.972 2159.32,229.071 2159.89,228.063 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.024\n  with uncertainty of ± 0.0022152807442897856\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01477 ± (0.00297733, 0.00284024) (MC)\n  95% confidence interval: [-4.02021, -4.00911] (MC)\n  linear error propagation: -4.01487 ± 0.00285861\n  |δ_y| = |0.00235604| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014771605542547, val_l = 0.005437487660919338, val_u = 0.00566075657963605)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip640\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip641\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip642\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1156.26 2211.02,1156.26 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1015.75 2211.02,1015.75 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,875.242 2211.02,875.242 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,734.731 2211.02,734.731 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,594.22 2211.02,594.22 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,453.71 2211.02,453.71 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,313.199 2211.02,313.199 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1156.26 365.751,1156.26 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1015.75 365.751,1015.75 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,875.242 365.751,875.242 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,734.731 365.751,734.731 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,594.22 365.751,594.22 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,453.71 365.751,453.71 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,313.199 365.751,313.199 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M298.909 1142.06 Q295.298 1142.06 293.469 1145.63 Q291.664 1149.17 291.664 1156.3 Q291.664 1163.4 293.469 1166.97 Q295.298 1170.51 298.909 1170.51 Q302.543 1170.51 304.349 1166.97 Q306.177 1163.4 306.177 1156.3 Q306.177 1149.17 304.349 1145.63 Q302.543 1142.06 298.909 1142.06 M298.909 1138.36 Q304.719 1138.36 307.775 1142.96 Q310.853 1147.55 310.853 1156.3 Q310.853 1165.02 307.775 1169.63 Q304.719 1174.21 298.909 1174.21 Q293.099 1174.21 290.02 1169.63 Q286.964 1165.02 286.964 1156.3 Q286.964 1147.55 290.02 1142.96 Q293.099 1138.36 298.909 1138.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M259.557 1029.1 L267.196 1029.1 L267.196 1002.73 L258.886 1004.4 L258.886 1000.14 L267.15 998.472 L271.826 998.472 L271.826 1029.1 L279.465 1029.1 L279.465 1033.03 L259.557 1033.03 L259.557 1029.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 1001.55 Q295.298 1001.55 293.469 1005.12 Q291.664 1008.66 291.664 1015.79 Q291.664 1022.89 293.469 1026.46 Q295.298 1030 298.909 1030 Q302.543 1030 304.349 1026.46 Q306.177 1022.89 306.177 1015.79 Q306.177 1008.66 304.349 1005.12 Q302.543 1001.55 298.909 1001.55 M298.909 997.847 Q304.719 997.847 307.775 1002.45 Q310.853 1007.04 310.853 1015.79 Q310.853 1024.51 307.775 1029.12 Q304.719 1033.7 298.909 1033.7 Q293.099 1033.7 290.02 1029.12 Q286.964 1024.51 286.964 1015.79 Q286.964 1007.04 290.02 1002.45 Q293.099 997.847 298.909 997.847 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M262.775 888.586 L279.094 888.586 L279.094 892.522 L257.15 892.522 L257.15 888.586 Q259.812 885.832 264.395 881.202 Q269.002 876.549 270.182 875.207 Q272.428 872.684 273.307 870.948 Q274.21 869.188 274.21 867.499 Q274.21 864.744 272.266 863.008 Q270.344 861.272 267.242 861.272 Q265.043 861.272 262.59 862.036 Q260.159 862.8 257.381 864.35 L257.381 859.628 Q260.205 858.494 262.659 857.915 Q265.113 857.337 267.15 857.337 Q272.52 857.337 275.715 860.022 Q278.909 862.707 278.909 867.198 Q278.909 869.327 278.099 871.249 Q277.312 873.147 275.205 875.739 Q274.627 876.411 271.525 879.628 Q268.423 882.823 262.775 888.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 861.04 Q295.298 861.04 293.469 864.605 Q291.664 868.147 291.664 875.276 Q291.664 882.383 293.469 885.948 Q295.298 889.489 298.909 889.489 Q302.543 889.489 304.349 885.948 Q306.177 882.383 306.177 875.276 Q306.177 868.147 304.349 864.605 Q302.543 861.04 298.909 861.04 M298.909 857.337 Q304.719 857.337 307.775 861.943 Q310.853 866.526 310.853 875.276 Q310.853 884.003 307.775 888.61 Q304.719 893.193 298.909 893.193 Q293.099 893.193 290.02 888.61 Q286.964 884.003 286.964 875.276 Q286.964 866.526 290.02 861.943 Q293.099 857.337 298.909 857.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M272.914 733.377 Q276.27 734.094 278.145 736.363 Q280.043 738.631 280.043 741.965 Q280.043 747.08 276.525 749.881 Q273.006 752.682 266.525 752.682 Q264.349 752.682 262.034 752.242 Q259.742 751.826 257.289 750.969 L257.289 746.455 Q259.233 747.59 261.548 748.168 Q263.863 748.747 266.386 748.747 Q270.784 748.747 273.076 747.011 Q275.39 745.275 275.39 741.965 Q275.39 738.909 273.238 737.196 Q271.108 735.46 267.289 735.46 L263.261 735.46 L263.261 731.618 L267.474 731.618 Q270.923 731.618 272.752 730.252 Q274.58 728.863 274.58 726.27 Q274.58 723.608 272.682 722.196 Q270.807 720.761 267.289 720.761 Q265.367 720.761 263.168 721.178 Q260.969 721.594 258.33 722.474 L258.33 718.307 Q260.992 717.567 263.307 717.196 Q265.645 716.826 267.705 716.826 Q273.029 716.826 276.131 719.256 Q279.233 721.664 279.233 725.784 Q279.233 728.655 277.59 730.645 Q275.946 732.613 272.914 733.377 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 720.53 Q295.298 720.53 293.469 724.094 Q291.664 727.636 291.664 734.766 Q291.664 741.872 293.469 745.437 Q295.298 748.979 298.909 748.979 Q302.543 748.979 304.349 745.437 Q306.177 741.872 306.177 734.766 Q306.177 727.636 304.349 724.094 Q302.543 720.53 298.909 720.53 M298.909 716.826 Q304.719 716.826 307.775 721.432 Q310.853 726.016 310.853 734.766 Q310.853 743.492 307.775 748.099 Q304.719 752.682 298.909 752.682 Q293.099 752.682 290.02 748.099 Q286.964 743.492 286.964 734.766 Q286.964 726.016 290.02 721.432 Q293.099 716.826 298.909 716.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M271.594 581.014 L259.789 599.463 L271.594 599.463 L271.594 581.014 M270.367 576.94 L276.247 576.94 L276.247 599.463 L281.177 599.463 L281.177 603.352 L276.247 603.352 L276.247 611.5 L271.594 611.5 L271.594 603.352 L255.992 603.352 L255.992 598.838 L270.367 576.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 580.019 Q295.298 580.019 293.469 583.584 Q291.664 587.125 291.664 594.255 Q291.664 601.361 293.469 604.926 Q295.298 608.468 298.909 608.468 Q302.543 608.468 304.349 604.926 Q306.177 601.361 306.177 594.255 Q306.177 587.125 304.349 583.584 Q302.543 580.019 298.909 580.019 M298.909 576.315 Q304.719 576.315 307.775 580.922 Q310.853 585.505 310.853 594.255 Q310.853 602.982 307.775 607.588 Q304.719 612.172 298.909 612.172 Q293.099 612.172 290.02 607.588 Q286.964 602.982 286.964 594.255 Q286.964 585.505 290.02 580.922 Q293.099 576.315 298.909 576.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M258.793 436.43 L277.15 436.43 L277.15 440.365 L263.076 440.365 L263.076 448.837 Q264.094 448.49 265.113 448.328 Q266.131 448.142 267.15 448.142 Q272.937 448.142 276.316 451.314 Q279.696 454.485 279.696 459.902 Q279.696 465.48 276.224 468.582 Q272.752 471.661 266.432 471.661 Q264.256 471.661 261.988 471.29 Q259.742 470.92 257.335 470.179 L257.335 465.48 Q259.418 466.615 261.641 467.17 Q263.863 467.726 266.34 467.726 Q270.344 467.726 272.682 465.619 Q275.02 463.513 275.02 459.902 Q275.02 456.291 272.682 454.184 Q270.344 452.078 266.34 452.078 Q264.465 452.078 262.59 452.494 Q260.738 452.911 258.793 453.791 L258.793 436.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 439.508 Q295.298 439.508 293.469 443.073 Q291.664 446.615 291.664 453.744 Q291.664 460.851 293.469 464.415 Q295.298 467.957 298.909 467.957 Q302.543 467.957 304.349 464.415 Q306.177 460.851 306.177 453.744 Q306.177 446.615 304.349 443.073 Q302.543 439.508 298.909 439.508 M298.909 435.805 Q304.719 435.805 307.775 440.411 Q310.853 444.994 310.853 453.744 Q310.853 462.471 307.775 467.078 Q304.719 471.661 298.909 471.661 Q293.099 471.661 290.02 467.078 Q286.964 462.471 286.964 453.744 Q286.964 444.994 290.02 440.411 Q293.099 435.805 298.909 435.805 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M269.326 311.335 Q266.178 311.335 264.326 313.488 Q262.497 315.641 262.497 319.391 Q262.497 323.118 264.326 325.294 Q266.178 327.446 269.326 327.446 Q272.474 327.446 274.303 325.294 Q276.154 323.118 276.154 319.391 Q276.154 315.641 274.303 313.488 Q272.474 311.335 269.326 311.335 M278.608 296.683 L278.608 300.942 Q276.849 300.109 275.043 299.669 Q273.261 299.229 271.502 299.229 Q266.872 299.229 264.418 302.354 Q261.988 305.479 261.641 311.798 Q263.006 309.785 265.066 308.72 Q267.127 307.632 269.603 307.632 Q274.812 307.632 277.821 310.803 Q280.853 313.951 280.853 319.391 Q280.853 324.715 277.705 327.933 Q274.557 331.15 269.326 331.15 Q263.33 331.15 260.159 326.567 Q256.988 321.96 256.988 313.234 Q256.988 305.039 260.877 300.178 Q264.766 295.294 271.316 295.294 Q273.076 295.294 274.858 295.641 Q276.664 295.988 278.608 296.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 298.998 Q295.298 298.998 293.469 302.562 Q291.664 306.104 291.664 313.234 Q291.664 320.34 293.469 323.905 Q295.298 327.446 298.909 327.446 Q302.543 327.446 304.349 323.905 Q306.177 320.34 306.177 313.234 Q306.177 306.104 304.349 302.562 Q302.543 298.998 298.909 298.998 M298.909 295.294 Q304.719 295.294 307.775 299.9 Q310.853 304.484 310.853 313.234 Q310.853 321.96 307.775 326.567 Q304.719 331.15 298.909 331.15 Q293.099 331.15 290.02 326.567 Q286.964 321.96 286.964 313.234 Q286.964 304.484 290.02 299.9 Q293.099 295.294 298.909 295.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1052.73 400.199,957.616 400.786,870.345 401.372,790.39 401.958,717.265 402.545,650.518 403.131,589.733 403.718,534.52 404.304,484.518 404.891,439.391 405.477,398.822 406.063,362.517 406.65,330.201 407.236,301.613 407.823,276.51 408.409,254.664 408.995,235.86 409.582,219.895 410.168,257.611 410.755,290.964 411.341,279.237 411.927,269.779 412.514,262.435 413.1,291.561 413.687,318.622 414.273,343.995 414.86,341.495 415.446,340.5 416.032,388.346 416.619,389.267 417.205,412.184 417.792,415.123 418.378,419.052 418.964,424.583 419.551,446.066 420.137,452.952 420.724,460.252 421.31,468.676 421.896,489.942 422.483,533.284 423.069,540.341 423.656,559.189 424.242,567.935 424.829,577.521 425.415,595.618 426.001,629.38 426.588,637.432 427.174,645.999 427.761,654.5 428.347,669.925 428.933,678.356 429.52,698.563 430.106,719.346 430.693,732.329 431.279,751.006 431.865,763.839 432.452,781.378 433.038,788.44 433.625,804.8 434.211,815.096 434.798,821.26 435.384,832.096 435.97,842.029 436.557,855.897 437.143,865.775 437.73,878.831 438.316,891.353 438.902,907.03 439.489,912.269 440.075,920.972 440.662,928.88 441.248,939.893 441.835,944.904 442.421,952.356 443.007,957.265 443.594,964.928 444.18,969.721 444.767,982.405 445.353,986.747 445.939,993.687 446.526,1000.92 447.112,1010 447.699,1019 448.285,1029.91 448.871,1035.92 449.458,1041.72 450.044,1049.66 450.631,1053.1 451.217,1064.82 451.804,1071.77 452.39,1076.82 452.976,1085.57 453.563,1091.78 454.149,1098.26 454.736,1101 455.322,1103.53 455.908,1108.12 456.495,1109.01 457.081,1113.53 457.668,1118.29 458.254,1122.76 458.84,1128.8 459.427,1138.01 460.013,1143.46 460.6,1146.9 461.186,1150.37 461.773,1153.58 462.359,1156.74 462.945,1161.26 463.532,1164.12 464.118,1166.89 464.705,1169.88 465.291,1170.98 465.877,1176.79 466.464,1179.09 467.05,1180.01 467.637,1182.58 468.223,1183.26 468.809,1185.62 469.396,1187.94 469.982,1191.85 470.569,1195.54 471.155,1194.63 471.742,1193.9 472.328,1194.71 472.914,1195.69 473.501,1196.64 474.087,1197.47 474.674,1201.05 475.26,1204.69 475.846,1205.12 476.433,1205.59 477.019,1206.17 477.606,1209.29 478.192,1213.88 478.778,1216.58 479.365,1219.23 479.951,1222.02 480.538,1223.14 481.124,1221.66 481.711,1222.86 482.297,1222.74 482.883,1220.26 483.47,1222.97 484.056,1223.13 484.643,1223.3 485.229,1224.35 485.815,1225.51 486.402,1225.51 486.988,1229.31 487.575,1228 488.161,1230.24 488.748,1231.1 489.334,1232.22 489.92,1233.35 490.507,1235.62 491.093,1236.36 491.68,1237.13 492.266,1238.82 492.852,1238.35 493.439,1237.68 494.025,1237.32 494.612,1239.46 495.198,1238.96 495.784,1239.83 496.371,1240.4 496.957,1241.22 497.544,1242.89 498.13,1240.94 498.717,1241.72 499.303,1242.12 499.889,1242.63 500.476,1243.09 501.062,1242.2 501.649,1242.64 502.235,1243.29 502.821,1241.35 503.408,1240.94 503.994,1241.63 504.581,1243.33 505.167,1244.08 505.753,1245.8 506.34,1247.25 506.926,1246.3 507.513,1247.91 508.099,1245.86 508.686,1247.6 509.272,1249.2 509.858,1250.53 510.445,1249.52 511.031,1248.69 511.618,1245.36 512.204,1247.88 512.79,1247.12 513.377,1247.59 513.963,1241.86 514.55,1240.05 515.136,1239.73 515.722,1242.84 516.309,1244.5 516.895,1242.34 517.482,1242.88 518.068,1244.54 518.655,1245.24 519.241,1245.64 519.827,1244.85 520.414,1247.53 521,1246.46 521.587,1244.66 522.173,1244.08 522.759,1243.21 523.346,1244.73 523.932,1242.75 524.519,1240.93 525.105,1242.87 525.691,1245.82 526.278,1245.11 526.864,1246.8 527.451,1245.82 528.037,1245.1 528.624,1244.29 529.21,1243.52 529.796,1245.35 530.383,1245.71 530.969,1241.44 531.556,1240.9 532.142,1240.3 532.728,1239.8 533.315,1240.29 533.901,1238.52 534.488,1240.48 535.074,1242.22 535.661,1243.87 536.247,1241.75 536.833,1243.24 537.42,1247.29 538.006,1245.19 538.593,1247.7 539.179,1245.79 539.765,1243.63 540.352,1239.35 540.938,1238.98 541.525,1238.59 542.111,1237.99 542.697,1238.81 543.284,1239.49 543.87,1235.62 544.457,1235.37 545.043,1236.06 545.63,1234.36 546.216,1235.32 546.802,1234.95 547.389,1234.44 547.975,1235.1 548.562,1235.05 549.148,1233.77 549.734,1235.88 550.321,1237.78 550.907,1237.31 551.494,1233.52 552.08,1232.13 552.666,1233.29 553.253,1234.35 553.839,1232.98 554.426,1233.8 555.012,1234.83 555.599,1237.1 556.185,1237.87 556.771,1236.11 557.358,1235.64 557.944,1234.08 558.531,1232.71 559.117,1231.1 559.703,1232.16 560.29,1230.91 560.876,1228.38 561.463,1229.51 562.049,1231.65 562.635,1229.18 563.222,1227.69 563.808,1225.25 564.395,1225.33 564.981,1221.97 565.568,1221.29 566.154,1222.53 566.74,1224.08 567.327,1228.88 567.913,1228.86 568.5,1227.52 569.086,1227.28 569.672,1228.45 570.259,1227.37 570.845,1229.67 571.432,1229.43 572.018,1231.62 572.605,1231.3 573.191,1231.09 573.777,1233.23 574.364,1232.69 574.95,1231.25 575.537,1232.18 576.123,1231.9 576.709,1236.35 577.296,1234.65 577.882,1231.88 578.469,1232.73 579.055,1231.06 579.641,1231.75 580.228,1232.57 580.814,1233.42 581.401,1237.58 581.987,1235.93 582.574,1235.26 583.16,1235.69 583.746,1237.62 584.333,1237.05 584.919,1236.57 585.506,1235.87 586.092,1233.16 586.678,1233.83 587.265,1232.42 587.851,1231.12 588.438,1230.79 589.024,1230.48 589.61,1228.96 590.197,1228.55 590.783,1225.88 591.37,1231.55 591.956,1232.39 592.543,1230.99 593.129,1231.83 593.715,1232.58 594.302,1234.55 594.888,1235.25 595.475,1235.6 596.061,1233.64 596.647,1231.93 597.234,1231.39 597.82,1233.27 598.407,1233.84 598.993,1235.69 599.579,1235.18 600.166,1234.57 600.752,1234 601.339,1232.39 601.925,1230.9 602.512,1230.54 603.098,1229.92 603.684,1229.54 604.271,1230.21 604.857,1230.81 605.444,1230.17 606.03,1231.01 606.616,1231.71 607.203,1233.26 607.789,1233.79 608.376,1233.28 608.962,1232.7 609.548,1233.22 610.135,1232.45 610.721,1233.01 611.308,1233.49 611.894,1232.9 612.481,1232.6 613.067,1232.1 613.653,1230.36 614.24,1230.02 614.826,1230.63 615.413,1231.34 615.999,1230.8 616.585,1225.72 617.172,1225.43 617.758,1224.24 618.345,1223.97 618.931,1224.85 619.518,1224.47 620.104,1225.23 620.69,1224.1 621.277,1226.29 621.863,1225.92 622.45,1224.57 623.036,1224.49 623.622,1226.84 624.209,1225.24 624.795,1223.94 625.382,1223.69 625.968,1222.35 626.554,1223.46 627.141,1224.55 627.727,1226.7 628.314,1228.64 628.9,1229.35 629.487,1226.73 630.073,1227.72 630.659,1224.15 631.246,1225.14 631.832,1224.91 632.419,1225.94 633.005,1224.41 633.591,1225.62 634.178,1225.53 634.764,1227.45 635.351,1229.59 635.937,1229.38 636.523,1227.77 637.11,1226.32 637.696,1228.17 638.283,1227.78 638.869,1228.54 639.456,1229.2 640.042,1229.81 640.628,1229.36 641.215,1228.79 641.801,1227.32 642.388,1228.2 642.974,1228.69 643.56,1228.02 644.147,1226.37 644.733,1225.77 645.32,1225.43 645.906,1223.83 646.492,1222.53 647.079,1221.67 647.665,1221.44 648.252,1221.23 648.838,1222.47 649.425,1220.95 650.011,1222.96 650.597,1221.46 651.184,1224.8 651.77,1226.69 652.357,1226.48 652.943,1221.68 653.529,1222.83 654.116,1220.29 654.702,1221.29 655.289,1220.02 655.875,1221.31 656.462,1221.23 657.048,1223.24 657.634,1223.04 658.221,1225.01 658.807,1223.23 659.394,1225.41 659.98,1224.04 660.566,1222.9 661.153,1225.15 661.739,1225.9 662.326,1223.33 662.912,1224.38 663.498,1222.92 664.085,1223.82 664.671,1223.5 665.258,1222.14 665.844,1223.15 666.431,1221.7 667.017,1221.43 667.603,1221.12 668.19,1223.18 668.776,1221.8 669.363,1223.08 669.949,1220.79 670.535,1221.92 671.122,1220.25 671.708,1219.19 672.295,1216.91 672.881,1215.76 673.467,1216.05 674.054,1214.86 674.64,1215.09 675.227,1215.33 675.813,1216.61 676.4,1218.1 676.986,1218.1 677.572,1222.59 678.159,1220.09 678.745,1223.41 679.332,1221.97 679.918,1220.58 680.504,1221.54 681.091,1219.1 681.677,1217.9 682.264,1215.55 682.85,1215.44 683.436,1216.85 684.023,1220.47 684.609,1220.58 685.196,1221.47 685.782,1219.04 686.369,1219.16 686.955,1219.24 687.541,1219.32 688.128,1219.11 688.714,1220.13 689.301,1222.32 689.887,1225.35 690.473,1225.88 691.06,1224.27 691.646,1223.93 692.233,1223.51 692.819,1221.98 693.405,1221.86 693.992,1222.77 694.578,1220.41 695.165,1216.75 695.751,1215.5 696.338,1215.54 696.924,1215.79 697.51,1217.07 698.097,1216.11 698.683,1215.13 699.27,1212.91 699.856,1215.21 700.442,1215.22 701.029,1215.63 701.615,1215.7 702.202,1217.98 702.788,1218.9 703.375,1218.87 703.961,1218.8 704.547,1219.91 705.134,1222.18 705.72,1222.05 706.307,1224.16 706.893,1223.78 707.479,1224.3 708.066,1224.21 708.652,1223.77 709.239,1221.16 709.825,1220.1 710.411,1220 710.998,1218.68 711.584,1218.62 712.171,1218.69 712.757,1217.49 713.344,1218.64 713.93,1219.61 714.516,1219.59 715.103,1222.93 715.689,1219.13 716.276,1220.12 716.862,1220.27 717.448,1220.14 718.035,1218.82 718.621,1216.19 719.208,1215.15 719.794,1215.22 720.38,1216.6 720.967,1218.6 721.553,1220.68 722.14,1220.42 722.726,1219.22 723.313,1218.97 723.899,1218.77 724.485,1218.49 725.072,1217.26 725.658,1217.26 726.245,1220.74 726.831,1221.53 727.417,1221.29 728.004,1221.07 728.59,1221 729.177,1222.16 729.763,1220.69 730.349,1219.38 730.936,1221.48 731.522,1222.45 732.109,1224.64 732.695,1222.99 733.282,1221.46 733.868,1220.02 734.454,1219.84 735.041,1220.74 735.627,1215.77 736.214,1215.63 736.8,1216.63 737.386,1219.75 737.973,1218.64 738.559,1218.7 739.146,1218.35 739.732,1219.25 740.318,1216.91 740.905,1216.75 741.491,1218.81 742.078,1218.86 742.664,1219.87 743.251,1219.57 743.837,1221.75 744.423,1220.35 745.01,1220.23 745.596,1219.96 746.183,1219.72 746.769,1217.14 747.355,1218.47 747.942,1218.46 748.528,1220.95 749.115,1220.8 749.701,1220.83 750.288,1223.87 750.874,1224.31 751.46,1224.07 752.047,1222.48 752.633,1223.38 753.22,1224.13 753.806,1221.58 754.392,1219.15 754.979,1219.14 755.565,1217.85 756.152,1218.94 756.738,1219.92 757.324,1218.78 757.911,1218.47 758.497,1217.18 759.084,1218.44 759.67,1218.42 760.257,1217.12 760.843,1216.95 761.429,1215.75 762.016,1212.28 762.602,1211.4 763.189,1211.66 763.775,1213.14 764.361,1212.07 764.948,1213.52 765.534,1211.3 766.121,1211.56 766.707,1210.54 767.293,1210.91 767.88,1212.44 768.466,1213.91 769.053,1214.95 769.639,1214.01 770.226,1214.98 770.812,1216.09 771.398,1216.18 771.985,1216.99 772.571,1219.22 773.158,1217.78 773.744,1219.08 774.33,1216.57 774.917,1215.51 775.503,1216.85 776.09,1218.2 776.676,1214.95 777.262,1214.84 777.849,1215.03 778.435,1213.84 779.022,1211.54 779.608,1215.15 780.195,1214.04 780.781,1212.68 781.367,1215.2 781.954,1215.27 782.54,1215.33 783.127,1214.16 783.713,1213.28 784.299,1213.38 784.886,1212.58 785.472,1211.65 786.059,1210.9 786.645,1211.13 787.232,1212.61 787.818,1210.35 788.404,1210.66 788.991,1211.95 789.577,1214.42 790.164,1215.76 790.75,1215.74 791.336,1214.37 791.923,1216.71 792.509,1215.46 793.096,1215.75 793.682,1214.52 794.268,1213.49 794.855,1216.01 795.441,1214.89 796.028,1214.99 796.614,1215.26 797.201,1215.21 797.787,1216.27 798.373,1217.27 798.96,1217.27 799.546,1217.05 800.133,1219.26 800.719,1217.83 801.305,1217.64 801.892,1217.22 802.478,1215.99 803.065,1215.52 803.651,1215.51 804.237,1215.65 804.824,1215.61 805.41,1214.33 805.997,1213.09 806.583,1214.39 807.17,1216.75 807.756,1218.91 808.342,1216.37 808.929,1215.12 809.515,1216.37 810.102,1215.04 810.688,1215.09 811.274,1212.51 811.861,1212.81 812.447,1216.5 813.034,1214.05 813.62,1211.81 814.206,1214.2 814.793,1215.58 815.379,1212.93 815.966,1213.11 816.552,1209.76 817.139,1210.06 817.725,1211.32 818.311,1211.63 818.898,1211.93 819.484,1213.27 820.071,1211.93 820.657,1213.53 821.243,1213.71 821.83,1216.07 822.416,1218.49 823.003,1217.02 823.589,1215.64 824.175,1217.95 824.762,1216.56 825.348,1218.9 825.935,1218.95 826.521,1220.12 827.108,1222.11 827.694,1220.67 828.28,1220.23 828.867,1218.87 829.453,1220.91 830.04,1219.55 830.626,1219.15 831.212,1220.15 831.799,1218.79 832.385,1220.96 832.972,1220.51 833.558,1219.12 834.145,1219.08 834.731,1220.1 835.317,1218.58 835.904,1219.31 836.49,1219.19 837.077,1216.63 837.663,1215.46 838.249,1215.4 838.836,1215.39 839.422,1220 840.009,1219.77 840.595,1220.92 841.181,1220.55 841.768,1220.24 842.354,1218.49 842.941,1219.42 843.527,1217 844.114,1216.79 844.7,1215.55 845.286,1215.49 845.873,1220.02 846.459,1217.29 847.046,1215.96 847.632,1213.56 848.218,1212.54 848.805,1213.79 849.391,1212.46 849.978,1210.25 850.564,1211.6 851.15,1212.92 851.737,1211.9 852.323,1212.96 852.91,1214.27 853.496,1214.33 854.083,1215.52 854.669,1216.9 855.255,1212.11 855.842,1211.11 856.428,1212.52 857.015,1211.57 857.601,1211.86 858.187,1210.85 858.774,1213.35 859.36,1213.35 859.947,1212.1 860.533,1208.76 861.119,1207.8 861.706,1207.08 862.292,1206.17 862.879,1206.65 863.465,1209.06 864.052,1209.21 864.638,1209.64 865.224,1208.92 865.811,1211.71 866.397,1210.76 866.984,1210.92 867.57,1206.42 868.156,1209.08 868.743,1209.48 869.329,1212.18 869.916,1210.07 870.502,1210.25 871.089,1209.26 871.675,1211.89 872.261,1213.25 872.848,1210.98 873.434,1209.96 874.021,1211.31 874.607,1211.53 875.193,1212.76 875.78,1212.72 876.366,1212.95 876.953,1212.94 877.539,1209.43 878.125,1208.47 878.712,1209.79 879.298,1209.81 879.885,1212.24 880.471,1213.31 881.058,1213.51 881.644,1212.56 882.23,1212.59 882.817,1212.88 883.403,1209.46 883.99,1209.55 884.576,1207.36 885.162,1207.56 885.749,1207.77 886.335,1205.97 886.922,1207.64 887.508,1209.21 888.094,1205.91 888.681,1206.04 889.267,1206.6 889.854,1207.12 890.44,1209.86 891.027,1211.45 891.613,1212.72 892.199,1210.63 892.786,1207.55 893.372,1210.21 893.959,1209.51 894.545,1208.51 895.131,1212.34 895.718,1211.36 896.304,1210.43 896.891,1211.72 897.477,1210.83 898.063,1209.88 898.65,1211.22 899.236,1209.15 899.823,1209.63 900.409,1210.08 900.996,1211.55 901.582,1211.75 902.168,1210.64 902.755,1212.06 903.341,1213.32 903.928,1214.56 904.514,1213.59 905.1,1213.62 905.687,1214.99 906.273,1216.18 906.86,1217.13 907.446,1214.63 908.032,1216.63 908.619,1217.34 909.205,1216.41 909.792,1216.45 910.378,1215.19 910.965,1215.18 911.551,1215.21 912.137,1214.06 912.724,1216.3 913.31,1214.98 913.897,1217.36 914.483,1217.26 915.069,1216.06 915.656,1219.41 916.242,1216.86 916.829,1216.76 917.415,1215.63 918.002,1215.38 918.588,1215.08 919.174,1215.99 919.761,1214.46 920.347,1214.21 920.934,1210.67 921.52,1209.46 922.106,1209.67 922.693,1212.13 923.279,1210.8 923.866,1211 924.452,1211.22 925.038,1211.32 925.625,1211.21 926.211,1206.9 926.798,1205.99 927.384,1207.51 927.971,1206.51 928.557,1209.27 929.143,1208.58 929.73,1210 930.316,1211.34 930.903,1213.77 931.489,1217.14 932.075,1218.28 932.662,1219.18 933.248,1218.82 933.835,1217.33 934.421,1218.35 935.007,1218.85 935.594,1220.83 936.18,1219.39 936.767,1218.09 937.353,1215.36 937.94,1214.01 938.526,1211.81 939.112,1214.14 939.699,1211.92 940.285,1210.73 940.872,1212.07 941.458,1212.36 942.044,1212.48 942.631,1214.86 943.217,1215.84 943.804,1214.44 944.39,1214.57 944.976,1214.71 945.563,1214.91 946.149,1215.88 946.736,1213.59 947.322,1214.53 947.909,1215.65 948.495,1217.85 949.081,1217.82 949.668,1216.59 950.254,1216.6 950.841,1217.66 951.427,1219.65 952.013,1221.36 952.6,1220.8 953.186,1220.07 953.773,1218.66 954.359,1219.55 954.945,1219.12 955.532,1220.07 956.118,1218.5 956.705,1220.65 957.291,1219.14 957.878,1218.94 958.464,1220.84 959.05,1221.6 959.637,1221.19 960.223,1220.75 960.81,1220.53 961.396,1219.07 961.982,1217.49 962.569,1216.1 963.155,1212.49 963.742,1213.75 964.328,1214.7 964.915,1214.55 965.501,1214.65 966.087,1214.73 966.674,1215.58 967.26,1215.21 967.847,1215.29 968.433,1210.47 969.019,1210.89 969.606,1214.4 970.192,1215.43 970.779,1214.07 971.365,1215.09 971.951,1216.14 972.538,1216.32 973.124,1217.35 973.711,1216.27 974.297,1215.41 974.884,1214.19 975.47,1211.68 976.056,1214.14 976.643,1217.52 977.229,1218.77 977.816,1218.49 978.402,1218.26 978.988,1218.01 979.575,1217.81 980.161,1217.57 980.748,1217.23 981.334,1216.96 981.92,1215.54 982.507,1215.29 983.093,1217.19 983.68,1216.92 984.266,1216.84 984.853,1218.11 985.439,1221.25 986.025,1219.63 986.612,1220.24 987.198,1219.94 987.785,1220.68 988.371,1219.86 988.957,1219.59 989.544,1222.65 990.13,1222.15 990.717,1220.56 991.303,1221.47 991.889,1224.43 992.476,1222.68 993.062,1221.99 993.649,1219.39 994.235,1218.09 994.822,1219.04 995.408,1216.44 995.994,1217.33 996.581,1216.08 997.167,1216.04 997.754,1216.97 998.34,1215.55 998.926,1216.59 999.513,1214.16 1000.1,1214.23 1000.69,1215.2 1001.27,1214.96 1001.86,1217.41 1002.44,1215.09 1003.03,1215.31 1003.62,1213.93 1004.2,1214.99 1004.79,1214.79 1005.38,1212.41 1005.96,1211.28 1006.55,1210.16 1007.14,1210.27 1007.72,1208.21 1008.31,1208.29 1008.9,1207.03 1009.48,1210.72 1010.07,1212.94 1010.65,1211.8 1011.24,1213.18 1011.83,1210.71 1012.41,1211.84 1013,1212.12 1013.59,1211.99 1014.17,1214.41 1014.76,1213.37 1015.35,1211.09 1015.93,1209.87 1016.52,1210.25 1017.11,1209.13 1017.69,1208.23 1018.28,1207.51 1018.86,1208.95 1019.45,1210.4 1020.04,1206.98 1020.62,1206.2 1021.21,1207.61 1021.8,1205.74 1022.38,1206.16 1022.97,1207.64 1023.56,1206.87 1024.14,1204.98 1024.73,1203.52 1025.32,1205.11 1025.9,1205.31 1026.49,1206.73 1027.07,1205.89 1027.66,1205.16 1028.25,1206.77 1028.83,1206.01 1029.42,1207.61 1030.01,1212.4 1030.59,1212.55 1031.18,1213.69 1031.77,1214.85 1032.35,1215.99 1032.94,1215.87 1033.52,1215.81 1034.11,1218.03 1034.7,1216.58 1035.28,1217.43 1035.87,1217.4 1036.46,1217.09 1037.04,1215.74 1037.63,1214.26 1038.22,1217.51 1038.8,1218.59 1039.39,1217.36 1039.98,1218.58 1040.56,1217.25 1041.15,1216.91 1041.73,1215.6 1042.32,1215.56 1042.91,1212.1 1043.49,1211.07 1044.08,1211.19 1044.67,1213.6 1045.25,1216.28 1045.84,1214.86 1046.43,1215.72 1047.01,1217.99 1047.6,1215.47 1048.19,1216.55 1048.77,1216.43 1049.36,1217.59 1049.94,1218.6 1050.53,1221.75 1051.12,1220.16 1051.7,1219.65 1052.29,1218.23 1052.88,1217.86 1053.46,1215.33 1054.05,1217.53 1054.64,1216.15 1055.22,1218.51 1055.81,1217.1 1056.39,1216.95 1056.98,1216.82 1057.57,1216.78 1058.15,1215.45 1058.74,1214.24 1059.33,1214.29 1059.91,1215.52 1060.5,1215.22 1061.09,1216.22 1061.67,1217.08 1062.26,1213.51 1062.85,1214.59 1063.43,1214.35 1064.02,1213.23 1064.6,1213.05 1065.19,1209.58 1065.78,1207.3 1066.36,1206.51 1066.95,1207.74 1067.54,1208 1068.12,1210.65 1068.71,1208.33 1069.3,1207.71 1069.88,1208.02 1070.47,1208.38 1071.06,1209.89 1071.64,1211.39 1072.23,1211.54 1072.81,1212.41 1073.4,1207.67 1073.99,1209.18 1074.57,1208.13 1075.16,1208.54 1075.75,1209.64 1076.33,1209.8 1076.92,1211.01 1077.51,1211.24 1078.09,1210.2 1078.68,1210.33 1079.26,1211.67 1079.85,1211.92 1080.44,1208.41 1081.02,1212.03 1081.61,1214.22 1082.2,1214.26 1082.78,1216.32 1083.37,1218.33 1083.96,1217.07 1084.54,1217.02 1085.13,1216.75 1085.72,1216.6 1086.3,1216.07 1086.89,1217.06 1087.47,1215.89 1088.06,1217.04 1088.65,1215.69 1089.23,1214.42 1089.82,1210.86 1090.41,1211.93 1090.99,1211.82 1091.58,1210.62 1092.17,1207.37 1092.75,1206.33 1093.34,1204.36 1093.93,1204.61 1094.51,1206.29 1095.1,1207.9 1095.68,1208.11 1096.27,1207.27 1096.86,1206.21 1097.44,1206.53 1098.03,1208.26 1098.62,1207.57 1099.2,1209.22 1099.79,1207.29 1100.38,1208.8 1100.96,1211.33 1101.55,1212.86 1102.14,1212.96 1102.72,1215.22 1103.31,1217.15 1103.89,1217.01 1104.48,1214.61 1105.07,1214.57 1105.65,1214.38 1106.24,1213.25 1106.83,1215.46 1107.41,1215.44 1108,1213.91 1108.59,1213.73 1109.17,1215.78 1109.76,1214.48 1110.34,1212.1 1110.93,1208.84 1111.52,1206.66 1112.1,1209.5 1112.69,1210.85 1113.28,1211.15 1113.86,1211.32 1114.45,1212.62 1115.04,1210.31 1115.62,1210.53 1116.21,1209.42 1116.8,1207.45 1117.38,1207.96 1117.97,1208.18 1118.55,1208.47 1119.14,1208.79 1119.73,1208.1 1120.31,1209.64 1120.9,1209.77 1121.49,1210.06 1122.07,1210.37 1122.66,1211.66 1123.25,1213.31 1123.83,1213.64 1124.42,1211.09 1125.01,1211.39 1125.59,1213.88 1126.18,1213.94 1126.76,1214.18 1127.35,1210.8 1127.94,1212.33 1128.52,1211.39 1129.11,1211.68 1129.7,1211.64 1130.28,1214.12 1130.87,1212.98 1131.46,1214.11 1132.04,1211.73 1132.63,1210.94 1133.21,1210.95 1133.8,1212.35 1134.39,1213.53 1134.97,1214.52 1135.56,1213.03 1136.15,1211.87 1136.73,1214.24 1137.32,1213.17 1137.91,1214.3 1138.49,1212.93 1139.08,1211.7 1139.67,1214.34 1140.25,1214.08 1140.84,1212.78 1141.42,1215.08 1142.01,1213.72 1142.6,1211.39 1143.18,1212.69 1143.77,1216.04 1144.36,1217.06 1144.94,1215.94 1145.53,1218.13 1146.12,1219.12 1146.7,1219.85 1147.29,1219.81 1147.88,1222.96 1148.46,1223.61 1149.05,1225.3 1149.63,1223.5 1150.22,1222.81 1150.81,1222.28 1151.39,1220.7 1151.98,1220.27 1152.57,1224.58 1153.15,1224.37 1153.74,1224.69 1154.33,1222.85 1154.91,1224.58 1155.5,1224 1156.09,1223.59 1156.67,1220.67 1157.26,1216.75 1157.84,1213.23 1158.43,1214.5 1159.02,1215.19 1159.6,1216.02 1160.19,1216.89 1160.78,1216.59 1161.36,1216.37 1161.95,1214.96 1162.54,1215 1163.12,1213.75 1163.71,1214.77 1164.29,1215.76 1164.88,1213.4 1165.47,1212.6 1166.05,1212.8 1166.64,1210.45 1167.23,1210.39 1167.81,1211.74 1168.4,1210.8 1168.99,1213.23 1169.57,1213.22 1170.16,1210.94 1170.75,1209.05 1171.33,1210.4 1171.92,1211.59 1172.5,1210.56 1173.09,1210.48 1173.68,1208.26 1174.26,1210.54 1174.85,1209.34 1175.44,1209.61 1176.02,1209.84 1176.61,1210.15 1177.2,1210.2 1177.78,1211.68 1178.37,1213.1 1178.96,1213.05 1179.54,1213.19 1180.13,1213.06 1180.71,1211.91 1181.3,1213.07 1181.89,1210.71 1182.47,1210.69 1183.06,1211.58 1183.65,1211.8 1184.23,1212.71 1184.82,1211.76 1185.41,1211.67 1185.99,1211.67 1186.58,1211.65 1187.16,1210.63 1187.75,1213.16 1188.34,1214.39 1188.92,1214.36 1189.51,1215.7 1190.1,1212.18 1190.68,1211 1191.27,1211.01 1191.86,1209.91 1192.44,1210.08 1193.03,1210.29 1193.62,1210.46 1194.2,1210.52 1194.79,1209.61 1195.37,1210.66 1195.96,1210.74 1196.55,1209.62 1197.13,1209.91 1197.72,1212.29 1198.31,1211.32 1198.89,1212.63 1199.48,1211.52 1200.07,1211.51 1200.65,1211.6 1201.24,1210.6 1201.83,1209.47 1202.41,1210.85 1203,1210.97 1203.58,1208.79 1204.17,1209.01 1204.76,1210.31 1205.34,1211.49 1205.93,1211.49 1206.52,1211.45 1207.1,1213.9 1207.69,1215 1208.28,1213.76 1208.86,1211.53 1209.45,1211.49 1210.03,1212.65 1210.62,1212.74 1211.21,1212.6 1211.79,1212.65 1212.38,1211.5 1212.97,1211.46 1213.55,1211.41 1214.14,1211.35 1214.73,1211.59 1215.31,1211.39 1215.9,1210.49 1216.49,1208.47 1217.07,1207.47 1217.66,1209.91 1218.24,1208.02 1218.83,1208.42 1219.42,1211.16 1220,1211.12 1220.59,1212.63 1221.18,1212.71 1221.76,1213.72 1222.35,1212.66 1222.94,1212.6 1223.52,1211.57 1224.11,1212.83 1224.7,1212.77 1225.28,1212.75 1225.87,1214.9 1226.45,1216.88 1227.04,1218.77 1227.63,1217.26 1228.21,1220.17 1228.8,1219.81 1229.39,1218.22 1229.97,1218.95 1230.56,1217.34 1231.15,1215.86 1231.73,1215.88 1232.32,1214.71 1232.91,1214.48 1233.49,1215.55 1234.08,1214.31 1234.66,1214.18 1235.25,1214.2 1235.84,1213.02 1236.42,1215.51 1237.01,1216.61 1237.6,1216.37 1238.18,1213.9 1238.77,1213.89 1239.36,1217.22 1239.94,1216.89 1240.53,1216.53 1241.11,1214.95 1241.7,1213.75 1242.29,1211.36 1242.87,1212.76 1243.46,1211.43 1244.05,1212.69 1244.63,1213.8 1245.22,1213.67 1245.81,1213.46 1246.39,1214.48 1246.98,1215.71 1247.57,1215.54 1248.15,1215.38 1248.74,1218.43 1249.32,1218.1 1249.91,1217.71 1250.5,1217.35 1251.08,1216.04 1251.67,1216.99 1252.26,1216.72 1252.84,1215.2 1253.43,1214.09 1254.02,1213.93 1254.6,1211.62 1255.19,1209.5 1255.78,1207.27 1256.36,1207.67 1256.95,1209.03 1257.53,1209.3 1258.12,1208.37 1258.71,1208.66 1259.29,1209.02 1259.88,1209.18 1260.47,1208.37 1261.05,1211.96 1261.64,1212.14 1262.23,1207.59 1262.81,1211.48 1263.4,1212.74 1263.98,1216.16 1264.57,1219.4 1265.16,1219.01 1265.74,1218.53 1266.33,1215.77 1266.92,1215.7 1267.5,1216.65 1268.09,1215.26 1268.68,1214.07 1269.26,1213.86 1269.85,1215.03 1270.44,1214.92 1271.02,1218.07 1271.61,1219.09 1272.19,1221.93 1272.78,1221.33 1273.37,1220.92 1273.95,1220.5 1274.54,1220.94 1275.13,1220.59 1275.71,1219 1276.3,1218.7 1276.89,1218.31 1277.47,1217.76 1278.06,1216.48 1278.65,1213.67 1279.23,1214.78 1279.82,1216.03 1280.4,1214.87 1280.99,1212.52 1281.58,1214.9 1282.16,1217.01 1282.75,1214.65 1283.34,1214.6 1283.92,1213.35 1284.51,1210.98 1285.1,1207.64 1285.68,1206.82 1286.27,1203.64 1286.86,1205.28 1287.44,1205.79 1288.03,1204.92 1288.61,1207.75 1289.2,1206.84 1289.79,1207.19 1290.37,1207.56 1290.96,1207.76 1291.55,1209.36 1292.13,1208.33 1292.72,1209.74 1293.31,1210.98 1293.89,1211.05 1294.48,1213.47 1295.06,1213.43 1295.65,1213.58 1296.24,1214.65 1296.82,1216.8 1297.41,1214.1 1298,1215 1298.58,1212.56 1299.17,1213.59 1299.76,1212.43 1300.34,1211.36 1300.93,1211.54 1301.52,1212.89 1302.1,1215.33 1302.69,1215.21 1303.27,1216.26 1303.86,1216.17 1304.45,1215 1305.03,1213.58 1305.62,1216.06 1306.21,1215.75 1306.79,1214.54 1307.38,1214.48 1307.97,1217.98 1308.55,1215.54 1309.14,1216.66 1309.73,1215.35 1310.31,1218.56 1310.9,1216.08 1311.48,1218.21 1312.07,1216.69 1312.66,1216.51 1313.24,1215.08 1313.83,1213.56 1314.42,1212.32 1315,1211.3 1315.59,1212.41 1316.18,1212.23 1316.76,1213.47 1317.35,1215.78 1317.93,1217.92 1318.52,1215.28 1319.11,1215.12 1319.69,1213.8 1320.28,1212.7 1320.87,1211.31 1321.45,1211.39 1322.04,1210.11 1322.63,1208.12 1323.21,1207.47 1323.8,1207.94 1324.39,1210.5 1324.97,1210.79 1325.56,1208.39 1326.14,1208.71 1326.73,1210.08 1327.32,1212.37 1327.9,1213.31 1328.49,1212.2 1329.08,1212.3 1329.66,1212.29 1330.25,1212.3 1330.84,1212.24 1331.42,1212.36 1332.01,1214.87 1332.6,1215.79 1333.18,1214.35 1333.77,1215.39 1334.35,1216.37 1334.94,1217.43 1335.53,1216.99 1336.11,1216.87 1336.7,1217.79 1337.29,1217.65 1337.87,1217.44 1338.46,1217.03 1339.05,1216.85 1339.63,1215.48 1340.22,1218.52 1340.8,1215.93 1341.39,1213.44 1341.98,1214.72 1342.56,1217 1343.15,1215.62 1343.74,1215.49 1344.32,1214.13 1344.91,1214 1345.5,1212.88 1346.08,1214.39 1346.67,1215.6 1347.26,1216.56 1347.84,1219.75 1348.43,1218.09 1349.01,1216.77 1349.6,1216.45 1350.19,1216.44 1350.77,1217.3 1351.36,1217.15 1351.95,1213.63 1352.53,1211.2 1353.12,1211.32 1353.71,1210.2 1354.29,1212.59 1354.88,1213.87 1355.47,1212.54 1356.05,1211.5 1356.64,1211.37 1357.22,1212.63 1357.81,1208.19 1358.4,1208.23 1358.98,1208.63 1359.57,1208.92 1360.16,1209.27 1360.74,1206.13 1361.33,1206.65 1361.92,1207.04 1362.5,1208.63 1363.09,1208.62 1363.68,1208.91 1364.26,1211.13 1364.85,1213.37 1365.43,1210.16 1366.02,1210.29 1366.61,1209.34 1367.19,1211.98 1367.78,1213.11 1368.37,1214.26 1368.95,1215.49 1369.54,1215.14 1370.13,1215.18 1370.71,1216.17 1371.3,1213.59 1371.88,1212.36 1372.47,1211.38 1373.06,1210.07 1373.64,1211.51 1374.23,1212.72 1374.82,1211.78 1375.4,1209.72 1375.99,1207.57 1376.58,1209.24 1377.16,1210.32 1377.75,1210.34 1378.34,1210.48 1378.92,1208.43 1379.51,1209.92 1380.09,1210.02 1380.68,1212.25 1381.27,1213.5 1381.85,1214.68 1382.44,1214.69 1383.03,1215.57 1383.61,1216.66 1384.2,1216.48 1384.79,1217.39 1385.37,1216.26 1385.96,1213.8 1386.55,1212.54 1387.13,1212.39 1387.72,1211.39 1388.3,1210.11 1388.89,1209.04 1389.48,1204.46 1390.06,1207.37 1390.65,1204.31 1391.24,1202.38 1391.82,1205.13 1392.41,1205.51 1393,1207.22 1393.58,1204.92 1394.17,1203.1 1394.75,1206.08 1395.34,1205.11 1395.93,1206.66 1396.51,1205.94 1397.1,1206.31 1397.69,1206.67 1398.27,1206.84 1398.86,1207.03 1399.45,1204.98 1400.03,1207.84 1400.62,1210.42 1401.21,1209.1 1401.79,1211.62 1402.38,1215.29 1402.96,1218.34 1403.55,1218.1 1404.14,1219.05 1404.72,1217.68 1405.31,1215.3 1405.9,1215.23 1406.48,1213.95 1407.07,1215.15 1407.66,1216.19 1408.24,1214.63 1408.83,1213.54 1409.42,1213.67 1410,1212.54 1410.59,1216.02 1411.17,1218.22 1411.76,1218.86 1412.35,1216.14 1412.93,1216.07 1413.52,1214.63 1414.11,1214.58 1414.69,1213.43 1415.28,1214.68 1415.87,1214.7 1416.45,1215.79 1417.04,1215.91 1417.63,1217.05 1418.21,1214.74 1418.8,1214.75 1419.38,1211.25 1419.97,1213.73 1420.56,1212.41 1421.14,1213.51 1421.73,1215.93 1422.32,1211.01 1422.9,1211.09 1423.49,1212.24 1424.08,1212.51 1424.66,1211.36 1425.25,1212.51 1425.83,1212.68 1426.42,1212.54 1427.01,1213.66 1427.59,1212.22 1428.18,1212.32 1428.77,1211.5 1429.35,1211.84 1429.94,1214.13 1430.53,1212.85 1431.11,1212.99 1431.7,1214.07 1432.29,1214.08 1432.87,1210.35 1433.46,1211.71 1434.04,1213.96 1434.63,1215.13 1435.22,1217.47 1435.8,1214.88 1436.39,1214.85 1436.98,1215.76 1437.56,1213.41 1438.15,1212.2 1438.74,1212.18 1439.32,1209.75 1439.91,1210.11 1440.5,1208.96 1441.08,1208.03 1441.67,1210.59 1442.25,1210.5 1442.84,1208.12 1443.43,1208.14 1444.01,1209.6 1444.6,1207.53 1445.19,1205.38 1445.77,1208.1 1446.36,1207.26 1446.95,1206.44 1447.53,1205.57 1448.12,1207.18 1448.7,1207.6 1449.29,1209 1449.88,1209.2 1450.46,1211.95 1451.05,1213.09 1451.64,1212.11 1452.22,1214.63 1452.81,1214.6 1453.4,1213.65 1453.98,1213.65 1454.57,1214.66 1455.16,1216.7 1455.74,1215.41 1456.33,1215.4 1456.91,1214.04 1457.5,1213.77 1458.09,1213.82 1458.67,1215.02 1459.26,1213.55 1459.85,1213.38 1460.43,1213.42 1461.02,1214.59 1461.61,1215.65 1462.19,1215.46 1462.78,1215.48 1463.37,1215.57 1463.95,1217.89 1464.54,1216.42 1465.12,1218.39 1465.71,1220.24 1466.3,1219.78 1466.88,1221.53 1467.47,1219.88 1468.06,1216.99 1468.64,1217.57 1469.23,1215.07 1469.82,1214.85 1470.4,1213.47 1470.99,1214.59 1471.57,1218.83 1472.16,1219.81 1472.75,1221.56 1473.33,1221.02 1473.92,1217.37 1474.51,1216.07 1475.09,1215.96 1475.68,1214.55 1476.27,1214.42 1476.85,1213.3 1477.44,1213.29 1478.03,1208.63 1478.61,1208.8 1479.2,1209.07 1479.78,1209.45 1480.37,1208.24 1480.96,1209.86 1481.54,1208.74 1482.13,1208.74 1482.72,1208.78 1483.3,1211.28 1483.89,1210.25 1484.48,1210.13 1485.06,1211.3 1485.65,1207.76 1486.24,1208.02 1486.82,1209.26 1487.41,1211.88 1487.99,1213.09 1488.58,1216.63 1489.17,1216.38 1489.75,1217.18 1490.34,1216.76 1490.93,1217.46 1491.51,1216.17 1492.1,1217.11 1492.69,1218.26 1493.27,1216.71 1493.86,1215.15 1494.45,1216.26 1495.03,1215.13 1495.62,1215.1 1496.2,1212.99 1496.79,1210.8 1497.38,1210.92 1497.96,1211.94 1498.55,1210.51 1499.14,1208.35 1499.72,1208.63 1500.31,1208.81 1500.9,1210.29 1501.48,1210.48 1502.07,1211.66 1502.65,1211.78 1503.24,1212.07 1503.83,1210.97 1504.41,1212.16 1505,1211.03 1505.59,1213.12 1506.17,1212.06 1506.76,1211.87 1507.35,1211.02 1507.93,1211.2 1508.52,1212.35 1509.11,1213.44 1509.69,1212.26 1510.28,1212.57 1510.86,1214.89 1511.45,1219.28 1512.04,1218.72 1512.62,1221.73 1513.21,1222.42 1513.8,1222.07 1514.38,1221.54 1514.97,1220.09 1515.56,1219.75 1516.14,1215.94 1516.73,1217.07 1517.32,1215.94 1517.9,1216.94 1518.49,1218.95 1519.07,1218.54 1519.66,1220.57 1520.25,1219 1520.83,1217.46 1521.42,1215.1 1522.01,1213.7 1522.59,1214.89 1523.18,1214.44 1523.77,1213.32 1524.35,1216.71 1524.94,1216.57 1525.52,1216.53 1526.11,1215.01 1526.7,1212.46 1527.28,1212.59 1527.87,1211.33 1528.46,1211.21 1529.04,1211.3 1529.63,1212.52 1530.22,1211.44 1530.8,1210.34 1531.39,1210.33 1531.98,1207.15 1532.56,1210.15 1533.15,1210.35 1533.73,1209.49 1534.32,1208.33 1534.91,1208.78 1535.49,1208.69 1536.08,1208.89 1536.67,1209.08 1537.25,1207 1537.84,1207.17 1538.43,1207.54 1539.01,1207.8 1539.6,1208.14 1540.19,1209.33 1540.77,1208.31 1541.36,1207.52 1541.94,1206.7 1542.53,1207.93 1543.12,1207.15 1543.7,1210.77 1544.29,1209.81 1544.88,1207.63 1545.46,1207.73 1546.05,1208.76 1546.64,1213.56 1547.22,1214.8 1547.81,1214.45 1548.4,1213.46 1548.98,1213.61 1549.57,1213.67 1550.15,1213.62 1550.74,1211.43 1551.33,1211.3 1551.91,1212.4 1552.5,1210.23 1553.09,1209.15 1553.67,1209.28 1554.26,1208.44 1554.85,1208.71 1555.43,1210.33 1556.02,1210.76 1556.6,1209.86 1557.19,1210.11 1557.78,1210.36 1558.36,1211.52 1558.95,1209.16 1559.54,1209.32 1560.12,1209.42 1560.71,1208.49 1561.3,1208.55 1561.88,1210.1 1562.47,1211.25 1563.06,1210.14 1563.64,1208.83 1564.23,1208.98 1564.81,1210.52 1565.4,1209.62 1565.99,1209.65 1566.57,1207.51 1567.16,1209.15 1567.75,1212.84 1568.33,1213.89 1568.92,1211.73 1569.51,1212.85 1570.09,1211.68 1570.68,1211.77 1571.27,1213.17 1571.85,1214.35 1572.44,1213.1 1573.02,1211.92 1573.61,1211.8 1574.2,1213.28 1574.78,1214.24 1575.37,1215.4 1575.96,1217.51 1576.54,1217.37 1577.13,1218.39 1577.72,1217 1578.3,1218.02 1578.89,1217.9 1579.47,1214.24 1580.06,1213.29 1580.65,1211.97 1581.23,1212.79 1581.82,1213.88 1582.41,1215.2 1582.99,1216.4 1583.58,1212.64 1584.17,1208.45 1584.75,1209.71 1585.34,1207.58 1585.93,1205.65 1586.51,1206.11 1587.1,1206.43 1587.68,1206.75 1588.27,1206.84 1588.86,1207.2 1589.44,1208.57 1590.03,1207.39 1590.62,1208.51 1591.2,1208.68 1591.79,1208.86 1592.38,1211.37 1592.96,1213.74 1593.55,1212.49 1594.14,1211.28 1594.72,1211.36 1595.31,1213.56 1595.89,1211.37 1596.48,1212.53 1597.07,1214.96 1597.65,1215.06 1598.24,1213.99 1598.83,1213.96 1599.41,1215.16 1600,1215.14 1600.59,1213.93 1601.17,1214.85 1601.76,1215.86 1602.34,1218.05 1602.93,1219.05 1603.52,1219.77 1604.1,1220.5 1604.69,1219.94 1605.28,1220.77 1605.86,1220.66 1606.45,1220.23 1607.04,1219.8 1607.62,1221.7 1608.21,1221.26 1608.8,1219.52 1609.38,1219.17 1609.97,1215.28 1610.55,1216.34 1611.14,1214.99 1611.73,1214.96 1612.31,1214.65 1612.9,1215.62 1613.49,1216.81 1614.07,1216.81 1614.66,1216.38 1615.25,1218.47 1615.83,1216.91 1616.42,1217.83 1617.01,1214.22 1617.59,1214.3 1618.18,1215.04 1618.76,1212.92 1619.35,1212.91 1619.94,1212.84 1620.52,1211.52 1621.11,1209.2 1621.7,1209.17 1622.28,1209.36 1622.87,1207.28 1623.46,1205.07 1624.04,1202.99 1624.63,1203.32 1625.22,1206.15 1625.8,1207.69 1626.39,1209.14 1626.97,1209.27 1627.56,1209.53 1628.15,1209.74 1628.73,1207.85 1629.32,1205.83 1629.91,1206.49 1630.49,1206.7 1631.08,1208.17 1631.67,1209.48 1632.25,1211.81 1632.84,1208.22 1633.42,1205.87 1634.01,1203.74 1634.6,1205.43 1635.18,1206.79 1635.77,1207.22 1636.36,1207.54 1636.94,1206.56 1637.53,1207.13 1638.12,1211.19 1638.7,1211.19 1639.29,1212.4 1639.88,1212.66 1640.46,1212.74 1641.05,1211.65 1641.63,1212.85 1642.22,1214.08 1642.81,1214.16 1643.39,1213.05 1643.98,1213.1 1644.57,1211.75 1645.15,1211.99 1645.74,1213.07 1646.33,1213.13 1646.91,1212.13 1647.5,1212.13 1648.09,1212.22 1648.67,1208.74 1649.26,1210.11 1649.84,1208.85 1650.43,1210.08 1651.02,1211.19 1651.6,1215.59 1652.19,1215.63 1652.78,1215.36 1653.36,1214.09 1653.95,1213.95 1654.54,1217.09 1655.12,1216.92 1655.71,1215.63 1656.29,1215.64 1656.88,1215.57 1657.47,1214.16 1658.05,1211.95 1658.64,1213.13 1659.23,1213.13 1659.81,1215.35 1660.4,1215.17 1660.99,1214.03 1661.57,1212.81 1662.16,1212.83 1662.75,1212.72 1663.33,1212.67 1663.92,1212.56 1664.5,1210.4 1665.09,1208.2 1665.68,1210.98 1666.26,1212.15 1666.85,1213.34 1667.44,1216.53 1668.02,1215.03 1668.61,1212.66 1669.2,1213.99 1669.78,1214.08 1670.37,1215.33 1670.96,1216.48 1671.54,1216.34 1672.13,1216.09 1672.71,1217 1673.3,1215.69 1673.89,1214.07 1674.47,1213.9 1675.06,1213.93 1675.65,1214.84 1676.23,1213.86 1676.82,1214.88 1677.41,1215.99 1677.99,1215.75 1678.58,1215.33 1679.17,1214 1679.75,1213.02 1680.34,1212.89 1680.92,1211.8 1681.51,1211.96 1682.1,1211.87 1682.68,1213.06 1683.27,1211.79 1683.86,1212.08 1684.44,1212.08 1685.03,1210.7 1685.62,1210.78 1686.2,1210.65 1686.79,1211.81 1687.37,1210.81 1687.96,1209.74 1688.55,1211.09 1689.13,1212.18 1689.72,1212.32 1690.31,1212.51 1690.89,1212.61 1691.48,1216.12 1692.07,1215.79 1692.65,1212.31 1693.24,1213.47 1693.83,1212.3 1694.41,1213.42 1695,1213.57 1695.58,1212.45 1696.17,1212.43 1696.76,1210.2 1697.34,1211.32 1697.93,1211.48 1698.52,1211.54 1699.1,1210.58 1699.69,1211.74 1700.28,1210.67 1700.86,1210.89 1701.45,1209.95 1702.04,1213.53 1702.62,1213.54 1703.21,1212.43 1703.79,1211.46 1704.38,1211.61 1704.97,1214 1705.55,1216.23 1706.14,1218.16 1706.73,1219.03 1707.31,1218.73 1707.9,1219.54 1708.49,1219.02 1709.07,1218.64 1709.66,1215.84 1710.24,1215.86 1710.83,1216.96 1711.42,1219.02 1712,1218.7 1712.59,1218.47 1713.18,1219.4 1713.76,1220.24 1714.35,1221.11 1714.94,1219.45 1715.52,1218.7 1716.11,1219.63 1716.7,1220.43 1717.28,1220.12 1717.87,1218.4 1718.45,1219.4 1719.04,1219.02 1719.63,1217.71 1720.21,1218.49 1720.8,1217.3 1721.39,1216.97 1721.97,1215.73 1722.56,1214.35 1723.15,1213.11 1723.73,1212.88 1724.32,1211.52 1724.91,1210.57 1725.49,1209.87 1726.08,1209.9 1726.66,1207.96 1727.25,1208.14 1727.84,1209.43 1728.42,1208.44 1729.01,1207.33 1729.6,1208.65 1730.18,1206.81 1730.77,1206.07 1731.36,1209.66 1731.94,1211.04 1732.53,1208.83 1733.11,1209.11 1733.7,1209.18 1734.29,1206.99 1734.87,1206.24 1735.46,1204.07 1736.05,1204.64 1736.63,1201.5 1737.22,1201.86 1737.81,1201.05 1738.39,1201.72 1738.98,1203.14 1739.57,1203.53 1740.15,1203.92 1740.74,1204.35 1741.32,1203.85 1741.91,1206.6 1742.5,1206.85 1743.08,1206.96 1743.67,1207.49 1744.26,1204.58 1744.84,1204.98 1745.43,1206.23 1746.02,1206.68 1746.6,1204.65 1747.19,1205 1747.78,1207.55 1748.36,1207.81 1748.95,1207.89 1749.53,1208.42 1750.12,1209.06 1750.71,1209.15 1751.29,1209.39 1751.88,1211.83 1752.47,1210.76 1753.05,1212.02 1753.64,1209.95 1754.23,1210.04 1754.81,1214.83 1755.4,1215.88 1755.99,1215.79 1756.57,1214.51 1757.16,1215.69 1757.74,1214.09 1758.33,1215.06 1758.92,1215.1 1759.5,1216.19 1760.09,1214.71 1760.68,1215.58 1761.26,1214.03 1761.85,1213.99 1762.44,1214.11 1763.02,1215.22 1763.61,1215.22 1764.19,1216.13 1764.78,1215.88 1765.37,1220.23 1765.95,1219.95 1766.54,1218.38 1767.13,1219.13 1767.71,1217.47 1768.3,1217.31 1768.89,1217.19 1769.47,1217.33 1770.06,1218.43 1770.65,1218.12 1771.23,1215.4 1771.82,1215.39 1772.4,1215.32 1772.99,1216.3 1773.58,1217.2 1774.16,1214.7 1774.75,1215.67 1775.34,1216.8 1775.92,1216.6 1776.51,1216.49 1777.1,1216.15 1777.68,1218.26 1778.27,1219.04 1778.86,1217.61 1779.44,1219.5 1780.03,1218.1 1780.61,1219.96 1781.2,1219.53 1781.79,1217.58 1782.37,1220.7 1782.96,1220.18 1783.55,1219.91 1784.13,1218.43 1784.72,1219.31 1785.31,1219.04 1785.89,1216.62 1786.48,1215.33 1787.06,1213.97 1787.65,1215.3 1788.24,1215.12 1788.82,1213.7 1789.41,1212.52 1790,1214.72 1790.58,1214.58 1791.17,1212.1 1791.76,1212.04 1792.34,1212.11 1792.93,1212.1 1793.52,1213.25 1794.1,1213.38 1794.69,1213.43 1795.27,1211.12 1795.86,1209.03 1796.45,1212.74 1797.03,1212.59 1797.62,1213.5 1798.21,1212.34 1798.79,1212.32 1799.38,1212.47 1799.97,1213.79 1800.55,1211.28 1801.14,1209.01 1801.73,1206.86 1802.31,1205.82 1802.9,1205.15 1803.48,1207.97 1804.07,1207.14 1804.66,1208.37 1805.24,1207.35 1805.83,1208.69 1806.42,1210.01 1807,1209.24 1807.59,1209.33 1808.18,1209.55 1808.76,1208.62 1809.35,1207.64 1809.94,1207.93 1810.52,1210.48 1811.11,1210.46 1811.69,1210.84 1812.28,1210.81 1812.87,1210.05 1813.45,1210.39 1814.04,1210.37 1814.63,1210.53 1815.21,1210.47 1815.8,1210.56 1816.39,1212.01 1816.97,1212.17 1817.56,1213.27 1818.14,1213.31 1818.73,1212.37 1819.32,1213.41 1819.9,1211.07 1820.49,1210.18 1821.08,1209.32 1821.66,1208.5 1822.25,1207.42 1822.84,1209.07 1823.42,1209.37 1824.01,1208.21 1824.6,1209.8 1825.18,1208.88 1825.77,1209.13 1826.35,1208.18 1826.94,1208.47 1827.53,1209.83 1828.11,1212.13 1828.7,1214.37 1829.29,1214.35 1829.87,1213.11 1830.46,1215.33 1831.05,1216.46 1831.63,1216.33 1832.22,1215.1 1832.81,1213.79 1833.39,1212.43 1833.98,1215.8 1834.56,1216.74 1835.15,1215.46 1835.74,1216.18 1836.32,1215.01 1836.91,1216 1837.5,1215.69 1838.08,1214.58 1838.67,1216.82 1839.26,1218.93 1839.84,1219.93 1840.43,1218.37 1841.01,1217.13 1841.6,1219.22 1842.19,1221.25 1842.77,1218.74 1843.36,1219.61 1843.95,1220.32 1844.53,1218.73 1845.12,1219.43 1845.71,1219.12 1846.29,1218.79 1846.88,1216.3 1847.47,1213.93 1848.05,1217.4 1848.64,1216.03 1849.22,1217.03 1849.81,1219.01 1850.4,1219.89 1850.98,1219.46 1851.57,1220.23 1852.16,1219.81 1852.74,1219.77 1853.33,1220.56 1853.92,1220.17 1854.5,1219.78 1855.09,1219.72 1855.68,1217.27 1856.26,1215.99 1856.85,1214.71 1857.43,1214.61 1858.02,1213.31 1858.61,1211.93 1859.19,1216.62 1859.78,1214.32 1860.37,1215.59 1860.95,1214.25 1861.54,1214.34 1862.13,1212.07 1862.71,1209.92 1863.3,1208.95 1863.88,1209.11 1864.47,1209.45 1865.06,1208.62 1865.64,1205.78 1866.23,1207.33 1866.82,1208.48 1867.4,1207.55 1867.99,1206.61 1868.58,1206.94 1869.16,1208.43 1869.75,1203.94 1870.34,1203.28 1870.92,1202.55 1871.51,1200.73 1872.09,1201.33 1872.68,1201.94 1873.27,1203.57 1873.85,1204.96 1874.44,1204.29 1875.03,1205.77 1875.61,1205.09 1876.2,1206.48 1876.79,1206.73 1877.37,1207.18 1877.96,1207.45 1878.55,1209.95 1879.13,1212.52 1879.72,1214.82 1880.3,1214.81 1880.89,1214.58 1881.48,1209.75 1882.06,1209.75 1882.65,1209.91 1883.24,1211.22 1883.82,1211.27 1884.41,1212.62 1885,1211.45 1885.58,1211.46 1886.17,1209.46 1886.76,1208.66 1887.34,1208.98 1887.93,1209.49 1888.51,1208.41 1889.1,1208.87 1889.69,1210.32 1890.27,1210.19 1890.86,1209.42 1891.45,1210.78 1892.03,1212.27 1892.62,1214.4 1893.21,1213.26 1893.79,1212.05 1894.38,1216.78 1894.96,1216.64 1895.55,1216.22 1896.14,1218.02 1896.72,1219.88 1897.31,1221.67 1897.9,1221.41 1898.48,1219.48 1899.07,1220.26 1899.66,1218.61 1900.24,1221.63 1900.83,1220.97 1901.42,1220.35 1902,1218.79 1902.59,1216.93 1903.17,1215.5 1903.76,1215.14 1904.35,1216.05 1904.93,1214.78 1905.52,1213.82 1906.11,1215.04 1906.69,1214.05 1907.28,1216.23 1907.87,1215.93 1908.45,1216.84 1909.04,1212.04 1909.63,1214.34 1910.21,1213.31 1910.8,1214.41 1911.38,1218.83 1911.97,1220.93 1912.56,1218.38 1913.14,1217.94 1913.73,1218.77 1914.32,1219.56 1914.9,1217.93 1915.49,1217.72 1916.08,1217.6 1916.66,1219.8 1917.25,1223 1917.83,1222.31 1918.42,1222.84 1919.01,1218.77 1919.59,1220.84 1920.18,1219.21 1920.77,1217.69 1921.35,1212.86 1921.94,1211.63 1922.53,1211.64 1923.11,1210.64 1923.7,1208.35 1924.29,1211.96 1924.87,1213.19 1925.46,1213.15 1926.04,1213.01 1926.63,1215.48 1927.22,1211.77 1927.8,1212.8 1928.39,1213.8 1928.98,1212.54 1929.56,1213.53 1930.15,1213.78 1930.74,1213.46 1931.32,1214.62 1931.91,1211.2 1932.5,1212.38 1933.08,1212.53 1933.67,1213.64 1934.25,1213.72 1934.84,1213.49 1935.43,1214.62 1936.01,1213.36 1936.6,1214.46 1937.19,1213.27 1937.77,1212.16 1938.36,1214.13 1938.95,1214.05 1939.53,1213.99 1940.12,1214.89 1940.71,1214.68 1941.29,1215.74 1941.88,1214.46 1942.46,1214.36 1943.05,1213.04 1943.64,1210.88 1944.22,1209.88 1944.81,1211.39 1945.4,1211.16 1945.98,1211.13 1946.57,1212.34 1947.16,1211.43 1947.74,1210.54 1948.33,1206.77 1948.91,1208.27 1949.5,1205.98 1950.09,1206.38 1950.67,1206.73 1951.26,1208.24 1951.85,1209.75 1952.43,1208.95 1953.02,1207.66 1953.61,1205.58 1954.19,1205.94 1954.78,1206.21 1955.37,1206.31 1955.95,1205.34 1956.54,1203.34 1957.12,1206.31 1957.71,1205.71 1958.3,1207.19 1958.88,1207.12 1959.47,1209.61 1960.06,1209.85 1960.64,1207.45 1961.23,1207.73 1961.82,1208.08 1962.4,1208.42 1962.99,1208.79 1963.58,1209.09 1964.16,1208.39 1964.75,1207.42 1965.33,1208.92 1965.92,1210.42 1966.51,1210.51 1967.09,1211.56 1967.68,1213.78 1968.27,1212.45 1968.85,1213.84 1969.44,1215.86 1970.03,1217.78 1970.61,1218.81 1971.2,1216.25 1971.78,1218.68 1972.37,1219.91 1972.96,1219.38 1973.54,1218.87 1974.13,1218.37 1974.72,1218.16 1975.3,1216.68 1975.89,1216.62 1976.48,1216.34 1977.06,1215.97 1977.65,1213.51 1978.24,1213.53 1978.82,1213.59 1979.41,1212.4 1979.99,1212.31 1980.58,1211.23 1981.17,1211.19 1981.75,1211.4 1982.34,1211.34 1982.93,1209.06 1983.51,1213.02 1984.1,1211.71 1984.69,1214.04 1985.27,1216.14 1985.86,1218.51 1986.45,1218.28 1987.03,1217.97 1987.62,1216.33 1988.2,1216.02 1988.79,1214.76 1989.38,1213.5 1989.96,1214.59 1990.55,1217.73 1991.14,1218.63 1991.72,1217.27 1992.31,1216.84 1992.9,1216.74 1993.48,1215.58 1994.07,1216.85 1994.65,1217.66 1995.24,1217.21 1995.83,1215.8 1996.41,1215.65 1997,1216.74 1997.59,1217.61 1998.17,1216.31 1998.76,1216.14 1999.35,1215.97 1999.93,1217.85 2000.52,1216.61 2001.11,1215.36 2001.69,1216.29 2002.28,1213.87 2002.86,1212.57 2003.45,1211.45 2004.04,1210.26 2004.62,1211.27 2005.21,1210.01 2005.8,1210.34 2006.38,1204.95 2006.97,1206.61 2007.56,1206.98 2008.14,1204.77 2008.73,1206.17 2009.32,1201.84 2009.9,1202.34 2010.49,1203.1 2011.07,1204.97 2011.66,1202.98 2012.25,1202.47 2012.83,1202.08 2013.42,1203.63 2014.01,1203.03 2014.59,1202.54 2015.18,1202.34 2015.77,1201.92 2016.35,1202.43 2016.94,1203.24 2017.53,1202.61 2018.11,1205.54 2018.7,1205.9 2019.28,1208.5 2019.87,1208.67 2020.46,1208.9 2021.04,1208.22 2021.63,1212.01 2022.22,1211.06 2022.8,1212.14 2023.39,1211.1 2023.98,1208.82 2024.56,1210.6 2025.15,1209.68 2025.73,1209.89 2026.32,1207.76 2026.91,1204.74 2027.49,1205.2 2028.08,1209.09 2028.67,1210.46 2029.25,1210.67 2029.84,1209.55 2030.43,1212 2031.01,1212.13 2031.6,1210.77 2032.19,1212.11 2032.77,1213.07 2033.36,1214.33 2033.94,1210.78 2034.53,1212.1 2035.12,1210.72 2035.7,1212.94 2036.29,1212.74 2036.88,1213.62 2037.46,1213.59 2038.05,1212.5 2038.64,1213.61 2039.22,1212.7 2039.81,1213.88 2040.4,1213.7 2040.98,1217 2041.57,1214.4 2042.15,1214.28 2042.74,1215.52 2043.33,1215.74 2043.91,1214.43 2044.5,1214.27 2045.09,1213.13 2045.67,1213.02 2046.26,1211.78 2046.85,1212.76 2047.43,1212.67 2048.02,1211.42 2048.6,1210.46 2049.19,1210.68 2049.78,1212.9 2050.36,1214 2050.95,1213.87 2051.54,1213.72 2052.12,1212.67 2052.71,1213.71 2053.3,1212.31 2053.88,1214.79 2054.47,1214.61 2055.06,1214.47 2055.64,1214.39 2056.23,1215.49 2056.81,1213.16 2057.4,1214.37 2057.99,1214.07 2058.57,1210.72 2059.16,1211.03 2059.75,1211.27 2060.33,1211.49 2060.92,1211.56 2061.51,1211.47 2062.09,1212.8 2062.68,1212.98 2063.27,1212.81 2063.85,1212.83 2064.44,1211.71 2065.02,1211.87 2065.61,1210.73 2066.2,1210.71 2066.78,1211.92 2067.37,1211.99 2067.96,1213.28 2068.54,1213.52 2069.13,1213.5 2069.72,1213.55 2070.3,1213.6 2070.89,1214.59 2071.48,1214.41 2072.06,1214.07 2072.65,1215.1 2073.23,1211.22 2073.82,1212.3 2074.41,1212.43 2074.99,1214.69 2075.58,1212.35 2076.17,1213.6 2076.75,1212.67 2077.34,1212.92 2077.93,1212.82 2078.51,1211.62 2079.1,1208.21 2079.68,1207.16 2080.27,1205.17 2080.86,1209 2081.44,1209.27 2082.03,1208.37 2082.62,1207.21 2083.2,1207.43 2083.79,1208.94 2084.38,1209.13 2084.96,1210.57 2085.55,1210.58 2086.14,1210.83 2086.72,1212.08 2087.31,1212.16 2087.89,1210.97 2088.48,1212.04 2089.07,1213.39 2089.65,1214.63 2090.24,1216.67 2090.83,1217.81 2091.41,1217.62 2092,1215.23 2092.59,1215.2 2093.17,1215.16 2093.76,1211.49 2094.35,1210.53 2094.93,1210.7 2095.52,1213.02 2096.1,1212.95 2096.69,1213.12 2097.28,1212.04 2097.86,1211.81 2098.45,1212.05 2099.04,1214.32 2099.62,1214.09 2100.21,1214.96 2100.8,1213.55 2101.38,1211.05 2101.97,1210.22 2102.55,1210.7 2103.14,1210.71 2103.73,1210.87 2104.31,1212.06 2104.9,1210.89 2105.49,1209.94 2106.07,1211.38 2106.66,1210.21 2107.25,1209.17 2107.83,1209.42 2108.42,1207.47 2109.01,1208.66 2109.59,1207.38 2110.18,1209.02 2110.76,1212.38 2111.35,1213.69 2111.94,1213.55 2112.52,1213.31 2113.11,1213 2113.7,1211.9 2114.28,1212.91 2114.87,1211.78 2115.46,1213.01 2116.04,1211.8 2116.63,1211.95 2117.22,1214.34 2117.8,1215.32 2118.39,1217.43 2118.97,1214.88 2119.56,1212.52 2120.15,1214.87 2120.73,1214.53 2121.32,1213.23 2121.91,1216.58 2122.49,1217.22 2123.08,1216.92 2123.67,1216.73 2124.25,1216.46 2124.84,1216.05 2125.42,1212.25 2126.01,1210.97 2126.6,1212.54 2127.18,1214.7 2127.77,1213.33 2128.36,1215.52 2128.94,1215.23 2129.53,1216.34 2130.12,1215.99 2130.7,1216.74 2131.29,1216.4 2131.88,1217.5 2132.46,1216.23 2133.05,1216.08 2133.63,1217.1 2134.22,1214.39 2134.81,1212.03 2135.39,1213.27 2135.98,1214.41 2136.57,1213.96 2137.15,1213.16 2137.74,1213.14 2138.33,1213.1 2138.91,1214.01 2139.5,1212.78 2140.09,1214.15 2140.67,1215.04 2141.26,1216.01 2141.84,1215.75 2142.43,1216.69 2143.02,1216.66 2143.6,1215.38 2144.19,1217.49 2144.78,1217.46 2145.36,1218.39 2145.95,1217.3 2146.54,1214.93 2147.12,1216.97 2147.71,1216.79 2148.3,1215.49 2148.88,1215.23 2149.47,1213.87 2150.05,1214.09 2150.64,1214.01 2151.23,1212.58 2151.81,1213.58 2152.4,1213.6 2152.99,1213.56 2153.57,1212.26 2154.16,1212.52 2154.75,1212.74 2155.33,1212.8 2155.92,1215.08 2156.5,1214.83 2157.09,1214.8 2157.68,1215.82 2158.26,1216.97 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1213.26 L986.612 1213.26 L987.198 1213.26 L987.785 1213.26 L988.371 1213.26 L988.957 1213.26 L989.544 1213.26 L990.13 1213.26 L990.717 1213.26 L991.303 1213.26 L991.889 1213.26 L992.476 1213.26 L993.062 1213.26 L993.649 1213.26 L994.235 1213.26 L994.822 1213.26 L995.408 1213.26 L995.994 1213.26 L996.581 1213.26 L997.167 1213.26 L997.754 1213.26 L998.34 1213.26 L998.926 1213.26 L999.513 1213.26 L1000.1 1213.26 L1000.69 1213.26 L1001.27 1213.26 L1001.86 1213.26 L1002.44 1213.26 L1003.03 1213.26 L1003.62 1213.26 L1004.2 1213.26 L1004.79 1213.26 L1005.38 1213.26 L1005.96 1213.26 L1006.55 1213.26 L1007.14 1213.26 L1007.72 1213.26 L1008.31 1213.26 L1008.9 1213.26 L1009.48 1213.26 L1010.07 1213.26 L1010.65 1213.26 L1011.24 1213.26 L1011.83 1213.26 L1012.41 1213.26 L1013 1213.26 L1013.59 1213.26 L1014.17 1213.26 L1014.76 1213.26 L1015.35 1213.26 L1015.93 1213.26 L1016.52 1213.26 L1017.11 1213.26 L1017.69 1213.26 L1018.28 1213.26 L1018.86 1213.26 L1019.45 1213.26 L1020.04 1213.26 L1020.62 1213.26 L1021.21 1213.26 L1021.8 1213.26 L1022.38 1213.26 L1022.97 1213.26 L1023.56 1213.26 L1024.14 1213.26 L1024.73 1213.26 L1025.32 1213.26 L1025.9 1213.26 L1026.49 1213.26 L1027.07 1213.26 L1027.66 1213.26 L1028.25 1213.26 L1028.83 1213.26 L1029.42 1213.26 L1030.01 1213.26 L1030.59 1213.26 L1031.18 1213.26 L1031.77 1213.26 L1032.35 1213.26 L1032.94 1213.26 L1033.52 1213.26 L1034.11 1213.26 L1034.7 1213.26 L1035.28 1213.26 L1035.87 1213.26 L1036.46 1213.26 L1037.04 1213.26 L1037.63 1213.26 L1038.22 1213.26 L1038.8 1213.26 L1039.39 1213.26 L1039.98 1213.26 L1040.56 1213.26 L1041.15 1213.26 L1041.73 1213.26 L1042.32 1213.26 L1042.91 1213.26 L1043.49 1213.26 L1044.08 1213.26 L1044.67 1213.26 L1045.25 1213.26 L1045.84 1213.26 L1046.43 1213.26 L1047.01 1213.26 L1047.6 1213.26 L1048.19 1213.26 L1048.77 1213.26 L1049.36 1213.26 L1049.94 1213.26 L1050.53 1213.26 L1051.12 1213.26 L1051.7 1213.26 L1052.29 1213.26 L1052.88 1213.26 L1053.46 1213.26 L1054.05 1213.26 L1054.64 1213.26 L1055.22 1213.26 L1055.81 1213.26 L1056.39 1213.26 L1056.98 1213.26 L1057.57 1213.26 L1058.15 1213.26 L1058.74 1213.26 L1059.33 1213.26 L1059.91 1213.26 L1060.5 1213.26 L1061.09 1213.26 L1061.67 1213.26 L1062.26 1213.26 L1062.85 1213.26 L1063.43 1213.26 L1064.02 1213.26 L1064.6 1213.26 L1065.19 1213.26 L1065.78 1213.26 L1066.36 1213.26 L1066.95 1213.26 L1067.54 1213.26 L1068.12 1213.26 L1068.71 1213.26 L1069.3 1213.26 L1069.88 1213.26 L1070.47 1213.26 L1071.06 1213.26 L1071.64 1213.26 L1072.23 1213.26 L1072.81 1213.26 L1073.4 1213.26 L1073.99 1213.26 L1074.57 1213.26 L1075.16 1213.26 L1075.75 1213.26 L1076.33 1213.26 L1076.92 1213.26 L1077.51 1213.26 L1078.09 1213.26 L1078.68 1213.26 L1079.26 1213.26 L1079.85 1213.26 L1080.44 1213.26 L1081.02 1213.26 L1081.61 1213.26 L1082.2 1213.26 L1082.78 1213.26 L1083.37 1213.26 L1083.96 1213.26 L1084.54 1213.26 L1085.13 1213.26 L1085.72 1213.26 L1086.3 1213.26 L1086.89 1213.26 L1087.47 1213.26 L1088.06 1213.26 L1088.65 1213.26 L1089.23 1213.26 L1089.82 1213.26 L1090.41 1213.26 L1090.99 1213.26 L1091.58 1213.26 L1092.17 1213.26 L1092.75 1213.26 L1093.34 1213.26 L1093.93 1213.26 L1094.51 1213.26 L1095.1 1213.26 L1095.68 1213.26 L1096.27 1213.26 L1096.86 1213.26 L1097.44 1213.26 L1098.03 1213.26 L1098.62 1213.26 L1099.2 1213.26 L1099.79 1213.26 L1100.38 1213.26 L1100.96 1213.26 L1101.55 1213.26 L1102.14 1213.26 L1102.72 1213.26 L1103.31 1213.26 L1103.89 1213.26 L1104.48 1213.26 L1105.07 1213.26 L1105.65 1213.26 L1106.24 1213.26 L1106.83 1213.26 L1107.41 1213.26 L1108 1213.26 L1108.59 1213.26 L1109.17 1213.26 L1109.76 1213.26 L1110.34 1213.26 L1110.93 1213.26 L1111.52 1213.26 L1112.1 1213.26 L1112.69 1213.26 L1113.28 1213.26 L1113.86 1213.26 L1114.45 1213.26 L1115.04 1213.26 L1115.62 1213.26 L1116.21 1213.26 L1116.8 1213.26 L1117.38 1213.26 L1117.97 1213.26 L1118.55 1213.26 L1119.14 1213.26 L1119.73 1213.26 L1120.31 1213.26 L1120.9 1213.26 L1121.49 1213.26 L1122.07 1213.26 L1122.66 1213.26 L1123.25 1213.26 L1123.83 1213.26 L1124.42 1213.26 L1125.01 1213.26 L1125.59 1213.26 L1126.18 1213.26 L1126.76 1213.26 L1127.35 1213.26 L1127.94 1213.26 L1128.52 1213.26 L1129.11 1213.26 L1129.7 1213.26 L1130.28 1213.26 L1130.87 1213.26 L1131.46 1213.26 L1132.04 1213.26 L1132.63 1213.26 L1133.21 1213.26 L1133.8 1213.26 L1134.39 1213.26 L1134.97 1213.26 L1135.56 1213.26 L1136.15 1213.26 L1136.73 1213.26 L1137.32 1213.26 L1137.91 1213.26 L1138.49 1213.26 L1139.08 1213.26 L1139.67 1213.26 L1140.25 1213.26 L1140.84 1213.26 L1141.42 1213.26 L1142.01 1213.26 L1142.6 1213.26 L1143.18 1213.26 L1143.77 1213.26 L1144.36 1213.26 L1144.94 1213.26 L1145.53 1213.26 L1146.12 1213.26 L1146.7 1213.26 L1147.29 1213.26 L1147.88 1213.26 L1148.46 1213.26 L1149.05 1213.26 L1149.63 1213.26 L1150.22 1213.26 L1150.81 1213.26 L1151.39 1213.26 L1151.98 1213.26 L1152.57 1213.26 L1153.15 1213.26 L1153.74 1213.26 L1154.33 1213.26 L1154.91 1213.26 L1155.5 1213.26 L1156.09 1213.26 L1156.67 1213.26 L1157.26 1213.26 L1157.84 1213.26 L1158.43 1213.26 L1159.02 1213.26 L1159.6 1213.26 L1160.19 1213.26 L1160.78 1213.26 L1161.36 1213.26 L1161.95 1213.26 L1162.54 1213.26 L1163.12 1213.26 L1163.71 1213.26 L1164.29 1213.26 L1164.88 1213.26 L1165.47 1213.26 L1166.05 1213.26 L1166.64 1213.26 L1167.23 1213.26 L1167.81 1213.26 L1168.4 1213.26 L1168.99 1213.26 L1169.57 1213.26 L1170.16 1213.26 L1170.75 1213.26 L1171.33 1213.26 L1171.92 1213.26 L1172.5 1213.26 L1173.09 1213.26 L1173.68 1213.26 L1174.26 1213.26 L1174.85 1213.26 L1175.44 1213.26 L1176.02 1213.26 L1176.61 1213.26 L1177.2 1213.26 L1177.78 1213.26 L1178.37 1213.26 L1178.96 1213.26 L1179.54 1213.26 L1180.13 1213.26 L1180.71 1213.26 L1181.3 1213.26 L1181.89 1213.26 L1182.47 1213.26 L1183.06 1213.26 L1183.65 1213.26 L1184.23 1213.26 L1184.82 1213.26 L1185.41 1213.26 L1185.99 1213.26 L1186.58 1213.26 L1187.16 1213.26 L1187.75 1213.26 L1188.34 1213.26 L1188.92 1213.26 L1189.51 1213.26 L1190.1 1213.26 L1190.68 1213.26 L1191.27 1213.26 L1191.86 1213.26 L1192.44 1213.26 L1193.03 1213.26 L1193.62 1213.26 L1194.2 1213.26 L1194.79 1213.26 L1195.37 1213.26 L1195.96 1213.26 L1196.55 1213.26 L1197.13 1213.26 L1197.72 1213.26 L1198.31 1213.26 L1198.89 1213.26 L1199.48 1213.26 L1200.07 1213.26 L1200.65 1213.26 L1201.24 1213.26 L1201.83 1213.26 L1202.41 1213.26 L1203 1213.26 L1203.58 1213.26 L1204.17 1213.26 L1204.76 1213.26 L1205.34 1213.26 L1205.93 1213.26 L1206.52 1213.26 L1207.1 1213.26 L1207.69 1213.26 L1208.28 1213.26 L1208.86 1213.26 L1209.45 1213.26 L1210.03 1213.26 L1210.62 1213.26 L1211.21 1213.26 L1211.79 1213.26 L1212.38 1213.26 L1212.97 1213.26 L1213.55 1213.26 L1214.14 1213.26 L1214.73 1213.26 L1215.31 1213.26 L1215.9 1213.26 L1216.49 1213.26 L1217.07 1213.26 L1217.66 1213.26 L1218.24 1213.26 L1218.83 1213.26 L1219.42 1213.26 L1220 1213.26 L1220.59 1213.26 L1221.18 1213.26 L1221.76 1213.26 L1222.35 1213.26 L1222.94 1213.26 L1223.52 1213.26 L1224.11 1213.26 L1224.7 1213.26 L1225.28 1213.26 L1225.87 1213.26 L1226.45 1213.26 L1227.04 1213.26 L1227.63 1213.26 L1228.21 1213.26 L1228.8 1213.26 L1229.39 1213.26 L1229.97 1213.26 L1230.56 1213.26 L1231.15 1213.26 L1231.73 1213.26 L1232.32 1213.26 L1232.91 1213.26 L1233.49 1213.26 L1234.08 1213.26 L1234.66 1213.26 L1235.25 1213.26 L1235.84 1213.26 L1236.42 1213.26 L1237.01 1213.26 L1237.6 1213.26 L1238.18 1213.26 L1238.77 1213.26 L1239.36 1213.26 L1239.94 1213.26 L1240.53 1213.26 L1241.11 1213.26 L1241.7 1213.26 L1242.29 1213.26 L1242.87 1213.26 L1243.46 1213.26 L1244.05 1213.26 L1244.63 1213.26 L1245.22 1213.26 L1245.81 1213.26 L1246.39 1213.26 L1246.98 1213.26 L1247.57 1213.26 L1248.15 1213.26 L1248.74 1213.26 L1249.32 1213.26 L1249.91 1213.26 L1250.5 1213.26 L1251.08 1213.26 L1251.67 1213.26 L1252.26 1213.26 L1252.84 1213.26 L1253.43 1213.26 L1254.02 1213.26 L1254.6 1213.26 L1255.19 1213.26 L1255.78 1213.26 L1256.36 1213.26 L1256.95 1213.26 L1257.53 1213.26 L1258.12 1213.26 L1258.71 1213.26 L1259.29 1213.26 L1259.88 1213.26 L1260.47 1213.26 L1261.05 1213.26 L1261.64 1213.26 L1262.23 1213.26 L1262.81 1213.26 L1263.4 1213.26 L1263.98 1213.26 L1264.57 1213.26 L1265.16 1213.26 L1265.74 1213.26 L1266.33 1213.26 L1266.92 1213.26 L1267.5 1213.26 L1268.09 1213.26 L1268.68 1213.26 L1269.26 1213.26 L1269.85 1213.26 L1270.44 1213.26 L1271.02 1213.26 L1271.61 1213.26 L1272.19 1213.26 L1272.78 1213.26 L1273.37 1213.26 L1273.95 1213.26 L1274.54 1213.26 L1275.13 1213.26 L1275.71 1213.26 L1276.3 1213.26 L1276.89 1213.26 L1277.47 1213.26 L1278.06 1213.26 L1278.65 1213.26 L1279.23 1213.26 L1279.82 1213.26 L1280.4 1213.26 L1280.99 1213.26 L1281.58 1213.26 L1282.16 1213.26 L1282.75 1213.26 L1283.34 1213.26 L1283.92 1213.26 L1284.51 1213.26 L1285.1 1213.26 L1285.68 1213.26 L1286.27 1213.26 L1286.86 1213.26 L1287.44 1213.26 L1288.03 1213.26 L1288.61 1213.26 L1289.2 1213.26 L1289.79 1213.26 L1290.37 1213.26 L1290.96 1213.26 L1291.55 1213.26 L1292.13 1213.26 L1292.72 1213.26 L1293.31 1213.26 L1293.89 1213.26 L1294.48 1213.26 L1295.06 1213.26 L1295.65 1213.26 L1296.24 1213.26 L1296.82 1213.26 L1297.41 1213.26 L1298 1213.26 L1298.58 1213.26 L1299.17 1213.26 L1299.76 1213.26 L1300.34 1213.26 L1300.93 1213.26 L1301.52 1213.26 L1302.1 1213.26 L1302.69 1213.26 L1303.27 1213.26 L1303.86 1213.26 L1304.45 1213.26 L1305.03 1213.26 L1305.62 1213.26 L1306.21 1213.26 L1306.79 1213.26 L1307.38 1213.26 L1307.97 1213.26 L1308.55 1213.26 L1309.14 1213.26 L1309.73 1213.26 L1310.31 1213.26 L1310.9 1213.26 L1311.48 1213.26 L1312.07 1213.26 L1312.66 1213.26 L1313.24 1213.26 L1313.83 1213.26 L1314.42 1213.26 L1315 1213.26 L1315.59 1213.26 L1316.18 1213.26 L1316.76 1213.26 L1317.35 1213.26 L1317.93 1213.26 L1318.52 1213.26 L1319.11 1213.26 L1319.69 1213.26 L1320.28 1213.26 L1320.87 1213.26 L1321.45 1213.26 L1322.04 1213.26 L1322.63 1213.26 L1323.21 1213.26 L1323.8 1213.26 L1324.39 1213.26 L1324.97 1213.26 L1325.56 1213.26 L1326.14 1213.26 L1326.73 1213.26 L1327.32 1213.26 L1327.9 1213.26 L1328.49 1213.26 L1329.08 1213.26 L1329.66 1213.26 L1330.25 1213.26 L1330.84 1213.26 L1331.42 1213.26 L1332.01 1213.26 L1332.6 1213.26 L1333.18 1213.26 L1333.77 1213.26 L1334.35 1213.26 L1334.94 1213.26 L1335.53 1213.26 L1336.11 1213.26 L1336.7 1213.26 L1337.29 1213.26 L1337.87 1213.26 L1338.46 1213.26 L1339.05 1213.26 L1339.63 1213.26 L1340.22 1213.26 L1340.8 1213.26 L1341.39 1213.26 L1341.98 1213.26 L1342.56 1213.26 L1343.15 1213.26 L1343.74 1213.26 L1344.32 1213.26 L1344.91 1213.26 L1345.5 1213.26 L1346.08 1213.26 L1346.67 1213.26 L1347.26 1213.26 L1347.84 1213.26 L1348.43 1213.26 L1349.01 1213.26 L1349.6 1213.26 L1350.19 1213.26 L1350.77 1213.26 L1351.36 1213.26 L1351.95 1213.26 L1352.53 1213.26 L1353.12 1213.26 L1353.71 1213.26 L1354.29 1213.26 L1354.88 1213.26 L1355.47 1213.26 L1356.05 1213.26 L1356.64 1213.26 L1357.22 1213.26 L1357.81 1213.26 L1358.4 1213.26 L1358.98 1213.26 L1359.57 1213.26 L1360.16 1213.26 L1360.74 1213.26 L1361.33 1213.26 L1361.92 1213.26 L1362.5 1213.26 L1363.09 1213.26 L1363.68 1213.26 L1364.26 1213.26 L1364.85 1213.26 L1365.43 1213.26 L1366.02 1213.26 L1366.61 1213.26 L1367.19 1213.26 L1367.78 1213.26 L1368.37 1213.26 L1368.95 1213.26 L1369.54 1213.26 L1370.13 1213.26 L1370.71 1213.26 L1371.3 1213.26 L1371.88 1213.26 L1372.47 1213.26 L1373.06 1213.26 L1373.64 1213.26 L1374.23 1213.26 L1374.82 1213.26 L1375.4 1213.26 L1375.99 1213.26 L1376.58 1213.26 L1377.16 1213.26 L1377.75 1213.26 L1378.34 1213.26 L1378.92 1213.26 L1379.51 1213.26 L1380.09 1213.26 L1380.68 1213.26 L1381.27 1213.26 L1381.85 1213.26 L1382.44 1213.26 L1383.03 1213.26 L1383.61 1213.26 L1384.2 1213.26 L1384.79 1213.26 L1385.37 1213.26 L1385.96 1213.26 L1386.55 1213.26 L1387.13 1213.26 L1387.72 1213.26 L1388.3 1213.26 L1388.89 1213.26 L1389.48 1213.26 L1390.06 1213.26 L1390.65 1213.26 L1391.24 1213.26 L1391.82 1213.26 L1392.41 1213.26 L1393 1213.26 L1393.58 1213.26 L1394.17 1213.26 L1394.75 1213.26 L1395.34 1213.26 L1395.93 1213.26 L1396.51 1213.26 L1397.1 1213.26 L1397.69 1213.26 L1398.27 1213.26 L1398.86 1213.26 L1399.45 1213.26 L1400.03 1213.26 L1400.62 1213.26 L1401.21 1213.26 L1401.79 1213.26 L1402.38 1213.26 L1402.96 1213.26 L1403.55 1213.26 L1404.14 1213.26 L1404.72 1213.26 L1405.31 1213.26 L1405.9 1213.26 L1406.48 1213.26 L1407.07 1213.26 L1407.66 1213.26 L1408.24 1213.26 L1408.83 1213.26 L1409.42 1213.26 L1410 1213.26 L1410.59 1213.26 L1411.17 1213.26 L1411.76 1213.26 L1412.35 1213.26 L1412.93 1213.26 L1413.52 1213.26 L1414.11 1213.26 L1414.69 1213.26 L1415.28 1213.26 L1415.87 1213.26 L1416.45 1213.26 L1417.04 1213.26 L1417.63 1213.26 L1418.21 1213.26 L1418.8 1213.26 L1419.38 1213.26 L1419.97 1213.26 L1420.56 1213.26 L1421.14 1213.26 L1421.73 1213.26 L1422.32 1213.26 L1422.9 1213.26 L1423.49 1213.26 L1424.08 1213.26 L1424.66 1213.26 L1425.25 1213.26 L1425.83 1213.26 L1426.42 1213.26 L1427.01 1213.26 L1427.59 1213.26 L1428.18 1213.26 L1428.77 1213.26 L1429.35 1213.26 L1429.94 1213.26 L1430.53 1213.26 L1431.11 1213.26 L1431.7 1213.26 L1432.29 1213.26 L1432.87 1213.26 L1433.46 1213.26 L1434.04 1213.26 L1434.63 1213.26 L1435.22 1213.26 L1435.8 1213.26 L1436.39 1213.26 L1436.98 1213.26 L1437.56 1213.26 L1438.15 1213.26 L1438.74 1213.26 L1439.32 1213.26 L1439.91 1213.26 L1440.5 1213.26 L1441.08 1213.26 L1441.67 1213.26 L1442.25 1213.26 L1442.84 1213.26 L1443.43 1213.26 L1444.01 1213.26 L1444.6 1213.26 L1445.19 1213.26 L1445.77 1213.26 L1446.36 1213.26 L1446.95 1213.26 L1447.53 1213.26 L1448.12 1213.26 L1448.7 1213.26 L1449.29 1213.26 L1449.88 1213.26 L1450.46 1213.26 L1451.05 1213.26 L1451.64 1213.26 L1452.22 1213.26 L1452.81 1213.26 L1453.4 1213.26 L1453.98 1213.26 L1454.57 1213.26 L1455.16 1213.26 L1455.74 1213.26 L1456.33 1213.26 L1456.91 1213.26 L1457.5 1213.26 L1458.09 1213.26 L1458.67 1213.26 L1459.26 1213.26 L1459.85 1213.26 L1460.43 1213.26 L1461.02 1213.26 L1461.61 1213.26 L1462.19 1213.26 L1462.78 1213.26 L1463.37 1213.26 L1463.95 1213.26 L1464.54 1213.26 L1465.12 1213.26 L1465.71 1213.26 L1466.3 1213.26 L1466.88 1213.26 L1467.47 1213.26 L1468.06 1213.26 L1468.64 1213.26 L1469.23 1213.26 L1469.82 1213.26 L1470.4 1213.26 L1470.99 1213.26 L1471.57 1213.26 L1472.16 1213.26 L1472.75 1213.26 L1473.33 1213.26 L1473.92 1213.26 L1474.51 1213.26 L1475.09 1213.26 L1475.68 1213.26 L1476.27 1213.26 L1476.85 1213.26 L1477.44 1213.26 L1478.03 1213.26 L1478.61 1213.26 L1479.2 1213.26 L1479.78 1213.26 L1480.37 1213.26 L1480.96 1213.26 L1481.54 1213.26 L1482.13 1213.26 L1482.72 1213.26 L1483.3 1213.26 L1483.89 1213.26 L1484.48 1213.26 L1485.06 1213.26 L1485.65 1213.26 L1486.24 1213.26 L1486.82 1213.26 L1487.41 1213.26 L1487.99 1213.26 L1488.58 1213.26 L1489.17 1213.26 L1489.75 1213.26 L1490.34 1213.26 L1490.93 1213.26 L1491.51 1213.26 L1492.1 1213.26 L1492.69 1213.26 L1493.27 1213.26 L1493.86 1213.26 L1494.45 1213.26 L1495.03 1213.26 L1495.62 1213.26 L1496.2 1213.26 L1496.79 1213.26 L1497.38 1213.26 L1497.96 1213.26 L1498.55 1213.26 L1499.14 1213.26 L1499.72 1213.26 L1500.31 1213.26 L1500.9 1213.26 L1501.48 1213.26 L1502.07 1213.26 L1502.65 1213.26 L1503.24 1213.26 L1503.83 1213.26 L1504.41 1213.26 L1505 1213.26 L1505.59 1213.26 L1506.17 1213.26 L1506.76 1213.26 L1507.35 1213.26 L1507.93 1213.26 L1508.52 1213.26 L1509.11 1213.26 L1509.69 1213.26 L1510.28 1213.26 L1510.86 1213.26 L1511.45 1213.26 L1512.04 1213.26 L1512.62 1213.26 L1513.21 1213.26 L1513.8 1213.26 L1514.38 1213.26 L1514.97 1213.26 L1515.56 1213.26 L1516.14 1213.26 L1516.73 1213.26 L1517.32 1213.26 L1517.9 1213.26 L1518.49 1213.26 L1519.07 1213.26 L1519.66 1213.26 L1520.25 1213.26 L1520.83 1213.26 L1521.42 1213.26 L1522.01 1213.26 L1522.59 1213.26 L1523.18 1213.26 L1523.77 1213.26 L1524.35 1213.26 L1524.94 1213.26 L1525.52 1213.26 L1526.11 1213.26 L1526.7 1213.26 L1527.28 1213.26 L1527.87 1213.26 L1528.46 1213.26 L1529.04 1213.26 L1529.63 1213.26 L1530.22 1213.26 L1530.8 1213.26 L1531.39 1213.26 L1531.98 1213.26 L1532.56 1213.26 L1533.15 1213.26 L1533.73 1213.26 L1534.32 1213.26 L1534.91 1213.26 L1535.49 1213.26 L1536.08 1213.26 L1536.67 1213.26 L1537.25 1213.26 L1537.84 1213.26 L1538.43 1213.26 L1539.01 1213.26 L1539.6 1213.26 L1540.19 1213.26 L1540.77 1213.26 L1541.36 1213.26 L1541.94 1213.26 L1542.53 1213.26 L1543.12 1213.26 L1543.7 1213.26 L1544.29 1213.26 L1544.88 1213.26 L1545.46 1213.26 L1546.05 1213.26 L1546.64 1213.26 L1547.22 1213.26 L1547.81 1213.26 L1548.4 1213.26 L1548.98 1213.26 L1549.57 1213.26 L1550.15 1213.26 L1550.74 1213.26 L1551.33 1213.26 L1551.91 1213.26 L1552.5 1213.26 L1553.09 1213.26 L1553.67 1213.26 L1554.26 1213.26 L1554.85 1213.26 L1555.43 1213.26 L1556.02 1213.26 L1556.6 1213.26 L1557.19 1213.26 L1557.78 1213.26 L1558.36 1213.26 L1558.95 1213.26 L1559.54 1213.26 L1560.12 1213.26 L1560.71 1213.26 L1561.3 1213.26 L1561.88 1213.26 L1562.47 1213.26 L1563.06 1213.26 L1563.64 1213.26 L1564.23 1213.26 L1564.81 1213.26 L1565.4 1213.26 L1565.99 1213.26 L1566.57 1213.26 L1567.16 1213.26 L1567.75 1213.26 L1568.33 1213.26 L1568.92 1213.26 L1569.51 1213.26 L1570.09 1213.26 L1570.68 1213.26 L1571.27 1213.26 L1571.85 1213.26 L1572.44 1213.26 L1573.02 1213.26 L1573.61 1213.26 L1574.2 1213.26 L1574.78 1213.26 L1575.37 1213.26 L1575.96 1213.26 L1576.54 1213.26 L1577.13 1213.26 L1577.72 1213.26 L1578.3 1213.26 L1578.89 1213.26 L1579.47 1213.26 L1580.06 1213.26 L1580.65 1213.26 L1581.23 1213.26 L1581.82 1213.26 L1582.41 1213.26 L1582.99 1213.26 L1583.58 1213.26 L1584.17 1213.26 L1584.75 1213.26 L1585.34 1213.26 L1585.93 1213.26 L1586.51 1213.26 L1587.1 1213.26 L1587.68 1213.26 L1588.27 1213.26 L1588.86 1213.26 L1589.44 1213.26 L1590.03 1213.26 L1590.62 1213.26 L1591.2 1213.26 L1591.79 1213.26 L1592.38 1213.26 L1592.96 1213.26 L1593.55 1213.26 L1594.14 1213.26 L1594.72 1213.26 L1595.31 1213.26 L1595.89 1213.26 L1596.48 1213.26 L1597.07 1213.26 L1597.65 1213.26 L1598.24 1213.26 L1598.83 1213.26 L1599.41 1213.26 L1600 1213.26 L1600.59 1213.26 L1601.17 1213.26 L1601.76 1213.26 L1602.34 1213.26 L1602.93 1213.26 L1603.52 1213.26 L1604.1 1213.26 L1604.69 1213.26 L1605.28 1213.26 L1605.86 1213.26 L1606.45 1213.26 L1607.04 1213.26 L1607.62 1213.26 L1608.21 1213.26 L1608.8 1213.26 L1609.38 1213.26 L1609.97 1213.26 L1610.55 1213.26 L1611.14 1213.26 L1611.73 1213.26 L1612.31 1213.26 L1612.9 1213.26 L1613.49 1213.26 L1614.07 1213.26 L1614.66 1213.26 L1615.25 1213.26 L1615.83 1213.26 L1616.42 1213.26 L1617.01 1213.26 L1617.59 1213.26 L1618.18 1213.26 L1618.76 1213.26 L1619.35 1213.26 L1619.94 1213.26 L1620.52 1213.26 L1621.11 1213.26 L1621.7 1213.26 L1622.28 1213.26 L1622.87 1213.26 L1623.46 1213.26 L1624.04 1213.26 L1624.63 1213.26 L1625.22 1213.26 L1625.8 1213.26 L1626.39 1213.26 L1626.97 1213.26 L1627.56 1213.26 L1628.15 1213.26 L1628.73 1213.26 L1629.32 1213.26 L1629.91 1213.26 L1630.49 1213.26 L1631.08 1213.26 L1631.67 1213.26 L1632.25 1213.26 L1632.84 1213.26 L1633.42 1213.26 L1634.01 1213.26 L1634.6 1213.26 L1635.18 1213.26 L1635.77 1213.26 L1636.36 1213.26 L1636.94 1213.26 L1637.53 1213.26 L1638.12 1213.26 L1638.7 1213.26 L1639.29 1213.26 L1639.88 1213.26 L1640.46 1213.26 L1641.05 1213.26 L1641.63 1213.26 L1642.22 1213.26 L1642.81 1213.26 L1643.39 1213.26 L1643.98 1213.26 L1644.57 1213.26 L1645.15 1213.26 L1645.74 1213.26 L1646.33 1213.26 L1646.91 1213.26 L1647.5 1213.26 L1648.09 1213.26 L1648.67 1213.26 L1649.26 1213.26 L1649.84 1213.26 L1650.43 1213.26 L1651.02 1213.26 L1651.6 1213.26 L1652.19 1213.26 L1652.78 1213.26 L1653.36 1213.26 L1653.95 1213.26 L1654.54 1213.26 L1655.12 1213.26 L1655.71 1213.26 L1656.29 1213.26 L1656.88 1213.26 L1657.47 1213.26 L1658.05 1213.26 L1658.64 1213.26 L1659.23 1213.26 L1659.81 1213.26 L1660.4 1213.26 L1660.99 1213.26 L1661.57 1213.26 L1662.16 1213.26 L1662.75 1213.26 L1663.33 1213.26 L1663.92 1213.26 L1664.5 1213.26 L1665.09 1213.26 L1665.68 1213.26 L1666.26 1213.26 L1666.85 1213.26 L1667.44 1213.26 L1668.02 1213.26 L1668.61 1213.26 L1669.2 1213.26 L1669.78 1213.26 L1670.37 1213.26 L1670.96 1213.26 L1671.54 1213.26 L1672.13 1213.26 L1672.71 1213.26 L1673.3 1213.26 L1673.89 1213.26 L1674.47 1213.26 L1675.06 1213.26 L1675.65 1213.26 L1676.23 1213.26 L1676.82 1213.26 L1677.41 1213.26 L1677.99 1213.26 L1678.58 1213.26 L1679.17 1213.26 L1679.75 1213.26 L1680.34 1213.26 L1680.92 1213.26 L1681.51 1213.26 L1682.1 1213.26 L1682.68 1213.26 L1683.27 1213.26 L1683.86 1213.26 L1684.44 1213.26 L1685.03 1213.26 L1685.62 1213.26 L1686.2 1213.26 L1686.79 1213.26 L1687.37 1213.26 L1687.96 1213.26 L1688.55 1213.26 L1689.13 1213.26 L1689.72 1213.26 L1690.31 1213.26 L1690.89 1213.26 L1691.48 1213.26 L1692.07 1213.26 L1692.65 1213.26 L1693.24 1213.26 L1693.83 1213.26 L1694.41 1213.26 L1695 1213.26 L1695.58 1213.26 L1696.17 1213.26 L1696.76 1213.26 L1697.34 1213.26 L1697.93 1213.26 L1698.52 1213.26 L1699.1 1213.26 L1699.69 1213.26 L1700.28 1213.26 L1700.86 1213.26 L1701.45 1213.26 L1702.04 1213.26 L1702.62 1213.26 L1703.21 1213.26 L1703.79 1213.26 L1704.38 1213.26 L1704.97 1213.26 L1705.55 1213.26 L1706.14 1213.26 L1706.73 1213.26 L1707.31 1213.26 L1707.9 1213.26 L1708.49 1213.26 L1709.07 1213.26 L1709.66 1213.26 L1710.24 1213.26 L1710.83 1213.26 L1711.42 1213.26 L1712 1213.26 L1712.59 1213.26 L1713.18 1213.26 L1713.76 1213.26 L1714.35 1213.26 L1714.94 1213.26 L1715.52 1213.26 L1716.11 1213.26 L1716.7 1213.26 L1717.28 1213.26 L1717.87 1213.26 L1718.45 1213.26 L1719.04 1213.26 L1719.63 1213.26 L1720.21 1213.26 L1720.8 1213.26 L1721.39 1213.26 L1721.97 1213.26 L1722.56 1213.26 L1723.15 1213.26 L1723.73 1213.26 L1724.32 1213.26 L1724.91 1213.26 L1725.49 1213.26 L1726.08 1213.26 L1726.66 1213.26 L1727.25 1213.26 L1727.84 1213.26 L1728.42 1213.26 L1729.01 1213.26 L1729.6 1213.26 L1730.18 1213.26 L1730.77 1213.26 L1731.36 1213.26 L1731.94 1213.26 L1732.53 1213.26 L1733.11 1213.26 L1733.7 1213.26 L1734.29 1213.26 L1734.87 1213.26 L1735.46 1213.26 L1736.05 1213.26 L1736.63 1213.26 L1737.22 1213.26 L1737.81 1213.26 L1738.39 1213.26 L1738.98 1213.26 L1739.57 1213.26 L1740.15 1213.26 L1740.74 1213.26 L1741.32 1213.26 L1741.91 1213.26 L1742.5 1213.26 L1743.08 1213.26 L1743.67 1213.26 L1744.26 1213.26 L1744.84 1213.26 L1745.43 1213.26 L1746.02 1213.26 L1746.6 1213.26 L1747.19 1213.26 L1747.78 1213.26 L1748.36 1213.26 L1748.95 1213.26 L1749.53 1213.26 L1750.12 1213.26 L1750.71 1213.26 L1751.29 1213.26 L1751.88 1213.26 L1752.47 1213.26 L1753.05 1213.26 L1753.64 1213.26 L1754.23 1213.26 L1754.81 1213.26 L1755.4 1213.26 L1755.99 1213.26 L1756.57 1213.26 L1757.16 1213.26 L1757.74 1213.26 L1758.33 1213.26 L1758.92 1213.26 L1759.5 1213.26 L1760.09 1213.26 L1760.68 1213.26 L1761.26 1213.26 L1761.85 1213.26 L1762.44 1213.26 L1763.02 1213.26 L1763.61 1213.26 L1764.19 1213.26 L1764.78 1213.26 L1765.37 1213.26 L1765.95 1213.26 L1766.54 1213.26 L1767.13 1213.26 L1767.71 1213.26 L1768.3 1213.26 L1768.89 1213.26 L1769.47 1213.26 L1770.06 1213.26 L1770.65 1213.26 L1771.23 1213.26 L1771.82 1213.26 L1772.4 1213.26 L1772.99 1213.26 L1773.58 1213.26 L1774.16 1213.26 L1774.75 1213.26 L1775.34 1213.26 L1775.92 1213.26 L1776.51 1213.26 L1777.1 1213.26 L1777.68 1213.26 L1778.27 1213.26 L1778.86 1213.26 L1779.44 1213.26 L1780.03 1213.26 L1780.61 1213.26 L1781.2 1213.26 L1781.79 1213.26 L1782.37 1213.26 L1782.96 1213.26 L1783.55 1213.26 L1784.13 1213.26 L1784.72 1213.26 L1785.31 1213.26 L1785.89 1213.26 L1786.48 1213.26 L1787.06 1213.26 L1787.65 1213.26 L1788.24 1213.26 L1788.82 1213.26 L1789.41 1213.26 L1790 1213.26 L1790.58 1213.26 L1791.17 1213.26 L1791.76 1213.26 L1792.34 1213.26 L1792.93 1213.26 L1793.52 1213.26 L1794.1 1213.26 L1794.69 1213.26 L1795.27 1213.26 L1795.86 1213.26 L1796.45 1213.26 L1797.03 1213.26 L1797.62 1213.26 L1798.21 1213.26 L1798.79 1213.26 L1799.38 1213.26 L1799.97 1213.26 L1800.55 1213.26 L1801.14 1213.26 L1801.73 1213.26 L1802.31 1213.26 L1802.9 1213.26 L1803.48 1213.26 L1804.07 1213.26 L1804.66 1213.26 L1805.24 1213.26 L1805.83 1213.26 L1806.42 1213.26 L1807 1213.26 L1807.59 1213.26 L1808.18 1213.26 L1808.76 1213.26 L1809.35 1213.26 L1809.94 1213.26 L1810.52 1213.26 L1811.11 1213.26 L1811.69 1213.26 L1812.28 1213.26 L1812.87 1213.26 L1813.45 1213.26 L1814.04 1213.26 L1814.63 1213.26 L1815.21 1213.26 L1815.8 1213.26 L1816.39 1213.26 L1816.97 1213.26 L1817.56 1213.26 L1818.14 1213.26 L1818.73 1213.26 L1819.32 1213.26 L1819.9 1213.26 L1820.49 1213.26 L1821.08 1213.26 L1821.66 1213.26 L1822.25 1213.26 L1822.84 1213.26 L1823.42 1213.26 L1824.01 1213.26 L1824.6 1213.26 L1825.18 1213.26 L1825.77 1213.26 L1826.35 1213.26 L1826.94 1213.26 L1827.53 1213.26 L1828.11 1213.26 L1828.7 1213.26 L1829.29 1213.26 L1829.87 1213.26 L1830.46 1213.26 L1831.05 1213.26 L1831.63 1213.26 L1832.22 1213.26 L1832.81 1213.26 L1833.39 1213.26 L1833.98 1213.26 L1834.56 1213.26 L1835.15 1213.26 L1835.74 1213.26 L1836.32 1213.26 L1836.91 1213.26 L1837.5 1213.26 L1838.08 1213.26 L1838.67 1213.26 L1839.26 1213.26 L1839.84 1213.26 L1840.43 1213.26 L1841.01 1213.26 L1841.6 1213.26 L1842.19 1213.26 L1842.77 1213.26 L1843.36 1213.26 L1843.95 1213.26 L1844.53 1213.26 L1845.12 1213.26 L1845.71 1213.26 L1846.29 1213.26 L1846.88 1213.26 L1847.47 1213.26 L1848.05 1213.26 L1848.64 1213.26 L1849.22 1213.26 L1849.81 1213.26 L1850.4 1213.26 L1850.98 1213.26 L1851.57 1213.26 L1852.16 1213.26 L1852.74 1213.26 L1853.33 1213.26 L1853.92 1213.26 L1854.5 1213.26 L1855.09 1213.26 L1855.68 1213.26 L1856.26 1213.26 L1856.85 1213.26 L1857.43 1213.26 L1858.02 1213.26 L1858.61 1213.26 L1859.19 1213.26 L1859.78 1213.26 L1860.37 1213.26 L1860.95 1213.26 L1861.54 1213.26 L1862.13 1213.26 L1862.71 1213.26 L1863.3 1213.26 L1863.88 1213.26 L1864.47 1213.26 L1865.06 1213.26 L1865.64 1213.26 L1866.23 1213.26 L1866.82 1213.26 L1867.4 1213.26 L1867.99 1213.26 L1868.58 1213.26 L1869.16 1213.26 L1869.75 1213.26 L1870.34 1213.26 L1870.92 1213.26 L1871.51 1213.26 L1872.09 1213.26 L1872.68 1213.26 L1873.27 1213.26 L1873.85 1213.26 L1874.44 1213.26 L1875.03 1213.26 L1875.61 1213.26 L1876.2 1213.26 L1876.79 1213.26 L1877.37 1213.26 L1877.96 1213.26 L1878.55 1213.26 L1879.13 1213.26 L1879.72 1213.26 L1880.3 1213.26 L1880.89 1213.26 L1881.48 1213.26 L1882.06 1213.26 L1882.65 1213.26 L1883.24 1213.26 L1883.82 1213.26 L1884.41 1213.26 L1885 1213.26 L1885.58 1213.26 L1886.17 1213.26 L1886.76 1213.26 L1887.34 1213.26 L1887.93 1213.26 L1888.51 1213.26 L1889.1 1213.26 L1889.69 1213.26 L1890.27 1213.26 L1890.86 1213.26 L1891.45 1213.26 L1892.03 1213.26 L1892.62 1213.26 L1893.21 1213.26 L1893.79 1213.26 L1894.38 1213.26 L1894.96 1213.26 L1895.55 1213.26 L1896.14 1213.26 L1896.72 1213.26 L1897.31 1213.26 L1897.9 1213.26 L1898.48 1213.26 L1899.07 1213.26 L1899.66 1213.26 L1900.24 1213.26 L1900.83 1213.26 L1901.42 1213.26 L1902 1213.26 L1902.59 1213.26 L1903.17 1213.26 L1903.76 1213.26 L1904.35 1213.26 L1904.93 1213.26 L1905.52 1213.26 L1906.11 1213.26 L1906.69 1213.26 L1907.28 1213.26 L1907.87 1213.26 L1908.45 1213.26 L1909.04 1213.26 L1909.63 1213.26 L1910.21 1213.26 L1910.8 1213.26 L1911.38 1213.26 L1911.97 1213.26 L1912.56 1213.26 L1913.14 1213.26 L1913.73 1213.26 L1914.32 1213.26 L1914.9 1213.26 L1915.49 1213.26 L1916.08 1213.26 L1916.66 1213.26 L1917.25 1213.26 L1917.83 1213.26 L1918.42 1213.26 L1919.01 1213.26 L1919.59 1213.26 L1920.18 1213.26 L1920.77 1213.26 L1921.35 1213.26 L1921.94 1213.26 L1922.53 1213.26 L1923.11 1213.26 L1923.7 1213.26 L1924.29 1213.26 L1924.87 1213.26 L1925.46 1213.26 L1926.04 1213.26 L1926.63 1213.26 L1927.22 1213.26 L1927.8 1213.26 L1928.39 1213.26 L1928.98 1213.26 L1929.56 1213.26 L1930.15 1213.26 L1930.74 1213.26 L1931.32 1213.26 L1931.91 1213.26 L1932.5 1213.26 L1933.08 1213.26 L1933.67 1213.26 L1934.25 1213.26 L1934.84 1213.26 L1935.43 1213.26 L1936.01 1213.26 L1936.6 1213.26 L1937.19 1213.26 L1937.77 1213.26 L1938.36 1213.26 L1938.95 1213.26 L1939.53 1213.26 L1940.12 1213.26 L1940.71 1213.26 L1941.29 1213.26 L1941.88 1213.26 L1942.46 1213.26 L1943.05 1213.26 L1943.64 1213.26 L1944.22 1213.26 L1944.81 1213.26 L1945.4 1213.26 L1945.98 1213.26 L1946.57 1213.26 L1947.16 1213.26 L1947.74 1213.26 L1948.33 1213.26 L1948.91 1213.26 L1949.5 1213.26 L1950.09 1213.26 L1950.67 1213.26 L1951.26 1213.26 L1951.85 1213.26 L1952.43 1213.26 L1953.02 1213.26 L1953.61 1213.26 L1954.19 1213.26 L1954.78 1213.26 L1955.37 1213.26 L1955.95 1213.26 L1956.54 1213.26 L1957.12 1213.26 L1957.71 1213.26 L1958.3 1213.26 L1958.88 1213.26 L1959.47 1213.26 L1960.06 1213.26 L1960.64 1213.26 L1961.23 1213.26 L1961.82 1213.26 L1962.4 1213.26 L1962.99 1213.26 L1963.58 1213.26 L1964.16 1213.26 L1964.75 1213.26 L1965.33 1213.26 L1965.92 1213.26 L1966.51 1213.26 L1967.09 1213.26 L1967.68 1213.26 L1968.27 1213.26 L1968.85 1213.26 L1969.44 1213.26 L1970.03 1213.26 L1970.61 1213.26 L1971.2 1213.26 L1971.78 1213.26 L1972.37 1213.26 L1972.96 1213.26 L1973.54 1213.26 L1974.13 1213.26 L1974.72 1213.26 L1975.3 1213.26 L1975.89 1213.26 L1976.48 1213.26 L1977.06 1213.26 L1977.65 1213.26 L1978.24 1213.26 L1978.82 1213.26 L1979.41 1213.26 L1979.99 1213.26 L1980.58 1213.26 L1981.17 1213.26 L1981.75 1213.26 L1982.34 1213.26 L1982.93 1213.26 L1983.51 1213.26 L1984.1 1213.26 L1984.69 1213.26 L1985.27 1213.26 L1985.86 1213.26 L1986.45 1213.26 L1987.03 1213.26 L1987.62 1213.26 L1988.2 1213.26 L1988.79 1213.26 L1989.38 1213.26 L1989.96 1213.26 L1990.55 1213.26 L1991.14 1213.26 L1991.72 1213.26 L1992.31 1213.26 L1992.9 1213.26 L1993.48 1213.26 L1994.07 1213.26 L1994.65 1213.26 L1995.24 1213.26 L1995.83 1213.26 L1996.41 1213.26 L1997 1213.26 L1997.59 1213.26 L1998.17 1213.26 L1998.76 1213.26 L1999.35 1213.26 L1999.93 1213.26 L2000.52 1213.26 L2001.11 1213.26 L2001.69 1213.26 L2002.28 1213.26 L2002.86 1213.26 L2003.45 1213.26 L2004.04 1213.26 L2004.62 1213.26 L2005.21 1213.26 L2005.8 1213.26 L2006.38 1213.26 L2006.97 1213.26 L2007.56 1213.26 L2008.14 1213.26 L2008.73 1213.26 L2009.32 1213.26 L2009.9 1213.26 L2010.49 1213.26 L2011.07 1213.26 L2011.66 1213.26 L2012.25 1213.26 L2012.83 1213.26 L2013.42 1213.26 L2014.01 1213.26 L2014.59 1213.26 L2015.18 1213.26 L2015.77 1213.26 L2016.35 1213.26 L2016.94 1213.26 L2017.53 1213.26 L2018.11 1213.26 L2018.7 1213.26 L2019.28 1213.26 L2019.87 1213.26 L2020.46 1213.26 L2021.04 1213.26 L2021.63 1213.26 L2022.22 1213.26 L2022.8 1213.26 L2023.39 1213.26 L2023.98 1213.26 L2024.56 1213.26 L2025.15 1213.26 L2025.73 1213.26 L2026.32 1213.26 L2026.91 1213.26 L2027.49 1213.26 L2028.08 1213.26 L2028.67 1213.26 L2029.25 1213.26 L2029.84 1213.26 L2030.43 1213.26 L2031.01 1213.26 L2031.6 1213.26 L2032.19 1213.26 L2032.77 1213.26 L2033.36 1213.26 L2033.94 1213.26 L2034.53 1213.26 L2035.12 1213.26 L2035.7 1213.26 L2036.29 1213.26 L2036.88 1213.26 L2037.46 1213.26 L2038.05 1213.26 L2038.64 1213.26 L2039.22 1213.26 L2039.81 1213.26 L2040.4 1213.26 L2040.98 1213.26 L2041.57 1213.26 L2042.15 1213.26 L2042.74 1213.26 L2043.33 1213.26 L2043.91 1213.26 L2044.5 1213.26 L2045.09 1213.26 L2045.67 1213.26 L2046.26 1213.26 L2046.85 1213.26 L2047.43 1213.26 L2048.02 1213.26 L2048.6 1213.26 L2049.19 1213.26 L2049.78 1213.26 L2050.36 1213.26 L2050.95 1213.26 L2051.54 1213.26 L2052.12 1213.26 L2052.71 1213.26 L2053.3 1213.26 L2053.88 1213.26 L2054.47 1213.26 L2055.06 1213.26 L2055.64 1213.26 L2056.23 1213.26 L2056.81 1213.26 L2057.4 1213.26 L2057.99 1213.26 L2058.57 1213.26 L2059.16 1213.26 L2059.75 1213.26 L2060.33 1213.26 L2060.92 1213.26 L2061.51 1213.26 L2062.09 1213.26 L2062.68 1213.26 L2063.27 1213.26 L2063.85 1213.26 L2064.44 1213.26 L2065.02 1213.26 L2065.61 1213.26 L2066.2 1213.26 L2066.78 1213.26 L2067.37 1213.26 L2067.96 1213.26 L2068.54 1213.26 L2069.13 1213.26 L2069.72 1213.26 L2070.3 1213.26 L2070.89 1213.26 L2071.48 1213.26 L2072.06 1213.26 L2072.65 1213.26 L2073.23 1213.26 L2073.82 1213.26 L2074.41 1213.26 L2074.99 1213.26 L2075.58 1213.26 L2076.17 1213.26 L2076.75 1213.26 L2077.34 1213.26 L2077.93 1213.26 L2078.51 1213.26 L2079.1 1213.26 L2079.68 1213.26 L2080.27 1213.26 L2080.86 1213.26 L2081.44 1213.26 L2082.03 1213.26 L2082.62 1213.26 L2083.2 1213.26 L2083.79 1213.26 L2084.38 1213.26 L2084.96 1213.26 L2085.55 1213.26 L2086.14 1213.26 L2086.72 1213.26 L2087.31 1213.26 L2087.89 1213.26 L2088.48 1213.26 L2089.07 1213.26 L2089.65 1213.26 L2090.24 1213.26 L2090.83 1213.26 L2091.41 1213.26 L2092 1213.26 L2092.59 1213.26 L2093.17 1213.26 L2093.76 1213.26 L2094.35 1213.26 L2094.93 1213.26 L2095.52 1213.26 L2096.1 1213.26 L2096.69 1213.26 L2097.28 1213.26 L2097.86 1213.26 L2098.45 1213.26 L2099.04 1213.26 L2099.62 1213.26 L2100.21 1213.26 L2100.8 1213.26 L2101.38 1213.26 L2101.97 1213.26 L2102.55 1213.26 L2103.14 1213.26 L2103.73 1213.26 L2104.31 1213.26 L2104.9 1213.26 L2105.49 1213.26 L2106.07 1213.26 L2106.66 1213.26 L2107.25 1213.26 L2107.83 1213.26 L2108.42 1213.26 L2109.01 1213.26 L2109.59 1213.26 L2110.18 1213.26 L2110.76 1213.26 L2111.35 1213.26 L2111.94 1213.26 L2112.52 1213.26 L2113.11 1213.26 L2113.7 1213.26 L2114.28 1213.26 L2114.87 1213.26 L2115.46 1213.26 L2116.04 1213.26 L2116.63 1213.26 L2117.22 1213.26 L2117.8 1213.26 L2118.39 1213.26 L2118.97 1213.26 L2119.56 1213.26 L2120.15 1213.26 L2120.73 1213.26 L2121.32 1213.26 L2121.91 1213.26 L2122.49 1213.26 L2123.08 1213.26 L2123.67 1213.26 L2124.25 1213.26 L2124.84 1213.26 L2125.42 1213.26 L2126.01 1213.26 L2126.6 1213.26 L2127.18 1213.26 L2127.77 1213.26 L2128.36 1213.26 L2128.94 1213.26 L2129.53 1213.26 L2130.12 1213.26 L2130.7 1213.26 L2131.29 1213.26 L2131.88 1213.26 L2132.46 1213.26 L2133.05 1213.26 L2133.63 1213.26 L2134.22 1213.26 L2134.81 1213.26 L2135.39 1213.26 L2135.98 1213.26 L2136.57 1213.26 L2137.15 1213.26 L2137.74 1213.26 L2138.33 1213.26 L2138.91 1213.26 L2139.5 1213.26 L2140.09 1213.26 L2140.67 1213.26 L2141.26 1213.26 L2141.84 1213.26 L2142.43 1213.26 L2143.02 1213.26 L2143.6 1213.26 L2144.19 1213.26 L2144.78 1213.26 L2145.36 1213.26 L2145.95 1213.26 L2146.54 1213.26 L2147.12 1213.26 L2147.71 1213.26 L2148.3 1213.26 L2148.88 1213.26 L2149.47 1213.26 L2150.05 1213.26 L2150.64 1213.26 L2151.23 1213.26 L2151.81 1213.26 L2152.4 1213.26 L2152.99 1213.26 L2153.57 1213.26 L2154.16 1213.26 L2154.75 1213.26 L2155.33 1213.26 L2155.92 1213.26 L2156.5 1213.26 L2157.09 1213.26 L2157.68 1213.26 L2158.26 1213.26 L2158.26 1212.57 L2157.68 1212.57 L2157.09 1212.57 L2156.5 1212.57 L2155.92 1212.57 L2155.33 1212.57 L2154.75 1212.57 L2154.16 1212.57 L2153.57 1212.57 L2152.99 1212.57 L2152.4 1212.57 L2151.81 1212.57 L2151.23 1212.57 L2150.64 1212.57 L2150.05 1212.57 L2149.47 1212.57 L2148.88 1212.57 L2148.3 1212.57 L2147.71 1212.57 L2147.12 1212.57 L2146.54 1212.57 L2145.95 1212.57 L2145.36 1212.57 L2144.78 1212.57 L2144.19 1212.57 L2143.6 1212.57 L2143.02 1212.57 L2142.43 1212.57 L2141.84 1212.57 L2141.26 1212.57 L2140.67 1212.57 L2140.09 1212.57 L2139.5 1212.57 L2138.91 1212.57 L2138.33 1212.57 L2137.74 1212.57 L2137.15 1212.57 L2136.57 1212.57 L2135.98 1212.57 L2135.39 1212.57 L2134.81 1212.57 L2134.22 1212.57 L2133.63 1212.57 L2133.05 1212.57 L2132.46 1212.57 L2131.88 1212.57 L2131.29 1212.57 L2130.7 1212.57 L2130.12 1212.57 L2129.53 1212.57 L2128.94 1212.57 L2128.36 1212.57 L2127.77 1212.57 L2127.18 1212.57 L2126.6 1212.57 L2126.01 1212.57 L2125.42 1212.57 L2124.84 1212.57 L2124.25 1212.57 L2123.67 1212.57 L2123.08 1212.57 L2122.49 1212.57 L2121.91 1212.57 L2121.32 1212.57 L2120.73 1212.57 L2120.15 1212.57 L2119.56 1212.57 L2118.97 1212.57 L2118.39 1212.57 L2117.8 1212.57 L2117.22 1212.57 L2116.63 1212.57 L2116.04 1212.57 L2115.46 1212.57 L2114.87 1212.57 L2114.28 1212.57 L2113.7 1212.57 L2113.11 1212.57 L2112.52 1212.57 L2111.94 1212.57 L2111.35 1212.57 L2110.76 1212.57 L2110.18 1212.57 L2109.59 1212.57 L2109.01 1212.57 L2108.42 1212.57 L2107.83 1212.57 L2107.25 1212.57 L2106.66 1212.57 L2106.07 1212.57 L2105.49 1212.57 L2104.9 1212.57 L2104.31 1212.57 L2103.73 1212.57 L2103.14 1212.57 L2102.55 1212.57 L2101.97 1212.57 L2101.38 1212.57 L2100.8 1212.57 L2100.21 1212.57 L2099.62 1212.57 L2099.04 1212.57 L2098.45 1212.57 L2097.86 1212.57 L2097.28 1212.57 L2096.69 1212.57 L2096.1 1212.57 L2095.52 1212.57 L2094.93 1212.57 L2094.35 1212.57 L2093.76 1212.57 L2093.17 1212.57 L2092.59 1212.57 L2092 1212.57 L2091.41 1212.57 L2090.83 1212.57 L2090.24 1212.57 L2089.65 1212.57 L2089.07 1212.57 L2088.48 1212.57 L2087.89 1212.57 L2087.31 1212.57 L2086.72 1212.57 L2086.14 1212.57 L2085.55 1212.57 L2084.96 1212.57 L2084.38 1212.57 L2083.79 1212.57 L2083.2 1212.57 L2082.62 1212.57 L2082.03 1212.57 L2081.44 1212.57 L2080.86 1212.57 L2080.27 1212.57 L2079.68 1212.57 L2079.1 1212.57 L2078.51 1212.57 L2077.93 1212.57 L2077.34 1212.57 L2076.75 1212.57 L2076.17 1212.57 L2075.58 1212.57 L2074.99 1212.57 L2074.41 1212.57 L2073.82 1212.57 L2073.23 1212.57 L2072.65 1212.57 L2072.06 1212.57 L2071.48 1212.57 L2070.89 1212.57 L2070.3 1212.57 L2069.72 1212.57 L2069.13 1212.57 L2068.54 1212.57 L2067.96 1212.57 L2067.37 1212.57 L2066.78 1212.57 L2066.2 1212.57 L2065.61 1212.57 L2065.02 1212.57 L2064.44 1212.57 L2063.85 1212.57 L2063.27 1212.57 L2062.68 1212.57 L2062.09 1212.57 L2061.51 1212.57 L2060.92 1212.57 L2060.33 1212.57 L2059.75 1212.57 L2059.16 1212.57 L2058.57 1212.57 L2057.99 1212.57 L2057.4 1212.57 L2056.81 1212.57 L2056.23 1212.57 L2055.64 1212.57 L2055.06 1212.57 L2054.47 1212.57 L2053.88 1212.57 L2053.3 1212.57 L2052.71 1212.57 L2052.12 1212.57 L2051.54 1212.57 L2050.95 1212.57 L2050.36 1212.57 L2049.78 1212.57 L2049.19 1212.57 L2048.6 1212.57 L2048.02 1212.57 L2047.43 1212.57 L2046.85 1212.57 L2046.26 1212.57 L2045.67 1212.57 L2045.09 1212.57 L2044.5 1212.57 L2043.91 1212.57 L2043.33 1212.57 L2042.74 1212.57 L2042.15 1212.57 L2041.57 1212.57 L2040.98 1212.57 L2040.4 1212.57 L2039.81 1212.57 L2039.22 1212.57 L2038.64 1212.57 L2038.05 1212.57 L2037.46 1212.57 L2036.88 1212.57 L2036.29 1212.57 L2035.7 1212.57 L2035.12 1212.57 L2034.53 1212.57 L2033.94 1212.57 L2033.36 1212.57 L2032.77 1212.57 L2032.19 1212.57 L2031.6 1212.57 L2031.01 1212.57 L2030.43 1212.57 L2029.84 1212.57 L2029.25 1212.57 L2028.67 1212.57 L2028.08 1212.57 L2027.49 1212.57 L2026.91 1212.57 L2026.32 1212.57 L2025.73 1212.57 L2025.15 1212.57 L2024.56 1212.57 L2023.98 1212.57 L2023.39 1212.57 L2022.8 1212.57 L2022.22 1212.57 L2021.63 1212.57 L2021.04 1212.57 L2020.46 1212.57 L2019.87 1212.57 L2019.28 1212.57 L2018.7 1212.57 L2018.11 1212.57 L2017.53 1212.57 L2016.94 1212.57 L2016.35 1212.57 L2015.77 1212.57 L2015.18 1212.57 L2014.59 1212.57 L2014.01 1212.57 L2013.42 1212.57 L2012.83 1212.57 L2012.25 1212.57 L2011.66 1212.57 L2011.07 1212.57 L2010.49 1212.57 L2009.9 1212.57 L2009.32 1212.57 L2008.73 1212.57 L2008.14 1212.57 L2007.56 1212.57 L2006.97 1212.57 L2006.38 1212.57 L2005.8 1212.57 L2005.21 1212.57 L2004.62 1212.57 L2004.04 1212.57 L2003.45 1212.57 L2002.86 1212.57 L2002.28 1212.57 L2001.69 1212.57 L2001.11 1212.57 L2000.52 1212.57 L1999.93 1212.57 L1999.35 1212.57 L1998.76 1212.57 L1998.17 1212.57 L1997.59 1212.57 L1997 1212.57 L1996.41 1212.57 L1995.83 1212.57 L1995.24 1212.57 L1994.65 1212.57 L1994.07 1212.57 L1993.48 1212.57 L1992.9 1212.57 L1992.31 1212.57 L1991.72 1212.57 L1991.14 1212.57 L1990.55 1212.57 L1989.96 1212.57 L1989.38 1212.57 L1988.79 1212.57 L1988.2 1212.57 L1987.62 1212.57 L1987.03 1212.57 L1986.45 1212.57 L1985.86 1212.57 L1985.27 1212.57 L1984.69 1212.57 L1984.1 1212.57 L1983.51 1212.57 L1982.93 1212.57 L1982.34 1212.57 L1981.75 1212.57 L1981.17 1212.57 L1980.58 1212.57 L1979.99 1212.57 L1979.41 1212.57 L1978.82 1212.57 L1978.24 1212.57 L1977.65 1212.57 L1977.06 1212.57 L1976.48 1212.57 L1975.89 1212.57 L1975.3 1212.57 L1974.72 1212.57 L1974.13 1212.57 L1973.54 1212.57 L1972.96 1212.57 L1972.37 1212.57 L1971.78 1212.57 L1971.2 1212.57 L1970.61 1212.57 L1970.03 1212.57 L1969.44 1212.57 L1968.85 1212.57 L1968.27 1212.57 L1967.68 1212.57 L1967.09 1212.57 L1966.51 1212.57 L1965.92 1212.57 L1965.33 1212.57 L1964.75 1212.57 L1964.16 1212.57 L1963.58 1212.57 L1962.99 1212.57 L1962.4 1212.57 L1961.82 1212.57 L1961.23 1212.57 L1960.64 1212.57 L1960.06 1212.57 L1959.47 1212.57 L1958.88 1212.57 L1958.3 1212.57 L1957.71 1212.57 L1957.12 1212.57 L1956.54 1212.57 L1955.95 1212.57 L1955.37 1212.57 L1954.78 1212.57 L1954.19 1212.57 L1953.61 1212.57 L1953.02 1212.57 L1952.43 1212.57 L1951.85 1212.57 L1951.26 1212.57 L1950.67 1212.57 L1950.09 1212.57 L1949.5 1212.57 L1948.91 1212.57 L1948.33 1212.57 L1947.74 1212.57 L1947.16 1212.57 L1946.57 1212.57 L1945.98 1212.57 L1945.4 1212.57 L1944.81 1212.57 L1944.22 1212.57 L1943.64 1212.57 L1943.05 1212.57 L1942.46 1212.57 L1941.88 1212.57 L1941.29 1212.57 L1940.71 1212.57 L1940.12 1212.57 L1939.53 1212.57 L1938.95 1212.57 L1938.36 1212.57 L1937.77 1212.57 L1937.19 1212.57 L1936.6 1212.57 L1936.01 1212.57 L1935.43 1212.57 L1934.84 1212.57 L1934.25 1212.57 L1933.67 1212.57 L1933.08 1212.57 L1932.5 1212.57 L1931.91 1212.57 L1931.32 1212.57 L1930.74 1212.57 L1930.15 1212.57 L1929.56 1212.57 L1928.98 1212.57 L1928.39 1212.57 L1927.8 1212.57 L1927.22 1212.57 L1926.63 1212.57 L1926.04 1212.57 L1925.46 1212.57 L1924.87 1212.57 L1924.29 1212.57 L1923.7 1212.57 L1923.11 1212.57 L1922.53 1212.57 L1921.94 1212.57 L1921.35 1212.57 L1920.77 1212.57 L1920.18 1212.57 L1919.59 1212.57 L1919.01 1212.57 L1918.42 1212.57 L1917.83 1212.57 L1917.25 1212.57 L1916.66 1212.57 L1916.08 1212.57 L1915.49 1212.57 L1914.9 1212.57 L1914.32 1212.57 L1913.73 1212.57 L1913.14 1212.57 L1912.56 1212.57 L1911.97 1212.57 L1911.38 1212.57 L1910.8 1212.57 L1910.21 1212.57 L1909.63 1212.57 L1909.04 1212.57 L1908.45 1212.57 L1907.87 1212.57 L1907.28 1212.57 L1906.69 1212.57 L1906.11 1212.57 L1905.52 1212.57 L1904.93 1212.57 L1904.35 1212.57 L1903.76 1212.57 L1903.17 1212.57 L1902.59 1212.57 L1902 1212.57 L1901.42 1212.57 L1900.83 1212.57 L1900.24 1212.57 L1899.66 1212.57 L1899.07 1212.57 L1898.48 1212.57 L1897.9 1212.57 L1897.31 1212.57 L1896.72 1212.57 L1896.14 1212.57 L1895.55 1212.57 L1894.96 1212.57 L1894.38 1212.57 L1893.79 1212.57 L1893.21 1212.57 L1892.62 1212.57 L1892.03 1212.57 L1891.45 1212.57 L1890.86 1212.57 L1890.27 1212.57 L1889.69 1212.57 L1889.1 1212.57 L1888.51 1212.57 L1887.93 1212.57 L1887.34 1212.57 L1886.76 1212.57 L1886.17 1212.57 L1885.58 1212.57 L1885 1212.57 L1884.41 1212.57 L1883.82 1212.57 L1883.24 1212.57 L1882.65 1212.57 L1882.06 1212.57 L1881.48 1212.57 L1880.89 1212.57 L1880.3 1212.57 L1879.72 1212.57 L1879.13 1212.57 L1878.55 1212.57 L1877.96 1212.57 L1877.37 1212.57 L1876.79 1212.57 L1876.2 1212.57 L1875.61 1212.57 L1875.03 1212.57 L1874.44 1212.57 L1873.85 1212.57 L1873.27 1212.57 L1872.68 1212.57 L1872.09 1212.57 L1871.51 1212.57 L1870.92 1212.57 L1870.34 1212.57 L1869.75 1212.57 L1869.16 1212.57 L1868.58 1212.57 L1867.99 1212.57 L1867.4 1212.57 L1866.82 1212.57 L1866.23 1212.57 L1865.64 1212.57 L1865.06 1212.57 L1864.47 1212.57 L1863.88 1212.57 L1863.3 1212.57 L1862.71 1212.57 L1862.13 1212.57 L1861.54 1212.57 L1860.95 1212.57 L1860.37 1212.57 L1859.78 1212.57 L1859.19 1212.57 L1858.61 1212.57 L1858.02 1212.57 L1857.43 1212.57 L1856.85 1212.57 L1856.26 1212.57 L1855.68 1212.57 L1855.09 1212.57 L1854.5 1212.57 L1853.92 1212.57 L1853.33 1212.57 L1852.74 1212.57 L1852.16 1212.57 L1851.57 1212.57 L1850.98 1212.57 L1850.4 1212.57 L1849.81 1212.57 L1849.22 1212.57 L1848.64 1212.57 L1848.05 1212.57 L1847.47 1212.57 L1846.88 1212.57 L1846.29 1212.57 L1845.71 1212.57 L1845.12 1212.57 L1844.53 1212.57 L1843.95 1212.57 L1843.36 1212.57 L1842.77 1212.57 L1842.19 1212.57 L1841.6 1212.57 L1841.01 1212.57 L1840.43 1212.57 L1839.84 1212.57 L1839.26 1212.57 L1838.67 1212.57 L1838.08 1212.57 L1837.5 1212.57 L1836.91 1212.57 L1836.32 1212.57 L1835.74 1212.57 L1835.15 1212.57 L1834.56 1212.57 L1833.98 1212.57 L1833.39 1212.57 L1832.81 1212.57 L1832.22 1212.57 L1831.63 1212.57 L1831.05 1212.57 L1830.46 1212.57 L1829.87 1212.57 L1829.29 1212.57 L1828.7 1212.57 L1828.11 1212.57 L1827.53 1212.57 L1826.94 1212.57 L1826.35 1212.57 L1825.77 1212.57 L1825.18 1212.57 L1824.6 1212.57 L1824.01 1212.57 L1823.42 1212.57 L1822.84 1212.57 L1822.25 1212.57 L1821.66 1212.57 L1821.08 1212.57 L1820.49 1212.57 L1819.9 1212.57 L1819.32 1212.57 L1818.73 1212.57 L1818.14 1212.57 L1817.56 1212.57 L1816.97 1212.57 L1816.39 1212.57 L1815.8 1212.57 L1815.21 1212.57 L1814.63 1212.57 L1814.04 1212.57 L1813.45 1212.57 L1812.87 1212.57 L1812.28 1212.57 L1811.69 1212.57 L1811.11 1212.57 L1810.52 1212.57 L1809.94 1212.57 L1809.35 1212.57 L1808.76 1212.57 L1808.18 1212.57 L1807.59 1212.57 L1807 1212.57 L1806.42 1212.57 L1805.83 1212.57 L1805.24 1212.57 L1804.66 1212.57 L1804.07 1212.57 L1803.48 1212.57 L1802.9 1212.57 L1802.31 1212.57 L1801.73 1212.57 L1801.14 1212.57 L1800.55 1212.57 L1799.97 1212.57 L1799.38 1212.57 L1798.79 1212.57 L1798.21 1212.57 L1797.62 1212.57 L1797.03 1212.57 L1796.45 1212.57 L1795.86 1212.57 L1795.27 1212.57 L1794.69 1212.57 L1794.1 1212.57 L1793.52 1212.57 L1792.93 1212.57 L1792.34 1212.57 L1791.76 1212.57 L1791.17 1212.57 L1790.58 1212.57 L1790 1212.57 L1789.41 1212.57 L1788.82 1212.57 L1788.24 1212.57 L1787.65 1212.57 L1787.06 1212.57 L1786.48 1212.57 L1785.89 1212.57 L1785.31 1212.57 L1784.72 1212.57 L1784.13 1212.57 L1783.55 1212.57 L1782.96 1212.57 L1782.37 1212.57 L1781.79 1212.57 L1781.2 1212.57 L1780.61 1212.57 L1780.03 1212.57 L1779.44 1212.57 L1778.86 1212.57 L1778.27 1212.57 L1777.68 1212.57 L1777.1 1212.57 L1776.51 1212.57 L1775.92 1212.57 L1775.34 1212.57 L1774.75 1212.57 L1774.16 1212.57 L1773.58 1212.57 L1772.99 1212.57 L1772.4 1212.57 L1771.82 1212.57 L1771.23 1212.57 L1770.65 1212.57 L1770.06 1212.57 L1769.47 1212.57 L1768.89 1212.57 L1768.3 1212.57 L1767.71 1212.57 L1767.13 1212.57 L1766.54 1212.57 L1765.95 1212.57 L1765.37 1212.57 L1764.78 1212.57 L1764.19 1212.57 L1763.61 1212.57 L1763.02 1212.57 L1762.44 1212.57 L1761.85 1212.57 L1761.26 1212.57 L1760.68 1212.57 L1760.09 1212.57 L1759.5 1212.57 L1758.92 1212.57 L1758.33 1212.57 L1757.74 1212.57 L1757.16 1212.57 L1756.57 1212.57 L1755.99 1212.57 L1755.4 1212.57 L1754.81 1212.57 L1754.23 1212.57 L1753.64 1212.57 L1753.05 1212.57 L1752.47 1212.57 L1751.88 1212.57 L1751.29 1212.57 L1750.71 1212.57 L1750.12 1212.57 L1749.53 1212.57 L1748.95 1212.57 L1748.36 1212.57 L1747.78 1212.57 L1747.19 1212.57 L1746.6 1212.57 L1746.02 1212.57 L1745.43 1212.57 L1744.84 1212.57 L1744.26 1212.57 L1743.67 1212.57 L1743.08 1212.57 L1742.5 1212.57 L1741.91 1212.57 L1741.32 1212.57 L1740.74 1212.57 L1740.15 1212.57 L1739.57 1212.57 L1738.98 1212.57 L1738.39 1212.57 L1737.81 1212.57 L1737.22 1212.57 L1736.63 1212.57 L1736.05 1212.57 L1735.46 1212.57 L1734.87 1212.57 L1734.29 1212.57 L1733.7 1212.57 L1733.11 1212.57 L1732.53 1212.57 L1731.94 1212.57 L1731.36 1212.57 L1730.77 1212.57 L1730.18 1212.57 L1729.6 1212.57 L1729.01 1212.57 L1728.42 1212.57 L1727.84 1212.57 L1727.25 1212.57 L1726.66 1212.57 L1726.08 1212.57 L1725.49 1212.57 L1724.91 1212.57 L1724.32 1212.57 L1723.73 1212.57 L1723.15 1212.57 L1722.56 1212.57 L1721.97 1212.57 L1721.39 1212.57 L1720.8 1212.57 L1720.21 1212.57 L1719.63 1212.57 L1719.04 1212.57 L1718.45 1212.57 L1717.87 1212.57 L1717.28 1212.57 L1716.7 1212.57 L1716.11 1212.57 L1715.52 1212.57 L1714.94 1212.57 L1714.35 1212.57 L1713.76 1212.57 L1713.18 1212.57 L1712.59 1212.57 L1712 1212.57 L1711.42 1212.57 L1710.83 1212.57 L1710.24 1212.57 L1709.66 1212.57 L1709.07 1212.57 L1708.49 1212.57 L1707.9 1212.57 L1707.31 1212.57 L1706.73 1212.57 L1706.14 1212.57 L1705.55 1212.57 L1704.97 1212.57 L1704.38 1212.57 L1703.79 1212.57 L1703.21 1212.57 L1702.62 1212.57 L1702.04 1212.57 L1701.45 1212.57 L1700.86 1212.57 L1700.28 1212.57 L1699.69 1212.57 L1699.1 1212.57 L1698.52 1212.57 L1697.93 1212.57 L1697.34 1212.57 L1696.76 1212.57 L1696.17 1212.57 L1695.58 1212.57 L1695 1212.57 L1694.41 1212.57 L1693.83 1212.57 L1693.24 1212.57 L1692.65 1212.57 L1692.07 1212.57 L1691.48 1212.57 L1690.89 1212.57 L1690.31 1212.57 L1689.72 1212.57 L1689.13 1212.57 L1688.55 1212.57 L1687.96 1212.57 L1687.37 1212.57 L1686.79 1212.57 L1686.2 1212.57 L1685.62 1212.57 L1685.03 1212.57 L1684.44 1212.57 L1683.86 1212.57 L1683.27 1212.57 L1682.68 1212.57 L1682.1 1212.57 L1681.51 1212.57 L1680.92 1212.57 L1680.34 1212.57 L1679.75 1212.57 L1679.17 1212.57 L1678.58 1212.57 L1677.99 1212.57 L1677.41 1212.57 L1676.82 1212.57 L1676.23 1212.57 L1675.65 1212.57 L1675.06 1212.57 L1674.47 1212.57 L1673.89 1212.57 L1673.3 1212.57 L1672.71 1212.57 L1672.13 1212.57 L1671.54 1212.57 L1670.96 1212.57 L1670.37 1212.57 L1669.78 1212.57 L1669.2 1212.57 L1668.61 1212.57 L1668.02 1212.57 L1667.44 1212.57 L1666.85 1212.57 L1666.26 1212.57 L1665.68 1212.57 L1665.09 1212.57 L1664.5 1212.57 L1663.92 1212.57 L1663.33 1212.57 L1662.75 1212.57 L1662.16 1212.57 L1661.57 1212.57 L1660.99 1212.57 L1660.4 1212.57 L1659.81 1212.57 L1659.23 1212.57 L1658.64 1212.57 L1658.05 1212.57 L1657.47 1212.57 L1656.88 1212.57 L1656.29 1212.57 L1655.71 1212.57 L1655.12 1212.57 L1654.54 1212.57 L1653.95 1212.57 L1653.36 1212.57 L1652.78 1212.57 L1652.19 1212.57 L1651.6 1212.57 L1651.02 1212.57 L1650.43 1212.57 L1649.84 1212.57 L1649.26 1212.57 L1648.67 1212.57 L1648.09 1212.57 L1647.5 1212.57 L1646.91 1212.57 L1646.33 1212.57 L1645.74 1212.57 L1645.15 1212.57 L1644.57 1212.57 L1643.98 1212.57 L1643.39 1212.57 L1642.81 1212.57 L1642.22 1212.57 L1641.63 1212.57 L1641.05 1212.57 L1640.46 1212.57 L1639.88 1212.57 L1639.29 1212.57 L1638.7 1212.57 L1638.12 1212.57 L1637.53 1212.57 L1636.94 1212.57 L1636.36 1212.57 L1635.77 1212.57 L1635.18 1212.57 L1634.6 1212.57 L1634.01 1212.57 L1633.42 1212.57 L1632.84 1212.57 L1632.25 1212.57 L1631.67 1212.57 L1631.08 1212.57 L1630.49 1212.57 L1629.91 1212.57 L1629.32 1212.57 L1628.73 1212.57 L1628.15 1212.57 L1627.56 1212.57 L1626.97 1212.57 L1626.39 1212.57 L1625.8 1212.57 L1625.22 1212.57 L1624.63 1212.57 L1624.04 1212.57 L1623.46 1212.57 L1622.87 1212.57 L1622.28 1212.57 L1621.7 1212.57 L1621.11 1212.57 L1620.52 1212.57 L1619.94 1212.57 L1619.35 1212.57 L1618.76 1212.57 L1618.18 1212.57 L1617.59 1212.57 L1617.01 1212.57 L1616.42 1212.57 L1615.83 1212.57 L1615.25 1212.57 L1614.66 1212.57 L1614.07 1212.57 L1613.49 1212.57 L1612.9 1212.57 L1612.31 1212.57 L1611.73 1212.57 L1611.14 1212.57 L1610.55 1212.57 L1609.97 1212.57 L1609.38 1212.57 L1608.8 1212.57 L1608.21 1212.57 L1607.62 1212.57 L1607.04 1212.57 L1606.45 1212.57 L1605.86 1212.57 L1605.28 1212.57 L1604.69 1212.57 L1604.1 1212.57 L1603.52 1212.57 L1602.93 1212.57 L1602.34 1212.57 L1601.76 1212.57 L1601.17 1212.57 L1600.59 1212.57 L1600 1212.57 L1599.41 1212.57 L1598.83 1212.57 L1598.24 1212.57 L1597.65 1212.57 L1597.07 1212.57 L1596.48 1212.57 L1595.89 1212.57 L1595.31 1212.57 L1594.72 1212.57 L1594.14 1212.57 L1593.55 1212.57 L1592.96 1212.57 L1592.38 1212.57 L1591.79 1212.57 L1591.2 1212.57 L1590.62 1212.57 L1590.03 1212.57 L1589.44 1212.57 L1588.86 1212.57 L1588.27 1212.57 L1587.68 1212.57 L1587.1 1212.57 L1586.51 1212.57 L1585.93 1212.57 L1585.34 1212.57 L1584.75 1212.57 L1584.17 1212.57 L1583.58 1212.57 L1582.99 1212.57 L1582.41 1212.57 L1581.82 1212.57 L1581.23 1212.57 L1580.65 1212.57 L1580.06 1212.57 L1579.47 1212.57 L1578.89 1212.57 L1578.3 1212.57 L1577.72 1212.57 L1577.13 1212.57 L1576.54 1212.57 L1575.96 1212.57 L1575.37 1212.57 L1574.78 1212.57 L1574.2 1212.57 L1573.61 1212.57 L1573.02 1212.57 L1572.44 1212.57 L1571.85 1212.57 L1571.27 1212.57 L1570.68 1212.57 L1570.09 1212.57 L1569.51 1212.57 L1568.92 1212.57 L1568.33 1212.57 L1567.75 1212.57 L1567.16 1212.57 L1566.57 1212.57 L1565.99 1212.57 L1565.4 1212.57 L1564.81 1212.57 L1564.23 1212.57 L1563.64 1212.57 L1563.06 1212.57 L1562.47 1212.57 L1561.88 1212.57 L1561.3 1212.57 L1560.71 1212.57 L1560.12 1212.57 L1559.54 1212.57 L1558.95 1212.57 L1558.36 1212.57 L1557.78 1212.57 L1557.19 1212.57 L1556.6 1212.57 L1556.02 1212.57 L1555.43 1212.57 L1554.85 1212.57 L1554.26 1212.57 L1553.67 1212.57 L1553.09 1212.57 L1552.5 1212.57 L1551.91 1212.57 L1551.33 1212.57 L1550.74 1212.57 L1550.15 1212.57 L1549.57 1212.57 L1548.98 1212.57 L1548.4 1212.57 L1547.81 1212.57 L1547.22 1212.57 L1546.64 1212.57 L1546.05 1212.57 L1545.46 1212.57 L1544.88 1212.57 L1544.29 1212.57 L1543.7 1212.57 L1543.12 1212.57 L1542.53 1212.57 L1541.94 1212.57 L1541.36 1212.57 L1540.77 1212.57 L1540.19 1212.57 L1539.6 1212.57 L1539.01 1212.57 L1538.43 1212.57 L1537.84 1212.57 L1537.25 1212.57 L1536.67 1212.57 L1536.08 1212.57 L1535.49 1212.57 L1534.91 1212.57 L1534.32 1212.57 L1533.73 1212.57 L1533.15 1212.57 L1532.56 1212.57 L1531.98 1212.57 L1531.39 1212.57 L1530.8 1212.57 L1530.22 1212.57 L1529.63 1212.57 L1529.04 1212.57 L1528.46 1212.57 L1527.87 1212.57 L1527.28 1212.57 L1526.7 1212.57 L1526.11 1212.57 L1525.52 1212.57 L1524.94 1212.57 L1524.35 1212.57 L1523.77 1212.57 L1523.18 1212.57 L1522.59 1212.57 L1522.01 1212.57 L1521.42 1212.57 L1520.83 1212.57 L1520.25 1212.57 L1519.66 1212.57 L1519.07 1212.57 L1518.49 1212.57 L1517.9 1212.57 L1517.32 1212.57 L1516.73 1212.57 L1516.14 1212.57 L1515.56 1212.57 L1514.97 1212.57 L1514.38 1212.57 L1513.8 1212.57 L1513.21 1212.57 L1512.62 1212.57 L1512.04 1212.57 L1511.45 1212.57 L1510.86 1212.57 L1510.28 1212.57 L1509.69 1212.57 L1509.11 1212.57 L1508.52 1212.57 L1507.93 1212.57 L1507.35 1212.57 L1506.76 1212.57 L1506.17 1212.57 L1505.59 1212.57 L1505 1212.57 L1504.41 1212.57 L1503.83 1212.57 L1503.24 1212.57 L1502.65 1212.57 L1502.07 1212.57 L1501.48 1212.57 L1500.9 1212.57 L1500.31 1212.57 L1499.72 1212.57 L1499.14 1212.57 L1498.55 1212.57 L1497.96 1212.57 L1497.38 1212.57 L1496.79 1212.57 L1496.2 1212.57 L1495.62 1212.57 L1495.03 1212.57 L1494.45 1212.57 L1493.86 1212.57 L1493.27 1212.57 L1492.69 1212.57 L1492.1 1212.57 L1491.51 1212.57 L1490.93 1212.57 L1490.34 1212.57 L1489.75 1212.57 L1489.17 1212.57 L1488.58 1212.57 L1487.99 1212.57 L1487.41 1212.57 L1486.82 1212.57 L1486.24 1212.57 L1485.65 1212.57 L1485.06 1212.57 L1484.48 1212.57 L1483.89 1212.57 L1483.3 1212.57 L1482.72 1212.57 L1482.13 1212.57 L1481.54 1212.57 L1480.96 1212.57 L1480.37 1212.57 L1479.78 1212.57 L1479.2 1212.57 L1478.61 1212.57 L1478.03 1212.57 L1477.44 1212.57 L1476.85 1212.57 L1476.27 1212.57 L1475.68 1212.57 L1475.09 1212.57 L1474.51 1212.57 L1473.92 1212.57 L1473.33 1212.57 L1472.75 1212.57 L1472.16 1212.57 L1471.57 1212.57 L1470.99 1212.57 L1470.4 1212.57 L1469.82 1212.57 L1469.23 1212.57 L1468.64 1212.57 L1468.06 1212.57 L1467.47 1212.57 L1466.88 1212.57 L1466.3 1212.57 L1465.71 1212.57 L1465.12 1212.57 L1464.54 1212.57 L1463.95 1212.57 L1463.37 1212.57 L1462.78 1212.57 L1462.19 1212.57 L1461.61 1212.57 L1461.02 1212.57 L1460.43 1212.57 L1459.85 1212.57 L1459.26 1212.57 L1458.67 1212.57 L1458.09 1212.57 L1457.5 1212.57 L1456.91 1212.57 L1456.33 1212.57 L1455.74 1212.57 L1455.16 1212.57 L1454.57 1212.57 L1453.98 1212.57 L1453.4 1212.57 L1452.81 1212.57 L1452.22 1212.57 L1451.64 1212.57 L1451.05 1212.57 L1450.46 1212.57 L1449.88 1212.57 L1449.29 1212.57 L1448.7 1212.57 L1448.12 1212.57 L1447.53 1212.57 L1446.95 1212.57 L1446.36 1212.57 L1445.77 1212.57 L1445.19 1212.57 L1444.6 1212.57 L1444.01 1212.57 L1443.43 1212.57 L1442.84 1212.57 L1442.25 1212.57 L1441.67 1212.57 L1441.08 1212.57 L1440.5 1212.57 L1439.91 1212.57 L1439.32 1212.57 L1438.74 1212.57 L1438.15 1212.57 L1437.56 1212.57 L1436.98 1212.57 L1436.39 1212.57 L1435.8 1212.57 L1435.22 1212.57 L1434.63 1212.57 L1434.04 1212.57 L1433.46 1212.57 L1432.87 1212.57 L1432.29 1212.57 L1431.7 1212.57 L1431.11 1212.57 L1430.53 1212.57 L1429.94 1212.57 L1429.35 1212.57 L1428.77 1212.57 L1428.18 1212.57 L1427.59 1212.57 L1427.01 1212.57 L1426.42 1212.57 L1425.83 1212.57 L1425.25 1212.57 L1424.66 1212.57 L1424.08 1212.57 L1423.49 1212.57 L1422.9 1212.57 L1422.32 1212.57 L1421.73 1212.57 L1421.14 1212.57 L1420.56 1212.57 L1419.97 1212.57 L1419.38 1212.57 L1418.8 1212.57 L1418.21 1212.57 L1417.63 1212.57 L1417.04 1212.57 L1416.45 1212.57 L1415.87 1212.57 L1415.28 1212.57 L1414.69 1212.57 L1414.11 1212.57 L1413.52 1212.57 L1412.93 1212.57 L1412.35 1212.57 L1411.76 1212.57 L1411.17 1212.57 L1410.59 1212.57 L1410 1212.57 L1409.42 1212.57 L1408.83 1212.57 L1408.24 1212.57 L1407.66 1212.57 L1407.07 1212.57 L1406.48 1212.57 L1405.9 1212.57 L1405.31 1212.57 L1404.72 1212.57 L1404.14 1212.57 L1403.55 1212.57 L1402.96 1212.57 L1402.38 1212.57 L1401.79 1212.57 L1401.21 1212.57 L1400.62 1212.57 L1400.03 1212.57 L1399.45 1212.57 L1398.86 1212.57 L1398.27 1212.57 L1397.69 1212.57 L1397.1 1212.57 L1396.51 1212.57 L1395.93 1212.57 L1395.34 1212.57 L1394.75 1212.57 L1394.17 1212.57 L1393.58 1212.57 L1393 1212.57 L1392.41 1212.57 L1391.82 1212.57 L1391.24 1212.57 L1390.65 1212.57 L1390.06 1212.57 L1389.48 1212.57 L1388.89 1212.57 L1388.3 1212.57 L1387.72 1212.57 L1387.13 1212.57 L1386.55 1212.57 L1385.96 1212.57 L1385.37 1212.57 L1384.79 1212.57 L1384.2 1212.57 L1383.61 1212.57 L1383.03 1212.57 L1382.44 1212.57 L1381.85 1212.57 L1381.27 1212.57 L1380.68 1212.57 L1380.09 1212.57 L1379.51 1212.57 L1378.92 1212.57 L1378.34 1212.57 L1377.75 1212.57 L1377.16 1212.57 L1376.58 1212.57 L1375.99 1212.57 L1375.4 1212.57 L1374.82 1212.57 L1374.23 1212.57 L1373.64 1212.57 L1373.06 1212.57 L1372.47 1212.57 L1371.88 1212.57 L1371.3 1212.57 L1370.71 1212.57 L1370.13 1212.57 L1369.54 1212.57 L1368.95 1212.57 L1368.37 1212.57 L1367.78 1212.57 L1367.19 1212.57 L1366.61 1212.57 L1366.02 1212.57 L1365.43 1212.57 L1364.85 1212.57 L1364.26 1212.57 L1363.68 1212.57 L1363.09 1212.57 L1362.5 1212.57 L1361.92 1212.57 L1361.33 1212.57 L1360.74 1212.57 L1360.16 1212.57 L1359.57 1212.57 L1358.98 1212.57 L1358.4 1212.57 L1357.81 1212.57 L1357.22 1212.57 L1356.64 1212.57 L1356.05 1212.57 L1355.47 1212.57 L1354.88 1212.57 L1354.29 1212.57 L1353.71 1212.57 L1353.12 1212.57 L1352.53 1212.57 L1351.95 1212.57 L1351.36 1212.57 L1350.77 1212.57 L1350.19 1212.57 L1349.6 1212.57 L1349.01 1212.57 L1348.43 1212.57 L1347.84 1212.57 L1347.26 1212.57 L1346.67 1212.57 L1346.08 1212.57 L1345.5 1212.57 L1344.91 1212.57 L1344.32 1212.57 L1343.74 1212.57 L1343.15 1212.57 L1342.56 1212.57 L1341.98 1212.57 L1341.39 1212.57 L1340.8 1212.57 L1340.22 1212.57 L1339.63 1212.57 L1339.05 1212.57 L1338.46 1212.57 L1337.87 1212.57 L1337.29 1212.57 L1336.7 1212.57 L1336.11 1212.57 L1335.53 1212.57 L1334.94 1212.57 L1334.35 1212.57 L1333.77 1212.57 L1333.18 1212.57 L1332.6 1212.57 L1332.01 1212.57 L1331.42 1212.57 L1330.84 1212.57 L1330.25 1212.57 L1329.66 1212.57 L1329.08 1212.57 L1328.49 1212.57 L1327.9 1212.57 L1327.32 1212.57 L1326.73 1212.57 L1326.14 1212.57 L1325.56 1212.57 L1324.97 1212.57 L1324.39 1212.57 L1323.8 1212.57 L1323.21 1212.57 L1322.63 1212.57 L1322.04 1212.57 L1321.45 1212.57 L1320.87 1212.57 L1320.28 1212.57 L1319.69 1212.57 L1319.11 1212.57 L1318.52 1212.57 L1317.93 1212.57 L1317.35 1212.57 L1316.76 1212.57 L1316.18 1212.57 L1315.59 1212.57 L1315 1212.57 L1314.42 1212.57 L1313.83 1212.57 L1313.24 1212.57 L1312.66 1212.57 L1312.07 1212.57 L1311.48 1212.57 L1310.9 1212.57 L1310.31 1212.57 L1309.73 1212.57 L1309.14 1212.57 L1308.55 1212.57 L1307.97 1212.57 L1307.38 1212.57 L1306.79 1212.57 L1306.21 1212.57 L1305.62 1212.57 L1305.03 1212.57 L1304.45 1212.57 L1303.86 1212.57 L1303.27 1212.57 L1302.69 1212.57 L1302.1 1212.57 L1301.52 1212.57 L1300.93 1212.57 L1300.34 1212.57 L1299.76 1212.57 L1299.17 1212.57 L1298.58 1212.57 L1298 1212.57 L1297.41 1212.57 L1296.82 1212.57 L1296.24 1212.57 L1295.65 1212.57 L1295.06 1212.57 L1294.48 1212.57 L1293.89 1212.57 L1293.31 1212.57 L1292.72 1212.57 L1292.13 1212.57 L1291.55 1212.57 L1290.96 1212.57 L1290.37 1212.57 L1289.79 1212.57 L1289.2 1212.57 L1288.61 1212.57 L1288.03 1212.57 L1287.44 1212.57 L1286.86 1212.57 L1286.27 1212.57 L1285.68 1212.57 L1285.1 1212.57 L1284.51 1212.57 L1283.92 1212.57 L1283.34 1212.57 L1282.75 1212.57 L1282.16 1212.57 L1281.58 1212.57 L1280.99 1212.57 L1280.4 1212.57 L1279.82 1212.57 L1279.23 1212.57 L1278.65 1212.57 L1278.06 1212.57 L1277.47 1212.57 L1276.89 1212.57 L1276.3 1212.57 L1275.71 1212.57 L1275.13 1212.57 L1274.54 1212.57 L1273.95 1212.57 L1273.37 1212.57 L1272.78 1212.57 L1272.19 1212.57 L1271.61 1212.57 L1271.02 1212.57 L1270.44 1212.57 L1269.85 1212.57 L1269.26 1212.57 L1268.68 1212.57 L1268.09 1212.57 L1267.5 1212.57 L1266.92 1212.57 L1266.33 1212.57 L1265.74 1212.57 L1265.16 1212.57 L1264.57 1212.57 L1263.98 1212.57 L1263.4 1212.57 L1262.81 1212.57 L1262.23 1212.57 L1261.64 1212.57 L1261.05 1212.57 L1260.47 1212.57 L1259.88 1212.57 L1259.29 1212.57 L1258.71 1212.57 L1258.12 1212.57 L1257.53 1212.57 L1256.95 1212.57 L1256.36 1212.57 L1255.78 1212.57 L1255.19 1212.57 L1254.6 1212.57 L1254.02 1212.57 L1253.43 1212.57 L1252.84 1212.57 L1252.26 1212.57 L1251.67 1212.57 L1251.08 1212.57 L1250.5 1212.57 L1249.91 1212.57 L1249.32 1212.57 L1248.74 1212.57 L1248.15 1212.57 L1247.57 1212.57 L1246.98 1212.57 L1246.39 1212.57 L1245.81 1212.57 L1245.22 1212.57 L1244.63 1212.57 L1244.05 1212.57 L1243.46 1212.57 L1242.87 1212.57 L1242.29 1212.57 L1241.7 1212.57 L1241.11 1212.57 L1240.53 1212.57 L1239.94 1212.57 L1239.36 1212.57 L1238.77 1212.57 L1238.18 1212.57 L1237.6 1212.57 L1237.01 1212.57 L1236.42 1212.57 L1235.84 1212.57 L1235.25 1212.57 L1234.66 1212.57 L1234.08 1212.57 L1233.49 1212.57 L1232.91 1212.57 L1232.32 1212.57 L1231.73 1212.57 L1231.15 1212.57 L1230.56 1212.57 L1229.97 1212.57 L1229.39 1212.57 L1228.8 1212.57 L1228.21 1212.57 L1227.63 1212.57 L1227.04 1212.57 L1226.45 1212.57 L1225.87 1212.57 L1225.28 1212.57 L1224.7 1212.57 L1224.11 1212.57 L1223.52 1212.57 L1222.94 1212.57 L1222.35 1212.57 L1221.76 1212.57 L1221.18 1212.57 L1220.59 1212.57 L1220 1212.57 L1219.42 1212.57 L1218.83 1212.57 L1218.24 1212.57 L1217.66 1212.57 L1217.07 1212.57 L1216.49 1212.57 L1215.9 1212.57 L1215.31 1212.57 L1214.73 1212.57 L1214.14 1212.57 L1213.55 1212.57 L1212.97 1212.57 L1212.38 1212.57 L1211.79 1212.57 L1211.21 1212.57 L1210.62 1212.57 L1210.03 1212.57 L1209.45 1212.57 L1208.86 1212.57 L1208.28 1212.57 L1207.69 1212.57 L1207.1 1212.57 L1206.52 1212.57 L1205.93 1212.57 L1205.34 1212.57 L1204.76 1212.57 L1204.17 1212.57 L1203.58 1212.57 L1203 1212.57 L1202.41 1212.57 L1201.83 1212.57 L1201.24 1212.57 L1200.65 1212.57 L1200.07 1212.57 L1199.48 1212.57 L1198.89 1212.57 L1198.31 1212.57 L1197.72 1212.57 L1197.13 1212.57 L1196.55 1212.57 L1195.96 1212.57 L1195.37 1212.57 L1194.79 1212.57 L1194.2 1212.57 L1193.62 1212.57 L1193.03 1212.57 L1192.44 1212.57 L1191.86 1212.57 L1191.27 1212.57 L1190.68 1212.57 L1190.1 1212.57 L1189.51 1212.57 L1188.92 1212.57 L1188.34 1212.57 L1187.75 1212.57 L1187.16 1212.57 L1186.58 1212.57 L1185.99 1212.57 L1185.41 1212.57 L1184.82 1212.57 L1184.23 1212.57 L1183.65 1212.57 L1183.06 1212.57 L1182.47 1212.57 L1181.89 1212.57 L1181.3 1212.57 L1180.71 1212.57 L1180.13 1212.57 L1179.54 1212.57 L1178.96 1212.57 L1178.37 1212.57 L1177.78 1212.57 L1177.2 1212.57 L1176.61 1212.57 L1176.02 1212.57 L1175.44 1212.57 L1174.85 1212.57 L1174.26 1212.57 L1173.68 1212.57 L1173.09 1212.57 L1172.5 1212.57 L1171.92 1212.57 L1171.33 1212.57 L1170.75 1212.57 L1170.16 1212.57 L1169.57 1212.57 L1168.99 1212.57 L1168.4 1212.57 L1167.81 1212.57 L1167.23 1212.57 L1166.64 1212.57 L1166.05 1212.57 L1165.47 1212.57 L1164.88 1212.57 L1164.29 1212.57 L1163.71 1212.57 L1163.12 1212.57 L1162.54 1212.57 L1161.95 1212.57 L1161.36 1212.57 L1160.78 1212.57 L1160.19 1212.57 L1159.6 1212.57 L1159.02 1212.57 L1158.43 1212.57 L1157.84 1212.57 L1157.26 1212.57 L1156.67 1212.57 L1156.09 1212.57 L1155.5 1212.57 L1154.91 1212.57 L1154.33 1212.57 L1153.74 1212.57 L1153.15 1212.57 L1152.57 1212.57 L1151.98 1212.57 L1151.39 1212.57 L1150.81 1212.57 L1150.22 1212.57 L1149.63 1212.57 L1149.05 1212.57 L1148.46 1212.57 L1147.88 1212.57 L1147.29 1212.57 L1146.7 1212.57 L1146.12 1212.57 L1145.53 1212.57 L1144.94 1212.57 L1144.36 1212.57 L1143.77 1212.57 L1143.18 1212.57 L1142.6 1212.57 L1142.01 1212.57 L1141.42 1212.57 L1140.84 1212.57 L1140.25 1212.57 L1139.67 1212.57 L1139.08 1212.57 L1138.49 1212.57 L1137.91 1212.57 L1137.32 1212.57 L1136.73 1212.57 L1136.15 1212.57 L1135.56 1212.57 L1134.97 1212.57 L1134.39 1212.57 L1133.8 1212.57 L1133.21 1212.57 L1132.63 1212.57 L1132.04 1212.57 L1131.46 1212.57 L1130.87 1212.57 L1130.28 1212.57 L1129.7 1212.57 L1129.11 1212.57 L1128.52 1212.57 L1127.94 1212.57 L1127.35 1212.57 L1126.76 1212.57 L1126.18 1212.57 L1125.59 1212.57 L1125.01 1212.57 L1124.42 1212.57 L1123.83 1212.57 L1123.25 1212.57 L1122.66 1212.57 L1122.07 1212.57 L1121.49 1212.57 L1120.9 1212.57 L1120.31 1212.57 L1119.73 1212.57 L1119.14 1212.57 L1118.55 1212.57 L1117.97 1212.57 L1117.38 1212.57 L1116.8 1212.57 L1116.21 1212.57 L1115.62 1212.57 L1115.04 1212.57 L1114.45 1212.57 L1113.86 1212.57 L1113.28 1212.57 L1112.69 1212.57 L1112.1 1212.57 L1111.52 1212.57 L1110.93 1212.57 L1110.34 1212.57 L1109.76 1212.57 L1109.17 1212.57 L1108.59 1212.57 L1108 1212.57 L1107.41 1212.57 L1106.83 1212.57 L1106.24 1212.57 L1105.65 1212.57 L1105.07 1212.57 L1104.48 1212.57 L1103.89 1212.57 L1103.31 1212.57 L1102.72 1212.57 L1102.14 1212.57 L1101.55 1212.57 L1100.96 1212.57 L1100.38 1212.57 L1099.79 1212.57 L1099.2 1212.57 L1098.62 1212.57 L1098.03 1212.57 L1097.44 1212.57 L1096.86 1212.57 L1096.27 1212.57 L1095.68 1212.57 L1095.1 1212.57 L1094.51 1212.57 L1093.93 1212.57 L1093.34 1212.57 L1092.75 1212.57 L1092.17 1212.57 L1091.58 1212.57 L1090.99 1212.57 L1090.41 1212.57 L1089.82 1212.57 L1089.23 1212.57 L1088.65 1212.57 L1088.06 1212.57 L1087.47 1212.57 L1086.89 1212.57 L1086.3 1212.57 L1085.72 1212.57 L1085.13 1212.57 L1084.54 1212.57 L1083.96 1212.57 L1083.37 1212.57 L1082.78 1212.57 L1082.2 1212.57 L1081.61 1212.57 L1081.02 1212.57 L1080.44 1212.57 L1079.85 1212.57 L1079.26 1212.57 L1078.68 1212.57 L1078.09 1212.57 L1077.51 1212.57 L1076.92 1212.57 L1076.33 1212.57 L1075.75 1212.57 L1075.16 1212.57 L1074.57 1212.57 L1073.99 1212.57 L1073.4 1212.57 L1072.81 1212.57 L1072.23 1212.57 L1071.64 1212.57 L1071.06 1212.57 L1070.47 1212.57 L1069.88 1212.57 L1069.3 1212.57 L1068.71 1212.57 L1068.12 1212.57 L1067.54 1212.57 L1066.95 1212.57 L1066.36 1212.57 L1065.78 1212.57 L1065.19 1212.57 L1064.6 1212.57 L1064.02 1212.57 L1063.43 1212.57 L1062.85 1212.57 L1062.26 1212.57 L1061.67 1212.57 L1061.09 1212.57 L1060.5 1212.57 L1059.91 1212.57 L1059.33 1212.57 L1058.74 1212.57 L1058.15 1212.57 L1057.57 1212.57 L1056.98 1212.57 L1056.39 1212.57 L1055.81 1212.57 L1055.22 1212.57 L1054.64 1212.57 L1054.05 1212.57 L1053.46 1212.57 L1052.88 1212.57 L1052.29 1212.57 L1051.7 1212.57 L1051.12 1212.57 L1050.53 1212.57 L1049.94 1212.57 L1049.36 1212.57 L1048.77 1212.57 L1048.19 1212.57 L1047.6 1212.57 L1047.01 1212.57 L1046.43 1212.57 L1045.84 1212.57 L1045.25 1212.57 L1044.67 1212.57 L1044.08 1212.57 L1043.49 1212.57 L1042.91 1212.57 L1042.32 1212.57 L1041.73 1212.57 L1041.15 1212.57 L1040.56 1212.57 L1039.98 1212.57 L1039.39 1212.57 L1038.8 1212.57 L1038.22 1212.57 L1037.63 1212.57 L1037.04 1212.57 L1036.46 1212.57 L1035.87 1212.57 L1035.28 1212.57 L1034.7 1212.57 L1034.11 1212.57 L1033.52 1212.57 L1032.94 1212.57 L1032.35 1212.57 L1031.77 1212.57 L1031.18 1212.57 L1030.59 1212.57 L1030.01 1212.57 L1029.42 1212.57 L1028.83 1212.57 L1028.25 1212.57 L1027.66 1212.57 L1027.07 1212.57 L1026.49 1212.57 L1025.9 1212.57 L1025.32 1212.57 L1024.73 1212.57 L1024.14 1212.57 L1023.56 1212.57 L1022.97 1212.57 L1022.38 1212.57 L1021.8 1212.57 L1021.21 1212.57 L1020.62 1212.57 L1020.04 1212.57 L1019.45 1212.57 L1018.86 1212.57 L1018.28 1212.57 L1017.69 1212.57 L1017.11 1212.57 L1016.52 1212.57 L1015.93 1212.57 L1015.35 1212.57 L1014.76 1212.57 L1014.17 1212.57 L1013.59 1212.57 L1013 1212.57 L1012.41 1212.57 L1011.83 1212.57 L1011.24 1212.57 L1010.65 1212.57 L1010.07 1212.57 L1009.48 1212.57 L1008.9 1212.57 L1008.31 1212.57 L1007.72 1212.57 L1007.14 1212.57 L1006.55 1212.57 L1005.96 1212.57 L1005.38 1212.57 L1004.79 1212.57 L1004.2 1212.57 L1003.62 1212.57 L1003.03 1212.57 L1002.44 1212.57 L1001.86 1212.57 L1001.27 1212.57 L1000.69 1212.57 L1000.1 1212.57 L999.513 1212.57 L998.926 1212.57 L998.34 1212.57 L997.754 1212.57 L997.167 1212.57 L996.581 1212.57 L995.994 1212.57 L995.408 1212.57 L994.822 1212.57 L994.235 1212.57 L993.649 1212.57 L993.062 1212.57 L992.476 1212.57 L991.889 1212.57 L991.303 1212.57 L990.717 1212.57 L990.13 1212.57 L989.544 1212.57 L988.957 1212.57 L988.371 1212.57 L987.785 1212.57 L987.198 1212.57 L986.612 1212.57 L986.025 1212.57  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.92 986.612,1212.92 987.198,1212.92 987.785,1212.92 988.371,1212.92 988.957,1212.92 989.544,1212.92 990.13,1212.92 990.717,1212.92 991.303,1212.92 991.889,1212.92 992.476,1212.92 993.062,1212.92 993.649,1212.92 994.235,1212.92 994.822,1212.92 995.408,1212.92 995.994,1212.92 996.581,1212.92 997.167,1212.92 997.754,1212.92 998.34,1212.92 998.926,1212.92 999.513,1212.92 1000.1,1212.92 1000.69,1212.92 1001.27,1212.92 1001.86,1212.92 1002.44,1212.92 1003.03,1212.92 1003.62,1212.92 1004.2,1212.92 1004.79,1212.92 1005.38,1212.92 1005.96,1212.92 1006.55,1212.92 1007.14,1212.92 1007.72,1212.92 1008.31,1212.92 1008.9,1212.92 1009.48,1212.92 1010.07,1212.92 1010.65,1212.92 1011.24,1212.92 1011.83,1212.92 1012.41,1212.92 1013,1212.92 1013.59,1212.92 1014.17,1212.92 1014.76,1212.92 1015.35,1212.92 1015.93,1212.92 1016.52,1212.92 1017.11,1212.92 1017.69,1212.92 1018.28,1212.92 1018.86,1212.92 1019.45,1212.92 1020.04,1212.92 1020.62,1212.92 1021.21,1212.92 1021.8,1212.92 1022.38,1212.92 1022.97,1212.92 1023.56,1212.92 1024.14,1212.92 1024.73,1212.92 1025.32,1212.92 1025.9,1212.92 1026.49,1212.92 1027.07,1212.92 1027.66,1212.92 1028.25,1212.92 1028.83,1212.92 1029.42,1212.92 1030.01,1212.92 1030.59,1212.92 1031.18,1212.92 1031.77,1212.92 1032.35,1212.92 1032.94,1212.92 1033.52,1212.92 1034.11,1212.92 1034.7,1212.92 1035.28,1212.92 1035.87,1212.92 1036.46,1212.92 1037.04,1212.92 1037.63,1212.92 1038.22,1212.92 1038.8,1212.92 1039.39,1212.92 1039.98,1212.92 1040.56,1212.92 1041.15,1212.92 1041.73,1212.92 1042.32,1212.92 1042.91,1212.92 1043.49,1212.92 1044.08,1212.92 1044.67,1212.92 1045.25,1212.92 1045.84,1212.92 1046.43,1212.92 1047.01,1212.92 1047.6,1212.92 1048.19,1212.92 1048.77,1212.92 1049.36,1212.92 1049.94,1212.92 1050.53,1212.92 1051.12,1212.92 1051.7,1212.92 1052.29,1212.92 1052.88,1212.92 1053.46,1212.92 1054.05,1212.92 1054.64,1212.92 1055.22,1212.92 1055.81,1212.92 1056.39,1212.92 1056.98,1212.92 1057.57,1212.92 1058.15,1212.92 1058.74,1212.92 1059.33,1212.92 1059.91,1212.92 1060.5,1212.92 1061.09,1212.92 1061.67,1212.92 1062.26,1212.92 1062.85,1212.92 1063.43,1212.92 1064.02,1212.92 1064.6,1212.92 1065.19,1212.92 1065.78,1212.92 1066.36,1212.92 1066.95,1212.92 1067.54,1212.92 1068.12,1212.92 1068.71,1212.92 1069.3,1212.92 1069.88,1212.92 1070.47,1212.92 1071.06,1212.92 1071.64,1212.92 1072.23,1212.92 1072.81,1212.92 1073.4,1212.92 1073.99,1212.92 1074.57,1212.92 1075.16,1212.92 1075.75,1212.92 1076.33,1212.92 1076.92,1212.92 1077.51,1212.92 1078.09,1212.92 1078.68,1212.92 1079.26,1212.92 1079.85,1212.92 1080.44,1212.92 1081.02,1212.92 1081.61,1212.92 1082.2,1212.92 1082.78,1212.92 1083.37,1212.92 1083.96,1212.92 1084.54,1212.92 1085.13,1212.92 1085.72,1212.92 1086.3,1212.92 1086.89,1212.92 1087.47,1212.92 1088.06,1212.92 1088.65,1212.92 1089.23,1212.92 1089.82,1212.92 1090.41,1212.92 1090.99,1212.92 1091.58,1212.92 1092.17,1212.92 1092.75,1212.92 1093.34,1212.92 1093.93,1212.92 1094.51,1212.92 1095.1,1212.92 1095.68,1212.92 1096.27,1212.92 1096.86,1212.92 1097.44,1212.92 1098.03,1212.92 1098.62,1212.92 1099.2,1212.92 1099.79,1212.92 1100.38,1212.92 1100.96,1212.92 1101.55,1212.92 1102.14,1212.92 1102.72,1212.92 1103.31,1212.92 1103.89,1212.92 1104.48,1212.92 1105.07,1212.92 1105.65,1212.92 1106.24,1212.92 1106.83,1212.92 1107.41,1212.92 1108,1212.92 1108.59,1212.92 1109.17,1212.92 1109.76,1212.92 1110.34,1212.92 1110.93,1212.92 1111.52,1212.92 1112.1,1212.92 1112.69,1212.92 1113.28,1212.92 1113.86,1212.92 1114.45,1212.92 1115.04,1212.92 1115.62,1212.92 1116.21,1212.92 1116.8,1212.92 1117.38,1212.92 1117.97,1212.92 1118.55,1212.92 1119.14,1212.92 1119.73,1212.92 1120.31,1212.92 1120.9,1212.92 1121.49,1212.92 1122.07,1212.92 1122.66,1212.92 1123.25,1212.92 1123.83,1212.92 1124.42,1212.92 1125.01,1212.92 1125.59,1212.92 1126.18,1212.92 1126.76,1212.92 1127.35,1212.92 1127.94,1212.92 1128.52,1212.92 1129.11,1212.92 1129.7,1212.92 1130.28,1212.92 1130.87,1212.92 1131.46,1212.92 1132.04,1212.92 1132.63,1212.92 1133.21,1212.92 1133.8,1212.92 1134.39,1212.92 1134.97,1212.92 1135.56,1212.92 1136.15,1212.92 1136.73,1212.92 1137.32,1212.92 1137.91,1212.92 1138.49,1212.92 1139.08,1212.92 1139.67,1212.92 1140.25,1212.92 1140.84,1212.92 1141.42,1212.92 1142.01,1212.92 1142.6,1212.92 1143.18,1212.92 1143.77,1212.92 1144.36,1212.92 1144.94,1212.92 1145.53,1212.92 1146.12,1212.92 1146.7,1212.92 1147.29,1212.92 1147.88,1212.92 1148.46,1212.92 1149.05,1212.92 1149.63,1212.92 1150.22,1212.92 1150.81,1212.92 1151.39,1212.92 1151.98,1212.92 1152.57,1212.92 1153.15,1212.92 1153.74,1212.92 1154.33,1212.92 1154.91,1212.92 1155.5,1212.92 1156.09,1212.92 1156.67,1212.92 1157.26,1212.92 1157.84,1212.92 1158.43,1212.92 1159.02,1212.92 1159.6,1212.92 1160.19,1212.92 1160.78,1212.92 1161.36,1212.92 1161.95,1212.92 1162.54,1212.92 1163.12,1212.92 1163.71,1212.92 1164.29,1212.92 1164.88,1212.92 1165.47,1212.92 1166.05,1212.92 1166.64,1212.92 1167.23,1212.92 1167.81,1212.92 1168.4,1212.92 1168.99,1212.92 1169.57,1212.92 1170.16,1212.92 1170.75,1212.92 1171.33,1212.92 1171.92,1212.92 1172.5,1212.92 1173.09,1212.92 1173.68,1212.92 1174.26,1212.92 1174.85,1212.92 1175.44,1212.92 1176.02,1212.92 1176.61,1212.92 1177.2,1212.92 1177.78,1212.92 1178.37,1212.92 1178.96,1212.92 1179.54,1212.92 1180.13,1212.92 1180.71,1212.92 1181.3,1212.92 1181.89,1212.92 1182.47,1212.92 1183.06,1212.92 1183.65,1212.92 1184.23,1212.92 1184.82,1212.92 1185.41,1212.92 1185.99,1212.92 1186.58,1212.92 1187.16,1212.92 1187.75,1212.92 1188.34,1212.92 1188.92,1212.92 1189.51,1212.92 1190.1,1212.92 1190.68,1212.92 1191.27,1212.92 1191.86,1212.92 1192.44,1212.92 1193.03,1212.92 1193.62,1212.92 1194.2,1212.92 1194.79,1212.92 1195.37,1212.92 1195.96,1212.92 1196.55,1212.92 1197.13,1212.92 1197.72,1212.92 1198.31,1212.92 1198.89,1212.92 1199.48,1212.92 1200.07,1212.92 1200.65,1212.92 1201.24,1212.92 1201.83,1212.92 1202.41,1212.92 1203,1212.92 1203.58,1212.92 1204.17,1212.92 1204.76,1212.92 1205.34,1212.92 1205.93,1212.92 1206.52,1212.92 1207.1,1212.92 1207.69,1212.92 1208.28,1212.92 1208.86,1212.92 1209.45,1212.92 1210.03,1212.92 1210.62,1212.92 1211.21,1212.92 1211.79,1212.92 1212.38,1212.92 1212.97,1212.92 1213.55,1212.92 1214.14,1212.92 1214.73,1212.92 1215.31,1212.92 1215.9,1212.92 1216.49,1212.92 1217.07,1212.92 1217.66,1212.92 1218.24,1212.92 1218.83,1212.92 1219.42,1212.92 1220,1212.92 1220.59,1212.92 1221.18,1212.92 1221.76,1212.92 1222.35,1212.92 1222.94,1212.92 1223.52,1212.92 1224.11,1212.92 1224.7,1212.92 1225.28,1212.92 1225.87,1212.92 1226.45,1212.92 1227.04,1212.92 1227.63,1212.92 1228.21,1212.92 1228.8,1212.92 1229.39,1212.92 1229.97,1212.92 1230.56,1212.92 1231.15,1212.92 1231.73,1212.92 1232.32,1212.92 1232.91,1212.92 1233.49,1212.92 1234.08,1212.92 1234.66,1212.92 1235.25,1212.92 1235.84,1212.92 1236.42,1212.92 1237.01,1212.92 1237.6,1212.92 1238.18,1212.92 1238.77,1212.92 1239.36,1212.92 1239.94,1212.92 1240.53,1212.92 1241.11,1212.92 1241.7,1212.92 1242.29,1212.92 1242.87,1212.92 1243.46,1212.92 1244.05,1212.92 1244.63,1212.92 1245.22,1212.92 1245.81,1212.92 1246.39,1212.92 1246.98,1212.92 1247.57,1212.92 1248.15,1212.92 1248.74,1212.92 1249.32,1212.92 1249.91,1212.92 1250.5,1212.92 1251.08,1212.92 1251.67,1212.92 1252.26,1212.92 1252.84,1212.92 1253.43,1212.92 1254.02,1212.92 1254.6,1212.92 1255.19,1212.92 1255.78,1212.92 1256.36,1212.92 1256.95,1212.92 1257.53,1212.92 1258.12,1212.92 1258.71,1212.92 1259.29,1212.92 1259.88,1212.92 1260.47,1212.92 1261.05,1212.92 1261.64,1212.92 1262.23,1212.92 1262.81,1212.92 1263.4,1212.92 1263.98,1212.92 1264.57,1212.92 1265.16,1212.92 1265.74,1212.92 1266.33,1212.92 1266.92,1212.92 1267.5,1212.92 1268.09,1212.92 1268.68,1212.92 1269.26,1212.92 1269.85,1212.92 1270.44,1212.92 1271.02,1212.92 1271.61,1212.92 1272.19,1212.92 1272.78,1212.92 1273.37,1212.92 1273.95,1212.92 1274.54,1212.92 1275.13,1212.92 1275.71,1212.92 1276.3,1212.92 1276.89,1212.92 1277.47,1212.92 1278.06,1212.92 1278.65,1212.92 1279.23,1212.92 1279.82,1212.92 1280.4,1212.92 1280.99,1212.92 1281.58,1212.92 1282.16,1212.92 1282.75,1212.92 1283.34,1212.92 1283.92,1212.92 1284.51,1212.92 1285.1,1212.92 1285.68,1212.92 1286.27,1212.92 1286.86,1212.92 1287.44,1212.92 1288.03,1212.92 1288.61,1212.92 1289.2,1212.92 1289.79,1212.92 1290.37,1212.92 1290.96,1212.92 1291.55,1212.92 1292.13,1212.92 1292.72,1212.92 1293.31,1212.92 1293.89,1212.92 1294.48,1212.92 1295.06,1212.92 1295.65,1212.92 1296.24,1212.92 1296.82,1212.92 1297.41,1212.92 1298,1212.92 1298.58,1212.92 1299.17,1212.92 1299.76,1212.92 1300.34,1212.92 1300.93,1212.92 1301.52,1212.92 1302.1,1212.92 1302.69,1212.92 1303.27,1212.92 1303.86,1212.92 1304.45,1212.92 1305.03,1212.92 1305.62,1212.92 1306.21,1212.92 1306.79,1212.92 1307.38,1212.92 1307.97,1212.92 1308.55,1212.92 1309.14,1212.92 1309.73,1212.92 1310.31,1212.92 1310.9,1212.92 1311.48,1212.92 1312.07,1212.92 1312.66,1212.92 1313.24,1212.92 1313.83,1212.92 1314.42,1212.92 1315,1212.92 1315.59,1212.92 1316.18,1212.92 1316.76,1212.92 1317.35,1212.92 1317.93,1212.92 1318.52,1212.92 1319.11,1212.92 1319.69,1212.92 1320.28,1212.92 1320.87,1212.92 1321.45,1212.92 1322.04,1212.92 1322.63,1212.92 1323.21,1212.92 1323.8,1212.92 1324.39,1212.92 1324.97,1212.92 1325.56,1212.92 1326.14,1212.92 1326.73,1212.92 1327.32,1212.92 1327.9,1212.92 1328.49,1212.92 1329.08,1212.92 1329.66,1212.92 1330.25,1212.92 1330.84,1212.92 1331.42,1212.92 1332.01,1212.92 1332.6,1212.92 1333.18,1212.92 1333.77,1212.92 1334.35,1212.92 1334.94,1212.92 1335.53,1212.92 1336.11,1212.92 1336.7,1212.92 1337.29,1212.92 1337.87,1212.92 1338.46,1212.92 1339.05,1212.92 1339.63,1212.92 1340.22,1212.92 1340.8,1212.92 1341.39,1212.92 1341.98,1212.92 1342.56,1212.92 1343.15,1212.92 1343.74,1212.92 1344.32,1212.92 1344.91,1212.92 1345.5,1212.92 1346.08,1212.92 1346.67,1212.92 1347.26,1212.92 1347.84,1212.92 1348.43,1212.92 1349.01,1212.92 1349.6,1212.92 1350.19,1212.92 1350.77,1212.92 1351.36,1212.92 1351.95,1212.92 1352.53,1212.92 1353.12,1212.92 1353.71,1212.92 1354.29,1212.92 1354.88,1212.92 1355.47,1212.92 1356.05,1212.92 1356.64,1212.92 1357.22,1212.92 1357.81,1212.92 1358.4,1212.92 1358.98,1212.92 1359.57,1212.92 1360.16,1212.92 1360.74,1212.92 1361.33,1212.92 1361.92,1212.92 1362.5,1212.92 1363.09,1212.92 1363.68,1212.92 1364.26,1212.92 1364.85,1212.92 1365.43,1212.92 1366.02,1212.92 1366.61,1212.92 1367.19,1212.92 1367.78,1212.92 1368.37,1212.92 1368.95,1212.92 1369.54,1212.92 1370.13,1212.92 1370.71,1212.92 1371.3,1212.92 1371.88,1212.92 1372.47,1212.92 1373.06,1212.92 1373.64,1212.92 1374.23,1212.92 1374.82,1212.92 1375.4,1212.92 1375.99,1212.92 1376.58,1212.92 1377.16,1212.92 1377.75,1212.92 1378.34,1212.92 1378.92,1212.92 1379.51,1212.92 1380.09,1212.92 1380.68,1212.92 1381.27,1212.92 1381.85,1212.92 1382.44,1212.92 1383.03,1212.92 1383.61,1212.92 1384.2,1212.92 1384.79,1212.92 1385.37,1212.92 1385.96,1212.92 1386.55,1212.92 1387.13,1212.92 1387.72,1212.92 1388.3,1212.92 1388.89,1212.92 1389.48,1212.92 1390.06,1212.92 1390.65,1212.92 1391.24,1212.92 1391.82,1212.92 1392.41,1212.92 1393,1212.92 1393.58,1212.92 1394.17,1212.92 1394.75,1212.92 1395.34,1212.92 1395.93,1212.92 1396.51,1212.92 1397.1,1212.92 1397.69,1212.92 1398.27,1212.92 1398.86,1212.92 1399.45,1212.92 1400.03,1212.92 1400.62,1212.92 1401.21,1212.92 1401.79,1212.92 1402.38,1212.92 1402.96,1212.92 1403.55,1212.92 1404.14,1212.92 1404.72,1212.92 1405.31,1212.92 1405.9,1212.92 1406.48,1212.92 1407.07,1212.92 1407.66,1212.92 1408.24,1212.92 1408.83,1212.92 1409.42,1212.92 1410,1212.92 1410.59,1212.92 1411.17,1212.92 1411.76,1212.92 1412.35,1212.92 1412.93,1212.92 1413.52,1212.92 1414.11,1212.92 1414.69,1212.92 1415.28,1212.92 1415.87,1212.92 1416.45,1212.92 1417.04,1212.92 1417.63,1212.92 1418.21,1212.92 1418.8,1212.92 1419.38,1212.92 1419.97,1212.92 1420.56,1212.92 1421.14,1212.92 1421.73,1212.92 1422.32,1212.92 1422.9,1212.92 1423.49,1212.92 1424.08,1212.92 1424.66,1212.92 1425.25,1212.92 1425.83,1212.92 1426.42,1212.92 1427.01,1212.92 1427.59,1212.92 1428.18,1212.92 1428.77,1212.92 1429.35,1212.92 1429.94,1212.92 1430.53,1212.92 1431.11,1212.92 1431.7,1212.92 1432.29,1212.92 1432.87,1212.92 1433.46,1212.92 1434.04,1212.92 1434.63,1212.92 1435.22,1212.92 1435.8,1212.92 1436.39,1212.92 1436.98,1212.92 1437.56,1212.92 1438.15,1212.92 1438.74,1212.92 1439.32,1212.92 1439.91,1212.92 1440.5,1212.92 1441.08,1212.92 1441.67,1212.92 1442.25,1212.92 1442.84,1212.92 1443.43,1212.92 1444.01,1212.92 1444.6,1212.92 1445.19,1212.92 1445.77,1212.92 1446.36,1212.92 1446.95,1212.92 1447.53,1212.92 1448.12,1212.92 1448.7,1212.92 1449.29,1212.92 1449.88,1212.92 1450.46,1212.92 1451.05,1212.92 1451.64,1212.92 1452.22,1212.92 1452.81,1212.92 1453.4,1212.92 1453.98,1212.92 1454.57,1212.92 1455.16,1212.92 1455.74,1212.92 1456.33,1212.92 1456.91,1212.92 1457.5,1212.92 1458.09,1212.92 1458.67,1212.92 1459.26,1212.92 1459.85,1212.92 1460.43,1212.92 1461.02,1212.92 1461.61,1212.92 1462.19,1212.92 1462.78,1212.92 1463.37,1212.92 1463.95,1212.92 1464.54,1212.92 1465.12,1212.92 1465.71,1212.92 1466.3,1212.92 1466.88,1212.92 1467.47,1212.92 1468.06,1212.92 1468.64,1212.92 1469.23,1212.92 1469.82,1212.92 1470.4,1212.92 1470.99,1212.92 1471.57,1212.92 1472.16,1212.92 1472.75,1212.92 1473.33,1212.92 1473.92,1212.92 1474.51,1212.92 1475.09,1212.92 1475.68,1212.92 1476.27,1212.92 1476.85,1212.92 1477.44,1212.92 1478.03,1212.92 1478.61,1212.92 1479.2,1212.92 1479.78,1212.92 1480.37,1212.92 1480.96,1212.92 1481.54,1212.92 1482.13,1212.92 1482.72,1212.92 1483.3,1212.92 1483.89,1212.92 1484.48,1212.92 1485.06,1212.92 1485.65,1212.92 1486.24,1212.92 1486.82,1212.92 1487.41,1212.92 1487.99,1212.92 1488.58,1212.92 1489.17,1212.92 1489.75,1212.92 1490.34,1212.92 1490.93,1212.92 1491.51,1212.92 1492.1,1212.92 1492.69,1212.92 1493.27,1212.92 1493.86,1212.92 1494.45,1212.92 1495.03,1212.92 1495.62,1212.92 1496.2,1212.92 1496.79,1212.92 1497.38,1212.92 1497.96,1212.92 1498.55,1212.92 1499.14,1212.92 1499.72,1212.92 1500.31,1212.92 1500.9,1212.92 1501.48,1212.92 1502.07,1212.92 1502.65,1212.92 1503.24,1212.92 1503.83,1212.92 1504.41,1212.92 1505,1212.92 1505.59,1212.92 1506.17,1212.92 1506.76,1212.92 1507.35,1212.92 1507.93,1212.92 1508.52,1212.92 1509.11,1212.92 1509.69,1212.92 1510.28,1212.92 1510.86,1212.92 1511.45,1212.92 1512.04,1212.92 1512.62,1212.92 1513.21,1212.92 1513.8,1212.92 1514.38,1212.92 1514.97,1212.92 1515.56,1212.92 1516.14,1212.92 1516.73,1212.92 1517.32,1212.92 1517.9,1212.92 1518.49,1212.92 1519.07,1212.92 1519.66,1212.92 1520.25,1212.92 1520.83,1212.92 1521.42,1212.92 1522.01,1212.92 1522.59,1212.92 1523.18,1212.92 1523.77,1212.92 1524.35,1212.92 1524.94,1212.92 1525.52,1212.92 1526.11,1212.92 1526.7,1212.92 1527.28,1212.92 1527.87,1212.92 1528.46,1212.92 1529.04,1212.92 1529.63,1212.92 1530.22,1212.92 1530.8,1212.92 1531.39,1212.92 1531.98,1212.92 1532.56,1212.92 1533.15,1212.92 1533.73,1212.92 1534.32,1212.92 1534.91,1212.92 1535.49,1212.92 1536.08,1212.92 1536.67,1212.92 1537.25,1212.92 1537.84,1212.92 1538.43,1212.92 1539.01,1212.92 1539.6,1212.92 1540.19,1212.92 1540.77,1212.92 1541.36,1212.92 1541.94,1212.92 1542.53,1212.92 1543.12,1212.92 1543.7,1212.92 1544.29,1212.92 1544.88,1212.92 1545.46,1212.92 1546.05,1212.92 1546.64,1212.92 1547.22,1212.92 1547.81,1212.92 1548.4,1212.92 1548.98,1212.92 1549.57,1212.92 1550.15,1212.92 1550.74,1212.92 1551.33,1212.92 1551.91,1212.92 1552.5,1212.92 1553.09,1212.92 1553.67,1212.92 1554.26,1212.92 1554.85,1212.92 1555.43,1212.92 1556.02,1212.92 1556.6,1212.92 1557.19,1212.92 1557.78,1212.92 1558.36,1212.92 1558.95,1212.92 1559.54,1212.92 1560.12,1212.92 1560.71,1212.92 1561.3,1212.92 1561.88,1212.92 1562.47,1212.92 1563.06,1212.92 1563.64,1212.92 1564.23,1212.92 1564.81,1212.92 1565.4,1212.92 1565.99,1212.92 1566.57,1212.92 1567.16,1212.92 1567.75,1212.92 1568.33,1212.92 1568.92,1212.92 1569.51,1212.92 1570.09,1212.92 1570.68,1212.92 1571.27,1212.92 1571.85,1212.92 1572.44,1212.92 1573.02,1212.92 1573.61,1212.92 1574.2,1212.92 1574.78,1212.92 1575.37,1212.92 1575.96,1212.92 1576.54,1212.92 1577.13,1212.92 1577.72,1212.92 1578.3,1212.92 1578.89,1212.92 1579.47,1212.92 1580.06,1212.92 1580.65,1212.92 1581.23,1212.92 1581.82,1212.92 1582.41,1212.92 1582.99,1212.92 1583.58,1212.92 1584.17,1212.92 1584.75,1212.92 1585.34,1212.92 1585.93,1212.92 1586.51,1212.92 1587.1,1212.92 1587.68,1212.92 1588.27,1212.92 1588.86,1212.92 1589.44,1212.92 1590.03,1212.92 1590.62,1212.92 1591.2,1212.92 1591.79,1212.92 1592.38,1212.92 1592.96,1212.92 1593.55,1212.92 1594.14,1212.92 1594.72,1212.92 1595.31,1212.92 1595.89,1212.92 1596.48,1212.92 1597.07,1212.92 1597.65,1212.92 1598.24,1212.92 1598.83,1212.92 1599.41,1212.92 1600,1212.92 1600.59,1212.92 1601.17,1212.92 1601.76,1212.92 1602.34,1212.92 1602.93,1212.92 1603.52,1212.92 1604.1,1212.92 1604.69,1212.92 1605.28,1212.92 1605.86,1212.92 1606.45,1212.92 1607.04,1212.92 1607.62,1212.92 1608.21,1212.92 1608.8,1212.92 1609.38,1212.92 1609.97,1212.92 1610.55,1212.92 1611.14,1212.92 1611.73,1212.92 1612.31,1212.92 1612.9,1212.92 1613.49,1212.92 1614.07,1212.92 1614.66,1212.92 1615.25,1212.92 1615.83,1212.92 1616.42,1212.92 1617.01,1212.92 1617.59,1212.92 1618.18,1212.92 1618.76,1212.92 1619.35,1212.92 1619.94,1212.92 1620.52,1212.92 1621.11,1212.92 1621.7,1212.92 1622.28,1212.92 1622.87,1212.92 1623.46,1212.92 1624.04,1212.92 1624.63,1212.92 1625.22,1212.92 1625.8,1212.92 1626.39,1212.92 1626.97,1212.92 1627.56,1212.92 1628.15,1212.92 1628.73,1212.92 1629.32,1212.92 1629.91,1212.92 1630.49,1212.92 1631.08,1212.92 1631.67,1212.92 1632.25,1212.92 1632.84,1212.92 1633.42,1212.92 1634.01,1212.92 1634.6,1212.92 1635.18,1212.92 1635.77,1212.92 1636.36,1212.92 1636.94,1212.92 1637.53,1212.92 1638.12,1212.92 1638.7,1212.92 1639.29,1212.92 1639.88,1212.92 1640.46,1212.92 1641.05,1212.92 1641.63,1212.92 1642.22,1212.92 1642.81,1212.92 1643.39,1212.92 1643.98,1212.92 1644.57,1212.92 1645.15,1212.92 1645.74,1212.92 1646.33,1212.92 1646.91,1212.92 1647.5,1212.92 1648.09,1212.92 1648.67,1212.92 1649.26,1212.92 1649.84,1212.92 1650.43,1212.92 1651.02,1212.92 1651.6,1212.92 1652.19,1212.92 1652.78,1212.92 1653.36,1212.92 1653.95,1212.92 1654.54,1212.92 1655.12,1212.92 1655.71,1212.92 1656.29,1212.92 1656.88,1212.92 1657.47,1212.92 1658.05,1212.92 1658.64,1212.92 1659.23,1212.92 1659.81,1212.92 1660.4,1212.92 1660.99,1212.92 1661.57,1212.92 1662.16,1212.92 1662.75,1212.92 1663.33,1212.92 1663.92,1212.92 1664.5,1212.92 1665.09,1212.92 1665.68,1212.92 1666.26,1212.92 1666.85,1212.92 1667.44,1212.92 1668.02,1212.92 1668.61,1212.92 1669.2,1212.92 1669.78,1212.92 1670.37,1212.92 1670.96,1212.92 1671.54,1212.92 1672.13,1212.92 1672.71,1212.92 1673.3,1212.92 1673.89,1212.92 1674.47,1212.92 1675.06,1212.92 1675.65,1212.92 1676.23,1212.92 1676.82,1212.92 1677.41,1212.92 1677.99,1212.92 1678.58,1212.92 1679.17,1212.92 1679.75,1212.92 1680.34,1212.92 1680.92,1212.92 1681.51,1212.92 1682.1,1212.92 1682.68,1212.92 1683.27,1212.92 1683.86,1212.92 1684.44,1212.92 1685.03,1212.92 1685.62,1212.92 1686.2,1212.92 1686.79,1212.92 1687.37,1212.92 1687.96,1212.92 1688.55,1212.92 1689.13,1212.92 1689.72,1212.92 1690.31,1212.92 1690.89,1212.92 1691.48,1212.92 1692.07,1212.92 1692.65,1212.92 1693.24,1212.92 1693.83,1212.92 1694.41,1212.92 1695,1212.92 1695.58,1212.92 1696.17,1212.92 1696.76,1212.92 1697.34,1212.92 1697.93,1212.92 1698.52,1212.92 1699.1,1212.92 1699.69,1212.92 1700.28,1212.92 1700.86,1212.92 1701.45,1212.92 1702.04,1212.92 1702.62,1212.92 1703.21,1212.92 1703.79,1212.92 1704.38,1212.92 1704.97,1212.92 1705.55,1212.92 1706.14,1212.92 1706.73,1212.92 1707.31,1212.92 1707.9,1212.92 1708.49,1212.92 1709.07,1212.92 1709.66,1212.92 1710.24,1212.92 1710.83,1212.92 1711.42,1212.92 1712,1212.92 1712.59,1212.92 1713.18,1212.92 1713.76,1212.92 1714.35,1212.92 1714.94,1212.92 1715.52,1212.92 1716.11,1212.92 1716.7,1212.92 1717.28,1212.92 1717.87,1212.92 1718.45,1212.92 1719.04,1212.92 1719.63,1212.92 1720.21,1212.92 1720.8,1212.92 1721.39,1212.92 1721.97,1212.92 1722.56,1212.92 1723.15,1212.92 1723.73,1212.92 1724.32,1212.92 1724.91,1212.92 1725.49,1212.92 1726.08,1212.92 1726.66,1212.92 1727.25,1212.92 1727.84,1212.92 1728.42,1212.92 1729.01,1212.92 1729.6,1212.92 1730.18,1212.92 1730.77,1212.92 1731.36,1212.92 1731.94,1212.92 1732.53,1212.92 1733.11,1212.92 1733.7,1212.92 1734.29,1212.92 1734.87,1212.92 1735.46,1212.92 1736.05,1212.92 1736.63,1212.92 1737.22,1212.92 1737.81,1212.92 1738.39,1212.92 1738.98,1212.92 1739.57,1212.92 1740.15,1212.92 1740.74,1212.92 1741.32,1212.92 1741.91,1212.92 1742.5,1212.92 1743.08,1212.92 1743.67,1212.92 1744.26,1212.92 1744.84,1212.92 1745.43,1212.92 1746.02,1212.92 1746.6,1212.92 1747.19,1212.92 1747.78,1212.92 1748.36,1212.92 1748.95,1212.92 1749.53,1212.92 1750.12,1212.92 1750.71,1212.92 1751.29,1212.92 1751.88,1212.92 1752.47,1212.92 1753.05,1212.92 1753.64,1212.92 1754.23,1212.92 1754.81,1212.92 1755.4,1212.92 1755.99,1212.92 1756.57,1212.92 1757.16,1212.92 1757.74,1212.92 1758.33,1212.92 1758.92,1212.92 1759.5,1212.92 1760.09,1212.92 1760.68,1212.92 1761.26,1212.92 1761.85,1212.92 1762.44,1212.92 1763.02,1212.92 1763.61,1212.92 1764.19,1212.92 1764.78,1212.92 1765.37,1212.92 1765.95,1212.92 1766.54,1212.92 1767.13,1212.92 1767.71,1212.92 1768.3,1212.92 1768.89,1212.92 1769.47,1212.92 1770.06,1212.92 1770.65,1212.92 1771.23,1212.92 1771.82,1212.92 1772.4,1212.92 1772.99,1212.92 1773.58,1212.92 1774.16,1212.92 1774.75,1212.92 1775.34,1212.92 1775.92,1212.92 1776.51,1212.92 1777.1,1212.92 1777.68,1212.92 1778.27,1212.92 1778.86,1212.92 1779.44,1212.92 1780.03,1212.92 1780.61,1212.92 1781.2,1212.92 1781.79,1212.92 1782.37,1212.92 1782.96,1212.92 1783.55,1212.92 1784.13,1212.92 1784.72,1212.92 1785.31,1212.92 1785.89,1212.92 1786.48,1212.92 1787.06,1212.92 1787.65,1212.92 1788.24,1212.92 1788.82,1212.92 1789.41,1212.92 1790,1212.92 1790.58,1212.92 1791.17,1212.92 1791.76,1212.92 1792.34,1212.92 1792.93,1212.92 1793.52,1212.92 1794.1,1212.92 1794.69,1212.92 1795.27,1212.92 1795.86,1212.92 1796.45,1212.92 1797.03,1212.92 1797.62,1212.92 1798.21,1212.92 1798.79,1212.92 1799.38,1212.92 1799.97,1212.92 1800.55,1212.92 1801.14,1212.92 1801.73,1212.92 1802.31,1212.92 1802.9,1212.92 1803.48,1212.92 1804.07,1212.92 1804.66,1212.92 1805.24,1212.92 1805.83,1212.92 1806.42,1212.92 1807,1212.92 1807.59,1212.92 1808.18,1212.92 1808.76,1212.92 1809.35,1212.92 1809.94,1212.92 1810.52,1212.92 1811.11,1212.92 1811.69,1212.92 1812.28,1212.92 1812.87,1212.92 1813.45,1212.92 1814.04,1212.92 1814.63,1212.92 1815.21,1212.92 1815.8,1212.92 1816.39,1212.92 1816.97,1212.92 1817.56,1212.92 1818.14,1212.92 1818.73,1212.92 1819.32,1212.92 1819.9,1212.92 1820.49,1212.92 1821.08,1212.92 1821.66,1212.92 1822.25,1212.92 1822.84,1212.92 1823.42,1212.92 1824.01,1212.92 1824.6,1212.92 1825.18,1212.92 1825.77,1212.92 1826.35,1212.92 1826.94,1212.92 1827.53,1212.92 1828.11,1212.92 1828.7,1212.92 1829.29,1212.92 1829.87,1212.92 1830.46,1212.92 1831.05,1212.92 1831.63,1212.92 1832.22,1212.92 1832.81,1212.92 1833.39,1212.92 1833.98,1212.92 1834.56,1212.92 1835.15,1212.92 1835.74,1212.92 1836.32,1212.92 1836.91,1212.92 1837.5,1212.92 1838.08,1212.92 1838.67,1212.92 1839.26,1212.92 1839.84,1212.92 1840.43,1212.92 1841.01,1212.92 1841.6,1212.92 1842.19,1212.92 1842.77,1212.92 1843.36,1212.92 1843.95,1212.92 1844.53,1212.92 1845.12,1212.92 1845.71,1212.92 1846.29,1212.92 1846.88,1212.92 1847.47,1212.92 1848.05,1212.92 1848.64,1212.92 1849.22,1212.92 1849.81,1212.92 1850.4,1212.92 1850.98,1212.92 1851.57,1212.92 1852.16,1212.92 1852.74,1212.92 1853.33,1212.92 1853.92,1212.92 1854.5,1212.92 1855.09,1212.92 1855.68,1212.92 1856.26,1212.92 1856.85,1212.92 1857.43,1212.92 1858.02,1212.92 1858.61,1212.92 1859.19,1212.92 1859.78,1212.92 1860.37,1212.92 1860.95,1212.92 1861.54,1212.92 1862.13,1212.92 1862.71,1212.92 1863.3,1212.92 1863.88,1212.92 1864.47,1212.92 1865.06,1212.92 1865.64,1212.92 1866.23,1212.92 1866.82,1212.92 1867.4,1212.92 1867.99,1212.92 1868.58,1212.92 1869.16,1212.92 1869.75,1212.92 1870.34,1212.92 1870.92,1212.92 1871.51,1212.92 1872.09,1212.92 1872.68,1212.92 1873.27,1212.92 1873.85,1212.92 1874.44,1212.92 1875.03,1212.92 1875.61,1212.92 1876.2,1212.92 1876.79,1212.92 1877.37,1212.92 1877.96,1212.92 1878.55,1212.92 1879.13,1212.92 1879.72,1212.92 1880.3,1212.92 1880.89,1212.92 1881.48,1212.92 1882.06,1212.92 1882.65,1212.92 1883.24,1212.92 1883.82,1212.92 1884.41,1212.92 1885,1212.92 1885.58,1212.92 1886.17,1212.92 1886.76,1212.92 1887.34,1212.92 1887.93,1212.92 1888.51,1212.92 1889.1,1212.92 1889.69,1212.92 1890.27,1212.92 1890.86,1212.92 1891.45,1212.92 1892.03,1212.92 1892.62,1212.92 1893.21,1212.92 1893.79,1212.92 1894.38,1212.92 1894.96,1212.92 1895.55,1212.92 1896.14,1212.92 1896.72,1212.92 1897.31,1212.92 1897.9,1212.92 1898.48,1212.92 1899.07,1212.92 1899.66,1212.92 1900.24,1212.92 1900.83,1212.92 1901.42,1212.92 1902,1212.92 1902.59,1212.92 1903.17,1212.92 1903.76,1212.92 1904.35,1212.92 1904.93,1212.92 1905.52,1212.92 1906.11,1212.92 1906.69,1212.92 1907.28,1212.92 1907.87,1212.92 1908.45,1212.92 1909.04,1212.92 1909.63,1212.92 1910.21,1212.92 1910.8,1212.92 1911.38,1212.92 1911.97,1212.92 1912.56,1212.92 1913.14,1212.92 1913.73,1212.92 1914.32,1212.92 1914.9,1212.92 1915.49,1212.92 1916.08,1212.92 1916.66,1212.92 1917.25,1212.92 1917.83,1212.92 1918.42,1212.92 1919.01,1212.92 1919.59,1212.92 1920.18,1212.92 1920.77,1212.92 1921.35,1212.92 1921.94,1212.92 1922.53,1212.92 1923.11,1212.92 1923.7,1212.92 1924.29,1212.92 1924.87,1212.92 1925.46,1212.92 1926.04,1212.92 1926.63,1212.92 1927.22,1212.92 1927.8,1212.92 1928.39,1212.92 1928.98,1212.92 1929.56,1212.92 1930.15,1212.92 1930.74,1212.92 1931.32,1212.92 1931.91,1212.92 1932.5,1212.92 1933.08,1212.92 1933.67,1212.92 1934.25,1212.92 1934.84,1212.92 1935.43,1212.92 1936.01,1212.92 1936.6,1212.92 1937.19,1212.92 1937.77,1212.92 1938.36,1212.92 1938.95,1212.92 1939.53,1212.92 1940.12,1212.92 1940.71,1212.92 1941.29,1212.92 1941.88,1212.92 1942.46,1212.92 1943.05,1212.92 1943.64,1212.92 1944.22,1212.92 1944.81,1212.92 1945.4,1212.92 1945.98,1212.92 1946.57,1212.92 1947.16,1212.92 1947.74,1212.92 1948.33,1212.92 1948.91,1212.92 1949.5,1212.92 1950.09,1212.92 1950.67,1212.92 1951.26,1212.92 1951.85,1212.92 1952.43,1212.92 1953.02,1212.92 1953.61,1212.92 1954.19,1212.92 1954.78,1212.92 1955.37,1212.92 1955.95,1212.92 1956.54,1212.92 1957.12,1212.92 1957.71,1212.92 1958.3,1212.92 1958.88,1212.92 1959.47,1212.92 1960.06,1212.92 1960.64,1212.92 1961.23,1212.92 1961.82,1212.92 1962.4,1212.92 1962.99,1212.92 1963.58,1212.92 1964.16,1212.92 1964.75,1212.92 1965.33,1212.92 1965.92,1212.92 1966.51,1212.92 1967.09,1212.92 1967.68,1212.92 1968.27,1212.92 1968.85,1212.92 1969.44,1212.92 1970.03,1212.92 1970.61,1212.92 1971.2,1212.92 1971.78,1212.92 1972.37,1212.92 1972.96,1212.92 1973.54,1212.92 1974.13,1212.92 1974.72,1212.92 1975.3,1212.92 1975.89,1212.92 1976.48,1212.92 1977.06,1212.92 1977.65,1212.92 1978.24,1212.92 1978.82,1212.92 1979.41,1212.92 1979.99,1212.92 1980.58,1212.92 1981.17,1212.92 1981.75,1212.92 1982.34,1212.92 1982.93,1212.92 1983.51,1212.92 1984.1,1212.92 1984.69,1212.92 1985.27,1212.92 1985.86,1212.92 1986.45,1212.92 1987.03,1212.92 1987.62,1212.92 1988.2,1212.92 1988.79,1212.92 1989.38,1212.92 1989.96,1212.92 1990.55,1212.92 1991.14,1212.92 1991.72,1212.92 1992.31,1212.92 1992.9,1212.92 1993.48,1212.92 1994.07,1212.92 1994.65,1212.92 1995.24,1212.92 1995.83,1212.92 1996.41,1212.92 1997,1212.92 1997.59,1212.92 1998.17,1212.92 1998.76,1212.92 1999.35,1212.92 1999.93,1212.92 2000.52,1212.92 2001.11,1212.92 2001.69,1212.92 2002.28,1212.92 2002.86,1212.92 2003.45,1212.92 2004.04,1212.92 2004.62,1212.92 2005.21,1212.92 2005.8,1212.92 2006.38,1212.92 2006.97,1212.92 2007.56,1212.92 2008.14,1212.92 2008.73,1212.92 2009.32,1212.92 2009.9,1212.92 2010.49,1212.92 2011.07,1212.92 2011.66,1212.92 2012.25,1212.92 2012.83,1212.92 2013.42,1212.92 2014.01,1212.92 2014.59,1212.92 2015.18,1212.92 2015.77,1212.92 2016.35,1212.92 2016.94,1212.92 2017.53,1212.92 2018.11,1212.92 2018.7,1212.92 2019.28,1212.92 2019.87,1212.92 2020.46,1212.92 2021.04,1212.92 2021.63,1212.92 2022.22,1212.92 2022.8,1212.92 2023.39,1212.92 2023.98,1212.92 2024.56,1212.92 2025.15,1212.92 2025.73,1212.92 2026.32,1212.92 2026.91,1212.92 2027.49,1212.92 2028.08,1212.92 2028.67,1212.92 2029.25,1212.92 2029.84,1212.92 2030.43,1212.92 2031.01,1212.92 2031.6,1212.92 2032.19,1212.92 2032.77,1212.92 2033.36,1212.92 2033.94,1212.92 2034.53,1212.92 2035.12,1212.92 2035.7,1212.92 2036.29,1212.92 2036.88,1212.92 2037.46,1212.92 2038.05,1212.92 2038.64,1212.92 2039.22,1212.92 2039.81,1212.92 2040.4,1212.92 2040.98,1212.92 2041.57,1212.92 2042.15,1212.92 2042.74,1212.92 2043.33,1212.92 2043.91,1212.92 2044.5,1212.92 2045.09,1212.92 2045.67,1212.92 2046.26,1212.92 2046.85,1212.92 2047.43,1212.92 2048.02,1212.92 2048.6,1212.92 2049.19,1212.92 2049.78,1212.92 2050.36,1212.92 2050.95,1212.92 2051.54,1212.92 2052.12,1212.92 2052.71,1212.92 2053.3,1212.92 2053.88,1212.92 2054.47,1212.92 2055.06,1212.92 2055.64,1212.92 2056.23,1212.92 2056.81,1212.92 2057.4,1212.92 2057.99,1212.92 2058.57,1212.92 2059.16,1212.92 2059.75,1212.92 2060.33,1212.92 2060.92,1212.92 2061.51,1212.92 2062.09,1212.92 2062.68,1212.92 2063.27,1212.92 2063.85,1212.92 2064.44,1212.92 2065.02,1212.92 2065.61,1212.92 2066.2,1212.92 2066.78,1212.92 2067.37,1212.92 2067.96,1212.92 2068.54,1212.92 2069.13,1212.92 2069.72,1212.92 2070.3,1212.92 2070.89,1212.92 2071.48,1212.92 2072.06,1212.92 2072.65,1212.92 2073.23,1212.92 2073.82,1212.92 2074.41,1212.92 2074.99,1212.92 2075.58,1212.92 2076.17,1212.92 2076.75,1212.92 2077.34,1212.92 2077.93,1212.92 2078.51,1212.92 2079.1,1212.92 2079.68,1212.92 2080.27,1212.92 2080.86,1212.92 2081.44,1212.92 2082.03,1212.92 2082.62,1212.92 2083.2,1212.92 2083.79,1212.92 2084.38,1212.92 2084.96,1212.92 2085.55,1212.92 2086.14,1212.92 2086.72,1212.92 2087.31,1212.92 2087.89,1212.92 2088.48,1212.92 2089.07,1212.92 2089.65,1212.92 2090.24,1212.92 2090.83,1212.92 2091.41,1212.92 2092,1212.92 2092.59,1212.92 2093.17,1212.92 2093.76,1212.92 2094.35,1212.92 2094.93,1212.92 2095.52,1212.92 2096.1,1212.92 2096.69,1212.92 2097.28,1212.92 2097.86,1212.92 2098.45,1212.92 2099.04,1212.92 2099.62,1212.92 2100.21,1212.92 2100.8,1212.92 2101.38,1212.92 2101.97,1212.92 2102.55,1212.92 2103.14,1212.92 2103.73,1212.92 2104.31,1212.92 2104.9,1212.92 2105.49,1212.92 2106.07,1212.92 2106.66,1212.92 2107.25,1212.92 2107.83,1212.92 2108.42,1212.92 2109.01,1212.92 2109.59,1212.92 2110.18,1212.92 2110.76,1212.92 2111.35,1212.92 2111.94,1212.92 2112.52,1212.92 2113.11,1212.92 2113.7,1212.92 2114.28,1212.92 2114.87,1212.92 2115.46,1212.92 2116.04,1212.92 2116.63,1212.92 2117.22,1212.92 2117.8,1212.92 2118.39,1212.92 2118.97,1212.92 2119.56,1212.92 2120.15,1212.92 2120.73,1212.92 2121.32,1212.92 2121.91,1212.92 2122.49,1212.92 2123.08,1212.92 2123.67,1212.92 2124.25,1212.92 2124.84,1212.92 2125.42,1212.92 2126.01,1212.92 2126.6,1212.92 2127.18,1212.92 2127.77,1212.92 2128.36,1212.92 2128.94,1212.92 2129.53,1212.92 2130.12,1212.92 2130.7,1212.92 2131.29,1212.92 2131.88,1212.92 2132.46,1212.92 2133.05,1212.92 2133.63,1212.92 2134.22,1212.92 2134.81,1212.92 2135.39,1212.92 2135.98,1212.92 2136.57,1212.92 2137.15,1212.92 2137.74,1212.92 2138.33,1212.92 2138.91,1212.92 2139.5,1212.92 2140.09,1212.92 2140.67,1212.92 2141.26,1212.92 2141.84,1212.92 2142.43,1212.92 2143.02,1212.92 2143.6,1212.92 2144.19,1212.92 2144.78,1212.92 2145.36,1212.92 2145.95,1212.92 2146.54,1212.92 2147.12,1212.92 2147.71,1212.92 2148.3,1212.92 2148.88,1212.92 2149.47,1212.92 2150.05,1212.92 2150.64,1212.92 2151.23,1212.92 2151.81,1212.92 2152.4,1212.92 2152.99,1212.92 2153.57,1212.92 2154.16,1212.92 2154.75,1212.92 2155.33,1212.92 2155.92,1212.92 2156.5,1212.92 2157.09,1212.92 2157.68,1212.92 2158.26,1212.92 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1212.75 L986.612 1212.75 L987.198 1212.75 L987.785 1212.75 L988.371 1212.75 L988.957 1212.75 L989.544 1212.75 L990.13 1212.75 L990.717 1212.75 L991.303 1212.75 L991.889 1212.75 L992.476 1212.75 L993.062 1212.75 L993.649 1212.75 L994.235 1212.75 L994.822 1212.75 L995.408 1212.75 L995.994 1212.75 L996.581 1212.75 L997.167 1212.75 L997.754 1212.75 L998.34 1212.75 L998.926 1212.75 L999.513 1212.75 L1000.1 1212.75 L1000.69 1212.75 L1001.27 1212.75 L1001.86 1212.75 L1002.44 1212.75 L1003.03 1212.75 L1003.62 1212.75 L1004.2 1212.75 L1004.79 1212.75 L1005.38 1212.75 L1005.96 1212.75 L1006.55 1212.75 L1007.14 1212.75 L1007.72 1212.75 L1008.31 1212.75 L1008.9 1212.75 L1009.48 1212.75 L1010.07 1212.75 L1010.65 1212.75 L1011.24 1212.75 L1011.83 1212.75 L1012.41 1212.75 L1013 1212.75 L1013.59 1212.75 L1014.17 1212.75 L1014.76 1212.75 L1015.35 1212.75 L1015.93 1212.75 L1016.52 1212.75 L1017.11 1212.75 L1017.69 1212.75 L1018.28 1212.75 L1018.86 1212.75 L1019.45 1212.75 L1020.04 1212.75 L1020.62 1212.75 L1021.21 1212.75 L1021.8 1212.75 L1022.38 1212.75 L1022.97 1212.75 L1023.56 1212.75 L1024.14 1212.75 L1024.73 1212.75 L1025.32 1212.75 L1025.9 1212.75 L1026.49 1212.75 L1027.07 1212.75 L1027.66 1212.75 L1028.25 1212.75 L1028.83 1212.75 L1029.42 1212.75 L1030.01 1212.75 L1030.59 1212.75 L1031.18 1212.75 L1031.77 1212.75 L1032.35 1212.75 L1032.94 1212.75 L1033.52 1212.75 L1034.11 1212.75 L1034.7 1212.75 L1035.28 1212.75 L1035.87 1212.75 L1036.46 1212.75 L1037.04 1212.75 L1037.63 1212.75 L1038.22 1212.75 L1038.8 1212.75 L1039.39 1212.75 L1039.98 1212.75 L1040.56 1212.75 L1041.15 1212.75 L1041.73 1212.75 L1042.32 1212.75 L1042.91 1212.75 L1043.49 1212.75 L1044.08 1212.75 L1044.67 1212.75 L1045.25 1212.75 L1045.84 1212.75 L1046.43 1212.75 L1047.01 1212.75 L1047.6 1212.75 L1048.19 1212.75 L1048.77 1212.75 L1049.36 1212.75 L1049.94 1212.75 L1050.53 1212.75 L1051.12 1212.75 L1051.7 1212.75 L1052.29 1212.75 L1052.88 1212.75 L1053.46 1212.75 L1054.05 1212.75 L1054.64 1212.75 L1055.22 1212.75 L1055.81 1212.75 L1056.39 1212.75 L1056.98 1212.75 L1057.57 1212.75 L1058.15 1212.75 L1058.74 1212.75 L1059.33 1212.75 L1059.91 1212.75 L1060.5 1212.75 L1061.09 1212.75 L1061.67 1212.75 L1062.26 1212.75 L1062.85 1212.75 L1063.43 1212.75 L1064.02 1212.75 L1064.6 1212.75 L1065.19 1212.75 L1065.78 1212.75 L1066.36 1212.75 L1066.95 1212.75 L1067.54 1212.75 L1068.12 1212.75 L1068.71 1212.75 L1069.3 1212.75 L1069.88 1212.75 L1070.47 1212.75 L1071.06 1212.75 L1071.64 1212.75 L1072.23 1212.75 L1072.81 1212.75 L1073.4 1212.75 L1073.99 1212.75 L1074.57 1212.75 L1075.16 1212.75 L1075.75 1212.75 L1076.33 1212.75 L1076.92 1212.75 L1077.51 1212.75 L1078.09 1212.75 L1078.68 1212.75 L1079.26 1212.75 L1079.85 1212.75 L1080.44 1212.75 L1081.02 1212.75 L1081.61 1212.75 L1082.2 1212.75 L1082.78 1212.75 L1083.37 1212.75 L1083.96 1212.75 L1084.54 1212.75 L1085.13 1212.75 L1085.72 1212.75 L1086.3 1212.75 L1086.89 1212.75 L1087.47 1212.75 L1088.06 1212.75 L1088.65 1212.75 L1089.23 1212.75 L1089.82 1212.75 L1090.41 1212.75 L1090.99 1212.75 L1091.58 1212.75 L1092.17 1212.75 L1092.75 1212.75 L1093.34 1212.75 L1093.93 1212.75 L1094.51 1212.75 L1095.1 1212.75 L1095.68 1212.75 L1096.27 1212.75 L1096.86 1212.75 L1097.44 1212.75 L1098.03 1212.75 L1098.62 1212.75 L1099.2 1212.75 L1099.79 1212.75 L1100.38 1212.75 L1100.96 1212.75 L1101.55 1212.75 L1102.14 1212.75 L1102.72 1212.75 L1103.31 1212.75 L1103.89 1212.75 L1104.48 1212.75 L1105.07 1212.75 L1105.65 1212.75 L1106.24 1212.75 L1106.83 1212.75 L1107.41 1212.75 L1108 1212.75 L1108.59 1212.75 L1109.17 1212.75 L1109.76 1212.75 L1110.34 1212.75 L1110.93 1212.75 L1111.52 1212.75 L1112.1 1212.75 L1112.69 1212.75 L1113.28 1212.75 L1113.86 1212.75 L1114.45 1212.75 L1115.04 1212.75 L1115.62 1212.75 L1116.21 1212.75 L1116.8 1212.75 L1117.38 1212.75 L1117.97 1212.75 L1118.55 1212.75 L1119.14 1212.75 L1119.73 1212.75 L1120.31 1212.75 L1120.9 1212.75 L1121.49 1212.75 L1122.07 1212.75 L1122.66 1212.75 L1123.25 1212.75 L1123.83 1212.75 L1124.42 1212.75 L1125.01 1212.75 L1125.59 1212.75 L1126.18 1212.75 L1126.76 1212.75 L1127.35 1212.75 L1127.94 1212.75 L1128.52 1212.75 L1129.11 1212.75 L1129.7 1212.75 L1130.28 1212.75 L1130.87 1212.75 L1131.46 1212.75 L1132.04 1212.75 L1132.63 1212.75 L1133.21 1212.75 L1133.8 1212.75 L1134.39 1212.75 L1134.97 1212.75 L1135.56 1212.75 L1136.15 1212.75 L1136.73 1212.75 L1137.32 1212.75 L1137.91 1212.75 L1138.49 1212.75 L1139.08 1212.75 L1139.67 1212.75 L1140.25 1212.75 L1140.84 1212.75 L1141.42 1212.75 L1142.01 1212.75 L1142.6 1212.75 L1143.18 1212.75 L1143.77 1212.75 L1144.36 1212.75 L1144.94 1212.75 L1145.53 1212.75 L1146.12 1212.75 L1146.7 1212.75 L1147.29 1212.75 L1147.88 1212.75 L1148.46 1212.75 L1149.05 1212.75 L1149.63 1212.75 L1150.22 1212.75 L1150.81 1212.75 L1151.39 1212.75 L1151.98 1212.75 L1152.57 1212.75 L1153.15 1212.75 L1153.74 1212.75 L1154.33 1212.75 L1154.91 1212.75 L1155.5 1212.75 L1156.09 1212.75 L1156.67 1212.75 L1157.26 1212.75 L1157.84 1212.75 L1158.43 1212.75 L1159.02 1212.75 L1159.6 1212.75 L1160.19 1212.75 L1160.78 1212.75 L1161.36 1212.75 L1161.95 1212.75 L1162.54 1212.75 L1163.12 1212.75 L1163.71 1212.75 L1164.29 1212.75 L1164.88 1212.75 L1165.47 1212.75 L1166.05 1212.75 L1166.64 1212.75 L1167.23 1212.75 L1167.81 1212.75 L1168.4 1212.75 L1168.99 1212.75 L1169.57 1212.75 L1170.16 1212.75 L1170.75 1212.75 L1171.33 1212.75 L1171.92 1212.75 L1172.5 1212.75 L1173.09 1212.75 L1173.68 1212.75 L1174.26 1212.75 L1174.85 1212.75 L1175.44 1212.75 L1176.02 1212.75 L1176.61 1212.75 L1177.2 1212.75 L1177.78 1212.75 L1178.37 1212.75 L1178.96 1212.75 L1179.54 1212.75 L1180.13 1212.75 L1180.71 1212.75 L1181.3 1212.75 L1181.89 1212.75 L1182.47 1212.75 L1183.06 1212.75 L1183.65 1212.75 L1184.23 1212.75 L1184.82 1212.75 L1185.41 1212.75 L1185.99 1212.75 L1186.58 1212.75 L1187.16 1212.75 L1187.75 1212.75 L1188.34 1212.75 L1188.92 1212.75 L1189.51 1212.75 L1190.1 1212.75 L1190.68 1212.75 L1191.27 1212.75 L1191.86 1212.75 L1192.44 1212.75 L1193.03 1212.75 L1193.62 1212.75 L1194.2 1212.75 L1194.79 1212.75 L1195.37 1212.75 L1195.96 1212.75 L1196.55 1212.75 L1197.13 1212.75 L1197.72 1212.75 L1198.31 1212.75 L1198.89 1212.75 L1199.48 1212.75 L1200.07 1212.75 L1200.65 1212.75 L1201.24 1212.75 L1201.83 1212.75 L1202.41 1212.75 L1203 1212.75 L1203.58 1212.75 L1204.17 1212.75 L1204.76 1212.75 L1205.34 1212.75 L1205.93 1212.75 L1206.52 1212.75 L1207.1 1212.75 L1207.69 1212.75 L1208.28 1212.75 L1208.86 1212.75 L1209.45 1212.75 L1210.03 1212.75 L1210.62 1212.75 L1211.21 1212.75 L1211.79 1212.75 L1212.38 1212.75 L1212.97 1212.75 L1213.55 1212.75 L1214.14 1212.75 L1214.73 1212.75 L1215.31 1212.75 L1215.9 1212.75 L1216.49 1212.75 L1217.07 1212.75 L1217.66 1212.75 L1218.24 1212.75 L1218.83 1212.75 L1219.42 1212.75 L1220 1212.75 L1220.59 1212.75 L1221.18 1212.75 L1221.76 1212.75 L1222.35 1212.75 L1222.94 1212.75 L1223.52 1212.75 L1224.11 1212.75 L1224.7 1212.75 L1225.28 1212.75 L1225.87 1212.75 L1226.45 1212.75 L1227.04 1212.75 L1227.63 1212.75 L1228.21 1212.75 L1228.8 1212.75 L1229.39 1212.75 L1229.97 1212.75 L1230.56 1212.75 L1231.15 1212.75 L1231.73 1212.75 L1232.32 1212.75 L1232.91 1212.75 L1233.49 1212.75 L1234.08 1212.75 L1234.66 1212.75 L1235.25 1212.75 L1235.84 1212.75 L1236.42 1212.75 L1237.01 1212.75 L1237.6 1212.75 L1238.18 1212.75 L1238.77 1212.75 L1239.36 1212.75 L1239.94 1212.75 L1240.53 1212.75 L1241.11 1212.75 L1241.7 1212.75 L1242.29 1212.75 L1242.87 1212.75 L1243.46 1212.75 L1244.05 1212.75 L1244.63 1212.75 L1245.22 1212.75 L1245.81 1212.75 L1246.39 1212.75 L1246.98 1212.75 L1247.57 1212.75 L1248.15 1212.75 L1248.74 1212.75 L1249.32 1212.75 L1249.91 1212.75 L1250.5 1212.75 L1251.08 1212.75 L1251.67 1212.75 L1252.26 1212.75 L1252.84 1212.75 L1253.43 1212.75 L1254.02 1212.75 L1254.6 1212.75 L1255.19 1212.75 L1255.78 1212.75 L1256.36 1212.75 L1256.95 1212.75 L1257.53 1212.75 L1258.12 1212.75 L1258.71 1212.75 L1259.29 1212.75 L1259.88 1212.75 L1260.47 1212.75 L1261.05 1212.75 L1261.64 1212.75 L1262.23 1212.75 L1262.81 1212.75 L1263.4 1212.75 L1263.98 1212.75 L1264.57 1212.75 L1265.16 1212.75 L1265.74 1212.75 L1266.33 1212.75 L1266.92 1212.75 L1267.5 1212.75 L1268.09 1212.75 L1268.68 1212.75 L1269.26 1212.75 L1269.85 1212.75 L1270.44 1212.75 L1271.02 1212.75 L1271.61 1212.75 L1272.19 1212.75 L1272.78 1212.75 L1273.37 1212.75 L1273.95 1212.75 L1274.54 1212.75 L1275.13 1212.75 L1275.71 1212.75 L1276.3 1212.75 L1276.89 1212.75 L1277.47 1212.75 L1278.06 1212.75 L1278.65 1212.75 L1279.23 1212.75 L1279.82 1212.75 L1280.4 1212.75 L1280.99 1212.75 L1281.58 1212.75 L1282.16 1212.75 L1282.75 1212.75 L1283.34 1212.75 L1283.92 1212.75 L1284.51 1212.75 L1285.1 1212.75 L1285.68 1212.75 L1286.27 1212.75 L1286.86 1212.75 L1287.44 1212.75 L1288.03 1212.75 L1288.61 1212.75 L1289.2 1212.75 L1289.79 1212.75 L1290.37 1212.75 L1290.96 1212.75 L1291.55 1212.75 L1292.13 1212.75 L1292.72 1212.75 L1293.31 1212.75 L1293.89 1212.75 L1294.48 1212.75 L1295.06 1212.75 L1295.65 1212.75 L1296.24 1212.75 L1296.82 1212.75 L1297.41 1212.75 L1298 1212.75 L1298.58 1212.75 L1299.17 1212.75 L1299.76 1212.75 L1300.34 1212.75 L1300.93 1212.75 L1301.52 1212.75 L1302.1 1212.75 L1302.69 1212.75 L1303.27 1212.75 L1303.86 1212.75 L1304.45 1212.75 L1305.03 1212.75 L1305.62 1212.75 L1306.21 1212.75 L1306.79 1212.75 L1307.38 1212.75 L1307.97 1212.75 L1308.55 1212.75 L1309.14 1212.75 L1309.73 1212.75 L1310.31 1212.75 L1310.9 1212.75 L1311.48 1212.75 L1312.07 1212.75 L1312.66 1212.75 L1313.24 1212.75 L1313.83 1212.75 L1314.42 1212.75 L1315 1212.75 L1315.59 1212.75 L1316.18 1212.75 L1316.76 1212.75 L1317.35 1212.75 L1317.93 1212.75 L1318.52 1212.75 L1319.11 1212.75 L1319.69 1212.75 L1320.28 1212.75 L1320.87 1212.75 L1321.45 1212.75 L1322.04 1212.75 L1322.63 1212.75 L1323.21 1212.75 L1323.8 1212.75 L1324.39 1212.75 L1324.97 1212.75 L1325.56 1212.75 L1326.14 1212.75 L1326.73 1212.75 L1327.32 1212.75 L1327.9 1212.75 L1328.49 1212.75 L1329.08 1212.75 L1329.66 1212.75 L1330.25 1212.75 L1330.84 1212.75 L1331.42 1212.75 L1332.01 1212.75 L1332.6 1212.75 L1333.18 1212.75 L1333.77 1212.75 L1334.35 1212.75 L1334.94 1212.75 L1335.53 1212.75 L1336.11 1212.75 L1336.7 1212.75 L1337.29 1212.75 L1337.87 1212.75 L1338.46 1212.75 L1339.05 1212.75 L1339.63 1212.75 L1340.22 1212.75 L1340.8 1212.75 L1341.39 1212.75 L1341.98 1212.75 L1342.56 1212.75 L1343.15 1212.75 L1343.74 1212.75 L1344.32 1212.75 L1344.91 1212.75 L1345.5 1212.75 L1346.08 1212.75 L1346.67 1212.75 L1347.26 1212.75 L1347.84 1212.75 L1348.43 1212.75 L1349.01 1212.75 L1349.6 1212.75 L1350.19 1212.75 L1350.77 1212.75 L1351.36 1212.75 L1351.95 1212.75 L1352.53 1212.75 L1353.12 1212.75 L1353.71 1212.75 L1354.29 1212.75 L1354.88 1212.75 L1355.47 1212.75 L1356.05 1212.75 L1356.64 1212.75 L1357.22 1212.75 L1357.81 1212.75 L1358.4 1212.75 L1358.98 1212.75 L1359.57 1212.75 L1360.16 1212.75 L1360.74 1212.75 L1361.33 1212.75 L1361.92 1212.75 L1362.5 1212.75 L1363.09 1212.75 L1363.68 1212.75 L1364.26 1212.75 L1364.85 1212.75 L1365.43 1212.75 L1366.02 1212.75 L1366.61 1212.75 L1367.19 1212.75 L1367.78 1212.75 L1368.37 1212.75 L1368.95 1212.75 L1369.54 1212.75 L1370.13 1212.75 L1370.71 1212.75 L1371.3 1212.75 L1371.88 1212.75 L1372.47 1212.75 L1373.06 1212.75 L1373.64 1212.75 L1374.23 1212.75 L1374.82 1212.75 L1375.4 1212.75 L1375.99 1212.75 L1376.58 1212.75 L1377.16 1212.75 L1377.75 1212.75 L1378.34 1212.75 L1378.92 1212.75 L1379.51 1212.75 L1380.09 1212.75 L1380.68 1212.75 L1381.27 1212.75 L1381.85 1212.75 L1382.44 1212.75 L1383.03 1212.75 L1383.61 1212.75 L1384.2 1212.75 L1384.79 1212.75 L1385.37 1212.75 L1385.96 1212.75 L1386.55 1212.75 L1387.13 1212.75 L1387.72 1212.75 L1388.3 1212.75 L1388.89 1212.75 L1389.48 1212.75 L1390.06 1212.75 L1390.65 1212.75 L1391.24 1212.75 L1391.82 1212.75 L1392.41 1212.75 L1393 1212.75 L1393.58 1212.75 L1394.17 1212.75 L1394.75 1212.75 L1395.34 1212.75 L1395.93 1212.75 L1396.51 1212.75 L1397.1 1212.75 L1397.69 1212.75 L1398.27 1212.75 L1398.86 1212.75 L1399.45 1212.75 L1400.03 1212.75 L1400.62 1212.75 L1401.21 1212.75 L1401.79 1212.75 L1402.38 1212.75 L1402.96 1212.75 L1403.55 1212.75 L1404.14 1212.75 L1404.72 1212.75 L1405.31 1212.75 L1405.9 1212.75 L1406.48 1212.75 L1407.07 1212.75 L1407.66 1212.75 L1408.24 1212.75 L1408.83 1212.75 L1409.42 1212.75 L1410 1212.75 L1410.59 1212.75 L1411.17 1212.75 L1411.76 1212.75 L1412.35 1212.75 L1412.93 1212.75 L1413.52 1212.75 L1414.11 1212.75 L1414.69 1212.75 L1415.28 1212.75 L1415.87 1212.75 L1416.45 1212.75 L1417.04 1212.75 L1417.63 1212.75 L1418.21 1212.75 L1418.8 1212.75 L1419.38 1212.75 L1419.97 1212.75 L1420.56 1212.75 L1421.14 1212.75 L1421.73 1212.75 L1422.32 1212.75 L1422.9 1212.75 L1423.49 1212.75 L1424.08 1212.75 L1424.66 1212.75 L1425.25 1212.75 L1425.83 1212.75 L1426.42 1212.75 L1427.01 1212.75 L1427.59 1212.75 L1428.18 1212.75 L1428.77 1212.75 L1429.35 1212.75 L1429.94 1212.75 L1430.53 1212.75 L1431.11 1212.75 L1431.7 1212.75 L1432.29 1212.75 L1432.87 1212.75 L1433.46 1212.75 L1434.04 1212.75 L1434.63 1212.75 L1435.22 1212.75 L1435.8 1212.75 L1436.39 1212.75 L1436.98 1212.75 L1437.56 1212.75 L1438.15 1212.75 L1438.74 1212.75 L1439.32 1212.75 L1439.91 1212.75 L1440.5 1212.75 L1441.08 1212.75 L1441.67 1212.75 L1442.25 1212.75 L1442.84 1212.75 L1443.43 1212.75 L1444.01 1212.75 L1444.6 1212.75 L1445.19 1212.75 L1445.77 1212.75 L1446.36 1212.75 L1446.95 1212.75 L1447.53 1212.75 L1448.12 1212.75 L1448.7 1212.75 L1449.29 1212.75 L1449.88 1212.75 L1450.46 1212.75 L1451.05 1212.75 L1451.64 1212.75 L1452.22 1212.75 L1452.81 1212.75 L1453.4 1212.75 L1453.98 1212.75 L1454.57 1212.75 L1455.16 1212.75 L1455.74 1212.75 L1456.33 1212.75 L1456.91 1212.75 L1457.5 1212.75 L1458.09 1212.75 L1458.67 1212.75 L1459.26 1212.75 L1459.85 1212.75 L1460.43 1212.75 L1461.02 1212.75 L1461.61 1212.75 L1462.19 1212.75 L1462.78 1212.75 L1463.37 1212.75 L1463.95 1212.75 L1464.54 1212.75 L1465.12 1212.75 L1465.71 1212.75 L1466.3 1212.75 L1466.88 1212.75 L1467.47 1212.75 L1468.06 1212.75 L1468.64 1212.75 L1469.23 1212.75 L1469.82 1212.75 L1470.4 1212.75 L1470.99 1212.75 L1471.57 1212.75 L1472.16 1212.75 L1472.75 1212.75 L1473.33 1212.75 L1473.92 1212.75 L1474.51 1212.75 L1475.09 1212.75 L1475.68 1212.75 L1476.27 1212.75 L1476.85 1212.75 L1477.44 1212.75 L1478.03 1212.75 L1478.61 1212.75 L1479.2 1212.75 L1479.78 1212.75 L1480.37 1212.75 L1480.96 1212.75 L1481.54 1212.75 L1482.13 1212.75 L1482.72 1212.75 L1483.3 1212.75 L1483.89 1212.75 L1484.48 1212.75 L1485.06 1212.75 L1485.65 1212.75 L1486.24 1212.75 L1486.82 1212.75 L1487.41 1212.75 L1487.99 1212.75 L1488.58 1212.75 L1489.17 1212.75 L1489.75 1212.75 L1490.34 1212.75 L1490.93 1212.75 L1491.51 1212.75 L1492.1 1212.75 L1492.69 1212.75 L1493.27 1212.75 L1493.86 1212.75 L1494.45 1212.75 L1495.03 1212.75 L1495.62 1212.75 L1496.2 1212.75 L1496.79 1212.75 L1497.38 1212.75 L1497.96 1212.75 L1498.55 1212.75 L1499.14 1212.75 L1499.72 1212.75 L1500.31 1212.75 L1500.9 1212.75 L1501.48 1212.75 L1502.07 1212.75 L1502.65 1212.75 L1503.24 1212.75 L1503.83 1212.75 L1504.41 1212.75 L1505 1212.75 L1505.59 1212.75 L1506.17 1212.75 L1506.76 1212.75 L1507.35 1212.75 L1507.93 1212.75 L1508.52 1212.75 L1509.11 1212.75 L1509.69 1212.75 L1510.28 1212.75 L1510.86 1212.75 L1511.45 1212.75 L1512.04 1212.75 L1512.62 1212.75 L1513.21 1212.75 L1513.8 1212.75 L1514.38 1212.75 L1514.97 1212.75 L1515.56 1212.75 L1516.14 1212.75 L1516.73 1212.75 L1517.32 1212.75 L1517.9 1212.75 L1518.49 1212.75 L1519.07 1212.75 L1519.66 1212.75 L1520.25 1212.75 L1520.83 1212.75 L1521.42 1212.75 L1522.01 1212.75 L1522.59 1212.75 L1523.18 1212.75 L1523.77 1212.75 L1524.35 1212.75 L1524.94 1212.75 L1525.52 1212.75 L1526.11 1212.75 L1526.7 1212.75 L1527.28 1212.75 L1527.87 1212.75 L1528.46 1212.75 L1529.04 1212.75 L1529.63 1212.75 L1530.22 1212.75 L1530.8 1212.75 L1531.39 1212.75 L1531.98 1212.75 L1532.56 1212.75 L1533.15 1212.75 L1533.73 1212.75 L1534.32 1212.75 L1534.91 1212.75 L1535.49 1212.75 L1536.08 1212.75 L1536.67 1212.75 L1537.25 1212.75 L1537.84 1212.75 L1538.43 1212.75 L1539.01 1212.75 L1539.6 1212.75 L1540.19 1212.75 L1540.77 1212.75 L1541.36 1212.75 L1541.94 1212.75 L1542.53 1212.75 L1543.12 1212.75 L1543.7 1212.75 L1544.29 1212.75 L1544.88 1212.75 L1545.46 1212.75 L1546.05 1212.75 L1546.64 1212.75 L1547.22 1212.75 L1547.81 1212.75 L1548.4 1212.75 L1548.98 1212.75 L1549.57 1212.75 L1550.15 1212.75 L1550.74 1212.75 L1551.33 1212.75 L1551.91 1212.75 L1552.5 1212.75 L1553.09 1212.75 L1553.67 1212.75 L1554.26 1212.75 L1554.85 1212.75 L1555.43 1212.75 L1556.02 1212.75 L1556.6 1212.75 L1557.19 1212.75 L1557.78 1212.75 L1558.36 1212.75 L1558.95 1212.75 L1559.54 1212.75 L1560.12 1212.75 L1560.71 1212.75 L1561.3 1212.75 L1561.88 1212.75 L1562.47 1212.75 L1563.06 1212.75 L1563.64 1212.75 L1564.23 1212.75 L1564.81 1212.75 L1565.4 1212.75 L1565.99 1212.75 L1566.57 1212.75 L1567.16 1212.75 L1567.75 1212.75 L1568.33 1212.75 L1568.92 1212.75 L1569.51 1212.75 L1570.09 1212.75 L1570.68 1212.75 L1571.27 1212.75 L1571.85 1212.75 L1572.44 1212.75 L1573.02 1212.75 L1573.61 1212.75 L1574.2 1212.75 L1574.78 1212.75 L1575.37 1212.75 L1575.96 1212.75 L1576.54 1212.75 L1577.13 1212.75 L1577.72 1212.75 L1578.3 1212.75 L1578.89 1212.75 L1579.47 1212.75 L1580.06 1212.75 L1580.65 1212.75 L1581.23 1212.75 L1581.82 1212.75 L1582.41 1212.75 L1582.99 1212.75 L1583.58 1212.75 L1584.17 1212.75 L1584.75 1212.75 L1585.34 1212.75 L1585.93 1212.75 L1586.51 1212.75 L1587.1 1212.75 L1587.68 1212.75 L1588.27 1212.75 L1588.86 1212.75 L1589.44 1212.75 L1590.03 1212.75 L1590.62 1212.75 L1591.2 1212.75 L1591.79 1212.75 L1592.38 1212.75 L1592.96 1212.75 L1593.55 1212.75 L1594.14 1212.75 L1594.72 1212.75 L1595.31 1212.75 L1595.89 1212.75 L1596.48 1212.75 L1597.07 1212.75 L1597.65 1212.75 L1598.24 1212.75 L1598.83 1212.75 L1599.41 1212.75 L1600 1212.75 L1600.59 1212.75 L1601.17 1212.75 L1601.76 1212.75 L1602.34 1212.75 L1602.93 1212.75 L1603.52 1212.75 L1604.1 1212.75 L1604.69 1212.75 L1605.28 1212.75 L1605.86 1212.75 L1606.45 1212.75 L1607.04 1212.75 L1607.62 1212.75 L1608.21 1212.75 L1608.8 1212.75 L1609.38 1212.75 L1609.97 1212.75 L1610.55 1212.75 L1611.14 1212.75 L1611.73 1212.75 L1612.31 1212.75 L1612.9 1212.75 L1613.49 1212.75 L1614.07 1212.75 L1614.66 1212.75 L1615.25 1212.75 L1615.83 1212.75 L1616.42 1212.75 L1617.01 1212.75 L1617.59 1212.75 L1618.18 1212.75 L1618.76 1212.75 L1619.35 1212.75 L1619.94 1212.75 L1620.52 1212.75 L1621.11 1212.75 L1621.7 1212.75 L1622.28 1212.75 L1622.87 1212.75 L1623.46 1212.75 L1624.04 1212.75 L1624.63 1212.75 L1625.22 1212.75 L1625.8 1212.75 L1626.39 1212.75 L1626.97 1212.75 L1627.56 1212.75 L1628.15 1212.75 L1628.73 1212.75 L1629.32 1212.75 L1629.91 1212.75 L1630.49 1212.75 L1631.08 1212.75 L1631.67 1212.75 L1632.25 1212.75 L1632.84 1212.75 L1633.42 1212.75 L1634.01 1212.75 L1634.6 1212.75 L1635.18 1212.75 L1635.77 1212.75 L1636.36 1212.75 L1636.94 1212.75 L1637.53 1212.75 L1638.12 1212.75 L1638.7 1212.75 L1639.29 1212.75 L1639.88 1212.75 L1640.46 1212.75 L1641.05 1212.75 L1641.63 1212.75 L1642.22 1212.75 L1642.81 1212.75 L1643.39 1212.75 L1643.98 1212.75 L1644.57 1212.75 L1645.15 1212.75 L1645.74 1212.75 L1646.33 1212.75 L1646.91 1212.75 L1647.5 1212.75 L1648.09 1212.75 L1648.67 1212.75 L1649.26 1212.75 L1649.84 1212.75 L1650.43 1212.75 L1651.02 1212.75 L1651.6 1212.75 L1652.19 1212.75 L1652.78 1212.75 L1653.36 1212.75 L1653.95 1212.75 L1654.54 1212.75 L1655.12 1212.75 L1655.71 1212.75 L1656.29 1212.75 L1656.88 1212.75 L1657.47 1212.75 L1658.05 1212.75 L1658.64 1212.75 L1659.23 1212.75 L1659.81 1212.75 L1660.4 1212.75 L1660.99 1212.75 L1661.57 1212.75 L1662.16 1212.75 L1662.75 1212.75 L1663.33 1212.75 L1663.92 1212.75 L1664.5 1212.75 L1665.09 1212.75 L1665.68 1212.75 L1666.26 1212.75 L1666.85 1212.75 L1667.44 1212.75 L1668.02 1212.75 L1668.61 1212.75 L1669.2 1212.75 L1669.78 1212.75 L1670.37 1212.75 L1670.96 1212.75 L1671.54 1212.75 L1672.13 1212.75 L1672.71 1212.75 L1673.3 1212.75 L1673.89 1212.75 L1674.47 1212.75 L1675.06 1212.75 L1675.65 1212.75 L1676.23 1212.75 L1676.82 1212.75 L1677.41 1212.75 L1677.99 1212.75 L1678.58 1212.75 L1679.17 1212.75 L1679.75 1212.75 L1680.34 1212.75 L1680.92 1212.75 L1681.51 1212.75 L1682.1 1212.75 L1682.68 1212.75 L1683.27 1212.75 L1683.86 1212.75 L1684.44 1212.75 L1685.03 1212.75 L1685.62 1212.75 L1686.2 1212.75 L1686.79 1212.75 L1687.37 1212.75 L1687.96 1212.75 L1688.55 1212.75 L1689.13 1212.75 L1689.72 1212.75 L1690.31 1212.75 L1690.89 1212.75 L1691.48 1212.75 L1692.07 1212.75 L1692.65 1212.75 L1693.24 1212.75 L1693.83 1212.75 L1694.41 1212.75 L1695 1212.75 L1695.58 1212.75 L1696.17 1212.75 L1696.76 1212.75 L1697.34 1212.75 L1697.93 1212.75 L1698.52 1212.75 L1699.1 1212.75 L1699.69 1212.75 L1700.28 1212.75 L1700.86 1212.75 L1701.45 1212.75 L1702.04 1212.75 L1702.62 1212.75 L1703.21 1212.75 L1703.79 1212.75 L1704.38 1212.75 L1704.97 1212.75 L1705.55 1212.75 L1706.14 1212.75 L1706.73 1212.75 L1707.31 1212.75 L1707.9 1212.75 L1708.49 1212.75 L1709.07 1212.75 L1709.66 1212.75 L1710.24 1212.75 L1710.83 1212.75 L1711.42 1212.75 L1712 1212.75 L1712.59 1212.75 L1713.18 1212.75 L1713.76 1212.75 L1714.35 1212.75 L1714.94 1212.75 L1715.52 1212.75 L1716.11 1212.75 L1716.7 1212.75 L1717.28 1212.75 L1717.87 1212.75 L1718.45 1212.75 L1719.04 1212.75 L1719.63 1212.75 L1720.21 1212.75 L1720.8 1212.75 L1721.39 1212.75 L1721.97 1212.75 L1722.56 1212.75 L1723.15 1212.75 L1723.73 1212.75 L1724.32 1212.75 L1724.91 1212.75 L1725.49 1212.75 L1726.08 1212.75 L1726.66 1212.75 L1727.25 1212.75 L1727.84 1212.75 L1728.42 1212.75 L1729.01 1212.75 L1729.6 1212.75 L1730.18 1212.75 L1730.77 1212.75 L1731.36 1212.75 L1731.94 1212.75 L1732.53 1212.75 L1733.11 1212.75 L1733.7 1212.75 L1734.29 1212.75 L1734.87 1212.75 L1735.46 1212.75 L1736.05 1212.75 L1736.63 1212.75 L1737.22 1212.75 L1737.81 1212.75 L1738.39 1212.75 L1738.98 1212.75 L1739.57 1212.75 L1740.15 1212.75 L1740.74 1212.75 L1741.32 1212.75 L1741.91 1212.75 L1742.5 1212.75 L1743.08 1212.75 L1743.67 1212.75 L1744.26 1212.75 L1744.84 1212.75 L1745.43 1212.75 L1746.02 1212.75 L1746.6 1212.75 L1747.19 1212.75 L1747.78 1212.75 L1748.36 1212.75 L1748.95 1212.75 L1749.53 1212.75 L1750.12 1212.75 L1750.71 1212.75 L1751.29 1212.75 L1751.88 1212.75 L1752.47 1212.75 L1753.05 1212.75 L1753.64 1212.75 L1754.23 1212.75 L1754.81 1212.75 L1755.4 1212.75 L1755.99 1212.75 L1756.57 1212.75 L1757.16 1212.75 L1757.74 1212.75 L1758.33 1212.75 L1758.92 1212.75 L1759.5 1212.75 L1760.09 1212.75 L1760.68 1212.75 L1761.26 1212.75 L1761.85 1212.75 L1762.44 1212.75 L1763.02 1212.75 L1763.61 1212.75 L1764.19 1212.75 L1764.78 1212.75 L1765.37 1212.75 L1765.95 1212.75 L1766.54 1212.75 L1767.13 1212.75 L1767.71 1212.75 L1768.3 1212.75 L1768.89 1212.75 L1769.47 1212.75 L1770.06 1212.75 L1770.65 1212.75 L1771.23 1212.75 L1771.82 1212.75 L1772.4 1212.75 L1772.99 1212.75 L1773.58 1212.75 L1774.16 1212.75 L1774.75 1212.75 L1775.34 1212.75 L1775.92 1212.75 L1776.51 1212.75 L1777.1 1212.75 L1777.68 1212.75 L1778.27 1212.75 L1778.86 1212.75 L1779.44 1212.75 L1780.03 1212.75 L1780.61 1212.75 L1781.2 1212.75 L1781.79 1212.75 L1782.37 1212.75 L1782.96 1212.75 L1783.55 1212.75 L1784.13 1212.75 L1784.72 1212.75 L1785.31 1212.75 L1785.89 1212.75 L1786.48 1212.75 L1787.06 1212.75 L1787.65 1212.75 L1788.24 1212.75 L1788.82 1212.75 L1789.41 1212.75 L1790 1212.75 L1790.58 1212.75 L1791.17 1212.75 L1791.76 1212.75 L1792.34 1212.75 L1792.93 1212.75 L1793.52 1212.75 L1794.1 1212.75 L1794.69 1212.75 L1795.27 1212.75 L1795.86 1212.75 L1796.45 1212.75 L1797.03 1212.75 L1797.62 1212.75 L1798.21 1212.75 L1798.79 1212.75 L1799.38 1212.75 L1799.97 1212.75 L1800.55 1212.75 L1801.14 1212.75 L1801.73 1212.75 L1802.31 1212.75 L1802.9 1212.75 L1803.48 1212.75 L1804.07 1212.75 L1804.66 1212.75 L1805.24 1212.75 L1805.83 1212.75 L1806.42 1212.75 L1807 1212.75 L1807.59 1212.75 L1808.18 1212.75 L1808.76 1212.75 L1809.35 1212.75 L1809.94 1212.75 L1810.52 1212.75 L1811.11 1212.75 L1811.69 1212.75 L1812.28 1212.75 L1812.87 1212.75 L1813.45 1212.75 L1814.04 1212.75 L1814.63 1212.75 L1815.21 1212.75 L1815.8 1212.75 L1816.39 1212.75 L1816.97 1212.75 L1817.56 1212.75 L1818.14 1212.75 L1818.73 1212.75 L1819.32 1212.75 L1819.9 1212.75 L1820.49 1212.75 L1821.08 1212.75 L1821.66 1212.75 L1822.25 1212.75 L1822.84 1212.75 L1823.42 1212.75 L1824.01 1212.75 L1824.6 1212.75 L1825.18 1212.75 L1825.77 1212.75 L1826.35 1212.75 L1826.94 1212.75 L1827.53 1212.75 L1828.11 1212.75 L1828.7 1212.75 L1829.29 1212.75 L1829.87 1212.75 L1830.46 1212.75 L1831.05 1212.75 L1831.63 1212.75 L1832.22 1212.75 L1832.81 1212.75 L1833.39 1212.75 L1833.98 1212.75 L1834.56 1212.75 L1835.15 1212.75 L1835.74 1212.75 L1836.32 1212.75 L1836.91 1212.75 L1837.5 1212.75 L1838.08 1212.75 L1838.67 1212.75 L1839.26 1212.75 L1839.84 1212.75 L1840.43 1212.75 L1841.01 1212.75 L1841.6 1212.75 L1842.19 1212.75 L1842.77 1212.75 L1843.36 1212.75 L1843.95 1212.75 L1844.53 1212.75 L1845.12 1212.75 L1845.71 1212.75 L1846.29 1212.75 L1846.88 1212.75 L1847.47 1212.75 L1848.05 1212.75 L1848.64 1212.75 L1849.22 1212.75 L1849.81 1212.75 L1850.4 1212.75 L1850.98 1212.75 L1851.57 1212.75 L1852.16 1212.75 L1852.74 1212.75 L1853.33 1212.75 L1853.92 1212.75 L1854.5 1212.75 L1855.09 1212.75 L1855.68 1212.75 L1856.26 1212.75 L1856.85 1212.75 L1857.43 1212.75 L1858.02 1212.75 L1858.61 1212.75 L1859.19 1212.75 L1859.78 1212.75 L1860.37 1212.75 L1860.95 1212.75 L1861.54 1212.75 L1862.13 1212.75 L1862.71 1212.75 L1863.3 1212.75 L1863.88 1212.75 L1864.47 1212.75 L1865.06 1212.75 L1865.64 1212.75 L1866.23 1212.75 L1866.82 1212.75 L1867.4 1212.75 L1867.99 1212.75 L1868.58 1212.75 L1869.16 1212.75 L1869.75 1212.75 L1870.34 1212.75 L1870.92 1212.75 L1871.51 1212.75 L1872.09 1212.75 L1872.68 1212.75 L1873.27 1212.75 L1873.85 1212.75 L1874.44 1212.75 L1875.03 1212.75 L1875.61 1212.75 L1876.2 1212.75 L1876.79 1212.75 L1877.37 1212.75 L1877.96 1212.75 L1878.55 1212.75 L1879.13 1212.75 L1879.72 1212.75 L1880.3 1212.75 L1880.89 1212.75 L1881.48 1212.75 L1882.06 1212.75 L1882.65 1212.75 L1883.24 1212.75 L1883.82 1212.75 L1884.41 1212.75 L1885 1212.75 L1885.58 1212.75 L1886.17 1212.75 L1886.76 1212.75 L1887.34 1212.75 L1887.93 1212.75 L1888.51 1212.75 L1889.1 1212.75 L1889.69 1212.75 L1890.27 1212.75 L1890.86 1212.75 L1891.45 1212.75 L1892.03 1212.75 L1892.62 1212.75 L1893.21 1212.75 L1893.79 1212.75 L1894.38 1212.75 L1894.96 1212.75 L1895.55 1212.75 L1896.14 1212.75 L1896.72 1212.75 L1897.31 1212.75 L1897.9 1212.75 L1898.48 1212.75 L1899.07 1212.75 L1899.66 1212.75 L1900.24 1212.75 L1900.83 1212.75 L1901.42 1212.75 L1902 1212.75 L1902.59 1212.75 L1903.17 1212.75 L1903.76 1212.75 L1904.35 1212.75 L1904.93 1212.75 L1905.52 1212.75 L1906.11 1212.75 L1906.69 1212.75 L1907.28 1212.75 L1907.87 1212.75 L1908.45 1212.75 L1909.04 1212.75 L1909.63 1212.75 L1910.21 1212.75 L1910.8 1212.75 L1911.38 1212.75 L1911.97 1212.75 L1912.56 1212.75 L1913.14 1212.75 L1913.73 1212.75 L1914.32 1212.75 L1914.9 1212.75 L1915.49 1212.75 L1916.08 1212.75 L1916.66 1212.75 L1917.25 1212.75 L1917.83 1212.75 L1918.42 1212.75 L1919.01 1212.75 L1919.59 1212.75 L1920.18 1212.75 L1920.77 1212.75 L1921.35 1212.75 L1921.94 1212.75 L1922.53 1212.75 L1923.11 1212.75 L1923.7 1212.75 L1924.29 1212.75 L1924.87 1212.75 L1925.46 1212.75 L1926.04 1212.75 L1926.63 1212.75 L1927.22 1212.75 L1927.8 1212.75 L1928.39 1212.75 L1928.98 1212.75 L1929.56 1212.75 L1930.15 1212.75 L1930.74 1212.75 L1931.32 1212.75 L1931.91 1212.75 L1932.5 1212.75 L1933.08 1212.75 L1933.67 1212.75 L1934.25 1212.75 L1934.84 1212.75 L1935.43 1212.75 L1936.01 1212.75 L1936.6 1212.75 L1937.19 1212.75 L1937.77 1212.75 L1938.36 1212.75 L1938.95 1212.75 L1939.53 1212.75 L1940.12 1212.75 L1940.71 1212.75 L1941.29 1212.75 L1941.88 1212.75 L1942.46 1212.75 L1943.05 1212.75 L1943.64 1212.75 L1944.22 1212.75 L1944.81 1212.75 L1945.4 1212.75 L1945.98 1212.75 L1946.57 1212.75 L1947.16 1212.75 L1947.74 1212.75 L1948.33 1212.75 L1948.91 1212.75 L1949.5 1212.75 L1950.09 1212.75 L1950.67 1212.75 L1951.26 1212.75 L1951.85 1212.75 L1952.43 1212.75 L1953.02 1212.75 L1953.61 1212.75 L1954.19 1212.75 L1954.78 1212.75 L1955.37 1212.75 L1955.95 1212.75 L1956.54 1212.75 L1957.12 1212.75 L1957.71 1212.75 L1958.3 1212.75 L1958.88 1212.75 L1959.47 1212.75 L1960.06 1212.75 L1960.64 1212.75 L1961.23 1212.75 L1961.82 1212.75 L1962.4 1212.75 L1962.99 1212.75 L1963.58 1212.75 L1964.16 1212.75 L1964.75 1212.75 L1965.33 1212.75 L1965.92 1212.75 L1966.51 1212.75 L1967.09 1212.75 L1967.68 1212.75 L1968.27 1212.75 L1968.85 1212.75 L1969.44 1212.75 L1970.03 1212.75 L1970.61 1212.75 L1971.2 1212.75 L1971.78 1212.75 L1972.37 1212.75 L1972.96 1212.75 L1973.54 1212.75 L1974.13 1212.75 L1974.72 1212.75 L1975.3 1212.75 L1975.89 1212.75 L1976.48 1212.75 L1977.06 1212.75 L1977.65 1212.75 L1978.24 1212.75 L1978.82 1212.75 L1979.41 1212.75 L1979.99 1212.75 L1980.58 1212.75 L1981.17 1212.75 L1981.75 1212.75 L1982.34 1212.75 L1982.93 1212.75 L1983.51 1212.75 L1984.1 1212.75 L1984.69 1212.75 L1985.27 1212.75 L1985.86 1212.75 L1986.45 1212.75 L1987.03 1212.75 L1987.62 1212.75 L1988.2 1212.75 L1988.79 1212.75 L1989.38 1212.75 L1989.96 1212.75 L1990.55 1212.75 L1991.14 1212.75 L1991.72 1212.75 L1992.31 1212.75 L1992.9 1212.75 L1993.48 1212.75 L1994.07 1212.75 L1994.65 1212.75 L1995.24 1212.75 L1995.83 1212.75 L1996.41 1212.75 L1997 1212.75 L1997.59 1212.75 L1998.17 1212.75 L1998.76 1212.75 L1999.35 1212.75 L1999.93 1212.75 L2000.52 1212.75 L2001.11 1212.75 L2001.69 1212.75 L2002.28 1212.75 L2002.86 1212.75 L2003.45 1212.75 L2004.04 1212.75 L2004.62 1212.75 L2005.21 1212.75 L2005.8 1212.75 L2006.38 1212.75 L2006.97 1212.75 L2007.56 1212.75 L2008.14 1212.75 L2008.73 1212.75 L2009.32 1212.75 L2009.9 1212.75 L2010.49 1212.75 L2011.07 1212.75 L2011.66 1212.75 L2012.25 1212.75 L2012.83 1212.75 L2013.42 1212.75 L2014.01 1212.75 L2014.59 1212.75 L2015.18 1212.75 L2015.77 1212.75 L2016.35 1212.75 L2016.94 1212.75 L2017.53 1212.75 L2018.11 1212.75 L2018.7 1212.75 L2019.28 1212.75 L2019.87 1212.75 L2020.46 1212.75 L2021.04 1212.75 L2021.63 1212.75 L2022.22 1212.75 L2022.8 1212.75 L2023.39 1212.75 L2023.98 1212.75 L2024.56 1212.75 L2025.15 1212.75 L2025.73 1212.75 L2026.32 1212.75 L2026.91 1212.75 L2027.49 1212.75 L2028.08 1212.75 L2028.67 1212.75 L2029.25 1212.75 L2029.84 1212.75 L2030.43 1212.75 L2031.01 1212.75 L2031.6 1212.75 L2032.19 1212.75 L2032.77 1212.75 L2033.36 1212.75 L2033.94 1212.75 L2034.53 1212.75 L2035.12 1212.75 L2035.7 1212.75 L2036.29 1212.75 L2036.88 1212.75 L2037.46 1212.75 L2038.05 1212.75 L2038.64 1212.75 L2039.22 1212.75 L2039.81 1212.75 L2040.4 1212.75 L2040.98 1212.75 L2041.57 1212.75 L2042.15 1212.75 L2042.74 1212.75 L2043.33 1212.75 L2043.91 1212.75 L2044.5 1212.75 L2045.09 1212.75 L2045.67 1212.75 L2046.26 1212.75 L2046.85 1212.75 L2047.43 1212.75 L2048.02 1212.75 L2048.6 1212.75 L2049.19 1212.75 L2049.78 1212.75 L2050.36 1212.75 L2050.95 1212.75 L2051.54 1212.75 L2052.12 1212.75 L2052.71 1212.75 L2053.3 1212.75 L2053.88 1212.75 L2054.47 1212.75 L2055.06 1212.75 L2055.64 1212.75 L2056.23 1212.75 L2056.81 1212.75 L2057.4 1212.75 L2057.99 1212.75 L2058.57 1212.75 L2059.16 1212.75 L2059.75 1212.75 L2060.33 1212.75 L2060.92 1212.75 L2061.51 1212.75 L2062.09 1212.75 L2062.68 1212.75 L2063.27 1212.75 L2063.85 1212.75 L2064.44 1212.75 L2065.02 1212.75 L2065.61 1212.75 L2066.2 1212.75 L2066.78 1212.75 L2067.37 1212.75 L2067.96 1212.75 L2068.54 1212.75 L2069.13 1212.75 L2069.72 1212.75 L2070.3 1212.75 L2070.89 1212.75 L2071.48 1212.75 L2072.06 1212.75 L2072.65 1212.75 L2073.23 1212.75 L2073.82 1212.75 L2074.41 1212.75 L2074.99 1212.75 L2075.58 1212.75 L2076.17 1212.75 L2076.75 1212.75 L2077.34 1212.75 L2077.93 1212.75 L2078.51 1212.75 L2079.1 1212.75 L2079.68 1212.75 L2080.27 1212.75 L2080.86 1212.75 L2081.44 1212.75 L2082.03 1212.75 L2082.62 1212.75 L2083.2 1212.75 L2083.79 1212.75 L2084.38 1212.75 L2084.96 1212.75 L2085.55 1212.75 L2086.14 1212.75 L2086.72 1212.75 L2087.31 1212.75 L2087.89 1212.75 L2088.48 1212.75 L2089.07 1212.75 L2089.65 1212.75 L2090.24 1212.75 L2090.83 1212.75 L2091.41 1212.75 L2092 1212.75 L2092.59 1212.75 L2093.17 1212.75 L2093.76 1212.75 L2094.35 1212.75 L2094.93 1212.75 L2095.52 1212.75 L2096.1 1212.75 L2096.69 1212.75 L2097.28 1212.75 L2097.86 1212.75 L2098.45 1212.75 L2099.04 1212.75 L2099.62 1212.75 L2100.21 1212.75 L2100.8 1212.75 L2101.38 1212.75 L2101.97 1212.75 L2102.55 1212.75 L2103.14 1212.75 L2103.73 1212.75 L2104.31 1212.75 L2104.9 1212.75 L2105.49 1212.75 L2106.07 1212.75 L2106.66 1212.75 L2107.25 1212.75 L2107.83 1212.75 L2108.42 1212.75 L2109.01 1212.75 L2109.59 1212.75 L2110.18 1212.75 L2110.76 1212.75 L2111.35 1212.75 L2111.94 1212.75 L2112.52 1212.75 L2113.11 1212.75 L2113.7 1212.75 L2114.28 1212.75 L2114.87 1212.75 L2115.46 1212.75 L2116.04 1212.75 L2116.63 1212.75 L2117.22 1212.75 L2117.8 1212.75 L2118.39 1212.75 L2118.97 1212.75 L2119.56 1212.75 L2120.15 1212.75 L2120.73 1212.75 L2121.32 1212.75 L2121.91 1212.75 L2122.49 1212.75 L2123.08 1212.75 L2123.67 1212.75 L2124.25 1212.75 L2124.84 1212.75 L2125.42 1212.75 L2126.01 1212.75 L2126.6 1212.75 L2127.18 1212.75 L2127.77 1212.75 L2128.36 1212.75 L2128.94 1212.75 L2129.53 1212.75 L2130.12 1212.75 L2130.7 1212.75 L2131.29 1212.75 L2131.88 1212.75 L2132.46 1212.75 L2133.05 1212.75 L2133.63 1212.75 L2134.22 1212.75 L2134.81 1212.75 L2135.39 1212.75 L2135.98 1212.75 L2136.57 1212.75 L2137.15 1212.75 L2137.74 1212.75 L2138.33 1212.75 L2138.91 1212.75 L2139.5 1212.75 L2140.09 1212.75 L2140.67 1212.75 L2141.26 1212.75 L2141.84 1212.75 L2142.43 1212.75 L2143.02 1212.75 L2143.6 1212.75 L2144.19 1212.75 L2144.78 1212.75 L2145.36 1212.75 L2145.95 1212.75 L2146.54 1212.75 L2147.12 1212.75 L2147.71 1212.75 L2148.3 1212.75 L2148.88 1212.75 L2149.47 1212.75 L2150.05 1212.75 L2150.64 1212.75 L2151.23 1212.75 L2151.81 1212.75 L2152.4 1212.75 L2152.99 1212.75 L2153.57 1212.75 L2154.16 1212.75 L2154.75 1212.75 L2155.33 1212.75 L2155.92 1212.75 L2156.5 1212.75 L2157.09 1212.75 L2157.68 1212.75 L2158.26 1212.75 L2158.26 1212.6 L2157.68 1212.6 L2157.09 1212.6 L2156.5 1212.6 L2155.92 1212.6 L2155.33 1212.6 L2154.75 1212.6 L2154.16 1212.6 L2153.57 1212.6 L2152.99 1212.6 L2152.4 1212.6 L2151.81 1212.6 L2151.23 1212.6 L2150.64 1212.6 L2150.05 1212.6 L2149.47 1212.6 L2148.88 1212.6 L2148.3 1212.6 L2147.71 1212.6 L2147.12 1212.6 L2146.54 1212.6 L2145.95 1212.6 L2145.36 1212.6 L2144.78 1212.6 L2144.19 1212.6 L2143.6 1212.6 L2143.02 1212.6 L2142.43 1212.6 L2141.84 1212.6 L2141.26 1212.6 L2140.67 1212.6 L2140.09 1212.6 L2139.5 1212.6 L2138.91 1212.6 L2138.33 1212.6 L2137.74 1212.6 L2137.15 1212.6 L2136.57 1212.6 L2135.98 1212.6 L2135.39 1212.6 L2134.81 1212.6 L2134.22 1212.6 L2133.63 1212.6 L2133.05 1212.6 L2132.46 1212.6 L2131.88 1212.6 L2131.29 1212.6 L2130.7 1212.6 L2130.12 1212.6 L2129.53 1212.6 L2128.94 1212.6 L2128.36 1212.6 L2127.77 1212.6 L2127.18 1212.6 L2126.6 1212.6 L2126.01 1212.6 L2125.42 1212.6 L2124.84 1212.6 L2124.25 1212.6 L2123.67 1212.6 L2123.08 1212.6 L2122.49 1212.6 L2121.91 1212.6 L2121.32 1212.6 L2120.73 1212.6 L2120.15 1212.6 L2119.56 1212.6 L2118.97 1212.6 L2118.39 1212.6 L2117.8 1212.6 L2117.22 1212.6 L2116.63 1212.6 L2116.04 1212.6 L2115.46 1212.6 L2114.87 1212.6 L2114.28 1212.6 L2113.7 1212.6 L2113.11 1212.6 L2112.52 1212.6 L2111.94 1212.6 L2111.35 1212.6 L2110.76 1212.6 L2110.18 1212.6 L2109.59 1212.6 L2109.01 1212.6 L2108.42 1212.6 L2107.83 1212.6 L2107.25 1212.6 L2106.66 1212.6 L2106.07 1212.6 L2105.49 1212.6 L2104.9 1212.6 L2104.31 1212.6 L2103.73 1212.6 L2103.14 1212.6 L2102.55 1212.6 L2101.97 1212.6 L2101.38 1212.6 L2100.8 1212.6 L2100.21 1212.6 L2099.62 1212.6 L2099.04 1212.6 L2098.45 1212.6 L2097.86 1212.6 L2097.28 1212.6 L2096.69 1212.6 L2096.1 1212.6 L2095.52 1212.6 L2094.93 1212.6 L2094.35 1212.6 L2093.76 1212.6 L2093.17 1212.6 L2092.59 1212.6 L2092 1212.6 L2091.41 1212.6 L2090.83 1212.6 L2090.24 1212.6 L2089.65 1212.6 L2089.07 1212.6 L2088.48 1212.6 L2087.89 1212.6 L2087.31 1212.6 L2086.72 1212.6 L2086.14 1212.6 L2085.55 1212.6 L2084.96 1212.6 L2084.38 1212.6 L2083.79 1212.6 L2083.2 1212.6 L2082.62 1212.6 L2082.03 1212.6 L2081.44 1212.6 L2080.86 1212.6 L2080.27 1212.6 L2079.68 1212.6 L2079.1 1212.6 L2078.51 1212.6 L2077.93 1212.6 L2077.34 1212.6 L2076.75 1212.6 L2076.17 1212.6 L2075.58 1212.6 L2074.99 1212.6 L2074.41 1212.6 L2073.82 1212.6 L2073.23 1212.6 L2072.65 1212.6 L2072.06 1212.6 L2071.48 1212.6 L2070.89 1212.6 L2070.3 1212.6 L2069.72 1212.6 L2069.13 1212.6 L2068.54 1212.6 L2067.96 1212.6 L2067.37 1212.6 L2066.78 1212.6 L2066.2 1212.6 L2065.61 1212.6 L2065.02 1212.6 L2064.44 1212.6 L2063.85 1212.6 L2063.27 1212.6 L2062.68 1212.6 L2062.09 1212.6 L2061.51 1212.6 L2060.92 1212.6 L2060.33 1212.6 L2059.75 1212.6 L2059.16 1212.6 L2058.57 1212.6 L2057.99 1212.6 L2057.4 1212.6 L2056.81 1212.6 L2056.23 1212.6 L2055.64 1212.6 L2055.06 1212.6 L2054.47 1212.6 L2053.88 1212.6 L2053.3 1212.6 L2052.71 1212.6 L2052.12 1212.6 L2051.54 1212.6 L2050.95 1212.6 L2050.36 1212.6 L2049.78 1212.6 L2049.19 1212.6 L2048.6 1212.6 L2048.02 1212.6 L2047.43 1212.6 L2046.85 1212.6 L2046.26 1212.6 L2045.67 1212.6 L2045.09 1212.6 L2044.5 1212.6 L2043.91 1212.6 L2043.33 1212.6 L2042.74 1212.6 L2042.15 1212.6 L2041.57 1212.6 L2040.98 1212.6 L2040.4 1212.6 L2039.81 1212.6 L2039.22 1212.6 L2038.64 1212.6 L2038.05 1212.6 L2037.46 1212.6 L2036.88 1212.6 L2036.29 1212.6 L2035.7 1212.6 L2035.12 1212.6 L2034.53 1212.6 L2033.94 1212.6 L2033.36 1212.6 L2032.77 1212.6 L2032.19 1212.6 L2031.6 1212.6 L2031.01 1212.6 L2030.43 1212.6 L2029.84 1212.6 L2029.25 1212.6 L2028.67 1212.6 L2028.08 1212.6 L2027.49 1212.6 L2026.91 1212.6 L2026.32 1212.6 L2025.73 1212.6 L2025.15 1212.6 L2024.56 1212.6 L2023.98 1212.6 L2023.39 1212.6 L2022.8 1212.6 L2022.22 1212.6 L2021.63 1212.6 L2021.04 1212.6 L2020.46 1212.6 L2019.87 1212.6 L2019.28 1212.6 L2018.7 1212.6 L2018.11 1212.6 L2017.53 1212.6 L2016.94 1212.6 L2016.35 1212.6 L2015.77 1212.6 L2015.18 1212.6 L2014.59 1212.6 L2014.01 1212.6 L2013.42 1212.6 L2012.83 1212.6 L2012.25 1212.6 L2011.66 1212.6 L2011.07 1212.6 L2010.49 1212.6 L2009.9 1212.6 L2009.32 1212.6 L2008.73 1212.6 L2008.14 1212.6 L2007.56 1212.6 L2006.97 1212.6 L2006.38 1212.6 L2005.8 1212.6 L2005.21 1212.6 L2004.62 1212.6 L2004.04 1212.6 L2003.45 1212.6 L2002.86 1212.6 L2002.28 1212.6 L2001.69 1212.6 L2001.11 1212.6 L2000.52 1212.6 L1999.93 1212.6 L1999.35 1212.6 L1998.76 1212.6 L1998.17 1212.6 L1997.59 1212.6 L1997 1212.6 L1996.41 1212.6 L1995.83 1212.6 L1995.24 1212.6 L1994.65 1212.6 L1994.07 1212.6 L1993.48 1212.6 L1992.9 1212.6 L1992.31 1212.6 L1991.72 1212.6 L1991.14 1212.6 L1990.55 1212.6 L1989.96 1212.6 L1989.38 1212.6 L1988.79 1212.6 L1988.2 1212.6 L1987.62 1212.6 L1987.03 1212.6 L1986.45 1212.6 L1985.86 1212.6 L1985.27 1212.6 L1984.69 1212.6 L1984.1 1212.6 L1983.51 1212.6 L1982.93 1212.6 L1982.34 1212.6 L1981.75 1212.6 L1981.17 1212.6 L1980.58 1212.6 L1979.99 1212.6 L1979.41 1212.6 L1978.82 1212.6 L1978.24 1212.6 L1977.65 1212.6 L1977.06 1212.6 L1976.48 1212.6 L1975.89 1212.6 L1975.3 1212.6 L1974.72 1212.6 L1974.13 1212.6 L1973.54 1212.6 L1972.96 1212.6 L1972.37 1212.6 L1971.78 1212.6 L1971.2 1212.6 L1970.61 1212.6 L1970.03 1212.6 L1969.44 1212.6 L1968.85 1212.6 L1968.27 1212.6 L1967.68 1212.6 L1967.09 1212.6 L1966.51 1212.6 L1965.92 1212.6 L1965.33 1212.6 L1964.75 1212.6 L1964.16 1212.6 L1963.58 1212.6 L1962.99 1212.6 L1962.4 1212.6 L1961.82 1212.6 L1961.23 1212.6 L1960.64 1212.6 L1960.06 1212.6 L1959.47 1212.6 L1958.88 1212.6 L1958.3 1212.6 L1957.71 1212.6 L1957.12 1212.6 L1956.54 1212.6 L1955.95 1212.6 L1955.37 1212.6 L1954.78 1212.6 L1954.19 1212.6 L1953.61 1212.6 L1953.02 1212.6 L1952.43 1212.6 L1951.85 1212.6 L1951.26 1212.6 L1950.67 1212.6 L1950.09 1212.6 L1949.5 1212.6 L1948.91 1212.6 L1948.33 1212.6 L1947.74 1212.6 L1947.16 1212.6 L1946.57 1212.6 L1945.98 1212.6 L1945.4 1212.6 L1944.81 1212.6 L1944.22 1212.6 L1943.64 1212.6 L1943.05 1212.6 L1942.46 1212.6 L1941.88 1212.6 L1941.29 1212.6 L1940.71 1212.6 L1940.12 1212.6 L1939.53 1212.6 L1938.95 1212.6 L1938.36 1212.6 L1937.77 1212.6 L1937.19 1212.6 L1936.6 1212.6 L1936.01 1212.6 L1935.43 1212.6 L1934.84 1212.6 L1934.25 1212.6 L1933.67 1212.6 L1933.08 1212.6 L1932.5 1212.6 L1931.91 1212.6 L1931.32 1212.6 L1930.74 1212.6 L1930.15 1212.6 L1929.56 1212.6 L1928.98 1212.6 L1928.39 1212.6 L1927.8 1212.6 L1927.22 1212.6 L1926.63 1212.6 L1926.04 1212.6 L1925.46 1212.6 L1924.87 1212.6 L1924.29 1212.6 L1923.7 1212.6 L1923.11 1212.6 L1922.53 1212.6 L1921.94 1212.6 L1921.35 1212.6 L1920.77 1212.6 L1920.18 1212.6 L1919.59 1212.6 L1919.01 1212.6 L1918.42 1212.6 L1917.83 1212.6 L1917.25 1212.6 L1916.66 1212.6 L1916.08 1212.6 L1915.49 1212.6 L1914.9 1212.6 L1914.32 1212.6 L1913.73 1212.6 L1913.14 1212.6 L1912.56 1212.6 L1911.97 1212.6 L1911.38 1212.6 L1910.8 1212.6 L1910.21 1212.6 L1909.63 1212.6 L1909.04 1212.6 L1908.45 1212.6 L1907.87 1212.6 L1907.28 1212.6 L1906.69 1212.6 L1906.11 1212.6 L1905.52 1212.6 L1904.93 1212.6 L1904.35 1212.6 L1903.76 1212.6 L1903.17 1212.6 L1902.59 1212.6 L1902 1212.6 L1901.42 1212.6 L1900.83 1212.6 L1900.24 1212.6 L1899.66 1212.6 L1899.07 1212.6 L1898.48 1212.6 L1897.9 1212.6 L1897.31 1212.6 L1896.72 1212.6 L1896.14 1212.6 L1895.55 1212.6 L1894.96 1212.6 L1894.38 1212.6 L1893.79 1212.6 L1893.21 1212.6 L1892.62 1212.6 L1892.03 1212.6 L1891.45 1212.6 L1890.86 1212.6 L1890.27 1212.6 L1889.69 1212.6 L1889.1 1212.6 L1888.51 1212.6 L1887.93 1212.6 L1887.34 1212.6 L1886.76 1212.6 L1886.17 1212.6 L1885.58 1212.6 L1885 1212.6 L1884.41 1212.6 L1883.82 1212.6 L1883.24 1212.6 L1882.65 1212.6 L1882.06 1212.6 L1881.48 1212.6 L1880.89 1212.6 L1880.3 1212.6 L1879.72 1212.6 L1879.13 1212.6 L1878.55 1212.6 L1877.96 1212.6 L1877.37 1212.6 L1876.79 1212.6 L1876.2 1212.6 L1875.61 1212.6 L1875.03 1212.6 L1874.44 1212.6 L1873.85 1212.6 L1873.27 1212.6 L1872.68 1212.6 L1872.09 1212.6 L1871.51 1212.6 L1870.92 1212.6 L1870.34 1212.6 L1869.75 1212.6 L1869.16 1212.6 L1868.58 1212.6 L1867.99 1212.6 L1867.4 1212.6 L1866.82 1212.6 L1866.23 1212.6 L1865.64 1212.6 L1865.06 1212.6 L1864.47 1212.6 L1863.88 1212.6 L1863.3 1212.6 L1862.71 1212.6 L1862.13 1212.6 L1861.54 1212.6 L1860.95 1212.6 L1860.37 1212.6 L1859.78 1212.6 L1859.19 1212.6 L1858.61 1212.6 L1858.02 1212.6 L1857.43 1212.6 L1856.85 1212.6 L1856.26 1212.6 L1855.68 1212.6 L1855.09 1212.6 L1854.5 1212.6 L1853.92 1212.6 L1853.33 1212.6 L1852.74 1212.6 L1852.16 1212.6 L1851.57 1212.6 L1850.98 1212.6 L1850.4 1212.6 L1849.81 1212.6 L1849.22 1212.6 L1848.64 1212.6 L1848.05 1212.6 L1847.47 1212.6 L1846.88 1212.6 L1846.29 1212.6 L1845.71 1212.6 L1845.12 1212.6 L1844.53 1212.6 L1843.95 1212.6 L1843.36 1212.6 L1842.77 1212.6 L1842.19 1212.6 L1841.6 1212.6 L1841.01 1212.6 L1840.43 1212.6 L1839.84 1212.6 L1839.26 1212.6 L1838.67 1212.6 L1838.08 1212.6 L1837.5 1212.6 L1836.91 1212.6 L1836.32 1212.6 L1835.74 1212.6 L1835.15 1212.6 L1834.56 1212.6 L1833.98 1212.6 L1833.39 1212.6 L1832.81 1212.6 L1832.22 1212.6 L1831.63 1212.6 L1831.05 1212.6 L1830.46 1212.6 L1829.87 1212.6 L1829.29 1212.6 L1828.7 1212.6 L1828.11 1212.6 L1827.53 1212.6 L1826.94 1212.6 L1826.35 1212.6 L1825.77 1212.6 L1825.18 1212.6 L1824.6 1212.6 L1824.01 1212.6 L1823.42 1212.6 L1822.84 1212.6 L1822.25 1212.6 L1821.66 1212.6 L1821.08 1212.6 L1820.49 1212.6 L1819.9 1212.6 L1819.32 1212.6 L1818.73 1212.6 L1818.14 1212.6 L1817.56 1212.6 L1816.97 1212.6 L1816.39 1212.6 L1815.8 1212.6 L1815.21 1212.6 L1814.63 1212.6 L1814.04 1212.6 L1813.45 1212.6 L1812.87 1212.6 L1812.28 1212.6 L1811.69 1212.6 L1811.11 1212.6 L1810.52 1212.6 L1809.94 1212.6 L1809.35 1212.6 L1808.76 1212.6 L1808.18 1212.6 L1807.59 1212.6 L1807 1212.6 L1806.42 1212.6 L1805.83 1212.6 L1805.24 1212.6 L1804.66 1212.6 L1804.07 1212.6 L1803.48 1212.6 L1802.9 1212.6 L1802.31 1212.6 L1801.73 1212.6 L1801.14 1212.6 L1800.55 1212.6 L1799.97 1212.6 L1799.38 1212.6 L1798.79 1212.6 L1798.21 1212.6 L1797.62 1212.6 L1797.03 1212.6 L1796.45 1212.6 L1795.86 1212.6 L1795.27 1212.6 L1794.69 1212.6 L1794.1 1212.6 L1793.52 1212.6 L1792.93 1212.6 L1792.34 1212.6 L1791.76 1212.6 L1791.17 1212.6 L1790.58 1212.6 L1790 1212.6 L1789.41 1212.6 L1788.82 1212.6 L1788.24 1212.6 L1787.65 1212.6 L1787.06 1212.6 L1786.48 1212.6 L1785.89 1212.6 L1785.31 1212.6 L1784.72 1212.6 L1784.13 1212.6 L1783.55 1212.6 L1782.96 1212.6 L1782.37 1212.6 L1781.79 1212.6 L1781.2 1212.6 L1780.61 1212.6 L1780.03 1212.6 L1779.44 1212.6 L1778.86 1212.6 L1778.27 1212.6 L1777.68 1212.6 L1777.1 1212.6 L1776.51 1212.6 L1775.92 1212.6 L1775.34 1212.6 L1774.75 1212.6 L1774.16 1212.6 L1773.58 1212.6 L1772.99 1212.6 L1772.4 1212.6 L1771.82 1212.6 L1771.23 1212.6 L1770.65 1212.6 L1770.06 1212.6 L1769.47 1212.6 L1768.89 1212.6 L1768.3 1212.6 L1767.71 1212.6 L1767.13 1212.6 L1766.54 1212.6 L1765.95 1212.6 L1765.37 1212.6 L1764.78 1212.6 L1764.19 1212.6 L1763.61 1212.6 L1763.02 1212.6 L1762.44 1212.6 L1761.85 1212.6 L1761.26 1212.6 L1760.68 1212.6 L1760.09 1212.6 L1759.5 1212.6 L1758.92 1212.6 L1758.33 1212.6 L1757.74 1212.6 L1757.16 1212.6 L1756.57 1212.6 L1755.99 1212.6 L1755.4 1212.6 L1754.81 1212.6 L1754.23 1212.6 L1753.64 1212.6 L1753.05 1212.6 L1752.47 1212.6 L1751.88 1212.6 L1751.29 1212.6 L1750.71 1212.6 L1750.12 1212.6 L1749.53 1212.6 L1748.95 1212.6 L1748.36 1212.6 L1747.78 1212.6 L1747.19 1212.6 L1746.6 1212.6 L1746.02 1212.6 L1745.43 1212.6 L1744.84 1212.6 L1744.26 1212.6 L1743.67 1212.6 L1743.08 1212.6 L1742.5 1212.6 L1741.91 1212.6 L1741.32 1212.6 L1740.74 1212.6 L1740.15 1212.6 L1739.57 1212.6 L1738.98 1212.6 L1738.39 1212.6 L1737.81 1212.6 L1737.22 1212.6 L1736.63 1212.6 L1736.05 1212.6 L1735.46 1212.6 L1734.87 1212.6 L1734.29 1212.6 L1733.7 1212.6 L1733.11 1212.6 L1732.53 1212.6 L1731.94 1212.6 L1731.36 1212.6 L1730.77 1212.6 L1730.18 1212.6 L1729.6 1212.6 L1729.01 1212.6 L1728.42 1212.6 L1727.84 1212.6 L1727.25 1212.6 L1726.66 1212.6 L1726.08 1212.6 L1725.49 1212.6 L1724.91 1212.6 L1724.32 1212.6 L1723.73 1212.6 L1723.15 1212.6 L1722.56 1212.6 L1721.97 1212.6 L1721.39 1212.6 L1720.8 1212.6 L1720.21 1212.6 L1719.63 1212.6 L1719.04 1212.6 L1718.45 1212.6 L1717.87 1212.6 L1717.28 1212.6 L1716.7 1212.6 L1716.11 1212.6 L1715.52 1212.6 L1714.94 1212.6 L1714.35 1212.6 L1713.76 1212.6 L1713.18 1212.6 L1712.59 1212.6 L1712 1212.6 L1711.42 1212.6 L1710.83 1212.6 L1710.24 1212.6 L1709.66 1212.6 L1709.07 1212.6 L1708.49 1212.6 L1707.9 1212.6 L1707.31 1212.6 L1706.73 1212.6 L1706.14 1212.6 L1705.55 1212.6 L1704.97 1212.6 L1704.38 1212.6 L1703.79 1212.6 L1703.21 1212.6 L1702.62 1212.6 L1702.04 1212.6 L1701.45 1212.6 L1700.86 1212.6 L1700.28 1212.6 L1699.69 1212.6 L1699.1 1212.6 L1698.52 1212.6 L1697.93 1212.6 L1697.34 1212.6 L1696.76 1212.6 L1696.17 1212.6 L1695.58 1212.6 L1695 1212.6 L1694.41 1212.6 L1693.83 1212.6 L1693.24 1212.6 L1692.65 1212.6 L1692.07 1212.6 L1691.48 1212.6 L1690.89 1212.6 L1690.31 1212.6 L1689.72 1212.6 L1689.13 1212.6 L1688.55 1212.6 L1687.96 1212.6 L1687.37 1212.6 L1686.79 1212.6 L1686.2 1212.6 L1685.62 1212.6 L1685.03 1212.6 L1684.44 1212.6 L1683.86 1212.6 L1683.27 1212.6 L1682.68 1212.6 L1682.1 1212.6 L1681.51 1212.6 L1680.92 1212.6 L1680.34 1212.6 L1679.75 1212.6 L1679.17 1212.6 L1678.58 1212.6 L1677.99 1212.6 L1677.41 1212.6 L1676.82 1212.6 L1676.23 1212.6 L1675.65 1212.6 L1675.06 1212.6 L1674.47 1212.6 L1673.89 1212.6 L1673.3 1212.6 L1672.71 1212.6 L1672.13 1212.6 L1671.54 1212.6 L1670.96 1212.6 L1670.37 1212.6 L1669.78 1212.6 L1669.2 1212.6 L1668.61 1212.6 L1668.02 1212.6 L1667.44 1212.6 L1666.85 1212.6 L1666.26 1212.6 L1665.68 1212.6 L1665.09 1212.6 L1664.5 1212.6 L1663.92 1212.6 L1663.33 1212.6 L1662.75 1212.6 L1662.16 1212.6 L1661.57 1212.6 L1660.99 1212.6 L1660.4 1212.6 L1659.81 1212.6 L1659.23 1212.6 L1658.64 1212.6 L1658.05 1212.6 L1657.47 1212.6 L1656.88 1212.6 L1656.29 1212.6 L1655.71 1212.6 L1655.12 1212.6 L1654.54 1212.6 L1653.95 1212.6 L1653.36 1212.6 L1652.78 1212.6 L1652.19 1212.6 L1651.6 1212.6 L1651.02 1212.6 L1650.43 1212.6 L1649.84 1212.6 L1649.26 1212.6 L1648.67 1212.6 L1648.09 1212.6 L1647.5 1212.6 L1646.91 1212.6 L1646.33 1212.6 L1645.74 1212.6 L1645.15 1212.6 L1644.57 1212.6 L1643.98 1212.6 L1643.39 1212.6 L1642.81 1212.6 L1642.22 1212.6 L1641.63 1212.6 L1641.05 1212.6 L1640.46 1212.6 L1639.88 1212.6 L1639.29 1212.6 L1638.7 1212.6 L1638.12 1212.6 L1637.53 1212.6 L1636.94 1212.6 L1636.36 1212.6 L1635.77 1212.6 L1635.18 1212.6 L1634.6 1212.6 L1634.01 1212.6 L1633.42 1212.6 L1632.84 1212.6 L1632.25 1212.6 L1631.67 1212.6 L1631.08 1212.6 L1630.49 1212.6 L1629.91 1212.6 L1629.32 1212.6 L1628.73 1212.6 L1628.15 1212.6 L1627.56 1212.6 L1626.97 1212.6 L1626.39 1212.6 L1625.8 1212.6 L1625.22 1212.6 L1624.63 1212.6 L1624.04 1212.6 L1623.46 1212.6 L1622.87 1212.6 L1622.28 1212.6 L1621.7 1212.6 L1621.11 1212.6 L1620.52 1212.6 L1619.94 1212.6 L1619.35 1212.6 L1618.76 1212.6 L1618.18 1212.6 L1617.59 1212.6 L1617.01 1212.6 L1616.42 1212.6 L1615.83 1212.6 L1615.25 1212.6 L1614.66 1212.6 L1614.07 1212.6 L1613.49 1212.6 L1612.9 1212.6 L1612.31 1212.6 L1611.73 1212.6 L1611.14 1212.6 L1610.55 1212.6 L1609.97 1212.6 L1609.38 1212.6 L1608.8 1212.6 L1608.21 1212.6 L1607.62 1212.6 L1607.04 1212.6 L1606.45 1212.6 L1605.86 1212.6 L1605.28 1212.6 L1604.69 1212.6 L1604.1 1212.6 L1603.52 1212.6 L1602.93 1212.6 L1602.34 1212.6 L1601.76 1212.6 L1601.17 1212.6 L1600.59 1212.6 L1600 1212.6 L1599.41 1212.6 L1598.83 1212.6 L1598.24 1212.6 L1597.65 1212.6 L1597.07 1212.6 L1596.48 1212.6 L1595.89 1212.6 L1595.31 1212.6 L1594.72 1212.6 L1594.14 1212.6 L1593.55 1212.6 L1592.96 1212.6 L1592.38 1212.6 L1591.79 1212.6 L1591.2 1212.6 L1590.62 1212.6 L1590.03 1212.6 L1589.44 1212.6 L1588.86 1212.6 L1588.27 1212.6 L1587.68 1212.6 L1587.1 1212.6 L1586.51 1212.6 L1585.93 1212.6 L1585.34 1212.6 L1584.75 1212.6 L1584.17 1212.6 L1583.58 1212.6 L1582.99 1212.6 L1582.41 1212.6 L1581.82 1212.6 L1581.23 1212.6 L1580.65 1212.6 L1580.06 1212.6 L1579.47 1212.6 L1578.89 1212.6 L1578.3 1212.6 L1577.72 1212.6 L1577.13 1212.6 L1576.54 1212.6 L1575.96 1212.6 L1575.37 1212.6 L1574.78 1212.6 L1574.2 1212.6 L1573.61 1212.6 L1573.02 1212.6 L1572.44 1212.6 L1571.85 1212.6 L1571.27 1212.6 L1570.68 1212.6 L1570.09 1212.6 L1569.51 1212.6 L1568.92 1212.6 L1568.33 1212.6 L1567.75 1212.6 L1567.16 1212.6 L1566.57 1212.6 L1565.99 1212.6 L1565.4 1212.6 L1564.81 1212.6 L1564.23 1212.6 L1563.64 1212.6 L1563.06 1212.6 L1562.47 1212.6 L1561.88 1212.6 L1561.3 1212.6 L1560.71 1212.6 L1560.12 1212.6 L1559.54 1212.6 L1558.95 1212.6 L1558.36 1212.6 L1557.78 1212.6 L1557.19 1212.6 L1556.6 1212.6 L1556.02 1212.6 L1555.43 1212.6 L1554.85 1212.6 L1554.26 1212.6 L1553.67 1212.6 L1553.09 1212.6 L1552.5 1212.6 L1551.91 1212.6 L1551.33 1212.6 L1550.74 1212.6 L1550.15 1212.6 L1549.57 1212.6 L1548.98 1212.6 L1548.4 1212.6 L1547.81 1212.6 L1547.22 1212.6 L1546.64 1212.6 L1546.05 1212.6 L1545.46 1212.6 L1544.88 1212.6 L1544.29 1212.6 L1543.7 1212.6 L1543.12 1212.6 L1542.53 1212.6 L1541.94 1212.6 L1541.36 1212.6 L1540.77 1212.6 L1540.19 1212.6 L1539.6 1212.6 L1539.01 1212.6 L1538.43 1212.6 L1537.84 1212.6 L1537.25 1212.6 L1536.67 1212.6 L1536.08 1212.6 L1535.49 1212.6 L1534.91 1212.6 L1534.32 1212.6 L1533.73 1212.6 L1533.15 1212.6 L1532.56 1212.6 L1531.98 1212.6 L1531.39 1212.6 L1530.8 1212.6 L1530.22 1212.6 L1529.63 1212.6 L1529.04 1212.6 L1528.46 1212.6 L1527.87 1212.6 L1527.28 1212.6 L1526.7 1212.6 L1526.11 1212.6 L1525.52 1212.6 L1524.94 1212.6 L1524.35 1212.6 L1523.77 1212.6 L1523.18 1212.6 L1522.59 1212.6 L1522.01 1212.6 L1521.42 1212.6 L1520.83 1212.6 L1520.25 1212.6 L1519.66 1212.6 L1519.07 1212.6 L1518.49 1212.6 L1517.9 1212.6 L1517.32 1212.6 L1516.73 1212.6 L1516.14 1212.6 L1515.56 1212.6 L1514.97 1212.6 L1514.38 1212.6 L1513.8 1212.6 L1513.21 1212.6 L1512.62 1212.6 L1512.04 1212.6 L1511.45 1212.6 L1510.86 1212.6 L1510.28 1212.6 L1509.69 1212.6 L1509.11 1212.6 L1508.52 1212.6 L1507.93 1212.6 L1507.35 1212.6 L1506.76 1212.6 L1506.17 1212.6 L1505.59 1212.6 L1505 1212.6 L1504.41 1212.6 L1503.83 1212.6 L1503.24 1212.6 L1502.65 1212.6 L1502.07 1212.6 L1501.48 1212.6 L1500.9 1212.6 L1500.31 1212.6 L1499.72 1212.6 L1499.14 1212.6 L1498.55 1212.6 L1497.96 1212.6 L1497.38 1212.6 L1496.79 1212.6 L1496.2 1212.6 L1495.62 1212.6 L1495.03 1212.6 L1494.45 1212.6 L1493.86 1212.6 L1493.27 1212.6 L1492.69 1212.6 L1492.1 1212.6 L1491.51 1212.6 L1490.93 1212.6 L1490.34 1212.6 L1489.75 1212.6 L1489.17 1212.6 L1488.58 1212.6 L1487.99 1212.6 L1487.41 1212.6 L1486.82 1212.6 L1486.24 1212.6 L1485.65 1212.6 L1485.06 1212.6 L1484.48 1212.6 L1483.89 1212.6 L1483.3 1212.6 L1482.72 1212.6 L1482.13 1212.6 L1481.54 1212.6 L1480.96 1212.6 L1480.37 1212.6 L1479.78 1212.6 L1479.2 1212.6 L1478.61 1212.6 L1478.03 1212.6 L1477.44 1212.6 L1476.85 1212.6 L1476.27 1212.6 L1475.68 1212.6 L1475.09 1212.6 L1474.51 1212.6 L1473.92 1212.6 L1473.33 1212.6 L1472.75 1212.6 L1472.16 1212.6 L1471.57 1212.6 L1470.99 1212.6 L1470.4 1212.6 L1469.82 1212.6 L1469.23 1212.6 L1468.64 1212.6 L1468.06 1212.6 L1467.47 1212.6 L1466.88 1212.6 L1466.3 1212.6 L1465.71 1212.6 L1465.12 1212.6 L1464.54 1212.6 L1463.95 1212.6 L1463.37 1212.6 L1462.78 1212.6 L1462.19 1212.6 L1461.61 1212.6 L1461.02 1212.6 L1460.43 1212.6 L1459.85 1212.6 L1459.26 1212.6 L1458.67 1212.6 L1458.09 1212.6 L1457.5 1212.6 L1456.91 1212.6 L1456.33 1212.6 L1455.74 1212.6 L1455.16 1212.6 L1454.57 1212.6 L1453.98 1212.6 L1453.4 1212.6 L1452.81 1212.6 L1452.22 1212.6 L1451.64 1212.6 L1451.05 1212.6 L1450.46 1212.6 L1449.88 1212.6 L1449.29 1212.6 L1448.7 1212.6 L1448.12 1212.6 L1447.53 1212.6 L1446.95 1212.6 L1446.36 1212.6 L1445.77 1212.6 L1445.19 1212.6 L1444.6 1212.6 L1444.01 1212.6 L1443.43 1212.6 L1442.84 1212.6 L1442.25 1212.6 L1441.67 1212.6 L1441.08 1212.6 L1440.5 1212.6 L1439.91 1212.6 L1439.32 1212.6 L1438.74 1212.6 L1438.15 1212.6 L1437.56 1212.6 L1436.98 1212.6 L1436.39 1212.6 L1435.8 1212.6 L1435.22 1212.6 L1434.63 1212.6 L1434.04 1212.6 L1433.46 1212.6 L1432.87 1212.6 L1432.29 1212.6 L1431.7 1212.6 L1431.11 1212.6 L1430.53 1212.6 L1429.94 1212.6 L1429.35 1212.6 L1428.77 1212.6 L1428.18 1212.6 L1427.59 1212.6 L1427.01 1212.6 L1426.42 1212.6 L1425.83 1212.6 L1425.25 1212.6 L1424.66 1212.6 L1424.08 1212.6 L1423.49 1212.6 L1422.9 1212.6 L1422.32 1212.6 L1421.73 1212.6 L1421.14 1212.6 L1420.56 1212.6 L1419.97 1212.6 L1419.38 1212.6 L1418.8 1212.6 L1418.21 1212.6 L1417.63 1212.6 L1417.04 1212.6 L1416.45 1212.6 L1415.87 1212.6 L1415.28 1212.6 L1414.69 1212.6 L1414.11 1212.6 L1413.52 1212.6 L1412.93 1212.6 L1412.35 1212.6 L1411.76 1212.6 L1411.17 1212.6 L1410.59 1212.6 L1410 1212.6 L1409.42 1212.6 L1408.83 1212.6 L1408.24 1212.6 L1407.66 1212.6 L1407.07 1212.6 L1406.48 1212.6 L1405.9 1212.6 L1405.31 1212.6 L1404.72 1212.6 L1404.14 1212.6 L1403.55 1212.6 L1402.96 1212.6 L1402.38 1212.6 L1401.79 1212.6 L1401.21 1212.6 L1400.62 1212.6 L1400.03 1212.6 L1399.45 1212.6 L1398.86 1212.6 L1398.27 1212.6 L1397.69 1212.6 L1397.1 1212.6 L1396.51 1212.6 L1395.93 1212.6 L1395.34 1212.6 L1394.75 1212.6 L1394.17 1212.6 L1393.58 1212.6 L1393 1212.6 L1392.41 1212.6 L1391.82 1212.6 L1391.24 1212.6 L1390.65 1212.6 L1390.06 1212.6 L1389.48 1212.6 L1388.89 1212.6 L1388.3 1212.6 L1387.72 1212.6 L1387.13 1212.6 L1386.55 1212.6 L1385.96 1212.6 L1385.37 1212.6 L1384.79 1212.6 L1384.2 1212.6 L1383.61 1212.6 L1383.03 1212.6 L1382.44 1212.6 L1381.85 1212.6 L1381.27 1212.6 L1380.68 1212.6 L1380.09 1212.6 L1379.51 1212.6 L1378.92 1212.6 L1378.34 1212.6 L1377.75 1212.6 L1377.16 1212.6 L1376.58 1212.6 L1375.99 1212.6 L1375.4 1212.6 L1374.82 1212.6 L1374.23 1212.6 L1373.64 1212.6 L1373.06 1212.6 L1372.47 1212.6 L1371.88 1212.6 L1371.3 1212.6 L1370.71 1212.6 L1370.13 1212.6 L1369.54 1212.6 L1368.95 1212.6 L1368.37 1212.6 L1367.78 1212.6 L1367.19 1212.6 L1366.61 1212.6 L1366.02 1212.6 L1365.43 1212.6 L1364.85 1212.6 L1364.26 1212.6 L1363.68 1212.6 L1363.09 1212.6 L1362.5 1212.6 L1361.92 1212.6 L1361.33 1212.6 L1360.74 1212.6 L1360.16 1212.6 L1359.57 1212.6 L1358.98 1212.6 L1358.4 1212.6 L1357.81 1212.6 L1357.22 1212.6 L1356.64 1212.6 L1356.05 1212.6 L1355.47 1212.6 L1354.88 1212.6 L1354.29 1212.6 L1353.71 1212.6 L1353.12 1212.6 L1352.53 1212.6 L1351.95 1212.6 L1351.36 1212.6 L1350.77 1212.6 L1350.19 1212.6 L1349.6 1212.6 L1349.01 1212.6 L1348.43 1212.6 L1347.84 1212.6 L1347.26 1212.6 L1346.67 1212.6 L1346.08 1212.6 L1345.5 1212.6 L1344.91 1212.6 L1344.32 1212.6 L1343.74 1212.6 L1343.15 1212.6 L1342.56 1212.6 L1341.98 1212.6 L1341.39 1212.6 L1340.8 1212.6 L1340.22 1212.6 L1339.63 1212.6 L1339.05 1212.6 L1338.46 1212.6 L1337.87 1212.6 L1337.29 1212.6 L1336.7 1212.6 L1336.11 1212.6 L1335.53 1212.6 L1334.94 1212.6 L1334.35 1212.6 L1333.77 1212.6 L1333.18 1212.6 L1332.6 1212.6 L1332.01 1212.6 L1331.42 1212.6 L1330.84 1212.6 L1330.25 1212.6 L1329.66 1212.6 L1329.08 1212.6 L1328.49 1212.6 L1327.9 1212.6 L1327.32 1212.6 L1326.73 1212.6 L1326.14 1212.6 L1325.56 1212.6 L1324.97 1212.6 L1324.39 1212.6 L1323.8 1212.6 L1323.21 1212.6 L1322.63 1212.6 L1322.04 1212.6 L1321.45 1212.6 L1320.87 1212.6 L1320.28 1212.6 L1319.69 1212.6 L1319.11 1212.6 L1318.52 1212.6 L1317.93 1212.6 L1317.35 1212.6 L1316.76 1212.6 L1316.18 1212.6 L1315.59 1212.6 L1315 1212.6 L1314.42 1212.6 L1313.83 1212.6 L1313.24 1212.6 L1312.66 1212.6 L1312.07 1212.6 L1311.48 1212.6 L1310.9 1212.6 L1310.31 1212.6 L1309.73 1212.6 L1309.14 1212.6 L1308.55 1212.6 L1307.97 1212.6 L1307.38 1212.6 L1306.79 1212.6 L1306.21 1212.6 L1305.62 1212.6 L1305.03 1212.6 L1304.45 1212.6 L1303.86 1212.6 L1303.27 1212.6 L1302.69 1212.6 L1302.1 1212.6 L1301.52 1212.6 L1300.93 1212.6 L1300.34 1212.6 L1299.76 1212.6 L1299.17 1212.6 L1298.58 1212.6 L1298 1212.6 L1297.41 1212.6 L1296.82 1212.6 L1296.24 1212.6 L1295.65 1212.6 L1295.06 1212.6 L1294.48 1212.6 L1293.89 1212.6 L1293.31 1212.6 L1292.72 1212.6 L1292.13 1212.6 L1291.55 1212.6 L1290.96 1212.6 L1290.37 1212.6 L1289.79 1212.6 L1289.2 1212.6 L1288.61 1212.6 L1288.03 1212.6 L1287.44 1212.6 L1286.86 1212.6 L1286.27 1212.6 L1285.68 1212.6 L1285.1 1212.6 L1284.51 1212.6 L1283.92 1212.6 L1283.34 1212.6 L1282.75 1212.6 L1282.16 1212.6 L1281.58 1212.6 L1280.99 1212.6 L1280.4 1212.6 L1279.82 1212.6 L1279.23 1212.6 L1278.65 1212.6 L1278.06 1212.6 L1277.47 1212.6 L1276.89 1212.6 L1276.3 1212.6 L1275.71 1212.6 L1275.13 1212.6 L1274.54 1212.6 L1273.95 1212.6 L1273.37 1212.6 L1272.78 1212.6 L1272.19 1212.6 L1271.61 1212.6 L1271.02 1212.6 L1270.44 1212.6 L1269.85 1212.6 L1269.26 1212.6 L1268.68 1212.6 L1268.09 1212.6 L1267.5 1212.6 L1266.92 1212.6 L1266.33 1212.6 L1265.74 1212.6 L1265.16 1212.6 L1264.57 1212.6 L1263.98 1212.6 L1263.4 1212.6 L1262.81 1212.6 L1262.23 1212.6 L1261.64 1212.6 L1261.05 1212.6 L1260.47 1212.6 L1259.88 1212.6 L1259.29 1212.6 L1258.71 1212.6 L1258.12 1212.6 L1257.53 1212.6 L1256.95 1212.6 L1256.36 1212.6 L1255.78 1212.6 L1255.19 1212.6 L1254.6 1212.6 L1254.02 1212.6 L1253.43 1212.6 L1252.84 1212.6 L1252.26 1212.6 L1251.67 1212.6 L1251.08 1212.6 L1250.5 1212.6 L1249.91 1212.6 L1249.32 1212.6 L1248.74 1212.6 L1248.15 1212.6 L1247.57 1212.6 L1246.98 1212.6 L1246.39 1212.6 L1245.81 1212.6 L1245.22 1212.6 L1244.63 1212.6 L1244.05 1212.6 L1243.46 1212.6 L1242.87 1212.6 L1242.29 1212.6 L1241.7 1212.6 L1241.11 1212.6 L1240.53 1212.6 L1239.94 1212.6 L1239.36 1212.6 L1238.77 1212.6 L1238.18 1212.6 L1237.6 1212.6 L1237.01 1212.6 L1236.42 1212.6 L1235.84 1212.6 L1235.25 1212.6 L1234.66 1212.6 L1234.08 1212.6 L1233.49 1212.6 L1232.91 1212.6 L1232.32 1212.6 L1231.73 1212.6 L1231.15 1212.6 L1230.56 1212.6 L1229.97 1212.6 L1229.39 1212.6 L1228.8 1212.6 L1228.21 1212.6 L1227.63 1212.6 L1227.04 1212.6 L1226.45 1212.6 L1225.87 1212.6 L1225.28 1212.6 L1224.7 1212.6 L1224.11 1212.6 L1223.52 1212.6 L1222.94 1212.6 L1222.35 1212.6 L1221.76 1212.6 L1221.18 1212.6 L1220.59 1212.6 L1220 1212.6 L1219.42 1212.6 L1218.83 1212.6 L1218.24 1212.6 L1217.66 1212.6 L1217.07 1212.6 L1216.49 1212.6 L1215.9 1212.6 L1215.31 1212.6 L1214.73 1212.6 L1214.14 1212.6 L1213.55 1212.6 L1212.97 1212.6 L1212.38 1212.6 L1211.79 1212.6 L1211.21 1212.6 L1210.62 1212.6 L1210.03 1212.6 L1209.45 1212.6 L1208.86 1212.6 L1208.28 1212.6 L1207.69 1212.6 L1207.1 1212.6 L1206.52 1212.6 L1205.93 1212.6 L1205.34 1212.6 L1204.76 1212.6 L1204.17 1212.6 L1203.58 1212.6 L1203 1212.6 L1202.41 1212.6 L1201.83 1212.6 L1201.24 1212.6 L1200.65 1212.6 L1200.07 1212.6 L1199.48 1212.6 L1198.89 1212.6 L1198.31 1212.6 L1197.72 1212.6 L1197.13 1212.6 L1196.55 1212.6 L1195.96 1212.6 L1195.37 1212.6 L1194.79 1212.6 L1194.2 1212.6 L1193.62 1212.6 L1193.03 1212.6 L1192.44 1212.6 L1191.86 1212.6 L1191.27 1212.6 L1190.68 1212.6 L1190.1 1212.6 L1189.51 1212.6 L1188.92 1212.6 L1188.34 1212.6 L1187.75 1212.6 L1187.16 1212.6 L1186.58 1212.6 L1185.99 1212.6 L1185.41 1212.6 L1184.82 1212.6 L1184.23 1212.6 L1183.65 1212.6 L1183.06 1212.6 L1182.47 1212.6 L1181.89 1212.6 L1181.3 1212.6 L1180.71 1212.6 L1180.13 1212.6 L1179.54 1212.6 L1178.96 1212.6 L1178.37 1212.6 L1177.78 1212.6 L1177.2 1212.6 L1176.61 1212.6 L1176.02 1212.6 L1175.44 1212.6 L1174.85 1212.6 L1174.26 1212.6 L1173.68 1212.6 L1173.09 1212.6 L1172.5 1212.6 L1171.92 1212.6 L1171.33 1212.6 L1170.75 1212.6 L1170.16 1212.6 L1169.57 1212.6 L1168.99 1212.6 L1168.4 1212.6 L1167.81 1212.6 L1167.23 1212.6 L1166.64 1212.6 L1166.05 1212.6 L1165.47 1212.6 L1164.88 1212.6 L1164.29 1212.6 L1163.71 1212.6 L1163.12 1212.6 L1162.54 1212.6 L1161.95 1212.6 L1161.36 1212.6 L1160.78 1212.6 L1160.19 1212.6 L1159.6 1212.6 L1159.02 1212.6 L1158.43 1212.6 L1157.84 1212.6 L1157.26 1212.6 L1156.67 1212.6 L1156.09 1212.6 L1155.5 1212.6 L1154.91 1212.6 L1154.33 1212.6 L1153.74 1212.6 L1153.15 1212.6 L1152.57 1212.6 L1151.98 1212.6 L1151.39 1212.6 L1150.81 1212.6 L1150.22 1212.6 L1149.63 1212.6 L1149.05 1212.6 L1148.46 1212.6 L1147.88 1212.6 L1147.29 1212.6 L1146.7 1212.6 L1146.12 1212.6 L1145.53 1212.6 L1144.94 1212.6 L1144.36 1212.6 L1143.77 1212.6 L1143.18 1212.6 L1142.6 1212.6 L1142.01 1212.6 L1141.42 1212.6 L1140.84 1212.6 L1140.25 1212.6 L1139.67 1212.6 L1139.08 1212.6 L1138.49 1212.6 L1137.91 1212.6 L1137.32 1212.6 L1136.73 1212.6 L1136.15 1212.6 L1135.56 1212.6 L1134.97 1212.6 L1134.39 1212.6 L1133.8 1212.6 L1133.21 1212.6 L1132.63 1212.6 L1132.04 1212.6 L1131.46 1212.6 L1130.87 1212.6 L1130.28 1212.6 L1129.7 1212.6 L1129.11 1212.6 L1128.52 1212.6 L1127.94 1212.6 L1127.35 1212.6 L1126.76 1212.6 L1126.18 1212.6 L1125.59 1212.6 L1125.01 1212.6 L1124.42 1212.6 L1123.83 1212.6 L1123.25 1212.6 L1122.66 1212.6 L1122.07 1212.6 L1121.49 1212.6 L1120.9 1212.6 L1120.31 1212.6 L1119.73 1212.6 L1119.14 1212.6 L1118.55 1212.6 L1117.97 1212.6 L1117.38 1212.6 L1116.8 1212.6 L1116.21 1212.6 L1115.62 1212.6 L1115.04 1212.6 L1114.45 1212.6 L1113.86 1212.6 L1113.28 1212.6 L1112.69 1212.6 L1112.1 1212.6 L1111.52 1212.6 L1110.93 1212.6 L1110.34 1212.6 L1109.76 1212.6 L1109.17 1212.6 L1108.59 1212.6 L1108 1212.6 L1107.41 1212.6 L1106.83 1212.6 L1106.24 1212.6 L1105.65 1212.6 L1105.07 1212.6 L1104.48 1212.6 L1103.89 1212.6 L1103.31 1212.6 L1102.72 1212.6 L1102.14 1212.6 L1101.55 1212.6 L1100.96 1212.6 L1100.38 1212.6 L1099.79 1212.6 L1099.2 1212.6 L1098.62 1212.6 L1098.03 1212.6 L1097.44 1212.6 L1096.86 1212.6 L1096.27 1212.6 L1095.68 1212.6 L1095.1 1212.6 L1094.51 1212.6 L1093.93 1212.6 L1093.34 1212.6 L1092.75 1212.6 L1092.17 1212.6 L1091.58 1212.6 L1090.99 1212.6 L1090.41 1212.6 L1089.82 1212.6 L1089.23 1212.6 L1088.65 1212.6 L1088.06 1212.6 L1087.47 1212.6 L1086.89 1212.6 L1086.3 1212.6 L1085.72 1212.6 L1085.13 1212.6 L1084.54 1212.6 L1083.96 1212.6 L1083.37 1212.6 L1082.78 1212.6 L1082.2 1212.6 L1081.61 1212.6 L1081.02 1212.6 L1080.44 1212.6 L1079.85 1212.6 L1079.26 1212.6 L1078.68 1212.6 L1078.09 1212.6 L1077.51 1212.6 L1076.92 1212.6 L1076.33 1212.6 L1075.75 1212.6 L1075.16 1212.6 L1074.57 1212.6 L1073.99 1212.6 L1073.4 1212.6 L1072.81 1212.6 L1072.23 1212.6 L1071.64 1212.6 L1071.06 1212.6 L1070.47 1212.6 L1069.88 1212.6 L1069.3 1212.6 L1068.71 1212.6 L1068.12 1212.6 L1067.54 1212.6 L1066.95 1212.6 L1066.36 1212.6 L1065.78 1212.6 L1065.19 1212.6 L1064.6 1212.6 L1064.02 1212.6 L1063.43 1212.6 L1062.85 1212.6 L1062.26 1212.6 L1061.67 1212.6 L1061.09 1212.6 L1060.5 1212.6 L1059.91 1212.6 L1059.33 1212.6 L1058.74 1212.6 L1058.15 1212.6 L1057.57 1212.6 L1056.98 1212.6 L1056.39 1212.6 L1055.81 1212.6 L1055.22 1212.6 L1054.64 1212.6 L1054.05 1212.6 L1053.46 1212.6 L1052.88 1212.6 L1052.29 1212.6 L1051.7 1212.6 L1051.12 1212.6 L1050.53 1212.6 L1049.94 1212.6 L1049.36 1212.6 L1048.77 1212.6 L1048.19 1212.6 L1047.6 1212.6 L1047.01 1212.6 L1046.43 1212.6 L1045.84 1212.6 L1045.25 1212.6 L1044.67 1212.6 L1044.08 1212.6 L1043.49 1212.6 L1042.91 1212.6 L1042.32 1212.6 L1041.73 1212.6 L1041.15 1212.6 L1040.56 1212.6 L1039.98 1212.6 L1039.39 1212.6 L1038.8 1212.6 L1038.22 1212.6 L1037.63 1212.6 L1037.04 1212.6 L1036.46 1212.6 L1035.87 1212.6 L1035.28 1212.6 L1034.7 1212.6 L1034.11 1212.6 L1033.52 1212.6 L1032.94 1212.6 L1032.35 1212.6 L1031.77 1212.6 L1031.18 1212.6 L1030.59 1212.6 L1030.01 1212.6 L1029.42 1212.6 L1028.83 1212.6 L1028.25 1212.6 L1027.66 1212.6 L1027.07 1212.6 L1026.49 1212.6 L1025.9 1212.6 L1025.32 1212.6 L1024.73 1212.6 L1024.14 1212.6 L1023.56 1212.6 L1022.97 1212.6 L1022.38 1212.6 L1021.8 1212.6 L1021.21 1212.6 L1020.62 1212.6 L1020.04 1212.6 L1019.45 1212.6 L1018.86 1212.6 L1018.28 1212.6 L1017.69 1212.6 L1017.11 1212.6 L1016.52 1212.6 L1015.93 1212.6 L1015.35 1212.6 L1014.76 1212.6 L1014.17 1212.6 L1013.59 1212.6 L1013 1212.6 L1012.41 1212.6 L1011.83 1212.6 L1011.24 1212.6 L1010.65 1212.6 L1010.07 1212.6 L1009.48 1212.6 L1008.9 1212.6 L1008.31 1212.6 L1007.72 1212.6 L1007.14 1212.6 L1006.55 1212.6 L1005.96 1212.6 L1005.38 1212.6 L1004.79 1212.6 L1004.2 1212.6 L1003.62 1212.6 L1003.03 1212.6 L1002.44 1212.6 L1001.86 1212.6 L1001.27 1212.6 L1000.69 1212.6 L1000.1 1212.6 L999.513 1212.6 L998.926 1212.6 L998.34 1212.6 L997.754 1212.6 L997.167 1212.6 L996.581 1212.6 L995.994 1212.6 L995.408 1212.6 L994.822 1212.6 L994.235 1212.6 L993.649 1212.6 L993.062 1212.6 L992.476 1212.6 L991.889 1212.6 L991.303 1212.6 L990.717 1212.6 L990.13 1212.6 L989.544 1212.6 L988.957 1212.6 L988.371 1212.6 L987.785 1212.6 L987.198 1212.6 L986.612 1212.6 L986.025 1212.6  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.67 986.612,1212.67 987.198,1212.67 987.785,1212.67 988.371,1212.67 988.957,1212.67 989.544,1212.67 990.13,1212.67 990.717,1212.67 991.303,1212.67 991.889,1212.67 992.476,1212.67 993.062,1212.67 993.649,1212.67 994.235,1212.67 994.822,1212.67 995.408,1212.67 995.994,1212.67 996.581,1212.67 997.167,1212.67 997.754,1212.67 998.34,1212.67 998.926,1212.67 999.513,1212.67 1000.1,1212.67 1000.69,1212.67 1001.27,1212.67 1001.86,1212.67 1002.44,1212.67 1003.03,1212.67 1003.62,1212.67 1004.2,1212.67 1004.79,1212.67 1005.38,1212.67 1005.96,1212.67 1006.55,1212.67 1007.14,1212.67 1007.72,1212.67 1008.31,1212.67 1008.9,1212.67 1009.48,1212.67 1010.07,1212.67 1010.65,1212.67 1011.24,1212.67 1011.83,1212.67 1012.41,1212.67 1013,1212.67 1013.59,1212.67 1014.17,1212.67 1014.76,1212.67 1015.35,1212.67 1015.93,1212.67 1016.52,1212.67 1017.11,1212.67 1017.69,1212.67 1018.28,1212.67 1018.86,1212.67 1019.45,1212.67 1020.04,1212.67 1020.62,1212.67 1021.21,1212.67 1021.8,1212.67 1022.38,1212.67 1022.97,1212.67 1023.56,1212.67 1024.14,1212.67 1024.73,1212.67 1025.32,1212.67 1025.9,1212.67 1026.49,1212.67 1027.07,1212.67 1027.66,1212.67 1028.25,1212.67 1028.83,1212.67 1029.42,1212.67 1030.01,1212.67 1030.59,1212.67 1031.18,1212.67 1031.77,1212.67 1032.35,1212.67 1032.94,1212.67 1033.52,1212.67 1034.11,1212.67 1034.7,1212.67 1035.28,1212.67 1035.87,1212.67 1036.46,1212.67 1037.04,1212.67 1037.63,1212.67 1038.22,1212.67 1038.8,1212.67 1039.39,1212.67 1039.98,1212.67 1040.56,1212.67 1041.15,1212.67 1041.73,1212.67 1042.32,1212.67 1042.91,1212.67 1043.49,1212.67 1044.08,1212.67 1044.67,1212.67 1045.25,1212.67 1045.84,1212.67 1046.43,1212.67 1047.01,1212.67 1047.6,1212.67 1048.19,1212.67 1048.77,1212.67 1049.36,1212.67 1049.94,1212.67 1050.53,1212.67 1051.12,1212.67 1051.7,1212.67 1052.29,1212.67 1052.88,1212.67 1053.46,1212.67 1054.05,1212.67 1054.64,1212.67 1055.22,1212.67 1055.81,1212.67 1056.39,1212.67 1056.98,1212.67 1057.57,1212.67 1058.15,1212.67 1058.74,1212.67 1059.33,1212.67 1059.91,1212.67 1060.5,1212.67 1061.09,1212.67 1061.67,1212.67 1062.26,1212.67 1062.85,1212.67 1063.43,1212.67 1064.02,1212.67 1064.6,1212.67 1065.19,1212.67 1065.78,1212.67 1066.36,1212.67 1066.95,1212.67 1067.54,1212.67 1068.12,1212.67 1068.71,1212.67 1069.3,1212.67 1069.88,1212.67 1070.47,1212.67 1071.06,1212.67 1071.64,1212.67 1072.23,1212.67 1072.81,1212.67 1073.4,1212.67 1073.99,1212.67 1074.57,1212.67 1075.16,1212.67 1075.75,1212.67 1076.33,1212.67 1076.92,1212.67 1077.51,1212.67 1078.09,1212.67 1078.68,1212.67 1079.26,1212.67 1079.85,1212.67 1080.44,1212.67 1081.02,1212.67 1081.61,1212.67 1082.2,1212.67 1082.78,1212.67 1083.37,1212.67 1083.96,1212.67 1084.54,1212.67 1085.13,1212.67 1085.72,1212.67 1086.3,1212.67 1086.89,1212.67 1087.47,1212.67 1088.06,1212.67 1088.65,1212.67 1089.23,1212.67 1089.82,1212.67 1090.41,1212.67 1090.99,1212.67 1091.58,1212.67 1092.17,1212.67 1092.75,1212.67 1093.34,1212.67 1093.93,1212.67 1094.51,1212.67 1095.1,1212.67 1095.68,1212.67 1096.27,1212.67 1096.86,1212.67 1097.44,1212.67 1098.03,1212.67 1098.62,1212.67 1099.2,1212.67 1099.79,1212.67 1100.38,1212.67 1100.96,1212.67 1101.55,1212.67 1102.14,1212.67 1102.72,1212.67 1103.31,1212.67 1103.89,1212.67 1104.48,1212.67 1105.07,1212.67 1105.65,1212.67 1106.24,1212.67 1106.83,1212.67 1107.41,1212.67 1108,1212.67 1108.59,1212.67 1109.17,1212.67 1109.76,1212.67 1110.34,1212.67 1110.93,1212.67 1111.52,1212.67 1112.1,1212.67 1112.69,1212.67 1113.28,1212.67 1113.86,1212.67 1114.45,1212.67 1115.04,1212.67 1115.62,1212.67 1116.21,1212.67 1116.8,1212.67 1117.38,1212.67 1117.97,1212.67 1118.55,1212.67 1119.14,1212.67 1119.73,1212.67 1120.31,1212.67 1120.9,1212.67 1121.49,1212.67 1122.07,1212.67 1122.66,1212.67 1123.25,1212.67 1123.83,1212.67 1124.42,1212.67 1125.01,1212.67 1125.59,1212.67 1126.18,1212.67 1126.76,1212.67 1127.35,1212.67 1127.94,1212.67 1128.52,1212.67 1129.11,1212.67 1129.7,1212.67 1130.28,1212.67 1130.87,1212.67 1131.46,1212.67 1132.04,1212.67 1132.63,1212.67 1133.21,1212.67 1133.8,1212.67 1134.39,1212.67 1134.97,1212.67 1135.56,1212.67 1136.15,1212.67 1136.73,1212.67 1137.32,1212.67 1137.91,1212.67 1138.49,1212.67 1139.08,1212.67 1139.67,1212.67 1140.25,1212.67 1140.84,1212.67 1141.42,1212.67 1142.01,1212.67 1142.6,1212.67 1143.18,1212.67 1143.77,1212.67 1144.36,1212.67 1144.94,1212.67 1145.53,1212.67 1146.12,1212.67 1146.7,1212.67 1147.29,1212.67 1147.88,1212.67 1148.46,1212.67 1149.05,1212.67 1149.63,1212.67 1150.22,1212.67 1150.81,1212.67 1151.39,1212.67 1151.98,1212.67 1152.57,1212.67 1153.15,1212.67 1153.74,1212.67 1154.33,1212.67 1154.91,1212.67 1155.5,1212.67 1156.09,1212.67 1156.67,1212.67 1157.26,1212.67 1157.84,1212.67 1158.43,1212.67 1159.02,1212.67 1159.6,1212.67 1160.19,1212.67 1160.78,1212.67 1161.36,1212.67 1161.95,1212.67 1162.54,1212.67 1163.12,1212.67 1163.71,1212.67 1164.29,1212.67 1164.88,1212.67 1165.47,1212.67 1166.05,1212.67 1166.64,1212.67 1167.23,1212.67 1167.81,1212.67 1168.4,1212.67 1168.99,1212.67 1169.57,1212.67 1170.16,1212.67 1170.75,1212.67 1171.33,1212.67 1171.92,1212.67 1172.5,1212.67 1173.09,1212.67 1173.68,1212.67 1174.26,1212.67 1174.85,1212.67 1175.44,1212.67 1176.02,1212.67 1176.61,1212.67 1177.2,1212.67 1177.78,1212.67 1178.37,1212.67 1178.96,1212.67 1179.54,1212.67 1180.13,1212.67 1180.71,1212.67 1181.3,1212.67 1181.89,1212.67 1182.47,1212.67 1183.06,1212.67 1183.65,1212.67 1184.23,1212.67 1184.82,1212.67 1185.41,1212.67 1185.99,1212.67 1186.58,1212.67 1187.16,1212.67 1187.75,1212.67 1188.34,1212.67 1188.92,1212.67 1189.51,1212.67 1190.1,1212.67 1190.68,1212.67 1191.27,1212.67 1191.86,1212.67 1192.44,1212.67 1193.03,1212.67 1193.62,1212.67 1194.2,1212.67 1194.79,1212.67 1195.37,1212.67 1195.96,1212.67 1196.55,1212.67 1197.13,1212.67 1197.72,1212.67 1198.31,1212.67 1198.89,1212.67 1199.48,1212.67 1200.07,1212.67 1200.65,1212.67 1201.24,1212.67 1201.83,1212.67 1202.41,1212.67 1203,1212.67 1203.58,1212.67 1204.17,1212.67 1204.76,1212.67 1205.34,1212.67 1205.93,1212.67 1206.52,1212.67 1207.1,1212.67 1207.69,1212.67 1208.28,1212.67 1208.86,1212.67 1209.45,1212.67 1210.03,1212.67 1210.62,1212.67 1211.21,1212.67 1211.79,1212.67 1212.38,1212.67 1212.97,1212.67 1213.55,1212.67 1214.14,1212.67 1214.73,1212.67 1215.31,1212.67 1215.9,1212.67 1216.49,1212.67 1217.07,1212.67 1217.66,1212.67 1218.24,1212.67 1218.83,1212.67 1219.42,1212.67 1220,1212.67 1220.59,1212.67 1221.18,1212.67 1221.76,1212.67 1222.35,1212.67 1222.94,1212.67 1223.52,1212.67 1224.11,1212.67 1224.7,1212.67 1225.28,1212.67 1225.87,1212.67 1226.45,1212.67 1227.04,1212.67 1227.63,1212.67 1228.21,1212.67 1228.8,1212.67 1229.39,1212.67 1229.97,1212.67 1230.56,1212.67 1231.15,1212.67 1231.73,1212.67 1232.32,1212.67 1232.91,1212.67 1233.49,1212.67 1234.08,1212.67 1234.66,1212.67 1235.25,1212.67 1235.84,1212.67 1236.42,1212.67 1237.01,1212.67 1237.6,1212.67 1238.18,1212.67 1238.77,1212.67 1239.36,1212.67 1239.94,1212.67 1240.53,1212.67 1241.11,1212.67 1241.7,1212.67 1242.29,1212.67 1242.87,1212.67 1243.46,1212.67 1244.05,1212.67 1244.63,1212.67 1245.22,1212.67 1245.81,1212.67 1246.39,1212.67 1246.98,1212.67 1247.57,1212.67 1248.15,1212.67 1248.74,1212.67 1249.32,1212.67 1249.91,1212.67 1250.5,1212.67 1251.08,1212.67 1251.67,1212.67 1252.26,1212.67 1252.84,1212.67 1253.43,1212.67 1254.02,1212.67 1254.6,1212.67 1255.19,1212.67 1255.78,1212.67 1256.36,1212.67 1256.95,1212.67 1257.53,1212.67 1258.12,1212.67 1258.71,1212.67 1259.29,1212.67 1259.88,1212.67 1260.47,1212.67 1261.05,1212.67 1261.64,1212.67 1262.23,1212.67 1262.81,1212.67 1263.4,1212.67 1263.98,1212.67 1264.57,1212.67 1265.16,1212.67 1265.74,1212.67 1266.33,1212.67 1266.92,1212.67 1267.5,1212.67 1268.09,1212.67 1268.68,1212.67 1269.26,1212.67 1269.85,1212.67 1270.44,1212.67 1271.02,1212.67 1271.61,1212.67 1272.19,1212.67 1272.78,1212.67 1273.37,1212.67 1273.95,1212.67 1274.54,1212.67 1275.13,1212.67 1275.71,1212.67 1276.3,1212.67 1276.89,1212.67 1277.47,1212.67 1278.06,1212.67 1278.65,1212.67 1279.23,1212.67 1279.82,1212.67 1280.4,1212.67 1280.99,1212.67 1281.58,1212.67 1282.16,1212.67 1282.75,1212.67 1283.34,1212.67 1283.92,1212.67 1284.51,1212.67 1285.1,1212.67 1285.68,1212.67 1286.27,1212.67 1286.86,1212.67 1287.44,1212.67 1288.03,1212.67 1288.61,1212.67 1289.2,1212.67 1289.79,1212.67 1290.37,1212.67 1290.96,1212.67 1291.55,1212.67 1292.13,1212.67 1292.72,1212.67 1293.31,1212.67 1293.89,1212.67 1294.48,1212.67 1295.06,1212.67 1295.65,1212.67 1296.24,1212.67 1296.82,1212.67 1297.41,1212.67 1298,1212.67 1298.58,1212.67 1299.17,1212.67 1299.76,1212.67 1300.34,1212.67 1300.93,1212.67 1301.52,1212.67 1302.1,1212.67 1302.69,1212.67 1303.27,1212.67 1303.86,1212.67 1304.45,1212.67 1305.03,1212.67 1305.62,1212.67 1306.21,1212.67 1306.79,1212.67 1307.38,1212.67 1307.97,1212.67 1308.55,1212.67 1309.14,1212.67 1309.73,1212.67 1310.31,1212.67 1310.9,1212.67 1311.48,1212.67 1312.07,1212.67 1312.66,1212.67 1313.24,1212.67 1313.83,1212.67 1314.42,1212.67 1315,1212.67 1315.59,1212.67 1316.18,1212.67 1316.76,1212.67 1317.35,1212.67 1317.93,1212.67 1318.52,1212.67 1319.11,1212.67 1319.69,1212.67 1320.28,1212.67 1320.87,1212.67 1321.45,1212.67 1322.04,1212.67 1322.63,1212.67 1323.21,1212.67 1323.8,1212.67 1324.39,1212.67 1324.97,1212.67 1325.56,1212.67 1326.14,1212.67 1326.73,1212.67 1327.32,1212.67 1327.9,1212.67 1328.49,1212.67 1329.08,1212.67 1329.66,1212.67 1330.25,1212.67 1330.84,1212.67 1331.42,1212.67 1332.01,1212.67 1332.6,1212.67 1333.18,1212.67 1333.77,1212.67 1334.35,1212.67 1334.94,1212.67 1335.53,1212.67 1336.11,1212.67 1336.7,1212.67 1337.29,1212.67 1337.87,1212.67 1338.46,1212.67 1339.05,1212.67 1339.63,1212.67 1340.22,1212.67 1340.8,1212.67 1341.39,1212.67 1341.98,1212.67 1342.56,1212.67 1343.15,1212.67 1343.74,1212.67 1344.32,1212.67 1344.91,1212.67 1345.5,1212.67 1346.08,1212.67 1346.67,1212.67 1347.26,1212.67 1347.84,1212.67 1348.43,1212.67 1349.01,1212.67 1349.6,1212.67 1350.19,1212.67 1350.77,1212.67 1351.36,1212.67 1351.95,1212.67 1352.53,1212.67 1353.12,1212.67 1353.71,1212.67 1354.29,1212.67 1354.88,1212.67 1355.47,1212.67 1356.05,1212.67 1356.64,1212.67 1357.22,1212.67 1357.81,1212.67 1358.4,1212.67 1358.98,1212.67 1359.57,1212.67 1360.16,1212.67 1360.74,1212.67 1361.33,1212.67 1361.92,1212.67 1362.5,1212.67 1363.09,1212.67 1363.68,1212.67 1364.26,1212.67 1364.85,1212.67 1365.43,1212.67 1366.02,1212.67 1366.61,1212.67 1367.19,1212.67 1367.78,1212.67 1368.37,1212.67 1368.95,1212.67 1369.54,1212.67 1370.13,1212.67 1370.71,1212.67 1371.3,1212.67 1371.88,1212.67 1372.47,1212.67 1373.06,1212.67 1373.64,1212.67 1374.23,1212.67 1374.82,1212.67 1375.4,1212.67 1375.99,1212.67 1376.58,1212.67 1377.16,1212.67 1377.75,1212.67 1378.34,1212.67 1378.92,1212.67 1379.51,1212.67 1380.09,1212.67 1380.68,1212.67 1381.27,1212.67 1381.85,1212.67 1382.44,1212.67 1383.03,1212.67 1383.61,1212.67 1384.2,1212.67 1384.79,1212.67 1385.37,1212.67 1385.96,1212.67 1386.55,1212.67 1387.13,1212.67 1387.72,1212.67 1388.3,1212.67 1388.89,1212.67 1389.48,1212.67 1390.06,1212.67 1390.65,1212.67 1391.24,1212.67 1391.82,1212.67 1392.41,1212.67 1393,1212.67 1393.58,1212.67 1394.17,1212.67 1394.75,1212.67 1395.34,1212.67 1395.93,1212.67 1396.51,1212.67 1397.1,1212.67 1397.69,1212.67 1398.27,1212.67 1398.86,1212.67 1399.45,1212.67 1400.03,1212.67 1400.62,1212.67 1401.21,1212.67 1401.79,1212.67 1402.38,1212.67 1402.96,1212.67 1403.55,1212.67 1404.14,1212.67 1404.72,1212.67 1405.31,1212.67 1405.9,1212.67 1406.48,1212.67 1407.07,1212.67 1407.66,1212.67 1408.24,1212.67 1408.83,1212.67 1409.42,1212.67 1410,1212.67 1410.59,1212.67 1411.17,1212.67 1411.76,1212.67 1412.35,1212.67 1412.93,1212.67 1413.52,1212.67 1414.11,1212.67 1414.69,1212.67 1415.28,1212.67 1415.87,1212.67 1416.45,1212.67 1417.04,1212.67 1417.63,1212.67 1418.21,1212.67 1418.8,1212.67 1419.38,1212.67 1419.97,1212.67 1420.56,1212.67 1421.14,1212.67 1421.73,1212.67 1422.32,1212.67 1422.9,1212.67 1423.49,1212.67 1424.08,1212.67 1424.66,1212.67 1425.25,1212.67 1425.83,1212.67 1426.42,1212.67 1427.01,1212.67 1427.59,1212.67 1428.18,1212.67 1428.77,1212.67 1429.35,1212.67 1429.94,1212.67 1430.53,1212.67 1431.11,1212.67 1431.7,1212.67 1432.29,1212.67 1432.87,1212.67 1433.46,1212.67 1434.04,1212.67 1434.63,1212.67 1435.22,1212.67 1435.8,1212.67 1436.39,1212.67 1436.98,1212.67 1437.56,1212.67 1438.15,1212.67 1438.74,1212.67 1439.32,1212.67 1439.91,1212.67 1440.5,1212.67 1441.08,1212.67 1441.67,1212.67 1442.25,1212.67 1442.84,1212.67 1443.43,1212.67 1444.01,1212.67 1444.6,1212.67 1445.19,1212.67 1445.77,1212.67 1446.36,1212.67 1446.95,1212.67 1447.53,1212.67 1448.12,1212.67 1448.7,1212.67 1449.29,1212.67 1449.88,1212.67 1450.46,1212.67 1451.05,1212.67 1451.64,1212.67 1452.22,1212.67 1452.81,1212.67 1453.4,1212.67 1453.98,1212.67 1454.57,1212.67 1455.16,1212.67 1455.74,1212.67 1456.33,1212.67 1456.91,1212.67 1457.5,1212.67 1458.09,1212.67 1458.67,1212.67 1459.26,1212.67 1459.85,1212.67 1460.43,1212.67 1461.02,1212.67 1461.61,1212.67 1462.19,1212.67 1462.78,1212.67 1463.37,1212.67 1463.95,1212.67 1464.54,1212.67 1465.12,1212.67 1465.71,1212.67 1466.3,1212.67 1466.88,1212.67 1467.47,1212.67 1468.06,1212.67 1468.64,1212.67 1469.23,1212.67 1469.82,1212.67 1470.4,1212.67 1470.99,1212.67 1471.57,1212.67 1472.16,1212.67 1472.75,1212.67 1473.33,1212.67 1473.92,1212.67 1474.51,1212.67 1475.09,1212.67 1475.68,1212.67 1476.27,1212.67 1476.85,1212.67 1477.44,1212.67 1478.03,1212.67 1478.61,1212.67 1479.2,1212.67 1479.78,1212.67 1480.37,1212.67 1480.96,1212.67 1481.54,1212.67 1482.13,1212.67 1482.72,1212.67 1483.3,1212.67 1483.89,1212.67 1484.48,1212.67 1485.06,1212.67 1485.65,1212.67 1486.24,1212.67 1486.82,1212.67 1487.41,1212.67 1487.99,1212.67 1488.58,1212.67 1489.17,1212.67 1489.75,1212.67 1490.34,1212.67 1490.93,1212.67 1491.51,1212.67 1492.1,1212.67 1492.69,1212.67 1493.27,1212.67 1493.86,1212.67 1494.45,1212.67 1495.03,1212.67 1495.62,1212.67 1496.2,1212.67 1496.79,1212.67 1497.38,1212.67 1497.96,1212.67 1498.55,1212.67 1499.14,1212.67 1499.72,1212.67 1500.31,1212.67 1500.9,1212.67 1501.48,1212.67 1502.07,1212.67 1502.65,1212.67 1503.24,1212.67 1503.83,1212.67 1504.41,1212.67 1505,1212.67 1505.59,1212.67 1506.17,1212.67 1506.76,1212.67 1507.35,1212.67 1507.93,1212.67 1508.52,1212.67 1509.11,1212.67 1509.69,1212.67 1510.28,1212.67 1510.86,1212.67 1511.45,1212.67 1512.04,1212.67 1512.62,1212.67 1513.21,1212.67 1513.8,1212.67 1514.38,1212.67 1514.97,1212.67 1515.56,1212.67 1516.14,1212.67 1516.73,1212.67 1517.32,1212.67 1517.9,1212.67 1518.49,1212.67 1519.07,1212.67 1519.66,1212.67 1520.25,1212.67 1520.83,1212.67 1521.42,1212.67 1522.01,1212.67 1522.59,1212.67 1523.18,1212.67 1523.77,1212.67 1524.35,1212.67 1524.94,1212.67 1525.52,1212.67 1526.11,1212.67 1526.7,1212.67 1527.28,1212.67 1527.87,1212.67 1528.46,1212.67 1529.04,1212.67 1529.63,1212.67 1530.22,1212.67 1530.8,1212.67 1531.39,1212.67 1531.98,1212.67 1532.56,1212.67 1533.15,1212.67 1533.73,1212.67 1534.32,1212.67 1534.91,1212.67 1535.49,1212.67 1536.08,1212.67 1536.67,1212.67 1537.25,1212.67 1537.84,1212.67 1538.43,1212.67 1539.01,1212.67 1539.6,1212.67 1540.19,1212.67 1540.77,1212.67 1541.36,1212.67 1541.94,1212.67 1542.53,1212.67 1543.12,1212.67 1543.7,1212.67 1544.29,1212.67 1544.88,1212.67 1545.46,1212.67 1546.05,1212.67 1546.64,1212.67 1547.22,1212.67 1547.81,1212.67 1548.4,1212.67 1548.98,1212.67 1549.57,1212.67 1550.15,1212.67 1550.74,1212.67 1551.33,1212.67 1551.91,1212.67 1552.5,1212.67 1553.09,1212.67 1553.67,1212.67 1554.26,1212.67 1554.85,1212.67 1555.43,1212.67 1556.02,1212.67 1556.6,1212.67 1557.19,1212.67 1557.78,1212.67 1558.36,1212.67 1558.95,1212.67 1559.54,1212.67 1560.12,1212.67 1560.71,1212.67 1561.3,1212.67 1561.88,1212.67 1562.47,1212.67 1563.06,1212.67 1563.64,1212.67 1564.23,1212.67 1564.81,1212.67 1565.4,1212.67 1565.99,1212.67 1566.57,1212.67 1567.16,1212.67 1567.75,1212.67 1568.33,1212.67 1568.92,1212.67 1569.51,1212.67 1570.09,1212.67 1570.68,1212.67 1571.27,1212.67 1571.85,1212.67 1572.44,1212.67 1573.02,1212.67 1573.61,1212.67 1574.2,1212.67 1574.78,1212.67 1575.37,1212.67 1575.96,1212.67 1576.54,1212.67 1577.13,1212.67 1577.72,1212.67 1578.3,1212.67 1578.89,1212.67 1579.47,1212.67 1580.06,1212.67 1580.65,1212.67 1581.23,1212.67 1581.82,1212.67 1582.41,1212.67 1582.99,1212.67 1583.58,1212.67 1584.17,1212.67 1584.75,1212.67 1585.34,1212.67 1585.93,1212.67 1586.51,1212.67 1587.1,1212.67 1587.68,1212.67 1588.27,1212.67 1588.86,1212.67 1589.44,1212.67 1590.03,1212.67 1590.62,1212.67 1591.2,1212.67 1591.79,1212.67 1592.38,1212.67 1592.96,1212.67 1593.55,1212.67 1594.14,1212.67 1594.72,1212.67 1595.31,1212.67 1595.89,1212.67 1596.48,1212.67 1597.07,1212.67 1597.65,1212.67 1598.24,1212.67 1598.83,1212.67 1599.41,1212.67 1600,1212.67 1600.59,1212.67 1601.17,1212.67 1601.76,1212.67 1602.34,1212.67 1602.93,1212.67 1603.52,1212.67 1604.1,1212.67 1604.69,1212.67 1605.28,1212.67 1605.86,1212.67 1606.45,1212.67 1607.04,1212.67 1607.62,1212.67 1608.21,1212.67 1608.8,1212.67 1609.38,1212.67 1609.97,1212.67 1610.55,1212.67 1611.14,1212.67 1611.73,1212.67 1612.31,1212.67 1612.9,1212.67 1613.49,1212.67 1614.07,1212.67 1614.66,1212.67 1615.25,1212.67 1615.83,1212.67 1616.42,1212.67 1617.01,1212.67 1617.59,1212.67 1618.18,1212.67 1618.76,1212.67 1619.35,1212.67 1619.94,1212.67 1620.52,1212.67 1621.11,1212.67 1621.7,1212.67 1622.28,1212.67 1622.87,1212.67 1623.46,1212.67 1624.04,1212.67 1624.63,1212.67 1625.22,1212.67 1625.8,1212.67 1626.39,1212.67 1626.97,1212.67 1627.56,1212.67 1628.15,1212.67 1628.73,1212.67 1629.32,1212.67 1629.91,1212.67 1630.49,1212.67 1631.08,1212.67 1631.67,1212.67 1632.25,1212.67 1632.84,1212.67 1633.42,1212.67 1634.01,1212.67 1634.6,1212.67 1635.18,1212.67 1635.77,1212.67 1636.36,1212.67 1636.94,1212.67 1637.53,1212.67 1638.12,1212.67 1638.7,1212.67 1639.29,1212.67 1639.88,1212.67 1640.46,1212.67 1641.05,1212.67 1641.63,1212.67 1642.22,1212.67 1642.81,1212.67 1643.39,1212.67 1643.98,1212.67 1644.57,1212.67 1645.15,1212.67 1645.74,1212.67 1646.33,1212.67 1646.91,1212.67 1647.5,1212.67 1648.09,1212.67 1648.67,1212.67 1649.26,1212.67 1649.84,1212.67 1650.43,1212.67 1651.02,1212.67 1651.6,1212.67 1652.19,1212.67 1652.78,1212.67 1653.36,1212.67 1653.95,1212.67 1654.54,1212.67 1655.12,1212.67 1655.71,1212.67 1656.29,1212.67 1656.88,1212.67 1657.47,1212.67 1658.05,1212.67 1658.64,1212.67 1659.23,1212.67 1659.81,1212.67 1660.4,1212.67 1660.99,1212.67 1661.57,1212.67 1662.16,1212.67 1662.75,1212.67 1663.33,1212.67 1663.92,1212.67 1664.5,1212.67 1665.09,1212.67 1665.68,1212.67 1666.26,1212.67 1666.85,1212.67 1667.44,1212.67 1668.02,1212.67 1668.61,1212.67 1669.2,1212.67 1669.78,1212.67 1670.37,1212.67 1670.96,1212.67 1671.54,1212.67 1672.13,1212.67 1672.71,1212.67 1673.3,1212.67 1673.89,1212.67 1674.47,1212.67 1675.06,1212.67 1675.65,1212.67 1676.23,1212.67 1676.82,1212.67 1677.41,1212.67 1677.99,1212.67 1678.58,1212.67 1679.17,1212.67 1679.75,1212.67 1680.34,1212.67 1680.92,1212.67 1681.51,1212.67 1682.1,1212.67 1682.68,1212.67 1683.27,1212.67 1683.86,1212.67 1684.44,1212.67 1685.03,1212.67 1685.62,1212.67 1686.2,1212.67 1686.79,1212.67 1687.37,1212.67 1687.96,1212.67 1688.55,1212.67 1689.13,1212.67 1689.72,1212.67 1690.31,1212.67 1690.89,1212.67 1691.48,1212.67 1692.07,1212.67 1692.65,1212.67 1693.24,1212.67 1693.83,1212.67 1694.41,1212.67 1695,1212.67 1695.58,1212.67 1696.17,1212.67 1696.76,1212.67 1697.34,1212.67 1697.93,1212.67 1698.52,1212.67 1699.1,1212.67 1699.69,1212.67 1700.28,1212.67 1700.86,1212.67 1701.45,1212.67 1702.04,1212.67 1702.62,1212.67 1703.21,1212.67 1703.79,1212.67 1704.38,1212.67 1704.97,1212.67 1705.55,1212.67 1706.14,1212.67 1706.73,1212.67 1707.31,1212.67 1707.9,1212.67 1708.49,1212.67 1709.07,1212.67 1709.66,1212.67 1710.24,1212.67 1710.83,1212.67 1711.42,1212.67 1712,1212.67 1712.59,1212.67 1713.18,1212.67 1713.76,1212.67 1714.35,1212.67 1714.94,1212.67 1715.52,1212.67 1716.11,1212.67 1716.7,1212.67 1717.28,1212.67 1717.87,1212.67 1718.45,1212.67 1719.04,1212.67 1719.63,1212.67 1720.21,1212.67 1720.8,1212.67 1721.39,1212.67 1721.97,1212.67 1722.56,1212.67 1723.15,1212.67 1723.73,1212.67 1724.32,1212.67 1724.91,1212.67 1725.49,1212.67 1726.08,1212.67 1726.66,1212.67 1727.25,1212.67 1727.84,1212.67 1728.42,1212.67 1729.01,1212.67 1729.6,1212.67 1730.18,1212.67 1730.77,1212.67 1731.36,1212.67 1731.94,1212.67 1732.53,1212.67 1733.11,1212.67 1733.7,1212.67 1734.29,1212.67 1734.87,1212.67 1735.46,1212.67 1736.05,1212.67 1736.63,1212.67 1737.22,1212.67 1737.81,1212.67 1738.39,1212.67 1738.98,1212.67 1739.57,1212.67 1740.15,1212.67 1740.74,1212.67 1741.32,1212.67 1741.91,1212.67 1742.5,1212.67 1743.08,1212.67 1743.67,1212.67 1744.26,1212.67 1744.84,1212.67 1745.43,1212.67 1746.02,1212.67 1746.6,1212.67 1747.19,1212.67 1747.78,1212.67 1748.36,1212.67 1748.95,1212.67 1749.53,1212.67 1750.12,1212.67 1750.71,1212.67 1751.29,1212.67 1751.88,1212.67 1752.47,1212.67 1753.05,1212.67 1753.64,1212.67 1754.23,1212.67 1754.81,1212.67 1755.4,1212.67 1755.99,1212.67 1756.57,1212.67 1757.16,1212.67 1757.74,1212.67 1758.33,1212.67 1758.92,1212.67 1759.5,1212.67 1760.09,1212.67 1760.68,1212.67 1761.26,1212.67 1761.85,1212.67 1762.44,1212.67 1763.02,1212.67 1763.61,1212.67 1764.19,1212.67 1764.78,1212.67 1765.37,1212.67 1765.95,1212.67 1766.54,1212.67 1767.13,1212.67 1767.71,1212.67 1768.3,1212.67 1768.89,1212.67 1769.47,1212.67 1770.06,1212.67 1770.65,1212.67 1771.23,1212.67 1771.82,1212.67 1772.4,1212.67 1772.99,1212.67 1773.58,1212.67 1774.16,1212.67 1774.75,1212.67 1775.34,1212.67 1775.92,1212.67 1776.51,1212.67 1777.1,1212.67 1777.68,1212.67 1778.27,1212.67 1778.86,1212.67 1779.44,1212.67 1780.03,1212.67 1780.61,1212.67 1781.2,1212.67 1781.79,1212.67 1782.37,1212.67 1782.96,1212.67 1783.55,1212.67 1784.13,1212.67 1784.72,1212.67 1785.31,1212.67 1785.89,1212.67 1786.48,1212.67 1787.06,1212.67 1787.65,1212.67 1788.24,1212.67 1788.82,1212.67 1789.41,1212.67 1790,1212.67 1790.58,1212.67 1791.17,1212.67 1791.76,1212.67 1792.34,1212.67 1792.93,1212.67 1793.52,1212.67 1794.1,1212.67 1794.69,1212.67 1795.27,1212.67 1795.86,1212.67 1796.45,1212.67 1797.03,1212.67 1797.62,1212.67 1798.21,1212.67 1798.79,1212.67 1799.38,1212.67 1799.97,1212.67 1800.55,1212.67 1801.14,1212.67 1801.73,1212.67 1802.31,1212.67 1802.9,1212.67 1803.48,1212.67 1804.07,1212.67 1804.66,1212.67 1805.24,1212.67 1805.83,1212.67 1806.42,1212.67 1807,1212.67 1807.59,1212.67 1808.18,1212.67 1808.76,1212.67 1809.35,1212.67 1809.94,1212.67 1810.52,1212.67 1811.11,1212.67 1811.69,1212.67 1812.28,1212.67 1812.87,1212.67 1813.45,1212.67 1814.04,1212.67 1814.63,1212.67 1815.21,1212.67 1815.8,1212.67 1816.39,1212.67 1816.97,1212.67 1817.56,1212.67 1818.14,1212.67 1818.73,1212.67 1819.32,1212.67 1819.9,1212.67 1820.49,1212.67 1821.08,1212.67 1821.66,1212.67 1822.25,1212.67 1822.84,1212.67 1823.42,1212.67 1824.01,1212.67 1824.6,1212.67 1825.18,1212.67 1825.77,1212.67 1826.35,1212.67 1826.94,1212.67 1827.53,1212.67 1828.11,1212.67 1828.7,1212.67 1829.29,1212.67 1829.87,1212.67 1830.46,1212.67 1831.05,1212.67 1831.63,1212.67 1832.22,1212.67 1832.81,1212.67 1833.39,1212.67 1833.98,1212.67 1834.56,1212.67 1835.15,1212.67 1835.74,1212.67 1836.32,1212.67 1836.91,1212.67 1837.5,1212.67 1838.08,1212.67 1838.67,1212.67 1839.26,1212.67 1839.84,1212.67 1840.43,1212.67 1841.01,1212.67 1841.6,1212.67 1842.19,1212.67 1842.77,1212.67 1843.36,1212.67 1843.95,1212.67 1844.53,1212.67 1845.12,1212.67 1845.71,1212.67 1846.29,1212.67 1846.88,1212.67 1847.47,1212.67 1848.05,1212.67 1848.64,1212.67 1849.22,1212.67 1849.81,1212.67 1850.4,1212.67 1850.98,1212.67 1851.57,1212.67 1852.16,1212.67 1852.74,1212.67 1853.33,1212.67 1853.92,1212.67 1854.5,1212.67 1855.09,1212.67 1855.68,1212.67 1856.26,1212.67 1856.85,1212.67 1857.43,1212.67 1858.02,1212.67 1858.61,1212.67 1859.19,1212.67 1859.78,1212.67 1860.37,1212.67 1860.95,1212.67 1861.54,1212.67 1862.13,1212.67 1862.71,1212.67 1863.3,1212.67 1863.88,1212.67 1864.47,1212.67 1865.06,1212.67 1865.64,1212.67 1866.23,1212.67 1866.82,1212.67 1867.4,1212.67 1867.99,1212.67 1868.58,1212.67 1869.16,1212.67 1869.75,1212.67 1870.34,1212.67 1870.92,1212.67 1871.51,1212.67 1872.09,1212.67 1872.68,1212.67 1873.27,1212.67 1873.85,1212.67 1874.44,1212.67 1875.03,1212.67 1875.61,1212.67 1876.2,1212.67 1876.79,1212.67 1877.37,1212.67 1877.96,1212.67 1878.55,1212.67 1879.13,1212.67 1879.72,1212.67 1880.3,1212.67 1880.89,1212.67 1881.48,1212.67 1882.06,1212.67 1882.65,1212.67 1883.24,1212.67 1883.82,1212.67 1884.41,1212.67 1885,1212.67 1885.58,1212.67 1886.17,1212.67 1886.76,1212.67 1887.34,1212.67 1887.93,1212.67 1888.51,1212.67 1889.1,1212.67 1889.69,1212.67 1890.27,1212.67 1890.86,1212.67 1891.45,1212.67 1892.03,1212.67 1892.62,1212.67 1893.21,1212.67 1893.79,1212.67 1894.38,1212.67 1894.96,1212.67 1895.55,1212.67 1896.14,1212.67 1896.72,1212.67 1897.31,1212.67 1897.9,1212.67 1898.48,1212.67 1899.07,1212.67 1899.66,1212.67 1900.24,1212.67 1900.83,1212.67 1901.42,1212.67 1902,1212.67 1902.59,1212.67 1903.17,1212.67 1903.76,1212.67 1904.35,1212.67 1904.93,1212.67 1905.52,1212.67 1906.11,1212.67 1906.69,1212.67 1907.28,1212.67 1907.87,1212.67 1908.45,1212.67 1909.04,1212.67 1909.63,1212.67 1910.21,1212.67 1910.8,1212.67 1911.38,1212.67 1911.97,1212.67 1912.56,1212.67 1913.14,1212.67 1913.73,1212.67 1914.32,1212.67 1914.9,1212.67 1915.49,1212.67 1916.08,1212.67 1916.66,1212.67 1917.25,1212.67 1917.83,1212.67 1918.42,1212.67 1919.01,1212.67 1919.59,1212.67 1920.18,1212.67 1920.77,1212.67 1921.35,1212.67 1921.94,1212.67 1922.53,1212.67 1923.11,1212.67 1923.7,1212.67 1924.29,1212.67 1924.87,1212.67 1925.46,1212.67 1926.04,1212.67 1926.63,1212.67 1927.22,1212.67 1927.8,1212.67 1928.39,1212.67 1928.98,1212.67 1929.56,1212.67 1930.15,1212.67 1930.74,1212.67 1931.32,1212.67 1931.91,1212.67 1932.5,1212.67 1933.08,1212.67 1933.67,1212.67 1934.25,1212.67 1934.84,1212.67 1935.43,1212.67 1936.01,1212.67 1936.6,1212.67 1937.19,1212.67 1937.77,1212.67 1938.36,1212.67 1938.95,1212.67 1939.53,1212.67 1940.12,1212.67 1940.71,1212.67 1941.29,1212.67 1941.88,1212.67 1942.46,1212.67 1943.05,1212.67 1943.64,1212.67 1944.22,1212.67 1944.81,1212.67 1945.4,1212.67 1945.98,1212.67 1946.57,1212.67 1947.16,1212.67 1947.74,1212.67 1948.33,1212.67 1948.91,1212.67 1949.5,1212.67 1950.09,1212.67 1950.67,1212.67 1951.26,1212.67 1951.85,1212.67 1952.43,1212.67 1953.02,1212.67 1953.61,1212.67 1954.19,1212.67 1954.78,1212.67 1955.37,1212.67 1955.95,1212.67 1956.54,1212.67 1957.12,1212.67 1957.71,1212.67 1958.3,1212.67 1958.88,1212.67 1959.47,1212.67 1960.06,1212.67 1960.64,1212.67 1961.23,1212.67 1961.82,1212.67 1962.4,1212.67 1962.99,1212.67 1963.58,1212.67 1964.16,1212.67 1964.75,1212.67 1965.33,1212.67 1965.92,1212.67 1966.51,1212.67 1967.09,1212.67 1967.68,1212.67 1968.27,1212.67 1968.85,1212.67 1969.44,1212.67 1970.03,1212.67 1970.61,1212.67 1971.2,1212.67 1971.78,1212.67 1972.37,1212.67 1972.96,1212.67 1973.54,1212.67 1974.13,1212.67 1974.72,1212.67 1975.3,1212.67 1975.89,1212.67 1976.48,1212.67 1977.06,1212.67 1977.65,1212.67 1978.24,1212.67 1978.82,1212.67 1979.41,1212.67 1979.99,1212.67 1980.58,1212.67 1981.17,1212.67 1981.75,1212.67 1982.34,1212.67 1982.93,1212.67 1983.51,1212.67 1984.1,1212.67 1984.69,1212.67 1985.27,1212.67 1985.86,1212.67 1986.45,1212.67 1987.03,1212.67 1987.62,1212.67 1988.2,1212.67 1988.79,1212.67 1989.38,1212.67 1989.96,1212.67 1990.55,1212.67 1991.14,1212.67 1991.72,1212.67 1992.31,1212.67 1992.9,1212.67 1993.48,1212.67 1994.07,1212.67 1994.65,1212.67 1995.24,1212.67 1995.83,1212.67 1996.41,1212.67 1997,1212.67 1997.59,1212.67 1998.17,1212.67 1998.76,1212.67 1999.35,1212.67 1999.93,1212.67 2000.52,1212.67 2001.11,1212.67 2001.69,1212.67 2002.28,1212.67 2002.86,1212.67 2003.45,1212.67 2004.04,1212.67 2004.62,1212.67 2005.21,1212.67 2005.8,1212.67 2006.38,1212.67 2006.97,1212.67 2007.56,1212.67 2008.14,1212.67 2008.73,1212.67 2009.32,1212.67 2009.9,1212.67 2010.49,1212.67 2011.07,1212.67 2011.66,1212.67 2012.25,1212.67 2012.83,1212.67 2013.42,1212.67 2014.01,1212.67 2014.59,1212.67 2015.18,1212.67 2015.77,1212.67 2016.35,1212.67 2016.94,1212.67 2017.53,1212.67 2018.11,1212.67 2018.7,1212.67 2019.28,1212.67 2019.87,1212.67 2020.46,1212.67 2021.04,1212.67 2021.63,1212.67 2022.22,1212.67 2022.8,1212.67 2023.39,1212.67 2023.98,1212.67 2024.56,1212.67 2025.15,1212.67 2025.73,1212.67 2026.32,1212.67 2026.91,1212.67 2027.49,1212.67 2028.08,1212.67 2028.67,1212.67 2029.25,1212.67 2029.84,1212.67 2030.43,1212.67 2031.01,1212.67 2031.6,1212.67 2032.19,1212.67 2032.77,1212.67 2033.36,1212.67 2033.94,1212.67 2034.53,1212.67 2035.12,1212.67 2035.7,1212.67 2036.29,1212.67 2036.88,1212.67 2037.46,1212.67 2038.05,1212.67 2038.64,1212.67 2039.22,1212.67 2039.81,1212.67 2040.4,1212.67 2040.98,1212.67 2041.57,1212.67 2042.15,1212.67 2042.74,1212.67 2043.33,1212.67 2043.91,1212.67 2044.5,1212.67 2045.09,1212.67 2045.67,1212.67 2046.26,1212.67 2046.85,1212.67 2047.43,1212.67 2048.02,1212.67 2048.6,1212.67 2049.19,1212.67 2049.78,1212.67 2050.36,1212.67 2050.95,1212.67 2051.54,1212.67 2052.12,1212.67 2052.71,1212.67 2053.3,1212.67 2053.88,1212.67 2054.47,1212.67 2055.06,1212.67 2055.64,1212.67 2056.23,1212.67 2056.81,1212.67 2057.4,1212.67 2057.99,1212.67 2058.57,1212.67 2059.16,1212.67 2059.75,1212.67 2060.33,1212.67 2060.92,1212.67 2061.51,1212.67 2062.09,1212.67 2062.68,1212.67 2063.27,1212.67 2063.85,1212.67 2064.44,1212.67 2065.02,1212.67 2065.61,1212.67 2066.2,1212.67 2066.78,1212.67 2067.37,1212.67 2067.96,1212.67 2068.54,1212.67 2069.13,1212.67 2069.72,1212.67 2070.3,1212.67 2070.89,1212.67 2071.48,1212.67 2072.06,1212.67 2072.65,1212.67 2073.23,1212.67 2073.82,1212.67 2074.41,1212.67 2074.99,1212.67 2075.58,1212.67 2076.17,1212.67 2076.75,1212.67 2077.34,1212.67 2077.93,1212.67 2078.51,1212.67 2079.1,1212.67 2079.68,1212.67 2080.27,1212.67 2080.86,1212.67 2081.44,1212.67 2082.03,1212.67 2082.62,1212.67 2083.2,1212.67 2083.79,1212.67 2084.38,1212.67 2084.96,1212.67 2085.55,1212.67 2086.14,1212.67 2086.72,1212.67 2087.31,1212.67 2087.89,1212.67 2088.48,1212.67 2089.07,1212.67 2089.65,1212.67 2090.24,1212.67 2090.83,1212.67 2091.41,1212.67 2092,1212.67 2092.59,1212.67 2093.17,1212.67 2093.76,1212.67 2094.35,1212.67 2094.93,1212.67 2095.52,1212.67 2096.1,1212.67 2096.69,1212.67 2097.28,1212.67 2097.86,1212.67 2098.45,1212.67 2099.04,1212.67 2099.62,1212.67 2100.21,1212.67 2100.8,1212.67 2101.38,1212.67 2101.97,1212.67 2102.55,1212.67 2103.14,1212.67 2103.73,1212.67 2104.31,1212.67 2104.9,1212.67 2105.49,1212.67 2106.07,1212.67 2106.66,1212.67 2107.25,1212.67 2107.83,1212.67 2108.42,1212.67 2109.01,1212.67 2109.59,1212.67 2110.18,1212.67 2110.76,1212.67 2111.35,1212.67 2111.94,1212.67 2112.52,1212.67 2113.11,1212.67 2113.7,1212.67 2114.28,1212.67 2114.87,1212.67 2115.46,1212.67 2116.04,1212.67 2116.63,1212.67 2117.22,1212.67 2117.8,1212.67 2118.39,1212.67 2118.97,1212.67 2119.56,1212.67 2120.15,1212.67 2120.73,1212.67 2121.32,1212.67 2121.91,1212.67 2122.49,1212.67 2123.08,1212.67 2123.67,1212.67 2124.25,1212.67 2124.84,1212.67 2125.42,1212.67 2126.01,1212.67 2126.6,1212.67 2127.18,1212.67 2127.77,1212.67 2128.36,1212.67 2128.94,1212.67 2129.53,1212.67 2130.12,1212.67 2130.7,1212.67 2131.29,1212.67 2131.88,1212.67 2132.46,1212.67 2133.05,1212.67 2133.63,1212.67 2134.22,1212.67 2134.81,1212.67 2135.39,1212.67 2135.98,1212.67 2136.57,1212.67 2137.15,1212.67 2137.74,1212.67 2138.33,1212.67 2138.91,1212.67 2139.5,1212.67 2140.09,1212.67 2140.67,1212.67 2141.26,1212.67 2141.84,1212.67 2142.43,1212.67 2143.02,1212.67 2143.6,1212.67 2144.19,1212.67 2144.78,1212.67 2145.36,1212.67 2145.95,1212.67 2146.54,1212.67 2147.12,1212.67 2147.71,1212.67 2148.3,1212.67 2148.88,1212.67 2149.47,1212.67 2150.05,1212.67 2150.64,1212.67 2151.23,1212.67 2151.81,1212.67 2152.4,1212.67 2152.99,1212.67 2153.57,1212.67 2154.16,1212.67 2154.75,1212.67 2155.33,1212.67 2155.92,1212.67 2156.5,1212.67 2157.09,1212.67 2157.68,1212.67 2158.26,1212.67 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.34,1197.01 1399.27,899.083 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.92 985.439,1197.01 2158.26,1197.01 2158.26,1227.92 985.439,1227.92 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip643\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip643)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-13125.1 170.503,-13350.8 171.062,-12817.6 171.621,-12346.1 172.18,-12511.9 172.74,-12645.6 173.299,-12749.4 173.858,-12337.7 174.417,-11955.1 174.977,-11596.5 175.536,-11631.8 176.095,-11645.9 176.655,-10969.5 177.214,-10956.5 177.773,-10632.5 178.332,-10591 178.892,-10535.4 179.451,-10457.2 180.01,-10153.6 180.569,-10056.2 181.129,-9953 181.688,-9833.92 182.247,-9533.3 182.806,-8920.6 183.366,-8820.83 183.925,-8554.4 184.484,-8430.76 185.043,-8295.25 185.603,-8039.42 186.162,-7562.15 186.721,-7448.32 187.28,-7327.22 187.84,-7207.04 188.399,-6989 188.958,-6869.81 189.517,-6584.16 190.077,-6290.35 190.636,-6106.82 191.195,-5842.81 191.754,-5661.38 192.314,-5413.45 192.873,-5313.61 193.432,-5082.35 193.991,-4936.79 194.551,-4849.67 195.11,-4696.48 195.669,-4556.07 196.228,-4360.01 196.788,-4220.38 197.347,-4035.82 197.906,-3858.8 198.465,-3637.19 199.025,-3563.13 199.584,-3440.1 200.143,-3328.31 200.702,-3172.62 201.262,-3101.79 201.821,-2996.44 202.38,-2927.04 202.939,-2818.72 203.499,-2750.96 204.058,-2571.66 204.617,-2510.27 205.176,-2412.17 205.736,-2309.86 206.295,-2181.53 206.854,-2054.38 207.413,-1900.06 207.973,-1815.16 208.532,-1733.13 209.091,-1620.92 209.65,-1572.32 210.21,-1406.65 210.769,-1308.4 211.328,-1236.93 211.887,-1113.3 212.447,-1025.56 213.006,-933.907 213.565,-895.104 214.124,-859.361 214.684,-794.461 215.243,-781.961 215.802,-718.087 216.361,-650.709 216.921,-587.555 217.48,-502.213 218.039,-371.968 218.598,-294.981 219.158,-246.349 219.717,-197.193 220.276,-151.897 220.835,-107.177 221.395,-43.2579 221.954,-2.85087 222.513,36.2417 223.072,78.5876 223.632,94.0771 224.191,176.214 224.75,208.707 225.309,221.787 225.869,258.042 226.428,267.687 226.987,301.043 227.546,333.811 228.106,389.092 228.665,441.324 229.224,428.492 229.783,418.102 230.343,429.598 230.902,443.368 231.461,456.917 232.02,468.643 232.58,519.132 233.139,570.612 233.698,576.743 234.257,583.406 234.817,591.581 235.376,635.74 235.935,700.519 236.494,738.77 237.054,776.157 237.613,815.584 238.172,831.429 238.731,810.476 239.291,827.442 239.85,825.747 240.409,790.804 240.968,829.02 241.528,831.298 242.087,833.692 242.646,848.503 243.205,864.972 243.765,864.925 244.324,918.736 244.883,900.145 245.442,931.855 246.002,944.053 246.561,959.836 247.12,975.746 247.679,1007.84 248.239,1018.35 248.798,1029.27 249.357,1053.07 249.916,1046.5 250.476,1037.02 251.035,1031.97 251.594,1062.18 252.153,1055.08 252.713,1067.41 253.272,1075.46 253.831,1087.07 254.39,1110.63 254.95,1083.11 255.509,1094.13 256.068,1099.71 256.627,1106.96 257.187,1113.43 257.746,1100.92 258.305,1107.09 258.864,1116.33 259.424,1088.93 259.983,1083.03 260.542,1092.9 261.101,1116.88 261.661,1127.45 262.22,1151.74 262.779,1172.26 263.338,1158.88 263.898,1181.62 264.457,1152.62 265.016,1177.23 265.575,1199.83 266.135,1218.64 266.694,1204.33 267.253,1192.69 267.812,1145.63 268.372,1181.15 268.931,1170.38 269.49,1177.03 270.049,1096.14 270.609,1070.51 271.168,1065.93 271.727,1109.96 272.286,1133.45 272.846,1102.84 273.405,1110.48 273.964,1133.96 274.523,1143.84 275.083,1149.6 275.642,1138.4 276.201,1176.18 276.76,1161.13 277.32,1135.67 277.879,1127.46 278.438,1115.17 278.997,1136.65 279.557,1108.69 280.116,1082.9 280.675,1110.35 281.234,1152.1 281.794,1142.06 282.353,1165.9 282.912,1152.03 283.471,1141.84 284.031,1130.49 284.59,1119.49 285.149,1145.39 285.708,1150.5 286.268,1090.15 286.827,1082.47 287.386,1073.98 287.945,1066.94 288.505,1073.84 289.064,1048.84 289.623,1076.62 290.182,1101.2 290.742,1124.51 291.301,1094.55 291.86,1115.67 292.419,1172.82 292.979,1143.15 293.538,1178.6 294.097,1151.66 294.656,1121.08 295.216,1060.6 295.775,1055.45 296.334,1049.88 296.893,1041.37 297.453,1052.94 298.012,1062.53 298.571,1007.87 299.13,1004.3 299.69,1014.08 300.249,990.072 300.808,1003.65 301.368,998.46 301.927,991.241 302.486,1000.49 303.045,999.774 303.605,981.696 304.164,1011.51 304.723,1038.48 305.282,1031.71 305.842,978.237 306.401,958.478 306.96,974.985 307.519,989.86 308.079,970.577 308.638,982.106 309.197,996.746 309.756,1028.85 310.316,1039.71 310.875,1014.76 311.434,1008.17 311.993,986.085 312.553,966.712 313.112,944.009 313.671,959.019 314.23,941.371 314.79,905.605 315.349,921.53 315.908,951.821 316.467,916.854 317.027,895.832 317.586,861.333 318.145,862.482 318.704,814.99 319.264,805.37 319.823,822.818 320.382,844.684 320.941,912.627 321.501,912.311 322.06,893.43 322.619,890.009 323.178,906.487 323.738,891.272 324.297,923.725 324.856,920.388 325.415,951.401 325.975,946.804 326.534,943.913 327.093,974.058 327.652,966.527 328.212,946.037 328.771,959.307 329.33,955.339 329.889,1018.24 330.449,994.165 331.008,955.057 331.567,967.071 332.126,943.486 332.686,953.197 333.245,964.803 333.804,976.804 334.363,1035.59 334.923,1012.3 335.482,1002.81 336.041,1008.89 336.6,1036.2 337.16,1028.05 337.719,1021.3 338.278,1011.44 338.837,973.173 339.397,982.548 339.956,962.646 340.515,944.228 341.074,939.558 341.634,935.191 342.193,913.772 342.752,907.879 343.311,870.207 343.871,950.362 344.43,962.245 344.989,942.441 345.548,954.363 346.108,964.936 346.667,992.761 347.226,1002.58 347.785,1007.54 348.345,979.906 348.904,955.754 349.463,948.112 350.022,974.643 350.582,982.7 351.141,1008.93 351.7,1001.7 352.259,993.103 352.819,984.999 353.378,962.283 353.937,941.221 354.496,936.018 355.056,927.308 355.615,921.868 356.174,931.397 356.733,939.944 357.293,930.876 357.852,942.673 358.411,952.612 358.97,974.514 359.53,982.003 360.089,974.855 360.648,966.536 361.207,973.972 361.767,963.062 362.326,971.032 362.885,977.75 363.444,969.453 364.004,965.151 364.563,958.091 365.122,933.576 365.681,928.691 366.241,937.408 366.8,947.376 367.359,939.761 367.918,867.996 368.478,863.79 369.037,846.995 369.596,843.188 370.155,855.643 370.715,850.28 371.274,861.009 371.833,845.09 372.392,875.927 372.952,870.737 373.511,851.741 374.07,850.491 374.629,883.77 375.189,861.212 375.748,842.782 376.307,839.229 376.866,820.318 377.426,835.957 377.985,851.341 378.544,881.759 379.103,909.205 379.663,919.221 380.222,882.16 380.781,896.258 381.34,845.73 381.9,859.677 382.459,856.474 383.018,871.101 383.577,849.386 384.137,866.583 384.696,865.183 385.255,892.412 385.814,922.609 386.374,919.699 386.933,896.902 387.492,876.428 388.051,902.538 388.611,897.018 389.17,907.832 389.729,917.192 390.288,925.799 390.848,919.422 391.407,911.387 391.966,890.615 392.525,903.02 393.085,909.973 393.644,900.464 394.203,877.17 394.762,868.629 395.322,863.799 395.881,841.204 396.44,822.889 396.999,810.658 397.559,807.442 398.118,804.498 398.677,821.921 399.236,800.462 399.796,828.947 400.355,807.668 400.914,854.979 401.473,881.643 402.033,878.661 402.592,810.887 403.151,827.032 403.71,791.196 404.27,805.372 404.829,787.364 405.388,805.643 405.947,804.466 406.507,832.846 407.066,829.989 407.625,857.948 408.184,832.706 408.744,863.576 409.303,844.195 409.862,828.014 410.421,859.898 410.981,870.436 411.54,834.082 412.099,849.047 412.658,828.398 413.218,841.137 413.777,836.498 414.336,817.344 414.895,831.54 415.455,811.131 416.014,807.22 416.573,802.903 417.132,832.054 417.692,812.487 418.251,830.578 418.81,798.269 419.369,814.261 419.929,790.65 420.488,775.596 421.047,743.411 421.606,727.164 422.166,731.252 422.725,714.462 423.284,717.662 423.843,721.049 424.403,739.202 424.962,760.236 425.521,760.146 426.08,823.716 426.64,788.292 427.199,835.328 427.758,814.969 428.318,795.306 428.877,808.864 429.436,774.389 429.995,757.385 430.555,724.109 431.114,722.587 431.673,742.587 432.232,793.737 432.792,795.223 433.351,807.905 433.91,773.532 434.469,775.184 435.029,776.278 435.588,777.438 436.147,774.485 436.706,788.848 437.266,819.912 437.825,862.764 438.384,870.246 438.943,847.437 439.503,842.588 440.062,836.637 440.621,815.119 441.18,813.376 441.74,826.223 442.299,792.908 442.858,741.06 443.417,723.466 443.977,723.986 444.536,727.549 445.095,745.585 445.654,732.133 446.214,718.159 446.773,686.886 447.332,719.394 447.891,719.457 448.451,725.285 449.01,726.312 449.569,758.472 450.128,771.525 450.688,771.093 451.247,770.103 451.806,785.779 452.365,817.94 452.925,815.984 453.484,845.833 454.043,840.555 454.602,847.824 455.162,846.572 455.721,840.37 456.28,803.405 456.839,788.433 457.399,787.009 457.958,768.374 458.517,767.519 459.076,768.502 459.636,751.523 460.195,767.797 460.754,781.613 461.313,781.29 461.873,828.488 462.432,774.789 462.991,788.731 463.55,790.847 464.11,789.005 464.669,770.451 465.228,733.156 465.787,718.514 466.347,719.534 466.906,739.039 467.465,767.264 468.024,796.706 468.584,793.021 469.143,776.05 469.702,772.497 470.261,769.618 470.821,765.731 471.38,748.322 471.939,748.29 472.498,797.599 473.058,808.752 473.617,805.283 474.176,802.198 474.735,801.193 475.295,817.605 475.854,796.776 476.413,778.322 476.972,808.024 477.532,821.761 478.091,852.65 478.65,829.311 479.209,807.687 479.769,787.376 480.328,784.752 480.887,797.558 481.446,727.248 482.006,725.362 482.565,739.39 483.124,783.533 483.683,767.888 484.243,768.655 484.802,763.8 485.361,776.474 485.92,743.34 486.48,741.064 487.039,770.181 487.598,771.016 488.157,785.227 488.717,781.051 489.276,811.752 489.835,792.059 490.394,790.255 490.954,786.56 491.513,783.115 492.072,746.647 492.631,765.432 493.191,765.313 493.75,800.446 494.309,798.334 494.868,798.852 495.428,841.75 495.987,848.038 496.546,844.564 497.105,822.147 497.665,834.831 498.224,845.512 498.783,809.391 499.342,775.085 499.902,774.951 500.461,756.744 501.02,772.115 501.579,785.884 502.139,769.856 502.698,765.513 503.257,747.159 503.816,764.966 504.376,764.765 504.935,746.302 505.494,743.975 506.053,726.954 506.613,677.984 507.172,665.509 507.731,669.125 508.29,690.132 508.85,674.945 509.409,695.474 509.968,664.058 510.527,667.801 511.087,653.368 511.646,658.603 512.205,680.229 512.764,700.919 513.324,715.693 513.883,702.426 514.442,716.099 515.001,731.824 515.561,733.079 516.12,744.468 516.679,775.983 517.238,755.717 517.798,774.021 518.357,738.635 518.916,723.66 519.475,742.543 520.035,761.584 520.594,715.735 521.153,714.197 521.712,716.792 522.272,700.055 522.831,667.439 523.39,718.511 523.949,702.809 524.509,683.565 525.068,719.224 525.627,720.182 526.186,721.001 526.746,704.467 527.305,692.069 527.864,693.56 528.423,682.124 528.983,669.062 529.542,658.492 530.101,661.701 530.66,682.606 531.22,650.642 531.779,655.011 532.338,673.316 532.897,708.186 533.457,727.187 534.016,726.889 534.575,707.481 535.134,740.495 535.694,722.902 536.253,726.972 536.812,709.617 537.371,695.019 537.931,730.635 538.49,714.768 539.049,716.319 539.608,720.024 540.168,719.331 540.727,734.367 541.286,748.464 541.845,748.416 542.405,745.43 542.964,776.645 543.523,756.442 544.082,753.747 544.642,747.782 545.201,730.368 545.76,723.699 546.319,723.636 546.879,725.588 547.438,724.994 547.997,706.905 548.556,689.45 549.116,707.784 549.675,741.199 550.234,771.707 550.793,735.73 551.353,718.065 551.912,735.723 552.471,717.016 553.031,717.668 553.59,681.154 554.149,685.499 554.708,737.575 555.268,702.94 555.827,671.278 556.386,705.137 556.945,724.593 557.505,687.078 558.064,689.674 558.623,642.373 559.182,646.577 559.742,664.389 560.301,668.739 560.86,672.929 561.419,691.9 561.979,673.044 562.538,695.599 563.097,698.168 563.656,731.476 564.216,765.715 564.775,744.93 565.334,725.388 565.893,758.153 566.453,738.4 567.012,771.498 567.571,772.279 568.13,788.741 568.69,816.858 569.249,796.509 569.808,790.309 570.367,771.162 570.927,799.868 571.486,780.782 572.045,775.071 572.604,789.213 573.164,769.965 573.723,800.625 574.282,794.291 574.841,774.664 575.401,774.112 575.96,788.52 576.519,766.993 577.078,777.266 577.638,775.621 578.197,739.422 578.756,722.867 579.315,722.089 579.875,721.861 580.434,787.006 580.993,783.848 581.552,800.051 582.112,794.805 582.671,790.424 583.23,765.686 583.789,778.923 584.349,744.72 584.908,741.665 585.467,724.135 586.026,723.333 586.586,787.415 587.145,748.744 587.704,729.996 588.263,696.059 588.823,681.57 589.382,699.264 589.941,680.444 590.5,649.227 591.06,668.377 591.619,686.931 592.178,672.566 592.737,687.515 593.297,706.094 593.856,706.889 594.415,723.813 594.974,743.248 595.534,675.521 596.093,661.434 596.652,681.39 597.211,667.9 597.771,672 598.33,657.79 598.889,693.112 599.448,693.035 600.008,675.376 600.567,628.194 601.126,614.624 601.685,604.406 602.245,591.548 602.804,598.286 603.363,632.429 603.922,634.509 604.482,640.658 605.041,630.465 605.6,669.914 606.159,656.477 606.719,658.699 607.278,595.035 607.837,632.705 608.396,638.365 608.956,676.466 609.515,646.762 610.074,649.175 610.633,635.293 611.193,672.409 611.752,691.652 612.311,659.575 612.87,645.213 613.43,664.198 613.989,667.273 614.548,684.752 615.107,684.202 615.667,687.357 616.226,687.283 616.785,637.71 617.344,624.041 617.904,642.76 618.463,642.999 619.022,677.318 619.581,692.526 620.141,695.341 620.7,681.916 621.259,682.327 621.818,686.418 622.378,638.109 622.937,639.321 623.496,608.445 624.055,611.286 624.615,614.224 625.174,588.719 625.733,612.409 626.292,634.509 626.852,587.917 627.411,589.785 627.97,597.651 628.529,605.011 629.089,643.78 629.648,666.259 630.207,684.154 630.766,654.666 631.326,611.005 631.885,648.745 632.444,638.816 633.003,624.645 633.563,678.722 634.122,664.921 634.681,651.845 635.24,670.072 635.8,657.476 636.359,643.949 636.918,662.964 637.477,633.746 638.037,640.537 638.596,646.889 639.155,667.553 639.714,670.476 640.274,654.81 640.833,674.884 641.392,692.604 641.951,710.16 642.511,696.469 643.07,696.903 643.629,716.302 644.188,733.021 644.748,746.572 645.307,711.121 645.866,739.486 646.425,749.424 646.985,736.32 647.544,736.868 648.103,719.107 648.662,718.913 649.222,719.29 649.781,703.079 650.34,734.825 650.899,716.178 651.459,749.78 652.018,748.357 652.577,731.426 653.136,778.784 653.696,742.743 654.255,741.204 654.814,725.3 655.373,721.717 655.933,717.453 656.492,730.389 657.051,708.69 657.61,705.241 658.17,655.165 658.729,638.046 659.288,640.984 659.847,675.89 660.407,657.088 660.966,659.867 661.525,662.948 662.084,664.388 662.644,662.764 663.203,601.902 663.762,589.055 664.321,610.578 664.881,596.364 665.44,635.33 665.999,625.574 666.558,645.725 667.118,664.667 667.677,698.987 668.236,746.673 668.795,762.721 669.355,775.458 669.914,770.455 670.473,749.353 671.032,763.776 671.592,770.798 672.151,798.857 672.71,778.454 673.269,760.068 673.829,721.548 674.388,702.461 674.947,671.299 675.506,704.279 676.066,672.856 676.625,655.981 677.184,674.949 677.743,679.119 678.303,680.799 678.862,714.397 679.421,728.203 679.981,708.538 680.54,710.257 681.099,712.242 681.658,715.065 682.218,728.824 682.777,696.451 683.336,709.709 683.895,725.62 684.455,756.69 685.014,756.226 685.573,738.899 686.132,738.98 686.692,754.055 687.251,782.152 687.81,806.31 688.369,798.401 688.929,788.027 689.488,768.156 690.047,780.658 690.606,774.587 691.166,788.068 691.725,765.84 692.284,796.294 692.843,774.968 693.403,772.103 693.962,798.993 694.521,809.702 695.08,803.854 695.64,797.718 696.199,794.551 696.758,773.894 697.317,751.609 697.877,731.89 698.436,680.891 698.995,698.652 699.554,712.108 700.114,710.073 700.673,711.507 701.232,712.584 701.791,724.64 702.351,719.421 702.91,720.451 703.469,652.359 704.028,658.228 704.588,707.9 705.147,722.52 705.706,703.305 706.265,717.602 706.825,732.457 707.384,735.089 707.943,749.619 708.502,734.412 709.062,722.238 709.621,705.01 710.18,669.391 710.739,704.224 711.299,752.018 711.858,769.748 712.417,765.743 712.976,762.54 713.536,758.878 714.095,756.086 714.654,752.713 715.213,747.945 715.773,744.159 716.332,724.036 716.891,720.46 717.45,747.395 718.01,743.543 718.569,742.384 719.128,760.346 719.687,804.735 720.247,781.783 720.806,790.407 721.365,786.228 721.924,796.711 722.484,785.116 723.043,781.245 723.602,824.577 724.161,817.476 724.721,794.921 725.28,807.822 725.839,849.632 726.398,824.976 726.958,815.241 727.517,778.511 728.076,760.039 728.635,773.554 729.195,736.794 729.754,749.304 730.313,731.622 730.872,731.08 731.432,744.249 731.991,724.201 732.55,738.841 733.109,704.48 733.669,705.444 734.228,719.232 734.787,715.854 735.346,750.423 735.906,717.643 736.465,720.717 737.024,701.24 737.583,716.302 738.143,713.401 738.702,679.734 739.261,663.758 739.82,647.939 740.38,649.47 740.939,620.447 741.498,621.598 742.057,603.712 742.617,655.926 743.176,687.298 743.735,671.15 744.294,690.639 744.854,655.756 745.413,671.731 745.972,675.671 746.531,673.771 747.091,708.007 747.65,693.292 748.209,661.048 748.768,643.931 749.328,649.3 749.887,633.408 750.446,620.671 751.005,610.447 751.565,630.856 752.124,651.369 752.683,602.992 753.242,592.003 753.802,611.877 754.361,585.443 754.92,591.479 755.479,612.343 756.039,601.495 756.598,574.761 757.157,554.049 757.716,576.558 758.276,579.349 758.835,599.416 759.394,587.583 759.953,577.271 760.513,600.092 761.072,589.255 761.631,611.854 762.19,679.586 762.75,681.707 763.309,697.849 763.868,714.297 764.427,730.418 764.987,728.712 765.546,727.824 766.105,759.274 766.664,738.79 767.224,750.732 767.783,750.356 768.342,745.894 768.901,726.821 769.461,705.993 770.02,751.886 770.579,767.19 771.138,749.703 771.698,766.991 772.257,748.137 772.816,743.371 773.375,724.89 773.935,724.24 774.494,675.438 775.053,660.85 775.612,662.58 776.172,696.56 776.731,734.46 777.29,714.351 777.849,726.633 778.409,758.704 778.968,723.088 779.527,738.302 780.086,736.675 780.646,752.969 781.205,767.217 781.764,811.753 782.323,789.285 782.883,782.101 783.442,762.106 784.001,756.804 784.56,721.083 785.12,752.225 785.679,732.631 786.238,766.047 786.797,746.019 787.357,743.938 787.916,742.145 788.475,741.556 789.034,722.688 789.594,705.685 790.153,706.31 790.712,723.692 791.271,719.502 791.831,733.578 792.39,745.864 792.949,695.308 793.508,710.575 794.068,707.139 794.627,691.39 795.186,688.762 795.745,639.744 796.305,607.596 796.864,596.357 797.423,613.732 797.982,617.431 798.542,654.93 799.101,622.16 799.66,613.34 800.219,617.771 800.779,622.823 801.338,644.203 801.897,665.419 802.456,667.475 803.016,679.775 803.575,612.786 804.134,634.073 804.693,619.33 805.253,625.054 805.812,640.607 806.371,642.827 806.931,660.002 807.49,663.263 808.049,648.524 808.608,650.428 809.168,669.284 809.727,672.811 810.286,623.255 810.845,674.423 811.405,705.407 811.964,705.863 812.523,735.049 813.082,763.505 813.642,745.614 814.201,744.877 814.76,741.176 815.319,739.014 815.879,731.488 816.438,745.495 816.997,728.919 817.556,745.167 818.116,726.188 818.675,708.144 819.234,657.872 819.793,672.936 820.353,671.447 820.912,654.44 821.471,608.5 822.03,593.849 822.59,566.043 823.149,569.535 823.708,593.329 824.267,615.966 824.827,618.974 825.386,607.117 825.945,592.147 826.504,596.643 827.064,621.156 827.623,611.288 828.182,634.677 828.741,607.39 829.301,628.761 829.86,664.521 830.419,686.096 830.978,687.602 831.538,719.487 832.097,746.738 832.656,744.853 833.215,710.831 833.775,710.351 834.334,707.637 834.893,691.691 835.452,722.952 836.012,722.612 836.571,701.011 837.13,698.495 837.689,727.481 838.249,708.972 838.808,675.369 839.367,629.284 839.926,598.482 840.486,638.649 841.045,657.752 841.604,661.942 842.163,664.346 842.723,682.761 843.282,650.153 843.841,653.185 844.4,637.493 844.96,609.713 845.519,616.836 846.078,619.97 846.637,624.05 847.197,628.65 847.756,618.821 848.315,640.592 848.874,642.388 849.434,646.564 849.993,650.974 850.552,669.206 851.111,692.467 851.671,697.172 852.23,661.145 852.789,665.307 853.348,700.61 853.908,701.473 854.467,704.849 855.026,657.051 855.585,678.582 856.145,665.327 856.704,669.458 857.263,668.85 857.822,703.978 858.382,687.86 858.941,703.873 859.5,670.123 860.059,658.96 860.619,659.181 861.178,678.943 861.737,695.654 862.296,709.598 862.856,688.543 863.415,672.094 863.974,705.65 864.533,690.452 865.093,706.455 865.652,687.066 866.211,669.778 866.77,707.067 867.33,703.401 867.889,685.035 868.448,717.453 869.007,698.367 869.567,665.381 870.126,683.78 870.685,731.035 871.244,745.58 871.804,729.641 872.363,760.699 872.922,774.564 873.481,784.963 874.041,784.435 874.6,828.854 875.159,838.054 875.718,861.993 876.278,836.545 876.837,826.849 877.396,819.314 877.955,796.938 878.515,790.937 879.074,851.767 879.633,848.788 880.192,853.33 880.752,827.319 881.311,851.796 881.87,843.597 882.429,837.873 882.989,796.552 883.548,741.084 884.107,691.344 884.666,709.321 885.226,719.11 885.785,730.764 886.344,743.18 886.903,738.821 887.463,735.805 888.022,715.87 888.581,716.39 889.14,698.727 889.7,713.175 890.259,727.149 890.818,693.77 891.377,682.526 891.937,685.227 892.496,652.132 893.055,651.253 893.614,670.29 894.174,656.952 894.733,691.369 895.292,691.247 895.851,658.937 896.411,632.292 896.97,651.4 897.529,668.189 898.088,653.67 898.648,652.559 899.207,621.155 899.766,653.306 900.325,636.333 900.885,640.212 901.444,643.508 902.003,647.892 902.562,648.568 903.122,669.528 903.681,689.575 904.24,688.756 904.799,690.812 905.359,688.931 905.918,672.765 906.477,689.172 907.036,655.791 907.596,655.426 908.155,668.087 908.714,671.136 909.273,684.012 909.833,670.535 910.392,669.387 910.951,669.387 911.51,669.002 912.07,654.612 912.629,690.328 913.188,707.81 913.747,707.275 914.307,726.313 914.866,676.594 915.425,659.82 915.984,660.013 916.544,644.42 917.103,646.845 917.662,649.787 918.221,652.219 918.781,653.061 919.34,640.227 919.899,655.046 920.458,656.166 921.018,640.331 921.577,644.445 922.136,678.082 922.695,664.433 923.255,682.916 923.814,667.218 924.373,667.087 924.932,668.269 925.492,654.251 926.051,638.158 926.61,657.692 927.169,659.411 927.729,628.666 928.288,631.687 928.847,650.07 929.406,666.713 929.966,666.804 930.525,666.266 931.084,700.849 931.644,716.416 932.203,698.816 932.762,667.355 933.321,666.762 933.881,683.171 934.44,684.473 934.999,682.464 935.558,683.207 936.118,666.926 936.677,666.409 937.236,665.685 937.795,664.809 938.355,668.194 938.914,665.427 939.473,652.582 940.032,624.129 940.592,609.913 941.151,644.435 941.71,617.765 942.269,623.438 942.829,662.061 943.388,661.532 943.947,682.838 944.506,684.042 945.066,698.282 945.625,683.329 946.184,682.527 946.743,667.859 947.303,685.709 947.862,684.814 948.421,684.609 948.98,715.034 949.54,742.926 950.099,769.637 950.658,748.307 951.217,789.493 951.777,784.416 952.336,761.932 952.895,772.163 953.454,749.445 954.014,728.527 954.573,728.847 955.132,712.333 955.691,709.049 956.251,724.23 956.81,706.622 957.369,704.768 957.928,705.09 958.488,688.464 959.047,723.576 959.606,739.176 960.165,735.747 960.725,700.897 961.284,700.698 961.843,747.773 962.402,743.16 962.962,737.956 963.521,715.656 964.08,698.672 964.639,664.994 965.199,684.66 965.758,665.878 966.317,683.719 966.876,699.45 967.436,697.601 967.995,694.582 968.554,708.983 969.113,726.446 969.673,724.075 970.232,721.743 970.791,764.853 971.35,760.157 971.91,754.666 972.469,749.679 973.028,731.144 973.587,744.583 974.147,740.657 974.706,719.255 975.265,703.484 975.824,701.31 976.384,668.665 976.943,638.583 977.502,607.074 978.061,612.821 978.621,631.978 979.18,635.783 979.739,622.723 980.298,626.792 980.858,631.791 981.417,634.113 981.976,622.697 982.535,673.443 983.095,675.912 983.654,611.639 984.213,666.59 984.772,684.387 985.332,732.755 985.891,778.641 986.45,773.075 987.009,766.225 987.569,727.242 988.128,726.338 988.687,739.718 989.246,720.038 989.806,703.299 990.365,700.209 990.924,716.809 991.483,715.276 992.043,759.737 992.602,774.205 993.161,814.424 993.72,805.921 994.28,800.138 994.839,794.207 995.398,800.331 995.957,795.349 996.517,773 997.076,768.753 997.635,763.133 998.194,755.347 998.754,737.375 999.313,697.532 999.872,713.239 1000.43,730.927 1000.99,714.576 1001.55,681.367 1002.11,714.977 1002.67,744.791 1003.23,711.384 1003.79,710.708 1004.35,693.075 1004.91,659.588 1005.46,612.368 1006.02,600.724 1006.58,555.837 1007.14,578.993 1007.7,586.263 1008.26,573.872 1008.82,613.943 1009.38,601.051 1009.94,605.996 1010.5,611.274 1011.06,614.054 1011.62,636.651 1012.18,622.077 1012.73,642.057 1013.29,659.526 1013.85,660.512 1014.41,694.752 1014.97,694.248 1015.53,696.295 1016.09,711.418 1016.65,741.772 1017.21,703.727 1017.77,716.365 1018.33,681.944 1018.89,696.509 1019.45,680.008 1020.01,665.003 1020.56,667.476 1021.12,686.595 1021.68,721.1 1022.24,719.378 1022.8,734.249 1023.36,732.933 1023.92,716.383 1024.48,696.309 1025.04,731.342 1025.6,726.991 1026.16,709.941 1026.72,709.025 1027.28,758.497 1027.83,723.968 1028.39,739.809 1028.95,721.365 1029.51,766.674 1030.07,731.689 1030.63,761.736 1031.19,740.282 1031.75,737.767 1032.31,717.514 1032.87,696.068 1033.43,678.562 1033.99,664.117 1034.55,679.762 1035.1,677.243 1035.66,694.732 1036.22,727.355 1036.78,757.714 1037.34,720.312 1037.9,718.13 1038.46,699.398 1039.02,683.863 1039.58,664.221 1040.14,665.3 1040.7,647.333 1041.26,619.07 1041.82,609.961 1042.38,616.624 1042.93,652.719 1043.49,656.816 1044.05,622.896 1044.61,627.468 1045.17,646.896 1045.73,679.259 1046.29,692.544 1046.85,676.762 1047.41,678.194 1047.97,678.076 1048.53,678.283 1049.09,677.396 1049.65,679.013 1050.2,714.575 1050.76,727.527 1051.32,707.225 1051.88,721.918 1052.44,735.779 1053,750.695 1053.56,744.579 1054.12,742.821 1054.68,755.767 1055.24,753.855 1055.8,750.866 1056.36,745.088 1056.92,742.577 1057.48,723.123 1058.03,766.168 1058.59,729.508 1059.15,694.291 1059.71,712.366 1060.27,744.723 1060.83,725.224 1061.39,723.385 1061.95,704.105 1062.51,702.219 1063.07,686.478 1063.63,707.796 1064.19,724.93 1064.75,738.429 1065.3,783.522 1065.86,760.088 1066.42,741.385 1066.98,736.941 1067.54,736.774 1068.1,748.939 1068.66,746.852 1069.22,697.079 1069.78,662.654 1070.34,664.38 1070.9,648.486 1071.46,682.319 1072.02,700.419 1072.57,681.6 1073.13,666.864 1073.69,665.134 1074.25,682.892 1074.81,620.128 1075.37,620.702 1075.93,626.335 1076.49,630.508 1077.05,635.455 1077.61,590.991 1078.17,598.331 1078.73,603.886 1079.29,626.284 1079.85,626.226 1080.4,630.246 1080.96,661.677 1081.52,693.334 1082.08,647.958 1082.64,649.808 1083.2,636.443 1083.76,673.721 1084.32,689.734 1084.88,705.955 1085.44,723.256 1086,718.331 1086.56,718.982 1087.12,732.955 1087.67,696.519 1088.23,679.121 1088.79,665.262 1089.35,646.699 1089.91,667.023 1090.47,684.137 1091.03,670.857 1091.59,641.729 1092.15,611.365 1092.71,635.034 1093.27,650.289 1093.83,650.485 1094.39,652.511 1094.94,623.446 1095.5,644.555 1096.06,646.007 1096.62,677.552 1097.18,695.212 1097.74,711.889 1098.3,711.993 1098.86,724.389 1099.42,739.788 1099.98,737.298 1100.54,750.19 1101.1,734.187 1101.66,699.48 1102.22,681.6 1102.77,679.544 1103.33,665.412 1103.89,647.329 1104.45,632.109 1105.01,567.351 1105.57,608.559 1106.13,565.29 1106.69,537.948 1107.25,576.878 1107.81,582.175 1108.37,606.353 1108.93,573.961 1109.49,548.238 1110.04,590.338 1110.6,576.603 1111.16,598.468 1111.72,588.275 1112.28,593.607 1112.84,598.691 1113.4,600.972 1113.96,603.717 1114.52,574.754 1115.08,615.138 1115.64,651.594 1116.2,633.006 1116.76,668.65 1117.31,720.421 1117.87,763.625 1118.43,760.201 1118.99,773.647 1119.55,754.229 1120.11,720.563 1120.67,719.658 1121.23,701.536 1121.79,718.507 1122.35,733.216 1122.91,711.095 1123.47,695.769 1124.03,697.552 1124.59,681.581 1125.14,730.842 1125.7,761.933 1126.26,771.012 1126.82,732.546 1127.38,731.491 1127.94,711.125 1128.5,710.496 1129.06,694.267 1129.62,711.892 1130.18,712.122 1130.74,727.509 1131.3,729.25 1131.86,745.308 1132.41,712.717 1132.97,712.795 1133.53,663.314 1134.09,698.428 1134.65,679.784 1135.21,695.31 1135.77,729.476 1136.33,660.014 1136.89,661.092 1137.45,677.305 1138.01,681.17 1138.57,664.951 1139.13,681.179 1139.68,683.651 1140.24,681.606 1140.8,697.439 1141.36,677.11 1141.92,678.515 1142.48,666.917 1143.04,671.773 1143.6,704.131 1144.16,685.955 1144.72,688.012 1145.28,703.247 1145.84,703.348 1146.4,650.587 1146.96,669.919 1147.51,701.7 1148.07,718.266 1148.63,751.25 1149.19,714.721 1149.75,714.297 1150.31,727.18 1150.87,693.871 1151.43,676.762 1151.99,676.468 1152.55,642.19 1153.11,647.321 1153.67,630.969 1154.23,617.856 1154.78,654.12 1155.34,652.719 1155.9,619.179 1156.46,619.467 1157.02,640.098 1157.58,610.816 1158.14,580.331 1158.7,618.82 1159.26,606.982 1159.82,595.432 1160.38,583.148 1160.94,605.83 1161.5,611.844 1162.05,631.559 1162.61,634.464 1163.17,673.304 1163.73,689.341 1164.29,675.556 1164.85,711.196 1165.41,710.696 1165.97,697.3 1166.53,697.28 1167.09,711.533 1167.65,740.471 1168.21,722.171 1168.77,722.044 1169.33,702.79 1169.88,699.007 1170.44,699.717 1171,716.733 1171.56,695.896 1172.12,693.543 1172.68,694.114 1173.24,710.607 1173.8,725.612 1174.36,722.951 1174.92,723.192 1175.48,724.435 1176.04,757.276 1176.6,736.398 1177.15,764.253 1177.71,790.518 1178.27,783.938 1178.83,808.738 1179.39,785.436 1179.95,744.55 1180.51,752.665 1181.07,717.326 1181.63,714.295 1182.19,694.832 1182.75,710.539 1183.31,770.565 1183.87,784.398 1184.43,809.151 1184.98,801.539 1185.54,749.851 1186.1,731.523 1186.66,729.935 1187.22,709.964 1187.78,708.13 1188.34,692.323 1188.9,692.17 1189.46,626.374 1190.02,628.811 1190.58,632.543 1191.14,637.975 1191.7,620.764 1192.25,643.753 1192.81,627.901 1193.37,627.866 1193.93,628.438 1194.49,663.803 1195.05,649.268 1195.61,647.591 1196.17,664.033 1196.73,614.08 1197.29,617.776 1197.85,635.261 1198.41,672.255 1198.97,689.334 1199.52,739.397 1200.08,735.968 1200.64,747.138 1201.2,741.204 1201.76,751.142 1202.32,732.861 1202.88,746.254 1203.44,762.495 1204,740.536 1204.56,718.542 1205.12,734.161 1205.68,718.267 1206.24,717.87 1206.8,688.01 1207.35,656.963 1207.91,658.652 1208.47,673.153 1209.03,652.954 1209.59,622.391 1210.15,626.403 1210.71,628.95 1211.27,649.743 1211.83,652.495 1212.39,669.221 1212.95,670.94 1213.51,674.93 1214.07,659.367 1214.62,676.238 1215.18,660.287 1215.74,689.868 1216.3,674.871 1216.86,672.161 1217.42,660.155 1217.98,662.727 1218.54,678.907 1219.1,694.279 1219.66,677.606 1220.22,681.981 1220.78,714.803 1221.34,776.942 1221.89,769.022 1222.45,811.549 1223.01,821.241 1223.57,816.386 1224.13,808.89 1224.69,788.375 1225.25,783.533 1225.81,729.675 1226.37,745.661 1226.93,729.648 1227.49,743.812 1228.05,772.259 1228.61,766.436 1229.17,795.079 1229.72,772.922 1230.28,751.147 1230.84,717.821 1231.4,698.052 1231.96,714.81 1232.52,708.415 1233.08,692.646 1233.64,740.571 1234.2,738.638 1234.76,738.009 1235.32,716.474 1235.88,680.48 1236.44,682.26 1236.99,664.537 1237.55,662.838 1238.11,664.09 1238.67,681.33 1239.23,666.04 1239.79,650.586 1240.35,650.335 1240.91,605.426 1241.47,647.859 1242.03,650.637 1242.59,638.554 1243.15,622.121 1243.71,628.421 1244.26,627.192 1244.82,629.985 1245.38,632.728 1245.94,603.259 1246.5,605.678 1247.06,610.989 1247.62,614.621 1248.18,619.473 1248.74,636.268 1249.3,621.852 1249.86,610.704 1250.42,598.997 1250.98,616.496 1251.54,605.393 1252.09,656.59 1252.65,643.085 1253.21,612.221 1253.77,613.652 1254.33,628.163 1254.89,696.045 1255.45,713.581 1256.01,708.685 1256.57,694.607 1257.13,696.784 1257.69,697.604 1258.25,696.865 1258.81,665.985 1259.36,664.148 1259.92,679.693 1260.48,648.927 1261.04,633.689 1261.6,635.492 1262.16,623.632 1262.72,627.436 1263.28,650.428 1263.84,656.394 1264.4,643.728 1264.96,647.298 1265.52,650.75 1266.08,667.227 1266.63,633.83 1267.19,636.084 1267.75,637.457 1268.31,624.343 1268.87,625.162 1269.43,647.186 1269.99,663.348 1270.55,647.662 1271.11,629.222 1271.67,631.33 1272.23,653.028 1272.79,640.293 1273.35,640.705 1273.91,610.534 1274.46,633.673 1275.02,685.874 1275.58,700.701 1276.14,670.155 1276.7,686.064 1277.26,669.399 1277.82,670.682 1278.38,690.57 1278.94,707.181 1279.5,689.484 1280.06,672.799 1280.62,671.144 1281.18,692.03 1281.73,705.671 1282.29,722.055 1282.85,751.803 1283.41,749.889 1283.97,764.27 1284.53,744.622 1285.09,759.046 1285.65,757.369 1286.21,705.655 1286.77,692.173 1287.33,673.51 1287.89,685.158 1288.45,700.554 1289,719.18 1289.56,736.189 1290.12,683.078 1290.68,623.813 1291.24,641.653 1291.8,611.502 1292.36,584.27 1292.92,590.749 1293.48,595.201 1294.04,599.795 1294.6,600.973 1295.16,606.113 1295.72,625.504 1296.28,608.831 1296.83,624.705 1297.39,627.004 1297.95,629.613 1298.51,665.117 1299.07,698.637 1299.63,680.932 1300.19,663.74 1300.75,664.999 1301.31,696.027 1301.87,665.043 1302.43,681.461 1302.99,715.808 1303.55,717.193 1304.1,702.132 1304.66,701.739 1305.22,718.63 1305.78,718.402 1306.34,701.231 1306.9,714.261 1307.46,728.611 1308.02,759.456 1308.58,773.626 1309.14,783.783 1309.7,794.151 1310.26,786.251 1310.82,797.984 1311.38,796.435 1311.93,790.388 1312.49,784.268 1313.05,811.12 1313.61,804.86 1314.17,780.298 1314.73,775.406 1315.29,720.299 1315.85,735.343 1316.41,716.194 1316.97,715.823 1317.53,711.505 1318.09,725.092 1318.65,741.917 1319.2,741.995 1319.76,735.892 1320.32,765.414 1320.88,743.334 1321.44,756.426 1322,705.334 1322.56,706.463 1323.12,716.983 1323.68,687.023 1324.24,686.778 1324.8,685.861 1325.36,667.186 1325.92,634.33 1326.47,633.93 1327.03,636.733 1327.59,607.258 1328.15,575.949 1328.71,546.585 1329.27,551.247 1329.83,591.276 1330.39,613.067 1330.95,633.482 1331.51,635.452 1332.07,639.012 1332.63,641.971 1333.19,615.361 1333.75,586.692 1334.3,596.021 1334.86,599.116 1335.42,619.818 1335.98,638.354 1336.54,671.293 1337.1,620.531 1337.66,587.317 1338.22,557.181 1338.78,581.172 1339.34,600.333 1339.9,606.463 1340.46,611.002 1341.02,597.018 1341.57,605.084 1342.13,662.561 1342.69,662.506 1343.25,679.629 1343.81,683.319 1344.37,684.392 1344.93,668.996 1345.49,685.972 1346.05,703.431 1346.61,704.455 1347.17,688.873 1347.73,689.462 1348.29,670.402 1348.84,673.776 1349.4,689.16 1349.96,689.921 1350.52,675.845 1351.08,675.87 1351.64,677.043 1352.2,627.95 1352.76,647.224 1353.32,629.437 1353.88,646.785 1354.44,662.482 1355,724.759 1355.56,725.324 1356.12,721.452 1356.67,703.526 1357.23,701.615 1357.79,745.931 1358.35,743.515 1358.91,725.27 1359.47,725.487 1360.03,724.46 1360.59,704.533 1361.15,673.214 1361.71,690.015 1362.27,690.008 1362.83,721.319 1363.39,718.837 1363.94,702.696 1364.5,685.413 1365.06,685.778 1365.62,684.112 1366.18,683.5 1366.74,681.852 1367.3,651.33 1367.86,620.259 1368.42,659.565 1368.98,676.078 1369.54,692.915 1370.1,738.002 1370.66,716.806 1371.21,683.359 1371.77,702.105 1372.33,703.381 1372.89,721.121 1373.45,737.323 1374.01,735.301 1374.57,731.867 1375.13,744.691 1375.69,726.108 1376.25,703.235 1376.81,700.887 1377.37,701.216 1377.93,714.147 1378.49,700.221 1379.04,714.734 1379.6,730.326 1380.16,727.039 1380.72,720.995 1381.28,702.202 1381.84,688.343 1382.4,686.493 1382.96,671.18 1383.52,673.349 1384.08,672.167 1384.64,688.933 1385.2,671.082 1385.76,675.161 1386.31,675.061 1386.87,655.595 1387.43,656.792 1387.99,654.927 1388.55,671.307 1389.11,657.147 1389.67,642.098 1390.23,661.178 1390.79,676.481 1391.35,678.492 1391.91,681.135 1392.47,682.617 1393.03,732.222 1393.58,727.505 1394.14,678.378 1394.7,694.709 1395.26,678.205 1395.82,694.07 1396.38,696.169 1396.94,680.291 1397.5,680.125 1398.06,648.516 1398.62,664.438 1399.18,666.607 1399.74,667.499 1400.3,653.907 1400.86,670.251 1401.41,655.113 1401.97,658.241 1402.53,645.004 1403.09,695.588 1403.65,695.682 1404.21,680.032 1404.77,666.356 1405.33,668.473 1405.89,702.264 1406.45,733.759 1407.01,761.124 1407.57,773.408 1408.13,769.132 1408.68,780.5 1409.24,773.169 1409.8,767.861 1410.36,728.293 1410.92,728.581 1411.48,744.035 1412.04,773.265 1412.6,768.693 1413.16,765.427 1413.72,778.526 1414.28,790.533 1414.84,802.71 1415.4,779.282 1415.95,768.635 1416.51,781.83 1417.07,793.098 1417.63,788.827 1418.19,764.514 1418.75,778.614 1419.31,773.171 1419.87,754.637 1420.43,765.785 1420.99,748.949 1421.55,744.175 1422.11,726.676 1422.67,707.248 1423.23,689.658 1423.78,686.412 1424.34,667.208 1424.9,653.791 1425.46,643.932 1426.02,644.328 1426.58,616.881 1427.14,619.411 1427.7,637.633 1428.26,623.701 1428.82,607.929 1429.38,626.573 1429.94,600.631 1430.5,590.089 1431.05,640.852 1431.61,660.365 1432.17,629.218 1432.73,633.179 1433.29,634.052 1433.85,603.115 1434.41,592.621 1434.97,561.9 1435.53,569.979 1436.09,525.508 1436.65,530.681 1437.21,519.142 1437.77,528.708 1438.33,548.701 1438.88,554.192 1439.44,559.795 1440,565.876 1440.56,558.758 1441.12,597.637 1441.68,601.205 1442.24,602.706 1442.8,610.246 1443.36,569.043 1443.92,574.789 1444.48,592.349 1445.04,598.734 1445.6,570.038 1446.15,575.058 1446.71,611.116 1447.27,614.815 1447.83,615.919 1448.39,623.438 1448.95,632.393 1449.51,633.709 1450.07,637.131 1450.63,671.602 1451.19,656.495 1451.75,674.202 1452.31,645.012 1452.87,646.261 1453.42,713.975 1453.98,728.845 1454.54,727.623 1455.1,709.428 1455.66,726.177 1456.22,703.583 1456.78,717.239 1457.34,717.793 1457.9,733.174 1458.46,712.295 1459.02,724.611 1459.58,702.724 1460.14,702.075 1460.7,703.847 1461.25,719.517 1461.81,719.434 1462.37,732.409 1462.93,728.886 1463.49,790.372 1464.05,786.305 1464.61,764.23 1465.17,774.827 1465.73,751.24 1466.29,749.029 1466.85,747.351 1467.41,749.31 1467.97,764.84 1468.52,760.485 1469.08,722.088 1469.64,721.861 1470.2,720.917 1470.76,734.774 1471.32,747.539 1471.88,712.148 1472.44,725.842 1473,741.805 1473.56,738.966 1474.12,737.458 1474.68,732.647 1475.24,762.48 1475.79,773.456 1476.35,753.336 1476.91,779.947 1477.47,760.174 1478.03,786.451 1478.59,780.414 1479.15,752.81 1479.71,797.009 1480.27,789.568 1480.83,785.849 1481.39,764.892 1481.95,777.358 1482.51,773.494 1483.07,739.264 1483.62,721.018 1484.18,701.843 1484.74,720.583 1485.3,718.158 1485.86,698.004 1486.42,681.275 1486.98,712.449 1487.54,710.428 1488.1,675.4 1488.66,674.509 1489.22,675.585 1489.78,675.336 1490.34,691.718 1490.89,693.527 1491.45,694.196 1492.01,661.528 1492.57,632.056 1493.13,684.414 1493.69,682.384 1494.25,695.146 1494.81,678.808 1495.37,678.567 1495.93,680.665 1496.49,699.305 1497.05,663.763 1497.61,631.771 1498.16,601.264 1498.72,586.58 1499.28,577.214 1499.84,617.051 1500.4,605.253 1500.96,622.66 1501.52,608.187 1502.08,627.184 1502.64,645.882 1503.2,634.961 1503.76,636.214 1504.32,639.342 1504.88,626.271 1505.44,612.319 1505.99,616.411 1506.55,652.522 1507.11,652.273 1507.67,657.558 1508.23,657.138 1508.79,646.404 1509.35,651.257 1509.91,650.997 1510.47,653.174 1511.03,652.405 1511.59,653.599 1512.15,674.134 1512.71,676.425 1513.26,691.958 1513.82,692.522 1514.38,679.153 1514.94,693.888 1515.5,660.855 1516.06,648.197 1516.62,636.121 1517.18,624.449 1517.74,609.255 1518.3,632.624 1518.86,636.792 1519.42,620.347 1519.98,642.83 1520.53,629.814 1521.09,633.411 1521.65,619.97 1522.21,624.065 1522.77,643.283 1523.33,675.791 1523.89,707.47 1524.45,707.23 1525.01,689.684 1525.57,721.096 1526.13,737.04 1526.69,735.211 1527.25,717.793 1527.81,699.351 1528.36,680.028 1528.92,727.736 1529.48,740.974 1530.04,722.958 1530.6,733.127 1531.16,716.499 1531.72,730.595 1532.28,726.078 1532.84,710.464 1533.4,742.087 1533.96,772.001 1534.52,786.149 1535.08,763.962 1535.63,746.489 1536.19,776 1536.75,804.744 1537.31,769.213 1537.87,781.565 1538.43,791.527 1538.99,769.094 1539.55,778.959 1540.11,774.689 1540.67,769.92 1541.23,734.772 1541.79,701.335 1542.35,750.322 1542.9,731.001 1543.46,745.109 1544.02,773.074 1544.58,785.467 1545.14,779.496 1545.7,790.381 1546.26,784.388 1546.82,783.834 1547.38,795.002 1547.94,789.438 1548.5,783.905 1549.06,783.106 1549.62,748.533 1550.18,730.336 1550.73,712.238 1551.29,710.841 1551.85,692.491 1552.41,673.051 1552.97,739.294 1553.53,706.761 1554.09,724.769 1554.65,705.737 1555.21,706.992 1555.77,674.954 1556.33,644.517 1556.89,630.894 1557.45,633.138 1558,637.939 1558.56,626.142 1559.12,586.039 1559.68,607.962 1560.24,624.235 1560.8,611.111 1561.36,597.744 1561.92,602.392 1562.48,623.494 1563.04,560.002 1563.6,550.752 1564.16,540.324 1564.72,514.67 1565.28,523.142 1565.83,531.782 1566.39,554.773 1566.95,574.447 1567.51,564.931 1568.07,585.873 1568.63,576.247 1569.19,595.966 1569.75,599.534 1570.31,605.826 1570.87,609.616 1571.43,644.936 1571.99,681.32 1572.55,713.778 1573.1,713.751 1573.66,710.468 1574.22,642.228 1574.78,642.223 1575.34,644.415 1575.9,662.963 1576.46,663.69 1577.02,682.786 1577.58,666.205 1578.14,666.302 1578.7,638.12 1579.26,626.814 1579.82,631.311 1580.37,638.487 1580.93,623.266 1581.49,629.696 1582.05,650.253 1582.61,648.333 1583.17,637.486 1583.73,656.706 1584.29,677.77 1584.85,707.967 1585.41,691.764 1585.97,674.662 1586.53,741.487 1587.09,739.629 1587.65,733.6 1588.2,759.074 1588.76,785.396 1589.32,810.673 1589.88,806.971 1590.44,779.725 1591,790.688 1591.56,767.443 1592.12,810.133 1592.68,800.853 1593.24,792.032 1593.8,770.001 1594.36,743.726 1594.92,723.505 1595.47,718.35 1596.03,731.258 1596.59,713.295 1597.15,699.721 1597.71,716.929 1598.27,702.966 1598.83,733.736 1599.39,729.515 1599.95,742.441 1600.51,674.612 1601.07,707.01 1601.63,692.491 1602.19,708.035 1602.74,770.467 1603.3,800.271 1603.86,764.208 1604.42,757.905 1604.98,769.72 1605.54,780.839 1606.1,757.879 1606.66,754.905 1607.22,753.168 1607.78,784.282 1608.34,829.534 1608.9,819.788 1609.46,827.268 1610.02,769.674 1610.57,798.981 1611.13,775.901 1611.69,754.467 1612.25,686.187 1612.81,668.74 1613.37,668.912 1613.93,654.709 1614.49,622.451 1615.05,673.461 1615.61,690.87 1616.17,690.209 1616.73,688.276 1617.29,723.152 1617.84,670.732 1618.4,685.281 1618.96,699.472 1619.52,681.559 1620.08,695.625 1620.64,699.159 1621.2,694.577 1621.76,711.08 1622.32,662.679 1622.88,679.4 1623.44,681.458 1624,697.16 1624.56,698.328 1625.11,695.031 1625.67,711.025 1626.23,693.178 1626.79,708.809 1627.35,691.889 1627.91,676.18 1628.47,704.152 1629.03,702.932 1629.59,702.137 1630.15,714.851 1630.71,711.877 1631.27,726.783 1631.83,708.757 1632.39,707.389 1632.94,688.659 1633.5,658.102 1634.06,643.977 1634.62,665.386 1635.18,662.04 1635.74,661.63 1636.3,678.812 1636.86,665.898 1637.42,653.302 1637.98,600.093 1638.54,621.315 1639.1,588.949 1639.66,594.574 1640.21,599.503 1640.77,620.789 1641.33,642.209 1641.89,630.846 1642.45,612.592 1643.01,583.291 1643.57,588.275 1644.13,592.159 1644.69,593.547 1645.25,579.782 1645.81,551.557 1646.37,593.529 1646.93,585.132 1647.48,605.918 1648.04,604.964 1648.6,640.182 1649.16,643.626 1649.72,609.724 1650.28,613.688 1650.84,618.526 1651.4,623.374 1651.96,628.656 1652.52,632.883 1653.08,622.881 1653.64,609.174 1654.2,630.416 1654.76,651.665 1655.31,652.902 1655.87,667.738 1656.43,699.081 1656.99,680.4 1657.55,699.924 1658.11,728.494 1658.67,755.656 1659.23,770.277 1659.79,734.058 1660.35,768.409 1660.91,785.745 1661.47,778.262 1662.03,771.087 1662.58,764.101 1663.14,761.075 1663.7,740.078 1664.26,739.282 1664.82,735.316 1665.38,730.148 1665.94,695.338 1666.5,695.68 1667.06,696.452 1667.62,679.658 1668.18,678.328 1668.74,663.112 1669.3,662.586 1669.85,665.486 1670.41,664.673 1670.97,632.378 1671.53,688.458 1672.09,669.852 1672.65,702.845 1673.21,732.463 1673.77,766.012 1674.33,762.812 1674.89,758.396 1675.45,735.25 1676.01,730.78 1676.57,713.056 1677.13,695.195 1677.68,710.528 1678.24,755.036 1678.8,767.65 1679.36,748.532 1679.92,742.458 1680.48,741.044 1681.04,724.612 1681.6,742.561 1682.16,754.03 1682.72,747.584 1683.28,727.74 1683.84,725.568 1684.4,740.93 1684.95,753.315 1685.51,734.84 1686.07,732.513 1686.63,730.09 1687.19,756.665 1687.75,739.193 1688.31,721.453 1688.87,734.691 1689.43,700.349 1689.99,682.042 1690.55,666.251 1691.11,649.355 1691.67,663.595 1692.23,645.889 1692.78,650.446 1693.34,574.275 1693.9,597.753 1694.46,603.043 1695.02,571.717 1695.58,591.599 1696.14,530.349 1696.7,537.415 1697.26,548.182 1697.82,574.594 1698.38,546.529 1698.94,539.218 1699.5,533.694 1700.05,555.687 1700.61,547.227 1701.17,540.312 1701.73,537.396 1702.29,531.553 1702.85,538.63 1703.41,550.207 1703.97,541.256 1704.53,582.662 1705.09,587.73 1705.65,624.481 1706.21,626.973 1706.77,630.182 1707.32,620.532 1707.88,674.127 1708.44,660.645 1709,675.97 1709.56,661.24 1710.12,628.981 1710.68,654.246 1711.24,641.181 1711.8,644.199 1712.36,614.066 1712.92,571.344 1713.48,577.793 1714.04,632.862 1714.6,652.174 1715.15,655.193 1715.71,639.356 1716.27,673.952 1716.83,675.777 1717.39,656.636 1717.95,675.59 1718.51,689.157 1719.07,706.967 1719.63,656.675 1720.19,675.443 1720.75,655.838 1721.31,687.274 1721.87,684.413 1722.42,696.883 1722.98,696.486 1723.54,681.113 1724.1,696.705 1724.66,683.924 1725.22,700.559 1725.78,697.982 1726.34,744.735 1726.9,707.877 1727.46,706.19 1728.02,723.717 1728.58,726.916 1729.14,708.362 1729.69,706.082 1730.25,689.933 1730.81,688.349 1731.37,670.847 1731.93,684.664 1732.49,683.51 1733.05,665.724 1733.61,652.248 1734.17,655.317 1734.73,686.686 1735.29,702.222 1735.85,700.414 1736.41,698.302 1736.97,683.438 1737.52,698.136 1738.08,678.294 1738.64,713.474 1739.2,710.872 1739.76,708.925 1740.32,707.839 1740.88,723.26 1741.44,690.416 1742,707.487 1742.56,703.292 1743.12,655.919 1743.68,660.328 1744.24,663.667 1744.79,666.751 1745.35,667.791 1745.91,666.521 1746.47,685.338 1747.03,687.852 1747.59,685.461 1748.15,685.708 1748.71,669.921 1749.27,672.176 1749.83,655.972 1750.39,655.783 1750.95,672.854 1751.51,673.839 1752.06,692.034 1752.62,695.429 1753.18,695.217 1753.74,695.873 1754.3,696.652 1754.86,710.576 1755.42,708.047 1755.98,703.198 1756.54,717.74 1757.1,662.951 1757.66,678.156 1758.22,680.049 1758.78,712.015 1759.34,678.919 1759.89,696.567 1760.45,683.499 1761.01,686.974 1761.57,685.51 1762.13,668.611 1762.69,620.474 1763.25,605.605 1763.81,577.376 1764.37,631.526 1764.93,635.443 1765.49,622.65 1766.05,606.201 1766.61,609.342 1767.16,630.774 1767.72,633.434 1768.28,653.711 1768.84,653.871 1769.4,657.411 1769.96,675.071 1770.52,676.241 1771.08,659.48 1771.64,674.513 1772.2,693.651 1772.76,711.169 1773.32,739.959 1773.88,756.152 1774.43,753.392 1774.99,719.585 1775.55,719.228 1776.11,718.627 1776.67,666.743 1777.23,653.15 1777.79,655.661 1778.35,688.406 1778.91,687.359 1779.47,689.802 1780.03,674.559 1780.59,671.328 1781.15,674.673 1781.71,706.726 1782.26,703.496 1782.82,715.888 1783.38,695.951 1783.94,660.6 1784.5,648.753 1785.06,655.659 1785.62,655.814 1786.18,657.981 1786.74,674.876 1787.3,658.299 1787.86,644.867 1788.42,665.284 1788.98,648.677 1789.53,634.028 1790.09,637.513 1790.65,609.904 1791.21,626.715 1791.77,608.631 1792.33,631.834 1792.89,679.296 1793.45,697.898 1794.01,695.865 1794.57,692.478 1795.13,688.134 1795.69,672.624 1796.25,686.804 1796.8,670.922 1797.36,688.197 1797.92,671.157 1798.48,673.246 1799.04,707.042 1799.6,720.96 1800.16,750.728 1800.72,714.668 1801.28,681.332 1801.84,714.553 1802.4,709.709 1802.96,691.394 1803.52,738.701 1804.08,747.822 1804.63,743.562 1805.19,740.918 1805.75,737.062 1806.31,731.209 1806.87,677.452 1807.43,659.392 1807.99,681.674 1808.55,712.088 1809.11,692.772 1809.67,723.702 1810.23,719.58 1810.79,735.372 1811.35,730.374 1811.9,740.99 1812.46,736.182 1813.02,751.715 1813.58,733.752 1814.14,731.683 1814.7,746.145 1815.26,707.773 1815.82,674.449 1816.38,691.991 1816.94,708.081 1817.5,701.757 1818.06,690.314 1818.62,690.125 1819.18,689.58 1819.73,702.441 1820.29,685.008 1820.85,704.443 1821.41,716.976 1821.97,730.697 1822.53,726.971 1823.09,740.347 1823.65,739.856 1824.21,721.814 1824.77,751.55 1825.33,751.205 1825.89,764.34 1826.45,748.837 1827,715.457 1827.56,744.26 1828.12,741.761 1828.68,723.358 1829.24,719.651 1829.8,700.432 1830.36,703.53 1830.92,702.391 1831.48,682.136 1832.04,696.332 1832.6,696.605 1833.16,695.976 1833.72,677.71 1834.27,681.319 1834.83,684.404 1835.39,685.287 1835.95,717.574 1836.51,713.928 1837.07,713.585 1837.63,727.961 1838.19,744.29 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 691.802 L720.806 691.802 L721.365 691.802 L721.924 691.802 L722.484 691.802 L723.043 691.802 L723.602 691.802 L724.161 691.802 L724.721 691.802 L725.28 691.802 L725.839 691.802 L726.398 691.802 L726.958 691.802 L727.517 691.802 L728.076 691.802 L728.635 691.802 L729.195 691.802 L729.754 691.802 L730.313 691.802 L730.872 691.802 L731.432 691.802 L731.991 691.802 L732.55 691.802 L733.109 691.802 L733.669 691.802 L734.228 691.802 L734.787 691.802 L735.346 691.802 L735.906 691.802 L736.465 691.802 L737.024 691.802 L737.583 691.802 L738.143 691.802 L738.702 691.802 L739.261 691.802 L739.82 691.802 L740.38 691.802 L740.939 691.802 L741.498 691.802 L742.057 691.802 L742.617 691.802 L743.176 691.802 L743.735 691.802 L744.294 691.802 L744.854 691.802 L745.413 691.802 L745.972 691.802 L746.531 691.802 L747.091 691.802 L747.65 691.802 L748.209 691.802 L748.768 691.802 L749.328 691.802 L749.887 691.802 L750.446 691.802 L751.005 691.802 L751.565 691.802 L752.124 691.802 L752.683 691.802 L753.242 691.802 L753.802 691.802 L754.361 691.802 L754.92 691.802 L755.479 691.802 L756.039 691.802 L756.598 691.802 L757.157 691.802 L757.716 691.802 L758.276 691.802 L758.835 691.802 L759.394 691.802 L759.953 691.802 L760.513 691.802 L761.072 691.802 L761.631 691.802 L762.19 691.802 L762.75 691.802 L763.309 691.802 L763.868 691.802 L764.427 691.802 L764.987 691.802 L765.546 691.802 L766.105 691.802 L766.664 691.802 L767.224 691.802 L767.783 691.802 L768.342 691.802 L768.901 691.802 L769.461 691.802 L770.02 691.802 L770.579 691.802 L771.138 691.802 L771.698 691.802 L772.257 691.802 L772.816 691.802 L773.375 691.802 L773.935 691.802 L774.494 691.802 L775.053 691.802 L775.612 691.802 L776.172 691.802 L776.731 691.802 L777.29 691.802 L777.849 691.802 L778.409 691.802 L778.968 691.802 L779.527 691.802 L780.086 691.802 L780.646 691.802 L781.205 691.802 L781.764 691.802 L782.323 691.802 L782.883 691.802 L783.442 691.802 L784.001 691.802 L784.56 691.802 L785.12 691.802 L785.679 691.802 L786.238 691.802 L786.797 691.802 L787.357 691.802 L787.916 691.802 L788.475 691.802 L789.034 691.802 L789.594 691.802 L790.153 691.802 L790.712 691.802 L791.271 691.802 L791.831 691.802 L792.39 691.802 L792.949 691.802 L793.508 691.802 L794.068 691.802 L794.627 691.802 L795.186 691.802 L795.745 691.802 L796.305 691.802 L796.864 691.802 L797.423 691.802 L797.982 691.802 L798.542 691.802 L799.101 691.802 L799.66 691.802 L800.219 691.802 L800.779 691.802 L801.338 691.802 L801.897 691.802 L802.456 691.802 L803.016 691.802 L803.575 691.802 L804.134 691.802 L804.693 691.802 L805.253 691.802 L805.812 691.802 L806.371 691.802 L806.931 691.802 L807.49 691.802 L808.049 691.802 L808.608 691.802 L809.168 691.802 L809.727 691.802 L810.286 691.802 L810.845 691.802 L811.405 691.802 L811.964 691.802 L812.523 691.802 L813.082 691.802 L813.642 691.802 L814.201 691.802 L814.76 691.802 L815.319 691.802 L815.879 691.802 L816.438 691.802 L816.997 691.802 L817.556 691.802 L818.116 691.802 L818.675 691.802 L819.234 691.802 L819.793 691.802 L820.353 691.802 L820.912 691.802 L821.471 691.802 L822.03 691.802 L822.59 691.802 L823.149 691.802 L823.708 691.802 L824.267 691.802 L824.827 691.802 L825.386 691.802 L825.945 691.802 L826.504 691.802 L827.064 691.802 L827.623 691.802 L828.182 691.802 L828.741 691.802 L829.301 691.802 L829.86 691.802 L830.419 691.802 L830.978 691.802 L831.538 691.802 L832.097 691.802 L832.656 691.802 L833.215 691.802 L833.775 691.802 L834.334 691.802 L834.893 691.802 L835.452 691.802 L836.012 691.802 L836.571 691.802 L837.13 691.802 L837.689 691.802 L838.249 691.802 L838.808 691.802 L839.367 691.802 L839.926 691.802 L840.486 691.802 L841.045 691.802 L841.604 691.802 L842.163 691.802 L842.723 691.802 L843.282 691.802 L843.841 691.802 L844.4 691.802 L844.96 691.802 L845.519 691.802 L846.078 691.802 L846.637 691.802 L847.197 691.802 L847.756 691.802 L848.315 691.802 L848.874 691.802 L849.434 691.802 L849.993 691.802 L850.552 691.802 L851.111 691.802 L851.671 691.802 L852.23 691.802 L852.789 691.802 L853.348 691.802 L853.908 691.802 L854.467 691.802 L855.026 691.802 L855.585 691.802 L856.145 691.802 L856.704 691.802 L857.263 691.802 L857.822 691.802 L858.382 691.802 L858.941 691.802 L859.5 691.802 L860.059 691.802 L860.619 691.802 L861.178 691.802 L861.737 691.802 L862.296 691.802 L862.856 691.802 L863.415 691.802 L863.974 691.802 L864.533 691.802 L865.093 691.802 L865.652 691.802 L866.211 691.802 L866.77 691.802 L867.33 691.802 L867.889 691.802 L868.448 691.802 L869.007 691.802 L869.567 691.802 L870.126 691.802 L870.685 691.802 L871.244 691.802 L871.804 691.802 L872.363 691.802 L872.922 691.802 L873.481 691.802 L874.041 691.802 L874.6 691.802 L875.159 691.802 L875.718 691.802 L876.278 691.802 L876.837 691.802 L877.396 691.802 L877.955 691.802 L878.515 691.802 L879.074 691.802 L879.633 691.802 L880.192 691.802 L880.752 691.802 L881.311 691.802 L881.87 691.802 L882.429 691.802 L882.989 691.802 L883.548 691.802 L884.107 691.802 L884.666 691.802 L885.226 691.802 L885.785 691.802 L886.344 691.802 L886.903 691.802 L887.463 691.802 L888.022 691.802 L888.581 691.802 L889.14 691.802 L889.7 691.802 L890.259 691.802 L890.818 691.802 L891.377 691.802 L891.937 691.802 L892.496 691.802 L893.055 691.802 L893.614 691.802 L894.174 691.802 L894.733 691.802 L895.292 691.802 L895.851 691.802 L896.411 691.802 L896.97 691.802 L897.529 691.802 L898.088 691.802 L898.648 691.802 L899.207 691.802 L899.766 691.802 L900.325 691.802 L900.885 691.802 L901.444 691.802 L902.003 691.802 L902.562 691.802 L903.122 691.802 L903.681 691.802 L904.24 691.802 L904.799 691.802 L905.359 691.802 L905.918 691.802 L906.477 691.802 L907.036 691.802 L907.596 691.802 L908.155 691.802 L908.714 691.802 L909.273 691.802 L909.833 691.802 L910.392 691.802 L910.951 691.802 L911.51 691.802 L912.07 691.802 L912.629 691.802 L913.188 691.802 L913.747 691.802 L914.307 691.802 L914.866 691.802 L915.425 691.802 L915.984 691.802 L916.544 691.802 L917.103 691.802 L917.662 691.802 L918.221 691.802 L918.781 691.802 L919.34 691.802 L919.899 691.802 L920.458 691.802 L921.018 691.802 L921.577 691.802 L922.136 691.802 L922.695 691.802 L923.255 691.802 L923.814 691.802 L924.373 691.802 L924.932 691.802 L925.492 691.802 L926.051 691.802 L926.61 691.802 L927.169 691.802 L927.729 691.802 L928.288 691.802 L928.847 691.802 L929.406 691.802 L929.966 691.802 L930.525 691.802 L931.084 691.802 L931.644 691.802 L932.203 691.802 L932.762 691.802 L933.321 691.802 L933.881 691.802 L934.44 691.802 L934.999 691.802 L935.558 691.802 L936.118 691.802 L936.677 691.802 L937.236 691.802 L937.795 691.802 L938.355 691.802 L938.914 691.802 L939.473 691.802 L940.032 691.802 L940.592 691.802 L941.151 691.802 L941.71 691.802 L942.269 691.802 L942.829 691.802 L943.388 691.802 L943.947 691.802 L944.506 691.802 L945.066 691.802 L945.625 691.802 L946.184 691.802 L946.743 691.802 L947.303 691.802 L947.862 691.802 L948.421 691.802 L948.98 691.802 L949.54 691.802 L950.099 691.802 L950.658 691.802 L951.217 691.802 L951.777 691.802 L952.336 691.802 L952.895 691.802 L953.454 691.802 L954.014 691.802 L954.573 691.802 L955.132 691.802 L955.691 691.802 L956.251 691.802 L956.81 691.802 L957.369 691.802 L957.928 691.802 L958.488 691.802 L959.047 691.802 L959.606 691.802 L960.165 691.802 L960.725 691.802 L961.284 691.802 L961.843 691.802 L962.402 691.802 L962.962 691.802 L963.521 691.802 L964.08 691.802 L964.639 691.802 L965.199 691.802 L965.758 691.802 L966.317 691.802 L966.876 691.802 L967.436 691.802 L967.995 691.802 L968.554 691.802 L969.113 691.802 L969.673 691.802 L970.232 691.802 L970.791 691.802 L971.35 691.802 L971.91 691.802 L972.469 691.802 L973.028 691.802 L973.587 691.802 L974.147 691.802 L974.706 691.802 L975.265 691.802 L975.824 691.802 L976.384 691.802 L976.943 691.802 L977.502 691.802 L978.061 691.802 L978.621 691.802 L979.18 691.802 L979.739 691.802 L980.298 691.802 L980.858 691.802 L981.417 691.802 L981.976 691.802 L982.535 691.802 L983.095 691.802 L983.654 691.802 L984.213 691.802 L984.772 691.802 L985.332 691.802 L985.891 691.802 L986.45 691.802 L987.009 691.802 L987.569 691.802 L988.128 691.802 L988.687 691.802 L989.246 691.802 L989.806 691.802 L990.365 691.802 L990.924 691.802 L991.483 691.802 L992.043 691.802 L992.602 691.802 L993.161 691.802 L993.72 691.802 L994.28 691.802 L994.839 691.802 L995.398 691.802 L995.957 691.802 L996.517 691.802 L997.076 691.802 L997.635 691.802 L998.194 691.802 L998.754 691.802 L999.313 691.802 L999.872 691.802 L1000.43 691.802 L1000.99 691.802 L1001.55 691.802 L1002.11 691.802 L1002.67 691.802 L1003.23 691.802 L1003.79 691.802 L1004.35 691.802 L1004.91 691.802 L1005.46 691.802 L1006.02 691.802 L1006.58 691.802 L1007.14 691.802 L1007.7 691.802 L1008.26 691.802 L1008.82 691.802 L1009.38 691.802 L1009.94 691.802 L1010.5 691.802 L1011.06 691.802 L1011.62 691.802 L1012.18 691.802 L1012.73 691.802 L1013.29 691.802 L1013.85 691.802 L1014.41 691.802 L1014.97 691.802 L1015.53 691.802 L1016.09 691.802 L1016.65 691.802 L1017.21 691.802 L1017.77 691.802 L1018.33 691.802 L1018.89 691.802 L1019.45 691.802 L1020.01 691.802 L1020.56 691.802 L1021.12 691.802 L1021.68 691.802 L1022.24 691.802 L1022.8 691.802 L1023.36 691.802 L1023.92 691.802 L1024.48 691.802 L1025.04 691.802 L1025.6 691.802 L1026.16 691.802 L1026.72 691.802 L1027.28 691.802 L1027.83 691.802 L1028.39 691.802 L1028.95 691.802 L1029.51 691.802 L1030.07 691.802 L1030.63 691.802 L1031.19 691.802 L1031.75 691.802 L1032.31 691.802 L1032.87 691.802 L1033.43 691.802 L1033.99 691.802 L1034.55 691.802 L1035.1 691.802 L1035.66 691.802 L1036.22 691.802 L1036.78 691.802 L1037.34 691.802 L1037.9 691.802 L1038.46 691.802 L1039.02 691.802 L1039.58 691.802 L1040.14 691.802 L1040.7 691.802 L1041.26 691.802 L1041.82 691.802 L1042.38 691.802 L1042.93 691.802 L1043.49 691.802 L1044.05 691.802 L1044.61 691.802 L1045.17 691.802 L1045.73 691.802 L1046.29 691.802 L1046.85 691.802 L1047.41 691.802 L1047.97 691.802 L1048.53 691.802 L1049.09 691.802 L1049.65 691.802 L1050.2 691.802 L1050.76 691.802 L1051.32 691.802 L1051.88 691.802 L1052.44 691.802 L1053 691.802 L1053.56 691.802 L1054.12 691.802 L1054.68 691.802 L1055.24 691.802 L1055.8 691.802 L1056.36 691.802 L1056.92 691.802 L1057.48 691.802 L1058.03 691.802 L1058.59 691.802 L1059.15 691.802 L1059.71 691.802 L1060.27 691.802 L1060.83 691.802 L1061.39 691.802 L1061.95 691.802 L1062.51 691.802 L1063.07 691.802 L1063.63 691.802 L1064.19 691.802 L1064.75 691.802 L1065.3 691.802 L1065.86 691.802 L1066.42 691.802 L1066.98 691.802 L1067.54 691.802 L1068.1 691.802 L1068.66 691.802 L1069.22 691.802 L1069.78 691.802 L1070.34 691.802 L1070.9 691.802 L1071.46 691.802 L1072.02 691.802 L1072.57 691.802 L1073.13 691.802 L1073.69 691.802 L1074.25 691.802 L1074.81 691.802 L1075.37 691.802 L1075.93 691.802 L1076.49 691.802 L1077.05 691.802 L1077.61 691.802 L1078.17 691.802 L1078.73 691.802 L1079.29 691.802 L1079.85 691.802 L1080.4 691.802 L1080.96 691.802 L1081.52 691.802 L1082.08 691.802 L1082.64 691.802 L1083.2 691.802 L1083.76 691.802 L1084.32 691.802 L1084.88 691.802 L1085.44 691.802 L1086 691.802 L1086.56 691.802 L1087.12 691.802 L1087.67 691.802 L1088.23 691.802 L1088.79 691.802 L1089.35 691.802 L1089.91 691.802 L1090.47 691.802 L1091.03 691.802 L1091.59 691.802 L1092.15 691.802 L1092.71 691.802 L1093.27 691.802 L1093.83 691.802 L1094.39 691.802 L1094.94 691.802 L1095.5 691.802 L1096.06 691.802 L1096.62 691.802 L1097.18 691.802 L1097.74 691.802 L1098.3 691.802 L1098.86 691.802 L1099.42 691.802 L1099.98 691.802 L1100.54 691.802 L1101.1 691.802 L1101.66 691.802 L1102.22 691.802 L1102.77 691.802 L1103.33 691.802 L1103.89 691.802 L1104.45 691.802 L1105.01 691.802 L1105.57 691.802 L1106.13 691.802 L1106.69 691.802 L1107.25 691.802 L1107.81 691.802 L1108.37 691.802 L1108.93 691.802 L1109.49 691.802 L1110.04 691.802 L1110.6 691.802 L1111.16 691.802 L1111.72 691.802 L1112.28 691.802 L1112.84 691.802 L1113.4 691.802 L1113.96 691.802 L1114.52 691.802 L1115.08 691.802 L1115.64 691.802 L1116.2 691.802 L1116.76 691.802 L1117.31 691.802 L1117.87 691.802 L1118.43 691.802 L1118.99 691.802 L1119.55 691.802 L1120.11 691.802 L1120.67 691.802 L1121.23 691.802 L1121.79 691.802 L1122.35 691.802 L1122.91 691.802 L1123.47 691.802 L1124.03 691.802 L1124.59 691.802 L1125.14 691.802 L1125.7 691.802 L1126.26 691.802 L1126.82 691.802 L1127.38 691.802 L1127.94 691.802 L1128.5 691.802 L1129.06 691.802 L1129.62 691.802 L1130.18 691.802 L1130.74 691.802 L1131.3 691.802 L1131.86 691.802 L1132.41 691.802 L1132.97 691.802 L1133.53 691.802 L1134.09 691.802 L1134.65 691.802 L1135.21 691.802 L1135.77 691.802 L1136.33 691.802 L1136.89 691.802 L1137.45 691.802 L1138.01 691.802 L1138.57 691.802 L1139.13 691.802 L1139.68 691.802 L1140.24 691.802 L1140.8 691.802 L1141.36 691.802 L1141.92 691.802 L1142.48 691.802 L1143.04 691.802 L1143.6 691.802 L1144.16 691.802 L1144.72 691.802 L1145.28 691.802 L1145.84 691.802 L1146.4 691.802 L1146.96 691.802 L1147.51 691.802 L1148.07 691.802 L1148.63 691.802 L1149.19 691.802 L1149.75 691.802 L1150.31 691.802 L1150.87 691.802 L1151.43 691.802 L1151.99 691.802 L1152.55 691.802 L1153.11 691.802 L1153.67 691.802 L1154.23 691.802 L1154.78 691.802 L1155.34 691.802 L1155.9 691.802 L1156.46 691.802 L1157.02 691.802 L1157.58 691.802 L1158.14 691.802 L1158.7 691.802 L1159.26 691.802 L1159.82 691.802 L1160.38 691.802 L1160.94 691.802 L1161.5 691.802 L1162.05 691.802 L1162.61 691.802 L1163.17 691.802 L1163.73 691.802 L1164.29 691.802 L1164.85 691.802 L1165.41 691.802 L1165.97 691.802 L1166.53 691.802 L1167.09 691.802 L1167.65 691.802 L1168.21 691.802 L1168.77 691.802 L1169.33 691.802 L1169.88 691.802 L1170.44 691.802 L1171 691.802 L1171.56 691.802 L1172.12 691.802 L1172.68 691.802 L1173.24 691.802 L1173.8 691.802 L1174.36 691.802 L1174.92 691.802 L1175.48 691.802 L1176.04 691.802 L1176.6 691.802 L1177.15 691.802 L1177.71 691.802 L1178.27 691.802 L1178.83 691.802 L1179.39 691.802 L1179.95 691.802 L1180.51 691.802 L1181.07 691.802 L1181.63 691.802 L1182.19 691.802 L1182.75 691.802 L1183.31 691.802 L1183.87 691.802 L1184.43 691.802 L1184.98 691.802 L1185.54 691.802 L1186.1 691.802 L1186.66 691.802 L1187.22 691.802 L1187.78 691.802 L1188.34 691.802 L1188.9 691.802 L1189.46 691.802 L1190.02 691.802 L1190.58 691.802 L1191.14 691.802 L1191.7 691.802 L1192.25 691.802 L1192.81 691.802 L1193.37 691.802 L1193.93 691.802 L1194.49 691.802 L1195.05 691.802 L1195.61 691.802 L1196.17 691.802 L1196.73 691.802 L1197.29 691.802 L1197.85 691.802 L1198.41 691.802 L1198.97 691.802 L1199.52 691.802 L1200.08 691.802 L1200.64 691.802 L1201.2 691.802 L1201.76 691.802 L1202.32 691.802 L1202.88 691.802 L1203.44 691.802 L1204 691.802 L1204.56 691.802 L1205.12 691.802 L1205.68 691.802 L1206.24 691.802 L1206.8 691.802 L1207.35 691.802 L1207.91 691.802 L1208.47 691.802 L1209.03 691.802 L1209.59 691.802 L1210.15 691.802 L1210.71 691.802 L1211.27 691.802 L1211.83 691.802 L1212.39 691.802 L1212.95 691.802 L1213.51 691.802 L1214.07 691.802 L1214.62 691.802 L1215.18 691.802 L1215.74 691.802 L1216.3 691.802 L1216.86 691.802 L1217.42 691.802 L1217.98 691.802 L1218.54 691.802 L1219.1 691.802 L1219.66 691.802 L1220.22 691.802 L1220.78 691.802 L1221.34 691.802 L1221.89 691.802 L1222.45 691.802 L1223.01 691.802 L1223.57 691.802 L1224.13 691.802 L1224.69 691.802 L1225.25 691.802 L1225.81 691.802 L1226.37 691.802 L1226.93 691.802 L1227.49 691.802 L1228.05 691.802 L1228.61 691.802 L1229.17 691.802 L1229.72 691.802 L1230.28 691.802 L1230.84 691.802 L1231.4 691.802 L1231.96 691.802 L1232.52 691.802 L1233.08 691.802 L1233.64 691.802 L1234.2 691.802 L1234.76 691.802 L1235.32 691.802 L1235.88 691.802 L1236.44 691.802 L1236.99 691.802 L1237.55 691.802 L1238.11 691.802 L1238.67 691.802 L1239.23 691.802 L1239.79 691.802 L1240.35 691.802 L1240.91 691.802 L1241.47 691.802 L1242.03 691.802 L1242.59 691.802 L1243.15 691.802 L1243.71 691.802 L1244.26 691.802 L1244.82 691.802 L1245.38 691.802 L1245.94 691.802 L1246.5 691.802 L1247.06 691.802 L1247.62 691.802 L1248.18 691.802 L1248.74 691.802 L1249.3 691.802 L1249.86 691.802 L1250.42 691.802 L1250.98 691.802 L1251.54 691.802 L1252.09 691.802 L1252.65 691.802 L1253.21 691.802 L1253.77 691.802 L1254.33 691.802 L1254.89 691.802 L1255.45 691.802 L1256.01 691.802 L1256.57 691.802 L1257.13 691.802 L1257.69 691.802 L1258.25 691.802 L1258.81 691.802 L1259.36 691.802 L1259.92 691.802 L1260.48 691.802 L1261.04 691.802 L1261.6 691.802 L1262.16 691.802 L1262.72 691.802 L1263.28 691.802 L1263.84 691.802 L1264.4 691.802 L1264.96 691.802 L1265.52 691.802 L1266.08 691.802 L1266.63 691.802 L1267.19 691.802 L1267.75 691.802 L1268.31 691.802 L1268.87 691.802 L1269.43 691.802 L1269.99 691.802 L1270.55 691.802 L1271.11 691.802 L1271.67 691.802 L1272.23 691.802 L1272.79 691.802 L1273.35 691.802 L1273.91 691.802 L1274.46 691.802 L1275.02 691.802 L1275.58 691.802 L1276.14 691.802 L1276.7 691.802 L1277.26 691.802 L1277.82 691.802 L1278.38 691.802 L1278.94 691.802 L1279.5 691.802 L1280.06 691.802 L1280.62 691.802 L1281.18 691.802 L1281.73 691.802 L1282.29 691.802 L1282.85 691.802 L1283.41 691.802 L1283.97 691.802 L1284.53 691.802 L1285.09 691.802 L1285.65 691.802 L1286.21 691.802 L1286.77 691.802 L1287.33 691.802 L1287.89 691.802 L1288.45 691.802 L1289 691.802 L1289.56 691.802 L1290.12 691.802 L1290.68 691.802 L1291.24 691.802 L1291.8 691.802 L1292.36 691.802 L1292.92 691.802 L1293.48 691.802 L1294.04 691.802 L1294.6 691.802 L1295.16 691.802 L1295.72 691.802 L1296.28 691.802 L1296.83 691.802 L1297.39 691.802 L1297.95 691.802 L1298.51 691.802 L1299.07 691.802 L1299.63 691.802 L1300.19 691.802 L1300.75 691.802 L1301.31 691.802 L1301.87 691.802 L1302.43 691.802 L1302.99 691.802 L1303.55 691.802 L1304.1 691.802 L1304.66 691.802 L1305.22 691.802 L1305.78 691.802 L1306.34 691.802 L1306.9 691.802 L1307.46 691.802 L1308.02 691.802 L1308.58 691.802 L1309.14 691.802 L1309.7 691.802 L1310.26 691.802 L1310.82 691.802 L1311.38 691.802 L1311.93 691.802 L1312.49 691.802 L1313.05 691.802 L1313.61 691.802 L1314.17 691.802 L1314.73 691.802 L1315.29 691.802 L1315.85 691.802 L1316.41 691.802 L1316.97 691.802 L1317.53 691.802 L1318.09 691.802 L1318.65 691.802 L1319.2 691.802 L1319.76 691.802 L1320.32 691.802 L1320.88 691.802 L1321.44 691.802 L1322 691.802 L1322.56 691.802 L1323.12 691.802 L1323.68 691.802 L1324.24 691.802 L1324.8 691.802 L1325.36 691.802 L1325.92 691.802 L1326.47 691.802 L1327.03 691.802 L1327.59 691.802 L1328.15 691.802 L1328.71 691.802 L1329.27 691.802 L1329.83 691.802 L1330.39 691.802 L1330.95 691.802 L1331.51 691.802 L1332.07 691.802 L1332.63 691.802 L1333.19 691.802 L1333.75 691.802 L1334.3 691.802 L1334.86 691.802 L1335.42 691.802 L1335.98 691.802 L1336.54 691.802 L1337.1 691.802 L1337.66 691.802 L1338.22 691.802 L1338.78 691.802 L1339.34 691.802 L1339.9 691.802 L1340.46 691.802 L1341.02 691.802 L1341.57 691.802 L1342.13 691.802 L1342.69 691.802 L1343.25 691.802 L1343.81 691.802 L1344.37 691.802 L1344.93 691.802 L1345.49 691.802 L1346.05 691.802 L1346.61 691.802 L1347.17 691.802 L1347.73 691.802 L1348.29 691.802 L1348.84 691.802 L1349.4 691.802 L1349.96 691.802 L1350.52 691.802 L1351.08 691.802 L1351.64 691.802 L1352.2 691.802 L1352.76 691.802 L1353.32 691.802 L1353.88 691.802 L1354.44 691.802 L1355 691.802 L1355.56 691.802 L1356.12 691.802 L1356.67 691.802 L1357.23 691.802 L1357.79 691.802 L1358.35 691.802 L1358.91 691.802 L1359.47 691.802 L1360.03 691.802 L1360.59 691.802 L1361.15 691.802 L1361.71 691.802 L1362.27 691.802 L1362.83 691.802 L1363.39 691.802 L1363.94 691.802 L1364.5 691.802 L1365.06 691.802 L1365.62 691.802 L1366.18 691.802 L1366.74 691.802 L1367.3 691.802 L1367.86 691.802 L1368.42 691.802 L1368.98 691.802 L1369.54 691.802 L1370.1 691.802 L1370.66 691.802 L1371.21 691.802 L1371.77 691.802 L1372.33 691.802 L1372.89 691.802 L1373.45 691.802 L1374.01 691.802 L1374.57 691.802 L1375.13 691.802 L1375.69 691.802 L1376.25 691.802 L1376.81 691.802 L1377.37 691.802 L1377.93 691.802 L1378.49 691.802 L1379.04 691.802 L1379.6 691.802 L1380.16 691.802 L1380.72 691.802 L1381.28 691.802 L1381.84 691.802 L1382.4 691.802 L1382.96 691.802 L1383.52 691.802 L1384.08 691.802 L1384.64 691.802 L1385.2 691.802 L1385.76 691.802 L1386.31 691.802 L1386.87 691.802 L1387.43 691.802 L1387.99 691.802 L1388.55 691.802 L1389.11 691.802 L1389.67 691.802 L1390.23 691.802 L1390.79 691.802 L1391.35 691.802 L1391.91 691.802 L1392.47 691.802 L1393.03 691.802 L1393.58 691.802 L1394.14 691.802 L1394.7 691.802 L1395.26 691.802 L1395.82 691.802 L1396.38 691.802 L1396.94 691.802 L1397.5 691.802 L1398.06 691.802 L1398.62 691.802 L1399.18 691.802 L1399.74 691.802 L1400.3 691.802 L1400.86 691.802 L1401.41 691.802 L1401.97 691.802 L1402.53 691.802 L1403.09 691.802 L1403.65 691.802 L1404.21 691.802 L1404.77 691.802 L1405.33 691.802 L1405.89 691.802 L1406.45 691.802 L1407.01 691.802 L1407.57 691.802 L1408.13 691.802 L1408.68 691.802 L1409.24 691.802 L1409.8 691.802 L1410.36 691.802 L1410.92 691.802 L1411.48 691.802 L1412.04 691.802 L1412.6 691.802 L1413.16 691.802 L1413.72 691.802 L1414.28 691.802 L1414.84 691.802 L1415.4 691.802 L1415.95 691.802 L1416.51 691.802 L1417.07 691.802 L1417.63 691.802 L1418.19 691.802 L1418.75 691.802 L1419.31 691.802 L1419.87 691.802 L1420.43 691.802 L1420.99 691.802 L1421.55 691.802 L1422.11 691.802 L1422.67 691.802 L1423.23 691.802 L1423.78 691.802 L1424.34 691.802 L1424.9 691.802 L1425.46 691.802 L1426.02 691.802 L1426.58 691.802 L1427.14 691.802 L1427.7 691.802 L1428.26 691.802 L1428.82 691.802 L1429.38 691.802 L1429.94 691.802 L1430.5 691.802 L1431.05 691.802 L1431.61 691.802 L1432.17 691.802 L1432.73 691.802 L1433.29 691.802 L1433.85 691.802 L1434.41 691.802 L1434.97 691.802 L1435.53 691.802 L1436.09 691.802 L1436.65 691.802 L1437.21 691.802 L1437.77 691.802 L1438.33 691.802 L1438.88 691.802 L1439.44 691.802 L1440 691.802 L1440.56 691.802 L1441.12 691.802 L1441.68 691.802 L1442.24 691.802 L1442.8 691.802 L1443.36 691.802 L1443.92 691.802 L1444.48 691.802 L1445.04 691.802 L1445.6 691.802 L1446.15 691.802 L1446.71 691.802 L1447.27 691.802 L1447.83 691.802 L1448.39 691.802 L1448.95 691.802 L1449.51 691.802 L1450.07 691.802 L1450.63 691.802 L1451.19 691.802 L1451.75 691.802 L1452.31 691.802 L1452.87 691.802 L1453.42 691.802 L1453.98 691.802 L1454.54 691.802 L1455.1 691.802 L1455.66 691.802 L1456.22 691.802 L1456.78 691.802 L1457.34 691.802 L1457.9 691.802 L1458.46 691.802 L1459.02 691.802 L1459.58 691.802 L1460.14 691.802 L1460.7 691.802 L1461.25 691.802 L1461.81 691.802 L1462.37 691.802 L1462.93 691.802 L1463.49 691.802 L1464.05 691.802 L1464.61 691.802 L1465.17 691.802 L1465.73 691.802 L1466.29 691.802 L1466.85 691.802 L1467.41 691.802 L1467.97 691.802 L1468.52 691.802 L1469.08 691.802 L1469.64 691.802 L1470.2 691.802 L1470.76 691.802 L1471.32 691.802 L1471.88 691.802 L1472.44 691.802 L1473 691.802 L1473.56 691.802 L1474.12 691.802 L1474.68 691.802 L1475.24 691.802 L1475.79 691.802 L1476.35 691.802 L1476.91 691.802 L1477.47 691.802 L1478.03 691.802 L1478.59 691.802 L1479.15 691.802 L1479.71 691.802 L1480.27 691.802 L1480.83 691.802 L1481.39 691.802 L1481.95 691.802 L1482.51 691.802 L1483.07 691.802 L1483.62 691.802 L1484.18 691.802 L1484.74 691.802 L1485.3 691.802 L1485.86 691.802 L1486.42 691.802 L1486.98 691.802 L1487.54 691.802 L1488.1 691.802 L1488.66 691.802 L1489.22 691.802 L1489.78 691.802 L1490.34 691.802 L1490.89 691.802 L1491.45 691.802 L1492.01 691.802 L1492.57 691.802 L1493.13 691.802 L1493.69 691.802 L1494.25 691.802 L1494.81 691.802 L1495.37 691.802 L1495.93 691.802 L1496.49 691.802 L1497.05 691.802 L1497.61 691.802 L1498.16 691.802 L1498.72 691.802 L1499.28 691.802 L1499.84 691.802 L1500.4 691.802 L1500.96 691.802 L1501.52 691.802 L1502.08 691.802 L1502.64 691.802 L1503.2 691.802 L1503.76 691.802 L1504.32 691.802 L1504.88 691.802 L1505.44 691.802 L1505.99 691.802 L1506.55 691.802 L1507.11 691.802 L1507.67 691.802 L1508.23 691.802 L1508.79 691.802 L1509.35 691.802 L1509.91 691.802 L1510.47 691.802 L1511.03 691.802 L1511.59 691.802 L1512.15 691.802 L1512.71 691.802 L1513.26 691.802 L1513.82 691.802 L1514.38 691.802 L1514.94 691.802 L1515.5 691.802 L1516.06 691.802 L1516.62 691.802 L1517.18 691.802 L1517.74 691.802 L1518.3 691.802 L1518.86 691.802 L1519.42 691.802 L1519.98 691.802 L1520.53 691.802 L1521.09 691.802 L1521.65 691.802 L1522.21 691.802 L1522.77 691.802 L1523.33 691.802 L1523.89 691.802 L1524.45 691.802 L1525.01 691.802 L1525.57 691.802 L1526.13 691.802 L1526.69 691.802 L1527.25 691.802 L1527.81 691.802 L1528.36 691.802 L1528.92 691.802 L1529.48 691.802 L1530.04 691.802 L1530.6 691.802 L1531.16 691.802 L1531.72 691.802 L1532.28 691.802 L1532.84 691.802 L1533.4 691.802 L1533.96 691.802 L1534.52 691.802 L1535.08 691.802 L1535.63 691.802 L1536.19 691.802 L1536.75 691.802 L1537.31 691.802 L1537.87 691.802 L1538.43 691.802 L1538.99 691.802 L1539.55 691.802 L1540.11 691.802 L1540.67 691.802 L1541.23 691.802 L1541.79 691.802 L1542.35 691.802 L1542.9 691.802 L1543.46 691.802 L1544.02 691.802 L1544.58 691.802 L1545.14 691.802 L1545.7 691.802 L1546.26 691.802 L1546.82 691.802 L1547.38 691.802 L1547.94 691.802 L1548.5 691.802 L1549.06 691.802 L1549.62 691.802 L1550.18 691.802 L1550.73 691.802 L1551.29 691.802 L1551.85 691.802 L1552.41 691.802 L1552.97 691.802 L1553.53 691.802 L1554.09 691.802 L1554.65 691.802 L1555.21 691.802 L1555.77 691.802 L1556.33 691.802 L1556.89 691.802 L1557.45 691.802 L1558 691.802 L1558.56 691.802 L1559.12 691.802 L1559.68 691.802 L1560.24 691.802 L1560.8 691.802 L1561.36 691.802 L1561.92 691.802 L1562.48 691.802 L1563.04 691.802 L1563.6 691.802 L1564.16 691.802 L1564.72 691.802 L1565.28 691.802 L1565.83 691.802 L1566.39 691.802 L1566.95 691.802 L1567.51 691.802 L1568.07 691.802 L1568.63 691.802 L1569.19 691.802 L1569.75 691.802 L1570.31 691.802 L1570.87 691.802 L1571.43 691.802 L1571.99 691.802 L1572.55 691.802 L1573.1 691.802 L1573.66 691.802 L1574.22 691.802 L1574.78 691.802 L1575.34 691.802 L1575.9 691.802 L1576.46 691.802 L1577.02 691.802 L1577.58 691.802 L1578.14 691.802 L1578.7 691.802 L1579.26 691.802 L1579.82 691.802 L1580.37 691.802 L1580.93 691.802 L1581.49 691.802 L1582.05 691.802 L1582.61 691.802 L1583.17 691.802 L1583.73 691.802 L1584.29 691.802 L1584.85 691.802 L1585.41 691.802 L1585.97 691.802 L1586.53 691.802 L1587.09 691.802 L1587.65 691.802 L1588.2 691.802 L1588.76 691.802 L1589.32 691.802 L1589.88 691.802 L1590.44 691.802 L1591 691.802 L1591.56 691.802 L1592.12 691.802 L1592.68 691.802 L1593.24 691.802 L1593.8 691.802 L1594.36 691.802 L1594.92 691.802 L1595.47 691.802 L1596.03 691.802 L1596.59 691.802 L1597.15 691.802 L1597.71 691.802 L1598.27 691.802 L1598.83 691.802 L1599.39 691.802 L1599.95 691.802 L1600.51 691.802 L1601.07 691.802 L1601.63 691.802 L1602.19 691.802 L1602.74 691.802 L1603.3 691.802 L1603.86 691.802 L1604.42 691.802 L1604.98 691.802 L1605.54 691.802 L1606.1 691.802 L1606.66 691.802 L1607.22 691.802 L1607.78 691.802 L1608.34 691.802 L1608.9 691.802 L1609.46 691.802 L1610.02 691.802 L1610.57 691.802 L1611.13 691.802 L1611.69 691.802 L1612.25 691.802 L1612.81 691.802 L1613.37 691.802 L1613.93 691.802 L1614.49 691.802 L1615.05 691.802 L1615.61 691.802 L1616.17 691.802 L1616.73 691.802 L1617.29 691.802 L1617.84 691.802 L1618.4 691.802 L1618.96 691.802 L1619.52 691.802 L1620.08 691.802 L1620.64 691.802 L1621.2 691.802 L1621.76 691.802 L1622.32 691.802 L1622.88 691.802 L1623.44 691.802 L1624 691.802 L1624.56 691.802 L1625.11 691.802 L1625.67 691.802 L1626.23 691.802 L1626.79 691.802 L1627.35 691.802 L1627.91 691.802 L1628.47 691.802 L1629.03 691.802 L1629.59 691.802 L1630.15 691.802 L1630.71 691.802 L1631.27 691.802 L1631.83 691.802 L1632.39 691.802 L1632.94 691.802 L1633.5 691.802 L1634.06 691.802 L1634.62 691.802 L1635.18 691.802 L1635.74 691.802 L1636.3 691.802 L1636.86 691.802 L1637.42 691.802 L1637.98 691.802 L1638.54 691.802 L1639.1 691.802 L1639.66 691.802 L1640.21 691.802 L1640.77 691.802 L1641.33 691.802 L1641.89 691.802 L1642.45 691.802 L1643.01 691.802 L1643.57 691.802 L1644.13 691.802 L1644.69 691.802 L1645.25 691.802 L1645.81 691.802 L1646.37 691.802 L1646.93 691.802 L1647.48 691.802 L1648.04 691.802 L1648.6 691.802 L1649.16 691.802 L1649.72 691.802 L1650.28 691.802 L1650.84 691.802 L1651.4 691.802 L1651.96 691.802 L1652.52 691.802 L1653.08 691.802 L1653.64 691.802 L1654.2 691.802 L1654.76 691.802 L1655.31 691.802 L1655.87 691.802 L1656.43 691.802 L1656.99 691.802 L1657.55 691.802 L1658.11 691.802 L1658.67 691.802 L1659.23 691.802 L1659.79 691.802 L1660.35 691.802 L1660.91 691.802 L1661.47 691.802 L1662.03 691.802 L1662.58 691.802 L1663.14 691.802 L1663.7 691.802 L1664.26 691.802 L1664.82 691.802 L1665.38 691.802 L1665.94 691.802 L1666.5 691.802 L1667.06 691.802 L1667.62 691.802 L1668.18 691.802 L1668.74 691.802 L1669.3 691.802 L1669.85 691.802 L1670.41 691.802 L1670.97 691.802 L1671.53 691.802 L1672.09 691.802 L1672.65 691.802 L1673.21 691.802 L1673.77 691.802 L1674.33 691.802 L1674.89 691.802 L1675.45 691.802 L1676.01 691.802 L1676.57 691.802 L1677.13 691.802 L1677.68 691.802 L1678.24 691.802 L1678.8 691.802 L1679.36 691.802 L1679.92 691.802 L1680.48 691.802 L1681.04 691.802 L1681.6 691.802 L1682.16 691.802 L1682.72 691.802 L1683.28 691.802 L1683.84 691.802 L1684.4 691.802 L1684.95 691.802 L1685.51 691.802 L1686.07 691.802 L1686.63 691.802 L1687.19 691.802 L1687.75 691.802 L1688.31 691.802 L1688.87 691.802 L1689.43 691.802 L1689.99 691.802 L1690.55 691.802 L1691.11 691.802 L1691.67 691.802 L1692.23 691.802 L1692.78 691.802 L1693.34 691.802 L1693.9 691.802 L1694.46 691.802 L1695.02 691.802 L1695.58 691.802 L1696.14 691.802 L1696.7 691.802 L1697.26 691.802 L1697.82 691.802 L1698.38 691.802 L1698.94 691.802 L1699.5 691.802 L1700.05 691.802 L1700.61 691.802 L1701.17 691.802 L1701.73 691.802 L1702.29 691.802 L1702.85 691.802 L1703.41 691.802 L1703.97 691.802 L1704.53 691.802 L1705.09 691.802 L1705.65 691.802 L1706.21 691.802 L1706.77 691.802 L1707.32 691.802 L1707.88 691.802 L1708.44 691.802 L1709 691.802 L1709.56 691.802 L1710.12 691.802 L1710.68 691.802 L1711.24 691.802 L1711.8 691.802 L1712.36 691.802 L1712.92 691.802 L1713.48 691.802 L1714.04 691.802 L1714.6 691.802 L1715.15 691.802 L1715.71 691.802 L1716.27 691.802 L1716.83 691.802 L1717.39 691.802 L1717.95 691.802 L1718.51 691.802 L1719.07 691.802 L1719.63 691.802 L1720.19 691.802 L1720.75 691.802 L1721.31 691.802 L1721.87 691.802 L1722.42 691.802 L1722.98 691.802 L1723.54 691.802 L1724.1 691.802 L1724.66 691.802 L1725.22 691.802 L1725.78 691.802 L1726.34 691.802 L1726.9 691.802 L1727.46 691.802 L1728.02 691.802 L1728.58 691.802 L1729.14 691.802 L1729.69 691.802 L1730.25 691.802 L1730.81 691.802 L1731.37 691.802 L1731.93 691.802 L1732.49 691.802 L1733.05 691.802 L1733.61 691.802 L1734.17 691.802 L1734.73 691.802 L1735.29 691.802 L1735.85 691.802 L1736.41 691.802 L1736.97 691.802 L1737.52 691.802 L1738.08 691.802 L1738.64 691.802 L1739.2 691.802 L1739.76 691.802 L1740.32 691.802 L1740.88 691.802 L1741.44 691.802 L1742 691.802 L1742.56 691.802 L1743.12 691.802 L1743.68 691.802 L1744.24 691.802 L1744.79 691.802 L1745.35 691.802 L1745.91 691.802 L1746.47 691.802 L1747.03 691.802 L1747.59 691.802 L1748.15 691.802 L1748.71 691.802 L1749.27 691.802 L1749.83 691.802 L1750.39 691.802 L1750.95 691.802 L1751.51 691.802 L1752.06 691.802 L1752.62 691.802 L1753.18 691.802 L1753.74 691.802 L1754.3 691.802 L1754.86 691.802 L1755.42 691.802 L1755.98 691.802 L1756.54 691.802 L1757.1 691.802 L1757.66 691.802 L1758.22 691.802 L1758.78 691.802 L1759.34 691.802 L1759.89 691.802 L1760.45 691.802 L1761.01 691.802 L1761.57 691.802 L1762.13 691.802 L1762.69 691.802 L1763.25 691.802 L1763.81 691.802 L1764.37 691.802 L1764.93 691.802 L1765.49 691.802 L1766.05 691.802 L1766.61 691.802 L1767.16 691.802 L1767.72 691.802 L1768.28 691.802 L1768.84 691.802 L1769.4 691.802 L1769.96 691.802 L1770.52 691.802 L1771.08 691.802 L1771.64 691.802 L1772.2 691.802 L1772.76 691.802 L1773.32 691.802 L1773.88 691.802 L1774.43 691.802 L1774.99 691.802 L1775.55 691.802 L1776.11 691.802 L1776.67 691.802 L1777.23 691.802 L1777.79 691.802 L1778.35 691.802 L1778.91 691.802 L1779.47 691.802 L1780.03 691.802 L1780.59 691.802 L1781.15 691.802 L1781.71 691.802 L1782.26 691.802 L1782.82 691.802 L1783.38 691.802 L1783.94 691.802 L1784.5 691.802 L1785.06 691.802 L1785.62 691.802 L1786.18 691.802 L1786.74 691.802 L1787.3 691.802 L1787.86 691.802 L1788.42 691.802 L1788.98 691.802 L1789.53 691.802 L1790.09 691.802 L1790.65 691.802 L1791.21 691.802 L1791.77 691.802 L1792.33 691.802 L1792.89 691.802 L1793.45 691.802 L1794.01 691.802 L1794.57 691.802 L1795.13 691.802 L1795.69 691.802 L1796.25 691.802 L1796.8 691.802 L1797.36 691.802 L1797.92 691.802 L1798.48 691.802 L1799.04 691.802 L1799.6 691.802 L1800.16 691.802 L1800.72 691.802 L1801.28 691.802 L1801.84 691.802 L1802.4 691.802 L1802.96 691.802 L1803.52 691.802 L1804.08 691.802 L1804.63 691.802 L1805.19 691.802 L1805.75 691.802 L1806.31 691.802 L1806.87 691.802 L1807.43 691.802 L1807.99 691.802 L1808.55 691.802 L1809.11 691.802 L1809.67 691.802 L1810.23 691.802 L1810.79 691.802 L1811.35 691.802 L1811.9 691.802 L1812.46 691.802 L1813.02 691.802 L1813.58 691.802 L1814.14 691.802 L1814.7 691.802 L1815.26 691.802 L1815.82 691.802 L1816.38 691.802 L1816.94 691.802 L1817.5 691.802 L1818.06 691.802 L1818.62 691.802 L1819.18 691.802 L1819.73 691.802 L1820.29 691.802 L1820.85 691.802 L1821.41 691.802 L1821.97 691.802 L1822.53 691.802 L1823.09 691.802 L1823.65 691.802 L1824.21 691.802 L1824.77 691.802 L1825.33 691.802 L1825.89 691.802 L1826.45 691.802 L1827 691.802 L1827.56 691.802 L1828.12 691.802 L1828.68 691.802 L1829.24 691.802 L1829.8 691.802 L1830.36 691.802 L1830.92 691.802 L1831.48 691.802 L1832.04 691.802 L1832.6 691.802 L1833.16 691.802 L1833.72 691.802 L1834.27 691.802 L1834.83 691.802 L1835.39 691.802 L1835.95 691.802 L1836.51 691.802 L1837.07 691.802 L1837.63 691.802 L1838.19 691.802 L1838.19 682.082 L1837.63 682.082 L1837.07 682.082 L1836.51 682.082 L1835.95 682.082 L1835.39 682.082 L1834.83 682.082 L1834.27 682.082 L1833.72 682.082 L1833.16 682.082 L1832.6 682.082 L1832.04 682.082 L1831.48 682.082 L1830.92 682.082 L1830.36 682.082 L1829.8 682.082 L1829.24 682.082 L1828.68 682.082 L1828.12 682.082 L1827.56 682.082 L1827 682.082 L1826.45 682.082 L1825.89 682.082 L1825.33 682.082 L1824.77 682.082 L1824.21 682.082 L1823.65 682.082 L1823.09 682.082 L1822.53 682.082 L1821.97 682.082 L1821.41 682.082 L1820.85 682.082 L1820.29 682.082 L1819.73 682.082 L1819.18 682.082 L1818.62 682.082 L1818.06 682.082 L1817.5 682.082 L1816.94 682.082 L1816.38 682.082 L1815.82 682.082 L1815.26 682.082 L1814.7 682.082 L1814.14 682.082 L1813.58 682.082 L1813.02 682.082 L1812.46 682.082 L1811.9 682.082 L1811.35 682.082 L1810.79 682.082 L1810.23 682.082 L1809.67 682.082 L1809.11 682.082 L1808.55 682.082 L1807.99 682.082 L1807.43 682.082 L1806.87 682.082 L1806.31 682.082 L1805.75 682.082 L1805.19 682.082 L1804.63 682.082 L1804.08 682.082 L1803.52 682.082 L1802.96 682.082 L1802.4 682.082 L1801.84 682.082 L1801.28 682.082 L1800.72 682.082 L1800.16 682.082 L1799.6 682.082 L1799.04 682.082 L1798.48 682.082 L1797.92 682.082 L1797.36 682.082 L1796.8 682.082 L1796.25 682.082 L1795.69 682.082 L1795.13 682.082 L1794.57 682.082 L1794.01 682.082 L1793.45 682.082 L1792.89 682.082 L1792.33 682.082 L1791.77 682.082 L1791.21 682.082 L1790.65 682.082 L1790.09 682.082 L1789.53 682.082 L1788.98 682.082 L1788.42 682.082 L1787.86 682.082 L1787.3 682.082 L1786.74 682.082 L1786.18 682.082 L1785.62 682.082 L1785.06 682.082 L1784.5 682.082 L1783.94 682.082 L1783.38 682.082 L1782.82 682.082 L1782.26 682.082 L1781.71 682.082 L1781.15 682.082 L1780.59 682.082 L1780.03 682.082 L1779.47 682.082 L1778.91 682.082 L1778.35 682.082 L1777.79 682.082 L1777.23 682.082 L1776.67 682.082 L1776.11 682.082 L1775.55 682.082 L1774.99 682.082 L1774.43 682.082 L1773.88 682.082 L1773.32 682.082 L1772.76 682.082 L1772.2 682.082 L1771.64 682.082 L1771.08 682.082 L1770.52 682.082 L1769.96 682.082 L1769.4 682.082 L1768.84 682.082 L1768.28 682.082 L1767.72 682.082 L1767.16 682.082 L1766.61 682.082 L1766.05 682.082 L1765.49 682.082 L1764.93 682.082 L1764.37 682.082 L1763.81 682.082 L1763.25 682.082 L1762.69 682.082 L1762.13 682.082 L1761.57 682.082 L1761.01 682.082 L1760.45 682.082 L1759.89 682.082 L1759.34 682.082 L1758.78 682.082 L1758.22 682.082 L1757.66 682.082 L1757.1 682.082 L1756.54 682.082 L1755.98 682.082 L1755.42 682.082 L1754.86 682.082 L1754.3 682.082 L1753.74 682.082 L1753.18 682.082 L1752.62 682.082 L1752.06 682.082 L1751.51 682.082 L1750.95 682.082 L1750.39 682.082 L1749.83 682.082 L1749.27 682.082 L1748.71 682.082 L1748.15 682.082 L1747.59 682.082 L1747.03 682.082 L1746.47 682.082 L1745.91 682.082 L1745.35 682.082 L1744.79 682.082 L1744.24 682.082 L1743.68 682.082 L1743.12 682.082 L1742.56 682.082 L1742 682.082 L1741.44 682.082 L1740.88 682.082 L1740.32 682.082 L1739.76 682.082 L1739.2 682.082 L1738.64 682.082 L1738.08 682.082 L1737.52 682.082 L1736.97 682.082 L1736.41 682.082 L1735.85 682.082 L1735.29 682.082 L1734.73 682.082 L1734.17 682.082 L1733.61 682.082 L1733.05 682.082 L1732.49 682.082 L1731.93 682.082 L1731.37 682.082 L1730.81 682.082 L1730.25 682.082 L1729.69 682.082 L1729.14 682.082 L1728.58 682.082 L1728.02 682.082 L1727.46 682.082 L1726.9 682.082 L1726.34 682.082 L1725.78 682.082 L1725.22 682.082 L1724.66 682.082 L1724.1 682.082 L1723.54 682.082 L1722.98 682.082 L1722.42 682.082 L1721.87 682.082 L1721.31 682.082 L1720.75 682.082 L1720.19 682.082 L1719.63 682.082 L1719.07 682.082 L1718.51 682.082 L1717.95 682.082 L1717.39 682.082 L1716.83 682.082 L1716.27 682.082 L1715.71 682.082 L1715.15 682.082 L1714.6 682.082 L1714.04 682.082 L1713.48 682.082 L1712.92 682.082 L1712.36 682.082 L1711.8 682.082 L1711.24 682.082 L1710.68 682.082 L1710.12 682.082 L1709.56 682.082 L1709 682.082 L1708.44 682.082 L1707.88 682.082 L1707.32 682.082 L1706.77 682.082 L1706.21 682.082 L1705.65 682.082 L1705.09 682.082 L1704.53 682.082 L1703.97 682.082 L1703.41 682.082 L1702.85 682.082 L1702.29 682.082 L1701.73 682.082 L1701.17 682.082 L1700.61 682.082 L1700.05 682.082 L1699.5 682.082 L1698.94 682.082 L1698.38 682.082 L1697.82 682.082 L1697.26 682.082 L1696.7 682.082 L1696.14 682.082 L1695.58 682.082 L1695.02 682.082 L1694.46 682.082 L1693.9 682.082 L1693.34 682.082 L1692.78 682.082 L1692.23 682.082 L1691.67 682.082 L1691.11 682.082 L1690.55 682.082 L1689.99 682.082 L1689.43 682.082 L1688.87 682.082 L1688.31 682.082 L1687.75 682.082 L1687.19 682.082 L1686.63 682.082 L1686.07 682.082 L1685.51 682.082 L1684.95 682.082 L1684.4 682.082 L1683.84 682.082 L1683.28 682.082 L1682.72 682.082 L1682.16 682.082 L1681.6 682.082 L1681.04 682.082 L1680.48 682.082 L1679.92 682.082 L1679.36 682.082 L1678.8 682.082 L1678.24 682.082 L1677.68 682.082 L1677.13 682.082 L1676.57 682.082 L1676.01 682.082 L1675.45 682.082 L1674.89 682.082 L1674.33 682.082 L1673.77 682.082 L1673.21 682.082 L1672.65 682.082 L1672.09 682.082 L1671.53 682.082 L1670.97 682.082 L1670.41 682.082 L1669.85 682.082 L1669.3 682.082 L1668.74 682.082 L1668.18 682.082 L1667.62 682.082 L1667.06 682.082 L1666.5 682.082 L1665.94 682.082 L1665.38 682.082 L1664.82 682.082 L1664.26 682.082 L1663.7 682.082 L1663.14 682.082 L1662.58 682.082 L1662.03 682.082 L1661.47 682.082 L1660.91 682.082 L1660.35 682.082 L1659.79 682.082 L1659.23 682.082 L1658.67 682.082 L1658.11 682.082 L1657.55 682.082 L1656.99 682.082 L1656.43 682.082 L1655.87 682.082 L1655.31 682.082 L1654.76 682.082 L1654.2 682.082 L1653.64 682.082 L1653.08 682.082 L1652.52 682.082 L1651.96 682.082 L1651.4 682.082 L1650.84 682.082 L1650.28 682.082 L1649.72 682.082 L1649.16 682.082 L1648.6 682.082 L1648.04 682.082 L1647.48 682.082 L1646.93 682.082 L1646.37 682.082 L1645.81 682.082 L1645.25 682.082 L1644.69 682.082 L1644.13 682.082 L1643.57 682.082 L1643.01 682.082 L1642.45 682.082 L1641.89 682.082 L1641.33 682.082 L1640.77 682.082 L1640.21 682.082 L1639.66 682.082 L1639.1 682.082 L1638.54 682.082 L1637.98 682.082 L1637.42 682.082 L1636.86 682.082 L1636.3 682.082 L1635.74 682.082 L1635.18 682.082 L1634.62 682.082 L1634.06 682.082 L1633.5 682.082 L1632.94 682.082 L1632.39 682.082 L1631.83 682.082 L1631.27 682.082 L1630.71 682.082 L1630.15 682.082 L1629.59 682.082 L1629.03 682.082 L1628.47 682.082 L1627.91 682.082 L1627.35 682.082 L1626.79 682.082 L1626.23 682.082 L1625.67 682.082 L1625.11 682.082 L1624.56 682.082 L1624 682.082 L1623.44 682.082 L1622.88 682.082 L1622.32 682.082 L1621.76 682.082 L1621.2 682.082 L1620.64 682.082 L1620.08 682.082 L1619.52 682.082 L1618.96 682.082 L1618.4 682.082 L1617.84 682.082 L1617.29 682.082 L1616.73 682.082 L1616.17 682.082 L1615.61 682.082 L1615.05 682.082 L1614.49 682.082 L1613.93 682.082 L1613.37 682.082 L1612.81 682.082 L1612.25 682.082 L1611.69 682.082 L1611.13 682.082 L1610.57 682.082 L1610.02 682.082 L1609.46 682.082 L1608.9 682.082 L1608.34 682.082 L1607.78 682.082 L1607.22 682.082 L1606.66 682.082 L1606.1 682.082 L1605.54 682.082 L1604.98 682.082 L1604.42 682.082 L1603.86 682.082 L1603.3 682.082 L1602.74 682.082 L1602.19 682.082 L1601.63 682.082 L1601.07 682.082 L1600.51 682.082 L1599.95 682.082 L1599.39 682.082 L1598.83 682.082 L1598.27 682.082 L1597.71 682.082 L1597.15 682.082 L1596.59 682.082 L1596.03 682.082 L1595.47 682.082 L1594.92 682.082 L1594.36 682.082 L1593.8 682.082 L1593.24 682.082 L1592.68 682.082 L1592.12 682.082 L1591.56 682.082 L1591 682.082 L1590.44 682.082 L1589.88 682.082 L1589.32 682.082 L1588.76 682.082 L1588.2 682.082 L1587.65 682.082 L1587.09 682.082 L1586.53 682.082 L1585.97 682.082 L1585.41 682.082 L1584.85 682.082 L1584.29 682.082 L1583.73 682.082 L1583.17 682.082 L1582.61 682.082 L1582.05 682.082 L1581.49 682.082 L1580.93 682.082 L1580.37 682.082 L1579.82 682.082 L1579.26 682.082 L1578.7 682.082 L1578.14 682.082 L1577.58 682.082 L1577.02 682.082 L1576.46 682.082 L1575.9 682.082 L1575.34 682.082 L1574.78 682.082 L1574.22 682.082 L1573.66 682.082 L1573.1 682.082 L1572.55 682.082 L1571.99 682.082 L1571.43 682.082 L1570.87 682.082 L1570.31 682.082 L1569.75 682.082 L1569.19 682.082 L1568.63 682.082 L1568.07 682.082 L1567.51 682.082 L1566.95 682.082 L1566.39 682.082 L1565.83 682.082 L1565.28 682.082 L1564.72 682.082 L1564.16 682.082 L1563.6 682.082 L1563.04 682.082 L1562.48 682.082 L1561.92 682.082 L1561.36 682.082 L1560.8 682.082 L1560.24 682.082 L1559.68 682.082 L1559.12 682.082 L1558.56 682.082 L1558 682.082 L1557.45 682.082 L1556.89 682.082 L1556.33 682.082 L1555.77 682.082 L1555.21 682.082 L1554.65 682.082 L1554.09 682.082 L1553.53 682.082 L1552.97 682.082 L1552.41 682.082 L1551.85 682.082 L1551.29 682.082 L1550.73 682.082 L1550.18 682.082 L1549.62 682.082 L1549.06 682.082 L1548.5 682.082 L1547.94 682.082 L1547.38 682.082 L1546.82 682.082 L1546.26 682.082 L1545.7 682.082 L1545.14 682.082 L1544.58 682.082 L1544.02 682.082 L1543.46 682.082 L1542.9 682.082 L1542.35 682.082 L1541.79 682.082 L1541.23 682.082 L1540.67 682.082 L1540.11 682.082 L1539.55 682.082 L1538.99 682.082 L1538.43 682.082 L1537.87 682.082 L1537.31 682.082 L1536.75 682.082 L1536.19 682.082 L1535.63 682.082 L1535.08 682.082 L1534.52 682.082 L1533.96 682.082 L1533.4 682.082 L1532.84 682.082 L1532.28 682.082 L1531.72 682.082 L1531.16 682.082 L1530.6 682.082 L1530.04 682.082 L1529.48 682.082 L1528.92 682.082 L1528.36 682.082 L1527.81 682.082 L1527.25 682.082 L1526.69 682.082 L1526.13 682.082 L1525.57 682.082 L1525.01 682.082 L1524.45 682.082 L1523.89 682.082 L1523.33 682.082 L1522.77 682.082 L1522.21 682.082 L1521.65 682.082 L1521.09 682.082 L1520.53 682.082 L1519.98 682.082 L1519.42 682.082 L1518.86 682.082 L1518.3 682.082 L1517.74 682.082 L1517.18 682.082 L1516.62 682.082 L1516.06 682.082 L1515.5 682.082 L1514.94 682.082 L1514.38 682.082 L1513.82 682.082 L1513.26 682.082 L1512.71 682.082 L1512.15 682.082 L1511.59 682.082 L1511.03 682.082 L1510.47 682.082 L1509.91 682.082 L1509.35 682.082 L1508.79 682.082 L1508.23 682.082 L1507.67 682.082 L1507.11 682.082 L1506.55 682.082 L1505.99 682.082 L1505.44 682.082 L1504.88 682.082 L1504.32 682.082 L1503.76 682.082 L1503.2 682.082 L1502.64 682.082 L1502.08 682.082 L1501.52 682.082 L1500.96 682.082 L1500.4 682.082 L1499.84 682.082 L1499.28 682.082 L1498.72 682.082 L1498.16 682.082 L1497.61 682.082 L1497.05 682.082 L1496.49 682.082 L1495.93 682.082 L1495.37 682.082 L1494.81 682.082 L1494.25 682.082 L1493.69 682.082 L1493.13 682.082 L1492.57 682.082 L1492.01 682.082 L1491.45 682.082 L1490.89 682.082 L1490.34 682.082 L1489.78 682.082 L1489.22 682.082 L1488.66 682.082 L1488.1 682.082 L1487.54 682.082 L1486.98 682.082 L1486.42 682.082 L1485.86 682.082 L1485.3 682.082 L1484.74 682.082 L1484.18 682.082 L1483.62 682.082 L1483.07 682.082 L1482.51 682.082 L1481.95 682.082 L1481.39 682.082 L1480.83 682.082 L1480.27 682.082 L1479.71 682.082 L1479.15 682.082 L1478.59 682.082 L1478.03 682.082 L1477.47 682.082 L1476.91 682.082 L1476.35 682.082 L1475.79 682.082 L1475.24 682.082 L1474.68 682.082 L1474.12 682.082 L1473.56 682.082 L1473 682.082 L1472.44 682.082 L1471.88 682.082 L1471.32 682.082 L1470.76 682.082 L1470.2 682.082 L1469.64 682.082 L1469.08 682.082 L1468.52 682.082 L1467.97 682.082 L1467.41 682.082 L1466.85 682.082 L1466.29 682.082 L1465.73 682.082 L1465.17 682.082 L1464.61 682.082 L1464.05 682.082 L1463.49 682.082 L1462.93 682.082 L1462.37 682.082 L1461.81 682.082 L1461.25 682.082 L1460.7 682.082 L1460.14 682.082 L1459.58 682.082 L1459.02 682.082 L1458.46 682.082 L1457.9 682.082 L1457.34 682.082 L1456.78 682.082 L1456.22 682.082 L1455.66 682.082 L1455.1 682.082 L1454.54 682.082 L1453.98 682.082 L1453.42 682.082 L1452.87 682.082 L1452.31 682.082 L1451.75 682.082 L1451.19 682.082 L1450.63 682.082 L1450.07 682.082 L1449.51 682.082 L1448.95 682.082 L1448.39 682.082 L1447.83 682.082 L1447.27 682.082 L1446.71 682.082 L1446.15 682.082 L1445.6 682.082 L1445.04 682.082 L1444.48 682.082 L1443.92 682.082 L1443.36 682.082 L1442.8 682.082 L1442.24 682.082 L1441.68 682.082 L1441.12 682.082 L1440.56 682.082 L1440 682.082 L1439.44 682.082 L1438.88 682.082 L1438.33 682.082 L1437.77 682.082 L1437.21 682.082 L1436.65 682.082 L1436.09 682.082 L1435.53 682.082 L1434.97 682.082 L1434.41 682.082 L1433.85 682.082 L1433.29 682.082 L1432.73 682.082 L1432.17 682.082 L1431.61 682.082 L1431.05 682.082 L1430.5 682.082 L1429.94 682.082 L1429.38 682.082 L1428.82 682.082 L1428.26 682.082 L1427.7 682.082 L1427.14 682.082 L1426.58 682.082 L1426.02 682.082 L1425.46 682.082 L1424.9 682.082 L1424.34 682.082 L1423.78 682.082 L1423.23 682.082 L1422.67 682.082 L1422.11 682.082 L1421.55 682.082 L1420.99 682.082 L1420.43 682.082 L1419.87 682.082 L1419.31 682.082 L1418.75 682.082 L1418.19 682.082 L1417.63 682.082 L1417.07 682.082 L1416.51 682.082 L1415.95 682.082 L1415.4 682.082 L1414.84 682.082 L1414.28 682.082 L1413.72 682.082 L1413.16 682.082 L1412.6 682.082 L1412.04 682.082 L1411.48 682.082 L1410.92 682.082 L1410.36 682.082 L1409.8 682.082 L1409.24 682.082 L1408.68 682.082 L1408.13 682.082 L1407.57 682.082 L1407.01 682.082 L1406.45 682.082 L1405.89 682.082 L1405.33 682.082 L1404.77 682.082 L1404.21 682.082 L1403.65 682.082 L1403.09 682.082 L1402.53 682.082 L1401.97 682.082 L1401.41 682.082 L1400.86 682.082 L1400.3 682.082 L1399.74 682.082 L1399.18 682.082 L1398.62 682.082 L1398.06 682.082 L1397.5 682.082 L1396.94 682.082 L1396.38 682.082 L1395.82 682.082 L1395.26 682.082 L1394.7 682.082 L1394.14 682.082 L1393.58 682.082 L1393.03 682.082 L1392.47 682.082 L1391.91 682.082 L1391.35 682.082 L1390.79 682.082 L1390.23 682.082 L1389.67 682.082 L1389.11 682.082 L1388.55 682.082 L1387.99 682.082 L1387.43 682.082 L1386.87 682.082 L1386.31 682.082 L1385.76 682.082 L1385.2 682.082 L1384.64 682.082 L1384.08 682.082 L1383.52 682.082 L1382.96 682.082 L1382.4 682.082 L1381.84 682.082 L1381.28 682.082 L1380.72 682.082 L1380.16 682.082 L1379.6 682.082 L1379.04 682.082 L1378.49 682.082 L1377.93 682.082 L1377.37 682.082 L1376.81 682.082 L1376.25 682.082 L1375.69 682.082 L1375.13 682.082 L1374.57 682.082 L1374.01 682.082 L1373.45 682.082 L1372.89 682.082 L1372.33 682.082 L1371.77 682.082 L1371.21 682.082 L1370.66 682.082 L1370.1 682.082 L1369.54 682.082 L1368.98 682.082 L1368.42 682.082 L1367.86 682.082 L1367.3 682.082 L1366.74 682.082 L1366.18 682.082 L1365.62 682.082 L1365.06 682.082 L1364.5 682.082 L1363.94 682.082 L1363.39 682.082 L1362.83 682.082 L1362.27 682.082 L1361.71 682.082 L1361.15 682.082 L1360.59 682.082 L1360.03 682.082 L1359.47 682.082 L1358.91 682.082 L1358.35 682.082 L1357.79 682.082 L1357.23 682.082 L1356.67 682.082 L1356.12 682.082 L1355.56 682.082 L1355 682.082 L1354.44 682.082 L1353.88 682.082 L1353.32 682.082 L1352.76 682.082 L1352.2 682.082 L1351.64 682.082 L1351.08 682.082 L1350.52 682.082 L1349.96 682.082 L1349.4 682.082 L1348.84 682.082 L1348.29 682.082 L1347.73 682.082 L1347.17 682.082 L1346.61 682.082 L1346.05 682.082 L1345.49 682.082 L1344.93 682.082 L1344.37 682.082 L1343.81 682.082 L1343.25 682.082 L1342.69 682.082 L1342.13 682.082 L1341.57 682.082 L1341.02 682.082 L1340.46 682.082 L1339.9 682.082 L1339.34 682.082 L1338.78 682.082 L1338.22 682.082 L1337.66 682.082 L1337.1 682.082 L1336.54 682.082 L1335.98 682.082 L1335.42 682.082 L1334.86 682.082 L1334.3 682.082 L1333.75 682.082 L1333.19 682.082 L1332.63 682.082 L1332.07 682.082 L1331.51 682.082 L1330.95 682.082 L1330.39 682.082 L1329.83 682.082 L1329.27 682.082 L1328.71 682.082 L1328.15 682.082 L1327.59 682.082 L1327.03 682.082 L1326.47 682.082 L1325.92 682.082 L1325.36 682.082 L1324.8 682.082 L1324.24 682.082 L1323.68 682.082 L1323.12 682.082 L1322.56 682.082 L1322 682.082 L1321.44 682.082 L1320.88 682.082 L1320.32 682.082 L1319.76 682.082 L1319.2 682.082 L1318.65 682.082 L1318.09 682.082 L1317.53 682.082 L1316.97 682.082 L1316.41 682.082 L1315.85 682.082 L1315.29 682.082 L1314.73 682.082 L1314.17 682.082 L1313.61 682.082 L1313.05 682.082 L1312.49 682.082 L1311.93 682.082 L1311.38 682.082 L1310.82 682.082 L1310.26 682.082 L1309.7 682.082 L1309.14 682.082 L1308.58 682.082 L1308.02 682.082 L1307.46 682.082 L1306.9 682.082 L1306.34 682.082 L1305.78 682.082 L1305.22 682.082 L1304.66 682.082 L1304.1 682.082 L1303.55 682.082 L1302.99 682.082 L1302.43 682.082 L1301.87 682.082 L1301.31 682.082 L1300.75 682.082 L1300.19 682.082 L1299.63 682.082 L1299.07 682.082 L1298.51 682.082 L1297.95 682.082 L1297.39 682.082 L1296.83 682.082 L1296.28 682.082 L1295.72 682.082 L1295.16 682.082 L1294.6 682.082 L1294.04 682.082 L1293.48 682.082 L1292.92 682.082 L1292.36 682.082 L1291.8 682.082 L1291.24 682.082 L1290.68 682.082 L1290.12 682.082 L1289.56 682.082 L1289 682.082 L1288.45 682.082 L1287.89 682.082 L1287.33 682.082 L1286.77 682.082 L1286.21 682.082 L1285.65 682.082 L1285.09 682.082 L1284.53 682.082 L1283.97 682.082 L1283.41 682.082 L1282.85 682.082 L1282.29 682.082 L1281.73 682.082 L1281.18 682.082 L1280.62 682.082 L1280.06 682.082 L1279.5 682.082 L1278.94 682.082 L1278.38 682.082 L1277.82 682.082 L1277.26 682.082 L1276.7 682.082 L1276.14 682.082 L1275.58 682.082 L1275.02 682.082 L1274.46 682.082 L1273.91 682.082 L1273.35 682.082 L1272.79 682.082 L1272.23 682.082 L1271.67 682.082 L1271.11 682.082 L1270.55 682.082 L1269.99 682.082 L1269.43 682.082 L1268.87 682.082 L1268.31 682.082 L1267.75 682.082 L1267.19 682.082 L1266.63 682.082 L1266.08 682.082 L1265.52 682.082 L1264.96 682.082 L1264.4 682.082 L1263.84 682.082 L1263.28 682.082 L1262.72 682.082 L1262.16 682.082 L1261.6 682.082 L1261.04 682.082 L1260.48 682.082 L1259.92 682.082 L1259.36 682.082 L1258.81 682.082 L1258.25 682.082 L1257.69 682.082 L1257.13 682.082 L1256.57 682.082 L1256.01 682.082 L1255.45 682.082 L1254.89 682.082 L1254.33 682.082 L1253.77 682.082 L1253.21 682.082 L1252.65 682.082 L1252.09 682.082 L1251.54 682.082 L1250.98 682.082 L1250.42 682.082 L1249.86 682.082 L1249.3 682.082 L1248.74 682.082 L1248.18 682.082 L1247.62 682.082 L1247.06 682.082 L1246.5 682.082 L1245.94 682.082 L1245.38 682.082 L1244.82 682.082 L1244.26 682.082 L1243.71 682.082 L1243.15 682.082 L1242.59 682.082 L1242.03 682.082 L1241.47 682.082 L1240.91 682.082 L1240.35 682.082 L1239.79 682.082 L1239.23 682.082 L1238.67 682.082 L1238.11 682.082 L1237.55 682.082 L1236.99 682.082 L1236.44 682.082 L1235.88 682.082 L1235.32 682.082 L1234.76 682.082 L1234.2 682.082 L1233.64 682.082 L1233.08 682.082 L1232.52 682.082 L1231.96 682.082 L1231.4 682.082 L1230.84 682.082 L1230.28 682.082 L1229.72 682.082 L1229.17 682.082 L1228.61 682.082 L1228.05 682.082 L1227.49 682.082 L1226.93 682.082 L1226.37 682.082 L1225.81 682.082 L1225.25 682.082 L1224.69 682.082 L1224.13 682.082 L1223.57 682.082 L1223.01 682.082 L1222.45 682.082 L1221.89 682.082 L1221.34 682.082 L1220.78 682.082 L1220.22 682.082 L1219.66 682.082 L1219.1 682.082 L1218.54 682.082 L1217.98 682.082 L1217.42 682.082 L1216.86 682.082 L1216.3 682.082 L1215.74 682.082 L1215.18 682.082 L1214.62 682.082 L1214.07 682.082 L1213.51 682.082 L1212.95 682.082 L1212.39 682.082 L1211.83 682.082 L1211.27 682.082 L1210.71 682.082 L1210.15 682.082 L1209.59 682.082 L1209.03 682.082 L1208.47 682.082 L1207.91 682.082 L1207.35 682.082 L1206.8 682.082 L1206.24 682.082 L1205.68 682.082 L1205.12 682.082 L1204.56 682.082 L1204 682.082 L1203.44 682.082 L1202.88 682.082 L1202.32 682.082 L1201.76 682.082 L1201.2 682.082 L1200.64 682.082 L1200.08 682.082 L1199.52 682.082 L1198.97 682.082 L1198.41 682.082 L1197.85 682.082 L1197.29 682.082 L1196.73 682.082 L1196.17 682.082 L1195.61 682.082 L1195.05 682.082 L1194.49 682.082 L1193.93 682.082 L1193.37 682.082 L1192.81 682.082 L1192.25 682.082 L1191.7 682.082 L1191.14 682.082 L1190.58 682.082 L1190.02 682.082 L1189.46 682.082 L1188.9 682.082 L1188.34 682.082 L1187.78 682.082 L1187.22 682.082 L1186.66 682.082 L1186.1 682.082 L1185.54 682.082 L1184.98 682.082 L1184.43 682.082 L1183.87 682.082 L1183.31 682.082 L1182.75 682.082 L1182.19 682.082 L1181.63 682.082 L1181.07 682.082 L1180.51 682.082 L1179.95 682.082 L1179.39 682.082 L1178.83 682.082 L1178.27 682.082 L1177.71 682.082 L1177.15 682.082 L1176.6 682.082 L1176.04 682.082 L1175.48 682.082 L1174.92 682.082 L1174.36 682.082 L1173.8 682.082 L1173.24 682.082 L1172.68 682.082 L1172.12 682.082 L1171.56 682.082 L1171 682.082 L1170.44 682.082 L1169.88 682.082 L1169.33 682.082 L1168.77 682.082 L1168.21 682.082 L1167.65 682.082 L1167.09 682.082 L1166.53 682.082 L1165.97 682.082 L1165.41 682.082 L1164.85 682.082 L1164.29 682.082 L1163.73 682.082 L1163.17 682.082 L1162.61 682.082 L1162.05 682.082 L1161.5 682.082 L1160.94 682.082 L1160.38 682.082 L1159.82 682.082 L1159.26 682.082 L1158.7 682.082 L1158.14 682.082 L1157.58 682.082 L1157.02 682.082 L1156.46 682.082 L1155.9 682.082 L1155.34 682.082 L1154.78 682.082 L1154.23 682.082 L1153.67 682.082 L1153.11 682.082 L1152.55 682.082 L1151.99 682.082 L1151.43 682.082 L1150.87 682.082 L1150.31 682.082 L1149.75 682.082 L1149.19 682.082 L1148.63 682.082 L1148.07 682.082 L1147.51 682.082 L1146.96 682.082 L1146.4 682.082 L1145.84 682.082 L1145.28 682.082 L1144.72 682.082 L1144.16 682.082 L1143.6 682.082 L1143.04 682.082 L1142.48 682.082 L1141.92 682.082 L1141.36 682.082 L1140.8 682.082 L1140.24 682.082 L1139.68 682.082 L1139.13 682.082 L1138.57 682.082 L1138.01 682.082 L1137.45 682.082 L1136.89 682.082 L1136.33 682.082 L1135.77 682.082 L1135.21 682.082 L1134.65 682.082 L1134.09 682.082 L1133.53 682.082 L1132.97 682.082 L1132.41 682.082 L1131.86 682.082 L1131.3 682.082 L1130.74 682.082 L1130.18 682.082 L1129.62 682.082 L1129.06 682.082 L1128.5 682.082 L1127.94 682.082 L1127.38 682.082 L1126.82 682.082 L1126.26 682.082 L1125.7 682.082 L1125.14 682.082 L1124.59 682.082 L1124.03 682.082 L1123.47 682.082 L1122.91 682.082 L1122.35 682.082 L1121.79 682.082 L1121.23 682.082 L1120.67 682.082 L1120.11 682.082 L1119.55 682.082 L1118.99 682.082 L1118.43 682.082 L1117.87 682.082 L1117.31 682.082 L1116.76 682.082 L1116.2 682.082 L1115.64 682.082 L1115.08 682.082 L1114.52 682.082 L1113.96 682.082 L1113.4 682.082 L1112.84 682.082 L1112.28 682.082 L1111.72 682.082 L1111.16 682.082 L1110.6 682.082 L1110.04 682.082 L1109.49 682.082 L1108.93 682.082 L1108.37 682.082 L1107.81 682.082 L1107.25 682.082 L1106.69 682.082 L1106.13 682.082 L1105.57 682.082 L1105.01 682.082 L1104.45 682.082 L1103.89 682.082 L1103.33 682.082 L1102.77 682.082 L1102.22 682.082 L1101.66 682.082 L1101.1 682.082 L1100.54 682.082 L1099.98 682.082 L1099.42 682.082 L1098.86 682.082 L1098.3 682.082 L1097.74 682.082 L1097.18 682.082 L1096.62 682.082 L1096.06 682.082 L1095.5 682.082 L1094.94 682.082 L1094.39 682.082 L1093.83 682.082 L1093.27 682.082 L1092.71 682.082 L1092.15 682.082 L1091.59 682.082 L1091.03 682.082 L1090.47 682.082 L1089.91 682.082 L1089.35 682.082 L1088.79 682.082 L1088.23 682.082 L1087.67 682.082 L1087.12 682.082 L1086.56 682.082 L1086 682.082 L1085.44 682.082 L1084.88 682.082 L1084.32 682.082 L1083.76 682.082 L1083.2 682.082 L1082.64 682.082 L1082.08 682.082 L1081.52 682.082 L1080.96 682.082 L1080.4 682.082 L1079.85 682.082 L1079.29 682.082 L1078.73 682.082 L1078.17 682.082 L1077.61 682.082 L1077.05 682.082 L1076.49 682.082 L1075.93 682.082 L1075.37 682.082 L1074.81 682.082 L1074.25 682.082 L1073.69 682.082 L1073.13 682.082 L1072.57 682.082 L1072.02 682.082 L1071.46 682.082 L1070.9 682.082 L1070.34 682.082 L1069.78 682.082 L1069.22 682.082 L1068.66 682.082 L1068.1 682.082 L1067.54 682.082 L1066.98 682.082 L1066.42 682.082 L1065.86 682.082 L1065.3 682.082 L1064.75 682.082 L1064.19 682.082 L1063.63 682.082 L1063.07 682.082 L1062.51 682.082 L1061.95 682.082 L1061.39 682.082 L1060.83 682.082 L1060.27 682.082 L1059.71 682.082 L1059.15 682.082 L1058.59 682.082 L1058.03 682.082 L1057.48 682.082 L1056.92 682.082 L1056.36 682.082 L1055.8 682.082 L1055.24 682.082 L1054.68 682.082 L1054.12 682.082 L1053.56 682.082 L1053 682.082 L1052.44 682.082 L1051.88 682.082 L1051.32 682.082 L1050.76 682.082 L1050.2 682.082 L1049.65 682.082 L1049.09 682.082 L1048.53 682.082 L1047.97 682.082 L1047.41 682.082 L1046.85 682.082 L1046.29 682.082 L1045.73 682.082 L1045.17 682.082 L1044.61 682.082 L1044.05 682.082 L1043.49 682.082 L1042.93 682.082 L1042.38 682.082 L1041.82 682.082 L1041.26 682.082 L1040.7 682.082 L1040.14 682.082 L1039.58 682.082 L1039.02 682.082 L1038.46 682.082 L1037.9 682.082 L1037.34 682.082 L1036.78 682.082 L1036.22 682.082 L1035.66 682.082 L1035.1 682.082 L1034.55 682.082 L1033.99 682.082 L1033.43 682.082 L1032.87 682.082 L1032.31 682.082 L1031.75 682.082 L1031.19 682.082 L1030.63 682.082 L1030.07 682.082 L1029.51 682.082 L1028.95 682.082 L1028.39 682.082 L1027.83 682.082 L1027.28 682.082 L1026.72 682.082 L1026.16 682.082 L1025.6 682.082 L1025.04 682.082 L1024.48 682.082 L1023.92 682.082 L1023.36 682.082 L1022.8 682.082 L1022.24 682.082 L1021.68 682.082 L1021.12 682.082 L1020.56 682.082 L1020.01 682.082 L1019.45 682.082 L1018.89 682.082 L1018.33 682.082 L1017.77 682.082 L1017.21 682.082 L1016.65 682.082 L1016.09 682.082 L1015.53 682.082 L1014.97 682.082 L1014.41 682.082 L1013.85 682.082 L1013.29 682.082 L1012.73 682.082 L1012.18 682.082 L1011.62 682.082 L1011.06 682.082 L1010.5 682.082 L1009.94 682.082 L1009.38 682.082 L1008.82 682.082 L1008.26 682.082 L1007.7 682.082 L1007.14 682.082 L1006.58 682.082 L1006.02 682.082 L1005.46 682.082 L1004.91 682.082 L1004.35 682.082 L1003.79 682.082 L1003.23 682.082 L1002.67 682.082 L1002.11 682.082 L1001.55 682.082 L1000.99 682.082 L1000.43 682.082 L999.872 682.082 L999.313 682.082 L998.754 682.082 L998.194 682.082 L997.635 682.082 L997.076 682.082 L996.517 682.082 L995.957 682.082 L995.398 682.082 L994.839 682.082 L994.28 682.082 L993.72 682.082 L993.161 682.082 L992.602 682.082 L992.043 682.082 L991.483 682.082 L990.924 682.082 L990.365 682.082 L989.806 682.082 L989.246 682.082 L988.687 682.082 L988.128 682.082 L987.569 682.082 L987.009 682.082 L986.45 682.082 L985.891 682.082 L985.332 682.082 L984.772 682.082 L984.213 682.082 L983.654 682.082 L983.095 682.082 L982.535 682.082 L981.976 682.082 L981.417 682.082 L980.858 682.082 L980.298 682.082 L979.739 682.082 L979.18 682.082 L978.621 682.082 L978.061 682.082 L977.502 682.082 L976.943 682.082 L976.384 682.082 L975.824 682.082 L975.265 682.082 L974.706 682.082 L974.147 682.082 L973.587 682.082 L973.028 682.082 L972.469 682.082 L971.91 682.082 L971.35 682.082 L970.791 682.082 L970.232 682.082 L969.673 682.082 L969.113 682.082 L968.554 682.082 L967.995 682.082 L967.436 682.082 L966.876 682.082 L966.317 682.082 L965.758 682.082 L965.199 682.082 L964.639 682.082 L964.08 682.082 L963.521 682.082 L962.962 682.082 L962.402 682.082 L961.843 682.082 L961.284 682.082 L960.725 682.082 L960.165 682.082 L959.606 682.082 L959.047 682.082 L958.488 682.082 L957.928 682.082 L957.369 682.082 L956.81 682.082 L956.251 682.082 L955.691 682.082 L955.132 682.082 L954.573 682.082 L954.014 682.082 L953.454 682.082 L952.895 682.082 L952.336 682.082 L951.777 682.082 L951.217 682.082 L950.658 682.082 L950.099 682.082 L949.54 682.082 L948.98 682.082 L948.421 682.082 L947.862 682.082 L947.303 682.082 L946.743 682.082 L946.184 682.082 L945.625 682.082 L945.066 682.082 L944.506 682.082 L943.947 682.082 L943.388 682.082 L942.829 682.082 L942.269 682.082 L941.71 682.082 L941.151 682.082 L940.592 682.082 L940.032 682.082 L939.473 682.082 L938.914 682.082 L938.355 682.082 L937.795 682.082 L937.236 682.082 L936.677 682.082 L936.118 682.082 L935.558 682.082 L934.999 682.082 L934.44 682.082 L933.881 682.082 L933.321 682.082 L932.762 682.082 L932.203 682.082 L931.644 682.082 L931.084 682.082 L930.525 682.082 L929.966 682.082 L929.406 682.082 L928.847 682.082 L928.288 682.082 L927.729 682.082 L927.169 682.082 L926.61 682.082 L926.051 682.082 L925.492 682.082 L924.932 682.082 L924.373 682.082 L923.814 682.082 L923.255 682.082 L922.695 682.082 L922.136 682.082 L921.577 682.082 L921.018 682.082 L920.458 682.082 L919.899 682.082 L919.34 682.082 L918.781 682.082 L918.221 682.082 L917.662 682.082 L917.103 682.082 L916.544 682.082 L915.984 682.082 L915.425 682.082 L914.866 682.082 L914.307 682.082 L913.747 682.082 L913.188 682.082 L912.629 682.082 L912.07 682.082 L911.51 682.082 L910.951 682.082 L910.392 682.082 L909.833 682.082 L909.273 682.082 L908.714 682.082 L908.155 682.082 L907.596 682.082 L907.036 682.082 L906.477 682.082 L905.918 682.082 L905.359 682.082 L904.799 682.082 L904.24 682.082 L903.681 682.082 L903.122 682.082 L902.562 682.082 L902.003 682.082 L901.444 682.082 L900.885 682.082 L900.325 682.082 L899.766 682.082 L899.207 682.082 L898.648 682.082 L898.088 682.082 L897.529 682.082 L896.97 682.082 L896.411 682.082 L895.851 682.082 L895.292 682.082 L894.733 682.082 L894.174 682.082 L893.614 682.082 L893.055 682.082 L892.496 682.082 L891.937 682.082 L891.377 682.082 L890.818 682.082 L890.259 682.082 L889.7 682.082 L889.14 682.082 L888.581 682.082 L888.022 682.082 L887.463 682.082 L886.903 682.082 L886.344 682.082 L885.785 682.082 L885.226 682.082 L884.666 682.082 L884.107 682.082 L883.548 682.082 L882.989 682.082 L882.429 682.082 L881.87 682.082 L881.311 682.082 L880.752 682.082 L880.192 682.082 L879.633 682.082 L879.074 682.082 L878.515 682.082 L877.955 682.082 L877.396 682.082 L876.837 682.082 L876.278 682.082 L875.718 682.082 L875.159 682.082 L874.6 682.082 L874.041 682.082 L873.481 682.082 L872.922 682.082 L872.363 682.082 L871.804 682.082 L871.244 682.082 L870.685 682.082 L870.126 682.082 L869.567 682.082 L869.007 682.082 L868.448 682.082 L867.889 682.082 L867.33 682.082 L866.77 682.082 L866.211 682.082 L865.652 682.082 L865.093 682.082 L864.533 682.082 L863.974 682.082 L863.415 682.082 L862.856 682.082 L862.296 682.082 L861.737 682.082 L861.178 682.082 L860.619 682.082 L860.059 682.082 L859.5 682.082 L858.941 682.082 L858.382 682.082 L857.822 682.082 L857.263 682.082 L856.704 682.082 L856.145 682.082 L855.585 682.082 L855.026 682.082 L854.467 682.082 L853.908 682.082 L853.348 682.082 L852.789 682.082 L852.23 682.082 L851.671 682.082 L851.111 682.082 L850.552 682.082 L849.993 682.082 L849.434 682.082 L848.874 682.082 L848.315 682.082 L847.756 682.082 L847.197 682.082 L846.637 682.082 L846.078 682.082 L845.519 682.082 L844.96 682.082 L844.4 682.082 L843.841 682.082 L843.282 682.082 L842.723 682.082 L842.163 682.082 L841.604 682.082 L841.045 682.082 L840.486 682.082 L839.926 682.082 L839.367 682.082 L838.808 682.082 L838.249 682.082 L837.689 682.082 L837.13 682.082 L836.571 682.082 L836.012 682.082 L835.452 682.082 L834.893 682.082 L834.334 682.082 L833.775 682.082 L833.215 682.082 L832.656 682.082 L832.097 682.082 L831.538 682.082 L830.978 682.082 L830.419 682.082 L829.86 682.082 L829.301 682.082 L828.741 682.082 L828.182 682.082 L827.623 682.082 L827.064 682.082 L826.504 682.082 L825.945 682.082 L825.386 682.082 L824.827 682.082 L824.267 682.082 L823.708 682.082 L823.149 682.082 L822.59 682.082 L822.03 682.082 L821.471 682.082 L820.912 682.082 L820.353 682.082 L819.793 682.082 L819.234 682.082 L818.675 682.082 L818.116 682.082 L817.556 682.082 L816.997 682.082 L816.438 682.082 L815.879 682.082 L815.319 682.082 L814.76 682.082 L814.201 682.082 L813.642 682.082 L813.082 682.082 L812.523 682.082 L811.964 682.082 L811.405 682.082 L810.845 682.082 L810.286 682.082 L809.727 682.082 L809.168 682.082 L808.608 682.082 L808.049 682.082 L807.49 682.082 L806.931 682.082 L806.371 682.082 L805.812 682.082 L805.253 682.082 L804.693 682.082 L804.134 682.082 L803.575 682.082 L803.016 682.082 L802.456 682.082 L801.897 682.082 L801.338 682.082 L800.779 682.082 L800.219 682.082 L799.66 682.082 L799.101 682.082 L798.542 682.082 L797.982 682.082 L797.423 682.082 L796.864 682.082 L796.305 682.082 L795.745 682.082 L795.186 682.082 L794.627 682.082 L794.068 682.082 L793.508 682.082 L792.949 682.082 L792.39 682.082 L791.831 682.082 L791.271 682.082 L790.712 682.082 L790.153 682.082 L789.594 682.082 L789.034 682.082 L788.475 682.082 L787.916 682.082 L787.357 682.082 L786.797 682.082 L786.238 682.082 L785.679 682.082 L785.12 682.082 L784.56 682.082 L784.001 682.082 L783.442 682.082 L782.883 682.082 L782.323 682.082 L781.764 682.082 L781.205 682.082 L780.646 682.082 L780.086 682.082 L779.527 682.082 L778.968 682.082 L778.409 682.082 L777.849 682.082 L777.29 682.082 L776.731 682.082 L776.172 682.082 L775.612 682.082 L775.053 682.082 L774.494 682.082 L773.935 682.082 L773.375 682.082 L772.816 682.082 L772.257 682.082 L771.698 682.082 L771.138 682.082 L770.579 682.082 L770.02 682.082 L769.461 682.082 L768.901 682.082 L768.342 682.082 L767.783 682.082 L767.224 682.082 L766.664 682.082 L766.105 682.082 L765.546 682.082 L764.987 682.082 L764.427 682.082 L763.868 682.082 L763.309 682.082 L762.75 682.082 L762.19 682.082 L761.631 682.082 L761.072 682.082 L760.513 682.082 L759.953 682.082 L759.394 682.082 L758.835 682.082 L758.276 682.082 L757.716 682.082 L757.157 682.082 L756.598 682.082 L756.039 682.082 L755.479 682.082 L754.92 682.082 L754.361 682.082 L753.802 682.082 L753.242 682.082 L752.683 682.082 L752.124 682.082 L751.565 682.082 L751.005 682.082 L750.446 682.082 L749.887 682.082 L749.328 682.082 L748.768 682.082 L748.209 682.082 L747.65 682.082 L747.091 682.082 L746.531 682.082 L745.972 682.082 L745.413 682.082 L744.854 682.082 L744.294 682.082 L743.735 682.082 L743.176 682.082 L742.617 682.082 L742.057 682.082 L741.498 682.082 L740.939 682.082 L740.38 682.082 L739.82 682.082 L739.261 682.082 L738.702 682.082 L738.143 682.082 L737.583 682.082 L737.024 682.082 L736.465 682.082 L735.906 682.082 L735.346 682.082 L734.787 682.082 L734.228 682.082 L733.669 682.082 L733.109 682.082 L732.55 682.082 L731.991 682.082 L731.432 682.082 L730.872 682.082 L730.313 682.082 L729.754 682.082 L729.195 682.082 L728.635 682.082 L728.076 682.082 L727.517 682.082 L726.958 682.082 L726.398 682.082 L725.839 682.082 L725.28 682.082 L724.721 682.082 L724.161 682.082 L723.602 682.082 L723.043 682.082 L722.484 682.082 L721.924 682.082 L721.365 682.082 L720.806 682.082 L720.247 682.082  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.942 720.806,686.942 721.365,686.942 721.924,686.942 722.484,686.942 723.043,686.942 723.602,686.942 724.161,686.942 724.721,686.942 725.28,686.942 725.839,686.942 726.398,686.942 726.958,686.942 727.517,686.942 728.076,686.942 728.635,686.942 729.195,686.942 729.754,686.942 730.313,686.942 730.872,686.942 731.432,686.942 731.991,686.942 732.55,686.942 733.109,686.942 733.669,686.942 734.228,686.942 734.787,686.942 735.346,686.942 735.906,686.942 736.465,686.942 737.024,686.942 737.583,686.942 738.143,686.942 738.702,686.942 739.261,686.942 739.82,686.942 740.38,686.942 740.939,686.942 741.498,686.942 742.057,686.942 742.617,686.942 743.176,686.942 743.735,686.942 744.294,686.942 744.854,686.942 745.413,686.942 745.972,686.942 746.531,686.942 747.091,686.942 747.65,686.942 748.209,686.942 748.768,686.942 749.328,686.942 749.887,686.942 750.446,686.942 751.005,686.942 751.565,686.942 752.124,686.942 752.683,686.942 753.242,686.942 753.802,686.942 754.361,686.942 754.92,686.942 755.479,686.942 756.039,686.942 756.598,686.942 757.157,686.942 757.716,686.942 758.276,686.942 758.835,686.942 759.394,686.942 759.953,686.942 760.513,686.942 761.072,686.942 761.631,686.942 762.19,686.942 762.75,686.942 763.309,686.942 763.868,686.942 764.427,686.942 764.987,686.942 765.546,686.942 766.105,686.942 766.664,686.942 767.224,686.942 767.783,686.942 768.342,686.942 768.901,686.942 769.461,686.942 770.02,686.942 770.579,686.942 771.138,686.942 771.698,686.942 772.257,686.942 772.816,686.942 773.375,686.942 773.935,686.942 774.494,686.942 775.053,686.942 775.612,686.942 776.172,686.942 776.731,686.942 777.29,686.942 777.849,686.942 778.409,686.942 778.968,686.942 779.527,686.942 780.086,686.942 780.646,686.942 781.205,686.942 781.764,686.942 782.323,686.942 782.883,686.942 783.442,686.942 784.001,686.942 784.56,686.942 785.12,686.942 785.679,686.942 786.238,686.942 786.797,686.942 787.357,686.942 787.916,686.942 788.475,686.942 789.034,686.942 789.594,686.942 790.153,686.942 790.712,686.942 791.271,686.942 791.831,686.942 792.39,686.942 792.949,686.942 793.508,686.942 794.068,686.942 794.627,686.942 795.186,686.942 795.745,686.942 796.305,686.942 796.864,686.942 797.423,686.942 797.982,686.942 798.542,686.942 799.101,686.942 799.66,686.942 800.219,686.942 800.779,686.942 801.338,686.942 801.897,686.942 802.456,686.942 803.016,686.942 803.575,686.942 804.134,686.942 804.693,686.942 805.253,686.942 805.812,686.942 806.371,686.942 806.931,686.942 807.49,686.942 808.049,686.942 808.608,686.942 809.168,686.942 809.727,686.942 810.286,686.942 810.845,686.942 811.405,686.942 811.964,686.942 812.523,686.942 813.082,686.942 813.642,686.942 814.201,686.942 814.76,686.942 815.319,686.942 815.879,686.942 816.438,686.942 816.997,686.942 817.556,686.942 818.116,686.942 818.675,686.942 819.234,686.942 819.793,686.942 820.353,686.942 820.912,686.942 821.471,686.942 822.03,686.942 822.59,686.942 823.149,686.942 823.708,686.942 824.267,686.942 824.827,686.942 825.386,686.942 825.945,686.942 826.504,686.942 827.064,686.942 827.623,686.942 828.182,686.942 828.741,686.942 829.301,686.942 829.86,686.942 830.419,686.942 830.978,686.942 831.538,686.942 832.097,686.942 832.656,686.942 833.215,686.942 833.775,686.942 834.334,686.942 834.893,686.942 835.452,686.942 836.012,686.942 836.571,686.942 837.13,686.942 837.689,686.942 838.249,686.942 838.808,686.942 839.367,686.942 839.926,686.942 840.486,686.942 841.045,686.942 841.604,686.942 842.163,686.942 842.723,686.942 843.282,686.942 843.841,686.942 844.4,686.942 844.96,686.942 845.519,686.942 846.078,686.942 846.637,686.942 847.197,686.942 847.756,686.942 848.315,686.942 848.874,686.942 849.434,686.942 849.993,686.942 850.552,686.942 851.111,686.942 851.671,686.942 852.23,686.942 852.789,686.942 853.348,686.942 853.908,686.942 854.467,686.942 855.026,686.942 855.585,686.942 856.145,686.942 856.704,686.942 857.263,686.942 857.822,686.942 858.382,686.942 858.941,686.942 859.5,686.942 860.059,686.942 860.619,686.942 861.178,686.942 861.737,686.942 862.296,686.942 862.856,686.942 863.415,686.942 863.974,686.942 864.533,686.942 865.093,686.942 865.652,686.942 866.211,686.942 866.77,686.942 867.33,686.942 867.889,686.942 868.448,686.942 869.007,686.942 869.567,686.942 870.126,686.942 870.685,686.942 871.244,686.942 871.804,686.942 872.363,686.942 872.922,686.942 873.481,686.942 874.041,686.942 874.6,686.942 875.159,686.942 875.718,686.942 876.278,686.942 876.837,686.942 877.396,686.942 877.955,686.942 878.515,686.942 879.074,686.942 879.633,686.942 880.192,686.942 880.752,686.942 881.311,686.942 881.87,686.942 882.429,686.942 882.989,686.942 883.548,686.942 884.107,686.942 884.666,686.942 885.226,686.942 885.785,686.942 886.344,686.942 886.903,686.942 887.463,686.942 888.022,686.942 888.581,686.942 889.14,686.942 889.7,686.942 890.259,686.942 890.818,686.942 891.377,686.942 891.937,686.942 892.496,686.942 893.055,686.942 893.614,686.942 894.174,686.942 894.733,686.942 895.292,686.942 895.851,686.942 896.411,686.942 896.97,686.942 897.529,686.942 898.088,686.942 898.648,686.942 899.207,686.942 899.766,686.942 900.325,686.942 900.885,686.942 901.444,686.942 902.003,686.942 902.562,686.942 903.122,686.942 903.681,686.942 904.24,686.942 904.799,686.942 905.359,686.942 905.918,686.942 906.477,686.942 907.036,686.942 907.596,686.942 908.155,686.942 908.714,686.942 909.273,686.942 909.833,686.942 910.392,686.942 910.951,686.942 911.51,686.942 912.07,686.942 912.629,686.942 913.188,686.942 913.747,686.942 914.307,686.942 914.866,686.942 915.425,686.942 915.984,686.942 916.544,686.942 917.103,686.942 917.662,686.942 918.221,686.942 918.781,686.942 919.34,686.942 919.899,686.942 920.458,686.942 921.018,686.942 921.577,686.942 922.136,686.942 922.695,686.942 923.255,686.942 923.814,686.942 924.373,686.942 924.932,686.942 925.492,686.942 926.051,686.942 926.61,686.942 927.169,686.942 927.729,686.942 928.288,686.942 928.847,686.942 929.406,686.942 929.966,686.942 930.525,686.942 931.084,686.942 931.644,686.942 932.203,686.942 932.762,686.942 933.321,686.942 933.881,686.942 934.44,686.942 934.999,686.942 935.558,686.942 936.118,686.942 936.677,686.942 937.236,686.942 937.795,686.942 938.355,686.942 938.914,686.942 939.473,686.942 940.032,686.942 940.592,686.942 941.151,686.942 941.71,686.942 942.269,686.942 942.829,686.942 943.388,686.942 943.947,686.942 944.506,686.942 945.066,686.942 945.625,686.942 946.184,686.942 946.743,686.942 947.303,686.942 947.862,686.942 948.421,686.942 948.98,686.942 949.54,686.942 950.099,686.942 950.658,686.942 951.217,686.942 951.777,686.942 952.336,686.942 952.895,686.942 953.454,686.942 954.014,686.942 954.573,686.942 955.132,686.942 955.691,686.942 956.251,686.942 956.81,686.942 957.369,686.942 957.928,686.942 958.488,686.942 959.047,686.942 959.606,686.942 960.165,686.942 960.725,686.942 961.284,686.942 961.843,686.942 962.402,686.942 962.962,686.942 963.521,686.942 964.08,686.942 964.639,686.942 965.199,686.942 965.758,686.942 966.317,686.942 966.876,686.942 967.436,686.942 967.995,686.942 968.554,686.942 969.113,686.942 969.673,686.942 970.232,686.942 970.791,686.942 971.35,686.942 971.91,686.942 972.469,686.942 973.028,686.942 973.587,686.942 974.147,686.942 974.706,686.942 975.265,686.942 975.824,686.942 976.384,686.942 976.943,686.942 977.502,686.942 978.061,686.942 978.621,686.942 979.18,686.942 979.739,686.942 980.298,686.942 980.858,686.942 981.417,686.942 981.976,686.942 982.535,686.942 983.095,686.942 983.654,686.942 984.213,686.942 984.772,686.942 985.332,686.942 985.891,686.942 986.45,686.942 987.009,686.942 987.569,686.942 988.128,686.942 988.687,686.942 989.246,686.942 989.806,686.942 990.365,686.942 990.924,686.942 991.483,686.942 992.043,686.942 992.602,686.942 993.161,686.942 993.72,686.942 994.28,686.942 994.839,686.942 995.398,686.942 995.957,686.942 996.517,686.942 997.076,686.942 997.635,686.942 998.194,686.942 998.754,686.942 999.313,686.942 999.872,686.942 1000.43,686.942 1000.99,686.942 1001.55,686.942 1002.11,686.942 1002.67,686.942 1003.23,686.942 1003.79,686.942 1004.35,686.942 1004.91,686.942 1005.46,686.942 1006.02,686.942 1006.58,686.942 1007.14,686.942 1007.7,686.942 1008.26,686.942 1008.82,686.942 1009.38,686.942 1009.94,686.942 1010.5,686.942 1011.06,686.942 1011.62,686.942 1012.18,686.942 1012.73,686.942 1013.29,686.942 1013.85,686.942 1014.41,686.942 1014.97,686.942 1015.53,686.942 1016.09,686.942 1016.65,686.942 1017.21,686.942 1017.77,686.942 1018.33,686.942 1018.89,686.942 1019.45,686.942 1020.01,686.942 1020.56,686.942 1021.12,686.942 1021.68,686.942 1022.24,686.942 1022.8,686.942 1023.36,686.942 1023.92,686.942 1024.48,686.942 1025.04,686.942 1025.6,686.942 1026.16,686.942 1026.72,686.942 1027.28,686.942 1027.83,686.942 1028.39,686.942 1028.95,686.942 1029.51,686.942 1030.07,686.942 1030.63,686.942 1031.19,686.942 1031.75,686.942 1032.31,686.942 1032.87,686.942 1033.43,686.942 1033.99,686.942 1034.55,686.942 1035.1,686.942 1035.66,686.942 1036.22,686.942 1036.78,686.942 1037.34,686.942 1037.9,686.942 1038.46,686.942 1039.02,686.942 1039.58,686.942 1040.14,686.942 1040.7,686.942 1041.26,686.942 1041.82,686.942 1042.38,686.942 1042.93,686.942 1043.49,686.942 1044.05,686.942 1044.61,686.942 1045.17,686.942 1045.73,686.942 1046.29,686.942 1046.85,686.942 1047.41,686.942 1047.97,686.942 1048.53,686.942 1049.09,686.942 1049.65,686.942 1050.2,686.942 1050.76,686.942 1051.32,686.942 1051.88,686.942 1052.44,686.942 1053,686.942 1053.56,686.942 1054.12,686.942 1054.68,686.942 1055.24,686.942 1055.8,686.942 1056.36,686.942 1056.92,686.942 1057.48,686.942 1058.03,686.942 1058.59,686.942 1059.15,686.942 1059.71,686.942 1060.27,686.942 1060.83,686.942 1061.39,686.942 1061.95,686.942 1062.51,686.942 1063.07,686.942 1063.63,686.942 1064.19,686.942 1064.75,686.942 1065.3,686.942 1065.86,686.942 1066.42,686.942 1066.98,686.942 1067.54,686.942 1068.1,686.942 1068.66,686.942 1069.22,686.942 1069.78,686.942 1070.34,686.942 1070.9,686.942 1071.46,686.942 1072.02,686.942 1072.57,686.942 1073.13,686.942 1073.69,686.942 1074.25,686.942 1074.81,686.942 1075.37,686.942 1075.93,686.942 1076.49,686.942 1077.05,686.942 1077.61,686.942 1078.17,686.942 1078.73,686.942 1079.29,686.942 1079.85,686.942 1080.4,686.942 1080.96,686.942 1081.52,686.942 1082.08,686.942 1082.64,686.942 1083.2,686.942 1083.76,686.942 1084.32,686.942 1084.88,686.942 1085.44,686.942 1086,686.942 1086.56,686.942 1087.12,686.942 1087.67,686.942 1088.23,686.942 1088.79,686.942 1089.35,686.942 1089.91,686.942 1090.47,686.942 1091.03,686.942 1091.59,686.942 1092.15,686.942 1092.71,686.942 1093.27,686.942 1093.83,686.942 1094.39,686.942 1094.94,686.942 1095.5,686.942 1096.06,686.942 1096.62,686.942 1097.18,686.942 1097.74,686.942 1098.3,686.942 1098.86,686.942 1099.42,686.942 1099.98,686.942 1100.54,686.942 1101.1,686.942 1101.66,686.942 1102.22,686.942 1102.77,686.942 1103.33,686.942 1103.89,686.942 1104.45,686.942 1105.01,686.942 1105.57,686.942 1106.13,686.942 1106.69,686.942 1107.25,686.942 1107.81,686.942 1108.37,686.942 1108.93,686.942 1109.49,686.942 1110.04,686.942 1110.6,686.942 1111.16,686.942 1111.72,686.942 1112.28,686.942 1112.84,686.942 1113.4,686.942 1113.96,686.942 1114.52,686.942 1115.08,686.942 1115.64,686.942 1116.2,686.942 1116.76,686.942 1117.31,686.942 1117.87,686.942 1118.43,686.942 1118.99,686.942 1119.55,686.942 1120.11,686.942 1120.67,686.942 1121.23,686.942 1121.79,686.942 1122.35,686.942 1122.91,686.942 1123.47,686.942 1124.03,686.942 1124.59,686.942 1125.14,686.942 1125.7,686.942 1126.26,686.942 1126.82,686.942 1127.38,686.942 1127.94,686.942 1128.5,686.942 1129.06,686.942 1129.62,686.942 1130.18,686.942 1130.74,686.942 1131.3,686.942 1131.86,686.942 1132.41,686.942 1132.97,686.942 1133.53,686.942 1134.09,686.942 1134.65,686.942 1135.21,686.942 1135.77,686.942 1136.33,686.942 1136.89,686.942 1137.45,686.942 1138.01,686.942 1138.57,686.942 1139.13,686.942 1139.68,686.942 1140.24,686.942 1140.8,686.942 1141.36,686.942 1141.92,686.942 1142.48,686.942 1143.04,686.942 1143.6,686.942 1144.16,686.942 1144.72,686.942 1145.28,686.942 1145.84,686.942 1146.4,686.942 1146.96,686.942 1147.51,686.942 1148.07,686.942 1148.63,686.942 1149.19,686.942 1149.75,686.942 1150.31,686.942 1150.87,686.942 1151.43,686.942 1151.99,686.942 1152.55,686.942 1153.11,686.942 1153.67,686.942 1154.23,686.942 1154.78,686.942 1155.34,686.942 1155.9,686.942 1156.46,686.942 1157.02,686.942 1157.58,686.942 1158.14,686.942 1158.7,686.942 1159.26,686.942 1159.82,686.942 1160.38,686.942 1160.94,686.942 1161.5,686.942 1162.05,686.942 1162.61,686.942 1163.17,686.942 1163.73,686.942 1164.29,686.942 1164.85,686.942 1165.41,686.942 1165.97,686.942 1166.53,686.942 1167.09,686.942 1167.65,686.942 1168.21,686.942 1168.77,686.942 1169.33,686.942 1169.88,686.942 1170.44,686.942 1171,686.942 1171.56,686.942 1172.12,686.942 1172.68,686.942 1173.24,686.942 1173.8,686.942 1174.36,686.942 1174.92,686.942 1175.48,686.942 1176.04,686.942 1176.6,686.942 1177.15,686.942 1177.71,686.942 1178.27,686.942 1178.83,686.942 1179.39,686.942 1179.95,686.942 1180.51,686.942 1181.07,686.942 1181.63,686.942 1182.19,686.942 1182.75,686.942 1183.31,686.942 1183.87,686.942 1184.43,686.942 1184.98,686.942 1185.54,686.942 1186.1,686.942 1186.66,686.942 1187.22,686.942 1187.78,686.942 1188.34,686.942 1188.9,686.942 1189.46,686.942 1190.02,686.942 1190.58,686.942 1191.14,686.942 1191.7,686.942 1192.25,686.942 1192.81,686.942 1193.37,686.942 1193.93,686.942 1194.49,686.942 1195.05,686.942 1195.61,686.942 1196.17,686.942 1196.73,686.942 1197.29,686.942 1197.85,686.942 1198.41,686.942 1198.97,686.942 1199.52,686.942 1200.08,686.942 1200.64,686.942 1201.2,686.942 1201.76,686.942 1202.32,686.942 1202.88,686.942 1203.44,686.942 1204,686.942 1204.56,686.942 1205.12,686.942 1205.68,686.942 1206.24,686.942 1206.8,686.942 1207.35,686.942 1207.91,686.942 1208.47,686.942 1209.03,686.942 1209.59,686.942 1210.15,686.942 1210.71,686.942 1211.27,686.942 1211.83,686.942 1212.39,686.942 1212.95,686.942 1213.51,686.942 1214.07,686.942 1214.62,686.942 1215.18,686.942 1215.74,686.942 1216.3,686.942 1216.86,686.942 1217.42,686.942 1217.98,686.942 1218.54,686.942 1219.1,686.942 1219.66,686.942 1220.22,686.942 1220.78,686.942 1221.34,686.942 1221.89,686.942 1222.45,686.942 1223.01,686.942 1223.57,686.942 1224.13,686.942 1224.69,686.942 1225.25,686.942 1225.81,686.942 1226.37,686.942 1226.93,686.942 1227.49,686.942 1228.05,686.942 1228.61,686.942 1229.17,686.942 1229.72,686.942 1230.28,686.942 1230.84,686.942 1231.4,686.942 1231.96,686.942 1232.52,686.942 1233.08,686.942 1233.64,686.942 1234.2,686.942 1234.76,686.942 1235.32,686.942 1235.88,686.942 1236.44,686.942 1236.99,686.942 1237.55,686.942 1238.11,686.942 1238.67,686.942 1239.23,686.942 1239.79,686.942 1240.35,686.942 1240.91,686.942 1241.47,686.942 1242.03,686.942 1242.59,686.942 1243.15,686.942 1243.71,686.942 1244.26,686.942 1244.82,686.942 1245.38,686.942 1245.94,686.942 1246.5,686.942 1247.06,686.942 1247.62,686.942 1248.18,686.942 1248.74,686.942 1249.3,686.942 1249.86,686.942 1250.42,686.942 1250.98,686.942 1251.54,686.942 1252.09,686.942 1252.65,686.942 1253.21,686.942 1253.77,686.942 1254.33,686.942 1254.89,686.942 1255.45,686.942 1256.01,686.942 1256.57,686.942 1257.13,686.942 1257.69,686.942 1258.25,686.942 1258.81,686.942 1259.36,686.942 1259.92,686.942 1260.48,686.942 1261.04,686.942 1261.6,686.942 1262.16,686.942 1262.72,686.942 1263.28,686.942 1263.84,686.942 1264.4,686.942 1264.96,686.942 1265.52,686.942 1266.08,686.942 1266.63,686.942 1267.19,686.942 1267.75,686.942 1268.31,686.942 1268.87,686.942 1269.43,686.942 1269.99,686.942 1270.55,686.942 1271.11,686.942 1271.67,686.942 1272.23,686.942 1272.79,686.942 1273.35,686.942 1273.91,686.942 1274.46,686.942 1275.02,686.942 1275.58,686.942 1276.14,686.942 1276.7,686.942 1277.26,686.942 1277.82,686.942 1278.38,686.942 1278.94,686.942 1279.5,686.942 1280.06,686.942 1280.62,686.942 1281.18,686.942 1281.73,686.942 1282.29,686.942 1282.85,686.942 1283.41,686.942 1283.97,686.942 1284.53,686.942 1285.09,686.942 1285.65,686.942 1286.21,686.942 1286.77,686.942 1287.33,686.942 1287.89,686.942 1288.45,686.942 1289,686.942 1289.56,686.942 1290.12,686.942 1290.68,686.942 1291.24,686.942 1291.8,686.942 1292.36,686.942 1292.92,686.942 1293.48,686.942 1294.04,686.942 1294.6,686.942 1295.16,686.942 1295.72,686.942 1296.28,686.942 1296.83,686.942 1297.39,686.942 1297.95,686.942 1298.51,686.942 1299.07,686.942 1299.63,686.942 1300.19,686.942 1300.75,686.942 1301.31,686.942 1301.87,686.942 1302.43,686.942 1302.99,686.942 1303.55,686.942 1304.1,686.942 1304.66,686.942 1305.22,686.942 1305.78,686.942 1306.34,686.942 1306.9,686.942 1307.46,686.942 1308.02,686.942 1308.58,686.942 1309.14,686.942 1309.7,686.942 1310.26,686.942 1310.82,686.942 1311.38,686.942 1311.93,686.942 1312.49,686.942 1313.05,686.942 1313.61,686.942 1314.17,686.942 1314.73,686.942 1315.29,686.942 1315.85,686.942 1316.41,686.942 1316.97,686.942 1317.53,686.942 1318.09,686.942 1318.65,686.942 1319.2,686.942 1319.76,686.942 1320.32,686.942 1320.88,686.942 1321.44,686.942 1322,686.942 1322.56,686.942 1323.12,686.942 1323.68,686.942 1324.24,686.942 1324.8,686.942 1325.36,686.942 1325.92,686.942 1326.47,686.942 1327.03,686.942 1327.59,686.942 1328.15,686.942 1328.71,686.942 1329.27,686.942 1329.83,686.942 1330.39,686.942 1330.95,686.942 1331.51,686.942 1332.07,686.942 1332.63,686.942 1333.19,686.942 1333.75,686.942 1334.3,686.942 1334.86,686.942 1335.42,686.942 1335.98,686.942 1336.54,686.942 1337.1,686.942 1337.66,686.942 1338.22,686.942 1338.78,686.942 1339.34,686.942 1339.9,686.942 1340.46,686.942 1341.02,686.942 1341.57,686.942 1342.13,686.942 1342.69,686.942 1343.25,686.942 1343.81,686.942 1344.37,686.942 1344.93,686.942 1345.49,686.942 1346.05,686.942 1346.61,686.942 1347.17,686.942 1347.73,686.942 1348.29,686.942 1348.84,686.942 1349.4,686.942 1349.96,686.942 1350.52,686.942 1351.08,686.942 1351.64,686.942 1352.2,686.942 1352.76,686.942 1353.32,686.942 1353.88,686.942 1354.44,686.942 1355,686.942 1355.56,686.942 1356.12,686.942 1356.67,686.942 1357.23,686.942 1357.79,686.942 1358.35,686.942 1358.91,686.942 1359.47,686.942 1360.03,686.942 1360.59,686.942 1361.15,686.942 1361.71,686.942 1362.27,686.942 1362.83,686.942 1363.39,686.942 1363.94,686.942 1364.5,686.942 1365.06,686.942 1365.62,686.942 1366.18,686.942 1366.74,686.942 1367.3,686.942 1367.86,686.942 1368.42,686.942 1368.98,686.942 1369.54,686.942 1370.1,686.942 1370.66,686.942 1371.21,686.942 1371.77,686.942 1372.33,686.942 1372.89,686.942 1373.45,686.942 1374.01,686.942 1374.57,686.942 1375.13,686.942 1375.69,686.942 1376.25,686.942 1376.81,686.942 1377.37,686.942 1377.93,686.942 1378.49,686.942 1379.04,686.942 1379.6,686.942 1380.16,686.942 1380.72,686.942 1381.28,686.942 1381.84,686.942 1382.4,686.942 1382.96,686.942 1383.52,686.942 1384.08,686.942 1384.64,686.942 1385.2,686.942 1385.76,686.942 1386.31,686.942 1386.87,686.942 1387.43,686.942 1387.99,686.942 1388.55,686.942 1389.11,686.942 1389.67,686.942 1390.23,686.942 1390.79,686.942 1391.35,686.942 1391.91,686.942 1392.47,686.942 1393.03,686.942 1393.58,686.942 1394.14,686.942 1394.7,686.942 1395.26,686.942 1395.82,686.942 1396.38,686.942 1396.94,686.942 1397.5,686.942 1398.06,686.942 1398.62,686.942 1399.18,686.942 1399.74,686.942 1400.3,686.942 1400.86,686.942 1401.41,686.942 1401.97,686.942 1402.53,686.942 1403.09,686.942 1403.65,686.942 1404.21,686.942 1404.77,686.942 1405.33,686.942 1405.89,686.942 1406.45,686.942 1407.01,686.942 1407.57,686.942 1408.13,686.942 1408.68,686.942 1409.24,686.942 1409.8,686.942 1410.36,686.942 1410.92,686.942 1411.48,686.942 1412.04,686.942 1412.6,686.942 1413.16,686.942 1413.72,686.942 1414.28,686.942 1414.84,686.942 1415.4,686.942 1415.95,686.942 1416.51,686.942 1417.07,686.942 1417.63,686.942 1418.19,686.942 1418.75,686.942 1419.31,686.942 1419.87,686.942 1420.43,686.942 1420.99,686.942 1421.55,686.942 1422.11,686.942 1422.67,686.942 1423.23,686.942 1423.78,686.942 1424.34,686.942 1424.9,686.942 1425.46,686.942 1426.02,686.942 1426.58,686.942 1427.14,686.942 1427.7,686.942 1428.26,686.942 1428.82,686.942 1429.38,686.942 1429.94,686.942 1430.5,686.942 1431.05,686.942 1431.61,686.942 1432.17,686.942 1432.73,686.942 1433.29,686.942 1433.85,686.942 1434.41,686.942 1434.97,686.942 1435.53,686.942 1436.09,686.942 1436.65,686.942 1437.21,686.942 1437.77,686.942 1438.33,686.942 1438.88,686.942 1439.44,686.942 1440,686.942 1440.56,686.942 1441.12,686.942 1441.68,686.942 1442.24,686.942 1442.8,686.942 1443.36,686.942 1443.92,686.942 1444.48,686.942 1445.04,686.942 1445.6,686.942 1446.15,686.942 1446.71,686.942 1447.27,686.942 1447.83,686.942 1448.39,686.942 1448.95,686.942 1449.51,686.942 1450.07,686.942 1450.63,686.942 1451.19,686.942 1451.75,686.942 1452.31,686.942 1452.87,686.942 1453.42,686.942 1453.98,686.942 1454.54,686.942 1455.1,686.942 1455.66,686.942 1456.22,686.942 1456.78,686.942 1457.34,686.942 1457.9,686.942 1458.46,686.942 1459.02,686.942 1459.58,686.942 1460.14,686.942 1460.7,686.942 1461.25,686.942 1461.81,686.942 1462.37,686.942 1462.93,686.942 1463.49,686.942 1464.05,686.942 1464.61,686.942 1465.17,686.942 1465.73,686.942 1466.29,686.942 1466.85,686.942 1467.41,686.942 1467.97,686.942 1468.52,686.942 1469.08,686.942 1469.64,686.942 1470.2,686.942 1470.76,686.942 1471.32,686.942 1471.88,686.942 1472.44,686.942 1473,686.942 1473.56,686.942 1474.12,686.942 1474.68,686.942 1475.24,686.942 1475.79,686.942 1476.35,686.942 1476.91,686.942 1477.47,686.942 1478.03,686.942 1478.59,686.942 1479.15,686.942 1479.71,686.942 1480.27,686.942 1480.83,686.942 1481.39,686.942 1481.95,686.942 1482.51,686.942 1483.07,686.942 1483.62,686.942 1484.18,686.942 1484.74,686.942 1485.3,686.942 1485.86,686.942 1486.42,686.942 1486.98,686.942 1487.54,686.942 1488.1,686.942 1488.66,686.942 1489.22,686.942 1489.78,686.942 1490.34,686.942 1490.89,686.942 1491.45,686.942 1492.01,686.942 1492.57,686.942 1493.13,686.942 1493.69,686.942 1494.25,686.942 1494.81,686.942 1495.37,686.942 1495.93,686.942 1496.49,686.942 1497.05,686.942 1497.61,686.942 1498.16,686.942 1498.72,686.942 1499.28,686.942 1499.84,686.942 1500.4,686.942 1500.96,686.942 1501.52,686.942 1502.08,686.942 1502.64,686.942 1503.2,686.942 1503.76,686.942 1504.32,686.942 1504.88,686.942 1505.44,686.942 1505.99,686.942 1506.55,686.942 1507.11,686.942 1507.67,686.942 1508.23,686.942 1508.79,686.942 1509.35,686.942 1509.91,686.942 1510.47,686.942 1511.03,686.942 1511.59,686.942 1512.15,686.942 1512.71,686.942 1513.26,686.942 1513.82,686.942 1514.38,686.942 1514.94,686.942 1515.5,686.942 1516.06,686.942 1516.62,686.942 1517.18,686.942 1517.74,686.942 1518.3,686.942 1518.86,686.942 1519.42,686.942 1519.98,686.942 1520.53,686.942 1521.09,686.942 1521.65,686.942 1522.21,686.942 1522.77,686.942 1523.33,686.942 1523.89,686.942 1524.45,686.942 1525.01,686.942 1525.57,686.942 1526.13,686.942 1526.69,686.942 1527.25,686.942 1527.81,686.942 1528.36,686.942 1528.92,686.942 1529.48,686.942 1530.04,686.942 1530.6,686.942 1531.16,686.942 1531.72,686.942 1532.28,686.942 1532.84,686.942 1533.4,686.942 1533.96,686.942 1534.52,686.942 1535.08,686.942 1535.63,686.942 1536.19,686.942 1536.75,686.942 1537.31,686.942 1537.87,686.942 1538.43,686.942 1538.99,686.942 1539.55,686.942 1540.11,686.942 1540.67,686.942 1541.23,686.942 1541.79,686.942 1542.35,686.942 1542.9,686.942 1543.46,686.942 1544.02,686.942 1544.58,686.942 1545.14,686.942 1545.7,686.942 1546.26,686.942 1546.82,686.942 1547.38,686.942 1547.94,686.942 1548.5,686.942 1549.06,686.942 1549.62,686.942 1550.18,686.942 1550.73,686.942 1551.29,686.942 1551.85,686.942 1552.41,686.942 1552.97,686.942 1553.53,686.942 1554.09,686.942 1554.65,686.942 1555.21,686.942 1555.77,686.942 1556.33,686.942 1556.89,686.942 1557.45,686.942 1558,686.942 1558.56,686.942 1559.12,686.942 1559.68,686.942 1560.24,686.942 1560.8,686.942 1561.36,686.942 1561.92,686.942 1562.48,686.942 1563.04,686.942 1563.6,686.942 1564.16,686.942 1564.72,686.942 1565.28,686.942 1565.83,686.942 1566.39,686.942 1566.95,686.942 1567.51,686.942 1568.07,686.942 1568.63,686.942 1569.19,686.942 1569.75,686.942 1570.31,686.942 1570.87,686.942 1571.43,686.942 1571.99,686.942 1572.55,686.942 1573.1,686.942 1573.66,686.942 1574.22,686.942 1574.78,686.942 1575.34,686.942 1575.9,686.942 1576.46,686.942 1577.02,686.942 1577.58,686.942 1578.14,686.942 1578.7,686.942 1579.26,686.942 1579.82,686.942 1580.37,686.942 1580.93,686.942 1581.49,686.942 1582.05,686.942 1582.61,686.942 1583.17,686.942 1583.73,686.942 1584.29,686.942 1584.85,686.942 1585.41,686.942 1585.97,686.942 1586.53,686.942 1587.09,686.942 1587.65,686.942 1588.2,686.942 1588.76,686.942 1589.32,686.942 1589.88,686.942 1590.44,686.942 1591,686.942 1591.56,686.942 1592.12,686.942 1592.68,686.942 1593.24,686.942 1593.8,686.942 1594.36,686.942 1594.92,686.942 1595.47,686.942 1596.03,686.942 1596.59,686.942 1597.15,686.942 1597.71,686.942 1598.27,686.942 1598.83,686.942 1599.39,686.942 1599.95,686.942 1600.51,686.942 1601.07,686.942 1601.63,686.942 1602.19,686.942 1602.74,686.942 1603.3,686.942 1603.86,686.942 1604.42,686.942 1604.98,686.942 1605.54,686.942 1606.1,686.942 1606.66,686.942 1607.22,686.942 1607.78,686.942 1608.34,686.942 1608.9,686.942 1609.46,686.942 1610.02,686.942 1610.57,686.942 1611.13,686.942 1611.69,686.942 1612.25,686.942 1612.81,686.942 1613.37,686.942 1613.93,686.942 1614.49,686.942 1615.05,686.942 1615.61,686.942 1616.17,686.942 1616.73,686.942 1617.29,686.942 1617.84,686.942 1618.4,686.942 1618.96,686.942 1619.52,686.942 1620.08,686.942 1620.64,686.942 1621.2,686.942 1621.76,686.942 1622.32,686.942 1622.88,686.942 1623.44,686.942 1624,686.942 1624.56,686.942 1625.11,686.942 1625.67,686.942 1626.23,686.942 1626.79,686.942 1627.35,686.942 1627.91,686.942 1628.47,686.942 1629.03,686.942 1629.59,686.942 1630.15,686.942 1630.71,686.942 1631.27,686.942 1631.83,686.942 1632.39,686.942 1632.94,686.942 1633.5,686.942 1634.06,686.942 1634.62,686.942 1635.18,686.942 1635.74,686.942 1636.3,686.942 1636.86,686.942 1637.42,686.942 1637.98,686.942 1638.54,686.942 1639.1,686.942 1639.66,686.942 1640.21,686.942 1640.77,686.942 1641.33,686.942 1641.89,686.942 1642.45,686.942 1643.01,686.942 1643.57,686.942 1644.13,686.942 1644.69,686.942 1645.25,686.942 1645.81,686.942 1646.37,686.942 1646.93,686.942 1647.48,686.942 1648.04,686.942 1648.6,686.942 1649.16,686.942 1649.72,686.942 1650.28,686.942 1650.84,686.942 1651.4,686.942 1651.96,686.942 1652.52,686.942 1653.08,686.942 1653.64,686.942 1654.2,686.942 1654.76,686.942 1655.31,686.942 1655.87,686.942 1656.43,686.942 1656.99,686.942 1657.55,686.942 1658.11,686.942 1658.67,686.942 1659.23,686.942 1659.79,686.942 1660.35,686.942 1660.91,686.942 1661.47,686.942 1662.03,686.942 1662.58,686.942 1663.14,686.942 1663.7,686.942 1664.26,686.942 1664.82,686.942 1665.38,686.942 1665.94,686.942 1666.5,686.942 1667.06,686.942 1667.62,686.942 1668.18,686.942 1668.74,686.942 1669.3,686.942 1669.85,686.942 1670.41,686.942 1670.97,686.942 1671.53,686.942 1672.09,686.942 1672.65,686.942 1673.21,686.942 1673.77,686.942 1674.33,686.942 1674.89,686.942 1675.45,686.942 1676.01,686.942 1676.57,686.942 1677.13,686.942 1677.68,686.942 1678.24,686.942 1678.8,686.942 1679.36,686.942 1679.92,686.942 1680.48,686.942 1681.04,686.942 1681.6,686.942 1682.16,686.942 1682.72,686.942 1683.28,686.942 1683.84,686.942 1684.4,686.942 1684.95,686.942 1685.51,686.942 1686.07,686.942 1686.63,686.942 1687.19,686.942 1687.75,686.942 1688.31,686.942 1688.87,686.942 1689.43,686.942 1689.99,686.942 1690.55,686.942 1691.11,686.942 1691.67,686.942 1692.23,686.942 1692.78,686.942 1693.34,686.942 1693.9,686.942 1694.46,686.942 1695.02,686.942 1695.58,686.942 1696.14,686.942 1696.7,686.942 1697.26,686.942 1697.82,686.942 1698.38,686.942 1698.94,686.942 1699.5,686.942 1700.05,686.942 1700.61,686.942 1701.17,686.942 1701.73,686.942 1702.29,686.942 1702.85,686.942 1703.41,686.942 1703.97,686.942 1704.53,686.942 1705.09,686.942 1705.65,686.942 1706.21,686.942 1706.77,686.942 1707.32,686.942 1707.88,686.942 1708.44,686.942 1709,686.942 1709.56,686.942 1710.12,686.942 1710.68,686.942 1711.24,686.942 1711.8,686.942 1712.36,686.942 1712.92,686.942 1713.48,686.942 1714.04,686.942 1714.6,686.942 1715.15,686.942 1715.71,686.942 1716.27,686.942 1716.83,686.942 1717.39,686.942 1717.95,686.942 1718.51,686.942 1719.07,686.942 1719.63,686.942 1720.19,686.942 1720.75,686.942 1721.31,686.942 1721.87,686.942 1722.42,686.942 1722.98,686.942 1723.54,686.942 1724.1,686.942 1724.66,686.942 1725.22,686.942 1725.78,686.942 1726.34,686.942 1726.9,686.942 1727.46,686.942 1728.02,686.942 1728.58,686.942 1729.14,686.942 1729.69,686.942 1730.25,686.942 1730.81,686.942 1731.37,686.942 1731.93,686.942 1732.49,686.942 1733.05,686.942 1733.61,686.942 1734.17,686.942 1734.73,686.942 1735.29,686.942 1735.85,686.942 1736.41,686.942 1736.97,686.942 1737.52,686.942 1738.08,686.942 1738.64,686.942 1739.2,686.942 1739.76,686.942 1740.32,686.942 1740.88,686.942 1741.44,686.942 1742,686.942 1742.56,686.942 1743.12,686.942 1743.68,686.942 1744.24,686.942 1744.79,686.942 1745.35,686.942 1745.91,686.942 1746.47,686.942 1747.03,686.942 1747.59,686.942 1748.15,686.942 1748.71,686.942 1749.27,686.942 1749.83,686.942 1750.39,686.942 1750.95,686.942 1751.51,686.942 1752.06,686.942 1752.62,686.942 1753.18,686.942 1753.74,686.942 1754.3,686.942 1754.86,686.942 1755.42,686.942 1755.98,686.942 1756.54,686.942 1757.1,686.942 1757.66,686.942 1758.22,686.942 1758.78,686.942 1759.34,686.942 1759.89,686.942 1760.45,686.942 1761.01,686.942 1761.57,686.942 1762.13,686.942 1762.69,686.942 1763.25,686.942 1763.81,686.942 1764.37,686.942 1764.93,686.942 1765.49,686.942 1766.05,686.942 1766.61,686.942 1767.16,686.942 1767.72,686.942 1768.28,686.942 1768.84,686.942 1769.4,686.942 1769.96,686.942 1770.52,686.942 1771.08,686.942 1771.64,686.942 1772.2,686.942 1772.76,686.942 1773.32,686.942 1773.88,686.942 1774.43,686.942 1774.99,686.942 1775.55,686.942 1776.11,686.942 1776.67,686.942 1777.23,686.942 1777.79,686.942 1778.35,686.942 1778.91,686.942 1779.47,686.942 1780.03,686.942 1780.59,686.942 1781.15,686.942 1781.71,686.942 1782.26,686.942 1782.82,686.942 1783.38,686.942 1783.94,686.942 1784.5,686.942 1785.06,686.942 1785.62,686.942 1786.18,686.942 1786.74,686.942 1787.3,686.942 1787.86,686.942 1788.42,686.942 1788.98,686.942 1789.53,686.942 1790.09,686.942 1790.65,686.942 1791.21,686.942 1791.77,686.942 1792.33,686.942 1792.89,686.942 1793.45,686.942 1794.01,686.942 1794.57,686.942 1795.13,686.942 1795.69,686.942 1796.25,686.942 1796.8,686.942 1797.36,686.942 1797.92,686.942 1798.48,686.942 1799.04,686.942 1799.6,686.942 1800.16,686.942 1800.72,686.942 1801.28,686.942 1801.84,686.942 1802.4,686.942 1802.96,686.942 1803.52,686.942 1804.08,686.942 1804.63,686.942 1805.19,686.942 1805.75,686.942 1806.31,686.942 1806.87,686.942 1807.43,686.942 1807.99,686.942 1808.55,686.942 1809.11,686.942 1809.67,686.942 1810.23,686.942 1810.79,686.942 1811.35,686.942 1811.9,686.942 1812.46,686.942 1813.02,686.942 1813.58,686.942 1814.14,686.942 1814.7,686.942 1815.26,686.942 1815.82,686.942 1816.38,686.942 1816.94,686.942 1817.5,686.942 1818.06,686.942 1818.62,686.942 1819.18,686.942 1819.73,686.942 1820.29,686.942 1820.85,686.942 1821.41,686.942 1821.97,686.942 1822.53,686.942 1823.09,686.942 1823.65,686.942 1824.21,686.942 1824.77,686.942 1825.33,686.942 1825.89,686.942 1826.45,686.942 1827,686.942 1827.56,686.942 1828.12,686.942 1828.68,686.942 1829.24,686.942 1829.8,686.942 1830.36,686.942 1830.92,686.942 1831.48,686.942 1832.04,686.942 1832.6,686.942 1833.16,686.942 1833.72,686.942 1834.27,686.942 1834.83,686.942 1835.39,686.942 1835.95,686.942 1836.51,686.942 1837.07,686.942 1837.63,686.942 1838.19,686.942 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 684.603 L720.806 684.603 L721.365 684.603 L721.924 684.603 L722.484 684.603 L723.043 684.603 L723.602 684.603 L724.161 684.603 L724.721 684.603 L725.28 684.603 L725.839 684.603 L726.398 684.603 L726.958 684.603 L727.517 684.603 L728.076 684.603 L728.635 684.603 L729.195 684.603 L729.754 684.603 L730.313 684.603 L730.872 684.603 L731.432 684.603 L731.991 684.603 L732.55 684.603 L733.109 684.603 L733.669 684.603 L734.228 684.603 L734.787 684.603 L735.346 684.603 L735.906 684.603 L736.465 684.603 L737.024 684.603 L737.583 684.603 L738.143 684.603 L738.702 684.603 L739.261 684.603 L739.82 684.603 L740.38 684.603 L740.939 684.603 L741.498 684.603 L742.057 684.603 L742.617 684.603 L743.176 684.603 L743.735 684.603 L744.294 684.603 L744.854 684.603 L745.413 684.603 L745.972 684.603 L746.531 684.603 L747.091 684.603 L747.65 684.603 L748.209 684.603 L748.768 684.603 L749.328 684.603 L749.887 684.603 L750.446 684.603 L751.005 684.603 L751.565 684.603 L752.124 684.603 L752.683 684.603 L753.242 684.603 L753.802 684.603 L754.361 684.603 L754.92 684.603 L755.479 684.603 L756.039 684.603 L756.598 684.603 L757.157 684.603 L757.716 684.603 L758.276 684.603 L758.835 684.603 L759.394 684.603 L759.953 684.603 L760.513 684.603 L761.072 684.603 L761.631 684.603 L762.19 684.603 L762.75 684.603 L763.309 684.603 L763.868 684.603 L764.427 684.603 L764.987 684.603 L765.546 684.603 L766.105 684.603 L766.664 684.603 L767.224 684.603 L767.783 684.603 L768.342 684.603 L768.901 684.603 L769.461 684.603 L770.02 684.603 L770.579 684.603 L771.138 684.603 L771.698 684.603 L772.257 684.603 L772.816 684.603 L773.375 684.603 L773.935 684.603 L774.494 684.603 L775.053 684.603 L775.612 684.603 L776.172 684.603 L776.731 684.603 L777.29 684.603 L777.849 684.603 L778.409 684.603 L778.968 684.603 L779.527 684.603 L780.086 684.603 L780.646 684.603 L781.205 684.603 L781.764 684.603 L782.323 684.603 L782.883 684.603 L783.442 684.603 L784.001 684.603 L784.56 684.603 L785.12 684.603 L785.679 684.603 L786.238 684.603 L786.797 684.603 L787.357 684.603 L787.916 684.603 L788.475 684.603 L789.034 684.603 L789.594 684.603 L790.153 684.603 L790.712 684.603 L791.271 684.603 L791.831 684.603 L792.39 684.603 L792.949 684.603 L793.508 684.603 L794.068 684.603 L794.627 684.603 L795.186 684.603 L795.745 684.603 L796.305 684.603 L796.864 684.603 L797.423 684.603 L797.982 684.603 L798.542 684.603 L799.101 684.603 L799.66 684.603 L800.219 684.603 L800.779 684.603 L801.338 684.603 L801.897 684.603 L802.456 684.603 L803.016 684.603 L803.575 684.603 L804.134 684.603 L804.693 684.603 L805.253 684.603 L805.812 684.603 L806.371 684.603 L806.931 684.603 L807.49 684.603 L808.049 684.603 L808.608 684.603 L809.168 684.603 L809.727 684.603 L810.286 684.603 L810.845 684.603 L811.405 684.603 L811.964 684.603 L812.523 684.603 L813.082 684.603 L813.642 684.603 L814.201 684.603 L814.76 684.603 L815.319 684.603 L815.879 684.603 L816.438 684.603 L816.997 684.603 L817.556 684.603 L818.116 684.603 L818.675 684.603 L819.234 684.603 L819.793 684.603 L820.353 684.603 L820.912 684.603 L821.471 684.603 L822.03 684.603 L822.59 684.603 L823.149 684.603 L823.708 684.603 L824.267 684.603 L824.827 684.603 L825.386 684.603 L825.945 684.603 L826.504 684.603 L827.064 684.603 L827.623 684.603 L828.182 684.603 L828.741 684.603 L829.301 684.603 L829.86 684.603 L830.419 684.603 L830.978 684.603 L831.538 684.603 L832.097 684.603 L832.656 684.603 L833.215 684.603 L833.775 684.603 L834.334 684.603 L834.893 684.603 L835.452 684.603 L836.012 684.603 L836.571 684.603 L837.13 684.603 L837.689 684.603 L838.249 684.603 L838.808 684.603 L839.367 684.603 L839.926 684.603 L840.486 684.603 L841.045 684.603 L841.604 684.603 L842.163 684.603 L842.723 684.603 L843.282 684.603 L843.841 684.603 L844.4 684.603 L844.96 684.603 L845.519 684.603 L846.078 684.603 L846.637 684.603 L847.197 684.603 L847.756 684.603 L848.315 684.603 L848.874 684.603 L849.434 684.603 L849.993 684.603 L850.552 684.603 L851.111 684.603 L851.671 684.603 L852.23 684.603 L852.789 684.603 L853.348 684.603 L853.908 684.603 L854.467 684.603 L855.026 684.603 L855.585 684.603 L856.145 684.603 L856.704 684.603 L857.263 684.603 L857.822 684.603 L858.382 684.603 L858.941 684.603 L859.5 684.603 L860.059 684.603 L860.619 684.603 L861.178 684.603 L861.737 684.603 L862.296 684.603 L862.856 684.603 L863.415 684.603 L863.974 684.603 L864.533 684.603 L865.093 684.603 L865.652 684.603 L866.211 684.603 L866.77 684.603 L867.33 684.603 L867.889 684.603 L868.448 684.603 L869.007 684.603 L869.567 684.603 L870.126 684.603 L870.685 684.603 L871.244 684.603 L871.804 684.603 L872.363 684.603 L872.922 684.603 L873.481 684.603 L874.041 684.603 L874.6 684.603 L875.159 684.603 L875.718 684.603 L876.278 684.603 L876.837 684.603 L877.396 684.603 L877.955 684.603 L878.515 684.603 L879.074 684.603 L879.633 684.603 L880.192 684.603 L880.752 684.603 L881.311 684.603 L881.87 684.603 L882.429 684.603 L882.989 684.603 L883.548 684.603 L884.107 684.603 L884.666 684.603 L885.226 684.603 L885.785 684.603 L886.344 684.603 L886.903 684.603 L887.463 684.603 L888.022 684.603 L888.581 684.603 L889.14 684.603 L889.7 684.603 L890.259 684.603 L890.818 684.603 L891.377 684.603 L891.937 684.603 L892.496 684.603 L893.055 684.603 L893.614 684.603 L894.174 684.603 L894.733 684.603 L895.292 684.603 L895.851 684.603 L896.411 684.603 L896.97 684.603 L897.529 684.603 L898.088 684.603 L898.648 684.603 L899.207 684.603 L899.766 684.603 L900.325 684.603 L900.885 684.603 L901.444 684.603 L902.003 684.603 L902.562 684.603 L903.122 684.603 L903.681 684.603 L904.24 684.603 L904.799 684.603 L905.359 684.603 L905.918 684.603 L906.477 684.603 L907.036 684.603 L907.596 684.603 L908.155 684.603 L908.714 684.603 L909.273 684.603 L909.833 684.603 L910.392 684.603 L910.951 684.603 L911.51 684.603 L912.07 684.603 L912.629 684.603 L913.188 684.603 L913.747 684.603 L914.307 684.603 L914.866 684.603 L915.425 684.603 L915.984 684.603 L916.544 684.603 L917.103 684.603 L917.662 684.603 L918.221 684.603 L918.781 684.603 L919.34 684.603 L919.899 684.603 L920.458 684.603 L921.018 684.603 L921.577 684.603 L922.136 684.603 L922.695 684.603 L923.255 684.603 L923.814 684.603 L924.373 684.603 L924.932 684.603 L925.492 684.603 L926.051 684.603 L926.61 684.603 L927.169 684.603 L927.729 684.603 L928.288 684.603 L928.847 684.603 L929.406 684.603 L929.966 684.603 L930.525 684.603 L931.084 684.603 L931.644 684.603 L932.203 684.603 L932.762 684.603 L933.321 684.603 L933.881 684.603 L934.44 684.603 L934.999 684.603 L935.558 684.603 L936.118 684.603 L936.677 684.603 L937.236 684.603 L937.795 684.603 L938.355 684.603 L938.914 684.603 L939.473 684.603 L940.032 684.603 L940.592 684.603 L941.151 684.603 L941.71 684.603 L942.269 684.603 L942.829 684.603 L943.388 684.603 L943.947 684.603 L944.506 684.603 L945.066 684.603 L945.625 684.603 L946.184 684.603 L946.743 684.603 L947.303 684.603 L947.862 684.603 L948.421 684.603 L948.98 684.603 L949.54 684.603 L950.099 684.603 L950.658 684.603 L951.217 684.603 L951.777 684.603 L952.336 684.603 L952.895 684.603 L953.454 684.603 L954.014 684.603 L954.573 684.603 L955.132 684.603 L955.691 684.603 L956.251 684.603 L956.81 684.603 L957.369 684.603 L957.928 684.603 L958.488 684.603 L959.047 684.603 L959.606 684.603 L960.165 684.603 L960.725 684.603 L961.284 684.603 L961.843 684.603 L962.402 684.603 L962.962 684.603 L963.521 684.603 L964.08 684.603 L964.639 684.603 L965.199 684.603 L965.758 684.603 L966.317 684.603 L966.876 684.603 L967.436 684.603 L967.995 684.603 L968.554 684.603 L969.113 684.603 L969.673 684.603 L970.232 684.603 L970.791 684.603 L971.35 684.603 L971.91 684.603 L972.469 684.603 L973.028 684.603 L973.587 684.603 L974.147 684.603 L974.706 684.603 L975.265 684.603 L975.824 684.603 L976.384 684.603 L976.943 684.603 L977.502 684.603 L978.061 684.603 L978.621 684.603 L979.18 684.603 L979.739 684.603 L980.298 684.603 L980.858 684.603 L981.417 684.603 L981.976 684.603 L982.535 684.603 L983.095 684.603 L983.654 684.603 L984.213 684.603 L984.772 684.603 L985.332 684.603 L985.891 684.603 L986.45 684.603 L987.009 684.603 L987.569 684.603 L988.128 684.603 L988.687 684.603 L989.246 684.603 L989.806 684.603 L990.365 684.603 L990.924 684.603 L991.483 684.603 L992.043 684.603 L992.602 684.603 L993.161 684.603 L993.72 684.603 L994.28 684.603 L994.839 684.603 L995.398 684.603 L995.957 684.603 L996.517 684.603 L997.076 684.603 L997.635 684.603 L998.194 684.603 L998.754 684.603 L999.313 684.603 L999.872 684.603 L1000.43 684.603 L1000.99 684.603 L1001.55 684.603 L1002.11 684.603 L1002.67 684.603 L1003.23 684.603 L1003.79 684.603 L1004.35 684.603 L1004.91 684.603 L1005.46 684.603 L1006.02 684.603 L1006.58 684.603 L1007.14 684.603 L1007.7 684.603 L1008.26 684.603 L1008.82 684.603 L1009.38 684.603 L1009.94 684.603 L1010.5 684.603 L1011.06 684.603 L1011.62 684.603 L1012.18 684.603 L1012.73 684.603 L1013.29 684.603 L1013.85 684.603 L1014.41 684.603 L1014.97 684.603 L1015.53 684.603 L1016.09 684.603 L1016.65 684.603 L1017.21 684.603 L1017.77 684.603 L1018.33 684.603 L1018.89 684.603 L1019.45 684.603 L1020.01 684.603 L1020.56 684.603 L1021.12 684.603 L1021.68 684.603 L1022.24 684.603 L1022.8 684.603 L1023.36 684.603 L1023.92 684.603 L1024.48 684.603 L1025.04 684.603 L1025.6 684.603 L1026.16 684.603 L1026.72 684.603 L1027.28 684.603 L1027.83 684.603 L1028.39 684.603 L1028.95 684.603 L1029.51 684.603 L1030.07 684.603 L1030.63 684.603 L1031.19 684.603 L1031.75 684.603 L1032.31 684.603 L1032.87 684.603 L1033.43 684.603 L1033.99 684.603 L1034.55 684.603 L1035.1 684.603 L1035.66 684.603 L1036.22 684.603 L1036.78 684.603 L1037.34 684.603 L1037.9 684.603 L1038.46 684.603 L1039.02 684.603 L1039.58 684.603 L1040.14 684.603 L1040.7 684.603 L1041.26 684.603 L1041.82 684.603 L1042.38 684.603 L1042.93 684.603 L1043.49 684.603 L1044.05 684.603 L1044.61 684.603 L1045.17 684.603 L1045.73 684.603 L1046.29 684.603 L1046.85 684.603 L1047.41 684.603 L1047.97 684.603 L1048.53 684.603 L1049.09 684.603 L1049.65 684.603 L1050.2 684.603 L1050.76 684.603 L1051.32 684.603 L1051.88 684.603 L1052.44 684.603 L1053 684.603 L1053.56 684.603 L1054.12 684.603 L1054.68 684.603 L1055.24 684.603 L1055.8 684.603 L1056.36 684.603 L1056.92 684.603 L1057.48 684.603 L1058.03 684.603 L1058.59 684.603 L1059.15 684.603 L1059.71 684.603 L1060.27 684.603 L1060.83 684.603 L1061.39 684.603 L1061.95 684.603 L1062.51 684.603 L1063.07 684.603 L1063.63 684.603 L1064.19 684.603 L1064.75 684.603 L1065.3 684.603 L1065.86 684.603 L1066.42 684.603 L1066.98 684.603 L1067.54 684.603 L1068.1 684.603 L1068.66 684.603 L1069.22 684.603 L1069.78 684.603 L1070.34 684.603 L1070.9 684.603 L1071.46 684.603 L1072.02 684.603 L1072.57 684.603 L1073.13 684.603 L1073.69 684.603 L1074.25 684.603 L1074.81 684.603 L1075.37 684.603 L1075.93 684.603 L1076.49 684.603 L1077.05 684.603 L1077.61 684.603 L1078.17 684.603 L1078.73 684.603 L1079.29 684.603 L1079.85 684.603 L1080.4 684.603 L1080.96 684.603 L1081.52 684.603 L1082.08 684.603 L1082.64 684.603 L1083.2 684.603 L1083.76 684.603 L1084.32 684.603 L1084.88 684.603 L1085.44 684.603 L1086 684.603 L1086.56 684.603 L1087.12 684.603 L1087.67 684.603 L1088.23 684.603 L1088.79 684.603 L1089.35 684.603 L1089.91 684.603 L1090.47 684.603 L1091.03 684.603 L1091.59 684.603 L1092.15 684.603 L1092.71 684.603 L1093.27 684.603 L1093.83 684.603 L1094.39 684.603 L1094.94 684.603 L1095.5 684.603 L1096.06 684.603 L1096.62 684.603 L1097.18 684.603 L1097.74 684.603 L1098.3 684.603 L1098.86 684.603 L1099.42 684.603 L1099.98 684.603 L1100.54 684.603 L1101.1 684.603 L1101.66 684.603 L1102.22 684.603 L1102.77 684.603 L1103.33 684.603 L1103.89 684.603 L1104.45 684.603 L1105.01 684.603 L1105.57 684.603 L1106.13 684.603 L1106.69 684.603 L1107.25 684.603 L1107.81 684.603 L1108.37 684.603 L1108.93 684.603 L1109.49 684.603 L1110.04 684.603 L1110.6 684.603 L1111.16 684.603 L1111.72 684.603 L1112.28 684.603 L1112.84 684.603 L1113.4 684.603 L1113.96 684.603 L1114.52 684.603 L1115.08 684.603 L1115.64 684.603 L1116.2 684.603 L1116.76 684.603 L1117.31 684.603 L1117.87 684.603 L1118.43 684.603 L1118.99 684.603 L1119.55 684.603 L1120.11 684.603 L1120.67 684.603 L1121.23 684.603 L1121.79 684.603 L1122.35 684.603 L1122.91 684.603 L1123.47 684.603 L1124.03 684.603 L1124.59 684.603 L1125.14 684.603 L1125.7 684.603 L1126.26 684.603 L1126.82 684.603 L1127.38 684.603 L1127.94 684.603 L1128.5 684.603 L1129.06 684.603 L1129.62 684.603 L1130.18 684.603 L1130.74 684.603 L1131.3 684.603 L1131.86 684.603 L1132.41 684.603 L1132.97 684.603 L1133.53 684.603 L1134.09 684.603 L1134.65 684.603 L1135.21 684.603 L1135.77 684.603 L1136.33 684.603 L1136.89 684.603 L1137.45 684.603 L1138.01 684.603 L1138.57 684.603 L1139.13 684.603 L1139.68 684.603 L1140.24 684.603 L1140.8 684.603 L1141.36 684.603 L1141.92 684.603 L1142.48 684.603 L1143.04 684.603 L1143.6 684.603 L1144.16 684.603 L1144.72 684.603 L1145.28 684.603 L1145.84 684.603 L1146.4 684.603 L1146.96 684.603 L1147.51 684.603 L1148.07 684.603 L1148.63 684.603 L1149.19 684.603 L1149.75 684.603 L1150.31 684.603 L1150.87 684.603 L1151.43 684.603 L1151.99 684.603 L1152.55 684.603 L1153.11 684.603 L1153.67 684.603 L1154.23 684.603 L1154.78 684.603 L1155.34 684.603 L1155.9 684.603 L1156.46 684.603 L1157.02 684.603 L1157.58 684.603 L1158.14 684.603 L1158.7 684.603 L1159.26 684.603 L1159.82 684.603 L1160.38 684.603 L1160.94 684.603 L1161.5 684.603 L1162.05 684.603 L1162.61 684.603 L1163.17 684.603 L1163.73 684.603 L1164.29 684.603 L1164.85 684.603 L1165.41 684.603 L1165.97 684.603 L1166.53 684.603 L1167.09 684.603 L1167.65 684.603 L1168.21 684.603 L1168.77 684.603 L1169.33 684.603 L1169.88 684.603 L1170.44 684.603 L1171 684.603 L1171.56 684.603 L1172.12 684.603 L1172.68 684.603 L1173.24 684.603 L1173.8 684.603 L1174.36 684.603 L1174.92 684.603 L1175.48 684.603 L1176.04 684.603 L1176.6 684.603 L1177.15 684.603 L1177.71 684.603 L1178.27 684.603 L1178.83 684.603 L1179.39 684.603 L1179.95 684.603 L1180.51 684.603 L1181.07 684.603 L1181.63 684.603 L1182.19 684.603 L1182.75 684.603 L1183.31 684.603 L1183.87 684.603 L1184.43 684.603 L1184.98 684.603 L1185.54 684.603 L1186.1 684.603 L1186.66 684.603 L1187.22 684.603 L1187.78 684.603 L1188.34 684.603 L1188.9 684.603 L1189.46 684.603 L1190.02 684.603 L1190.58 684.603 L1191.14 684.603 L1191.7 684.603 L1192.25 684.603 L1192.81 684.603 L1193.37 684.603 L1193.93 684.603 L1194.49 684.603 L1195.05 684.603 L1195.61 684.603 L1196.17 684.603 L1196.73 684.603 L1197.29 684.603 L1197.85 684.603 L1198.41 684.603 L1198.97 684.603 L1199.52 684.603 L1200.08 684.603 L1200.64 684.603 L1201.2 684.603 L1201.76 684.603 L1202.32 684.603 L1202.88 684.603 L1203.44 684.603 L1204 684.603 L1204.56 684.603 L1205.12 684.603 L1205.68 684.603 L1206.24 684.603 L1206.8 684.603 L1207.35 684.603 L1207.91 684.603 L1208.47 684.603 L1209.03 684.603 L1209.59 684.603 L1210.15 684.603 L1210.71 684.603 L1211.27 684.603 L1211.83 684.603 L1212.39 684.603 L1212.95 684.603 L1213.51 684.603 L1214.07 684.603 L1214.62 684.603 L1215.18 684.603 L1215.74 684.603 L1216.3 684.603 L1216.86 684.603 L1217.42 684.603 L1217.98 684.603 L1218.54 684.603 L1219.1 684.603 L1219.66 684.603 L1220.22 684.603 L1220.78 684.603 L1221.34 684.603 L1221.89 684.603 L1222.45 684.603 L1223.01 684.603 L1223.57 684.603 L1224.13 684.603 L1224.69 684.603 L1225.25 684.603 L1225.81 684.603 L1226.37 684.603 L1226.93 684.603 L1227.49 684.603 L1228.05 684.603 L1228.61 684.603 L1229.17 684.603 L1229.72 684.603 L1230.28 684.603 L1230.84 684.603 L1231.4 684.603 L1231.96 684.603 L1232.52 684.603 L1233.08 684.603 L1233.64 684.603 L1234.2 684.603 L1234.76 684.603 L1235.32 684.603 L1235.88 684.603 L1236.44 684.603 L1236.99 684.603 L1237.55 684.603 L1238.11 684.603 L1238.67 684.603 L1239.23 684.603 L1239.79 684.603 L1240.35 684.603 L1240.91 684.603 L1241.47 684.603 L1242.03 684.603 L1242.59 684.603 L1243.15 684.603 L1243.71 684.603 L1244.26 684.603 L1244.82 684.603 L1245.38 684.603 L1245.94 684.603 L1246.5 684.603 L1247.06 684.603 L1247.62 684.603 L1248.18 684.603 L1248.74 684.603 L1249.3 684.603 L1249.86 684.603 L1250.42 684.603 L1250.98 684.603 L1251.54 684.603 L1252.09 684.603 L1252.65 684.603 L1253.21 684.603 L1253.77 684.603 L1254.33 684.603 L1254.89 684.603 L1255.45 684.603 L1256.01 684.603 L1256.57 684.603 L1257.13 684.603 L1257.69 684.603 L1258.25 684.603 L1258.81 684.603 L1259.36 684.603 L1259.92 684.603 L1260.48 684.603 L1261.04 684.603 L1261.6 684.603 L1262.16 684.603 L1262.72 684.603 L1263.28 684.603 L1263.84 684.603 L1264.4 684.603 L1264.96 684.603 L1265.52 684.603 L1266.08 684.603 L1266.63 684.603 L1267.19 684.603 L1267.75 684.603 L1268.31 684.603 L1268.87 684.603 L1269.43 684.603 L1269.99 684.603 L1270.55 684.603 L1271.11 684.603 L1271.67 684.603 L1272.23 684.603 L1272.79 684.603 L1273.35 684.603 L1273.91 684.603 L1274.46 684.603 L1275.02 684.603 L1275.58 684.603 L1276.14 684.603 L1276.7 684.603 L1277.26 684.603 L1277.82 684.603 L1278.38 684.603 L1278.94 684.603 L1279.5 684.603 L1280.06 684.603 L1280.62 684.603 L1281.18 684.603 L1281.73 684.603 L1282.29 684.603 L1282.85 684.603 L1283.41 684.603 L1283.97 684.603 L1284.53 684.603 L1285.09 684.603 L1285.65 684.603 L1286.21 684.603 L1286.77 684.603 L1287.33 684.603 L1287.89 684.603 L1288.45 684.603 L1289 684.603 L1289.56 684.603 L1290.12 684.603 L1290.68 684.603 L1291.24 684.603 L1291.8 684.603 L1292.36 684.603 L1292.92 684.603 L1293.48 684.603 L1294.04 684.603 L1294.6 684.603 L1295.16 684.603 L1295.72 684.603 L1296.28 684.603 L1296.83 684.603 L1297.39 684.603 L1297.95 684.603 L1298.51 684.603 L1299.07 684.603 L1299.63 684.603 L1300.19 684.603 L1300.75 684.603 L1301.31 684.603 L1301.87 684.603 L1302.43 684.603 L1302.99 684.603 L1303.55 684.603 L1304.1 684.603 L1304.66 684.603 L1305.22 684.603 L1305.78 684.603 L1306.34 684.603 L1306.9 684.603 L1307.46 684.603 L1308.02 684.603 L1308.58 684.603 L1309.14 684.603 L1309.7 684.603 L1310.26 684.603 L1310.82 684.603 L1311.38 684.603 L1311.93 684.603 L1312.49 684.603 L1313.05 684.603 L1313.61 684.603 L1314.17 684.603 L1314.73 684.603 L1315.29 684.603 L1315.85 684.603 L1316.41 684.603 L1316.97 684.603 L1317.53 684.603 L1318.09 684.603 L1318.65 684.603 L1319.2 684.603 L1319.76 684.603 L1320.32 684.603 L1320.88 684.603 L1321.44 684.603 L1322 684.603 L1322.56 684.603 L1323.12 684.603 L1323.68 684.603 L1324.24 684.603 L1324.8 684.603 L1325.36 684.603 L1325.92 684.603 L1326.47 684.603 L1327.03 684.603 L1327.59 684.603 L1328.15 684.603 L1328.71 684.603 L1329.27 684.603 L1329.83 684.603 L1330.39 684.603 L1330.95 684.603 L1331.51 684.603 L1332.07 684.603 L1332.63 684.603 L1333.19 684.603 L1333.75 684.603 L1334.3 684.603 L1334.86 684.603 L1335.42 684.603 L1335.98 684.603 L1336.54 684.603 L1337.1 684.603 L1337.66 684.603 L1338.22 684.603 L1338.78 684.603 L1339.34 684.603 L1339.9 684.603 L1340.46 684.603 L1341.02 684.603 L1341.57 684.603 L1342.13 684.603 L1342.69 684.603 L1343.25 684.603 L1343.81 684.603 L1344.37 684.603 L1344.93 684.603 L1345.49 684.603 L1346.05 684.603 L1346.61 684.603 L1347.17 684.603 L1347.73 684.603 L1348.29 684.603 L1348.84 684.603 L1349.4 684.603 L1349.96 684.603 L1350.52 684.603 L1351.08 684.603 L1351.64 684.603 L1352.2 684.603 L1352.76 684.603 L1353.32 684.603 L1353.88 684.603 L1354.44 684.603 L1355 684.603 L1355.56 684.603 L1356.12 684.603 L1356.67 684.603 L1357.23 684.603 L1357.79 684.603 L1358.35 684.603 L1358.91 684.603 L1359.47 684.603 L1360.03 684.603 L1360.59 684.603 L1361.15 684.603 L1361.71 684.603 L1362.27 684.603 L1362.83 684.603 L1363.39 684.603 L1363.94 684.603 L1364.5 684.603 L1365.06 684.603 L1365.62 684.603 L1366.18 684.603 L1366.74 684.603 L1367.3 684.603 L1367.86 684.603 L1368.42 684.603 L1368.98 684.603 L1369.54 684.603 L1370.1 684.603 L1370.66 684.603 L1371.21 684.603 L1371.77 684.603 L1372.33 684.603 L1372.89 684.603 L1373.45 684.603 L1374.01 684.603 L1374.57 684.603 L1375.13 684.603 L1375.69 684.603 L1376.25 684.603 L1376.81 684.603 L1377.37 684.603 L1377.93 684.603 L1378.49 684.603 L1379.04 684.603 L1379.6 684.603 L1380.16 684.603 L1380.72 684.603 L1381.28 684.603 L1381.84 684.603 L1382.4 684.603 L1382.96 684.603 L1383.52 684.603 L1384.08 684.603 L1384.64 684.603 L1385.2 684.603 L1385.76 684.603 L1386.31 684.603 L1386.87 684.603 L1387.43 684.603 L1387.99 684.603 L1388.55 684.603 L1389.11 684.603 L1389.67 684.603 L1390.23 684.603 L1390.79 684.603 L1391.35 684.603 L1391.91 684.603 L1392.47 684.603 L1393.03 684.603 L1393.58 684.603 L1394.14 684.603 L1394.7 684.603 L1395.26 684.603 L1395.82 684.603 L1396.38 684.603 L1396.94 684.603 L1397.5 684.603 L1398.06 684.603 L1398.62 684.603 L1399.18 684.603 L1399.74 684.603 L1400.3 684.603 L1400.86 684.603 L1401.41 684.603 L1401.97 684.603 L1402.53 684.603 L1403.09 684.603 L1403.65 684.603 L1404.21 684.603 L1404.77 684.603 L1405.33 684.603 L1405.89 684.603 L1406.45 684.603 L1407.01 684.603 L1407.57 684.603 L1408.13 684.603 L1408.68 684.603 L1409.24 684.603 L1409.8 684.603 L1410.36 684.603 L1410.92 684.603 L1411.48 684.603 L1412.04 684.603 L1412.6 684.603 L1413.16 684.603 L1413.72 684.603 L1414.28 684.603 L1414.84 684.603 L1415.4 684.603 L1415.95 684.603 L1416.51 684.603 L1417.07 684.603 L1417.63 684.603 L1418.19 684.603 L1418.75 684.603 L1419.31 684.603 L1419.87 684.603 L1420.43 684.603 L1420.99 684.603 L1421.55 684.603 L1422.11 684.603 L1422.67 684.603 L1423.23 684.603 L1423.78 684.603 L1424.34 684.603 L1424.9 684.603 L1425.46 684.603 L1426.02 684.603 L1426.58 684.603 L1427.14 684.603 L1427.7 684.603 L1428.26 684.603 L1428.82 684.603 L1429.38 684.603 L1429.94 684.603 L1430.5 684.603 L1431.05 684.603 L1431.61 684.603 L1432.17 684.603 L1432.73 684.603 L1433.29 684.603 L1433.85 684.603 L1434.41 684.603 L1434.97 684.603 L1435.53 684.603 L1436.09 684.603 L1436.65 684.603 L1437.21 684.603 L1437.77 684.603 L1438.33 684.603 L1438.88 684.603 L1439.44 684.603 L1440 684.603 L1440.56 684.603 L1441.12 684.603 L1441.68 684.603 L1442.24 684.603 L1442.8 684.603 L1443.36 684.603 L1443.92 684.603 L1444.48 684.603 L1445.04 684.603 L1445.6 684.603 L1446.15 684.603 L1446.71 684.603 L1447.27 684.603 L1447.83 684.603 L1448.39 684.603 L1448.95 684.603 L1449.51 684.603 L1450.07 684.603 L1450.63 684.603 L1451.19 684.603 L1451.75 684.603 L1452.31 684.603 L1452.87 684.603 L1453.42 684.603 L1453.98 684.603 L1454.54 684.603 L1455.1 684.603 L1455.66 684.603 L1456.22 684.603 L1456.78 684.603 L1457.34 684.603 L1457.9 684.603 L1458.46 684.603 L1459.02 684.603 L1459.58 684.603 L1460.14 684.603 L1460.7 684.603 L1461.25 684.603 L1461.81 684.603 L1462.37 684.603 L1462.93 684.603 L1463.49 684.603 L1464.05 684.603 L1464.61 684.603 L1465.17 684.603 L1465.73 684.603 L1466.29 684.603 L1466.85 684.603 L1467.41 684.603 L1467.97 684.603 L1468.52 684.603 L1469.08 684.603 L1469.64 684.603 L1470.2 684.603 L1470.76 684.603 L1471.32 684.603 L1471.88 684.603 L1472.44 684.603 L1473 684.603 L1473.56 684.603 L1474.12 684.603 L1474.68 684.603 L1475.24 684.603 L1475.79 684.603 L1476.35 684.603 L1476.91 684.603 L1477.47 684.603 L1478.03 684.603 L1478.59 684.603 L1479.15 684.603 L1479.71 684.603 L1480.27 684.603 L1480.83 684.603 L1481.39 684.603 L1481.95 684.603 L1482.51 684.603 L1483.07 684.603 L1483.62 684.603 L1484.18 684.603 L1484.74 684.603 L1485.3 684.603 L1485.86 684.603 L1486.42 684.603 L1486.98 684.603 L1487.54 684.603 L1488.1 684.603 L1488.66 684.603 L1489.22 684.603 L1489.78 684.603 L1490.34 684.603 L1490.89 684.603 L1491.45 684.603 L1492.01 684.603 L1492.57 684.603 L1493.13 684.603 L1493.69 684.603 L1494.25 684.603 L1494.81 684.603 L1495.37 684.603 L1495.93 684.603 L1496.49 684.603 L1497.05 684.603 L1497.61 684.603 L1498.16 684.603 L1498.72 684.603 L1499.28 684.603 L1499.84 684.603 L1500.4 684.603 L1500.96 684.603 L1501.52 684.603 L1502.08 684.603 L1502.64 684.603 L1503.2 684.603 L1503.76 684.603 L1504.32 684.603 L1504.88 684.603 L1505.44 684.603 L1505.99 684.603 L1506.55 684.603 L1507.11 684.603 L1507.67 684.603 L1508.23 684.603 L1508.79 684.603 L1509.35 684.603 L1509.91 684.603 L1510.47 684.603 L1511.03 684.603 L1511.59 684.603 L1512.15 684.603 L1512.71 684.603 L1513.26 684.603 L1513.82 684.603 L1514.38 684.603 L1514.94 684.603 L1515.5 684.603 L1516.06 684.603 L1516.62 684.603 L1517.18 684.603 L1517.74 684.603 L1518.3 684.603 L1518.86 684.603 L1519.42 684.603 L1519.98 684.603 L1520.53 684.603 L1521.09 684.603 L1521.65 684.603 L1522.21 684.603 L1522.77 684.603 L1523.33 684.603 L1523.89 684.603 L1524.45 684.603 L1525.01 684.603 L1525.57 684.603 L1526.13 684.603 L1526.69 684.603 L1527.25 684.603 L1527.81 684.603 L1528.36 684.603 L1528.92 684.603 L1529.48 684.603 L1530.04 684.603 L1530.6 684.603 L1531.16 684.603 L1531.72 684.603 L1532.28 684.603 L1532.84 684.603 L1533.4 684.603 L1533.96 684.603 L1534.52 684.603 L1535.08 684.603 L1535.63 684.603 L1536.19 684.603 L1536.75 684.603 L1537.31 684.603 L1537.87 684.603 L1538.43 684.603 L1538.99 684.603 L1539.55 684.603 L1540.11 684.603 L1540.67 684.603 L1541.23 684.603 L1541.79 684.603 L1542.35 684.603 L1542.9 684.603 L1543.46 684.603 L1544.02 684.603 L1544.58 684.603 L1545.14 684.603 L1545.7 684.603 L1546.26 684.603 L1546.82 684.603 L1547.38 684.603 L1547.94 684.603 L1548.5 684.603 L1549.06 684.603 L1549.62 684.603 L1550.18 684.603 L1550.73 684.603 L1551.29 684.603 L1551.85 684.603 L1552.41 684.603 L1552.97 684.603 L1553.53 684.603 L1554.09 684.603 L1554.65 684.603 L1555.21 684.603 L1555.77 684.603 L1556.33 684.603 L1556.89 684.603 L1557.45 684.603 L1558 684.603 L1558.56 684.603 L1559.12 684.603 L1559.68 684.603 L1560.24 684.603 L1560.8 684.603 L1561.36 684.603 L1561.92 684.603 L1562.48 684.603 L1563.04 684.603 L1563.6 684.603 L1564.16 684.603 L1564.72 684.603 L1565.28 684.603 L1565.83 684.603 L1566.39 684.603 L1566.95 684.603 L1567.51 684.603 L1568.07 684.603 L1568.63 684.603 L1569.19 684.603 L1569.75 684.603 L1570.31 684.603 L1570.87 684.603 L1571.43 684.603 L1571.99 684.603 L1572.55 684.603 L1573.1 684.603 L1573.66 684.603 L1574.22 684.603 L1574.78 684.603 L1575.34 684.603 L1575.9 684.603 L1576.46 684.603 L1577.02 684.603 L1577.58 684.603 L1578.14 684.603 L1578.7 684.603 L1579.26 684.603 L1579.82 684.603 L1580.37 684.603 L1580.93 684.603 L1581.49 684.603 L1582.05 684.603 L1582.61 684.603 L1583.17 684.603 L1583.73 684.603 L1584.29 684.603 L1584.85 684.603 L1585.41 684.603 L1585.97 684.603 L1586.53 684.603 L1587.09 684.603 L1587.65 684.603 L1588.2 684.603 L1588.76 684.603 L1589.32 684.603 L1589.88 684.603 L1590.44 684.603 L1591 684.603 L1591.56 684.603 L1592.12 684.603 L1592.68 684.603 L1593.24 684.603 L1593.8 684.603 L1594.36 684.603 L1594.92 684.603 L1595.47 684.603 L1596.03 684.603 L1596.59 684.603 L1597.15 684.603 L1597.71 684.603 L1598.27 684.603 L1598.83 684.603 L1599.39 684.603 L1599.95 684.603 L1600.51 684.603 L1601.07 684.603 L1601.63 684.603 L1602.19 684.603 L1602.74 684.603 L1603.3 684.603 L1603.86 684.603 L1604.42 684.603 L1604.98 684.603 L1605.54 684.603 L1606.1 684.603 L1606.66 684.603 L1607.22 684.603 L1607.78 684.603 L1608.34 684.603 L1608.9 684.603 L1609.46 684.603 L1610.02 684.603 L1610.57 684.603 L1611.13 684.603 L1611.69 684.603 L1612.25 684.603 L1612.81 684.603 L1613.37 684.603 L1613.93 684.603 L1614.49 684.603 L1615.05 684.603 L1615.61 684.603 L1616.17 684.603 L1616.73 684.603 L1617.29 684.603 L1617.84 684.603 L1618.4 684.603 L1618.96 684.603 L1619.52 684.603 L1620.08 684.603 L1620.64 684.603 L1621.2 684.603 L1621.76 684.603 L1622.32 684.603 L1622.88 684.603 L1623.44 684.603 L1624 684.603 L1624.56 684.603 L1625.11 684.603 L1625.67 684.603 L1626.23 684.603 L1626.79 684.603 L1627.35 684.603 L1627.91 684.603 L1628.47 684.603 L1629.03 684.603 L1629.59 684.603 L1630.15 684.603 L1630.71 684.603 L1631.27 684.603 L1631.83 684.603 L1632.39 684.603 L1632.94 684.603 L1633.5 684.603 L1634.06 684.603 L1634.62 684.603 L1635.18 684.603 L1635.74 684.603 L1636.3 684.603 L1636.86 684.603 L1637.42 684.603 L1637.98 684.603 L1638.54 684.603 L1639.1 684.603 L1639.66 684.603 L1640.21 684.603 L1640.77 684.603 L1641.33 684.603 L1641.89 684.603 L1642.45 684.603 L1643.01 684.603 L1643.57 684.603 L1644.13 684.603 L1644.69 684.603 L1645.25 684.603 L1645.81 684.603 L1646.37 684.603 L1646.93 684.603 L1647.48 684.603 L1648.04 684.603 L1648.6 684.603 L1649.16 684.603 L1649.72 684.603 L1650.28 684.603 L1650.84 684.603 L1651.4 684.603 L1651.96 684.603 L1652.52 684.603 L1653.08 684.603 L1653.64 684.603 L1654.2 684.603 L1654.76 684.603 L1655.31 684.603 L1655.87 684.603 L1656.43 684.603 L1656.99 684.603 L1657.55 684.603 L1658.11 684.603 L1658.67 684.603 L1659.23 684.603 L1659.79 684.603 L1660.35 684.603 L1660.91 684.603 L1661.47 684.603 L1662.03 684.603 L1662.58 684.603 L1663.14 684.603 L1663.7 684.603 L1664.26 684.603 L1664.82 684.603 L1665.38 684.603 L1665.94 684.603 L1666.5 684.603 L1667.06 684.603 L1667.62 684.603 L1668.18 684.603 L1668.74 684.603 L1669.3 684.603 L1669.85 684.603 L1670.41 684.603 L1670.97 684.603 L1671.53 684.603 L1672.09 684.603 L1672.65 684.603 L1673.21 684.603 L1673.77 684.603 L1674.33 684.603 L1674.89 684.603 L1675.45 684.603 L1676.01 684.603 L1676.57 684.603 L1677.13 684.603 L1677.68 684.603 L1678.24 684.603 L1678.8 684.603 L1679.36 684.603 L1679.92 684.603 L1680.48 684.603 L1681.04 684.603 L1681.6 684.603 L1682.16 684.603 L1682.72 684.603 L1683.28 684.603 L1683.84 684.603 L1684.4 684.603 L1684.95 684.603 L1685.51 684.603 L1686.07 684.603 L1686.63 684.603 L1687.19 684.603 L1687.75 684.603 L1688.31 684.603 L1688.87 684.603 L1689.43 684.603 L1689.99 684.603 L1690.55 684.603 L1691.11 684.603 L1691.67 684.603 L1692.23 684.603 L1692.78 684.603 L1693.34 684.603 L1693.9 684.603 L1694.46 684.603 L1695.02 684.603 L1695.58 684.603 L1696.14 684.603 L1696.7 684.603 L1697.26 684.603 L1697.82 684.603 L1698.38 684.603 L1698.94 684.603 L1699.5 684.603 L1700.05 684.603 L1700.61 684.603 L1701.17 684.603 L1701.73 684.603 L1702.29 684.603 L1702.85 684.603 L1703.41 684.603 L1703.97 684.603 L1704.53 684.603 L1705.09 684.603 L1705.65 684.603 L1706.21 684.603 L1706.77 684.603 L1707.32 684.603 L1707.88 684.603 L1708.44 684.603 L1709 684.603 L1709.56 684.603 L1710.12 684.603 L1710.68 684.603 L1711.24 684.603 L1711.8 684.603 L1712.36 684.603 L1712.92 684.603 L1713.48 684.603 L1714.04 684.603 L1714.6 684.603 L1715.15 684.603 L1715.71 684.603 L1716.27 684.603 L1716.83 684.603 L1717.39 684.603 L1717.95 684.603 L1718.51 684.603 L1719.07 684.603 L1719.63 684.603 L1720.19 684.603 L1720.75 684.603 L1721.31 684.603 L1721.87 684.603 L1722.42 684.603 L1722.98 684.603 L1723.54 684.603 L1724.1 684.603 L1724.66 684.603 L1725.22 684.603 L1725.78 684.603 L1726.34 684.603 L1726.9 684.603 L1727.46 684.603 L1728.02 684.603 L1728.58 684.603 L1729.14 684.603 L1729.69 684.603 L1730.25 684.603 L1730.81 684.603 L1731.37 684.603 L1731.93 684.603 L1732.49 684.603 L1733.05 684.603 L1733.61 684.603 L1734.17 684.603 L1734.73 684.603 L1735.29 684.603 L1735.85 684.603 L1736.41 684.603 L1736.97 684.603 L1737.52 684.603 L1738.08 684.603 L1738.64 684.603 L1739.2 684.603 L1739.76 684.603 L1740.32 684.603 L1740.88 684.603 L1741.44 684.603 L1742 684.603 L1742.56 684.603 L1743.12 684.603 L1743.68 684.603 L1744.24 684.603 L1744.79 684.603 L1745.35 684.603 L1745.91 684.603 L1746.47 684.603 L1747.03 684.603 L1747.59 684.603 L1748.15 684.603 L1748.71 684.603 L1749.27 684.603 L1749.83 684.603 L1750.39 684.603 L1750.95 684.603 L1751.51 684.603 L1752.06 684.603 L1752.62 684.603 L1753.18 684.603 L1753.74 684.603 L1754.3 684.603 L1754.86 684.603 L1755.42 684.603 L1755.98 684.603 L1756.54 684.603 L1757.1 684.603 L1757.66 684.603 L1758.22 684.603 L1758.78 684.603 L1759.34 684.603 L1759.89 684.603 L1760.45 684.603 L1761.01 684.603 L1761.57 684.603 L1762.13 684.603 L1762.69 684.603 L1763.25 684.603 L1763.81 684.603 L1764.37 684.603 L1764.93 684.603 L1765.49 684.603 L1766.05 684.603 L1766.61 684.603 L1767.16 684.603 L1767.72 684.603 L1768.28 684.603 L1768.84 684.603 L1769.4 684.603 L1769.96 684.603 L1770.52 684.603 L1771.08 684.603 L1771.64 684.603 L1772.2 684.603 L1772.76 684.603 L1773.32 684.603 L1773.88 684.603 L1774.43 684.603 L1774.99 684.603 L1775.55 684.603 L1776.11 684.603 L1776.67 684.603 L1777.23 684.603 L1777.79 684.603 L1778.35 684.603 L1778.91 684.603 L1779.47 684.603 L1780.03 684.603 L1780.59 684.603 L1781.15 684.603 L1781.71 684.603 L1782.26 684.603 L1782.82 684.603 L1783.38 684.603 L1783.94 684.603 L1784.5 684.603 L1785.06 684.603 L1785.62 684.603 L1786.18 684.603 L1786.74 684.603 L1787.3 684.603 L1787.86 684.603 L1788.42 684.603 L1788.98 684.603 L1789.53 684.603 L1790.09 684.603 L1790.65 684.603 L1791.21 684.603 L1791.77 684.603 L1792.33 684.603 L1792.89 684.603 L1793.45 684.603 L1794.01 684.603 L1794.57 684.603 L1795.13 684.603 L1795.69 684.603 L1796.25 684.603 L1796.8 684.603 L1797.36 684.603 L1797.92 684.603 L1798.48 684.603 L1799.04 684.603 L1799.6 684.603 L1800.16 684.603 L1800.72 684.603 L1801.28 684.603 L1801.84 684.603 L1802.4 684.603 L1802.96 684.603 L1803.52 684.603 L1804.08 684.603 L1804.63 684.603 L1805.19 684.603 L1805.75 684.603 L1806.31 684.603 L1806.87 684.603 L1807.43 684.603 L1807.99 684.603 L1808.55 684.603 L1809.11 684.603 L1809.67 684.603 L1810.23 684.603 L1810.79 684.603 L1811.35 684.603 L1811.9 684.603 L1812.46 684.603 L1813.02 684.603 L1813.58 684.603 L1814.14 684.603 L1814.7 684.603 L1815.26 684.603 L1815.82 684.603 L1816.38 684.603 L1816.94 684.603 L1817.5 684.603 L1818.06 684.603 L1818.62 684.603 L1819.18 684.603 L1819.73 684.603 L1820.29 684.603 L1820.85 684.603 L1821.41 684.603 L1821.97 684.603 L1822.53 684.603 L1823.09 684.603 L1823.65 684.603 L1824.21 684.603 L1824.77 684.603 L1825.33 684.603 L1825.89 684.603 L1826.45 684.603 L1827 684.603 L1827.56 684.603 L1828.12 684.603 L1828.68 684.603 L1829.24 684.603 L1829.8 684.603 L1830.36 684.603 L1830.92 684.603 L1831.48 684.603 L1832.04 684.603 L1832.6 684.603 L1833.16 684.603 L1833.72 684.603 L1834.27 684.603 L1834.83 684.603 L1835.39 684.603 L1835.95 684.603 L1836.51 684.603 L1837.07 684.603 L1837.63 684.603 L1838.19 684.603 L1838.19 682.398 L1837.63 682.398 L1837.07 682.398 L1836.51 682.398 L1835.95 682.398 L1835.39 682.398 L1834.83 682.398 L1834.27 682.398 L1833.72 682.398 L1833.16 682.398 L1832.6 682.398 L1832.04 682.398 L1831.48 682.398 L1830.92 682.398 L1830.36 682.398 L1829.8 682.398 L1829.24 682.398 L1828.68 682.398 L1828.12 682.398 L1827.56 682.398 L1827 682.398 L1826.45 682.398 L1825.89 682.398 L1825.33 682.398 L1824.77 682.398 L1824.21 682.398 L1823.65 682.398 L1823.09 682.398 L1822.53 682.398 L1821.97 682.398 L1821.41 682.398 L1820.85 682.398 L1820.29 682.398 L1819.73 682.398 L1819.18 682.398 L1818.62 682.398 L1818.06 682.398 L1817.5 682.398 L1816.94 682.398 L1816.38 682.398 L1815.82 682.398 L1815.26 682.398 L1814.7 682.398 L1814.14 682.398 L1813.58 682.398 L1813.02 682.398 L1812.46 682.398 L1811.9 682.398 L1811.35 682.398 L1810.79 682.398 L1810.23 682.398 L1809.67 682.398 L1809.11 682.398 L1808.55 682.398 L1807.99 682.398 L1807.43 682.398 L1806.87 682.398 L1806.31 682.398 L1805.75 682.398 L1805.19 682.398 L1804.63 682.398 L1804.08 682.398 L1803.52 682.398 L1802.96 682.398 L1802.4 682.398 L1801.84 682.398 L1801.28 682.398 L1800.72 682.398 L1800.16 682.398 L1799.6 682.398 L1799.04 682.398 L1798.48 682.398 L1797.92 682.398 L1797.36 682.398 L1796.8 682.398 L1796.25 682.398 L1795.69 682.398 L1795.13 682.398 L1794.57 682.398 L1794.01 682.398 L1793.45 682.398 L1792.89 682.398 L1792.33 682.398 L1791.77 682.398 L1791.21 682.398 L1790.65 682.398 L1790.09 682.398 L1789.53 682.398 L1788.98 682.398 L1788.42 682.398 L1787.86 682.398 L1787.3 682.398 L1786.74 682.398 L1786.18 682.398 L1785.62 682.398 L1785.06 682.398 L1784.5 682.398 L1783.94 682.398 L1783.38 682.398 L1782.82 682.398 L1782.26 682.398 L1781.71 682.398 L1781.15 682.398 L1780.59 682.398 L1780.03 682.398 L1779.47 682.398 L1778.91 682.398 L1778.35 682.398 L1777.79 682.398 L1777.23 682.398 L1776.67 682.398 L1776.11 682.398 L1775.55 682.398 L1774.99 682.398 L1774.43 682.398 L1773.88 682.398 L1773.32 682.398 L1772.76 682.398 L1772.2 682.398 L1771.64 682.398 L1771.08 682.398 L1770.52 682.398 L1769.96 682.398 L1769.4 682.398 L1768.84 682.398 L1768.28 682.398 L1767.72 682.398 L1767.16 682.398 L1766.61 682.398 L1766.05 682.398 L1765.49 682.398 L1764.93 682.398 L1764.37 682.398 L1763.81 682.398 L1763.25 682.398 L1762.69 682.398 L1762.13 682.398 L1761.57 682.398 L1761.01 682.398 L1760.45 682.398 L1759.89 682.398 L1759.34 682.398 L1758.78 682.398 L1758.22 682.398 L1757.66 682.398 L1757.1 682.398 L1756.54 682.398 L1755.98 682.398 L1755.42 682.398 L1754.86 682.398 L1754.3 682.398 L1753.74 682.398 L1753.18 682.398 L1752.62 682.398 L1752.06 682.398 L1751.51 682.398 L1750.95 682.398 L1750.39 682.398 L1749.83 682.398 L1749.27 682.398 L1748.71 682.398 L1748.15 682.398 L1747.59 682.398 L1747.03 682.398 L1746.47 682.398 L1745.91 682.398 L1745.35 682.398 L1744.79 682.398 L1744.24 682.398 L1743.68 682.398 L1743.12 682.398 L1742.56 682.398 L1742 682.398 L1741.44 682.398 L1740.88 682.398 L1740.32 682.398 L1739.76 682.398 L1739.2 682.398 L1738.64 682.398 L1738.08 682.398 L1737.52 682.398 L1736.97 682.398 L1736.41 682.398 L1735.85 682.398 L1735.29 682.398 L1734.73 682.398 L1734.17 682.398 L1733.61 682.398 L1733.05 682.398 L1732.49 682.398 L1731.93 682.398 L1731.37 682.398 L1730.81 682.398 L1730.25 682.398 L1729.69 682.398 L1729.14 682.398 L1728.58 682.398 L1728.02 682.398 L1727.46 682.398 L1726.9 682.398 L1726.34 682.398 L1725.78 682.398 L1725.22 682.398 L1724.66 682.398 L1724.1 682.398 L1723.54 682.398 L1722.98 682.398 L1722.42 682.398 L1721.87 682.398 L1721.31 682.398 L1720.75 682.398 L1720.19 682.398 L1719.63 682.398 L1719.07 682.398 L1718.51 682.398 L1717.95 682.398 L1717.39 682.398 L1716.83 682.398 L1716.27 682.398 L1715.71 682.398 L1715.15 682.398 L1714.6 682.398 L1714.04 682.398 L1713.48 682.398 L1712.92 682.398 L1712.36 682.398 L1711.8 682.398 L1711.24 682.398 L1710.68 682.398 L1710.12 682.398 L1709.56 682.398 L1709 682.398 L1708.44 682.398 L1707.88 682.398 L1707.32 682.398 L1706.77 682.398 L1706.21 682.398 L1705.65 682.398 L1705.09 682.398 L1704.53 682.398 L1703.97 682.398 L1703.41 682.398 L1702.85 682.398 L1702.29 682.398 L1701.73 682.398 L1701.17 682.398 L1700.61 682.398 L1700.05 682.398 L1699.5 682.398 L1698.94 682.398 L1698.38 682.398 L1697.82 682.398 L1697.26 682.398 L1696.7 682.398 L1696.14 682.398 L1695.58 682.398 L1695.02 682.398 L1694.46 682.398 L1693.9 682.398 L1693.34 682.398 L1692.78 682.398 L1692.23 682.398 L1691.67 682.398 L1691.11 682.398 L1690.55 682.398 L1689.99 682.398 L1689.43 682.398 L1688.87 682.398 L1688.31 682.398 L1687.75 682.398 L1687.19 682.398 L1686.63 682.398 L1686.07 682.398 L1685.51 682.398 L1684.95 682.398 L1684.4 682.398 L1683.84 682.398 L1683.28 682.398 L1682.72 682.398 L1682.16 682.398 L1681.6 682.398 L1681.04 682.398 L1680.48 682.398 L1679.92 682.398 L1679.36 682.398 L1678.8 682.398 L1678.24 682.398 L1677.68 682.398 L1677.13 682.398 L1676.57 682.398 L1676.01 682.398 L1675.45 682.398 L1674.89 682.398 L1674.33 682.398 L1673.77 682.398 L1673.21 682.398 L1672.65 682.398 L1672.09 682.398 L1671.53 682.398 L1670.97 682.398 L1670.41 682.398 L1669.85 682.398 L1669.3 682.398 L1668.74 682.398 L1668.18 682.398 L1667.62 682.398 L1667.06 682.398 L1666.5 682.398 L1665.94 682.398 L1665.38 682.398 L1664.82 682.398 L1664.26 682.398 L1663.7 682.398 L1663.14 682.398 L1662.58 682.398 L1662.03 682.398 L1661.47 682.398 L1660.91 682.398 L1660.35 682.398 L1659.79 682.398 L1659.23 682.398 L1658.67 682.398 L1658.11 682.398 L1657.55 682.398 L1656.99 682.398 L1656.43 682.398 L1655.87 682.398 L1655.31 682.398 L1654.76 682.398 L1654.2 682.398 L1653.64 682.398 L1653.08 682.398 L1652.52 682.398 L1651.96 682.398 L1651.4 682.398 L1650.84 682.398 L1650.28 682.398 L1649.72 682.398 L1649.16 682.398 L1648.6 682.398 L1648.04 682.398 L1647.48 682.398 L1646.93 682.398 L1646.37 682.398 L1645.81 682.398 L1645.25 682.398 L1644.69 682.398 L1644.13 682.398 L1643.57 682.398 L1643.01 682.398 L1642.45 682.398 L1641.89 682.398 L1641.33 682.398 L1640.77 682.398 L1640.21 682.398 L1639.66 682.398 L1639.1 682.398 L1638.54 682.398 L1637.98 682.398 L1637.42 682.398 L1636.86 682.398 L1636.3 682.398 L1635.74 682.398 L1635.18 682.398 L1634.62 682.398 L1634.06 682.398 L1633.5 682.398 L1632.94 682.398 L1632.39 682.398 L1631.83 682.398 L1631.27 682.398 L1630.71 682.398 L1630.15 682.398 L1629.59 682.398 L1629.03 682.398 L1628.47 682.398 L1627.91 682.398 L1627.35 682.398 L1626.79 682.398 L1626.23 682.398 L1625.67 682.398 L1625.11 682.398 L1624.56 682.398 L1624 682.398 L1623.44 682.398 L1622.88 682.398 L1622.32 682.398 L1621.76 682.398 L1621.2 682.398 L1620.64 682.398 L1620.08 682.398 L1619.52 682.398 L1618.96 682.398 L1618.4 682.398 L1617.84 682.398 L1617.29 682.398 L1616.73 682.398 L1616.17 682.398 L1615.61 682.398 L1615.05 682.398 L1614.49 682.398 L1613.93 682.398 L1613.37 682.398 L1612.81 682.398 L1612.25 682.398 L1611.69 682.398 L1611.13 682.398 L1610.57 682.398 L1610.02 682.398 L1609.46 682.398 L1608.9 682.398 L1608.34 682.398 L1607.78 682.398 L1607.22 682.398 L1606.66 682.398 L1606.1 682.398 L1605.54 682.398 L1604.98 682.398 L1604.42 682.398 L1603.86 682.398 L1603.3 682.398 L1602.74 682.398 L1602.19 682.398 L1601.63 682.398 L1601.07 682.398 L1600.51 682.398 L1599.95 682.398 L1599.39 682.398 L1598.83 682.398 L1598.27 682.398 L1597.71 682.398 L1597.15 682.398 L1596.59 682.398 L1596.03 682.398 L1595.47 682.398 L1594.92 682.398 L1594.36 682.398 L1593.8 682.398 L1593.24 682.398 L1592.68 682.398 L1592.12 682.398 L1591.56 682.398 L1591 682.398 L1590.44 682.398 L1589.88 682.398 L1589.32 682.398 L1588.76 682.398 L1588.2 682.398 L1587.65 682.398 L1587.09 682.398 L1586.53 682.398 L1585.97 682.398 L1585.41 682.398 L1584.85 682.398 L1584.29 682.398 L1583.73 682.398 L1583.17 682.398 L1582.61 682.398 L1582.05 682.398 L1581.49 682.398 L1580.93 682.398 L1580.37 682.398 L1579.82 682.398 L1579.26 682.398 L1578.7 682.398 L1578.14 682.398 L1577.58 682.398 L1577.02 682.398 L1576.46 682.398 L1575.9 682.398 L1575.34 682.398 L1574.78 682.398 L1574.22 682.398 L1573.66 682.398 L1573.1 682.398 L1572.55 682.398 L1571.99 682.398 L1571.43 682.398 L1570.87 682.398 L1570.31 682.398 L1569.75 682.398 L1569.19 682.398 L1568.63 682.398 L1568.07 682.398 L1567.51 682.398 L1566.95 682.398 L1566.39 682.398 L1565.83 682.398 L1565.28 682.398 L1564.72 682.398 L1564.16 682.398 L1563.6 682.398 L1563.04 682.398 L1562.48 682.398 L1561.92 682.398 L1561.36 682.398 L1560.8 682.398 L1560.24 682.398 L1559.68 682.398 L1559.12 682.398 L1558.56 682.398 L1558 682.398 L1557.45 682.398 L1556.89 682.398 L1556.33 682.398 L1555.77 682.398 L1555.21 682.398 L1554.65 682.398 L1554.09 682.398 L1553.53 682.398 L1552.97 682.398 L1552.41 682.398 L1551.85 682.398 L1551.29 682.398 L1550.73 682.398 L1550.18 682.398 L1549.62 682.398 L1549.06 682.398 L1548.5 682.398 L1547.94 682.398 L1547.38 682.398 L1546.82 682.398 L1546.26 682.398 L1545.7 682.398 L1545.14 682.398 L1544.58 682.398 L1544.02 682.398 L1543.46 682.398 L1542.9 682.398 L1542.35 682.398 L1541.79 682.398 L1541.23 682.398 L1540.67 682.398 L1540.11 682.398 L1539.55 682.398 L1538.99 682.398 L1538.43 682.398 L1537.87 682.398 L1537.31 682.398 L1536.75 682.398 L1536.19 682.398 L1535.63 682.398 L1535.08 682.398 L1534.52 682.398 L1533.96 682.398 L1533.4 682.398 L1532.84 682.398 L1532.28 682.398 L1531.72 682.398 L1531.16 682.398 L1530.6 682.398 L1530.04 682.398 L1529.48 682.398 L1528.92 682.398 L1528.36 682.398 L1527.81 682.398 L1527.25 682.398 L1526.69 682.398 L1526.13 682.398 L1525.57 682.398 L1525.01 682.398 L1524.45 682.398 L1523.89 682.398 L1523.33 682.398 L1522.77 682.398 L1522.21 682.398 L1521.65 682.398 L1521.09 682.398 L1520.53 682.398 L1519.98 682.398 L1519.42 682.398 L1518.86 682.398 L1518.3 682.398 L1517.74 682.398 L1517.18 682.398 L1516.62 682.398 L1516.06 682.398 L1515.5 682.398 L1514.94 682.398 L1514.38 682.398 L1513.82 682.398 L1513.26 682.398 L1512.71 682.398 L1512.15 682.398 L1511.59 682.398 L1511.03 682.398 L1510.47 682.398 L1509.91 682.398 L1509.35 682.398 L1508.79 682.398 L1508.23 682.398 L1507.67 682.398 L1507.11 682.398 L1506.55 682.398 L1505.99 682.398 L1505.44 682.398 L1504.88 682.398 L1504.32 682.398 L1503.76 682.398 L1503.2 682.398 L1502.64 682.398 L1502.08 682.398 L1501.52 682.398 L1500.96 682.398 L1500.4 682.398 L1499.84 682.398 L1499.28 682.398 L1498.72 682.398 L1498.16 682.398 L1497.61 682.398 L1497.05 682.398 L1496.49 682.398 L1495.93 682.398 L1495.37 682.398 L1494.81 682.398 L1494.25 682.398 L1493.69 682.398 L1493.13 682.398 L1492.57 682.398 L1492.01 682.398 L1491.45 682.398 L1490.89 682.398 L1490.34 682.398 L1489.78 682.398 L1489.22 682.398 L1488.66 682.398 L1488.1 682.398 L1487.54 682.398 L1486.98 682.398 L1486.42 682.398 L1485.86 682.398 L1485.3 682.398 L1484.74 682.398 L1484.18 682.398 L1483.62 682.398 L1483.07 682.398 L1482.51 682.398 L1481.95 682.398 L1481.39 682.398 L1480.83 682.398 L1480.27 682.398 L1479.71 682.398 L1479.15 682.398 L1478.59 682.398 L1478.03 682.398 L1477.47 682.398 L1476.91 682.398 L1476.35 682.398 L1475.79 682.398 L1475.24 682.398 L1474.68 682.398 L1474.12 682.398 L1473.56 682.398 L1473 682.398 L1472.44 682.398 L1471.88 682.398 L1471.32 682.398 L1470.76 682.398 L1470.2 682.398 L1469.64 682.398 L1469.08 682.398 L1468.52 682.398 L1467.97 682.398 L1467.41 682.398 L1466.85 682.398 L1466.29 682.398 L1465.73 682.398 L1465.17 682.398 L1464.61 682.398 L1464.05 682.398 L1463.49 682.398 L1462.93 682.398 L1462.37 682.398 L1461.81 682.398 L1461.25 682.398 L1460.7 682.398 L1460.14 682.398 L1459.58 682.398 L1459.02 682.398 L1458.46 682.398 L1457.9 682.398 L1457.34 682.398 L1456.78 682.398 L1456.22 682.398 L1455.66 682.398 L1455.1 682.398 L1454.54 682.398 L1453.98 682.398 L1453.42 682.398 L1452.87 682.398 L1452.31 682.398 L1451.75 682.398 L1451.19 682.398 L1450.63 682.398 L1450.07 682.398 L1449.51 682.398 L1448.95 682.398 L1448.39 682.398 L1447.83 682.398 L1447.27 682.398 L1446.71 682.398 L1446.15 682.398 L1445.6 682.398 L1445.04 682.398 L1444.48 682.398 L1443.92 682.398 L1443.36 682.398 L1442.8 682.398 L1442.24 682.398 L1441.68 682.398 L1441.12 682.398 L1440.56 682.398 L1440 682.398 L1439.44 682.398 L1438.88 682.398 L1438.33 682.398 L1437.77 682.398 L1437.21 682.398 L1436.65 682.398 L1436.09 682.398 L1435.53 682.398 L1434.97 682.398 L1434.41 682.398 L1433.85 682.398 L1433.29 682.398 L1432.73 682.398 L1432.17 682.398 L1431.61 682.398 L1431.05 682.398 L1430.5 682.398 L1429.94 682.398 L1429.38 682.398 L1428.82 682.398 L1428.26 682.398 L1427.7 682.398 L1427.14 682.398 L1426.58 682.398 L1426.02 682.398 L1425.46 682.398 L1424.9 682.398 L1424.34 682.398 L1423.78 682.398 L1423.23 682.398 L1422.67 682.398 L1422.11 682.398 L1421.55 682.398 L1420.99 682.398 L1420.43 682.398 L1419.87 682.398 L1419.31 682.398 L1418.75 682.398 L1418.19 682.398 L1417.63 682.398 L1417.07 682.398 L1416.51 682.398 L1415.95 682.398 L1415.4 682.398 L1414.84 682.398 L1414.28 682.398 L1413.72 682.398 L1413.16 682.398 L1412.6 682.398 L1412.04 682.398 L1411.48 682.398 L1410.92 682.398 L1410.36 682.398 L1409.8 682.398 L1409.24 682.398 L1408.68 682.398 L1408.13 682.398 L1407.57 682.398 L1407.01 682.398 L1406.45 682.398 L1405.89 682.398 L1405.33 682.398 L1404.77 682.398 L1404.21 682.398 L1403.65 682.398 L1403.09 682.398 L1402.53 682.398 L1401.97 682.398 L1401.41 682.398 L1400.86 682.398 L1400.3 682.398 L1399.74 682.398 L1399.18 682.398 L1398.62 682.398 L1398.06 682.398 L1397.5 682.398 L1396.94 682.398 L1396.38 682.398 L1395.82 682.398 L1395.26 682.398 L1394.7 682.398 L1394.14 682.398 L1393.58 682.398 L1393.03 682.398 L1392.47 682.398 L1391.91 682.398 L1391.35 682.398 L1390.79 682.398 L1390.23 682.398 L1389.67 682.398 L1389.11 682.398 L1388.55 682.398 L1387.99 682.398 L1387.43 682.398 L1386.87 682.398 L1386.31 682.398 L1385.76 682.398 L1385.2 682.398 L1384.64 682.398 L1384.08 682.398 L1383.52 682.398 L1382.96 682.398 L1382.4 682.398 L1381.84 682.398 L1381.28 682.398 L1380.72 682.398 L1380.16 682.398 L1379.6 682.398 L1379.04 682.398 L1378.49 682.398 L1377.93 682.398 L1377.37 682.398 L1376.81 682.398 L1376.25 682.398 L1375.69 682.398 L1375.13 682.398 L1374.57 682.398 L1374.01 682.398 L1373.45 682.398 L1372.89 682.398 L1372.33 682.398 L1371.77 682.398 L1371.21 682.398 L1370.66 682.398 L1370.1 682.398 L1369.54 682.398 L1368.98 682.398 L1368.42 682.398 L1367.86 682.398 L1367.3 682.398 L1366.74 682.398 L1366.18 682.398 L1365.62 682.398 L1365.06 682.398 L1364.5 682.398 L1363.94 682.398 L1363.39 682.398 L1362.83 682.398 L1362.27 682.398 L1361.71 682.398 L1361.15 682.398 L1360.59 682.398 L1360.03 682.398 L1359.47 682.398 L1358.91 682.398 L1358.35 682.398 L1357.79 682.398 L1357.23 682.398 L1356.67 682.398 L1356.12 682.398 L1355.56 682.398 L1355 682.398 L1354.44 682.398 L1353.88 682.398 L1353.32 682.398 L1352.76 682.398 L1352.2 682.398 L1351.64 682.398 L1351.08 682.398 L1350.52 682.398 L1349.96 682.398 L1349.4 682.398 L1348.84 682.398 L1348.29 682.398 L1347.73 682.398 L1347.17 682.398 L1346.61 682.398 L1346.05 682.398 L1345.49 682.398 L1344.93 682.398 L1344.37 682.398 L1343.81 682.398 L1343.25 682.398 L1342.69 682.398 L1342.13 682.398 L1341.57 682.398 L1341.02 682.398 L1340.46 682.398 L1339.9 682.398 L1339.34 682.398 L1338.78 682.398 L1338.22 682.398 L1337.66 682.398 L1337.1 682.398 L1336.54 682.398 L1335.98 682.398 L1335.42 682.398 L1334.86 682.398 L1334.3 682.398 L1333.75 682.398 L1333.19 682.398 L1332.63 682.398 L1332.07 682.398 L1331.51 682.398 L1330.95 682.398 L1330.39 682.398 L1329.83 682.398 L1329.27 682.398 L1328.71 682.398 L1328.15 682.398 L1327.59 682.398 L1327.03 682.398 L1326.47 682.398 L1325.92 682.398 L1325.36 682.398 L1324.8 682.398 L1324.24 682.398 L1323.68 682.398 L1323.12 682.398 L1322.56 682.398 L1322 682.398 L1321.44 682.398 L1320.88 682.398 L1320.32 682.398 L1319.76 682.398 L1319.2 682.398 L1318.65 682.398 L1318.09 682.398 L1317.53 682.398 L1316.97 682.398 L1316.41 682.398 L1315.85 682.398 L1315.29 682.398 L1314.73 682.398 L1314.17 682.398 L1313.61 682.398 L1313.05 682.398 L1312.49 682.398 L1311.93 682.398 L1311.38 682.398 L1310.82 682.398 L1310.26 682.398 L1309.7 682.398 L1309.14 682.398 L1308.58 682.398 L1308.02 682.398 L1307.46 682.398 L1306.9 682.398 L1306.34 682.398 L1305.78 682.398 L1305.22 682.398 L1304.66 682.398 L1304.1 682.398 L1303.55 682.398 L1302.99 682.398 L1302.43 682.398 L1301.87 682.398 L1301.31 682.398 L1300.75 682.398 L1300.19 682.398 L1299.63 682.398 L1299.07 682.398 L1298.51 682.398 L1297.95 682.398 L1297.39 682.398 L1296.83 682.398 L1296.28 682.398 L1295.72 682.398 L1295.16 682.398 L1294.6 682.398 L1294.04 682.398 L1293.48 682.398 L1292.92 682.398 L1292.36 682.398 L1291.8 682.398 L1291.24 682.398 L1290.68 682.398 L1290.12 682.398 L1289.56 682.398 L1289 682.398 L1288.45 682.398 L1287.89 682.398 L1287.33 682.398 L1286.77 682.398 L1286.21 682.398 L1285.65 682.398 L1285.09 682.398 L1284.53 682.398 L1283.97 682.398 L1283.41 682.398 L1282.85 682.398 L1282.29 682.398 L1281.73 682.398 L1281.18 682.398 L1280.62 682.398 L1280.06 682.398 L1279.5 682.398 L1278.94 682.398 L1278.38 682.398 L1277.82 682.398 L1277.26 682.398 L1276.7 682.398 L1276.14 682.398 L1275.58 682.398 L1275.02 682.398 L1274.46 682.398 L1273.91 682.398 L1273.35 682.398 L1272.79 682.398 L1272.23 682.398 L1271.67 682.398 L1271.11 682.398 L1270.55 682.398 L1269.99 682.398 L1269.43 682.398 L1268.87 682.398 L1268.31 682.398 L1267.75 682.398 L1267.19 682.398 L1266.63 682.398 L1266.08 682.398 L1265.52 682.398 L1264.96 682.398 L1264.4 682.398 L1263.84 682.398 L1263.28 682.398 L1262.72 682.398 L1262.16 682.398 L1261.6 682.398 L1261.04 682.398 L1260.48 682.398 L1259.92 682.398 L1259.36 682.398 L1258.81 682.398 L1258.25 682.398 L1257.69 682.398 L1257.13 682.398 L1256.57 682.398 L1256.01 682.398 L1255.45 682.398 L1254.89 682.398 L1254.33 682.398 L1253.77 682.398 L1253.21 682.398 L1252.65 682.398 L1252.09 682.398 L1251.54 682.398 L1250.98 682.398 L1250.42 682.398 L1249.86 682.398 L1249.3 682.398 L1248.74 682.398 L1248.18 682.398 L1247.62 682.398 L1247.06 682.398 L1246.5 682.398 L1245.94 682.398 L1245.38 682.398 L1244.82 682.398 L1244.26 682.398 L1243.71 682.398 L1243.15 682.398 L1242.59 682.398 L1242.03 682.398 L1241.47 682.398 L1240.91 682.398 L1240.35 682.398 L1239.79 682.398 L1239.23 682.398 L1238.67 682.398 L1238.11 682.398 L1237.55 682.398 L1236.99 682.398 L1236.44 682.398 L1235.88 682.398 L1235.32 682.398 L1234.76 682.398 L1234.2 682.398 L1233.64 682.398 L1233.08 682.398 L1232.52 682.398 L1231.96 682.398 L1231.4 682.398 L1230.84 682.398 L1230.28 682.398 L1229.72 682.398 L1229.17 682.398 L1228.61 682.398 L1228.05 682.398 L1227.49 682.398 L1226.93 682.398 L1226.37 682.398 L1225.81 682.398 L1225.25 682.398 L1224.69 682.398 L1224.13 682.398 L1223.57 682.398 L1223.01 682.398 L1222.45 682.398 L1221.89 682.398 L1221.34 682.398 L1220.78 682.398 L1220.22 682.398 L1219.66 682.398 L1219.1 682.398 L1218.54 682.398 L1217.98 682.398 L1217.42 682.398 L1216.86 682.398 L1216.3 682.398 L1215.74 682.398 L1215.18 682.398 L1214.62 682.398 L1214.07 682.398 L1213.51 682.398 L1212.95 682.398 L1212.39 682.398 L1211.83 682.398 L1211.27 682.398 L1210.71 682.398 L1210.15 682.398 L1209.59 682.398 L1209.03 682.398 L1208.47 682.398 L1207.91 682.398 L1207.35 682.398 L1206.8 682.398 L1206.24 682.398 L1205.68 682.398 L1205.12 682.398 L1204.56 682.398 L1204 682.398 L1203.44 682.398 L1202.88 682.398 L1202.32 682.398 L1201.76 682.398 L1201.2 682.398 L1200.64 682.398 L1200.08 682.398 L1199.52 682.398 L1198.97 682.398 L1198.41 682.398 L1197.85 682.398 L1197.29 682.398 L1196.73 682.398 L1196.17 682.398 L1195.61 682.398 L1195.05 682.398 L1194.49 682.398 L1193.93 682.398 L1193.37 682.398 L1192.81 682.398 L1192.25 682.398 L1191.7 682.398 L1191.14 682.398 L1190.58 682.398 L1190.02 682.398 L1189.46 682.398 L1188.9 682.398 L1188.34 682.398 L1187.78 682.398 L1187.22 682.398 L1186.66 682.398 L1186.1 682.398 L1185.54 682.398 L1184.98 682.398 L1184.43 682.398 L1183.87 682.398 L1183.31 682.398 L1182.75 682.398 L1182.19 682.398 L1181.63 682.398 L1181.07 682.398 L1180.51 682.398 L1179.95 682.398 L1179.39 682.398 L1178.83 682.398 L1178.27 682.398 L1177.71 682.398 L1177.15 682.398 L1176.6 682.398 L1176.04 682.398 L1175.48 682.398 L1174.92 682.398 L1174.36 682.398 L1173.8 682.398 L1173.24 682.398 L1172.68 682.398 L1172.12 682.398 L1171.56 682.398 L1171 682.398 L1170.44 682.398 L1169.88 682.398 L1169.33 682.398 L1168.77 682.398 L1168.21 682.398 L1167.65 682.398 L1167.09 682.398 L1166.53 682.398 L1165.97 682.398 L1165.41 682.398 L1164.85 682.398 L1164.29 682.398 L1163.73 682.398 L1163.17 682.398 L1162.61 682.398 L1162.05 682.398 L1161.5 682.398 L1160.94 682.398 L1160.38 682.398 L1159.82 682.398 L1159.26 682.398 L1158.7 682.398 L1158.14 682.398 L1157.58 682.398 L1157.02 682.398 L1156.46 682.398 L1155.9 682.398 L1155.34 682.398 L1154.78 682.398 L1154.23 682.398 L1153.67 682.398 L1153.11 682.398 L1152.55 682.398 L1151.99 682.398 L1151.43 682.398 L1150.87 682.398 L1150.31 682.398 L1149.75 682.398 L1149.19 682.398 L1148.63 682.398 L1148.07 682.398 L1147.51 682.398 L1146.96 682.398 L1146.4 682.398 L1145.84 682.398 L1145.28 682.398 L1144.72 682.398 L1144.16 682.398 L1143.6 682.398 L1143.04 682.398 L1142.48 682.398 L1141.92 682.398 L1141.36 682.398 L1140.8 682.398 L1140.24 682.398 L1139.68 682.398 L1139.13 682.398 L1138.57 682.398 L1138.01 682.398 L1137.45 682.398 L1136.89 682.398 L1136.33 682.398 L1135.77 682.398 L1135.21 682.398 L1134.65 682.398 L1134.09 682.398 L1133.53 682.398 L1132.97 682.398 L1132.41 682.398 L1131.86 682.398 L1131.3 682.398 L1130.74 682.398 L1130.18 682.398 L1129.62 682.398 L1129.06 682.398 L1128.5 682.398 L1127.94 682.398 L1127.38 682.398 L1126.82 682.398 L1126.26 682.398 L1125.7 682.398 L1125.14 682.398 L1124.59 682.398 L1124.03 682.398 L1123.47 682.398 L1122.91 682.398 L1122.35 682.398 L1121.79 682.398 L1121.23 682.398 L1120.67 682.398 L1120.11 682.398 L1119.55 682.398 L1118.99 682.398 L1118.43 682.398 L1117.87 682.398 L1117.31 682.398 L1116.76 682.398 L1116.2 682.398 L1115.64 682.398 L1115.08 682.398 L1114.52 682.398 L1113.96 682.398 L1113.4 682.398 L1112.84 682.398 L1112.28 682.398 L1111.72 682.398 L1111.16 682.398 L1110.6 682.398 L1110.04 682.398 L1109.49 682.398 L1108.93 682.398 L1108.37 682.398 L1107.81 682.398 L1107.25 682.398 L1106.69 682.398 L1106.13 682.398 L1105.57 682.398 L1105.01 682.398 L1104.45 682.398 L1103.89 682.398 L1103.33 682.398 L1102.77 682.398 L1102.22 682.398 L1101.66 682.398 L1101.1 682.398 L1100.54 682.398 L1099.98 682.398 L1099.42 682.398 L1098.86 682.398 L1098.3 682.398 L1097.74 682.398 L1097.18 682.398 L1096.62 682.398 L1096.06 682.398 L1095.5 682.398 L1094.94 682.398 L1094.39 682.398 L1093.83 682.398 L1093.27 682.398 L1092.71 682.398 L1092.15 682.398 L1091.59 682.398 L1091.03 682.398 L1090.47 682.398 L1089.91 682.398 L1089.35 682.398 L1088.79 682.398 L1088.23 682.398 L1087.67 682.398 L1087.12 682.398 L1086.56 682.398 L1086 682.398 L1085.44 682.398 L1084.88 682.398 L1084.32 682.398 L1083.76 682.398 L1083.2 682.398 L1082.64 682.398 L1082.08 682.398 L1081.52 682.398 L1080.96 682.398 L1080.4 682.398 L1079.85 682.398 L1079.29 682.398 L1078.73 682.398 L1078.17 682.398 L1077.61 682.398 L1077.05 682.398 L1076.49 682.398 L1075.93 682.398 L1075.37 682.398 L1074.81 682.398 L1074.25 682.398 L1073.69 682.398 L1073.13 682.398 L1072.57 682.398 L1072.02 682.398 L1071.46 682.398 L1070.9 682.398 L1070.34 682.398 L1069.78 682.398 L1069.22 682.398 L1068.66 682.398 L1068.1 682.398 L1067.54 682.398 L1066.98 682.398 L1066.42 682.398 L1065.86 682.398 L1065.3 682.398 L1064.75 682.398 L1064.19 682.398 L1063.63 682.398 L1063.07 682.398 L1062.51 682.398 L1061.95 682.398 L1061.39 682.398 L1060.83 682.398 L1060.27 682.398 L1059.71 682.398 L1059.15 682.398 L1058.59 682.398 L1058.03 682.398 L1057.48 682.398 L1056.92 682.398 L1056.36 682.398 L1055.8 682.398 L1055.24 682.398 L1054.68 682.398 L1054.12 682.398 L1053.56 682.398 L1053 682.398 L1052.44 682.398 L1051.88 682.398 L1051.32 682.398 L1050.76 682.398 L1050.2 682.398 L1049.65 682.398 L1049.09 682.398 L1048.53 682.398 L1047.97 682.398 L1047.41 682.398 L1046.85 682.398 L1046.29 682.398 L1045.73 682.398 L1045.17 682.398 L1044.61 682.398 L1044.05 682.398 L1043.49 682.398 L1042.93 682.398 L1042.38 682.398 L1041.82 682.398 L1041.26 682.398 L1040.7 682.398 L1040.14 682.398 L1039.58 682.398 L1039.02 682.398 L1038.46 682.398 L1037.9 682.398 L1037.34 682.398 L1036.78 682.398 L1036.22 682.398 L1035.66 682.398 L1035.1 682.398 L1034.55 682.398 L1033.99 682.398 L1033.43 682.398 L1032.87 682.398 L1032.31 682.398 L1031.75 682.398 L1031.19 682.398 L1030.63 682.398 L1030.07 682.398 L1029.51 682.398 L1028.95 682.398 L1028.39 682.398 L1027.83 682.398 L1027.28 682.398 L1026.72 682.398 L1026.16 682.398 L1025.6 682.398 L1025.04 682.398 L1024.48 682.398 L1023.92 682.398 L1023.36 682.398 L1022.8 682.398 L1022.24 682.398 L1021.68 682.398 L1021.12 682.398 L1020.56 682.398 L1020.01 682.398 L1019.45 682.398 L1018.89 682.398 L1018.33 682.398 L1017.77 682.398 L1017.21 682.398 L1016.65 682.398 L1016.09 682.398 L1015.53 682.398 L1014.97 682.398 L1014.41 682.398 L1013.85 682.398 L1013.29 682.398 L1012.73 682.398 L1012.18 682.398 L1011.62 682.398 L1011.06 682.398 L1010.5 682.398 L1009.94 682.398 L1009.38 682.398 L1008.82 682.398 L1008.26 682.398 L1007.7 682.398 L1007.14 682.398 L1006.58 682.398 L1006.02 682.398 L1005.46 682.398 L1004.91 682.398 L1004.35 682.398 L1003.79 682.398 L1003.23 682.398 L1002.67 682.398 L1002.11 682.398 L1001.55 682.398 L1000.99 682.398 L1000.43 682.398 L999.872 682.398 L999.313 682.398 L998.754 682.398 L998.194 682.398 L997.635 682.398 L997.076 682.398 L996.517 682.398 L995.957 682.398 L995.398 682.398 L994.839 682.398 L994.28 682.398 L993.72 682.398 L993.161 682.398 L992.602 682.398 L992.043 682.398 L991.483 682.398 L990.924 682.398 L990.365 682.398 L989.806 682.398 L989.246 682.398 L988.687 682.398 L988.128 682.398 L987.569 682.398 L987.009 682.398 L986.45 682.398 L985.891 682.398 L985.332 682.398 L984.772 682.398 L984.213 682.398 L983.654 682.398 L983.095 682.398 L982.535 682.398 L981.976 682.398 L981.417 682.398 L980.858 682.398 L980.298 682.398 L979.739 682.398 L979.18 682.398 L978.621 682.398 L978.061 682.398 L977.502 682.398 L976.943 682.398 L976.384 682.398 L975.824 682.398 L975.265 682.398 L974.706 682.398 L974.147 682.398 L973.587 682.398 L973.028 682.398 L972.469 682.398 L971.91 682.398 L971.35 682.398 L970.791 682.398 L970.232 682.398 L969.673 682.398 L969.113 682.398 L968.554 682.398 L967.995 682.398 L967.436 682.398 L966.876 682.398 L966.317 682.398 L965.758 682.398 L965.199 682.398 L964.639 682.398 L964.08 682.398 L963.521 682.398 L962.962 682.398 L962.402 682.398 L961.843 682.398 L961.284 682.398 L960.725 682.398 L960.165 682.398 L959.606 682.398 L959.047 682.398 L958.488 682.398 L957.928 682.398 L957.369 682.398 L956.81 682.398 L956.251 682.398 L955.691 682.398 L955.132 682.398 L954.573 682.398 L954.014 682.398 L953.454 682.398 L952.895 682.398 L952.336 682.398 L951.777 682.398 L951.217 682.398 L950.658 682.398 L950.099 682.398 L949.54 682.398 L948.98 682.398 L948.421 682.398 L947.862 682.398 L947.303 682.398 L946.743 682.398 L946.184 682.398 L945.625 682.398 L945.066 682.398 L944.506 682.398 L943.947 682.398 L943.388 682.398 L942.829 682.398 L942.269 682.398 L941.71 682.398 L941.151 682.398 L940.592 682.398 L940.032 682.398 L939.473 682.398 L938.914 682.398 L938.355 682.398 L937.795 682.398 L937.236 682.398 L936.677 682.398 L936.118 682.398 L935.558 682.398 L934.999 682.398 L934.44 682.398 L933.881 682.398 L933.321 682.398 L932.762 682.398 L932.203 682.398 L931.644 682.398 L931.084 682.398 L930.525 682.398 L929.966 682.398 L929.406 682.398 L928.847 682.398 L928.288 682.398 L927.729 682.398 L927.169 682.398 L926.61 682.398 L926.051 682.398 L925.492 682.398 L924.932 682.398 L924.373 682.398 L923.814 682.398 L923.255 682.398 L922.695 682.398 L922.136 682.398 L921.577 682.398 L921.018 682.398 L920.458 682.398 L919.899 682.398 L919.34 682.398 L918.781 682.398 L918.221 682.398 L917.662 682.398 L917.103 682.398 L916.544 682.398 L915.984 682.398 L915.425 682.398 L914.866 682.398 L914.307 682.398 L913.747 682.398 L913.188 682.398 L912.629 682.398 L912.07 682.398 L911.51 682.398 L910.951 682.398 L910.392 682.398 L909.833 682.398 L909.273 682.398 L908.714 682.398 L908.155 682.398 L907.596 682.398 L907.036 682.398 L906.477 682.398 L905.918 682.398 L905.359 682.398 L904.799 682.398 L904.24 682.398 L903.681 682.398 L903.122 682.398 L902.562 682.398 L902.003 682.398 L901.444 682.398 L900.885 682.398 L900.325 682.398 L899.766 682.398 L899.207 682.398 L898.648 682.398 L898.088 682.398 L897.529 682.398 L896.97 682.398 L896.411 682.398 L895.851 682.398 L895.292 682.398 L894.733 682.398 L894.174 682.398 L893.614 682.398 L893.055 682.398 L892.496 682.398 L891.937 682.398 L891.377 682.398 L890.818 682.398 L890.259 682.398 L889.7 682.398 L889.14 682.398 L888.581 682.398 L888.022 682.398 L887.463 682.398 L886.903 682.398 L886.344 682.398 L885.785 682.398 L885.226 682.398 L884.666 682.398 L884.107 682.398 L883.548 682.398 L882.989 682.398 L882.429 682.398 L881.87 682.398 L881.311 682.398 L880.752 682.398 L880.192 682.398 L879.633 682.398 L879.074 682.398 L878.515 682.398 L877.955 682.398 L877.396 682.398 L876.837 682.398 L876.278 682.398 L875.718 682.398 L875.159 682.398 L874.6 682.398 L874.041 682.398 L873.481 682.398 L872.922 682.398 L872.363 682.398 L871.804 682.398 L871.244 682.398 L870.685 682.398 L870.126 682.398 L869.567 682.398 L869.007 682.398 L868.448 682.398 L867.889 682.398 L867.33 682.398 L866.77 682.398 L866.211 682.398 L865.652 682.398 L865.093 682.398 L864.533 682.398 L863.974 682.398 L863.415 682.398 L862.856 682.398 L862.296 682.398 L861.737 682.398 L861.178 682.398 L860.619 682.398 L860.059 682.398 L859.5 682.398 L858.941 682.398 L858.382 682.398 L857.822 682.398 L857.263 682.398 L856.704 682.398 L856.145 682.398 L855.585 682.398 L855.026 682.398 L854.467 682.398 L853.908 682.398 L853.348 682.398 L852.789 682.398 L852.23 682.398 L851.671 682.398 L851.111 682.398 L850.552 682.398 L849.993 682.398 L849.434 682.398 L848.874 682.398 L848.315 682.398 L847.756 682.398 L847.197 682.398 L846.637 682.398 L846.078 682.398 L845.519 682.398 L844.96 682.398 L844.4 682.398 L843.841 682.398 L843.282 682.398 L842.723 682.398 L842.163 682.398 L841.604 682.398 L841.045 682.398 L840.486 682.398 L839.926 682.398 L839.367 682.398 L838.808 682.398 L838.249 682.398 L837.689 682.398 L837.13 682.398 L836.571 682.398 L836.012 682.398 L835.452 682.398 L834.893 682.398 L834.334 682.398 L833.775 682.398 L833.215 682.398 L832.656 682.398 L832.097 682.398 L831.538 682.398 L830.978 682.398 L830.419 682.398 L829.86 682.398 L829.301 682.398 L828.741 682.398 L828.182 682.398 L827.623 682.398 L827.064 682.398 L826.504 682.398 L825.945 682.398 L825.386 682.398 L824.827 682.398 L824.267 682.398 L823.708 682.398 L823.149 682.398 L822.59 682.398 L822.03 682.398 L821.471 682.398 L820.912 682.398 L820.353 682.398 L819.793 682.398 L819.234 682.398 L818.675 682.398 L818.116 682.398 L817.556 682.398 L816.997 682.398 L816.438 682.398 L815.879 682.398 L815.319 682.398 L814.76 682.398 L814.201 682.398 L813.642 682.398 L813.082 682.398 L812.523 682.398 L811.964 682.398 L811.405 682.398 L810.845 682.398 L810.286 682.398 L809.727 682.398 L809.168 682.398 L808.608 682.398 L808.049 682.398 L807.49 682.398 L806.931 682.398 L806.371 682.398 L805.812 682.398 L805.253 682.398 L804.693 682.398 L804.134 682.398 L803.575 682.398 L803.016 682.398 L802.456 682.398 L801.897 682.398 L801.338 682.398 L800.779 682.398 L800.219 682.398 L799.66 682.398 L799.101 682.398 L798.542 682.398 L797.982 682.398 L797.423 682.398 L796.864 682.398 L796.305 682.398 L795.745 682.398 L795.186 682.398 L794.627 682.398 L794.068 682.398 L793.508 682.398 L792.949 682.398 L792.39 682.398 L791.831 682.398 L791.271 682.398 L790.712 682.398 L790.153 682.398 L789.594 682.398 L789.034 682.398 L788.475 682.398 L787.916 682.398 L787.357 682.398 L786.797 682.398 L786.238 682.398 L785.679 682.398 L785.12 682.398 L784.56 682.398 L784.001 682.398 L783.442 682.398 L782.883 682.398 L782.323 682.398 L781.764 682.398 L781.205 682.398 L780.646 682.398 L780.086 682.398 L779.527 682.398 L778.968 682.398 L778.409 682.398 L777.849 682.398 L777.29 682.398 L776.731 682.398 L776.172 682.398 L775.612 682.398 L775.053 682.398 L774.494 682.398 L773.935 682.398 L773.375 682.398 L772.816 682.398 L772.257 682.398 L771.698 682.398 L771.138 682.398 L770.579 682.398 L770.02 682.398 L769.461 682.398 L768.901 682.398 L768.342 682.398 L767.783 682.398 L767.224 682.398 L766.664 682.398 L766.105 682.398 L765.546 682.398 L764.987 682.398 L764.427 682.398 L763.868 682.398 L763.309 682.398 L762.75 682.398 L762.19 682.398 L761.631 682.398 L761.072 682.398 L760.513 682.398 L759.953 682.398 L759.394 682.398 L758.835 682.398 L758.276 682.398 L757.716 682.398 L757.157 682.398 L756.598 682.398 L756.039 682.398 L755.479 682.398 L754.92 682.398 L754.361 682.398 L753.802 682.398 L753.242 682.398 L752.683 682.398 L752.124 682.398 L751.565 682.398 L751.005 682.398 L750.446 682.398 L749.887 682.398 L749.328 682.398 L748.768 682.398 L748.209 682.398 L747.65 682.398 L747.091 682.398 L746.531 682.398 L745.972 682.398 L745.413 682.398 L744.854 682.398 L744.294 682.398 L743.735 682.398 L743.176 682.398 L742.617 682.398 L742.057 682.398 L741.498 682.398 L740.939 682.398 L740.38 682.398 L739.82 682.398 L739.261 682.398 L738.702 682.398 L738.143 682.398 L737.583 682.398 L737.024 682.398 L736.465 682.398 L735.906 682.398 L735.346 682.398 L734.787 682.398 L734.228 682.398 L733.669 682.398 L733.109 682.398 L732.55 682.398 L731.991 682.398 L731.432 682.398 L730.872 682.398 L730.313 682.398 L729.754 682.398 L729.195 682.398 L728.635 682.398 L728.076 682.398 L727.517 682.398 L726.958 682.398 L726.398 682.398 L725.839 682.398 L725.28 682.398 L724.721 682.398 L724.161 682.398 L723.602 682.398 L723.043 682.398 L722.484 682.398 L721.924 682.398 L721.365 682.398 L720.806 682.398 L720.247 682.398  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.523 720.806,683.523 721.365,683.523 721.924,683.523 722.484,683.523 723.043,683.523 723.602,683.523 724.161,683.523 724.721,683.523 725.28,683.523 725.839,683.523 726.398,683.523 726.958,683.523 727.517,683.523 728.076,683.523 728.635,683.523 729.195,683.523 729.754,683.523 730.313,683.523 730.872,683.523 731.432,683.523 731.991,683.523 732.55,683.523 733.109,683.523 733.669,683.523 734.228,683.523 734.787,683.523 735.346,683.523 735.906,683.523 736.465,683.523 737.024,683.523 737.583,683.523 738.143,683.523 738.702,683.523 739.261,683.523 739.82,683.523 740.38,683.523 740.939,683.523 741.498,683.523 742.057,683.523 742.617,683.523 743.176,683.523 743.735,683.523 744.294,683.523 744.854,683.523 745.413,683.523 745.972,683.523 746.531,683.523 747.091,683.523 747.65,683.523 748.209,683.523 748.768,683.523 749.328,683.523 749.887,683.523 750.446,683.523 751.005,683.523 751.565,683.523 752.124,683.523 752.683,683.523 753.242,683.523 753.802,683.523 754.361,683.523 754.92,683.523 755.479,683.523 756.039,683.523 756.598,683.523 757.157,683.523 757.716,683.523 758.276,683.523 758.835,683.523 759.394,683.523 759.953,683.523 760.513,683.523 761.072,683.523 761.631,683.523 762.19,683.523 762.75,683.523 763.309,683.523 763.868,683.523 764.427,683.523 764.987,683.523 765.546,683.523 766.105,683.523 766.664,683.523 767.224,683.523 767.783,683.523 768.342,683.523 768.901,683.523 769.461,683.523 770.02,683.523 770.579,683.523 771.138,683.523 771.698,683.523 772.257,683.523 772.816,683.523 773.375,683.523 773.935,683.523 774.494,683.523 775.053,683.523 775.612,683.523 776.172,683.523 776.731,683.523 777.29,683.523 777.849,683.523 778.409,683.523 778.968,683.523 779.527,683.523 780.086,683.523 780.646,683.523 781.205,683.523 781.764,683.523 782.323,683.523 782.883,683.523 783.442,683.523 784.001,683.523 784.56,683.523 785.12,683.523 785.679,683.523 786.238,683.523 786.797,683.523 787.357,683.523 787.916,683.523 788.475,683.523 789.034,683.523 789.594,683.523 790.153,683.523 790.712,683.523 791.271,683.523 791.831,683.523 792.39,683.523 792.949,683.523 793.508,683.523 794.068,683.523 794.627,683.523 795.186,683.523 795.745,683.523 796.305,683.523 796.864,683.523 797.423,683.523 797.982,683.523 798.542,683.523 799.101,683.523 799.66,683.523 800.219,683.523 800.779,683.523 801.338,683.523 801.897,683.523 802.456,683.523 803.016,683.523 803.575,683.523 804.134,683.523 804.693,683.523 805.253,683.523 805.812,683.523 806.371,683.523 806.931,683.523 807.49,683.523 808.049,683.523 808.608,683.523 809.168,683.523 809.727,683.523 810.286,683.523 810.845,683.523 811.405,683.523 811.964,683.523 812.523,683.523 813.082,683.523 813.642,683.523 814.201,683.523 814.76,683.523 815.319,683.523 815.879,683.523 816.438,683.523 816.997,683.523 817.556,683.523 818.116,683.523 818.675,683.523 819.234,683.523 819.793,683.523 820.353,683.523 820.912,683.523 821.471,683.523 822.03,683.523 822.59,683.523 823.149,683.523 823.708,683.523 824.267,683.523 824.827,683.523 825.386,683.523 825.945,683.523 826.504,683.523 827.064,683.523 827.623,683.523 828.182,683.523 828.741,683.523 829.301,683.523 829.86,683.523 830.419,683.523 830.978,683.523 831.538,683.523 832.097,683.523 832.656,683.523 833.215,683.523 833.775,683.523 834.334,683.523 834.893,683.523 835.452,683.523 836.012,683.523 836.571,683.523 837.13,683.523 837.689,683.523 838.249,683.523 838.808,683.523 839.367,683.523 839.926,683.523 840.486,683.523 841.045,683.523 841.604,683.523 842.163,683.523 842.723,683.523 843.282,683.523 843.841,683.523 844.4,683.523 844.96,683.523 845.519,683.523 846.078,683.523 846.637,683.523 847.197,683.523 847.756,683.523 848.315,683.523 848.874,683.523 849.434,683.523 849.993,683.523 850.552,683.523 851.111,683.523 851.671,683.523 852.23,683.523 852.789,683.523 853.348,683.523 853.908,683.523 854.467,683.523 855.026,683.523 855.585,683.523 856.145,683.523 856.704,683.523 857.263,683.523 857.822,683.523 858.382,683.523 858.941,683.523 859.5,683.523 860.059,683.523 860.619,683.523 861.178,683.523 861.737,683.523 862.296,683.523 862.856,683.523 863.415,683.523 863.974,683.523 864.533,683.523 865.093,683.523 865.652,683.523 866.211,683.523 866.77,683.523 867.33,683.523 867.889,683.523 868.448,683.523 869.007,683.523 869.567,683.523 870.126,683.523 870.685,683.523 871.244,683.523 871.804,683.523 872.363,683.523 872.922,683.523 873.481,683.523 874.041,683.523 874.6,683.523 875.159,683.523 875.718,683.523 876.278,683.523 876.837,683.523 877.396,683.523 877.955,683.523 878.515,683.523 879.074,683.523 879.633,683.523 880.192,683.523 880.752,683.523 881.311,683.523 881.87,683.523 882.429,683.523 882.989,683.523 883.548,683.523 884.107,683.523 884.666,683.523 885.226,683.523 885.785,683.523 886.344,683.523 886.903,683.523 887.463,683.523 888.022,683.523 888.581,683.523 889.14,683.523 889.7,683.523 890.259,683.523 890.818,683.523 891.377,683.523 891.937,683.523 892.496,683.523 893.055,683.523 893.614,683.523 894.174,683.523 894.733,683.523 895.292,683.523 895.851,683.523 896.411,683.523 896.97,683.523 897.529,683.523 898.088,683.523 898.648,683.523 899.207,683.523 899.766,683.523 900.325,683.523 900.885,683.523 901.444,683.523 902.003,683.523 902.562,683.523 903.122,683.523 903.681,683.523 904.24,683.523 904.799,683.523 905.359,683.523 905.918,683.523 906.477,683.523 907.036,683.523 907.596,683.523 908.155,683.523 908.714,683.523 909.273,683.523 909.833,683.523 910.392,683.523 910.951,683.523 911.51,683.523 912.07,683.523 912.629,683.523 913.188,683.523 913.747,683.523 914.307,683.523 914.866,683.523 915.425,683.523 915.984,683.523 916.544,683.523 917.103,683.523 917.662,683.523 918.221,683.523 918.781,683.523 919.34,683.523 919.899,683.523 920.458,683.523 921.018,683.523 921.577,683.523 922.136,683.523 922.695,683.523 923.255,683.523 923.814,683.523 924.373,683.523 924.932,683.523 925.492,683.523 926.051,683.523 926.61,683.523 927.169,683.523 927.729,683.523 928.288,683.523 928.847,683.523 929.406,683.523 929.966,683.523 930.525,683.523 931.084,683.523 931.644,683.523 932.203,683.523 932.762,683.523 933.321,683.523 933.881,683.523 934.44,683.523 934.999,683.523 935.558,683.523 936.118,683.523 936.677,683.523 937.236,683.523 937.795,683.523 938.355,683.523 938.914,683.523 939.473,683.523 940.032,683.523 940.592,683.523 941.151,683.523 941.71,683.523 942.269,683.523 942.829,683.523 943.388,683.523 943.947,683.523 944.506,683.523 945.066,683.523 945.625,683.523 946.184,683.523 946.743,683.523 947.303,683.523 947.862,683.523 948.421,683.523 948.98,683.523 949.54,683.523 950.099,683.523 950.658,683.523 951.217,683.523 951.777,683.523 952.336,683.523 952.895,683.523 953.454,683.523 954.014,683.523 954.573,683.523 955.132,683.523 955.691,683.523 956.251,683.523 956.81,683.523 957.369,683.523 957.928,683.523 958.488,683.523 959.047,683.523 959.606,683.523 960.165,683.523 960.725,683.523 961.284,683.523 961.843,683.523 962.402,683.523 962.962,683.523 963.521,683.523 964.08,683.523 964.639,683.523 965.199,683.523 965.758,683.523 966.317,683.523 966.876,683.523 967.436,683.523 967.995,683.523 968.554,683.523 969.113,683.523 969.673,683.523 970.232,683.523 970.791,683.523 971.35,683.523 971.91,683.523 972.469,683.523 973.028,683.523 973.587,683.523 974.147,683.523 974.706,683.523 975.265,683.523 975.824,683.523 976.384,683.523 976.943,683.523 977.502,683.523 978.061,683.523 978.621,683.523 979.18,683.523 979.739,683.523 980.298,683.523 980.858,683.523 981.417,683.523 981.976,683.523 982.535,683.523 983.095,683.523 983.654,683.523 984.213,683.523 984.772,683.523 985.332,683.523 985.891,683.523 986.45,683.523 987.009,683.523 987.569,683.523 988.128,683.523 988.687,683.523 989.246,683.523 989.806,683.523 990.365,683.523 990.924,683.523 991.483,683.523 992.043,683.523 992.602,683.523 993.161,683.523 993.72,683.523 994.28,683.523 994.839,683.523 995.398,683.523 995.957,683.523 996.517,683.523 997.076,683.523 997.635,683.523 998.194,683.523 998.754,683.523 999.313,683.523 999.872,683.523 1000.43,683.523 1000.99,683.523 1001.55,683.523 1002.11,683.523 1002.67,683.523 1003.23,683.523 1003.79,683.523 1004.35,683.523 1004.91,683.523 1005.46,683.523 1006.02,683.523 1006.58,683.523 1007.14,683.523 1007.7,683.523 1008.26,683.523 1008.82,683.523 1009.38,683.523 1009.94,683.523 1010.5,683.523 1011.06,683.523 1011.62,683.523 1012.18,683.523 1012.73,683.523 1013.29,683.523 1013.85,683.523 1014.41,683.523 1014.97,683.523 1015.53,683.523 1016.09,683.523 1016.65,683.523 1017.21,683.523 1017.77,683.523 1018.33,683.523 1018.89,683.523 1019.45,683.523 1020.01,683.523 1020.56,683.523 1021.12,683.523 1021.68,683.523 1022.24,683.523 1022.8,683.523 1023.36,683.523 1023.92,683.523 1024.48,683.523 1025.04,683.523 1025.6,683.523 1026.16,683.523 1026.72,683.523 1027.28,683.523 1027.83,683.523 1028.39,683.523 1028.95,683.523 1029.51,683.523 1030.07,683.523 1030.63,683.523 1031.19,683.523 1031.75,683.523 1032.31,683.523 1032.87,683.523 1033.43,683.523 1033.99,683.523 1034.55,683.523 1035.1,683.523 1035.66,683.523 1036.22,683.523 1036.78,683.523 1037.34,683.523 1037.9,683.523 1038.46,683.523 1039.02,683.523 1039.58,683.523 1040.14,683.523 1040.7,683.523 1041.26,683.523 1041.82,683.523 1042.38,683.523 1042.93,683.523 1043.49,683.523 1044.05,683.523 1044.61,683.523 1045.17,683.523 1045.73,683.523 1046.29,683.523 1046.85,683.523 1047.41,683.523 1047.97,683.523 1048.53,683.523 1049.09,683.523 1049.65,683.523 1050.2,683.523 1050.76,683.523 1051.32,683.523 1051.88,683.523 1052.44,683.523 1053,683.523 1053.56,683.523 1054.12,683.523 1054.68,683.523 1055.24,683.523 1055.8,683.523 1056.36,683.523 1056.92,683.523 1057.48,683.523 1058.03,683.523 1058.59,683.523 1059.15,683.523 1059.71,683.523 1060.27,683.523 1060.83,683.523 1061.39,683.523 1061.95,683.523 1062.51,683.523 1063.07,683.523 1063.63,683.523 1064.19,683.523 1064.75,683.523 1065.3,683.523 1065.86,683.523 1066.42,683.523 1066.98,683.523 1067.54,683.523 1068.1,683.523 1068.66,683.523 1069.22,683.523 1069.78,683.523 1070.34,683.523 1070.9,683.523 1071.46,683.523 1072.02,683.523 1072.57,683.523 1073.13,683.523 1073.69,683.523 1074.25,683.523 1074.81,683.523 1075.37,683.523 1075.93,683.523 1076.49,683.523 1077.05,683.523 1077.61,683.523 1078.17,683.523 1078.73,683.523 1079.29,683.523 1079.85,683.523 1080.4,683.523 1080.96,683.523 1081.52,683.523 1082.08,683.523 1082.64,683.523 1083.2,683.523 1083.76,683.523 1084.32,683.523 1084.88,683.523 1085.44,683.523 1086,683.523 1086.56,683.523 1087.12,683.523 1087.67,683.523 1088.23,683.523 1088.79,683.523 1089.35,683.523 1089.91,683.523 1090.47,683.523 1091.03,683.523 1091.59,683.523 1092.15,683.523 1092.71,683.523 1093.27,683.523 1093.83,683.523 1094.39,683.523 1094.94,683.523 1095.5,683.523 1096.06,683.523 1096.62,683.523 1097.18,683.523 1097.74,683.523 1098.3,683.523 1098.86,683.523 1099.42,683.523 1099.98,683.523 1100.54,683.523 1101.1,683.523 1101.66,683.523 1102.22,683.523 1102.77,683.523 1103.33,683.523 1103.89,683.523 1104.45,683.523 1105.01,683.523 1105.57,683.523 1106.13,683.523 1106.69,683.523 1107.25,683.523 1107.81,683.523 1108.37,683.523 1108.93,683.523 1109.49,683.523 1110.04,683.523 1110.6,683.523 1111.16,683.523 1111.72,683.523 1112.28,683.523 1112.84,683.523 1113.4,683.523 1113.96,683.523 1114.52,683.523 1115.08,683.523 1115.64,683.523 1116.2,683.523 1116.76,683.523 1117.31,683.523 1117.87,683.523 1118.43,683.523 1118.99,683.523 1119.55,683.523 1120.11,683.523 1120.67,683.523 1121.23,683.523 1121.79,683.523 1122.35,683.523 1122.91,683.523 1123.47,683.523 1124.03,683.523 1124.59,683.523 1125.14,683.523 1125.7,683.523 1126.26,683.523 1126.82,683.523 1127.38,683.523 1127.94,683.523 1128.5,683.523 1129.06,683.523 1129.62,683.523 1130.18,683.523 1130.74,683.523 1131.3,683.523 1131.86,683.523 1132.41,683.523 1132.97,683.523 1133.53,683.523 1134.09,683.523 1134.65,683.523 1135.21,683.523 1135.77,683.523 1136.33,683.523 1136.89,683.523 1137.45,683.523 1138.01,683.523 1138.57,683.523 1139.13,683.523 1139.68,683.523 1140.24,683.523 1140.8,683.523 1141.36,683.523 1141.92,683.523 1142.48,683.523 1143.04,683.523 1143.6,683.523 1144.16,683.523 1144.72,683.523 1145.28,683.523 1145.84,683.523 1146.4,683.523 1146.96,683.523 1147.51,683.523 1148.07,683.523 1148.63,683.523 1149.19,683.523 1149.75,683.523 1150.31,683.523 1150.87,683.523 1151.43,683.523 1151.99,683.523 1152.55,683.523 1153.11,683.523 1153.67,683.523 1154.23,683.523 1154.78,683.523 1155.34,683.523 1155.9,683.523 1156.46,683.523 1157.02,683.523 1157.58,683.523 1158.14,683.523 1158.7,683.523 1159.26,683.523 1159.82,683.523 1160.38,683.523 1160.94,683.523 1161.5,683.523 1162.05,683.523 1162.61,683.523 1163.17,683.523 1163.73,683.523 1164.29,683.523 1164.85,683.523 1165.41,683.523 1165.97,683.523 1166.53,683.523 1167.09,683.523 1167.65,683.523 1168.21,683.523 1168.77,683.523 1169.33,683.523 1169.88,683.523 1170.44,683.523 1171,683.523 1171.56,683.523 1172.12,683.523 1172.68,683.523 1173.24,683.523 1173.8,683.523 1174.36,683.523 1174.92,683.523 1175.48,683.523 1176.04,683.523 1176.6,683.523 1177.15,683.523 1177.71,683.523 1178.27,683.523 1178.83,683.523 1179.39,683.523 1179.95,683.523 1180.51,683.523 1181.07,683.523 1181.63,683.523 1182.19,683.523 1182.75,683.523 1183.31,683.523 1183.87,683.523 1184.43,683.523 1184.98,683.523 1185.54,683.523 1186.1,683.523 1186.66,683.523 1187.22,683.523 1187.78,683.523 1188.34,683.523 1188.9,683.523 1189.46,683.523 1190.02,683.523 1190.58,683.523 1191.14,683.523 1191.7,683.523 1192.25,683.523 1192.81,683.523 1193.37,683.523 1193.93,683.523 1194.49,683.523 1195.05,683.523 1195.61,683.523 1196.17,683.523 1196.73,683.523 1197.29,683.523 1197.85,683.523 1198.41,683.523 1198.97,683.523 1199.52,683.523 1200.08,683.523 1200.64,683.523 1201.2,683.523 1201.76,683.523 1202.32,683.523 1202.88,683.523 1203.44,683.523 1204,683.523 1204.56,683.523 1205.12,683.523 1205.68,683.523 1206.24,683.523 1206.8,683.523 1207.35,683.523 1207.91,683.523 1208.47,683.523 1209.03,683.523 1209.59,683.523 1210.15,683.523 1210.71,683.523 1211.27,683.523 1211.83,683.523 1212.39,683.523 1212.95,683.523 1213.51,683.523 1214.07,683.523 1214.62,683.523 1215.18,683.523 1215.74,683.523 1216.3,683.523 1216.86,683.523 1217.42,683.523 1217.98,683.523 1218.54,683.523 1219.1,683.523 1219.66,683.523 1220.22,683.523 1220.78,683.523 1221.34,683.523 1221.89,683.523 1222.45,683.523 1223.01,683.523 1223.57,683.523 1224.13,683.523 1224.69,683.523 1225.25,683.523 1225.81,683.523 1226.37,683.523 1226.93,683.523 1227.49,683.523 1228.05,683.523 1228.61,683.523 1229.17,683.523 1229.72,683.523 1230.28,683.523 1230.84,683.523 1231.4,683.523 1231.96,683.523 1232.52,683.523 1233.08,683.523 1233.64,683.523 1234.2,683.523 1234.76,683.523 1235.32,683.523 1235.88,683.523 1236.44,683.523 1236.99,683.523 1237.55,683.523 1238.11,683.523 1238.67,683.523 1239.23,683.523 1239.79,683.523 1240.35,683.523 1240.91,683.523 1241.47,683.523 1242.03,683.523 1242.59,683.523 1243.15,683.523 1243.71,683.523 1244.26,683.523 1244.82,683.523 1245.38,683.523 1245.94,683.523 1246.5,683.523 1247.06,683.523 1247.62,683.523 1248.18,683.523 1248.74,683.523 1249.3,683.523 1249.86,683.523 1250.42,683.523 1250.98,683.523 1251.54,683.523 1252.09,683.523 1252.65,683.523 1253.21,683.523 1253.77,683.523 1254.33,683.523 1254.89,683.523 1255.45,683.523 1256.01,683.523 1256.57,683.523 1257.13,683.523 1257.69,683.523 1258.25,683.523 1258.81,683.523 1259.36,683.523 1259.92,683.523 1260.48,683.523 1261.04,683.523 1261.6,683.523 1262.16,683.523 1262.72,683.523 1263.28,683.523 1263.84,683.523 1264.4,683.523 1264.96,683.523 1265.52,683.523 1266.08,683.523 1266.63,683.523 1267.19,683.523 1267.75,683.523 1268.31,683.523 1268.87,683.523 1269.43,683.523 1269.99,683.523 1270.55,683.523 1271.11,683.523 1271.67,683.523 1272.23,683.523 1272.79,683.523 1273.35,683.523 1273.91,683.523 1274.46,683.523 1275.02,683.523 1275.58,683.523 1276.14,683.523 1276.7,683.523 1277.26,683.523 1277.82,683.523 1278.38,683.523 1278.94,683.523 1279.5,683.523 1280.06,683.523 1280.62,683.523 1281.18,683.523 1281.73,683.523 1282.29,683.523 1282.85,683.523 1283.41,683.523 1283.97,683.523 1284.53,683.523 1285.09,683.523 1285.65,683.523 1286.21,683.523 1286.77,683.523 1287.33,683.523 1287.89,683.523 1288.45,683.523 1289,683.523 1289.56,683.523 1290.12,683.523 1290.68,683.523 1291.24,683.523 1291.8,683.523 1292.36,683.523 1292.92,683.523 1293.48,683.523 1294.04,683.523 1294.6,683.523 1295.16,683.523 1295.72,683.523 1296.28,683.523 1296.83,683.523 1297.39,683.523 1297.95,683.523 1298.51,683.523 1299.07,683.523 1299.63,683.523 1300.19,683.523 1300.75,683.523 1301.31,683.523 1301.87,683.523 1302.43,683.523 1302.99,683.523 1303.55,683.523 1304.1,683.523 1304.66,683.523 1305.22,683.523 1305.78,683.523 1306.34,683.523 1306.9,683.523 1307.46,683.523 1308.02,683.523 1308.58,683.523 1309.14,683.523 1309.7,683.523 1310.26,683.523 1310.82,683.523 1311.38,683.523 1311.93,683.523 1312.49,683.523 1313.05,683.523 1313.61,683.523 1314.17,683.523 1314.73,683.523 1315.29,683.523 1315.85,683.523 1316.41,683.523 1316.97,683.523 1317.53,683.523 1318.09,683.523 1318.65,683.523 1319.2,683.523 1319.76,683.523 1320.32,683.523 1320.88,683.523 1321.44,683.523 1322,683.523 1322.56,683.523 1323.12,683.523 1323.68,683.523 1324.24,683.523 1324.8,683.523 1325.36,683.523 1325.92,683.523 1326.47,683.523 1327.03,683.523 1327.59,683.523 1328.15,683.523 1328.71,683.523 1329.27,683.523 1329.83,683.523 1330.39,683.523 1330.95,683.523 1331.51,683.523 1332.07,683.523 1332.63,683.523 1333.19,683.523 1333.75,683.523 1334.3,683.523 1334.86,683.523 1335.42,683.523 1335.98,683.523 1336.54,683.523 1337.1,683.523 1337.66,683.523 1338.22,683.523 1338.78,683.523 1339.34,683.523 1339.9,683.523 1340.46,683.523 1341.02,683.523 1341.57,683.523 1342.13,683.523 1342.69,683.523 1343.25,683.523 1343.81,683.523 1344.37,683.523 1344.93,683.523 1345.49,683.523 1346.05,683.523 1346.61,683.523 1347.17,683.523 1347.73,683.523 1348.29,683.523 1348.84,683.523 1349.4,683.523 1349.96,683.523 1350.52,683.523 1351.08,683.523 1351.64,683.523 1352.2,683.523 1352.76,683.523 1353.32,683.523 1353.88,683.523 1354.44,683.523 1355,683.523 1355.56,683.523 1356.12,683.523 1356.67,683.523 1357.23,683.523 1357.79,683.523 1358.35,683.523 1358.91,683.523 1359.47,683.523 1360.03,683.523 1360.59,683.523 1361.15,683.523 1361.71,683.523 1362.27,683.523 1362.83,683.523 1363.39,683.523 1363.94,683.523 1364.5,683.523 1365.06,683.523 1365.62,683.523 1366.18,683.523 1366.74,683.523 1367.3,683.523 1367.86,683.523 1368.42,683.523 1368.98,683.523 1369.54,683.523 1370.1,683.523 1370.66,683.523 1371.21,683.523 1371.77,683.523 1372.33,683.523 1372.89,683.523 1373.45,683.523 1374.01,683.523 1374.57,683.523 1375.13,683.523 1375.69,683.523 1376.25,683.523 1376.81,683.523 1377.37,683.523 1377.93,683.523 1378.49,683.523 1379.04,683.523 1379.6,683.523 1380.16,683.523 1380.72,683.523 1381.28,683.523 1381.84,683.523 1382.4,683.523 1382.96,683.523 1383.52,683.523 1384.08,683.523 1384.64,683.523 1385.2,683.523 1385.76,683.523 1386.31,683.523 1386.87,683.523 1387.43,683.523 1387.99,683.523 1388.55,683.523 1389.11,683.523 1389.67,683.523 1390.23,683.523 1390.79,683.523 1391.35,683.523 1391.91,683.523 1392.47,683.523 1393.03,683.523 1393.58,683.523 1394.14,683.523 1394.7,683.523 1395.26,683.523 1395.82,683.523 1396.38,683.523 1396.94,683.523 1397.5,683.523 1398.06,683.523 1398.62,683.523 1399.18,683.523 1399.74,683.523 1400.3,683.523 1400.86,683.523 1401.41,683.523 1401.97,683.523 1402.53,683.523 1403.09,683.523 1403.65,683.523 1404.21,683.523 1404.77,683.523 1405.33,683.523 1405.89,683.523 1406.45,683.523 1407.01,683.523 1407.57,683.523 1408.13,683.523 1408.68,683.523 1409.24,683.523 1409.8,683.523 1410.36,683.523 1410.92,683.523 1411.48,683.523 1412.04,683.523 1412.6,683.523 1413.16,683.523 1413.72,683.523 1414.28,683.523 1414.84,683.523 1415.4,683.523 1415.95,683.523 1416.51,683.523 1417.07,683.523 1417.63,683.523 1418.19,683.523 1418.75,683.523 1419.31,683.523 1419.87,683.523 1420.43,683.523 1420.99,683.523 1421.55,683.523 1422.11,683.523 1422.67,683.523 1423.23,683.523 1423.78,683.523 1424.34,683.523 1424.9,683.523 1425.46,683.523 1426.02,683.523 1426.58,683.523 1427.14,683.523 1427.7,683.523 1428.26,683.523 1428.82,683.523 1429.38,683.523 1429.94,683.523 1430.5,683.523 1431.05,683.523 1431.61,683.523 1432.17,683.523 1432.73,683.523 1433.29,683.523 1433.85,683.523 1434.41,683.523 1434.97,683.523 1435.53,683.523 1436.09,683.523 1436.65,683.523 1437.21,683.523 1437.77,683.523 1438.33,683.523 1438.88,683.523 1439.44,683.523 1440,683.523 1440.56,683.523 1441.12,683.523 1441.68,683.523 1442.24,683.523 1442.8,683.523 1443.36,683.523 1443.92,683.523 1444.48,683.523 1445.04,683.523 1445.6,683.523 1446.15,683.523 1446.71,683.523 1447.27,683.523 1447.83,683.523 1448.39,683.523 1448.95,683.523 1449.51,683.523 1450.07,683.523 1450.63,683.523 1451.19,683.523 1451.75,683.523 1452.31,683.523 1452.87,683.523 1453.42,683.523 1453.98,683.523 1454.54,683.523 1455.1,683.523 1455.66,683.523 1456.22,683.523 1456.78,683.523 1457.34,683.523 1457.9,683.523 1458.46,683.523 1459.02,683.523 1459.58,683.523 1460.14,683.523 1460.7,683.523 1461.25,683.523 1461.81,683.523 1462.37,683.523 1462.93,683.523 1463.49,683.523 1464.05,683.523 1464.61,683.523 1465.17,683.523 1465.73,683.523 1466.29,683.523 1466.85,683.523 1467.41,683.523 1467.97,683.523 1468.52,683.523 1469.08,683.523 1469.64,683.523 1470.2,683.523 1470.76,683.523 1471.32,683.523 1471.88,683.523 1472.44,683.523 1473,683.523 1473.56,683.523 1474.12,683.523 1474.68,683.523 1475.24,683.523 1475.79,683.523 1476.35,683.523 1476.91,683.523 1477.47,683.523 1478.03,683.523 1478.59,683.523 1479.15,683.523 1479.71,683.523 1480.27,683.523 1480.83,683.523 1481.39,683.523 1481.95,683.523 1482.51,683.523 1483.07,683.523 1483.62,683.523 1484.18,683.523 1484.74,683.523 1485.3,683.523 1485.86,683.523 1486.42,683.523 1486.98,683.523 1487.54,683.523 1488.1,683.523 1488.66,683.523 1489.22,683.523 1489.78,683.523 1490.34,683.523 1490.89,683.523 1491.45,683.523 1492.01,683.523 1492.57,683.523 1493.13,683.523 1493.69,683.523 1494.25,683.523 1494.81,683.523 1495.37,683.523 1495.93,683.523 1496.49,683.523 1497.05,683.523 1497.61,683.523 1498.16,683.523 1498.72,683.523 1499.28,683.523 1499.84,683.523 1500.4,683.523 1500.96,683.523 1501.52,683.523 1502.08,683.523 1502.64,683.523 1503.2,683.523 1503.76,683.523 1504.32,683.523 1504.88,683.523 1505.44,683.523 1505.99,683.523 1506.55,683.523 1507.11,683.523 1507.67,683.523 1508.23,683.523 1508.79,683.523 1509.35,683.523 1509.91,683.523 1510.47,683.523 1511.03,683.523 1511.59,683.523 1512.15,683.523 1512.71,683.523 1513.26,683.523 1513.82,683.523 1514.38,683.523 1514.94,683.523 1515.5,683.523 1516.06,683.523 1516.62,683.523 1517.18,683.523 1517.74,683.523 1518.3,683.523 1518.86,683.523 1519.42,683.523 1519.98,683.523 1520.53,683.523 1521.09,683.523 1521.65,683.523 1522.21,683.523 1522.77,683.523 1523.33,683.523 1523.89,683.523 1524.45,683.523 1525.01,683.523 1525.57,683.523 1526.13,683.523 1526.69,683.523 1527.25,683.523 1527.81,683.523 1528.36,683.523 1528.92,683.523 1529.48,683.523 1530.04,683.523 1530.6,683.523 1531.16,683.523 1531.72,683.523 1532.28,683.523 1532.84,683.523 1533.4,683.523 1533.96,683.523 1534.52,683.523 1535.08,683.523 1535.63,683.523 1536.19,683.523 1536.75,683.523 1537.31,683.523 1537.87,683.523 1538.43,683.523 1538.99,683.523 1539.55,683.523 1540.11,683.523 1540.67,683.523 1541.23,683.523 1541.79,683.523 1542.35,683.523 1542.9,683.523 1543.46,683.523 1544.02,683.523 1544.58,683.523 1545.14,683.523 1545.7,683.523 1546.26,683.523 1546.82,683.523 1547.38,683.523 1547.94,683.523 1548.5,683.523 1549.06,683.523 1549.62,683.523 1550.18,683.523 1550.73,683.523 1551.29,683.523 1551.85,683.523 1552.41,683.523 1552.97,683.523 1553.53,683.523 1554.09,683.523 1554.65,683.523 1555.21,683.523 1555.77,683.523 1556.33,683.523 1556.89,683.523 1557.45,683.523 1558,683.523 1558.56,683.523 1559.12,683.523 1559.68,683.523 1560.24,683.523 1560.8,683.523 1561.36,683.523 1561.92,683.523 1562.48,683.523 1563.04,683.523 1563.6,683.523 1564.16,683.523 1564.72,683.523 1565.28,683.523 1565.83,683.523 1566.39,683.523 1566.95,683.523 1567.51,683.523 1568.07,683.523 1568.63,683.523 1569.19,683.523 1569.75,683.523 1570.31,683.523 1570.87,683.523 1571.43,683.523 1571.99,683.523 1572.55,683.523 1573.1,683.523 1573.66,683.523 1574.22,683.523 1574.78,683.523 1575.34,683.523 1575.9,683.523 1576.46,683.523 1577.02,683.523 1577.58,683.523 1578.14,683.523 1578.7,683.523 1579.26,683.523 1579.82,683.523 1580.37,683.523 1580.93,683.523 1581.49,683.523 1582.05,683.523 1582.61,683.523 1583.17,683.523 1583.73,683.523 1584.29,683.523 1584.85,683.523 1585.41,683.523 1585.97,683.523 1586.53,683.523 1587.09,683.523 1587.65,683.523 1588.2,683.523 1588.76,683.523 1589.32,683.523 1589.88,683.523 1590.44,683.523 1591,683.523 1591.56,683.523 1592.12,683.523 1592.68,683.523 1593.24,683.523 1593.8,683.523 1594.36,683.523 1594.92,683.523 1595.47,683.523 1596.03,683.523 1596.59,683.523 1597.15,683.523 1597.71,683.523 1598.27,683.523 1598.83,683.523 1599.39,683.523 1599.95,683.523 1600.51,683.523 1601.07,683.523 1601.63,683.523 1602.19,683.523 1602.74,683.523 1603.3,683.523 1603.86,683.523 1604.42,683.523 1604.98,683.523 1605.54,683.523 1606.1,683.523 1606.66,683.523 1607.22,683.523 1607.78,683.523 1608.34,683.523 1608.9,683.523 1609.46,683.523 1610.02,683.523 1610.57,683.523 1611.13,683.523 1611.69,683.523 1612.25,683.523 1612.81,683.523 1613.37,683.523 1613.93,683.523 1614.49,683.523 1615.05,683.523 1615.61,683.523 1616.17,683.523 1616.73,683.523 1617.29,683.523 1617.84,683.523 1618.4,683.523 1618.96,683.523 1619.52,683.523 1620.08,683.523 1620.64,683.523 1621.2,683.523 1621.76,683.523 1622.32,683.523 1622.88,683.523 1623.44,683.523 1624,683.523 1624.56,683.523 1625.11,683.523 1625.67,683.523 1626.23,683.523 1626.79,683.523 1627.35,683.523 1627.91,683.523 1628.47,683.523 1629.03,683.523 1629.59,683.523 1630.15,683.523 1630.71,683.523 1631.27,683.523 1631.83,683.523 1632.39,683.523 1632.94,683.523 1633.5,683.523 1634.06,683.523 1634.62,683.523 1635.18,683.523 1635.74,683.523 1636.3,683.523 1636.86,683.523 1637.42,683.523 1637.98,683.523 1638.54,683.523 1639.1,683.523 1639.66,683.523 1640.21,683.523 1640.77,683.523 1641.33,683.523 1641.89,683.523 1642.45,683.523 1643.01,683.523 1643.57,683.523 1644.13,683.523 1644.69,683.523 1645.25,683.523 1645.81,683.523 1646.37,683.523 1646.93,683.523 1647.48,683.523 1648.04,683.523 1648.6,683.523 1649.16,683.523 1649.72,683.523 1650.28,683.523 1650.84,683.523 1651.4,683.523 1651.96,683.523 1652.52,683.523 1653.08,683.523 1653.64,683.523 1654.2,683.523 1654.76,683.523 1655.31,683.523 1655.87,683.523 1656.43,683.523 1656.99,683.523 1657.55,683.523 1658.11,683.523 1658.67,683.523 1659.23,683.523 1659.79,683.523 1660.35,683.523 1660.91,683.523 1661.47,683.523 1662.03,683.523 1662.58,683.523 1663.14,683.523 1663.7,683.523 1664.26,683.523 1664.82,683.523 1665.38,683.523 1665.94,683.523 1666.5,683.523 1667.06,683.523 1667.62,683.523 1668.18,683.523 1668.74,683.523 1669.3,683.523 1669.85,683.523 1670.41,683.523 1670.97,683.523 1671.53,683.523 1672.09,683.523 1672.65,683.523 1673.21,683.523 1673.77,683.523 1674.33,683.523 1674.89,683.523 1675.45,683.523 1676.01,683.523 1676.57,683.523 1677.13,683.523 1677.68,683.523 1678.24,683.523 1678.8,683.523 1679.36,683.523 1679.92,683.523 1680.48,683.523 1681.04,683.523 1681.6,683.523 1682.16,683.523 1682.72,683.523 1683.28,683.523 1683.84,683.523 1684.4,683.523 1684.95,683.523 1685.51,683.523 1686.07,683.523 1686.63,683.523 1687.19,683.523 1687.75,683.523 1688.31,683.523 1688.87,683.523 1689.43,683.523 1689.99,683.523 1690.55,683.523 1691.11,683.523 1691.67,683.523 1692.23,683.523 1692.78,683.523 1693.34,683.523 1693.9,683.523 1694.46,683.523 1695.02,683.523 1695.58,683.523 1696.14,683.523 1696.7,683.523 1697.26,683.523 1697.82,683.523 1698.38,683.523 1698.94,683.523 1699.5,683.523 1700.05,683.523 1700.61,683.523 1701.17,683.523 1701.73,683.523 1702.29,683.523 1702.85,683.523 1703.41,683.523 1703.97,683.523 1704.53,683.523 1705.09,683.523 1705.65,683.523 1706.21,683.523 1706.77,683.523 1707.32,683.523 1707.88,683.523 1708.44,683.523 1709,683.523 1709.56,683.523 1710.12,683.523 1710.68,683.523 1711.24,683.523 1711.8,683.523 1712.36,683.523 1712.92,683.523 1713.48,683.523 1714.04,683.523 1714.6,683.523 1715.15,683.523 1715.71,683.523 1716.27,683.523 1716.83,683.523 1717.39,683.523 1717.95,683.523 1718.51,683.523 1719.07,683.523 1719.63,683.523 1720.19,683.523 1720.75,683.523 1721.31,683.523 1721.87,683.523 1722.42,683.523 1722.98,683.523 1723.54,683.523 1724.1,683.523 1724.66,683.523 1725.22,683.523 1725.78,683.523 1726.34,683.523 1726.9,683.523 1727.46,683.523 1728.02,683.523 1728.58,683.523 1729.14,683.523 1729.69,683.523 1730.25,683.523 1730.81,683.523 1731.37,683.523 1731.93,683.523 1732.49,683.523 1733.05,683.523 1733.61,683.523 1734.17,683.523 1734.73,683.523 1735.29,683.523 1735.85,683.523 1736.41,683.523 1736.97,683.523 1737.52,683.523 1738.08,683.523 1738.64,683.523 1739.2,683.523 1739.76,683.523 1740.32,683.523 1740.88,683.523 1741.44,683.523 1742,683.523 1742.56,683.523 1743.12,683.523 1743.68,683.523 1744.24,683.523 1744.79,683.523 1745.35,683.523 1745.91,683.523 1746.47,683.523 1747.03,683.523 1747.59,683.523 1748.15,683.523 1748.71,683.523 1749.27,683.523 1749.83,683.523 1750.39,683.523 1750.95,683.523 1751.51,683.523 1752.06,683.523 1752.62,683.523 1753.18,683.523 1753.74,683.523 1754.3,683.523 1754.86,683.523 1755.42,683.523 1755.98,683.523 1756.54,683.523 1757.1,683.523 1757.66,683.523 1758.22,683.523 1758.78,683.523 1759.34,683.523 1759.89,683.523 1760.45,683.523 1761.01,683.523 1761.57,683.523 1762.13,683.523 1762.69,683.523 1763.25,683.523 1763.81,683.523 1764.37,683.523 1764.93,683.523 1765.49,683.523 1766.05,683.523 1766.61,683.523 1767.16,683.523 1767.72,683.523 1768.28,683.523 1768.84,683.523 1769.4,683.523 1769.96,683.523 1770.52,683.523 1771.08,683.523 1771.64,683.523 1772.2,683.523 1772.76,683.523 1773.32,683.523 1773.88,683.523 1774.43,683.523 1774.99,683.523 1775.55,683.523 1776.11,683.523 1776.67,683.523 1777.23,683.523 1777.79,683.523 1778.35,683.523 1778.91,683.523 1779.47,683.523 1780.03,683.523 1780.59,683.523 1781.15,683.523 1781.71,683.523 1782.26,683.523 1782.82,683.523 1783.38,683.523 1783.94,683.523 1784.5,683.523 1785.06,683.523 1785.62,683.523 1786.18,683.523 1786.74,683.523 1787.3,683.523 1787.86,683.523 1788.42,683.523 1788.98,683.523 1789.53,683.523 1790.09,683.523 1790.65,683.523 1791.21,683.523 1791.77,683.523 1792.33,683.523 1792.89,683.523 1793.45,683.523 1794.01,683.523 1794.57,683.523 1795.13,683.523 1795.69,683.523 1796.25,683.523 1796.8,683.523 1797.36,683.523 1797.92,683.523 1798.48,683.523 1799.04,683.523 1799.6,683.523 1800.16,683.523 1800.72,683.523 1801.28,683.523 1801.84,683.523 1802.4,683.523 1802.96,683.523 1803.52,683.523 1804.08,683.523 1804.63,683.523 1805.19,683.523 1805.75,683.523 1806.31,683.523 1806.87,683.523 1807.43,683.523 1807.99,683.523 1808.55,683.523 1809.11,683.523 1809.67,683.523 1810.23,683.523 1810.79,683.523 1811.35,683.523 1811.9,683.523 1812.46,683.523 1813.02,683.523 1813.58,683.523 1814.14,683.523 1814.7,683.523 1815.26,683.523 1815.82,683.523 1816.38,683.523 1816.94,683.523 1817.5,683.523 1818.06,683.523 1818.62,683.523 1819.18,683.523 1819.73,683.523 1820.29,683.523 1820.85,683.523 1821.41,683.523 1821.97,683.523 1822.53,683.523 1823.09,683.523 1823.65,683.523 1824.21,683.523 1824.77,683.523 1825.33,683.523 1825.89,683.523 1826.45,683.523 1827,683.523 1827.56,683.523 1828.12,683.523 1828.68,683.523 1829.24,683.523 1829.8,683.523 1830.36,683.523 1830.92,683.523 1831.48,683.523 1832.04,683.523 1832.6,683.523 1833.16,683.523 1833.72,683.523 1834.27,683.523 1834.83,683.523 1835.39,683.523 1835.95,683.523 1836.51,683.523 1837.07,683.523 1837.63,683.523 1838.19,683.523 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0319882880200035 ± 0.02446857557510398\nProjected Energy: -4.014771605542547 ± (0.005437487660919338, 0.00566075657963605)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.16323</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5185e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.4606e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5579e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.857e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.785e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3916e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.36312429161336\n -0.7590191922770888\n  0.13584182219620544\n  0.15789998694608975\n  0.8767114411781431\n  1.5305929970973366\n  1.5835732611867392\n  3.0728703303258698\n  3.1256726539518382\n  4.862107221562173\n  6.260694850380595\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
