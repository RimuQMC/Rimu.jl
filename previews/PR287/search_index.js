var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21676321877289956 ± 0.0016951963015205004\n   G2(1) = 0.9149759342713913 ± 0.0007457549772372621\n   G2(2) = 0.9828050117442826 ± 0.0006656802303657252\n   G2(3) = 0.9876748891957531 ± 0.0010450409044759784\n   G2(4) = 0.9828050117442826 ± 0.0006656802303657252\n   G2(5) = 0.9149759342713913 ± 0.0007457549772372621\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.086098083134091 ± 0.12396159952745558\n   Replica 2: -4.020297795122481 ± 0.14886896649897324\n   Replica 3: -4.146103805514443 ± 0.14376288679464078\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip690\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip691\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip692\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.58 2211.02,1003.58 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.333 2211.02,746.333 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.091 2211.02,489.091 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.848 2211.02,231.848 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.58 423.181,1003.58 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.333 423.181,746.333 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.091 423.181,489.091 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.848 423.181,231.848 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M290.043 1016.92 L306.363 1016.92 L306.363 1020.86 L284.418 1020.86 L284.418 1016.92 Q287.08 1014.17 291.664 1009.54 Q296.27 1004.88 297.451 1003.54 Q299.696 1001.02 300.576 999.282 Q301.478 997.523 301.478 995.833 Q301.478 993.078 299.534 991.342 Q297.613 989.606 294.511 989.606 Q292.312 989.606 289.858 990.37 Q287.427 991.134 284.65 992.685 L284.65 987.962 Q287.474 986.828 289.927 986.249 Q292.381 985.671 294.418 985.671 Q299.789 985.671 302.983 988.356 Q306.177 991.041 306.177 995.532 Q306.177 997.661 305.367 999.583 Q304.58 1001.48 302.474 1004.07 Q301.895 1004.74 298.793 1007.96 Q295.691 1011.16 290.043 1016.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M316.224 986.296 L334.58 986.296 L334.58 990.231 L320.506 990.231 L320.506 998.703 Q321.524 998.356 322.543 998.194 Q323.562 998.009 324.58 998.009 Q330.367 998.009 333.747 1001.18 Q337.126 1004.35 337.126 1009.77 Q337.126 1015.35 333.654 1018.45 Q330.182 1021.53 323.862 1021.53 Q321.687 1021.53 319.418 1021.16 Q317.173 1020.79 314.765 1020.05 L314.765 1015.35 Q316.849 1016.48 319.071 1017.04 Q321.293 1017.59 323.77 1017.59 Q327.774 1017.59 330.112 1015.49 Q332.45 1013.38 332.45 1009.77 Q332.45 1006.16 330.112 1004.05 Q327.774 1001.94 323.77 1001.94 Q321.895 1001.94 320.02 1002.36 Q318.168 1002.78 316.224 1003.66 L316.224 986.296 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M356.339 989.374 Q352.728 989.374 350.899 992.939 Q349.094 996.481 349.094 1003.61 Q349.094 1010.72 350.899 1014.28 Q352.728 1017.82 356.339 1017.82 Q359.973 1017.82 361.779 1014.28 Q363.608 1010.72 363.608 1003.61 Q363.608 996.481 361.779 992.939 Q359.973 989.374 356.339 989.374 M356.339 985.671 Q362.149 985.671 365.205 990.277 Q368.284 994.861 368.284 1003.61 Q368.284 1012.34 365.205 1016.94 Q362.149 1021.53 356.339 1021.53 Q350.529 1021.53 347.45 1016.94 Q344.395 1012.34 344.395 1003.61 Q344.395 994.861 347.45 990.277 Q350.529 985.671 356.339 985.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M286.062 729.053 L304.418 729.053 L304.418 732.988 L290.344 732.988 L290.344 741.461 Q291.363 741.113 292.381 740.951 Q293.4 740.766 294.418 740.766 Q300.205 740.766 303.585 743.937 Q306.964 747.109 306.964 752.525 Q306.964 758.104 303.492 761.206 Q300.02 764.285 293.701 764.285 Q291.525 764.285 289.256 763.914 Q287.011 763.544 284.603 762.803 L284.603 758.104 Q286.687 759.238 288.909 759.794 Q291.131 760.349 293.608 760.349 Q297.613 760.349 299.951 758.243 Q302.288 756.136 302.288 752.525 Q302.288 748.914 299.951 746.808 Q297.613 744.701 293.608 744.701 Q291.733 744.701 289.858 745.118 Q288.006 745.535 286.062 746.414 L286.062 729.053 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M326.177 732.132 Q322.566 732.132 320.737 735.697 Q318.932 739.238 318.932 746.368 Q318.932 753.474 320.737 757.039 Q322.566 760.581 326.177 760.581 Q329.811 760.581 331.617 757.039 Q333.446 753.474 333.446 746.368 Q333.446 739.238 331.617 735.697 Q329.811 732.132 326.177 732.132 M326.177 728.428 Q331.987 728.428 335.043 733.035 Q338.122 737.618 338.122 746.368 Q338.122 755.095 335.043 759.701 Q331.987 764.285 326.177 764.285 Q320.367 764.285 317.288 759.701 Q314.233 755.095 314.233 746.368 Q314.233 737.618 317.288 733.035 Q320.367 728.428 326.177 728.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M356.339 732.132 Q352.728 732.132 350.899 735.697 Q349.094 739.238 349.094 746.368 Q349.094 753.474 350.899 757.039 Q352.728 760.581 356.339 760.581 Q359.973 760.581 361.779 757.039 Q363.608 753.474 363.608 746.368 Q363.608 739.238 361.779 735.697 Q359.973 732.132 356.339 732.132 M356.339 728.428 Q362.149 728.428 365.205 733.035 Q368.284 737.618 368.284 746.368 Q368.284 755.095 365.205 759.701 Q362.149 764.285 356.339 764.285 Q350.529 764.285 347.45 759.701 Q344.395 755.095 344.395 746.368 Q344.395 737.618 347.45 733.035 Q350.529 728.428 356.339 728.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M284.835 471.811 L307.057 471.811 L307.057 473.802 L294.511 506.371 L289.627 506.371 L301.432 475.746 L284.835 475.746 L284.835 471.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M316.224 471.811 L334.58 471.811 L334.58 475.746 L320.506 475.746 L320.506 484.218 Q321.524 483.871 322.543 483.709 Q323.562 483.524 324.58 483.524 Q330.367 483.524 333.747 486.695 Q337.126 489.866 337.126 495.283 Q337.126 500.862 333.654 503.963 Q330.182 507.042 323.862 507.042 Q321.687 507.042 319.418 506.672 Q317.173 506.301 314.765 505.561 L314.765 500.862 Q316.849 501.996 319.071 502.551 Q321.293 503.107 323.77 503.107 Q327.774 503.107 330.112 501 Q332.45 498.894 332.45 495.283 Q332.45 491.672 330.112 489.565 Q327.774 487.459 323.77 487.459 Q321.895 487.459 320.02 487.876 Q318.168 488.292 316.224 489.172 L316.224 471.811 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M356.339 474.889 Q352.728 474.889 350.899 478.454 Q349.094 481.996 349.094 489.126 Q349.094 496.232 350.899 499.797 Q352.728 503.338 356.339 503.338 Q359.973 503.338 361.779 499.797 Q363.608 496.232 363.608 489.126 Q363.608 481.996 361.779 478.454 Q359.973 474.889 356.339 474.889 M356.339 471.186 Q362.149 471.186 365.205 475.792 Q368.284 480.376 368.284 489.126 Q368.284 497.852 365.205 502.459 Q362.149 507.042 356.339 507.042 Q350.529 507.042 347.45 502.459 Q344.395 497.852 344.395 489.126 Q344.395 480.376 347.45 475.792 Q350.529 471.186 356.339 471.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M256.664 245.193 L264.303 245.193 L264.303 218.828 L255.992 220.494 L255.992 216.235 L264.256 214.568 L268.932 214.568 L268.932 245.193 L276.571 245.193 L276.571 249.128 L256.664 249.128 L256.664 245.193 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M296.015 217.647 Q292.404 217.647 290.576 221.212 Q288.77 224.753 288.77 231.883 Q288.77 238.989 290.576 242.554 Q292.404 246.096 296.015 246.096 Q299.65 246.096 301.455 242.554 Q303.284 238.989 303.284 231.883 Q303.284 224.753 301.455 221.212 Q299.65 217.647 296.015 217.647 M296.015 213.943 Q301.826 213.943 304.881 218.55 Q307.96 223.133 307.96 231.883 Q307.96 240.61 304.881 245.216 Q301.826 249.8 296.015 249.8 Q290.205 249.8 287.127 245.216 Q284.071 240.61 284.071 231.883 Q284.071 223.133 287.127 218.55 Q290.205 213.943 296.015 213.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M326.177 217.647 Q322.566 217.647 320.737 221.212 Q318.932 224.753 318.932 231.883 Q318.932 238.989 320.737 242.554 Q322.566 246.096 326.177 246.096 Q329.811 246.096 331.617 242.554 Q333.446 238.989 333.446 231.883 Q333.446 224.753 331.617 221.212 Q329.811 217.647 326.177 217.647 M326.177 213.943 Q331.987 213.943 335.043 218.55 Q338.122 223.133 338.122 231.883 Q338.122 240.61 335.043 245.216 Q331.987 249.8 326.177 249.8 Q320.367 249.8 317.288 245.216 Q314.233 240.61 314.233 231.883 Q314.233 223.133 317.288 218.55 Q320.367 213.943 326.177 213.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M356.339 217.647 Q352.728 217.647 350.899 221.212 Q349.094 224.753 349.094 231.883 Q349.094 238.989 350.899 242.554 Q352.728 246.096 356.339 246.096 Q359.973 246.096 361.779 242.554 Q363.608 238.989 363.608 231.883 Q363.608 224.753 361.779 221.212 Q359.973 217.647 356.339 217.647 M356.339 213.943 Q362.149 213.943 365.205 218.55 Q368.284 223.133 368.284 231.883 Q368.284 240.61 365.205 245.216 Q362.149 249.8 356.339 249.8 Q350.529 249.8 347.45 245.216 Q344.395 240.61 344.395 231.883 Q344.395 223.133 347.45 218.55 Q350.529 213.943 356.339 213.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip692)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.848 4017.76,231.848 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.85 458.259,1248.51 458.828,1248.16 459.396,1247.74 459.964,1247.23 460.533,1246.64 461.101,1245.99 461.669,1245.25 462.238,1244.44 462.806,1242.51 463.375,1241.54 463.943,1240.47 464.511,1238.27 465.08,1237.01 465.648,1235.63 466.216,1234.14 466.785,1232.53 467.353,1230.77 467.921,1228.9 468.49,1226.87 469.058,1223.65 469.626,1219.31 470.195,1216.82 470.763,1214.18 471.331,1210.34 471.9,1207.31 472.468,1204.13 473.036,1199.69 473.605,1196.19 474.173,1192.44 474.741,1186.44 475.31,1179.15 475.878,1174.71 476.446,1170 477.015,1165.13 477.583,1158.96 478.152,1152.5 478.72,1146.81 479.288,1138.91 479.857,1131.9 480.425,1124.7 480.993,1117.32 481.562,1109.6 482.13,1102.9 482.698,1096.02 483.267,1086.83 483.835,1079.73 484.403,1071.21 484.972,1063.61 485.54,1053.71 486.108,1044.83 486.677,1035.8 487.245,1027.65 487.813,1018.27 488.382,1009.76 488.95,1000.12 489.518,990.403 490.087,980.6 490.655,971.729 491.224,960.542 491.792,949.329 492.36,934.987 492.929,922.789 493.497,912.791 494.065,902.656 494.634,890.529 495.202,880.448 495.77,869.278 496.339,860.228 496.907,849.062 497.475,837.992 498.044,825.805 498.612,814.817 499.18,804.753 499.749,793.826 500.317,784.988 500.885,771.963 501.454,763.376 502.022,753.621 502.59,742.89 503.159,733.302 503.727,723.724 504.295,712.223 504.864,703.842 505.432,693.554 506.001,684.28 506.569,676.265 507.137,668.247 507.706,657.276 508.274,647.313 508.842,637.754 509.411,630.272 509.979,618.73 510.547,609.35 511.116,599.203 511.684,590.378 512.252,583.606 512.821,576.109 513.389,568.611 513.957,561.13 514.526,554.836 515.094,547.607 515.662,541.413 516.231,534.272 516.799,526.183 517.367,518.588 517.936,511.709 518.504,505.988 519.072,498.471 519.641,493.133 520.209,486.953 520.778,479.863 521.346,474.784 521.914,467.862 522.483,463.198 523.051,457.608 523.619,452.079 524.188,447.597 524.756,443.317 525.324,438.936 525.893,432.532 526.461,424.274 527.029,419.527 527.598,415.792 528.166,412.028 528.734,405.389 529.303,401.963 529.871,396.592 530.439,393.59 531.008,390.529 531.576,386.634 532.144,383.544 532.713,379.625 533.281,375.668 533.85,372.931 534.418,369.021 534.986,365.509 535.555,361.892 536.123,357.519 536.691,352.369 537.26,348.365 537.828,343.384 538.396,342.633 538.965,341.987 539.533,341.457 540.101,339.306 540.67,337.276 541.238,333.206 541.806,330.377 542.375,326.731 542.943,324.259 543.511,322.902 544.08,321.516 544.648,319.071 545.216,317.699 545.785,317.264 546.353,314.77 546.921,311.419 547.49,308.027 548.058,308.089 548.627,307.837 549.195,304.333 549.763,301.067 550.332,299.031 550.9,295.026 551.468,294.266 552.037,292.316 552.605,290.509 553.173,288.808 553.742,290.272 554.31,288.702 554.878,288.126 555.447,287.575 556.015,284.869 556.583,284.11 557.152,282.575 557.72,282.107 558.288,281.474 558.857,281.912 559.425,280.418 559.993,278.658 560.562,276.187 561.13,274.938 561.698,274.613 562.267,273.334 562.835,272.853 563.404,272.597 563.972,271.089 564.54,268.626 565.109,267.298 565.677,267.408 566.245,266.165 566.814,264.148 567.382,262.936 567.95,261.841 568.519,261.058 569.087,260.18 569.655,260.401 570.224,262.393 570.792,262.35 571.36,263.218 571.929,261.946 572.497,260.952 573.065,259.709 573.634,257.764 574.202,260.021 574.77,257.868 575.339,258.038 575.907,252.902 576.476,252.331 577.044,254.753 577.612,255.727 578.181,253.732 578.749,252.975 579.317,252.303 579.886,252.535 580.454,250.783 581.022,252.174 581.591,253.39 582.159,254.685 582.727,254.599 583.296,255.715 583.864,256.512 584.432,255.307 585.001,256.253 585.569,256.211 586.137,256.033 586.706,256.68 587.274,260.482 587.842,258.635 588.411,258.958 588.979,258.491 589.547,258.931 590.116,259.364 590.684,258.681 591.253,255.96 591.821,255.378 592.389,254.974 592.958,252.532 593.526,252.205 594.094,247.716 594.663,245.731 595.231,241.938 595.799,242.469 596.368,241.681 596.936,241.955 597.504,242.369 598.073,242.741 598.641,241.12 599.209,241.531 599.778,242.964 600.346,243.344 600.914,244.596 601.483,242.725 602.051,242.025 602.619,241.339 603.188,241.548 603.756,241.834 604.325,242.406 604.893,244.853 605.461,245.278 606.03,245.204 606.598,244.151 607.166,243.3 607.735,242.359 608.303,243.727 608.871,242.742 609.44,242.035 610.008,241.231 610.576,242.538 611.145,242.762 611.713,242.865 612.281,244.05 612.85,243.772 613.418,241.768 613.986,239.905 614.555,239.246 615.123,237.686 615.691,239.213 616.26,239.574 616.828,239.783 617.396,241.084 617.965,241.318 618.533,240.345 619.102,240.649 619.67,240.946 620.238,242.4 620.807,239.298 621.375,240.56 621.943,242.552 622.512,241.346 623.08,241.271 623.648,240.282 624.217,240.348 624.785,241.441 625.353,239.399 625.922,240.701 626.49,240.755 627.058,239.03 627.627,239.259 628.195,237.674 628.763,238.02 629.332,239.295 629.9,239.537 630.468,238.616 631.037,237.725 631.605,240.012 632.173,239.121 632.742,236.61 633.31,237.789 633.879,238.18 634.447,237.518 635.015,236.492 635.584,237.746 636.152,236.935 636.72,235.495 637.289,234.994 637.857,234.43 638.425,234.102 638.994,233.497 639.562,233.1 640.13,232.426 640.699,231.774 641.267,232.405 641.835,234.969 642.404,235.526 642.972,236.972 643.54,238.1 644.109,239.303 644.677,240.656 645.245,241.721 645.814,241.512 646.382,240.581 646.951,239.753 647.519,238.955 648.087,238.222 648.656,238.314 649.224,239.752 649.792,240.059 650.361,243.232 650.929,241.88 651.497,241.728 652.066,240.62 652.634,239.656 653.202,240.995 653.771,242.188 654.339,242.014 654.907,240.67 655.476,239.486 656.044,239.461 656.612,239.448 657.181,240.29 657.749,238.981 658.317,238.049 658.886,238.897 659.454,239.817 660.022,240.713 660.591,238.565 661.159,237.514 661.728,233.421 662.296,231.663 662.864,232.063 663.433,231.535 664.001,228.772 664.569,229.559 665.138,229.191 665.706,232.825 666.274,232.251 666.843,231.496 667.411,230.079 667.979,229.584 668.548,229.207 669.116,233.001 669.684,236.722 670.253,236.79 670.821,235.697 671.389,237.037 671.958,238.399 672.526,238.485 673.094,237.465 673.663,242.874 674.231,241.627 674.799,241.36 675.368,241.22 675.936,242.159 676.505,241.671 677.073,240.431 677.641,239.224 678.21,240.155 678.778,242.075 679.346,240.555 679.915,241.355 680.483,240.173 681.051,237.881 681.62,239.086 682.188,241.047 682.756,239.614 683.325,240.245 683.893,240.081 684.461,239.593 685.03,240.232 685.598,239.04 686.166,238.804 686.735,238.646 687.303,239.669 687.871,238.403 688.44,237.22 689.008,236.281 689.577,237.149 690.145,236.976 690.713,235.939 691.282,234.113 691.85,232.259 692.418,231.528 692.987,230.388 693.555,230.703 694.123,232.269 694.692,233.753 695.26,233.704 695.828,233.678 696.397,233.679 696.965,230.82 697.533,231.284 698.102,230.839 698.67,230.008 699.238,230.174 699.807,231.588 700.375,233.97 700.943,236.051 701.512,238.09 702.08,237.942 702.648,236.869 703.217,238.806 703.785,238.396 704.354,240.109 704.922,239.615 705.49,239.384 706.059,237.94 706.627,236.558 707.195,236.535 707.764,234.43 708.332,234.565 708.9,232.546 709.469,234.846 710.037,233.582 710.605,232.86 711.174,234.356 711.742,235.576 712.31,234.681 712.879,234.86 713.447,234.916 714.015,235.998 714.584,237.744 715.152,235.5 715.72,235.516 716.289,237.562 716.857,235.33 717.425,235.211 717.994,237.246 718.562,235.885 719.131,233.663 719.699,231.943 720.267,234.403 720.836,233.475 721.404,233.595 721.972,233.524 722.541,233.488 723.109,234.582 723.677,234.669 724.246,233.695 724.814,231.667 725.382,231.999 725.951,229.112 726.519,230.589 727.087,231.959 727.656,231.88 728.224,232.943 728.792,233.073 729.361,230.047 729.929,229.465 730.497,228.661 731.066,227.957 731.634,227.682 732.203,227.283 732.771,226.677 733.339,227.006 733.908,225.628 734.476,227.35 735.044,227.929 735.613,229.365 736.181,231.095 736.749,231.38 737.318,228.577 737.886,228.131 738.454,229.679 739.023,232.109 739.591,232.312 740.159,231.423 740.728,232.698 741.296,233.013 741.864,232.519 742.433,233.941 743.001,234.209 743.569,233.27 744.138,230.254 744.706,230.552 745.274,229.96 745.843,231.537 746.411,232.952 746.98,233.421 747.548,234.805 748.116,234.779 748.685,236.021 749.253,236.117 749.821,234.09 750.39,235.211 750.958,235.362 751.526,237.47 752.095,237.191 752.663,236.268 753.231,238.275 753.8,240.105 754.368,240.578 754.936,241.334 755.505,242.888 756.073,241.214 756.641,239.889 757.21,238.364 757.778,237.887 758.346,236.814 758.915,237.687 759.483,235.41 760.052,235.092 760.62,235.075 761.188,234.049 761.757,233.855 762.325,235.644 762.893,237.547 763.462,238.254 764.03,236.796 764.598,235.615 765.167,235.488 765.735,238.473 766.303,238.154 766.872,236.786 767.44,236.681 768.008,237.306 768.577,235.912 769.145,236.818 769.713,237.533 770.282,236.337 770.85,233.067 771.418,232.983 771.987,231.12 772.555,231.212 773.123,232.328 773.692,231.475 774.26,233.675 774.829,232.739 775.397,233.837 775.965,234.763 776.534,233.739 777.102,234.883 777.67,234.685 778.239,233.495 778.807,232.417 779.375,233.353 779.944,232.238 780.512,234.605 781.08,230.468 781.649,232.68 782.217,230.833 782.785,231.999 783.354,232.071 783.922,232.17 784.49,233.247 785.059,233.296 785.627,234.299 786.195,233.025 786.764,234.802 787.332,234.994 787.9,235.813 788.469,235.284 789.037,236.033 789.606,236.017 790.174,233.586 790.742,232.62 791.311,231.813 791.879,231.807 792.447,229.995 793.016,231.273 793.584,231.543 794.152,228.726 794.721,228.871 795.289,229.14 795.857,228.54 796.426,229.908 796.994,228.113 797.562,228.426 798.131,228.946 798.699,230.294 799.267,230.659 799.836,232.917 800.404,232.88 800.972,232.774 801.541,234.015 802.109,231.926 802.678,230.94 803.246,231.971 803.814,233.011 804.383,233 804.951,233.053 805.519,231.822 806.088,232.927 806.656,234.009 807.224,231.998 807.793,232.126 808.361,233.08 808.929,233.03 809.498,234.149 810.066,232.265 810.634,232.235 811.203,233.43 811.771,232.378 812.339,230.291 812.908,231.45 813.476,230.657 814.044,234.928 814.613,235.864 815.181,236.511 815.749,237.458 816.318,238.223 816.886,238.157 817.455,237.592 818.023,235.958 818.591,235.598 819.16,235.446 819.728,233.427 820.296,233.362 820.865,230.386 821.433,230.294 822.001,229.62 822.57,231.102 823.138,232.395 823.706,232.324 824.275,232.287 824.843,232.277 825.411,233.271 825.98,231.15 826.548,232.323 827.116,232.256 827.685,232.478 828.253,233.667 828.821,233.647 829.39,231.627 829.958,233.66 830.526,231.503 831.095,228.603 831.663,228.941 832.232,228.285 832.8,228.621 833.368,228.993 833.937,229.264 834.505,232.577 835.073,232.549 835.642,231.538 836.21,230.32 836.778,229.396 837.347,231.522 837.915,231.751 838.483,233.822 839.052,233.784 839.62,232.543 840.188,231.598 840.757,229.671 841.325,230.826 841.893,231.051 842.462,232.294 843.03,230.16 843.598,230.431 844.167,229.596 844.735,232.898 845.304,232.895 845.872,232.951 846.44,234.039 847.009,233.941 847.577,233.921 848.145,234.016 848.714,234 849.282,235.029 849.85,236.625 850.419,235.563 850.987,236.464 851.555,236.355 852.124,237.885 852.692,237.557 853.26,236.019 853.829,235.839 854.397,234.554 854.965,234.452 855.534,233.468 856.102,235.582 856.67,234.419 857.239,233.25 857.807,232.228 858.375,231.4 858.944,231.478 859.512,233.64 860.081,233.736 860.649,233.702 861.217,233.803 861.786,231.624 862.354,231.615 862.922,232.684 863.491,234.84 864.059,234.741 864.627,234.361 865.196,235.448 865.764,236.119 866.332,235.931 866.901,234.772 867.469,233.395 868.037,233.296 868.606,235.168 869.174,234.801 869.742,235.587 870.311,236.349 870.879,233.934 871.447,232.83 872.016,232.854 872.584,232.861 873.152,233.878 873.721,232.7 874.289,229.559 874.858,228.42 875.426,226.741 875.994,228.102 876.563,229.512 877.131,229.596 877.699,229.66 878.268,229.784 878.836,230.757 879.404,230.703 879.973,233.003 880.541,232.787 881.109,231.436 881.678,233.715 882.246,237.528 882.814,237.043 883.383,236.618 883.951,239.546 884.519,240.208 885.088,240.534 885.656,239.867 886.224,240.238 886.793,241.706 887.361,239.814 887.93,238.07 888.498,237.852 889.066,236.233 889.635,234.723 890.203,233.469 890.771,232.297 891.34,233.169 891.908,233.993 892.476,232.759 893.045,231.58 893.613,229.694 894.181,228.878 894.75,225.827 895.318,225.028 895.886,224.289 896.455,223.845 897.023,225.24 897.591,226.74 898.16,225.966 898.728,226.607 899.296,227.049 899.865,229.319 900.433,229.479 901.001,232.599 901.57,232.279 902.138,233.278 902.707,232.197 903.275,232.424 903.843,234.19 904.412,235.044 904.98,233.692 905.548,233.697 906.117,233.544 906.685,232.388 907.253,231.15 907.822,232.411 908.39,231.346 908.958,231.65 909.527,230.458 910.095,229.419 910.663,229.689 911.232,228.695 911.8,229.243 912.368,230.654 912.937,231.02 913.505,230.806 914.073,233.016 914.642,234.085 915.21,233.904 915.779,233.077 916.347,233.038 916.915,231.945 917.484,232.956 918.052,234.937 918.62,232.521 919.189,232.708 919.757,232.925 920.325,230.87 920.894,226.787 921.462,229.234 922.03,229.497 922.599,230.508 923.167,229.611 923.735,229.788 924.304,227.871 924.872,231.311 925.44,232.513 926.009,231.534 926.577,231.474 927.145,232.65 927.714,233.771 928.282,233.749 928.85,232.434 929.419,231.583 929.987,231.666 930.556,231.624 931.124,231.862 931.692,230.805 932.261,229.687 932.829,230.947 933.397,232.824 933.966,231.493 934.534,230.411 935.102,228.618 935.671,230.163 936.239,230.257 936.807,230.317 937.376,230.582 937.944,227.7 938.512,228.151 939.081,229.433 939.649,227.73 940.217,227.941 940.786,229.392 941.354,230.405 941.922,234.466 942.491,231.396 943.059,233.682 943.627,232.684 944.196,232.813 944.764,231.843 945.333,230.994 945.901,231.228 946.469,230.352 947.038,232.461 947.606,235.579 948.174,237.417 948.743,237.105 949.311,235.66 949.879,234.489 950.448,233.454 951.016,232.4 951.584,233.444 952.153,234.214 952.721,233.16 953.289,232.036 953.858,229.961 954.426,230.094 954.994,230.435 955.563,228.619 956.131,227.828 956.699,230.378 957.268,231.397 957.836,230.282 958.405,230.415 958.973,229.558 959.541,231.008 960.11,231.198 960.678,232.372 961.246,230.196 961.815,233.627 962.383,235.46 962.951,233.33 963.52,234.414 964.088,234.512 964.656,233.379 965.225,233.25 965.793,234.42 966.361,235.393 966.93,235.179 967.498,232.952 968.066,231.048 968.635,232.241 969.203,232.326 969.771,235.45 970.34,234.235 970.908,234.041 971.476,233.01 972.045,232.005 972.613,229.124 973.182,229.406 973.75,229.727 974.318,226.512 974.887,229.026 975.455,229.318 976.023,230.579 976.592,229.694 977.16,230.946 977.728,232.144 978.297,231.064 978.865,229.072 979.433,228.357 980.002,227.617 980.57,225.054 981.138,225.645 981.707,229.315 982.275,230.575 982.843,230.673 983.412,229.792 983.98,228.298 984.548,226.75 985.117,228.143 985.685,229.644 986.253,229.81 986.822,229.988 987.39,232.304 987.959,228.39 988.527,228.541 989.095,229.823 989.664,231.176 990.232,232.41 990.8,231.449 991.369,230.481 991.937,232.842 992.505,230.866 993.074,231.216 993.642,230.41 994.21,231.809 994.779,232.985 995.347,236.063 995.915,235.016 996.484,233.788 997.052,230.898 997.62,231.128 998.189,232.384 998.757,233.436 999.325,234.714 999.894,233.572 1000.46,233.649 1001.03,235.872 1001.6,234.762 1002.17,236.798 1002.74,234.512 1003.3,235.559 1003.87,235.452 1004.44,236.249 1005.01,238.193 1005.58,238.984 1006.15,239.567 1006.71,239.158 1007.28,239.657 1007.85,240.362 1008.42,240.832 1008.99,238.151 1009.56,238.588 1010.12,236.302 1010.69,238.052 1011.26,238.815 1011.83,238.289 1012.4,238.884 1012.97,235.102 1013.53,236.73 1014.1,237.407 1014.67,235.947 1015.24,236.642 1015.81,235.198 1016.38,235.125 1016.94,236.871 1017.51,237.378 1018.08,237.017 1018.65,237.675 1019.22,237.045 1019.79,236.765 1020.35,237.396 1020.92,236.842 1021.49,236.585 1022.06,236.271 1022.63,235.916 1023.2,235.279 1023.76,233.934 1024.33,233.738 1024.9,236.68 1025.47,237.219 1026.04,235.688 1026.61,235.157 1027.17,234.679 1027.74,234.438 1028.31,234.129 1028.88,233.756 1029.45,233.667 1030.02,229.341 1030.58,230.355 1031.15,230.142 1031.72,229.035 1032.29,228.087 1032.86,229.105 1033.43,229.258 1033.99,229.272 1034.56,229.34 1035.13,229.392 1035.7,229.531 1036.27,228.751 1036.84,227.693 1037.4,227.918 1037.97,227.841 1038.54,227.86 1039.11,228.804 1039.68,229.845 1040.25,230.908 1040.81,230.833 1041.38,231.863 1041.95,233.769 1042.52,232.362 1043.09,232.208 1043.66,233.234 1044.22,234.271 1044.79,233.099 1045.36,233.863 1045.93,232.495 1046.5,232.425 1047.07,232.307 1047.63,233.195 1048.2,234.251 1048.77,234.01 1049.34,231.807 1049.91,231.752 1050.48,230.577 1051.05,228.59 1051.61,229.637 1052.18,228.506 1052.75,228.651 1053.32,227.928 1053.89,229.003 1054.46,228.19 1055.02,225.292 1055.59,226.581 1056.16,223.975 1056.73,222.314 1057.3,219.895 1057.87,221.675 1058.43,223.528 1059,224.235 1059.57,226.613 1060.14,227.116 1060.71,226.452 1061.28,226.823 1061.84,225.101 1062.41,224.309 1062.98,222.812 1063.55,223.412 1064.12,224.184 1064.69,224.948 1065.25,226.376 1065.82,226.883 1066.39,229.409 1066.96,228.675 1067.53,230.003 1068.1,231.229 1068.66,234.48 1069.23,235.551 1069.8,235.447 1070.37,233.549 1070.94,233.459 1071.51,232.489 1072.07,232.573 1072.64,230.663 1073.21,228.576 1073.78,230 1074.35,229.332 1074.92,230.827 1075.48,229.095 1076.05,229.319 1076.62,228.711 1077.19,228.928 1077.76,231.399 1078.33,232.677 1078.89,233.842 1079.46,235.662 1080.03,235.668 1080.6,233.453 1081.17,234.54 1081.74,234.623 1082.3,234.476 1082.87,235.376 1083.44,235.387 1084.01,235.323 1084.58,235.192 1085.15,233.137 1085.71,233.243 1086.28,234.303 1086.85,235.447 1087.42,231.139 1087.99,231.256 1088.56,230.429 1089.12,229.563 1089.69,228.692 1090.26,231.102 1090.83,232.242 1091.4,231.242 1091.97,231.502 1092.53,231.655 1093.1,231.782 1093.67,231.005 1094.24,233.26 1094.81,233.377 1095.38,236.494 1095.94,238.113 1096.51,237.725 1097.08,238.029 1097.65,236.477 1098.22,236.24 1098.79,234.905 1099.35,231.737 1099.92,230.86 1100.49,231.91 1101.06,231.97 1101.63,232.166 1102.2,232.223 1102.76,233.033 1103.33,232.819 1103.9,230.803 1104.47,229.853 1105.04,232.001 1105.61,232.316 1106.17,230.339 1106.74,230.576 1107.31,230.453 1107.88,229.598 1108.45,228.906 1109.02,229.248 1109.58,229.224 1110.15,229.417 1110.72,230.712 1111.29,230.936 1111.86,229.818 1112.43,230.032 1112.99,229.205 1113.56,229.428 1114.13,231.732 1114.7,231.756 1115.27,231.774 1115.84,229.825 1116.4,228.971 1116.97,229.217 1117.54,228.436 1118.11,228.631 1118.68,228.734 1119.25,230.96 1119.81,234.174 1120.38,234.064 1120.95,235.24 1121.52,238.245 1122.09,238.988 1122.66,238.776 1123.23,239.496 1123.79,240.803 1124.36,241.24 1124.93,238.667 1125.5,239.177 1126.07,238.918 1126.64,238.357 1127.2,236.868 1127.77,236.223 1128.34,236.778 1128.91,234.502 1129.48,233.147 1130.05,231.936 1130.61,230.857 1131.18,231.938 1131.75,234.195 1132.32,234.961 1132.89,233.635 1133.46,232.483 1134.02,233.552 1134.59,232.152 1135.16,229.97 1135.73,230.969 1136.3,231.095 1136.87,231.196 1137.43,231.214 1138,231.465 1138.57,228.397 1139.14,227.577 1139.71,228.912 1140.28,229.151 1140.84,231.348 1141.41,233.536 1141.98,234.41 1142.55,233.185 1143.12,233.044 1143.69,231.678 1144.25,233.487 1144.82,233.422 1145.39,235.499 1145.96,232.349 1146.53,233.356 1147.1,233.977 1147.66,232.756 1148.23,233.643 1148.8,232.501 1149.37,231.299 1149.94,231.069 1150.51,230.063 1151.07,229.213 1151.64,230.197 1152.21,229.245 1152.78,230.607 1153.35,229.438 1153.92,230.492 1154.48,231.71 1155.05,234.869 1155.62,234.401 1156.19,235.355 1156.76,233.989 1157.33,233.958 1157.89,233.794 1158.46,234.58 1159.03,232.399 1159.6,231.281 1160.17,230.112 1160.74,231.297 1161.3,232.507 1161.87,231.519 1162.44,230.36 1163.01,229.291 1163.58,228.547 1164.15,228.657 1164.71,227.782 1165.28,229.046 1165.85,228.223 1166.42,228.635 1166.99,227.964 1167.56,229.177 1168.12,230.195 1168.69,231.283 1169.26,229.334 1169.83,227.526 1170.4,228.078 1170.97,228.417 1171.53,228.556 1172.1,227.875 1172.67,228.241 1173.24,225.411 1173.81,225.749 1174.38,226.248 1174.94,226.709 1175.51,229.271 1176.08,232.4 1176.65,231.38 1177.22,233.474 1177.79,233.245 1178.35,233.083 1178.92,232.002 1179.49,231.979 1180.06,230.645 1180.63,231.835 1181.2,232.008 1181.76,233.08 1182.33,231.965 1182.9,232.109 1183.47,232.142 1184.04,233.217 1184.61,234.031 1185.17,235.136 1185.74,233.941 1186.31,233.969 1186.88,233.744 1187.45,231.613 1188.02,231.611 1188.58,232.591 1189.15,233.622 1189.72,234.518 1190.29,233.298 1190.86,232.289 1191.43,235.344 1192,236.308 1192.56,239.135 1193.13,240.711 1193.7,239.07 1194.27,240.465 1194.84,239.822 1195.41,239.32 1195.97,237.741 1196.54,238.996 1197.11,238.48 1197.68,237.951 1198.25,237.313 1198.82,236.783 1199.38,236.066 1199.95,236.575 1200.52,236.104 1201.09,235.698 1201.66,236.429 1202.23,235.058 1202.79,233.639 1203.36,232.363 1203.93,231.156 1204.5,231.16 1205.07,233.228 1205.64,232.939 1206.2,231.667 1206.77,230.473 1207.34,228.375 1207.91,229.537 1208.48,229.57 1209.05,231.656 1209.61,231.619 1210.18,232.48 1210.75,234.537 1211.32,232.146 1211.89,232.996 1212.46,233.843 1213.02,231.53 1213.59,231.476 1214.16,232.416 1214.73,232.099 1215.3,231.925 1215.87,230.677 1216.43,230.653 1217,230.411 1217.57,228.498 1218.14,228.566 1218.71,229.785 1219.28,230.004 1219.84,229.92 1220.41,231.094 1220.98,230.181 1221.55,229.079 1222.12,229.294 1222.69,229.499 1223.25,229.37 1223.82,228.562 1224.39,226.938 1224.96,225.173 1225.53,225.49 1226.1,227.196 1226.66,227.412 1227.23,227.622 1227.8,226.81 1228.37,227.251 1228.94,226.678 1229.51,225.972 1230.07,224.336 1230.64,224.836 1231.21,227.285 1231.78,227.456 1232.35,226.557 1232.92,226.017 1233.48,226.668 1234.05,225.025 1234.62,225.609 1235.19,225.111 1235.76,225.545 1236.33,228.28 1236.89,228.511 1237.46,231.824 1238.03,229.817 1238.6,233.874 1239.17,234.869 1239.74,238.872 1240.3,238.183 1240.87,235.538 1241.44,235.32 1242.01,237.111 1242.58,236.8 1243.15,236.603 1243.71,235.189 1244.28,233.886 1244.85,234.698 1245.42,237.461 1245.99,238.129 1246.56,237.738 1247.12,235.233 1247.69,232.822 1248.26,232.06 1248.83,229.99 1249.4,229.929 1249.97,229.577 1250.53,230.874 1251.1,229.79 1251.67,228.233 1252.24,227.676 1252.81,227.978 1253.38,228.066 1253.94,227.21 1254.51,227.656 1255.08,227.947 1255.65,228.193 1256.22,228.417 1256.79,228.56 1257.35,229.049 1257.92,228.3 1258.49,229.57 1259.06,228.879 1259.63,229.251 1260.2,228.54 1260.76,227.61 1261.33,230.071 1261.9,232.349 1262.47,233.581 1263.04,232.675 1263.61,234.437 1264.18,234.268 1264.74,233.417 1265.31,232.308 1265.88,233.548 1266.45,233.65 1267.02,233.514 1267.59,233.544 1268.15,232.68 1268.72,232.816 1269.29,231.958 1269.86,233.171 1270.43,234.329 1271,236.207 1271.56,236.212 1272.13,235.754 1272.7,237.675 1273.27,238.392 1273.84,237.778 1274.41,235.435 1274.97,235.22 1275.54,235.856 1276.11,234.482 1276.68,233.512 1277.25,233.504 1277.82,232.381 1278.38,230.033 1278.95,230.946 1279.52,228.997 1280.09,229.183 1280.66,231.478 1281.23,231.159 1281.79,231.137 1282.36,233.288 1282.93,232.056 1283.5,230.949 1284.07,229.858 1284.64,231.214 1285.2,233.26 1285.77,232.262 1286.34,233.169 1286.91,232.16 1287.48,231.12 1288.05,231.322 1288.61,230.589 1289.18,232.732 1289.75,231.362 1290.32,232.574 1290.89,232.359 1291.46,232.578 1292.02,232.485 1292.59,233.439 1293.16,234.459 1293.73,235.479 1294.3,235.025 1294.87,235.731 1295.43,234.524 1296,234.156 1296.57,232.934 1297.14,234.579 1297.71,234.579 1298.28,236.539 1298.84,235.117 1299.41,234.665 1299.98,235.324 1300.55,237.139 1301.12,235.738 1301.69,234.557 1302.25,234.484 1302.82,234.002 1303.39,232.846 1303.96,234.097 1304.53,234.709 1305.1,232.648 1305.66,231.615 1306.23,231.826 1306.8,230.965 1307.37,228.778 1307.94,226.86 1308.51,228.131 1309.07,230.451 1309.64,230.378 1310.21,229.393 1310.78,230.589 1311.35,229.523 1311.92,229.599 1312.48,231.739 1313.05,231.46 1313.62,234.403 1314.19,233.14 1314.76,231.97 1315.33,231.624 1315.89,230.436 1316.46,231.499 1317.03,230.596 1317.6,229.89 1318.17,229.215 1318.74,230.488 1319.3,232.619 1319.87,233.56 1320.44,233.478 1321.01,234.463 1321.58,234.409 1322.15,233.249 1322.71,233.131 1323.28,230.031 1323.85,231.134 1324.42,231.107 1324.99,232.178 1325.56,233.039 1326.12,231.95 1326.69,231.905 1327.26,233.063 1327.83,232.943 1328.4,232.813 1328.97,229.713 1329.53,230.996 1330.1,233.171 1330.67,231.027 1331.24,230.126 1331.81,232.479 1332.38,232.188 1332.94,233.22 1333.51,234.182 1334.08,233.997 1334.65,236.832 1335.22,234.494 1335.79,234.497 1336.36,234.138 1336.92,234.789 1337.49,232.356 1338.06,233.254 1338.63,234.083 1339.2,233.907 1339.77,233.514 1340.33,233.203 1340.9,233.987 1341.47,231.772 1342.04,231.779 1342.61,232.802 1343.18,231.628 1343.74,228.668 1344.31,228.952 1344.88,229.991 1345.45,231.019 1346.02,228.973 1346.59,229.05 1347.15,226.274 1347.72,227.367 1348.29,227.558 1348.86,227.726 1349.43,229.234 1350,230.42 1350.56,231.882 1351.13,232.974 1351.7,233.852 1352.27,232.601 1352.84,229.598 1353.41,230.777 1353.97,229.796 1354.54,229.955 1355.11,231.339 1355.68,231.327 1356.25,232.471 1356.82,232.535 1357.38,230.407 1357.95,226.263 1358.52,226.729 1359.09,228.114 1359.66,227.34 1360.23,227.576 1360.79,226.962 1361.36,229.44 1361.93,228.806 1362.5,230.141 1363.07,233.416 1363.64,232.247 1364.2,230.343 1364.77,231.352 1365.34,233.553 1365.91,233.413 1366.48,234.513 1367.05,234.342 1367.61,232.13 1368.18,232.039 1368.75,233.154 1369.32,233.004 1369.89,231.794 1370.46,231.662 1371.02,231.525 1371.59,231.31 1372.16,235.396 1372.73,235.99 1373.3,236.758 1373.87,235.719 1374.43,234.146 1375,231.87 1375.57,230.844 1376.14,230.793 1376.71,231.776 1377.28,231.806 1377.84,230.032 1378.41,231.142 1378.98,231.367 1379.55,231.587 1380.12,230.509 1380.69,230.807 1381.25,232.812 1381.82,234.848 1382.39,236.466 1382.96,236.159 1383.53,235.695 1384.1,235.501 1384.66,235.366 1385.23,234.061 1385.8,231.615 1386.37,230.297 1386.94,229.204 1387.51,230.573 1388.07,230.437 1388.64,230.733 1389.21,230.781 1389.78,229.706 1390.35,228.689 1390.92,227.852 1391.48,228.13 1392.05,228.557 1392.62,229.852 1393.19,229.969 1393.76,233.062 1394.33,234.098 1394.89,234.838 1395.46,234.243 1396.03,232.913 1396.6,232.843 1397.17,233.899 1397.74,233.71 1398.3,232.736 1398.87,233.706 1399.44,233.596 1400.01,232.466 1400.58,230.43 1401.15,230.453 1401.71,232.362 1402.28,232.166 1402.85,230.109 1403.42,230.261 1403.99,231.397 1404.56,229.136 1405.13,227.434 1405.69,229.721 1406.26,230.089 1406.83,230.28 1407.4,231.303 1407.97,231.453 1408.54,230.579 1409.1,230.301 1409.67,232.495 1410.24,232.671 1410.81,233.662 1411.38,234.459 1411.95,233.175 1412.51,233.131 1413.08,233.047 1413.65,233.117 1414.22,232.092 1414.79,233.066 1415.36,234.023 1415.92,234.862 1416.49,233.632 1417.06,232.464 1417.63,233.424 1418.2,234.402 1418.77,234.175 1419.33,235.224 1419.9,234.786 1420.47,234.466 1421.04,233.124 1421.61,234.121 1422.18,234.054 1422.74,231.964 1423.31,232.836 1423.88,233.706 1424.45,234.501 1425.02,232.959 1425.59,233.86 1426.15,234.753 1426.72,233.717 1427.29,232.574 1427.86,232.529 1428.43,233.396 1429,234.194 1429.56,232.969 1430.13,233.962 1430.7,232.612 1431.27,232.585 1431.84,232.278 1432.41,233.125 1432.97,231.669 1433.54,230.499 1434.11,231.402 1434.68,232.466 1435.25,231.44 1435.82,230.229 1436.38,228.2 1436.95,227.685 1437.52,227.981 1438.09,230.229 1438.66,231.606 1439.23,232.337 1439.79,232.046 1440.36,232.977 1440.93,227.54 1441.5,226.598 1442.07,226.888 1442.64,226.055 1443.2,226.33 1443.77,226.731 1444.34,226.319 1444.91,227.824 1445.48,228.369 1446.05,228.735 1446.61,230.055 1447.18,230.253 1447.75,229.304 1448.32,228.362 1448.89,228.616 1449.46,227.809 1450.02,231.287 1450.59,231.404 1451.16,231.362 1451.73,229.4 1452.3,227.669 1452.87,228.003 1453.43,227.231 1454,228.475 1454.57,228.691 1455.14,231.906 1455.71,230.876 1456.28,230.889 1456.84,232.035 1457.41,233.446 1457.98,233.578 1458.55,233.615 1459.12,233.51 1459.69,233.337 1460.25,233.164 1460.82,233.164 1461.39,231.926 1461.96,231.728 1462.53,231.595 1463.1,231.723 1463.66,230.526 1464.23,229.659 1464.8,228.712 1465.37,229.002 1465.94,229.238 1466.51,230.429 1467.07,230.828 1467.64,234.024 1468.21,232.813 1468.78,231.867 1469.35,230.788 1469.92,229.815 1470.48,228.845 1471.05,228.301 1471.62,230.503 1472.19,231.597 1472.76,231.623 1473.33,231.771 1473.89,232.749 1474.46,230.685 1475.03,229.837 1475.6,227.826 1476.17,229.483 1476.74,230.435 1477.31,229.625 1477.87,224.627 1478.44,224.079 1479.01,225.639 1479.58,228.026 1480.15,227.458 1480.72,227.987 1481.28,227.523 1481.85,227.107 1482.42,227.626 1482.99,227.776 1483.56,229.407 1484.13,228.847 1484.69,226.104 1485.26,227.675 1485.83,230.044 1486.4,233.511 1486.97,235.74 1487.54,235.901 1488.1,238.835 1488.67,240.569 1489.24,239.17 1489.81,237.641 1490.38,240.275 1490.95,241.979 1491.51,240.416 1492.08,239.648 1492.65,239.163 1493.22,238.709 1493.79,238.432 1494.36,237.971 1494.92,237.59 1495.49,237.258 1496.06,237.037 1496.63,236.836 1497.2,234.462 1497.77,233.339 1498.33,232.217 1498.9,232.136 1499.47,233.208 1500.04,232.931 1500.61,231.833 1501.18,231.873 1501.74,231.995 1502.31,232.297 1502.88,231.229 1503.45,232.238 1504.02,230.32 1504.59,231.492 1505.15,234.72 1505.72,236.868 1506.29,236.515 1506.86,235.239 1507.43,235.73 1508,235.381 1508.56,235.231 1509.13,234.874 1509.7,234.758 1510.27,232.464 1510.84,230.42 1511.41,232.632 1511.97,230.445 1512.54,230.615 1513.11,229.503 1513.68,228.583 1514.25,229.684 1514.82,229.843 1515.38,229.174 1515.95,227.317 1516.52,230.933 1517.09,234.182 1517.66,233.996 1518.23,232.703 1518.79,232.446 1519.36,229.316 1519.93,229.621 1520.5,229.579 1521.07,229.693 1521.64,232.878 1522.2,232.684 1522.77,233.521 1523.34,231.148 1523.91,231.126 1524.48,231.216 1525.05,232.31 1525.61,230.297 1526.18,231.531 1526.75,229.407 1527.32,229.611 1527.89,227.878 1528.46,226.245 1529.02,227.734 1529.59,228.245 1530.16,227.412 1530.73,227.643 1531.3,228.902 1531.87,229.08 1532.43,229.561 1533,229.714 1533.57,229.929 1534.14,227.823 1534.71,227.277 1535.28,226.467 1535.84,228.803 1536.41,231.978 1536.98,232.984 1537.55,232.935 1538.12,231.604 1538.69,231.763 1539.25,232.968 1539.82,228.987 1540.39,229.132 1540.96,230.438 1541.53,229.595 1542.1,229.928 1542.66,231.417 1543.23,231.453 1543.8,230.723 1544.37,230.804 1544.94,232.003 1545.51,230.952 1546.08,231.233 1546.64,232.206 1547.21,233.26 1547.78,234.139 1548.35,233.048 1548.92,233.139 1549.49,234.179 1550.05,234.026 1550.62,236.18 1551.19,237.782 1551.76,236.394 1552.33,236.078 1552.9,235.013 1553.46,233.849 1554.03,234.729 1554.6,235.552 1555.17,236.231 1555.74,236.194 1556.31,235.98 1556.87,234.708 1557.44,233.284 1558.01,233.259 1558.58,232.009 1559.15,231.939 1559.72,232.946 1560.28,232.793 1560.85,236.09 1561.42,235.017 1561.99,236.06 1562.56,236.905 1563.13,235.658 1563.69,235.408 1564.26,235.079 1564.83,235.878 1565.4,234.521 1565.97,235.382 1566.54,232.991 1567.1,234.14 1567.67,233.938 1568.24,234.65 1568.81,232.464 1569.38,235.633 1569.95,234.262 1570.51,232.957 1571.08,231.802 1571.65,232.082 1572.22,233.117 1572.79,233.994 1573.36,234.878 1573.92,236.618 1574.49,237.194 1575.06,235.72 1575.63,234.313 1576.2,235.187 1576.77,233.893 1577.33,233.717 1577.9,233.392 1578.47,232.19 1579.04,233.019 1579.61,231.112 1580.18,233.123 1580.74,233.02 1581.31,233.091 1581.88,229.971 1582.45,230.759 1583.02,229.861 1583.59,230.99 1584.15,231.883 1584.72,230.856 1585.29,229.986 1585.86,228.037 1586.43,227.311 1587,227.555 1587.56,227.596 1588.13,226.742 1588.7,228.116 1589.27,227.521 1589.84,230.934 1590.41,231.078 1590.97,232.068 1591.54,232.131 1592.11,230.911 1592.68,227.707 1593.25,228.943 1593.82,229.115 1594.38,226.11 1594.95,227.55 1595.52,226.768 1596.09,228.379 1596.66,229.587 1597.23,227.839 1597.79,229.979 1598.36,229.111 1598.93,228.208 1599.5,228.412 1600.07,229.636 1600.64,230.81 1601.2,229.657 1601.77,229.78 1602.34,230.006 1602.91,229.119 1603.48,228.135 1604.05,229.43 1604.61,229.511 1605.18,227.403 1605.75,226.744 1606.32,229.084 1606.89,230.411 1607.46,232.56 1608.02,231.388 1608.59,230.427 1609.16,230.493 1609.73,230.971 1610.3,230.765 1610.87,231.631 1611.43,229.36 1612,231.355 1612.57,231.323 1613.14,229.332 1613.71,229.306 1614.28,231.681 1614.84,230.706 1615.41,231.525 1615.98,232.558 1616.55,231.688 1617.12,231.587 1617.69,232.858 1618.26,233.791 1618.82,234.892 1619.39,232.72 1619.96,231.768 1620.53,230.711 1621.1,230.882 1621.67,231.937 1622.23,233.956 1622.8,233.863 1623.37,234.655 1623.94,232.545 1624.51,234.619 1625.08,233.252 1625.64,233.346 1626.21,235.439 1626.78,236.424 1627.35,236.214 1627.92,237.044 1628.49,235.647 1629.05,233.545 1629.62,232.397 1630.19,234.259 1630.76,232.878 1631.33,232.79 1631.9,232.498 1632.46,232.293 1633.03,232.418 1633.6,232.301 1634.17,231.231 1634.74,230.168 1635.31,231.521 1635.87,232.783 1636.44,231.783 1637.01,232.958 1637.58,234.103 1638.15,234.015 1638.72,234.803 1639.28,234.368 1639.85,235.215 1640.42,236.007 1640.99,236.67 1641.56,234.22 1642.13,235.022 1642.69,234.855 1643.26,235.669 1643.83,236.438 1644.4,236.128 1644.97,233.389 1645.54,235.162 1646.1,235.821 1646.67,235.366 1647.24,236.041 1647.81,236.582 1648.38,238.439 1648.95,237.811 1649.51,239.311 1650.08,238.649 1650.65,234.757 1651.22,234.609 1651.79,235.485 1652.36,234.043 1652.92,232.75 1653.49,232.746 1654.06,234.655 1654.63,234.164 1655.2,233.717 1655.77,234.502 1656.33,234.169 1656.9,234.824 1657.47,232.477 1658.04,233.114 1658.61,233.905 1659.18,231.578 1659.74,231.456 1660.31,231.361 1660.88,231.588 1661.45,229.467 1662.02,227.454 1662.59,226.488 1663.15,226.864 1663.72,225.007 1664.29,224.552 1664.86,223.156 1665.43,224.871 1666,225.153 1666.56,224.487 1667.13,224.786 1667.7,227.3 1668.27,227.703 1668.84,228.211 1669.41,227.348 1669.97,228.592 1670.54,228.789 1671.11,225.856 1671.68,226.305 1672.25,226.827 1672.82,226.844 1673.38,227.144 1673.95,228.442 1674.52,227.81 1675.09,228.2 1675.66,227.543 1676.23,226.715 1676.79,229.348 1677.36,230.807 1677.93,228.855 1678.5,227.895 1679.07,229.23 1679.64,228.478 1680.2,228.809 1680.77,230.081 1681.34,230.332 1681.91,229.357 1682.48,228.352 1683.05,228.553 1683.61,228.754 1684.18,229.172 1684.75,229.134 1685.32,233.349 1685.89,234.493 1686.46,233.317 1687.02,232.295 1687.59,231.267 1688.16,230.27 1688.73,230.602 1689.3,231.906 1689.87,232.051 1690.44,232.031 1691,234.992 1691.57,233.932 1692.14,233.892 1692.71,231.851 1693.28,231.776 1693.85,231.676 1694.41,228.637 1694.98,227.144 1695.55,226.591 1696.12,227.054 1696.69,228.185 1697.26,228.676 1697.82,226.965 1698.39,226.265 1698.96,229.806 1699.53,231.344 1700.1,229.406 1700.67,229.718 1701.23,229.005 1701.8,229.208 1702.37,227.529 1702.94,227.812 1703.51,227.263 1704.08,227.669 1704.64,229.951 1705.21,233.441 1705.78,233.639 1706.35,234.738 1706.92,234.624 1707.49,234.772 1708.05,232.406 1708.62,230.572 1709.19,229.962 1709.76,230.169 1710.33,229.286 1710.9,232.618 1711.46,233.833 1712.03,235.773 1712.6,235.694 1713.17,236.695 1713.74,233.175 1714.31,233.051 1714.87,234.066 1715.44,236.082 1716.01,233.791 1716.58,233.689 1717.15,233.7 1717.72,233.599 1718.28,233.399 1718.85,232.22 1719.42,234.159 1719.99,234.015 1720.56,233.76 1721.13,236.801 1721.69,235.454 1722.26,236.284 1722.83,234.84 1723.4,233.479 1723.97,233.486 1724.54,233.535 1725.1,233.593 1725.67,232.489 1726.24,234.495 1726.81,233.425 1727.38,232.449 1727.95,232.501 1728.51,232.528 1729.08,232.518 1729.65,233.5 1730.22,231.363 1730.79,231.388 1731.36,233.576 1731.92,234.543 1732.49,234.263 1733.06,234.884 1733.63,232.592 1734.2,234.51 1734.77,235.465 1735.33,237.325 1735.9,236.962 1736.47,238.611 1737.04,239.168 1737.61,237.546 1738.18,237.28 1738.74,237.859 1739.31,237.319 1739.88,237.763 1740.45,237.301 1741.02,234.638 1741.59,234.23 1742.15,232.867 1742.72,232.875 1743.29,233.643 1743.86,232.392 1744.43,233.132 1745,233.095 1745.56,232.732 1746.13,233.728 1746.7,235.375 1747.27,236.023 1747.84,235.8 1748.41,234.54 1748.97,234.136 1749.54,234.877 1750.11,234.753 1750.68,234.19 1751.25,233.924 1751.82,232.585 1752.38,231.487 1752.95,231.22 1753.52,229.356 1754.09,229.353 1754.66,230.598 1755.23,228.478 1755.79,230.757 1756.36,229.857 1756.93,225.77 1757.5,225.279 1758.07,225.785 1758.64,226.284 1759.21,227.78 1759.77,228.783 1760.34,229.141 1760.91,228.381 1761.48,228.679 1762.05,230.808 1762.62,229.459 1763.18,229.433 1763.75,226.648 1764.32,230.083 1764.89,230.198 1765.46,232.357 1766.03,232.541 1766.59,230.484 1767.16,231.689 1767.73,231.682 1768.3,230.599 1768.87,230.698 1769.44,228.768 1770,228.165 1770.57,229.584 1771.14,229.731 1771.71,229.171 1772.28,228.394 1772.85,226.655 1773.41,227.149 1773.98,224.412 1774.55,226.007 1775.12,226.408 1775.69,229.948 1776.26,233.111 1776.82,233.96 1777.39,233.995 1777.96,236.028 1778.53,237.75 1779.1,236.309 1779.67,235.881 1780.23,234.574 1780.8,234.314 1781.37,233.206 1781.94,233.081 1782.51,235.011 1783.08,233.57 1783.64,235.509 1784.21,235.209 1784.78,233.847 1785.35,233.503 1785.92,235.234 1786.49,232.899 1787.05,235.988 1787.62,234.524 1788.19,233.312 1788.76,233.062 1789.33,232.827 1789.9,232.801 1790.46,233.925 1791.03,232.846 1791.6,231.801 1792.17,233.901 1792.74,237.862 1793.31,235.379 1793.87,233.23 1794.44,232.058 1795.01,233.097 1795.58,233.013 1796.15,232.95 1796.72,230.752 1797.28,230.687 1797.85,231.963 1798.42,229.731 1798.99,228.783 1799.56,228.802 1800.13,229.859 1800.69,231.89 1801.26,229.734 1801.83,231.81 1802.4,232.65 1802.97,230.358 1803.54,231.569 1804.1,233.691 1804.67,232.699 1805.24,232.59 1805.81,234.666 1806.38,232.415 1806.95,231.125 1807.51,230.881 1808.08,230.79 1808.65,230.808 1809.22,230.844 1809.79,230.846 1810.36,234.084 1810.92,233.007 1811.49,231.672 1812.06,229.527 1812.63,230.73 1813.2,229.841 1813.77,228.913 1814.33,229.149 1814.9,229.162 1815.47,229.374 1816.04,226.601 1816.61,225.998 1817.18,226.074 1817.74,223.37 1818.31,223.124 1818.88,224.719 1819.45,226.337 1820.02,226.556 1820.59,226.027 1821.15,226.413 1821.72,228.127 1822.29,228.55 1822.86,228.976 1823.43,228.408 1824,228.812 1824.56,228.12 1825.13,230.428 1825.7,231.793 1826.27,232.73 1826.84,231.746 1827.41,231.066 1827.97,228.671 1828.54,227.993 1829.11,228.249 1829.68,227.761 1830.25,226.053 1830.82,226.824 1831.39,227.293 1831.95,227.804 1832.52,227.126 1833.09,228.595 1833.66,231.047 1834.23,231.022 1834.8,232.38 1835.36,233.45 1835.93,233.359 1836.5,233.315 1837.07,235.597 1837.64,238.753 1838.21,242.515 1838.77,242.005 1839.34,242.389 1839.91,241.747 1840.48,240.071 1841.05,237.419 1841.62,236.013 1842.18,234.786 1842.75,235.787 1843.32,235.667 1843.89,236.421 1844.46,237.241 1845.03,235.966 1845.59,234.843 1846.16,234.43 1846.73,234.365 1847.3,233.829 1847.87,233.718 1848.44,234.522 1849,233.37 1849.57,233.193 1850.14,232.127 1850.71,231.099 1851.28,229.998 1851.85,229.278 1852.41,231.66 1852.98,229.74 1853.55,230.747 1854.12,231.137 1854.69,231.219 1855.26,231.253 1855.82,229.392 1856.39,227.633 1856.96,226.763 1857.53,226.252 1858.1,225.772 1858.67,226.087 1859.23,225.538 1859.8,226.988 1860.37,226.464 1860.94,226.84 1861.51,229.384 1862.08,229.687 1862.64,227.957 1863.21,229.39 1863.78,228.549 1864.35,231.898 1864.92,231.123 1865.49,231.076 1866.05,232.258 1866.62,230.173 1867.19,229.319 1867.76,229.711 1868.33,228.889 1868.9,231.122 1869.46,229.969 1870.03,230.151 1870.6,230.23 1871.17,232.498 1871.74,232.517 1872.31,233.692 1872.87,231.584 1873.44,230.589 1874.01,232.838 1874.58,232.745 1875.15,232.537 1875.72,233.705 1876.28,232.717 1876.85,233.805 1877.42,235.889 1877.99,236.705 1878.56,236.486 1879.13,237.144 1879.69,236.882 1880.26,234.542 1880.83,235.622 1881.4,235.383 1881.97,234.148 1882.54,230.969 1883.1,231.05 1883.67,231.993 1884.24,233.91 1884.81,232.664 1885.38,234.338 1885.95,235.237 1886.51,236.141 1887.08,234.976 1887.65,232.873 1888.22,230.775 1888.79,233.932 1889.36,232.794 1889.92,230.884 1890.49,233.019 1891.06,233.109 1891.63,231.919 1892.2,234.125 1892.77,234.204 1893.33,237.15 1893.9,234.733 1894.47,233.499 1895.04,234.43 1895.61,234.292 1896.18,234.985 1896.74,233.835 1897.31,234.676 1897.88,232.52 1898.45,231.681 1899.02,233.783 1899.59,233.767 1900.16,233.521 1900.72,236.26 1901.29,236.049 1901.86,234.788 1902.43,236.725 1903,235.135 1903.57,235.816 1904.13,232.297 1904.7,232.151 1905.27,232.12 1905.84,228.862 1906.41,226.852 1906.98,226.22 1907.54,225.374 1908.11,224.613 1908.68,227.052 1909.25,226.156 1909.82,229.661 1910.39,229.877 1910.95,231.123 1911.52,231.947 1912.09,233.042 1912.66,233.986 1913.23,231.762 1913.8,232.768 1914.36,233.674 1914.93,234.606 1915.5,237.394 1916.07,239.176 1916.64,240.669 1917.21,240.047 1917.77,240.251 1918.34,238.661 1918.91,238.013 1919.48,237.384 1920.05,237.128 1920.62,236.598 1921.18,235.184 1921.75,232.724 1922.32,234.022 1922.89,234.002 1923.46,234.736 1924.03,235.439 1924.59,235.991 1925.16,235.66 1925.73,234.374 1926.3,234.105 1926.87,234.664 1927.44,235.54 1928,235.243 1928.57,233.816 1929.14,231.29 1929.71,232.148 1930.28,232.869 1930.85,234.828 1931.41,235.394 1931.98,236.106 1932.55,233.648 1933.12,232.436 1933.69,233.263 1934.26,233.071 1934.82,233.844 1935.39,232.633 1935.96,233.53 1936.53,229.227 1937.1,230.297 1937.67,229.379 1938.23,228.292 1938.8,228.153 1939.37,228.22 1939.94,230.324 1940.51,230.344 1941.08,226.269 1941.64,226.34 1942.21,224.604 1942.78,224.917 1943.35,225.345 1943.92,224.709 1944.49,224.104 1945.05,223.452 1945.62,226.006 1946.19,228.472 1946.76,228.555 1947.33,228.594 1947.9,227.728 1948.46,229.982 1949.03,229.913 1949.6,228.947 1950.17,228.12 1950.74,225.427 1951.31,223.52 1951.87,225.031 1952.44,224.247 1953.01,225.996 1953.58,226.327 1954.15,228.012 1954.72,227.339 1955.28,226.543 1955.85,223.796 1956.42,224.451 1956.99,228.294 1957.56,228.611 1958.13,228.981 1958.69,229.191 1959.26,228.26 1959.83,228.558 1960.4,228.03 1960.97,231.566 1961.54,231.666 1962.1,231.744 1962.67,232.833 1963.24,233.73 1963.81,232.749 1964.38,231.709 1964.95,230.867 1965.51,230.063 1966.08,233.395 1966.65,236.533 1967.22,236.187 1967.79,236.993 1968.36,239.011 1968.92,238.483 1969.49,238.19 1970.06,234.767 1970.63,234.75 1971.2,233.502 1971.77,230.547 1972.34,231.936 1972.9,232.171 1973.47,229.295 1974.04,229.385 1974.61,230.721 1975.18,229.929 1975.75,230.162 1976.31,231.206 1976.88,231.361 1977.45,230.595 1978.02,231.76 1978.59,232.654 1979.16,233.68 1979.72,232.398 1980.29,230.523 1980.86,229.572 1981.43,231.827 1982,231.072 1982.57,232.272 1983.13,229.33 1983.7,229.716 1984.27,230.903 1984.84,233.12 1985.41,234.019 1985.98,232.749 1986.54,232.799 1987.11,233.769 1987.68,232.618 1988.25,232.629 1988.82,235.6 1989.39,233.356 1989.95,233.287 1990.52,234.195 1991.09,235.085 1991.66,233.787 1992.23,232.669 1992.8,232.443 1993.36,231.422 1993.93,230.529 1994.5,232.775 1995.07,230.65 1995.64,231.831 1996.21,229.797 1996.77,229.024 1997.34,229.184 1997.91,229.351 1998.48,229.614 1999.05,230.787 1999.62,229.911 2000.18,231.194 2000.75,231.497 2001.32,230.279 2001.89,229.325 2002.46,230.596 2003.03,229.865 2003.59,231.081 2004.16,232.132 2004.73,232.078 2005.3,232.082 2005.87,235.468 2006.44,237.217 2007,236.752 2007.57,237.579 2008.14,236.421 2008.71,238.343 2009.28,237.69 2009.85,235.149 2010.41,237.093 2010.98,236.829 2011.55,236.565 2012.12,236.112 2012.69,234.874 2013.26,234.495 2013.82,233.94 2014.39,233.784 2014.96,231.461 2015.53,230.509 2016.1,230.653 2016.67,229.615 2017.23,229.717 2017.8,227.729 2018.37,230.202 2018.94,230.267 2019.51,231.4 2020.08,230.378 2020.64,230.451 2021.21,233.594 2021.78,231.242 2022.35,232.376 2022.92,234.476 2023.49,233.235 2024.05,234.116 2024.62,235.974 2025.19,236.498 2025.76,236.978 2026.33,235.606 2026.9,234.474 2027.46,235.25 2028.03,235.896 2028.6,234.382 2029.17,235.112 2029.74,235.908 2030.31,232.446 2030.87,232.411 2031.44,232.218 2032.01,231.086 2032.58,233.111 2033.15,230.69 2033.72,230.666 2034.28,232.823 2034.85,232.641 2035.42,234.341 2035.99,234.065 2036.56,232.643 2037.13,234.531 2037.69,235.232 2038.26,235.717 2038.83,237.27 2039.4,236.744 2039.97,234.233 2040.54,232.92 2041.11,232.569 2041.67,232.638 2042.24,231.528 2042.81,229.579 2043.38,229.678 2043.95,232.882 2044.52,231.67 2045.08,231.634 2045.65,231.401 2046.22,230.299 2046.79,229.251 2047.36,229.115 2047.93,228.171 2048.49,229.384 2049.06,230.522 2049.63,228.667 2050.2,227.928 2050.77,225.986 2051.34,226.425 2051.9,230.045 2052.47,232.064 2053.04,232.091 2053.61,230.871 2054.18,229.599 2054.75,230.528 2055.31,227.327 2055.88,229.749 2056.45,229.108 2057.02,231.427 2057.59,231.401 2058.16,229.286 2058.72,231.822 2059.29,231.779 2059.86,232.755 2060.43,232.634 2061,232.712 2061.57,234.744 2062.13,232.261 2062.7,233.321 2063.27,233.227 2063.84,232.01 2064.41,229.02 2064.98,229.318 2065.54,228.308 2066.11,226.451 2066.68,227.996 2067.25,228.227 2067.82,228.316 2068.39,228.489 2068.95,228.791 2069.52,228.125 2070.09,227.5 2070.66,226.801 2071.23,228.013 2071.8,228.553 2072.36,227.779 2072.93,227.96 2073.5,225.158 2074.07,227.897 2074.64,229.411 2075.21,228.662 2075.77,228.788 2076.34,230.049 2076.91,229.197 2077.48,230.476 2078.05,231.157 2078.62,229.417 2079.18,229.377 2079.75,227.661 2080.32,228.956 2080.89,229.309 2081.46,230.57 2082.03,230.642 2082.59,229.812 2083.16,227.861 2083.73,225.282 2084.3,226.811 2084.87,228.929 2085.44,232.43 2086,231.657 2086.57,233.613 2087.14,235.66 2087.71,237.549 2088.28,238.315 2088.85,238.011 2089.41,237.389 2089.98,236.235 2090.55,235.883 2091.12,234.863 2091.69,235.765 2092.26,233.431 2092.82,233.539 2093.39,233.37 2093.96,233.522 2094.53,233.648 2095.1,234.619 2095.67,232.458 2096.23,233.47 2096.8,235.18 2097.37,234.065 2097.94,229.923 2098.51,228.934 2099.08,229.209 2099.64,229.443 2100.21,228.748 2100.78,229.025 2101.35,227.134 2101.92,226.44 2102.49,226.712 2103.05,229.235 2103.62,226.349 2104.19,229.836 2104.76,228.893 2105.33,229.132 2105.9,232.623 2106.46,235.66 2107.03,236.487 2107.6,236 2108.17,235.667 2108.74,236.513 2109.31,235.197 2109.87,234.966 2110.44,236.862 2111.01,236.464 2111.58,237.225 2112.15,238.858 2112.72,239.383 2113.29,236.876 2113.85,236.517 2114.42,236.148 2114.99,237.881 2115.56,237.321 2116.13,235.847 2116.7,235.57 2117.26,236.12 2117.83,235.845 2118.4,235.432 2118.97,236.444 2119.54,235.841 2120.11,236.716 2120.67,237.294 2121.24,237.904 2121.81,238.386 2122.38,239.537 2122.95,238.919 2123.52,237.323 2124.08,236.599 2124.65,233.172 2125.22,233.847 2125.79,234.709 2126.36,235.513 2126.93,233.922 2127.49,230.691 2128.06,229.631 2128.63,228.571 2129.2,228.584 2129.77,225.716 2130.34,225.08 2130.9,222.43 2131.47,221.983 2132.04,222.284 2132.61,224.088 2133.18,226.707 2133.75,224.757 2134.31,226.132 2134.88,226.485 2135.45,224.516 2136.02,225.077 2136.59,225.425 2137.16,225.894 2137.72,223.321 2138.29,224.964 2138.86,225.281 2139.43,223.702 2140,222.333 2140.57,221.873 2141.13,221.616 2141.7,221.433 2142.27,224.365 2142.84,226.056 2143.41,227.579 2143.98,228.066 2144.54,227.254 2145.11,228.862 2145.68,229.045 2146.25,229.445 2146.82,229.603 2147.39,230.06 2147.95,229.404 2148.52,230.729 2149.09,232.166 2149.66,236.469 2150.23,238.56 2150.8,240.347 2151.36,239.862 2151.93,239.307 2152.5,239.051 2153.07,238.576 2153.64,238.013 2154.21,236.654 2154.77,235.516 2155.34,239.372 2155.91,238.85 2156.48,237.727 2157.05,236.428 2157.62,238.28 2158.18,237.771 2158.75,238.454 2159.32,239.326 2159.89,238.894 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.039 ± 0.021\n  with uncertainty of ± 0.0013049671936868762\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01868 ± (0.00276146, 0.00311393) (MC)\n  95% confidence interval: [-4.02435, -4.01281]) (MC)\n  linear error propagation: -4.01964 ± 0.0029935\n  |δ_y| = |0.00248141| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018681124770187, val_l = 0.005663972535062456, val_u = 0.005867377931326523)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip720\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip721\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip722\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.28 2211.02,1152.28 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1000.07 2211.02,1000.07 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,847.863 2211.02,847.863 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,695.653 2211.02,695.653 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,543.443 2211.02,543.443 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,391.234 2211.02,391.234 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,239.024 2211.02,239.024 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.28 365.751,1152.28 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1000.07 365.751,1000.07 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,847.863 365.751,847.863 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,695.653 365.751,695.653 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,543.443 365.751,543.443 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,391.234 365.751,391.234 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,239.024 365.751,239.024 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M298.909 1138.08 Q295.298 1138.08 293.469 1141.65 Q291.664 1145.19 291.664 1152.32 Q291.664 1159.42 293.469 1162.99 Q295.298 1166.53 298.909 1166.53 Q302.543 1166.53 304.349 1162.99 Q306.177 1159.42 306.177 1152.32 Q306.177 1145.19 304.349 1141.65 Q302.543 1138.08 298.909 1138.08 M298.909 1134.38 Q304.719 1134.38 307.775 1138.98 Q310.853 1143.57 310.853 1152.32 Q310.853 1161.04 307.775 1165.65 Q304.719 1170.23 298.909 1170.23 Q293.099 1170.23 290.02 1165.65 Q286.964 1161.04 286.964 1152.32 Q286.964 1143.57 290.02 1138.98 Q293.099 1134.38 298.909 1134.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M259.557 1013.42 L267.196 1013.42 L267.196 987.052 L258.886 988.718 L258.886 984.459 L267.15 982.792 L271.826 982.792 L271.826 1013.42 L279.465 1013.42 L279.465 1017.35 L259.557 1017.35 L259.557 1013.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 985.871 Q295.298 985.871 293.469 989.436 Q291.664 992.977 291.664 1000.11 Q291.664 1007.21 293.469 1010.78 Q295.298 1014.32 298.909 1014.32 Q302.543 1014.32 304.349 1010.78 Q306.177 1007.21 306.177 1000.11 Q306.177 992.977 304.349 989.436 Q302.543 985.871 298.909 985.871 M298.909 982.167 Q304.719 982.167 307.775 986.774 Q310.853 991.357 310.853 1000.11 Q310.853 1008.83 307.775 1013.44 Q304.719 1018.02 298.909 1018.02 Q293.099 1018.02 290.02 1013.44 Q286.964 1008.83 286.964 1000.11 Q286.964 991.357 290.02 986.774 Q293.099 982.167 298.909 982.167 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M262.775 861.207 L279.094 861.207 L279.094 865.143 L257.15 865.143 L257.15 861.207 Q259.812 858.453 264.395 853.823 Q269.002 849.17 270.182 847.828 Q272.428 845.305 273.307 843.569 Q274.21 841.809 274.21 840.12 Q274.21 837.365 272.266 835.629 Q270.344 833.893 267.242 833.893 Q265.043 833.893 262.59 834.657 Q260.159 835.421 257.381 836.971 L257.381 832.249 Q260.205 831.115 262.659 830.536 Q265.113 829.958 267.15 829.958 Q272.52 829.958 275.715 832.643 Q278.909 835.328 278.909 839.819 Q278.909 841.948 278.099 843.87 Q277.312 845.768 275.205 848.36 Q274.627 849.032 271.525 852.249 Q268.423 855.444 262.775 861.207 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 833.661 Q295.298 833.661 293.469 837.226 Q291.664 840.768 291.664 847.897 Q291.664 855.004 293.469 858.569 Q295.298 862.11 298.909 862.11 Q302.543 862.11 304.349 858.569 Q306.177 855.004 306.177 847.897 Q306.177 840.768 304.349 837.226 Q302.543 833.661 298.909 833.661 M298.909 829.958 Q304.719 829.958 307.775 834.564 Q310.853 839.147 310.853 847.897 Q310.853 856.624 307.775 861.231 Q304.719 865.814 298.909 865.814 Q293.099 865.814 290.02 861.231 Q286.964 856.624 286.964 847.897 Q286.964 839.147 290.02 834.564 Q293.099 829.958 298.909 829.958 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M272.914 694.299 Q276.27 695.016 278.145 697.285 Q280.043 699.553 280.043 702.887 Q280.043 708.002 276.525 710.803 Q273.006 713.604 266.525 713.604 Q264.349 713.604 262.034 713.164 Q259.742 712.748 257.289 711.891 L257.289 707.377 Q259.233 708.512 261.548 709.09 Q263.863 709.669 266.386 709.669 Q270.784 709.669 273.076 707.933 Q275.39 706.197 275.39 702.887 Q275.39 699.831 273.238 698.118 Q271.108 696.382 267.289 696.382 L263.261 696.382 L263.261 692.54 L267.474 692.54 Q270.923 692.54 272.752 691.174 Q274.58 689.785 274.58 687.192 Q274.58 684.53 272.682 683.118 Q270.807 681.683 267.289 681.683 Q265.367 681.683 263.168 682.1 Q260.969 682.516 258.33 683.396 L258.33 679.229 Q260.992 678.489 263.307 678.118 Q265.645 677.748 267.705 677.748 Q273.029 677.748 276.131 680.178 Q279.233 682.586 279.233 686.706 Q279.233 689.577 277.59 691.567 Q275.946 693.535 272.914 694.299 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 681.452 Q295.298 681.452 293.469 685.016 Q291.664 688.558 291.664 695.688 Q291.664 702.794 293.469 706.359 Q295.298 709.901 298.909 709.901 Q302.543 709.901 304.349 706.359 Q306.177 702.794 306.177 695.688 Q306.177 688.558 304.349 685.016 Q302.543 681.452 298.909 681.452 M298.909 677.748 Q304.719 677.748 307.775 682.354 Q310.853 686.938 310.853 695.688 Q310.853 704.414 307.775 709.021 Q304.719 713.604 298.909 713.604 Q293.099 713.604 290.02 709.021 Q286.964 704.414 286.964 695.688 Q286.964 686.938 290.02 682.354 Q293.099 677.748 298.909 677.748 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M271.594 530.237 L259.789 548.686 L271.594 548.686 L271.594 530.237 M270.367 526.163 L276.247 526.163 L276.247 548.686 L281.177 548.686 L281.177 552.575 L276.247 552.575 L276.247 560.723 L271.594 560.723 L271.594 552.575 L255.992 552.575 L255.992 548.061 L270.367 526.163 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 529.242 Q295.298 529.242 293.469 532.807 Q291.664 536.348 291.664 543.478 Q291.664 550.584 293.469 554.149 Q295.298 557.691 298.909 557.691 Q302.543 557.691 304.349 554.149 Q306.177 550.584 306.177 543.478 Q306.177 536.348 304.349 532.807 Q302.543 529.242 298.909 529.242 M298.909 525.538 Q304.719 525.538 307.775 530.145 Q310.853 534.728 310.853 543.478 Q310.853 552.205 307.775 556.811 Q304.719 561.395 298.909 561.395 Q293.099 561.395 290.02 556.811 Q286.964 552.205 286.964 543.478 Q286.964 534.728 290.02 530.145 Q293.099 525.538 298.909 525.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M258.793 373.954 L277.15 373.954 L277.15 377.889 L263.076 377.889 L263.076 386.361 Q264.094 386.014 265.113 385.852 Q266.131 385.666 267.15 385.666 Q272.937 385.666 276.316 388.838 Q279.696 392.009 279.696 397.426 Q279.696 403.004 276.224 406.106 Q272.752 409.185 266.432 409.185 Q264.256 409.185 261.988 408.815 Q259.742 408.444 257.335 407.703 L257.335 403.004 Q259.418 404.139 261.641 404.694 Q263.863 405.25 266.34 405.25 Q270.344 405.25 272.682 403.143 Q275.02 401.037 275.02 397.426 Q275.02 393.815 272.682 391.708 Q270.344 389.602 266.34 389.602 Q264.465 389.602 262.59 390.018 Q260.738 390.435 258.793 391.315 L258.793 373.954 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 377.032 Q295.298 377.032 293.469 380.597 Q291.664 384.139 291.664 391.268 Q291.664 398.375 293.469 401.94 Q295.298 405.481 298.909 405.481 Q302.543 405.481 304.349 401.94 Q306.177 398.375 306.177 391.268 Q306.177 384.139 304.349 380.597 Q302.543 377.032 298.909 377.032 M298.909 373.329 Q304.719 373.329 307.775 377.935 Q310.853 382.518 310.853 391.268 Q310.853 399.995 307.775 404.602 Q304.719 409.185 298.909 409.185 Q293.099 409.185 290.02 404.602 Q286.964 399.995 286.964 391.268 Q286.964 382.518 290.02 377.935 Q293.099 373.329 298.909 373.329 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M269.326 237.16 Q266.178 237.16 264.326 239.313 Q262.497 241.466 262.497 245.216 Q262.497 248.943 264.326 251.119 Q266.178 253.272 269.326 253.272 Q272.474 253.272 274.303 251.119 Q276.154 248.943 276.154 245.216 Q276.154 241.466 274.303 239.313 Q272.474 237.16 269.326 237.16 M278.608 222.508 L278.608 226.767 Q276.849 225.934 275.043 225.494 Q273.261 225.054 271.502 225.054 Q266.872 225.054 264.418 228.179 Q261.988 231.304 261.641 237.623 Q263.006 235.61 265.066 234.545 Q267.127 233.457 269.603 233.457 Q274.812 233.457 277.821 236.628 Q280.853 239.776 280.853 245.216 Q280.853 250.54 277.705 253.758 Q274.557 256.975 269.326 256.975 Q263.33 256.975 260.159 252.392 Q256.988 247.785 256.988 239.059 Q256.988 230.864 260.877 226.003 Q264.766 221.119 271.316 221.119 Q273.076 221.119 274.858 221.466 Q276.664 221.813 278.608 222.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M298.909 224.823 Q295.298 224.823 293.469 228.387 Q291.664 231.929 291.664 239.059 Q291.664 246.165 293.469 249.73 Q295.298 253.272 298.909 253.272 Q302.543 253.272 304.349 249.73 Q306.177 246.165 306.177 239.059 Q306.177 231.929 304.349 228.387 Q302.543 224.823 298.909 224.823 M298.909 221.119 Q304.719 221.119 307.775 225.725 Q310.853 230.309 310.853 239.059 Q310.853 247.785 307.775 252.392 Q304.719 256.975 298.909 256.975 Q293.099 256.975 290.02 252.392 Q286.964 247.785 286.964 239.059 Q286.964 230.309 290.02 225.725 Q293.099 221.119 298.909 221.119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1040.13 400.199,937.096 400.786,842.558 401.372,869.724 401.958,783.018 402.545,709.309 403.131,636.489 403.718,570.122 404.304,511.467 404.891,458.198 405.477,410.106 406.063,366.857 406.65,328.136 407.236,365.499 407.823,331.807 408.409,301.972 408.995,333.756 409.582,308.504 410.168,286.509 410.755,267.556 411.341,251.441 411.927,238.697 412.514,227.655 413.1,219.895 413.687,249.101 414.273,305.565 414.86,299.58 415.446,295.42 416.032,318.158 416.619,317.135 417.205,316.796 417.792,340.028 418.378,340.353 418.964,342.932 419.551,381.494 420.137,433.543 420.724,437.641 421.31,443.439 421.896,449.111 422.483,468.932 423.069,488.992 423.656,497.738 424.242,527.359 424.829,544.819 425.415,561.721 426.001,578.112 426.588,595.198 427.174,602.367 427.761,609.678 428.347,632.425 428.933,638.846 429.52,653.623 430.106,661.239 430.693,681.865 431.279,694.955 431.865,707.799 432.452,715.007 433.038,727.814 433.625,735.451 434.211,747.915 434.798,759.914 435.384,771.598 435.97,778.631 436.557,794.867 437.143,810.407 437.73,837.216 438.316,854.861 438.902,863.953 439.489,873.207 440.075,888.863 440.662,897.336 441.248,909.047 441.835,913.898 442.421,925.068 443.007,935.716 443.594,949.35 444.18,959.366 444.767,966.721 445.353,976.311 445.939,980.358 446.526,995.118 447.112,998.619 447.699,1005.04 448.285,1013.82 448.871,1019.88 449.458,1025.96 450.044,1036.44 450.631,1039.95 451.217,1047.74 451.804,1053.38 452.39,1056.42 452.976,1059.57 453.563,1068.91 454.149,1076.26 454.736,1082.87 455.322,1085.47 455.908,1096.08 456.495,1102.6 457.081,1110.67 457.668,1116.37 458.254,1118.42 458.84,1121.91 459.427,1125.51 460.013,1129.21 460.6,1130.94 461.186,1134.42 461.773,1136.23 462.359,1139.79 462.945,1145.06 463.532,1149.63 464.118,1153.13 464.705,1154.85 465.291,1159.62 465.877,1160.98 466.464,1163.8 467.05,1168.19 467.637,1169.53 468.223,1173.86 468.809,1174.8 469.396,1177.27 469.982,1179.76 470.569,1180.76 471.155,1181.54 471.742,1182.58 472.328,1186.75 472.914,1193.79 473.501,1195.77 474.087,1196.37 474.674,1197.09 475.26,1202.08 475.846,1202.55 476.433,1205.89 477.019,1205.95 477.606,1206.16 478.192,1207.63 478.778,1208.04 479.365,1209.69 479.951,1211.48 480.538,1211.65 481.124,1213.52 481.711,1214.91 482.297,1216.53 482.883,1219.27 483.47,1223.16 484.056,1225.59 484.643,1229.42 485.229,1227.64 485.815,1225.74 486.402,1223.7 486.988,1223.86 487.575,1223.91 488.161,1226.74 488.748,1227.99 489.334,1230.4 489.92,1231.33 490.507,1230.83 491.093,1230.41 491.68,1231.42 492.266,1231.07 492.852,1229.52 493.439,1230.69 494.025,1233.03 494.612,1235.5 495.198,1233.55 495.784,1232 496.371,1234.69 496.957,1237.15 497.544,1238.08 498.13,1241.6 498.717,1241.03 499.303,1242.01 499.889,1242.85 500.476,1243.6 501.062,1240.34 501.649,1240.92 502.235,1240.28 502.821,1239.61 503.408,1241.7 503.994,1241.38 504.581,1242.06 505.167,1241.42 505.753,1241.01 506.34,1239.25 506.926,1239.93 507.513,1240.98 508.099,1242.96 508.686,1243.47 509.272,1242.83 509.858,1243.41 510.445,1243.01 511.031,1242.34 511.618,1243.25 512.204,1245.39 512.79,1246.17 513.377,1245.18 513.963,1245.87 514.55,1247.56 515.136,1248.3 515.722,1248.91 516.309,1249.16 516.895,1249.55 517.482,1248.6 518.068,1245.44 518.655,1244.76 519.241,1242.94 519.827,1243.77 520.414,1244.29 521,1245.13 521.587,1246.87 522.173,1243.45 522.759,1245.45 523.346,1244.61 523.932,1250.33 524.519,1250.53 525.105,1247.05 525.691,1245.3 526.278,1247.19 526.864,1247.6 527.451,1247.92 528.037,1247.15 528.624,1248.81 529.21,1246.65 529.796,1244.66 530.383,1242.55 530.969,1242.11 531.556,1240.19 532.142,1238.63 532.728,1239.53 533.315,1237.8 533.901,1237.27 534.488,1236.9 535.074,1235.52 535.661,1230.22 536.247,1231.82 536.833,1230.78 537.42,1230.71 538.006,1229.52 538.593,1228.34 539.179,1228.52 539.765,1231.25 540.352,1231.39 540.938,1231.32 541.525,1233.78 542.111,1233.69 542.697,1238.72 543.284,1240.77 543.87,1245.07 544.457,1244.19 545.043,1244.89 545.63,1244.33 546.216,1243.58 546.802,1242.88 547.389,1244.59 547.975,1243.87 548.562,1241.89 549.148,1241.17 549.734,1239.36 550.321,1241.34 550.907,1241.94 551.494,1242.53 552.08,1242.05 552.666,1241.47 553.253,1240.54 553.839,1237.3 554.426,1236.47 555.012,1236.24 555.599,1237.21 556.185,1237.96 556.771,1238.83 557.358,1236.91 557.944,1237.83 558.531,1238.43 559.117,1239.17 559.703,1237.36 560.29,1236.83 560.876,1236.44 561.463,1234.73 562.049,1234.78 562.635,1236.94 563.222,1238.98 563.808,1239.59 564.395,1241.31 564.981,1239.31 565.568,1238.7 566.154,1238.26 566.74,1236.49 567.327,1235.98 567.913,1236.94 568.5,1236.37 569.086,1235.8 569.672,1233.81 570.259,1237.34 570.845,1235.63 571.432,1232.99 572.018,1234.21 572.605,1234.07 573.191,1235.05 573.777,1234.77 574.364,1233.24 574.95,1235.5 575.537,1233.73 576.123,1233.46 576.709,1235.34 577.296,1234.9 577.882,1236.64 578.469,1236.09 579.055,1234.39 579.641,1233.92 580.228,1234.86 580.814,1235.78 581.401,1232.86 581.987,1233.75 582.574,1236.63 583.16,1235.08 583.746,1234.47 584.333,1235.12 584.919,1236.23 585.506,1234.6 586.092,1235.44 586.678,1237.07 587.265,1237.59 587.851,1238.19 588.438,1238.53 589.024,1239.21 589.61,1239.65 590.197,1240.43 590.783,1241.21 591.37,1240.45 591.956,1237.33 592.543,1236.59 593.129,1234.75 593.715,1233.26 594.302,1231.64 594.888,1229.82 595.475,1228.31 596.061,1228.33 596.647,1229.24 597.234,1230.04 597.82,1230.82 598.407,1231.54 598.993,1231.28 599.579,1229.38 600.166,1228.82 600.752,1224.75 601.339,1226.13 601.925,1226.08 602.512,1227.19 603.098,1228.16 603.684,1226.34 604.271,1224.67 604.857,1224.64 605.444,1226.04 606.03,1227.27 606.616,1227.12 607.203,1226.95 607.789,1225.75 608.376,1227.14 608.962,1228.1 609.548,1226.92 610.135,1225.64 610.721,1224.36 611.308,1226.76 611.894,1227.87 612.481,1232.7 613.067,1234.78 613.653,1234.31 614.24,1234.94 614.826,1238.28 615.413,1237.4 615.999,1237.9 616.585,1233.58 617.172,1234.25 617.758,1235.15 618.345,1236.87 618.931,1237.51 619.518,1238.01 620.104,1233.5 620.69,1228.97 621.277,1228.77 621.863,1229.98 622.45,1228.26 623.036,1226.48 623.622,1226.22 624.209,1227.3 624.795,1220.59 625.382,1221.85 625.968,1221.94 626.554,1221.88 627.141,1220.52 627.727,1220.87 628.314,1222.14 628.9,1223.41 629.487,1222.1 630.073,1219.56 630.659,1221.17 631.246,1219.99 631.832,1221.2 632.419,1223.79 633.005,1222.19 633.591,1219.63 634.178,1221.15 634.764,1220.2 635.351,1220.2 635.937,1220.6 636.523,1219.64 637.11,1220.89 637.696,1221 638.283,1221.03 638.869,1219.63 639.456,1220.98 640.042,1222.26 640.628,1223.27 641.215,1222.11 641.801,1222.2 642.388,1223.33 642.974,1225.45 643.56,1227.63 644.147,1228.51 644.733,1229.89 645.32,1229.54 645.906,1227.68 646.492,1225.88 647.079,1225.89 647.665,1225.88 648.252,1225.84 648.838,1229.24 649.425,1228.71 650.011,1229.26 650.597,1230.28 651.184,1230.13 651.77,1228.46 652.357,1225.59 652.943,1223.02 653.529,1220.45 654.116,1220.48 654.702,1221.64 655.289,1219.17 655.875,1219.5 656.462,1217.26 657.048,1217.67 657.634,1217.76 658.221,1219.34 658.807,1220.87 659.394,1220.79 659.98,1223.22 660.566,1223 661.153,1225.38 661.739,1222.58 662.326,1224.04 662.912,1224.87 663.498,1223.04 664.085,1221.5 664.671,1222.5 665.258,1222.21 665.844,1222.07 666.431,1220.69 667.017,1218.47 667.603,1221.05 668.19,1220.95 668.776,1218.38 669.363,1220.95 669.949,1221.01 670.535,1218.47 671.122,1219.99 671.708,1222.58 672.295,1224.62 672.881,1221.64 673.467,1222.7 674.054,1222.52 674.64,1222.56 675.227,1222.57 675.813,1221.21 676.4,1221.04 676.986,1222.15 677.572,1224.55 678.159,1224.16 678.745,1227.63 679.332,1225.92 679.918,1224.3 680.504,1224.39 681.091,1223.1 681.677,1222.92 682.264,1226.54 682.85,1227.29 683.436,1228.31 684.023,1229.23 684.609,1229.66 685.196,1230.23 685.782,1231.07 686.369,1230.8 686.955,1232.57 687.541,1230.65 688.128,1230.05 688.714,1228.42 689.301,1226.39 689.887,1226.07 690.473,1229.46 691.06,1230.07 691.646,1228.29 692.233,1225.41 692.819,1225.16 693.405,1226.23 693.992,1224.7 694.578,1224.3 695.165,1224.87 695.751,1223.13 696.338,1222.76 696.924,1223.84 697.51,1227.44 698.097,1227.12 698.683,1227.87 699.27,1226.01 699.856,1224.31 700.442,1223.71 701.029,1222 701.615,1221.96 702.202,1220.39 702.788,1220.18 703.375,1222.53 703.961,1221.12 704.547,1220.86 705.134,1218.22 705.72,1218.42 706.307,1219.41 706.893,1216.87 707.479,1214.5 708.066,1213.72 708.652,1212.6 709.239,1210.48 709.825,1212.25 710.411,1213.65 710.998,1215.31 711.584,1215.73 712.171,1216.89 712.757,1215.71 713.344,1218.34 713.93,1218.64 714.516,1218.58 715.103,1219.75 715.689,1219.93 716.276,1217.72 716.862,1215.32 717.448,1214.32 718.035,1215.94 718.621,1217.26 719.208,1217.32 719.794,1213.61 720.38,1213.84 720.967,1215.35 721.553,1215.36 722.14,1214.49 722.726,1216.05 723.313,1214.86 723.899,1213.87 724.485,1215.19 725.072,1219.04 725.658,1219.11 726.245,1221.33 726.831,1221.24 727.417,1219.91 728.004,1220.93 728.59,1218.28 729.177,1219.37 729.763,1218.02 730.349,1216.85 730.936,1218.02 731.522,1216.59 732.109,1216.76 732.695,1218.13 733.282,1219.4 733.868,1218.25 734.454,1219.56 735.041,1216.69 735.627,1221.62 736.214,1218.99 736.8,1221.2 737.386,1219.81 737.973,1219.72 738.559,1219.6 739.146,1218.29 739.732,1218.2 740.318,1216.95 740.905,1218.43 741.491,1216.25 742.078,1215.95 742.664,1214.89 743.251,1215.43 743.837,1214.44 744.423,1214.36 745.01,1217.21 745.596,1218.33 746.183,1219.29 746.769,1219.3 747.355,1221.48 747.942,1219.99 748.528,1219.68 749.115,1223.08 749.701,1222.98 750.288,1222.72 750.874,1223.51 751.46,1221.94 752.047,1224.15 752.633,1223.86 753.22,1223.31 753.806,1221.76 754.392,1221.36 754.979,1218.66 755.565,1218.68 756.152,1218.78 756.738,1217.26 757.324,1219.73 757.911,1220.92 758.497,1219.7 759.084,1218.44 759.67,1218.42 760.257,1218.33 760.843,1219.79 761.429,1218.46 762.016,1217.12 762.602,1219.5 763.189,1219.34 763.775,1218.19 764.361,1218.22 764.948,1216.84 765.534,1219.06 766.121,1219.08 766.707,1217.63 767.293,1218.87 767.88,1221.37 768.466,1220.01 769.053,1220.98 769.639,1215.84 770.226,1214.64 770.812,1213.76 771.398,1212.5 771.985,1211.44 772.571,1211.36 773.158,1211.9 773.744,1213.75 774.33,1214.09 774.917,1214.18 775.503,1216.54 776.09,1216.58 776.676,1220.14 777.262,1220.28 777.849,1221.13 778.435,1219.4 779.022,1217.85 779.608,1217.93 780.195,1217.96 780.781,1217.96 781.367,1216.75 781.954,1219.28 782.54,1217.88 783.127,1217.95 783.713,1217.67 784.299,1216.22 784.886,1216.2 785.472,1218.6 786.059,1216.15 786.645,1218.71 787.232,1222.21 787.818,1221.88 788.404,1222.74 788.991,1222.42 789.577,1222.05 790.164,1221.79 790.75,1217.86 791.336,1217.87 791.923,1219.08 792.509,1220.55 793.096,1221.7 793.682,1219.2 794.268,1218.93 794.855,1216.43 795.441,1216.43 796.028,1217.88 796.614,1219.01 797.201,1221.34 797.787,1219.99 798.373,1219.75 798.96,1218.27 799.546,1220.83 800.133,1220.54 800.719,1221.58 801.305,1217.65 801.892,1217.63 802.478,1217.54 803.065,1216.2 803.651,1216.26 804.237,1216.24 804.824,1216.08 805.41,1216.04 805.997,1214.75 806.583,1212.74 807.17,1213.91 807.756,1212.73 808.342,1212.75 808.929,1210.79 809.515,1211.05 810.102,1212.78 810.688,1212.9 811.274,1214.36 811.861,1214.42 812.447,1215.54 813.034,1212.95 813.62,1214.27 814.206,1215.62 814.793,1216.82 815.379,1217.81 815.966,1217.73 816.552,1215.13 817.139,1214.97 817.725,1214.96 818.311,1214.8 818.898,1217.38 819.484,1217.4 820.071,1216.11 820.657,1213.49 821.243,1213.54 821.83,1213.93 822.416,1212.55 823.003,1211.65 823.589,1211.78 824.175,1213.09 824.762,1214.68 825.348,1214.77 825.935,1212.47 826.521,1212.83 827.108,1211.81 827.694,1210.8 828.28,1213.62 828.867,1214.9 829.453,1214.85 830.04,1214.82 830.626,1213.56 831.212,1214.94 831.799,1218.71 832.385,1220.13 832.972,1222.23 833.558,1220.72 834.145,1219.11 834.731,1219.06 835.317,1219.04 835.904,1218.94 836.49,1217.82 837.077,1217.91 837.663,1215.16 838.249,1215.39 838.836,1217 839.422,1214.26 840.009,1209.6 840.595,1210.05 841.181,1210.44 841.768,1206.77 842.354,1205.78 842.941,1205.19 843.527,1205.79 844.114,1205.15 844.7,1203.17 845.286,1205.23 845.873,1207.16 846.459,1207.28 847.046,1209.1 847.632,1210.83 848.218,1212.28 848.805,1213.66 849.391,1212.59 849.978,1211.56 850.564,1213 851.15,1214.41 851.737,1216.69 852.323,1217.72 852.91,1221.46 853.496,1222.56 854.083,1223.6 854.669,1224.31 855.255,1222.83 855.842,1221.19 856.428,1222.24 857.015,1221.61 857.601,1221.2 858.187,1218.58 858.774,1218.45 859.36,1214.74 859.947,1215.11 860.533,1213.89 861.119,1215.17 861.706,1214.88 862.292,1212.74 862.879,1211.65 863.465,1213.21 864.052,1213.16 864.638,1213.3 865.224,1214.65 865.811,1216.14 866.397,1214.63 866.984,1215.9 867.57,1215.55 868.156,1216.99 868.743,1218.27 869.329,1218.01 869.916,1219.25 870.502,1218.67 871.089,1217.03 871.675,1216.62 872.261,1216.9 872.848,1214.25 873.434,1212.93 874.021,1213.1 874.607,1214.05 875.193,1214.07 875.78,1215.36 876.366,1214.14 876.953,1211.71 877.539,1214.56 878.125,1214.32 878.712,1214.04 879.298,1216.49 879.885,1221.43 880.471,1218.61 881.058,1218.35 881.644,1217.19 882.23,1218.3 882.817,1218.14 883.403,1220.5 883.99,1216.45 884.576,1215.01 885.162,1216.18 885.749,1216.26 886.335,1214.84 886.922,1213.47 887.508,1213.45 888.094,1215 888.681,1216.01 889.267,1215.92 889.854,1215.97 890.44,1215.69 891.027,1216.96 891.613,1218.34 892.199,1216.87 892.786,1214.62 893.372,1216.21 893.959,1217.52 894.545,1219.71 895.131,1217.93 895.718,1217.86 896.304,1217.82 896.891,1217.54 897.477,1221.04 898.063,1220.59 898.65,1219.14 899.236,1221.25 899.823,1221.09 900.409,1219.44 900.996,1218.27 901.582,1213.4 902.168,1217.05 902.755,1214.3 903.341,1215.46 903.928,1215.29 904.514,1216.44 905.1,1217.46 905.687,1217.2 906.273,1218.27 906.86,1215.76 907.446,1211.97 908.032,1209.66 908.619,1209.9 909.205,1211.53 909.792,1212.86 910.378,1214.05 910.965,1215.28 911.551,1214.01 912.137,1213.04 912.724,1214.26 913.31,1215.58 913.897,1218.08 914.483,1217.97 915.069,1217.6 915.656,1219.82 916.242,1220.84 916.829,1217.87 917.415,1216.68 918.002,1218.03 918.588,1217.91 919.174,1218.97 919.761,1217.28 920.347,1217.07 920.934,1215.67 921.52,1218.28 922.106,1214.18 922.693,1211.92 923.279,1214.41 923.866,1213.07 924.452,1212.89 925.038,1214.19 925.625,1214.31 926.211,1212.86 926.798,1211.63 927.384,1211.8 927.971,1214.42 928.557,1216.69 929.143,1215.27 929.73,1215.16 930.316,1211.37 930.903,1212.75 931.489,1212.93 932.075,1214.12 932.662,1215.31 933.248,1218.78 933.835,1218.5 934.421,1218.18 935.007,1222.09 935.594,1219.2 936.18,1218.91 936.767,1217.45 937.353,1218.55 937.94,1217.09 938.526,1215.67 939.112,1216.96 939.699,1219.38 940.285,1220.31 940.872,1221.28 941.458,1224.46 942.044,1223.91 942.631,1219.64 943.217,1218.19 943.804,1218.1 944.39,1219.19 944.976,1221.03 945.563,1222.98 946.149,1221.42 946.736,1219.71 947.322,1219.56 947.909,1219.39 948.495,1216.64 949.081,1221.35 949.668,1221.25 950.254,1219.78 950.841,1218.2 951.427,1216.73 952.013,1217.87 952.6,1219.05 953.186,1216.23 953.773,1218.59 954.359,1218.2 954.945,1219.18 955.532,1217.53 956.118,1216.11 956.705,1212.36 957.291,1213.53 957.878,1214.94 958.464,1218.38 959.05,1218.13 959.637,1216.63 960.223,1215.34 960.81,1213.76 961.396,1215.07 961.982,1214.94 962.569,1212.21 963.155,1213.45 963.742,1210.92 964.328,1213.57 964.915,1212.24 965.501,1212.28 966.087,1211.23 966.674,1208.77 967.26,1207.66 967.847,1206.78 968.433,1207.09 969.019,1206.31 969.606,1205.27 970.192,1204.49 970.779,1207.54 971.365,1206.86 971.951,1209.47 972.538,1207.24 973.124,1206.17 973.711,1206.64 974.297,1205.77 974.884,1210.19 975.47,1208.14 976.056,1207.2 976.643,1208.84 977.229,1207.9 977.816,1209.54 978.402,1209.55 978.988,1207.35 979.575,1206.62 980.161,1206.93 980.748,1206 981.334,1206.63 981.92,1206.85 982.507,1205.96 983.093,1206.51 983.68,1206.7 984.266,1206.97 984.853,1207.29 985.439,1207.97 986.025,1209.51 986.612,1209.7 987.198,1206.09 987.785,1205.32 988.371,1207.05 988.957,1207.61 989.544,1208.11 990.13,1208.33 990.717,1208.64 991.303,1209.04 991.889,1209.1 992.476,1214.28 993.062,1213.12 993.649,1213.41 994.235,1214.78 994.822,1215.99 995.408,1214.86 995.994,1214.74 996.581,1214.78 997.167,1214.76 997.754,1214.75 998.34,1214.65 998.926,1215.64 999.513,1216.99 1000.1,1216.81 1000.69,1217 1001.27,1217.07 1001.86,1216.03 1002.44,1214.85 1003.03,1213.61 1003.62,1213.73 1004.2,1212.51 1004.79,1210.2 1005.38,1211.86 1005.96,1212.03 1006.55,1210.78 1007.14,1209.5 1007.72,1210.86 1008.31,1209.91 1008.9,1211.51 1009.48,1211.58 1010.07,1211.71 1010.65,1210.62 1011.24,1209.32 1011.83,1209.55 1012.41,1212.16 1013,1212.23 1013.59,1213.65 1014.17,1216.07 1014.76,1214.89 1015.35,1216.3 1015.93,1216.21 1016.52,1217.15 1017.11,1215.95 1017.69,1217 1018.28,1220.56 1018.86,1219.17 1019.45,1222.42 1020.04,1224.59 1020.62,1227.71 1021.21,1225.87 1021.8,1223.89 1022.38,1223.24 1022.97,1220.56 1023.56,1220.08 1024.14,1220.99 1024.73,1220.67 1025.32,1222.86 1025.9,1223.97 1026.49,1225.94 1027.07,1225.43 1027.66,1224.71 1028.25,1223.97 1028.83,1222.42 1029.42,1221.94 1030.01,1219.02 1030.59,1219.96 1031.18,1218.44 1031.77,1217 1032.35,1213.09 1032.94,1211.73 1033.52,1211.77 1034.11,1213.98 1034.7,1214.05 1035.28,1215.18 1035.87,1215.07 1036.46,1217.36 1037.04,1219.9 1037.63,1218.26 1038.22,1219.11 1038.8,1217.37 1039.39,1219.48 1039.98,1219.27 1040.56,1220.06 1041.15,1219.88 1041.73,1216.97 1042.32,1215.44 1042.91,1214.01 1043.49,1211.76 1044.08,1211.66 1044.67,1214.25 1045.25,1212.9 1045.84,1212.73 1046.43,1212.85 1047.01,1211.69 1047.6,1211.6 1048.19,1211.59 1048.77,1211.67 1049.36,1214.07 1049.94,1213.92 1050.53,1212.6 1051.12,1211.16 1051.7,1216.28 1052.29,1216.15 1052.88,1217.17 1053.46,1218.24 1054.05,1219.34 1054.64,1216.52 1055.22,1215.16 1055.81,1216.36 1056.39,1216.06 1056.98,1215.88 1057.57,1215.73 1058.15,1216.67 1058.74,1213.97 1059.33,1213.79 1059.91,1209.98 1060.5,1207.91 1061.09,1208.23 1061.67,1207.72 1062.26,1209.46 1062.85,1209.64 1063.43,1211.15 1064.02,1214.91 1064.6,1215.97 1065.19,1214.72 1065.78,1214.65 1066.36,1214.41 1066.95,1214.33 1067.54,1213.35 1068.12,1213.58 1068.71,1215.99 1069.3,1217.16 1069.88,1214.61 1070.47,1214.23 1071.06,1216.6 1071.64,1216.35 1072.23,1216.53 1072.81,1217.6 1073.4,1218.48 1073.99,1218.14 1074.57,1218.23 1075.16,1218.06 1075.75,1216.56 1076.33,1216.31 1076.92,1217.68 1077.51,1217.47 1078.09,1218.51 1078.68,1218.31 1079.26,1215.59 1079.85,1215.56 1080.44,1215.54 1081.02,1217.89 1081.61,1218.97 1082.2,1218.74 1082.78,1219.74 1083.37,1219.59 1083.96,1219.54 1084.54,1216.93 1085.13,1213.07 1085.72,1213.15 1086.3,1211.67 1086.89,1207.95 1087.47,1206.89 1088.06,1206.98 1088.65,1205.94 1089.23,1204.17 1089.82,1203.42 1090.41,1206.33 1090.99,1205.55 1091.58,1205.69 1092.17,1206.2 1092.75,1207.86 1093.34,1208.52 1093.93,1207.74 1094.51,1210.38 1095.1,1211.96 1095.68,1213.39 1096.27,1214.69 1096.86,1213.41 1097.44,1210.68 1098.03,1209.7 1098.62,1211.23 1099.2,1212.58 1099.79,1211.27 1100.38,1212.92 1100.96,1215.55 1101.55,1214.39 1102.14,1214.26 1102.72,1214.15 1103.31,1214.15 1103.89,1213.86 1104.48,1217.56 1105.07,1218.63 1105.65,1217.13 1106.24,1216.91 1106.83,1214.32 1107.41,1211.69 1108,1210.6 1108.59,1212.02 1109.17,1212.16 1109.76,1213.78 1110.34,1211.6 1110.93,1211.64 1111.52,1209.08 1112.1,1212.81 1112.69,1211.58 1113.28,1210.79 1113.86,1212.22 1114.45,1211.13 1115.04,1212.46 1115.62,1213.9 1116.21,1214.19 1116.8,1215.42 1117.38,1216.49 1117.97,1215.36 1118.55,1216.55 1119.14,1214.97 1119.73,1216.41 1120.31,1215.19 1120.9,1213.76 1121.49,1209.94 1122.07,1210.44 1122.66,1209.22 1123.25,1210.79 1123.83,1210.78 1124.42,1210.93 1125.01,1209.93 1125.59,1212.5 1126.18,1213.84 1126.76,1215.26 1127.35,1213.87 1127.94,1212.43 1128.52,1213.6 1129.11,1215.01 1129.7,1216.33 1130.28,1217.29 1130.87,1217.23 1131.46,1218.36 1132.04,1216.94 1132.63,1217.99 1133.21,1217.58 1133.8,1218.47 1134.39,1217.1 1134.97,1215.94 1135.56,1214.66 1136.15,1217.02 1136.73,1219.26 1137.32,1218.7 1137.91,1218.38 1138.49,1218.29 1139.08,1219.19 1139.67,1218.84 1140.25,1222.33 1140.84,1222.07 1141.42,1221.62 1142.01,1221.2 1142.6,1218.24 1143.18,1214.53 1143.77,1215.74 1144.36,1213.23 1144.94,1213.46 1145.53,1213.63 1146.12,1214.9 1146.7,1214.93 1147.29,1216.53 1147.88,1215.13 1148.46,1214.92 1149.05,1213.62 1149.63,1214.94 1150.22,1214.76 1150.81,1214.71 1151.39,1213.41 1151.98,1212.39 1152.57,1211 1153.15,1212.37 1153.74,1212.29 1154.33,1212.51 1154.91,1215.04 1155.5,1215.05 1156.09,1213.87 1156.67,1212.61 1157.26,1211.48 1157.84,1212.89 1158.43,1214.08 1159.02,1210.37 1159.6,1209.12 1160.19,1205.58 1160.78,1203.49 1161.36,1205.28 1161.95,1203.41 1162.54,1203.99 1163.12,1204.41 1163.71,1206.15 1164.29,1204.49 1164.88,1204.94 1165.47,1205.43 1166.05,1206.06 1166.64,1206.57 1167.23,1207.32 1167.81,1206.61 1168.4,1207.07 1168.99,1207.46 1169.57,1206.48 1170.16,1208.03 1170.75,1209.67 1171.33,1211.17 1171.92,1212.62 1172.5,1212.63 1173.09,1210.15 1173.68,1210.46 1174.26,1211.97 1174.85,1213.42 1175.44,1215.98 1176.02,1214.66 1176.61,1214.68 1177.2,1212.22 1177.78,1212.26 1178.37,1211.23 1178.96,1208.73 1179.54,1211.55 1180.13,1210.52 1180.71,1209.47 1181.3,1212.22 1181.89,1212.29 1182.47,1211.16 1183.06,1211.53 1183.65,1211.74 1184.23,1213.24 1184.82,1213.3 1185.41,1213.62 1185.99,1215.96 1186.58,1215.95 1187.16,1214.56 1187.75,1214.35 1188.34,1214.49 1188.92,1213.12 1189.51,1214.24 1190.1,1215.61 1190.68,1215.41 1191.27,1215.23 1191.86,1215.44 1192.44,1216.47 1193.03,1218.5 1193.62,1220.73 1194.2,1220.51 1194.79,1218.61 1195.37,1218.46 1195.96,1218.32 1196.55,1219.39 1197.13,1218.98 1197.72,1219.78 1198.31,1220.75 1198.89,1222.85 1199.48,1222.43 1200.07,1219.65 1200.65,1219.55 1201.24,1220.74 1201.83,1221.51 1202.41,1220.87 1203,1222.96 1203.58,1222.42 1204.17,1223.17 1204.76,1222.8 1205.34,1219.67 1205.93,1219.48 1206.52,1215.56 1207.1,1217.98 1207.69,1213.13 1208.28,1211.88 1208.86,1206.95 1209.45,1207.62 1210.03,1210.68 1210.62,1210.86 1211.21,1208.61 1211.79,1208.86 1212.38,1208.98 1212.97,1210.58 1213.55,1212.08 1214.14,1211.05 1214.73,1207.63 1215.31,1206.69 1215.9,1207.01 1216.49,1209.91 1217.07,1212.75 1217.66,1213.64 1218.24,1216.13 1218.83,1216.25 1219.42,1216.72 1220,1215.21 1220.59,1216.54 1221.18,1218.46 1221.76,1219.22 1222.35,1218.95 1222.94,1218.94 1223.52,1220.06 1224.11,1219.63 1224.7,1219.38 1225.28,1219.18 1225.87,1218.99 1226.45,1218.9 1227.04,1218.39 1227.63,1219.36 1228.21,1217.92 1228.8,1218.8 1229.39,1218.42 1229.97,1219.34 1230.56,1220.54 1231.15,1217.68 1231.73,1214.97 1232.32,1213.47 1232.91,1214.52 1233.49,1212.37 1234.08,1212.52 1234.66,1213.49 1235.25,1214.79 1235.84,1213.28 1236.42,1213.12 1237.01,1213.24 1237.6,1213.16 1238.18,1214.17 1238.77,1213.98 1239.36,1215 1239.94,1213.53 1240.53,1212.1 1241.11,1209.76 1241.7,1209.66 1242.29,1210.11 1242.87,1207.68 1243.46,1206.68 1244.05,1207.27 1244.63,1209.97 1245.22,1210.14 1245.81,1209.29 1246.39,1210.86 1246.98,1211.97 1247.57,1211.94 1248.15,1213.26 1248.74,1216.08 1249.32,1215.02 1249.91,1217.39 1250.5,1217.23 1251.08,1214.53 1251.67,1214.92 1252.26,1214.97 1252.84,1212.39 1253.43,1213.84 1254.02,1215.17 1254.6,1216.51 1255.19,1214.92 1255.78,1212.47 1256.36,1213.64 1256.95,1212.53 1257.53,1213.72 1258.12,1214.97 1258.71,1214.74 1259.29,1215.64 1259.88,1213.08 1260.47,1214.71 1261.05,1213.26 1261.64,1213.5 1262.23,1213.23 1262.81,1213.32 1263.4,1212.16 1263.98,1210.88 1264.57,1209.59 1265.16,1210.05 1265.74,1209.12 1266.33,1210.49 1266.92,1210.87 1267.5,1212.29 1268.09,1210.28 1268.68,1210.22 1269.26,1207.78 1269.85,1209.39 1270.44,1209.86 1271.02,1208.99 1271.61,1206.71 1272.19,1208.28 1272.78,1209.62 1273.37,1209.65 1273.95,1210.17 1274.54,1211.51 1275.13,1209.98 1275.71,1209.18 1276.3,1211.61 1276.89,1212.84 1277.47,1212.59 1278.06,1213.63 1278.65,1216.28 1279.23,1218.66 1279.82,1217.25 1280.4,1214.54 1280.99,1214.67 1281.58,1215.89 1282.16,1214.5 1282.75,1215.82 1283.34,1215.78 1283.92,1213.25 1284.51,1213.59 1285.1,1210.05 1285.68,1211.51 1286.27,1212.9 1286.86,1213.31 1287.44,1214.75 1288.03,1213.5 1288.61,1214.6 1289.2,1215.48 1289.79,1216.34 1290.37,1214.87 1290.96,1212.33 1291.55,1211.17 1292.13,1211.23 1292.72,1210 1293.31,1210 1293.89,1211.35 1294.48,1211.46 1295.06,1215.17 1295.65,1213.88 1296.24,1213.93 1296.82,1212.65 1297.41,1211.61 1298,1212.89 1298.58,1212.94 1299.17,1211.54 1299.76,1211.66 1300.34,1211.79 1300.93,1215.51 1301.52,1214.01 1302.1,1211.41 1302.69,1213.96 1303.27,1215.07 1303.86,1212.27 1304.45,1212.61 1305.03,1211.35 1305.62,1210.16 1306.21,1210.33 1306.79,1206.84 1307.38,1209.56 1307.97,1209.49 1308.55,1209.86 1309.14,1209.02 1309.73,1211.89 1310.31,1210.79 1310.9,1209.76 1311.48,1209.92 1312.07,1210.35 1312.66,1210.68 1313.24,1209.7 1313.83,1212.33 1314.42,1212.32 1315,1211.09 1315.59,1212.48 1316.18,1216.05 1316.76,1215.79 1317.35,1214.61 1317.93,1213.41 1318.52,1215.89 1319.11,1215.87 1319.69,1219.27 1320.28,1218.09 1320.87,1217.97 1321.45,1217.87 1322.04,1216.15 1322.63,1214.78 1323.21,1213.05 1323.8,1211.73 1324.39,1210.65 1324.97,1212.11 1325.56,1215.71 1326.14,1214.35 1326.73,1215.55 1327.32,1215.41 1327.9,1213.79 1328.49,1213.81 1329.08,1212.45 1329.66,1212.35 1330.25,1214.91 1330.84,1219.92 1331.42,1219.5 1332.01,1217.95 1332.6,1218.97 1333.18,1218.79 1333.77,1219.63 1334.35,1216.77 1334.94,1217.59 1335.53,1216.05 1336.11,1212.14 1336.7,1213.51 1337.29,1215.8 1337.87,1214.62 1338.46,1211.97 1339.05,1212.1 1339.63,1210.74 1340.22,1210.88 1340.8,1213.49 1341.39,1213.6 1341.98,1212.25 1342.56,1212.4 1343.15,1213.83 1343.74,1213.99 1344.32,1214.16 1344.91,1214.43 1345.5,1209.5 1346.08,1208.7 1346.67,1207.67 1347.26,1208.81 1347.84,1210.62 1348.43,1213.32 1349.01,1214.56 1349.6,1214.64 1350.19,1213.48 1350.77,1213.45 1351.36,1215.59 1351.95,1214.29 1352.53,1214.04 1353.12,1213.78 1353.71,1215.09 1354.29,1214.76 1354.88,1212.37 1355.47,1209.88 1356.05,1207.85 1356.64,1208.11 1357.22,1208.57 1357.81,1208.72 1358.4,1208.79 1358.98,1210.29 1359.57,1213.19 1360.16,1214.79 1360.74,1216.14 1361.33,1214.55 1361.92,1214.75 1362.5,1214.42 1363.09,1214.39 1363.68,1215.71 1364.26,1216.99 1364.85,1218.07 1365.43,1217.83 1366.02,1217.41 1366.61,1215.92 1367.19,1215.83 1367.78,1212.14 1368.37,1210.86 1368.95,1209.91 1369.54,1210.56 1370.13,1212.11 1370.71,1212.17 1371.3,1210.87 1371.88,1211.05 1372.47,1212.19 1373.06,1210.99 1373.64,1211.08 1374.23,1212.41 1374.82,1214.85 1375.4,1214.85 1375.99,1212.58 1376.58,1212.81 1377.16,1215.28 1377.75,1215.14 1378.34,1213.81 1378.92,1216.54 1379.51,1218.65 1380.09,1216.01 1380.68,1215.61 1381.27,1215.42 1381.85,1214.23 1382.44,1214.06 1383.03,1215.12 1383.61,1215.49 1384.2,1212.88 1384.79,1212.65 1385.37,1211.43 1385.96,1210.43 1386.55,1211.92 1387.13,1211.94 1387.72,1212.01 1388.3,1211.9 1388.89,1213.1 1389.48,1211.92 1390.06,1210.74 1390.65,1209.67 1391.24,1211.09 1391.82,1212.45 1392.41,1211.28 1393,1210.06 1393.58,1210.27 1394.17,1208.95 1394.75,1209.4 1395.34,1209.72 1395.93,1211.28 1396.51,1210.04 1397.1,1210.07 1397.69,1212.54 1398.27,1211.49 1398.86,1210.41 1399.45,1209.41 1400.03,1211.21 1400.62,1210.09 1401.21,1208.97 1401.79,1210.15 1402.38,1211.49 1402.96,1211.52 1403.55,1210.46 1404.14,1209.46 1404.72,1210.88 1405.31,1209.66 1405.9,1211.24 1406.48,1211.25 1407.07,1211.61 1407.66,1210.57 1408.24,1212.3 1408.83,1213.72 1409.42,1212.66 1410,1211.39 1410.59,1212.61 1411.17,1214.08 1411.76,1216.56 1412.35,1217.27 1412.93,1217.01 1413.52,1214.39 1414.11,1212.77 1414.69,1211.89 1415.28,1212.23 1415.87,1211.11 1416.45,1217.63 1417.04,1218.87 1417.63,1218.64 1418.21,1219.76 1418.8,1219.56 1419.38,1219.21 1419.97,1219.83 1420.56,1218.15 1421.14,1217.59 1421.73,1217.23 1422.32,1215.72 1422.9,1215.52 1423.49,1216.7 1424.08,1217.9 1424.66,1217.67 1425.25,1218.72 1425.83,1214.63 1426.42,1214.5 1427.01,1214.56 1427.59,1216.94 1428.18,1219.08 1428.77,1218.77 1429.35,1219.79 1429.94,1218.41 1430.53,1218.22 1431.11,1214.43 1431.7,1215.67 1432.29,1215.67 1432.87,1214.31 1433.46,1212.6 1434.04,1212.41 1434.63,1212.32 1435.22,1212.41 1435.8,1212.58 1436.39,1212.75 1436.98,1212.72 1437.56,1214.18 1438.15,1214.42 1438.74,1214.58 1439.32,1214.44 1439.91,1215.88 1440.5,1216.96 1441.08,1218.15 1441.67,1217.87 1442.25,1217.66 1442.84,1216.29 1443.43,1215.84 1444.01,1212 1444.6,1213.41 1445.19,1214.53 1445.77,1215.83 1446.36,1217.03 1446.95,1218.25 1447.53,1218.97 1448.12,1216.41 1448.7,1215.12 1449.29,1215.09 1449.88,1214.92 1450.46,1213.74 1451.05,1216.21 1451.64,1217.26 1452.22,1219.73 1452.81,1217.83 1453.4,1216.74 1453.98,1217.75 1454.57,1223.81 1455.16,1224.63 1455.74,1222.95 1456.33,1220.22 1456.91,1221 1457.5,1220.47 1458.09,1221.11 1458.67,1221.72 1459.26,1221.21 1459.85,1221.12 1460.43,1219.26 1461.02,1219.99 1461.61,1223.36 1462.19,1221.61 1462.78,1218.85 1463.37,1214.71 1463.95,1211.97 1464.54,1211.69 1465.12,1208.03 1465.71,1205.75 1466.3,1207.25 1466.88,1208.93 1467.47,1205.59 1468.06,1203.32 1468.64,1204.98 1469.23,1205.71 1469.82,1206.12 1470.4,1206.49 1470.99,1206.67 1471.57,1207.07 1472.16,1207.39 1472.75,1207.66 1473.33,1207.8 1473.92,1207.92 1474.51,1210.67 1475.09,1211.97 1475.68,1213.29 1476.27,1213.38 1476.85,1212.08 1477.44,1212.38 1478.03,1213.68 1478.61,1213.63 1479.2,1213.48 1479.78,1213.12 1480.37,1214.4 1480.96,1213.19 1481.54,1215.5 1482.13,1214.12 1482.72,1210.23 1483.3,1207.56 1483.89,1207.87 1484.48,1209.3 1485.06,1208.63 1485.65,1208.96 1486.24,1209.05 1486.82,1209.41 1487.41,1209.47 1487.99,1212.18 1488.58,1214.63 1489.17,1212 1489.75,1214.62 1490.34,1214.44 1490.93,1215.81 1491.51,1216.98 1492.1,1215.73 1492.69,1215.59 1493.27,1216.44 1493.86,1218.74 1494.45,1214.49 1495.03,1210.59 1495.62,1210.76 1496.2,1212.27 1496.79,1212.56 1497.38,1216.32 1497.96,1216.01 1498.55,1216.12 1499.14,1216.03 1499.72,1212.24 1500.31,1212.45 1500.9,1211.42 1501.48,1214.25 1502.07,1214.29 1502.65,1214.2 1503.24,1212.89 1503.83,1215.31 1504.41,1213.86 1505,1216.43 1505.59,1216.24 1506.17,1218.38 1506.76,1220.43 1507.35,1218.78 1507.93,1218.26 1508.52,1219.35 1509.11,1219.17 1509.69,1217.76 1510.28,1217.61 1510.86,1217.1 1511.45,1216.97 1512.04,1216.76 1512.62,1219.34 1513.21,1220.09 1513.8,1221.17 1514.38,1218.49 1514.97,1214.74 1515.56,1213.52 1516.14,1213.55 1516.73,1215.13 1517.32,1214.95 1517.9,1213.49 1518.49,1218.27 1519.07,1218.16 1519.66,1216.65 1520.25,1217.7 1520.83,1217.35 1521.42,1215.6 1522.01,1215.57 1522.59,1216.46 1523.18,1216.39 1523.77,1214.97 1524.35,1216.23 1524.94,1215.91 1525.52,1214.75 1526.11,1213.47 1526.7,1212.38 1527.28,1213.64 1527.87,1213.5 1528.46,1212.21 1529.04,1212.34 1529.63,1209.68 1530.22,1207.64 1530.8,1209.18 1531.39,1209.46 1531.98,1210.65 1532.56,1211.98 1533.15,1210.87 1533.73,1209.8 1534.32,1208.89 1534.91,1208.83 1535.49,1208.99 1536.08,1210.43 1536.67,1212.09 1537.25,1212.08 1537.84,1213.56 1538.43,1213.64 1539.01,1212.42 1539.6,1212.58 1540.19,1208.57 1540.77,1209.77 1541.36,1208.43 1541.94,1207.31 1542.53,1208.7 1543.12,1208.91 1543.7,1209.22 1544.29,1208.18 1544.88,1209.73 1545.46,1208.62 1546.05,1211.43 1546.64,1210.01 1547.22,1210.2 1547.81,1209.29 1548.4,1211.87 1548.98,1208.02 1549.57,1209.59 1550.15,1211.11 1550.74,1212.48 1551.33,1212.14 1551.91,1210.89 1552.5,1209.8 1553.09,1208.68 1553.67,1206.5 1554.26,1205.69 1554.85,1207.35 1555.43,1208.96 1556.02,1207.84 1556.6,1209.33 1557.19,1209.49 1557.78,1209.84 1558.36,1211.26 1558.95,1210.25 1559.54,1212.52 1560.12,1210.11 1560.71,1210.21 1561.3,1210.09 1561.88,1213.83 1562.47,1212.92 1563.06,1214.03 1563.64,1212.72 1564.23,1211.66 1564.81,1212.9 1565.4,1213.97 1565.99,1216.36 1566.57,1217.32 1567.16,1217.14 1567.75,1217.19 1568.33,1218.32 1568.92,1216.78 1569.51,1217.59 1570.09,1213.58 1570.68,1213.43 1571.27,1212.25 1571.85,1212.17 1572.44,1213.64 1573.02,1217.52 1573.61,1216.13 1574.2,1215.99 1574.78,1219.67 1575.37,1218.07 1575.96,1219.11 1576.54,1217.3 1577.13,1215.92 1577.72,1218.08 1578.3,1215.6 1578.89,1216.69 1579.47,1217.84 1580.06,1217.68 1580.65,1216.29 1581.23,1214.93 1581.82,1216.34 1582.41,1216.25 1582.99,1216.02 1583.58,1217.13 1584.17,1218.38 1584.75,1216.91 1585.34,1216.87 1585.93,1219.46 1586.51,1220.36 1587.1,1217.67 1587.68,1216.13 1588.27,1213.57 1588.86,1214.97 1589.44,1216.14 1590.03,1216.1 1590.62,1215.55 1591.2,1215.82 1591.79,1214.8 1592.38,1217.54 1592.96,1215.2 1593.55,1215.25 1594.14,1217.66 1594.72,1217.75 1595.31,1214.95 1595.89,1216.13 1596.48,1215.17 1597.07,1213.93 1597.65,1214.96 1598.24,1215.09 1598.83,1213.56 1599.41,1212.41 1600,1211.03 1600.59,1213.58 1601.17,1214.71 1601.76,1215.99 1602.34,1215.81 1602.93,1214.56 1603.52,1212.12 1604.1,1212.18 1604.69,1211.18 1605.28,1213.66 1605.86,1211.14 1606.45,1212.72 1607.04,1212.58 1607.62,1210.01 1608.21,1208.73 1608.8,1208.88 1609.38,1207.77 1609.97,1209.34 1610.55,1211.79 1611.14,1213.14 1611.73,1210.87 1612.31,1212.49 1612.9,1212.57 1613.49,1212.9 1614.07,1213.13 1614.66,1212.97 1615.25,1213.1 1615.83,1214.38 1616.42,1215.67 1617.01,1214.08 1617.59,1212.57 1618.18,1213.75 1618.76,1212.33 1619.35,1210.92 1619.94,1210.98 1620.52,1209.97 1621.11,1210.43 1621.7,1209.34 1622.28,1208.3 1622.87,1207.4 1623.46,1210.25 1624.04,1209.23 1624.63,1209.35 1625.22,1208.3 1625.8,1207.27 1626.39,1207.54 1626.97,1210.76 1627.56,1208.57 1628.15,1207.7 1628.73,1208.15 1629.32,1207.25 1629.91,1206.5 1630.49,1204.13 1631.08,1204.74 1631.67,1202.77 1632.25,1203.4 1632.84,1207.96 1633.42,1208.07 1634.01,1206.94 1634.6,1208.6 1635.18,1210.11 1635.77,1210.1 1636.36,1207.77 1636.94,1208.3 1637.53,1208.78 1638.12,1207.79 1638.7,1208.13 1639.29,1207.28 1639.88,1210.05 1640.46,1209.26 1641.05,1208.28 1641.63,1211.04 1642.22,1211.19 1642.81,1211.32 1643.39,1211.05 1643.98,1213.62 1644.57,1216.09 1645.15,1217.36 1645.74,1217.03 1646.33,1219.38 1646.91,1220.09 1647.5,1221.93 1648.09,1220.08 1648.67,1219.91 1649.26,1220.87 1649.84,1220.68 1650.43,1217.83 1651.02,1217.45 1651.6,1216.94 1652.19,1218.06 1652.78,1216.67 1653.36,1216.51 1653.95,1220.11 1654.54,1219.71 1655.12,1219.22 1655.71,1219.31 1656.29,1219.07 1656.88,1217.62 1657.47,1218.46 1658.05,1218.09 1658.64,1218.97 1659.23,1220.06 1659.81,1217.02 1660.4,1215.32 1660.99,1217.69 1661.57,1218.92 1662.16,1217.41 1662.75,1218.37 1663.33,1218.06 1663.92,1216.6 1664.5,1216.33 1665.09,1217.55 1665.68,1218.81 1666.26,1218.65 1666.85,1218.49 1667.44,1218.06 1668.02,1218.17 1668.61,1213.15 1669.2,1211.73 1669.78,1213.09 1670.37,1214.29 1670.96,1215.52 1671.54,1216.74 1672.13,1216.37 1672.71,1214.83 1673.3,1214.65 1673.89,1214.67 1674.47,1211.09 1675.06,1212.3 1675.65,1212.3 1676.23,1214.71 1676.82,1214.8 1677.41,1214.93 1677.99,1218.59 1678.58,1220.46 1679.17,1221.24 1679.75,1220.81 1680.34,1219.56 1680.92,1219.06 1681.51,1221.19 1682.1,1222.14 1682.68,1218.02 1683.27,1216.21 1683.86,1218.56 1684.44,1218.24 1685.03,1219.15 1685.62,1218.97 1686.2,1221.06 1686.79,1220.82 1687.37,1221.57 1687.96,1221.19 1688.55,1218.55 1689.13,1214.38 1689.72,1214.1 1690.31,1212.73 1690.89,1212.8 1691.48,1212.55 1692.07,1215.34 1692.65,1217.54 1693.24,1218.31 1693.83,1218.1 1694.41,1219.21 1695,1215.25 1695.58,1213.76 1696.17,1211.37 1696.76,1211.37 1697.34,1210.07 1697.93,1214.21 1698.52,1214.33 1699.1,1213.08 1699.69,1210.58 1700.28,1213.26 1700.86,1213.33 1701.45,1213.28 1702.04,1213.35 1702.62,1213.55 1703.21,1214.94 1703.79,1212.59 1704.38,1212.71 1704.97,1212.97 1705.55,1209.24 1706.14,1210.75 1706.73,1209.66 1707.31,1211.31 1707.9,1212.88 1708.49,1212.83 1709.07,1212.74 1709.66,1212.63 1710.24,1213.92 1710.83,1211.48 1711.42,1212.71 1712,1213.85 1712.59,1213.78 1713.18,1213.73 1713.76,1213.72 1714.35,1212.52 1714.94,1215.06 1715.52,1215.04 1716.11,1212.41 1716.7,1211.2 1717.28,1211.48 1717.87,1210.67 1718.45,1213.37 1719.04,1211.03 1719.63,1209.81 1720.21,1207.47 1720.8,1207.78 1721.39,1205.66 1721.97,1204.82 1722.56,1206.62 1723.15,1206.8 1723.73,1205.97 1724.32,1206.49 1724.91,1205.82 1725.49,1206.24 1726.08,1209.34 1726.66,1209.76 1727.25,1211.35 1727.84,1211.32 1728.42,1210.37 1729.01,1211.84 1729.6,1210.93 1730.18,1210.94 1730.77,1211.35 1731.36,1210.13 1731.94,1208.09 1732.53,1207.22 1733.11,1207.39 1733.7,1208.82 1734.29,1209.25 1734.87,1208.3 1735.46,1208.38 1736.05,1208.99 1736.63,1209.26 1737.22,1210.83 1737.81,1212.13 1738.39,1212.46 1738.98,1214.73 1739.57,1214.79 1740.15,1213.35 1740.74,1215.93 1741.32,1213.27 1741.91,1214.38 1742.5,1219.34 1743.08,1220.07 1743.67,1219.62 1744.26,1219.16 1744.84,1217.5 1745.43,1216.39 1746.02,1216.03 1746.6,1217.01 1747.19,1216.73 1747.78,1214.24 1748.36,1215.89 1748.95,1215.98 1749.53,1219.38 1750.12,1215.37 1750.71,1215.28 1751.29,1212.71 1751.88,1212.48 1752.47,1214.94 1753.05,1213.52 1753.64,1213.53 1754.23,1214.84 1754.81,1214.75 1755.4,1217.11 1755.99,1217.9 1756.57,1216.28 1757.16,1216.16 1757.74,1216.88 1758.33,1217.88 1758.92,1220.05 1759.5,1219.58 1760.09,1222.98 1760.68,1221.24 1761.26,1220.9 1761.85,1216.77 1762.44,1213 1763.02,1211.94 1763.61,1211.85 1764.19,1209.34 1764.78,1207.15 1765.37,1208.76 1765.95,1209.17 1766.54,1210.66 1767.13,1210.91 1767.71,1212.19 1768.3,1212.31 1768.89,1209.94 1769.47,1211.61 1770.06,1209.22 1770.65,1209.5 1771.23,1211.07 1771.82,1211.44 1772.4,1209.3 1772.99,1212.05 1773.58,1208.29 1774.16,1209.96 1774.75,1211.36 1775.34,1211.63 1775.92,1211.89 1776.51,1211.89 1777.1,1210.51 1777.68,1211.77 1778.27,1213.01 1778.86,1210.47 1779.44,1205.62 1780.03,1208.49 1780.61,1211.01 1781.2,1212.39 1781.79,1211.13 1782.37,1211.2 1782.96,1211.25 1783.55,1213.88 1784.13,1213.98 1784.72,1212.47 1785.31,1215.16 1785.89,1216.35 1786.48,1216.4 1787.06,1215.2 1787.65,1212.8 1788.24,1215.39 1788.82,1212.94 1789.41,1211.93 1790,1214.68 1790.58,1213.25 1791.17,1210.69 1791.76,1211.85 1792.34,1211.96 1792.93,1209.43 1793.52,1212.09 1794.1,1213.63 1794.69,1213.94 1795.27,1214.07 1795.86,1214.08 1796.45,1214.06 1797.03,1214.08 1797.62,1210.19 1798.21,1211.44 1798.79,1213.03 1799.38,1215.62 1799.97,1214.22 1800.55,1215.32 1801.14,1216.49 1801.73,1216.27 1802.31,1216.32 1802.9,1216.13 1803.48,1219.52 1804.07,1220.37 1804.66,1220.41 1805.24,1223.79 1805.83,1224.29 1806.42,1222.58 1807,1220.81 1807.59,1220.68 1808.18,1221.44 1808.76,1221.11 1809.35,1219.18 1809.94,1218.76 1810.52,1218.32 1811.11,1219.07 1811.69,1218.67 1812.28,1219.57 1812.87,1216.88 1813.45,1215.27 1814.04,1214.14 1814.63,1215.31 1815.21,1216.13 1815.8,1219.03 1816.39,1219.92 1816.97,1219.71 1817.56,1220.38 1818.14,1222.53 1818.73,1221.74 1819.32,1221.29 1819.9,1220.79 1820.49,1221.7 1821.08,1220.04 1821.66,1217.17 1822.25,1217.22 1822.84,1215.6 1823.42,1214.29 1824.01,1214.36 1824.6,1214.38 1825.18,1211.58 1825.77,1207.67 1826.35,1202.92 1826.94,1203.29 1827.53,1202.58 1828.11,1203.11 1828.7,1204.92 1829.29,1207.94 1829.87,1209.52 1830.46,1210.91 1831.05,1209.62 1831.63,1209.67 1832.22,1208.67 1832.81,1207.57 1833.39,1208.99 1833.98,1210.25 1834.56,1210.68 1835.15,1210.69 1835.74,1211.28 1836.32,1211.37 1836.91,1210.35 1837.5,1211.68 1838.08,1211.86 1838.67,1213.12 1839.26,1214.35 1839.84,1215.7 1840.43,1216.61 1841.01,1213.8 1841.6,1216.12 1842.19,1214.95 1842.77,1214.51 1843.36,1214.43 1843.95,1214.4 1844.53,1216.66 1845.12,1218.83 1845.71,1219.98 1846.29,1220.71 1846.88,1221.42 1847.47,1221.18 1848.05,1221.98 1848.64,1220.39 1849.22,1221.13 1849.81,1220.81 1850.4,1217.87 1850.98,1217.56 1851.57,1219.69 1852.16,1218.06 1852.74,1219.13 1853.33,1215.17 1853.92,1216.11 1854.5,1216.18 1855.09,1214.77 1855.68,1217.28 1856.26,1218.35 1856.85,1217.93 1857.43,1218.97 1858.02,1216.35 1858.61,1217.76 1859.19,1217.58 1859.78,1217.53 1860.37,1214.83 1860.95,1214.79 1861.54,1213.36 1862.13,1215.86 1862.71,1217.07 1863.3,1214.38 1863.88,1214.47 1864.47,1214.7 1865.06,1213.27 1865.64,1214.42 1866.23,1213.09 1866.82,1210.52 1867.4,1209.43 1867.99,1209.58 1868.58,1208.68 1869.16,1208.87 1869.75,1211.58 1870.34,1210.21 1870.92,1210.41 1871.51,1211.82 1872.09,1215.61 1872.68,1215.53 1873.27,1214.41 1873.85,1212.09 1874.44,1213.55 1875.03,1211.51 1875.61,1210.36 1876.2,1209.18 1876.79,1210.49 1877.37,1212.96 1877.96,1215.47 1878.55,1211.68 1879.13,1213.01 1879.72,1215.29 1880.3,1212.74 1880.89,1212.6 1881.48,1214.01 1882.06,1211.34 1882.65,1211.19 1883.24,1207.57 1883.82,1210.37 1884.41,1211.79 1885,1210.63 1885.58,1210.74 1886.17,1209.84 1886.76,1211.16 1887.34,1210.09 1887.93,1212.63 1888.51,1213.63 1889.1,1211.09 1889.69,1211.07 1890.27,1211.32 1890.86,1207.96 1891.45,1208.11 1892.03,1209.54 1892.62,1207.13 1893.21,1208.94 1893.79,1208.03 1894.38,1212.2 1894.96,1212.36 1895.55,1212.39 1896.14,1216.31 1896.72,1218.8 1897.31,1219.68 1897.9,1220.83 1898.48,1221.89 1899.07,1219.14 1899.66,1220.32 1900.24,1216.24 1900.83,1216.04 1901.42,1214.58 1902,1213.6 1902.59,1212.28 1903.17,1211.11 1903.76,1213.75 1904.35,1212.53 1904.93,1211.42 1905.52,1210.24 1906.11,1206.8 1906.69,1204.5 1907.28,1202.51 1907.87,1203.06 1908.45,1202.62 1909.04,1204.35 1909.63,1204.98 1910.21,1205.59 1910.8,1205.77 1911.38,1206.29 1911.97,1207.89 1912.56,1210.79 1913.14,1209.2 1913.73,1209.17 1914.32,1208.23 1914.9,1207.31 1915.49,1206.56 1916.08,1206.86 1916.66,1208.33 1917.25,1208.59 1917.83,1207.86 1918.42,1206.74 1919.01,1207.01 1919.59,1208.65 1920.18,1211.66 1920.77,1210.64 1921.35,1209.76 1921.94,1207.37 1922.53,1206.61 1923.11,1205.66 1923.7,1208.54 1924.29,1209.96 1924.87,1208.95 1925.46,1209.15 1926.04,1208.18 1926.63,1209.6 1927.22,1208.5 1927.8,1213.65 1928.39,1212.42 1928.98,1213.56 1929.56,1214.93 1930.15,1215.18 1930.74,1215.19 1931.32,1212.74 1931.91,1212.75 1932.5,1217.69 1933.08,1217.74 1933.67,1219.95 1934.25,1219.74 1934.84,1219.39 1935.43,1220.31 1936.01,1221.2 1936.6,1222.17 1937.19,1219.3 1937.77,1216.48 1938.36,1216.46 1938.95,1216.49 1939.53,1217.61 1940.12,1214.99 1940.71,1215.12 1941.29,1216.33 1941.88,1217.39 1942.46,1220.71 1943.05,1223.15 1943.64,1221.54 1944.22,1222.64 1944.81,1220.72 1945.4,1220.46 1945.98,1218.57 1946.57,1219.47 1947.16,1220.53 1947.74,1223.95 1948.33,1223.35 1948.91,1218.91 1949.5,1218.62 1950.09,1218.25 1950.67,1218.06 1951.26,1219.25 1951.85,1218.97 1952.43,1219.68 1953.02,1215.51 1953.61,1215.4 1954.19,1215.31 1954.78,1214 1955.37,1212.89 1955.95,1214.03 1956.54,1215.27 1957.12,1216.29 1957.71,1217.28 1958.3,1213.3 1958.88,1209.46 1959.47,1209.77 1960.06,1208.69 1960.64,1206.12 1961.23,1206.59 1961.82,1206.79 1962.4,1210.79 1962.99,1210.74 1963.58,1212.18 1964.16,1215.71 1964.75,1214.06 1965.33,1213.78 1965.92,1217.24 1966.51,1217.19 1967.09,1215.64 1967.68,1216.62 1968.27,1216.38 1968.85,1215.17 1969.44,1214.99 1970.03,1215.93 1970.61,1214.55 1971.2,1213.48 1971.78,1212.22 1972.37,1213.72 1972.96,1215.97 1973.54,1217.15 1974.13,1214.48 1974.72,1215.4 1975.3,1213.97 1975.89,1217.5 1976.48,1217.1 1977.06,1215.72 1977.65,1213.06 1978.24,1211.95 1978.82,1213.43 1979.41,1213.35 1979.99,1212.15 1980.58,1213.5 1981.17,1213.47 1981.75,1209.86 1982.34,1212.48 1982.93,1212.53 1983.51,1211.4 1984.1,1210.26 1984.69,1211.76 1985.27,1213.06 1985.86,1213.32 1986.45,1214.54 1987.03,1215.62 1987.62,1212.94 1988.2,1215.49 1988.79,1214.09 1989.38,1216.54 1989.96,1217.52 1990.55,1217.4 1991.14,1217.26 1991.72,1217 1992.31,1215.64 1992.9,1216.72 1993.48,1215.22 1994.07,1214.87 1994.65,1216.35 1995.24,1217.53 1995.83,1216.06 1996.41,1216.97 1997,1215.55 1997.59,1214.3 1998.17,1214.36 1998.76,1214.35 1999.35,1210.25 1999.93,1208.05 2000.52,1208.48 2001.11,1207.36 2001.69,1208.63 2002.28,1206.19 2002.86,1206.83 2003.45,1209.77 2004.04,1207.34 2004.62,1207.53 2005.21,1207.73 2005.8,1208.17 2006.38,1209.57 2006.97,1209.96 2007.56,1210.57 2008.14,1210.7 2008.73,1213.47 2009.32,1214.62 2009.9,1214.48 2010.49,1215.76 2011.07,1215.69 2011.66,1218.13 2012.25,1215.25 2012.83,1215.21 2013.42,1213.88 2014.01,1215.13 2014.59,1215.07 2015.18,1211.31 2015.77,1214.11 2016.35,1212.76 2016.94,1210.21 2017.53,1211.65 2018.11,1210.55 2018.7,1208.24 2019.28,1207.51 2019.87,1206.82 2020.46,1208.36 2021.04,1209.64 2021.63,1208.64 2022.22,1207.78 2022.8,1209.51 2023.39,1208.57 2023.98,1207.53 2024.56,1211.62 2025.15,1211.65 2025.73,1211.87 2026.32,1213.23 2026.91,1210.8 2027.49,1213.69 2028.08,1213.75 2028.67,1211.17 2029.25,1211.37 2029.84,1209.3 2030.43,1209.57 2031.01,1211.24 2031.6,1208.93 2032.19,1208.02 2032.77,1207.35 2033.36,1205.38 2033.94,1205.89 2034.53,1208.82 2035.12,1210.35 2035.7,1210.74 2036.29,1210.65 2036.88,1211.97 2037.46,1214.32 2038.05,1214.26 2038.64,1210.44 2039.22,1211.88 2039.81,1211.93 2040.4,1212.22 2040.98,1213.56 2041.57,1214.86 2042.15,1215.08 2042.74,1216.28 2043.33,1214.91 2043.91,1213.6 2044.5,1215.86 2045.09,1216.82 2045.67,1219.25 2046.26,1218.86 2046.85,1214.63 2047.43,1212.24 2048.02,1212.21 2048.6,1213.67 2049.19,1215.23 2049.78,1214.16 2050.36,1218.05 2050.95,1215.24 2051.54,1216.06 2052.12,1213.33 2052.71,1213.37 2053.3,1215.93 2053.88,1212.93 2054.47,1212.99 2055.06,1211.81 2055.64,1211.93 2056.23,1211.82 2056.81,1209.34 2057.4,1212.28 2057.99,1210.99 2058.57,1211.07 2059.16,1212.5 2059.75,1216.1 2060.33,1215.81 2060.92,1217.09 2061.51,1219.4 2062.09,1217.67 2062.68,1217.49 2063.27,1217.46 2063.85,1217.34 2064.44,1217.06 2065.02,1217.93 2065.61,1218.77 2066.2,1219.71 2066.78,1218.37 2067.37,1217.81 2067.96,1218.82 2068.54,1218.7 2069.13,1222.16 2069.72,1219.03 2070.3,1217.3 2070.89,1218.26 2071.48,1218.18 2072.06,1216.74 2072.65,1217.81 2073.23,1216.33 2073.82,1215.54 2074.41,1217.65 2074.99,1217.76 2075.58,1219.88 2076.17,1218.42 2076.75,1218.07 2077.34,1216.61 2077.93,1216.55 2078.51,1217.58 2079.1,1219.97 2079.68,1223.17 2080.27,1221.49 2080.86,1219.06 2081.44,1214.9 2082.03,1215.83 2082.62,1213.47 2083.2,1210.95 2083.79,1208.57 2084.38,1207.5 2084.96,1207.72 2085.55,1208.32 2086.14,1209.59 2086.72,1209.92 2087.31,1211.06 2087.89,1209.89 2088.48,1212.62 2089.07,1212.46 2089.65,1212.62 2090.24,1212.4 2090.83,1212.21 2091.41,1210.99 2092,1213.54 2092.59,1212.3 2093.17,1210.19 2093.76,1211.46 2094.35,1216.41 2094.93,1217.65 2095.52,1217.39 2096.1,1217.17 2096.69,1218.06 2097.28,1217.8 2097.86,1220.14 2098.45,1221.09 2099.04,1220.89 2099.62,1217.97 2100.21,1221.51 2100.8,1217.44 2101.38,1218.63 2101.97,1218.41 2102.55,1214.26 2103.14,1210.57 2103.73,1209.48 2104.31,1209.96 2104.9,1210.26 2105.49,1209.15 2106.07,1210.63 2106.66,1210.83 2107.25,1208.46 2107.83,1208.82 2108.42,1207.79 2109.01,1205.68 2109.59,1204.87 2110.18,1207.74 2110.76,1208.06 2111.35,1208.39 2111.94,1206.19 2112.52,1206.72 2113.11,1208.38 2113.7,1208.62 2114.28,1207.87 2114.87,1208.1 2115.46,1208.51 2116.04,1207.2 2116.63,1207.82 2117.22,1206.66 2117.8,1205.84 2118.39,1204.97 2118.97,1204.25 2119.56,1202.69 2120.15,1203.26 2120.73,1205.03 2121.32,1205.78 2121.91,1209.81 2122.49,1208.97 2123.08,1207.88 2123.67,1206.84 2124.25,1208.67 2124.84,1212.53 2125.42,1213.83 2126.01,1215.16 2126.6,1215.22 2127.18,1218.75 2127.77,1219.65 2128.36,1222.99 2128.94,1223.74 2129.53,1223.62 2130.12,1221.68 2130.7,1218.72 2131.29,1221.18 2131.88,1219.7 2132.46,1219.41 2133.05,1221.9 2133.63,1221.4 2134.22,1221.14 2134.81,1220.73 2135.39,1223.96 2135.98,1222.19 2136.57,1221.97 2137.15,1224.02 2137.74,1225.85 2138.33,1226.62 2138.91,1227.17 2139.5,1227.63 2140.09,1224.36 2140.67,1222.51 2141.26,1220.82 2141.84,1220.33 2142.43,1221.4 2143.02,1219.57 2143.6,1219.42 2144.19,1219.01 2144.78,1218.88 2145.36,1218.38 2145.95,1219.21 2146.54,1217.67 2147.12,1215.96 2147.71,1210.75 2148.3,1208.1 2148.88,1205.77 2149.47,1206.16 2150.05,1206.64 2150.64,1206.78 2151.23,1207.18 2151.81,1207.71 2152.4,1209.21 2152.99,1210.48 2153.57,1205.71 2154.16,1206.17 2154.75,1207.36 2155.33,1208.8 2155.92,1206.44 2156.5,1206.91 2157.09,1205.94 2157.68,1204.72 2158.26,1205.07 \"/>\n<path clip-path=\"url(#clip722)\" d=\"M986.025 1214.08 L986.612 1214.08 L987.198 1214.08 L987.785 1214.08 L988.371 1214.08 L988.957 1214.08 L989.544 1214.08 L990.13 1214.08 L990.717 1214.08 L991.303 1214.08 L991.889 1214.08 L992.476 1214.08 L993.062 1214.08 L993.649 1214.08 L994.235 1214.08 L994.822 1214.08 L995.408 1214.08 L995.994 1214.08 L996.581 1214.08 L997.167 1214.08 L997.754 1214.08 L998.34 1214.08 L998.926 1214.08 L999.513 1214.08 L1000.1 1214.08 L1000.69 1214.08 L1001.27 1214.08 L1001.86 1214.08 L1002.44 1214.08 L1003.03 1214.08 L1003.62 1214.08 L1004.2 1214.08 L1004.79 1214.08 L1005.38 1214.08 L1005.96 1214.08 L1006.55 1214.08 L1007.14 1214.08 L1007.72 1214.08 L1008.31 1214.08 L1008.9 1214.08 L1009.48 1214.08 L1010.07 1214.08 L1010.65 1214.08 L1011.24 1214.08 L1011.83 1214.08 L1012.41 1214.08 L1013 1214.08 L1013.59 1214.08 L1014.17 1214.08 L1014.76 1214.08 L1015.35 1214.08 L1015.93 1214.08 L1016.52 1214.08 L1017.11 1214.08 L1017.69 1214.08 L1018.28 1214.08 L1018.86 1214.08 L1019.45 1214.08 L1020.04 1214.08 L1020.62 1214.08 L1021.21 1214.08 L1021.8 1214.08 L1022.38 1214.08 L1022.97 1214.08 L1023.56 1214.08 L1024.14 1214.08 L1024.73 1214.08 L1025.32 1214.08 L1025.9 1214.08 L1026.49 1214.08 L1027.07 1214.08 L1027.66 1214.08 L1028.25 1214.08 L1028.83 1214.08 L1029.42 1214.08 L1030.01 1214.08 L1030.59 1214.08 L1031.18 1214.08 L1031.77 1214.08 L1032.35 1214.08 L1032.94 1214.08 L1033.52 1214.08 L1034.11 1214.08 L1034.7 1214.08 L1035.28 1214.08 L1035.87 1214.08 L1036.46 1214.08 L1037.04 1214.08 L1037.63 1214.08 L1038.22 1214.08 L1038.8 1214.08 L1039.39 1214.08 L1039.98 1214.08 L1040.56 1214.08 L1041.15 1214.08 L1041.73 1214.08 L1042.32 1214.08 L1042.91 1214.08 L1043.49 1214.08 L1044.08 1214.08 L1044.67 1214.08 L1045.25 1214.08 L1045.84 1214.08 L1046.43 1214.08 L1047.01 1214.08 L1047.6 1214.08 L1048.19 1214.08 L1048.77 1214.08 L1049.36 1214.08 L1049.94 1214.08 L1050.53 1214.08 L1051.12 1214.08 L1051.7 1214.08 L1052.29 1214.08 L1052.88 1214.08 L1053.46 1214.08 L1054.05 1214.08 L1054.64 1214.08 L1055.22 1214.08 L1055.81 1214.08 L1056.39 1214.08 L1056.98 1214.08 L1057.57 1214.08 L1058.15 1214.08 L1058.74 1214.08 L1059.33 1214.08 L1059.91 1214.08 L1060.5 1214.08 L1061.09 1214.08 L1061.67 1214.08 L1062.26 1214.08 L1062.85 1214.08 L1063.43 1214.08 L1064.02 1214.08 L1064.6 1214.08 L1065.19 1214.08 L1065.78 1214.08 L1066.36 1214.08 L1066.95 1214.08 L1067.54 1214.08 L1068.12 1214.08 L1068.71 1214.08 L1069.3 1214.08 L1069.88 1214.08 L1070.47 1214.08 L1071.06 1214.08 L1071.64 1214.08 L1072.23 1214.08 L1072.81 1214.08 L1073.4 1214.08 L1073.99 1214.08 L1074.57 1214.08 L1075.16 1214.08 L1075.75 1214.08 L1076.33 1214.08 L1076.92 1214.08 L1077.51 1214.08 L1078.09 1214.08 L1078.68 1214.08 L1079.26 1214.08 L1079.85 1214.08 L1080.44 1214.08 L1081.02 1214.08 L1081.61 1214.08 L1082.2 1214.08 L1082.78 1214.08 L1083.37 1214.08 L1083.96 1214.08 L1084.54 1214.08 L1085.13 1214.08 L1085.72 1214.08 L1086.3 1214.08 L1086.89 1214.08 L1087.47 1214.08 L1088.06 1214.08 L1088.65 1214.08 L1089.23 1214.08 L1089.82 1214.08 L1090.41 1214.08 L1090.99 1214.08 L1091.58 1214.08 L1092.17 1214.08 L1092.75 1214.08 L1093.34 1214.08 L1093.93 1214.08 L1094.51 1214.08 L1095.1 1214.08 L1095.68 1214.08 L1096.27 1214.08 L1096.86 1214.08 L1097.44 1214.08 L1098.03 1214.08 L1098.62 1214.08 L1099.2 1214.08 L1099.79 1214.08 L1100.38 1214.08 L1100.96 1214.08 L1101.55 1214.08 L1102.14 1214.08 L1102.72 1214.08 L1103.31 1214.08 L1103.89 1214.08 L1104.48 1214.08 L1105.07 1214.08 L1105.65 1214.08 L1106.24 1214.08 L1106.83 1214.08 L1107.41 1214.08 L1108 1214.08 L1108.59 1214.08 L1109.17 1214.08 L1109.76 1214.08 L1110.34 1214.08 L1110.93 1214.08 L1111.52 1214.08 L1112.1 1214.08 L1112.69 1214.08 L1113.28 1214.08 L1113.86 1214.08 L1114.45 1214.08 L1115.04 1214.08 L1115.62 1214.08 L1116.21 1214.08 L1116.8 1214.08 L1117.38 1214.08 L1117.97 1214.08 L1118.55 1214.08 L1119.14 1214.08 L1119.73 1214.08 L1120.31 1214.08 L1120.9 1214.08 L1121.49 1214.08 L1122.07 1214.08 L1122.66 1214.08 L1123.25 1214.08 L1123.83 1214.08 L1124.42 1214.08 L1125.01 1214.08 L1125.59 1214.08 L1126.18 1214.08 L1126.76 1214.08 L1127.35 1214.08 L1127.94 1214.08 L1128.52 1214.08 L1129.11 1214.08 L1129.7 1214.08 L1130.28 1214.08 L1130.87 1214.08 L1131.46 1214.08 L1132.04 1214.08 L1132.63 1214.08 L1133.21 1214.08 L1133.8 1214.08 L1134.39 1214.08 L1134.97 1214.08 L1135.56 1214.08 L1136.15 1214.08 L1136.73 1214.08 L1137.32 1214.08 L1137.91 1214.08 L1138.49 1214.08 L1139.08 1214.08 L1139.67 1214.08 L1140.25 1214.08 L1140.84 1214.08 L1141.42 1214.08 L1142.01 1214.08 L1142.6 1214.08 L1143.18 1214.08 L1143.77 1214.08 L1144.36 1214.08 L1144.94 1214.08 L1145.53 1214.08 L1146.12 1214.08 L1146.7 1214.08 L1147.29 1214.08 L1147.88 1214.08 L1148.46 1214.08 L1149.05 1214.08 L1149.63 1214.08 L1150.22 1214.08 L1150.81 1214.08 L1151.39 1214.08 L1151.98 1214.08 L1152.57 1214.08 L1153.15 1214.08 L1153.74 1214.08 L1154.33 1214.08 L1154.91 1214.08 L1155.5 1214.08 L1156.09 1214.08 L1156.67 1214.08 L1157.26 1214.08 L1157.84 1214.08 L1158.43 1214.08 L1159.02 1214.08 L1159.6 1214.08 L1160.19 1214.08 L1160.78 1214.08 L1161.36 1214.08 L1161.95 1214.08 L1162.54 1214.08 L1163.12 1214.08 L1163.71 1214.08 L1164.29 1214.08 L1164.88 1214.08 L1165.47 1214.08 L1166.05 1214.08 L1166.64 1214.08 L1167.23 1214.08 L1167.81 1214.08 L1168.4 1214.08 L1168.99 1214.08 L1169.57 1214.08 L1170.16 1214.08 L1170.75 1214.08 L1171.33 1214.08 L1171.92 1214.08 L1172.5 1214.08 L1173.09 1214.08 L1173.68 1214.08 L1174.26 1214.08 L1174.85 1214.08 L1175.44 1214.08 L1176.02 1214.08 L1176.61 1214.08 L1177.2 1214.08 L1177.78 1214.08 L1178.37 1214.08 L1178.96 1214.08 L1179.54 1214.08 L1180.13 1214.08 L1180.71 1214.08 L1181.3 1214.08 L1181.89 1214.08 L1182.47 1214.08 L1183.06 1214.08 L1183.65 1214.08 L1184.23 1214.08 L1184.82 1214.08 L1185.41 1214.08 L1185.99 1214.08 L1186.58 1214.08 L1187.16 1214.08 L1187.75 1214.08 L1188.34 1214.08 L1188.92 1214.08 L1189.51 1214.08 L1190.1 1214.08 L1190.68 1214.08 L1191.27 1214.08 L1191.86 1214.08 L1192.44 1214.08 L1193.03 1214.08 L1193.62 1214.08 L1194.2 1214.08 L1194.79 1214.08 L1195.37 1214.08 L1195.96 1214.08 L1196.55 1214.08 L1197.13 1214.08 L1197.72 1214.08 L1198.31 1214.08 L1198.89 1214.08 L1199.48 1214.08 L1200.07 1214.08 L1200.65 1214.08 L1201.24 1214.08 L1201.83 1214.08 L1202.41 1214.08 L1203 1214.08 L1203.58 1214.08 L1204.17 1214.08 L1204.76 1214.08 L1205.34 1214.08 L1205.93 1214.08 L1206.52 1214.08 L1207.1 1214.08 L1207.69 1214.08 L1208.28 1214.08 L1208.86 1214.08 L1209.45 1214.08 L1210.03 1214.08 L1210.62 1214.08 L1211.21 1214.08 L1211.79 1214.08 L1212.38 1214.08 L1212.97 1214.08 L1213.55 1214.08 L1214.14 1214.08 L1214.73 1214.08 L1215.31 1214.08 L1215.9 1214.08 L1216.49 1214.08 L1217.07 1214.08 L1217.66 1214.08 L1218.24 1214.08 L1218.83 1214.08 L1219.42 1214.08 L1220 1214.08 L1220.59 1214.08 L1221.18 1214.08 L1221.76 1214.08 L1222.35 1214.08 L1222.94 1214.08 L1223.52 1214.08 L1224.11 1214.08 L1224.7 1214.08 L1225.28 1214.08 L1225.87 1214.08 L1226.45 1214.08 L1227.04 1214.08 L1227.63 1214.08 L1228.21 1214.08 L1228.8 1214.08 L1229.39 1214.08 L1229.97 1214.08 L1230.56 1214.08 L1231.15 1214.08 L1231.73 1214.08 L1232.32 1214.08 L1232.91 1214.08 L1233.49 1214.08 L1234.08 1214.08 L1234.66 1214.08 L1235.25 1214.08 L1235.84 1214.08 L1236.42 1214.08 L1237.01 1214.08 L1237.6 1214.08 L1238.18 1214.08 L1238.77 1214.08 L1239.36 1214.08 L1239.94 1214.08 L1240.53 1214.08 L1241.11 1214.08 L1241.7 1214.08 L1242.29 1214.08 L1242.87 1214.08 L1243.46 1214.08 L1244.05 1214.08 L1244.63 1214.08 L1245.22 1214.08 L1245.81 1214.08 L1246.39 1214.08 L1246.98 1214.08 L1247.57 1214.08 L1248.15 1214.08 L1248.74 1214.08 L1249.32 1214.08 L1249.91 1214.08 L1250.5 1214.08 L1251.08 1214.08 L1251.67 1214.08 L1252.26 1214.08 L1252.84 1214.08 L1253.43 1214.08 L1254.02 1214.08 L1254.6 1214.08 L1255.19 1214.08 L1255.78 1214.08 L1256.36 1214.08 L1256.95 1214.08 L1257.53 1214.08 L1258.12 1214.08 L1258.71 1214.08 L1259.29 1214.08 L1259.88 1214.08 L1260.47 1214.08 L1261.05 1214.08 L1261.64 1214.08 L1262.23 1214.08 L1262.81 1214.08 L1263.4 1214.08 L1263.98 1214.08 L1264.57 1214.08 L1265.16 1214.08 L1265.74 1214.08 L1266.33 1214.08 L1266.92 1214.08 L1267.5 1214.08 L1268.09 1214.08 L1268.68 1214.08 L1269.26 1214.08 L1269.85 1214.08 L1270.44 1214.08 L1271.02 1214.08 L1271.61 1214.08 L1272.19 1214.08 L1272.78 1214.08 L1273.37 1214.08 L1273.95 1214.08 L1274.54 1214.08 L1275.13 1214.08 L1275.71 1214.08 L1276.3 1214.08 L1276.89 1214.08 L1277.47 1214.08 L1278.06 1214.08 L1278.65 1214.08 L1279.23 1214.08 L1279.82 1214.08 L1280.4 1214.08 L1280.99 1214.08 L1281.58 1214.08 L1282.16 1214.08 L1282.75 1214.08 L1283.34 1214.08 L1283.92 1214.08 L1284.51 1214.08 L1285.1 1214.08 L1285.68 1214.08 L1286.27 1214.08 L1286.86 1214.08 L1287.44 1214.08 L1288.03 1214.08 L1288.61 1214.08 L1289.2 1214.08 L1289.79 1214.08 L1290.37 1214.08 L1290.96 1214.08 L1291.55 1214.08 L1292.13 1214.08 L1292.72 1214.08 L1293.31 1214.08 L1293.89 1214.08 L1294.48 1214.08 L1295.06 1214.08 L1295.65 1214.08 L1296.24 1214.08 L1296.82 1214.08 L1297.41 1214.08 L1298 1214.08 L1298.58 1214.08 L1299.17 1214.08 L1299.76 1214.08 L1300.34 1214.08 L1300.93 1214.08 L1301.52 1214.08 L1302.1 1214.08 L1302.69 1214.08 L1303.27 1214.08 L1303.86 1214.08 L1304.45 1214.08 L1305.03 1214.08 L1305.62 1214.08 L1306.21 1214.08 L1306.79 1214.08 L1307.38 1214.08 L1307.97 1214.08 L1308.55 1214.08 L1309.14 1214.08 L1309.73 1214.08 L1310.31 1214.08 L1310.9 1214.08 L1311.48 1214.08 L1312.07 1214.08 L1312.66 1214.08 L1313.24 1214.08 L1313.83 1214.08 L1314.42 1214.08 L1315 1214.08 L1315.59 1214.08 L1316.18 1214.08 L1316.76 1214.08 L1317.35 1214.08 L1317.93 1214.08 L1318.52 1214.08 L1319.11 1214.08 L1319.69 1214.08 L1320.28 1214.08 L1320.87 1214.08 L1321.45 1214.08 L1322.04 1214.08 L1322.63 1214.08 L1323.21 1214.08 L1323.8 1214.08 L1324.39 1214.08 L1324.97 1214.08 L1325.56 1214.08 L1326.14 1214.08 L1326.73 1214.08 L1327.32 1214.08 L1327.9 1214.08 L1328.49 1214.08 L1329.08 1214.08 L1329.66 1214.08 L1330.25 1214.08 L1330.84 1214.08 L1331.42 1214.08 L1332.01 1214.08 L1332.6 1214.08 L1333.18 1214.08 L1333.77 1214.08 L1334.35 1214.08 L1334.94 1214.08 L1335.53 1214.08 L1336.11 1214.08 L1336.7 1214.08 L1337.29 1214.08 L1337.87 1214.08 L1338.46 1214.08 L1339.05 1214.08 L1339.63 1214.08 L1340.22 1214.08 L1340.8 1214.08 L1341.39 1214.08 L1341.98 1214.08 L1342.56 1214.08 L1343.15 1214.08 L1343.74 1214.08 L1344.32 1214.08 L1344.91 1214.08 L1345.5 1214.08 L1346.08 1214.08 L1346.67 1214.08 L1347.26 1214.08 L1347.84 1214.08 L1348.43 1214.08 L1349.01 1214.08 L1349.6 1214.08 L1350.19 1214.08 L1350.77 1214.08 L1351.36 1214.08 L1351.95 1214.08 L1352.53 1214.08 L1353.12 1214.08 L1353.71 1214.08 L1354.29 1214.08 L1354.88 1214.08 L1355.47 1214.08 L1356.05 1214.08 L1356.64 1214.08 L1357.22 1214.08 L1357.81 1214.08 L1358.4 1214.08 L1358.98 1214.08 L1359.57 1214.08 L1360.16 1214.08 L1360.74 1214.08 L1361.33 1214.08 L1361.92 1214.08 L1362.5 1214.08 L1363.09 1214.08 L1363.68 1214.08 L1364.26 1214.08 L1364.85 1214.08 L1365.43 1214.08 L1366.02 1214.08 L1366.61 1214.08 L1367.19 1214.08 L1367.78 1214.08 L1368.37 1214.08 L1368.95 1214.08 L1369.54 1214.08 L1370.13 1214.08 L1370.71 1214.08 L1371.3 1214.08 L1371.88 1214.08 L1372.47 1214.08 L1373.06 1214.08 L1373.64 1214.08 L1374.23 1214.08 L1374.82 1214.08 L1375.4 1214.08 L1375.99 1214.08 L1376.58 1214.08 L1377.16 1214.08 L1377.75 1214.08 L1378.34 1214.08 L1378.92 1214.08 L1379.51 1214.08 L1380.09 1214.08 L1380.68 1214.08 L1381.27 1214.08 L1381.85 1214.08 L1382.44 1214.08 L1383.03 1214.08 L1383.61 1214.08 L1384.2 1214.08 L1384.79 1214.08 L1385.37 1214.08 L1385.96 1214.08 L1386.55 1214.08 L1387.13 1214.08 L1387.72 1214.08 L1388.3 1214.08 L1388.89 1214.08 L1389.48 1214.08 L1390.06 1214.08 L1390.65 1214.08 L1391.24 1214.08 L1391.82 1214.08 L1392.41 1214.08 L1393 1214.08 L1393.58 1214.08 L1394.17 1214.08 L1394.75 1214.08 L1395.34 1214.08 L1395.93 1214.08 L1396.51 1214.08 L1397.1 1214.08 L1397.69 1214.08 L1398.27 1214.08 L1398.86 1214.08 L1399.45 1214.08 L1400.03 1214.08 L1400.62 1214.08 L1401.21 1214.08 L1401.79 1214.08 L1402.38 1214.08 L1402.96 1214.08 L1403.55 1214.08 L1404.14 1214.08 L1404.72 1214.08 L1405.31 1214.08 L1405.9 1214.08 L1406.48 1214.08 L1407.07 1214.08 L1407.66 1214.08 L1408.24 1214.08 L1408.83 1214.08 L1409.42 1214.08 L1410 1214.08 L1410.59 1214.08 L1411.17 1214.08 L1411.76 1214.08 L1412.35 1214.08 L1412.93 1214.08 L1413.52 1214.08 L1414.11 1214.08 L1414.69 1214.08 L1415.28 1214.08 L1415.87 1214.08 L1416.45 1214.08 L1417.04 1214.08 L1417.63 1214.08 L1418.21 1214.08 L1418.8 1214.08 L1419.38 1214.08 L1419.97 1214.08 L1420.56 1214.08 L1421.14 1214.08 L1421.73 1214.08 L1422.32 1214.08 L1422.9 1214.08 L1423.49 1214.08 L1424.08 1214.08 L1424.66 1214.08 L1425.25 1214.08 L1425.83 1214.08 L1426.42 1214.08 L1427.01 1214.08 L1427.59 1214.08 L1428.18 1214.08 L1428.77 1214.08 L1429.35 1214.08 L1429.94 1214.08 L1430.53 1214.08 L1431.11 1214.08 L1431.7 1214.08 L1432.29 1214.08 L1432.87 1214.08 L1433.46 1214.08 L1434.04 1214.08 L1434.63 1214.08 L1435.22 1214.08 L1435.8 1214.08 L1436.39 1214.08 L1436.98 1214.08 L1437.56 1214.08 L1438.15 1214.08 L1438.74 1214.08 L1439.32 1214.08 L1439.91 1214.08 L1440.5 1214.08 L1441.08 1214.08 L1441.67 1214.08 L1442.25 1214.08 L1442.84 1214.08 L1443.43 1214.08 L1444.01 1214.08 L1444.6 1214.08 L1445.19 1214.08 L1445.77 1214.08 L1446.36 1214.08 L1446.95 1214.08 L1447.53 1214.08 L1448.12 1214.08 L1448.7 1214.08 L1449.29 1214.08 L1449.88 1214.08 L1450.46 1214.08 L1451.05 1214.08 L1451.64 1214.08 L1452.22 1214.08 L1452.81 1214.08 L1453.4 1214.08 L1453.98 1214.08 L1454.57 1214.08 L1455.16 1214.08 L1455.74 1214.08 L1456.33 1214.08 L1456.91 1214.08 L1457.5 1214.08 L1458.09 1214.08 L1458.67 1214.08 L1459.26 1214.08 L1459.85 1214.08 L1460.43 1214.08 L1461.02 1214.08 L1461.61 1214.08 L1462.19 1214.08 L1462.78 1214.08 L1463.37 1214.08 L1463.95 1214.08 L1464.54 1214.08 L1465.12 1214.08 L1465.71 1214.08 L1466.3 1214.08 L1466.88 1214.08 L1467.47 1214.08 L1468.06 1214.08 L1468.64 1214.08 L1469.23 1214.08 L1469.82 1214.08 L1470.4 1214.08 L1470.99 1214.08 L1471.57 1214.08 L1472.16 1214.08 L1472.75 1214.08 L1473.33 1214.08 L1473.92 1214.08 L1474.51 1214.08 L1475.09 1214.08 L1475.68 1214.08 L1476.27 1214.08 L1476.85 1214.08 L1477.44 1214.08 L1478.03 1214.08 L1478.61 1214.08 L1479.2 1214.08 L1479.78 1214.08 L1480.37 1214.08 L1480.96 1214.08 L1481.54 1214.08 L1482.13 1214.08 L1482.72 1214.08 L1483.3 1214.08 L1483.89 1214.08 L1484.48 1214.08 L1485.06 1214.08 L1485.65 1214.08 L1486.24 1214.08 L1486.82 1214.08 L1487.41 1214.08 L1487.99 1214.08 L1488.58 1214.08 L1489.17 1214.08 L1489.75 1214.08 L1490.34 1214.08 L1490.93 1214.08 L1491.51 1214.08 L1492.1 1214.08 L1492.69 1214.08 L1493.27 1214.08 L1493.86 1214.08 L1494.45 1214.08 L1495.03 1214.08 L1495.62 1214.08 L1496.2 1214.08 L1496.79 1214.08 L1497.38 1214.08 L1497.96 1214.08 L1498.55 1214.08 L1499.14 1214.08 L1499.72 1214.08 L1500.31 1214.08 L1500.9 1214.08 L1501.48 1214.08 L1502.07 1214.08 L1502.65 1214.08 L1503.24 1214.08 L1503.83 1214.08 L1504.41 1214.08 L1505 1214.08 L1505.59 1214.08 L1506.17 1214.08 L1506.76 1214.08 L1507.35 1214.08 L1507.93 1214.08 L1508.52 1214.08 L1509.11 1214.08 L1509.69 1214.08 L1510.28 1214.08 L1510.86 1214.08 L1511.45 1214.08 L1512.04 1214.08 L1512.62 1214.08 L1513.21 1214.08 L1513.8 1214.08 L1514.38 1214.08 L1514.97 1214.08 L1515.56 1214.08 L1516.14 1214.08 L1516.73 1214.08 L1517.32 1214.08 L1517.9 1214.08 L1518.49 1214.08 L1519.07 1214.08 L1519.66 1214.08 L1520.25 1214.08 L1520.83 1214.08 L1521.42 1214.08 L1522.01 1214.08 L1522.59 1214.08 L1523.18 1214.08 L1523.77 1214.08 L1524.35 1214.08 L1524.94 1214.08 L1525.52 1214.08 L1526.11 1214.08 L1526.7 1214.08 L1527.28 1214.08 L1527.87 1214.08 L1528.46 1214.08 L1529.04 1214.08 L1529.63 1214.08 L1530.22 1214.08 L1530.8 1214.08 L1531.39 1214.08 L1531.98 1214.08 L1532.56 1214.08 L1533.15 1214.08 L1533.73 1214.08 L1534.32 1214.08 L1534.91 1214.08 L1535.49 1214.08 L1536.08 1214.08 L1536.67 1214.08 L1537.25 1214.08 L1537.84 1214.08 L1538.43 1214.08 L1539.01 1214.08 L1539.6 1214.08 L1540.19 1214.08 L1540.77 1214.08 L1541.36 1214.08 L1541.94 1214.08 L1542.53 1214.08 L1543.12 1214.08 L1543.7 1214.08 L1544.29 1214.08 L1544.88 1214.08 L1545.46 1214.08 L1546.05 1214.08 L1546.64 1214.08 L1547.22 1214.08 L1547.81 1214.08 L1548.4 1214.08 L1548.98 1214.08 L1549.57 1214.08 L1550.15 1214.08 L1550.74 1214.08 L1551.33 1214.08 L1551.91 1214.08 L1552.5 1214.08 L1553.09 1214.08 L1553.67 1214.08 L1554.26 1214.08 L1554.85 1214.08 L1555.43 1214.08 L1556.02 1214.08 L1556.6 1214.08 L1557.19 1214.08 L1557.78 1214.08 L1558.36 1214.08 L1558.95 1214.08 L1559.54 1214.08 L1560.12 1214.08 L1560.71 1214.08 L1561.3 1214.08 L1561.88 1214.08 L1562.47 1214.08 L1563.06 1214.08 L1563.64 1214.08 L1564.23 1214.08 L1564.81 1214.08 L1565.4 1214.08 L1565.99 1214.08 L1566.57 1214.08 L1567.16 1214.08 L1567.75 1214.08 L1568.33 1214.08 L1568.92 1214.08 L1569.51 1214.08 L1570.09 1214.08 L1570.68 1214.08 L1571.27 1214.08 L1571.85 1214.08 L1572.44 1214.08 L1573.02 1214.08 L1573.61 1214.08 L1574.2 1214.08 L1574.78 1214.08 L1575.37 1214.08 L1575.96 1214.08 L1576.54 1214.08 L1577.13 1214.08 L1577.72 1214.08 L1578.3 1214.08 L1578.89 1214.08 L1579.47 1214.08 L1580.06 1214.08 L1580.65 1214.08 L1581.23 1214.08 L1581.82 1214.08 L1582.41 1214.08 L1582.99 1214.08 L1583.58 1214.08 L1584.17 1214.08 L1584.75 1214.08 L1585.34 1214.08 L1585.93 1214.08 L1586.51 1214.08 L1587.1 1214.08 L1587.68 1214.08 L1588.27 1214.08 L1588.86 1214.08 L1589.44 1214.08 L1590.03 1214.08 L1590.62 1214.08 L1591.2 1214.08 L1591.79 1214.08 L1592.38 1214.08 L1592.96 1214.08 L1593.55 1214.08 L1594.14 1214.08 L1594.72 1214.08 L1595.31 1214.08 L1595.89 1214.08 L1596.48 1214.08 L1597.07 1214.08 L1597.65 1214.08 L1598.24 1214.08 L1598.83 1214.08 L1599.41 1214.08 L1600 1214.08 L1600.59 1214.08 L1601.17 1214.08 L1601.76 1214.08 L1602.34 1214.08 L1602.93 1214.08 L1603.52 1214.08 L1604.1 1214.08 L1604.69 1214.08 L1605.28 1214.08 L1605.86 1214.08 L1606.45 1214.08 L1607.04 1214.08 L1607.62 1214.08 L1608.21 1214.08 L1608.8 1214.08 L1609.38 1214.08 L1609.97 1214.08 L1610.55 1214.08 L1611.14 1214.08 L1611.73 1214.08 L1612.31 1214.08 L1612.9 1214.08 L1613.49 1214.08 L1614.07 1214.08 L1614.66 1214.08 L1615.25 1214.08 L1615.83 1214.08 L1616.42 1214.08 L1617.01 1214.08 L1617.59 1214.08 L1618.18 1214.08 L1618.76 1214.08 L1619.35 1214.08 L1619.94 1214.08 L1620.52 1214.08 L1621.11 1214.08 L1621.7 1214.08 L1622.28 1214.08 L1622.87 1214.08 L1623.46 1214.08 L1624.04 1214.08 L1624.63 1214.08 L1625.22 1214.08 L1625.8 1214.08 L1626.39 1214.08 L1626.97 1214.08 L1627.56 1214.08 L1628.15 1214.08 L1628.73 1214.08 L1629.32 1214.08 L1629.91 1214.08 L1630.49 1214.08 L1631.08 1214.08 L1631.67 1214.08 L1632.25 1214.08 L1632.84 1214.08 L1633.42 1214.08 L1634.01 1214.08 L1634.6 1214.08 L1635.18 1214.08 L1635.77 1214.08 L1636.36 1214.08 L1636.94 1214.08 L1637.53 1214.08 L1638.12 1214.08 L1638.7 1214.08 L1639.29 1214.08 L1639.88 1214.08 L1640.46 1214.08 L1641.05 1214.08 L1641.63 1214.08 L1642.22 1214.08 L1642.81 1214.08 L1643.39 1214.08 L1643.98 1214.08 L1644.57 1214.08 L1645.15 1214.08 L1645.74 1214.08 L1646.33 1214.08 L1646.91 1214.08 L1647.5 1214.08 L1648.09 1214.08 L1648.67 1214.08 L1649.26 1214.08 L1649.84 1214.08 L1650.43 1214.08 L1651.02 1214.08 L1651.6 1214.08 L1652.19 1214.08 L1652.78 1214.08 L1653.36 1214.08 L1653.95 1214.08 L1654.54 1214.08 L1655.12 1214.08 L1655.71 1214.08 L1656.29 1214.08 L1656.88 1214.08 L1657.47 1214.08 L1658.05 1214.08 L1658.64 1214.08 L1659.23 1214.08 L1659.81 1214.08 L1660.4 1214.08 L1660.99 1214.08 L1661.57 1214.08 L1662.16 1214.08 L1662.75 1214.08 L1663.33 1214.08 L1663.92 1214.08 L1664.5 1214.08 L1665.09 1214.08 L1665.68 1214.08 L1666.26 1214.08 L1666.85 1214.08 L1667.44 1214.08 L1668.02 1214.08 L1668.61 1214.08 L1669.2 1214.08 L1669.78 1214.08 L1670.37 1214.08 L1670.96 1214.08 L1671.54 1214.08 L1672.13 1214.08 L1672.71 1214.08 L1673.3 1214.08 L1673.89 1214.08 L1674.47 1214.08 L1675.06 1214.08 L1675.65 1214.08 L1676.23 1214.08 L1676.82 1214.08 L1677.41 1214.08 L1677.99 1214.08 L1678.58 1214.08 L1679.17 1214.08 L1679.75 1214.08 L1680.34 1214.08 L1680.92 1214.08 L1681.51 1214.08 L1682.1 1214.08 L1682.68 1214.08 L1683.27 1214.08 L1683.86 1214.08 L1684.44 1214.08 L1685.03 1214.08 L1685.62 1214.08 L1686.2 1214.08 L1686.79 1214.08 L1687.37 1214.08 L1687.96 1214.08 L1688.55 1214.08 L1689.13 1214.08 L1689.72 1214.08 L1690.31 1214.08 L1690.89 1214.08 L1691.48 1214.08 L1692.07 1214.08 L1692.65 1214.08 L1693.24 1214.08 L1693.83 1214.08 L1694.41 1214.08 L1695 1214.08 L1695.58 1214.08 L1696.17 1214.08 L1696.76 1214.08 L1697.34 1214.08 L1697.93 1214.08 L1698.52 1214.08 L1699.1 1214.08 L1699.69 1214.08 L1700.28 1214.08 L1700.86 1214.08 L1701.45 1214.08 L1702.04 1214.08 L1702.62 1214.08 L1703.21 1214.08 L1703.79 1214.08 L1704.38 1214.08 L1704.97 1214.08 L1705.55 1214.08 L1706.14 1214.08 L1706.73 1214.08 L1707.31 1214.08 L1707.9 1214.08 L1708.49 1214.08 L1709.07 1214.08 L1709.66 1214.08 L1710.24 1214.08 L1710.83 1214.08 L1711.42 1214.08 L1712 1214.08 L1712.59 1214.08 L1713.18 1214.08 L1713.76 1214.08 L1714.35 1214.08 L1714.94 1214.08 L1715.52 1214.08 L1716.11 1214.08 L1716.7 1214.08 L1717.28 1214.08 L1717.87 1214.08 L1718.45 1214.08 L1719.04 1214.08 L1719.63 1214.08 L1720.21 1214.08 L1720.8 1214.08 L1721.39 1214.08 L1721.97 1214.08 L1722.56 1214.08 L1723.15 1214.08 L1723.73 1214.08 L1724.32 1214.08 L1724.91 1214.08 L1725.49 1214.08 L1726.08 1214.08 L1726.66 1214.08 L1727.25 1214.08 L1727.84 1214.08 L1728.42 1214.08 L1729.01 1214.08 L1729.6 1214.08 L1730.18 1214.08 L1730.77 1214.08 L1731.36 1214.08 L1731.94 1214.08 L1732.53 1214.08 L1733.11 1214.08 L1733.7 1214.08 L1734.29 1214.08 L1734.87 1214.08 L1735.46 1214.08 L1736.05 1214.08 L1736.63 1214.08 L1737.22 1214.08 L1737.81 1214.08 L1738.39 1214.08 L1738.98 1214.08 L1739.57 1214.08 L1740.15 1214.08 L1740.74 1214.08 L1741.32 1214.08 L1741.91 1214.08 L1742.5 1214.08 L1743.08 1214.08 L1743.67 1214.08 L1744.26 1214.08 L1744.84 1214.08 L1745.43 1214.08 L1746.02 1214.08 L1746.6 1214.08 L1747.19 1214.08 L1747.78 1214.08 L1748.36 1214.08 L1748.95 1214.08 L1749.53 1214.08 L1750.12 1214.08 L1750.71 1214.08 L1751.29 1214.08 L1751.88 1214.08 L1752.47 1214.08 L1753.05 1214.08 L1753.64 1214.08 L1754.23 1214.08 L1754.81 1214.08 L1755.4 1214.08 L1755.99 1214.08 L1756.57 1214.08 L1757.16 1214.08 L1757.74 1214.08 L1758.33 1214.08 L1758.92 1214.08 L1759.5 1214.08 L1760.09 1214.08 L1760.68 1214.08 L1761.26 1214.08 L1761.85 1214.08 L1762.44 1214.08 L1763.02 1214.08 L1763.61 1214.08 L1764.19 1214.08 L1764.78 1214.08 L1765.37 1214.08 L1765.95 1214.08 L1766.54 1214.08 L1767.13 1214.08 L1767.71 1214.08 L1768.3 1214.08 L1768.89 1214.08 L1769.47 1214.08 L1770.06 1214.08 L1770.65 1214.08 L1771.23 1214.08 L1771.82 1214.08 L1772.4 1214.08 L1772.99 1214.08 L1773.58 1214.08 L1774.16 1214.08 L1774.75 1214.08 L1775.34 1214.08 L1775.92 1214.08 L1776.51 1214.08 L1777.1 1214.08 L1777.68 1214.08 L1778.27 1214.08 L1778.86 1214.08 L1779.44 1214.08 L1780.03 1214.08 L1780.61 1214.08 L1781.2 1214.08 L1781.79 1214.08 L1782.37 1214.08 L1782.96 1214.08 L1783.55 1214.08 L1784.13 1214.08 L1784.72 1214.08 L1785.31 1214.08 L1785.89 1214.08 L1786.48 1214.08 L1787.06 1214.08 L1787.65 1214.08 L1788.24 1214.08 L1788.82 1214.08 L1789.41 1214.08 L1790 1214.08 L1790.58 1214.08 L1791.17 1214.08 L1791.76 1214.08 L1792.34 1214.08 L1792.93 1214.08 L1793.52 1214.08 L1794.1 1214.08 L1794.69 1214.08 L1795.27 1214.08 L1795.86 1214.08 L1796.45 1214.08 L1797.03 1214.08 L1797.62 1214.08 L1798.21 1214.08 L1798.79 1214.08 L1799.38 1214.08 L1799.97 1214.08 L1800.55 1214.08 L1801.14 1214.08 L1801.73 1214.08 L1802.31 1214.08 L1802.9 1214.08 L1803.48 1214.08 L1804.07 1214.08 L1804.66 1214.08 L1805.24 1214.08 L1805.83 1214.08 L1806.42 1214.08 L1807 1214.08 L1807.59 1214.08 L1808.18 1214.08 L1808.76 1214.08 L1809.35 1214.08 L1809.94 1214.08 L1810.52 1214.08 L1811.11 1214.08 L1811.69 1214.08 L1812.28 1214.08 L1812.87 1214.08 L1813.45 1214.08 L1814.04 1214.08 L1814.63 1214.08 L1815.21 1214.08 L1815.8 1214.08 L1816.39 1214.08 L1816.97 1214.08 L1817.56 1214.08 L1818.14 1214.08 L1818.73 1214.08 L1819.32 1214.08 L1819.9 1214.08 L1820.49 1214.08 L1821.08 1214.08 L1821.66 1214.08 L1822.25 1214.08 L1822.84 1214.08 L1823.42 1214.08 L1824.01 1214.08 L1824.6 1214.08 L1825.18 1214.08 L1825.77 1214.08 L1826.35 1214.08 L1826.94 1214.08 L1827.53 1214.08 L1828.11 1214.08 L1828.7 1214.08 L1829.29 1214.08 L1829.87 1214.08 L1830.46 1214.08 L1831.05 1214.08 L1831.63 1214.08 L1832.22 1214.08 L1832.81 1214.08 L1833.39 1214.08 L1833.98 1214.08 L1834.56 1214.08 L1835.15 1214.08 L1835.74 1214.08 L1836.32 1214.08 L1836.91 1214.08 L1837.5 1214.08 L1838.08 1214.08 L1838.67 1214.08 L1839.26 1214.08 L1839.84 1214.08 L1840.43 1214.08 L1841.01 1214.08 L1841.6 1214.08 L1842.19 1214.08 L1842.77 1214.08 L1843.36 1214.08 L1843.95 1214.08 L1844.53 1214.08 L1845.12 1214.08 L1845.71 1214.08 L1846.29 1214.08 L1846.88 1214.08 L1847.47 1214.08 L1848.05 1214.08 L1848.64 1214.08 L1849.22 1214.08 L1849.81 1214.08 L1850.4 1214.08 L1850.98 1214.08 L1851.57 1214.08 L1852.16 1214.08 L1852.74 1214.08 L1853.33 1214.08 L1853.92 1214.08 L1854.5 1214.08 L1855.09 1214.08 L1855.68 1214.08 L1856.26 1214.08 L1856.85 1214.08 L1857.43 1214.08 L1858.02 1214.08 L1858.61 1214.08 L1859.19 1214.08 L1859.78 1214.08 L1860.37 1214.08 L1860.95 1214.08 L1861.54 1214.08 L1862.13 1214.08 L1862.71 1214.08 L1863.3 1214.08 L1863.88 1214.08 L1864.47 1214.08 L1865.06 1214.08 L1865.64 1214.08 L1866.23 1214.08 L1866.82 1214.08 L1867.4 1214.08 L1867.99 1214.08 L1868.58 1214.08 L1869.16 1214.08 L1869.75 1214.08 L1870.34 1214.08 L1870.92 1214.08 L1871.51 1214.08 L1872.09 1214.08 L1872.68 1214.08 L1873.27 1214.08 L1873.85 1214.08 L1874.44 1214.08 L1875.03 1214.08 L1875.61 1214.08 L1876.2 1214.08 L1876.79 1214.08 L1877.37 1214.08 L1877.96 1214.08 L1878.55 1214.08 L1879.13 1214.08 L1879.72 1214.08 L1880.3 1214.08 L1880.89 1214.08 L1881.48 1214.08 L1882.06 1214.08 L1882.65 1214.08 L1883.24 1214.08 L1883.82 1214.08 L1884.41 1214.08 L1885 1214.08 L1885.58 1214.08 L1886.17 1214.08 L1886.76 1214.08 L1887.34 1214.08 L1887.93 1214.08 L1888.51 1214.08 L1889.1 1214.08 L1889.69 1214.08 L1890.27 1214.08 L1890.86 1214.08 L1891.45 1214.08 L1892.03 1214.08 L1892.62 1214.08 L1893.21 1214.08 L1893.79 1214.08 L1894.38 1214.08 L1894.96 1214.08 L1895.55 1214.08 L1896.14 1214.08 L1896.72 1214.08 L1897.31 1214.08 L1897.9 1214.08 L1898.48 1214.08 L1899.07 1214.08 L1899.66 1214.08 L1900.24 1214.08 L1900.83 1214.08 L1901.42 1214.08 L1902 1214.08 L1902.59 1214.08 L1903.17 1214.08 L1903.76 1214.08 L1904.35 1214.08 L1904.93 1214.08 L1905.52 1214.08 L1906.11 1214.08 L1906.69 1214.08 L1907.28 1214.08 L1907.87 1214.08 L1908.45 1214.08 L1909.04 1214.08 L1909.63 1214.08 L1910.21 1214.08 L1910.8 1214.08 L1911.38 1214.08 L1911.97 1214.08 L1912.56 1214.08 L1913.14 1214.08 L1913.73 1214.08 L1914.32 1214.08 L1914.9 1214.08 L1915.49 1214.08 L1916.08 1214.08 L1916.66 1214.08 L1917.25 1214.08 L1917.83 1214.08 L1918.42 1214.08 L1919.01 1214.08 L1919.59 1214.08 L1920.18 1214.08 L1920.77 1214.08 L1921.35 1214.08 L1921.94 1214.08 L1922.53 1214.08 L1923.11 1214.08 L1923.7 1214.08 L1924.29 1214.08 L1924.87 1214.08 L1925.46 1214.08 L1926.04 1214.08 L1926.63 1214.08 L1927.22 1214.08 L1927.8 1214.08 L1928.39 1214.08 L1928.98 1214.08 L1929.56 1214.08 L1930.15 1214.08 L1930.74 1214.08 L1931.32 1214.08 L1931.91 1214.08 L1932.5 1214.08 L1933.08 1214.08 L1933.67 1214.08 L1934.25 1214.08 L1934.84 1214.08 L1935.43 1214.08 L1936.01 1214.08 L1936.6 1214.08 L1937.19 1214.08 L1937.77 1214.08 L1938.36 1214.08 L1938.95 1214.08 L1939.53 1214.08 L1940.12 1214.08 L1940.71 1214.08 L1941.29 1214.08 L1941.88 1214.08 L1942.46 1214.08 L1943.05 1214.08 L1943.64 1214.08 L1944.22 1214.08 L1944.81 1214.08 L1945.4 1214.08 L1945.98 1214.08 L1946.57 1214.08 L1947.16 1214.08 L1947.74 1214.08 L1948.33 1214.08 L1948.91 1214.08 L1949.5 1214.08 L1950.09 1214.08 L1950.67 1214.08 L1951.26 1214.08 L1951.85 1214.08 L1952.43 1214.08 L1953.02 1214.08 L1953.61 1214.08 L1954.19 1214.08 L1954.78 1214.08 L1955.37 1214.08 L1955.95 1214.08 L1956.54 1214.08 L1957.12 1214.08 L1957.71 1214.08 L1958.3 1214.08 L1958.88 1214.08 L1959.47 1214.08 L1960.06 1214.08 L1960.64 1214.08 L1961.23 1214.08 L1961.82 1214.08 L1962.4 1214.08 L1962.99 1214.08 L1963.58 1214.08 L1964.16 1214.08 L1964.75 1214.08 L1965.33 1214.08 L1965.92 1214.08 L1966.51 1214.08 L1967.09 1214.08 L1967.68 1214.08 L1968.27 1214.08 L1968.85 1214.08 L1969.44 1214.08 L1970.03 1214.08 L1970.61 1214.08 L1971.2 1214.08 L1971.78 1214.08 L1972.37 1214.08 L1972.96 1214.08 L1973.54 1214.08 L1974.13 1214.08 L1974.72 1214.08 L1975.3 1214.08 L1975.89 1214.08 L1976.48 1214.08 L1977.06 1214.08 L1977.65 1214.08 L1978.24 1214.08 L1978.82 1214.08 L1979.41 1214.08 L1979.99 1214.08 L1980.58 1214.08 L1981.17 1214.08 L1981.75 1214.08 L1982.34 1214.08 L1982.93 1214.08 L1983.51 1214.08 L1984.1 1214.08 L1984.69 1214.08 L1985.27 1214.08 L1985.86 1214.08 L1986.45 1214.08 L1987.03 1214.08 L1987.62 1214.08 L1988.2 1214.08 L1988.79 1214.08 L1989.38 1214.08 L1989.96 1214.08 L1990.55 1214.08 L1991.14 1214.08 L1991.72 1214.08 L1992.31 1214.08 L1992.9 1214.08 L1993.48 1214.08 L1994.07 1214.08 L1994.65 1214.08 L1995.24 1214.08 L1995.83 1214.08 L1996.41 1214.08 L1997 1214.08 L1997.59 1214.08 L1998.17 1214.08 L1998.76 1214.08 L1999.35 1214.08 L1999.93 1214.08 L2000.52 1214.08 L2001.11 1214.08 L2001.69 1214.08 L2002.28 1214.08 L2002.86 1214.08 L2003.45 1214.08 L2004.04 1214.08 L2004.62 1214.08 L2005.21 1214.08 L2005.8 1214.08 L2006.38 1214.08 L2006.97 1214.08 L2007.56 1214.08 L2008.14 1214.08 L2008.73 1214.08 L2009.32 1214.08 L2009.9 1214.08 L2010.49 1214.08 L2011.07 1214.08 L2011.66 1214.08 L2012.25 1214.08 L2012.83 1214.08 L2013.42 1214.08 L2014.01 1214.08 L2014.59 1214.08 L2015.18 1214.08 L2015.77 1214.08 L2016.35 1214.08 L2016.94 1214.08 L2017.53 1214.08 L2018.11 1214.08 L2018.7 1214.08 L2019.28 1214.08 L2019.87 1214.08 L2020.46 1214.08 L2021.04 1214.08 L2021.63 1214.08 L2022.22 1214.08 L2022.8 1214.08 L2023.39 1214.08 L2023.98 1214.08 L2024.56 1214.08 L2025.15 1214.08 L2025.73 1214.08 L2026.32 1214.08 L2026.91 1214.08 L2027.49 1214.08 L2028.08 1214.08 L2028.67 1214.08 L2029.25 1214.08 L2029.84 1214.08 L2030.43 1214.08 L2031.01 1214.08 L2031.6 1214.08 L2032.19 1214.08 L2032.77 1214.08 L2033.36 1214.08 L2033.94 1214.08 L2034.53 1214.08 L2035.12 1214.08 L2035.7 1214.08 L2036.29 1214.08 L2036.88 1214.08 L2037.46 1214.08 L2038.05 1214.08 L2038.64 1214.08 L2039.22 1214.08 L2039.81 1214.08 L2040.4 1214.08 L2040.98 1214.08 L2041.57 1214.08 L2042.15 1214.08 L2042.74 1214.08 L2043.33 1214.08 L2043.91 1214.08 L2044.5 1214.08 L2045.09 1214.08 L2045.67 1214.08 L2046.26 1214.08 L2046.85 1214.08 L2047.43 1214.08 L2048.02 1214.08 L2048.6 1214.08 L2049.19 1214.08 L2049.78 1214.08 L2050.36 1214.08 L2050.95 1214.08 L2051.54 1214.08 L2052.12 1214.08 L2052.71 1214.08 L2053.3 1214.08 L2053.88 1214.08 L2054.47 1214.08 L2055.06 1214.08 L2055.64 1214.08 L2056.23 1214.08 L2056.81 1214.08 L2057.4 1214.08 L2057.99 1214.08 L2058.57 1214.08 L2059.16 1214.08 L2059.75 1214.08 L2060.33 1214.08 L2060.92 1214.08 L2061.51 1214.08 L2062.09 1214.08 L2062.68 1214.08 L2063.27 1214.08 L2063.85 1214.08 L2064.44 1214.08 L2065.02 1214.08 L2065.61 1214.08 L2066.2 1214.08 L2066.78 1214.08 L2067.37 1214.08 L2067.96 1214.08 L2068.54 1214.08 L2069.13 1214.08 L2069.72 1214.08 L2070.3 1214.08 L2070.89 1214.08 L2071.48 1214.08 L2072.06 1214.08 L2072.65 1214.08 L2073.23 1214.08 L2073.82 1214.08 L2074.41 1214.08 L2074.99 1214.08 L2075.58 1214.08 L2076.17 1214.08 L2076.75 1214.08 L2077.34 1214.08 L2077.93 1214.08 L2078.51 1214.08 L2079.1 1214.08 L2079.68 1214.08 L2080.27 1214.08 L2080.86 1214.08 L2081.44 1214.08 L2082.03 1214.08 L2082.62 1214.08 L2083.2 1214.08 L2083.79 1214.08 L2084.38 1214.08 L2084.96 1214.08 L2085.55 1214.08 L2086.14 1214.08 L2086.72 1214.08 L2087.31 1214.08 L2087.89 1214.08 L2088.48 1214.08 L2089.07 1214.08 L2089.65 1214.08 L2090.24 1214.08 L2090.83 1214.08 L2091.41 1214.08 L2092 1214.08 L2092.59 1214.08 L2093.17 1214.08 L2093.76 1214.08 L2094.35 1214.08 L2094.93 1214.08 L2095.52 1214.08 L2096.1 1214.08 L2096.69 1214.08 L2097.28 1214.08 L2097.86 1214.08 L2098.45 1214.08 L2099.04 1214.08 L2099.62 1214.08 L2100.21 1214.08 L2100.8 1214.08 L2101.38 1214.08 L2101.97 1214.08 L2102.55 1214.08 L2103.14 1214.08 L2103.73 1214.08 L2104.31 1214.08 L2104.9 1214.08 L2105.49 1214.08 L2106.07 1214.08 L2106.66 1214.08 L2107.25 1214.08 L2107.83 1214.08 L2108.42 1214.08 L2109.01 1214.08 L2109.59 1214.08 L2110.18 1214.08 L2110.76 1214.08 L2111.35 1214.08 L2111.94 1214.08 L2112.52 1214.08 L2113.11 1214.08 L2113.7 1214.08 L2114.28 1214.08 L2114.87 1214.08 L2115.46 1214.08 L2116.04 1214.08 L2116.63 1214.08 L2117.22 1214.08 L2117.8 1214.08 L2118.39 1214.08 L2118.97 1214.08 L2119.56 1214.08 L2120.15 1214.08 L2120.73 1214.08 L2121.32 1214.08 L2121.91 1214.08 L2122.49 1214.08 L2123.08 1214.08 L2123.67 1214.08 L2124.25 1214.08 L2124.84 1214.08 L2125.42 1214.08 L2126.01 1214.08 L2126.6 1214.08 L2127.18 1214.08 L2127.77 1214.08 L2128.36 1214.08 L2128.94 1214.08 L2129.53 1214.08 L2130.12 1214.08 L2130.7 1214.08 L2131.29 1214.08 L2131.88 1214.08 L2132.46 1214.08 L2133.05 1214.08 L2133.63 1214.08 L2134.22 1214.08 L2134.81 1214.08 L2135.39 1214.08 L2135.98 1214.08 L2136.57 1214.08 L2137.15 1214.08 L2137.74 1214.08 L2138.33 1214.08 L2138.91 1214.08 L2139.5 1214.08 L2140.09 1214.08 L2140.67 1214.08 L2141.26 1214.08 L2141.84 1214.08 L2142.43 1214.08 L2143.02 1214.08 L2143.6 1214.08 L2144.19 1214.08 L2144.78 1214.08 L2145.36 1214.08 L2145.95 1214.08 L2146.54 1214.08 L2147.12 1214.08 L2147.71 1214.08 L2148.3 1214.08 L2148.88 1214.08 L2149.47 1214.08 L2150.05 1214.08 L2150.64 1214.08 L2151.23 1214.08 L2151.81 1214.08 L2152.4 1214.08 L2152.99 1214.08 L2153.57 1214.08 L2154.16 1214.08 L2154.75 1214.08 L2155.33 1214.08 L2155.92 1214.08 L2156.5 1214.08 L2157.09 1214.08 L2157.68 1214.08 L2158.26 1214.08 L2158.26 1213.45 L2157.68 1213.45 L2157.09 1213.45 L2156.5 1213.45 L2155.92 1213.45 L2155.33 1213.45 L2154.75 1213.45 L2154.16 1213.45 L2153.57 1213.45 L2152.99 1213.45 L2152.4 1213.45 L2151.81 1213.45 L2151.23 1213.45 L2150.64 1213.45 L2150.05 1213.45 L2149.47 1213.45 L2148.88 1213.45 L2148.3 1213.45 L2147.71 1213.45 L2147.12 1213.45 L2146.54 1213.45 L2145.95 1213.45 L2145.36 1213.45 L2144.78 1213.45 L2144.19 1213.45 L2143.6 1213.45 L2143.02 1213.45 L2142.43 1213.45 L2141.84 1213.45 L2141.26 1213.45 L2140.67 1213.45 L2140.09 1213.45 L2139.5 1213.45 L2138.91 1213.45 L2138.33 1213.45 L2137.74 1213.45 L2137.15 1213.45 L2136.57 1213.45 L2135.98 1213.45 L2135.39 1213.45 L2134.81 1213.45 L2134.22 1213.45 L2133.63 1213.45 L2133.05 1213.45 L2132.46 1213.45 L2131.88 1213.45 L2131.29 1213.45 L2130.7 1213.45 L2130.12 1213.45 L2129.53 1213.45 L2128.94 1213.45 L2128.36 1213.45 L2127.77 1213.45 L2127.18 1213.45 L2126.6 1213.45 L2126.01 1213.45 L2125.42 1213.45 L2124.84 1213.45 L2124.25 1213.45 L2123.67 1213.45 L2123.08 1213.45 L2122.49 1213.45 L2121.91 1213.45 L2121.32 1213.45 L2120.73 1213.45 L2120.15 1213.45 L2119.56 1213.45 L2118.97 1213.45 L2118.39 1213.45 L2117.8 1213.45 L2117.22 1213.45 L2116.63 1213.45 L2116.04 1213.45 L2115.46 1213.45 L2114.87 1213.45 L2114.28 1213.45 L2113.7 1213.45 L2113.11 1213.45 L2112.52 1213.45 L2111.94 1213.45 L2111.35 1213.45 L2110.76 1213.45 L2110.18 1213.45 L2109.59 1213.45 L2109.01 1213.45 L2108.42 1213.45 L2107.83 1213.45 L2107.25 1213.45 L2106.66 1213.45 L2106.07 1213.45 L2105.49 1213.45 L2104.9 1213.45 L2104.31 1213.45 L2103.73 1213.45 L2103.14 1213.45 L2102.55 1213.45 L2101.97 1213.45 L2101.38 1213.45 L2100.8 1213.45 L2100.21 1213.45 L2099.62 1213.45 L2099.04 1213.45 L2098.45 1213.45 L2097.86 1213.45 L2097.28 1213.45 L2096.69 1213.45 L2096.1 1213.45 L2095.52 1213.45 L2094.93 1213.45 L2094.35 1213.45 L2093.76 1213.45 L2093.17 1213.45 L2092.59 1213.45 L2092 1213.45 L2091.41 1213.45 L2090.83 1213.45 L2090.24 1213.45 L2089.65 1213.45 L2089.07 1213.45 L2088.48 1213.45 L2087.89 1213.45 L2087.31 1213.45 L2086.72 1213.45 L2086.14 1213.45 L2085.55 1213.45 L2084.96 1213.45 L2084.38 1213.45 L2083.79 1213.45 L2083.2 1213.45 L2082.62 1213.45 L2082.03 1213.45 L2081.44 1213.45 L2080.86 1213.45 L2080.27 1213.45 L2079.68 1213.45 L2079.1 1213.45 L2078.51 1213.45 L2077.93 1213.45 L2077.34 1213.45 L2076.75 1213.45 L2076.17 1213.45 L2075.58 1213.45 L2074.99 1213.45 L2074.41 1213.45 L2073.82 1213.45 L2073.23 1213.45 L2072.65 1213.45 L2072.06 1213.45 L2071.48 1213.45 L2070.89 1213.45 L2070.3 1213.45 L2069.72 1213.45 L2069.13 1213.45 L2068.54 1213.45 L2067.96 1213.45 L2067.37 1213.45 L2066.78 1213.45 L2066.2 1213.45 L2065.61 1213.45 L2065.02 1213.45 L2064.44 1213.45 L2063.85 1213.45 L2063.27 1213.45 L2062.68 1213.45 L2062.09 1213.45 L2061.51 1213.45 L2060.92 1213.45 L2060.33 1213.45 L2059.75 1213.45 L2059.16 1213.45 L2058.57 1213.45 L2057.99 1213.45 L2057.4 1213.45 L2056.81 1213.45 L2056.23 1213.45 L2055.64 1213.45 L2055.06 1213.45 L2054.47 1213.45 L2053.88 1213.45 L2053.3 1213.45 L2052.71 1213.45 L2052.12 1213.45 L2051.54 1213.45 L2050.95 1213.45 L2050.36 1213.45 L2049.78 1213.45 L2049.19 1213.45 L2048.6 1213.45 L2048.02 1213.45 L2047.43 1213.45 L2046.85 1213.45 L2046.26 1213.45 L2045.67 1213.45 L2045.09 1213.45 L2044.5 1213.45 L2043.91 1213.45 L2043.33 1213.45 L2042.74 1213.45 L2042.15 1213.45 L2041.57 1213.45 L2040.98 1213.45 L2040.4 1213.45 L2039.81 1213.45 L2039.22 1213.45 L2038.64 1213.45 L2038.05 1213.45 L2037.46 1213.45 L2036.88 1213.45 L2036.29 1213.45 L2035.7 1213.45 L2035.12 1213.45 L2034.53 1213.45 L2033.94 1213.45 L2033.36 1213.45 L2032.77 1213.45 L2032.19 1213.45 L2031.6 1213.45 L2031.01 1213.45 L2030.43 1213.45 L2029.84 1213.45 L2029.25 1213.45 L2028.67 1213.45 L2028.08 1213.45 L2027.49 1213.45 L2026.91 1213.45 L2026.32 1213.45 L2025.73 1213.45 L2025.15 1213.45 L2024.56 1213.45 L2023.98 1213.45 L2023.39 1213.45 L2022.8 1213.45 L2022.22 1213.45 L2021.63 1213.45 L2021.04 1213.45 L2020.46 1213.45 L2019.87 1213.45 L2019.28 1213.45 L2018.7 1213.45 L2018.11 1213.45 L2017.53 1213.45 L2016.94 1213.45 L2016.35 1213.45 L2015.77 1213.45 L2015.18 1213.45 L2014.59 1213.45 L2014.01 1213.45 L2013.42 1213.45 L2012.83 1213.45 L2012.25 1213.45 L2011.66 1213.45 L2011.07 1213.45 L2010.49 1213.45 L2009.9 1213.45 L2009.32 1213.45 L2008.73 1213.45 L2008.14 1213.45 L2007.56 1213.45 L2006.97 1213.45 L2006.38 1213.45 L2005.8 1213.45 L2005.21 1213.45 L2004.62 1213.45 L2004.04 1213.45 L2003.45 1213.45 L2002.86 1213.45 L2002.28 1213.45 L2001.69 1213.45 L2001.11 1213.45 L2000.52 1213.45 L1999.93 1213.45 L1999.35 1213.45 L1998.76 1213.45 L1998.17 1213.45 L1997.59 1213.45 L1997 1213.45 L1996.41 1213.45 L1995.83 1213.45 L1995.24 1213.45 L1994.65 1213.45 L1994.07 1213.45 L1993.48 1213.45 L1992.9 1213.45 L1992.31 1213.45 L1991.72 1213.45 L1991.14 1213.45 L1990.55 1213.45 L1989.96 1213.45 L1989.38 1213.45 L1988.79 1213.45 L1988.2 1213.45 L1987.62 1213.45 L1987.03 1213.45 L1986.45 1213.45 L1985.86 1213.45 L1985.27 1213.45 L1984.69 1213.45 L1984.1 1213.45 L1983.51 1213.45 L1982.93 1213.45 L1982.34 1213.45 L1981.75 1213.45 L1981.17 1213.45 L1980.58 1213.45 L1979.99 1213.45 L1979.41 1213.45 L1978.82 1213.45 L1978.24 1213.45 L1977.65 1213.45 L1977.06 1213.45 L1976.48 1213.45 L1975.89 1213.45 L1975.3 1213.45 L1974.72 1213.45 L1974.13 1213.45 L1973.54 1213.45 L1972.96 1213.45 L1972.37 1213.45 L1971.78 1213.45 L1971.2 1213.45 L1970.61 1213.45 L1970.03 1213.45 L1969.44 1213.45 L1968.85 1213.45 L1968.27 1213.45 L1967.68 1213.45 L1967.09 1213.45 L1966.51 1213.45 L1965.92 1213.45 L1965.33 1213.45 L1964.75 1213.45 L1964.16 1213.45 L1963.58 1213.45 L1962.99 1213.45 L1962.4 1213.45 L1961.82 1213.45 L1961.23 1213.45 L1960.64 1213.45 L1960.06 1213.45 L1959.47 1213.45 L1958.88 1213.45 L1958.3 1213.45 L1957.71 1213.45 L1957.12 1213.45 L1956.54 1213.45 L1955.95 1213.45 L1955.37 1213.45 L1954.78 1213.45 L1954.19 1213.45 L1953.61 1213.45 L1953.02 1213.45 L1952.43 1213.45 L1951.85 1213.45 L1951.26 1213.45 L1950.67 1213.45 L1950.09 1213.45 L1949.5 1213.45 L1948.91 1213.45 L1948.33 1213.45 L1947.74 1213.45 L1947.16 1213.45 L1946.57 1213.45 L1945.98 1213.45 L1945.4 1213.45 L1944.81 1213.45 L1944.22 1213.45 L1943.64 1213.45 L1943.05 1213.45 L1942.46 1213.45 L1941.88 1213.45 L1941.29 1213.45 L1940.71 1213.45 L1940.12 1213.45 L1939.53 1213.45 L1938.95 1213.45 L1938.36 1213.45 L1937.77 1213.45 L1937.19 1213.45 L1936.6 1213.45 L1936.01 1213.45 L1935.43 1213.45 L1934.84 1213.45 L1934.25 1213.45 L1933.67 1213.45 L1933.08 1213.45 L1932.5 1213.45 L1931.91 1213.45 L1931.32 1213.45 L1930.74 1213.45 L1930.15 1213.45 L1929.56 1213.45 L1928.98 1213.45 L1928.39 1213.45 L1927.8 1213.45 L1927.22 1213.45 L1926.63 1213.45 L1926.04 1213.45 L1925.46 1213.45 L1924.87 1213.45 L1924.29 1213.45 L1923.7 1213.45 L1923.11 1213.45 L1922.53 1213.45 L1921.94 1213.45 L1921.35 1213.45 L1920.77 1213.45 L1920.18 1213.45 L1919.59 1213.45 L1919.01 1213.45 L1918.42 1213.45 L1917.83 1213.45 L1917.25 1213.45 L1916.66 1213.45 L1916.08 1213.45 L1915.49 1213.45 L1914.9 1213.45 L1914.32 1213.45 L1913.73 1213.45 L1913.14 1213.45 L1912.56 1213.45 L1911.97 1213.45 L1911.38 1213.45 L1910.8 1213.45 L1910.21 1213.45 L1909.63 1213.45 L1909.04 1213.45 L1908.45 1213.45 L1907.87 1213.45 L1907.28 1213.45 L1906.69 1213.45 L1906.11 1213.45 L1905.52 1213.45 L1904.93 1213.45 L1904.35 1213.45 L1903.76 1213.45 L1903.17 1213.45 L1902.59 1213.45 L1902 1213.45 L1901.42 1213.45 L1900.83 1213.45 L1900.24 1213.45 L1899.66 1213.45 L1899.07 1213.45 L1898.48 1213.45 L1897.9 1213.45 L1897.31 1213.45 L1896.72 1213.45 L1896.14 1213.45 L1895.55 1213.45 L1894.96 1213.45 L1894.38 1213.45 L1893.79 1213.45 L1893.21 1213.45 L1892.62 1213.45 L1892.03 1213.45 L1891.45 1213.45 L1890.86 1213.45 L1890.27 1213.45 L1889.69 1213.45 L1889.1 1213.45 L1888.51 1213.45 L1887.93 1213.45 L1887.34 1213.45 L1886.76 1213.45 L1886.17 1213.45 L1885.58 1213.45 L1885 1213.45 L1884.41 1213.45 L1883.82 1213.45 L1883.24 1213.45 L1882.65 1213.45 L1882.06 1213.45 L1881.48 1213.45 L1880.89 1213.45 L1880.3 1213.45 L1879.72 1213.45 L1879.13 1213.45 L1878.55 1213.45 L1877.96 1213.45 L1877.37 1213.45 L1876.79 1213.45 L1876.2 1213.45 L1875.61 1213.45 L1875.03 1213.45 L1874.44 1213.45 L1873.85 1213.45 L1873.27 1213.45 L1872.68 1213.45 L1872.09 1213.45 L1871.51 1213.45 L1870.92 1213.45 L1870.34 1213.45 L1869.75 1213.45 L1869.16 1213.45 L1868.58 1213.45 L1867.99 1213.45 L1867.4 1213.45 L1866.82 1213.45 L1866.23 1213.45 L1865.64 1213.45 L1865.06 1213.45 L1864.47 1213.45 L1863.88 1213.45 L1863.3 1213.45 L1862.71 1213.45 L1862.13 1213.45 L1861.54 1213.45 L1860.95 1213.45 L1860.37 1213.45 L1859.78 1213.45 L1859.19 1213.45 L1858.61 1213.45 L1858.02 1213.45 L1857.43 1213.45 L1856.85 1213.45 L1856.26 1213.45 L1855.68 1213.45 L1855.09 1213.45 L1854.5 1213.45 L1853.92 1213.45 L1853.33 1213.45 L1852.74 1213.45 L1852.16 1213.45 L1851.57 1213.45 L1850.98 1213.45 L1850.4 1213.45 L1849.81 1213.45 L1849.22 1213.45 L1848.64 1213.45 L1848.05 1213.45 L1847.47 1213.45 L1846.88 1213.45 L1846.29 1213.45 L1845.71 1213.45 L1845.12 1213.45 L1844.53 1213.45 L1843.95 1213.45 L1843.36 1213.45 L1842.77 1213.45 L1842.19 1213.45 L1841.6 1213.45 L1841.01 1213.45 L1840.43 1213.45 L1839.84 1213.45 L1839.26 1213.45 L1838.67 1213.45 L1838.08 1213.45 L1837.5 1213.45 L1836.91 1213.45 L1836.32 1213.45 L1835.74 1213.45 L1835.15 1213.45 L1834.56 1213.45 L1833.98 1213.45 L1833.39 1213.45 L1832.81 1213.45 L1832.22 1213.45 L1831.63 1213.45 L1831.05 1213.45 L1830.46 1213.45 L1829.87 1213.45 L1829.29 1213.45 L1828.7 1213.45 L1828.11 1213.45 L1827.53 1213.45 L1826.94 1213.45 L1826.35 1213.45 L1825.77 1213.45 L1825.18 1213.45 L1824.6 1213.45 L1824.01 1213.45 L1823.42 1213.45 L1822.84 1213.45 L1822.25 1213.45 L1821.66 1213.45 L1821.08 1213.45 L1820.49 1213.45 L1819.9 1213.45 L1819.32 1213.45 L1818.73 1213.45 L1818.14 1213.45 L1817.56 1213.45 L1816.97 1213.45 L1816.39 1213.45 L1815.8 1213.45 L1815.21 1213.45 L1814.63 1213.45 L1814.04 1213.45 L1813.45 1213.45 L1812.87 1213.45 L1812.28 1213.45 L1811.69 1213.45 L1811.11 1213.45 L1810.52 1213.45 L1809.94 1213.45 L1809.35 1213.45 L1808.76 1213.45 L1808.18 1213.45 L1807.59 1213.45 L1807 1213.45 L1806.42 1213.45 L1805.83 1213.45 L1805.24 1213.45 L1804.66 1213.45 L1804.07 1213.45 L1803.48 1213.45 L1802.9 1213.45 L1802.31 1213.45 L1801.73 1213.45 L1801.14 1213.45 L1800.55 1213.45 L1799.97 1213.45 L1799.38 1213.45 L1798.79 1213.45 L1798.21 1213.45 L1797.62 1213.45 L1797.03 1213.45 L1796.45 1213.45 L1795.86 1213.45 L1795.27 1213.45 L1794.69 1213.45 L1794.1 1213.45 L1793.52 1213.45 L1792.93 1213.45 L1792.34 1213.45 L1791.76 1213.45 L1791.17 1213.45 L1790.58 1213.45 L1790 1213.45 L1789.41 1213.45 L1788.82 1213.45 L1788.24 1213.45 L1787.65 1213.45 L1787.06 1213.45 L1786.48 1213.45 L1785.89 1213.45 L1785.31 1213.45 L1784.72 1213.45 L1784.13 1213.45 L1783.55 1213.45 L1782.96 1213.45 L1782.37 1213.45 L1781.79 1213.45 L1781.2 1213.45 L1780.61 1213.45 L1780.03 1213.45 L1779.44 1213.45 L1778.86 1213.45 L1778.27 1213.45 L1777.68 1213.45 L1777.1 1213.45 L1776.51 1213.45 L1775.92 1213.45 L1775.34 1213.45 L1774.75 1213.45 L1774.16 1213.45 L1773.58 1213.45 L1772.99 1213.45 L1772.4 1213.45 L1771.82 1213.45 L1771.23 1213.45 L1770.65 1213.45 L1770.06 1213.45 L1769.47 1213.45 L1768.89 1213.45 L1768.3 1213.45 L1767.71 1213.45 L1767.13 1213.45 L1766.54 1213.45 L1765.95 1213.45 L1765.37 1213.45 L1764.78 1213.45 L1764.19 1213.45 L1763.61 1213.45 L1763.02 1213.45 L1762.44 1213.45 L1761.85 1213.45 L1761.26 1213.45 L1760.68 1213.45 L1760.09 1213.45 L1759.5 1213.45 L1758.92 1213.45 L1758.33 1213.45 L1757.74 1213.45 L1757.16 1213.45 L1756.57 1213.45 L1755.99 1213.45 L1755.4 1213.45 L1754.81 1213.45 L1754.23 1213.45 L1753.64 1213.45 L1753.05 1213.45 L1752.47 1213.45 L1751.88 1213.45 L1751.29 1213.45 L1750.71 1213.45 L1750.12 1213.45 L1749.53 1213.45 L1748.95 1213.45 L1748.36 1213.45 L1747.78 1213.45 L1747.19 1213.45 L1746.6 1213.45 L1746.02 1213.45 L1745.43 1213.45 L1744.84 1213.45 L1744.26 1213.45 L1743.67 1213.45 L1743.08 1213.45 L1742.5 1213.45 L1741.91 1213.45 L1741.32 1213.45 L1740.74 1213.45 L1740.15 1213.45 L1739.57 1213.45 L1738.98 1213.45 L1738.39 1213.45 L1737.81 1213.45 L1737.22 1213.45 L1736.63 1213.45 L1736.05 1213.45 L1735.46 1213.45 L1734.87 1213.45 L1734.29 1213.45 L1733.7 1213.45 L1733.11 1213.45 L1732.53 1213.45 L1731.94 1213.45 L1731.36 1213.45 L1730.77 1213.45 L1730.18 1213.45 L1729.6 1213.45 L1729.01 1213.45 L1728.42 1213.45 L1727.84 1213.45 L1727.25 1213.45 L1726.66 1213.45 L1726.08 1213.45 L1725.49 1213.45 L1724.91 1213.45 L1724.32 1213.45 L1723.73 1213.45 L1723.15 1213.45 L1722.56 1213.45 L1721.97 1213.45 L1721.39 1213.45 L1720.8 1213.45 L1720.21 1213.45 L1719.63 1213.45 L1719.04 1213.45 L1718.45 1213.45 L1717.87 1213.45 L1717.28 1213.45 L1716.7 1213.45 L1716.11 1213.45 L1715.52 1213.45 L1714.94 1213.45 L1714.35 1213.45 L1713.76 1213.45 L1713.18 1213.45 L1712.59 1213.45 L1712 1213.45 L1711.42 1213.45 L1710.83 1213.45 L1710.24 1213.45 L1709.66 1213.45 L1709.07 1213.45 L1708.49 1213.45 L1707.9 1213.45 L1707.31 1213.45 L1706.73 1213.45 L1706.14 1213.45 L1705.55 1213.45 L1704.97 1213.45 L1704.38 1213.45 L1703.79 1213.45 L1703.21 1213.45 L1702.62 1213.45 L1702.04 1213.45 L1701.45 1213.45 L1700.86 1213.45 L1700.28 1213.45 L1699.69 1213.45 L1699.1 1213.45 L1698.52 1213.45 L1697.93 1213.45 L1697.34 1213.45 L1696.76 1213.45 L1696.17 1213.45 L1695.58 1213.45 L1695 1213.45 L1694.41 1213.45 L1693.83 1213.45 L1693.24 1213.45 L1692.65 1213.45 L1692.07 1213.45 L1691.48 1213.45 L1690.89 1213.45 L1690.31 1213.45 L1689.72 1213.45 L1689.13 1213.45 L1688.55 1213.45 L1687.96 1213.45 L1687.37 1213.45 L1686.79 1213.45 L1686.2 1213.45 L1685.62 1213.45 L1685.03 1213.45 L1684.44 1213.45 L1683.86 1213.45 L1683.27 1213.45 L1682.68 1213.45 L1682.1 1213.45 L1681.51 1213.45 L1680.92 1213.45 L1680.34 1213.45 L1679.75 1213.45 L1679.17 1213.45 L1678.58 1213.45 L1677.99 1213.45 L1677.41 1213.45 L1676.82 1213.45 L1676.23 1213.45 L1675.65 1213.45 L1675.06 1213.45 L1674.47 1213.45 L1673.89 1213.45 L1673.3 1213.45 L1672.71 1213.45 L1672.13 1213.45 L1671.54 1213.45 L1670.96 1213.45 L1670.37 1213.45 L1669.78 1213.45 L1669.2 1213.45 L1668.61 1213.45 L1668.02 1213.45 L1667.44 1213.45 L1666.85 1213.45 L1666.26 1213.45 L1665.68 1213.45 L1665.09 1213.45 L1664.5 1213.45 L1663.92 1213.45 L1663.33 1213.45 L1662.75 1213.45 L1662.16 1213.45 L1661.57 1213.45 L1660.99 1213.45 L1660.4 1213.45 L1659.81 1213.45 L1659.23 1213.45 L1658.64 1213.45 L1658.05 1213.45 L1657.47 1213.45 L1656.88 1213.45 L1656.29 1213.45 L1655.71 1213.45 L1655.12 1213.45 L1654.54 1213.45 L1653.95 1213.45 L1653.36 1213.45 L1652.78 1213.45 L1652.19 1213.45 L1651.6 1213.45 L1651.02 1213.45 L1650.43 1213.45 L1649.84 1213.45 L1649.26 1213.45 L1648.67 1213.45 L1648.09 1213.45 L1647.5 1213.45 L1646.91 1213.45 L1646.33 1213.45 L1645.74 1213.45 L1645.15 1213.45 L1644.57 1213.45 L1643.98 1213.45 L1643.39 1213.45 L1642.81 1213.45 L1642.22 1213.45 L1641.63 1213.45 L1641.05 1213.45 L1640.46 1213.45 L1639.88 1213.45 L1639.29 1213.45 L1638.7 1213.45 L1638.12 1213.45 L1637.53 1213.45 L1636.94 1213.45 L1636.36 1213.45 L1635.77 1213.45 L1635.18 1213.45 L1634.6 1213.45 L1634.01 1213.45 L1633.42 1213.45 L1632.84 1213.45 L1632.25 1213.45 L1631.67 1213.45 L1631.08 1213.45 L1630.49 1213.45 L1629.91 1213.45 L1629.32 1213.45 L1628.73 1213.45 L1628.15 1213.45 L1627.56 1213.45 L1626.97 1213.45 L1626.39 1213.45 L1625.8 1213.45 L1625.22 1213.45 L1624.63 1213.45 L1624.04 1213.45 L1623.46 1213.45 L1622.87 1213.45 L1622.28 1213.45 L1621.7 1213.45 L1621.11 1213.45 L1620.52 1213.45 L1619.94 1213.45 L1619.35 1213.45 L1618.76 1213.45 L1618.18 1213.45 L1617.59 1213.45 L1617.01 1213.45 L1616.42 1213.45 L1615.83 1213.45 L1615.25 1213.45 L1614.66 1213.45 L1614.07 1213.45 L1613.49 1213.45 L1612.9 1213.45 L1612.31 1213.45 L1611.73 1213.45 L1611.14 1213.45 L1610.55 1213.45 L1609.97 1213.45 L1609.38 1213.45 L1608.8 1213.45 L1608.21 1213.45 L1607.62 1213.45 L1607.04 1213.45 L1606.45 1213.45 L1605.86 1213.45 L1605.28 1213.45 L1604.69 1213.45 L1604.1 1213.45 L1603.52 1213.45 L1602.93 1213.45 L1602.34 1213.45 L1601.76 1213.45 L1601.17 1213.45 L1600.59 1213.45 L1600 1213.45 L1599.41 1213.45 L1598.83 1213.45 L1598.24 1213.45 L1597.65 1213.45 L1597.07 1213.45 L1596.48 1213.45 L1595.89 1213.45 L1595.31 1213.45 L1594.72 1213.45 L1594.14 1213.45 L1593.55 1213.45 L1592.96 1213.45 L1592.38 1213.45 L1591.79 1213.45 L1591.2 1213.45 L1590.62 1213.45 L1590.03 1213.45 L1589.44 1213.45 L1588.86 1213.45 L1588.27 1213.45 L1587.68 1213.45 L1587.1 1213.45 L1586.51 1213.45 L1585.93 1213.45 L1585.34 1213.45 L1584.75 1213.45 L1584.17 1213.45 L1583.58 1213.45 L1582.99 1213.45 L1582.41 1213.45 L1581.82 1213.45 L1581.23 1213.45 L1580.65 1213.45 L1580.06 1213.45 L1579.47 1213.45 L1578.89 1213.45 L1578.3 1213.45 L1577.72 1213.45 L1577.13 1213.45 L1576.54 1213.45 L1575.96 1213.45 L1575.37 1213.45 L1574.78 1213.45 L1574.2 1213.45 L1573.61 1213.45 L1573.02 1213.45 L1572.44 1213.45 L1571.85 1213.45 L1571.27 1213.45 L1570.68 1213.45 L1570.09 1213.45 L1569.51 1213.45 L1568.92 1213.45 L1568.33 1213.45 L1567.75 1213.45 L1567.16 1213.45 L1566.57 1213.45 L1565.99 1213.45 L1565.4 1213.45 L1564.81 1213.45 L1564.23 1213.45 L1563.64 1213.45 L1563.06 1213.45 L1562.47 1213.45 L1561.88 1213.45 L1561.3 1213.45 L1560.71 1213.45 L1560.12 1213.45 L1559.54 1213.45 L1558.95 1213.45 L1558.36 1213.45 L1557.78 1213.45 L1557.19 1213.45 L1556.6 1213.45 L1556.02 1213.45 L1555.43 1213.45 L1554.85 1213.45 L1554.26 1213.45 L1553.67 1213.45 L1553.09 1213.45 L1552.5 1213.45 L1551.91 1213.45 L1551.33 1213.45 L1550.74 1213.45 L1550.15 1213.45 L1549.57 1213.45 L1548.98 1213.45 L1548.4 1213.45 L1547.81 1213.45 L1547.22 1213.45 L1546.64 1213.45 L1546.05 1213.45 L1545.46 1213.45 L1544.88 1213.45 L1544.29 1213.45 L1543.7 1213.45 L1543.12 1213.45 L1542.53 1213.45 L1541.94 1213.45 L1541.36 1213.45 L1540.77 1213.45 L1540.19 1213.45 L1539.6 1213.45 L1539.01 1213.45 L1538.43 1213.45 L1537.84 1213.45 L1537.25 1213.45 L1536.67 1213.45 L1536.08 1213.45 L1535.49 1213.45 L1534.91 1213.45 L1534.32 1213.45 L1533.73 1213.45 L1533.15 1213.45 L1532.56 1213.45 L1531.98 1213.45 L1531.39 1213.45 L1530.8 1213.45 L1530.22 1213.45 L1529.63 1213.45 L1529.04 1213.45 L1528.46 1213.45 L1527.87 1213.45 L1527.28 1213.45 L1526.7 1213.45 L1526.11 1213.45 L1525.52 1213.45 L1524.94 1213.45 L1524.35 1213.45 L1523.77 1213.45 L1523.18 1213.45 L1522.59 1213.45 L1522.01 1213.45 L1521.42 1213.45 L1520.83 1213.45 L1520.25 1213.45 L1519.66 1213.45 L1519.07 1213.45 L1518.49 1213.45 L1517.9 1213.45 L1517.32 1213.45 L1516.73 1213.45 L1516.14 1213.45 L1515.56 1213.45 L1514.97 1213.45 L1514.38 1213.45 L1513.8 1213.45 L1513.21 1213.45 L1512.62 1213.45 L1512.04 1213.45 L1511.45 1213.45 L1510.86 1213.45 L1510.28 1213.45 L1509.69 1213.45 L1509.11 1213.45 L1508.52 1213.45 L1507.93 1213.45 L1507.35 1213.45 L1506.76 1213.45 L1506.17 1213.45 L1505.59 1213.45 L1505 1213.45 L1504.41 1213.45 L1503.83 1213.45 L1503.24 1213.45 L1502.65 1213.45 L1502.07 1213.45 L1501.48 1213.45 L1500.9 1213.45 L1500.31 1213.45 L1499.72 1213.45 L1499.14 1213.45 L1498.55 1213.45 L1497.96 1213.45 L1497.38 1213.45 L1496.79 1213.45 L1496.2 1213.45 L1495.62 1213.45 L1495.03 1213.45 L1494.45 1213.45 L1493.86 1213.45 L1493.27 1213.45 L1492.69 1213.45 L1492.1 1213.45 L1491.51 1213.45 L1490.93 1213.45 L1490.34 1213.45 L1489.75 1213.45 L1489.17 1213.45 L1488.58 1213.45 L1487.99 1213.45 L1487.41 1213.45 L1486.82 1213.45 L1486.24 1213.45 L1485.65 1213.45 L1485.06 1213.45 L1484.48 1213.45 L1483.89 1213.45 L1483.3 1213.45 L1482.72 1213.45 L1482.13 1213.45 L1481.54 1213.45 L1480.96 1213.45 L1480.37 1213.45 L1479.78 1213.45 L1479.2 1213.45 L1478.61 1213.45 L1478.03 1213.45 L1477.44 1213.45 L1476.85 1213.45 L1476.27 1213.45 L1475.68 1213.45 L1475.09 1213.45 L1474.51 1213.45 L1473.92 1213.45 L1473.33 1213.45 L1472.75 1213.45 L1472.16 1213.45 L1471.57 1213.45 L1470.99 1213.45 L1470.4 1213.45 L1469.82 1213.45 L1469.23 1213.45 L1468.64 1213.45 L1468.06 1213.45 L1467.47 1213.45 L1466.88 1213.45 L1466.3 1213.45 L1465.71 1213.45 L1465.12 1213.45 L1464.54 1213.45 L1463.95 1213.45 L1463.37 1213.45 L1462.78 1213.45 L1462.19 1213.45 L1461.61 1213.45 L1461.02 1213.45 L1460.43 1213.45 L1459.85 1213.45 L1459.26 1213.45 L1458.67 1213.45 L1458.09 1213.45 L1457.5 1213.45 L1456.91 1213.45 L1456.33 1213.45 L1455.74 1213.45 L1455.16 1213.45 L1454.57 1213.45 L1453.98 1213.45 L1453.4 1213.45 L1452.81 1213.45 L1452.22 1213.45 L1451.64 1213.45 L1451.05 1213.45 L1450.46 1213.45 L1449.88 1213.45 L1449.29 1213.45 L1448.7 1213.45 L1448.12 1213.45 L1447.53 1213.45 L1446.95 1213.45 L1446.36 1213.45 L1445.77 1213.45 L1445.19 1213.45 L1444.6 1213.45 L1444.01 1213.45 L1443.43 1213.45 L1442.84 1213.45 L1442.25 1213.45 L1441.67 1213.45 L1441.08 1213.45 L1440.5 1213.45 L1439.91 1213.45 L1439.32 1213.45 L1438.74 1213.45 L1438.15 1213.45 L1437.56 1213.45 L1436.98 1213.45 L1436.39 1213.45 L1435.8 1213.45 L1435.22 1213.45 L1434.63 1213.45 L1434.04 1213.45 L1433.46 1213.45 L1432.87 1213.45 L1432.29 1213.45 L1431.7 1213.45 L1431.11 1213.45 L1430.53 1213.45 L1429.94 1213.45 L1429.35 1213.45 L1428.77 1213.45 L1428.18 1213.45 L1427.59 1213.45 L1427.01 1213.45 L1426.42 1213.45 L1425.83 1213.45 L1425.25 1213.45 L1424.66 1213.45 L1424.08 1213.45 L1423.49 1213.45 L1422.9 1213.45 L1422.32 1213.45 L1421.73 1213.45 L1421.14 1213.45 L1420.56 1213.45 L1419.97 1213.45 L1419.38 1213.45 L1418.8 1213.45 L1418.21 1213.45 L1417.63 1213.45 L1417.04 1213.45 L1416.45 1213.45 L1415.87 1213.45 L1415.28 1213.45 L1414.69 1213.45 L1414.11 1213.45 L1413.52 1213.45 L1412.93 1213.45 L1412.35 1213.45 L1411.76 1213.45 L1411.17 1213.45 L1410.59 1213.45 L1410 1213.45 L1409.42 1213.45 L1408.83 1213.45 L1408.24 1213.45 L1407.66 1213.45 L1407.07 1213.45 L1406.48 1213.45 L1405.9 1213.45 L1405.31 1213.45 L1404.72 1213.45 L1404.14 1213.45 L1403.55 1213.45 L1402.96 1213.45 L1402.38 1213.45 L1401.79 1213.45 L1401.21 1213.45 L1400.62 1213.45 L1400.03 1213.45 L1399.45 1213.45 L1398.86 1213.45 L1398.27 1213.45 L1397.69 1213.45 L1397.1 1213.45 L1396.51 1213.45 L1395.93 1213.45 L1395.34 1213.45 L1394.75 1213.45 L1394.17 1213.45 L1393.58 1213.45 L1393 1213.45 L1392.41 1213.45 L1391.82 1213.45 L1391.24 1213.45 L1390.65 1213.45 L1390.06 1213.45 L1389.48 1213.45 L1388.89 1213.45 L1388.3 1213.45 L1387.72 1213.45 L1387.13 1213.45 L1386.55 1213.45 L1385.96 1213.45 L1385.37 1213.45 L1384.79 1213.45 L1384.2 1213.45 L1383.61 1213.45 L1383.03 1213.45 L1382.44 1213.45 L1381.85 1213.45 L1381.27 1213.45 L1380.68 1213.45 L1380.09 1213.45 L1379.51 1213.45 L1378.92 1213.45 L1378.34 1213.45 L1377.75 1213.45 L1377.16 1213.45 L1376.58 1213.45 L1375.99 1213.45 L1375.4 1213.45 L1374.82 1213.45 L1374.23 1213.45 L1373.64 1213.45 L1373.06 1213.45 L1372.47 1213.45 L1371.88 1213.45 L1371.3 1213.45 L1370.71 1213.45 L1370.13 1213.45 L1369.54 1213.45 L1368.95 1213.45 L1368.37 1213.45 L1367.78 1213.45 L1367.19 1213.45 L1366.61 1213.45 L1366.02 1213.45 L1365.43 1213.45 L1364.85 1213.45 L1364.26 1213.45 L1363.68 1213.45 L1363.09 1213.45 L1362.5 1213.45 L1361.92 1213.45 L1361.33 1213.45 L1360.74 1213.45 L1360.16 1213.45 L1359.57 1213.45 L1358.98 1213.45 L1358.4 1213.45 L1357.81 1213.45 L1357.22 1213.45 L1356.64 1213.45 L1356.05 1213.45 L1355.47 1213.45 L1354.88 1213.45 L1354.29 1213.45 L1353.71 1213.45 L1353.12 1213.45 L1352.53 1213.45 L1351.95 1213.45 L1351.36 1213.45 L1350.77 1213.45 L1350.19 1213.45 L1349.6 1213.45 L1349.01 1213.45 L1348.43 1213.45 L1347.84 1213.45 L1347.26 1213.45 L1346.67 1213.45 L1346.08 1213.45 L1345.5 1213.45 L1344.91 1213.45 L1344.32 1213.45 L1343.74 1213.45 L1343.15 1213.45 L1342.56 1213.45 L1341.98 1213.45 L1341.39 1213.45 L1340.8 1213.45 L1340.22 1213.45 L1339.63 1213.45 L1339.05 1213.45 L1338.46 1213.45 L1337.87 1213.45 L1337.29 1213.45 L1336.7 1213.45 L1336.11 1213.45 L1335.53 1213.45 L1334.94 1213.45 L1334.35 1213.45 L1333.77 1213.45 L1333.18 1213.45 L1332.6 1213.45 L1332.01 1213.45 L1331.42 1213.45 L1330.84 1213.45 L1330.25 1213.45 L1329.66 1213.45 L1329.08 1213.45 L1328.49 1213.45 L1327.9 1213.45 L1327.32 1213.45 L1326.73 1213.45 L1326.14 1213.45 L1325.56 1213.45 L1324.97 1213.45 L1324.39 1213.45 L1323.8 1213.45 L1323.21 1213.45 L1322.63 1213.45 L1322.04 1213.45 L1321.45 1213.45 L1320.87 1213.45 L1320.28 1213.45 L1319.69 1213.45 L1319.11 1213.45 L1318.52 1213.45 L1317.93 1213.45 L1317.35 1213.45 L1316.76 1213.45 L1316.18 1213.45 L1315.59 1213.45 L1315 1213.45 L1314.42 1213.45 L1313.83 1213.45 L1313.24 1213.45 L1312.66 1213.45 L1312.07 1213.45 L1311.48 1213.45 L1310.9 1213.45 L1310.31 1213.45 L1309.73 1213.45 L1309.14 1213.45 L1308.55 1213.45 L1307.97 1213.45 L1307.38 1213.45 L1306.79 1213.45 L1306.21 1213.45 L1305.62 1213.45 L1305.03 1213.45 L1304.45 1213.45 L1303.86 1213.45 L1303.27 1213.45 L1302.69 1213.45 L1302.1 1213.45 L1301.52 1213.45 L1300.93 1213.45 L1300.34 1213.45 L1299.76 1213.45 L1299.17 1213.45 L1298.58 1213.45 L1298 1213.45 L1297.41 1213.45 L1296.82 1213.45 L1296.24 1213.45 L1295.65 1213.45 L1295.06 1213.45 L1294.48 1213.45 L1293.89 1213.45 L1293.31 1213.45 L1292.72 1213.45 L1292.13 1213.45 L1291.55 1213.45 L1290.96 1213.45 L1290.37 1213.45 L1289.79 1213.45 L1289.2 1213.45 L1288.61 1213.45 L1288.03 1213.45 L1287.44 1213.45 L1286.86 1213.45 L1286.27 1213.45 L1285.68 1213.45 L1285.1 1213.45 L1284.51 1213.45 L1283.92 1213.45 L1283.34 1213.45 L1282.75 1213.45 L1282.16 1213.45 L1281.58 1213.45 L1280.99 1213.45 L1280.4 1213.45 L1279.82 1213.45 L1279.23 1213.45 L1278.65 1213.45 L1278.06 1213.45 L1277.47 1213.45 L1276.89 1213.45 L1276.3 1213.45 L1275.71 1213.45 L1275.13 1213.45 L1274.54 1213.45 L1273.95 1213.45 L1273.37 1213.45 L1272.78 1213.45 L1272.19 1213.45 L1271.61 1213.45 L1271.02 1213.45 L1270.44 1213.45 L1269.85 1213.45 L1269.26 1213.45 L1268.68 1213.45 L1268.09 1213.45 L1267.5 1213.45 L1266.92 1213.45 L1266.33 1213.45 L1265.74 1213.45 L1265.16 1213.45 L1264.57 1213.45 L1263.98 1213.45 L1263.4 1213.45 L1262.81 1213.45 L1262.23 1213.45 L1261.64 1213.45 L1261.05 1213.45 L1260.47 1213.45 L1259.88 1213.45 L1259.29 1213.45 L1258.71 1213.45 L1258.12 1213.45 L1257.53 1213.45 L1256.95 1213.45 L1256.36 1213.45 L1255.78 1213.45 L1255.19 1213.45 L1254.6 1213.45 L1254.02 1213.45 L1253.43 1213.45 L1252.84 1213.45 L1252.26 1213.45 L1251.67 1213.45 L1251.08 1213.45 L1250.5 1213.45 L1249.91 1213.45 L1249.32 1213.45 L1248.74 1213.45 L1248.15 1213.45 L1247.57 1213.45 L1246.98 1213.45 L1246.39 1213.45 L1245.81 1213.45 L1245.22 1213.45 L1244.63 1213.45 L1244.05 1213.45 L1243.46 1213.45 L1242.87 1213.45 L1242.29 1213.45 L1241.7 1213.45 L1241.11 1213.45 L1240.53 1213.45 L1239.94 1213.45 L1239.36 1213.45 L1238.77 1213.45 L1238.18 1213.45 L1237.6 1213.45 L1237.01 1213.45 L1236.42 1213.45 L1235.84 1213.45 L1235.25 1213.45 L1234.66 1213.45 L1234.08 1213.45 L1233.49 1213.45 L1232.91 1213.45 L1232.32 1213.45 L1231.73 1213.45 L1231.15 1213.45 L1230.56 1213.45 L1229.97 1213.45 L1229.39 1213.45 L1228.8 1213.45 L1228.21 1213.45 L1227.63 1213.45 L1227.04 1213.45 L1226.45 1213.45 L1225.87 1213.45 L1225.28 1213.45 L1224.7 1213.45 L1224.11 1213.45 L1223.52 1213.45 L1222.94 1213.45 L1222.35 1213.45 L1221.76 1213.45 L1221.18 1213.45 L1220.59 1213.45 L1220 1213.45 L1219.42 1213.45 L1218.83 1213.45 L1218.24 1213.45 L1217.66 1213.45 L1217.07 1213.45 L1216.49 1213.45 L1215.9 1213.45 L1215.31 1213.45 L1214.73 1213.45 L1214.14 1213.45 L1213.55 1213.45 L1212.97 1213.45 L1212.38 1213.45 L1211.79 1213.45 L1211.21 1213.45 L1210.62 1213.45 L1210.03 1213.45 L1209.45 1213.45 L1208.86 1213.45 L1208.28 1213.45 L1207.69 1213.45 L1207.1 1213.45 L1206.52 1213.45 L1205.93 1213.45 L1205.34 1213.45 L1204.76 1213.45 L1204.17 1213.45 L1203.58 1213.45 L1203 1213.45 L1202.41 1213.45 L1201.83 1213.45 L1201.24 1213.45 L1200.65 1213.45 L1200.07 1213.45 L1199.48 1213.45 L1198.89 1213.45 L1198.31 1213.45 L1197.72 1213.45 L1197.13 1213.45 L1196.55 1213.45 L1195.96 1213.45 L1195.37 1213.45 L1194.79 1213.45 L1194.2 1213.45 L1193.62 1213.45 L1193.03 1213.45 L1192.44 1213.45 L1191.86 1213.45 L1191.27 1213.45 L1190.68 1213.45 L1190.1 1213.45 L1189.51 1213.45 L1188.92 1213.45 L1188.34 1213.45 L1187.75 1213.45 L1187.16 1213.45 L1186.58 1213.45 L1185.99 1213.45 L1185.41 1213.45 L1184.82 1213.45 L1184.23 1213.45 L1183.65 1213.45 L1183.06 1213.45 L1182.47 1213.45 L1181.89 1213.45 L1181.3 1213.45 L1180.71 1213.45 L1180.13 1213.45 L1179.54 1213.45 L1178.96 1213.45 L1178.37 1213.45 L1177.78 1213.45 L1177.2 1213.45 L1176.61 1213.45 L1176.02 1213.45 L1175.44 1213.45 L1174.85 1213.45 L1174.26 1213.45 L1173.68 1213.45 L1173.09 1213.45 L1172.5 1213.45 L1171.92 1213.45 L1171.33 1213.45 L1170.75 1213.45 L1170.16 1213.45 L1169.57 1213.45 L1168.99 1213.45 L1168.4 1213.45 L1167.81 1213.45 L1167.23 1213.45 L1166.64 1213.45 L1166.05 1213.45 L1165.47 1213.45 L1164.88 1213.45 L1164.29 1213.45 L1163.71 1213.45 L1163.12 1213.45 L1162.54 1213.45 L1161.95 1213.45 L1161.36 1213.45 L1160.78 1213.45 L1160.19 1213.45 L1159.6 1213.45 L1159.02 1213.45 L1158.43 1213.45 L1157.84 1213.45 L1157.26 1213.45 L1156.67 1213.45 L1156.09 1213.45 L1155.5 1213.45 L1154.91 1213.45 L1154.33 1213.45 L1153.74 1213.45 L1153.15 1213.45 L1152.57 1213.45 L1151.98 1213.45 L1151.39 1213.45 L1150.81 1213.45 L1150.22 1213.45 L1149.63 1213.45 L1149.05 1213.45 L1148.46 1213.45 L1147.88 1213.45 L1147.29 1213.45 L1146.7 1213.45 L1146.12 1213.45 L1145.53 1213.45 L1144.94 1213.45 L1144.36 1213.45 L1143.77 1213.45 L1143.18 1213.45 L1142.6 1213.45 L1142.01 1213.45 L1141.42 1213.45 L1140.84 1213.45 L1140.25 1213.45 L1139.67 1213.45 L1139.08 1213.45 L1138.49 1213.45 L1137.91 1213.45 L1137.32 1213.45 L1136.73 1213.45 L1136.15 1213.45 L1135.56 1213.45 L1134.97 1213.45 L1134.39 1213.45 L1133.8 1213.45 L1133.21 1213.45 L1132.63 1213.45 L1132.04 1213.45 L1131.46 1213.45 L1130.87 1213.45 L1130.28 1213.45 L1129.7 1213.45 L1129.11 1213.45 L1128.52 1213.45 L1127.94 1213.45 L1127.35 1213.45 L1126.76 1213.45 L1126.18 1213.45 L1125.59 1213.45 L1125.01 1213.45 L1124.42 1213.45 L1123.83 1213.45 L1123.25 1213.45 L1122.66 1213.45 L1122.07 1213.45 L1121.49 1213.45 L1120.9 1213.45 L1120.31 1213.45 L1119.73 1213.45 L1119.14 1213.45 L1118.55 1213.45 L1117.97 1213.45 L1117.38 1213.45 L1116.8 1213.45 L1116.21 1213.45 L1115.62 1213.45 L1115.04 1213.45 L1114.45 1213.45 L1113.86 1213.45 L1113.28 1213.45 L1112.69 1213.45 L1112.1 1213.45 L1111.52 1213.45 L1110.93 1213.45 L1110.34 1213.45 L1109.76 1213.45 L1109.17 1213.45 L1108.59 1213.45 L1108 1213.45 L1107.41 1213.45 L1106.83 1213.45 L1106.24 1213.45 L1105.65 1213.45 L1105.07 1213.45 L1104.48 1213.45 L1103.89 1213.45 L1103.31 1213.45 L1102.72 1213.45 L1102.14 1213.45 L1101.55 1213.45 L1100.96 1213.45 L1100.38 1213.45 L1099.79 1213.45 L1099.2 1213.45 L1098.62 1213.45 L1098.03 1213.45 L1097.44 1213.45 L1096.86 1213.45 L1096.27 1213.45 L1095.68 1213.45 L1095.1 1213.45 L1094.51 1213.45 L1093.93 1213.45 L1093.34 1213.45 L1092.75 1213.45 L1092.17 1213.45 L1091.58 1213.45 L1090.99 1213.45 L1090.41 1213.45 L1089.82 1213.45 L1089.23 1213.45 L1088.65 1213.45 L1088.06 1213.45 L1087.47 1213.45 L1086.89 1213.45 L1086.3 1213.45 L1085.72 1213.45 L1085.13 1213.45 L1084.54 1213.45 L1083.96 1213.45 L1083.37 1213.45 L1082.78 1213.45 L1082.2 1213.45 L1081.61 1213.45 L1081.02 1213.45 L1080.44 1213.45 L1079.85 1213.45 L1079.26 1213.45 L1078.68 1213.45 L1078.09 1213.45 L1077.51 1213.45 L1076.92 1213.45 L1076.33 1213.45 L1075.75 1213.45 L1075.16 1213.45 L1074.57 1213.45 L1073.99 1213.45 L1073.4 1213.45 L1072.81 1213.45 L1072.23 1213.45 L1071.64 1213.45 L1071.06 1213.45 L1070.47 1213.45 L1069.88 1213.45 L1069.3 1213.45 L1068.71 1213.45 L1068.12 1213.45 L1067.54 1213.45 L1066.95 1213.45 L1066.36 1213.45 L1065.78 1213.45 L1065.19 1213.45 L1064.6 1213.45 L1064.02 1213.45 L1063.43 1213.45 L1062.85 1213.45 L1062.26 1213.45 L1061.67 1213.45 L1061.09 1213.45 L1060.5 1213.45 L1059.91 1213.45 L1059.33 1213.45 L1058.74 1213.45 L1058.15 1213.45 L1057.57 1213.45 L1056.98 1213.45 L1056.39 1213.45 L1055.81 1213.45 L1055.22 1213.45 L1054.64 1213.45 L1054.05 1213.45 L1053.46 1213.45 L1052.88 1213.45 L1052.29 1213.45 L1051.7 1213.45 L1051.12 1213.45 L1050.53 1213.45 L1049.94 1213.45 L1049.36 1213.45 L1048.77 1213.45 L1048.19 1213.45 L1047.6 1213.45 L1047.01 1213.45 L1046.43 1213.45 L1045.84 1213.45 L1045.25 1213.45 L1044.67 1213.45 L1044.08 1213.45 L1043.49 1213.45 L1042.91 1213.45 L1042.32 1213.45 L1041.73 1213.45 L1041.15 1213.45 L1040.56 1213.45 L1039.98 1213.45 L1039.39 1213.45 L1038.8 1213.45 L1038.22 1213.45 L1037.63 1213.45 L1037.04 1213.45 L1036.46 1213.45 L1035.87 1213.45 L1035.28 1213.45 L1034.7 1213.45 L1034.11 1213.45 L1033.52 1213.45 L1032.94 1213.45 L1032.35 1213.45 L1031.77 1213.45 L1031.18 1213.45 L1030.59 1213.45 L1030.01 1213.45 L1029.42 1213.45 L1028.83 1213.45 L1028.25 1213.45 L1027.66 1213.45 L1027.07 1213.45 L1026.49 1213.45 L1025.9 1213.45 L1025.32 1213.45 L1024.73 1213.45 L1024.14 1213.45 L1023.56 1213.45 L1022.97 1213.45 L1022.38 1213.45 L1021.8 1213.45 L1021.21 1213.45 L1020.62 1213.45 L1020.04 1213.45 L1019.45 1213.45 L1018.86 1213.45 L1018.28 1213.45 L1017.69 1213.45 L1017.11 1213.45 L1016.52 1213.45 L1015.93 1213.45 L1015.35 1213.45 L1014.76 1213.45 L1014.17 1213.45 L1013.59 1213.45 L1013 1213.45 L1012.41 1213.45 L1011.83 1213.45 L1011.24 1213.45 L1010.65 1213.45 L1010.07 1213.45 L1009.48 1213.45 L1008.9 1213.45 L1008.31 1213.45 L1007.72 1213.45 L1007.14 1213.45 L1006.55 1213.45 L1005.96 1213.45 L1005.38 1213.45 L1004.79 1213.45 L1004.2 1213.45 L1003.62 1213.45 L1003.03 1213.45 L1002.44 1213.45 L1001.86 1213.45 L1001.27 1213.45 L1000.69 1213.45 L1000.1 1213.45 L999.513 1213.45 L998.926 1213.45 L998.34 1213.45 L997.754 1213.45 L997.167 1213.45 L996.581 1213.45 L995.994 1213.45 L995.408 1213.45 L994.822 1213.45 L994.235 1213.45 L993.649 1213.45 L993.062 1213.45 L992.476 1213.45 L991.889 1213.45 L991.303 1213.45 L990.717 1213.45 L990.13 1213.45 L989.544 1213.45 L988.957 1213.45 L988.371 1213.45 L987.785 1213.45 L987.198 1213.45 L986.612 1213.45 L986.025 1213.45  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.76 986.612,1213.76 987.198,1213.76 987.785,1213.76 988.371,1213.76 988.957,1213.76 989.544,1213.76 990.13,1213.76 990.717,1213.76 991.303,1213.76 991.889,1213.76 992.476,1213.76 993.062,1213.76 993.649,1213.76 994.235,1213.76 994.822,1213.76 995.408,1213.76 995.994,1213.76 996.581,1213.76 997.167,1213.76 997.754,1213.76 998.34,1213.76 998.926,1213.76 999.513,1213.76 1000.1,1213.76 1000.69,1213.76 1001.27,1213.76 1001.86,1213.76 1002.44,1213.76 1003.03,1213.76 1003.62,1213.76 1004.2,1213.76 1004.79,1213.76 1005.38,1213.76 1005.96,1213.76 1006.55,1213.76 1007.14,1213.76 1007.72,1213.76 1008.31,1213.76 1008.9,1213.76 1009.48,1213.76 1010.07,1213.76 1010.65,1213.76 1011.24,1213.76 1011.83,1213.76 1012.41,1213.76 1013,1213.76 1013.59,1213.76 1014.17,1213.76 1014.76,1213.76 1015.35,1213.76 1015.93,1213.76 1016.52,1213.76 1017.11,1213.76 1017.69,1213.76 1018.28,1213.76 1018.86,1213.76 1019.45,1213.76 1020.04,1213.76 1020.62,1213.76 1021.21,1213.76 1021.8,1213.76 1022.38,1213.76 1022.97,1213.76 1023.56,1213.76 1024.14,1213.76 1024.73,1213.76 1025.32,1213.76 1025.9,1213.76 1026.49,1213.76 1027.07,1213.76 1027.66,1213.76 1028.25,1213.76 1028.83,1213.76 1029.42,1213.76 1030.01,1213.76 1030.59,1213.76 1031.18,1213.76 1031.77,1213.76 1032.35,1213.76 1032.94,1213.76 1033.52,1213.76 1034.11,1213.76 1034.7,1213.76 1035.28,1213.76 1035.87,1213.76 1036.46,1213.76 1037.04,1213.76 1037.63,1213.76 1038.22,1213.76 1038.8,1213.76 1039.39,1213.76 1039.98,1213.76 1040.56,1213.76 1041.15,1213.76 1041.73,1213.76 1042.32,1213.76 1042.91,1213.76 1043.49,1213.76 1044.08,1213.76 1044.67,1213.76 1045.25,1213.76 1045.84,1213.76 1046.43,1213.76 1047.01,1213.76 1047.6,1213.76 1048.19,1213.76 1048.77,1213.76 1049.36,1213.76 1049.94,1213.76 1050.53,1213.76 1051.12,1213.76 1051.7,1213.76 1052.29,1213.76 1052.88,1213.76 1053.46,1213.76 1054.05,1213.76 1054.64,1213.76 1055.22,1213.76 1055.81,1213.76 1056.39,1213.76 1056.98,1213.76 1057.57,1213.76 1058.15,1213.76 1058.74,1213.76 1059.33,1213.76 1059.91,1213.76 1060.5,1213.76 1061.09,1213.76 1061.67,1213.76 1062.26,1213.76 1062.85,1213.76 1063.43,1213.76 1064.02,1213.76 1064.6,1213.76 1065.19,1213.76 1065.78,1213.76 1066.36,1213.76 1066.95,1213.76 1067.54,1213.76 1068.12,1213.76 1068.71,1213.76 1069.3,1213.76 1069.88,1213.76 1070.47,1213.76 1071.06,1213.76 1071.64,1213.76 1072.23,1213.76 1072.81,1213.76 1073.4,1213.76 1073.99,1213.76 1074.57,1213.76 1075.16,1213.76 1075.75,1213.76 1076.33,1213.76 1076.92,1213.76 1077.51,1213.76 1078.09,1213.76 1078.68,1213.76 1079.26,1213.76 1079.85,1213.76 1080.44,1213.76 1081.02,1213.76 1081.61,1213.76 1082.2,1213.76 1082.78,1213.76 1083.37,1213.76 1083.96,1213.76 1084.54,1213.76 1085.13,1213.76 1085.72,1213.76 1086.3,1213.76 1086.89,1213.76 1087.47,1213.76 1088.06,1213.76 1088.65,1213.76 1089.23,1213.76 1089.82,1213.76 1090.41,1213.76 1090.99,1213.76 1091.58,1213.76 1092.17,1213.76 1092.75,1213.76 1093.34,1213.76 1093.93,1213.76 1094.51,1213.76 1095.1,1213.76 1095.68,1213.76 1096.27,1213.76 1096.86,1213.76 1097.44,1213.76 1098.03,1213.76 1098.62,1213.76 1099.2,1213.76 1099.79,1213.76 1100.38,1213.76 1100.96,1213.76 1101.55,1213.76 1102.14,1213.76 1102.72,1213.76 1103.31,1213.76 1103.89,1213.76 1104.48,1213.76 1105.07,1213.76 1105.65,1213.76 1106.24,1213.76 1106.83,1213.76 1107.41,1213.76 1108,1213.76 1108.59,1213.76 1109.17,1213.76 1109.76,1213.76 1110.34,1213.76 1110.93,1213.76 1111.52,1213.76 1112.1,1213.76 1112.69,1213.76 1113.28,1213.76 1113.86,1213.76 1114.45,1213.76 1115.04,1213.76 1115.62,1213.76 1116.21,1213.76 1116.8,1213.76 1117.38,1213.76 1117.97,1213.76 1118.55,1213.76 1119.14,1213.76 1119.73,1213.76 1120.31,1213.76 1120.9,1213.76 1121.49,1213.76 1122.07,1213.76 1122.66,1213.76 1123.25,1213.76 1123.83,1213.76 1124.42,1213.76 1125.01,1213.76 1125.59,1213.76 1126.18,1213.76 1126.76,1213.76 1127.35,1213.76 1127.94,1213.76 1128.52,1213.76 1129.11,1213.76 1129.7,1213.76 1130.28,1213.76 1130.87,1213.76 1131.46,1213.76 1132.04,1213.76 1132.63,1213.76 1133.21,1213.76 1133.8,1213.76 1134.39,1213.76 1134.97,1213.76 1135.56,1213.76 1136.15,1213.76 1136.73,1213.76 1137.32,1213.76 1137.91,1213.76 1138.49,1213.76 1139.08,1213.76 1139.67,1213.76 1140.25,1213.76 1140.84,1213.76 1141.42,1213.76 1142.01,1213.76 1142.6,1213.76 1143.18,1213.76 1143.77,1213.76 1144.36,1213.76 1144.94,1213.76 1145.53,1213.76 1146.12,1213.76 1146.7,1213.76 1147.29,1213.76 1147.88,1213.76 1148.46,1213.76 1149.05,1213.76 1149.63,1213.76 1150.22,1213.76 1150.81,1213.76 1151.39,1213.76 1151.98,1213.76 1152.57,1213.76 1153.15,1213.76 1153.74,1213.76 1154.33,1213.76 1154.91,1213.76 1155.5,1213.76 1156.09,1213.76 1156.67,1213.76 1157.26,1213.76 1157.84,1213.76 1158.43,1213.76 1159.02,1213.76 1159.6,1213.76 1160.19,1213.76 1160.78,1213.76 1161.36,1213.76 1161.95,1213.76 1162.54,1213.76 1163.12,1213.76 1163.71,1213.76 1164.29,1213.76 1164.88,1213.76 1165.47,1213.76 1166.05,1213.76 1166.64,1213.76 1167.23,1213.76 1167.81,1213.76 1168.4,1213.76 1168.99,1213.76 1169.57,1213.76 1170.16,1213.76 1170.75,1213.76 1171.33,1213.76 1171.92,1213.76 1172.5,1213.76 1173.09,1213.76 1173.68,1213.76 1174.26,1213.76 1174.85,1213.76 1175.44,1213.76 1176.02,1213.76 1176.61,1213.76 1177.2,1213.76 1177.78,1213.76 1178.37,1213.76 1178.96,1213.76 1179.54,1213.76 1180.13,1213.76 1180.71,1213.76 1181.3,1213.76 1181.89,1213.76 1182.47,1213.76 1183.06,1213.76 1183.65,1213.76 1184.23,1213.76 1184.82,1213.76 1185.41,1213.76 1185.99,1213.76 1186.58,1213.76 1187.16,1213.76 1187.75,1213.76 1188.34,1213.76 1188.92,1213.76 1189.51,1213.76 1190.1,1213.76 1190.68,1213.76 1191.27,1213.76 1191.86,1213.76 1192.44,1213.76 1193.03,1213.76 1193.62,1213.76 1194.2,1213.76 1194.79,1213.76 1195.37,1213.76 1195.96,1213.76 1196.55,1213.76 1197.13,1213.76 1197.72,1213.76 1198.31,1213.76 1198.89,1213.76 1199.48,1213.76 1200.07,1213.76 1200.65,1213.76 1201.24,1213.76 1201.83,1213.76 1202.41,1213.76 1203,1213.76 1203.58,1213.76 1204.17,1213.76 1204.76,1213.76 1205.34,1213.76 1205.93,1213.76 1206.52,1213.76 1207.1,1213.76 1207.69,1213.76 1208.28,1213.76 1208.86,1213.76 1209.45,1213.76 1210.03,1213.76 1210.62,1213.76 1211.21,1213.76 1211.79,1213.76 1212.38,1213.76 1212.97,1213.76 1213.55,1213.76 1214.14,1213.76 1214.73,1213.76 1215.31,1213.76 1215.9,1213.76 1216.49,1213.76 1217.07,1213.76 1217.66,1213.76 1218.24,1213.76 1218.83,1213.76 1219.42,1213.76 1220,1213.76 1220.59,1213.76 1221.18,1213.76 1221.76,1213.76 1222.35,1213.76 1222.94,1213.76 1223.52,1213.76 1224.11,1213.76 1224.7,1213.76 1225.28,1213.76 1225.87,1213.76 1226.45,1213.76 1227.04,1213.76 1227.63,1213.76 1228.21,1213.76 1228.8,1213.76 1229.39,1213.76 1229.97,1213.76 1230.56,1213.76 1231.15,1213.76 1231.73,1213.76 1232.32,1213.76 1232.91,1213.76 1233.49,1213.76 1234.08,1213.76 1234.66,1213.76 1235.25,1213.76 1235.84,1213.76 1236.42,1213.76 1237.01,1213.76 1237.6,1213.76 1238.18,1213.76 1238.77,1213.76 1239.36,1213.76 1239.94,1213.76 1240.53,1213.76 1241.11,1213.76 1241.7,1213.76 1242.29,1213.76 1242.87,1213.76 1243.46,1213.76 1244.05,1213.76 1244.63,1213.76 1245.22,1213.76 1245.81,1213.76 1246.39,1213.76 1246.98,1213.76 1247.57,1213.76 1248.15,1213.76 1248.74,1213.76 1249.32,1213.76 1249.91,1213.76 1250.5,1213.76 1251.08,1213.76 1251.67,1213.76 1252.26,1213.76 1252.84,1213.76 1253.43,1213.76 1254.02,1213.76 1254.6,1213.76 1255.19,1213.76 1255.78,1213.76 1256.36,1213.76 1256.95,1213.76 1257.53,1213.76 1258.12,1213.76 1258.71,1213.76 1259.29,1213.76 1259.88,1213.76 1260.47,1213.76 1261.05,1213.76 1261.64,1213.76 1262.23,1213.76 1262.81,1213.76 1263.4,1213.76 1263.98,1213.76 1264.57,1213.76 1265.16,1213.76 1265.74,1213.76 1266.33,1213.76 1266.92,1213.76 1267.5,1213.76 1268.09,1213.76 1268.68,1213.76 1269.26,1213.76 1269.85,1213.76 1270.44,1213.76 1271.02,1213.76 1271.61,1213.76 1272.19,1213.76 1272.78,1213.76 1273.37,1213.76 1273.95,1213.76 1274.54,1213.76 1275.13,1213.76 1275.71,1213.76 1276.3,1213.76 1276.89,1213.76 1277.47,1213.76 1278.06,1213.76 1278.65,1213.76 1279.23,1213.76 1279.82,1213.76 1280.4,1213.76 1280.99,1213.76 1281.58,1213.76 1282.16,1213.76 1282.75,1213.76 1283.34,1213.76 1283.92,1213.76 1284.51,1213.76 1285.1,1213.76 1285.68,1213.76 1286.27,1213.76 1286.86,1213.76 1287.44,1213.76 1288.03,1213.76 1288.61,1213.76 1289.2,1213.76 1289.79,1213.76 1290.37,1213.76 1290.96,1213.76 1291.55,1213.76 1292.13,1213.76 1292.72,1213.76 1293.31,1213.76 1293.89,1213.76 1294.48,1213.76 1295.06,1213.76 1295.65,1213.76 1296.24,1213.76 1296.82,1213.76 1297.41,1213.76 1298,1213.76 1298.58,1213.76 1299.17,1213.76 1299.76,1213.76 1300.34,1213.76 1300.93,1213.76 1301.52,1213.76 1302.1,1213.76 1302.69,1213.76 1303.27,1213.76 1303.86,1213.76 1304.45,1213.76 1305.03,1213.76 1305.62,1213.76 1306.21,1213.76 1306.79,1213.76 1307.38,1213.76 1307.97,1213.76 1308.55,1213.76 1309.14,1213.76 1309.73,1213.76 1310.31,1213.76 1310.9,1213.76 1311.48,1213.76 1312.07,1213.76 1312.66,1213.76 1313.24,1213.76 1313.83,1213.76 1314.42,1213.76 1315,1213.76 1315.59,1213.76 1316.18,1213.76 1316.76,1213.76 1317.35,1213.76 1317.93,1213.76 1318.52,1213.76 1319.11,1213.76 1319.69,1213.76 1320.28,1213.76 1320.87,1213.76 1321.45,1213.76 1322.04,1213.76 1322.63,1213.76 1323.21,1213.76 1323.8,1213.76 1324.39,1213.76 1324.97,1213.76 1325.56,1213.76 1326.14,1213.76 1326.73,1213.76 1327.32,1213.76 1327.9,1213.76 1328.49,1213.76 1329.08,1213.76 1329.66,1213.76 1330.25,1213.76 1330.84,1213.76 1331.42,1213.76 1332.01,1213.76 1332.6,1213.76 1333.18,1213.76 1333.77,1213.76 1334.35,1213.76 1334.94,1213.76 1335.53,1213.76 1336.11,1213.76 1336.7,1213.76 1337.29,1213.76 1337.87,1213.76 1338.46,1213.76 1339.05,1213.76 1339.63,1213.76 1340.22,1213.76 1340.8,1213.76 1341.39,1213.76 1341.98,1213.76 1342.56,1213.76 1343.15,1213.76 1343.74,1213.76 1344.32,1213.76 1344.91,1213.76 1345.5,1213.76 1346.08,1213.76 1346.67,1213.76 1347.26,1213.76 1347.84,1213.76 1348.43,1213.76 1349.01,1213.76 1349.6,1213.76 1350.19,1213.76 1350.77,1213.76 1351.36,1213.76 1351.95,1213.76 1352.53,1213.76 1353.12,1213.76 1353.71,1213.76 1354.29,1213.76 1354.88,1213.76 1355.47,1213.76 1356.05,1213.76 1356.64,1213.76 1357.22,1213.76 1357.81,1213.76 1358.4,1213.76 1358.98,1213.76 1359.57,1213.76 1360.16,1213.76 1360.74,1213.76 1361.33,1213.76 1361.92,1213.76 1362.5,1213.76 1363.09,1213.76 1363.68,1213.76 1364.26,1213.76 1364.85,1213.76 1365.43,1213.76 1366.02,1213.76 1366.61,1213.76 1367.19,1213.76 1367.78,1213.76 1368.37,1213.76 1368.95,1213.76 1369.54,1213.76 1370.13,1213.76 1370.71,1213.76 1371.3,1213.76 1371.88,1213.76 1372.47,1213.76 1373.06,1213.76 1373.64,1213.76 1374.23,1213.76 1374.82,1213.76 1375.4,1213.76 1375.99,1213.76 1376.58,1213.76 1377.16,1213.76 1377.75,1213.76 1378.34,1213.76 1378.92,1213.76 1379.51,1213.76 1380.09,1213.76 1380.68,1213.76 1381.27,1213.76 1381.85,1213.76 1382.44,1213.76 1383.03,1213.76 1383.61,1213.76 1384.2,1213.76 1384.79,1213.76 1385.37,1213.76 1385.96,1213.76 1386.55,1213.76 1387.13,1213.76 1387.72,1213.76 1388.3,1213.76 1388.89,1213.76 1389.48,1213.76 1390.06,1213.76 1390.65,1213.76 1391.24,1213.76 1391.82,1213.76 1392.41,1213.76 1393,1213.76 1393.58,1213.76 1394.17,1213.76 1394.75,1213.76 1395.34,1213.76 1395.93,1213.76 1396.51,1213.76 1397.1,1213.76 1397.69,1213.76 1398.27,1213.76 1398.86,1213.76 1399.45,1213.76 1400.03,1213.76 1400.62,1213.76 1401.21,1213.76 1401.79,1213.76 1402.38,1213.76 1402.96,1213.76 1403.55,1213.76 1404.14,1213.76 1404.72,1213.76 1405.31,1213.76 1405.9,1213.76 1406.48,1213.76 1407.07,1213.76 1407.66,1213.76 1408.24,1213.76 1408.83,1213.76 1409.42,1213.76 1410,1213.76 1410.59,1213.76 1411.17,1213.76 1411.76,1213.76 1412.35,1213.76 1412.93,1213.76 1413.52,1213.76 1414.11,1213.76 1414.69,1213.76 1415.28,1213.76 1415.87,1213.76 1416.45,1213.76 1417.04,1213.76 1417.63,1213.76 1418.21,1213.76 1418.8,1213.76 1419.38,1213.76 1419.97,1213.76 1420.56,1213.76 1421.14,1213.76 1421.73,1213.76 1422.32,1213.76 1422.9,1213.76 1423.49,1213.76 1424.08,1213.76 1424.66,1213.76 1425.25,1213.76 1425.83,1213.76 1426.42,1213.76 1427.01,1213.76 1427.59,1213.76 1428.18,1213.76 1428.77,1213.76 1429.35,1213.76 1429.94,1213.76 1430.53,1213.76 1431.11,1213.76 1431.7,1213.76 1432.29,1213.76 1432.87,1213.76 1433.46,1213.76 1434.04,1213.76 1434.63,1213.76 1435.22,1213.76 1435.8,1213.76 1436.39,1213.76 1436.98,1213.76 1437.56,1213.76 1438.15,1213.76 1438.74,1213.76 1439.32,1213.76 1439.91,1213.76 1440.5,1213.76 1441.08,1213.76 1441.67,1213.76 1442.25,1213.76 1442.84,1213.76 1443.43,1213.76 1444.01,1213.76 1444.6,1213.76 1445.19,1213.76 1445.77,1213.76 1446.36,1213.76 1446.95,1213.76 1447.53,1213.76 1448.12,1213.76 1448.7,1213.76 1449.29,1213.76 1449.88,1213.76 1450.46,1213.76 1451.05,1213.76 1451.64,1213.76 1452.22,1213.76 1452.81,1213.76 1453.4,1213.76 1453.98,1213.76 1454.57,1213.76 1455.16,1213.76 1455.74,1213.76 1456.33,1213.76 1456.91,1213.76 1457.5,1213.76 1458.09,1213.76 1458.67,1213.76 1459.26,1213.76 1459.85,1213.76 1460.43,1213.76 1461.02,1213.76 1461.61,1213.76 1462.19,1213.76 1462.78,1213.76 1463.37,1213.76 1463.95,1213.76 1464.54,1213.76 1465.12,1213.76 1465.71,1213.76 1466.3,1213.76 1466.88,1213.76 1467.47,1213.76 1468.06,1213.76 1468.64,1213.76 1469.23,1213.76 1469.82,1213.76 1470.4,1213.76 1470.99,1213.76 1471.57,1213.76 1472.16,1213.76 1472.75,1213.76 1473.33,1213.76 1473.92,1213.76 1474.51,1213.76 1475.09,1213.76 1475.68,1213.76 1476.27,1213.76 1476.85,1213.76 1477.44,1213.76 1478.03,1213.76 1478.61,1213.76 1479.2,1213.76 1479.78,1213.76 1480.37,1213.76 1480.96,1213.76 1481.54,1213.76 1482.13,1213.76 1482.72,1213.76 1483.3,1213.76 1483.89,1213.76 1484.48,1213.76 1485.06,1213.76 1485.65,1213.76 1486.24,1213.76 1486.82,1213.76 1487.41,1213.76 1487.99,1213.76 1488.58,1213.76 1489.17,1213.76 1489.75,1213.76 1490.34,1213.76 1490.93,1213.76 1491.51,1213.76 1492.1,1213.76 1492.69,1213.76 1493.27,1213.76 1493.86,1213.76 1494.45,1213.76 1495.03,1213.76 1495.62,1213.76 1496.2,1213.76 1496.79,1213.76 1497.38,1213.76 1497.96,1213.76 1498.55,1213.76 1499.14,1213.76 1499.72,1213.76 1500.31,1213.76 1500.9,1213.76 1501.48,1213.76 1502.07,1213.76 1502.65,1213.76 1503.24,1213.76 1503.83,1213.76 1504.41,1213.76 1505,1213.76 1505.59,1213.76 1506.17,1213.76 1506.76,1213.76 1507.35,1213.76 1507.93,1213.76 1508.52,1213.76 1509.11,1213.76 1509.69,1213.76 1510.28,1213.76 1510.86,1213.76 1511.45,1213.76 1512.04,1213.76 1512.62,1213.76 1513.21,1213.76 1513.8,1213.76 1514.38,1213.76 1514.97,1213.76 1515.56,1213.76 1516.14,1213.76 1516.73,1213.76 1517.32,1213.76 1517.9,1213.76 1518.49,1213.76 1519.07,1213.76 1519.66,1213.76 1520.25,1213.76 1520.83,1213.76 1521.42,1213.76 1522.01,1213.76 1522.59,1213.76 1523.18,1213.76 1523.77,1213.76 1524.35,1213.76 1524.94,1213.76 1525.52,1213.76 1526.11,1213.76 1526.7,1213.76 1527.28,1213.76 1527.87,1213.76 1528.46,1213.76 1529.04,1213.76 1529.63,1213.76 1530.22,1213.76 1530.8,1213.76 1531.39,1213.76 1531.98,1213.76 1532.56,1213.76 1533.15,1213.76 1533.73,1213.76 1534.32,1213.76 1534.91,1213.76 1535.49,1213.76 1536.08,1213.76 1536.67,1213.76 1537.25,1213.76 1537.84,1213.76 1538.43,1213.76 1539.01,1213.76 1539.6,1213.76 1540.19,1213.76 1540.77,1213.76 1541.36,1213.76 1541.94,1213.76 1542.53,1213.76 1543.12,1213.76 1543.7,1213.76 1544.29,1213.76 1544.88,1213.76 1545.46,1213.76 1546.05,1213.76 1546.64,1213.76 1547.22,1213.76 1547.81,1213.76 1548.4,1213.76 1548.98,1213.76 1549.57,1213.76 1550.15,1213.76 1550.74,1213.76 1551.33,1213.76 1551.91,1213.76 1552.5,1213.76 1553.09,1213.76 1553.67,1213.76 1554.26,1213.76 1554.85,1213.76 1555.43,1213.76 1556.02,1213.76 1556.6,1213.76 1557.19,1213.76 1557.78,1213.76 1558.36,1213.76 1558.95,1213.76 1559.54,1213.76 1560.12,1213.76 1560.71,1213.76 1561.3,1213.76 1561.88,1213.76 1562.47,1213.76 1563.06,1213.76 1563.64,1213.76 1564.23,1213.76 1564.81,1213.76 1565.4,1213.76 1565.99,1213.76 1566.57,1213.76 1567.16,1213.76 1567.75,1213.76 1568.33,1213.76 1568.92,1213.76 1569.51,1213.76 1570.09,1213.76 1570.68,1213.76 1571.27,1213.76 1571.85,1213.76 1572.44,1213.76 1573.02,1213.76 1573.61,1213.76 1574.2,1213.76 1574.78,1213.76 1575.37,1213.76 1575.96,1213.76 1576.54,1213.76 1577.13,1213.76 1577.72,1213.76 1578.3,1213.76 1578.89,1213.76 1579.47,1213.76 1580.06,1213.76 1580.65,1213.76 1581.23,1213.76 1581.82,1213.76 1582.41,1213.76 1582.99,1213.76 1583.58,1213.76 1584.17,1213.76 1584.75,1213.76 1585.34,1213.76 1585.93,1213.76 1586.51,1213.76 1587.1,1213.76 1587.68,1213.76 1588.27,1213.76 1588.86,1213.76 1589.44,1213.76 1590.03,1213.76 1590.62,1213.76 1591.2,1213.76 1591.79,1213.76 1592.38,1213.76 1592.96,1213.76 1593.55,1213.76 1594.14,1213.76 1594.72,1213.76 1595.31,1213.76 1595.89,1213.76 1596.48,1213.76 1597.07,1213.76 1597.65,1213.76 1598.24,1213.76 1598.83,1213.76 1599.41,1213.76 1600,1213.76 1600.59,1213.76 1601.17,1213.76 1601.76,1213.76 1602.34,1213.76 1602.93,1213.76 1603.52,1213.76 1604.1,1213.76 1604.69,1213.76 1605.28,1213.76 1605.86,1213.76 1606.45,1213.76 1607.04,1213.76 1607.62,1213.76 1608.21,1213.76 1608.8,1213.76 1609.38,1213.76 1609.97,1213.76 1610.55,1213.76 1611.14,1213.76 1611.73,1213.76 1612.31,1213.76 1612.9,1213.76 1613.49,1213.76 1614.07,1213.76 1614.66,1213.76 1615.25,1213.76 1615.83,1213.76 1616.42,1213.76 1617.01,1213.76 1617.59,1213.76 1618.18,1213.76 1618.76,1213.76 1619.35,1213.76 1619.94,1213.76 1620.52,1213.76 1621.11,1213.76 1621.7,1213.76 1622.28,1213.76 1622.87,1213.76 1623.46,1213.76 1624.04,1213.76 1624.63,1213.76 1625.22,1213.76 1625.8,1213.76 1626.39,1213.76 1626.97,1213.76 1627.56,1213.76 1628.15,1213.76 1628.73,1213.76 1629.32,1213.76 1629.91,1213.76 1630.49,1213.76 1631.08,1213.76 1631.67,1213.76 1632.25,1213.76 1632.84,1213.76 1633.42,1213.76 1634.01,1213.76 1634.6,1213.76 1635.18,1213.76 1635.77,1213.76 1636.36,1213.76 1636.94,1213.76 1637.53,1213.76 1638.12,1213.76 1638.7,1213.76 1639.29,1213.76 1639.88,1213.76 1640.46,1213.76 1641.05,1213.76 1641.63,1213.76 1642.22,1213.76 1642.81,1213.76 1643.39,1213.76 1643.98,1213.76 1644.57,1213.76 1645.15,1213.76 1645.74,1213.76 1646.33,1213.76 1646.91,1213.76 1647.5,1213.76 1648.09,1213.76 1648.67,1213.76 1649.26,1213.76 1649.84,1213.76 1650.43,1213.76 1651.02,1213.76 1651.6,1213.76 1652.19,1213.76 1652.78,1213.76 1653.36,1213.76 1653.95,1213.76 1654.54,1213.76 1655.12,1213.76 1655.71,1213.76 1656.29,1213.76 1656.88,1213.76 1657.47,1213.76 1658.05,1213.76 1658.64,1213.76 1659.23,1213.76 1659.81,1213.76 1660.4,1213.76 1660.99,1213.76 1661.57,1213.76 1662.16,1213.76 1662.75,1213.76 1663.33,1213.76 1663.92,1213.76 1664.5,1213.76 1665.09,1213.76 1665.68,1213.76 1666.26,1213.76 1666.85,1213.76 1667.44,1213.76 1668.02,1213.76 1668.61,1213.76 1669.2,1213.76 1669.78,1213.76 1670.37,1213.76 1670.96,1213.76 1671.54,1213.76 1672.13,1213.76 1672.71,1213.76 1673.3,1213.76 1673.89,1213.76 1674.47,1213.76 1675.06,1213.76 1675.65,1213.76 1676.23,1213.76 1676.82,1213.76 1677.41,1213.76 1677.99,1213.76 1678.58,1213.76 1679.17,1213.76 1679.75,1213.76 1680.34,1213.76 1680.92,1213.76 1681.51,1213.76 1682.1,1213.76 1682.68,1213.76 1683.27,1213.76 1683.86,1213.76 1684.44,1213.76 1685.03,1213.76 1685.62,1213.76 1686.2,1213.76 1686.79,1213.76 1687.37,1213.76 1687.96,1213.76 1688.55,1213.76 1689.13,1213.76 1689.72,1213.76 1690.31,1213.76 1690.89,1213.76 1691.48,1213.76 1692.07,1213.76 1692.65,1213.76 1693.24,1213.76 1693.83,1213.76 1694.41,1213.76 1695,1213.76 1695.58,1213.76 1696.17,1213.76 1696.76,1213.76 1697.34,1213.76 1697.93,1213.76 1698.52,1213.76 1699.1,1213.76 1699.69,1213.76 1700.28,1213.76 1700.86,1213.76 1701.45,1213.76 1702.04,1213.76 1702.62,1213.76 1703.21,1213.76 1703.79,1213.76 1704.38,1213.76 1704.97,1213.76 1705.55,1213.76 1706.14,1213.76 1706.73,1213.76 1707.31,1213.76 1707.9,1213.76 1708.49,1213.76 1709.07,1213.76 1709.66,1213.76 1710.24,1213.76 1710.83,1213.76 1711.42,1213.76 1712,1213.76 1712.59,1213.76 1713.18,1213.76 1713.76,1213.76 1714.35,1213.76 1714.94,1213.76 1715.52,1213.76 1716.11,1213.76 1716.7,1213.76 1717.28,1213.76 1717.87,1213.76 1718.45,1213.76 1719.04,1213.76 1719.63,1213.76 1720.21,1213.76 1720.8,1213.76 1721.39,1213.76 1721.97,1213.76 1722.56,1213.76 1723.15,1213.76 1723.73,1213.76 1724.32,1213.76 1724.91,1213.76 1725.49,1213.76 1726.08,1213.76 1726.66,1213.76 1727.25,1213.76 1727.84,1213.76 1728.42,1213.76 1729.01,1213.76 1729.6,1213.76 1730.18,1213.76 1730.77,1213.76 1731.36,1213.76 1731.94,1213.76 1732.53,1213.76 1733.11,1213.76 1733.7,1213.76 1734.29,1213.76 1734.87,1213.76 1735.46,1213.76 1736.05,1213.76 1736.63,1213.76 1737.22,1213.76 1737.81,1213.76 1738.39,1213.76 1738.98,1213.76 1739.57,1213.76 1740.15,1213.76 1740.74,1213.76 1741.32,1213.76 1741.91,1213.76 1742.5,1213.76 1743.08,1213.76 1743.67,1213.76 1744.26,1213.76 1744.84,1213.76 1745.43,1213.76 1746.02,1213.76 1746.6,1213.76 1747.19,1213.76 1747.78,1213.76 1748.36,1213.76 1748.95,1213.76 1749.53,1213.76 1750.12,1213.76 1750.71,1213.76 1751.29,1213.76 1751.88,1213.76 1752.47,1213.76 1753.05,1213.76 1753.64,1213.76 1754.23,1213.76 1754.81,1213.76 1755.4,1213.76 1755.99,1213.76 1756.57,1213.76 1757.16,1213.76 1757.74,1213.76 1758.33,1213.76 1758.92,1213.76 1759.5,1213.76 1760.09,1213.76 1760.68,1213.76 1761.26,1213.76 1761.85,1213.76 1762.44,1213.76 1763.02,1213.76 1763.61,1213.76 1764.19,1213.76 1764.78,1213.76 1765.37,1213.76 1765.95,1213.76 1766.54,1213.76 1767.13,1213.76 1767.71,1213.76 1768.3,1213.76 1768.89,1213.76 1769.47,1213.76 1770.06,1213.76 1770.65,1213.76 1771.23,1213.76 1771.82,1213.76 1772.4,1213.76 1772.99,1213.76 1773.58,1213.76 1774.16,1213.76 1774.75,1213.76 1775.34,1213.76 1775.92,1213.76 1776.51,1213.76 1777.1,1213.76 1777.68,1213.76 1778.27,1213.76 1778.86,1213.76 1779.44,1213.76 1780.03,1213.76 1780.61,1213.76 1781.2,1213.76 1781.79,1213.76 1782.37,1213.76 1782.96,1213.76 1783.55,1213.76 1784.13,1213.76 1784.72,1213.76 1785.31,1213.76 1785.89,1213.76 1786.48,1213.76 1787.06,1213.76 1787.65,1213.76 1788.24,1213.76 1788.82,1213.76 1789.41,1213.76 1790,1213.76 1790.58,1213.76 1791.17,1213.76 1791.76,1213.76 1792.34,1213.76 1792.93,1213.76 1793.52,1213.76 1794.1,1213.76 1794.69,1213.76 1795.27,1213.76 1795.86,1213.76 1796.45,1213.76 1797.03,1213.76 1797.62,1213.76 1798.21,1213.76 1798.79,1213.76 1799.38,1213.76 1799.97,1213.76 1800.55,1213.76 1801.14,1213.76 1801.73,1213.76 1802.31,1213.76 1802.9,1213.76 1803.48,1213.76 1804.07,1213.76 1804.66,1213.76 1805.24,1213.76 1805.83,1213.76 1806.42,1213.76 1807,1213.76 1807.59,1213.76 1808.18,1213.76 1808.76,1213.76 1809.35,1213.76 1809.94,1213.76 1810.52,1213.76 1811.11,1213.76 1811.69,1213.76 1812.28,1213.76 1812.87,1213.76 1813.45,1213.76 1814.04,1213.76 1814.63,1213.76 1815.21,1213.76 1815.8,1213.76 1816.39,1213.76 1816.97,1213.76 1817.56,1213.76 1818.14,1213.76 1818.73,1213.76 1819.32,1213.76 1819.9,1213.76 1820.49,1213.76 1821.08,1213.76 1821.66,1213.76 1822.25,1213.76 1822.84,1213.76 1823.42,1213.76 1824.01,1213.76 1824.6,1213.76 1825.18,1213.76 1825.77,1213.76 1826.35,1213.76 1826.94,1213.76 1827.53,1213.76 1828.11,1213.76 1828.7,1213.76 1829.29,1213.76 1829.87,1213.76 1830.46,1213.76 1831.05,1213.76 1831.63,1213.76 1832.22,1213.76 1832.81,1213.76 1833.39,1213.76 1833.98,1213.76 1834.56,1213.76 1835.15,1213.76 1835.74,1213.76 1836.32,1213.76 1836.91,1213.76 1837.5,1213.76 1838.08,1213.76 1838.67,1213.76 1839.26,1213.76 1839.84,1213.76 1840.43,1213.76 1841.01,1213.76 1841.6,1213.76 1842.19,1213.76 1842.77,1213.76 1843.36,1213.76 1843.95,1213.76 1844.53,1213.76 1845.12,1213.76 1845.71,1213.76 1846.29,1213.76 1846.88,1213.76 1847.47,1213.76 1848.05,1213.76 1848.64,1213.76 1849.22,1213.76 1849.81,1213.76 1850.4,1213.76 1850.98,1213.76 1851.57,1213.76 1852.16,1213.76 1852.74,1213.76 1853.33,1213.76 1853.92,1213.76 1854.5,1213.76 1855.09,1213.76 1855.68,1213.76 1856.26,1213.76 1856.85,1213.76 1857.43,1213.76 1858.02,1213.76 1858.61,1213.76 1859.19,1213.76 1859.78,1213.76 1860.37,1213.76 1860.95,1213.76 1861.54,1213.76 1862.13,1213.76 1862.71,1213.76 1863.3,1213.76 1863.88,1213.76 1864.47,1213.76 1865.06,1213.76 1865.64,1213.76 1866.23,1213.76 1866.82,1213.76 1867.4,1213.76 1867.99,1213.76 1868.58,1213.76 1869.16,1213.76 1869.75,1213.76 1870.34,1213.76 1870.92,1213.76 1871.51,1213.76 1872.09,1213.76 1872.68,1213.76 1873.27,1213.76 1873.85,1213.76 1874.44,1213.76 1875.03,1213.76 1875.61,1213.76 1876.2,1213.76 1876.79,1213.76 1877.37,1213.76 1877.96,1213.76 1878.55,1213.76 1879.13,1213.76 1879.72,1213.76 1880.3,1213.76 1880.89,1213.76 1881.48,1213.76 1882.06,1213.76 1882.65,1213.76 1883.24,1213.76 1883.82,1213.76 1884.41,1213.76 1885,1213.76 1885.58,1213.76 1886.17,1213.76 1886.76,1213.76 1887.34,1213.76 1887.93,1213.76 1888.51,1213.76 1889.1,1213.76 1889.69,1213.76 1890.27,1213.76 1890.86,1213.76 1891.45,1213.76 1892.03,1213.76 1892.62,1213.76 1893.21,1213.76 1893.79,1213.76 1894.38,1213.76 1894.96,1213.76 1895.55,1213.76 1896.14,1213.76 1896.72,1213.76 1897.31,1213.76 1897.9,1213.76 1898.48,1213.76 1899.07,1213.76 1899.66,1213.76 1900.24,1213.76 1900.83,1213.76 1901.42,1213.76 1902,1213.76 1902.59,1213.76 1903.17,1213.76 1903.76,1213.76 1904.35,1213.76 1904.93,1213.76 1905.52,1213.76 1906.11,1213.76 1906.69,1213.76 1907.28,1213.76 1907.87,1213.76 1908.45,1213.76 1909.04,1213.76 1909.63,1213.76 1910.21,1213.76 1910.8,1213.76 1911.38,1213.76 1911.97,1213.76 1912.56,1213.76 1913.14,1213.76 1913.73,1213.76 1914.32,1213.76 1914.9,1213.76 1915.49,1213.76 1916.08,1213.76 1916.66,1213.76 1917.25,1213.76 1917.83,1213.76 1918.42,1213.76 1919.01,1213.76 1919.59,1213.76 1920.18,1213.76 1920.77,1213.76 1921.35,1213.76 1921.94,1213.76 1922.53,1213.76 1923.11,1213.76 1923.7,1213.76 1924.29,1213.76 1924.87,1213.76 1925.46,1213.76 1926.04,1213.76 1926.63,1213.76 1927.22,1213.76 1927.8,1213.76 1928.39,1213.76 1928.98,1213.76 1929.56,1213.76 1930.15,1213.76 1930.74,1213.76 1931.32,1213.76 1931.91,1213.76 1932.5,1213.76 1933.08,1213.76 1933.67,1213.76 1934.25,1213.76 1934.84,1213.76 1935.43,1213.76 1936.01,1213.76 1936.6,1213.76 1937.19,1213.76 1937.77,1213.76 1938.36,1213.76 1938.95,1213.76 1939.53,1213.76 1940.12,1213.76 1940.71,1213.76 1941.29,1213.76 1941.88,1213.76 1942.46,1213.76 1943.05,1213.76 1943.64,1213.76 1944.22,1213.76 1944.81,1213.76 1945.4,1213.76 1945.98,1213.76 1946.57,1213.76 1947.16,1213.76 1947.74,1213.76 1948.33,1213.76 1948.91,1213.76 1949.5,1213.76 1950.09,1213.76 1950.67,1213.76 1951.26,1213.76 1951.85,1213.76 1952.43,1213.76 1953.02,1213.76 1953.61,1213.76 1954.19,1213.76 1954.78,1213.76 1955.37,1213.76 1955.95,1213.76 1956.54,1213.76 1957.12,1213.76 1957.71,1213.76 1958.3,1213.76 1958.88,1213.76 1959.47,1213.76 1960.06,1213.76 1960.64,1213.76 1961.23,1213.76 1961.82,1213.76 1962.4,1213.76 1962.99,1213.76 1963.58,1213.76 1964.16,1213.76 1964.75,1213.76 1965.33,1213.76 1965.92,1213.76 1966.51,1213.76 1967.09,1213.76 1967.68,1213.76 1968.27,1213.76 1968.85,1213.76 1969.44,1213.76 1970.03,1213.76 1970.61,1213.76 1971.2,1213.76 1971.78,1213.76 1972.37,1213.76 1972.96,1213.76 1973.54,1213.76 1974.13,1213.76 1974.72,1213.76 1975.3,1213.76 1975.89,1213.76 1976.48,1213.76 1977.06,1213.76 1977.65,1213.76 1978.24,1213.76 1978.82,1213.76 1979.41,1213.76 1979.99,1213.76 1980.58,1213.76 1981.17,1213.76 1981.75,1213.76 1982.34,1213.76 1982.93,1213.76 1983.51,1213.76 1984.1,1213.76 1984.69,1213.76 1985.27,1213.76 1985.86,1213.76 1986.45,1213.76 1987.03,1213.76 1987.62,1213.76 1988.2,1213.76 1988.79,1213.76 1989.38,1213.76 1989.96,1213.76 1990.55,1213.76 1991.14,1213.76 1991.72,1213.76 1992.31,1213.76 1992.9,1213.76 1993.48,1213.76 1994.07,1213.76 1994.65,1213.76 1995.24,1213.76 1995.83,1213.76 1996.41,1213.76 1997,1213.76 1997.59,1213.76 1998.17,1213.76 1998.76,1213.76 1999.35,1213.76 1999.93,1213.76 2000.52,1213.76 2001.11,1213.76 2001.69,1213.76 2002.28,1213.76 2002.86,1213.76 2003.45,1213.76 2004.04,1213.76 2004.62,1213.76 2005.21,1213.76 2005.8,1213.76 2006.38,1213.76 2006.97,1213.76 2007.56,1213.76 2008.14,1213.76 2008.73,1213.76 2009.32,1213.76 2009.9,1213.76 2010.49,1213.76 2011.07,1213.76 2011.66,1213.76 2012.25,1213.76 2012.83,1213.76 2013.42,1213.76 2014.01,1213.76 2014.59,1213.76 2015.18,1213.76 2015.77,1213.76 2016.35,1213.76 2016.94,1213.76 2017.53,1213.76 2018.11,1213.76 2018.7,1213.76 2019.28,1213.76 2019.87,1213.76 2020.46,1213.76 2021.04,1213.76 2021.63,1213.76 2022.22,1213.76 2022.8,1213.76 2023.39,1213.76 2023.98,1213.76 2024.56,1213.76 2025.15,1213.76 2025.73,1213.76 2026.32,1213.76 2026.91,1213.76 2027.49,1213.76 2028.08,1213.76 2028.67,1213.76 2029.25,1213.76 2029.84,1213.76 2030.43,1213.76 2031.01,1213.76 2031.6,1213.76 2032.19,1213.76 2032.77,1213.76 2033.36,1213.76 2033.94,1213.76 2034.53,1213.76 2035.12,1213.76 2035.7,1213.76 2036.29,1213.76 2036.88,1213.76 2037.46,1213.76 2038.05,1213.76 2038.64,1213.76 2039.22,1213.76 2039.81,1213.76 2040.4,1213.76 2040.98,1213.76 2041.57,1213.76 2042.15,1213.76 2042.74,1213.76 2043.33,1213.76 2043.91,1213.76 2044.5,1213.76 2045.09,1213.76 2045.67,1213.76 2046.26,1213.76 2046.85,1213.76 2047.43,1213.76 2048.02,1213.76 2048.6,1213.76 2049.19,1213.76 2049.78,1213.76 2050.36,1213.76 2050.95,1213.76 2051.54,1213.76 2052.12,1213.76 2052.71,1213.76 2053.3,1213.76 2053.88,1213.76 2054.47,1213.76 2055.06,1213.76 2055.64,1213.76 2056.23,1213.76 2056.81,1213.76 2057.4,1213.76 2057.99,1213.76 2058.57,1213.76 2059.16,1213.76 2059.75,1213.76 2060.33,1213.76 2060.92,1213.76 2061.51,1213.76 2062.09,1213.76 2062.68,1213.76 2063.27,1213.76 2063.85,1213.76 2064.44,1213.76 2065.02,1213.76 2065.61,1213.76 2066.2,1213.76 2066.78,1213.76 2067.37,1213.76 2067.96,1213.76 2068.54,1213.76 2069.13,1213.76 2069.72,1213.76 2070.3,1213.76 2070.89,1213.76 2071.48,1213.76 2072.06,1213.76 2072.65,1213.76 2073.23,1213.76 2073.82,1213.76 2074.41,1213.76 2074.99,1213.76 2075.58,1213.76 2076.17,1213.76 2076.75,1213.76 2077.34,1213.76 2077.93,1213.76 2078.51,1213.76 2079.1,1213.76 2079.68,1213.76 2080.27,1213.76 2080.86,1213.76 2081.44,1213.76 2082.03,1213.76 2082.62,1213.76 2083.2,1213.76 2083.79,1213.76 2084.38,1213.76 2084.96,1213.76 2085.55,1213.76 2086.14,1213.76 2086.72,1213.76 2087.31,1213.76 2087.89,1213.76 2088.48,1213.76 2089.07,1213.76 2089.65,1213.76 2090.24,1213.76 2090.83,1213.76 2091.41,1213.76 2092,1213.76 2092.59,1213.76 2093.17,1213.76 2093.76,1213.76 2094.35,1213.76 2094.93,1213.76 2095.52,1213.76 2096.1,1213.76 2096.69,1213.76 2097.28,1213.76 2097.86,1213.76 2098.45,1213.76 2099.04,1213.76 2099.62,1213.76 2100.21,1213.76 2100.8,1213.76 2101.38,1213.76 2101.97,1213.76 2102.55,1213.76 2103.14,1213.76 2103.73,1213.76 2104.31,1213.76 2104.9,1213.76 2105.49,1213.76 2106.07,1213.76 2106.66,1213.76 2107.25,1213.76 2107.83,1213.76 2108.42,1213.76 2109.01,1213.76 2109.59,1213.76 2110.18,1213.76 2110.76,1213.76 2111.35,1213.76 2111.94,1213.76 2112.52,1213.76 2113.11,1213.76 2113.7,1213.76 2114.28,1213.76 2114.87,1213.76 2115.46,1213.76 2116.04,1213.76 2116.63,1213.76 2117.22,1213.76 2117.8,1213.76 2118.39,1213.76 2118.97,1213.76 2119.56,1213.76 2120.15,1213.76 2120.73,1213.76 2121.32,1213.76 2121.91,1213.76 2122.49,1213.76 2123.08,1213.76 2123.67,1213.76 2124.25,1213.76 2124.84,1213.76 2125.42,1213.76 2126.01,1213.76 2126.6,1213.76 2127.18,1213.76 2127.77,1213.76 2128.36,1213.76 2128.94,1213.76 2129.53,1213.76 2130.12,1213.76 2130.7,1213.76 2131.29,1213.76 2131.88,1213.76 2132.46,1213.76 2133.05,1213.76 2133.63,1213.76 2134.22,1213.76 2134.81,1213.76 2135.39,1213.76 2135.98,1213.76 2136.57,1213.76 2137.15,1213.76 2137.74,1213.76 2138.33,1213.76 2138.91,1213.76 2139.5,1213.76 2140.09,1213.76 2140.67,1213.76 2141.26,1213.76 2141.84,1213.76 2142.43,1213.76 2143.02,1213.76 2143.6,1213.76 2144.19,1213.76 2144.78,1213.76 2145.36,1213.76 2145.95,1213.76 2146.54,1213.76 2147.12,1213.76 2147.71,1213.76 2148.3,1213.76 2148.88,1213.76 2149.47,1213.76 2150.05,1213.76 2150.64,1213.76 2151.23,1213.76 2151.81,1213.76 2152.4,1213.76 2152.99,1213.76 2153.57,1213.76 2154.16,1213.76 2154.75,1213.76 2155.33,1213.76 2155.92,1213.76 2156.5,1213.76 2157.09,1213.76 2157.68,1213.76 2158.26,1213.76 \"/>\n<path clip-path=\"url(#clip722)\" d=\"M986.025 1213.54 L986.612 1213.54 L987.198 1213.54 L987.785 1213.54 L988.371 1213.54 L988.957 1213.54 L989.544 1213.54 L990.13 1213.54 L990.717 1213.54 L991.303 1213.54 L991.889 1213.54 L992.476 1213.54 L993.062 1213.54 L993.649 1213.54 L994.235 1213.54 L994.822 1213.54 L995.408 1213.54 L995.994 1213.54 L996.581 1213.54 L997.167 1213.54 L997.754 1213.54 L998.34 1213.54 L998.926 1213.54 L999.513 1213.54 L1000.1 1213.54 L1000.69 1213.54 L1001.27 1213.54 L1001.86 1213.54 L1002.44 1213.54 L1003.03 1213.54 L1003.62 1213.54 L1004.2 1213.54 L1004.79 1213.54 L1005.38 1213.54 L1005.96 1213.54 L1006.55 1213.54 L1007.14 1213.54 L1007.72 1213.54 L1008.31 1213.54 L1008.9 1213.54 L1009.48 1213.54 L1010.07 1213.54 L1010.65 1213.54 L1011.24 1213.54 L1011.83 1213.54 L1012.41 1213.54 L1013 1213.54 L1013.59 1213.54 L1014.17 1213.54 L1014.76 1213.54 L1015.35 1213.54 L1015.93 1213.54 L1016.52 1213.54 L1017.11 1213.54 L1017.69 1213.54 L1018.28 1213.54 L1018.86 1213.54 L1019.45 1213.54 L1020.04 1213.54 L1020.62 1213.54 L1021.21 1213.54 L1021.8 1213.54 L1022.38 1213.54 L1022.97 1213.54 L1023.56 1213.54 L1024.14 1213.54 L1024.73 1213.54 L1025.32 1213.54 L1025.9 1213.54 L1026.49 1213.54 L1027.07 1213.54 L1027.66 1213.54 L1028.25 1213.54 L1028.83 1213.54 L1029.42 1213.54 L1030.01 1213.54 L1030.59 1213.54 L1031.18 1213.54 L1031.77 1213.54 L1032.35 1213.54 L1032.94 1213.54 L1033.52 1213.54 L1034.11 1213.54 L1034.7 1213.54 L1035.28 1213.54 L1035.87 1213.54 L1036.46 1213.54 L1037.04 1213.54 L1037.63 1213.54 L1038.22 1213.54 L1038.8 1213.54 L1039.39 1213.54 L1039.98 1213.54 L1040.56 1213.54 L1041.15 1213.54 L1041.73 1213.54 L1042.32 1213.54 L1042.91 1213.54 L1043.49 1213.54 L1044.08 1213.54 L1044.67 1213.54 L1045.25 1213.54 L1045.84 1213.54 L1046.43 1213.54 L1047.01 1213.54 L1047.6 1213.54 L1048.19 1213.54 L1048.77 1213.54 L1049.36 1213.54 L1049.94 1213.54 L1050.53 1213.54 L1051.12 1213.54 L1051.7 1213.54 L1052.29 1213.54 L1052.88 1213.54 L1053.46 1213.54 L1054.05 1213.54 L1054.64 1213.54 L1055.22 1213.54 L1055.81 1213.54 L1056.39 1213.54 L1056.98 1213.54 L1057.57 1213.54 L1058.15 1213.54 L1058.74 1213.54 L1059.33 1213.54 L1059.91 1213.54 L1060.5 1213.54 L1061.09 1213.54 L1061.67 1213.54 L1062.26 1213.54 L1062.85 1213.54 L1063.43 1213.54 L1064.02 1213.54 L1064.6 1213.54 L1065.19 1213.54 L1065.78 1213.54 L1066.36 1213.54 L1066.95 1213.54 L1067.54 1213.54 L1068.12 1213.54 L1068.71 1213.54 L1069.3 1213.54 L1069.88 1213.54 L1070.47 1213.54 L1071.06 1213.54 L1071.64 1213.54 L1072.23 1213.54 L1072.81 1213.54 L1073.4 1213.54 L1073.99 1213.54 L1074.57 1213.54 L1075.16 1213.54 L1075.75 1213.54 L1076.33 1213.54 L1076.92 1213.54 L1077.51 1213.54 L1078.09 1213.54 L1078.68 1213.54 L1079.26 1213.54 L1079.85 1213.54 L1080.44 1213.54 L1081.02 1213.54 L1081.61 1213.54 L1082.2 1213.54 L1082.78 1213.54 L1083.37 1213.54 L1083.96 1213.54 L1084.54 1213.54 L1085.13 1213.54 L1085.72 1213.54 L1086.3 1213.54 L1086.89 1213.54 L1087.47 1213.54 L1088.06 1213.54 L1088.65 1213.54 L1089.23 1213.54 L1089.82 1213.54 L1090.41 1213.54 L1090.99 1213.54 L1091.58 1213.54 L1092.17 1213.54 L1092.75 1213.54 L1093.34 1213.54 L1093.93 1213.54 L1094.51 1213.54 L1095.1 1213.54 L1095.68 1213.54 L1096.27 1213.54 L1096.86 1213.54 L1097.44 1213.54 L1098.03 1213.54 L1098.62 1213.54 L1099.2 1213.54 L1099.79 1213.54 L1100.38 1213.54 L1100.96 1213.54 L1101.55 1213.54 L1102.14 1213.54 L1102.72 1213.54 L1103.31 1213.54 L1103.89 1213.54 L1104.48 1213.54 L1105.07 1213.54 L1105.65 1213.54 L1106.24 1213.54 L1106.83 1213.54 L1107.41 1213.54 L1108 1213.54 L1108.59 1213.54 L1109.17 1213.54 L1109.76 1213.54 L1110.34 1213.54 L1110.93 1213.54 L1111.52 1213.54 L1112.1 1213.54 L1112.69 1213.54 L1113.28 1213.54 L1113.86 1213.54 L1114.45 1213.54 L1115.04 1213.54 L1115.62 1213.54 L1116.21 1213.54 L1116.8 1213.54 L1117.38 1213.54 L1117.97 1213.54 L1118.55 1213.54 L1119.14 1213.54 L1119.73 1213.54 L1120.31 1213.54 L1120.9 1213.54 L1121.49 1213.54 L1122.07 1213.54 L1122.66 1213.54 L1123.25 1213.54 L1123.83 1213.54 L1124.42 1213.54 L1125.01 1213.54 L1125.59 1213.54 L1126.18 1213.54 L1126.76 1213.54 L1127.35 1213.54 L1127.94 1213.54 L1128.52 1213.54 L1129.11 1213.54 L1129.7 1213.54 L1130.28 1213.54 L1130.87 1213.54 L1131.46 1213.54 L1132.04 1213.54 L1132.63 1213.54 L1133.21 1213.54 L1133.8 1213.54 L1134.39 1213.54 L1134.97 1213.54 L1135.56 1213.54 L1136.15 1213.54 L1136.73 1213.54 L1137.32 1213.54 L1137.91 1213.54 L1138.49 1213.54 L1139.08 1213.54 L1139.67 1213.54 L1140.25 1213.54 L1140.84 1213.54 L1141.42 1213.54 L1142.01 1213.54 L1142.6 1213.54 L1143.18 1213.54 L1143.77 1213.54 L1144.36 1213.54 L1144.94 1213.54 L1145.53 1213.54 L1146.12 1213.54 L1146.7 1213.54 L1147.29 1213.54 L1147.88 1213.54 L1148.46 1213.54 L1149.05 1213.54 L1149.63 1213.54 L1150.22 1213.54 L1150.81 1213.54 L1151.39 1213.54 L1151.98 1213.54 L1152.57 1213.54 L1153.15 1213.54 L1153.74 1213.54 L1154.33 1213.54 L1154.91 1213.54 L1155.5 1213.54 L1156.09 1213.54 L1156.67 1213.54 L1157.26 1213.54 L1157.84 1213.54 L1158.43 1213.54 L1159.02 1213.54 L1159.6 1213.54 L1160.19 1213.54 L1160.78 1213.54 L1161.36 1213.54 L1161.95 1213.54 L1162.54 1213.54 L1163.12 1213.54 L1163.71 1213.54 L1164.29 1213.54 L1164.88 1213.54 L1165.47 1213.54 L1166.05 1213.54 L1166.64 1213.54 L1167.23 1213.54 L1167.81 1213.54 L1168.4 1213.54 L1168.99 1213.54 L1169.57 1213.54 L1170.16 1213.54 L1170.75 1213.54 L1171.33 1213.54 L1171.92 1213.54 L1172.5 1213.54 L1173.09 1213.54 L1173.68 1213.54 L1174.26 1213.54 L1174.85 1213.54 L1175.44 1213.54 L1176.02 1213.54 L1176.61 1213.54 L1177.2 1213.54 L1177.78 1213.54 L1178.37 1213.54 L1178.96 1213.54 L1179.54 1213.54 L1180.13 1213.54 L1180.71 1213.54 L1181.3 1213.54 L1181.89 1213.54 L1182.47 1213.54 L1183.06 1213.54 L1183.65 1213.54 L1184.23 1213.54 L1184.82 1213.54 L1185.41 1213.54 L1185.99 1213.54 L1186.58 1213.54 L1187.16 1213.54 L1187.75 1213.54 L1188.34 1213.54 L1188.92 1213.54 L1189.51 1213.54 L1190.1 1213.54 L1190.68 1213.54 L1191.27 1213.54 L1191.86 1213.54 L1192.44 1213.54 L1193.03 1213.54 L1193.62 1213.54 L1194.2 1213.54 L1194.79 1213.54 L1195.37 1213.54 L1195.96 1213.54 L1196.55 1213.54 L1197.13 1213.54 L1197.72 1213.54 L1198.31 1213.54 L1198.89 1213.54 L1199.48 1213.54 L1200.07 1213.54 L1200.65 1213.54 L1201.24 1213.54 L1201.83 1213.54 L1202.41 1213.54 L1203 1213.54 L1203.58 1213.54 L1204.17 1213.54 L1204.76 1213.54 L1205.34 1213.54 L1205.93 1213.54 L1206.52 1213.54 L1207.1 1213.54 L1207.69 1213.54 L1208.28 1213.54 L1208.86 1213.54 L1209.45 1213.54 L1210.03 1213.54 L1210.62 1213.54 L1211.21 1213.54 L1211.79 1213.54 L1212.38 1213.54 L1212.97 1213.54 L1213.55 1213.54 L1214.14 1213.54 L1214.73 1213.54 L1215.31 1213.54 L1215.9 1213.54 L1216.49 1213.54 L1217.07 1213.54 L1217.66 1213.54 L1218.24 1213.54 L1218.83 1213.54 L1219.42 1213.54 L1220 1213.54 L1220.59 1213.54 L1221.18 1213.54 L1221.76 1213.54 L1222.35 1213.54 L1222.94 1213.54 L1223.52 1213.54 L1224.11 1213.54 L1224.7 1213.54 L1225.28 1213.54 L1225.87 1213.54 L1226.45 1213.54 L1227.04 1213.54 L1227.63 1213.54 L1228.21 1213.54 L1228.8 1213.54 L1229.39 1213.54 L1229.97 1213.54 L1230.56 1213.54 L1231.15 1213.54 L1231.73 1213.54 L1232.32 1213.54 L1232.91 1213.54 L1233.49 1213.54 L1234.08 1213.54 L1234.66 1213.54 L1235.25 1213.54 L1235.84 1213.54 L1236.42 1213.54 L1237.01 1213.54 L1237.6 1213.54 L1238.18 1213.54 L1238.77 1213.54 L1239.36 1213.54 L1239.94 1213.54 L1240.53 1213.54 L1241.11 1213.54 L1241.7 1213.54 L1242.29 1213.54 L1242.87 1213.54 L1243.46 1213.54 L1244.05 1213.54 L1244.63 1213.54 L1245.22 1213.54 L1245.81 1213.54 L1246.39 1213.54 L1246.98 1213.54 L1247.57 1213.54 L1248.15 1213.54 L1248.74 1213.54 L1249.32 1213.54 L1249.91 1213.54 L1250.5 1213.54 L1251.08 1213.54 L1251.67 1213.54 L1252.26 1213.54 L1252.84 1213.54 L1253.43 1213.54 L1254.02 1213.54 L1254.6 1213.54 L1255.19 1213.54 L1255.78 1213.54 L1256.36 1213.54 L1256.95 1213.54 L1257.53 1213.54 L1258.12 1213.54 L1258.71 1213.54 L1259.29 1213.54 L1259.88 1213.54 L1260.47 1213.54 L1261.05 1213.54 L1261.64 1213.54 L1262.23 1213.54 L1262.81 1213.54 L1263.4 1213.54 L1263.98 1213.54 L1264.57 1213.54 L1265.16 1213.54 L1265.74 1213.54 L1266.33 1213.54 L1266.92 1213.54 L1267.5 1213.54 L1268.09 1213.54 L1268.68 1213.54 L1269.26 1213.54 L1269.85 1213.54 L1270.44 1213.54 L1271.02 1213.54 L1271.61 1213.54 L1272.19 1213.54 L1272.78 1213.54 L1273.37 1213.54 L1273.95 1213.54 L1274.54 1213.54 L1275.13 1213.54 L1275.71 1213.54 L1276.3 1213.54 L1276.89 1213.54 L1277.47 1213.54 L1278.06 1213.54 L1278.65 1213.54 L1279.23 1213.54 L1279.82 1213.54 L1280.4 1213.54 L1280.99 1213.54 L1281.58 1213.54 L1282.16 1213.54 L1282.75 1213.54 L1283.34 1213.54 L1283.92 1213.54 L1284.51 1213.54 L1285.1 1213.54 L1285.68 1213.54 L1286.27 1213.54 L1286.86 1213.54 L1287.44 1213.54 L1288.03 1213.54 L1288.61 1213.54 L1289.2 1213.54 L1289.79 1213.54 L1290.37 1213.54 L1290.96 1213.54 L1291.55 1213.54 L1292.13 1213.54 L1292.72 1213.54 L1293.31 1213.54 L1293.89 1213.54 L1294.48 1213.54 L1295.06 1213.54 L1295.65 1213.54 L1296.24 1213.54 L1296.82 1213.54 L1297.41 1213.54 L1298 1213.54 L1298.58 1213.54 L1299.17 1213.54 L1299.76 1213.54 L1300.34 1213.54 L1300.93 1213.54 L1301.52 1213.54 L1302.1 1213.54 L1302.69 1213.54 L1303.27 1213.54 L1303.86 1213.54 L1304.45 1213.54 L1305.03 1213.54 L1305.62 1213.54 L1306.21 1213.54 L1306.79 1213.54 L1307.38 1213.54 L1307.97 1213.54 L1308.55 1213.54 L1309.14 1213.54 L1309.73 1213.54 L1310.31 1213.54 L1310.9 1213.54 L1311.48 1213.54 L1312.07 1213.54 L1312.66 1213.54 L1313.24 1213.54 L1313.83 1213.54 L1314.42 1213.54 L1315 1213.54 L1315.59 1213.54 L1316.18 1213.54 L1316.76 1213.54 L1317.35 1213.54 L1317.93 1213.54 L1318.52 1213.54 L1319.11 1213.54 L1319.69 1213.54 L1320.28 1213.54 L1320.87 1213.54 L1321.45 1213.54 L1322.04 1213.54 L1322.63 1213.54 L1323.21 1213.54 L1323.8 1213.54 L1324.39 1213.54 L1324.97 1213.54 L1325.56 1213.54 L1326.14 1213.54 L1326.73 1213.54 L1327.32 1213.54 L1327.9 1213.54 L1328.49 1213.54 L1329.08 1213.54 L1329.66 1213.54 L1330.25 1213.54 L1330.84 1213.54 L1331.42 1213.54 L1332.01 1213.54 L1332.6 1213.54 L1333.18 1213.54 L1333.77 1213.54 L1334.35 1213.54 L1334.94 1213.54 L1335.53 1213.54 L1336.11 1213.54 L1336.7 1213.54 L1337.29 1213.54 L1337.87 1213.54 L1338.46 1213.54 L1339.05 1213.54 L1339.63 1213.54 L1340.22 1213.54 L1340.8 1213.54 L1341.39 1213.54 L1341.98 1213.54 L1342.56 1213.54 L1343.15 1213.54 L1343.74 1213.54 L1344.32 1213.54 L1344.91 1213.54 L1345.5 1213.54 L1346.08 1213.54 L1346.67 1213.54 L1347.26 1213.54 L1347.84 1213.54 L1348.43 1213.54 L1349.01 1213.54 L1349.6 1213.54 L1350.19 1213.54 L1350.77 1213.54 L1351.36 1213.54 L1351.95 1213.54 L1352.53 1213.54 L1353.12 1213.54 L1353.71 1213.54 L1354.29 1213.54 L1354.88 1213.54 L1355.47 1213.54 L1356.05 1213.54 L1356.64 1213.54 L1357.22 1213.54 L1357.81 1213.54 L1358.4 1213.54 L1358.98 1213.54 L1359.57 1213.54 L1360.16 1213.54 L1360.74 1213.54 L1361.33 1213.54 L1361.92 1213.54 L1362.5 1213.54 L1363.09 1213.54 L1363.68 1213.54 L1364.26 1213.54 L1364.85 1213.54 L1365.43 1213.54 L1366.02 1213.54 L1366.61 1213.54 L1367.19 1213.54 L1367.78 1213.54 L1368.37 1213.54 L1368.95 1213.54 L1369.54 1213.54 L1370.13 1213.54 L1370.71 1213.54 L1371.3 1213.54 L1371.88 1213.54 L1372.47 1213.54 L1373.06 1213.54 L1373.64 1213.54 L1374.23 1213.54 L1374.82 1213.54 L1375.4 1213.54 L1375.99 1213.54 L1376.58 1213.54 L1377.16 1213.54 L1377.75 1213.54 L1378.34 1213.54 L1378.92 1213.54 L1379.51 1213.54 L1380.09 1213.54 L1380.68 1213.54 L1381.27 1213.54 L1381.85 1213.54 L1382.44 1213.54 L1383.03 1213.54 L1383.61 1213.54 L1384.2 1213.54 L1384.79 1213.54 L1385.37 1213.54 L1385.96 1213.54 L1386.55 1213.54 L1387.13 1213.54 L1387.72 1213.54 L1388.3 1213.54 L1388.89 1213.54 L1389.48 1213.54 L1390.06 1213.54 L1390.65 1213.54 L1391.24 1213.54 L1391.82 1213.54 L1392.41 1213.54 L1393 1213.54 L1393.58 1213.54 L1394.17 1213.54 L1394.75 1213.54 L1395.34 1213.54 L1395.93 1213.54 L1396.51 1213.54 L1397.1 1213.54 L1397.69 1213.54 L1398.27 1213.54 L1398.86 1213.54 L1399.45 1213.54 L1400.03 1213.54 L1400.62 1213.54 L1401.21 1213.54 L1401.79 1213.54 L1402.38 1213.54 L1402.96 1213.54 L1403.55 1213.54 L1404.14 1213.54 L1404.72 1213.54 L1405.31 1213.54 L1405.9 1213.54 L1406.48 1213.54 L1407.07 1213.54 L1407.66 1213.54 L1408.24 1213.54 L1408.83 1213.54 L1409.42 1213.54 L1410 1213.54 L1410.59 1213.54 L1411.17 1213.54 L1411.76 1213.54 L1412.35 1213.54 L1412.93 1213.54 L1413.52 1213.54 L1414.11 1213.54 L1414.69 1213.54 L1415.28 1213.54 L1415.87 1213.54 L1416.45 1213.54 L1417.04 1213.54 L1417.63 1213.54 L1418.21 1213.54 L1418.8 1213.54 L1419.38 1213.54 L1419.97 1213.54 L1420.56 1213.54 L1421.14 1213.54 L1421.73 1213.54 L1422.32 1213.54 L1422.9 1213.54 L1423.49 1213.54 L1424.08 1213.54 L1424.66 1213.54 L1425.25 1213.54 L1425.83 1213.54 L1426.42 1213.54 L1427.01 1213.54 L1427.59 1213.54 L1428.18 1213.54 L1428.77 1213.54 L1429.35 1213.54 L1429.94 1213.54 L1430.53 1213.54 L1431.11 1213.54 L1431.7 1213.54 L1432.29 1213.54 L1432.87 1213.54 L1433.46 1213.54 L1434.04 1213.54 L1434.63 1213.54 L1435.22 1213.54 L1435.8 1213.54 L1436.39 1213.54 L1436.98 1213.54 L1437.56 1213.54 L1438.15 1213.54 L1438.74 1213.54 L1439.32 1213.54 L1439.91 1213.54 L1440.5 1213.54 L1441.08 1213.54 L1441.67 1213.54 L1442.25 1213.54 L1442.84 1213.54 L1443.43 1213.54 L1444.01 1213.54 L1444.6 1213.54 L1445.19 1213.54 L1445.77 1213.54 L1446.36 1213.54 L1446.95 1213.54 L1447.53 1213.54 L1448.12 1213.54 L1448.7 1213.54 L1449.29 1213.54 L1449.88 1213.54 L1450.46 1213.54 L1451.05 1213.54 L1451.64 1213.54 L1452.22 1213.54 L1452.81 1213.54 L1453.4 1213.54 L1453.98 1213.54 L1454.57 1213.54 L1455.16 1213.54 L1455.74 1213.54 L1456.33 1213.54 L1456.91 1213.54 L1457.5 1213.54 L1458.09 1213.54 L1458.67 1213.54 L1459.26 1213.54 L1459.85 1213.54 L1460.43 1213.54 L1461.02 1213.54 L1461.61 1213.54 L1462.19 1213.54 L1462.78 1213.54 L1463.37 1213.54 L1463.95 1213.54 L1464.54 1213.54 L1465.12 1213.54 L1465.71 1213.54 L1466.3 1213.54 L1466.88 1213.54 L1467.47 1213.54 L1468.06 1213.54 L1468.64 1213.54 L1469.23 1213.54 L1469.82 1213.54 L1470.4 1213.54 L1470.99 1213.54 L1471.57 1213.54 L1472.16 1213.54 L1472.75 1213.54 L1473.33 1213.54 L1473.92 1213.54 L1474.51 1213.54 L1475.09 1213.54 L1475.68 1213.54 L1476.27 1213.54 L1476.85 1213.54 L1477.44 1213.54 L1478.03 1213.54 L1478.61 1213.54 L1479.2 1213.54 L1479.78 1213.54 L1480.37 1213.54 L1480.96 1213.54 L1481.54 1213.54 L1482.13 1213.54 L1482.72 1213.54 L1483.3 1213.54 L1483.89 1213.54 L1484.48 1213.54 L1485.06 1213.54 L1485.65 1213.54 L1486.24 1213.54 L1486.82 1213.54 L1487.41 1213.54 L1487.99 1213.54 L1488.58 1213.54 L1489.17 1213.54 L1489.75 1213.54 L1490.34 1213.54 L1490.93 1213.54 L1491.51 1213.54 L1492.1 1213.54 L1492.69 1213.54 L1493.27 1213.54 L1493.86 1213.54 L1494.45 1213.54 L1495.03 1213.54 L1495.62 1213.54 L1496.2 1213.54 L1496.79 1213.54 L1497.38 1213.54 L1497.96 1213.54 L1498.55 1213.54 L1499.14 1213.54 L1499.72 1213.54 L1500.31 1213.54 L1500.9 1213.54 L1501.48 1213.54 L1502.07 1213.54 L1502.65 1213.54 L1503.24 1213.54 L1503.83 1213.54 L1504.41 1213.54 L1505 1213.54 L1505.59 1213.54 L1506.17 1213.54 L1506.76 1213.54 L1507.35 1213.54 L1507.93 1213.54 L1508.52 1213.54 L1509.11 1213.54 L1509.69 1213.54 L1510.28 1213.54 L1510.86 1213.54 L1511.45 1213.54 L1512.04 1213.54 L1512.62 1213.54 L1513.21 1213.54 L1513.8 1213.54 L1514.38 1213.54 L1514.97 1213.54 L1515.56 1213.54 L1516.14 1213.54 L1516.73 1213.54 L1517.32 1213.54 L1517.9 1213.54 L1518.49 1213.54 L1519.07 1213.54 L1519.66 1213.54 L1520.25 1213.54 L1520.83 1213.54 L1521.42 1213.54 L1522.01 1213.54 L1522.59 1213.54 L1523.18 1213.54 L1523.77 1213.54 L1524.35 1213.54 L1524.94 1213.54 L1525.52 1213.54 L1526.11 1213.54 L1526.7 1213.54 L1527.28 1213.54 L1527.87 1213.54 L1528.46 1213.54 L1529.04 1213.54 L1529.63 1213.54 L1530.22 1213.54 L1530.8 1213.54 L1531.39 1213.54 L1531.98 1213.54 L1532.56 1213.54 L1533.15 1213.54 L1533.73 1213.54 L1534.32 1213.54 L1534.91 1213.54 L1535.49 1213.54 L1536.08 1213.54 L1536.67 1213.54 L1537.25 1213.54 L1537.84 1213.54 L1538.43 1213.54 L1539.01 1213.54 L1539.6 1213.54 L1540.19 1213.54 L1540.77 1213.54 L1541.36 1213.54 L1541.94 1213.54 L1542.53 1213.54 L1543.12 1213.54 L1543.7 1213.54 L1544.29 1213.54 L1544.88 1213.54 L1545.46 1213.54 L1546.05 1213.54 L1546.64 1213.54 L1547.22 1213.54 L1547.81 1213.54 L1548.4 1213.54 L1548.98 1213.54 L1549.57 1213.54 L1550.15 1213.54 L1550.74 1213.54 L1551.33 1213.54 L1551.91 1213.54 L1552.5 1213.54 L1553.09 1213.54 L1553.67 1213.54 L1554.26 1213.54 L1554.85 1213.54 L1555.43 1213.54 L1556.02 1213.54 L1556.6 1213.54 L1557.19 1213.54 L1557.78 1213.54 L1558.36 1213.54 L1558.95 1213.54 L1559.54 1213.54 L1560.12 1213.54 L1560.71 1213.54 L1561.3 1213.54 L1561.88 1213.54 L1562.47 1213.54 L1563.06 1213.54 L1563.64 1213.54 L1564.23 1213.54 L1564.81 1213.54 L1565.4 1213.54 L1565.99 1213.54 L1566.57 1213.54 L1567.16 1213.54 L1567.75 1213.54 L1568.33 1213.54 L1568.92 1213.54 L1569.51 1213.54 L1570.09 1213.54 L1570.68 1213.54 L1571.27 1213.54 L1571.85 1213.54 L1572.44 1213.54 L1573.02 1213.54 L1573.61 1213.54 L1574.2 1213.54 L1574.78 1213.54 L1575.37 1213.54 L1575.96 1213.54 L1576.54 1213.54 L1577.13 1213.54 L1577.72 1213.54 L1578.3 1213.54 L1578.89 1213.54 L1579.47 1213.54 L1580.06 1213.54 L1580.65 1213.54 L1581.23 1213.54 L1581.82 1213.54 L1582.41 1213.54 L1582.99 1213.54 L1583.58 1213.54 L1584.17 1213.54 L1584.75 1213.54 L1585.34 1213.54 L1585.93 1213.54 L1586.51 1213.54 L1587.1 1213.54 L1587.68 1213.54 L1588.27 1213.54 L1588.86 1213.54 L1589.44 1213.54 L1590.03 1213.54 L1590.62 1213.54 L1591.2 1213.54 L1591.79 1213.54 L1592.38 1213.54 L1592.96 1213.54 L1593.55 1213.54 L1594.14 1213.54 L1594.72 1213.54 L1595.31 1213.54 L1595.89 1213.54 L1596.48 1213.54 L1597.07 1213.54 L1597.65 1213.54 L1598.24 1213.54 L1598.83 1213.54 L1599.41 1213.54 L1600 1213.54 L1600.59 1213.54 L1601.17 1213.54 L1601.76 1213.54 L1602.34 1213.54 L1602.93 1213.54 L1603.52 1213.54 L1604.1 1213.54 L1604.69 1213.54 L1605.28 1213.54 L1605.86 1213.54 L1606.45 1213.54 L1607.04 1213.54 L1607.62 1213.54 L1608.21 1213.54 L1608.8 1213.54 L1609.38 1213.54 L1609.97 1213.54 L1610.55 1213.54 L1611.14 1213.54 L1611.73 1213.54 L1612.31 1213.54 L1612.9 1213.54 L1613.49 1213.54 L1614.07 1213.54 L1614.66 1213.54 L1615.25 1213.54 L1615.83 1213.54 L1616.42 1213.54 L1617.01 1213.54 L1617.59 1213.54 L1618.18 1213.54 L1618.76 1213.54 L1619.35 1213.54 L1619.94 1213.54 L1620.52 1213.54 L1621.11 1213.54 L1621.7 1213.54 L1622.28 1213.54 L1622.87 1213.54 L1623.46 1213.54 L1624.04 1213.54 L1624.63 1213.54 L1625.22 1213.54 L1625.8 1213.54 L1626.39 1213.54 L1626.97 1213.54 L1627.56 1213.54 L1628.15 1213.54 L1628.73 1213.54 L1629.32 1213.54 L1629.91 1213.54 L1630.49 1213.54 L1631.08 1213.54 L1631.67 1213.54 L1632.25 1213.54 L1632.84 1213.54 L1633.42 1213.54 L1634.01 1213.54 L1634.6 1213.54 L1635.18 1213.54 L1635.77 1213.54 L1636.36 1213.54 L1636.94 1213.54 L1637.53 1213.54 L1638.12 1213.54 L1638.7 1213.54 L1639.29 1213.54 L1639.88 1213.54 L1640.46 1213.54 L1641.05 1213.54 L1641.63 1213.54 L1642.22 1213.54 L1642.81 1213.54 L1643.39 1213.54 L1643.98 1213.54 L1644.57 1213.54 L1645.15 1213.54 L1645.74 1213.54 L1646.33 1213.54 L1646.91 1213.54 L1647.5 1213.54 L1648.09 1213.54 L1648.67 1213.54 L1649.26 1213.54 L1649.84 1213.54 L1650.43 1213.54 L1651.02 1213.54 L1651.6 1213.54 L1652.19 1213.54 L1652.78 1213.54 L1653.36 1213.54 L1653.95 1213.54 L1654.54 1213.54 L1655.12 1213.54 L1655.71 1213.54 L1656.29 1213.54 L1656.88 1213.54 L1657.47 1213.54 L1658.05 1213.54 L1658.64 1213.54 L1659.23 1213.54 L1659.81 1213.54 L1660.4 1213.54 L1660.99 1213.54 L1661.57 1213.54 L1662.16 1213.54 L1662.75 1213.54 L1663.33 1213.54 L1663.92 1213.54 L1664.5 1213.54 L1665.09 1213.54 L1665.68 1213.54 L1666.26 1213.54 L1666.85 1213.54 L1667.44 1213.54 L1668.02 1213.54 L1668.61 1213.54 L1669.2 1213.54 L1669.78 1213.54 L1670.37 1213.54 L1670.96 1213.54 L1671.54 1213.54 L1672.13 1213.54 L1672.71 1213.54 L1673.3 1213.54 L1673.89 1213.54 L1674.47 1213.54 L1675.06 1213.54 L1675.65 1213.54 L1676.23 1213.54 L1676.82 1213.54 L1677.41 1213.54 L1677.99 1213.54 L1678.58 1213.54 L1679.17 1213.54 L1679.75 1213.54 L1680.34 1213.54 L1680.92 1213.54 L1681.51 1213.54 L1682.1 1213.54 L1682.68 1213.54 L1683.27 1213.54 L1683.86 1213.54 L1684.44 1213.54 L1685.03 1213.54 L1685.62 1213.54 L1686.2 1213.54 L1686.79 1213.54 L1687.37 1213.54 L1687.96 1213.54 L1688.55 1213.54 L1689.13 1213.54 L1689.72 1213.54 L1690.31 1213.54 L1690.89 1213.54 L1691.48 1213.54 L1692.07 1213.54 L1692.65 1213.54 L1693.24 1213.54 L1693.83 1213.54 L1694.41 1213.54 L1695 1213.54 L1695.58 1213.54 L1696.17 1213.54 L1696.76 1213.54 L1697.34 1213.54 L1697.93 1213.54 L1698.52 1213.54 L1699.1 1213.54 L1699.69 1213.54 L1700.28 1213.54 L1700.86 1213.54 L1701.45 1213.54 L1702.04 1213.54 L1702.62 1213.54 L1703.21 1213.54 L1703.79 1213.54 L1704.38 1213.54 L1704.97 1213.54 L1705.55 1213.54 L1706.14 1213.54 L1706.73 1213.54 L1707.31 1213.54 L1707.9 1213.54 L1708.49 1213.54 L1709.07 1213.54 L1709.66 1213.54 L1710.24 1213.54 L1710.83 1213.54 L1711.42 1213.54 L1712 1213.54 L1712.59 1213.54 L1713.18 1213.54 L1713.76 1213.54 L1714.35 1213.54 L1714.94 1213.54 L1715.52 1213.54 L1716.11 1213.54 L1716.7 1213.54 L1717.28 1213.54 L1717.87 1213.54 L1718.45 1213.54 L1719.04 1213.54 L1719.63 1213.54 L1720.21 1213.54 L1720.8 1213.54 L1721.39 1213.54 L1721.97 1213.54 L1722.56 1213.54 L1723.15 1213.54 L1723.73 1213.54 L1724.32 1213.54 L1724.91 1213.54 L1725.49 1213.54 L1726.08 1213.54 L1726.66 1213.54 L1727.25 1213.54 L1727.84 1213.54 L1728.42 1213.54 L1729.01 1213.54 L1729.6 1213.54 L1730.18 1213.54 L1730.77 1213.54 L1731.36 1213.54 L1731.94 1213.54 L1732.53 1213.54 L1733.11 1213.54 L1733.7 1213.54 L1734.29 1213.54 L1734.87 1213.54 L1735.46 1213.54 L1736.05 1213.54 L1736.63 1213.54 L1737.22 1213.54 L1737.81 1213.54 L1738.39 1213.54 L1738.98 1213.54 L1739.57 1213.54 L1740.15 1213.54 L1740.74 1213.54 L1741.32 1213.54 L1741.91 1213.54 L1742.5 1213.54 L1743.08 1213.54 L1743.67 1213.54 L1744.26 1213.54 L1744.84 1213.54 L1745.43 1213.54 L1746.02 1213.54 L1746.6 1213.54 L1747.19 1213.54 L1747.78 1213.54 L1748.36 1213.54 L1748.95 1213.54 L1749.53 1213.54 L1750.12 1213.54 L1750.71 1213.54 L1751.29 1213.54 L1751.88 1213.54 L1752.47 1213.54 L1753.05 1213.54 L1753.64 1213.54 L1754.23 1213.54 L1754.81 1213.54 L1755.4 1213.54 L1755.99 1213.54 L1756.57 1213.54 L1757.16 1213.54 L1757.74 1213.54 L1758.33 1213.54 L1758.92 1213.54 L1759.5 1213.54 L1760.09 1213.54 L1760.68 1213.54 L1761.26 1213.54 L1761.85 1213.54 L1762.44 1213.54 L1763.02 1213.54 L1763.61 1213.54 L1764.19 1213.54 L1764.78 1213.54 L1765.37 1213.54 L1765.95 1213.54 L1766.54 1213.54 L1767.13 1213.54 L1767.71 1213.54 L1768.3 1213.54 L1768.89 1213.54 L1769.47 1213.54 L1770.06 1213.54 L1770.65 1213.54 L1771.23 1213.54 L1771.82 1213.54 L1772.4 1213.54 L1772.99 1213.54 L1773.58 1213.54 L1774.16 1213.54 L1774.75 1213.54 L1775.34 1213.54 L1775.92 1213.54 L1776.51 1213.54 L1777.1 1213.54 L1777.68 1213.54 L1778.27 1213.54 L1778.86 1213.54 L1779.44 1213.54 L1780.03 1213.54 L1780.61 1213.54 L1781.2 1213.54 L1781.79 1213.54 L1782.37 1213.54 L1782.96 1213.54 L1783.55 1213.54 L1784.13 1213.54 L1784.72 1213.54 L1785.31 1213.54 L1785.89 1213.54 L1786.48 1213.54 L1787.06 1213.54 L1787.65 1213.54 L1788.24 1213.54 L1788.82 1213.54 L1789.41 1213.54 L1790 1213.54 L1790.58 1213.54 L1791.17 1213.54 L1791.76 1213.54 L1792.34 1213.54 L1792.93 1213.54 L1793.52 1213.54 L1794.1 1213.54 L1794.69 1213.54 L1795.27 1213.54 L1795.86 1213.54 L1796.45 1213.54 L1797.03 1213.54 L1797.62 1213.54 L1798.21 1213.54 L1798.79 1213.54 L1799.38 1213.54 L1799.97 1213.54 L1800.55 1213.54 L1801.14 1213.54 L1801.73 1213.54 L1802.31 1213.54 L1802.9 1213.54 L1803.48 1213.54 L1804.07 1213.54 L1804.66 1213.54 L1805.24 1213.54 L1805.83 1213.54 L1806.42 1213.54 L1807 1213.54 L1807.59 1213.54 L1808.18 1213.54 L1808.76 1213.54 L1809.35 1213.54 L1809.94 1213.54 L1810.52 1213.54 L1811.11 1213.54 L1811.69 1213.54 L1812.28 1213.54 L1812.87 1213.54 L1813.45 1213.54 L1814.04 1213.54 L1814.63 1213.54 L1815.21 1213.54 L1815.8 1213.54 L1816.39 1213.54 L1816.97 1213.54 L1817.56 1213.54 L1818.14 1213.54 L1818.73 1213.54 L1819.32 1213.54 L1819.9 1213.54 L1820.49 1213.54 L1821.08 1213.54 L1821.66 1213.54 L1822.25 1213.54 L1822.84 1213.54 L1823.42 1213.54 L1824.01 1213.54 L1824.6 1213.54 L1825.18 1213.54 L1825.77 1213.54 L1826.35 1213.54 L1826.94 1213.54 L1827.53 1213.54 L1828.11 1213.54 L1828.7 1213.54 L1829.29 1213.54 L1829.87 1213.54 L1830.46 1213.54 L1831.05 1213.54 L1831.63 1213.54 L1832.22 1213.54 L1832.81 1213.54 L1833.39 1213.54 L1833.98 1213.54 L1834.56 1213.54 L1835.15 1213.54 L1835.74 1213.54 L1836.32 1213.54 L1836.91 1213.54 L1837.5 1213.54 L1838.08 1213.54 L1838.67 1213.54 L1839.26 1213.54 L1839.84 1213.54 L1840.43 1213.54 L1841.01 1213.54 L1841.6 1213.54 L1842.19 1213.54 L1842.77 1213.54 L1843.36 1213.54 L1843.95 1213.54 L1844.53 1213.54 L1845.12 1213.54 L1845.71 1213.54 L1846.29 1213.54 L1846.88 1213.54 L1847.47 1213.54 L1848.05 1213.54 L1848.64 1213.54 L1849.22 1213.54 L1849.81 1213.54 L1850.4 1213.54 L1850.98 1213.54 L1851.57 1213.54 L1852.16 1213.54 L1852.74 1213.54 L1853.33 1213.54 L1853.92 1213.54 L1854.5 1213.54 L1855.09 1213.54 L1855.68 1213.54 L1856.26 1213.54 L1856.85 1213.54 L1857.43 1213.54 L1858.02 1213.54 L1858.61 1213.54 L1859.19 1213.54 L1859.78 1213.54 L1860.37 1213.54 L1860.95 1213.54 L1861.54 1213.54 L1862.13 1213.54 L1862.71 1213.54 L1863.3 1213.54 L1863.88 1213.54 L1864.47 1213.54 L1865.06 1213.54 L1865.64 1213.54 L1866.23 1213.54 L1866.82 1213.54 L1867.4 1213.54 L1867.99 1213.54 L1868.58 1213.54 L1869.16 1213.54 L1869.75 1213.54 L1870.34 1213.54 L1870.92 1213.54 L1871.51 1213.54 L1872.09 1213.54 L1872.68 1213.54 L1873.27 1213.54 L1873.85 1213.54 L1874.44 1213.54 L1875.03 1213.54 L1875.61 1213.54 L1876.2 1213.54 L1876.79 1213.54 L1877.37 1213.54 L1877.96 1213.54 L1878.55 1213.54 L1879.13 1213.54 L1879.72 1213.54 L1880.3 1213.54 L1880.89 1213.54 L1881.48 1213.54 L1882.06 1213.54 L1882.65 1213.54 L1883.24 1213.54 L1883.82 1213.54 L1884.41 1213.54 L1885 1213.54 L1885.58 1213.54 L1886.17 1213.54 L1886.76 1213.54 L1887.34 1213.54 L1887.93 1213.54 L1888.51 1213.54 L1889.1 1213.54 L1889.69 1213.54 L1890.27 1213.54 L1890.86 1213.54 L1891.45 1213.54 L1892.03 1213.54 L1892.62 1213.54 L1893.21 1213.54 L1893.79 1213.54 L1894.38 1213.54 L1894.96 1213.54 L1895.55 1213.54 L1896.14 1213.54 L1896.72 1213.54 L1897.31 1213.54 L1897.9 1213.54 L1898.48 1213.54 L1899.07 1213.54 L1899.66 1213.54 L1900.24 1213.54 L1900.83 1213.54 L1901.42 1213.54 L1902 1213.54 L1902.59 1213.54 L1903.17 1213.54 L1903.76 1213.54 L1904.35 1213.54 L1904.93 1213.54 L1905.52 1213.54 L1906.11 1213.54 L1906.69 1213.54 L1907.28 1213.54 L1907.87 1213.54 L1908.45 1213.54 L1909.04 1213.54 L1909.63 1213.54 L1910.21 1213.54 L1910.8 1213.54 L1911.38 1213.54 L1911.97 1213.54 L1912.56 1213.54 L1913.14 1213.54 L1913.73 1213.54 L1914.32 1213.54 L1914.9 1213.54 L1915.49 1213.54 L1916.08 1213.54 L1916.66 1213.54 L1917.25 1213.54 L1917.83 1213.54 L1918.42 1213.54 L1919.01 1213.54 L1919.59 1213.54 L1920.18 1213.54 L1920.77 1213.54 L1921.35 1213.54 L1921.94 1213.54 L1922.53 1213.54 L1923.11 1213.54 L1923.7 1213.54 L1924.29 1213.54 L1924.87 1213.54 L1925.46 1213.54 L1926.04 1213.54 L1926.63 1213.54 L1927.22 1213.54 L1927.8 1213.54 L1928.39 1213.54 L1928.98 1213.54 L1929.56 1213.54 L1930.15 1213.54 L1930.74 1213.54 L1931.32 1213.54 L1931.91 1213.54 L1932.5 1213.54 L1933.08 1213.54 L1933.67 1213.54 L1934.25 1213.54 L1934.84 1213.54 L1935.43 1213.54 L1936.01 1213.54 L1936.6 1213.54 L1937.19 1213.54 L1937.77 1213.54 L1938.36 1213.54 L1938.95 1213.54 L1939.53 1213.54 L1940.12 1213.54 L1940.71 1213.54 L1941.29 1213.54 L1941.88 1213.54 L1942.46 1213.54 L1943.05 1213.54 L1943.64 1213.54 L1944.22 1213.54 L1944.81 1213.54 L1945.4 1213.54 L1945.98 1213.54 L1946.57 1213.54 L1947.16 1213.54 L1947.74 1213.54 L1948.33 1213.54 L1948.91 1213.54 L1949.5 1213.54 L1950.09 1213.54 L1950.67 1213.54 L1951.26 1213.54 L1951.85 1213.54 L1952.43 1213.54 L1953.02 1213.54 L1953.61 1213.54 L1954.19 1213.54 L1954.78 1213.54 L1955.37 1213.54 L1955.95 1213.54 L1956.54 1213.54 L1957.12 1213.54 L1957.71 1213.54 L1958.3 1213.54 L1958.88 1213.54 L1959.47 1213.54 L1960.06 1213.54 L1960.64 1213.54 L1961.23 1213.54 L1961.82 1213.54 L1962.4 1213.54 L1962.99 1213.54 L1963.58 1213.54 L1964.16 1213.54 L1964.75 1213.54 L1965.33 1213.54 L1965.92 1213.54 L1966.51 1213.54 L1967.09 1213.54 L1967.68 1213.54 L1968.27 1213.54 L1968.85 1213.54 L1969.44 1213.54 L1970.03 1213.54 L1970.61 1213.54 L1971.2 1213.54 L1971.78 1213.54 L1972.37 1213.54 L1972.96 1213.54 L1973.54 1213.54 L1974.13 1213.54 L1974.72 1213.54 L1975.3 1213.54 L1975.89 1213.54 L1976.48 1213.54 L1977.06 1213.54 L1977.65 1213.54 L1978.24 1213.54 L1978.82 1213.54 L1979.41 1213.54 L1979.99 1213.54 L1980.58 1213.54 L1981.17 1213.54 L1981.75 1213.54 L1982.34 1213.54 L1982.93 1213.54 L1983.51 1213.54 L1984.1 1213.54 L1984.69 1213.54 L1985.27 1213.54 L1985.86 1213.54 L1986.45 1213.54 L1987.03 1213.54 L1987.62 1213.54 L1988.2 1213.54 L1988.79 1213.54 L1989.38 1213.54 L1989.96 1213.54 L1990.55 1213.54 L1991.14 1213.54 L1991.72 1213.54 L1992.31 1213.54 L1992.9 1213.54 L1993.48 1213.54 L1994.07 1213.54 L1994.65 1213.54 L1995.24 1213.54 L1995.83 1213.54 L1996.41 1213.54 L1997 1213.54 L1997.59 1213.54 L1998.17 1213.54 L1998.76 1213.54 L1999.35 1213.54 L1999.93 1213.54 L2000.52 1213.54 L2001.11 1213.54 L2001.69 1213.54 L2002.28 1213.54 L2002.86 1213.54 L2003.45 1213.54 L2004.04 1213.54 L2004.62 1213.54 L2005.21 1213.54 L2005.8 1213.54 L2006.38 1213.54 L2006.97 1213.54 L2007.56 1213.54 L2008.14 1213.54 L2008.73 1213.54 L2009.32 1213.54 L2009.9 1213.54 L2010.49 1213.54 L2011.07 1213.54 L2011.66 1213.54 L2012.25 1213.54 L2012.83 1213.54 L2013.42 1213.54 L2014.01 1213.54 L2014.59 1213.54 L2015.18 1213.54 L2015.77 1213.54 L2016.35 1213.54 L2016.94 1213.54 L2017.53 1213.54 L2018.11 1213.54 L2018.7 1213.54 L2019.28 1213.54 L2019.87 1213.54 L2020.46 1213.54 L2021.04 1213.54 L2021.63 1213.54 L2022.22 1213.54 L2022.8 1213.54 L2023.39 1213.54 L2023.98 1213.54 L2024.56 1213.54 L2025.15 1213.54 L2025.73 1213.54 L2026.32 1213.54 L2026.91 1213.54 L2027.49 1213.54 L2028.08 1213.54 L2028.67 1213.54 L2029.25 1213.54 L2029.84 1213.54 L2030.43 1213.54 L2031.01 1213.54 L2031.6 1213.54 L2032.19 1213.54 L2032.77 1213.54 L2033.36 1213.54 L2033.94 1213.54 L2034.53 1213.54 L2035.12 1213.54 L2035.7 1213.54 L2036.29 1213.54 L2036.88 1213.54 L2037.46 1213.54 L2038.05 1213.54 L2038.64 1213.54 L2039.22 1213.54 L2039.81 1213.54 L2040.4 1213.54 L2040.98 1213.54 L2041.57 1213.54 L2042.15 1213.54 L2042.74 1213.54 L2043.33 1213.54 L2043.91 1213.54 L2044.5 1213.54 L2045.09 1213.54 L2045.67 1213.54 L2046.26 1213.54 L2046.85 1213.54 L2047.43 1213.54 L2048.02 1213.54 L2048.6 1213.54 L2049.19 1213.54 L2049.78 1213.54 L2050.36 1213.54 L2050.95 1213.54 L2051.54 1213.54 L2052.12 1213.54 L2052.71 1213.54 L2053.3 1213.54 L2053.88 1213.54 L2054.47 1213.54 L2055.06 1213.54 L2055.64 1213.54 L2056.23 1213.54 L2056.81 1213.54 L2057.4 1213.54 L2057.99 1213.54 L2058.57 1213.54 L2059.16 1213.54 L2059.75 1213.54 L2060.33 1213.54 L2060.92 1213.54 L2061.51 1213.54 L2062.09 1213.54 L2062.68 1213.54 L2063.27 1213.54 L2063.85 1213.54 L2064.44 1213.54 L2065.02 1213.54 L2065.61 1213.54 L2066.2 1213.54 L2066.78 1213.54 L2067.37 1213.54 L2067.96 1213.54 L2068.54 1213.54 L2069.13 1213.54 L2069.72 1213.54 L2070.3 1213.54 L2070.89 1213.54 L2071.48 1213.54 L2072.06 1213.54 L2072.65 1213.54 L2073.23 1213.54 L2073.82 1213.54 L2074.41 1213.54 L2074.99 1213.54 L2075.58 1213.54 L2076.17 1213.54 L2076.75 1213.54 L2077.34 1213.54 L2077.93 1213.54 L2078.51 1213.54 L2079.1 1213.54 L2079.68 1213.54 L2080.27 1213.54 L2080.86 1213.54 L2081.44 1213.54 L2082.03 1213.54 L2082.62 1213.54 L2083.2 1213.54 L2083.79 1213.54 L2084.38 1213.54 L2084.96 1213.54 L2085.55 1213.54 L2086.14 1213.54 L2086.72 1213.54 L2087.31 1213.54 L2087.89 1213.54 L2088.48 1213.54 L2089.07 1213.54 L2089.65 1213.54 L2090.24 1213.54 L2090.83 1213.54 L2091.41 1213.54 L2092 1213.54 L2092.59 1213.54 L2093.17 1213.54 L2093.76 1213.54 L2094.35 1213.54 L2094.93 1213.54 L2095.52 1213.54 L2096.1 1213.54 L2096.69 1213.54 L2097.28 1213.54 L2097.86 1213.54 L2098.45 1213.54 L2099.04 1213.54 L2099.62 1213.54 L2100.21 1213.54 L2100.8 1213.54 L2101.38 1213.54 L2101.97 1213.54 L2102.55 1213.54 L2103.14 1213.54 L2103.73 1213.54 L2104.31 1213.54 L2104.9 1213.54 L2105.49 1213.54 L2106.07 1213.54 L2106.66 1213.54 L2107.25 1213.54 L2107.83 1213.54 L2108.42 1213.54 L2109.01 1213.54 L2109.59 1213.54 L2110.18 1213.54 L2110.76 1213.54 L2111.35 1213.54 L2111.94 1213.54 L2112.52 1213.54 L2113.11 1213.54 L2113.7 1213.54 L2114.28 1213.54 L2114.87 1213.54 L2115.46 1213.54 L2116.04 1213.54 L2116.63 1213.54 L2117.22 1213.54 L2117.8 1213.54 L2118.39 1213.54 L2118.97 1213.54 L2119.56 1213.54 L2120.15 1213.54 L2120.73 1213.54 L2121.32 1213.54 L2121.91 1213.54 L2122.49 1213.54 L2123.08 1213.54 L2123.67 1213.54 L2124.25 1213.54 L2124.84 1213.54 L2125.42 1213.54 L2126.01 1213.54 L2126.6 1213.54 L2127.18 1213.54 L2127.77 1213.54 L2128.36 1213.54 L2128.94 1213.54 L2129.53 1213.54 L2130.12 1213.54 L2130.7 1213.54 L2131.29 1213.54 L2131.88 1213.54 L2132.46 1213.54 L2133.05 1213.54 L2133.63 1213.54 L2134.22 1213.54 L2134.81 1213.54 L2135.39 1213.54 L2135.98 1213.54 L2136.57 1213.54 L2137.15 1213.54 L2137.74 1213.54 L2138.33 1213.54 L2138.91 1213.54 L2139.5 1213.54 L2140.09 1213.54 L2140.67 1213.54 L2141.26 1213.54 L2141.84 1213.54 L2142.43 1213.54 L2143.02 1213.54 L2143.6 1213.54 L2144.19 1213.54 L2144.78 1213.54 L2145.36 1213.54 L2145.95 1213.54 L2146.54 1213.54 L2147.12 1213.54 L2147.71 1213.54 L2148.3 1213.54 L2148.88 1213.54 L2149.47 1213.54 L2150.05 1213.54 L2150.64 1213.54 L2151.23 1213.54 L2151.81 1213.54 L2152.4 1213.54 L2152.99 1213.54 L2153.57 1213.54 L2154.16 1213.54 L2154.75 1213.54 L2155.33 1213.54 L2155.92 1213.54 L2156.5 1213.54 L2157.09 1213.54 L2157.68 1213.54 L2158.26 1213.54 L2158.26 1213.36 L2157.68 1213.36 L2157.09 1213.36 L2156.5 1213.36 L2155.92 1213.36 L2155.33 1213.36 L2154.75 1213.36 L2154.16 1213.36 L2153.57 1213.36 L2152.99 1213.36 L2152.4 1213.36 L2151.81 1213.36 L2151.23 1213.36 L2150.64 1213.36 L2150.05 1213.36 L2149.47 1213.36 L2148.88 1213.36 L2148.3 1213.36 L2147.71 1213.36 L2147.12 1213.36 L2146.54 1213.36 L2145.95 1213.36 L2145.36 1213.36 L2144.78 1213.36 L2144.19 1213.36 L2143.6 1213.36 L2143.02 1213.36 L2142.43 1213.36 L2141.84 1213.36 L2141.26 1213.36 L2140.67 1213.36 L2140.09 1213.36 L2139.5 1213.36 L2138.91 1213.36 L2138.33 1213.36 L2137.74 1213.36 L2137.15 1213.36 L2136.57 1213.36 L2135.98 1213.36 L2135.39 1213.36 L2134.81 1213.36 L2134.22 1213.36 L2133.63 1213.36 L2133.05 1213.36 L2132.46 1213.36 L2131.88 1213.36 L2131.29 1213.36 L2130.7 1213.36 L2130.12 1213.36 L2129.53 1213.36 L2128.94 1213.36 L2128.36 1213.36 L2127.77 1213.36 L2127.18 1213.36 L2126.6 1213.36 L2126.01 1213.36 L2125.42 1213.36 L2124.84 1213.36 L2124.25 1213.36 L2123.67 1213.36 L2123.08 1213.36 L2122.49 1213.36 L2121.91 1213.36 L2121.32 1213.36 L2120.73 1213.36 L2120.15 1213.36 L2119.56 1213.36 L2118.97 1213.36 L2118.39 1213.36 L2117.8 1213.36 L2117.22 1213.36 L2116.63 1213.36 L2116.04 1213.36 L2115.46 1213.36 L2114.87 1213.36 L2114.28 1213.36 L2113.7 1213.36 L2113.11 1213.36 L2112.52 1213.36 L2111.94 1213.36 L2111.35 1213.36 L2110.76 1213.36 L2110.18 1213.36 L2109.59 1213.36 L2109.01 1213.36 L2108.42 1213.36 L2107.83 1213.36 L2107.25 1213.36 L2106.66 1213.36 L2106.07 1213.36 L2105.49 1213.36 L2104.9 1213.36 L2104.31 1213.36 L2103.73 1213.36 L2103.14 1213.36 L2102.55 1213.36 L2101.97 1213.36 L2101.38 1213.36 L2100.8 1213.36 L2100.21 1213.36 L2099.62 1213.36 L2099.04 1213.36 L2098.45 1213.36 L2097.86 1213.36 L2097.28 1213.36 L2096.69 1213.36 L2096.1 1213.36 L2095.52 1213.36 L2094.93 1213.36 L2094.35 1213.36 L2093.76 1213.36 L2093.17 1213.36 L2092.59 1213.36 L2092 1213.36 L2091.41 1213.36 L2090.83 1213.36 L2090.24 1213.36 L2089.65 1213.36 L2089.07 1213.36 L2088.48 1213.36 L2087.89 1213.36 L2087.31 1213.36 L2086.72 1213.36 L2086.14 1213.36 L2085.55 1213.36 L2084.96 1213.36 L2084.38 1213.36 L2083.79 1213.36 L2083.2 1213.36 L2082.62 1213.36 L2082.03 1213.36 L2081.44 1213.36 L2080.86 1213.36 L2080.27 1213.36 L2079.68 1213.36 L2079.1 1213.36 L2078.51 1213.36 L2077.93 1213.36 L2077.34 1213.36 L2076.75 1213.36 L2076.17 1213.36 L2075.58 1213.36 L2074.99 1213.36 L2074.41 1213.36 L2073.82 1213.36 L2073.23 1213.36 L2072.65 1213.36 L2072.06 1213.36 L2071.48 1213.36 L2070.89 1213.36 L2070.3 1213.36 L2069.72 1213.36 L2069.13 1213.36 L2068.54 1213.36 L2067.96 1213.36 L2067.37 1213.36 L2066.78 1213.36 L2066.2 1213.36 L2065.61 1213.36 L2065.02 1213.36 L2064.44 1213.36 L2063.85 1213.36 L2063.27 1213.36 L2062.68 1213.36 L2062.09 1213.36 L2061.51 1213.36 L2060.92 1213.36 L2060.33 1213.36 L2059.75 1213.36 L2059.16 1213.36 L2058.57 1213.36 L2057.99 1213.36 L2057.4 1213.36 L2056.81 1213.36 L2056.23 1213.36 L2055.64 1213.36 L2055.06 1213.36 L2054.47 1213.36 L2053.88 1213.36 L2053.3 1213.36 L2052.71 1213.36 L2052.12 1213.36 L2051.54 1213.36 L2050.95 1213.36 L2050.36 1213.36 L2049.78 1213.36 L2049.19 1213.36 L2048.6 1213.36 L2048.02 1213.36 L2047.43 1213.36 L2046.85 1213.36 L2046.26 1213.36 L2045.67 1213.36 L2045.09 1213.36 L2044.5 1213.36 L2043.91 1213.36 L2043.33 1213.36 L2042.74 1213.36 L2042.15 1213.36 L2041.57 1213.36 L2040.98 1213.36 L2040.4 1213.36 L2039.81 1213.36 L2039.22 1213.36 L2038.64 1213.36 L2038.05 1213.36 L2037.46 1213.36 L2036.88 1213.36 L2036.29 1213.36 L2035.7 1213.36 L2035.12 1213.36 L2034.53 1213.36 L2033.94 1213.36 L2033.36 1213.36 L2032.77 1213.36 L2032.19 1213.36 L2031.6 1213.36 L2031.01 1213.36 L2030.43 1213.36 L2029.84 1213.36 L2029.25 1213.36 L2028.67 1213.36 L2028.08 1213.36 L2027.49 1213.36 L2026.91 1213.36 L2026.32 1213.36 L2025.73 1213.36 L2025.15 1213.36 L2024.56 1213.36 L2023.98 1213.36 L2023.39 1213.36 L2022.8 1213.36 L2022.22 1213.36 L2021.63 1213.36 L2021.04 1213.36 L2020.46 1213.36 L2019.87 1213.36 L2019.28 1213.36 L2018.7 1213.36 L2018.11 1213.36 L2017.53 1213.36 L2016.94 1213.36 L2016.35 1213.36 L2015.77 1213.36 L2015.18 1213.36 L2014.59 1213.36 L2014.01 1213.36 L2013.42 1213.36 L2012.83 1213.36 L2012.25 1213.36 L2011.66 1213.36 L2011.07 1213.36 L2010.49 1213.36 L2009.9 1213.36 L2009.32 1213.36 L2008.73 1213.36 L2008.14 1213.36 L2007.56 1213.36 L2006.97 1213.36 L2006.38 1213.36 L2005.8 1213.36 L2005.21 1213.36 L2004.62 1213.36 L2004.04 1213.36 L2003.45 1213.36 L2002.86 1213.36 L2002.28 1213.36 L2001.69 1213.36 L2001.11 1213.36 L2000.52 1213.36 L1999.93 1213.36 L1999.35 1213.36 L1998.76 1213.36 L1998.17 1213.36 L1997.59 1213.36 L1997 1213.36 L1996.41 1213.36 L1995.83 1213.36 L1995.24 1213.36 L1994.65 1213.36 L1994.07 1213.36 L1993.48 1213.36 L1992.9 1213.36 L1992.31 1213.36 L1991.72 1213.36 L1991.14 1213.36 L1990.55 1213.36 L1989.96 1213.36 L1989.38 1213.36 L1988.79 1213.36 L1988.2 1213.36 L1987.62 1213.36 L1987.03 1213.36 L1986.45 1213.36 L1985.86 1213.36 L1985.27 1213.36 L1984.69 1213.36 L1984.1 1213.36 L1983.51 1213.36 L1982.93 1213.36 L1982.34 1213.36 L1981.75 1213.36 L1981.17 1213.36 L1980.58 1213.36 L1979.99 1213.36 L1979.41 1213.36 L1978.82 1213.36 L1978.24 1213.36 L1977.65 1213.36 L1977.06 1213.36 L1976.48 1213.36 L1975.89 1213.36 L1975.3 1213.36 L1974.72 1213.36 L1974.13 1213.36 L1973.54 1213.36 L1972.96 1213.36 L1972.37 1213.36 L1971.78 1213.36 L1971.2 1213.36 L1970.61 1213.36 L1970.03 1213.36 L1969.44 1213.36 L1968.85 1213.36 L1968.27 1213.36 L1967.68 1213.36 L1967.09 1213.36 L1966.51 1213.36 L1965.92 1213.36 L1965.33 1213.36 L1964.75 1213.36 L1964.16 1213.36 L1963.58 1213.36 L1962.99 1213.36 L1962.4 1213.36 L1961.82 1213.36 L1961.23 1213.36 L1960.64 1213.36 L1960.06 1213.36 L1959.47 1213.36 L1958.88 1213.36 L1958.3 1213.36 L1957.71 1213.36 L1957.12 1213.36 L1956.54 1213.36 L1955.95 1213.36 L1955.37 1213.36 L1954.78 1213.36 L1954.19 1213.36 L1953.61 1213.36 L1953.02 1213.36 L1952.43 1213.36 L1951.85 1213.36 L1951.26 1213.36 L1950.67 1213.36 L1950.09 1213.36 L1949.5 1213.36 L1948.91 1213.36 L1948.33 1213.36 L1947.74 1213.36 L1947.16 1213.36 L1946.57 1213.36 L1945.98 1213.36 L1945.4 1213.36 L1944.81 1213.36 L1944.22 1213.36 L1943.64 1213.36 L1943.05 1213.36 L1942.46 1213.36 L1941.88 1213.36 L1941.29 1213.36 L1940.71 1213.36 L1940.12 1213.36 L1939.53 1213.36 L1938.95 1213.36 L1938.36 1213.36 L1937.77 1213.36 L1937.19 1213.36 L1936.6 1213.36 L1936.01 1213.36 L1935.43 1213.36 L1934.84 1213.36 L1934.25 1213.36 L1933.67 1213.36 L1933.08 1213.36 L1932.5 1213.36 L1931.91 1213.36 L1931.32 1213.36 L1930.74 1213.36 L1930.15 1213.36 L1929.56 1213.36 L1928.98 1213.36 L1928.39 1213.36 L1927.8 1213.36 L1927.22 1213.36 L1926.63 1213.36 L1926.04 1213.36 L1925.46 1213.36 L1924.87 1213.36 L1924.29 1213.36 L1923.7 1213.36 L1923.11 1213.36 L1922.53 1213.36 L1921.94 1213.36 L1921.35 1213.36 L1920.77 1213.36 L1920.18 1213.36 L1919.59 1213.36 L1919.01 1213.36 L1918.42 1213.36 L1917.83 1213.36 L1917.25 1213.36 L1916.66 1213.36 L1916.08 1213.36 L1915.49 1213.36 L1914.9 1213.36 L1914.32 1213.36 L1913.73 1213.36 L1913.14 1213.36 L1912.56 1213.36 L1911.97 1213.36 L1911.38 1213.36 L1910.8 1213.36 L1910.21 1213.36 L1909.63 1213.36 L1909.04 1213.36 L1908.45 1213.36 L1907.87 1213.36 L1907.28 1213.36 L1906.69 1213.36 L1906.11 1213.36 L1905.52 1213.36 L1904.93 1213.36 L1904.35 1213.36 L1903.76 1213.36 L1903.17 1213.36 L1902.59 1213.36 L1902 1213.36 L1901.42 1213.36 L1900.83 1213.36 L1900.24 1213.36 L1899.66 1213.36 L1899.07 1213.36 L1898.48 1213.36 L1897.9 1213.36 L1897.31 1213.36 L1896.72 1213.36 L1896.14 1213.36 L1895.55 1213.36 L1894.96 1213.36 L1894.38 1213.36 L1893.79 1213.36 L1893.21 1213.36 L1892.62 1213.36 L1892.03 1213.36 L1891.45 1213.36 L1890.86 1213.36 L1890.27 1213.36 L1889.69 1213.36 L1889.1 1213.36 L1888.51 1213.36 L1887.93 1213.36 L1887.34 1213.36 L1886.76 1213.36 L1886.17 1213.36 L1885.58 1213.36 L1885 1213.36 L1884.41 1213.36 L1883.82 1213.36 L1883.24 1213.36 L1882.65 1213.36 L1882.06 1213.36 L1881.48 1213.36 L1880.89 1213.36 L1880.3 1213.36 L1879.72 1213.36 L1879.13 1213.36 L1878.55 1213.36 L1877.96 1213.36 L1877.37 1213.36 L1876.79 1213.36 L1876.2 1213.36 L1875.61 1213.36 L1875.03 1213.36 L1874.44 1213.36 L1873.85 1213.36 L1873.27 1213.36 L1872.68 1213.36 L1872.09 1213.36 L1871.51 1213.36 L1870.92 1213.36 L1870.34 1213.36 L1869.75 1213.36 L1869.16 1213.36 L1868.58 1213.36 L1867.99 1213.36 L1867.4 1213.36 L1866.82 1213.36 L1866.23 1213.36 L1865.64 1213.36 L1865.06 1213.36 L1864.47 1213.36 L1863.88 1213.36 L1863.3 1213.36 L1862.71 1213.36 L1862.13 1213.36 L1861.54 1213.36 L1860.95 1213.36 L1860.37 1213.36 L1859.78 1213.36 L1859.19 1213.36 L1858.61 1213.36 L1858.02 1213.36 L1857.43 1213.36 L1856.85 1213.36 L1856.26 1213.36 L1855.68 1213.36 L1855.09 1213.36 L1854.5 1213.36 L1853.92 1213.36 L1853.33 1213.36 L1852.74 1213.36 L1852.16 1213.36 L1851.57 1213.36 L1850.98 1213.36 L1850.4 1213.36 L1849.81 1213.36 L1849.22 1213.36 L1848.64 1213.36 L1848.05 1213.36 L1847.47 1213.36 L1846.88 1213.36 L1846.29 1213.36 L1845.71 1213.36 L1845.12 1213.36 L1844.53 1213.36 L1843.95 1213.36 L1843.36 1213.36 L1842.77 1213.36 L1842.19 1213.36 L1841.6 1213.36 L1841.01 1213.36 L1840.43 1213.36 L1839.84 1213.36 L1839.26 1213.36 L1838.67 1213.36 L1838.08 1213.36 L1837.5 1213.36 L1836.91 1213.36 L1836.32 1213.36 L1835.74 1213.36 L1835.15 1213.36 L1834.56 1213.36 L1833.98 1213.36 L1833.39 1213.36 L1832.81 1213.36 L1832.22 1213.36 L1831.63 1213.36 L1831.05 1213.36 L1830.46 1213.36 L1829.87 1213.36 L1829.29 1213.36 L1828.7 1213.36 L1828.11 1213.36 L1827.53 1213.36 L1826.94 1213.36 L1826.35 1213.36 L1825.77 1213.36 L1825.18 1213.36 L1824.6 1213.36 L1824.01 1213.36 L1823.42 1213.36 L1822.84 1213.36 L1822.25 1213.36 L1821.66 1213.36 L1821.08 1213.36 L1820.49 1213.36 L1819.9 1213.36 L1819.32 1213.36 L1818.73 1213.36 L1818.14 1213.36 L1817.56 1213.36 L1816.97 1213.36 L1816.39 1213.36 L1815.8 1213.36 L1815.21 1213.36 L1814.63 1213.36 L1814.04 1213.36 L1813.45 1213.36 L1812.87 1213.36 L1812.28 1213.36 L1811.69 1213.36 L1811.11 1213.36 L1810.52 1213.36 L1809.94 1213.36 L1809.35 1213.36 L1808.76 1213.36 L1808.18 1213.36 L1807.59 1213.36 L1807 1213.36 L1806.42 1213.36 L1805.83 1213.36 L1805.24 1213.36 L1804.66 1213.36 L1804.07 1213.36 L1803.48 1213.36 L1802.9 1213.36 L1802.31 1213.36 L1801.73 1213.36 L1801.14 1213.36 L1800.55 1213.36 L1799.97 1213.36 L1799.38 1213.36 L1798.79 1213.36 L1798.21 1213.36 L1797.62 1213.36 L1797.03 1213.36 L1796.45 1213.36 L1795.86 1213.36 L1795.27 1213.36 L1794.69 1213.36 L1794.1 1213.36 L1793.52 1213.36 L1792.93 1213.36 L1792.34 1213.36 L1791.76 1213.36 L1791.17 1213.36 L1790.58 1213.36 L1790 1213.36 L1789.41 1213.36 L1788.82 1213.36 L1788.24 1213.36 L1787.65 1213.36 L1787.06 1213.36 L1786.48 1213.36 L1785.89 1213.36 L1785.31 1213.36 L1784.72 1213.36 L1784.13 1213.36 L1783.55 1213.36 L1782.96 1213.36 L1782.37 1213.36 L1781.79 1213.36 L1781.2 1213.36 L1780.61 1213.36 L1780.03 1213.36 L1779.44 1213.36 L1778.86 1213.36 L1778.27 1213.36 L1777.68 1213.36 L1777.1 1213.36 L1776.51 1213.36 L1775.92 1213.36 L1775.34 1213.36 L1774.75 1213.36 L1774.16 1213.36 L1773.58 1213.36 L1772.99 1213.36 L1772.4 1213.36 L1771.82 1213.36 L1771.23 1213.36 L1770.65 1213.36 L1770.06 1213.36 L1769.47 1213.36 L1768.89 1213.36 L1768.3 1213.36 L1767.71 1213.36 L1767.13 1213.36 L1766.54 1213.36 L1765.95 1213.36 L1765.37 1213.36 L1764.78 1213.36 L1764.19 1213.36 L1763.61 1213.36 L1763.02 1213.36 L1762.44 1213.36 L1761.85 1213.36 L1761.26 1213.36 L1760.68 1213.36 L1760.09 1213.36 L1759.5 1213.36 L1758.92 1213.36 L1758.33 1213.36 L1757.74 1213.36 L1757.16 1213.36 L1756.57 1213.36 L1755.99 1213.36 L1755.4 1213.36 L1754.81 1213.36 L1754.23 1213.36 L1753.64 1213.36 L1753.05 1213.36 L1752.47 1213.36 L1751.88 1213.36 L1751.29 1213.36 L1750.71 1213.36 L1750.12 1213.36 L1749.53 1213.36 L1748.95 1213.36 L1748.36 1213.36 L1747.78 1213.36 L1747.19 1213.36 L1746.6 1213.36 L1746.02 1213.36 L1745.43 1213.36 L1744.84 1213.36 L1744.26 1213.36 L1743.67 1213.36 L1743.08 1213.36 L1742.5 1213.36 L1741.91 1213.36 L1741.32 1213.36 L1740.74 1213.36 L1740.15 1213.36 L1739.57 1213.36 L1738.98 1213.36 L1738.39 1213.36 L1737.81 1213.36 L1737.22 1213.36 L1736.63 1213.36 L1736.05 1213.36 L1735.46 1213.36 L1734.87 1213.36 L1734.29 1213.36 L1733.7 1213.36 L1733.11 1213.36 L1732.53 1213.36 L1731.94 1213.36 L1731.36 1213.36 L1730.77 1213.36 L1730.18 1213.36 L1729.6 1213.36 L1729.01 1213.36 L1728.42 1213.36 L1727.84 1213.36 L1727.25 1213.36 L1726.66 1213.36 L1726.08 1213.36 L1725.49 1213.36 L1724.91 1213.36 L1724.32 1213.36 L1723.73 1213.36 L1723.15 1213.36 L1722.56 1213.36 L1721.97 1213.36 L1721.39 1213.36 L1720.8 1213.36 L1720.21 1213.36 L1719.63 1213.36 L1719.04 1213.36 L1718.45 1213.36 L1717.87 1213.36 L1717.28 1213.36 L1716.7 1213.36 L1716.11 1213.36 L1715.52 1213.36 L1714.94 1213.36 L1714.35 1213.36 L1713.76 1213.36 L1713.18 1213.36 L1712.59 1213.36 L1712 1213.36 L1711.42 1213.36 L1710.83 1213.36 L1710.24 1213.36 L1709.66 1213.36 L1709.07 1213.36 L1708.49 1213.36 L1707.9 1213.36 L1707.31 1213.36 L1706.73 1213.36 L1706.14 1213.36 L1705.55 1213.36 L1704.97 1213.36 L1704.38 1213.36 L1703.79 1213.36 L1703.21 1213.36 L1702.62 1213.36 L1702.04 1213.36 L1701.45 1213.36 L1700.86 1213.36 L1700.28 1213.36 L1699.69 1213.36 L1699.1 1213.36 L1698.52 1213.36 L1697.93 1213.36 L1697.34 1213.36 L1696.76 1213.36 L1696.17 1213.36 L1695.58 1213.36 L1695 1213.36 L1694.41 1213.36 L1693.83 1213.36 L1693.24 1213.36 L1692.65 1213.36 L1692.07 1213.36 L1691.48 1213.36 L1690.89 1213.36 L1690.31 1213.36 L1689.72 1213.36 L1689.13 1213.36 L1688.55 1213.36 L1687.96 1213.36 L1687.37 1213.36 L1686.79 1213.36 L1686.2 1213.36 L1685.62 1213.36 L1685.03 1213.36 L1684.44 1213.36 L1683.86 1213.36 L1683.27 1213.36 L1682.68 1213.36 L1682.1 1213.36 L1681.51 1213.36 L1680.92 1213.36 L1680.34 1213.36 L1679.75 1213.36 L1679.17 1213.36 L1678.58 1213.36 L1677.99 1213.36 L1677.41 1213.36 L1676.82 1213.36 L1676.23 1213.36 L1675.65 1213.36 L1675.06 1213.36 L1674.47 1213.36 L1673.89 1213.36 L1673.3 1213.36 L1672.71 1213.36 L1672.13 1213.36 L1671.54 1213.36 L1670.96 1213.36 L1670.37 1213.36 L1669.78 1213.36 L1669.2 1213.36 L1668.61 1213.36 L1668.02 1213.36 L1667.44 1213.36 L1666.85 1213.36 L1666.26 1213.36 L1665.68 1213.36 L1665.09 1213.36 L1664.5 1213.36 L1663.92 1213.36 L1663.33 1213.36 L1662.75 1213.36 L1662.16 1213.36 L1661.57 1213.36 L1660.99 1213.36 L1660.4 1213.36 L1659.81 1213.36 L1659.23 1213.36 L1658.64 1213.36 L1658.05 1213.36 L1657.47 1213.36 L1656.88 1213.36 L1656.29 1213.36 L1655.71 1213.36 L1655.12 1213.36 L1654.54 1213.36 L1653.95 1213.36 L1653.36 1213.36 L1652.78 1213.36 L1652.19 1213.36 L1651.6 1213.36 L1651.02 1213.36 L1650.43 1213.36 L1649.84 1213.36 L1649.26 1213.36 L1648.67 1213.36 L1648.09 1213.36 L1647.5 1213.36 L1646.91 1213.36 L1646.33 1213.36 L1645.74 1213.36 L1645.15 1213.36 L1644.57 1213.36 L1643.98 1213.36 L1643.39 1213.36 L1642.81 1213.36 L1642.22 1213.36 L1641.63 1213.36 L1641.05 1213.36 L1640.46 1213.36 L1639.88 1213.36 L1639.29 1213.36 L1638.7 1213.36 L1638.12 1213.36 L1637.53 1213.36 L1636.94 1213.36 L1636.36 1213.36 L1635.77 1213.36 L1635.18 1213.36 L1634.6 1213.36 L1634.01 1213.36 L1633.42 1213.36 L1632.84 1213.36 L1632.25 1213.36 L1631.67 1213.36 L1631.08 1213.36 L1630.49 1213.36 L1629.91 1213.36 L1629.32 1213.36 L1628.73 1213.36 L1628.15 1213.36 L1627.56 1213.36 L1626.97 1213.36 L1626.39 1213.36 L1625.8 1213.36 L1625.22 1213.36 L1624.63 1213.36 L1624.04 1213.36 L1623.46 1213.36 L1622.87 1213.36 L1622.28 1213.36 L1621.7 1213.36 L1621.11 1213.36 L1620.52 1213.36 L1619.94 1213.36 L1619.35 1213.36 L1618.76 1213.36 L1618.18 1213.36 L1617.59 1213.36 L1617.01 1213.36 L1616.42 1213.36 L1615.83 1213.36 L1615.25 1213.36 L1614.66 1213.36 L1614.07 1213.36 L1613.49 1213.36 L1612.9 1213.36 L1612.31 1213.36 L1611.73 1213.36 L1611.14 1213.36 L1610.55 1213.36 L1609.97 1213.36 L1609.38 1213.36 L1608.8 1213.36 L1608.21 1213.36 L1607.62 1213.36 L1607.04 1213.36 L1606.45 1213.36 L1605.86 1213.36 L1605.28 1213.36 L1604.69 1213.36 L1604.1 1213.36 L1603.52 1213.36 L1602.93 1213.36 L1602.34 1213.36 L1601.76 1213.36 L1601.17 1213.36 L1600.59 1213.36 L1600 1213.36 L1599.41 1213.36 L1598.83 1213.36 L1598.24 1213.36 L1597.65 1213.36 L1597.07 1213.36 L1596.48 1213.36 L1595.89 1213.36 L1595.31 1213.36 L1594.72 1213.36 L1594.14 1213.36 L1593.55 1213.36 L1592.96 1213.36 L1592.38 1213.36 L1591.79 1213.36 L1591.2 1213.36 L1590.62 1213.36 L1590.03 1213.36 L1589.44 1213.36 L1588.86 1213.36 L1588.27 1213.36 L1587.68 1213.36 L1587.1 1213.36 L1586.51 1213.36 L1585.93 1213.36 L1585.34 1213.36 L1584.75 1213.36 L1584.17 1213.36 L1583.58 1213.36 L1582.99 1213.36 L1582.41 1213.36 L1581.82 1213.36 L1581.23 1213.36 L1580.65 1213.36 L1580.06 1213.36 L1579.47 1213.36 L1578.89 1213.36 L1578.3 1213.36 L1577.72 1213.36 L1577.13 1213.36 L1576.54 1213.36 L1575.96 1213.36 L1575.37 1213.36 L1574.78 1213.36 L1574.2 1213.36 L1573.61 1213.36 L1573.02 1213.36 L1572.44 1213.36 L1571.85 1213.36 L1571.27 1213.36 L1570.68 1213.36 L1570.09 1213.36 L1569.51 1213.36 L1568.92 1213.36 L1568.33 1213.36 L1567.75 1213.36 L1567.16 1213.36 L1566.57 1213.36 L1565.99 1213.36 L1565.4 1213.36 L1564.81 1213.36 L1564.23 1213.36 L1563.64 1213.36 L1563.06 1213.36 L1562.47 1213.36 L1561.88 1213.36 L1561.3 1213.36 L1560.71 1213.36 L1560.12 1213.36 L1559.54 1213.36 L1558.95 1213.36 L1558.36 1213.36 L1557.78 1213.36 L1557.19 1213.36 L1556.6 1213.36 L1556.02 1213.36 L1555.43 1213.36 L1554.85 1213.36 L1554.26 1213.36 L1553.67 1213.36 L1553.09 1213.36 L1552.5 1213.36 L1551.91 1213.36 L1551.33 1213.36 L1550.74 1213.36 L1550.15 1213.36 L1549.57 1213.36 L1548.98 1213.36 L1548.4 1213.36 L1547.81 1213.36 L1547.22 1213.36 L1546.64 1213.36 L1546.05 1213.36 L1545.46 1213.36 L1544.88 1213.36 L1544.29 1213.36 L1543.7 1213.36 L1543.12 1213.36 L1542.53 1213.36 L1541.94 1213.36 L1541.36 1213.36 L1540.77 1213.36 L1540.19 1213.36 L1539.6 1213.36 L1539.01 1213.36 L1538.43 1213.36 L1537.84 1213.36 L1537.25 1213.36 L1536.67 1213.36 L1536.08 1213.36 L1535.49 1213.36 L1534.91 1213.36 L1534.32 1213.36 L1533.73 1213.36 L1533.15 1213.36 L1532.56 1213.36 L1531.98 1213.36 L1531.39 1213.36 L1530.8 1213.36 L1530.22 1213.36 L1529.63 1213.36 L1529.04 1213.36 L1528.46 1213.36 L1527.87 1213.36 L1527.28 1213.36 L1526.7 1213.36 L1526.11 1213.36 L1525.52 1213.36 L1524.94 1213.36 L1524.35 1213.36 L1523.77 1213.36 L1523.18 1213.36 L1522.59 1213.36 L1522.01 1213.36 L1521.42 1213.36 L1520.83 1213.36 L1520.25 1213.36 L1519.66 1213.36 L1519.07 1213.36 L1518.49 1213.36 L1517.9 1213.36 L1517.32 1213.36 L1516.73 1213.36 L1516.14 1213.36 L1515.56 1213.36 L1514.97 1213.36 L1514.38 1213.36 L1513.8 1213.36 L1513.21 1213.36 L1512.62 1213.36 L1512.04 1213.36 L1511.45 1213.36 L1510.86 1213.36 L1510.28 1213.36 L1509.69 1213.36 L1509.11 1213.36 L1508.52 1213.36 L1507.93 1213.36 L1507.35 1213.36 L1506.76 1213.36 L1506.17 1213.36 L1505.59 1213.36 L1505 1213.36 L1504.41 1213.36 L1503.83 1213.36 L1503.24 1213.36 L1502.65 1213.36 L1502.07 1213.36 L1501.48 1213.36 L1500.9 1213.36 L1500.31 1213.36 L1499.72 1213.36 L1499.14 1213.36 L1498.55 1213.36 L1497.96 1213.36 L1497.38 1213.36 L1496.79 1213.36 L1496.2 1213.36 L1495.62 1213.36 L1495.03 1213.36 L1494.45 1213.36 L1493.86 1213.36 L1493.27 1213.36 L1492.69 1213.36 L1492.1 1213.36 L1491.51 1213.36 L1490.93 1213.36 L1490.34 1213.36 L1489.75 1213.36 L1489.17 1213.36 L1488.58 1213.36 L1487.99 1213.36 L1487.41 1213.36 L1486.82 1213.36 L1486.24 1213.36 L1485.65 1213.36 L1485.06 1213.36 L1484.48 1213.36 L1483.89 1213.36 L1483.3 1213.36 L1482.72 1213.36 L1482.13 1213.36 L1481.54 1213.36 L1480.96 1213.36 L1480.37 1213.36 L1479.78 1213.36 L1479.2 1213.36 L1478.61 1213.36 L1478.03 1213.36 L1477.44 1213.36 L1476.85 1213.36 L1476.27 1213.36 L1475.68 1213.36 L1475.09 1213.36 L1474.51 1213.36 L1473.92 1213.36 L1473.33 1213.36 L1472.75 1213.36 L1472.16 1213.36 L1471.57 1213.36 L1470.99 1213.36 L1470.4 1213.36 L1469.82 1213.36 L1469.23 1213.36 L1468.64 1213.36 L1468.06 1213.36 L1467.47 1213.36 L1466.88 1213.36 L1466.3 1213.36 L1465.71 1213.36 L1465.12 1213.36 L1464.54 1213.36 L1463.95 1213.36 L1463.37 1213.36 L1462.78 1213.36 L1462.19 1213.36 L1461.61 1213.36 L1461.02 1213.36 L1460.43 1213.36 L1459.85 1213.36 L1459.26 1213.36 L1458.67 1213.36 L1458.09 1213.36 L1457.5 1213.36 L1456.91 1213.36 L1456.33 1213.36 L1455.74 1213.36 L1455.16 1213.36 L1454.57 1213.36 L1453.98 1213.36 L1453.4 1213.36 L1452.81 1213.36 L1452.22 1213.36 L1451.64 1213.36 L1451.05 1213.36 L1450.46 1213.36 L1449.88 1213.36 L1449.29 1213.36 L1448.7 1213.36 L1448.12 1213.36 L1447.53 1213.36 L1446.95 1213.36 L1446.36 1213.36 L1445.77 1213.36 L1445.19 1213.36 L1444.6 1213.36 L1444.01 1213.36 L1443.43 1213.36 L1442.84 1213.36 L1442.25 1213.36 L1441.67 1213.36 L1441.08 1213.36 L1440.5 1213.36 L1439.91 1213.36 L1439.32 1213.36 L1438.74 1213.36 L1438.15 1213.36 L1437.56 1213.36 L1436.98 1213.36 L1436.39 1213.36 L1435.8 1213.36 L1435.22 1213.36 L1434.63 1213.36 L1434.04 1213.36 L1433.46 1213.36 L1432.87 1213.36 L1432.29 1213.36 L1431.7 1213.36 L1431.11 1213.36 L1430.53 1213.36 L1429.94 1213.36 L1429.35 1213.36 L1428.77 1213.36 L1428.18 1213.36 L1427.59 1213.36 L1427.01 1213.36 L1426.42 1213.36 L1425.83 1213.36 L1425.25 1213.36 L1424.66 1213.36 L1424.08 1213.36 L1423.49 1213.36 L1422.9 1213.36 L1422.32 1213.36 L1421.73 1213.36 L1421.14 1213.36 L1420.56 1213.36 L1419.97 1213.36 L1419.38 1213.36 L1418.8 1213.36 L1418.21 1213.36 L1417.63 1213.36 L1417.04 1213.36 L1416.45 1213.36 L1415.87 1213.36 L1415.28 1213.36 L1414.69 1213.36 L1414.11 1213.36 L1413.52 1213.36 L1412.93 1213.36 L1412.35 1213.36 L1411.76 1213.36 L1411.17 1213.36 L1410.59 1213.36 L1410 1213.36 L1409.42 1213.36 L1408.83 1213.36 L1408.24 1213.36 L1407.66 1213.36 L1407.07 1213.36 L1406.48 1213.36 L1405.9 1213.36 L1405.31 1213.36 L1404.72 1213.36 L1404.14 1213.36 L1403.55 1213.36 L1402.96 1213.36 L1402.38 1213.36 L1401.79 1213.36 L1401.21 1213.36 L1400.62 1213.36 L1400.03 1213.36 L1399.45 1213.36 L1398.86 1213.36 L1398.27 1213.36 L1397.69 1213.36 L1397.1 1213.36 L1396.51 1213.36 L1395.93 1213.36 L1395.34 1213.36 L1394.75 1213.36 L1394.17 1213.36 L1393.58 1213.36 L1393 1213.36 L1392.41 1213.36 L1391.82 1213.36 L1391.24 1213.36 L1390.65 1213.36 L1390.06 1213.36 L1389.48 1213.36 L1388.89 1213.36 L1388.3 1213.36 L1387.72 1213.36 L1387.13 1213.36 L1386.55 1213.36 L1385.96 1213.36 L1385.37 1213.36 L1384.79 1213.36 L1384.2 1213.36 L1383.61 1213.36 L1383.03 1213.36 L1382.44 1213.36 L1381.85 1213.36 L1381.27 1213.36 L1380.68 1213.36 L1380.09 1213.36 L1379.51 1213.36 L1378.92 1213.36 L1378.34 1213.36 L1377.75 1213.36 L1377.16 1213.36 L1376.58 1213.36 L1375.99 1213.36 L1375.4 1213.36 L1374.82 1213.36 L1374.23 1213.36 L1373.64 1213.36 L1373.06 1213.36 L1372.47 1213.36 L1371.88 1213.36 L1371.3 1213.36 L1370.71 1213.36 L1370.13 1213.36 L1369.54 1213.36 L1368.95 1213.36 L1368.37 1213.36 L1367.78 1213.36 L1367.19 1213.36 L1366.61 1213.36 L1366.02 1213.36 L1365.43 1213.36 L1364.85 1213.36 L1364.26 1213.36 L1363.68 1213.36 L1363.09 1213.36 L1362.5 1213.36 L1361.92 1213.36 L1361.33 1213.36 L1360.74 1213.36 L1360.16 1213.36 L1359.57 1213.36 L1358.98 1213.36 L1358.4 1213.36 L1357.81 1213.36 L1357.22 1213.36 L1356.64 1213.36 L1356.05 1213.36 L1355.47 1213.36 L1354.88 1213.36 L1354.29 1213.36 L1353.71 1213.36 L1353.12 1213.36 L1352.53 1213.36 L1351.95 1213.36 L1351.36 1213.36 L1350.77 1213.36 L1350.19 1213.36 L1349.6 1213.36 L1349.01 1213.36 L1348.43 1213.36 L1347.84 1213.36 L1347.26 1213.36 L1346.67 1213.36 L1346.08 1213.36 L1345.5 1213.36 L1344.91 1213.36 L1344.32 1213.36 L1343.74 1213.36 L1343.15 1213.36 L1342.56 1213.36 L1341.98 1213.36 L1341.39 1213.36 L1340.8 1213.36 L1340.22 1213.36 L1339.63 1213.36 L1339.05 1213.36 L1338.46 1213.36 L1337.87 1213.36 L1337.29 1213.36 L1336.7 1213.36 L1336.11 1213.36 L1335.53 1213.36 L1334.94 1213.36 L1334.35 1213.36 L1333.77 1213.36 L1333.18 1213.36 L1332.6 1213.36 L1332.01 1213.36 L1331.42 1213.36 L1330.84 1213.36 L1330.25 1213.36 L1329.66 1213.36 L1329.08 1213.36 L1328.49 1213.36 L1327.9 1213.36 L1327.32 1213.36 L1326.73 1213.36 L1326.14 1213.36 L1325.56 1213.36 L1324.97 1213.36 L1324.39 1213.36 L1323.8 1213.36 L1323.21 1213.36 L1322.63 1213.36 L1322.04 1213.36 L1321.45 1213.36 L1320.87 1213.36 L1320.28 1213.36 L1319.69 1213.36 L1319.11 1213.36 L1318.52 1213.36 L1317.93 1213.36 L1317.35 1213.36 L1316.76 1213.36 L1316.18 1213.36 L1315.59 1213.36 L1315 1213.36 L1314.42 1213.36 L1313.83 1213.36 L1313.24 1213.36 L1312.66 1213.36 L1312.07 1213.36 L1311.48 1213.36 L1310.9 1213.36 L1310.31 1213.36 L1309.73 1213.36 L1309.14 1213.36 L1308.55 1213.36 L1307.97 1213.36 L1307.38 1213.36 L1306.79 1213.36 L1306.21 1213.36 L1305.62 1213.36 L1305.03 1213.36 L1304.45 1213.36 L1303.86 1213.36 L1303.27 1213.36 L1302.69 1213.36 L1302.1 1213.36 L1301.52 1213.36 L1300.93 1213.36 L1300.34 1213.36 L1299.76 1213.36 L1299.17 1213.36 L1298.58 1213.36 L1298 1213.36 L1297.41 1213.36 L1296.82 1213.36 L1296.24 1213.36 L1295.65 1213.36 L1295.06 1213.36 L1294.48 1213.36 L1293.89 1213.36 L1293.31 1213.36 L1292.72 1213.36 L1292.13 1213.36 L1291.55 1213.36 L1290.96 1213.36 L1290.37 1213.36 L1289.79 1213.36 L1289.2 1213.36 L1288.61 1213.36 L1288.03 1213.36 L1287.44 1213.36 L1286.86 1213.36 L1286.27 1213.36 L1285.68 1213.36 L1285.1 1213.36 L1284.51 1213.36 L1283.92 1213.36 L1283.34 1213.36 L1282.75 1213.36 L1282.16 1213.36 L1281.58 1213.36 L1280.99 1213.36 L1280.4 1213.36 L1279.82 1213.36 L1279.23 1213.36 L1278.65 1213.36 L1278.06 1213.36 L1277.47 1213.36 L1276.89 1213.36 L1276.3 1213.36 L1275.71 1213.36 L1275.13 1213.36 L1274.54 1213.36 L1273.95 1213.36 L1273.37 1213.36 L1272.78 1213.36 L1272.19 1213.36 L1271.61 1213.36 L1271.02 1213.36 L1270.44 1213.36 L1269.85 1213.36 L1269.26 1213.36 L1268.68 1213.36 L1268.09 1213.36 L1267.5 1213.36 L1266.92 1213.36 L1266.33 1213.36 L1265.74 1213.36 L1265.16 1213.36 L1264.57 1213.36 L1263.98 1213.36 L1263.4 1213.36 L1262.81 1213.36 L1262.23 1213.36 L1261.64 1213.36 L1261.05 1213.36 L1260.47 1213.36 L1259.88 1213.36 L1259.29 1213.36 L1258.71 1213.36 L1258.12 1213.36 L1257.53 1213.36 L1256.95 1213.36 L1256.36 1213.36 L1255.78 1213.36 L1255.19 1213.36 L1254.6 1213.36 L1254.02 1213.36 L1253.43 1213.36 L1252.84 1213.36 L1252.26 1213.36 L1251.67 1213.36 L1251.08 1213.36 L1250.5 1213.36 L1249.91 1213.36 L1249.32 1213.36 L1248.74 1213.36 L1248.15 1213.36 L1247.57 1213.36 L1246.98 1213.36 L1246.39 1213.36 L1245.81 1213.36 L1245.22 1213.36 L1244.63 1213.36 L1244.05 1213.36 L1243.46 1213.36 L1242.87 1213.36 L1242.29 1213.36 L1241.7 1213.36 L1241.11 1213.36 L1240.53 1213.36 L1239.94 1213.36 L1239.36 1213.36 L1238.77 1213.36 L1238.18 1213.36 L1237.6 1213.36 L1237.01 1213.36 L1236.42 1213.36 L1235.84 1213.36 L1235.25 1213.36 L1234.66 1213.36 L1234.08 1213.36 L1233.49 1213.36 L1232.91 1213.36 L1232.32 1213.36 L1231.73 1213.36 L1231.15 1213.36 L1230.56 1213.36 L1229.97 1213.36 L1229.39 1213.36 L1228.8 1213.36 L1228.21 1213.36 L1227.63 1213.36 L1227.04 1213.36 L1226.45 1213.36 L1225.87 1213.36 L1225.28 1213.36 L1224.7 1213.36 L1224.11 1213.36 L1223.52 1213.36 L1222.94 1213.36 L1222.35 1213.36 L1221.76 1213.36 L1221.18 1213.36 L1220.59 1213.36 L1220 1213.36 L1219.42 1213.36 L1218.83 1213.36 L1218.24 1213.36 L1217.66 1213.36 L1217.07 1213.36 L1216.49 1213.36 L1215.9 1213.36 L1215.31 1213.36 L1214.73 1213.36 L1214.14 1213.36 L1213.55 1213.36 L1212.97 1213.36 L1212.38 1213.36 L1211.79 1213.36 L1211.21 1213.36 L1210.62 1213.36 L1210.03 1213.36 L1209.45 1213.36 L1208.86 1213.36 L1208.28 1213.36 L1207.69 1213.36 L1207.1 1213.36 L1206.52 1213.36 L1205.93 1213.36 L1205.34 1213.36 L1204.76 1213.36 L1204.17 1213.36 L1203.58 1213.36 L1203 1213.36 L1202.41 1213.36 L1201.83 1213.36 L1201.24 1213.36 L1200.65 1213.36 L1200.07 1213.36 L1199.48 1213.36 L1198.89 1213.36 L1198.31 1213.36 L1197.72 1213.36 L1197.13 1213.36 L1196.55 1213.36 L1195.96 1213.36 L1195.37 1213.36 L1194.79 1213.36 L1194.2 1213.36 L1193.62 1213.36 L1193.03 1213.36 L1192.44 1213.36 L1191.86 1213.36 L1191.27 1213.36 L1190.68 1213.36 L1190.1 1213.36 L1189.51 1213.36 L1188.92 1213.36 L1188.34 1213.36 L1187.75 1213.36 L1187.16 1213.36 L1186.58 1213.36 L1185.99 1213.36 L1185.41 1213.36 L1184.82 1213.36 L1184.23 1213.36 L1183.65 1213.36 L1183.06 1213.36 L1182.47 1213.36 L1181.89 1213.36 L1181.3 1213.36 L1180.71 1213.36 L1180.13 1213.36 L1179.54 1213.36 L1178.96 1213.36 L1178.37 1213.36 L1177.78 1213.36 L1177.2 1213.36 L1176.61 1213.36 L1176.02 1213.36 L1175.44 1213.36 L1174.85 1213.36 L1174.26 1213.36 L1173.68 1213.36 L1173.09 1213.36 L1172.5 1213.36 L1171.92 1213.36 L1171.33 1213.36 L1170.75 1213.36 L1170.16 1213.36 L1169.57 1213.36 L1168.99 1213.36 L1168.4 1213.36 L1167.81 1213.36 L1167.23 1213.36 L1166.64 1213.36 L1166.05 1213.36 L1165.47 1213.36 L1164.88 1213.36 L1164.29 1213.36 L1163.71 1213.36 L1163.12 1213.36 L1162.54 1213.36 L1161.95 1213.36 L1161.36 1213.36 L1160.78 1213.36 L1160.19 1213.36 L1159.6 1213.36 L1159.02 1213.36 L1158.43 1213.36 L1157.84 1213.36 L1157.26 1213.36 L1156.67 1213.36 L1156.09 1213.36 L1155.5 1213.36 L1154.91 1213.36 L1154.33 1213.36 L1153.74 1213.36 L1153.15 1213.36 L1152.57 1213.36 L1151.98 1213.36 L1151.39 1213.36 L1150.81 1213.36 L1150.22 1213.36 L1149.63 1213.36 L1149.05 1213.36 L1148.46 1213.36 L1147.88 1213.36 L1147.29 1213.36 L1146.7 1213.36 L1146.12 1213.36 L1145.53 1213.36 L1144.94 1213.36 L1144.36 1213.36 L1143.77 1213.36 L1143.18 1213.36 L1142.6 1213.36 L1142.01 1213.36 L1141.42 1213.36 L1140.84 1213.36 L1140.25 1213.36 L1139.67 1213.36 L1139.08 1213.36 L1138.49 1213.36 L1137.91 1213.36 L1137.32 1213.36 L1136.73 1213.36 L1136.15 1213.36 L1135.56 1213.36 L1134.97 1213.36 L1134.39 1213.36 L1133.8 1213.36 L1133.21 1213.36 L1132.63 1213.36 L1132.04 1213.36 L1131.46 1213.36 L1130.87 1213.36 L1130.28 1213.36 L1129.7 1213.36 L1129.11 1213.36 L1128.52 1213.36 L1127.94 1213.36 L1127.35 1213.36 L1126.76 1213.36 L1126.18 1213.36 L1125.59 1213.36 L1125.01 1213.36 L1124.42 1213.36 L1123.83 1213.36 L1123.25 1213.36 L1122.66 1213.36 L1122.07 1213.36 L1121.49 1213.36 L1120.9 1213.36 L1120.31 1213.36 L1119.73 1213.36 L1119.14 1213.36 L1118.55 1213.36 L1117.97 1213.36 L1117.38 1213.36 L1116.8 1213.36 L1116.21 1213.36 L1115.62 1213.36 L1115.04 1213.36 L1114.45 1213.36 L1113.86 1213.36 L1113.28 1213.36 L1112.69 1213.36 L1112.1 1213.36 L1111.52 1213.36 L1110.93 1213.36 L1110.34 1213.36 L1109.76 1213.36 L1109.17 1213.36 L1108.59 1213.36 L1108 1213.36 L1107.41 1213.36 L1106.83 1213.36 L1106.24 1213.36 L1105.65 1213.36 L1105.07 1213.36 L1104.48 1213.36 L1103.89 1213.36 L1103.31 1213.36 L1102.72 1213.36 L1102.14 1213.36 L1101.55 1213.36 L1100.96 1213.36 L1100.38 1213.36 L1099.79 1213.36 L1099.2 1213.36 L1098.62 1213.36 L1098.03 1213.36 L1097.44 1213.36 L1096.86 1213.36 L1096.27 1213.36 L1095.68 1213.36 L1095.1 1213.36 L1094.51 1213.36 L1093.93 1213.36 L1093.34 1213.36 L1092.75 1213.36 L1092.17 1213.36 L1091.58 1213.36 L1090.99 1213.36 L1090.41 1213.36 L1089.82 1213.36 L1089.23 1213.36 L1088.65 1213.36 L1088.06 1213.36 L1087.47 1213.36 L1086.89 1213.36 L1086.3 1213.36 L1085.72 1213.36 L1085.13 1213.36 L1084.54 1213.36 L1083.96 1213.36 L1083.37 1213.36 L1082.78 1213.36 L1082.2 1213.36 L1081.61 1213.36 L1081.02 1213.36 L1080.44 1213.36 L1079.85 1213.36 L1079.26 1213.36 L1078.68 1213.36 L1078.09 1213.36 L1077.51 1213.36 L1076.92 1213.36 L1076.33 1213.36 L1075.75 1213.36 L1075.16 1213.36 L1074.57 1213.36 L1073.99 1213.36 L1073.4 1213.36 L1072.81 1213.36 L1072.23 1213.36 L1071.64 1213.36 L1071.06 1213.36 L1070.47 1213.36 L1069.88 1213.36 L1069.3 1213.36 L1068.71 1213.36 L1068.12 1213.36 L1067.54 1213.36 L1066.95 1213.36 L1066.36 1213.36 L1065.78 1213.36 L1065.19 1213.36 L1064.6 1213.36 L1064.02 1213.36 L1063.43 1213.36 L1062.85 1213.36 L1062.26 1213.36 L1061.67 1213.36 L1061.09 1213.36 L1060.5 1213.36 L1059.91 1213.36 L1059.33 1213.36 L1058.74 1213.36 L1058.15 1213.36 L1057.57 1213.36 L1056.98 1213.36 L1056.39 1213.36 L1055.81 1213.36 L1055.22 1213.36 L1054.64 1213.36 L1054.05 1213.36 L1053.46 1213.36 L1052.88 1213.36 L1052.29 1213.36 L1051.7 1213.36 L1051.12 1213.36 L1050.53 1213.36 L1049.94 1213.36 L1049.36 1213.36 L1048.77 1213.36 L1048.19 1213.36 L1047.6 1213.36 L1047.01 1213.36 L1046.43 1213.36 L1045.84 1213.36 L1045.25 1213.36 L1044.67 1213.36 L1044.08 1213.36 L1043.49 1213.36 L1042.91 1213.36 L1042.32 1213.36 L1041.73 1213.36 L1041.15 1213.36 L1040.56 1213.36 L1039.98 1213.36 L1039.39 1213.36 L1038.8 1213.36 L1038.22 1213.36 L1037.63 1213.36 L1037.04 1213.36 L1036.46 1213.36 L1035.87 1213.36 L1035.28 1213.36 L1034.7 1213.36 L1034.11 1213.36 L1033.52 1213.36 L1032.94 1213.36 L1032.35 1213.36 L1031.77 1213.36 L1031.18 1213.36 L1030.59 1213.36 L1030.01 1213.36 L1029.42 1213.36 L1028.83 1213.36 L1028.25 1213.36 L1027.66 1213.36 L1027.07 1213.36 L1026.49 1213.36 L1025.9 1213.36 L1025.32 1213.36 L1024.73 1213.36 L1024.14 1213.36 L1023.56 1213.36 L1022.97 1213.36 L1022.38 1213.36 L1021.8 1213.36 L1021.21 1213.36 L1020.62 1213.36 L1020.04 1213.36 L1019.45 1213.36 L1018.86 1213.36 L1018.28 1213.36 L1017.69 1213.36 L1017.11 1213.36 L1016.52 1213.36 L1015.93 1213.36 L1015.35 1213.36 L1014.76 1213.36 L1014.17 1213.36 L1013.59 1213.36 L1013 1213.36 L1012.41 1213.36 L1011.83 1213.36 L1011.24 1213.36 L1010.65 1213.36 L1010.07 1213.36 L1009.48 1213.36 L1008.9 1213.36 L1008.31 1213.36 L1007.72 1213.36 L1007.14 1213.36 L1006.55 1213.36 L1005.96 1213.36 L1005.38 1213.36 L1004.79 1213.36 L1004.2 1213.36 L1003.62 1213.36 L1003.03 1213.36 L1002.44 1213.36 L1001.86 1213.36 L1001.27 1213.36 L1000.69 1213.36 L1000.1 1213.36 L999.513 1213.36 L998.926 1213.36 L998.34 1213.36 L997.754 1213.36 L997.167 1213.36 L996.581 1213.36 L995.994 1213.36 L995.408 1213.36 L994.822 1213.36 L994.235 1213.36 L993.649 1213.36 L993.062 1213.36 L992.476 1213.36 L991.889 1213.36 L991.303 1213.36 L990.717 1213.36 L990.13 1213.36 L989.544 1213.36 L988.957 1213.36 L988.371 1213.36 L987.785 1213.36 L987.198 1213.36 L986.612 1213.36 L986.025 1213.36  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.45 986.612,1213.45 987.198,1213.45 987.785,1213.45 988.371,1213.45 988.957,1213.45 989.544,1213.45 990.13,1213.45 990.717,1213.45 991.303,1213.45 991.889,1213.45 992.476,1213.45 993.062,1213.45 993.649,1213.45 994.235,1213.45 994.822,1213.45 995.408,1213.45 995.994,1213.45 996.581,1213.45 997.167,1213.45 997.754,1213.45 998.34,1213.45 998.926,1213.45 999.513,1213.45 1000.1,1213.45 1000.69,1213.45 1001.27,1213.45 1001.86,1213.45 1002.44,1213.45 1003.03,1213.45 1003.62,1213.45 1004.2,1213.45 1004.79,1213.45 1005.38,1213.45 1005.96,1213.45 1006.55,1213.45 1007.14,1213.45 1007.72,1213.45 1008.31,1213.45 1008.9,1213.45 1009.48,1213.45 1010.07,1213.45 1010.65,1213.45 1011.24,1213.45 1011.83,1213.45 1012.41,1213.45 1013,1213.45 1013.59,1213.45 1014.17,1213.45 1014.76,1213.45 1015.35,1213.45 1015.93,1213.45 1016.52,1213.45 1017.11,1213.45 1017.69,1213.45 1018.28,1213.45 1018.86,1213.45 1019.45,1213.45 1020.04,1213.45 1020.62,1213.45 1021.21,1213.45 1021.8,1213.45 1022.38,1213.45 1022.97,1213.45 1023.56,1213.45 1024.14,1213.45 1024.73,1213.45 1025.32,1213.45 1025.9,1213.45 1026.49,1213.45 1027.07,1213.45 1027.66,1213.45 1028.25,1213.45 1028.83,1213.45 1029.42,1213.45 1030.01,1213.45 1030.59,1213.45 1031.18,1213.45 1031.77,1213.45 1032.35,1213.45 1032.94,1213.45 1033.52,1213.45 1034.11,1213.45 1034.7,1213.45 1035.28,1213.45 1035.87,1213.45 1036.46,1213.45 1037.04,1213.45 1037.63,1213.45 1038.22,1213.45 1038.8,1213.45 1039.39,1213.45 1039.98,1213.45 1040.56,1213.45 1041.15,1213.45 1041.73,1213.45 1042.32,1213.45 1042.91,1213.45 1043.49,1213.45 1044.08,1213.45 1044.67,1213.45 1045.25,1213.45 1045.84,1213.45 1046.43,1213.45 1047.01,1213.45 1047.6,1213.45 1048.19,1213.45 1048.77,1213.45 1049.36,1213.45 1049.94,1213.45 1050.53,1213.45 1051.12,1213.45 1051.7,1213.45 1052.29,1213.45 1052.88,1213.45 1053.46,1213.45 1054.05,1213.45 1054.64,1213.45 1055.22,1213.45 1055.81,1213.45 1056.39,1213.45 1056.98,1213.45 1057.57,1213.45 1058.15,1213.45 1058.74,1213.45 1059.33,1213.45 1059.91,1213.45 1060.5,1213.45 1061.09,1213.45 1061.67,1213.45 1062.26,1213.45 1062.85,1213.45 1063.43,1213.45 1064.02,1213.45 1064.6,1213.45 1065.19,1213.45 1065.78,1213.45 1066.36,1213.45 1066.95,1213.45 1067.54,1213.45 1068.12,1213.45 1068.71,1213.45 1069.3,1213.45 1069.88,1213.45 1070.47,1213.45 1071.06,1213.45 1071.64,1213.45 1072.23,1213.45 1072.81,1213.45 1073.4,1213.45 1073.99,1213.45 1074.57,1213.45 1075.16,1213.45 1075.75,1213.45 1076.33,1213.45 1076.92,1213.45 1077.51,1213.45 1078.09,1213.45 1078.68,1213.45 1079.26,1213.45 1079.85,1213.45 1080.44,1213.45 1081.02,1213.45 1081.61,1213.45 1082.2,1213.45 1082.78,1213.45 1083.37,1213.45 1083.96,1213.45 1084.54,1213.45 1085.13,1213.45 1085.72,1213.45 1086.3,1213.45 1086.89,1213.45 1087.47,1213.45 1088.06,1213.45 1088.65,1213.45 1089.23,1213.45 1089.82,1213.45 1090.41,1213.45 1090.99,1213.45 1091.58,1213.45 1092.17,1213.45 1092.75,1213.45 1093.34,1213.45 1093.93,1213.45 1094.51,1213.45 1095.1,1213.45 1095.68,1213.45 1096.27,1213.45 1096.86,1213.45 1097.44,1213.45 1098.03,1213.45 1098.62,1213.45 1099.2,1213.45 1099.79,1213.45 1100.38,1213.45 1100.96,1213.45 1101.55,1213.45 1102.14,1213.45 1102.72,1213.45 1103.31,1213.45 1103.89,1213.45 1104.48,1213.45 1105.07,1213.45 1105.65,1213.45 1106.24,1213.45 1106.83,1213.45 1107.41,1213.45 1108,1213.45 1108.59,1213.45 1109.17,1213.45 1109.76,1213.45 1110.34,1213.45 1110.93,1213.45 1111.52,1213.45 1112.1,1213.45 1112.69,1213.45 1113.28,1213.45 1113.86,1213.45 1114.45,1213.45 1115.04,1213.45 1115.62,1213.45 1116.21,1213.45 1116.8,1213.45 1117.38,1213.45 1117.97,1213.45 1118.55,1213.45 1119.14,1213.45 1119.73,1213.45 1120.31,1213.45 1120.9,1213.45 1121.49,1213.45 1122.07,1213.45 1122.66,1213.45 1123.25,1213.45 1123.83,1213.45 1124.42,1213.45 1125.01,1213.45 1125.59,1213.45 1126.18,1213.45 1126.76,1213.45 1127.35,1213.45 1127.94,1213.45 1128.52,1213.45 1129.11,1213.45 1129.7,1213.45 1130.28,1213.45 1130.87,1213.45 1131.46,1213.45 1132.04,1213.45 1132.63,1213.45 1133.21,1213.45 1133.8,1213.45 1134.39,1213.45 1134.97,1213.45 1135.56,1213.45 1136.15,1213.45 1136.73,1213.45 1137.32,1213.45 1137.91,1213.45 1138.49,1213.45 1139.08,1213.45 1139.67,1213.45 1140.25,1213.45 1140.84,1213.45 1141.42,1213.45 1142.01,1213.45 1142.6,1213.45 1143.18,1213.45 1143.77,1213.45 1144.36,1213.45 1144.94,1213.45 1145.53,1213.45 1146.12,1213.45 1146.7,1213.45 1147.29,1213.45 1147.88,1213.45 1148.46,1213.45 1149.05,1213.45 1149.63,1213.45 1150.22,1213.45 1150.81,1213.45 1151.39,1213.45 1151.98,1213.45 1152.57,1213.45 1153.15,1213.45 1153.74,1213.45 1154.33,1213.45 1154.91,1213.45 1155.5,1213.45 1156.09,1213.45 1156.67,1213.45 1157.26,1213.45 1157.84,1213.45 1158.43,1213.45 1159.02,1213.45 1159.6,1213.45 1160.19,1213.45 1160.78,1213.45 1161.36,1213.45 1161.95,1213.45 1162.54,1213.45 1163.12,1213.45 1163.71,1213.45 1164.29,1213.45 1164.88,1213.45 1165.47,1213.45 1166.05,1213.45 1166.64,1213.45 1167.23,1213.45 1167.81,1213.45 1168.4,1213.45 1168.99,1213.45 1169.57,1213.45 1170.16,1213.45 1170.75,1213.45 1171.33,1213.45 1171.92,1213.45 1172.5,1213.45 1173.09,1213.45 1173.68,1213.45 1174.26,1213.45 1174.85,1213.45 1175.44,1213.45 1176.02,1213.45 1176.61,1213.45 1177.2,1213.45 1177.78,1213.45 1178.37,1213.45 1178.96,1213.45 1179.54,1213.45 1180.13,1213.45 1180.71,1213.45 1181.3,1213.45 1181.89,1213.45 1182.47,1213.45 1183.06,1213.45 1183.65,1213.45 1184.23,1213.45 1184.82,1213.45 1185.41,1213.45 1185.99,1213.45 1186.58,1213.45 1187.16,1213.45 1187.75,1213.45 1188.34,1213.45 1188.92,1213.45 1189.51,1213.45 1190.1,1213.45 1190.68,1213.45 1191.27,1213.45 1191.86,1213.45 1192.44,1213.45 1193.03,1213.45 1193.62,1213.45 1194.2,1213.45 1194.79,1213.45 1195.37,1213.45 1195.96,1213.45 1196.55,1213.45 1197.13,1213.45 1197.72,1213.45 1198.31,1213.45 1198.89,1213.45 1199.48,1213.45 1200.07,1213.45 1200.65,1213.45 1201.24,1213.45 1201.83,1213.45 1202.41,1213.45 1203,1213.45 1203.58,1213.45 1204.17,1213.45 1204.76,1213.45 1205.34,1213.45 1205.93,1213.45 1206.52,1213.45 1207.1,1213.45 1207.69,1213.45 1208.28,1213.45 1208.86,1213.45 1209.45,1213.45 1210.03,1213.45 1210.62,1213.45 1211.21,1213.45 1211.79,1213.45 1212.38,1213.45 1212.97,1213.45 1213.55,1213.45 1214.14,1213.45 1214.73,1213.45 1215.31,1213.45 1215.9,1213.45 1216.49,1213.45 1217.07,1213.45 1217.66,1213.45 1218.24,1213.45 1218.83,1213.45 1219.42,1213.45 1220,1213.45 1220.59,1213.45 1221.18,1213.45 1221.76,1213.45 1222.35,1213.45 1222.94,1213.45 1223.52,1213.45 1224.11,1213.45 1224.7,1213.45 1225.28,1213.45 1225.87,1213.45 1226.45,1213.45 1227.04,1213.45 1227.63,1213.45 1228.21,1213.45 1228.8,1213.45 1229.39,1213.45 1229.97,1213.45 1230.56,1213.45 1231.15,1213.45 1231.73,1213.45 1232.32,1213.45 1232.91,1213.45 1233.49,1213.45 1234.08,1213.45 1234.66,1213.45 1235.25,1213.45 1235.84,1213.45 1236.42,1213.45 1237.01,1213.45 1237.6,1213.45 1238.18,1213.45 1238.77,1213.45 1239.36,1213.45 1239.94,1213.45 1240.53,1213.45 1241.11,1213.45 1241.7,1213.45 1242.29,1213.45 1242.87,1213.45 1243.46,1213.45 1244.05,1213.45 1244.63,1213.45 1245.22,1213.45 1245.81,1213.45 1246.39,1213.45 1246.98,1213.45 1247.57,1213.45 1248.15,1213.45 1248.74,1213.45 1249.32,1213.45 1249.91,1213.45 1250.5,1213.45 1251.08,1213.45 1251.67,1213.45 1252.26,1213.45 1252.84,1213.45 1253.43,1213.45 1254.02,1213.45 1254.6,1213.45 1255.19,1213.45 1255.78,1213.45 1256.36,1213.45 1256.95,1213.45 1257.53,1213.45 1258.12,1213.45 1258.71,1213.45 1259.29,1213.45 1259.88,1213.45 1260.47,1213.45 1261.05,1213.45 1261.64,1213.45 1262.23,1213.45 1262.81,1213.45 1263.4,1213.45 1263.98,1213.45 1264.57,1213.45 1265.16,1213.45 1265.74,1213.45 1266.33,1213.45 1266.92,1213.45 1267.5,1213.45 1268.09,1213.45 1268.68,1213.45 1269.26,1213.45 1269.85,1213.45 1270.44,1213.45 1271.02,1213.45 1271.61,1213.45 1272.19,1213.45 1272.78,1213.45 1273.37,1213.45 1273.95,1213.45 1274.54,1213.45 1275.13,1213.45 1275.71,1213.45 1276.3,1213.45 1276.89,1213.45 1277.47,1213.45 1278.06,1213.45 1278.65,1213.45 1279.23,1213.45 1279.82,1213.45 1280.4,1213.45 1280.99,1213.45 1281.58,1213.45 1282.16,1213.45 1282.75,1213.45 1283.34,1213.45 1283.92,1213.45 1284.51,1213.45 1285.1,1213.45 1285.68,1213.45 1286.27,1213.45 1286.86,1213.45 1287.44,1213.45 1288.03,1213.45 1288.61,1213.45 1289.2,1213.45 1289.79,1213.45 1290.37,1213.45 1290.96,1213.45 1291.55,1213.45 1292.13,1213.45 1292.72,1213.45 1293.31,1213.45 1293.89,1213.45 1294.48,1213.45 1295.06,1213.45 1295.65,1213.45 1296.24,1213.45 1296.82,1213.45 1297.41,1213.45 1298,1213.45 1298.58,1213.45 1299.17,1213.45 1299.76,1213.45 1300.34,1213.45 1300.93,1213.45 1301.52,1213.45 1302.1,1213.45 1302.69,1213.45 1303.27,1213.45 1303.86,1213.45 1304.45,1213.45 1305.03,1213.45 1305.62,1213.45 1306.21,1213.45 1306.79,1213.45 1307.38,1213.45 1307.97,1213.45 1308.55,1213.45 1309.14,1213.45 1309.73,1213.45 1310.31,1213.45 1310.9,1213.45 1311.48,1213.45 1312.07,1213.45 1312.66,1213.45 1313.24,1213.45 1313.83,1213.45 1314.42,1213.45 1315,1213.45 1315.59,1213.45 1316.18,1213.45 1316.76,1213.45 1317.35,1213.45 1317.93,1213.45 1318.52,1213.45 1319.11,1213.45 1319.69,1213.45 1320.28,1213.45 1320.87,1213.45 1321.45,1213.45 1322.04,1213.45 1322.63,1213.45 1323.21,1213.45 1323.8,1213.45 1324.39,1213.45 1324.97,1213.45 1325.56,1213.45 1326.14,1213.45 1326.73,1213.45 1327.32,1213.45 1327.9,1213.45 1328.49,1213.45 1329.08,1213.45 1329.66,1213.45 1330.25,1213.45 1330.84,1213.45 1331.42,1213.45 1332.01,1213.45 1332.6,1213.45 1333.18,1213.45 1333.77,1213.45 1334.35,1213.45 1334.94,1213.45 1335.53,1213.45 1336.11,1213.45 1336.7,1213.45 1337.29,1213.45 1337.87,1213.45 1338.46,1213.45 1339.05,1213.45 1339.63,1213.45 1340.22,1213.45 1340.8,1213.45 1341.39,1213.45 1341.98,1213.45 1342.56,1213.45 1343.15,1213.45 1343.74,1213.45 1344.32,1213.45 1344.91,1213.45 1345.5,1213.45 1346.08,1213.45 1346.67,1213.45 1347.26,1213.45 1347.84,1213.45 1348.43,1213.45 1349.01,1213.45 1349.6,1213.45 1350.19,1213.45 1350.77,1213.45 1351.36,1213.45 1351.95,1213.45 1352.53,1213.45 1353.12,1213.45 1353.71,1213.45 1354.29,1213.45 1354.88,1213.45 1355.47,1213.45 1356.05,1213.45 1356.64,1213.45 1357.22,1213.45 1357.81,1213.45 1358.4,1213.45 1358.98,1213.45 1359.57,1213.45 1360.16,1213.45 1360.74,1213.45 1361.33,1213.45 1361.92,1213.45 1362.5,1213.45 1363.09,1213.45 1363.68,1213.45 1364.26,1213.45 1364.85,1213.45 1365.43,1213.45 1366.02,1213.45 1366.61,1213.45 1367.19,1213.45 1367.78,1213.45 1368.37,1213.45 1368.95,1213.45 1369.54,1213.45 1370.13,1213.45 1370.71,1213.45 1371.3,1213.45 1371.88,1213.45 1372.47,1213.45 1373.06,1213.45 1373.64,1213.45 1374.23,1213.45 1374.82,1213.45 1375.4,1213.45 1375.99,1213.45 1376.58,1213.45 1377.16,1213.45 1377.75,1213.45 1378.34,1213.45 1378.92,1213.45 1379.51,1213.45 1380.09,1213.45 1380.68,1213.45 1381.27,1213.45 1381.85,1213.45 1382.44,1213.45 1383.03,1213.45 1383.61,1213.45 1384.2,1213.45 1384.79,1213.45 1385.37,1213.45 1385.96,1213.45 1386.55,1213.45 1387.13,1213.45 1387.72,1213.45 1388.3,1213.45 1388.89,1213.45 1389.48,1213.45 1390.06,1213.45 1390.65,1213.45 1391.24,1213.45 1391.82,1213.45 1392.41,1213.45 1393,1213.45 1393.58,1213.45 1394.17,1213.45 1394.75,1213.45 1395.34,1213.45 1395.93,1213.45 1396.51,1213.45 1397.1,1213.45 1397.69,1213.45 1398.27,1213.45 1398.86,1213.45 1399.45,1213.45 1400.03,1213.45 1400.62,1213.45 1401.21,1213.45 1401.79,1213.45 1402.38,1213.45 1402.96,1213.45 1403.55,1213.45 1404.14,1213.45 1404.72,1213.45 1405.31,1213.45 1405.9,1213.45 1406.48,1213.45 1407.07,1213.45 1407.66,1213.45 1408.24,1213.45 1408.83,1213.45 1409.42,1213.45 1410,1213.45 1410.59,1213.45 1411.17,1213.45 1411.76,1213.45 1412.35,1213.45 1412.93,1213.45 1413.52,1213.45 1414.11,1213.45 1414.69,1213.45 1415.28,1213.45 1415.87,1213.45 1416.45,1213.45 1417.04,1213.45 1417.63,1213.45 1418.21,1213.45 1418.8,1213.45 1419.38,1213.45 1419.97,1213.45 1420.56,1213.45 1421.14,1213.45 1421.73,1213.45 1422.32,1213.45 1422.9,1213.45 1423.49,1213.45 1424.08,1213.45 1424.66,1213.45 1425.25,1213.45 1425.83,1213.45 1426.42,1213.45 1427.01,1213.45 1427.59,1213.45 1428.18,1213.45 1428.77,1213.45 1429.35,1213.45 1429.94,1213.45 1430.53,1213.45 1431.11,1213.45 1431.7,1213.45 1432.29,1213.45 1432.87,1213.45 1433.46,1213.45 1434.04,1213.45 1434.63,1213.45 1435.22,1213.45 1435.8,1213.45 1436.39,1213.45 1436.98,1213.45 1437.56,1213.45 1438.15,1213.45 1438.74,1213.45 1439.32,1213.45 1439.91,1213.45 1440.5,1213.45 1441.08,1213.45 1441.67,1213.45 1442.25,1213.45 1442.84,1213.45 1443.43,1213.45 1444.01,1213.45 1444.6,1213.45 1445.19,1213.45 1445.77,1213.45 1446.36,1213.45 1446.95,1213.45 1447.53,1213.45 1448.12,1213.45 1448.7,1213.45 1449.29,1213.45 1449.88,1213.45 1450.46,1213.45 1451.05,1213.45 1451.64,1213.45 1452.22,1213.45 1452.81,1213.45 1453.4,1213.45 1453.98,1213.45 1454.57,1213.45 1455.16,1213.45 1455.74,1213.45 1456.33,1213.45 1456.91,1213.45 1457.5,1213.45 1458.09,1213.45 1458.67,1213.45 1459.26,1213.45 1459.85,1213.45 1460.43,1213.45 1461.02,1213.45 1461.61,1213.45 1462.19,1213.45 1462.78,1213.45 1463.37,1213.45 1463.95,1213.45 1464.54,1213.45 1465.12,1213.45 1465.71,1213.45 1466.3,1213.45 1466.88,1213.45 1467.47,1213.45 1468.06,1213.45 1468.64,1213.45 1469.23,1213.45 1469.82,1213.45 1470.4,1213.45 1470.99,1213.45 1471.57,1213.45 1472.16,1213.45 1472.75,1213.45 1473.33,1213.45 1473.92,1213.45 1474.51,1213.45 1475.09,1213.45 1475.68,1213.45 1476.27,1213.45 1476.85,1213.45 1477.44,1213.45 1478.03,1213.45 1478.61,1213.45 1479.2,1213.45 1479.78,1213.45 1480.37,1213.45 1480.96,1213.45 1481.54,1213.45 1482.13,1213.45 1482.72,1213.45 1483.3,1213.45 1483.89,1213.45 1484.48,1213.45 1485.06,1213.45 1485.65,1213.45 1486.24,1213.45 1486.82,1213.45 1487.41,1213.45 1487.99,1213.45 1488.58,1213.45 1489.17,1213.45 1489.75,1213.45 1490.34,1213.45 1490.93,1213.45 1491.51,1213.45 1492.1,1213.45 1492.69,1213.45 1493.27,1213.45 1493.86,1213.45 1494.45,1213.45 1495.03,1213.45 1495.62,1213.45 1496.2,1213.45 1496.79,1213.45 1497.38,1213.45 1497.96,1213.45 1498.55,1213.45 1499.14,1213.45 1499.72,1213.45 1500.31,1213.45 1500.9,1213.45 1501.48,1213.45 1502.07,1213.45 1502.65,1213.45 1503.24,1213.45 1503.83,1213.45 1504.41,1213.45 1505,1213.45 1505.59,1213.45 1506.17,1213.45 1506.76,1213.45 1507.35,1213.45 1507.93,1213.45 1508.52,1213.45 1509.11,1213.45 1509.69,1213.45 1510.28,1213.45 1510.86,1213.45 1511.45,1213.45 1512.04,1213.45 1512.62,1213.45 1513.21,1213.45 1513.8,1213.45 1514.38,1213.45 1514.97,1213.45 1515.56,1213.45 1516.14,1213.45 1516.73,1213.45 1517.32,1213.45 1517.9,1213.45 1518.49,1213.45 1519.07,1213.45 1519.66,1213.45 1520.25,1213.45 1520.83,1213.45 1521.42,1213.45 1522.01,1213.45 1522.59,1213.45 1523.18,1213.45 1523.77,1213.45 1524.35,1213.45 1524.94,1213.45 1525.52,1213.45 1526.11,1213.45 1526.7,1213.45 1527.28,1213.45 1527.87,1213.45 1528.46,1213.45 1529.04,1213.45 1529.63,1213.45 1530.22,1213.45 1530.8,1213.45 1531.39,1213.45 1531.98,1213.45 1532.56,1213.45 1533.15,1213.45 1533.73,1213.45 1534.32,1213.45 1534.91,1213.45 1535.49,1213.45 1536.08,1213.45 1536.67,1213.45 1537.25,1213.45 1537.84,1213.45 1538.43,1213.45 1539.01,1213.45 1539.6,1213.45 1540.19,1213.45 1540.77,1213.45 1541.36,1213.45 1541.94,1213.45 1542.53,1213.45 1543.12,1213.45 1543.7,1213.45 1544.29,1213.45 1544.88,1213.45 1545.46,1213.45 1546.05,1213.45 1546.64,1213.45 1547.22,1213.45 1547.81,1213.45 1548.4,1213.45 1548.98,1213.45 1549.57,1213.45 1550.15,1213.45 1550.74,1213.45 1551.33,1213.45 1551.91,1213.45 1552.5,1213.45 1553.09,1213.45 1553.67,1213.45 1554.26,1213.45 1554.85,1213.45 1555.43,1213.45 1556.02,1213.45 1556.6,1213.45 1557.19,1213.45 1557.78,1213.45 1558.36,1213.45 1558.95,1213.45 1559.54,1213.45 1560.12,1213.45 1560.71,1213.45 1561.3,1213.45 1561.88,1213.45 1562.47,1213.45 1563.06,1213.45 1563.64,1213.45 1564.23,1213.45 1564.81,1213.45 1565.4,1213.45 1565.99,1213.45 1566.57,1213.45 1567.16,1213.45 1567.75,1213.45 1568.33,1213.45 1568.92,1213.45 1569.51,1213.45 1570.09,1213.45 1570.68,1213.45 1571.27,1213.45 1571.85,1213.45 1572.44,1213.45 1573.02,1213.45 1573.61,1213.45 1574.2,1213.45 1574.78,1213.45 1575.37,1213.45 1575.96,1213.45 1576.54,1213.45 1577.13,1213.45 1577.72,1213.45 1578.3,1213.45 1578.89,1213.45 1579.47,1213.45 1580.06,1213.45 1580.65,1213.45 1581.23,1213.45 1581.82,1213.45 1582.41,1213.45 1582.99,1213.45 1583.58,1213.45 1584.17,1213.45 1584.75,1213.45 1585.34,1213.45 1585.93,1213.45 1586.51,1213.45 1587.1,1213.45 1587.68,1213.45 1588.27,1213.45 1588.86,1213.45 1589.44,1213.45 1590.03,1213.45 1590.62,1213.45 1591.2,1213.45 1591.79,1213.45 1592.38,1213.45 1592.96,1213.45 1593.55,1213.45 1594.14,1213.45 1594.72,1213.45 1595.31,1213.45 1595.89,1213.45 1596.48,1213.45 1597.07,1213.45 1597.65,1213.45 1598.24,1213.45 1598.83,1213.45 1599.41,1213.45 1600,1213.45 1600.59,1213.45 1601.17,1213.45 1601.76,1213.45 1602.34,1213.45 1602.93,1213.45 1603.52,1213.45 1604.1,1213.45 1604.69,1213.45 1605.28,1213.45 1605.86,1213.45 1606.45,1213.45 1607.04,1213.45 1607.62,1213.45 1608.21,1213.45 1608.8,1213.45 1609.38,1213.45 1609.97,1213.45 1610.55,1213.45 1611.14,1213.45 1611.73,1213.45 1612.31,1213.45 1612.9,1213.45 1613.49,1213.45 1614.07,1213.45 1614.66,1213.45 1615.25,1213.45 1615.83,1213.45 1616.42,1213.45 1617.01,1213.45 1617.59,1213.45 1618.18,1213.45 1618.76,1213.45 1619.35,1213.45 1619.94,1213.45 1620.52,1213.45 1621.11,1213.45 1621.7,1213.45 1622.28,1213.45 1622.87,1213.45 1623.46,1213.45 1624.04,1213.45 1624.63,1213.45 1625.22,1213.45 1625.8,1213.45 1626.39,1213.45 1626.97,1213.45 1627.56,1213.45 1628.15,1213.45 1628.73,1213.45 1629.32,1213.45 1629.91,1213.45 1630.49,1213.45 1631.08,1213.45 1631.67,1213.45 1632.25,1213.45 1632.84,1213.45 1633.42,1213.45 1634.01,1213.45 1634.6,1213.45 1635.18,1213.45 1635.77,1213.45 1636.36,1213.45 1636.94,1213.45 1637.53,1213.45 1638.12,1213.45 1638.7,1213.45 1639.29,1213.45 1639.88,1213.45 1640.46,1213.45 1641.05,1213.45 1641.63,1213.45 1642.22,1213.45 1642.81,1213.45 1643.39,1213.45 1643.98,1213.45 1644.57,1213.45 1645.15,1213.45 1645.74,1213.45 1646.33,1213.45 1646.91,1213.45 1647.5,1213.45 1648.09,1213.45 1648.67,1213.45 1649.26,1213.45 1649.84,1213.45 1650.43,1213.45 1651.02,1213.45 1651.6,1213.45 1652.19,1213.45 1652.78,1213.45 1653.36,1213.45 1653.95,1213.45 1654.54,1213.45 1655.12,1213.45 1655.71,1213.45 1656.29,1213.45 1656.88,1213.45 1657.47,1213.45 1658.05,1213.45 1658.64,1213.45 1659.23,1213.45 1659.81,1213.45 1660.4,1213.45 1660.99,1213.45 1661.57,1213.45 1662.16,1213.45 1662.75,1213.45 1663.33,1213.45 1663.92,1213.45 1664.5,1213.45 1665.09,1213.45 1665.68,1213.45 1666.26,1213.45 1666.85,1213.45 1667.44,1213.45 1668.02,1213.45 1668.61,1213.45 1669.2,1213.45 1669.78,1213.45 1670.37,1213.45 1670.96,1213.45 1671.54,1213.45 1672.13,1213.45 1672.71,1213.45 1673.3,1213.45 1673.89,1213.45 1674.47,1213.45 1675.06,1213.45 1675.65,1213.45 1676.23,1213.45 1676.82,1213.45 1677.41,1213.45 1677.99,1213.45 1678.58,1213.45 1679.17,1213.45 1679.75,1213.45 1680.34,1213.45 1680.92,1213.45 1681.51,1213.45 1682.1,1213.45 1682.68,1213.45 1683.27,1213.45 1683.86,1213.45 1684.44,1213.45 1685.03,1213.45 1685.62,1213.45 1686.2,1213.45 1686.79,1213.45 1687.37,1213.45 1687.96,1213.45 1688.55,1213.45 1689.13,1213.45 1689.72,1213.45 1690.31,1213.45 1690.89,1213.45 1691.48,1213.45 1692.07,1213.45 1692.65,1213.45 1693.24,1213.45 1693.83,1213.45 1694.41,1213.45 1695,1213.45 1695.58,1213.45 1696.17,1213.45 1696.76,1213.45 1697.34,1213.45 1697.93,1213.45 1698.52,1213.45 1699.1,1213.45 1699.69,1213.45 1700.28,1213.45 1700.86,1213.45 1701.45,1213.45 1702.04,1213.45 1702.62,1213.45 1703.21,1213.45 1703.79,1213.45 1704.38,1213.45 1704.97,1213.45 1705.55,1213.45 1706.14,1213.45 1706.73,1213.45 1707.31,1213.45 1707.9,1213.45 1708.49,1213.45 1709.07,1213.45 1709.66,1213.45 1710.24,1213.45 1710.83,1213.45 1711.42,1213.45 1712,1213.45 1712.59,1213.45 1713.18,1213.45 1713.76,1213.45 1714.35,1213.45 1714.94,1213.45 1715.52,1213.45 1716.11,1213.45 1716.7,1213.45 1717.28,1213.45 1717.87,1213.45 1718.45,1213.45 1719.04,1213.45 1719.63,1213.45 1720.21,1213.45 1720.8,1213.45 1721.39,1213.45 1721.97,1213.45 1722.56,1213.45 1723.15,1213.45 1723.73,1213.45 1724.32,1213.45 1724.91,1213.45 1725.49,1213.45 1726.08,1213.45 1726.66,1213.45 1727.25,1213.45 1727.84,1213.45 1728.42,1213.45 1729.01,1213.45 1729.6,1213.45 1730.18,1213.45 1730.77,1213.45 1731.36,1213.45 1731.94,1213.45 1732.53,1213.45 1733.11,1213.45 1733.7,1213.45 1734.29,1213.45 1734.87,1213.45 1735.46,1213.45 1736.05,1213.45 1736.63,1213.45 1737.22,1213.45 1737.81,1213.45 1738.39,1213.45 1738.98,1213.45 1739.57,1213.45 1740.15,1213.45 1740.74,1213.45 1741.32,1213.45 1741.91,1213.45 1742.5,1213.45 1743.08,1213.45 1743.67,1213.45 1744.26,1213.45 1744.84,1213.45 1745.43,1213.45 1746.02,1213.45 1746.6,1213.45 1747.19,1213.45 1747.78,1213.45 1748.36,1213.45 1748.95,1213.45 1749.53,1213.45 1750.12,1213.45 1750.71,1213.45 1751.29,1213.45 1751.88,1213.45 1752.47,1213.45 1753.05,1213.45 1753.64,1213.45 1754.23,1213.45 1754.81,1213.45 1755.4,1213.45 1755.99,1213.45 1756.57,1213.45 1757.16,1213.45 1757.74,1213.45 1758.33,1213.45 1758.92,1213.45 1759.5,1213.45 1760.09,1213.45 1760.68,1213.45 1761.26,1213.45 1761.85,1213.45 1762.44,1213.45 1763.02,1213.45 1763.61,1213.45 1764.19,1213.45 1764.78,1213.45 1765.37,1213.45 1765.95,1213.45 1766.54,1213.45 1767.13,1213.45 1767.71,1213.45 1768.3,1213.45 1768.89,1213.45 1769.47,1213.45 1770.06,1213.45 1770.65,1213.45 1771.23,1213.45 1771.82,1213.45 1772.4,1213.45 1772.99,1213.45 1773.58,1213.45 1774.16,1213.45 1774.75,1213.45 1775.34,1213.45 1775.92,1213.45 1776.51,1213.45 1777.1,1213.45 1777.68,1213.45 1778.27,1213.45 1778.86,1213.45 1779.44,1213.45 1780.03,1213.45 1780.61,1213.45 1781.2,1213.45 1781.79,1213.45 1782.37,1213.45 1782.96,1213.45 1783.55,1213.45 1784.13,1213.45 1784.72,1213.45 1785.31,1213.45 1785.89,1213.45 1786.48,1213.45 1787.06,1213.45 1787.65,1213.45 1788.24,1213.45 1788.82,1213.45 1789.41,1213.45 1790,1213.45 1790.58,1213.45 1791.17,1213.45 1791.76,1213.45 1792.34,1213.45 1792.93,1213.45 1793.52,1213.45 1794.1,1213.45 1794.69,1213.45 1795.27,1213.45 1795.86,1213.45 1796.45,1213.45 1797.03,1213.45 1797.62,1213.45 1798.21,1213.45 1798.79,1213.45 1799.38,1213.45 1799.97,1213.45 1800.55,1213.45 1801.14,1213.45 1801.73,1213.45 1802.31,1213.45 1802.9,1213.45 1803.48,1213.45 1804.07,1213.45 1804.66,1213.45 1805.24,1213.45 1805.83,1213.45 1806.42,1213.45 1807,1213.45 1807.59,1213.45 1808.18,1213.45 1808.76,1213.45 1809.35,1213.45 1809.94,1213.45 1810.52,1213.45 1811.11,1213.45 1811.69,1213.45 1812.28,1213.45 1812.87,1213.45 1813.45,1213.45 1814.04,1213.45 1814.63,1213.45 1815.21,1213.45 1815.8,1213.45 1816.39,1213.45 1816.97,1213.45 1817.56,1213.45 1818.14,1213.45 1818.73,1213.45 1819.32,1213.45 1819.9,1213.45 1820.49,1213.45 1821.08,1213.45 1821.66,1213.45 1822.25,1213.45 1822.84,1213.45 1823.42,1213.45 1824.01,1213.45 1824.6,1213.45 1825.18,1213.45 1825.77,1213.45 1826.35,1213.45 1826.94,1213.45 1827.53,1213.45 1828.11,1213.45 1828.7,1213.45 1829.29,1213.45 1829.87,1213.45 1830.46,1213.45 1831.05,1213.45 1831.63,1213.45 1832.22,1213.45 1832.81,1213.45 1833.39,1213.45 1833.98,1213.45 1834.56,1213.45 1835.15,1213.45 1835.74,1213.45 1836.32,1213.45 1836.91,1213.45 1837.5,1213.45 1838.08,1213.45 1838.67,1213.45 1839.26,1213.45 1839.84,1213.45 1840.43,1213.45 1841.01,1213.45 1841.6,1213.45 1842.19,1213.45 1842.77,1213.45 1843.36,1213.45 1843.95,1213.45 1844.53,1213.45 1845.12,1213.45 1845.71,1213.45 1846.29,1213.45 1846.88,1213.45 1847.47,1213.45 1848.05,1213.45 1848.64,1213.45 1849.22,1213.45 1849.81,1213.45 1850.4,1213.45 1850.98,1213.45 1851.57,1213.45 1852.16,1213.45 1852.74,1213.45 1853.33,1213.45 1853.92,1213.45 1854.5,1213.45 1855.09,1213.45 1855.68,1213.45 1856.26,1213.45 1856.85,1213.45 1857.43,1213.45 1858.02,1213.45 1858.61,1213.45 1859.19,1213.45 1859.78,1213.45 1860.37,1213.45 1860.95,1213.45 1861.54,1213.45 1862.13,1213.45 1862.71,1213.45 1863.3,1213.45 1863.88,1213.45 1864.47,1213.45 1865.06,1213.45 1865.64,1213.45 1866.23,1213.45 1866.82,1213.45 1867.4,1213.45 1867.99,1213.45 1868.58,1213.45 1869.16,1213.45 1869.75,1213.45 1870.34,1213.45 1870.92,1213.45 1871.51,1213.45 1872.09,1213.45 1872.68,1213.45 1873.27,1213.45 1873.85,1213.45 1874.44,1213.45 1875.03,1213.45 1875.61,1213.45 1876.2,1213.45 1876.79,1213.45 1877.37,1213.45 1877.96,1213.45 1878.55,1213.45 1879.13,1213.45 1879.72,1213.45 1880.3,1213.45 1880.89,1213.45 1881.48,1213.45 1882.06,1213.45 1882.65,1213.45 1883.24,1213.45 1883.82,1213.45 1884.41,1213.45 1885,1213.45 1885.58,1213.45 1886.17,1213.45 1886.76,1213.45 1887.34,1213.45 1887.93,1213.45 1888.51,1213.45 1889.1,1213.45 1889.69,1213.45 1890.27,1213.45 1890.86,1213.45 1891.45,1213.45 1892.03,1213.45 1892.62,1213.45 1893.21,1213.45 1893.79,1213.45 1894.38,1213.45 1894.96,1213.45 1895.55,1213.45 1896.14,1213.45 1896.72,1213.45 1897.31,1213.45 1897.9,1213.45 1898.48,1213.45 1899.07,1213.45 1899.66,1213.45 1900.24,1213.45 1900.83,1213.45 1901.42,1213.45 1902,1213.45 1902.59,1213.45 1903.17,1213.45 1903.76,1213.45 1904.35,1213.45 1904.93,1213.45 1905.52,1213.45 1906.11,1213.45 1906.69,1213.45 1907.28,1213.45 1907.87,1213.45 1908.45,1213.45 1909.04,1213.45 1909.63,1213.45 1910.21,1213.45 1910.8,1213.45 1911.38,1213.45 1911.97,1213.45 1912.56,1213.45 1913.14,1213.45 1913.73,1213.45 1914.32,1213.45 1914.9,1213.45 1915.49,1213.45 1916.08,1213.45 1916.66,1213.45 1917.25,1213.45 1917.83,1213.45 1918.42,1213.45 1919.01,1213.45 1919.59,1213.45 1920.18,1213.45 1920.77,1213.45 1921.35,1213.45 1921.94,1213.45 1922.53,1213.45 1923.11,1213.45 1923.7,1213.45 1924.29,1213.45 1924.87,1213.45 1925.46,1213.45 1926.04,1213.45 1926.63,1213.45 1927.22,1213.45 1927.8,1213.45 1928.39,1213.45 1928.98,1213.45 1929.56,1213.45 1930.15,1213.45 1930.74,1213.45 1931.32,1213.45 1931.91,1213.45 1932.5,1213.45 1933.08,1213.45 1933.67,1213.45 1934.25,1213.45 1934.84,1213.45 1935.43,1213.45 1936.01,1213.45 1936.6,1213.45 1937.19,1213.45 1937.77,1213.45 1938.36,1213.45 1938.95,1213.45 1939.53,1213.45 1940.12,1213.45 1940.71,1213.45 1941.29,1213.45 1941.88,1213.45 1942.46,1213.45 1943.05,1213.45 1943.64,1213.45 1944.22,1213.45 1944.81,1213.45 1945.4,1213.45 1945.98,1213.45 1946.57,1213.45 1947.16,1213.45 1947.74,1213.45 1948.33,1213.45 1948.91,1213.45 1949.5,1213.45 1950.09,1213.45 1950.67,1213.45 1951.26,1213.45 1951.85,1213.45 1952.43,1213.45 1953.02,1213.45 1953.61,1213.45 1954.19,1213.45 1954.78,1213.45 1955.37,1213.45 1955.95,1213.45 1956.54,1213.45 1957.12,1213.45 1957.71,1213.45 1958.3,1213.45 1958.88,1213.45 1959.47,1213.45 1960.06,1213.45 1960.64,1213.45 1961.23,1213.45 1961.82,1213.45 1962.4,1213.45 1962.99,1213.45 1963.58,1213.45 1964.16,1213.45 1964.75,1213.45 1965.33,1213.45 1965.92,1213.45 1966.51,1213.45 1967.09,1213.45 1967.68,1213.45 1968.27,1213.45 1968.85,1213.45 1969.44,1213.45 1970.03,1213.45 1970.61,1213.45 1971.2,1213.45 1971.78,1213.45 1972.37,1213.45 1972.96,1213.45 1973.54,1213.45 1974.13,1213.45 1974.72,1213.45 1975.3,1213.45 1975.89,1213.45 1976.48,1213.45 1977.06,1213.45 1977.65,1213.45 1978.24,1213.45 1978.82,1213.45 1979.41,1213.45 1979.99,1213.45 1980.58,1213.45 1981.17,1213.45 1981.75,1213.45 1982.34,1213.45 1982.93,1213.45 1983.51,1213.45 1984.1,1213.45 1984.69,1213.45 1985.27,1213.45 1985.86,1213.45 1986.45,1213.45 1987.03,1213.45 1987.62,1213.45 1988.2,1213.45 1988.79,1213.45 1989.38,1213.45 1989.96,1213.45 1990.55,1213.45 1991.14,1213.45 1991.72,1213.45 1992.31,1213.45 1992.9,1213.45 1993.48,1213.45 1994.07,1213.45 1994.65,1213.45 1995.24,1213.45 1995.83,1213.45 1996.41,1213.45 1997,1213.45 1997.59,1213.45 1998.17,1213.45 1998.76,1213.45 1999.35,1213.45 1999.93,1213.45 2000.52,1213.45 2001.11,1213.45 2001.69,1213.45 2002.28,1213.45 2002.86,1213.45 2003.45,1213.45 2004.04,1213.45 2004.62,1213.45 2005.21,1213.45 2005.8,1213.45 2006.38,1213.45 2006.97,1213.45 2007.56,1213.45 2008.14,1213.45 2008.73,1213.45 2009.32,1213.45 2009.9,1213.45 2010.49,1213.45 2011.07,1213.45 2011.66,1213.45 2012.25,1213.45 2012.83,1213.45 2013.42,1213.45 2014.01,1213.45 2014.59,1213.45 2015.18,1213.45 2015.77,1213.45 2016.35,1213.45 2016.94,1213.45 2017.53,1213.45 2018.11,1213.45 2018.7,1213.45 2019.28,1213.45 2019.87,1213.45 2020.46,1213.45 2021.04,1213.45 2021.63,1213.45 2022.22,1213.45 2022.8,1213.45 2023.39,1213.45 2023.98,1213.45 2024.56,1213.45 2025.15,1213.45 2025.73,1213.45 2026.32,1213.45 2026.91,1213.45 2027.49,1213.45 2028.08,1213.45 2028.67,1213.45 2029.25,1213.45 2029.84,1213.45 2030.43,1213.45 2031.01,1213.45 2031.6,1213.45 2032.19,1213.45 2032.77,1213.45 2033.36,1213.45 2033.94,1213.45 2034.53,1213.45 2035.12,1213.45 2035.7,1213.45 2036.29,1213.45 2036.88,1213.45 2037.46,1213.45 2038.05,1213.45 2038.64,1213.45 2039.22,1213.45 2039.81,1213.45 2040.4,1213.45 2040.98,1213.45 2041.57,1213.45 2042.15,1213.45 2042.74,1213.45 2043.33,1213.45 2043.91,1213.45 2044.5,1213.45 2045.09,1213.45 2045.67,1213.45 2046.26,1213.45 2046.85,1213.45 2047.43,1213.45 2048.02,1213.45 2048.6,1213.45 2049.19,1213.45 2049.78,1213.45 2050.36,1213.45 2050.95,1213.45 2051.54,1213.45 2052.12,1213.45 2052.71,1213.45 2053.3,1213.45 2053.88,1213.45 2054.47,1213.45 2055.06,1213.45 2055.64,1213.45 2056.23,1213.45 2056.81,1213.45 2057.4,1213.45 2057.99,1213.45 2058.57,1213.45 2059.16,1213.45 2059.75,1213.45 2060.33,1213.45 2060.92,1213.45 2061.51,1213.45 2062.09,1213.45 2062.68,1213.45 2063.27,1213.45 2063.85,1213.45 2064.44,1213.45 2065.02,1213.45 2065.61,1213.45 2066.2,1213.45 2066.78,1213.45 2067.37,1213.45 2067.96,1213.45 2068.54,1213.45 2069.13,1213.45 2069.72,1213.45 2070.3,1213.45 2070.89,1213.45 2071.48,1213.45 2072.06,1213.45 2072.65,1213.45 2073.23,1213.45 2073.82,1213.45 2074.41,1213.45 2074.99,1213.45 2075.58,1213.45 2076.17,1213.45 2076.75,1213.45 2077.34,1213.45 2077.93,1213.45 2078.51,1213.45 2079.1,1213.45 2079.68,1213.45 2080.27,1213.45 2080.86,1213.45 2081.44,1213.45 2082.03,1213.45 2082.62,1213.45 2083.2,1213.45 2083.79,1213.45 2084.38,1213.45 2084.96,1213.45 2085.55,1213.45 2086.14,1213.45 2086.72,1213.45 2087.31,1213.45 2087.89,1213.45 2088.48,1213.45 2089.07,1213.45 2089.65,1213.45 2090.24,1213.45 2090.83,1213.45 2091.41,1213.45 2092,1213.45 2092.59,1213.45 2093.17,1213.45 2093.76,1213.45 2094.35,1213.45 2094.93,1213.45 2095.52,1213.45 2096.1,1213.45 2096.69,1213.45 2097.28,1213.45 2097.86,1213.45 2098.45,1213.45 2099.04,1213.45 2099.62,1213.45 2100.21,1213.45 2100.8,1213.45 2101.38,1213.45 2101.97,1213.45 2102.55,1213.45 2103.14,1213.45 2103.73,1213.45 2104.31,1213.45 2104.9,1213.45 2105.49,1213.45 2106.07,1213.45 2106.66,1213.45 2107.25,1213.45 2107.83,1213.45 2108.42,1213.45 2109.01,1213.45 2109.59,1213.45 2110.18,1213.45 2110.76,1213.45 2111.35,1213.45 2111.94,1213.45 2112.52,1213.45 2113.11,1213.45 2113.7,1213.45 2114.28,1213.45 2114.87,1213.45 2115.46,1213.45 2116.04,1213.45 2116.63,1213.45 2117.22,1213.45 2117.8,1213.45 2118.39,1213.45 2118.97,1213.45 2119.56,1213.45 2120.15,1213.45 2120.73,1213.45 2121.32,1213.45 2121.91,1213.45 2122.49,1213.45 2123.08,1213.45 2123.67,1213.45 2124.25,1213.45 2124.84,1213.45 2125.42,1213.45 2126.01,1213.45 2126.6,1213.45 2127.18,1213.45 2127.77,1213.45 2128.36,1213.45 2128.94,1213.45 2129.53,1213.45 2130.12,1213.45 2130.7,1213.45 2131.29,1213.45 2131.88,1213.45 2132.46,1213.45 2133.05,1213.45 2133.63,1213.45 2134.22,1213.45 2134.81,1213.45 2135.39,1213.45 2135.98,1213.45 2136.57,1213.45 2137.15,1213.45 2137.74,1213.45 2138.33,1213.45 2138.91,1213.45 2139.5,1213.45 2140.09,1213.45 2140.67,1213.45 2141.26,1213.45 2141.84,1213.45 2142.43,1213.45 2143.02,1213.45 2143.6,1213.45 2144.19,1213.45 2144.78,1213.45 2145.36,1213.45 2145.95,1213.45 2146.54,1213.45 2147.12,1213.45 2147.71,1213.45 2148.3,1213.45 2148.88,1213.45 2149.47,1213.45 2150.05,1213.45 2150.64,1213.45 2151.23,1213.45 2151.81,1213.45 2152.4,1213.45 2152.99,1213.45 2153.57,1213.45 2154.16,1213.45 2154.75,1213.45 2155.33,1213.45 2155.92,1213.45 2156.5,1213.45 2157.09,1213.45 2157.68,1213.45 2158.26,1213.45 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.64,1196.42 1399.11,899.083 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.91 985.439,1196.42 2158.26,1196.42 2158.26,1229.91 985.439,1229.91 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip723\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip723)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4932.77 163.792,-5894.67 164.351,-6844.95 164.91,-7711.02 165.469,-8476.46 166.029,-9171.61 166.588,-9799.21 167.147,-10363.6 167.706,-10868.9 168.266,-10381.3 168.825,-10821 169.384,-11210.3 169.943,-10795.6 170.503,-11125.1 171.062,-11412.1 171.621,-11659.5 172.18,-11869.8 172.74,-12036.1 173.299,-12180.2 173.858,-12281.4 174.417,-11900.3 174.977,-11163.4 175.536,-11241.6 176.095,-11295.8 176.655,-10999.1 177.214,-11012.5 177.773,-11016.9 178.332,-10713.7 178.892,-10709.5 179.451,-10675.8 180.01,-10172.6 180.569,-9493.36 181.129,-9439.89 181.688,-9364.21 182.247,-9290.2 182.806,-9031.54 183.366,-8769.76 183.925,-8655.63 184.484,-8269.08 185.043,-8041.23 185.603,-7820.66 186.162,-7606.77 186.721,-7383.78 187.28,-7290.24 187.84,-7194.83 188.399,-6897.98 188.958,-6814.18 189.517,-6621.36 190.077,-6521.97 190.636,-6252.8 191.195,-6081.97 191.754,-5914.37 192.314,-5820.3 192.873,-5653.17 193.432,-5553.51 193.991,-5390.85 194.551,-5234.28 195.11,-5081.8 195.669,-4990.03 196.228,-4778.15 196.788,-4575.35 197.347,-4225.5 197.906,-3995.23 198.465,-3876.58 199.025,-3755.82 199.584,-3551.51 200.143,-3440.94 200.702,-3288.11 201.262,-3224.81 201.821,-3079.04 202.38,-2940.08 202.939,-2762.17 203.499,-2631.45 204.058,-2535.47 204.617,-2410.33 205.176,-2357.51 205.736,-2164.9 206.295,-2119.22 206.854,-2035.42 207.413,-1920.88 207.973,-1841.75 208.532,-1762.45 209.091,-1625.66 209.65,-1579.8 210.21,-1478.21 210.769,-1404.63 211.328,-1364.94 211.887,-1323.84 212.447,-1201.9 213.006,-1106.06 213.565,-1019.81 214.124,-985.768 214.684,-847.418 215.243,-762.228 215.802,-656.978 216.361,-582.565 216.921,-555.819 217.48,-510.311 218.039,-463.249 218.598,-415.007 219.158,-392.414 219.717,-347.023 220.276,-323.35 220.835,-277.011 221.395,-208.152 221.954,-148.52 222.513,-102.816 223.072,-80.3653 223.632,-18.2338 224.191,-0.438348 224.75,36.4243 225.309,93.6827 225.869,111.097 226.428,167.624 226.987,179.876 227.546,212.139 228.106,244.603 228.665,257.649 229.224,267.929 229.783,281.454 230.343,335.835 230.902,427.679 231.461,453.608 232.02,461.401 232.58,470.841 233.139,535.953 233.698,542.029 234.257,585.642 234.817,586.391 235.376,589.151 235.935,608.312 236.494,613.686 237.054,635.239 237.613,658.596 238.172,660.78 238.731,685.146 239.291,703.366 239.85,724.506 240.409,760.223 240.968,810.967 241.528,842.661 242.087,892.707 242.646,869.497 243.205,844.691 243.765,818.059 244.324,820.149 244.883,820.762 245.442,857.667 246.002,874.081 246.561,905.478 247.12,917.572 247.679,911.128 248.239,905.623 248.798,918.771 249.357,914.226 249.916,894.012 250.476,909.259 251.035,939.853 251.594,972.083 252.153,946.581 252.713,926.401 253.272,961.513 253.831,993.547 254.39,1005.76 254.95,1051.66 255.509,1044.27 256.068,1057.05 256.627,1068.01 257.187,1077.75 257.746,1035.22 258.305,1042.83 258.864,1034.37 259.424,1025.68 259.983,1052.99 260.542,1048.77 261.101,1057.67 261.661,1049.34 262.22,1043.91 262.779,1020.95 263.338,1029.82 263.898,1043.52 264.457,1069.45 265.016,1076 265.575,1067.75 266.135,1075.27 266.694,1070.08 267.253,1061.35 267.812,1073.22 268.372,1101.15 268.931,1111.27 269.49,1098.33 270.049,1107.42 270.609,1129.47 271.168,1139.04 271.727,1147.07 272.286,1150.36 272.846,1155.43 273.405,1142.98 273.964,1101.74 274.523,1092.85 275.083,1069.19 275.642,1080 276.201,1086.69 276.76,1097.72 277.32,1120.45 277.879,1075.83 278.438,1101.83 278.997,1090.96 279.557,1165.57 280.116,1168.17 280.675,1122.8 281.234,1099.95 281.794,1124.63 282.353,1129.98 282.912,1134.18 283.471,1124.08 284.031,1145.76 284.59,1117.53 285.149,1091.62 285.708,1064.05 286.268,1058.3 286.827,1033.21 287.386,1012.89 287.945,1024.62 288.505,1002.03 289.064,995.084 289.623,990.345 290.182,972.342 290.742,903.097 291.301,924.026 291.86,910.426 292.419,909.483 292.979,894.031 293.538,878.557 294.097,880.993 294.656,916.54 295.216,918.381 295.775,917.545 296.334,949.626 296.893,948.434 297.453,1014.05 298.012,1040.85 298.571,1096.97 299.13,1085.39 299.69,1094.64 300.249,1087.22 300.808,1077.5 301.368,1068.31 301.927,1090.72 302.486,1081.31 303.045,1055.5 303.605,1046 304.164,1022.46 304.723,1048.31 305.282,1056.09 305.842,1063.83 306.401,1057.56 306.96,1050.01 307.519,1037.81 308.079,995.535 308.638,984.709 309.197,981.715 309.756,994.37 310.316,1004.1 310.875,1015.53 311.434,990.474 311.993,1002.48 312.553,1010.35 313.112,1019.97 313.671,996.265 314.23,989.383 314.79,984.354 315.349,962.061 315.908,962.696 316.467,990.89 317.027,1017.42 317.586,1025.38 318.145,1047.83 318.704,1021.8 319.264,1013.8 319.823,1008.07 320.382,984.962 320.941,978.366 321.501,990.902 322.06,983.437 322.619,975.977 323.178,950.032 323.738,996.051 324.297,973.701 324.856,939.332 325.415,955.191 325.975,953.437 326.534,966.232 327.093,962.557 327.652,942.551 328.212,972.011 328.771,949.007 329.33,945.396 329.889,970.018 330.449,964.156 331.008,986.987 331.567,979.708 332.126,957.571 332.686,951.423 333.245,963.657 333.804,975.671 334.363,937.591 334.923,949.192 335.482,986.729 336.041,966.583 336.6,958.555 337.16,967.079 337.719,981.57 338.278,960.266 338.837,971.286 339.397,992.486 339.956,999.274 340.515,1007.22 341.074,1011.6 341.634,1020.45 342.193,1026.21 342.752,1036.45 343.311,1046.53 343.871,1036.61 344.43,995.981 344.989,986.221 345.548,962.198 346.108,942.755 346.667,921.729 347.226,897.947 347.785,878.283 348.345,878.542 348.904,890.334 349.463,900.783 350.022,910.984 350.582,920.415 351.141,916.971 351.7,892.168 352.259,884.843 352.819,831.823 353.378,849.819 353.937,849.118 354.496,863.665 355.056,876.259 355.615,852.57 356.174,830.75 356.733,830.319 357.293,848.535 357.852,864.598 358.411,862.626 358.97,860.475 359.53,844.751 360.089,862.903 360.648,875.473 361.207,860.102 361.767,843.315 362.326,826.623 362.885,857.962 363.444,872.534 364.004,935.487 364.563,962.708 365.122,956.463 365.681,964.717 366.241,1008.27 366.8,996.846 367.359,1003.33 367.918,946.957 368.478,955.7 369.037,967.48 369.596,989.874 370.155,998.215 370.715,1004.83 371.274,945.93 371.833,886.787 372.392,884.2 372.952,899.965 373.511,877.571 374.07,854.378 374.629,850.995 375.189,865.096 375.748,777.461 376.307,793.888 376.866,795.097 377.426,794.369 377.985,776.533 378.544,781.091 379.103,797.74 379.663,814.248 380.222,797.189 380.781,764.089 381.34,785.087 381.9,769.67 382.459,785.491 383.018,819.278 383.577,798.306 384.137,764.925 384.696,784.823 385.255,772.402 385.814,772.398 386.374,777.589 386.933,765.052 387.492,781.358 388.051,782.872 388.611,783.224 389.17,764.886 389.729,782.554 390.288,799.264 390.848,812.465 391.407,797.348 391.966,798.451 392.525,813.276 393.085,840.851 393.644,869.394 394.203,880.79 394.762,898.825 395.322,894.314 395.881,870.02 396.44,846.477 396.999,846.674 397.559,846.498 398.118,845.926 398.677,890.403 399.236,883.43 399.796,890.609 400.355,903.979 400.914,901.943 401.473,880.206 402.033,842.741 402.592,809.196 403.151,775.614 403.71,776.019 404.27,791.134 404.829,758.887 405.388,763.228 405.947,734.026 406.507,739.307 407.066,740.561 407.625,761.131 408.184,781.114 408.744,780.022 409.303,811.858 409.862,808.917 410.421,839.941 410.981,803.421 411.54,822.456 412.099,833.308 412.658,809.396 413.218,789.346 413.777,802.334 414.336,798.63 414.895,796.805 415.455,778.754 416.014,749.841 416.573,783.525 417.132,782.138 417.692,748.628 418.251,782.169 418.81,782.982 419.369,749.746 419.929,769.608 420.488,803.463 421.047,830.014 421.606,791.197 422.166,805.043 422.725,802.646 423.284,803.238 423.843,803.279 424.403,785.51 424.962,783.293 425.521,797.784 426.08,829.192 426.64,824.012 427.199,869.384 427.758,847.01 428.318,825.828 428.877,827.049 429.436,810.277 429.995,807.89 430.555,855.17 431.114,864.874 431.673,878.238 432.232,890.276 432.792,895.783 433.351,903.334 433.91,914.234 434.469,910.664 435.029,933.747 435.588,908.691 436.147,900.988 436.706,879.644 437.266,853.201 437.825,848.952 438.384,893.165 438.943,901.185 439.503,878.004 440.062,840.435 440.621,837.156 441.18,851.013 441.74,831.064 442.299,825.837 442.858,833.261 443.417,810.621 443.977,805.747 444.536,819.833 445.095,866.902 445.654,862.696 446.214,872.415 446.773,848.184 447.332,825.983 447.891,818.25 448.451,795.911 449.01,795.405 449.569,774.864 450.128,772.058 450.688,802.762 451.247,784.371 451.806,780.942 452.365,746.501 452.925,749.175 453.484,762.132 454.043,728.977 454.602,697.962 455.162,687.882 455.721,673.164 456.28,645.491 456.839,668.691 457.399,686.842 457.958,708.541 458.517,714.082 459.076,729.206 459.636,713.837 460.195,748.057 460.754,751.993 461.313,751.26 461.873,766.463 462.432,768.845 462.991,739.962 463.55,708.675 464.11,695.71 464.669,716.817 465.228,733.963 465.787,734.8 466.347,686.424 466.906,689.43 467.465,709.135 468.024,709.273 468.584,697.883 469.143,718.256 469.702,702.655 470.261,689.795 470.821,706.97 471.38,757.24 471.939,758.183 472.498,787.181 473.058,785.959 473.617,768.586 474.176,781.867 474.735,747.305 475.295,761.508 475.854,743.905 476.413,728.673 476.972,743.937 477.532,725.293 478.091,727.489 478.65,745.384 479.209,761.884 479.769,746.946 480.328,764.058 480.887,726.605 481.446,790.96 482.006,756.554 482.565,785.378 483.124,767.333 483.683,766.154 484.243,764.525 484.802,747.444 485.361,746.239 485.92,729.959 486.48,749.304 487.039,720.893 487.598,716.958 488.157,703.038 488.717,710.167 489.276,697.264 489.835,696.217 490.394,733.328 490.954,748.036 491.513,760.516 492.072,760.62 492.631,789.144 493.191,769.61 493.75,765.536 494.309,809.93 494.868,808.61 495.428,805.307 495.987,815.575 496.546,795.088 497.105,823.89 497.665,820.131 498.224,813.015 498.783,792.731 499.342,787.47 499.902,752.267 500.461,752.514 501.02,753.869 501.579,733.999 502.139,766.271 502.698,781.786 503.257,765.827 503.816,749.399 504.376,749.207 504.935,748.014 505.494,767.044 506.053,749.645 506.613,732.243 507.172,763.281 507.731,761.218 508.29,746.097 508.85,746.501 509.409,728.479 509.968,757.483 510.527,757.829 511.087,738.874 511.646,754.974 512.205,787.658 512.764,769.897 513.324,782.505 513.883,715.533 514.442,699.784 515.001,688.306 515.561,671.874 516.12,658.014 516.679,657.086 517.238,664.094 517.798,688.172 518.357,692.595 518.916,693.826 519.475,724.61 520.035,725.14 520.594,771.551 521.153,773.458 521.712,784.521 522.272,761.904 522.831,741.765 523.39,742.717 523.949,743.155 524.509,743.183 525.068,727.368 525.627,760.354 526.186,742.093 526.746,743.002 527.305,739.379 527.864,720.433 528.423,720.195 528.983,751.482 529.542,719.49 530.101,752.932 530.66,798.64 531.22,794.33 531.779,805.54 532.338,801.362 532.897,796.513 533.457,793.133 534.016,741.793 534.575,742.009 535.134,757.723 535.694,776.982 536.253,791.981 536.812,759.303 537.371,755.789 537.931,723.162 538.49,723.152 539.049,742.13 539.608,756.811 540.168,787.195 540.727,769.705 541.286,766.483 541.845,747.147 542.405,780.607 542.964,776.865 543.523,790.433 544.082,739.153 544.642,738.878 545.201,737.669 545.76,720.156 546.319,721.023 546.879,720.701 547.438,718.556 547.997,718.133 548.556,701.227 549.116,675.006 549.675,690.325 550.234,674.923 550.793,675.216 551.353,649.601 551.912,652.927 552.471,675.497 553.031,677.058 553.59,696.119 554.149,696.898 554.708,711.633 555.268,677.738 555.827,694.967 556.386,712.62 556.945,728.298 557.505,741.218 558.064,740.125 558.623,706.169 559.182,704.096 559.742,704.045 560.301,701.874 560.86,735.623 561.419,735.841 561.979,719.066 562.538,684.783 563.097,685.421 563.656,690.534 564.216,672.576 564.775,660.862 565.334,662.515 565.893,679.561 566.453,700.399 567.012,701.474 567.571,671.474 568.13,676.245 568.69,662.92 569.249,649.707 569.808,686.476 570.367,703.247 570.927,702.57 571.486,702.149 572.045,685.789 572.604,703.744 573.164,752.925 573.723,771.517 574.282,798.909 574.841,779.144 575.401,758.158 575.96,757.56 576.519,757.238 577.078,755.964 577.638,741.301 578.197,742.489 578.756,706.614 579.315,709.659 579.875,730.657 580.434,694.855 580.993,633.999 581.552,639.919 582.112,645.044 582.671,597.162 583.23,584.26 583.789,576.497 584.349,584.393 584.908,576.012 585.467,550.089 586.026,577.089 586.586,602.27 587.145,603.808 587.704,627.572 588.263,650.082 588.823,669.002 589.382,686.974 589.941,673.093 590.5,659.678 591.06,678.489 591.619,696.784 592.178,726.538 592.737,740.022 593.297,788.783 593.856,803.155 594.415,816.812 594.974,826.081 595.534,806.724 596.093,785.264 596.652,798.956 597.211,790.734 597.771,785.418 598.33,751.266 598.889,749.539 599.448,701.158 600.008,705.967 600.567,690.092 601.126,706.688 601.685,702.995 602.245,674.969 602.804,660.753 603.363,681.114 603.922,680.456 604.482,682.301 605.041,700.01 605.6,719.337 606.159,699.699 606.719,716.294 607.278,711.66 607.837,730.492 608.396,747.257 608.956,743.763 609.515,760.051 610.074,752.402 610.633,731.023 611.193,725.642 611.752,729.259 612.311,694.762 612.87,677.533 613.43,679.703 613.989,692.11 614.548,692.36 615.107,709.211 615.667,693.255 616.226,661.637 616.785,698.81 617.344,695.659 617.904,691.964 618.463,723.998 619.022,788.437 619.581,751.586 620.141,748.269 620.7,733.089 621.259,747.607 621.818,745.52 622.378,776.272 622.937,723.423 623.496,704.661 624.055,719.877 624.615,720.91 625.174,702.498 625.733,684.573 626.292,684.325 626.852,704.479 627.411,717.705 627.97,716.484 628.529,717.191 629.089,713.511 629.648,730.161 630.207,748.055 630.766,728.911 631.326,699.614 631.885,720.285 632.444,737.422 633.003,766.053 633.563,742.775 634.122,741.81 634.681,741.363 635.24,737.667 635.8,783.326 636.359,777.529 636.918,758.543 637.477,786.029 638.037,783.986 638.596,762.409 639.155,747.232 639.714,683.665 640.274,731.268 640.833,695.374 641.392,710.558 641.951,708.261 642.511,723.256 643.07,736.613 643.629,733.203 644.188,747.174 644.748,714.433 645.307,665.029 645.866,634.782 646.425,638.008 646.985,659.237 647.544,676.554 648.103,692.074 648.662,708.204 649.222,691.57 649.781,678.92 650.34,694.822 650.899,712.135 651.459,744.746 652.018,743.234 652.577,738.402 653.136,767.387 653.696,780.79 654.255,741.982 654.814,726.398 655.373,744.078 655.933,742.475 656.492,756.39 657.051,734.293 657.61,731.557 658.17,713.273 658.729,747.367 659.288,693.829 659.847,664.324 660.407,696.836 660.966,679.273 661.525,676.935 662.084,693.998 662.644,695.562 663.203,676.654 663.762,660.494 664.321,662.778 664.881,696.9 665.44,726.562 665.999,708.011 666.558,706.548 667.118,657.1 667.677,675.184 668.236,677.498 668.795,693.087 669.355,708.581 669.914,753.843 670.473,750.257 671.032,745.964 671.592,797.09 672.151,759.277 672.71,755.559 673.269,736.523 673.829,750.831 674.388,731.804 674.947,713.216 675.506,730.126 676.066,761.693 676.625,773.779 677.184,786.466 677.743,827.937 678.303,820.778 678.862,765.113 679.421,746.094 679.981,744.945 680.54,759.154 681.099,783.264 681.658,808.644 682.218,788.361 682.777,765.933 683.336,763.999 683.895,761.828 684.455,725.942 685.014,787.368 685.573,786.058 686.132,766.949 686.692,746.282 687.251,727.058 687.81,742.023 688.369,757.372 688.929,720.61 689.488,751.43 690.047,746.223 690.606,759.105 691.166,737.534 691.725,719.013 692.284,670.044 692.843,685.296 693.403,703.697 693.962,748.65 694.521,745.315 695.08,725.766 695.64,709.003 696.199,688.342 696.758,705.481 697.317,703.739 697.877,668.059 698.436,684.357 698.995,651.276 699.554,685.875 700.114,668.507 700.673,669.051 701.232,655.329 701.791,623.195 702.351,608.691 702.91,597.219 703.469,601.316 704.028,591.139 704.588,577.525 705.147,567.405 705.706,607.174 706.265,598.289 706.825,632.412 707.384,603.319 707.943,589.311 708.502,595.482 709.062,584.057 709.621,641.754 710.18,614.992 710.739,602.764 711.299,624.151 711.858,611.89 712.417,633.242 712.976,633.353 713.536,604.731 714.095,595.144 714.654,599.155 715.213,587.128 715.773,595.301 716.332,598.129 716.891,586.614 717.45,593.671 718.01,596.179 718.569,599.694 719.128,603.929 719.687,612.745 720.247,632.933 720.806,635.374 721.365,588.305 721.924,578.264 722.484,600.836 723.043,608.043 723.602,614.571 724.161,617.5 724.721,621.576 725.28,626.763 725.839,627.568 726.398,695.123 726.958,679.955 727.517,683.778 728.076,701.698 728.635,717.458 729.195,702.632 729.754,701.071 730.313,701.643 730.872,701.373 731.432,701.323 731.991,699.903 732.55,712.874 733.109,730.429 733.669,728.191 734.228,730.606 734.787,731.543 735.346,717.945 735.906,702.534 736.465,686.439 737.024,687.904 737.583,672.001 738.143,641.937 738.702,663.532 739.261,665.802 739.82,649.513 740.38,632.724 740.939,650.476 741.498,638.037 742.057,658.986 742.617,659.888 743.176,661.569 743.735,647.429 744.294,630.344 744.854,633.416 745.413,667.472 745.972,668.361 746.531,686.888 747.091,718.511 747.65,703.057 748.209,721.517 748.768,720.274 749.328,732.6 749.887,716.938 750.446,730.569 751.005,777.122 751.565,758.957 752.124,801.366 752.683,829.732 753.242,870.372 753.802,846.315 754.361,820.512 754.92,812.008 755.479,777.137 756.039,770.863 756.598,782.732 757.157,778.58 757.716,807.088 758.276,821.561 758.835,847.275 759.394,840.686 759.953,831.206 760.513,821.615 761.072,801.387 761.631,795.127 762.19,756.998 762.75,769.285 763.309,749.394 763.868,730.673 764.427,679.603 764.987,661.869 765.546,662.379 766.105,691.235 766.664,692.132 767.224,706.919 767.783,705.405 768.342,735.257 768.901,768.433 769.461,747.068 770.02,758.129 770.579,735.397 771.138,762.953 771.698,760.28 772.257,770.612 772.816,768.166 773.375,730.211 773.935,710.213 774.494,691.589 775.053,662.219 775.612,660.936 776.172,694.74 776.731,677.09 777.29,674.939 777.849,676.404 778.409,661.382 778.968,660.11 779.527,660.034 780.086,661.024 780.646,692.432 781.205,690.369 781.764,673.208 782.323,654.371 782.883,721.212 783.442,719.586 784.001,732.789 784.56,746.848 785.12,761.222 785.679,724.315 786.238,706.594 786.797,722.214 787.357,718.311 787.916,716.001 788.475,714.065 789.034,726.324 789.594,691.056 790.153,688.771 790.712,639.051 791.271,611.976 791.831,616.185 792.39,609.537 792.949,632.198 793.508,634.525 794.068,654.262 794.627,703.293 795.186,717.143 795.745,700.914 796.305,699.948 796.864,696.824 797.423,695.819 797.982,682.944 798.542,685.941 799.101,717.403 799.66,732.676 800.219,699.48 800.779,694.467 801.338,725.446 801.897,722.192 802.456,724.52 803.016,738.391 803.575,749.953 804.134,745.499 804.693,746.673 805.253,744.455 805.812,724.842 806.371,721.657 806.931,739.532 807.49,736.793 808.049,750.356 808.608,747.666 809.168,712.163 809.727,711.811 810.286,711.557 810.845,742.251 811.405,756.302 811.964,753.317 812.523,766.404 813.082,764.383 813.642,763.758 814.201,729.726 814.76,679.343 815.319,680.351 815.879,661.103 816.438,612.483 816.997,598.731 817.556,599.879 818.116,586.299 818.675,563.179 819.234,553.45 819.793,591.397 820.353,581.195 820.912,583.026 821.471,589.733 822.03,611.309 822.59,619.96 823.149,609.826 823.708,644.282 824.267,664.849 824.827,683.525 825.386,700.488 825.945,683.776 826.504,648.152 827.064,635.33 827.623,655.311 828.182,672.917 828.741,655.863 829.301,677.406 829.86,711.659 830.419,696.527 830.978,694.821 831.538,693.454 832.097,693.377 832.656,689.627 833.215,737.973 833.775,751.916 834.334,732.277 834.893,729.427 835.452,695.698 836.012,661.373 836.571,647.049 837.13,665.591 837.689,667.407 838.249,688.566 838.808,660.104 839.367,660.613 839.926,627.325 840.486,675.917 841.045,659.891 841.604,649.625 842.163,668.229 842.723,653.958 843.282,671.405 843.841,690.137 844.4,693.941 844.96,710.003 845.519,723.92 846.078,709.255 846.637,724.726 847.197,704.119 847.756,722.884 848.315,707.058 848.874,688.3 849.434,638.512 849.993,644.968 850.552,629.107 851.111,649.599 851.671,649.439 852.23,651.375 852.789,638.362 853.348,671.93 853.908,689.364 854.467,707.926 855.026,689.817 855.585,670.925 856.145,686.289 856.704,704.639 857.263,721.907 857.822,734.375 858.382,733.667 858.941,748.378 859.5,729.789 860.059,743.584 860.619,738.236 861.178,749.758 861.737,731.901 862.296,716.726 862.856,700.112 863.415,730.944 863.974,760.114 864.533,752.777 865.093,748.619 865.652,747.503 866.211,759.195 866.77,754.687 867.33,800.161 867.889,796.849 868.448,790.902 869.007,785.402 869.567,746.78 870.126,698.339 870.685,714.239 871.244,681.384 871.804,684.493 872.363,686.61 872.922,703.268 873.481,703.595 874.041,724.542 874.6,706.19 875.159,703.465 875.718,686.514 876.278,703.713 876.837,701.404 877.396,700.804 877.955,683.766 878.515,670.501 879.074,652.382 879.633,670.231 880.192,669.144 880.752,672.037 881.311,705.039 881.87,705.152 882.429,689.787 882.989,673.297 883.548,658.603 884.107,677.032 884.666,692.489 885.226,644.14 885.785,627.813 886.344,581.648 886.903,554.37 887.463,577.664 888.022,553.288 888.581,560.828 889.14,566.326 889.7,589.041 890.259,567.315 890.818,573.28 891.377,579.612 891.937,587.839 892.496,594.538 893.055,604.346 893.614,594.993 894.174,600.98 894.733,606.09 895.292,593.334 895.851,613.583 896.411,635.008 896.97,654.566 897.529,673.428 898.088,673.572 898.648,641.201 899.207,645.331 899.766,665.036 900.325,683.897 900.885,717.278 901.444,700.096 902.003,700.301 902.562,668.184 903.122,668.825 903.681,655.322 904.24,622.674 904.799,659.567 905.359,646.082 905.918,632.36 906.477,668.208 907.036,669.159 907.596,654.468 908.155,659.274 908.714,661.942 909.273,681.565 909.833,682.307 910.392,686.488 910.951,716.996 911.51,716.959 912.07,698.815 912.629,696.018 913.188,697.908 913.747,680.021 914.307,694.618 914.866,712.464 915.425,709.935 915.984,707.507 916.544,710.249 917.103,723.712 917.662,750.198 918.221,779.363 918.781,776.46 919.34,751.685 919.899,749.728 920.458,747.811 921.018,761.848 921.577,756.475 922.136,766.874 922.695,779.54 923.255,806.946 923.814,801.431 924.373,765.241 924.932,763.96 925.492,779.405 926.051,789.493 926.61,781.1 927.169,808.42 927.729,801.374 928.288,811.103 928.847,806.375 929.406,765.446 929.966,762.924 930.525,711.842 931.084,743.43 931.644,680.149 932.203,663.822 932.762,599.519 933.321,608.262 933.881,648.172 934.44,650.469 934.999,621.075 935.558,624.357 936.118,625.946 936.677,646.84 937.236,666.383 937.795,652.932 938.355,608.353 938.914,596.021 939.473,600.269 940.032,638.095 940.592,675.098 941.151,686.804 941.71,719.33 942.269,720.855 942.829,726.987 943.388,707.284 943.947,724.634 944.506,749.726 945.066,759.577 945.625,756.128 946.184,755.939 946.743,770.543 947.303,764.967 947.862,761.698 948.421,759.036 948.98,756.646 949.54,755.464 950.099,748.8 950.658,761.418 951.217,742.568 951.777,754.131 952.336,749.207 952.895,761.175 953.454,776.784 954.014,739.443 954.573,704.133 955.132,684.551 955.691,698.303 956.251,670.247 956.81,672.107 957.369,684.797 957.928,701.792 958.488,682.097 959.047,679.962 959.606,681.549 960.165,680.561 960.725,693.663 961.284,691.272 961.843,704.487 962.402,685.331 962.962,666.651 963.521,636.208 964.08,634.783 964.639,640.671 965.199,609.061 965.758,595.896 966.317,603.585 966.876,638.827 967.436,641.125 967.995,630.03 968.554,650.495 969.113,664.991 969.673,664.607 970.232,681.799 970.791,718.608 971.35,704.806 971.91,735.719 972.469,733.677 973.028,698.411 973.587,703.545 974.147,704.093 974.706,670.419 975.265,689.406 975.824,706.767 976.384,724.215 976.943,703.484 977.502,671.45 978.061,686.736 978.621,672.317 979.18,687.808 979.739,704.099 980.298,701.145 980.858,712.837 981.417,679.475 981.976,700.794 982.535,681.853 983.095,685.014 983.654,681.395 984.213,682.646 984.772,667.4 985.332,650.808 985.891,633.884 986.45,639.939 987.009,627.797 987.569,645.668 988.128,650.657 988.687,669.222 989.246,642.929 989.806,642.087 990.365,610.249 990.924,631.286 991.483,637.421 992.043,626.125 992.602,596.342 993.161,616.869 993.72,634.324 994.28,634.652 994.839,641.435 995.398,659.007 995.957,638.97 996.517,628.603 997.076,660.243 997.635,676.274 998.194,673.022 998.754,686.591 999.313,721.244 999.872,752.287 1000.43,733.892 1000.99,698.572 1001.55,700.153 1002.11,716.098 1002.67,698.054 1003.23,715.202 1003.79,714.715 1004.35,681.74 1004.91,686.17 1005.46,639.885 1006.02,659.027 1006.58,677.072 1007.14,682.489 1007.7,701.253 1008.26,684.95 1008.82,699.281 1009.38,710.768 1009.94,721.976 1010.5,702.776 1011.06,669.639 1011.62,654.561 1012.18,655.322 1012.73,639.271 1013.29,639.326 1013.85,656.828 1014.41,658.263 1014.97,706.682 1015.53,689.893 1016.09,690.537 1016.65,673.903 1017.21,660.235 1017.77,677.027 1018.33,677.697 1018.89,659.435 1019.45,660.943 1020.01,662.659 1020.56,711.172 1021.12,691.644 1021.68,657.639 1022.24,691.013 1022.8,705.434 1023.36,668.926 1023.92,673.317 1024.48,656.934 1025.04,641.333 1025.6,643.537 1026.16,598.053 1026.72,633.481 1027.28,632.61 1027.83,637.472 1028.39,626.473 1028.95,663.96 1029.51,649.64 1030.07,636.13 1030.63,638.211 1031.19,643.78 1031.75,648.174 1032.31,635.379 1032.87,669.64 1033.43,669.559 1033.99,653.461 1034.55,671.657 1035.1,718.278 1035.66,714.796 1036.22,699.371 1036.78,683.769 1037.34,716.19 1037.9,715.869 1038.46,760.281 1039.02,744.868 1039.58,743.245 1040.14,741.945 1040.7,719.525 1041.26,701.696 1041.82,679.126 1042.38,661.902 1042.93,647.702 1043.49,666.816 1044.05,713.846 1044.61,696.005 1045.17,711.764 1045.73,709.894 1046.29,688.698 1046.85,689.045 1047.41,671.189 1047.97,669.987 1048.53,703.287 1049.09,768.779 1049.65,763.196 1050.2,743.06 1050.76,756.357 1051.32,754.038 1051.88,764.987 1052.44,727.596 1053,738.297 1053.56,718.257 1054.12,667.194 1054.68,685.144 1055.24,714.996 1055.8,699.586 1056.36,665.04 1056.92,666.734 1057.48,648.883 1058.03,650.764 1058.59,684.876 1059.15,686.221 1059.71,668.586 1060.27,670.555 1060.83,689.269 1061.39,691.366 1061.95,693.581 1062.51,697.057 1063.07,632.776 1063.63,622.284 1064.19,608.855 1064.75,623.771 1065.3,647.416 1065.86,682.599 1066.42,698.742 1066.98,699.856 1067.54,684.71 1068.1,684.257 1068.66,712.192 1069.22,695.286 1069.78,691.964 1070.34,688.643 1070.9,705.696 1071.46,701.428 1072.02,670.157 1072.57,637.731 1073.13,611.217 1073.69,614.647 1074.25,620.652 1074.81,622.529 1075.37,623.525 1075.93,643.057 1076.49,680.94 1077.05,701.758 1077.61,719.423 1078.17,698.71 1078.73,701.246 1079.29,697.016 1079.85,696.609 1080.4,713.847 1080.96,730.491 1081.52,744.592 1082.08,741.475 1082.64,735.914 1083.2,716.579 1083.76,715.356 1084.32,667.236 1084.88,650.515 1085.44,638.127 1086,646.596 1086.56,666.842 1087.12,667.616 1087.67,650.647 1088.23,653.004 1088.79,667.797 1089.35,652.21 1089.91,653.374 1090.47,670.662 1091.03,702.527 1091.59,702.599 1092.15,672.972 1092.71,675.91 1093.27,708.186 1093.83,706.328 1094.39,688.952 1094.94,724.638 1095.5,752.191 1096.06,717.641 1096.62,712.521 1097.18,710.059 1097.74,694.451 1098.3,692.248 1098.86,706.135 1099.42,710.892 1099.98,676.82 1100.54,673.856 1101.1,657.96 1101.66,644.824 1102.22,664.29 1102.77,664.57 1103.33,665.501 1103.89,664.024 1104.45,679.785 1105.01,664.352 1105.57,648.875 1106.13,634.957 1106.69,653.441 1107.25,671.311 1107.81,655.995 1108.37,640.057 1108.93,642.86 1109.49,625.577 1110.04,631.448 1110.6,635.591 1111.16,655.964 1111.72,639.841 1112.28,640.192 1112.84,672.466 1113.4,658.683 1113.96,644.659 1114.52,631.529 1115.08,655.051 1115.64,640.488 1116.2,625.771 1116.76,641.229 1117.31,658.685 1117.87,659.161 1118.43,645.276 1118.99,632.205 1119.55,650.805 1120.11,634.803 1120.67,655.447 1121.23,655.628 1121.79,660.245 1122.35,646.752 1122.91,669.313 1123.47,687.779 1124.03,673.978 1124.59,657.365 1125.14,673.337 1125.7,692.516 1126.26,724.902 1126.82,734.108 1127.38,730.737 1127.94,696.62 1128.5,675.444 1129.06,663.997 1129.62,668.432 1130.18,653.696 1130.74,738.865 1131.3,754.966 1131.86,752.031 1132.41,766.615 1132.97,764.085 1133.53,759.507 1134.09,767.545 1134.65,745.65 1135.21,738.335 1135.77,733.659 1136.33,713.884 1136.89,711.318 1137.45,726.722 1138.01,742.314 1138.57,739.396 1139.13,753.062 1139.68,699.648 1140.24,697.969 1140.8,698.771 1141.36,729.783 1141.92,757.72 1142.48,753.766 1143.04,767.061 1143.6,748.961 1144.16,746.607 1144.72,697.023 1145.28,713.219 1145.84,713.314 1146.4,695.565 1146.96,673.264 1147.51,670.683 1148.07,669.562 1148.63,670.676 1149.19,672.901 1149.75,675.165 1150.31,674.754 1150.87,693.857 1151.43,696.961 1151.99,699.087 1152.55,697.159 1153.11,716.038 1153.67,730.078 1154.23,745.625 1154.78,742.042 1155.34,739.211 1155.9,721.3 1156.46,715.457 1157.02,665.394 1157.58,683.833 1158.14,698.441 1158.7,715.416 1159.26,731.051 1159.82,746.924 1160.38,756.389 1160.94,722.881 1161.5,706.068 1162.05,705.739 1162.61,703.48 1163.17,688.096 1163.73,720.32 1164.29,734.023 1164.85,766.229 1165.41,741.443 1165.97,727.213 1166.53,740.383 1167.09,819.429 1167.65,830.224 1168.21,808.206 1168.77,772.704 1169.33,782.795 1169.88,775.849 1170.44,784.312 1171,792.182 1171.56,785.5 1172.12,784.447 1172.68,760.092 1173.24,769.637 1173.8,813.596 1174.36,790.73 1174.92,754.817 1175.48,700.758 1176.04,665.033 1176.6,661.295 1177.15,613.569 1177.71,583.876 1178.27,603.388 1178.83,625.361 1179.39,581.781 1179.95,552.082 1180.51,573.783 1181.07,583.317 1181.63,588.602 1182.19,593.529 1182.75,595.793 1183.31,601.058 1183.87,605.197 1184.43,608.69 1184.98,610.505 1185.54,612.082 1186.1,648.079 1186.66,664.988 1187.22,682.211 1187.78,683.381 1188.34,666.39 1188.9,670.343 1189.46,687.316 1190.02,686.679 1190.58,684.752 1191.14,679.96 1191.7,696.635 1192.25,680.937 1192.81,711.015 1193.37,693.041 1193.93,642.232 1194.49,607.384 1195.05,611.419 1195.61,630.156 1196.17,621.332 1196.73,625.661 1197.29,626.936 1197.85,631.524 1198.41,632.42 1198.97,667.726 1199.52,699.715 1200.08,665.318 1200.64,699.528 1201.2,697.276 1201.76,715.148 1202.32,730.318 1202.88,714.039 1203.44,712.207 1204,723.335 1204.56,753.313 1205.12,697.896 1205.68,646.959 1206.24,649.176 1206.8,668.905 1207.35,672.696 1207.91,721.765 1208.47,717.754 1209.03,719.11 1209.59,718.014 1210.15,668.531 1210.71,671.277 1211.27,657.819 1211.83,694.698 1212.39,695.263 1212.95,694.068 1213.51,677.039 1214.07,708.575 1214.62,689.643 1215.18,723.154 1215.74,720.695 1216.3,748.61 1216.86,775.425 1217.42,753.805 1217.98,747.062 1218.54,761.236 1219.1,758.991 1219.66,740.525 1220.22,738.63 1220.78,731.936 1221.34,730.231 1221.89,727.509 1222.45,761.185 1223.01,770.977 1223.57,785.092 1224.13,750.094 1224.69,701.105 1225.25,685.195 1225.81,685.624 1226.37,706.262 1226.93,703.841 1227.49,684.874 1228.05,747.183 1228.61,745.784 1229.17,726.085 1229.72,739.784 1230.28,735.242 1230.84,712.4 1231.4,711.973 1231.96,723.587 1232.52,722.666 1233.08,704.107 1233.64,720.604 1234.2,716.464 1234.76,701.325 1235.32,684.594 1235.88,670.285 1236.44,686.796 1236.99,684.989 1237.55,668.173 1238.11,669.876 1238.67,635.163 1239.23,608.465 1239.79,628.596 1240.35,632.193 1240.91,647.719 1241.47,665.112 1242.03,650.613 1242.59,636.704 1243.15,624.822 1243.71,624.057 1244.26,626.096 1244.82,644.923 1245.38,666.511 1245.94,666.458 1246.5,685.741 1247.06,686.79 1247.62,670.892 1248.18,672.967 1248.74,620.611 1249.3,636.246 1249.86,618.785 1250.42,604.108 1250.98,622.279 1251.54,625.051 1252.09,629.141 1252.65,615.518 1253.21,635.719 1253.77,621.29 1254.33,657.94 1254.89,639.453 1255.45,641.938 1256.01,630.055 1256.57,663.665 1257.13,613.457 1257.69,633.948 1258.25,653.8 1258.81,671.654 1259.36,667.255 1259.92,650.874 1260.48,636.645 1261.04,622.016 1261.6,593.566 1262.16,582.978 1262.72,604.637 1263.28,625.667 1263.84,611.105 1264.4,630.516 1264.96,632.656 1265.52,637.198 1266.08,655.685 1266.63,642.508 1267.19,672.189 1267.75,640.723 1268.31,641.955 1268.87,640.479 1269.43,689.233 1269.99,677.407 1270.55,691.869 1271.11,674.73 1271.67,660.924 1272.23,677.092 1272.79,691.085 1273.35,722.263 1273.91,734.83 1274.46,732.402 1275.02,733.08 1275.58,747.794 1276.14,727.817 1276.7,738.301 1277.26,686.009 1277.82,684.023 1278.38,668.674 1278.94,667.604 1279.5,686.726 1280.06,737.362 1280.62,719.247 1281.18,717.44 1281.73,765.425 1282.29,744.621 1282.85,758.201 1283.41,734.494 1283.97,716.59 1284.53,744.743 1285.09,712.355 1285.65,726.584 1286.21,741.605 1286.77,739.519 1287.33,721.358 1287.89,703.576 1288.45,722.029 1289,720.772 1289.56,717.848 1290.12,732.365 1290.68,748.652 1291.24,729.463 1291.8,728.939 1292.36,762.753 1292.92,774.461 1293.48,739.313 1294.04,719.309 1294.6,685.912 1295.16,704.15 1295.72,719.423 1296.28,718.825 1296.83,711.715 1297.39,715.236 1297.95,701.927 1298.51,737.727 1299.07,707.116 1299.63,707.769 1300.19,739.244 1300.75,740.427 1301.31,703.856 1301.87,719.247 1302.43,706.716 1302.99,690.538 1303.55,704.023 1304.1,705.666 1304.66,685.719 1305.22,670.69 1305.78,652.699 1306.34,686.046 1306.9,700.78 1307.46,717.438 1308.02,715.097 1308.58,698.782 1309.14,666.917 1309.7,667.736 1310.26,654.615 1310.82,687.041 1311.38,654.095 1311.93,674.819 1312.49,672.891 1313.05,639.382 1313.61,622.692 1314.17,624.606 1314.73,610.116 1315.29,630.614 1315.85,662.625 1316.41,680.211 1316.97,650.673 1317.53,671.72 1318.09,672.784 1318.65,677.099 1319.2,680.133 1319.76,678.023 1320.32,679.683 1320.88,696.392 1321.44,713.316 1322,692.543 1322.56,672.76 1323.12,688.224 1323.68,669.734 1324.24,651.32 1324.8,652.014 1325.36,638.899 1325.92,644.862 1326.47,630.695 1327.03,617.141 1327.59,605.358 1328.15,642.6 1328.71,629.197 1329.27,630.848 1329.83,617.063 1330.39,603.709 1330.95,607.186 1331.51,649.139 1332.07,620.659 1332.63,609.217 1333.19,615.181 1333.75,603.422 1334.3,593.565 1334.86,562.689 1335.42,570.599 1335.98,544.969 1336.54,553.159 1337.1,612.644 1337.66,614.09 1338.22,599.39 1338.78,621.042 1339.34,640.757 1339.9,640.545 1340.46,610.145 1341.02,617.03 1341.57,623.377 1342.13,610.4 1342.69,614.831 1343.25,603.772 1343.81,639.897 1344.37,629.658 1344.93,616.784 1345.49,652.838 1346.05,654.833 1346.61,656.457 1347.17,653.032 1347.73,686.479 1348.29,718.81 1348.84,735.316 1349.4,731.068 1349.96,761.688 1350.52,770.916 1351.08,794.992 1351.64,770.846 1352.2,768.579 1352.76,781.069 1353.32,778.658 1353.88,741.44 1354.44,736.526 1355,729.827 1355.56,744.493 1356.12,726.354 1356.67,724.267 1357.23,771.212 1357.79,766.019 1358.35,759.554 1358.91,760.833 1359.47,757.662 1360.03,738.755 1360.59,749.727 1361.15,744.843 1361.71,756.285 1362.27,770.593 1362.83,730.854 1363.39,708.676 1363.94,739.689 1364.5,755.681 1365.06,735.942 1365.62,748.56 1366.18,744.405 1366.74,725.344 1367.3,721.941 1367.86,737.74 1368.42,754.299 1368.98,752.218 1369.54,750.075 1370.1,744.468 1370.66,745.886 1371.21,680.376 1371.77,661.847 1372.33,679.594 1372.89,695.248 1373.45,711.307 1374.01,727.17 1374.57,722.439 1375.13,702.294 1375.69,700 1376.25,700.241 1376.81,653.471 1377.37,669.245 1377.93,669.231 1378.49,700.781 1379.04,701.961 1379.6,703.562 1380.16,751.401 1380.72,775.817 1381.28,785.933 1381.84,780.302 1382.4,764.028 1382.96,757.458 1383.52,785.272 1384.08,797.758 1384.64,743.905 1385.2,720.328 1385.76,750.981 1386.31,746.829 1386.87,758.686 1387.43,756.374 1387.99,783.546 1388.55,780.438 1389.11,790.288 1389.67,785.346 1390.23,750.789 1390.79,696.413 1391.35,692.783 1391.91,674.885 1392.47,675.796 1393.03,672.591 1393.58,709.022 1394.14,737.731 1394.7,747.721 1395.26,745.042 1395.82,759.443 1396.38,707.792 1396.94,688.393 1397.5,657.127 1398.06,657.16 1398.62,640.148 1399.18,694.263 1399.74,695.808 1400.3,679.409 1400.86,646.877 1401.41,681.76 1401.97,682.771 1402.53,682.02 1403.09,683.043 1403.65,685.654 1404.21,703.776 1404.77,673.079 1405.33,674.628 1405.89,677.979 1406.45,629.331 1407.01,649.105 1407.57,634.863 1408.13,656.322 1408.68,676.881 1409.24,676.266 1409.8,674.98 1410.36,673.554 1410.92,690.424 1411.48,658.573 1412.04,674.653 1412.6,689.556 1413.16,688.551 1413.72,687.92 1414.28,687.872 1414.84,672.175 1415.4,705.349 1415.95,705.096 1416.51,670.749 1417.07,654.957 1417.63,658.539 1418.19,647.991 1418.75,683.226 1419.31,652.729 1419.87,636.815 1420.43,606.268 1420.99,610.312 1421.55,582.613 1422.11,571.686 1422.67,595.122 1423.23,597.578 1423.78,586.722 1424.34,593.414 1424.9,584.688 1425.46,590.167 1426.02,630.603 1426.58,636.183 1427.14,656.941 1427.7,656.509 1428.26,644.066 1428.82,663.24 1429.38,651.417 1429.94,651.604 1430.5,656.938 1431.05,640.961 1431.61,614.359 1432.17,603.032 1432.73,605.256 1433.29,623.941 1433.85,629.49 1434.41,617.08 1434.97,618.114 1435.53,626.102 1436.09,629.581 1436.65,650.055 1437.21,667.12 1437.77,671.443 1438.33,700.95 1438.88,701.773 1439.44,682.963 1440,716.669 1440.56,681.893 1441.12,696.382 1441.68,761.122 1442.24,770.678 1442.8,764.772 1443.36,758.832 1443.92,737.088 1444.48,722.604 1445.04,717.915 1445.6,730.691 1446.15,727.079 1446.71,694.598 1447.27,716.133 1447.83,717.267 1448.39,761.731 1448.95,709.407 1449.51,708.144 1450.07,674.652 1450.63,671.598 1451.19,703.779 1451.75,685.23 1452.31,685.395 1452.87,702.492 1453.42,701.325 1453.98,732.019 1454.54,742.43 1455.1,721.284 1455.66,719.67 1456.22,729.116 1456.78,742.145 1457.34,770.487 1457.9,764.343 1458.46,808.649 1459.02,785.983 1459.58,781.504 1460.14,727.603 1460.7,678.382 1461.25,664.604 1461.81,663.396 1462.37,630.604 1462.93,602.056 1463.49,623.048 1464.05,628.432 1464.61,647.847 1465.17,651.099 1465.73,667.825 1466.29,669.381 1466.85,638.528 1467.41,660.312 1467.97,629.156 1468.52,632.756 1469.08,653.23 1469.64,658.045 1470.2,630.19 1470.76,666.008 1471.32,616.906 1471.88,638.76 1472.44,657.065 1473,660.546 1473.56,663.878 1474.12,663.983 1474.68,645.966 1475.24,662.346 1475.79,678.504 1476.35,645.41 1476.91,582.135 1477.47,619.564 1478.03,652.412 1478.59,670.448 1479.15,654.004 1479.71,654.957 1480.27,655.586 1480.83,689.858 1481.39,691.22 1481.95,671.49 1482.51,706.583 1483.07,722.131 1483.62,722.786 1484.18,707.113 1484.74,675.766 1485.3,709.674 1485.86,677.662 1486.42,664.441 1486.98,700.286 1487.54,681.681 1488.1,648.323 1488.66,663.389 1489.22,664.85 1489.78,631.863 1490.34,666.505 1490.89,686.648 1491.45,690.706 1492.01,692.445 1492.57,692.495 1493.13,692.236 1493.69,692.521 1494.25,641.79 1494.81,658.103 1495.37,678.772 1495.93,712.584 1496.49,694.38 1497.05,708.709 1497.61,723.911 1498.16,721.109 1498.72,721.725 1499.28,719.237 1499.84,763.514 1500.4,774.573 1500.96,775.179 1501.52,819.272 1502.08,825.72 1502.64,803.465 1503.2,780.333 1503.76,778.601 1504.32,788.521 1504.88,784.261 1505.44,759.056 1505.99,753.568 1506.55,747.884 1507.11,757.691 1507.67,752.405 1508.23,764.215 1508.79,729.098 1509.35,708.051 1509.91,693.304 1510.47,708.543 1511.03,719.273 1511.59,757.166 1512.15,768.795 1512.71,765.962 1513.26,774.734 1513.82,802.768 1514.38,792.474 1514.94,786.667 1515.5,780.048 1516.06,791.933 1516.62,770.342 1517.18,732.8 1517.74,733.44 1518.3,712.3 1518.86,695.27 1519.42,696.212 1519.98,696.432 1520.53,659.936 1521.09,608.813 1521.65,546.896 1522.21,551.704 1522.77,542.447 1523.33,549.383 1523.89,572.949 1524.45,612.448 1525.01,632.974 1525.57,651.091 1526.13,634.349 1526.69,635.03 1527.25,621.925 1527.81,607.529 1528.36,626.032 1528.92,642.511 1529.48,648.11 1530.04,648.342 1530.6,656.026 1531.16,657.164 1531.72,643.9 1532.28,661.245 1532.84,663.572 1533.4,679.964 1533.96,696.068 1534.52,713.617 1535.08,725.511 1535.63,688.822 1536.19,719.094 1536.75,703.907 1537.31,698.114 1537.87,697.04 1538.43,696.691 1538.99,726.153 1539.55,754.526 1540.11,769.477 1540.67,779.043 1541.23,788.291 1541.79,785.227 1542.35,795.603 1542.9,774.816 1543.46,784.529 1544.02,780.306 1544.58,741.913 1545.14,737.905 1545.7,765.75 1546.26,744.446 1546.82,758.422 1547.38,706.761 1547.94,718.958 1548.5,719.914 1549.06,701.536 1549.62,734.229 1550.18,748.179 1550.73,742.791 1551.29,756.372 1551.85,722.169 1552.41,740.536 1552.97,738.247 1553.53,737.529 1554.09,702.328 1554.65,701.823 1555.21,683.08 1555.77,715.753 1556.33,731.488 1556.89,696.454 1557.45,697.623 1558,700.618 1558.56,681.98 1559.12,696.995 1559.68,679.566 1560.24,646.036 1560.8,631.885 1561.36,633.842 1561.92,621.987 1562.48,624.502 1563.04,659.939 1563.6,642.038 1564.16,644.641 1564.72,663.069 1565.28,712.463 1565.83,711.463 1566.39,696.853 1566.95,666.576 1567.51,685.594 1568.07,658.934 1568.63,643.971 1569.19,628.622 1569.75,645.707 1570.31,677.932 1570.87,710.665 1571.43,661.244 1571.99,678.55 1572.55,708.348 1573.1,675.006 1573.66,673.23 1574.22,691.596 1574.78,656.795 1575.34,654.842 1575.9,607.533 1576.46,644.113 1577.02,662.695 1577.58,647.49 1578.14,648.874 1578.7,637.174 1579.26,654.372 1579.82,640.468 1580.37,673.609 1580.93,686.621 1581.49,653.536 1582.05,653.202 1582.61,656.487 1583.17,612.691 1583.73,614.666 1584.29,633.301 1584.85,601.759 1585.41,625.395 1585.97,613.61 1586.53,667.942 1587.09,670.102 1587.65,670.498 1588.2,721.655 1588.76,754.125 1589.32,765.572 1589.88,780.548 1590.44,794.457 1591,758.487 1591.56,773.993 1592.12,720.754 1592.68,718.031 1593.24,699.046 1593.8,686.283 1594.36,668.991 1594.92,653.737 1595.47,688.149 1596.03,672.311 1596.59,657.746 1597.15,642.458 1597.71,597.519 1598.27,567.547 1598.83,541.577 1599.39,548.726 1599.95,542.937 1600.51,565.564 1601.07,573.722 1601.63,581.775 1602.19,584.116 1602.74,590.868 1603.3,611.759 1603.86,649.566 1604.42,628.816 1604.98,628.452 1605.54,616.2 1606.1,604.203 1606.66,594.363 1607.22,598.32 1607.78,617.455 1608.34,620.918 1608.9,611.391 1609.46,596.683 1610.02,600.235 1610.57,621.718 1611.13,660.933 1611.69,647.583 1612.25,636.133 1612.81,604.892 1613.37,595.025 1613.93,582.68 1614.49,620.191 1615.05,638.749 1615.61,625.524 1616.17,628.122 1616.73,615.552 1617.29,634.034 1617.84,619.643 1618.4,686.877 1618.96,670.851 1619.52,685.77 1620.08,703.597 1620.64,706.874 1621.2,706.965 1621.76,675.033 1622.32,675.189 1622.88,739.618 1623.44,740.222 1624,769.101 1624.56,766.427 1625.11,761.865 1625.67,773.829 1626.23,785.482 1626.79,798.048 1627.35,760.683 1627.91,723.817 1628.47,723.542 1629.03,723.959 1629.59,738.552 1630.15,704.422 1630.71,706.071 1631.27,721.849 1631.83,735.738 1632.39,779.093 1632.94,810.895 1633.5,789.838 1634.06,804.199 1634.62,779.168 1635.18,775.786 1635.74,751.066 1636.3,762.796 1636.86,776.665 1637.42,821.295 1637.98,813.535 1638.54,755.587 1639.1,751.717 1639.66,746.902 1640.21,744.485 1640.77,759.933 1641.33,756.349 1641.89,765.654 1642.45,711.242 1643.01,709.756 1643.57,708.59 1644.13,691.46 1644.69,676.996 1645.25,691.891 1645.81,708.009 1646.37,721.303 1646.93,734.262 1647.48,682.324 1648.04,632.271 1648.6,636.296 1649.16,622.193 1649.72,588.618 1650.28,594.783 1650.84,597.362 1651.4,649.561 1651.96,648.927 1652.52,667.733 1653.08,713.77 1653.64,692.314 1654.2,688.577 1654.76,733.74 1655.31,733.107 1655.87,712.855 1656.43,725.662 1656.99,722.592 1657.55,706.695 1658.11,704.451 1658.67,716.649 1659.23,698.705 1659.79,684.646 1660.35,668.207 1660.91,687.866 1661.47,717.221 1662.03,732.58 1662.58,697.794 1663.14,709.693 1663.7,691.038 1664.26,737.202 1664.82,731.913 1665.38,713.895 1665.94,679.264 1666.5,664.676 1667.06,684.044 1667.62,682.982 1668.18,667.38 1668.74,684.941 1669.3,684.539 1669.85,637.397 1670.41,671.671 1670.97,672.285 1671.53,657.513 1672.09,642.732 1672.65,662.237 1673.21,679.261 1673.77,682.578 1674.33,698.472 1674.89,712.656 1675.45,677.694 1676.01,710.87 1676.57,692.657 1677.13,724.676 1677.68,737.448 1678.24,735.813 1678.8,734.003 1679.36,730.637 1679.92,712.876 1680.48,726.992 1681.04,707.395 1681.6,702.832 1682.16,722.112 1682.72,737.595 1683.28,718.384 1683.84,730.268 1684.4,711.75 1684.95,695.437 1685.51,696.2 1686.07,696.067 1686.63,642.553 1687.19,613.773 1687.75,619.47 1688.31,604.848 1688.87,621.412 1689.43,589.561 1689.99,597.894 1690.55,636.285 1691.11,604.518 1691.67,607.07 1692.23,609.703 1692.78,615.416 1693.34,633.673 1693.9,638.722 1694.46,646.666 1695.02,648.472 1695.58,684.501 1696.14,699.606 1696.7,697.745 1697.26,714.445 1697.82,713.524 1698.38,745.409 1698.94,707.826 1699.5,707.312 1700.05,689.966 1700.61,706.19 1701.17,705.5 1701.73,656.411 1702.29,692.948 1702.85,675.274 1703.41,641.972 1703.97,660.747 1704.53,646.413 1705.09,616.356 1705.65,606.8 1706.21,597.761 1706.77,617.871 1707.32,634.603 1707.88,621.522 1708.44,610.257 1709,632.93 1709.56,620.612 1710.12,607.032 1710.68,660.424 1711.24,660.788 1711.8,663.657 1712.36,681.377 1712.92,649.706 1713.48,687.45 1714.04,688.191 1714.6,654.57 1715.15,657.147 1715.71,630.087 1716.27,633.663 1716.83,655.413 1717.39,625.376 1717.95,613.473 1718.51,604.754 1719.07,578.99 1719.63,585.634 1720.19,623.82 1720.75,643.791 1721.31,648.99 1721.87,647.693 1722.42,664.931 1722.98,695.69 1723.54,694.844 1724.1,645.072 1724.66,663.838 1725.22,664.471 1725.78,668.197 1726.34,685.686 1726.9,702.636 1727.46,705.574 1728.02,721.236 1728.58,703.329 1729.14,686.194 1729.69,715.76 1730.25,728.339 1730.81,759.989 1731.37,754.928 1731.93,699.76 1732.49,668.541 1733.05,668.055 1733.61,687.185 1734.17,707.488 1734.73,693.576 1735.29,744.27 1735.85,707.639 1736.41,718.354 1736.97,682.723 1737.52,683.263 1738.08,716.669 1738.64,677.569 1739.2,678.25 1739.76,662.885 1740.32,664.515 1740.88,663.04 1741.44,630.718 1742,668.997 1742.56,652.149 1743.12,653.182 1743.68,671.943 1744.24,718.93 1744.79,715.116 1745.35,731.763 1745.91,761.974 1746.47,739.414 1747.03,736.968 1747.59,736.686 1748.15,735.069 1748.71,731.359 1749.27,742.759 1749.83,753.708 1750.39,766.015 1750.95,748.553 1751.51,741.257 1752.06,754.43 1752.62,752.841 1753.18,797.96 1753.74,757.089 1754.3,734.541 1754.86,747.054 1755.42,746.054 1755.98,727.177 1756.54,741.136 1757.1,721.835 1757.66,711.552 1758.22,739.133 1758.78,740.508 1759.34,768.208 1759.89,749.168 1760.45,744.527 1761.01,725.48 1761.57,724.743 1762.13,738.167 1762.69,769.43 1763.25,811.082 1763.81,789.157 1764.37,757.473 1764.93,703.28 1765.49,715.292 1766.05,684.507 1766.61,651.627 1767.16,620.554 1767.72,606.663 1768.28,609.47 1768.84,617.414 1769.4,633.97 1769.96,638.18 1770.52,653.048 1771.08,637.861 1771.64,673.51 1772.2,671.319 1772.76,673.455 1773.32,670.593 1773.88,668.096 1774.43,652.196 1774.99,685.444 1775.55,669.294 1776.11,641.798 1776.67,658.374 1777.23,722.937 1777.79,739.084 1778.35,735.664 1778.91,732.802 1779.47,744.447 1780.03,741.057 1780.59,771.605 1781.15,783.944 1781.71,781.341 1782.26,743.338 1782.82,789.426 1783.38,736.393 1783.94,751.831 1784.5,748.988 1785.06,694.89 1785.62,646.698 1786.18,632.439 1786.74,638.706 1787.3,642.687 1787.86,628.132 1788.42,647.484 1788.98,650.11 1789.53,619.158 1790.09,623.902 1790.65,610.429 1791.21,582.891 1791.77,572.391 1792.33,609.775 1792.89,613.913 1793.45,618.296 1794.01,589.529 1794.57,596.537 1795.13,618.158 1795.69,621.3 1796.25,611.462 1796.8,614.49 1797.36,619.78 1797.92,602.672 1798.48,610.773 1799.04,595.701 1799.6,585.049 1800.16,573.698 1800.72,564.176 1801.28,543.894 1801.84,551.318 1802.4,574.415 1802.96,584.193 1803.52,636.857 1804.08,625.795 1804.63,611.565 1805.19,597.985 1805.75,621.982 1806.31,672.261 1806.87,689.291 1807.43,706.616 1807.99,707.428 1808.55,753.404 1809.11,765.25 1809.67,808.756 1810.23,818.626 1810.79,816.959 1811.35,791.717 1811.9,753.108 1812.46,785.223 1813.02,765.879 1813.58,762.116 1814.14,794.591 1814.7,788.067 1815.26,784.706 1815.82,779.348 1816.38,821.424 1816.94,798.362 1817.5,795.51 1818.06,822.228 1818.62,846.126 1819.18,856.226 1819.73,863.307 1820.29,869.292 1820.85,826.715 1821.41,802.548 1821.97,780.466 1822.53,774.143 1823.09,788.039 1823.65,764.214 1824.21,762.259 1824.77,756.843 1825.33,755.103 1825.89,748.607 1826.45,759.483 1827,739.402 1827.56,717.115 1828.12,649.068 1828.68,614.524 1829.24,584.089 1829.8,589.154 1830.36,595.481 1830.92,597.219 1831.48,602.531 1832.04,609.363 1832.6,628.968 1833.16,645.487 1833.72,583.284 1834.27,589.234 1834.83,604.855 1835.39,623.607 1835.95,592.86 1836.51,598.935 1837.07,586.273 1837.63,570.396 1838.19,574.923 \"/>\n<path clip-path=\"url(#clip723)\" d=\"M720.247 692.478 L720.806 692.478 L721.365 692.478 L721.924 692.478 L722.484 692.478 L723.043 692.478 L723.602 692.478 L724.161 692.478 L724.721 692.478 L725.28 692.478 L725.839 692.478 L726.398 692.478 L726.958 692.478 L727.517 692.478 L728.076 692.478 L728.635 692.478 L729.195 692.478 L729.754 692.478 L730.313 692.478 L730.872 692.478 L731.432 692.478 L731.991 692.478 L732.55 692.478 L733.109 692.478 L733.669 692.478 L734.228 692.478 L734.787 692.478 L735.346 692.478 L735.906 692.478 L736.465 692.478 L737.024 692.478 L737.583 692.478 L738.143 692.478 L738.702 692.478 L739.261 692.478 L739.82 692.478 L740.38 692.478 L740.939 692.478 L741.498 692.478 L742.057 692.478 L742.617 692.478 L743.176 692.478 L743.735 692.478 L744.294 692.478 L744.854 692.478 L745.413 692.478 L745.972 692.478 L746.531 692.478 L747.091 692.478 L747.65 692.478 L748.209 692.478 L748.768 692.478 L749.328 692.478 L749.887 692.478 L750.446 692.478 L751.005 692.478 L751.565 692.478 L752.124 692.478 L752.683 692.478 L753.242 692.478 L753.802 692.478 L754.361 692.478 L754.92 692.478 L755.479 692.478 L756.039 692.478 L756.598 692.478 L757.157 692.478 L757.716 692.478 L758.276 692.478 L758.835 692.478 L759.394 692.478 L759.953 692.478 L760.513 692.478 L761.072 692.478 L761.631 692.478 L762.19 692.478 L762.75 692.478 L763.309 692.478 L763.868 692.478 L764.427 692.478 L764.987 692.478 L765.546 692.478 L766.105 692.478 L766.664 692.478 L767.224 692.478 L767.783 692.478 L768.342 692.478 L768.901 692.478 L769.461 692.478 L770.02 692.478 L770.579 692.478 L771.138 692.478 L771.698 692.478 L772.257 692.478 L772.816 692.478 L773.375 692.478 L773.935 692.478 L774.494 692.478 L775.053 692.478 L775.612 692.478 L776.172 692.478 L776.731 692.478 L777.29 692.478 L777.849 692.478 L778.409 692.478 L778.968 692.478 L779.527 692.478 L780.086 692.478 L780.646 692.478 L781.205 692.478 L781.764 692.478 L782.323 692.478 L782.883 692.478 L783.442 692.478 L784.001 692.478 L784.56 692.478 L785.12 692.478 L785.679 692.478 L786.238 692.478 L786.797 692.478 L787.357 692.478 L787.916 692.478 L788.475 692.478 L789.034 692.478 L789.594 692.478 L790.153 692.478 L790.712 692.478 L791.271 692.478 L791.831 692.478 L792.39 692.478 L792.949 692.478 L793.508 692.478 L794.068 692.478 L794.627 692.478 L795.186 692.478 L795.745 692.478 L796.305 692.478 L796.864 692.478 L797.423 692.478 L797.982 692.478 L798.542 692.478 L799.101 692.478 L799.66 692.478 L800.219 692.478 L800.779 692.478 L801.338 692.478 L801.897 692.478 L802.456 692.478 L803.016 692.478 L803.575 692.478 L804.134 692.478 L804.693 692.478 L805.253 692.478 L805.812 692.478 L806.371 692.478 L806.931 692.478 L807.49 692.478 L808.049 692.478 L808.608 692.478 L809.168 692.478 L809.727 692.478 L810.286 692.478 L810.845 692.478 L811.405 692.478 L811.964 692.478 L812.523 692.478 L813.082 692.478 L813.642 692.478 L814.201 692.478 L814.76 692.478 L815.319 692.478 L815.879 692.478 L816.438 692.478 L816.997 692.478 L817.556 692.478 L818.116 692.478 L818.675 692.478 L819.234 692.478 L819.793 692.478 L820.353 692.478 L820.912 692.478 L821.471 692.478 L822.03 692.478 L822.59 692.478 L823.149 692.478 L823.708 692.478 L824.267 692.478 L824.827 692.478 L825.386 692.478 L825.945 692.478 L826.504 692.478 L827.064 692.478 L827.623 692.478 L828.182 692.478 L828.741 692.478 L829.301 692.478 L829.86 692.478 L830.419 692.478 L830.978 692.478 L831.538 692.478 L832.097 692.478 L832.656 692.478 L833.215 692.478 L833.775 692.478 L834.334 692.478 L834.893 692.478 L835.452 692.478 L836.012 692.478 L836.571 692.478 L837.13 692.478 L837.689 692.478 L838.249 692.478 L838.808 692.478 L839.367 692.478 L839.926 692.478 L840.486 692.478 L841.045 692.478 L841.604 692.478 L842.163 692.478 L842.723 692.478 L843.282 692.478 L843.841 692.478 L844.4 692.478 L844.96 692.478 L845.519 692.478 L846.078 692.478 L846.637 692.478 L847.197 692.478 L847.756 692.478 L848.315 692.478 L848.874 692.478 L849.434 692.478 L849.993 692.478 L850.552 692.478 L851.111 692.478 L851.671 692.478 L852.23 692.478 L852.789 692.478 L853.348 692.478 L853.908 692.478 L854.467 692.478 L855.026 692.478 L855.585 692.478 L856.145 692.478 L856.704 692.478 L857.263 692.478 L857.822 692.478 L858.382 692.478 L858.941 692.478 L859.5 692.478 L860.059 692.478 L860.619 692.478 L861.178 692.478 L861.737 692.478 L862.296 692.478 L862.856 692.478 L863.415 692.478 L863.974 692.478 L864.533 692.478 L865.093 692.478 L865.652 692.478 L866.211 692.478 L866.77 692.478 L867.33 692.478 L867.889 692.478 L868.448 692.478 L869.007 692.478 L869.567 692.478 L870.126 692.478 L870.685 692.478 L871.244 692.478 L871.804 692.478 L872.363 692.478 L872.922 692.478 L873.481 692.478 L874.041 692.478 L874.6 692.478 L875.159 692.478 L875.718 692.478 L876.278 692.478 L876.837 692.478 L877.396 692.478 L877.955 692.478 L878.515 692.478 L879.074 692.478 L879.633 692.478 L880.192 692.478 L880.752 692.478 L881.311 692.478 L881.87 692.478 L882.429 692.478 L882.989 692.478 L883.548 692.478 L884.107 692.478 L884.666 692.478 L885.226 692.478 L885.785 692.478 L886.344 692.478 L886.903 692.478 L887.463 692.478 L888.022 692.478 L888.581 692.478 L889.14 692.478 L889.7 692.478 L890.259 692.478 L890.818 692.478 L891.377 692.478 L891.937 692.478 L892.496 692.478 L893.055 692.478 L893.614 692.478 L894.174 692.478 L894.733 692.478 L895.292 692.478 L895.851 692.478 L896.411 692.478 L896.97 692.478 L897.529 692.478 L898.088 692.478 L898.648 692.478 L899.207 692.478 L899.766 692.478 L900.325 692.478 L900.885 692.478 L901.444 692.478 L902.003 692.478 L902.562 692.478 L903.122 692.478 L903.681 692.478 L904.24 692.478 L904.799 692.478 L905.359 692.478 L905.918 692.478 L906.477 692.478 L907.036 692.478 L907.596 692.478 L908.155 692.478 L908.714 692.478 L909.273 692.478 L909.833 692.478 L910.392 692.478 L910.951 692.478 L911.51 692.478 L912.07 692.478 L912.629 692.478 L913.188 692.478 L913.747 692.478 L914.307 692.478 L914.866 692.478 L915.425 692.478 L915.984 692.478 L916.544 692.478 L917.103 692.478 L917.662 692.478 L918.221 692.478 L918.781 692.478 L919.34 692.478 L919.899 692.478 L920.458 692.478 L921.018 692.478 L921.577 692.478 L922.136 692.478 L922.695 692.478 L923.255 692.478 L923.814 692.478 L924.373 692.478 L924.932 692.478 L925.492 692.478 L926.051 692.478 L926.61 692.478 L927.169 692.478 L927.729 692.478 L928.288 692.478 L928.847 692.478 L929.406 692.478 L929.966 692.478 L930.525 692.478 L931.084 692.478 L931.644 692.478 L932.203 692.478 L932.762 692.478 L933.321 692.478 L933.881 692.478 L934.44 692.478 L934.999 692.478 L935.558 692.478 L936.118 692.478 L936.677 692.478 L937.236 692.478 L937.795 692.478 L938.355 692.478 L938.914 692.478 L939.473 692.478 L940.032 692.478 L940.592 692.478 L941.151 692.478 L941.71 692.478 L942.269 692.478 L942.829 692.478 L943.388 692.478 L943.947 692.478 L944.506 692.478 L945.066 692.478 L945.625 692.478 L946.184 692.478 L946.743 692.478 L947.303 692.478 L947.862 692.478 L948.421 692.478 L948.98 692.478 L949.54 692.478 L950.099 692.478 L950.658 692.478 L951.217 692.478 L951.777 692.478 L952.336 692.478 L952.895 692.478 L953.454 692.478 L954.014 692.478 L954.573 692.478 L955.132 692.478 L955.691 692.478 L956.251 692.478 L956.81 692.478 L957.369 692.478 L957.928 692.478 L958.488 692.478 L959.047 692.478 L959.606 692.478 L960.165 692.478 L960.725 692.478 L961.284 692.478 L961.843 692.478 L962.402 692.478 L962.962 692.478 L963.521 692.478 L964.08 692.478 L964.639 692.478 L965.199 692.478 L965.758 692.478 L966.317 692.478 L966.876 692.478 L967.436 692.478 L967.995 692.478 L968.554 692.478 L969.113 692.478 L969.673 692.478 L970.232 692.478 L970.791 692.478 L971.35 692.478 L971.91 692.478 L972.469 692.478 L973.028 692.478 L973.587 692.478 L974.147 692.478 L974.706 692.478 L975.265 692.478 L975.824 692.478 L976.384 692.478 L976.943 692.478 L977.502 692.478 L978.061 692.478 L978.621 692.478 L979.18 692.478 L979.739 692.478 L980.298 692.478 L980.858 692.478 L981.417 692.478 L981.976 692.478 L982.535 692.478 L983.095 692.478 L983.654 692.478 L984.213 692.478 L984.772 692.478 L985.332 692.478 L985.891 692.478 L986.45 692.478 L987.009 692.478 L987.569 692.478 L988.128 692.478 L988.687 692.478 L989.246 692.478 L989.806 692.478 L990.365 692.478 L990.924 692.478 L991.483 692.478 L992.043 692.478 L992.602 692.478 L993.161 692.478 L993.72 692.478 L994.28 692.478 L994.839 692.478 L995.398 692.478 L995.957 692.478 L996.517 692.478 L997.076 692.478 L997.635 692.478 L998.194 692.478 L998.754 692.478 L999.313 692.478 L999.872 692.478 L1000.43 692.478 L1000.99 692.478 L1001.55 692.478 L1002.11 692.478 L1002.67 692.478 L1003.23 692.478 L1003.79 692.478 L1004.35 692.478 L1004.91 692.478 L1005.46 692.478 L1006.02 692.478 L1006.58 692.478 L1007.14 692.478 L1007.7 692.478 L1008.26 692.478 L1008.82 692.478 L1009.38 692.478 L1009.94 692.478 L1010.5 692.478 L1011.06 692.478 L1011.62 692.478 L1012.18 692.478 L1012.73 692.478 L1013.29 692.478 L1013.85 692.478 L1014.41 692.478 L1014.97 692.478 L1015.53 692.478 L1016.09 692.478 L1016.65 692.478 L1017.21 692.478 L1017.77 692.478 L1018.33 692.478 L1018.89 692.478 L1019.45 692.478 L1020.01 692.478 L1020.56 692.478 L1021.12 692.478 L1021.68 692.478 L1022.24 692.478 L1022.8 692.478 L1023.36 692.478 L1023.92 692.478 L1024.48 692.478 L1025.04 692.478 L1025.6 692.478 L1026.16 692.478 L1026.72 692.478 L1027.28 692.478 L1027.83 692.478 L1028.39 692.478 L1028.95 692.478 L1029.51 692.478 L1030.07 692.478 L1030.63 692.478 L1031.19 692.478 L1031.75 692.478 L1032.31 692.478 L1032.87 692.478 L1033.43 692.478 L1033.99 692.478 L1034.55 692.478 L1035.1 692.478 L1035.66 692.478 L1036.22 692.478 L1036.78 692.478 L1037.34 692.478 L1037.9 692.478 L1038.46 692.478 L1039.02 692.478 L1039.58 692.478 L1040.14 692.478 L1040.7 692.478 L1041.26 692.478 L1041.82 692.478 L1042.38 692.478 L1042.93 692.478 L1043.49 692.478 L1044.05 692.478 L1044.61 692.478 L1045.17 692.478 L1045.73 692.478 L1046.29 692.478 L1046.85 692.478 L1047.41 692.478 L1047.97 692.478 L1048.53 692.478 L1049.09 692.478 L1049.65 692.478 L1050.2 692.478 L1050.76 692.478 L1051.32 692.478 L1051.88 692.478 L1052.44 692.478 L1053 692.478 L1053.56 692.478 L1054.12 692.478 L1054.68 692.478 L1055.24 692.478 L1055.8 692.478 L1056.36 692.478 L1056.92 692.478 L1057.48 692.478 L1058.03 692.478 L1058.59 692.478 L1059.15 692.478 L1059.71 692.478 L1060.27 692.478 L1060.83 692.478 L1061.39 692.478 L1061.95 692.478 L1062.51 692.478 L1063.07 692.478 L1063.63 692.478 L1064.19 692.478 L1064.75 692.478 L1065.3 692.478 L1065.86 692.478 L1066.42 692.478 L1066.98 692.478 L1067.54 692.478 L1068.1 692.478 L1068.66 692.478 L1069.22 692.478 L1069.78 692.478 L1070.34 692.478 L1070.9 692.478 L1071.46 692.478 L1072.02 692.478 L1072.57 692.478 L1073.13 692.478 L1073.69 692.478 L1074.25 692.478 L1074.81 692.478 L1075.37 692.478 L1075.93 692.478 L1076.49 692.478 L1077.05 692.478 L1077.61 692.478 L1078.17 692.478 L1078.73 692.478 L1079.29 692.478 L1079.85 692.478 L1080.4 692.478 L1080.96 692.478 L1081.52 692.478 L1082.08 692.478 L1082.64 692.478 L1083.2 692.478 L1083.76 692.478 L1084.32 692.478 L1084.88 692.478 L1085.44 692.478 L1086 692.478 L1086.56 692.478 L1087.12 692.478 L1087.67 692.478 L1088.23 692.478 L1088.79 692.478 L1089.35 692.478 L1089.91 692.478 L1090.47 692.478 L1091.03 692.478 L1091.59 692.478 L1092.15 692.478 L1092.71 692.478 L1093.27 692.478 L1093.83 692.478 L1094.39 692.478 L1094.94 692.478 L1095.5 692.478 L1096.06 692.478 L1096.62 692.478 L1097.18 692.478 L1097.74 692.478 L1098.3 692.478 L1098.86 692.478 L1099.42 692.478 L1099.98 692.478 L1100.54 692.478 L1101.1 692.478 L1101.66 692.478 L1102.22 692.478 L1102.77 692.478 L1103.33 692.478 L1103.89 692.478 L1104.45 692.478 L1105.01 692.478 L1105.57 692.478 L1106.13 692.478 L1106.69 692.478 L1107.25 692.478 L1107.81 692.478 L1108.37 692.478 L1108.93 692.478 L1109.49 692.478 L1110.04 692.478 L1110.6 692.478 L1111.16 692.478 L1111.72 692.478 L1112.28 692.478 L1112.84 692.478 L1113.4 692.478 L1113.96 692.478 L1114.52 692.478 L1115.08 692.478 L1115.64 692.478 L1116.2 692.478 L1116.76 692.478 L1117.31 692.478 L1117.87 692.478 L1118.43 692.478 L1118.99 692.478 L1119.55 692.478 L1120.11 692.478 L1120.67 692.478 L1121.23 692.478 L1121.79 692.478 L1122.35 692.478 L1122.91 692.478 L1123.47 692.478 L1124.03 692.478 L1124.59 692.478 L1125.14 692.478 L1125.7 692.478 L1126.26 692.478 L1126.82 692.478 L1127.38 692.478 L1127.94 692.478 L1128.5 692.478 L1129.06 692.478 L1129.62 692.478 L1130.18 692.478 L1130.74 692.478 L1131.3 692.478 L1131.86 692.478 L1132.41 692.478 L1132.97 692.478 L1133.53 692.478 L1134.09 692.478 L1134.65 692.478 L1135.21 692.478 L1135.77 692.478 L1136.33 692.478 L1136.89 692.478 L1137.45 692.478 L1138.01 692.478 L1138.57 692.478 L1139.13 692.478 L1139.68 692.478 L1140.24 692.478 L1140.8 692.478 L1141.36 692.478 L1141.92 692.478 L1142.48 692.478 L1143.04 692.478 L1143.6 692.478 L1144.16 692.478 L1144.72 692.478 L1145.28 692.478 L1145.84 692.478 L1146.4 692.478 L1146.96 692.478 L1147.51 692.478 L1148.07 692.478 L1148.63 692.478 L1149.19 692.478 L1149.75 692.478 L1150.31 692.478 L1150.87 692.478 L1151.43 692.478 L1151.99 692.478 L1152.55 692.478 L1153.11 692.478 L1153.67 692.478 L1154.23 692.478 L1154.78 692.478 L1155.34 692.478 L1155.9 692.478 L1156.46 692.478 L1157.02 692.478 L1157.58 692.478 L1158.14 692.478 L1158.7 692.478 L1159.26 692.478 L1159.82 692.478 L1160.38 692.478 L1160.94 692.478 L1161.5 692.478 L1162.05 692.478 L1162.61 692.478 L1163.17 692.478 L1163.73 692.478 L1164.29 692.478 L1164.85 692.478 L1165.41 692.478 L1165.97 692.478 L1166.53 692.478 L1167.09 692.478 L1167.65 692.478 L1168.21 692.478 L1168.77 692.478 L1169.33 692.478 L1169.88 692.478 L1170.44 692.478 L1171 692.478 L1171.56 692.478 L1172.12 692.478 L1172.68 692.478 L1173.24 692.478 L1173.8 692.478 L1174.36 692.478 L1174.92 692.478 L1175.48 692.478 L1176.04 692.478 L1176.6 692.478 L1177.15 692.478 L1177.71 692.478 L1178.27 692.478 L1178.83 692.478 L1179.39 692.478 L1179.95 692.478 L1180.51 692.478 L1181.07 692.478 L1181.63 692.478 L1182.19 692.478 L1182.75 692.478 L1183.31 692.478 L1183.87 692.478 L1184.43 692.478 L1184.98 692.478 L1185.54 692.478 L1186.1 692.478 L1186.66 692.478 L1187.22 692.478 L1187.78 692.478 L1188.34 692.478 L1188.9 692.478 L1189.46 692.478 L1190.02 692.478 L1190.58 692.478 L1191.14 692.478 L1191.7 692.478 L1192.25 692.478 L1192.81 692.478 L1193.37 692.478 L1193.93 692.478 L1194.49 692.478 L1195.05 692.478 L1195.61 692.478 L1196.17 692.478 L1196.73 692.478 L1197.29 692.478 L1197.85 692.478 L1198.41 692.478 L1198.97 692.478 L1199.52 692.478 L1200.08 692.478 L1200.64 692.478 L1201.2 692.478 L1201.76 692.478 L1202.32 692.478 L1202.88 692.478 L1203.44 692.478 L1204 692.478 L1204.56 692.478 L1205.12 692.478 L1205.68 692.478 L1206.24 692.478 L1206.8 692.478 L1207.35 692.478 L1207.91 692.478 L1208.47 692.478 L1209.03 692.478 L1209.59 692.478 L1210.15 692.478 L1210.71 692.478 L1211.27 692.478 L1211.83 692.478 L1212.39 692.478 L1212.95 692.478 L1213.51 692.478 L1214.07 692.478 L1214.62 692.478 L1215.18 692.478 L1215.74 692.478 L1216.3 692.478 L1216.86 692.478 L1217.42 692.478 L1217.98 692.478 L1218.54 692.478 L1219.1 692.478 L1219.66 692.478 L1220.22 692.478 L1220.78 692.478 L1221.34 692.478 L1221.89 692.478 L1222.45 692.478 L1223.01 692.478 L1223.57 692.478 L1224.13 692.478 L1224.69 692.478 L1225.25 692.478 L1225.81 692.478 L1226.37 692.478 L1226.93 692.478 L1227.49 692.478 L1228.05 692.478 L1228.61 692.478 L1229.17 692.478 L1229.72 692.478 L1230.28 692.478 L1230.84 692.478 L1231.4 692.478 L1231.96 692.478 L1232.52 692.478 L1233.08 692.478 L1233.64 692.478 L1234.2 692.478 L1234.76 692.478 L1235.32 692.478 L1235.88 692.478 L1236.44 692.478 L1236.99 692.478 L1237.55 692.478 L1238.11 692.478 L1238.67 692.478 L1239.23 692.478 L1239.79 692.478 L1240.35 692.478 L1240.91 692.478 L1241.47 692.478 L1242.03 692.478 L1242.59 692.478 L1243.15 692.478 L1243.71 692.478 L1244.26 692.478 L1244.82 692.478 L1245.38 692.478 L1245.94 692.478 L1246.5 692.478 L1247.06 692.478 L1247.62 692.478 L1248.18 692.478 L1248.74 692.478 L1249.3 692.478 L1249.86 692.478 L1250.42 692.478 L1250.98 692.478 L1251.54 692.478 L1252.09 692.478 L1252.65 692.478 L1253.21 692.478 L1253.77 692.478 L1254.33 692.478 L1254.89 692.478 L1255.45 692.478 L1256.01 692.478 L1256.57 692.478 L1257.13 692.478 L1257.69 692.478 L1258.25 692.478 L1258.81 692.478 L1259.36 692.478 L1259.92 692.478 L1260.48 692.478 L1261.04 692.478 L1261.6 692.478 L1262.16 692.478 L1262.72 692.478 L1263.28 692.478 L1263.84 692.478 L1264.4 692.478 L1264.96 692.478 L1265.52 692.478 L1266.08 692.478 L1266.63 692.478 L1267.19 692.478 L1267.75 692.478 L1268.31 692.478 L1268.87 692.478 L1269.43 692.478 L1269.99 692.478 L1270.55 692.478 L1271.11 692.478 L1271.67 692.478 L1272.23 692.478 L1272.79 692.478 L1273.35 692.478 L1273.91 692.478 L1274.46 692.478 L1275.02 692.478 L1275.58 692.478 L1276.14 692.478 L1276.7 692.478 L1277.26 692.478 L1277.82 692.478 L1278.38 692.478 L1278.94 692.478 L1279.5 692.478 L1280.06 692.478 L1280.62 692.478 L1281.18 692.478 L1281.73 692.478 L1282.29 692.478 L1282.85 692.478 L1283.41 692.478 L1283.97 692.478 L1284.53 692.478 L1285.09 692.478 L1285.65 692.478 L1286.21 692.478 L1286.77 692.478 L1287.33 692.478 L1287.89 692.478 L1288.45 692.478 L1289 692.478 L1289.56 692.478 L1290.12 692.478 L1290.68 692.478 L1291.24 692.478 L1291.8 692.478 L1292.36 692.478 L1292.92 692.478 L1293.48 692.478 L1294.04 692.478 L1294.6 692.478 L1295.16 692.478 L1295.72 692.478 L1296.28 692.478 L1296.83 692.478 L1297.39 692.478 L1297.95 692.478 L1298.51 692.478 L1299.07 692.478 L1299.63 692.478 L1300.19 692.478 L1300.75 692.478 L1301.31 692.478 L1301.87 692.478 L1302.43 692.478 L1302.99 692.478 L1303.55 692.478 L1304.1 692.478 L1304.66 692.478 L1305.22 692.478 L1305.78 692.478 L1306.34 692.478 L1306.9 692.478 L1307.46 692.478 L1308.02 692.478 L1308.58 692.478 L1309.14 692.478 L1309.7 692.478 L1310.26 692.478 L1310.82 692.478 L1311.38 692.478 L1311.93 692.478 L1312.49 692.478 L1313.05 692.478 L1313.61 692.478 L1314.17 692.478 L1314.73 692.478 L1315.29 692.478 L1315.85 692.478 L1316.41 692.478 L1316.97 692.478 L1317.53 692.478 L1318.09 692.478 L1318.65 692.478 L1319.2 692.478 L1319.76 692.478 L1320.32 692.478 L1320.88 692.478 L1321.44 692.478 L1322 692.478 L1322.56 692.478 L1323.12 692.478 L1323.68 692.478 L1324.24 692.478 L1324.8 692.478 L1325.36 692.478 L1325.92 692.478 L1326.47 692.478 L1327.03 692.478 L1327.59 692.478 L1328.15 692.478 L1328.71 692.478 L1329.27 692.478 L1329.83 692.478 L1330.39 692.478 L1330.95 692.478 L1331.51 692.478 L1332.07 692.478 L1332.63 692.478 L1333.19 692.478 L1333.75 692.478 L1334.3 692.478 L1334.86 692.478 L1335.42 692.478 L1335.98 692.478 L1336.54 692.478 L1337.1 692.478 L1337.66 692.478 L1338.22 692.478 L1338.78 692.478 L1339.34 692.478 L1339.9 692.478 L1340.46 692.478 L1341.02 692.478 L1341.57 692.478 L1342.13 692.478 L1342.69 692.478 L1343.25 692.478 L1343.81 692.478 L1344.37 692.478 L1344.93 692.478 L1345.49 692.478 L1346.05 692.478 L1346.61 692.478 L1347.17 692.478 L1347.73 692.478 L1348.29 692.478 L1348.84 692.478 L1349.4 692.478 L1349.96 692.478 L1350.52 692.478 L1351.08 692.478 L1351.64 692.478 L1352.2 692.478 L1352.76 692.478 L1353.32 692.478 L1353.88 692.478 L1354.44 692.478 L1355 692.478 L1355.56 692.478 L1356.12 692.478 L1356.67 692.478 L1357.23 692.478 L1357.79 692.478 L1358.35 692.478 L1358.91 692.478 L1359.47 692.478 L1360.03 692.478 L1360.59 692.478 L1361.15 692.478 L1361.71 692.478 L1362.27 692.478 L1362.83 692.478 L1363.39 692.478 L1363.94 692.478 L1364.5 692.478 L1365.06 692.478 L1365.62 692.478 L1366.18 692.478 L1366.74 692.478 L1367.3 692.478 L1367.86 692.478 L1368.42 692.478 L1368.98 692.478 L1369.54 692.478 L1370.1 692.478 L1370.66 692.478 L1371.21 692.478 L1371.77 692.478 L1372.33 692.478 L1372.89 692.478 L1373.45 692.478 L1374.01 692.478 L1374.57 692.478 L1375.13 692.478 L1375.69 692.478 L1376.25 692.478 L1376.81 692.478 L1377.37 692.478 L1377.93 692.478 L1378.49 692.478 L1379.04 692.478 L1379.6 692.478 L1380.16 692.478 L1380.72 692.478 L1381.28 692.478 L1381.84 692.478 L1382.4 692.478 L1382.96 692.478 L1383.52 692.478 L1384.08 692.478 L1384.64 692.478 L1385.2 692.478 L1385.76 692.478 L1386.31 692.478 L1386.87 692.478 L1387.43 692.478 L1387.99 692.478 L1388.55 692.478 L1389.11 692.478 L1389.67 692.478 L1390.23 692.478 L1390.79 692.478 L1391.35 692.478 L1391.91 692.478 L1392.47 692.478 L1393.03 692.478 L1393.58 692.478 L1394.14 692.478 L1394.7 692.478 L1395.26 692.478 L1395.82 692.478 L1396.38 692.478 L1396.94 692.478 L1397.5 692.478 L1398.06 692.478 L1398.62 692.478 L1399.18 692.478 L1399.74 692.478 L1400.3 692.478 L1400.86 692.478 L1401.41 692.478 L1401.97 692.478 L1402.53 692.478 L1403.09 692.478 L1403.65 692.478 L1404.21 692.478 L1404.77 692.478 L1405.33 692.478 L1405.89 692.478 L1406.45 692.478 L1407.01 692.478 L1407.57 692.478 L1408.13 692.478 L1408.68 692.478 L1409.24 692.478 L1409.8 692.478 L1410.36 692.478 L1410.92 692.478 L1411.48 692.478 L1412.04 692.478 L1412.6 692.478 L1413.16 692.478 L1413.72 692.478 L1414.28 692.478 L1414.84 692.478 L1415.4 692.478 L1415.95 692.478 L1416.51 692.478 L1417.07 692.478 L1417.63 692.478 L1418.19 692.478 L1418.75 692.478 L1419.31 692.478 L1419.87 692.478 L1420.43 692.478 L1420.99 692.478 L1421.55 692.478 L1422.11 692.478 L1422.67 692.478 L1423.23 692.478 L1423.78 692.478 L1424.34 692.478 L1424.9 692.478 L1425.46 692.478 L1426.02 692.478 L1426.58 692.478 L1427.14 692.478 L1427.7 692.478 L1428.26 692.478 L1428.82 692.478 L1429.38 692.478 L1429.94 692.478 L1430.5 692.478 L1431.05 692.478 L1431.61 692.478 L1432.17 692.478 L1432.73 692.478 L1433.29 692.478 L1433.85 692.478 L1434.41 692.478 L1434.97 692.478 L1435.53 692.478 L1436.09 692.478 L1436.65 692.478 L1437.21 692.478 L1437.77 692.478 L1438.33 692.478 L1438.88 692.478 L1439.44 692.478 L1440 692.478 L1440.56 692.478 L1441.12 692.478 L1441.68 692.478 L1442.24 692.478 L1442.8 692.478 L1443.36 692.478 L1443.92 692.478 L1444.48 692.478 L1445.04 692.478 L1445.6 692.478 L1446.15 692.478 L1446.71 692.478 L1447.27 692.478 L1447.83 692.478 L1448.39 692.478 L1448.95 692.478 L1449.51 692.478 L1450.07 692.478 L1450.63 692.478 L1451.19 692.478 L1451.75 692.478 L1452.31 692.478 L1452.87 692.478 L1453.42 692.478 L1453.98 692.478 L1454.54 692.478 L1455.1 692.478 L1455.66 692.478 L1456.22 692.478 L1456.78 692.478 L1457.34 692.478 L1457.9 692.478 L1458.46 692.478 L1459.02 692.478 L1459.58 692.478 L1460.14 692.478 L1460.7 692.478 L1461.25 692.478 L1461.81 692.478 L1462.37 692.478 L1462.93 692.478 L1463.49 692.478 L1464.05 692.478 L1464.61 692.478 L1465.17 692.478 L1465.73 692.478 L1466.29 692.478 L1466.85 692.478 L1467.41 692.478 L1467.97 692.478 L1468.52 692.478 L1469.08 692.478 L1469.64 692.478 L1470.2 692.478 L1470.76 692.478 L1471.32 692.478 L1471.88 692.478 L1472.44 692.478 L1473 692.478 L1473.56 692.478 L1474.12 692.478 L1474.68 692.478 L1475.24 692.478 L1475.79 692.478 L1476.35 692.478 L1476.91 692.478 L1477.47 692.478 L1478.03 692.478 L1478.59 692.478 L1479.15 692.478 L1479.71 692.478 L1480.27 692.478 L1480.83 692.478 L1481.39 692.478 L1481.95 692.478 L1482.51 692.478 L1483.07 692.478 L1483.62 692.478 L1484.18 692.478 L1484.74 692.478 L1485.3 692.478 L1485.86 692.478 L1486.42 692.478 L1486.98 692.478 L1487.54 692.478 L1488.1 692.478 L1488.66 692.478 L1489.22 692.478 L1489.78 692.478 L1490.34 692.478 L1490.89 692.478 L1491.45 692.478 L1492.01 692.478 L1492.57 692.478 L1493.13 692.478 L1493.69 692.478 L1494.25 692.478 L1494.81 692.478 L1495.37 692.478 L1495.93 692.478 L1496.49 692.478 L1497.05 692.478 L1497.61 692.478 L1498.16 692.478 L1498.72 692.478 L1499.28 692.478 L1499.84 692.478 L1500.4 692.478 L1500.96 692.478 L1501.52 692.478 L1502.08 692.478 L1502.64 692.478 L1503.2 692.478 L1503.76 692.478 L1504.32 692.478 L1504.88 692.478 L1505.44 692.478 L1505.99 692.478 L1506.55 692.478 L1507.11 692.478 L1507.67 692.478 L1508.23 692.478 L1508.79 692.478 L1509.35 692.478 L1509.91 692.478 L1510.47 692.478 L1511.03 692.478 L1511.59 692.478 L1512.15 692.478 L1512.71 692.478 L1513.26 692.478 L1513.82 692.478 L1514.38 692.478 L1514.94 692.478 L1515.5 692.478 L1516.06 692.478 L1516.62 692.478 L1517.18 692.478 L1517.74 692.478 L1518.3 692.478 L1518.86 692.478 L1519.42 692.478 L1519.98 692.478 L1520.53 692.478 L1521.09 692.478 L1521.65 692.478 L1522.21 692.478 L1522.77 692.478 L1523.33 692.478 L1523.89 692.478 L1524.45 692.478 L1525.01 692.478 L1525.57 692.478 L1526.13 692.478 L1526.69 692.478 L1527.25 692.478 L1527.81 692.478 L1528.36 692.478 L1528.92 692.478 L1529.48 692.478 L1530.04 692.478 L1530.6 692.478 L1531.16 692.478 L1531.72 692.478 L1532.28 692.478 L1532.84 692.478 L1533.4 692.478 L1533.96 692.478 L1534.52 692.478 L1535.08 692.478 L1535.63 692.478 L1536.19 692.478 L1536.75 692.478 L1537.31 692.478 L1537.87 692.478 L1538.43 692.478 L1538.99 692.478 L1539.55 692.478 L1540.11 692.478 L1540.67 692.478 L1541.23 692.478 L1541.79 692.478 L1542.35 692.478 L1542.9 692.478 L1543.46 692.478 L1544.02 692.478 L1544.58 692.478 L1545.14 692.478 L1545.7 692.478 L1546.26 692.478 L1546.82 692.478 L1547.38 692.478 L1547.94 692.478 L1548.5 692.478 L1549.06 692.478 L1549.62 692.478 L1550.18 692.478 L1550.73 692.478 L1551.29 692.478 L1551.85 692.478 L1552.41 692.478 L1552.97 692.478 L1553.53 692.478 L1554.09 692.478 L1554.65 692.478 L1555.21 692.478 L1555.77 692.478 L1556.33 692.478 L1556.89 692.478 L1557.45 692.478 L1558 692.478 L1558.56 692.478 L1559.12 692.478 L1559.68 692.478 L1560.24 692.478 L1560.8 692.478 L1561.36 692.478 L1561.92 692.478 L1562.48 692.478 L1563.04 692.478 L1563.6 692.478 L1564.16 692.478 L1564.72 692.478 L1565.28 692.478 L1565.83 692.478 L1566.39 692.478 L1566.95 692.478 L1567.51 692.478 L1568.07 692.478 L1568.63 692.478 L1569.19 692.478 L1569.75 692.478 L1570.31 692.478 L1570.87 692.478 L1571.43 692.478 L1571.99 692.478 L1572.55 692.478 L1573.1 692.478 L1573.66 692.478 L1574.22 692.478 L1574.78 692.478 L1575.34 692.478 L1575.9 692.478 L1576.46 692.478 L1577.02 692.478 L1577.58 692.478 L1578.14 692.478 L1578.7 692.478 L1579.26 692.478 L1579.82 692.478 L1580.37 692.478 L1580.93 692.478 L1581.49 692.478 L1582.05 692.478 L1582.61 692.478 L1583.17 692.478 L1583.73 692.478 L1584.29 692.478 L1584.85 692.478 L1585.41 692.478 L1585.97 692.478 L1586.53 692.478 L1587.09 692.478 L1587.65 692.478 L1588.2 692.478 L1588.76 692.478 L1589.32 692.478 L1589.88 692.478 L1590.44 692.478 L1591 692.478 L1591.56 692.478 L1592.12 692.478 L1592.68 692.478 L1593.24 692.478 L1593.8 692.478 L1594.36 692.478 L1594.92 692.478 L1595.47 692.478 L1596.03 692.478 L1596.59 692.478 L1597.15 692.478 L1597.71 692.478 L1598.27 692.478 L1598.83 692.478 L1599.39 692.478 L1599.95 692.478 L1600.51 692.478 L1601.07 692.478 L1601.63 692.478 L1602.19 692.478 L1602.74 692.478 L1603.3 692.478 L1603.86 692.478 L1604.42 692.478 L1604.98 692.478 L1605.54 692.478 L1606.1 692.478 L1606.66 692.478 L1607.22 692.478 L1607.78 692.478 L1608.34 692.478 L1608.9 692.478 L1609.46 692.478 L1610.02 692.478 L1610.57 692.478 L1611.13 692.478 L1611.69 692.478 L1612.25 692.478 L1612.81 692.478 L1613.37 692.478 L1613.93 692.478 L1614.49 692.478 L1615.05 692.478 L1615.61 692.478 L1616.17 692.478 L1616.73 692.478 L1617.29 692.478 L1617.84 692.478 L1618.4 692.478 L1618.96 692.478 L1619.52 692.478 L1620.08 692.478 L1620.64 692.478 L1621.2 692.478 L1621.76 692.478 L1622.32 692.478 L1622.88 692.478 L1623.44 692.478 L1624 692.478 L1624.56 692.478 L1625.11 692.478 L1625.67 692.478 L1626.23 692.478 L1626.79 692.478 L1627.35 692.478 L1627.91 692.478 L1628.47 692.478 L1629.03 692.478 L1629.59 692.478 L1630.15 692.478 L1630.71 692.478 L1631.27 692.478 L1631.83 692.478 L1632.39 692.478 L1632.94 692.478 L1633.5 692.478 L1634.06 692.478 L1634.62 692.478 L1635.18 692.478 L1635.74 692.478 L1636.3 692.478 L1636.86 692.478 L1637.42 692.478 L1637.98 692.478 L1638.54 692.478 L1639.1 692.478 L1639.66 692.478 L1640.21 692.478 L1640.77 692.478 L1641.33 692.478 L1641.89 692.478 L1642.45 692.478 L1643.01 692.478 L1643.57 692.478 L1644.13 692.478 L1644.69 692.478 L1645.25 692.478 L1645.81 692.478 L1646.37 692.478 L1646.93 692.478 L1647.48 692.478 L1648.04 692.478 L1648.6 692.478 L1649.16 692.478 L1649.72 692.478 L1650.28 692.478 L1650.84 692.478 L1651.4 692.478 L1651.96 692.478 L1652.52 692.478 L1653.08 692.478 L1653.64 692.478 L1654.2 692.478 L1654.76 692.478 L1655.31 692.478 L1655.87 692.478 L1656.43 692.478 L1656.99 692.478 L1657.55 692.478 L1658.11 692.478 L1658.67 692.478 L1659.23 692.478 L1659.79 692.478 L1660.35 692.478 L1660.91 692.478 L1661.47 692.478 L1662.03 692.478 L1662.58 692.478 L1663.14 692.478 L1663.7 692.478 L1664.26 692.478 L1664.82 692.478 L1665.38 692.478 L1665.94 692.478 L1666.5 692.478 L1667.06 692.478 L1667.62 692.478 L1668.18 692.478 L1668.74 692.478 L1669.3 692.478 L1669.85 692.478 L1670.41 692.478 L1670.97 692.478 L1671.53 692.478 L1672.09 692.478 L1672.65 692.478 L1673.21 692.478 L1673.77 692.478 L1674.33 692.478 L1674.89 692.478 L1675.45 692.478 L1676.01 692.478 L1676.57 692.478 L1677.13 692.478 L1677.68 692.478 L1678.24 692.478 L1678.8 692.478 L1679.36 692.478 L1679.92 692.478 L1680.48 692.478 L1681.04 692.478 L1681.6 692.478 L1682.16 692.478 L1682.72 692.478 L1683.28 692.478 L1683.84 692.478 L1684.4 692.478 L1684.95 692.478 L1685.51 692.478 L1686.07 692.478 L1686.63 692.478 L1687.19 692.478 L1687.75 692.478 L1688.31 692.478 L1688.87 692.478 L1689.43 692.478 L1689.99 692.478 L1690.55 692.478 L1691.11 692.478 L1691.67 692.478 L1692.23 692.478 L1692.78 692.478 L1693.34 692.478 L1693.9 692.478 L1694.46 692.478 L1695.02 692.478 L1695.58 692.478 L1696.14 692.478 L1696.7 692.478 L1697.26 692.478 L1697.82 692.478 L1698.38 692.478 L1698.94 692.478 L1699.5 692.478 L1700.05 692.478 L1700.61 692.478 L1701.17 692.478 L1701.73 692.478 L1702.29 692.478 L1702.85 692.478 L1703.41 692.478 L1703.97 692.478 L1704.53 692.478 L1705.09 692.478 L1705.65 692.478 L1706.21 692.478 L1706.77 692.478 L1707.32 692.478 L1707.88 692.478 L1708.44 692.478 L1709 692.478 L1709.56 692.478 L1710.12 692.478 L1710.68 692.478 L1711.24 692.478 L1711.8 692.478 L1712.36 692.478 L1712.92 692.478 L1713.48 692.478 L1714.04 692.478 L1714.6 692.478 L1715.15 692.478 L1715.71 692.478 L1716.27 692.478 L1716.83 692.478 L1717.39 692.478 L1717.95 692.478 L1718.51 692.478 L1719.07 692.478 L1719.63 692.478 L1720.19 692.478 L1720.75 692.478 L1721.31 692.478 L1721.87 692.478 L1722.42 692.478 L1722.98 692.478 L1723.54 692.478 L1724.1 692.478 L1724.66 692.478 L1725.22 692.478 L1725.78 692.478 L1726.34 692.478 L1726.9 692.478 L1727.46 692.478 L1728.02 692.478 L1728.58 692.478 L1729.14 692.478 L1729.69 692.478 L1730.25 692.478 L1730.81 692.478 L1731.37 692.478 L1731.93 692.478 L1732.49 692.478 L1733.05 692.478 L1733.61 692.478 L1734.17 692.478 L1734.73 692.478 L1735.29 692.478 L1735.85 692.478 L1736.41 692.478 L1736.97 692.478 L1737.52 692.478 L1738.08 692.478 L1738.64 692.478 L1739.2 692.478 L1739.76 692.478 L1740.32 692.478 L1740.88 692.478 L1741.44 692.478 L1742 692.478 L1742.56 692.478 L1743.12 692.478 L1743.68 692.478 L1744.24 692.478 L1744.79 692.478 L1745.35 692.478 L1745.91 692.478 L1746.47 692.478 L1747.03 692.478 L1747.59 692.478 L1748.15 692.478 L1748.71 692.478 L1749.27 692.478 L1749.83 692.478 L1750.39 692.478 L1750.95 692.478 L1751.51 692.478 L1752.06 692.478 L1752.62 692.478 L1753.18 692.478 L1753.74 692.478 L1754.3 692.478 L1754.86 692.478 L1755.42 692.478 L1755.98 692.478 L1756.54 692.478 L1757.1 692.478 L1757.66 692.478 L1758.22 692.478 L1758.78 692.478 L1759.34 692.478 L1759.89 692.478 L1760.45 692.478 L1761.01 692.478 L1761.57 692.478 L1762.13 692.478 L1762.69 692.478 L1763.25 692.478 L1763.81 692.478 L1764.37 692.478 L1764.93 692.478 L1765.49 692.478 L1766.05 692.478 L1766.61 692.478 L1767.16 692.478 L1767.72 692.478 L1768.28 692.478 L1768.84 692.478 L1769.4 692.478 L1769.96 692.478 L1770.52 692.478 L1771.08 692.478 L1771.64 692.478 L1772.2 692.478 L1772.76 692.478 L1773.32 692.478 L1773.88 692.478 L1774.43 692.478 L1774.99 692.478 L1775.55 692.478 L1776.11 692.478 L1776.67 692.478 L1777.23 692.478 L1777.79 692.478 L1778.35 692.478 L1778.91 692.478 L1779.47 692.478 L1780.03 692.478 L1780.59 692.478 L1781.15 692.478 L1781.71 692.478 L1782.26 692.478 L1782.82 692.478 L1783.38 692.478 L1783.94 692.478 L1784.5 692.478 L1785.06 692.478 L1785.62 692.478 L1786.18 692.478 L1786.74 692.478 L1787.3 692.478 L1787.86 692.478 L1788.42 692.478 L1788.98 692.478 L1789.53 692.478 L1790.09 692.478 L1790.65 692.478 L1791.21 692.478 L1791.77 692.478 L1792.33 692.478 L1792.89 692.478 L1793.45 692.478 L1794.01 692.478 L1794.57 692.478 L1795.13 692.478 L1795.69 692.478 L1796.25 692.478 L1796.8 692.478 L1797.36 692.478 L1797.92 692.478 L1798.48 692.478 L1799.04 692.478 L1799.6 692.478 L1800.16 692.478 L1800.72 692.478 L1801.28 692.478 L1801.84 692.478 L1802.4 692.478 L1802.96 692.478 L1803.52 692.478 L1804.08 692.478 L1804.63 692.478 L1805.19 692.478 L1805.75 692.478 L1806.31 692.478 L1806.87 692.478 L1807.43 692.478 L1807.99 692.478 L1808.55 692.478 L1809.11 692.478 L1809.67 692.478 L1810.23 692.478 L1810.79 692.478 L1811.35 692.478 L1811.9 692.478 L1812.46 692.478 L1813.02 692.478 L1813.58 692.478 L1814.14 692.478 L1814.7 692.478 L1815.26 692.478 L1815.82 692.478 L1816.38 692.478 L1816.94 692.478 L1817.5 692.478 L1818.06 692.478 L1818.62 692.478 L1819.18 692.478 L1819.73 692.478 L1820.29 692.478 L1820.85 692.478 L1821.41 692.478 L1821.97 692.478 L1822.53 692.478 L1823.09 692.478 L1823.65 692.478 L1824.21 692.478 L1824.77 692.478 L1825.33 692.478 L1825.89 692.478 L1826.45 692.478 L1827 692.478 L1827.56 692.478 L1828.12 692.478 L1828.68 692.478 L1829.24 692.478 L1829.8 692.478 L1830.36 692.478 L1830.92 692.478 L1831.48 692.478 L1832.04 692.478 L1832.6 692.478 L1833.16 692.478 L1833.72 692.478 L1834.27 692.478 L1834.83 692.478 L1835.39 692.478 L1835.95 692.478 L1836.51 692.478 L1837.07 692.478 L1837.63 692.478 L1838.19 692.478 L1838.19 684.314 L1837.63 684.314 L1837.07 684.314 L1836.51 684.314 L1835.95 684.314 L1835.39 684.314 L1834.83 684.314 L1834.27 684.314 L1833.72 684.314 L1833.16 684.314 L1832.6 684.314 L1832.04 684.314 L1831.48 684.314 L1830.92 684.314 L1830.36 684.314 L1829.8 684.314 L1829.24 684.314 L1828.68 684.314 L1828.12 684.314 L1827.56 684.314 L1827 684.314 L1826.45 684.314 L1825.89 684.314 L1825.33 684.314 L1824.77 684.314 L1824.21 684.314 L1823.65 684.314 L1823.09 684.314 L1822.53 684.314 L1821.97 684.314 L1821.41 684.314 L1820.85 684.314 L1820.29 684.314 L1819.73 684.314 L1819.18 684.314 L1818.62 684.314 L1818.06 684.314 L1817.5 684.314 L1816.94 684.314 L1816.38 684.314 L1815.82 684.314 L1815.26 684.314 L1814.7 684.314 L1814.14 684.314 L1813.58 684.314 L1813.02 684.314 L1812.46 684.314 L1811.9 684.314 L1811.35 684.314 L1810.79 684.314 L1810.23 684.314 L1809.67 684.314 L1809.11 684.314 L1808.55 684.314 L1807.99 684.314 L1807.43 684.314 L1806.87 684.314 L1806.31 684.314 L1805.75 684.314 L1805.19 684.314 L1804.63 684.314 L1804.08 684.314 L1803.52 684.314 L1802.96 684.314 L1802.4 684.314 L1801.84 684.314 L1801.28 684.314 L1800.72 684.314 L1800.16 684.314 L1799.6 684.314 L1799.04 684.314 L1798.48 684.314 L1797.92 684.314 L1797.36 684.314 L1796.8 684.314 L1796.25 684.314 L1795.69 684.314 L1795.13 684.314 L1794.57 684.314 L1794.01 684.314 L1793.45 684.314 L1792.89 684.314 L1792.33 684.314 L1791.77 684.314 L1791.21 684.314 L1790.65 684.314 L1790.09 684.314 L1789.53 684.314 L1788.98 684.314 L1788.42 684.314 L1787.86 684.314 L1787.3 684.314 L1786.74 684.314 L1786.18 684.314 L1785.62 684.314 L1785.06 684.314 L1784.5 684.314 L1783.94 684.314 L1783.38 684.314 L1782.82 684.314 L1782.26 684.314 L1781.71 684.314 L1781.15 684.314 L1780.59 684.314 L1780.03 684.314 L1779.47 684.314 L1778.91 684.314 L1778.35 684.314 L1777.79 684.314 L1777.23 684.314 L1776.67 684.314 L1776.11 684.314 L1775.55 684.314 L1774.99 684.314 L1774.43 684.314 L1773.88 684.314 L1773.32 684.314 L1772.76 684.314 L1772.2 684.314 L1771.64 684.314 L1771.08 684.314 L1770.52 684.314 L1769.96 684.314 L1769.4 684.314 L1768.84 684.314 L1768.28 684.314 L1767.72 684.314 L1767.16 684.314 L1766.61 684.314 L1766.05 684.314 L1765.49 684.314 L1764.93 684.314 L1764.37 684.314 L1763.81 684.314 L1763.25 684.314 L1762.69 684.314 L1762.13 684.314 L1761.57 684.314 L1761.01 684.314 L1760.45 684.314 L1759.89 684.314 L1759.34 684.314 L1758.78 684.314 L1758.22 684.314 L1757.66 684.314 L1757.1 684.314 L1756.54 684.314 L1755.98 684.314 L1755.42 684.314 L1754.86 684.314 L1754.3 684.314 L1753.74 684.314 L1753.18 684.314 L1752.62 684.314 L1752.06 684.314 L1751.51 684.314 L1750.95 684.314 L1750.39 684.314 L1749.83 684.314 L1749.27 684.314 L1748.71 684.314 L1748.15 684.314 L1747.59 684.314 L1747.03 684.314 L1746.47 684.314 L1745.91 684.314 L1745.35 684.314 L1744.79 684.314 L1744.24 684.314 L1743.68 684.314 L1743.12 684.314 L1742.56 684.314 L1742 684.314 L1741.44 684.314 L1740.88 684.314 L1740.32 684.314 L1739.76 684.314 L1739.2 684.314 L1738.64 684.314 L1738.08 684.314 L1737.52 684.314 L1736.97 684.314 L1736.41 684.314 L1735.85 684.314 L1735.29 684.314 L1734.73 684.314 L1734.17 684.314 L1733.61 684.314 L1733.05 684.314 L1732.49 684.314 L1731.93 684.314 L1731.37 684.314 L1730.81 684.314 L1730.25 684.314 L1729.69 684.314 L1729.14 684.314 L1728.58 684.314 L1728.02 684.314 L1727.46 684.314 L1726.9 684.314 L1726.34 684.314 L1725.78 684.314 L1725.22 684.314 L1724.66 684.314 L1724.1 684.314 L1723.54 684.314 L1722.98 684.314 L1722.42 684.314 L1721.87 684.314 L1721.31 684.314 L1720.75 684.314 L1720.19 684.314 L1719.63 684.314 L1719.07 684.314 L1718.51 684.314 L1717.95 684.314 L1717.39 684.314 L1716.83 684.314 L1716.27 684.314 L1715.71 684.314 L1715.15 684.314 L1714.6 684.314 L1714.04 684.314 L1713.48 684.314 L1712.92 684.314 L1712.36 684.314 L1711.8 684.314 L1711.24 684.314 L1710.68 684.314 L1710.12 684.314 L1709.56 684.314 L1709 684.314 L1708.44 684.314 L1707.88 684.314 L1707.32 684.314 L1706.77 684.314 L1706.21 684.314 L1705.65 684.314 L1705.09 684.314 L1704.53 684.314 L1703.97 684.314 L1703.41 684.314 L1702.85 684.314 L1702.29 684.314 L1701.73 684.314 L1701.17 684.314 L1700.61 684.314 L1700.05 684.314 L1699.5 684.314 L1698.94 684.314 L1698.38 684.314 L1697.82 684.314 L1697.26 684.314 L1696.7 684.314 L1696.14 684.314 L1695.58 684.314 L1695.02 684.314 L1694.46 684.314 L1693.9 684.314 L1693.34 684.314 L1692.78 684.314 L1692.23 684.314 L1691.67 684.314 L1691.11 684.314 L1690.55 684.314 L1689.99 684.314 L1689.43 684.314 L1688.87 684.314 L1688.31 684.314 L1687.75 684.314 L1687.19 684.314 L1686.63 684.314 L1686.07 684.314 L1685.51 684.314 L1684.95 684.314 L1684.4 684.314 L1683.84 684.314 L1683.28 684.314 L1682.72 684.314 L1682.16 684.314 L1681.6 684.314 L1681.04 684.314 L1680.48 684.314 L1679.92 684.314 L1679.36 684.314 L1678.8 684.314 L1678.24 684.314 L1677.68 684.314 L1677.13 684.314 L1676.57 684.314 L1676.01 684.314 L1675.45 684.314 L1674.89 684.314 L1674.33 684.314 L1673.77 684.314 L1673.21 684.314 L1672.65 684.314 L1672.09 684.314 L1671.53 684.314 L1670.97 684.314 L1670.41 684.314 L1669.85 684.314 L1669.3 684.314 L1668.74 684.314 L1668.18 684.314 L1667.62 684.314 L1667.06 684.314 L1666.5 684.314 L1665.94 684.314 L1665.38 684.314 L1664.82 684.314 L1664.26 684.314 L1663.7 684.314 L1663.14 684.314 L1662.58 684.314 L1662.03 684.314 L1661.47 684.314 L1660.91 684.314 L1660.35 684.314 L1659.79 684.314 L1659.23 684.314 L1658.67 684.314 L1658.11 684.314 L1657.55 684.314 L1656.99 684.314 L1656.43 684.314 L1655.87 684.314 L1655.31 684.314 L1654.76 684.314 L1654.2 684.314 L1653.64 684.314 L1653.08 684.314 L1652.52 684.314 L1651.96 684.314 L1651.4 684.314 L1650.84 684.314 L1650.28 684.314 L1649.72 684.314 L1649.16 684.314 L1648.6 684.314 L1648.04 684.314 L1647.48 684.314 L1646.93 684.314 L1646.37 684.314 L1645.81 684.314 L1645.25 684.314 L1644.69 684.314 L1644.13 684.314 L1643.57 684.314 L1643.01 684.314 L1642.45 684.314 L1641.89 684.314 L1641.33 684.314 L1640.77 684.314 L1640.21 684.314 L1639.66 684.314 L1639.1 684.314 L1638.54 684.314 L1637.98 684.314 L1637.42 684.314 L1636.86 684.314 L1636.3 684.314 L1635.74 684.314 L1635.18 684.314 L1634.62 684.314 L1634.06 684.314 L1633.5 684.314 L1632.94 684.314 L1632.39 684.314 L1631.83 684.314 L1631.27 684.314 L1630.71 684.314 L1630.15 684.314 L1629.59 684.314 L1629.03 684.314 L1628.47 684.314 L1627.91 684.314 L1627.35 684.314 L1626.79 684.314 L1626.23 684.314 L1625.67 684.314 L1625.11 684.314 L1624.56 684.314 L1624 684.314 L1623.44 684.314 L1622.88 684.314 L1622.32 684.314 L1621.76 684.314 L1621.2 684.314 L1620.64 684.314 L1620.08 684.314 L1619.52 684.314 L1618.96 684.314 L1618.4 684.314 L1617.84 684.314 L1617.29 684.314 L1616.73 684.314 L1616.17 684.314 L1615.61 684.314 L1615.05 684.314 L1614.49 684.314 L1613.93 684.314 L1613.37 684.314 L1612.81 684.314 L1612.25 684.314 L1611.69 684.314 L1611.13 684.314 L1610.57 684.314 L1610.02 684.314 L1609.46 684.314 L1608.9 684.314 L1608.34 684.314 L1607.78 684.314 L1607.22 684.314 L1606.66 684.314 L1606.1 684.314 L1605.54 684.314 L1604.98 684.314 L1604.42 684.314 L1603.86 684.314 L1603.3 684.314 L1602.74 684.314 L1602.19 684.314 L1601.63 684.314 L1601.07 684.314 L1600.51 684.314 L1599.95 684.314 L1599.39 684.314 L1598.83 684.314 L1598.27 684.314 L1597.71 684.314 L1597.15 684.314 L1596.59 684.314 L1596.03 684.314 L1595.47 684.314 L1594.92 684.314 L1594.36 684.314 L1593.8 684.314 L1593.24 684.314 L1592.68 684.314 L1592.12 684.314 L1591.56 684.314 L1591 684.314 L1590.44 684.314 L1589.88 684.314 L1589.32 684.314 L1588.76 684.314 L1588.2 684.314 L1587.65 684.314 L1587.09 684.314 L1586.53 684.314 L1585.97 684.314 L1585.41 684.314 L1584.85 684.314 L1584.29 684.314 L1583.73 684.314 L1583.17 684.314 L1582.61 684.314 L1582.05 684.314 L1581.49 684.314 L1580.93 684.314 L1580.37 684.314 L1579.82 684.314 L1579.26 684.314 L1578.7 684.314 L1578.14 684.314 L1577.58 684.314 L1577.02 684.314 L1576.46 684.314 L1575.9 684.314 L1575.34 684.314 L1574.78 684.314 L1574.22 684.314 L1573.66 684.314 L1573.1 684.314 L1572.55 684.314 L1571.99 684.314 L1571.43 684.314 L1570.87 684.314 L1570.31 684.314 L1569.75 684.314 L1569.19 684.314 L1568.63 684.314 L1568.07 684.314 L1567.51 684.314 L1566.95 684.314 L1566.39 684.314 L1565.83 684.314 L1565.28 684.314 L1564.72 684.314 L1564.16 684.314 L1563.6 684.314 L1563.04 684.314 L1562.48 684.314 L1561.92 684.314 L1561.36 684.314 L1560.8 684.314 L1560.24 684.314 L1559.68 684.314 L1559.12 684.314 L1558.56 684.314 L1558 684.314 L1557.45 684.314 L1556.89 684.314 L1556.33 684.314 L1555.77 684.314 L1555.21 684.314 L1554.65 684.314 L1554.09 684.314 L1553.53 684.314 L1552.97 684.314 L1552.41 684.314 L1551.85 684.314 L1551.29 684.314 L1550.73 684.314 L1550.18 684.314 L1549.62 684.314 L1549.06 684.314 L1548.5 684.314 L1547.94 684.314 L1547.38 684.314 L1546.82 684.314 L1546.26 684.314 L1545.7 684.314 L1545.14 684.314 L1544.58 684.314 L1544.02 684.314 L1543.46 684.314 L1542.9 684.314 L1542.35 684.314 L1541.79 684.314 L1541.23 684.314 L1540.67 684.314 L1540.11 684.314 L1539.55 684.314 L1538.99 684.314 L1538.43 684.314 L1537.87 684.314 L1537.31 684.314 L1536.75 684.314 L1536.19 684.314 L1535.63 684.314 L1535.08 684.314 L1534.52 684.314 L1533.96 684.314 L1533.4 684.314 L1532.84 684.314 L1532.28 684.314 L1531.72 684.314 L1531.16 684.314 L1530.6 684.314 L1530.04 684.314 L1529.48 684.314 L1528.92 684.314 L1528.36 684.314 L1527.81 684.314 L1527.25 684.314 L1526.69 684.314 L1526.13 684.314 L1525.57 684.314 L1525.01 684.314 L1524.45 684.314 L1523.89 684.314 L1523.33 684.314 L1522.77 684.314 L1522.21 684.314 L1521.65 684.314 L1521.09 684.314 L1520.53 684.314 L1519.98 684.314 L1519.42 684.314 L1518.86 684.314 L1518.3 684.314 L1517.74 684.314 L1517.18 684.314 L1516.62 684.314 L1516.06 684.314 L1515.5 684.314 L1514.94 684.314 L1514.38 684.314 L1513.82 684.314 L1513.26 684.314 L1512.71 684.314 L1512.15 684.314 L1511.59 684.314 L1511.03 684.314 L1510.47 684.314 L1509.91 684.314 L1509.35 684.314 L1508.79 684.314 L1508.23 684.314 L1507.67 684.314 L1507.11 684.314 L1506.55 684.314 L1505.99 684.314 L1505.44 684.314 L1504.88 684.314 L1504.32 684.314 L1503.76 684.314 L1503.2 684.314 L1502.64 684.314 L1502.08 684.314 L1501.52 684.314 L1500.96 684.314 L1500.4 684.314 L1499.84 684.314 L1499.28 684.314 L1498.72 684.314 L1498.16 684.314 L1497.61 684.314 L1497.05 684.314 L1496.49 684.314 L1495.93 684.314 L1495.37 684.314 L1494.81 684.314 L1494.25 684.314 L1493.69 684.314 L1493.13 684.314 L1492.57 684.314 L1492.01 684.314 L1491.45 684.314 L1490.89 684.314 L1490.34 684.314 L1489.78 684.314 L1489.22 684.314 L1488.66 684.314 L1488.1 684.314 L1487.54 684.314 L1486.98 684.314 L1486.42 684.314 L1485.86 684.314 L1485.3 684.314 L1484.74 684.314 L1484.18 684.314 L1483.62 684.314 L1483.07 684.314 L1482.51 684.314 L1481.95 684.314 L1481.39 684.314 L1480.83 684.314 L1480.27 684.314 L1479.71 684.314 L1479.15 684.314 L1478.59 684.314 L1478.03 684.314 L1477.47 684.314 L1476.91 684.314 L1476.35 684.314 L1475.79 684.314 L1475.24 684.314 L1474.68 684.314 L1474.12 684.314 L1473.56 684.314 L1473 684.314 L1472.44 684.314 L1471.88 684.314 L1471.32 684.314 L1470.76 684.314 L1470.2 684.314 L1469.64 684.314 L1469.08 684.314 L1468.52 684.314 L1467.97 684.314 L1467.41 684.314 L1466.85 684.314 L1466.29 684.314 L1465.73 684.314 L1465.17 684.314 L1464.61 684.314 L1464.05 684.314 L1463.49 684.314 L1462.93 684.314 L1462.37 684.314 L1461.81 684.314 L1461.25 684.314 L1460.7 684.314 L1460.14 684.314 L1459.58 684.314 L1459.02 684.314 L1458.46 684.314 L1457.9 684.314 L1457.34 684.314 L1456.78 684.314 L1456.22 684.314 L1455.66 684.314 L1455.1 684.314 L1454.54 684.314 L1453.98 684.314 L1453.42 684.314 L1452.87 684.314 L1452.31 684.314 L1451.75 684.314 L1451.19 684.314 L1450.63 684.314 L1450.07 684.314 L1449.51 684.314 L1448.95 684.314 L1448.39 684.314 L1447.83 684.314 L1447.27 684.314 L1446.71 684.314 L1446.15 684.314 L1445.6 684.314 L1445.04 684.314 L1444.48 684.314 L1443.92 684.314 L1443.36 684.314 L1442.8 684.314 L1442.24 684.314 L1441.68 684.314 L1441.12 684.314 L1440.56 684.314 L1440 684.314 L1439.44 684.314 L1438.88 684.314 L1438.33 684.314 L1437.77 684.314 L1437.21 684.314 L1436.65 684.314 L1436.09 684.314 L1435.53 684.314 L1434.97 684.314 L1434.41 684.314 L1433.85 684.314 L1433.29 684.314 L1432.73 684.314 L1432.17 684.314 L1431.61 684.314 L1431.05 684.314 L1430.5 684.314 L1429.94 684.314 L1429.38 684.314 L1428.82 684.314 L1428.26 684.314 L1427.7 684.314 L1427.14 684.314 L1426.58 684.314 L1426.02 684.314 L1425.46 684.314 L1424.9 684.314 L1424.34 684.314 L1423.78 684.314 L1423.23 684.314 L1422.67 684.314 L1422.11 684.314 L1421.55 684.314 L1420.99 684.314 L1420.43 684.314 L1419.87 684.314 L1419.31 684.314 L1418.75 684.314 L1418.19 684.314 L1417.63 684.314 L1417.07 684.314 L1416.51 684.314 L1415.95 684.314 L1415.4 684.314 L1414.84 684.314 L1414.28 684.314 L1413.72 684.314 L1413.16 684.314 L1412.6 684.314 L1412.04 684.314 L1411.48 684.314 L1410.92 684.314 L1410.36 684.314 L1409.8 684.314 L1409.24 684.314 L1408.68 684.314 L1408.13 684.314 L1407.57 684.314 L1407.01 684.314 L1406.45 684.314 L1405.89 684.314 L1405.33 684.314 L1404.77 684.314 L1404.21 684.314 L1403.65 684.314 L1403.09 684.314 L1402.53 684.314 L1401.97 684.314 L1401.41 684.314 L1400.86 684.314 L1400.3 684.314 L1399.74 684.314 L1399.18 684.314 L1398.62 684.314 L1398.06 684.314 L1397.5 684.314 L1396.94 684.314 L1396.38 684.314 L1395.82 684.314 L1395.26 684.314 L1394.7 684.314 L1394.14 684.314 L1393.58 684.314 L1393.03 684.314 L1392.47 684.314 L1391.91 684.314 L1391.35 684.314 L1390.79 684.314 L1390.23 684.314 L1389.67 684.314 L1389.11 684.314 L1388.55 684.314 L1387.99 684.314 L1387.43 684.314 L1386.87 684.314 L1386.31 684.314 L1385.76 684.314 L1385.2 684.314 L1384.64 684.314 L1384.08 684.314 L1383.52 684.314 L1382.96 684.314 L1382.4 684.314 L1381.84 684.314 L1381.28 684.314 L1380.72 684.314 L1380.16 684.314 L1379.6 684.314 L1379.04 684.314 L1378.49 684.314 L1377.93 684.314 L1377.37 684.314 L1376.81 684.314 L1376.25 684.314 L1375.69 684.314 L1375.13 684.314 L1374.57 684.314 L1374.01 684.314 L1373.45 684.314 L1372.89 684.314 L1372.33 684.314 L1371.77 684.314 L1371.21 684.314 L1370.66 684.314 L1370.1 684.314 L1369.54 684.314 L1368.98 684.314 L1368.42 684.314 L1367.86 684.314 L1367.3 684.314 L1366.74 684.314 L1366.18 684.314 L1365.62 684.314 L1365.06 684.314 L1364.5 684.314 L1363.94 684.314 L1363.39 684.314 L1362.83 684.314 L1362.27 684.314 L1361.71 684.314 L1361.15 684.314 L1360.59 684.314 L1360.03 684.314 L1359.47 684.314 L1358.91 684.314 L1358.35 684.314 L1357.79 684.314 L1357.23 684.314 L1356.67 684.314 L1356.12 684.314 L1355.56 684.314 L1355 684.314 L1354.44 684.314 L1353.88 684.314 L1353.32 684.314 L1352.76 684.314 L1352.2 684.314 L1351.64 684.314 L1351.08 684.314 L1350.52 684.314 L1349.96 684.314 L1349.4 684.314 L1348.84 684.314 L1348.29 684.314 L1347.73 684.314 L1347.17 684.314 L1346.61 684.314 L1346.05 684.314 L1345.49 684.314 L1344.93 684.314 L1344.37 684.314 L1343.81 684.314 L1343.25 684.314 L1342.69 684.314 L1342.13 684.314 L1341.57 684.314 L1341.02 684.314 L1340.46 684.314 L1339.9 684.314 L1339.34 684.314 L1338.78 684.314 L1338.22 684.314 L1337.66 684.314 L1337.1 684.314 L1336.54 684.314 L1335.98 684.314 L1335.42 684.314 L1334.86 684.314 L1334.3 684.314 L1333.75 684.314 L1333.19 684.314 L1332.63 684.314 L1332.07 684.314 L1331.51 684.314 L1330.95 684.314 L1330.39 684.314 L1329.83 684.314 L1329.27 684.314 L1328.71 684.314 L1328.15 684.314 L1327.59 684.314 L1327.03 684.314 L1326.47 684.314 L1325.92 684.314 L1325.36 684.314 L1324.8 684.314 L1324.24 684.314 L1323.68 684.314 L1323.12 684.314 L1322.56 684.314 L1322 684.314 L1321.44 684.314 L1320.88 684.314 L1320.32 684.314 L1319.76 684.314 L1319.2 684.314 L1318.65 684.314 L1318.09 684.314 L1317.53 684.314 L1316.97 684.314 L1316.41 684.314 L1315.85 684.314 L1315.29 684.314 L1314.73 684.314 L1314.17 684.314 L1313.61 684.314 L1313.05 684.314 L1312.49 684.314 L1311.93 684.314 L1311.38 684.314 L1310.82 684.314 L1310.26 684.314 L1309.7 684.314 L1309.14 684.314 L1308.58 684.314 L1308.02 684.314 L1307.46 684.314 L1306.9 684.314 L1306.34 684.314 L1305.78 684.314 L1305.22 684.314 L1304.66 684.314 L1304.1 684.314 L1303.55 684.314 L1302.99 684.314 L1302.43 684.314 L1301.87 684.314 L1301.31 684.314 L1300.75 684.314 L1300.19 684.314 L1299.63 684.314 L1299.07 684.314 L1298.51 684.314 L1297.95 684.314 L1297.39 684.314 L1296.83 684.314 L1296.28 684.314 L1295.72 684.314 L1295.16 684.314 L1294.6 684.314 L1294.04 684.314 L1293.48 684.314 L1292.92 684.314 L1292.36 684.314 L1291.8 684.314 L1291.24 684.314 L1290.68 684.314 L1290.12 684.314 L1289.56 684.314 L1289 684.314 L1288.45 684.314 L1287.89 684.314 L1287.33 684.314 L1286.77 684.314 L1286.21 684.314 L1285.65 684.314 L1285.09 684.314 L1284.53 684.314 L1283.97 684.314 L1283.41 684.314 L1282.85 684.314 L1282.29 684.314 L1281.73 684.314 L1281.18 684.314 L1280.62 684.314 L1280.06 684.314 L1279.5 684.314 L1278.94 684.314 L1278.38 684.314 L1277.82 684.314 L1277.26 684.314 L1276.7 684.314 L1276.14 684.314 L1275.58 684.314 L1275.02 684.314 L1274.46 684.314 L1273.91 684.314 L1273.35 684.314 L1272.79 684.314 L1272.23 684.314 L1271.67 684.314 L1271.11 684.314 L1270.55 684.314 L1269.99 684.314 L1269.43 684.314 L1268.87 684.314 L1268.31 684.314 L1267.75 684.314 L1267.19 684.314 L1266.63 684.314 L1266.08 684.314 L1265.52 684.314 L1264.96 684.314 L1264.4 684.314 L1263.84 684.314 L1263.28 684.314 L1262.72 684.314 L1262.16 684.314 L1261.6 684.314 L1261.04 684.314 L1260.48 684.314 L1259.92 684.314 L1259.36 684.314 L1258.81 684.314 L1258.25 684.314 L1257.69 684.314 L1257.13 684.314 L1256.57 684.314 L1256.01 684.314 L1255.45 684.314 L1254.89 684.314 L1254.33 684.314 L1253.77 684.314 L1253.21 684.314 L1252.65 684.314 L1252.09 684.314 L1251.54 684.314 L1250.98 684.314 L1250.42 684.314 L1249.86 684.314 L1249.3 684.314 L1248.74 684.314 L1248.18 684.314 L1247.62 684.314 L1247.06 684.314 L1246.5 684.314 L1245.94 684.314 L1245.38 684.314 L1244.82 684.314 L1244.26 684.314 L1243.71 684.314 L1243.15 684.314 L1242.59 684.314 L1242.03 684.314 L1241.47 684.314 L1240.91 684.314 L1240.35 684.314 L1239.79 684.314 L1239.23 684.314 L1238.67 684.314 L1238.11 684.314 L1237.55 684.314 L1236.99 684.314 L1236.44 684.314 L1235.88 684.314 L1235.32 684.314 L1234.76 684.314 L1234.2 684.314 L1233.64 684.314 L1233.08 684.314 L1232.52 684.314 L1231.96 684.314 L1231.4 684.314 L1230.84 684.314 L1230.28 684.314 L1229.72 684.314 L1229.17 684.314 L1228.61 684.314 L1228.05 684.314 L1227.49 684.314 L1226.93 684.314 L1226.37 684.314 L1225.81 684.314 L1225.25 684.314 L1224.69 684.314 L1224.13 684.314 L1223.57 684.314 L1223.01 684.314 L1222.45 684.314 L1221.89 684.314 L1221.34 684.314 L1220.78 684.314 L1220.22 684.314 L1219.66 684.314 L1219.1 684.314 L1218.54 684.314 L1217.98 684.314 L1217.42 684.314 L1216.86 684.314 L1216.3 684.314 L1215.74 684.314 L1215.18 684.314 L1214.62 684.314 L1214.07 684.314 L1213.51 684.314 L1212.95 684.314 L1212.39 684.314 L1211.83 684.314 L1211.27 684.314 L1210.71 684.314 L1210.15 684.314 L1209.59 684.314 L1209.03 684.314 L1208.47 684.314 L1207.91 684.314 L1207.35 684.314 L1206.8 684.314 L1206.24 684.314 L1205.68 684.314 L1205.12 684.314 L1204.56 684.314 L1204 684.314 L1203.44 684.314 L1202.88 684.314 L1202.32 684.314 L1201.76 684.314 L1201.2 684.314 L1200.64 684.314 L1200.08 684.314 L1199.52 684.314 L1198.97 684.314 L1198.41 684.314 L1197.85 684.314 L1197.29 684.314 L1196.73 684.314 L1196.17 684.314 L1195.61 684.314 L1195.05 684.314 L1194.49 684.314 L1193.93 684.314 L1193.37 684.314 L1192.81 684.314 L1192.25 684.314 L1191.7 684.314 L1191.14 684.314 L1190.58 684.314 L1190.02 684.314 L1189.46 684.314 L1188.9 684.314 L1188.34 684.314 L1187.78 684.314 L1187.22 684.314 L1186.66 684.314 L1186.1 684.314 L1185.54 684.314 L1184.98 684.314 L1184.43 684.314 L1183.87 684.314 L1183.31 684.314 L1182.75 684.314 L1182.19 684.314 L1181.63 684.314 L1181.07 684.314 L1180.51 684.314 L1179.95 684.314 L1179.39 684.314 L1178.83 684.314 L1178.27 684.314 L1177.71 684.314 L1177.15 684.314 L1176.6 684.314 L1176.04 684.314 L1175.48 684.314 L1174.92 684.314 L1174.36 684.314 L1173.8 684.314 L1173.24 684.314 L1172.68 684.314 L1172.12 684.314 L1171.56 684.314 L1171 684.314 L1170.44 684.314 L1169.88 684.314 L1169.33 684.314 L1168.77 684.314 L1168.21 684.314 L1167.65 684.314 L1167.09 684.314 L1166.53 684.314 L1165.97 684.314 L1165.41 684.314 L1164.85 684.314 L1164.29 684.314 L1163.73 684.314 L1163.17 684.314 L1162.61 684.314 L1162.05 684.314 L1161.5 684.314 L1160.94 684.314 L1160.38 684.314 L1159.82 684.314 L1159.26 684.314 L1158.7 684.314 L1158.14 684.314 L1157.58 684.314 L1157.02 684.314 L1156.46 684.314 L1155.9 684.314 L1155.34 684.314 L1154.78 684.314 L1154.23 684.314 L1153.67 684.314 L1153.11 684.314 L1152.55 684.314 L1151.99 684.314 L1151.43 684.314 L1150.87 684.314 L1150.31 684.314 L1149.75 684.314 L1149.19 684.314 L1148.63 684.314 L1148.07 684.314 L1147.51 684.314 L1146.96 684.314 L1146.4 684.314 L1145.84 684.314 L1145.28 684.314 L1144.72 684.314 L1144.16 684.314 L1143.6 684.314 L1143.04 684.314 L1142.48 684.314 L1141.92 684.314 L1141.36 684.314 L1140.8 684.314 L1140.24 684.314 L1139.68 684.314 L1139.13 684.314 L1138.57 684.314 L1138.01 684.314 L1137.45 684.314 L1136.89 684.314 L1136.33 684.314 L1135.77 684.314 L1135.21 684.314 L1134.65 684.314 L1134.09 684.314 L1133.53 684.314 L1132.97 684.314 L1132.41 684.314 L1131.86 684.314 L1131.3 684.314 L1130.74 684.314 L1130.18 684.314 L1129.62 684.314 L1129.06 684.314 L1128.5 684.314 L1127.94 684.314 L1127.38 684.314 L1126.82 684.314 L1126.26 684.314 L1125.7 684.314 L1125.14 684.314 L1124.59 684.314 L1124.03 684.314 L1123.47 684.314 L1122.91 684.314 L1122.35 684.314 L1121.79 684.314 L1121.23 684.314 L1120.67 684.314 L1120.11 684.314 L1119.55 684.314 L1118.99 684.314 L1118.43 684.314 L1117.87 684.314 L1117.31 684.314 L1116.76 684.314 L1116.2 684.314 L1115.64 684.314 L1115.08 684.314 L1114.52 684.314 L1113.96 684.314 L1113.4 684.314 L1112.84 684.314 L1112.28 684.314 L1111.72 684.314 L1111.16 684.314 L1110.6 684.314 L1110.04 684.314 L1109.49 684.314 L1108.93 684.314 L1108.37 684.314 L1107.81 684.314 L1107.25 684.314 L1106.69 684.314 L1106.13 684.314 L1105.57 684.314 L1105.01 684.314 L1104.45 684.314 L1103.89 684.314 L1103.33 684.314 L1102.77 684.314 L1102.22 684.314 L1101.66 684.314 L1101.1 684.314 L1100.54 684.314 L1099.98 684.314 L1099.42 684.314 L1098.86 684.314 L1098.3 684.314 L1097.74 684.314 L1097.18 684.314 L1096.62 684.314 L1096.06 684.314 L1095.5 684.314 L1094.94 684.314 L1094.39 684.314 L1093.83 684.314 L1093.27 684.314 L1092.71 684.314 L1092.15 684.314 L1091.59 684.314 L1091.03 684.314 L1090.47 684.314 L1089.91 684.314 L1089.35 684.314 L1088.79 684.314 L1088.23 684.314 L1087.67 684.314 L1087.12 684.314 L1086.56 684.314 L1086 684.314 L1085.44 684.314 L1084.88 684.314 L1084.32 684.314 L1083.76 684.314 L1083.2 684.314 L1082.64 684.314 L1082.08 684.314 L1081.52 684.314 L1080.96 684.314 L1080.4 684.314 L1079.85 684.314 L1079.29 684.314 L1078.73 684.314 L1078.17 684.314 L1077.61 684.314 L1077.05 684.314 L1076.49 684.314 L1075.93 684.314 L1075.37 684.314 L1074.81 684.314 L1074.25 684.314 L1073.69 684.314 L1073.13 684.314 L1072.57 684.314 L1072.02 684.314 L1071.46 684.314 L1070.9 684.314 L1070.34 684.314 L1069.78 684.314 L1069.22 684.314 L1068.66 684.314 L1068.1 684.314 L1067.54 684.314 L1066.98 684.314 L1066.42 684.314 L1065.86 684.314 L1065.3 684.314 L1064.75 684.314 L1064.19 684.314 L1063.63 684.314 L1063.07 684.314 L1062.51 684.314 L1061.95 684.314 L1061.39 684.314 L1060.83 684.314 L1060.27 684.314 L1059.71 684.314 L1059.15 684.314 L1058.59 684.314 L1058.03 684.314 L1057.48 684.314 L1056.92 684.314 L1056.36 684.314 L1055.8 684.314 L1055.24 684.314 L1054.68 684.314 L1054.12 684.314 L1053.56 684.314 L1053 684.314 L1052.44 684.314 L1051.88 684.314 L1051.32 684.314 L1050.76 684.314 L1050.2 684.314 L1049.65 684.314 L1049.09 684.314 L1048.53 684.314 L1047.97 684.314 L1047.41 684.314 L1046.85 684.314 L1046.29 684.314 L1045.73 684.314 L1045.17 684.314 L1044.61 684.314 L1044.05 684.314 L1043.49 684.314 L1042.93 684.314 L1042.38 684.314 L1041.82 684.314 L1041.26 684.314 L1040.7 684.314 L1040.14 684.314 L1039.58 684.314 L1039.02 684.314 L1038.46 684.314 L1037.9 684.314 L1037.34 684.314 L1036.78 684.314 L1036.22 684.314 L1035.66 684.314 L1035.1 684.314 L1034.55 684.314 L1033.99 684.314 L1033.43 684.314 L1032.87 684.314 L1032.31 684.314 L1031.75 684.314 L1031.19 684.314 L1030.63 684.314 L1030.07 684.314 L1029.51 684.314 L1028.95 684.314 L1028.39 684.314 L1027.83 684.314 L1027.28 684.314 L1026.72 684.314 L1026.16 684.314 L1025.6 684.314 L1025.04 684.314 L1024.48 684.314 L1023.92 684.314 L1023.36 684.314 L1022.8 684.314 L1022.24 684.314 L1021.68 684.314 L1021.12 684.314 L1020.56 684.314 L1020.01 684.314 L1019.45 684.314 L1018.89 684.314 L1018.33 684.314 L1017.77 684.314 L1017.21 684.314 L1016.65 684.314 L1016.09 684.314 L1015.53 684.314 L1014.97 684.314 L1014.41 684.314 L1013.85 684.314 L1013.29 684.314 L1012.73 684.314 L1012.18 684.314 L1011.62 684.314 L1011.06 684.314 L1010.5 684.314 L1009.94 684.314 L1009.38 684.314 L1008.82 684.314 L1008.26 684.314 L1007.7 684.314 L1007.14 684.314 L1006.58 684.314 L1006.02 684.314 L1005.46 684.314 L1004.91 684.314 L1004.35 684.314 L1003.79 684.314 L1003.23 684.314 L1002.67 684.314 L1002.11 684.314 L1001.55 684.314 L1000.99 684.314 L1000.43 684.314 L999.872 684.314 L999.313 684.314 L998.754 684.314 L998.194 684.314 L997.635 684.314 L997.076 684.314 L996.517 684.314 L995.957 684.314 L995.398 684.314 L994.839 684.314 L994.28 684.314 L993.72 684.314 L993.161 684.314 L992.602 684.314 L992.043 684.314 L991.483 684.314 L990.924 684.314 L990.365 684.314 L989.806 684.314 L989.246 684.314 L988.687 684.314 L988.128 684.314 L987.569 684.314 L987.009 684.314 L986.45 684.314 L985.891 684.314 L985.332 684.314 L984.772 684.314 L984.213 684.314 L983.654 684.314 L983.095 684.314 L982.535 684.314 L981.976 684.314 L981.417 684.314 L980.858 684.314 L980.298 684.314 L979.739 684.314 L979.18 684.314 L978.621 684.314 L978.061 684.314 L977.502 684.314 L976.943 684.314 L976.384 684.314 L975.824 684.314 L975.265 684.314 L974.706 684.314 L974.147 684.314 L973.587 684.314 L973.028 684.314 L972.469 684.314 L971.91 684.314 L971.35 684.314 L970.791 684.314 L970.232 684.314 L969.673 684.314 L969.113 684.314 L968.554 684.314 L967.995 684.314 L967.436 684.314 L966.876 684.314 L966.317 684.314 L965.758 684.314 L965.199 684.314 L964.639 684.314 L964.08 684.314 L963.521 684.314 L962.962 684.314 L962.402 684.314 L961.843 684.314 L961.284 684.314 L960.725 684.314 L960.165 684.314 L959.606 684.314 L959.047 684.314 L958.488 684.314 L957.928 684.314 L957.369 684.314 L956.81 684.314 L956.251 684.314 L955.691 684.314 L955.132 684.314 L954.573 684.314 L954.014 684.314 L953.454 684.314 L952.895 684.314 L952.336 684.314 L951.777 684.314 L951.217 684.314 L950.658 684.314 L950.099 684.314 L949.54 684.314 L948.98 684.314 L948.421 684.314 L947.862 684.314 L947.303 684.314 L946.743 684.314 L946.184 684.314 L945.625 684.314 L945.066 684.314 L944.506 684.314 L943.947 684.314 L943.388 684.314 L942.829 684.314 L942.269 684.314 L941.71 684.314 L941.151 684.314 L940.592 684.314 L940.032 684.314 L939.473 684.314 L938.914 684.314 L938.355 684.314 L937.795 684.314 L937.236 684.314 L936.677 684.314 L936.118 684.314 L935.558 684.314 L934.999 684.314 L934.44 684.314 L933.881 684.314 L933.321 684.314 L932.762 684.314 L932.203 684.314 L931.644 684.314 L931.084 684.314 L930.525 684.314 L929.966 684.314 L929.406 684.314 L928.847 684.314 L928.288 684.314 L927.729 684.314 L927.169 684.314 L926.61 684.314 L926.051 684.314 L925.492 684.314 L924.932 684.314 L924.373 684.314 L923.814 684.314 L923.255 684.314 L922.695 684.314 L922.136 684.314 L921.577 684.314 L921.018 684.314 L920.458 684.314 L919.899 684.314 L919.34 684.314 L918.781 684.314 L918.221 684.314 L917.662 684.314 L917.103 684.314 L916.544 684.314 L915.984 684.314 L915.425 684.314 L914.866 684.314 L914.307 684.314 L913.747 684.314 L913.188 684.314 L912.629 684.314 L912.07 684.314 L911.51 684.314 L910.951 684.314 L910.392 684.314 L909.833 684.314 L909.273 684.314 L908.714 684.314 L908.155 684.314 L907.596 684.314 L907.036 684.314 L906.477 684.314 L905.918 684.314 L905.359 684.314 L904.799 684.314 L904.24 684.314 L903.681 684.314 L903.122 684.314 L902.562 684.314 L902.003 684.314 L901.444 684.314 L900.885 684.314 L900.325 684.314 L899.766 684.314 L899.207 684.314 L898.648 684.314 L898.088 684.314 L897.529 684.314 L896.97 684.314 L896.411 684.314 L895.851 684.314 L895.292 684.314 L894.733 684.314 L894.174 684.314 L893.614 684.314 L893.055 684.314 L892.496 684.314 L891.937 684.314 L891.377 684.314 L890.818 684.314 L890.259 684.314 L889.7 684.314 L889.14 684.314 L888.581 684.314 L888.022 684.314 L887.463 684.314 L886.903 684.314 L886.344 684.314 L885.785 684.314 L885.226 684.314 L884.666 684.314 L884.107 684.314 L883.548 684.314 L882.989 684.314 L882.429 684.314 L881.87 684.314 L881.311 684.314 L880.752 684.314 L880.192 684.314 L879.633 684.314 L879.074 684.314 L878.515 684.314 L877.955 684.314 L877.396 684.314 L876.837 684.314 L876.278 684.314 L875.718 684.314 L875.159 684.314 L874.6 684.314 L874.041 684.314 L873.481 684.314 L872.922 684.314 L872.363 684.314 L871.804 684.314 L871.244 684.314 L870.685 684.314 L870.126 684.314 L869.567 684.314 L869.007 684.314 L868.448 684.314 L867.889 684.314 L867.33 684.314 L866.77 684.314 L866.211 684.314 L865.652 684.314 L865.093 684.314 L864.533 684.314 L863.974 684.314 L863.415 684.314 L862.856 684.314 L862.296 684.314 L861.737 684.314 L861.178 684.314 L860.619 684.314 L860.059 684.314 L859.5 684.314 L858.941 684.314 L858.382 684.314 L857.822 684.314 L857.263 684.314 L856.704 684.314 L856.145 684.314 L855.585 684.314 L855.026 684.314 L854.467 684.314 L853.908 684.314 L853.348 684.314 L852.789 684.314 L852.23 684.314 L851.671 684.314 L851.111 684.314 L850.552 684.314 L849.993 684.314 L849.434 684.314 L848.874 684.314 L848.315 684.314 L847.756 684.314 L847.197 684.314 L846.637 684.314 L846.078 684.314 L845.519 684.314 L844.96 684.314 L844.4 684.314 L843.841 684.314 L843.282 684.314 L842.723 684.314 L842.163 684.314 L841.604 684.314 L841.045 684.314 L840.486 684.314 L839.926 684.314 L839.367 684.314 L838.808 684.314 L838.249 684.314 L837.689 684.314 L837.13 684.314 L836.571 684.314 L836.012 684.314 L835.452 684.314 L834.893 684.314 L834.334 684.314 L833.775 684.314 L833.215 684.314 L832.656 684.314 L832.097 684.314 L831.538 684.314 L830.978 684.314 L830.419 684.314 L829.86 684.314 L829.301 684.314 L828.741 684.314 L828.182 684.314 L827.623 684.314 L827.064 684.314 L826.504 684.314 L825.945 684.314 L825.386 684.314 L824.827 684.314 L824.267 684.314 L823.708 684.314 L823.149 684.314 L822.59 684.314 L822.03 684.314 L821.471 684.314 L820.912 684.314 L820.353 684.314 L819.793 684.314 L819.234 684.314 L818.675 684.314 L818.116 684.314 L817.556 684.314 L816.997 684.314 L816.438 684.314 L815.879 684.314 L815.319 684.314 L814.76 684.314 L814.201 684.314 L813.642 684.314 L813.082 684.314 L812.523 684.314 L811.964 684.314 L811.405 684.314 L810.845 684.314 L810.286 684.314 L809.727 684.314 L809.168 684.314 L808.608 684.314 L808.049 684.314 L807.49 684.314 L806.931 684.314 L806.371 684.314 L805.812 684.314 L805.253 684.314 L804.693 684.314 L804.134 684.314 L803.575 684.314 L803.016 684.314 L802.456 684.314 L801.897 684.314 L801.338 684.314 L800.779 684.314 L800.219 684.314 L799.66 684.314 L799.101 684.314 L798.542 684.314 L797.982 684.314 L797.423 684.314 L796.864 684.314 L796.305 684.314 L795.745 684.314 L795.186 684.314 L794.627 684.314 L794.068 684.314 L793.508 684.314 L792.949 684.314 L792.39 684.314 L791.831 684.314 L791.271 684.314 L790.712 684.314 L790.153 684.314 L789.594 684.314 L789.034 684.314 L788.475 684.314 L787.916 684.314 L787.357 684.314 L786.797 684.314 L786.238 684.314 L785.679 684.314 L785.12 684.314 L784.56 684.314 L784.001 684.314 L783.442 684.314 L782.883 684.314 L782.323 684.314 L781.764 684.314 L781.205 684.314 L780.646 684.314 L780.086 684.314 L779.527 684.314 L778.968 684.314 L778.409 684.314 L777.849 684.314 L777.29 684.314 L776.731 684.314 L776.172 684.314 L775.612 684.314 L775.053 684.314 L774.494 684.314 L773.935 684.314 L773.375 684.314 L772.816 684.314 L772.257 684.314 L771.698 684.314 L771.138 684.314 L770.579 684.314 L770.02 684.314 L769.461 684.314 L768.901 684.314 L768.342 684.314 L767.783 684.314 L767.224 684.314 L766.664 684.314 L766.105 684.314 L765.546 684.314 L764.987 684.314 L764.427 684.314 L763.868 684.314 L763.309 684.314 L762.75 684.314 L762.19 684.314 L761.631 684.314 L761.072 684.314 L760.513 684.314 L759.953 684.314 L759.394 684.314 L758.835 684.314 L758.276 684.314 L757.716 684.314 L757.157 684.314 L756.598 684.314 L756.039 684.314 L755.479 684.314 L754.92 684.314 L754.361 684.314 L753.802 684.314 L753.242 684.314 L752.683 684.314 L752.124 684.314 L751.565 684.314 L751.005 684.314 L750.446 684.314 L749.887 684.314 L749.328 684.314 L748.768 684.314 L748.209 684.314 L747.65 684.314 L747.091 684.314 L746.531 684.314 L745.972 684.314 L745.413 684.314 L744.854 684.314 L744.294 684.314 L743.735 684.314 L743.176 684.314 L742.617 684.314 L742.057 684.314 L741.498 684.314 L740.939 684.314 L740.38 684.314 L739.82 684.314 L739.261 684.314 L738.702 684.314 L738.143 684.314 L737.583 684.314 L737.024 684.314 L736.465 684.314 L735.906 684.314 L735.346 684.314 L734.787 684.314 L734.228 684.314 L733.669 684.314 L733.109 684.314 L732.55 684.314 L731.991 684.314 L731.432 684.314 L730.872 684.314 L730.313 684.314 L729.754 684.314 L729.195 684.314 L728.635 684.314 L728.076 684.314 L727.517 684.314 L726.958 684.314 L726.398 684.314 L725.839 684.314 L725.28 684.314 L724.721 684.314 L724.161 684.314 L723.602 684.314 L723.043 684.314 L722.484 684.314 L721.924 684.314 L721.365 684.314 L720.806 684.314 L720.247 684.314  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.396 720.806,688.396 721.365,688.396 721.924,688.396 722.484,688.396 723.043,688.396 723.602,688.396 724.161,688.396 724.721,688.396 725.28,688.396 725.839,688.396 726.398,688.396 726.958,688.396 727.517,688.396 728.076,688.396 728.635,688.396 729.195,688.396 729.754,688.396 730.313,688.396 730.872,688.396 731.432,688.396 731.991,688.396 732.55,688.396 733.109,688.396 733.669,688.396 734.228,688.396 734.787,688.396 735.346,688.396 735.906,688.396 736.465,688.396 737.024,688.396 737.583,688.396 738.143,688.396 738.702,688.396 739.261,688.396 739.82,688.396 740.38,688.396 740.939,688.396 741.498,688.396 742.057,688.396 742.617,688.396 743.176,688.396 743.735,688.396 744.294,688.396 744.854,688.396 745.413,688.396 745.972,688.396 746.531,688.396 747.091,688.396 747.65,688.396 748.209,688.396 748.768,688.396 749.328,688.396 749.887,688.396 750.446,688.396 751.005,688.396 751.565,688.396 752.124,688.396 752.683,688.396 753.242,688.396 753.802,688.396 754.361,688.396 754.92,688.396 755.479,688.396 756.039,688.396 756.598,688.396 757.157,688.396 757.716,688.396 758.276,688.396 758.835,688.396 759.394,688.396 759.953,688.396 760.513,688.396 761.072,688.396 761.631,688.396 762.19,688.396 762.75,688.396 763.309,688.396 763.868,688.396 764.427,688.396 764.987,688.396 765.546,688.396 766.105,688.396 766.664,688.396 767.224,688.396 767.783,688.396 768.342,688.396 768.901,688.396 769.461,688.396 770.02,688.396 770.579,688.396 771.138,688.396 771.698,688.396 772.257,688.396 772.816,688.396 773.375,688.396 773.935,688.396 774.494,688.396 775.053,688.396 775.612,688.396 776.172,688.396 776.731,688.396 777.29,688.396 777.849,688.396 778.409,688.396 778.968,688.396 779.527,688.396 780.086,688.396 780.646,688.396 781.205,688.396 781.764,688.396 782.323,688.396 782.883,688.396 783.442,688.396 784.001,688.396 784.56,688.396 785.12,688.396 785.679,688.396 786.238,688.396 786.797,688.396 787.357,688.396 787.916,688.396 788.475,688.396 789.034,688.396 789.594,688.396 790.153,688.396 790.712,688.396 791.271,688.396 791.831,688.396 792.39,688.396 792.949,688.396 793.508,688.396 794.068,688.396 794.627,688.396 795.186,688.396 795.745,688.396 796.305,688.396 796.864,688.396 797.423,688.396 797.982,688.396 798.542,688.396 799.101,688.396 799.66,688.396 800.219,688.396 800.779,688.396 801.338,688.396 801.897,688.396 802.456,688.396 803.016,688.396 803.575,688.396 804.134,688.396 804.693,688.396 805.253,688.396 805.812,688.396 806.371,688.396 806.931,688.396 807.49,688.396 808.049,688.396 808.608,688.396 809.168,688.396 809.727,688.396 810.286,688.396 810.845,688.396 811.405,688.396 811.964,688.396 812.523,688.396 813.082,688.396 813.642,688.396 814.201,688.396 814.76,688.396 815.319,688.396 815.879,688.396 816.438,688.396 816.997,688.396 817.556,688.396 818.116,688.396 818.675,688.396 819.234,688.396 819.793,688.396 820.353,688.396 820.912,688.396 821.471,688.396 822.03,688.396 822.59,688.396 823.149,688.396 823.708,688.396 824.267,688.396 824.827,688.396 825.386,688.396 825.945,688.396 826.504,688.396 827.064,688.396 827.623,688.396 828.182,688.396 828.741,688.396 829.301,688.396 829.86,688.396 830.419,688.396 830.978,688.396 831.538,688.396 832.097,688.396 832.656,688.396 833.215,688.396 833.775,688.396 834.334,688.396 834.893,688.396 835.452,688.396 836.012,688.396 836.571,688.396 837.13,688.396 837.689,688.396 838.249,688.396 838.808,688.396 839.367,688.396 839.926,688.396 840.486,688.396 841.045,688.396 841.604,688.396 842.163,688.396 842.723,688.396 843.282,688.396 843.841,688.396 844.4,688.396 844.96,688.396 845.519,688.396 846.078,688.396 846.637,688.396 847.197,688.396 847.756,688.396 848.315,688.396 848.874,688.396 849.434,688.396 849.993,688.396 850.552,688.396 851.111,688.396 851.671,688.396 852.23,688.396 852.789,688.396 853.348,688.396 853.908,688.396 854.467,688.396 855.026,688.396 855.585,688.396 856.145,688.396 856.704,688.396 857.263,688.396 857.822,688.396 858.382,688.396 858.941,688.396 859.5,688.396 860.059,688.396 860.619,688.396 861.178,688.396 861.737,688.396 862.296,688.396 862.856,688.396 863.415,688.396 863.974,688.396 864.533,688.396 865.093,688.396 865.652,688.396 866.211,688.396 866.77,688.396 867.33,688.396 867.889,688.396 868.448,688.396 869.007,688.396 869.567,688.396 870.126,688.396 870.685,688.396 871.244,688.396 871.804,688.396 872.363,688.396 872.922,688.396 873.481,688.396 874.041,688.396 874.6,688.396 875.159,688.396 875.718,688.396 876.278,688.396 876.837,688.396 877.396,688.396 877.955,688.396 878.515,688.396 879.074,688.396 879.633,688.396 880.192,688.396 880.752,688.396 881.311,688.396 881.87,688.396 882.429,688.396 882.989,688.396 883.548,688.396 884.107,688.396 884.666,688.396 885.226,688.396 885.785,688.396 886.344,688.396 886.903,688.396 887.463,688.396 888.022,688.396 888.581,688.396 889.14,688.396 889.7,688.396 890.259,688.396 890.818,688.396 891.377,688.396 891.937,688.396 892.496,688.396 893.055,688.396 893.614,688.396 894.174,688.396 894.733,688.396 895.292,688.396 895.851,688.396 896.411,688.396 896.97,688.396 897.529,688.396 898.088,688.396 898.648,688.396 899.207,688.396 899.766,688.396 900.325,688.396 900.885,688.396 901.444,688.396 902.003,688.396 902.562,688.396 903.122,688.396 903.681,688.396 904.24,688.396 904.799,688.396 905.359,688.396 905.918,688.396 906.477,688.396 907.036,688.396 907.596,688.396 908.155,688.396 908.714,688.396 909.273,688.396 909.833,688.396 910.392,688.396 910.951,688.396 911.51,688.396 912.07,688.396 912.629,688.396 913.188,688.396 913.747,688.396 914.307,688.396 914.866,688.396 915.425,688.396 915.984,688.396 916.544,688.396 917.103,688.396 917.662,688.396 918.221,688.396 918.781,688.396 919.34,688.396 919.899,688.396 920.458,688.396 921.018,688.396 921.577,688.396 922.136,688.396 922.695,688.396 923.255,688.396 923.814,688.396 924.373,688.396 924.932,688.396 925.492,688.396 926.051,688.396 926.61,688.396 927.169,688.396 927.729,688.396 928.288,688.396 928.847,688.396 929.406,688.396 929.966,688.396 930.525,688.396 931.084,688.396 931.644,688.396 932.203,688.396 932.762,688.396 933.321,688.396 933.881,688.396 934.44,688.396 934.999,688.396 935.558,688.396 936.118,688.396 936.677,688.396 937.236,688.396 937.795,688.396 938.355,688.396 938.914,688.396 939.473,688.396 940.032,688.396 940.592,688.396 941.151,688.396 941.71,688.396 942.269,688.396 942.829,688.396 943.388,688.396 943.947,688.396 944.506,688.396 945.066,688.396 945.625,688.396 946.184,688.396 946.743,688.396 947.303,688.396 947.862,688.396 948.421,688.396 948.98,688.396 949.54,688.396 950.099,688.396 950.658,688.396 951.217,688.396 951.777,688.396 952.336,688.396 952.895,688.396 953.454,688.396 954.014,688.396 954.573,688.396 955.132,688.396 955.691,688.396 956.251,688.396 956.81,688.396 957.369,688.396 957.928,688.396 958.488,688.396 959.047,688.396 959.606,688.396 960.165,688.396 960.725,688.396 961.284,688.396 961.843,688.396 962.402,688.396 962.962,688.396 963.521,688.396 964.08,688.396 964.639,688.396 965.199,688.396 965.758,688.396 966.317,688.396 966.876,688.396 967.436,688.396 967.995,688.396 968.554,688.396 969.113,688.396 969.673,688.396 970.232,688.396 970.791,688.396 971.35,688.396 971.91,688.396 972.469,688.396 973.028,688.396 973.587,688.396 974.147,688.396 974.706,688.396 975.265,688.396 975.824,688.396 976.384,688.396 976.943,688.396 977.502,688.396 978.061,688.396 978.621,688.396 979.18,688.396 979.739,688.396 980.298,688.396 980.858,688.396 981.417,688.396 981.976,688.396 982.535,688.396 983.095,688.396 983.654,688.396 984.213,688.396 984.772,688.396 985.332,688.396 985.891,688.396 986.45,688.396 987.009,688.396 987.569,688.396 988.128,688.396 988.687,688.396 989.246,688.396 989.806,688.396 990.365,688.396 990.924,688.396 991.483,688.396 992.043,688.396 992.602,688.396 993.161,688.396 993.72,688.396 994.28,688.396 994.839,688.396 995.398,688.396 995.957,688.396 996.517,688.396 997.076,688.396 997.635,688.396 998.194,688.396 998.754,688.396 999.313,688.396 999.872,688.396 1000.43,688.396 1000.99,688.396 1001.55,688.396 1002.11,688.396 1002.67,688.396 1003.23,688.396 1003.79,688.396 1004.35,688.396 1004.91,688.396 1005.46,688.396 1006.02,688.396 1006.58,688.396 1007.14,688.396 1007.7,688.396 1008.26,688.396 1008.82,688.396 1009.38,688.396 1009.94,688.396 1010.5,688.396 1011.06,688.396 1011.62,688.396 1012.18,688.396 1012.73,688.396 1013.29,688.396 1013.85,688.396 1014.41,688.396 1014.97,688.396 1015.53,688.396 1016.09,688.396 1016.65,688.396 1017.21,688.396 1017.77,688.396 1018.33,688.396 1018.89,688.396 1019.45,688.396 1020.01,688.396 1020.56,688.396 1021.12,688.396 1021.68,688.396 1022.24,688.396 1022.8,688.396 1023.36,688.396 1023.92,688.396 1024.48,688.396 1025.04,688.396 1025.6,688.396 1026.16,688.396 1026.72,688.396 1027.28,688.396 1027.83,688.396 1028.39,688.396 1028.95,688.396 1029.51,688.396 1030.07,688.396 1030.63,688.396 1031.19,688.396 1031.75,688.396 1032.31,688.396 1032.87,688.396 1033.43,688.396 1033.99,688.396 1034.55,688.396 1035.1,688.396 1035.66,688.396 1036.22,688.396 1036.78,688.396 1037.34,688.396 1037.9,688.396 1038.46,688.396 1039.02,688.396 1039.58,688.396 1040.14,688.396 1040.7,688.396 1041.26,688.396 1041.82,688.396 1042.38,688.396 1042.93,688.396 1043.49,688.396 1044.05,688.396 1044.61,688.396 1045.17,688.396 1045.73,688.396 1046.29,688.396 1046.85,688.396 1047.41,688.396 1047.97,688.396 1048.53,688.396 1049.09,688.396 1049.65,688.396 1050.2,688.396 1050.76,688.396 1051.32,688.396 1051.88,688.396 1052.44,688.396 1053,688.396 1053.56,688.396 1054.12,688.396 1054.68,688.396 1055.24,688.396 1055.8,688.396 1056.36,688.396 1056.92,688.396 1057.48,688.396 1058.03,688.396 1058.59,688.396 1059.15,688.396 1059.71,688.396 1060.27,688.396 1060.83,688.396 1061.39,688.396 1061.95,688.396 1062.51,688.396 1063.07,688.396 1063.63,688.396 1064.19,688.396 1064.75,688.396 1065.3,688.396 1065.86,688.396 1066.42,688.396 1066.98,688.396 1067.54,688.396 1068.1,688.396 1068.66,688.396 1069.22,688.396 1069.78,688.396 1070.34,688.396 1070.9,688.396 1071.46,688.396 1072.02,688.396 1072.57,688.396 1073.13,688.396 1073.69,688.396 1074.25,688.396 1074.81,688.396 1075.37,688.396 1075.93,688.396 1076.49,688.396 1077.05,688.396 1077.61,688.396 1078.17,688.396 1078.73,688.396 1079.29,688.396 1079.85,688.396 1080.4,688.396 1080.96,688.396 1081.52,688.396 1082.08,688.396 1082.64,688.396 1083.2,688.396 1083.76,688.396 1084.32,688.396 1084.88,688.396 1085.44,688.396 1086,688.396 1086.56,688.396 1087.12,688.396 1087.67,688.396 1088.23,688.396 1088.79,688.396 1089.35,688.396 1089.91,688.396 1090.47,688.396 1091.03,688.396 1091.59,688.396 1092.15,688.396 1092.71,688.396 1093.27,688.396 1093.83,688.396 1094.39,688.396 1094.94,688.396 1095.5,688.396 1096.06,688.396 1096.62,688.396 1097.18,688.396 1097.74,688.396 1098.3,688.396 1098.86,688.396 1099.42,688.396 1099.98,688.396 1100.54,688.396 1101.1,688.396 1101.66,688.396 1102.22,688.396 1102.77,688.396 1103.33,688.396 1103.89,688.396 1104.45,688.396 1105.01,688.396 1105.57,688.396 1106.13,688.396 1106.69,688.396 1107.25,688.396 1107.81,688.396 1108.37,688.396 1108.93,688.396 1109.49,688.396 1110.04,688.396 1110.6,688.396 1111.16,688.396 1111.72,688.396 1112.28,688.396 1112.84,688.396 1113.4,688.396 1113.96,688.396 1114.52,688.396 1115.08,688.396 1115.64,688.396 1116.2,688.396 1116.76,688.396 1117.31,688.396 1117.87,688.396 1118.43,688.396 1118.99,688.396 1119.55,688.396 1120.11,688.396 1120.67,688.396 1121.23,688.396 1121.79,688.396 1122.35,688.396 1122.91,688.396 1123.47,688.396 1124.03,688.396 1124.59,688.396 1125.14,688.396 1125.7,688.396 1126.26,688.396 1126.82,688.396 1127.38,688.396 1127.94,688.396 1128.5,688.396 1129.06,688.396 1129.62,688.396 1130.18,688.396 1130.74,688.396 1131.3,688.396 1131.86,688.396 1132.41,688.396 1132.97,688.396 1133.53,688.396 1134.09,688.396 1134.65,688.396 1135.21,688.396 1135.77,688.396 1136.33,688.396 1136.89,688.396 1137.45,688.396 1138.01,688.396 1138.57,688.396 1139.13,688.396 1139.68,688.396 1140.24,688.396 1140.8,688.396 1141.36,688.396 1141.92,688.396 1142.48,688.396 1143.04,688.396 1143.6,688.396 1144.16,688.396 1144.72,688.396 1145.28,688.396 1145.84,688.396 1146.4,688.396 1146.96,688.396 1147.51,688.396 1148.07,688.396 1148.63,688.396 1149.19,688.396 1149.75,688.396 1150.31,688.396 1150.87,688.396 1151.43,688.396 1151.99,688.396 1152.55,688.396 1153.11,688.396 1153.67,688.396 1154.23,688.396 1154.78,688.396 1155.34,688.396 1155.9,688.396 1156.46,688.396 1157.02,688.396 1157.58,688.396 1158.14,688.396 1158.7,688.396 1159.26,688.396 1159.82,688.396 1160.38,688.396 1160.94,688.396 1161.5,688.396 1162.05,688.396 1162.61,688.396 1163.17,688.396 1163.73,688.396 1164.29,688.396 1164.85,688.396 1165.41,688.396 1165.97,688.396 1166.53,688.396 1167.09,688.396 1167.65,688.396 1168.21,688.396 1168.77,688.396 1169.33,688.396 1169.88,688.396 1170.44,688.396 1171,688.396 1171.56,688.396 1172.12,688.396 1172.68,688.396 1173.24,688.396 1173.8,688.396 1174.36,688.396 1174.92,688.396 1175.48,688.396 1176.04,688.396 1176.6,688.396 1177.15,688.396 1177.71,688.396 1178.27,688.396 1178.83,688.396 1179.39,688.396 1179.95,688.396 1180.51,688.396 1181.07,688.396 1181.63,688.396 1182.19,688.396 1182.75,688.396 1183.31,688.396 1183.87,688.396 1184.43,688.396 1184.98,688.396 1185.54,688.396 1186.1,688.396 1186.66,688.396 1187.22,688.396 1187.78,688.396 1188.34,688.396 1188.9,688.396 1189.46,688.396 1190.02,688.396 1190.58,688.396 1191.14,688.396 1191.7,688.396 1192.25,688.396 1192.81,688.396 1193.37,688.396 1193.93,688.396 1194.49,688.396 1195.05,688.396 1195.61,688.396 1196.17,688.396 1196.73,688.396 1197.29,688.396 1197.85,688.396 1198.41,688.396 1198.97,688.396 1199.52,688.396 1200.08,688.396 1200.64,688.396 1201.2,688.396 1201.76,688.396 1202.32,688.396 1202.88,688.396 1203.44,688.396 1204,688.396 1204.56,688.396 1205.12,688.396 1205.68,688.396 1206.24,688.396 1206.8,688.396 1207.35,688.396 1207.91,688.396 1208.47,688.396 1209.03,688.396 1209.59,688.396 1210.15,688.396 1210.71,688.396 1211.27,688.396 1211.83,688.396 1212.39,688.396 1212.95,688.396 1213.51,688.396 1214.07,688.396 1214.62,688.396 1215.18,688.396 1215.74,688.396 1216.3,688.396 1216.86,688.396 1217.42,688.396 1217.98,688.396 1218.54,688.396 1219.1,688.396 1219.66,688.396 1220.22,688.396 1220.78,688.396 1221.34,688.396 1221.89,688.396 1222.45,688.396 1223.01,688.396 1223.57,688.396 1224.13,688.396 1224.69,688.396 1225.25,688.396 1225.81,688.396 1226.37,688.396 1226.93,688.396 1227.49,688.396 1228.05,688.396 1228.61,688.396 1229.17,688.396 1229.72,688.396 1230.28,688.396 1230.84,688.396 1231.4,688.396 1231.96,688.396 1232.52,688.396 1233.08,688.396 1233.64,688.396 1234.2,688.396 1234.76,688.396 1235.32,688.396 1235.88,688.396 1236.44,688.396 1236.99,688.396 1237.55,688.396 1238.11,688.396 1238.67,688.396 1239.23,688.396 1239.79,688.396 1240.35,688.396 1240.91,688.396 1241.47,688.396 1242.03,688.396 1242.59,688.396 1243.15,688.396 1243.71,688.396 1244.26,688.396 1244.82,688.396 1245.38,688.396 1245.94,688.396 1246.5,688.396 1247.06,688.396 1247.62,688.396 1248.18,688.396 1248.74,688.396 1249.3,688.396 1249.86,688.396 1250.42,688.396 1250.98,688.396 1251.54,688.396 1252.09,688.396 1252.65,688.396 1253.21,688.396 1253.77,688.396 1254.33,688.396 1254.89,688.396 1255.45,688.396 1256.01,688.396 1256.57,688.396 1257.13,688.396 1257.69,688.396 1258.25,688.396 1258.81,688.396 1259.36,688.396 1259.92,688.396 1260.48,688.396 1261.04,688.396 1261.6,688.396 1262.16,688.396 1262.72,688.396 1263.28,688.396 1263.84,688.396 1264.4,688.396 1264.96,688.396 1265.52,688.396 1266.08,688.396 1266.63,688.396 1267.19,688.396 1267.75,688.396 1268.31,688.396 1268.87,688.396 1269.43,688.396 1269.99,688.396 1270.55,688.396 1271.11,688.396 1271.67,688.396 1272.23,688.396 1272.79,688.396 1273.35,688.396 1273.91,688.396 1274.46,688.396 1275.02,688.396 1275.58,688.396 1276.14,688.396 1276.7,688.396 1277.26,688.396 1277.82,688.396 1278.38,688.396 1278.94,688.396 1279.5,688.396 1280.06,688.396 1280.62,688.396 1281.18,688.396 1281.73,688.396 1282.29,688.396 1282.85,688.396 1283.41,688.396 1283.97,688.396 1284.53,688.396 1285.09,688.396 1285.65,688.396 1286.21,688.396 1286.77,688.396 1287.33,688.396 1287.89,688.396 1288.45,688.396 1289,688.396 1289.56,688.396 1290.12,688.396 1290.68,688.396 1291.24,688.396 1291.8,688.396 1292.36,688.396 1292.92,688.396 1293.48,688.396 1294.04,688.396 1294.6,688.396 1295.16,688.396 1295.72,688.396 1296.28,688.396 1296.83,688.396 1297.39,688.396 1297.95,688.396 1298.51,688.396 1299.07,688.396 1299.63,688.396 1300.19,688.396 1300.75,688.396 1301.31,688.396 1301.87,688.396 1302.43,688.396 1302.99,688.396 1303.55,688.396 1304.1,688.396 1304.66,688.396 1305.22,688.396 1305.78,688.396 1306.34,688.396 1306.9,688.396 1307.46,688.396 1308.02,688.396 1308.58,688.396 1309.14,688.396 1309.7,688.396 1310.26,688.396 1310.82,688.396 1311.38,688.396 1311.93,688.396 1312.49,688.396 1313.05,688.396 1313.61,688.396 1314.17,688.396 1314.73,688.396 1315.29,688.396 1315.85,688.396 1316.41,688.396 1316.97,688.396 1317.53,688.396 1318.09,688.396 1318.65,688.396 1319.2,688.396 1319.76,688.396 1320.32,688.396 1320.88,688.396 1321.44,688.396 1322,688.396 1322.56,688.396 1323.12,688.396 1323.68,688.396 1324.24,688.396 1324.8,688.396 1325.36,688.396 1325.92,688.396 1326.47,688.396 1327.03,688.396 1327.59,688.396 1328.15,688.396 1328.71,688.396 1329.27,688.396 1329.83,688.396 1330.39,688.396 1330.95,688.396 1331.51,688.396 1332.07,688.396 1332.63,688.396 1333.19,688.396 1333.75,688.396 1334.3,688.396 1334.86,688.396 1335.42,688.396 1335.98,688.396 1336.54,688.396 1337.1,688.396 1337.66,688.396 1338.22,688.396 1338.78,688.396 1339.34,688.396 1339.9,688.396 1340.46,688.396 1341.02,688.396 1341.57,688.396 1342.13,688.396 1342.69,688.396 1343.25,688.396 1343.81,688.396 1344.37,688.396 1344.93,688.396 1345.49,688.396 1346.05,688.396 1346.61,688.396 1347.17,688.396 1347.73,688.396 1348.29,688.396 1348.84,688.396 1349.4,688.396 1349.96,688.396 1350.52,688.396 1351.08,688.396 1351.64,688.396 1352.2,688.396 1352.76,688.396 1353.32,688.396 1353.88,688.396 1354.44,688.396 1355,688.396 1355.56,688.396 1356.12,688.396 1356.67,688.396 1357.23,688.396 1357.79,688.396 1358.35,688.396 1358.91,688.396 1359.47,688.396 1360.03,688.396 1360.59,688.396 1361.15,688.396 1361.71,688.396 1362.27,688.396 1362.83,688.396 1363.39,688.396 1363.94,688.396 1364.5,688.396 1365.06,688.396 1365.62,688.396 1366.18,688.396 1366.74,688.396 1367.3,688.396 1367.86,688.396 1368.42,688.396 1368.98,688.396 1369.54,688.396 1370.1,688.396 1370.66,688.396 1371.21,688.396 1371.77,688.396 1372.33,688.396 1372.89,688.396 1373.45,688.396 1374.01,688.396 1374.57,688.396 1375.13,688.396 1375.69,688.396 1376.25,688.396 1376.81,688.396 1377.37,688.396 1377.93,688.396 1378.49,688.396 1379.04,688.396 1379.6,688.396 1380.16,688.396 1380.72,688.396 1381.28,688.396 1381.84,688.396 1382.4,688.396 1382.96,688.396 1383.52,688.396 1384.08,688.396 1384.64,688.396 1385.2,688.396 1385.76,688.396 1386.31,688.396 1386.87,688.396 1387.43,688.396 1387.99,688.396 1388.55,688.396 1389.11,688.396 1389.67,688.396 1390.23,688.396 1390.79,688.396 1391.35,688.396 1391.91,688.396 1392.47,688.396 1393.03,688.396 1393.58,688.396 1394.14,688.396 1394.7,688.396 1395.26,688.396 1395.82,688.396 1396.38,688.396 1396.94,688.396 1397.5,688.396 1398.06,688.396 1398.62,688.396 1399.18,688.396 1399.74,688.396 1400.3,688.396 1400.86,688.396 1401.41,688.396 1401.97,688.396 1402.53,688.396 1403.09,688.396 1403.65,688.396 1404.21,688.396 1404.77,688.396 1405.33,688.396 1405.89,688.396 1406.45,688.396 1407.01,688.396 1407.57,688.396 1408.13,688.396 1408.68,688.396 1409.24,688.396 1409.8,688.396 1410.36,688.396 1410.92,688.396 1411.48,688.396 1412.04,688.396 1412.6,688.396 1413.16,688.396 1413.72,688.396 1414.28,688.396 1414.84,688.396 1415.4,688.396 1415.95,688.396 1416.51,688.396 1417.07,688.396 1417.63,688.396 1418.19,688.396 1418.75,688.396 1419.31,688.396 1419.87,688.396 1420.43,688.396 1420.99,688.396 1421.55,688.396 1422.11,688.396 1422.67,688.396 1423.23,688.396 1423.78,688.396 1424.34,688.396 1424.9,688.396 1425.46,688.396 1426.02,688.396 1426.58,688.396 1427.14,688.396 1427.7,688.396 1428.26,688.396 1428.82,688.396 1429.38,688.396 1429.94,688.396 1430.5,688.396 1431.05,688.396 1431.61,688.396 1432.17,688.396 1432.73,688.396 1433.29,688.396 1433.85,688.396 1434.41,688.396 1434.97,688.396 1435.53,688.396 1436.09,688.396 1436.65,688.396 1437.21,688.396 1437.77,688.396 1438.33,688.396 1438.88,688.396 1439.44,688.396 1440,688.396 1440.56,688.396 1441.12,688.396 1441.68,688.396 1442.24,688.396 1442.8,688.396 1443.36,688.396 1443.92,688.396 1444.48,688.396 1445.04,688.396 1445.6,688.396 1446.15,688.396 1446.71,688.396 1447.27,688.396 1447.83,688.396 1448.39,688.396 1448.95,688.396 1449.51,688.396 1450.07,688.396 1450.63,688.396 1451.19,688.396 1451.75,688.396 1452.31,688.396 1452.87,688.396 1453.42,688.396 1453.98,688.396 1454.54,688.396 1455.1,688.396 1455.66,688.396 1456.22,688.396 1456.78,688.396 1457.34,688.396 1457.9,688.396 1458.46,688.396 1459.02,688.396 1459.58,688.396 1460.14,688.396 1460.7,688.396 1461.25,688.396 1461.81,688.396 1462.37,688.396 1462.93,688.396 1463.49,688.396 1464.05,688.396 1464.61,688.396 1465.17,688.396 1465.73,688.396 1466.29,688.396 1466.85,688.396 1467.41,688.396 1467.97,688.396 1468.52,688.396 1469.08,688.396 1469.64,688.396 1470.2,688.396 1470.76,688.396 1471.32,688.396 1471.88,688.396 1472.44,688.396 1473,688.396 1473.56,688.396 1474.12,688.396 1474.68,688.396 1475.24,688.396 1475.79,688.396 1476.35,688.396 1476.91,688.396 1477.47,688.396 1478.03,688.396 1478.59,688.396 1479.15,688.396 1479.71,688.396 1480.27,688.396 1480.83,688.396 1481.39,688.396 1481.95,688.396 1482.51,688.396 1483.07,688.396 1483.62,688.396 1484.18,688.396 1484.74,688.396 1485.3,688.396 1485.86,688.396 1486.42,688.396 1486.98,688.396 1487.54,688.396 1488.1,688.396 1488.66,688.396 1489.22,688.396 1489.78,688.396 1490.34,688.396 1490.89,688.396 1491.45,688.396 1492.01,688.396 1492.57,688.396 1493.13,688.396 1493.69,688.396 1494.25,688.396 1494.81,688.396 1495.37,688.396 1495.93,688.396 1496.49,688.396 1497.05,688.396 1497.61,688.396 1498.16,688.396 1498.72,688.396 1499.28,688.396 1499.84,688.396 1500.4,688.396 1500.96,688.396 1501.52,688.396 1502.08,688.396 1502.64,688.396 1503.2,688.396 1503.76,688.396 1504.32,688.396 1504.88,688.396 1505.44,688.396 1505.99,688.396 1506.55,688.396 1507.11,688.396 1507.67,688.396 1508.23,688.396 1508.79,688.396 1509.35,688.396 1509.91,688.396 1510.47,688.396 1511.03,688.396 1511.59,688.396 1512.15,688.396 1512.71,688.396 1513.26,688.396 1513.82,688.396 1514.38,688.396 1514.94,688.396 1515.5,688.396 1516.06,688.396 1516.62,688.396 1517.18,688.396 1517.74,688.396 1518.3,688.396 1518.86,688.396 1519.42,688.396 1519.98,688.396 1520.53,688.396 1521.09,688.396 1521.65,688.396 1522.21,688.396 1522.77,688.396 1523.33,688.396 1523.89,688.396 1524.45,688.396 1525.01,688.396 1525.57,688.396 1526.13,688.396 1526.69,688.396 1527.25,688.396 1527.81,688.396 1528.36,688.396 1528.92,688.396 1529.48,688.396 1530.04,688.396 1530.6,688.396 1531.16,688.396 1531.72,688.396 1532.28,688.396 1532.84,688.396 1533.4,688.396 1533.96,688.396 1534.52,688.396 1535.08,688.396 1535.63,688.396 1536.19,688.396 1536.75,688.396 1537.31,688.396 1537.87,688.396 1538.43,688.396 1538.99,688.396 1539.55,688.396 1540.11,688.396 1540.67,688.396 1541.23,688.396 1541.79,688.396 1542.35,688.396 1542.9,688.396 1543.46,688.396 1544.02,688.396 1544.58,688.396 1545.14,688.396 1545.7,688.396 1546.26,688.396 1546.82,688.396 1547.38,688.396 1547.94,688.396 1548.5,688.396 1549.06,688.396 1549.62,688.396 1550.18,688.396 1550.73,688.396 1551.29,688.396 1551.85,688.396 1552.41,688.396 1552.97,688.396 1553.53,688.396 1554.09,688.396 1554.65,688.396 1555.21,688.396 1555.77,688.396 1556.33,688.396 1556.89,688.396 1557.45,688.396 1558,688.396 1558.56,688.396 1559.12,688.396 1559.68,688.396 1560.24,688.396 1560.8,688.396 1561.36,688.396 1561.92,688.396 1562.48,688.396 1563.04,688.396 1563.6,688.396 1564.16,688.396 1564.72,688.396 1565.28,688.396 1565.83,688.396 1566.39,688.396 1566.95,688.396 1567.51,688.396 1568.07,688.396 1568.63,688.396 1569.19,688.396 1569.75,688.396 1570.31,688.396 1570.87,688.396 1571.43,688.396 1571.99,688.396 1572.55,688.396 1573.1,688.396 1573.66,688.396 1574.22,688.396 1574.78,688.396 1575.34,688.396 1575.9,688.396 1576.46,688.396 1577.02,688.396 1577.58,688.396 1578.14,688.396 1578.7,688.396 1579.26,688.396 1579.82,688.396 1580.37,688.396 1580.93,688.396 1581.49,688.396 1582.05,688.396 1582.61,688.396 1583.17,688.396 1583.73,688.396 1584.29,688.396 1584.85,688.396 1585.41,688.396 1585.97,688.396 1586.53,688.396 1587.09,688.396 1587.65,688.396 1588.2,688.396 1588.76,688.396 1589.32,688.396 1589.88,688.396 1590.44,688.396 1591,688.396 1591.56,688.396 1592.12,688.396 1592.68,688.396 1593.24,688.396 1593.8,688.396 1594.36,688.396 1594.92,688.396 1595.47,688.396 1596.03,688.396 1596.59,688.396 1597.15,688.396 1597.71,688.396 1598.27,688.396 1598.83,688.396 1599.39,688.396 1599.95,688.396 1600.51,688.396 1601.07,688.396 1601.63,688.396 1602.19,688.396 1602.74,688.396 1603.3,688.396 1603.86,688.396 1604.42,688.396 1604.98,688.396 1605.54,688.396 1606.1,688.396 1606.66,688.396 1607.22,688.396 1607.78,688.396 1608.34,688.396 1608.9,688.396 1609.46,688.396 1610.02,688.396 1610.57,688.396 1611.13,688.396 1611.69,688.396 1612.25,688.396 1612.81,688.396 1613.37,688.396 1613.93,688.396 1614.49,688.396 1615.05,688.396 1615.61,688.396 1616.17,688.396 1616.73,688.396 1617.29,688.396 1617.84,688.396 1618.4,688.396 1618.96,688.396 1619.52,688.396 1620.08,688.396 1620.64,688.396 1621.2,688.396 1621.76,688.396 1622.32,688.396 1622.88,688.396 1623.44,688.396 1624,688.396 1624.56,688.396 1625.11,688.396 1625.67,688.396 1626.23,688.396 1626.79,688.396 1627.35,688.396 1627.91,688.396 1628.47,688.396 1629.03,688.396 1629.59,688.396 1630.15,688.396 1630.71,688.396 1631.27,688.396 1631.83,688.396 1632.39,688.396 1632.94,688.396 1633.5,688.396 1634.06,688.396 1634.62,688.396 1635.18,688.396 1635.74,688.396 1636.3,688.396 1636.86,688.396 1637.42,688.396 1637.98,688.396 1638.54,688.396 1639.1,688.396 1639.66,688.396 1640.21,688.396 1640.77,688.396 1641.33,688.396 1641.89,688.396 1642.45,688.396 1643.01,688.396 1643.57,688.396 1644.13,688.396 1644.69,688.396 1645.25,688.396 1645.81,688.396 1646.37,688.396 1646.93,688.396 1647.48,688.396 1648.04,688.396 1648.6,688.396 1649.16,688.396 1649.72,688.396 1650.28,688.396 1650.84,688.396 1651.4,688.396 1651.96,688.396 1652.52,688.396 1653.08,688.396 1653.64,688.396 1654.2,688.396 1654.76,688.396 1655.31,688.396 1655.87,688.396 1656.43,688.396 1656.99,688.396 1657.55,688.396 1658.11,688.396 1658.67,688.396 1659.23,688.396 1659.79,688.396 1660.35,688.396 1660.91,688.396 1661.47,688.396 1662.03,688.396 1662.58,688.396 1663.14,688.396 1663.7,688.396 1664.26,688.396 1664.82,688.396 1665.38,688.396 1665.94,688.396 1666.5,688.396 1667.06,688.396 1667.62,688.396 1668.18,688.396 1668.74,688.396 1669.3,688.396 1669.85,688.396 1670.41,688.396 1670.97,688.396 1671.53,688.396 1672.09,688.396 1672.65,688.396 1673.21,688.396 1673.77,688.396 1674.33,688.396 1674.89,688.396 1675.45,688.396 1676.01,688.396 1676.57,688.396 1677.13,688.396 1677.68,688.396 1678.24,688.396 1678.8,688.396 1679.36,688.396 1679.92,688.396 1680.48,688.396 1681.04,688.396 1681.6,688.396 1682.16,688.396 1682.72,688.396 1683.28,688.396 1683.84,688.396 1684.4,688.396 1684.95,688.396 1685.51,688.396 1686.07,688.396 1686.63,688.396 1687.19,688.396 1687.75,688.396 1688.31,688.396 1688.87,688.396 1689.43,688.396 1689.99,688.396 1690.55,688.396 1691.11,688.396 1691.67,688.396 1692.23,688.396 1692.78,688.396 1693.34,688.396 1693.9,688.396 1694.46,688.396 1695.02,688.396 1695.58,688.396 1696.14,688.396 1696.7,688.396 1697.26,688.396 1697.82,688.396 1698.38,688.396 1698.94,688.396 1699.5,688.396 1700.05,688.396 1700.61,688.396 1701.17,688.396 1701.73,688.396 1702.29,688.396 1702.85,688.396 1703.41,688.396 1703.97,688.396 1704.53,688.396 1705.09,688.396 1705.65,688.396 1706.21,688.396 1706.77,688.396 1707.32,688.396 1707.88,688.396 1708.44,688.396 1709,688.396 1709.56,688.396 1710.12,688.396 1710.68,688.396 1711.24,688.396 1711.8,688.396 1712.36,688.396 1712.92,688.396 1713.48,688.396 1714.04,688.396 1714.6,688.396 1715.15,688.396 1715.71,688.396 1716.27,688.396 1716.83,688.396 1717.39,688.396 1717.95,688.396 1718.51,688.396 1719.07,688.396 1719.63,688.396 1720.19,688.396 1720.75,688.396 1721.31,688.396 1721.87,688.396 1722.42,688.396 1722.98,688.396 1723.54,688.396 1724.1,688.396 1724.66,688.396 1725.22,688.396 1725.78,688.396 1726.34,688.396 1726.9,688.396 1727.46,688.396 1728.02,688.396 1728.58,688.396 1729.14,688.396 1729.69,688.396 1730.25,688.396 1730.81,688.396 1731.37,688.396 1731.93,688.396 1732.49,688.396 1733.05,688.396 1733.61,688.396 1734.17,688.396 1734.73,688.396 1735.29,688.396 1735.85,688.396 1736.41,688.396 1736.97,688.396 1737.52,688.396 1738.08,688.396 1738.64,688.396 1739.2,688.396 1739.76,688.396 1740.32,688.396 1740.88,688.396 1741.44,688.396 1742,688.396 1742.56,688.396 1743.12,688.396 1743.68,688.396 1744.24,688.396 1744.79,688.396 1745.35,688.396 1745.91,688.396 1746.47,688.396 1747.03,688.396 1747.59,688.396 1748.15,688.396 1748.71,688.396 1749.27,688.396 1749.83,688.396 1750.39,688.396 1750.95,688.396 1751.51,688.396 1752.06,688.396 1752.62,688.396 1753.18,688.396 1753.74,688.396 1754.3,688.396 1754.86,688.396 1755.42,688.396 1755.98,688.396 1756.54,688.396 1757.1,688.396 1757.66,688.396 1758.22,688.396 1758.78,688.396 1759.34,688.396 1759.89,688.396 1760.45,688.396 1761.01,688.396 1761.57,688.396 1762.13,688.396 1762.69,688.396 1763.25,688.396 1763.81,688.396 1764.37,688.396 1764.93,688.396 1765.49,688.396 1766.05,688.396 1766.61,688.396 1767.16,688.396 1767.72,688.396 1768.28,688.396 1768.84,688.396 1769.4,688.396 1769.96,688.396 1770.52,688.396 1771.08,688.396 1771.64,688.396 1772.2,688.396 1772.76,688.396 1773.32,688.396 1773.88,688.396 1774.43,688.396 1774.99,688.396 1775.55,688.396 1776.11,688.396 1776.67,688.396 1777.23,688.396 1777.79,688.396 1778.35,688.396 1778.91,688.396 1779.47,688.396 1780.03,688.396 1780.59,688.396 1781.15,688.396 1781.71,688.396 1782.26,688.396 1782.82,688.396 1783.38,688.396 1783.94,688.396 1784.5,688.396 1785.06,688.396 1785.62,688.396 1786.18,688.396 1786.74,688.396 1787.3,688.396 1787.86,688.396 1788.42,688.396 1788.98,688.396 1789.53,688.396 1790.09,688.396 1790.65,688.396 1791.21,688.396 1791.77,688.396 1792.33,688.396 1792.89,688.396 1793.45,688.396 1794.01,688.396 1794.57,688.396 1795.13,688.396 1795.69,688.396 1796.25,688.396 1796.8,688.396 1797.36,688.396 1797.92,688.396 1798.48,688.396 1799.04,688.396 1799.6,688.396 1800.16,688.396 1800.72,688.396 1801.28,688.396 1801.84,688.396 1802.4,688.396 1802.96,688.396 1803.52,688.396 1804.08,688.396 1804.63,688.396 1805.19,688.396 1805.75,688.396 1806.31,688.396 1806.87,688.396 1807.43,688.396 1807.99,688.396 1808.55,688.396 1809.11,688.396 1809.67,688.396 1810.23,688.396 1810.79,688.396 1811.35,688.396 1811.9,688.396 1812.46,688.396 1813.02,688.396 1813.58,688.396 1814.14,688.396 1814.7,688.396 1815.26,688.396 1815.82,688.396 1816.38,688.396 1816.94,688.396 1817.5,688.396 1818.06,688.396 1818.62,688.396 1819.18,688.396 1819.73,688.396 1820.29,688.396 1820.85,688.396 1821.41,688.396 1821.97,688.396 1822.53,688.396 1823.09,688.396 1823.65,688.396 1824.21,688.396 1824.77,688.396 1825.33,688.396 1825.89,688.396 1826.45,688.396 1827,688.396 1827.56,688.396 1828.12,688.396 1828.68,688.396 1829.24,688.396 1829.8,688.396 1830.36,688.396 1830.92,688.396 1831.48,688.396 1832.04,688.396 1832.6,688.396 1833.16,688.396 1833.72,688.396 1834.27,688.396 1834.83,688.396 1835.39,688.396 1835.95,688.396 1836.51,688.396 1837.07,688.396 1837.63,688.396 1838.19,688.396 \"/>\n<path clip-path=\"url(#clip723)\" d=\"M720.247 685.424 L720.806 685.424 L721.365 685.424 L721.924 685.424 L722.484 685.424 L723.043 685.424 L723.602 685.424 L724.161 685.424 L724.721 685.424 L725.28 685.424 L725.839 685.424 L726.398 685.424 L726.958 685.424 L727.517 685.424 L728.076 685.424 L728.635 685.424 L729.195 685.424 L729.754 685.424 L730.313 685.424 L730.872 685.424 L731.432 685.424 L731.991 685.424 L732.55 685.424 L733.109 685.424 L733.669 685.424 L734.228 685.424 L734.787 685.424 L735.346 685.424 L735.906 685.424 L736.465 685.424 L737.024 685.424 L737.583 685.424 L738.143 685.424 L738.702 685.424 L739.261 685.424 L739.82 685.424 L740.38 685.424 L740.939 685.424 L741.498 685.424 L742.057 685.424 L742.617 685.424 L743.176 685.424 L743.735 685.424 L744.294 685.424 L744.854 685.424 L745.413 685.424 L745.972 685.424 L746.531 685.424 L747.091 685.424 L747.65 685.424 L748.209 685.424 L748.768 685.424 L749.328 685.424 L749.887 685.424 L750.446 685.424 L751.005 685.424 L751.565 685.424 L752.124 685.424 L752.683 685.424 L753.242 685.424 L753.802 685.424 L754.361 685.424 L754.92 685.424 L755.479 685.424 L756.039 685.424 L756.598 685.424 L757.157 685.424 L757.716 685.424 L758.276 685.424 L758.835 685.424 L759.394 685.424 L759.953 685.424 L760.513 685.424 L761.072 685.424 L761.631 685.424 L762.19 685.424 L762.75 685.424 L763.309 685.424 L763.868 685.424 L764.427 685.424 L764.987 685.424 L765.546 685.424 L766.105 685.424 L766.664 685.424 L767.224 685.424 L767.783 685.424 L768.342 685.424 L768.901 685.424 L769.461 685.424 L770.02 685.424 L770.579 685.424 L771.138 685.424 L771.698 685.424 L772.257 685.424 L772.816 685.424 L773.375 685.424 L773.935 685.424 L774.494 685.424 L775.053 685.424 L775.612 685.424 L776.172 685.424 L776.731 685.424 L777.29 685.424 L777.849 685.424 L778.409 685.424 L778.968 685.424 L779.527 685.424 L780.086 685.424 L780.646 685.424 L781.205 685.424 L781.764 685.424 L782.323 685.424 L782.883 685.424 L783.442 685.424 L784.001 685.424 L784.56 685.424 L785.12 685.424 L785.679 685.424 L786.238 685.424 L786.797 685.424 L787.357 685.424 L787.916 685.424 L788.475 685.424 L789.034 685.424 L789.594 685.424 L790.153 685.424 L790.712 685.424 L791.271 685.424 L791.831 685.424 L792.39 685.424 L792.949 685.424 L793.508 685.424 L794.068 685.424 L794.627 685.424 L795.186 685.424 L795.745 685.424 L796.305 685.424 L796.864 685.424 L797.423 685.424 L797.982 685.424 L798.542 685.424 L799.101 685.424 L799.66 685.424 L800.219 685.424 L800.779 685.424 L801.338 685.424 L801.897 685.424 L802.456 685.424 L803.016 685.424 L803.575 685.424 L804.134 685.424 L804.693 685.424 L805.253 685.424 L805.812 685.424 L806.371 685.424 L806.931 685.424 L807.49 685.424 L808.049 685.424 L808.608 685.424 L809.168 685.424 L809.727 685.424 L810.286 685.424 L810.845 685.424 L811.405 685.424 L811.964 685.424 L812.523 685.424 L813.082 685.424 L813.642 685.424 L814.201 685.424 L814.76 685.424 L815.319 685.424 L815.879 685.424 L816.438 685.424 L816.997 685.424 L817.556 685.424 L818.116 685.424 L818.675 685.424 L819.234 685.424 L819.793 685.424 L820.353 685.424 L820.912 685.424 L821.471 685.424 L822.03 685.424 L822.59 685.424 L823.149 685.424 L823.708 685.424 L824.267 685.424 L824.827 685.424 L825.386 685.424 L825.945 685.424 L826.504 685.424 L827.064 685.424 L827.623 685.424 L828.182 685.424 L828.741 685.424 L829.301 685.424 L829.86 685.424 L830.419 685.424 L830.978 685.424 L831.538 685.424 L832.097 685.424 L832.656 685.424 L833.215 685.424 L833.775 685.424 L834.334 685.424 L834.893 685.424 L835.452 685.424 L836.012 685.424 L836.571 685.424 L837.13 685.424 L837.689 685.424 L838.249 685.424 L838.808 685.424 L839.367 685.424 L839.926 685.424 L840.486 685.424 L841.045 685.424 L841.604 685.424 L842.163 685.424 L842.723 685.424 L843.282 685.424 L843.841 685.424 L844.4 685.424 L844.96 685.424 L845.519 685.424 L846.078 685.424 L846.637 685.424 L847.197 685.424 L847.756 685.424 L848.315 685.424 L848.874 685.424 L849.434 685.424 L849.993 685.424 L850.552 685.424 L851.111 685.424 L851.671 685.424 L852.23 685.424 L852.789 685.424 L853.348 685.424 L853.908 685.424 L854.467 685.424 L855.026 685.424 L855.585 685.424 L856.145 685.424 L856.704 685.424 L857.263 685.424 L857.822 685.424 L858.382 685.424 L858.941 685.424 L859.5 685.424 L860.059 685.424 L860.619 685.424 L861.178 685.424 L861.737 685.424 L862.296 685.424 L862.856 685.424 L863.415 685.424 L863.974 685.424 L864.533 685.424 L865.093 685.424 L865.652 685.424 L866.211 685.424 L866.77 685.424 L867.33 685.424 L867.889 685.424 L868.448 685.424 L869.007 685.424 L869.567 685.424 L870.126 685.424 L870.685 685.424 L871.244 685.424 L871.804 685.424 L872.363 685.424 L872.922 685.424 L873.481 685.424 L874.041 685.424 L874.6 685.424 L875.159 685.424 L875.718 685.424 L876.278 685.424 L876.837 685.424 L877.396 685.424 L877.955 685.424 L878.515 685.424 L879.074 685.424 L879.633 685.424 L880.192 685.424 L880.752 685.424 L881.311 685.424 L881.87 685.424 L882.429 685.424 L882.989 685.424 L883.548 685.424 L884.107 685.424 L884.666 685.424 L885.226 685.424 L885.785 685.424 L886.344 685.424 L886.903 685.424 L887.463 685.424 L888.022 685.424 L888.581 685.424 L889.14 685.424 L889.7 685.424 L890.259 685.424 L890.818 685.424 L891.377 685.424 L891.937 685.424 L892.496 685.424 L893.055 685.424 L893.614 685.424 L894.174 685.424 L894.733 685.424 L895.292 685.424 L895.851 685.424 L896.411 685.424 L896.97 685.424 L897.529 685.424 L898.088 685.424 L898.648 685.424 L899.207 685.424 L899.766 685.424 L900.325 685.424 L900.885 685.424 L901.444 685.424 L902.003 685.424 L902.562 685.424 L903.122 685.424 L903.681 685.424 L904.24 685.424 L904.799 685.424 L905.359 685.424 L905.918 685.424 L906.477 685.424 L907.036 685.424 L907.596 685.424 L908.155 685.424 L908.714 685.424 L909.273 685.424 L909.833 685.424 L910.392 685.424 L910.951 685.424 L911.51 685.424 L912.07 685.424 L912.629 685.424 L913.188 685.424 L913.747 685.424 L914.307 685.424 L914.866 685.424 L915.425 685.424 L915.984 685.424 L916.544 685.424 L917.103 685.424 L917.662 685.424 L918.221 685.424 L918.781 685.424 L919.34 685.424 L919.899 685.424 L920.458 685.424 L921.018 685.424 L921.577 685.424 L922.136 685.424 L922.695 685.424 L923.255 685.424 L923.814 685.424 L924.373 685.424 L924.932 685.424 L925.492 685.424 L926.051 685.424 L926.61 685.424 L927.169 685.424 L927.729 685.424 L928.288 685.424 L928.847 685.424 L929.406 685.424 L929.966 685.424 L930.525 685.424 L931.084 685.424 L931.644 685.424 L932.203 685.424 L932.762 685.424 L933.321 685.424 L933.881 685.424 L934.44 685.424 L934.999 685.424 L935.558 685.424 L936.118 685.424 L936.677 685.424 L937.236 685.424 L937.795 685.424 L938.355 685.424 L938.914 685.424 L939.473 685.424 L940.032 685.424 L940.592 685.424 L941.151 685.424 L941.71 685.424 L942.269 685.424 L942.829 685.424 L943.388 685.424 L943.947 685.424 L944.506 685.424 L945.066 685.424 L945.625 685.424 L946.184 685.424 L946.743 685.424 L947.303 685.424 L947.862 685.424 L948.421 685.424 L948.98 685.424 L949.54 685.424 L950.099 685.424 L950.658 685.424 L951.217 685.424 L951.777 685.424 L952.336 685.424 L952.895 685.424 L953.454 685.424 L954.014 685.424 L954.573 685.424 L955.132 685.424 L955.691 685.424 L956.251 685.424 L956.81 685.424 L957.369 685.424 L957.928 685.424 L958.488 685.424 L959.047 685.424 L959.606 685.424 L960.165 685.424 L960.725 685.424 L961.284 685.424 L961.843 685.424 L962.402 685.424 L962.962 685.424 L963.521 685.424 L964.08 685.424 L964.639 685.424 L965.199 685.424 L965.758 685.424 L966.317 685.424 L966.876 685.424 L967.436 685.424 L967.995 685.424 L968.554 685.424 L969.113 685.424 L969.673 685.424 L970.232 685.424 L970.791 685.424 L971.35 685.424 L971.91 685.424 L972.469 685.424 L973.028 685.424 L973.587 685.424 L974.147 685.424 L974.706 685.424 L975.265 685.424 L975.824 685.424 L976.384 685.424 L976.943 685.424 L977.502 685.424 L978.061 685.424 L978.621 685.424 L979.18 685.424 L979.739 685.424 L980.298 685.424 L980.858 685.424 L981.417 685.424 L981.976 685.424 L982.535 685.424 L983.095 685.424 L983.654 685.424 L984.213 685.424 L984.772 685.424 L985.332 685.424 L985.891 685.424 L986.45 685.424 L987.009 685.424 L987.569 685.424 L988.128 685.424 L988.687 685.424 L989.246 685.424 L989.806 685.424 L990.365 685.424 L990.924 685.424 L991.483 685.424 L992.043 685.424 L992.602 685.424 L993.161 685.424 L993.72 685.424 L994.28 685.424 L994.839 685.424 L995.398 685.424 L995.957 685.424 L996.517 685.424 L997.076 685.424 L997.635 685.424 L998.194 685.424 L998.754 685.424 L999.313 685.424 L999.872 685.424 L1000.43 685.424 L1000.99 685.424 L1001.55 685.424 L1002.11 685.424 L1002.67 685.424 L1003.23 685.424 L1003.79 685.424 L1004.35 685.424 L1004.91 685.424 L1005.46 685.424 L1006.02 685.424 L1006.58 685.424 L1007.14 685.424 L1007.7 685.424 L1008.26 685.424 L1008.82 685.424 L1009.38 685.424 L1009.94 685.424 L1010.5 685.424 L1011.06 685.424 L1011.62 685.424 L1012.18 685.424 L1012.73 685.424 L1013.29 685.424 L1013.85 685.424 L1014.41 685.424 L1014.97 685.424 L1015.53 685.424 L1016.09 685.424 L1016.65 685.424 L1017.21 685.424 L1017.77 685.424 L1018.33 685.424 L1018.89 685.424 L1019.45 685.424 L1020.01 685.424 L1020.56 685.424 L1021.12 685.424 L1021.68 685.424 L1022.24 685.424 L1022.8 685.424 L1023.36 685.424 L1023.92 685.424 L1024.48 685.424 L1025.04 685.424 L1025.6 685.424 L1026.16 685.424 L1026.72 685.424 L1027.28 685.424 L1027.83 685.424 L1028.39 685.424 L1028.95 685.424 L1029.51 685.424 L1030.07 685.424 L1030.63 685.424 L1031.19 685.424 L1031.75 685.424 L1032.31 685.424 L1032.87 685.424 L1033.43 685.424 L1033.99 685.424 L1034.55 685.424 L1035.1 685.424 L1035.66 685.424 L1036.22 685.424 L1036.78 685.424 L1037.34 685.424 L1037.9 685.424 L1038.46 685.424 L1039.02 685.424 L1039.58 685.424 L1040.14 685.424 L1040.7 685.424 L1041.26 685.424 L1041.82 685.424 L1042.38 685.424 L1042.93 685.424 L1043.49 685.424 L1044.05 685.424 L1044.61 685.424 L1045.17 685.424 L1045.73 685.424 L1046.29 685.424 L1046.85 685.424 L1047.41 685.424 L1047.97 685.424 L1048.53 685.424 L1049.09 685.424 L1049.65 685.424 L1050.2 685.424 L1050.76 685.424 L1051.32 685.424 L1051.88 685.424 L1052.44 685.424 L1053 685.424 L1053.56 685.424 L1054.12 685.424 L1054.68 685.424 L1055.24 685.424 L1055.8 685.424 L1056.36 685.424 L1056.92 685.424 L1057.48 685.424 L1058.03 685.424 L1058.59 685.424 L1059.15 685.424 L1059.71 685.424 L1060.27 685.424 L1060.83 685.424 L1061.39 685.424 L1061.95 685.424 L1062.51 685.424 L1063.07 685.424 L1063.63 685.424 L1064.19 685.424 L1064.75 685.424 L1065.3 685.424 L1065.86 685.424 L1066.42 685.424 L1066.98 685.424 L1067.54 685.424 L1068.1 685.424 L1068.66 685.424 L1069.22 685.424 L1069.78 685.424 L1070.34 685.424 L1070.9 685.424 L1071.46 685.424 L1072.02 685.424 L1072.57 685.424 L1073.13 685.424 L1073.69 685.424 L1074.25 685.424 L1074.81 685.424 L1075.37 685.424 L1075.93 685.424 L1076.49 685.424 L1077.05 685.424 L1077.61 685.424 L1078.17 685.424 L1078.73 685.424 L1079.29 685.424 L1079.85 685.424 L1080.4 685.424 L1080.96 685.424 L1081.52 685.424 L1082.08 685.424 L1082.64 685.424 L1083.2 685.424 L1083.76 685.424 L1084.32 685.424 L1084.88 685.424 L1085.44 685.424 L1086 685.424 L1086.56 685.424 L1087.12 685.424 L1087.67 685.424 L1088.23 685.424 L1088.79 685.424 L1089.35 685.424 L1089.91 685.424 L1090.47 685.424 L1091.03 685.424 L1091.59 685.424 L1092.15 685.424 L1092.71 685.424 L1093.27 685.424 L1093.83 685.424 L1094.39 685.424 L1094.94 685.424 L1095.5 685.424 L1096.06 685.424 L1096.62 685.424 L1097.18 685.424 L1097.74 685.424 L1098.3 685.424 L1098.86 685.424 L1099.42 685.424 L1099.98 685.424 L1100.54 685.424 L1101.1 685.424 L1101.66 685.424 L1102.22 685.424 L1102.77 685.424 L1103.33 685.424 L1103.89 685.424 L1104.45 685.424 L1105.01 685.424 L1105.57 685.424 L1106.13 685.424 L1106.69 685.424 L1107.25 685.424 L1107.81 685.424 L1108.37 685.424 L1108.93 685.424 L1109.49 685.424 L1110.04 685.424 L1110.6 685.424 L1111.16 685.424 L1111.72 685.424 L1112.28 685.424 L1112.84 685.424 L1113.4 685.424 L1113.96 685.424 L1114.52 685.424 L1115.08 685.424 L1115.64 685.424 L1116.2 685.424 L1116.76 685.424 L1117.31 685.424 L1117.87 685.424 L1118.43 685.424 L1118.99 685.424 L1119.55 685.424 L1120.11 685.424 L1120.67 685.424 L1121.23 685.424 L1121.79 685.424 L1122.35 685.424 L1122.91 685.424 L1123.47 685.424 L1124.03 685.424 L1124.59 685.424 L1125.14 685.424 L1125.7 685.424 L1126.26 685.424 L1126.82 685.424 L1127.38 685.424 L1127.94 685.424 L1128.5 685.424 L1129.06 685.424 L1129.62 685.424 L1130.18 685.424 L1130.74 685.424 L1131.3 685.424 L1131.86 685.424 L1132.41 685.424 L1132.97 685.424 L1133.53 685.424 L1134.09 685.424 L1134.65 685.424 L1135.21 685.424 L1135.77 685.424 L1136.33 685.424 L1136.89 685.424 L1137.45 685.424 L1138.01 685.424 L1138.57 685.424 L1139.13 685.424 L1139.68 685.424 L1140.24 685.424 L1140.8 685.424 L1141.36 685.424 L1141.92 685.424 L1142.48 685.424 L1143.04 685.424 L1143.6 685.424 L1144.16 685.424 L1144.72 685.424 L1145.28 685.424 L1145.84 685.424 L1146.4 685.424 L1146.96 685.424 L1147.51 685.424 L1148.07 685.424 L1148.63 685.424 L1149.19 685.424 L1149.75 685.424 L1150.31 685.424 L1150.87 685.424 L1151.43 685.424 L1151.99 685.424 L1152.55 685.424 L1153.11 685.424 L1153.67 685.424 L1154.23 685.424 L1154.78 685.424 L1155.34 685.424 L1155.9 685.424 L1156.46 685.424 L1157.02 685.424 L1157.58 685.424 L1158.14 685.424 L1158.7 685.424 L1159.26 685.424 L1159.82 685.424 L1160.38 685.424 L1160.94 685.424 L1161.5 685.424 L1162.05 685.424 L1162.61 685.424 L1163.17 685.424 L1163.73 685.424 L1164.29 685.424 L1164.85 685.424 L1165.41 685.424 L1165.97 685.424 L1166.53 685.424 L1167.09 685.424 L1167.65 685.424 L1168.21 685.424 L1168.77 685.424 L1169.33 685.424 L1169.88 685.424 L1170.44 685.424 L1171 685.424 L1171.56 685.424 L1172.12 685.424 L1172.68 685.424 L1173.24 685.424 L1173.8 685.424 L1174.36 685.424 L1174.92 685.424 L1175.48 685.424 L1176.04 685.424 L1176.6 685.424 L1177.15 685.424 L1177.71 685.424 L1178.27 685.424 L1178.83 685.424 L1179.39 685.424 L1179.95 685.424 L1180.51 685.424 L1181.07 685.424 L1181.63 685.424 L1182.19 685.424 L1182.75 685.424 L1183.31 685.424 L1183.87 685.424 L1184.43 685.424 L1184.98 685.424 L1185.54 685.424 L1186.1 685.424 L1186.66 685.424 L1187.22 685.424 L1187.78 685.424 L1188.34 685.424 L1188.9 685.424 L1189.46 685.424 L1190.02 685.424 L1190.58 685.424 L1191.14 685.424 L1191.7 685.424 L1192.25 685.424 L1192.81 685.424 L1193.37 685.424 L1193.93 685.424 L1194.49 685.424 L1195.05 685.424 L1195.61 685.424 L1196.17 685.424 L1196.73 685.424 L1197.29 685.424 L1197.85 685.424 L1198.41 685.424 L1198.97 685.424 L1199.52 685.424 L1200.08 685.424 L1200.64 685.424 L1201.2 685.424 L1201.76 685.424 L1202.32 685.424 L1202.88 685.424 L1203.44 685.424 L1204 685.424 L1204.56 685.424 L1205.12 685.424 L1205.68 685.424 L1206.24 685.424 L1206.8 685.424 L1207.35 685.424 L1207.91 685.424 L1208.47 685.424 L1209.03 685.424 L1209.59 685.424 L1210.15 685.424 L1210.71 685.424 L1211.27 685.424 L1211.83 685.424 L1212.39 685.424 L1212.95 685.424 L1213.51 685.424 L1214.07 685.424 L1214.62 685.424 L1215.18 685.424 L1215.74 685.424 L1216.3 685.424 L1216.86 685.424 L1217.42 685.424 L1217.98 685.424 L1218.54 685.424 L1219.1 685.424 L1219.66 685.424 L1220.22 685.424 L1220.78 685.424 L1221.34 685.424 L1221.89 685.424 L1222.45 685.424 L1223.01 685.424 L1223.57 685.424 L1224.13 685.424 L1224.69 685.424 L1225.25 685.424 L1225.81 685.424 L1226.37 685.424 L1226.93 685.424 L1227.49 685.424 L1228.05 685.424 L1228.61 685.424 L1229.17 685.424 L1229.72 685.424 L1230.28 685.424 L1230.84 685.424 L1231.4 685.424 L1231.96 685.424 L1232.52 685.424 L1233.08 685.424 L1233.64 685.424 L1234.2 685.424 L1234.76 685.424 L1235.32 685.424 L1235.88 685.424 L1236.44 685.424 L1236.99 685.424 L1237.55 685.424 L1238.11 685.424 L1238.67 685.424 L1239.23 685.424 L1239.79 685.424 L1240.35 685.424 L1240.91 685.424 L1241.47 685.424 L1242.03 685.424 L1242.59 685.424 L1243.15 685.424 L1243.71 685.424 L1244.26 685.424 L1244.82 685.424 L1245.38 685.424 L1245.94 685.424 L1246.5 685.424 L1247.06 685.424 L1247.62 685.424 L1248.18 685.424 L1248.74 685.424 L1249.3 685.424 L1249.86 685.424 L1250.42 685.424 L1250.98 685.424 L1251.54 685.424 L1252.09 685.424 L1252.65 685.424 L1253.21 685.424 L1253.77 685.424 L1254.33 685.424 L1254.89 685.424 L1255.45 685.424 L1256.01 685.424 L1256.57 685.424 L1257.13 685.424 L1257.69 685.424 L1258.25 685.424 L1258.81 685.424 L1259.36 685.424 L1259.92 685.424 L1260.48 685.424 L1261.04 685.424 L1261.6 685.424 L1262.16 685.424 L1262.72 685.424 L1263.28 685.424 L1263.84 685.424 L1264.4 685.424 L1264.96 685.424 L1265.52 685.424 L1266.08 685.424 L1266.63 685.424 L1267.19 685.424 L1267.75 685.424 L1268.31 685.424 L1268.87 685.424 L1269.43 685.424 L1269.99 685.424 L1270.55 685.424 L1271.11 685.424 L1271.67 685.424 L1272.23 685.424 L1272.79 685.424 L1273.35 685.424 L1273.91 685.424 L1274.46 685.424 L1275.02 685.424 L1275.58 685.424 L1276.14 685.424 L1276.7 685.424 L1277.26 685.424 L1277.82 685.424 L1278.38 685.424 L1278.94 685.424 L1279.5 685.424 L1280.06 685.424 L1280.62 685.424 L1281.18 685.424 L1281.73 685.424 L1282.29 685.424 L1282.85 685.424 L1283.41 685.424 L1283.97 685.424 L1284.53 685.424 L1285.09 685.424 L1285.65 685.424 L1286.21 685.424 L1286.77 685.424 L1287.33 685.424 L1287.89 685.424 L1288.45 685.424 L1289 685.424 L1289.56 685.424 L1290.12 685.424 L1290.68 685.424 L1291.24 685.424 L1291.8 685.424 L1292.36 685.424 L1292.92 685.424 L1293.48 685.424 L1294.04 685.424 L1294.6 685.424 L1295.16 685.424 L1295.72 685.424 L1296.28 685.424 L1296.83 685.424 L1297.39 685.424 L1297.95 685.424 L1298.51 685.424 L1299.07 685.424 L1299.63 685.424 L1300.19 685.424 L1300.75 685.424 L1301.31 685.424 L1301.87 685.424 L1302.43 685.424 L1302.99 685.424 L1303.55 685.424 L1304.1 685.424 L1304.66 685.424 L1305.22 685.424 L1305.78 685.424 L1306.34 685.424 L1306.9 685.424 L1307.46 685.424 L1308.02 685.424 L1308.58 685.424 L1309.14 685.424 L1309.7 685.424 L1310.26 685.424 L1310.82 685.424 L1311.38 685.424 L1311.93 685.424 L1312.49 685.424 L1313.05 685.424 L1313.61 685.424 L1314.17 685.424 L1314.73 685.424 L1315.29 685.424 L1315.85 685.424 L1316.41 685.424 L1316.97 685.424 L1317.53 685.424 L1318.09 685.424 L1318.65 685.424 L1319.2 685.424 L1319.76 685.424 L1320.32 685.424 L1320.88 685.424 L1321.44 685.424 L1322 685.424 L1322.56 685.424 L1323.12 685.424 L1323.68 685.424 L1324.24 685.424 L1324.8 685.424 L1325.36 685.424 L1325.92 685.424 L1326.47 685.424 L1327.03 685.424 L1327.59 685.424 L1328.15 685.424 L1328.71 685.424 L1329.27 685.424 L1329.83 685.424 L1330.39 685.424 L1330.95 685.424 L1331.51 685.424 L1332.07 685.424 L1332.63 685.424 L1333.19 685.424 L1333.75 685.424 L1334.3 685.424 L1334.86 685.424 L1335.42 685.424 L1335.98 685.424 L1336.54 685.424 L1337.1 685.424 L1337.66 685.424 L1338.22 685.424 L1338.78 685.424 L1339.34 685.424 L1339.9 685.424 L1340.46 685.424 L1341.02 685.424 L1341.57 685.424 L1342.13 685.424 L1342.69 685.424 L1343.25 685.424 L1343.81 685.424 L1344.37 685.424 L1344.93 685.424 L1345.49 685.424 L1346.05 685.424 L1346.61 685.424 L1347.17 685.424 L1347.73 685.424 L1348.29 685.424 L1348.84 685.424 L1349.4 685.424 L1349.96 685.424 L1350.52 685.424 L1351.08 685.424 L1351.64 685.424 L1352.2 685.424 L1352.76 685.424 L1353.32 685.424 L1353.88 685.424 L1354.44 685.424 L1355 685.424 L1355.56 685.424 L1356.12 685.424 L1356.67 685.424 L1357.23 685.424 L1357.79 685.424 L1358.35 685.424 L1358.91 685.424 L1359.47 685.424 L1360.03 685.424 L1360.59 685.424 L1361.15 685.424 L1361.71 685.424 L1362.27 685.424 L1362.83 685.424 L1363.39 685.424 L1363.94 685.424 L1364.5 685.424 L1365.06 685.424 L1365.62 685.424 L1366.18 685.424 L1366.74 685.424 L1367.3 685.424 L1367.86 685.424 L1368.42 685.424 L1368.98 685.424 L1369.54 685.424 L1370.1 685.424 L1370.66 685.424 L1371.21 685.424 L1371.77 685.424 L1372.33 685.424 L1372.89 685.424 L1373.45 685.424 L1374.01 685.424 L1374.57 685.424 L1375.13 685.424 L1375.69 685.424 L1376.25 685.424 L1376.81 685.424 L1377.37 685.424 L1377.93 685.424 L1378.49 685.424 L1379.04 685.424 L1379.6 685.424 L1380.16 685.424 L1380.72 685.424 L1381.28 685.424 L1381.84 685.424 L1382.4 685.424 L1382.96 685.424 L1383.52 685.424 L1384.08 685.424 L1384.64 685.424 L1385.2 685.424 L1385.76 685.424 L1386.31 685.424 L1386.87 685.424 L1387.43 685.424 L1387.99 685.424 L1388.55 685.424 L1389.11 685.424 L1389.67 685.424 L1390.23 685.424 L1390.79 685.424 L1391.35 685.424 L1391.91 685.424 L1392.47 685.424 L1393.03 685.424 L1393.58 685.424 L1394.14 685.424 L1394.7 685.424 L1395.26 685.424 L1395.82 685.424 L1396.38 685.424 L1396.94 685.424 L1397.5 685.424 L1398.06 685.424 L1398.62 685.424 L1399.18 685.424 L1399.74 685.424 L1400.3 685.424 L1400.86 685.424 L1401.41 685.424 L1401.97 685.424 L1402.53 685.424 L1403.09 685.424 L1403.65 685.424 L1404.21 685.424 L1404.77 685.424 L1405.33 685.424 L1405.89 685.424 L1406.45 685.424 L1407.01 685.424 L1407.57 685.424 L1408.13 685.424 L1408.68 685.424 L1409.24 685.424 L1409.8 685.424 L1410.36 685.424 L1410.92 685.424 L1411.48 685.424 L1412.04 685.424 L1412.6 685.424 L1413.16 685.424 L1413.72 685.424 L1414.28 685.424 L1414.84 685.424 L1415.4 685.424 L1415.95 685.424 L1416.51 685.424 L1417.07 685.424 L1417.63 685.424 L1418.19 685.424 L1418.75 685.424 L1419.31 685.424 L1419.87 685.424 L1420.43 685.424 L1420.99 685.424 L1421.55 685.424 L1422.11 685.424 L1422.67 685.424 L1423.23 685.424 L1423.78 685.424 L1424.34 685.424 L1424.9 685.424 L1425.46 685.424 L1426.02 685.424 L1426.58 685.424 L1427.14 685.424 L1427.7 685.424 L1428.26 685.424 L1428.82 685.424 L1429.38 685.424 L1429.94 685.424 L1430.5 685.424 L1431.05 685.424 L1431.61 685.424 L1432.17 685.424 L1432.73 685.424 L1433.29 685.424 L1433.85 685.424 L1434.41 685.424 L1434.97 685.424 L1435.53 685.424 L1436.09 685.424 L1436.65 685.424 L1437.21 685.424 L1437.77 685.424 L1438.33 685.424 L1438.88 685.424 L1439.44 685.424 L1440 685.424 L1440.56 685.424 L1441.12 685.424 L1441.68 685.424 L1442.24 685.424 L1442.8 685.424 L1443.36 685.424 L1443.92 685.424 L1444.48 685.424 L1445.04 685.424 L1445.6 685.424 L1446.15 685.424 L1446.71 685.424 L1447.27 685.424 L1447.83 685.424 L1448.39 685.424 L1448.95 685.424 L1449.51 685.424 L1450.07 685.424 L1450.63 685.424 L1451.19 685.424 L1451.75 685.424 L1452.31 685.424 L1452.87 685.424 L1453.42 685.424 L1453.98 685.424 L1454.54 685.424 L1455.1 685.424 L1455.66 685.424 L1456.22 685.424 L1456.78 685.424 L1457.34 685.424 L1457.9 685.424 L1458.46 685.424 L1459.02 685.424 L1459.58 685.424 L1460.14 685.424 L1460.7 685.424 L1461.25 685.424 L1461.81 685.424 L1462.37 685.424 L1462.93 685.424 L1463.49 685.424 L1464.05 685.424 L1464.61 685.424 L1465.17 685.424 L1465.73 685.424 L1466.29 685.424 L1466.85 685.424 L1467.41 685.424 L1467.97 685.424 L1468.52 685.424 L1469.08 685.424 L1469.64 685.424 L1470.2 685.424 L1470.76 685.424 L1471.32 685.424 L1471.88 685.424 L1472.44 685.424 L1473 685.424 L1473.56 685.424 L1474.12 685.424 L1474.68 685.424 L1475.24 685.424 L1475.79 685.424 L1476.35 685.424 L1476.91 685.424 L1477.47 685.424 L1478.03 685.424 L1478.59 685.424 L1479.15 685.424 L1479.71 685.424 L1480.27 685.424 L1480.83 685.424 L1481.39 685.424 L1481.95 685.424 L1482.51 685.424 L1483.07 685.424 L1483.62 685.424 L1484.18 685.424 L1484.74 685.424 L1485.3 685.424 L1485.86 685.424 L1486.42 685.424 L1486.98 685.424 L1487.54 685.424 L1488.1 685.424 L1488.66 685.424 L1489.22 685.424 L1489.78 685.424 L1490.34 685.424 L1490.89 685.424 L1491.45 685.424 L1492.01 685.424 L1492.57 685.424 L1493.13 685.424 L1493.69 685.424 L1494.25 685.424 L1494.81 685.424 L1495.37 685.424 L1495.93 685.424 L1496.49 685.424 L1497.05 685.424 L1497.61 685.424 L1498.16 685.424 L1498.72 685.424 L1499.28 685.424 L1499.84 685.424 L1500.4 685.424 L1500.96 685.424 L1501.52 685.424 L1502.08 685.424 L1502.64 685.424 L1503.2 685.424 L1503.76 685.424 L1504.32 685.424 L1504.88 685.424 L1505.44 685.424 L1505.99 685.424 L1506.55 685.424 L1507.11 685.424 L1507.67 685.424 L1508.23 685.424 L1508.79 685.424 L1509.35 685.424 L1509.91 685.424 L1510.47 685.424 L1511.03 685.424 L1511.59 685.424 L1512.15 685.424 L1512.71 685.424 L1513.26 685.424 L1513.82 685.424 L1514.38 685.424 L1514.94 685.424 L1515.5 685.424 L1516.06 685.424 L1516.62 685.424 L1517.18 685.424 L1517.74 685.424 L1518.3 685.424 L1518.86 685.424 L1519.42 685.424 L1519.98 685.424 L1520.53 685.424 L1521.09 685.424 L1521.65 685.424 L1522.21 685.424 L1522.77 685.424 L1523.33 685.424 L1523.89 685.424 L1524.45 685.424 L1525.01 685.424 L1525.57 685.424 L1526.13 685.424 L1526.69 685.424 L1527.25 685.424 L1527.81 685.424 L1528.36 685.424 L1528.92 685.424 L1529.48 685.424 L1530.04 685.424 L1530.6 685.424 L1531.16 685.424 L1531.72 685.424 L1532.28 685.424 L1532.84 685.424 L1533.4 685.424 L1533.96 685.424 L1534.52 685.424 L1535.08 685.424 L1535.63 685.424 L1536.19 685.424 L1536.75 685.424 L1537.31 685.424 L1537.87 685.424 L1538.43 685.424 L1538.99 685.424 L1539.55 685.424 L1540.11 685.424 L1540.67 685.424 L1541.23 685.424 L1541.79 685.424 L1542.35 685.424 L1542.9 685.424 L1543.46 685.424 L1544.02 685.424 L1544.58 685.424 L1545.14 685.424 L1545.7 685.424 L1546.26 685.424 L1546.82 685.424 L1547.38 685.424 L1547.94 685.424 L1548.5 685.424 L1549.06 685.424 L1549.62 685.424 L1550.18 685.424 L1550.73 685.424 L1551.29 685.424 L1551.85 685.424 L1552.41 685.424 L1552.97 685.424 L1553.53 685.424 L1554.09 685.424 L1554.65 685.424 L1555.21 685.424 L1555.77 685.424 L1556.33 685.424 L1556.89 685.424 L1557.45 685.424 L1558 685.424 L1558.56 685.424 L1559.12 685.424 L1559.68 685.424 L1560.24 685.424 L1560.8 685.424 L1561.36 685.424 L1561.92 685.424 L1562.48 685.424 L1563.04 685.424 L1563.6 685.424 L1564.16 685.424 L1564.72 685.424 L1565.28 685.424 L1565.83 685.424 L1566.39 685.424 L1566.95 685.424 L1567.51 685.424 L1568.07 685.424 L1568.63 685.424 L1569.19 685.424 L1569.75 685.424 L1570.31 685.424 L1570.87 685.424 L1571.43 685.424 L1571.99 685.424 L1572.55 685.424 L1573.1 685.424 L1573.66 685.424 L1574.22 685.424 L1574.78 685.424 L1575.34 685.424 L1575.9 685.424 L1576.46 685.424 L1577.02 685.424 L1577.58 685.424 L1578.14 685.424 L1578.7 685.424 L1579.26 685.424 L1579.82 685.424 L1580.37 685.424 L1580.93 685.424 L1581.49 685.424 L1582.05 685.424 L1582.61 685.424 L1583.17 685.424 L1583.73 685.424 L1584.29 685.424 L1584.85 685.424 L1585.41 685.424 L1585.97 685.424 L1586.53 685.424 L1587.09 685.424 L1587.65 685.424 L1588.2 685.424 L1588.76 685.424 L1589.32 685.424 L1589.88 685.424 L1590.44 685.424 L1591 685.424 L1591.56 685.424 L1592.12 685.424 L1592.68 685.424 L1593.24 685.424 L1593.8 685.424 L1594.36 685.424 L1594.92 685.424 L1595.47 685.424 L1596.03 685.424 L1596.59 685.424 L1597.15 685.424 L1597.71 685.424 L1598.27 685.424 L1598.83 685.424 L1599.39 685.424 L1599.95 685.424 L1600.51 685.424 L1601.07 685.424 L1601.63 685.424 L1602.19 685.424 L1602.74 685.424 L1603.3 685.424 L1603.86 685.424 L1604.42 685.424 L1604.98 685.424 L1605.54 685.424 L1606.1 685.424 L1606.66 685.424 L1607.22 685.424 L1607.78 685.424 L1608.34 685.424 L1608.9 685.424 L1609.46 685.424 L1610.02 685.424 L1610.57 685.424 L1611.13 685.424 L1611.69 685.424 L1612.25 685.424 L1612.81 685.424 L1613.37 685.424 L1613.93 685.424 L1614.49 685.424 L1615.05 685.424 L1615.61 685.424 L1616.17 685.424 L1616.73 685.424 L1617.29 685.424 L1617.84 685.424 L1618.4 685.424 L1618.96 685.424 L1619.52 685.424 L1620.08 685.424 L1620.64 685.424 L1621.2 685.424 L1621.76 685.424 L1622.32 685.424 L1622.88 685.424 L1623.44 685.424 L1624 685.424 L1624.56 685.424 L1625.11 685.424 L1625.67 685.424 L1626.23 685.424 L1626.79 685.424 L1627.35 685.424 L1627.91 685.424 L1628.47 685.424 L1629.03 685.424 L1629.59 685.424 L1630.15 685.424 L1630.71 685.424 L1631.27 685.424 L1631.83 685.424 L1632.39 685.424 L1632.94 685.424 L1633.5 685.424 L1634.06 685.424 L1634.62 685.424 L1635.18 685.424 L1635.74 685.424 L1636.3 685.424 L1636.86 685.424 L1637.42 685.424 L1637.98 685.424 L1638.54 685.424 L1639.1 685.424 L1639.66 685.424 L1640.21 685.424 L1640.77 685.424 L1641.33 685.424 L1641.89 685.424 L1642.45 685.424 L1643.01 685.424 L1643.57 685.424 L1644.13 685.424 L1644.69 685.424 L1645.25 685.424 L1645.81 685.424 L1646.37 685.424 L1646.93 685.424 L1647.48 685.424 L1648.04 685.424 L1648.6 685.424 L1649.16 685.424 L1649.72 685.424 L1650.28 685.424 L1650.84 685.424 L1651.4 685.424 L1651.96 685.424 L1652.52 685.424 L1653.08 685.424 L1653.64 685.424 L1654.2 685.424 L1654.76 685.424 L1655.31 685.424 L1655.87 685.424 L1656.43 685.424 L1656.99 685.424 L1657.55 685.424 L1658.11 685.424 L1658.67 685.424 L1659.23 685.424 L1659.79 685.424 L1660.35 685.424 L1660.91 685.424 L1661.47 685.424 L1662.03 685.424 L1662.58 685.424 L1663.14 685.424 L1663.7 685.424 L1664.26 685.424 L1664.82 685.424 L1665.38 685.424 L1665.94 685.424 L1666.5 685.424 L1667.06 685.424 L1667.62 685.424 L1668.18 685.424 L1668.74 685.424 L1669.3 685.424 L1669.85 685.424 L1670.41 685.424 L1670.97 685.424 L1671.53 685.424 L1672.09 685.424 L1672.65 685.424 L1673.21 685.424 L1673.77 685.424 L1674.33 685.424 L1674.89 685.424 L1675.45 685.424 L1676.01 685.424 L1676.57 685.424 L1677.13 685.424 L1677.68 685.424 L1678.24 685.424 L1678.8 685.424 L1679.36 685.424 L1679.92 685.424 L1680.48 685.424 L1681.04 685.424 L1681.6 685.424 L1682.16 685.424 L1682.72 685.424 L1683.28 685.424 L1683.84 685.424 L1684.4 685.424 L1684.95 685.424 L1685.51 685.424 L1686.07 685.424 L1686.63 685.424 L1687.19 685.424 L1687.75 685.424 L1688.31 685.424 L1688.87 685.424 L1689.43 685.424 L1689.99 685.424 L1690.55 685.424 L1691.11 685.424 L1691.67 685.424 L1692.23 685.424 L1692.78 685.424 L1693.34 685.424 L1693.9 685.424 L1694.46 685.424 L1695.02 685.424 L1695.58 685.424 L1696.14 685.424 L1696.7 685.424 L1697.26 685.424 L1697.82 685.424 L1698.38 685.424 L1698.94 685.424 L1699.5 685.424 L1700.05 685.424 L1700.61 685.424 L1701.17 685.424 L1701.73 685.424 L1702.29 685.424 L1702.85 685.424 L1703.41 685.424 L1703.97 685.424 L1704.53 685.424 L1705.09 685.424 L1705.65 685.424 L1706.21 685.424 L1706.77 685.424 L1707.32 685.424 L1707.88 685.424 L1708.44 685.424 L1709 685.424 L1709.56 685.424 L1710.12 685.424 L1710.68 685.424 L1711.24 685.424 L1711.8 685.424 L1712.36 685.424 L1712.92 685.424 L1713.48 685.424 L1714.04 685.424 L1714.6 685.424 L1715.15 685.424 L1715.71 685.424 L1716.27 685.424 L1716.83 685.424 L1717.39 685.424 L1717.95 685.424 L1718.51 685.424 L1719.07 685.424 L1719.63 685.424 L1720.19 685.424 L1720.75 685.424 L1721.31 685.424 L1721.87 685.424 L1722.42 685.424 L1722.98 685.424 L1723.54 685.424 L1724.1 685.424 L1724.66 685.424 L1725.22 685.424 L1725.78 685.424 L1726.34 685.424 L1726.9 685.424 L1727.46 685.424 L1728.02 685.424 L1728.58 685.424 L1729.14 685.424 L1729.69 685.424 L1730.25 685.424 L1730.81 685.424 L1731.37 685.424 L1731.93 685.424 L1732.49 685.424 L1733.05 685.424 L1733.61 685.424 L1734.17 685.424 L1734.73 685.424 L1735.29 685.424 L1735.85 685.424 L1736.41 685.424 L1736.97 685.424 L1737.52 685.424 L1738.08 685.424 L1738.64 685.424 L1739.2 685.424 L1739.76 685.424 L1740.32 685.424 L1740.88 685.424 L1741.44 685.424 L1742 685.424 L1742.56 685.424 L1743.12 685.424 L1743.68 685.424 L1744.24 685.424 L1744.79 685.424 L1745.35 685.424 L1745.91 685.424 L1746.47 685.424 L1747.03 685.424 L1747.59 685.424 L1748.15 685.424 L1748.71 685.424 L1749.27 685.424 L1749.83 685.424 L1750.39 685.424 L1750.95 685.424 L1751.51 685.424 L1752.06 685.424 L1752.62 685.424 L1753.18 685.424 L1753.74 685.424 L1754.3 685.424 L1754.86 685.424 L1755.42 685.424 L1755.98 685.424 L1756.54 685.424 L1757.1 685.424 L1757.66 685.424 L1758.22 685.424 L1758.78 685.424 L1759.34 685.424 L1759.89 685.424 L1760.45 685.424 L1761.01 685.424 L1761.57 685.424 L1762.13 685.424 L1762.69 685.424 L1763.25 685.424 L1763.81 685.424 L1764.37 685.424 L1764.93 685.424 L1765.49 685.424 L1766.05 685.424 L1766.61 685.424 L1767.16 685.424 L1767.72 685.424 L1768.28 685.424 L1768.84 685.424 L1769.4 685.424 L1769.96 685.424 L1770.52 685.424 L1771.08 685.424 L1771.64 685.424 L1772.2 685.424 L1772.76 685.424 L1773.32 685.424 L1773.88 685.424 L1774.43 685.424 L1774.99 685.424 L1775.55 685.424 L1776.11 685.424 L1776.67 685.424 L1777.23 685.424 L1777.79 685.424 L1778.35 685.424 L1778.91 685.424 L1779.47 685.424 L1780.03 685.424 L1780.59 685.424 L1781.15 685.424 L1781.71 685.424 L1782.26 685.424 L1782.82 685.424 L1783.38 685.424 L1783.94 685.424 L1784.5 685.424 L1785.06 685.424 L1785.62 685.424 L1786.18 685.424 L1786.74 685.424 L1787.3 685.424 L1787.86 685.424 L1788.42 685.424 L1788.98 685.424 L1789.53 685.424 L1790.09 685.424 L1790.65 685.424 L1791.21 685.424 L1791.77 685.424 L1792.33 685.424 L1792.89 685.424 L1793.45 685.424 L1794.01 685.424 L1794.57 685.424 L1795.13 685.424 L1795.69 685.424 L1796.25 685.424 L1796.8 685.424 L1797.36 685.424 L1797.92 685.424 L1798.48 685.424 L1799.04 685.424 L1799.6 685.424 L1800.16 685.424 L1800.72 685.424 L1801.28 685.424 L1801.84 685.424 L1802.4 685.424 L1802.96 685.424 L1803.52 685.424 L1804.08 685.424 L1804.63 685.424 L1805.19 685.424 L1805.75 685.424 L1806.31 685.424 L1806.87 685.424 L1807.43 685.424 L1807.99 685.424 L1808.55 685.424 L1809.11 685.424 L1809.67 685.424 L1810.23 685.424 L1810.79 685.424 L1811.35 685.424 L1811.9 685.424 L1812.46 685.424 L1813.02 685.424 L1813.58 685.424 L1814.14 685.424 L1814.7 685.424 L1815.26 685.424 L1815.82 685.424 L1816.38 685.424 L1816.94 685.424 L1817.5 685.424 L1818.06 685.424 L1818.62 685.424 L1819.18 685.424 L1819.73 685.424 L1820.29 685.424 L1820.85 685.424 L1821.41 685.424 L1821.97 685.424 L1822.53 685.424 L1823.09 685.424 L1823.65 685.424 L1824.21 685.424 L1824.77 685.424 L1825.33 685.424 L1825.89 685.424 L1826.45 685.424 L1827 685.424 L1827.56 685.424 L1828.12 685.424 L1828.68 685.424 L1829.24 685.424 L1829.8 685.424 L1830.36 685.424 L1830.92 685.424 L1831.48 685.424 L1832.04 685.424 L1832.6 685.424 L1833.16 685.424 L1833.72 685.424 L1834.27 685.424 L1834.83 685.424 L1835.39 685.424 L1835.95 685.424 L1836.51 685.424 L1837.07 685.424 L1837.63 685.424 L1838.19 685.424 L1838.19 683.134 L1837.63 683.134 L1837.07 683.134 L1836.51 683.134 L1835.95 683.134 L1835.39 683.134 L1834.83 683.134 L1834.27 683.134 L1833.72 683.134 L1833.16 683.134 L1832.6 683.134 L1832.04 683.134 L1831.48 683.134 L1830.92 683.134 L1830.36 683.134 L1829.8 683.134 L1829.24 683.134 L1828.68 683.134 L1828.12 683.134 L1827.56 683.134 L1827 683.134 L1826.45 683.134 L1825.89 683.134 L1825.33 683.134 L1824.77 683.134 L1824.21 683.134 L1823.65 683.134 L1823.09 683.134 L1822.53 683.134 L1821.97 683.134 L1821.41 683.134 L1820.85 683.134 L1820.29 683.134 L1819.73 683.134 L1819.18 683.134 L1818.62 683.134 L1818.06 683.134 L1817.5 683.134 L1816.94 683.134 L1816.38 683.134 L1815.82 683.134 L1815.26 683.134 L1814.7 683.134 L1814.14 683.134 L1813.58 683.134 L1813.02 683.134 L1812.46 683.134 L1811.9 683.134 L1811.35 683.134 L1810.79 683.134 L1810.23 683.134 L1809.67 683.134 L1809.11 683.134 L1808.55 683.134 L1807.99 683.134 L1807.43 683.134 L1806.87 683.134 L1806.31 683.134 L1805.75 683.134 L1805.19 683.134 L1804.63 683.134 L1804.08 683.134 L1803.52 683.134 L1802.96 683.134 L1802.4 683.134 L1801.84 683.134 L1801.28 683.134 L1800.72 683.134 L1800.16 683.134 L1799.6 683.134 L1799.04 683.134 L1798.48 683.134 L1797.92 683.134 L1797.36 683.134 L1796.8 683.134 L1796.25 683.134 L1795.69 683.134 L1795.13 683.134 L1794.57 683.134 L1794.01 683.134 L1793.45 683.134 L1792.89 683.134 L1792.33 683.134 L1791.77 683.134 L1791.21 683.134 L1790.65 683.134 L1790.09 683.134 L1789.53 683.134 L1788.98 683.134 L1788.42 683.134 L1787.86 683.134 L1787.3 683.134 L1786.74 683.134 L1786.18 683.134 L1785.62 683.134 L1785.06 683.134 L1784.5 683.134 L1783.94 683.134 L1783.38 683.134 L1782.82 683.134 L1782.26 683.134 L1781.71 683.134 L1781.15 683.134 L1780.59 683.134 L1780.03 683.134 L1779.47 683.134 L1778.91 683.134 L1778.35 683.134 L1777.79 683.134 L1777.23 683.134 L1776.67 683.134 L1776.11 683.134 L1775.55 683.134 L1774.99 683.134 L1774.43 683.134 L1773.88 683.134 L1773.32 683.134 L1772.76 683.134 L1772.2 683.134 L1771.64 683.134 L1771.08 683.134 L1770.52 683.134 L1769.96 683.134 L1769.4 683.134 L1768.84 683.134 L1768.28 683.134 L1767.72 683.134 L1767.16 683.134 L1766.61 683.134 L1766.05 683.134 L1765.49 683.134 L1764.93 683.134 L1764.37 683.134 L1763.81 683.134 L1763.25 683.134 L1762.69 683.134 L1762.13 683.134 L1761.57 683.134 L1761.01 683.134 L1760.45 683.134 L1759.89 683.134 L1759.34 683.134 L1758.78 683.134 L1758.22 683.134 L1757.66 683.134 L1757.1 683.134 L1756.54 683.134 L1755.98 683.134 L1755.42 683.134 L1754.86 683.134 L1754.3 683.134 L1753.74 683.134 L1753.18 683.134 L1752.62 683.134 L1752.06 683.134 L1751.51 683.134 L1750.95 683.134 L1750.39 683.134 L1749.83 683.134 L1749.27 683.134 L1748.71 683.134 L1748.15 683.134 L1747.59 683.134 L1747.03 683.134 L1746.47 683.134 L1745.91 683.134 L1745.35 683.134 L1744.79 683.134 L1744.24 683.134 L1743.68 683.134 L1743.12 683.134 L1742.56 683.134 L1742 683.134 L1741.44 683.134 L1740.88 683.134 L1740.32 683.134 L1739.76 683.134 L1739.2 683.134 L1738.64 683.134 L1738.08 683.134 L1737.52 683.134 L1736.97 683.134 L1736.41 683.134 L1735.85 683.134 L1735.29 683.134 L1734.73 683.134 L1734.17 683.134 L1733.61 683.134 L1733.05 683.134 L1732.49 683.134 L1731.93 683.134 L1731.37 683.134 L1730.81 683.134 L1730.25 683.134 L1729.69 683.134 L1729.14 683.134 L1728.58 683.134 L1728.02 683.134 L1727.46 683.134 L1726.9 683.134 L1726.34 683.134 L1725.78 683.134 L1725.22 683.134 L1724.66 683.134 L1724.1 683.134 L1723.54 683.134 L1722.98 683.134 L1722.42 683.134 L1721.87 683.134 L1721.31 683.134 L1720.75 683.134 L1720.19 683.134 L1719.63 683.134 L1719.07 683.134 L1718.51 683.134 L1717.95 683.134 L1717.39 683.134 L1716.83 683.134 L1716.27 683.134 L1715.71 683.134 L1715.15 683.134 L1714.6 683.134 L1714.04 683.134 L1713.48 683.134 L1712.92 683.134 L1712.36 683.134 L1711.8 683.134 L1711.24 683.134 L1710.68 683.134 L1710.12 683.134 L1709.56 683.134 L1709 683.134 L1708.44 683.134 L1707.88 683.134 L1707.32 683.134 L1706.77 683.134 L1706.21 683.134 L1705.65 683.134 L1705.09 683.134 L1704.53 683.134 L1703.97 683.134 L1703.41 683.134 L1702.85 683.134 L1702.29 683.134 L1701.73 683.134 L1701.17 683.134 L1700.61 683.134 L1700.05 683.134 L1699.5 683.134 L1698.94 683.134 L1698.38 683.134 L1697.82 683.134 L1697.26 683.134 L1696.7 683.134 L1696.14 683.134 L1695.58 683.134 L1695.02 683.134 L1694.46 683.134 L1693.9 683.134 L1693.34 683.134 L1692.78 683.134 L1692.23 683.134 L1691.67 683.134 L1691.11 683.134 L1690.55 683.134 L1689.99 683.134 L1689.43 683.134 L1688.87 683.134 L1688.31 683.134 L1687.75 683.134 L1687.19 683.134 L1686.63 683.134 L1686.07 683.134 L1685.51 683.134 L1684.95 683.134 L1684.4 683.134 L1683.84 683.134 L1683.28 683.134 L1682.72 683.134 L1682.16 683.134 L1681.6 683.134 L1681.04 683.134 L1680.48 683.134 L1679.92 683.134 L1679.36 683.134 L1678.8 683.134 L1678.24 683.134 L1677.68 683.134 L1677.13 683.134 L1676.57 683.134 L1676.01 683.134 L1675.45 683.134 L1674.89 683.134 L1674.33 683.134 L1673.77 683.134 L1673.21 683.134 L1672.65 683.134 L1672.09 683.134 L1671.53 683.134 L1670.97 683.134 L1670.41 683.134 L1669.85 683.134 L1669.3 683.134 L1668.74 683.134 L1668.18 683.134 L1667.62 683.134 L1667.06 683.134 L1666.5 683.134 L1665.94 683.134 L1665.38 683.134 L1664.82 683.134 L1664.26 683.134 L1663.7 683.134 L1663.14 683.134 L1662.58 683.134 L1662.03 683.134 L1661.47 683.134 L1660.91 683.134 L1660.35 683.134 L1659.79 683.134 L1659.23 683.134 L1658.67 683.134 L1658.11 683.134 L1657.55 683.134 L1656.99 683.134 L1656.43 683.134 L1655.87 683.134 L1655.31 683.134 L1654.76 683.134 L1654.2 683.134 L1653.64 683.134 L1653.08 683.134 L1652.52 683.134 L1651.96 683.134 L1651.4 683.134 L1650.84 683.134 L1650.28 683.134 L1649.72 683.134 L1649.16 683.134 L1648.6 683.134 L1648.04 683.134 L1647.48 683.134 L1646.93 683.134 L1646.37 683.134 L1645.81 683.134 L1645.25 683.134 L1644.69 683.134 L1644.13 683.134 L1643.57 683.134 L1643.01 683.134 L1642.45 683.134 L1641.89 683.134 L1641.33 683.134 L1640.77 683.134 L1640.21 683.134 L1639.66 683.134 L1639.1 683.134 L1638.54 683.134 L1637.98 683.134 L1637.42 683.134 L1636.86 683.134 L1636.3 683.134 L1635.74 683.134 L1635.18 683.134 L1634.62 683.134 L1634.06 683.134 L1633.5 683.134 L1632.94 683.134 L1632.39 683.134 L1631.83 683.134 L1631.27 683.134 L1630.71 683.134 L1630.15 683.134 L1629.59 683.134 L1629.03 683.134 L1628.47 683.134 L1627.91 683.134 L1627.35 683.134 L1626.79 683.134 L1626.23 683.134 L1625.67 683.134 L1625.11 683.134 L1624.56 683.134 L1624 683.134 L1623.44 683.134 L1622.88 683.134 L1622.32 683.134 L1621.76 683.134 L1621.2 683.134 L1620.64 683.134 L1620.08 683.134 L1619.52 683.134 L1618.96 683.134 L1618.4 683.134 L1617.84 683.134 L1617.29 683.134 L1616.73 683.134 L1616.17 683.134 L1615.61 683.134 L1615.05 683.134 L1614.49 683.134 L1613.93 683.134 L1613.37 683.134 L1612.81 683.134 L1612.25 683.134 L1611.69 683.134 L1611.13 683.134 L1610.57 683.134 L1610.02 683.134 L1609.46 683.134 L1608.9 683.134 L1608.34 683.134 L1607.78 683.134 L1607.22 683.134 L1606.66 683.134 L1606.1 683.134 L1605.54 683.134 L1604.98 683.134 L1604.42 683.134 L1603.86 683.134 L1603.3 683.134 L1602.74 683.134 L1602.19 683.134 L1601.63 683.134 L1601.07 683.134 L1600.51 683.134 L1599.95 683.134 L1599.39 683.134 L1598.83 683.134 L1598.27 683.134 L1597.71 683.134 L1597.15 683.134 L1596.59 683.134 L1596.03 683.134 L1595.47 683.134 L1594.92 683.134 L1594.36 683.134 L1593.8 683.134 L1593.24 683.134 L1592.68 683.134 L1592.12 683.134 L1591.56 683.134 L1591 683.134 L1590.44 683.134 L1589.88 683.134 L1589.32 683.134 L1588.76 683.134 L1588.2 683.134 L1587.65 683.134 L1587.09 683.134 L1586.53 683.134 L1585.97 683.134 L1585.41 683.134 L1584.85 683.134 L1584.29 683.134 L1583.73 683.134 L1583.17 683.134 L1582.61 683.134 L1582.05 683.134 L1581.49 683.134 L1580.93 683.134 L1580.37 683.134 L1579.82 683.134 L1579.26 683.134 L1578.7 683.134 L1578.14 683.134 L1577.58 683.134 L1577.02 683.134 L1576.46 683.134 L1575.9 683.134 L1575.34 683.134 L1574.78 683.134 L1574.22 683.134 L1573.66 683.134 L1573.1 683.134 L1572.55 683.134 L1571.99 683.134 L1571.43 683.134 L1570.87 683.134 L1570.31 683.134 L1569.75 683.134 L1569.19 683.134 L1568.63 683.134 L1568.07 683.134 L1567.51 683.134 L1566.95 683.134 L1566.39 683.134 L1565.83 683.134 L1565.28 683.134 L1564.72 683.134 L1564.16 683.134 L1563.6 683.134 L1563.04 683.134 L1562.48 683.134 L1561.92 683.134 L1561.36 683.134 L1560.8 683.134 L1560.24 683.134 L1559.68 683.134 L1559.12 683.134 L1558.56 683.134 L1558 683.134 L1557.45 683.134 L1556.89 683.134 L1556.33 683.134 L1555.77 683.134 L1555.21 683.134 L1554.65 683.134 L1554.09 683.134 L1553.53 683.134 L1552.97 683.134 L1552.41 683.134 L1551.85 683.134 L1551.29 683.134 L1550.73 683.134 L1550.18 683.134 L1549.62 683.134 L1549.06 683.134 L1548.5 683.134 L1547.94 683.134 L1547.38 683.134 L1546.82 683.134 L1546.26 683.134 L1545.7 683.134 L1545.14 683.134 L1544.58 683.134 L1544.02 683.134 L1543.46 683.134 L1542.9 683.134 L1542.35 683.134 L1541.79 683.134 L1541.23 683.134 L1540.67 683.134 L1540.11 683.134 L1539.55 683.134 L1538.99 683.134 L1538.43 683.134 L1537.87 683.134 L1537.31 683.134 L1536.75 683.134 L1536.19 683.134 L1535.63 683.134 L1535.08 683.134 L1534.52 683.134 L1533.96 683.134 L1533.4 683.134 L1532.84 683.134 L1532.28 683.134 L1531.72 683.134 L1531.16 683.134 L1530.6 683.134 L1530.04 683.134 L1529.48 683.134 L1528.92 683.134 L1528.36 683.134 L1527.81 683.134 L1527.25 683.134 L1526.69 683.134 L1526.13 683.134 L1525.57 683.134 L1525.01 683.134 L1524.45 683.134 L1523.89 683.134 L1523.33 683.134 L1522.77 683.134 L1522.21 683.134 L1521.65 683.134 L1521.09 683.134 L1520.53 683.134 L1519.98 683.134 L1519.42 683.134 L1518.86 683.134 L1518.3 683.134 L1517.74 683.134 L1517.18 683.134 L1516.62 683.134 L1516.06 683.134 L1515.5 683.134 L1514.94 683.134 L1514.38 683.134 L1513.82 683.134 L1513.26 683.134 L1512.71 683.134 L1512.15 683.134 L1511.59 683.134 L1511.03 683.134 L1510.47 683.134 L1509.91 683.134 L1509.35 683.134 L1508.79 683.134 L1508.23 683.134 L1507.67 683.134 L1507.11 683.134 L1506.55 683.134 L1505.99 683.134 L1505.44 683.134 L1504.88 683.134 L1504.32 683.134 L1503.76 683.134 L1503.2 683.134 L1502.64 683.134 L1502.08 683.134 L1501.52 683.134 L1500.96 683.134 L1500.4 683.134 L1499.84 683.134 L1499.28 683.134 L1498.72 683.134 L1498.16 683.134 L1497.61 683.134 L1497.05 683.134 L1496.49 683.134 L1495.93 683.134 L1495.37 683.134 L1494.81 683.134 L1494.25 683.134 L1493.69 683.134 L1493.13 683.134 L1492.57 683.134 L1492.01 683.134 L1491.45 683.134 L1490.89 683.134 L1490.34 683.134 L1489.78 683.134 L1489.22 683.134 L1488.66 683.134 L1488.1 683.134 L1487.54 683.134 L1486.98 683.134 L1486.42 683.134 L1485.86 683.134 L1485.3 683.134 L1484.74 683.134 L1484.18 683.134 L1483.62 683.134 L1483.07 683.134 L1482.51 683.134 L1481.95 683.134 L1481.39 683.134 L1480.83 683.134 L1480.27 683.134 L1479.71 683.134 L1479.15 683.134 L1478.59 683.134 L1478.03 683.134 L1477.47 683.134 L1476.91 683.134 L1476.35 683.134 L1475.79 683.134 L1475.24 683.134 L1474.68 683.134 L1474.12 683.134 L1473.56 683.134 L1473 683.134 L1472.44 683.134 L1471.88 683.134 L1471.32 683.134 L1470.76 683.134 L1470.2 683.134 L1469.64 683.134 L1469.08 683.134 L1468.52 683.134 L1467.97 683.134 L1467.41 683.134 L1466.85 683.134 L1466.29 683.134 L1465.73 683.134 L1465.17 683.134 L1464.61 683.134 L1464.05 683.134 L1463.49 683.134 L1462.93 683.134 L1462.37 683.134 L1461.81 683.134 L1461.25 683.134 L1460.7 683.134 L1460.14 683.134 L1459.58 683.134 L1459.02 683.134 L1458.46 683.134 L1457.9 683.134 L1457.34 683.134 L1456.78 683.134 L1456.22 683.134 L1455.66 683.134 L1455.1 683.134 L1454.54 683.134 L1453.98 683.134 L1453.42 683.134 L1452.87 683.134 L1452.31 683.134 L1451.75 683.134 L1451.19 683.134 L1450.63 683.134 L1450.07 683.134 L1449.51 683.134 L1448.95 683.134 L1448.39 683.134 L1447.83 683.134 L1447.27 683.134 L1446.71 683.134 L1446.15 683.134 L1445.6 683.134 L1445.04 683.134 L1444.48 683.134 L1443.92 683.134 L1443.36 683.134 L1442.8 683.134 L1442.24 683.134 L1441.68 683.134 L1441.12 683.134 L1440.56 683.134 L1440 683.134 L1439.44 683.134 L1438.88 683.134 L1438.33 683.134 L1437.77 683.134 L1437.21 683.134 L1436.65 683.134 L1436.09 683.134 L1435.53 683.134 L1434.97 683.134 L1434.41 683.134 L1433.85 683.134 L1433.29 683.134 L1432.73 683.134 L1432.17 683.134 L1431.61 683.134 L1431.05 683.134 L1430.5 683.134 L1429.94 683.134 L1429.38 683.134 L1428.82 683.134 L1428.26 683.134 L1427.7 683.134 L1427.14 683.134 L1426.58 683.134 L1426.02 683.134 L1425.46 683.134 L1424.9 683.134 L1424.34 683.134 L1423.78 683.134 L1423.23 683.134 L1422.67 683.134 L1422.11 683.134 L1421.55 683.134 L1420.99 683.134 L1420.43 683.134 L1419.87 683.134 L1419.31 683.134 L1418.75 683.134 L1418.19 683.134 L1417.63 683.134 L1417.07 683.134 L1416.51 683.134 L1415.95 683.134 L1415.4 683.134 L1414.84 683.134 L1414.28 683.134 L1413.72 683.134 L1413.16 683.134 L1412.6 683.134 L1412.04 683.134 L1411.48 683.134 L1410.92 683.134 L1410.36 683.134 L1409.8 683.134 L1409.24 683.134 L1408.68 683.134 L1408.13 683.134 L1407.57 683.134 L1407.01 683.134 L1406.45 683.134 L1405.89 683.134 L1405.33 683.134 L1404.77 683.134 L1404.21 683.134 L1403.65 683.134 L1403.09 683.134 L1402.53 683.134 L1401.97 683.134 L1401.41 683.134 L1400.86 683.134 L1400.3 683.134 L1399.74 683.134 L1399.18 683.134 L1398.62 683.134 L1398.06 683.134 L1397.5 683.134 L1396.94 683.134 L1396.38 683.134 L1395.82 683.134 L1395.26 683.134 L1394.7 683.134 L1394.14 683.134 L1393.58 683.134 L1393.03 683.134 L1392.47 683.134 L1391.91 683.134 L1391.35 683.134 L1390.79 683.134 L1390.23 683.134 L1389.67 683.134 L1389.11 683.134 L1388.55 683.134 L1387.99 683.134 L1387.43 683.134 L1386.87 683.134 L1386.31 683.134 L1385.76 683.134 L1385.2 683.134 L1384.64 683.134 L1384.08 683.134 L1383.52 683.134 L1382.96 683.134 L1382.4 683.134 L1381.84 683.134 L1381.28 683.134 L1380.72 683.134 L1380.16 683.134 L1379.6 683.134 L1379.04 683.134 L1378.49 683.134 L1377.93 683.134 L1377.37 683.134 L1376.81 683.134 L1376.25 683.134 L1375.69 683.134 L1375.13 683.134 L1374.57 683.134 L1374.01 683.134 L1373.45 683.134 L1372.89 683.134 L1372.33 683.134 L1371.77 683.134 L1371.21 683.134 L1370.66 683.134 L1370.1 683.134 L1369.54 683.134 L1368.98 683.134 L1368.42 683.134 L1367.86 683.134 L1367.3 683.134 L1366.74 683.134 L1366.18 683.134 L1365.62 683.134 L1365.06 683.134 L1364.5 683.134 L1363.94 683.134 L1363.39 683.134 L1362.83 683.134 L1362.27 683.134 L1361.71 683.134 L1361.15 683.134 L1360.59 683.134 L1360.03 683.134 L1359.47 683.134 L1358.91 683.134 L1358.35 683.134 L1357.79 683.134 L1357.23 683.134 L1356.67 683.134 L1356.12 683.134 L1355.56 683.134 L1355 683.134 L1354.44 683.134 L1353.88 683.134 L1353.32 683.134 L1352.76 683.134 L1352.2 683.134 L1351.64 683.134 L1351.08 683.134 L1350.52 683.134 L1349.96 683.134 L1349.4 683.134 L1348.84 683.134 L1348.29 683.134 L1347.73 683.134 L1347.17 683.134 L1346.61 683.134 L1346.05 683.134 L1345.49 683.134 L1344.93 683.134 L1344.37 683.134 L1343.81 683.134 L1343.25 683.134 L1342.69 683.134 L1342.13 683.134 L1341.57 683.134 L1341.02 683.134 L1340.46 683.134 L1339.9 683.134 L1339.34 683.134 L1338.78 683.134 L1338.22 683.134 L1337.66 683.134 L1337.1 683.134 L1336.54 683.134 L1335.98 683.134 L1335.42 683.134 L1334.86 683.134 L1334.3 683.134 L1333.75 683.134 L1333.19 683.134 L1332.63 683.134 L1332.07 683.134 L1331.51 683.134 L1330.95 683.134 L1330.39 683.134 L1329.83 683.134 L1329.27 683.134 L1328.71 683.134 L1328.15 683.134 L1327.59 683.134 L1327.03 683.134 L1326.47 683.134 L1325.92 683.134 L1325.36 683.134 L1324.8 683.134 L1324.24 683.134 L1323.68 683.134 L1323.12 683.134 L1322.56 683.134 L1322 683.134 L1321.44 683.134 L1320.88 683.134 L1320.32 683.134 L1319.76 683.134 L1319.2 683.134 L1318.65 683.134 L1318.09 683.134 L1317.53 683.134 L1316.97 683.134 L1316.41 683.134 L1315.85 683.134 L1315.29 683.134 L1314.73 683.134 L1314.17 683.134 L1313.61 683.134 L1313.05 683.134 L1312.49 683.134 L1311.93 683.134 L1311.38 683.134 L1310.82 683.134 L1310.26 683.134 L1309.7 683.134 L1309.14 683.134 L1308.58 683.134 L1308.02 683.134 L1307.46 683.134 L1306.9 683.134 L1306.34 683.134 L1305.78 683.134 L1305.22 683.134 L1304.66 683.134 L1304.1 683.134 L1303.55 683.134 L1302.99 683.134 L1302.43 683.134 L1301.87 683.134 L1301.31 683.134 L1300.75 683.134 L1300.19 683.134 L1299.63 683.134 L1299.07 683.134 L1298.51 683.134 L1297.95 683.134 L1297.39 683.134 L1296.83 683.134 L1296.28 683.134 L1295.72 683.134 L1295.16 683.134 L1294.6 683.134 L1294.04 683.134 L1293.48 683.134 L1292.92 683.134 L1292.36 683.134 L1291.8 683.134 L1291.24 683.134 L1290.68 683.134 L1290.12 683.134 L1289.56 683.134 L1289 683.134 L1288.45 683.134 L1287.89 683.134 L1287.33 683.134 L1286.77 683.134 L1286.21 683.134 L1285.65 683.134 L1285.09 683.134 L1284.53 683.134 L1283.97 683.134 L1283.41 683.134 L1282.85 683.134 L1282.29 683.134 L1281.73 683.134 L1281.18 683.134 L1280.62 683.134 L1280.06 683.134 L1279.5 683.134 L1278.94 683.134 L1278.38 683.134 L1277.82 683.134 L1277.26 683.134 L1276.7 683.134 L1276.14 683.134 L1275.58 683.134 L1275.02 683.134 L1274.46 683.134 L1273.91 683.134 L1273.35 683.134 L1272.79 683.134 L1272.23 683.134 L1271.67 683.134 L1271.11 683.134 L1270.55 683.134 L1269.99 683.134 L1269.43 683.134 L1268.87 683.134 L1268.31 683.134 L1267.75 683.134 L1267.19 683.134 L1266.63 683.134 L1266.08 683.134 L1265.52 683.134 L1264.96 683.134 L1264.4 683.134 L1263.84 683.134 L1263.28 683.134 L1262.72 683.134 L1262.16 683.134 L1261.6 683.134 L1261.04 683.134 L1260.48 683.134 L1259.92 683.134 L1259.36 683.134 L1258.81 683.134 L1258.25 683.134 L1257.69 683.134 L1257.13 683.134 L1256.57 683.134 L1256.01 683.134 L1255.45 683.134 L1254.89 683.134 L1254.33 683.134 L1253.77 683.134 L1253.21 683.134 L1252.65 683.134 L1252.09 683.134 L1251.54 683.134 L1250.98 683.134 L1250.42 683.134 L1249.86 683.134 L1249.3 683.134 L1248.74 683.134 L1248.18 683.134 L1247.62 683.134 L1247.06 683.134 L1246.5 683.134 L1245.94 683.134 L1245.38 683.134 L1244.82 683.134 L1244.26 683.134 L1243.71 683.134 L1243.15 683.134 L1242.59 683.134 L1242.03 683.134 L1241.47 683.134 L1240.91 683.134 L1240.35 683.134 L1239.79 683.134 L1239.23 683.134 L1238.67 683.134 L1238.11 683.134 L1237.55 683.134 L1236.99 683.134 L1236.44 683.134 L1235.88 683.134 L1235.32 683.134 L1234.76 683.134 L1234.2 683.134 L1233.64 683.134 L1233.08 683.134 L1232.52 683.134 L1231.96 683.134 L1231.4 683.134 L1230.84 683.134 L1230.28 683.134 L1229.72 683.134 L1229.17 683.134 L1228.61 683.134 L1228.05 683.134 L1227.49 683.134 L1226.93 683.134 L1226.37 683.134 L1225.81 683.134 L1225.25 683.134 L1224.69 683.134 L1224.13 683.134 L1223.57 683.134 L1223.01 683.134 L1222.45 683.134 L1221.89 683.134 L1221.34 683.134 L1220.78 683.134 L1220.22 683.134 L1219.66 683.134 L1219.1 683.134 L1218.54 683.134 L1217.98 683.134 L1217.42 683.134 L1216.86 683.134 L1216.3 683.134 L1215.74 683.134 L1215.18 683.134 L1214.62 683.134 L1214.07 683.134 L1213.51 683.134 L1212.95 683.134 L1212.39 683.134 L1211.83 683.134 L1211.27 683.134 L1210.71 683.134 L1210.15 683.134 L1209.59 683.134 L1209.03 683.134 L1208.47 683.134 L1207.91 683.134 L1207.35 683.134 L1206.8 683.134 L1206.24 683.134 L1205.68 683.134 L1205.12 683.134 L1204.56 683.134 L1204 683.134 L1203.44 683.134 L1202.88 683.134 L1202.32 683.134 L1201.76 683.134 L1201.2 683.134 L1200.64 683.134 L1200.08 683.134 L1199.52 683.134 L1198.97 683.134 L1198.41 683.134 L1197.85 683.134 L1197.29 683.134 L1196.73 683.134 L1196.17 683.134 L1195.61 683.134 L1195.05 683.134 L1194.49 683.134 L1193.93 683.134 L1193.37 683.134 L1192.81 683.134 L1192.25 683.134 L1191.7 683.134 L1191.14 683.134 L1190.58 683.134 L1190.02 683.134 L1189.46 683.134 L1188.9 683.134 L1188.34 683.134 L1187.78 683.134 L1187.22 683.134 L1186.66 683.134 L1186.1 683.134 L1185.54 683.134 L1184.98 683.134 L1184.43 683.134 L1183.87 683.134 L1183.31 683.134 L1182.75 683.134 L1182.19 683.134 L1181.63 683.134 L1181.07 683.134 L1180.51 683.134 L1179.95 683.134 L1179.39 683.134 L1178.83 683.134 L1178.27 683.134 L1177.71 683.134 L1177.15 683.134 L1176.6 683.134 L1176.04 683.134 L1175.48 683.134 L1174.92 683.134 L1174.36 683.134 L1173.8 683.134 L1173.24 683.134 L1172.68 683.134 L1172.12 683.134 L1171.56 683.134 L1171 683.134 L1170.44 683.134 L1169.88 683.134 L1169.33 683.134 L1168.77 683.134 L1168.21 683.134 L1167.65 683.134 L1167.09 683.134 L1166.53 683.134 L1165.97 683.134 L1165.41 683.134 L1164.85 683.134 L1164.29 683.134 L1163.73 683.134 L1163.17 683.134 L1162.61 683.134 L1162.05 683.134 L1161.5 683.134 L1160.94 683.134 L1160.38 683.134 L1159.82 683.134 L1159.26 683.134 L1158.7 683.134 L1158.14 683.134 L1157.58 683.134 L1157.02 683.134 L1156.46 683.134 L1155.9 683.134 L1155.34 683.134 L1154.78 683.134 L1154.23 683.134 L1153.67 683.134 L1153.11 683.134 L1152.55 683.134 L1151.99 683.134 L1151.43 683.134 L1150.87 683.134 L1150.31 683.134 L1149.75 683.134 L1149.19 683.134 L1148.63 683.134 L1148.07 683.134 L1147.51 683.134 L1146.96 683.134 L1146.4 683.134 L1145.84 683.134 L1145.28 683.134 L1144.72 683.134 L1144.16 683.134 L1143.6 683.134 L1143.04 683.134 L1142.48 683.134 L1141.92 683.134 L1141.36 683.134 L1140.8 683.134 L1140.24 683.134 L1139.68 683.134 L1139.13 683.134 L1138.57 683.134 L1138.01 683.134 L1137.45 683.134 L1136.89 683.134 L1136.33 683.134 L1135.77 683.134 L1135.21 683.134 L1134.65 683.134 L1134.09 683.134 L1133.53 683.134 L1132.97 683.134 L1132.41 683.134 L1131.86 683.134 L1131.3 683.134 L1130.74 683.134 L1130.18 683.134 L1129.62 683.134 L1129.06 683.134 L1128.5 683.134 L1127.94 683.134 L1127.38 683.134 L1126.82 683.134 L1126.26 683.134 L1125.7 683.134 L1125.14 683.134 L1124.59 683.134 L1124.03 683.134 L1123.47 683.134 L1122.91 683.134 L1122.35 683.134 L1121.79 683.134 L1121.23 683.134 L1120.67 683.134 L1120.11 683.134 L1119.55 683.134 L1118.99 683.134 L1118.43 683.134 L1117.87 683.134 L1117.31 683.134 L1116.76 683.134 L1116.2 683.134 L1115.64 683.134 L1115.08 683.134 L1114.52 683.134 L1113.96 683.134 L1113.4 683.134 L1112.84 683.134 L1112.28 683.134 L1111.72 683.134 L1111.16 683.134 L1110.6 683.134 L1110.04 683.134 L1109.49 683.134 L1108.93 683.134 L1108.37 683.134 L1107.81 683.134 L1107.25 683.134 L1106.69 683.134 L1106.13 683.134 L1105.57 683.134 L1105.01 683.134 L1104.45 683.134 L1103.89 683.134 L1103.33 683.134 L1102.77 683.134 L1102.22 683.134 L1101.66 683.134 L1101.1 683.134 L1100.54 683.134 L1099.98 683.134 L1099.42 683.134 L1098.86 683.134 L1098.3 683.134 L1097.74 683.134 L1097.18 683.134 L1096.62 683.134 L1096.06 683.134 L1095.5 683.134 L1094.94 683.134 L1094.39 683.134 L1093.83 683.134 L1093.27 683.134 L1092.71 683.134 L1092.15 683.134 L1091.59 683.134 L1091.03 683.134 L1090.47 683.134 L1089.91 683.134 L1089.35 683.134 L1088.79 683.134 L1088.23 683.134 L1087.67 683.134 L1087.12 683.134 L1086.56 683.134 L1086 683.134 L1085.44 683.134 L1084.88 683.134 L1084.32 683.134 L1083.76 683.134 L1083.2 683.134 L1082.64 683.134 L1082.08 683.134 L1081.52 683.134 L1080.96 683.134 L1080.4 683.134 L1079.85 683.134 L1079.29 683.134 L1078.73 683.134 L1078.17 683.134 L1077.61 683.134 L1077.05 683.134 L1076.49 683.134 L1075.93 683.134 L1075.37 683.134 L1074.81 683.134 L1074.25 683.134 L1073.69 683.134 L1073.13 683.134 L1072.57 683.134 L1072.02 683.134 L1071.46 683.134 L1070.9 683.134 L1070.34 683.134 L1069.78 683.134 L1069.22 683.134 L1068.66 683.134 L1068.1 683.134 L1067.54 683.134 L1066.98 683.134 L1066.42 683.134 L1065.86 683.134 L1065.3 683.134 L1064.75 683.134 L1064.19 683.134 L1063.63 683.134 L1063.07 683.134 L1062.51 683.134 L1061.95 683.134 L1061.39 683.134 L1060.83 683.134 L1060.27 683.134 L1059.71 683.134 L1059.15 683.134 L1058.59 683.134 L1058.03 683.134 L1057.48 683.134 L1056.92 683.134 L1056.36 683.134 L1055.8 683.134 L1055.24 683.134 L1054.68 683.134 L1054.12 683.134 L1053.56 683.134 L1053 683.134 L1052.44 683.134 L1051.88 683.134 L1051.32 683.134 L1050.76 683.134 L1050.2 683.134 L1049.65 683.134 L1049.09 683.134 L1048.53 683.134 L1047.97 683.134 L1047.41 683.134 L1046.85 683.134 L1046.29 683.134 L1045.73 683.134 L1045.17 683.134 L1044.61 683.134 L1044.05 683.134 L1043.49 683.134 L1042.93 683.134 L1042.38 683.134 L1041.82 683.134 L1041.26 683.134 L1040.7 683.134 L1040.14 683.134 L1039.58 683.134 L1039.02 683.134 L1038.46 683.134 L1037.9 683.134 L1037.34 683.134 L1036.78 683.134 L1036.22 683.134 L1035.66 683.134 L1035.1 683.134 L1034.55 683.134 L1033.99 683.134 L1033.43 683.134 L1032.87 683.134 L1032.31 683.134 L1031.75 683.134 L1031.19 683.134 L1030.63 683.134 L1030.07 683.134 L1029.51 683.134 L1028.95 683.134 L1028.39 683.134 L1027.83 683.134 L1027.28 683.134 L1026.72 683.134 L1026.16 683.134 L1025.6 683.134 L1025.04 683.134 L1024.48 683.134 L1023.92 683.134 L1023.36 683.134 L1022.8 683.134 L1022.24 683.134 L1021.68 683.134 L1021.12 683.134 L1020.56 683.134 L1020.01 683.134 L1019.45 683.134 L1018.89 683.134 L1018.33 683.134 L1017.77 683.134 L1017.21 683.134 L1016.65 683.134 L1016.09 683.134 L1015.53 683.134 L1014.97 683.134 L1014.41 683.134 L1013.85 683.134 L1013.29 683.134 L1012.73 683.134 L1012.18 683.134 L1011.62 683.134 L1011.06 683.134 L1010.5 683.134 L1009.94 683.134 L1009.38 683.134 L1008.82 683.134 L1008.26 683.134 L1007.7 683.134 L1007.14 683.134 L1006.58 683.134 L1006.02 683.134 L1005.46 683.134 L1004.91 683.134 L1004.35 683.134 L1003.79 683.134 L1003.23 683.134 L1002.67 683.134 L1002.11 683.134 L1001.55 683.134 L1000.99 683.134 L1000.43 683.134 L999.872 683.134 L999.313 683.134 L998.754 683.134 L998.194 683.134 L997.635 683.134 L997.076 683.134 L996.517 683.134 L995.957 683.134 L995.398 683.134 L994.839 683.134 L994.28 683.134 L993.72 683.134 L993.161 683.134 L992.602 683.134 L992.043 683.134 L991.483 683.134 L990.924 683.134 L990.365 683.134 L989.806 683.134 L989.246 683.134 L988.687 683.134 L988.128 683.134 L987.569 683.134 L987.009 683.134 L986.45 683.134 L985.891 683.134 L985.332 683.134 L984.772 683.134 L984.213 683.134 L983.654 683.134 L983.095 683.134 L982.535 683.134 L981.976 683.134 L981.417 683.134 L980.858 683.134 L980.298 683.134 L979.739 683.134 L979.18 683.134 L978.621 683.134 L978.061 683.134 L977.502 683.134 L976.943 683.134 L976.384 683.134 L975.824 683.134 L975.265 683.134 L974.706 683.134 L974.147 683.134 L973.587 683.134 L973.028 683.134 L972.469 683.134 L971.91 683.134 L971.35 683.134 L970.791 683.134 L970.232 683.134 L969.673 683.134 L969.113 683.134 L968.554 683.134 L967.995 683.134 L967.436 683.134 L966.876 683.134 L966.317 683.134 L965.758 683.134 L965.199 683.134 L964.639 683.134 L964.08 683.134 L963.521 683.134 L962.962 683.134 L962.402 683.134 L961.843 683.134 L961.284 683.134 L960.725 683.134 L960.165 683.134 L959.606 683.134 L959.047 683.134 L958.488 683.134 L957.928 683.134 L957.369 683.134 L956.81 683.134 L956.251 683.134 L955.691 683.134 L955.132 683.134 L954.573 683.134 L954.014 683.134 L953.454 683.134 L952.895 683.134 L952.336 683.134 L951.777 683.134 L951.217 683.134 L950.658 683.134 L950.099 683.134 L949.54 683.134 L948.98 683.134 L948.421 683.134 L947.862 683.134 L947.303 683.134 L946.743 683.134 L946.184 683.134 L945.625 683.134 L945.066 683.134 L944.506 683.134 L943.947 683.134 L943.388 683.134 L942.829 683.134 L942.269 683.134 L941.71 683.134 L941.151 683.134 L940.592 683.134 L940.032 683.134 L939.473 683.134 L938.914 683.134 L938.355 683.134 L937.795 683.134 L937.236 683.134 L936.677 683.134 L936.118 683.134 L935.558 683.134 L934.999 683.134 L934.44 683.134 L933.881 683.134 L933.321 683.134 L932.762 683.134 L932.203 683.134 L931.644 683.134 L931.084 683.134 L930.525 683.134 L929.966 683.134 L929.406 683.134 L928.847 683.134 L928.288 683.134 L927.729 683.134 L927.169 683.134 L926.61 683.134 L926.051 683.134 L925.492 683.134 L924.932 683.134 L924.373 683.134 L923.814 683.134 L923.255 683.134 L922.695 683.134 L922.136 683.134 L921.577 683.134 L921.018 683.134 L920.458 683.134 L919.899 683.134 L919.34 683.134 L918.781 683.134 L918.221 683.134 L917.662 683.134 L917.103 683.134 L916.544 683.134 L915.984 683.134 L915.425 683.134 L914.866 683.134 L914.307 683.134 L913.747 683.134 L913.188 683.134 L912.629 683.134 L912.07 683.134 L911.51 683.134 L910.951 683.134 L910.392 683.134 L909.833 683.134 L909.273 683.134 L908.714 683.134 L908.155 683.134 L907.596 683.134 L907.036 683.134 L906.477 683.134 L905.918 683.134 L905.359 683.134 L904.799 683.134 L904.24 683.134 L903.681 683.134 L903.122 683.134 L902.562 683.134 L902.003 683.134 L901.444 683.134 L900.885 683.134 L900.325 683.134 L899.766 683.134 L899.207 683.134 L898.648 683.134 L898.088 683.134 L897.529 683.134 L896.97 683.134 L896.411 683.134 L895.851 683.134 L895.292 683.134 L894.733 683.134 L894.174 683.134 L893.614 683.134 L893.055 683.134 L892.496 683.134 L891.937 683.134 L891.377 683.134 L890.818 683.134 L890.259 683.134 L889.7 683.134 L889.14 683.134 L888.581 683.134 L888.022 683.134 L887.463 683.134 L886.903 683.134 L886.344 683.134 L885.785 683.134 L885.226 683.134 L884.666 683.134 L884.107 683.134 L883.548 683.134 L882.989 683.134 L882.429 683.134 L881.87 683.134 L881.311 683.134 L880.752 683.134 L880.192 683.134 L879.633 683.134 L879.074 683.134 L878.515 683.134 L877.955 683.134 L877.396 683.134 L876.837 683.134 L876.278 683.134 L875.718 683.134 L875.159 683.134 L874.6 683.134 L874.041 683.134 L873.481 683.134 L872.922 683.134 L872.363 683.134 L871.804 683.134 L871.244 683.134 L870.685 683.134 L870.126 683.134 L869.567 683.134 L869.007 683.134 L868.448 683.134 L867.889 683.134 L867.33 683.134 L866.77 683.134 L866.211 683.134 L865.652 683.134 L865.093 683.134 L864.533 683.134 L863.974 683.134 L863.415 683.134 L862.856 683.134 L862.296 683.134 L861.737 683.134 L861.178 683.134 L860.619 683.134 L860.059 683.134 L859.5 683.134 L858.941 683.134 L858.382 683.134 L857.822 683.134 L857.263 683.134 L856.704 683.134 L856.145 683.134 L855.585 683.134 L855.026 683.134 L854.467 683.134 L853.908 683.134 L853.348 683.134 L852.789 683.134 L852.23 683.134 L851.671 683.134 L851.111 683.134 L850.552 683.134 L849.993 683.134 L849.434 683.134 L848.874 683.134 L848.315 683.134 L847.756 683.134 L847.197 683.134 L846.637 683.134 L846.078 683.134 L845.519 683.134 L844.96 683.134 L844.4 683.134 L843.841 683.134 L843.282 683.134 L842.723 683.134 L842.163 683.134 L841.604 683.134 L841.045 683.134 L840.486 683.134 L839.926 683.134 L839.367 683.134 L838.808 683.134 L838.249 683.134 L837.689 683.134 L837.13 683.134 L836.571 683.134 L836.012 683.134 L835.452 683.134 L834.893 683.134 L834.334 683.134 L833.775 683.134 L833.215 683.134 L832.656 683.134 L832.097 683.134 L831.538 683.134 L830.978 683.134 L830.419 683.134 L829.86 683.134 L829.301 683.134 L828.741 683.134 L828.182 683.134 L827.623 683.134 L827.064 683.134 L826.504 683.134 L825.945 683.134 L825.386 683.134 L824.827 683.134 L824.267 683.134 L823.708 683.134 L823.149 683.134 L822.59 683.134 L822.03 683.134 L821.471 683.134 L820.912 683.134 L820.353 683.134 L819.793 683.134 L819.234 683.134 L818.675 683.134 L818.116 683.134 L817.556 683.134 L816.997 683.134 L816.438 683.134 L815.879 683.134 L815.319 683.134 L814.76 683.134 L814.201 683.134 L813.642 683.134 L813.082 683.134 L812.523 683.134 L811.964 683.134 L811.405 683.134 L810.845 683.134 L810.286 683.134 L809.727 683.134 L809.168 683.134 L808.608 683.134 L808.049 683.134 L807.49 683.134 L806.931 683.134 L806.371 683.134 L805.812 683.134 L805.253 683.134 L804.693 683.134 L804.134 683.134 L803.575 683.134 L803.016 683.134 L802.456 683.134 L801.897 683.134 L801.338 683.134 L800.779 683.134 L800.219 683.134 L799.66 683.134 L799.101 683.134 L798.542 683.134 L797.982 683.134 L797.423 683.134 L796.864 683.134 L796.305 683.134 L795.745 683.134 L795.186 683.134 L794.627 683.134 L794.068 683.134 L793.508 683.134 L792.949 683.134 L792.39 683.134 L791.831 683.134 L791.271 683.134 L790.712 683.134 L790.153 683.134 L789.594 683.134 L789.034 683.134 L788.475 683.134 L787.916 683.134 L787.357 683.134 L786.797 683.134 L786.238 683.134 L785.679 683.134 L785.12 683.134 L784.56 683.134 L784.001 683.134 L783.442 683.134 L782.883 683.134 L782.323 683.134 L781.764 683.134 L781.205 683.134 L780.646 683.134 L780.086 683.134 L779.527 683.134 L778.968 683.134 L778.409 683.134 L777.849 683.134 L777.29 683.134 L776.731 683.134 L776.172 683.134 L775.612 683.134 L775.053 683.134 L774.494 683.134 L773.935 683.134 L773.375 683.134 L772.816 683.134 L772.257 683.134 L771.698 683.134 L771.138 683.134 L770.579 683.134 L770.02 683.134 L769.461 683.134 L768.901 683.134 L768.342 683.134 L767.783 683.134 L767.224 683.134 L766.664 683.134 L766.105 683.134 L765.546 683.134 L764.987 683.134 L764.427 683.134 L763.868 683.134 L763.309 683.134 L762.75 683.134 L762.19 683.134 L761.631 683.134 L761.072 683.134 L760.513 683.134 L759.953 683.134 L759.394 683.134 L758.835 683.134 L758.276 683.134 L757.716 683.134 L757.157 683.134 L756.598 683.134 L756.039 683.134 L755.479 683.134 L754.92 683.134 L754.361 683.134 L753.802 683.134 L753.242 683.134 L752.683 683.134 L752.124 683.134 L751.565 683.134 L751.005 683.134 L750.446 683.134 L749.887 683.134 L749.328 683.134 L748.768 683.134 L748.209 683.134 L747.65 683.134 L747.091 683.134 L746.531 683.134 L745.972 683.134 L745.413 683.134 L744.854 683.134 L744.294 683.134 L743.735 683.134 L743.176 683.134 L742.617 683.134 L742.057 683.134 L741.498 683.134 L740.939 683.134 L740.38 683.134 L739.82 683.134 L739.261 683.134 L738.702 683.134 L738.143 683.134 L737.583 683.134 L737.024 683.134 L736.465 683.134 L735.906 683.134 L735.346 683.134 L734.787 683.134 L734.228 683.134 L733.669 683.134 L733.109 683.134 L732.55 683.134 L731.991 683.134 L731.432 683.134 L730.872 683.134 L730.313 683.134 L729.754 683.134 L729.195 683.134 L728.635 683.134 L728.076 683.134 L727.517 683.134 L726.958 683.134 L726.398 683.134 L725.839 683.134 L725.28 683.134 L724.721 683.134 L724.161 683.134 L723.602 683.134 L723.043 683.134 L722.484 683.134 L721.924 683.134 L721.365 683.134 L720.806 683.134 L720.247 683.134  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip723)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.299 720.806,684.299 721.365,684.299 721.924,684.299 722.484,684.299 723.043,684.299 723.602,684.299 724.161,684.299 724.721,684.299 725.28,684.299 725.839,684.299 726.398,684.299 726.958,684.299 727.517,684.299 728.076,684.299 728.635,684.299 729.195,684.299 729.754,684.299 730.313,684.299 730.872,684.299 731.432,684.299 731.991,684.299 732.55,684.299 733.109,684.299 733.669,684.299 734.228,684.299 734.787,684.299 735.346,684.299 735.906,684.299 736.465,684.299 737.024,684.299 737.583,684.299 738.143,684.299 738.702,684.299 739.261,684.299 739.82,684.299 740.38,684.299 740.939,684.299 741.498,684.299 742.057,684.299 742.617,684.299 743.176,684.299 743.735,684.299 744.294,684.299 744.854,684.299 745.413,684.299 745.972,684.299 746.531,684.299 747.091,684.299 747.65,684.299 748.209,684.299 748.768,684.299 749.328,684.299 749.887,684.299 750.446,684.299 751.005,684.299 751.565,684.299 752.124,684.299 752.683,684.299 753.242,684.299 753.802,684.299 754.361,684.299 754.92,684.299 755.479,684.299 756.039,684.299 756.598,684.299 757.157,684.299 757.716,684.299 758.276,684.299 758.835,684.299 759.394,684.299 759.953,684.299 760.513,684.299 761.072,684.299 761.631,684.299 762.19,684.299 762.75,684.299 763.309,684.299 763.868,684.299 764.427,684.299 764.987,684.299 765.546,684.299 766.105,684.299 766.664,684.299 767.224,684.299 767.783,684.299 768.342,684.299 768.901,684.299 769.461,684.299 770.02,684.299 770.579,684.299 771.138,684.299 771.698,684.299 772.257,684.299 772.816,684.299 773.375,684.299 773.935,684.299 774.494,684.299 775.053,684.299 775.612,684.299 776.172,684.299 776.731,684.299 777.29,684.299 777.849,684.299 778.409,684.299 778.968,684.299 779.527,684.299 780.086,684.299 780.646,684.299 781.205,684.299 781.764,684.299 782.323,684.299 782.883,684.299 783.442,684.299 784.001,684.299 784.56,684.299 785.12,684.299 785.679,684.299 786.238,684.299 786.797,684.299 787.357,684.299 787.916,684.299 788.475,684.299 789.034,684.299 789.594,684.299 790.153,684.299 790.712,684.299 791.271,684.299 791.831,684.299 792.39,684.299 792.949,684.299 793.508,684.299 794.068,684.299 794.627,684.299 795.186,684.299 795.745,684.299 796.305,684.299 796.864,684.299 797.423,684.299 797.982,684.299 798.542,684.299 799.101,684.299 799.66,684.299 800.219,684.299 800.779,684.299 801.338,684.299 801.897,684.299 802.456,684.299 803.016,684.299 803.575,684.299 804.134,684.299 804.693,684.299 805.253,684.299 805.812,684.299 806.371,684.299 806.931,684.299 807.49,684.299 808.049,684.299 808.608,684.299 809.168,684.299 809.727,684.299 810.286,684.299 810.845,684.299 811.405,684.299 811.964,684.299 812.523,684.299 813.082,684.299 813.642,684.299 814.201,684.299 814.76,684.299 815.319,684.299 815.879,684.299 816.438,684.299 816.997,684.299 817.556,684.299 818.116,684.299 818.675,684.299 819.234,684.299 819.793,684.299 820.353,684.299 820.912,684.299 821.471,684.299 822.03,684.299 822.59,684.299 823.149,684.299 823.708,684.299 824.267,684.299 824.827,684.299 825.386,684.299 825.945,684.299 826.504,684.299 827.064,684.299 827.623,684.299 828.182,684.299 828.741,684.299 829.301,684.299 829.86,684.299 830.419,684.299 830.978,684.299 831.538,684.299 832.097,684.299 832.656,684.299 833.215,684.299 833.775,684.299 834.334,684.299 834.893,684.299 835.452,684.299 836.012,684.299 836.571,684.299 837.13,684.299 837.689,684.299 838.249,684.299 838.808,684.299 839.367,684.299 839.926,684.299 840.486,684.299 841.045,684.299 841.604,684.299 842.163,684.299 842.723,684.299 843.282,684.299 843.841,684.299 844.4,684.299 844.96,684.299 845.519,684.299 846.078,684.299 846.637,684.299 847.197,684.299 847.756,684.299 848.315,684.299 848.874,684.299 849.434,684.299 849.993,684.299 850.552,684.299 851.111,684.299 851.671,684.299 852.23,684.299 852.789,684.299 853.348,684.299 853.908,684.299 854.467,684.299 855.026,684.299 855.585,684.299 856.145,684.299 856.704,684.299 857.263,684.299 857.822,684.299 858.382,684.299 858.941,684.299 859.5,684.299 860.059,684.299 860.619,684.299 861.178,684.299 861.737,684.299 862.296,684.299 862.856,684.299 863.415,684.299 863.974,684.299 864.533,684.299 865.093,684.299 865.652,684.299 866.211,684.299 866.77,684.299 867.33,684.299 867.889,684.299 868.448,684.299 869.007,684.299 869.567,684.299 870.126,684.299 870.685,684.299 871.244,684.299 871.804,684.299 872.363,684.299 872.922,684.299 873.481,684.299 874.041,684.299 874.6,684.299 875.159,684.299 875.718,684.299 876.278,684.299 876.837,684.299 877.396,684.299 877.955,684.299 878.515,684.299 879.074,684.299 879.633,684.299 880.192,684.299 880.752,684.299 881.311,684.299 881.87,684.299 882.429,684.299 882.989,684.299 883.548,684.299 884.107,684.299 884.666,684.299 885.226,684.299 885.785,684.299 886.344,684.299 886.903,684.299 887.463,684.299 888.022,684.299 888.581,684.299 889.14,684.299 889.7,684.299 890.259,684.299 890.818,684.299 891.377,684.299 891.937,684.299 892.496,684.299 893.055,684.299 893.614,684.299 894.174,684.299 894.733,684.299 895.292,684.299 895.851,684.299 896.411,684.299 896.97,684.299 897.529,684.299 898.088,684.299 898.648,684.299 899.207,684.299 899.766,684.299 900.325,684.299 900.885,684.299 901.444,684.299 902.003,684.299 902.562,684.299 903.122,684.299 903.681,684.299 904.24,684.299 904.799,684.299 905.359,684.299 905.918,684.299 906.477,684.299 907.036,684.299 907.596,684.299 908.155,684.299 908.714,684.299 909.273,684.299 909.833,684.299 910.392,684.299 910.951,684.299 911.51,684.299 912.07,684.299 912.629,684.299 913.188,684.299 913.747,684.299 914.307,684.299 914.866,684.299 915.425,684.299 915.984,684.299 916.544,684.299 917.103,684.299 917.662,684.299 918.221,684.299 918.781,684.299 919.34,684.299 919.899,684.299 920.458,684.299 921.018,684.299 921.577,684.299 922.136,684.299 922.695,684.299 923.255,684.299 923.814,684.299 924.373,684.299 924.932,684.299 925.492,684.299 926.051,684.299 926.61,684.299 927.169,684.299 927.729,684.299 928.288,684.299 928.847,684.299 929.406,684.299 929.966,684.299 930.525,684.299 931.084,684.299 931.644,684.299 932.203,684.299 932.762,684.299 933.321,684.299 933.881,684.299 934.44,684.299 934.999,684.299 935.558,684.299 936.118,684.299 936.677,684.299 937.236,684.299 937.795,684.299 938.355,684.299 938.914,684.299 939.473,684.299 940.032,684.299 940.592,684.299 941.151,684.299 941.71,684.299 942.269,684.299 942.829,684.299 943.388,684.299 943.947,684.299 944.506,684.299 945.066,684.299 945.625,684.299 946.184,684.299 946.743,684.299 947.303,684.299 947.862,684.299 948.421,684.299 948.98,684.299 949.54,684.299 950.099,684.299 950.658,684.299 951.217,684.299 951.777,684.299 952.336,684.299 952.895,684.299 953.454,684.299 954.014,684.299 954.573,684.299 955.132,684.299 955.691,684.299 956.251,684.299 956.81,684.299 957.369,684.299 957.928,684.299 958.488,684.299 959.047,684.299 959.606,684.299 960.165,684.299 960.725,684.299 961.284,684.299 961.843,684.299 962.402,684.299 962.962,684.299 963.521,684.299 964.08,684.299 964.639,684.299 965.199,684.299 965.758,684.299 966.317,684.299 966.876,684.299 967.436,684.299 967.995,684.299 968.554,684.299 969.113,684.299 969.673,684.299 970.232,684.299 970.791,684.299 971.35,684.299 971.91,684.299 972.469,684.299 973.028,684.299 973.587,684.299 974.147,684.299 974.706,684.299 975.265,684.299 975.824,684.299 976.384,684.299 976.943,684.299 977.502,684.299 978.061,684.299 978.621,684.299 979.18,684.299 979.739,684.299 980.298,684.299 980.858,684.299 981.417,684.299 981.976,684.299 982.535,684.299 983.095,684.299 983.654,684.299 984.213,684.299 984.772,684.299 985.332,684.299 985.891,684.299 986.45,684.299 987.009,684.299 987.569,684.299 988.128,684.299 988.687,684.299 989.246,684.299 989.806,684.299 990.365,684.299 990.924,684.299 991.483,684.299 992.043,684.299 992.602,684.299 993.161,684.299 993.72,684.299 994.28,684.299 994.839,684.299 995.398,684.299 995.957,684.299 996.517,684.299 997.076,684.299 997.635,684.299 998.194,684.299 998.754,684.299 999.313,684.299 999.872,684.299 1000.43,684.299 1000.99,684.299 1001.55,684.299 1002.11,684.299 1002.67,684.299 1003.23,684.299 1003.79,684.299 1004.35,684.299 1004.91,684.299 1005.46,684.299 1006.02,684.299 1006.58,684.299 1007.14,684.299 1007.7,684.299 1008.26,684.299 1008.82,684.299 1009.38,684.299 1009.94,684.299 1010.5,684.299 1011.06,684.299 1011.62,684.299 1012.18,684.299 1012.73,684.299 1013.29,684.299 1013.85,684.299 1014.41,684.299 1014.97,684.299 1015.53,684.299 1016.09,684.299 1016.65,684.299 1017.21,684.299 1017.77,684.299 1018.33,684.299 1018.89,684.299 1019.45,684.299 1020.01,684.299 1020.56,684.299 1021.12,684.299 1021.68,684.299 1022.24,684.299 1022.8,684.299 1023.36,684.299 1023.92,684.299 1024.48,684.299 1025.04,684.299 1025.6,684.299 1026.16,684.299 1026.72,684.299 1027.28,684.299 1027.83,684.299 1028.39,684.299 1028.95,684.299 1029.51,684.299 1030.07,684.299 1030.63,684.299 1031.19,684.299 1031.75,684.299 1032.31,684.299 1032.87,684.299 1033.43,684.299 1033.99,684.299 1034.55,684.299 1035.1,684.299 1035.66,684.299 1036.22,684.299 1036.78,684.299 1037.34,684.299 1037.9,684.299 1038.46,684.299 1039.02,684.299 1039.58,684.299 1040.14,684.299 1040.7,684.299 1041.26,684.299 1041.82,684.299 1042.38,684.299 1042.93,684.299 1043.49,684.299 1044.05,684.299 1044.61,684.299 1045.17,684.299 1045.73,684.299 1046.29,684.299 1046.85,684.299 1047.41,684.299 1047.97,684.299 1048.53,684.299 1049.09,684.299 1049.65,684.299 1050.2,684.299 1050.76,684.299 1051.32,684.299 1051.88,684.299 1052.44,684.299 1053,684.299 1053.56,684.299 1054.12,684.299 1054.68,684.299 1055.24,684.299 1055.8,684.299 1056.36,684.299 1056.92,684.299 1057.48,684.299 1058.03,684.299 1058.59,684.299 1059.15,684.299 1059.71,684.299 1060.27,684.299 1060.83,684.299 1061.39,684.299 1061.95,684.299 1062.51,684.299 1063.07,684.299 1063.63,684.299 1064.19,684.299 1064.75,684.299 1065.3,684.299 1065.86,684.299 1066.42,684.299 1066.98,684.299 1067.54,684.299 1068.1,684.299 1068.66,684.299 1069.22,684.299 1069.78,684.299 1070.34,684.299 1070.9,684.299 1071.46,684.299 1072.02,684.299 1072.57,684.299 1073.13,684.299 1073.69,684.299 1074.25,684.299 1074.81,684.299 1075.37,684.299 1075.93,684.299 1076.49,684.299 1077.05,684.299 1077.61,684.299 1078.17,684.299 1078.73,684.299 1079.29,684.299 1079.85,684.299 1080.4,684.299 1080.96,684.299 1081.52,684.299 1082.08,684.299 1082.64,684.299 1083.2,684.299 1083.76,684.299 1084.32,684.299 1084.88,684.299 1085.44,684.299 1086,684.299 1086.56,684.299 1087.12,684.299 1087.67,684.299 1088.23,684.299 1088.79,684.299 1089.35,684.299 1089.91,684.299 1090.47,684.299 1091.03,684.299 1091.59,684.299 1092.15,684.299 1092.71,684.299 1093.27,684.299 1093.83,684.299 1094.39,684.299 1094.94,684.299 1095.5,684.299 1096.06,684.299 1096.62,684.299 1097.18,684.299 1097.74,684.299 1098.3,684.299 1098.86,684.299 1099.42,684.299 1099.98,684.299 1100.54,684.299 1101.1,684.299 1101.66,684.299 1102.22,684.299 1102.77,684.299 1103.33,684.299 1103.89,684.299 1104.45,684.299 1105.01,684.299 1105.57,684.299 1106.13,684.299 1106.69,684.299 1107.25,684.299 1107.81,684.299 1108.37,684.299 1108.93,684.299 1109.49,684.299 1110.04,684.299 1110.6,684.299 1111.16,684.299 1111.72,684.299 1112.28,684.299 1112.84,684.299 1113.4,684.299 1113.96,684.299 1114.52,684.299 1115.08,684.299 1115.64,684.299 1116.2,684.299 1116.76,684.299 1117.31,684.299 1117.87,684.299 1118.43,684.299 1118.99,684.299 1119.55,684.299 1120.11,684.299 1120.67,684.299 1121.23,684.299 1121.79,684.299 1122.35,684.299 1122.91,684.299 1123.47,684.299 1124.03,684.299 1124.59,684.299 1125.14,684.299 1125.7,684.299 1126.26,684.299 1126.82,684.299 1127.38,684.299 1127.94,684.299 1128.5,684.299 1129.06,684.299 1129.62,684.299 1130.18,684.299 1130.74,684.299 1131.3,684.299 1131.86,684.299 1132.41,684.299 1132.97,684.299 1133.53,684.299 1134.09,684.299 1134.65,684.299 1135.21,684.299 1135.77,684.299 1136.33,684.299 1136.89,684.299 1137.45,684.299 1138.01,684.299 1138.57,684.299 1139.13,684.299 1139.68,684.299 1140.24,684.299 1140.8,684.299 1141.36,684.299 1141.92,684.299 1142.48,684.299 1143.04,684.299 1143.6,684.299 1144.16,684.299 1144.72,684.299 1145.28,684.299 1145.84,684.299 1146.4,684.299 1146.96,684.299 1147.51,684.299 1148.07,684.299 1148.63,684.299 1149.19,684.299 1149.75,684.299 1150.31,684.299 1150.87,684.299 1151.43,684.299 1151.99,684.299 1152.55,684.299 1153.11,684.299 1153.67,684.299 1154.23,684.299 1154.78,684.299 1155.34,684.299 1155.9,684.299 1156.46,684.299 1157.02,684.299 1157.58,684.299 1158.14,684.299 1158.7,684.299 1159.26,684.299 1159.82,684.299 1160.38,684.299 1160.94,684.299 1161.5,684.299 1162.05,684.299 1162.61,684.299 1163.17,684.299 1163.73,684.299 1164.29,684.299 1164.85,684.299 1165.41,684.299 1165.97,684.299 1166.53,684.299 1167.09,684.299 1167.65,684.299 1168.21,684.299 1168.77,684.299 1169.33,684.299 1169.88,684.299 1170.44,684.299 1171,684.299 1171.56,684.299 1172.12,684.299 1172.68,684.299 1173.24,684.299 1173.8,684.299 1174.36,684.299 1174.92,684.299 1175.48,684.299 1176.04,684.299 1176.6,684.299 1177.15,684.299 1177.71,684.299 1178.27,684.299 1178.83,684.299 1179.39,684.299 1179.95,684.299 1180.51,684.299 1181.07,684.299 1181.63,684.299 1182.19,684.299 1182.75,684.299 1183.31,684.299 1183.87,684.299 1184.43,684.299 1184.98,684.299 1185.54,684.299 1186.1,684.299 1186.66,684.299 1187.22,684.299 1187.78,684.299 1188.34,684.299 1188.9,684.299 1189.46,684.299 1190.02,684.299 1190.58,684.299 1191.14,684.299 1191.7,684.299 1192.25,684.299 1192.81,684.299 1193.37,684.299 1193.93,684.299 1194.49,684.299 1195.05,684.299 1195.61,684.299 1196.17,684.299 1196.73,684.299 1197.29,684.299 1197.85,684.299 1198.41,684.299 1198.97,684.299 1199.52,684.299 1200.08,684.299 1200.64,684.299 1201.2,684.299 1201.76,684.299 1202.32,684.299 1202.88,684.299 1203.44,684.299 1204,684.299 1204.56,684.299 1205.12,684.299 1205.68,684.299 1206.24,684.299 1206.8,684.299 1207.35,684.299 1207.91,684.299 1208.47,684.299 1209.03,684.299 1209.59,684.299 1210.15,684.299 1210.71,684.299 1211.27,684.299 1211.83,684.299 1212.39,684.299 1212.95,684.299 1213.51,684.299 1214.07,684.299 1214.62,684.299 1215.18,684.299 1215.74,684.299 1216.3,684.299 1216.86,684.299 1217.42,684.299 1217.98,684.299 1218.54,684.299 1219.1,684.299 1219.66,684.299 1220.22,684.299 1220.78,684.299 1221.34,684.299 1221.89,684.299 1222.45,684.299 1223.01,684.299 1223.57,684.299 1224.13,684.299 1224.69,684.299 1225.25,684.299 1225.81,684.299 1226.37,684.299 1226.93,684.299 1227.49,684.299 1228.05,684.299 1228.61,684.299 1229.17,684.299 1229.72,684.299 1230.28,684.299 1230.84,684.299 1231.4,684.299 1231.96,684.299 1232.52,684.299 1233.08,684.299 1233.64,684.299 1234.2,684.299 1234.76,684.299 1235.32,684.299 1235.88,684.299 1236.44,684.299 1236.99,684.299 1237.55,684.299 1238.11,684.299 1238.67,684.299 1239.23,684.299 1239.79,684.299 1240.35,684.299 1240.91,684.299 1241.47,684.299 1242.03,684.299 1242.59,684.299 1243.15,684.299 1243.71,684.299 1244.26,684.299 1244.82,684.299 1245.38,684.299 1245.94,684.299 1246.5,684.299 1247.06,684.299 1247.62,684.299 1248.18,684.299 1248.74,684.299 1249.3,684.299 1249.86,684.299 1250.42,684.299 1250.98,684.299 1251.54,684.299 1252.09,684.299 1252.65,684.299 1253.21,684.299 1253.77,684.299 1254.33,684.299 1254.89,684.299 1255.45,684.299 1256.01,684.299 1256.57,684.299 1257.13,684.299 1257.69,684.299 1258.25,684.299 1258.81,684.299 1259.36,684.299 1259.92,684.299 1260.48,684.299 1261.04,684.299 1261.6,684.299 1262.16,684.299 1262.72,684.299 1263.28,684.299 1263.84,684.299 1264.4,684.299 1264.96,684.299 1265.52,684.299 1266.08,684.299 1266.63,684.299 1267.19,684.299 1267.75,684.299 1268.31,684.299 1268.87,684.299 1269.43,684.299 1269.99,684.299 1270.55,684.299 1271.11,684.299 1271.67,684.299 1272.23,684.299 1272.79,684.299 1273.35,684.299 1273.91,684.299 1274.46,684.299 1275.02,684.299 1275.58,684.299 1276.14,684.299 1276.7,684.299 1277.26,684.299 1277.82,684.299 1278.38,684.299 1278.94,684.299 1279.5,684.299 1280.06,684.299 1280.62,684.299 1281.18,684.299 1281.73,684.299 1282.29,684.299 1282.85,684.299 1283.41,684.299 1283.97,684.299 1284.53,684.299 1285.09,684.299 1285.65,684.299 1286.21,684.299 1286.77,684.299 1287.33,684.299 1287.89,684.299 1288.45,684.299 1289,684.299 1289.56,684.299 1290.12,684.299 1290.68,684.299 1291.24,684.299 1291.8,684.299 1292.36,684.299 1292.92,684.299 1293.48,684.299 1294.04,684.299 1294.6,684.299 1295.16,684.299 1295.72,684.299 1296.28,684.299 1296.83,684.299 1297.39,684.299 1297.95,684.299 1298.51,684.299 1299.07,684.299 1299.63,684.299 1300.19,684.299 1300.75,684.299 1301.31,684.299 1301.87,684.299 1302.43,684.299 1302.99,684.299 1303.55,684.299 1304.1,684.299 1304.66,684.299 1305.22,684.299 1305.78,684.299 1306.34,684.299 1306.9,684.299 1307.46,684.299 1308.02,684.299 1308.58,684.299 1309.14,684.299 1309.7,684.299 1310.26,684.299 1310.82,684.299 1311.38,684.299 1311.93,684.299 1312.49,684.299 1313.05,684.299 1313.61,684.299 1314.17,684.299 1314.73,684.299 1315.29,684.299 1315.85,684.299 1316.41,684.299 1316.97,684.299 1317.53,684.299 1318.09,684.299 1318.65,684.299 1319.2,684.299 1319.76,684.299 1320.32,684.299 1320.88,684.299 1321.44,684.299 1322,684.299 1322.56,684.299 1323.12,684.299 1323.68,684.299 1324.24,684.299 1324.8,684.299 1325.36,684.299 1325.92,684.299 1326.47,684.299 1327.03,684.299 1327.59,684.299 1328.15,684.299 1328.71,684.299 1329.27,684.299 1329.83,684.299 1330.39,684.299 1330.95,684.299 1331.51,684.299 1332.07,684.299 1332.63,684.299 1333.19,684.299 1333.75,684.299 1334.3,684.299 1334.86,684.299 1335.42,684.299 1335.98,684.299 1336.54,684.299 1337.1,684.299 1337.66,684.299 1338.22,684.299 1338.78,684.299 1339.34,684.299 1339.9,684.299 1340.46,684.299 1341.02,684.299 1341.57,684.299 1342.13,684.299 1342.69,684.299 1343.25,684.299 1343.81,684.299 1344.37,684.299 1344.93,684.299 1345.49,684.299 1346.05,684.299 1346.61,684.299 1347.17,684.299 1347.73,684.299 1348.29,684.299 1348.84,684.299 1349.4,684.299 1349.96,684.299 1350.52,684.299 1351.08,684.299 1351.64,684.299 1352.2,684.299 1352.76,684.299 1353.32,684.299 1353.88,684.299 1354.44,684.299 1355,684.299 1355.56,684.299 1356.12,684.299 1356.67,684.299 1357.23,684.299 1357.79,684.299 1358.35,684.299 1358.91,684.299 1359.47,684.299 1360.03,684.299 1360.59,684.299 1361.15,684.299 1361.71,684.299 1362.27,684.299 1362.83,684.299 1363.39,684.299 1363.94,684.299 1364.5,684.299 1365.06,684.299 1365.62,684.299 1366.18,684.299 1366.74,684.299 1367.3,684.299 1367.86,684.299 1368.42,684.299 1368.98,684.299 1369.54,684.299 1370.1,684.299 1370.66,684.299 1371.21,684.299 1371.77,684.299 1372.33,684.299 1372.89,684.299 1373.45,684.299 1374.01,684.299 1374.57,684.299 1375.13,684.299 1375.69,684.299 1376.25,684.299 1376.81,684.299 1377.37,684.299 1377.93,684.299 1378.49,684.299 1379.04,684.299 1379.6,684.299 1380.16,684.299 1380.72,684.299 1381.28,684.299 1381.84,684.299 1382.4,684.299 1382.96,684.299 1383.52,684.299 1384.08,684.299 1384.64,684.299 1385.2,684.299 1385.76,684.299 1386.31,684.299 1386.87,684.299 1387.43,684.299 1387.99,684.299 1388.55,684.299 1389.11,684.299 1389.67,684.299 1390.23,684.299 1390.79,684.299 1391.35,684.299 1391.91,684.299 1392.47,684.299 1393.03,684.299 1393.58,684.299 1394.14,684.299 1394.7,684.299 1395.26,684.299 1395.82,684.299 1396.38,684.299 1396.94,684.299 1397.5,684.299 1398.06,684.299 1398.62,684.299 1399.18,684.299 1399.74,684.299 1400.3,684.299 1400.86,684.299 1401.41,684.299 1401.97,684.299 1402.53,684.299 1403.09,684.299 1403.65,684.299 1404.21,684.299 1404.77,684.299 1405.33,684.299 1405.89,684.299 1406.45,684.299 1407.01,684.299 1407.57,684.299 1408.13,684.299 1408.68,684.299 1409.24,684.299 1409.8,684.299 1410.36,684.299 1410.92,684.299 1411.48,684.299 1412.04,684.299 1412.6,684.299 1413.16,684.299 1413.72,684.299 1414.28,684.299 1414.84,684.299 1415.4,684.299 1415.95,684.299 1416.51,684.299 1417.07,684.299 1417.63,684.299 1418.19,684.299 1418.75,684.299 1419.31,684.299 1419.87,684.299 1420.43,684.299 1420.99,684.299 1421.55,684.299 1422.11,684.299 1422.67,684.299 1423.23,684.299 1423.78,684.299 1424.34,684.299 1424.9,684.299 1425.46,684.299 1426.02,684.299 1426.58,684.299 1427.14,684.299 1427.7,684.299 1428.26,684.299 1428.82,684.299 1429.38,684.299 1429.94,684.299 1430.5,684.299 1431.05,684.299 1431.61,684.299 1432.17,684.299 1432.73,684.299 1433.29,684.299 1433.85,684.299 1434.41,684.299 1434.97,684.299 1435.53,684.299 1436.09,684.299 1436.65,684.299 1437.21,684.299 1437.77,684.299 1438.33,684.299 1438.88,684.299 1439.44,684.299 1440,684.299 1440.56,684.299 1441.12,684.299 1441.68,684.299 1442.24,684.299 1442.8,684.299 1443.36,684.299 1443.92,684.299 1444.48,684.299 1445.04,684.299 1445.6,684.299 1446.15,684.299 1446.71,684.299 1447.27,684.299 1447.83,684.299 1448.39,684.299 1448.95,684.299 1449.51,684.299 1450.07,684.299 1450.63,684.299 1451.19,684.299 1451.75,684.299 1452.31,684.299 1452.87,684.299 1453.42,684.299 1453.98,684.299 1454.54,684.299 1455.1,684.299 1455.66,684.299 1456.22,684.299 1456.78,684.299 1457.34,684.299 1457.9,684.299 1458.46,684.299 1459.02,684.299 1459.58,684.299 1460.14,684.299 1460.7,684.299 1461.25,684.299 1461.81,684.299 1462.37,684.299 1462.93,684.299 1463.49,684.299 1464.05,684.299 1464.61,684.299 1465.17,684.299 1465.73,684.299 1466.29,684.299 1466.85,684.299 1467.41,684.299 1467.97,684.299 1468.52,684.299 1469.08,684.299 1469.64,684.299 1470.2,684.299 1470.76,684.299 1471.32,684.299 1471.88,684.299 1472.44,684.299 1473,684.299 1473.56,684.299 1474.12,684.299 1474.68,684.299 1475.24,684.299 1475.79,684.299 1476.35,684.299 1476.91,684.299 1477.47,684.299 1478.03,684.299 1478.59,684.299 1479.15,684.299 1479.71,684.299 1480.27,684.299 1480.83,684.299 1481.39,684.299 1481.95,684.299 1482.51,684.299 1483.07,684.299 1483.62,684.299 1484.18,684.299 1484.74,684.299 1485.3,684.299 1485.86,684.299 1486.42,684.299 1486.98,684.299 1487.54,684.299 1488.1,684.299 1488.66,684.299 1489.22,684.299 1489.78,684.299 1490.34,684.299 1490.89,684.299 1491.45,684.299 1492.01,684.299 1492.57,684.299 1493.13,684.299 1493.69,684.299 1494.25,684.299 1494.81,684.299 1495.37,684.299 1495.93,684.299 1496.49,684.299 1497.05,684.299 1497.61,684.299 1498.16,684.299 1498.72,684.299 1499.28,684.299 1499.84,684.299 1500.4,684.299 1500.96,684.299 1501.52,684.299 1502.08,684.299 1502.64,684.299 1503.2,684.299 1503.76,684.299 1504.32,684.299 1504.88,684.299 1505.44,684.299 1505.99,684.299 1506.55,684.299 1507.11,684.299 1507.67,684.299 1508.23,684.299 1508.79,684.299 1509.35,684.299 1509.91,684.299 1510.47,684.299 1511.03,684.299 1511.59,684.299 1512.15,684.299 1512.71,684.299 1513.26,684.299 1513.82,684.299 1514.38,684.299 1514.94,684.299 1515.5,684.299 1516.06,684.299 1516.62,684.299 1517.18,684.299 1517.74,684.299 1518.3,684.299 1518.86,684.299 1519.42,684.299 1519.98,684.299 1520.53,684.299 1521.09,684.299 1521.65,684.299 1522.21,684.299 1522.77,684.299 1523.33,684.299 1523.89,684.299 1524.45,684.299 1525.01,684.299 1525.57,684.299 1526.13,684.299 1526.69,684.299 1527.25,684.299 1527.81,684.299 1528.36,684.299 1528.92,684.299 1529.48,684.299 1530.04,684.299 1530.6,684.299 1531.16,684.299 1531.72,684.299 1532.28,684.299 1532.84,684.299 1533.4,684.299 1533.96,684.299 1534.52,684.299 1535.08,684.299 1535.63,684.299 1536.19,684.299 1536.75,684.299 1537.31,684.299 1537.87,684.299 1538.43,684.299 1538.99,684.299 1539.55,684.299 1540.11,684.299 1540.67,684.299 1541.23,684.299 1541.79,684.299 1542.35,684.299 1542.9,684.299 1543.46,684.299 1544.02,684.299 1544.58,684.299 1545.14,684.299 1545.7,684.299 1546.26,684.299 1546.82,684.299 1547.38,684.299 1547.94,684.299 1548.5,684.299 1549.06,684.299 1549.62,684.299 1550.18,684.299 1550.73,684.299 1551.29,684.299 1551.85,684.299 1552.41,684.299 1552.97,684.299 1553.53,684.299 1554.09,684.299 1554.65,684.299 1555.21,684.299 1555.77,684.299 1556.33,684.299 1556.89,684.299 1557.45,684.299 1558,684.299 1558.56,684.299 1559.12,684.299 1559.68,684.299 1560.24,684.299 1560.8,684.299 1561.36,684.299 1561.92,684.299 1562.48,684.299 1563.04,684.299 1563.6,684.299 1564.16,684.299 1564.72,684.299 1565.28,684.299 1565.83,684.299 1566.39,684.299 1566.95,684.299 1567.51,684.299 1568.07,684.299 1568.63,684.299 1569.19,684.299 1569.75,684.299 1570.31,684.299 1570.87,684.299 1571.43,684.299 1571.99,684.299 1572.55,684.299 1573.1,684.299 1573.66,684.299 1574.22,684.299 1574.78,684.299 1575.34,684.299 1575.9,684.299 1576.46,684.299 1577.02,684.299 1577.58,684.299 1578.14,684.299 1578.7,684.299 1579.26,684.299 1579.82,684.299 1580.37,684.299 1580.93,684.299 1581.49,684.299 1582.05,684.299 1582.61,684.299 1583.17,684.299 1583.73,684.299 1584.29,684.299 1584.85,684.299 1585.41,684.299 1585.97,684.299 1586.53,684.299 1587.09,684.299 1587.65,684.299 1588.2,684.299 1588.76,684.299 1589.32,684.299 1589.88,684.299 1590.44,684.299 1591,684.299 1591.56,684.299 1592.12,684.299 1592.68,684.299 1593.24,684.299 1593.8,684.299 1594.36,684.299 1594.92,684.299 1595.47,684.299 1596.03,684.299 1596.59,684.299 1597.15,684.299 1597.71,684.299 1598.27,684.299 1598.83,684.299 1599.39,684.299 1599.95,684.299 1600.51,684.299 1601.07,684.299 1601.63,684.299 1602.19,684.299 1602.74,684.299 1603.3,684.299 1603.86,684.299 1604.42,684.299 1604.98,684.299 1605.54,684.299 1606.1,684.299 1606.66,684.299 1607.22,684.299 1607.78,684.299 1608.34,684.299 1608.9,684.299 1609.46,684.299 1610.02,684.299 1610.57,684.299 1611.13,684.299 1611.69,684.299 1612.25,684.299 1612.81,684.299 1613.37,684.299 1613.93,684.299 1614.49,684.299 1615.05,684.299 1615.61,684.299 1616.17,684.299 1616.73,684.299 1617.29,684.299 1617.84,684.299 1618.4,684.299 1618.96,684.299 1619.52,684.299 1620.08,684.299 1620.64,684.299 1621.2,684.299 1621.76,684.299 1622.32,684.299 1622.88,684.299 1623.44,684.299 1624,684.299 1624.56,684.299 1625.11,684.299 1625.67,684.299 1626.23,684.299 1626.79,684.299 1627.35,684.299 1627.91,684.299 1628.47,684.299 1629.03,684.299 1629.59,684.299 1630.15,684.299 1630.71,684.299 1631.27,684.299 1631.83,684.299 1632.39,684.299 1632.94,684.299 1633.5,684.299 1634.06,684.299 1634.62,684.299 1635.18,684.299 1635.74,684.299 1636.3,684.299 1636.86,684.299 1637.42,684.299 1637.98,684.299 1638.54,684.299 1639.1,684.299 1639.66,684.299 1640.21,684.299 1640.77,684.299 1641.33,684.299 1641.89,684.299 1642.45,684.299 1643.01,684.299 1643.57,684.299 1644.13,684.299 1644.69,684.299 1645.25,684.299 1645.81,684.299 1646.37,684.299 1646.93,684.299 1647.48,684.299 1648.04,684.299 1648.6,684.299 1649.16,684.299 1649.72,684.299 1650.28,684.299 1650.84,684.299 1651.4,684.299 1651.96,684.299 1652.52,684.299 1653.08,684.299 1653.64,684.299 1654.2,684.299 1654.76,684.299 1655.31,684.299 1655.87,684.299 1656.43,684.299 1656.99,684.299 1657.55,684.299 1658.11,684.299 1658.67,684.299 1659.23,684.299 1659.79,684.299 1660.35,684.299 1660.91,684.299 1661.47,684.299 1662.03,684.299 1662.58,684.299 1663.14,684.299 1663.7,684.299 1664.26,684.299 1664.82,684.299 1665.38,684.299 1665.94,684.299 1666.5,684.299 1667.06,684.299 1667.62,684.299 1668.18,684.299 1668.74,684.299 1669.3,684.299 1669.85,684.299 1670.41,684.299 1670.97,684.299 1671.53,684.299 1672.09,684.299 1672.65,684.299 1673.21,684.299 1673.77,684.299 1674.33,684.299 1674.89,684.299 1675.45,684.299 1676.01,684.299 1676.57,684.299 1677.13,684.299 1677.68,684.299 1678.24,684.299 1678.8,684.299 1679.36,684.299 1679.92,684.299 1680.48,684.299 1681.04,684.299 1681.6,684.299 1682.16,684.299 1682.72,684.299 1683.28,684.299 1683.84,684.299 1684.4,684.299 1684.95,684.299 1685.51,684.299 1686.07,684.299 1686.63,684.299 1687.19,684.299 1687.75,684.299 1688.31,684.299 1688.87,684.299 1689.43,684.299 1689.99,684.299 1690.55,684.299 1691.11,684.299 1691.67,684.299 1692.23,684.299 1692.78,684.299 1693.34,684.299 1693.9,684.299 1694.46,684.299 1695.02,684.299 1695.58,684.299 1696.14,684.299 1696.7,684.299 1697.26,684.299 1697.82,684.299 1698.38,684.299 1698.94,684.299 1699.5,684.299 1700.05,684.299 1700.61,684.299 1701.17,684.299 1701.73,684.299 1702.29,684.299 1702.85,684.299 1703.41,684.299 1703.97,684.299 1704.53,684.299 1705.09,684.299 1705.65,684.299 1706.21,684.299 1706.77,684.299 1707.32,684.299 1707.88,684.299 1708.44,684.299 1709,684.299 1709.56,684.299 1710.12,684.299 1710.68,684.299 1711.24,684.299 1711.8,684.299 1712.36,684.299 1712.92,684.299 1713.48,684.299 1714.04,684.299 1714.6,684.299 1715.15,684.299 1715.71,684.299 1716.27,684.299 1716.83,684.299 1717.39,684.299 1717.95,684.299 1718.51,684.299 1719.07,684.299 1719.63,684.299 1720.19,684.299 1720.75,684.299 1721.31,684.299 1721.87,684.299 1722.42,684.299 1722.98,684.299 1723.54,684.299 1724.1,684.299 1724.66,684.299 1725.22,684.299 1725.78,684.299 1726.34,684.299 1726.9,684.299 1727.46,684.299 1728.02,684.299 1728.58,684.299 1729.14,684.299 1729.69,684.299 1730.25,684.299 1730.81,684.299 1731.37,684.299 1731.93,684.299 1732.49,684.299 1733.05,684.299 1733.61,684.299 1734.17,684.299 1734.73,684.299 1735.29,684.299 1735.85,684.299 1736.41,684.299 1736.97,684.299 1737.52,684.299 1738.08,684.299 1738.64,684.299 1739.2,684.299 1739.76,684.299 1740.32,684.299 1740.88,684.299 1741.44,684.299 1742,684.299 1742.56,684.299 1743.12,684.299 1743.68,684.299 1744.24,684.299 1744.79,684.299 1745.35,684.299 1745.91,684.299 1746.47,684.299 1747.03,684.299 1747.59,684.299 1748.15,684.299 1748.71,684.299 1749.27,684.299 1749.83,684.299 1750.39,684.299 1750.95,684.299 1751.51,684.299 1752.06,684.299 1752.62,684.299 1753.18,684.299 1753.74,684.299 1754.3,684.299 1754.86,684.299 1755.42,684.299 1755.98,684.299 1756.54,684.299 1757.1,684.299 1757.66,684.299 1758.22,684.299 1758.78,684.299 1759.34,684.299 1759.89,684.299 1760.45,684.299 1761.01,684.299 1761.57,684.299 1762.13,684.299 1762.69,684.299 1763.25,684.299 1763.81,684.299 1764.37,684.299 1764.93,684.299 1765.49,684.299 1766.05,684.299 1766.61,684.299 1767.16,684.299 1767.72,684.299 1768.28,684.299 1768.84,684.299 1769.4,684.299 1769.96,684.299 1770.52,684.299 1771.08,684.299 1771.64,684.299 1772.2,684.299 1772.76,684.299 1773.32,684.299 1773.88,684.299 1774.43,684.299 1774.99,684.299 1775.55,684.299 1776.11,684.299 1776.67,684.299 1777.23,684.299 1777.79,684.299 1778.35,684.299 1778.91,684.299 1779.47,684.299 1780.03,684.299 1780.59,684.299 1781.15,684.299 1781.71,684.299 1782.26,684.299 1782.82,684.299 1783.38,684.299 1783.94,684.299 1784.5,684.299 1785.06,684.299 1785.62,684.299 1786.18,684.299 1786.74,684.299 1787.3,684.299 1787.86,684.299 1788.42,684.299 1788.98,684.299 1789.53,684.299 1790.09,684.299 1790.65,684.299 1791.21,684.299 1791.77,684.299 1792.33,684.299 1792.89,684.299 1793.45,684.299 1794.01,684.299 1794.57,684.299 1795.13,684.299 1795.69,684.299 1796.25,684.299 1796.8,684.299 1797.36,684.299 1797.92,684.299 1798.48,684.299 1799.04,684.299 1799.6,684.299 1800.16,684.299 1800.72,684.299 1801.28,684.299 1801.84,684.299 1802.4,684.299 1802.96,684.299 1803.52,684.299 1804.08,684.299 1804.63,684.299 1805.19,684.299 1805.75,684.299 1806.31,684.299 1806.87,684.299 1807.43,684.299 1807.99,684.299 1808.55,684.299 1809.11,684.299 1809.67,684.299 1810.23,684.299 1810.79,684.299 1811.35,684.299 1811.9,684.299 1812.46,684.299 1813.02,684.299 1813.58,684.299 1814.14,684.299 1814.7,684.299 1815.26,684.299 1815.82,684.299 1816.38,684.299 1816.94,684.299 1817.5,684.299 1818.06,684.299 1818.62,684.299 1819.18,684.299 1819.73,684.299 1820.29,684.299 1820.85,684.299 1821.41,684.299 1821.97,684.299 1822.53,684.299 1823.09,684.299 1823.65,684.299 1824.21,684.299 1824.77,684.299 1825.33,684.299 1825.89,684.299 1826.45,684.299 1827,684.299 1827.56,684.299 1828.12,684.299 1828.68,684.299 1829.24,684.299 1829.8,684.299 1830.36,684.299 1830.92,684.299 1831.48,684.299 1832.04,684.299 1832.6,684.299 1833.16,684.299 1833.72,684.299 1834.27,684.299 1834.83,684.299 1835.39,684.299 1835.95,684.299 1836.51,684.299 1837.07,684.299 1837.63,684.299 1838.19,684.299 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.039308505644748 ± 0.02055064391683512\nProjected Energy: -4.018681124770187 ± (0.005663972535062456, 0.005867377931326523)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.975209</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.751e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.1169e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5649e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">5.11e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.765e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3715e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133672\n -0.7590191922770941\n  0.13584182219622676\n  0.15789998694607377\n  0.8767114411781343\n  1.530592997097333\n  1.583573261186733\n  3.0728703303258484\n  3.125672653951848\n  4.862107221562173\n  6.2606948503805935\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
