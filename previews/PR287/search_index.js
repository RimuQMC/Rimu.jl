var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2137885815087009 ± 0.001421536458862004\n   G2(1) = 0.9153668348064387 ± 0.0006963594756438805\n   G2(2) = 0.9817548111278211 ± 0.0006735977210942803\n   G2(3) = 0.9919681266227807 ± 0.0009455612536305473\n   G2(4) = 0.9817548111278211 ± 0.0006735977210942803\n   G2(5) = 0.9153668348064387 ± 0.0006963594756438805\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9662471254442773 ± 0.1259500762783471\n   Replica 2: -3.9635713387797398 ± 0.14303746230930986\n   Replica 3: -4.093059847598315 ± 0.12179577078183326\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip620\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip621\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip622\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.93 2211.02,1003.93 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.979 2211.02,745.979 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.03 2211.02,488.03 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.08 2211.02,230.08 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.93 423.181,1003.93 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.979 423.181,745.979 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.03 423.181,488.03 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.08 423.181,230.08 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M290.043 1017.27 L306.363 1017.27 L306.363 1021.21 L284.418 1021.21 L284.418 1017.27 Q287.08 1014.52 291.664 1009.89 Q296.27 1005.24 297.451 1003.89 Q299.696 1001.37 300.576 999.635 Q301.478 997.876 301.478 996.186 Q301.478 993.431 299.534 991.695 Q297.613 989.959 294.511 989.959 Q292.312 989.959 289.858 990.723 Q287.427 991.487 284.65 993.038 L284.65 988.315 Q287.474 987.181 289.927 986.602 Q292.381 986.024 294.418 986.024 Q299.789 986.024 302.983 988.709 Q306.177 991.394 306.177 995.885 Q306.177 998.014 305.367 999.936 Q304.58 1001.83 302.474 1004.43 Q301.895 1005.1 298.793 1008.32 Q295.691 1011.51 290.043 1017.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 986.649 L334.58 986.649 L334.58 990.584 L320.506 990.584 L320.506 999.056 Q321.524 998.709 322.543 998.547 Q323.562 998.362 324.58 998.362 Q330.367 998.362 333.747 1001.53 Q337.126 1004.7 337.126 1010.12 Q337.126 1015.7 333.654 1018.8 Q330.182 1021.88 323.862 1021.88 Q321.687 1021.88 319.418 1021.51 Q317.173 1021.14 314.765 1020.4 L314.765 1015.7 Q316.849 1016.83 319.071 1017.39 Q321.293 1017.94 323.77 1017.94 Q327.774 1017.94 330.112 1015.84 Q332.45 1013.73 332.45 1010.12 Q332.45 1006.51 330.112 1004.4 Q327.774 1002.3 323.77 1002.3 Q321.895 1002.3 320.02 1002.71 Q318.168 1003.13 316.224 1004.01 L316.224 986.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 989.727 Q352.728 989.727 350.899 993.292 Q349.094 996.834 349.094 1003.96 Q349.094 1011.07 350.899 1014.63 Q352.728 1018.18 356.339 1018.18 Q359.973 1018.18 361.779 1014.63 Q363.608 1011.07 363.608 1003.96 Q363.608 996.834 361.779 993.292 Q359.973 989.727 356.339 989.727 M356.339 986.024 Q362.149 986.024 365.205 990.63 Q368.284 995.214 368.284 1003.96 Q368.284 1012.69 365.205 1017.3 Q362.149 1021.88 356.339 1021.88 Q350.529 1021.88 347.45 1017.3 Q344.395 1012.69 344.395 1003.96 Q344.395 995.214 347.45 990.63 Q350.529 986.024 356.339 986.024 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M286.062 728.699 L304.418 728.699 L304.418 732.634 L290.344 732.634 L290.344 741.107 Q291.363 740.759 292.381 740.597 Q293.4 740.412 294.418 740.412 Q300.205 740.412 303.585 743.583 Q306.964 746.755 306.964 752.171 Q306.964 757.75 303.492 760.852 Q300.02 763.93 293.701 763.93 Q291.525 763.93 289.256 763.56 Q287.011 763.19 284.603 762.449 L284.603 757.75 Q286.687 758.884 288.909 759.44 Q291.131 759.995 293.608 759.995 Q297.613 759.995 299.951 757.889 Q302.288 755.782 302.288 752.171 Q302.288 748.56 299.951 746.454 Q297.613 744.347 293.608 744.347 Q291.733 744.347 289.858 744.764 Q288.006 745.181 286.062 746.06 L286.062 728.699 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 731.778 Q322.566 731.778 320.737 735.343 Q318.932 738.884 318.932 746.014 Q318.932 753.12 320.737 756.685 Q322.566 760.227 326.177 760.227 Q329.811 760.227 331.617 756.685 Q333.446 753.12 333.446 746.014 Q333.446 738.884 331.617 735.343 Q329.811 731.778 326.177 731.778 M326.177 728.074 Q331.987 728.074 335.043 732.681 Q338.122 737.264 338.122 746.014 Q338.122 754.741 335.043 759.347 Q331.987 763.93 326.177 763.93 Q320.367 763.93 317.288 759.347 Q314.233 754.741 314.233 746.014 Q314.233 737.264 317.288 732.681 Q320.367 728.074 326.177 728.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 731.778 Q352.728 731.778 350.899 735.343 Q349.094 738.884 349.094 746.014 Q349.094 753.12 350.899 756.685 Q352.728 760.227 356.339 760.227 Q359.973 760.227 361.779 756.685 Q363.608 753.12 363.608 746.014 Q363.608 738.884 361.779 735.343 Q359.973 731.778 356.339 731.778 M356.339 728.074 Q362.149 728.074 365.205 732.681 Q368.284 737.264 368.284 746.014 Q368.284 754.741 365.205 759.347 Q362.149 763.93 356.339 763.93 Q350.529 763.93 347.45 759.347 Q344.395 754.741 344.395 746.014 Q344.395 737.264 347.45 732.681 Q350.529 728.074 356.339 728.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M284.835 470.75 L307.057 470.75 L307.057 472.74 L294.511 505.31 L289.627 505.31 L301.432 474.685 L284.835 474.685 L284.835 470.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 470.75 L334.58 470.75 L334.58 474.685 L320.506 474.685 L320.506 483.157 Q321.524 482.81 322.543 482.648 Q323.562 482.462 324.58 482.462 Q330.367 482.462 333.747 485.634 Q337.126 488.805 337.126 494.222 Q337.126 499.8 333.654 502.902 Q330.182 505.981 323.862 505.981 Q321.687 505.981 319.418 505.611 Q317.173 505.24 314.765 504.499 L314.765 499.8 Q316.849 500.935 319.071 501.49 Q321.293 502.046 323.77 502.046 Q327.774 502.046 330.112 499.939 Q332.45 497.833 332.45 494.222 Q332.45 490.611 330.112 488.504 Q327.774 486.398 323.77 486.398 Q321.895 486.398 320.02 486.814 Q318.168 487.231 316.224 488.111 L316.224 470.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 473.828 Q352.728 473.828 350.899 477.393 Q349.094 480.935 349.094 488.064 Q349.094 495.171 350.899 498.736 Q352.728 502.277 356.339 502.277 Q359.973 502.277 361.779 498.736 Q363.608 495.171 363.608 488.064 Q363.608 480.935 361.779 477.393 Q359.973 473.828 356.339 473.828 M356.339 470.125 Q362.149 470.125 365.205 474.731 Q368.284 479.314 368.284 488.064 Q368.284 496.791 365.205 501.398 Q362.149 505.981 356.339 505.981 Q350.529 505.981 347.45 501.398 Q344.395 496.791 344.395 488.064 Q344.395 479.314 347.45 474.731 Q350.529 470.125 356.339 470.125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M256.664 243.425 L264.303 243.425 L264.303 217.059 L255.992 218.726 L255.992 214.467 L264.256 212.8 L268.932 212.8 L268.932 243.425 L276.571 243.425 L276.571 247.36 L256.664 247.36 L256.664 243.425 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M296.015 215.879 Q292.404 215.879 290.576 219.443 Q288.77 222.985 288.77 230.115 Q288.77 237.221 290.576 240.786 Q292.404 244.328 296.015 244.328 Q299.65 244.328 301.455 240.786 Q303.284 237.221 303.284 230.115 Q303.284 222.985 301.455 219.443 Q299.65 215.879 296.015 215.879 M296.015 212.175 Q301.826 212.175 304.881 216.781 Q307.96 221.365 307.96 230.115 Q307.96 238.842 304.881 243.448 Q301.826 248.031 296.015 248.031 Q290.205 248.031 287.127 243.448 Q284.071 238.842 284.071 230.115 Q284.071 221.365 287.127 216.781 Q290.205 212.175 296.015 212.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 215.879 Q322.566 215.879 320.737 219.443 Q318.932 222.985 318.932 230.115 Q318.932 237.221 320.737 240.786 Q322.566 244.328 326.177 244.328 Q329.811 244.328 331.617 240.786 Q333.446 237.221 333.446 230.115 Q333.446 222.985 331.617 219.443 Q329.811 215.879 326.177 215.879 M326.177 212.175 Q331.987 212.175 335.043 216.781 Q338.122 221.365 338.122 230.115 Q338.122 238.842 335.043 243.448 Q331.987 248.031 326.177 248.031 Q320.367 248.031 317.288 243.448 Q314.233 238.842 314.233 230.115 Q314.233 221.365 317.288 216.781 Q320.367 212.175 326.177 212.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 215.879 Q352.728 215.879 350.899 219.443 Q349.094 222.985 349.094 230.115 Q349.094 237.221 350.899 240.786 Q352.728 244.328 356.339 244.328 Q359.973 244.328 361.779 240.786 Q363.608 237.221 363.608 230.115 Q363.608 222.985 361.779 219.443 Q359.973 215.879 356.339 215.879 M356.339 212.175 Q362.149 212.175 365.205 216.781 Q368.284 221.365 368.284 230.115 Q368.284 238.842 365.205 243.448 Q362.149 248.031 356.339 248.031 Q350.529 248.031 347.45 243.448 Q344.395 238.842 344.395 230.115 Q344.395 221.365 347.45 216.781 Q350.529 212.175 356.339 212.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.08 4017.76,230.08 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.45 457.123,1249.27 457.691,1248.02 458.259,1247.79 458.828,1246.49 459.396,1246.17 459.964,1245.77 460.533,1245.31 461.101,1244.75 461.669,1244.08 462.238,1243.36 462.806,1242.54 463.375,1240.6 463.943,1239.62 464.511,1238.54 465.08,1237.33 465.648,1236.04 466.216,1233.6 466.785,1232.11 467.353,1228.44 467.921,1226.72 468.49,1223.81 469.058,1221.88 469.626,1219.8 470.195,1217.54 470.763,1214.12 471.331,1211.52 471.9,1208.76 472.468,1205.83 473.036,1201.63 473.605,1197.28 474.173,1193.83 474.741,1190.19 475.31,1186.34 475.878,1182.19 476.446,1177.88 477.015,1171.29 477.583,1166.48 478.152,1160.53 478.72,1155.45 479.288,1149.03 479.857,1143.49 480.425,1135.68 480.993,1129.81 481.562,1123.56 482.13,1117.09 482.698,1109.53 483.267,1101.64 483.835,1091.48 484.403,1084.36 484.972,1073.97 485.54,1063.48 486.108,1053.84 486.677,1046.26 487.245,1037.35 487.813,1028.41 488.382,1018.26 488.95,1010.08 489.518,1000.69 490.087,991.169 490.655,980.398 491.224,970.594 491.792,960.553 492.36,950.258 492.929,937.906 493.497,927.706 494.065,917.394 494.634,907.095 495.202,897.726 495.77,887.136 496.339,876.51 496.907,867.025 497.475,856.423 498.044,843.647 498.612,831.082 499.18,817.509 499.749,807.307 500.317,796.032 500.885,786.973 501.454,776.824 502.022,764.685 502.59,753.811 503.159,743.121 503.727,732.316 504.295,722.643 504.864,711.961 505.432,702.439 506.001,690.948 506.569,682.62 507.137,674.42 507.706,661.144 508.274,651.198 508.842,639.212 509.411,631.585 509.979,623.985 510.547,614.483 511.116,607.36 511.684,597.943 512.252,590.728 512.821,584.594 513.389,575.504 513.957,565.508 514.526,556.773 515.094,550.393 515.662,542.06 516.231,535.648 516.799,528.564 517.367,520.383 517.936,512.445 518.504,506.604 519.072,501.029 519.641,495.433 520.209,488.95 520.778,482.44 521.346,477.17 521.914,473.125 522.483,465.799 523.051,459.677 523.619,453.648 524.188,447.682 524.756,441.074 525.324,434.632 525.893,429.309 526.461,424.371 527.029,420.481 527.598,416.59 528.166,410.367 528.734,405.485 529.303,401.73 529.871,398.315 530.439,393.768 531.008,387.19 531.576,385.131 532.144,383.066 532.713,380.827 533.281,377.376 533.85,371.024 534.418,366.778 534.986,364.803 535.555,361.858 536.123,356.916 536.691,353.322 537.26,349.766 537.828,346.31 538.396,340.778 538.965,335.831 539.533,331.01 540.101,329.442 540.67,327.92 541.238,327.274 541.806,325.684 542.375,323.862 542.943,322.117 543.511,319.339 544.08,317.723 544.648,314.098 545.216,313.51 545.785,310.962 546.353,309.539 546.921,308.085 547.49,305.46 548.058,303.965 548.627,302.724 549.195,300.259 549.763,298.953 550.332,298.905 550.9,293.327 551.468,291.552 552.037,291.637 552.605,288.718 553.173,287.973 553.742,288 554.31,284.18 554.878,283.375 555.447,280.575 556.015,278.832 556.583,277.508 557.152,276.867 557.72,276.504 558.288,274.898 558.857,274.484 559.425,272.971 559.993,271.624 560.562,271.244 561.13,271.928 561.698,271.389 562.267,271.836 562.835,270.458 563.404,267.842 563.972,265.256 564.54,266.074 565.109,264.797 565.677,263.367 566.245,261.059 566.814,258.981 567.382,256.829 567.95,261.204 568.519,260.103 569.087,255.836 569.655,250.788 570.224,249.126 570.792,248.904 571.36,249.542 571.929,250.923 572.497,249.232 573.065,250.733 573.634,252.252 574.202,249.375 574.77,254.181 575.339,252.047 575.907,251.161 576.476,252.278 577.044,250.676 577.612,248.917 578.181,247.257 578.749,246.699 579.317,247.345 579.886,247.583 580.454,245.987 581.022,248.411 581.591,250.53 582.159,249.655 582.727,248.772 583.296,247.047 583.864,247.456 584.432,245.851 585.001,245.178 585.569,245.583 586.137,244.034 586.706,246.66 587.274,244.821 587.842,245.24 588.411,245.469 588.979,244.838 589.547,244.223 590.116,245.573 590.684,248.061 591.253,247.963 591.821,248.179 592.389,249.269 592.958,250.448 593.526,250.091 594.094,248.719 594.663,248.532 595.231,247.328 595.799,249.375 596.368,252.235 596.936,251.767 597.504,252.411 598.073,247.993 598.641,247.656 599.209,245.441 599.778,245.518 600.346,246.487 600.914,245.133 601.483,245.328 602.051,241.97 602.619,242.121 603.188,242.232 603.756,238.246 604.325,235.412 604.893,234.907 605.461,232.653 606.03,234.318 606.598,235.099 607.166,233.622 607.735,233.217 608.303,237.043 608.871,238.37 609.44,240.723 610.008,240.787 610.576,240.048 611.145,238.324 611.713,236.713 612.281,236.32 612.85,236.905 613.418,236.383 613.986,234.783 614.555,235.257 615.123,235.738 615.691,238.423 616.26,235.613 616.828,235.19 617.396,238.915 617.965,239.971 618.533,238.225 619.102,237.598 619.67,237.117 620.238,237.521 620.807,240.002 621.375,239.287 621.943,238.519 622.512,240.986 623.08,240.253 623.648,241.528 624.217,240.326 624.785,241.514 625.353,241.488 625.922,240.541 626.49,240.56 627.058,239.56 627.627,239.536 628.195,240.519 628.763,241.553 629.332,240.641 629.9,239.71 630.468,238.873 631.037,237.948 631.605,235.989 632.173,235.136 632.742,235.311 633.31,236.595 633.879,235.798 634.447,234.023 635.015,234.452 635.584,237.955 636.152,236.927 636.72,236.122 637.289,235.409 637.857,235.768 638.425,236 638.994,235.279 639.562,232.367 640.13,235.106 640.699,238.561 641.267,237.689 641.835,240.89 642.404,238.781 642.972,241.823 643.54,242.697 644.109,243.363 644.677,241.94 645.245,240.652 645.814,241.673 646.382,243.613 646.951,244.402 647.519,243.981 648.087,244.175 648.656,243.684 649.224,240.185 649.792,241.013 650.361,240.835 650.929,241.614 651.497,241.225 652.066,239.988 652.634,240.733 653.202,240.393 653.771,239.091 654.339,240.097 654.907,240.887 655.476,238.439 656.044,238.178 656.612,239.825 657.181,238.671 657.749,238.348 658.317,238.091 658.886,235.773 659.454,232.803 660.022,233.055 660.591,232.078 661.159,232.322 661.728,230.448 662.296,233.012 662.864,235.242 663.433,235.381 664.001,236.233 664.569,236.086 665.138,236.139 665.706,235.781 666.274,235.659 666.843,235.589 667.411,234.864 667.979,235.206 668.548,235.14 669.116,236.017 669.684,235.774 670.253,234.556 670.821,234.547 671.389,233.459 671.958,233.45 672.526,234.572 673.094,233.744 673.663,233.746 674.231,235.022 674.799,235.99 675.368,234.122 675.936,234.029 676.505,237.225 677.073,235.983 677.641,234.868 678.21,232.699 678.778,232.936 679.346,233.002 679.915,233.134 680.483,232.347 681.051,229.458 681.62,229.664 682.188,228.008 682.756,228.379 683.325,229.944 683.893,232.299 684.461,232.589 685.03,232.604 685.598,233.748 686.166,233.706 686.735,232.773 687.303,232.824 687.871,233.991 688.44,232.925 689.008,234.08 689.577,234.88 690.145,235.909 690.713,233.71 691.282,230.548 691.85,230.696 692.418,229.994 692.987,230.187 693.555,232.419 694.123,233.68 694.692,233.724 695.26,233.741 695.828,233.354 696.397,232.548 696.965,234.699 697.533,235.602 698.102,236.478 698.67,238.581 699.238,236.27 699.807,236.084 700.375,236.878 700.943,234.418 701.512,234.363 702.08,237.191 702.648,237.951 703.217,238.603 703.785,238.127 704.354,239.73 704.922,236.842 705.49,237.364 706.059,237.81 706.627,237.453 707.195,238.053 707.764,236.548 708.332,233.051 708.9,233.969 709.469,233.664 710.037,233.176 710.605,231.17 711.174,231.267 711.742,229.978 712.31,232.197 712.879,232.183 713.447,232.188 714.015,232.125 714.584,233.135 715.152,233.331 715.72,234.344 716.289,231.832 716.857,231.861 717.425,231.858 717.994,230.698 718.562,226.565 719.131,226.991 719.699,228.423 720.267,229.813 720.836,227.835 721.404,226.739 721.972,227.147 722.541,228.654 723.109,224.527 723.677,223.919 724.246,222.465 724.814,224.225 725.382,224.7 725.951,226.25 726.519,228.839 727.087,229.131 727.656,229.43 728.224,230.802 728.792,229.946 729.361,231.049 729.929,231.096 730.497,231.878 731.066,230.894 731.634,228.999 732.203,227.096 732.771,227.433 733.339,226.843 733.908,227.422 734.476,228.986 735.044,230.321 735.613,232.583 736.181,233.657 736.749,232.46 737.318,232.571 737.886,232.696 738.454,233.986 739.023,236.071 739.591,234.837 740.159,235.77 740.728,235.33 741.296,233.938 741.864,234.713 742.433,235.533 743.001,232.349 743.569,232.363 744.138,232.169 744.706,233.056 745.274,236.979 745.843,237.79 746.411,236.329 746.98,235.027 747.548,233.886 748.116,235.83 748.685,234.594 749.253,233.093 749.821,233.054 750.39,231.856 750.958,232.859 751.526,232.681 752.095,232.554 752.663,233.523 753.231,232.342 753.8,231.394 754.368,229.337 754.936,231.648 755.505,231.601 756.073,233.414 756.641,234.054 757.21,233.683 757.778,233.546 758.346,234.39 758.915,233.363 759.483,231.208 760.052,231.305 760.62,230.322 761.188,230.506 761.757,232.642 762.325,232.525 762.893,230.525 763.462,231.343 764.03,233.366 764.598,234.059 765.167,233.775 765.735,234.653 766.303,234.322 766.872,232.107 767.44,231.055 768.008,228.935 768.577,227.13 769.145,229.419 769.713,228.598 770.282,226.701 770.85,226.942 771.418,225.42 771.987,225.803 772.555,226.029 773.123,227.425 773.692,225.578 774.26,228.13 774.829,227.176 775.397,226.353 775.965,225.92 776.534,224.337 777.102,224.855 777.67,223.165 778.239,222.75 778.807,223.376 779.375,223.113 779.944,222.863 780.512,225.744 781.08,226.355 781.649,229.812 782.217,231.258 782.785,231.327 783.354,231.45 783.922,236.618 784.49,237.295 785.059,236.064 785.627,233.742 786.195,234.59 786.764,233.386 787.332,234.045 787.9,232.922 788.469,231.839 789.037,231.626 789.606,230.667 790.174,231.733 790.742,230 791.311,229.173 791.879,230.546 792.447,230.556 793.016,230.671 793.584,229.905 794.152,229.101 794.721,227.153 795.289,228.311 795.857,225.527 796.426,225.012 796.994,226.484 797.562,225.856 798.131,226.297 798.699,224.771 799.267,225.261 799.836,227.98 800.404,227.521 800.972,227.763 801.541,228.056 802.109,228.378 802.678,228.758 803.246,228.237 803.814,228.649 804.383,230.012 804.951,231.339 805.519,231.483 806.088,231.616 806.656,230.696 807.224,228.76 807.793,229.107 808.361,229.265 808.929,229.395 809.498,229.795 810.066,228.948 810.634,229.341 811.203,230.445 811.771,233.679 812.339,237.677 812.908,237.169 813.476,238 814.044,235.646 814.613,235.365 815.181,236.131 815.749,235.041 816.318,233.94 816.886,235.063 817.455,234.627 818.023,233.329 818.591,233.072 819.16,232.845 819.728,233.916 820.296,231.786 820.865,232.902 821.433,235.193 822.001,234.116 822.57,233.031 823.138,231.932 823.706,233.158 824.275,232.954 824.843,236.037 825.411,233.956 825.98,233.809 826.548,233.689 827.116,233.754 827.685,232.518 828.253,232.483 828.821,233.501 829.39,231.44 829.958,229.418 830.526,229.367 831.095,233.505 831.663,232.382 832.232,232.492 832.8,231.46 833.368,230.571 833.937,229.619 834.505,229.667 835.073,228.568 835.642,230.925 836.21,231.125 836.778,230.16 837.347,230.182 837.915,229.181 838.483,228.288 839.052,229.64 839.62,229.912 840.188,231.008 840.757,233.149 841.325,231.993 841.893,231.846 842.462,231.925 843.03,233.024 843.598,233.882 844.167,232.65 844.735,235.915 845.304,235.762 845.872,236.606 846.44,234.113 847.009,232.8 847.577,233.765 848.145,232.72 848.714,232.77 849.282,232.544 849.85,232.615 850.419,231.403 850.987,232.404 851.555,233.367 852.124,234.21 852.692,233.98 853.26,232.814 853.829,233.864 854.397,233.46 854.965,232.115 855.534,234.12 856.102,233.695 856.67,233.535 857.239,231.111 857.807,229.846 858.375,229.896 858.944,230.037 859.512,229.163 860.081,227.126 860.649,225.234 861.217,227.453 861.786,227.511 862.354,227.696 862.922,226.955 863.491,227.482 864.059,228.826 864.627,229.024 865.196,228.219 865.764,228.461 866.332,229.541 866.901,231.531 867.469,231.473 868.037,230.322 868.606,234.343 869.174,233.986 869.742,232.727 870.311,232.322 870.879,231.303 871.447,231.433 872.016,231.395 872.584,231.34 873.152,229.187 873.721,230.244 874.289,229.199 874.858,228.105 875.426,226.37 875.994,226.691 876.563,228.797 877.131,229.015 877.699,231.158 878.268,230.934 878.836,229.901 879.404,229.078 879.973,230.199 880.541,226.951 881.109,226.041 881.678,225.422 882.246,225.821 882.814,227.215 883.383,228.496 883.951,227.602 884.519,226.792 885.088,227.163 885.656,227.324 886.224,226.547 886.793,226.932 887.361,227.306 887.93,227.696 888.498,230.135 889.066,228.332 889.635,226.581 890.203,227.978 890.771,229.213 891.34,226.307 891.908,226.766 892.476,228.194 893.045,230.528 893.613,228.574 894.181,228.795 894.75,231.147 895.318,231.25 895.886,231.125 896.455,230.315 897.023,229.315 897.591,229.672 898.16,229.782 898.728,228.018 899.296,227.322 899.865,229.659 900.433,229.918 901.001,230.038 901.57,231.054 902.138,231.017 902.707,228.139 903.275,229.551 903.843,230.768 904.412,230.798 904.98,230.929 905.548,231.932 906.117,231.76 906.685,231.571 907.253,231.71 907.822,233.864 908.39,233.856 908.958,234.781 909.527,231.464 910.095,228.355 910.663,228.67 911.232,230.022 911.8,233.268 912.368,232.989 912.937,234.941 913.505,235.863 914.073,237.813 914.642,237.098 915.21,236.598 915.779,236.384 916.347,236.122 916.915,238.732 917.484,238.019 918.052,237.658 918.62,236.961 919.189,236.321 919.757,234.88 920.325,236.745 920.894,235.237 921.462,236.021 922.03,236.628 922.599,236.286 923.167,235.705 923.735,236.383 924.304,235.816 924.872,233.218 925.44,229.901 926.009,230.806 926.577,231.971 927.145,231.633 927.714,232.402 928.282,230.076 928.85,230.103 929.419,230.149 929.987,226.838 930.556,228.015 931.124,228.066 931.692,230.442 932.261,229.148 932.829,226.167 933.397,227.119 933.966,228.295 934.534,228.437 935.102,226.567 935.671,227.741 936.239,228.858 936.807,227.102 937.376,229.314 937.944,229.197 938.512,228.159 939.081,229.239 939.649,227.531 940.217,226.757 940.786,226.995 941.354,227.353 941.922,230.665 942.491,231.692 943.059,232.602 943.627,232.349 944.196,231.084 944.764,232.027 945.333,229.665 945.901,231.562 946.469,231.328 947.038,232.137 947.606,235.045 948.174,231.669 948.743,231.409 949.311,232.274 949.879,234.031 950.448,233.554 951.016,233.117 951.584,232.804 952.153,233.506 952.721,233.301 953.289,234.146 953.858,234.746 954.426,234.567 954.994,233.36 955.563,235.01 956.131,235.543 956.699,235.052 957.268,234.746 957.836,233.515 958.405,233.2 958.973,232.803 959.541,234.773 960.11,232.32 960.678,232.175 961.246,230.869 961.815,229.652 962.383,229.767 962.951,227.64 963.52,224.401 964.088,223.518 964.656,223.746 965.225,223.962 965.793,226.357 966.361,225.666 966.93,225.872 967.498,227.265 968.066,226.394 968.635,226.837 969.203,229.431 969.771,227.255 970.34,225.442 970.908,225.863 971.476,226.103 972.045,225.335 972.613,222.731 973.182,224.221 973.75,223.818 974.318,225.426 974.887,225.817 975.455,227.104 976.023,229.21 976.592,230.262 977.16,228.528 977.728,226.519 978.297,225.758 978.865,227.068 979.433,225.33 980.002,227.848 980.57,226.981 981.138,228.321 981.707,230.676 982.275,231.836 982.843,231.931 983.412,229.927 983.98,228.096 984.548,228.411 985.117,225.507 985.685,227.839 986.253,227.987 986.822,228.145 987.39,228.343 987.959,230.406 988.527,227.237 989.095,227.577 989.664,228.897 990.232,228.015 990.8,229.221 991.369,226.355 991.937,226.552 992.505,227.77 993.074,228.308 993.642,231.805 994.21,232.665 994.779,231.929 995.347,230.054 995.915,229.268 996.484,228.51 997.052,228.739 997.62,229.998 998.189,229.205 998.757,229.33 999.325,232.578 999.894,234.628 1000.46,235.536 1001.03,235.273 1001.6,235.01 1002.17,236.764 1002.74,236.355 1003.3,232.856 1003.87,231.665 1004.44,232.861 1005.01,229.742 1005.58,232.008 1006.15,232.829 1006.71,232.526 1007.28,232.468 1007.85,233.457 1008.42,233.233 1008.99,233.075 1009.56,233.866 1010.12,233.417 1010.69,232.287 1011.26,231.935 1011.83,231.927 1012.4,233.998 1012.97,233.968 1013.53,232.871 1014.1,232.56 1014.67,234.615 1015.24,235.111 1015.81,235.835 1016.38,236.509 1016.94,234.992 1017.51,232.346 1018.08,230.173 1018.65,231.262 1019.22,232.199 1019.79,230.852 1020.35,228.498 1020.92,227.629 1021.49,225.56 1022.06,225.648 1022.63,226.888 1023.2,228.165 1023.76,228.17 1024.33,227.255 1024.9,228.335 1025.47,229.537 1026.04,230.814 1026.61,229.791 1027.17,230.188 1027.74,229.063 1028.31,230.039 1028.88,233.067 1029.45,233.87 1030.02,232.337 1030.58,232.999 1031.15,232.888 1031.72,230.34 1032.29,231.524 1032.86,231.468 1033.43,227.352 1033.99,227.498 1034.56,227.596 1035.13,228.631 1035.7,230.617 1036.27,230.301 1036.84,232.553 1037.4,230.45 1037.97,230.447 1038.54,229.487 1039.11,227.26 1039.68,226.512 1040.25,226.824 1040.81,227.166 1041.38,226.242 1041.95,227.521 1042.52,227.723 1043.09,228.783 1043.66,228.81 1044.22,230.073 1044.79,230.163 1045.36,229.099 1045.93,229.195 1046.5,228.21 1047.07,230.289 1047.63,230.451 1048.2,231.68 1048.77,232.626 1049.34,231.388 1049.91,231.178 1050.48,232.457 1051.05,232.372 1051.61,232.208 1052.18,233.091 1052.75,233.006 1053.32,233.859 1053.89,233.585 1054.46,232.274 1055.02,228.93 1055.59,227.685 1056.16,228.82 1056.73,228.791 1057.3,229.871 1057.87,231.912 1058.43,232.642 1059,231.311 1059.57,231.273 1060.14,229.144 1060.71,226.413 1061.28,224.638 1061.84,226.251 1062.41,225.535 1062.98,225.685 1063.55,226.144 1064.12,227.702 1064.69,228.866 1065.25,228.959 1065.82,227.058 1066.39,228.487 1066.96,230.807 1067.53,232.947 1068.1,232.841 1068.66,234.729 1069.23,234.554 1069.8,233.347 1070.37,233.18 1070.94,232.951 1071.51,232.579 1072.07,233.61 1072.64,234.383 1073.21,234.03 1073.78,232.67 1074.35,232.501 1074.92,232.526 1075.48,232.274 1076.05,231.01 1076.62,229.926 1077.19,227.765 1077.76,227.976 1078.33,227.891 1078.89,228.111 1079.46,229.213 1080.03,229.23 1080.6,228.3 1081.17,228.629 1081.74,227.699 1082.3,227.942 1082.87,228.193 1083.44,228.331 1084.01,228.512 1084.58,229.505 1085.15,226.462 1085.71,226.769 1086.28,222.965 1086.85,225.872 1087.42,226.174 1087.99,225.52 1088.56,226.05 1089.12,227.213 1089.69,226.497 1090.26,227.105 1090.83,229.788 1091.4,229.839 1091.97,228.868 1092.53,228.006 1093.1,228.133 1093.67,228.369 1094.24,228.599 1094.81,228.827 1095.38,231.017 1095.94,232.01 1096.51,232.019 1097.08,232.756 1097.65,235.626 1098.22,235.337 1098.79,233.933 1099.35,232.862 1099.92,231.587 1100.49,231.721 1101.06,232.888 1101.63,233.908 1102.2,232.627 1102.76,230.473 1103.33,230.432 1103.9,229.502 1104.47,229.579 1105.04,226.38 1105.61,226.561 1106.17,227.836 1106.74,224.944 1107.31,224.447 1107.88,224.878 1108.45,224.281 1109.02,224.883 1109.58,226.344 1110.15,226.78 1110.72,226.003 1111.29,226.372 1111.86,228.964 1112.43,229.171 1112.99,230.278 1113.56,230.441 1114.13,230.727 1114.7,231.57 1115.27,231.34 1115.84,230.407 1116.4,230.558 1116.97,230.559 1117.54,229.626 1118.11,229.568 1118.68,229.666 1119.25,230.667 1119.81,230.645 1120.38,229.88 1120.95,230.13 1121.52,229.059 1122.09,229.267 1122.66,230.573 1123.23,231.559 1123.79,231.449 1124.36,233.57 1124.93,234.434 1125.5,233.326 1126.07,231.103 1126.64,232.257 1127.2,231.316 1127.77,228.394 1128.34,227.334 1128.91,226.435 1129.48,225.706 1130.05,227.1 1130.61,226.559 1131.18,228.186 1131.75,228.463 1132.32,227.767 1132.89,228.988 1133.46,230.478 1134.02,230.558 1134.59,229.63 1135.16,229.712 1135.73,229.76 1136.3,228.69 1136.87,228.05 1137.43,228.246 1138,229.511 1138.57,233.853 1139.14,232.415 1139.71,234.407 1140.28,235.211 1140.84,234.961 1141.41,232.292 1141.98,233.339 1142.55,233.095 1143.12,232.996 1143.69,232.927 1144.25,234.784 1144.82,233.697 1145.39,231.332 1145.96,233.444 1146.53,233.358 1147.1,233.114 1147.66,232.959 1148.23,232.802 1148.8,232.579 1149.37,232.409 1149.94,232.258 1150.51,231.169 1151.07,229.19 1151.64,230.167 1152.21,231.268 1152.78,231.058 1153.35,229.92 1153.92,228.919 1154.48,228.078 1155.05,229.343 1155.62,229.145 1156.19,231.293 1156.76,233.471 1157.33,235.363 1157.89,235.095 1158.46,233.501 1159.03,234.495 1159.6,235.156 1160.17,234.753 1160.74,237.235 1161.3,237.829 1161.87,237.038 1162.44,236.479 1163.01,237.077 1163.58,236.574 1164.15,237.05 1164.71,238.636 1165.28,237.991 1165.85,237.33 1166.42,237.625 1166.99,236.943 1167.56,235.459 1168.12,234.931 1168.69,233.468 1169.26,231.949 1169.83,232.554 1170.4,232.368 1170.97,232.238 1171.53,231.926 1172.1,233.687 1172.67,232.231 1173.24,232.086 1173.81,231.739 1174.38,231.631 1174.94,230.501 1175.51,230.504 1176.08,229.258 1176.65,228.091 1177.22,227.293 1177.79,229.392 1178.35,229.282 1178.92,229.006 1179.49,230.026 1180.06,229.011 1180.63,227.985 1181.2,227.841 1181.76,227.634 1182.33,227.571 1182.9,226.637 1183.47,225.602 1184.04,225.834 1184.61,225.012 1185.17,226.39 1185.74,226.579 1186.31,227.941 1186.88,227.908 1187.45,225.873 1188.02,226.067 1188.58,226.265 1189.15,226.312 1189.72,228.728 1190.29,229.879 1190.86,228.772 1191.43,227.967 1192,227.235 1192.56,227.588 1193.13,228.726 1193.7,227.938 1194.27,230.113 1194.84,229.051 1195.41,228.02 1195.97,227.057 1196.54,228.217 1197.11,228.417 1197.68,227.442 1198.25,228.835 1198.82,227.734 1199.38,227.73 1199.95,226.764 1200.52,226.996 1201.09,226.373 1201.66,225.356 1202.23,227.846 1202.79,229.06 1203.36,229.099 1203.93,228.072 1204.5,229.241 1205.07,226.229 1205.64,228.475 1206.2,229.79 1206.77,229.934 1207.34,229.958 1207.91,227.925 1208.48,230.296 1209.05,230.503 1209.61,229.424 1210.18,231.696 1210.75,230.341 1211.32,230.433 1211.89,232.394 1212.46,232.22 1213.02,232.026 1213.59,233.036 1214.16,234.086 1214.73,233.824 1215.3,232.579 1215.87,232.329 1216.43,232.155 1217,232.101 1217.57,231.932 1218.14,231.326 1218.71,230.274 1219.28,230.215 1219.84,229.073 1220.41,228.975 1220.98,227.021 1221.55,227.134 1222.12,224.129 1222.69,224.725 1223.25,225.226 1223.82,225.608 1224.39,224.701 1224.96,225.801 1225.53,226.139 1226.1,225.411 1226.66,224.719 1227.23,224.104 1227.8,225.596 1228.37,225.025 1228.94,227.37 1229.51,228.652 1230.07,227.936 1230.64,229.15 1231.21,229.222 1231.78,229.177 1232.35,226.201 1232.92,224.418 1233.48,224.078 1234.05,225.801 1234.62,226.344 1235.19,226.625 1235.76,227.939 1236.33,229.144 1236.89,229.235 1237.46,229.381 1238.03,230.545 1238.6,232.573 1239.17,234.515 1239.74,235.338 1240.3,238.052 1240.87,235.147 1241.44,235.87 1242.01,234.368 1242.58,233.005 1243.15,229.805 1243.71,229.92 1244.28,230.029 1244.85,230.148 1245.42,228.233 1245.99,229.656 1246.56,229.714 1247.12,229.95 1247.69,232.011 1248.26,229.776 1248.83,231.828 1249.4,231.679 1249.97,232.695 1250.53,231.661 1251.1,230.59 1251.67,230.72 1252.24,232.03 1252.81,233.004 1253.38,231.68 1253.94,231.654 1254.51,229.656 1255.08,232.005 1255.65,231.74 1256.22,233.586 1256.79,233.287 1257.35,230.752 1257.92,231.64 1258.49,232.41 1259.06,233.415 1259.63,232.223 1260.2,228.946 1260.76,226.823 1261.33,226.954 1261.9,225.068 1262.47,225.281 1263.04,226.805 1263.61,225.96 1264.18,225.374 1264.74,227.979 1265.31,226.068 1265.88,226.519 1266.45,225.026 1267.02,224.268 1267.59,224.707 1268.15,224.284 1268.72,224.99 1269.29,225.477 1269.86,225.754 1270.43,225.155 1271,224.645 1271.56,225.25 1272.13,226.817 1272.7,228.352 1273.27,228.614 1273.84,231.105 1274.41,234.07 1274.97,234.634 1275.54,233.39 1276.11,234.469 1276.68,233.254 1277.25,234.121 1277.82,234.042 1278.38,235.121 1278.95,236.009 1279.52,233.606 1280.09,232.188 1280.66,233.198 1281.23,234.018 1281.79,232.756 1282.36,232.548 1282.93,231.579 1283.5,230.513 1284.07,230.642 1284.64,233.724 1285.2,234.493 1285.77,233.094 1286.34,234.041 1286.91,232.752 1287.48,232.765 1288.05,231.711 1288.61,228.624 1289.18,225.623 1289.75,226.845 1290.32,227.077 1290.89,227.438 1291.46,228.508 1292.02,227.471 1292.59,226.764 1293.16,224.187 1293.73,224.776 1294.3,224.216 1294.87,226.992 1295.43,228.266 1296,228.626 1296.57,228.725 1297.14,230.061 1297.71,235.272 1298.28,233.657 1298.84,233.521 1299.41,231.066 1299.98,232.04 1300.55,232.219 1301.12,232.252 1301.69,233.361 1302.25,235.007 1302.82,233.746 1303.39,234.693 1303.96,234.542 1304.53,233.3 1305.1,235.018 1305.66,234.802 1306.23,232.494 1306.8,231.38 1307.37,232.592 1307.94,231.701 1308.51,233.608 1309.07,237.479 1309.64,236.994 1310.21,238.838 1310.78,236.26 1311.35,237.874 1311.92,236.347 1312.48,233.934 1313.05,233.753 1313.62,233.642 1314.19,232.273 1314.76,234.964 1315.33,236.871 1315.89,235.26 1316.46,238.742 1317.03,241.251 1317.6,240.261 1318.17,239.349 1318.74,238.724 1319.3,237.023 1319.87,237.396 1320.44,235.597 1321.01,235.938 1321.58,236.541 1322.15,235.807 1322.71,237.286 1323.28,235.477 1323.85,234.839 1324.42,234.302 1324.99,231.84 1325.56,232.563 1326.12,233.126 1326.69,233.004 1327.26,231.795 1327.83,232.408 1328.4,231.964 1328.97,231.732 1329.53,232.409 1330.1,232.114 1330.67,229.92 1331.24,227.457 1331.81,227.633 1332.38,227.646 1332.94,223.248 1333.51,223.629 1334.08,222.919 1334.65,222.208 1335.22,221.551 1335.79,222.95 1336.36,222.328 1336.92,222.921 1337.49,225.255 1338.06,226.443 1338.63,227.453 1339.2,224.235 1339.77,227.699 1340.33,226.585 1340.9,223.691 1341.47,223.136 1342.04,224.402 1342.61,223.851 1343.18,223.224 1343.74,223.523 1344.31,227.996 1344.88,224.997 1345.45,225.217 1346.02,222.62 1346.59,223.075 1347.15,223.523 1347.72,224.175 1348.29,226.787 1348.86,226.001 1349.43,226.333 1350,228.56 1350.56,228.684 1351.13,228.755 1351.7,224.556 1352.27,224.039 1352.84,224.564 1353.41,225.012 1353.97,226.502 1354.54,225.8 1355.11,226.163 1355.68,227.378 1356.25,226.507 1356.82,227.722 1357.38,226.968 1357.95,226.237 1358.52,230.512 1359.09,230.655 1359.66,230.744 1360.23,229.711 1360.79,230.765 1361.36,229.747 1361.93,234.009 1362.5,236.971 1363.07,235.742 1363.64,235.384 1364.2,234.161 1364.77,235.038 1365.34,233.651 1365.91,234.339 1366.48,230.016 1367.05,230.094 1367.61,230.164 1368.18,229.385 1368.75,228.638 1369.32,230.79 1369.89,229.629 1370.46,229.658 1371.02,229.721 1371.59,230.89 1372.16,231.989 1372.73,232.592 1373.3,231.346 1373.87,231.136 1374.43,231.848 1375,231.611 1375.57,232.612 1376.14,229.461 1376.71,228.667 1377.28,224.711 1377.84,225.233 1378.41,227.406 1378.98,228.484 1379.55,229.52 1380.12,231.74 1380.69,230.434 1381.25,232.468 1381.82,232.142 1382.39,232.043 1382.96,231.701 1383.53,231.712 1384.1,230.438 1384.66,232.434 1385.23,232.324 1385.8,232.143 1386.37,233.074 1386.94,232.842 1387.51,233.571 1388.07,233.172 1388.64,232.86 1389.21,231.508 1389.78,232.5 1390.35,233.528 1390.92,234.303 1391.48,233.11 1392.05,234.638 1392.62,233.317 1393.19,231.932 1393.76,233.755 1394.33,232.462 1394.89,230.194 1395.46,230.93 1396.03,231.081 1396.6,229.926 1397.17,230.905 1397.74,230.924 1398.3,229.751 1398.87,229.567 1399.44,230.543 1400.01,228.28 1400.58,228.146 1401.15,229.121 1401.71,228.98 1402.28,225.727 1402.85,225.075 1403.42,225.335 1403.99,225.871 1404.56,226.17 1405.13,225.349 1405.69,227.605 1406.26,226.829 1406.83,226.255 1407.4,228.715 1407.97,228.927 1408.54,231.206 1409.1,233.348 1409.67,232.029 1410.24,230.661 1410.81,228.378 1411.38,226.213 1411.95,227.383 1412.51,226.459 1413.08,228.951 1413.65,228.01 1414.22,229.094 1414.79,229.074 1415.36,230.215 1415.92,229.286 1416.49,230.337 1417.06,229.256 1417.63,230.252 1418.2,230.325 1418.77,231.302 1419.33,230.959 1419.9,229.656 1420.47,231.871 1421.04,230.659 1421.61,227.458 1422.18,227.749 1422.74,227.825 1423.31,228.777 1423.88,229.754 1424.45,230.836 1425.02,230.795 1425.59,230.921 1426.15,230.889 1426.72,230.677 1427.29,232.501 1427.86,230.213 1428.43,230.261 1429,230.149 1429.56,230.121 1430.13,232.305 1430.7,233.018 1431.27,232.729 1431.84,231.561 1432.41,228.751 1432.97,231.031 1433.54,232.026 1434.11,231.678 1434.68,233.984 1435.25,232.838 1435.82,231.583 1436.38,230.7 1436.95,230.633 1437.52,230.589 1438.09,229.378 1438.66,228.436 1439.23,228.708 1439.79,228.656 1440.36,228.759 1440.93,229.868 1441.5,228.866 1442.07,229.992 1442.64,231.216 1443.2,231.001 1443.77,231.734 1444.34,229.778 1444.91,231.921 1445.48,231.72 1446.05,230.48 1446.61,231.387 1447.18,231.194 1447.75,231.092 1448.32,230.119 1448.89,231.26 1449.46,231.153 1450.02,227.815 1450.59,229.237 1451.16,229.172 1451.73,229.249 1452.3,230.144 1452.87,229.076 1453.43,227.206 1454,226.335 1454.57,225.347 1455.14,225.701 1455.71,226.915 1456.28,226.039 1456.84,223.273 1457.41,223.758 1457.98,222.029 1458.55,223.459 1459.12,225.987 1459.69,229.369 1460.25,229.467 1460.82,227.466 1461.39,226.558 1461.96,226.923 1462.53,227.32 1463.1,231.633 1463.66,230.545 1464.23,229.795 1464.8,230.902 1465.37,231.957 1465.94,231.955 1466.51,235.134 1467.07,233.678 1467.64,233.608 1468.21,234.234 1468.78,234.075 1469.35,235.764 1469.92,234.501 1470.48,236.132 1471.05,234.645 1471.62,234.381 1472.19,234.957 1472.76,233.638 1473.33,233.3 1473.89,230.981 1474.46,229.817 1475.03,231.846 1475.6,232.621 1476.17,231.651 1476.74,230.49 1477.31,228.291 1477.87,228.293 1478.44,226.578 1479.01,228.958 1479.58,228.013 1480.15,230.008 1480.72,229.165 1481.28,230.198 1481.85,228.937 1482.42,229.078 1482.99,228.113 1483.56,227.262 1484.13,228.447 1484.69,230.422 1485.26,230.312 1485.83,231.64 1486.4,232.635 1486.97,232.531 1487.54,233.34 1488.1,234.287 1488.67,235.125 1489.24,233.891 1489.81,232.792 1490.38,232.86 1490.95,233.595 1491.51,234.263 1492.08,232.989 1492.65,233.824 1493.22,232.324 1493.79,232.07 1494.36,231.939 1494.92,230.75 1495.49,232.446 1496.06,233.286 1496.63,232.738 1497.2,233.431 1497.77,231.06 1498.33,229.86 1498.9,228.633 1499.47,227.553 1500.04,225.526 1500.61,224.867 1501.18,223.913 1501.74,223.164 1502.31,224.485 1502.88,223.684 1503.45,225.528 1504.02,225.873 1504.59,228.258 1505.15,229.356 1505.72,227.449 1506.29,228.46 1506.86,228.426 1507.43,230.557 1508,228.412 1508.56,230.671 1509.13,229.606 1509.7,226.541 1510.27,227.065 1510.84,224.185 1511.41,226.83 1511.97,224.874 1512.54,226.183 1513.11,225.488 1513.68,225.931 1514.25,227.291 1514.82,228.535 1515.38,225.46 1515.95,227.951 1516.52,227.13 1517.09,228.193 1517.66,229.363 1518.23,224.113 1518.79,227.61 1519.36,227.874 1519.93,230.11 1520.5,226.916 1521.07,227.232 1521.64,227.279 1522.2,228.235 1522.77,228.442 1523.34,228.986 1523.91,230.155 1524.48,228.15 1525.05,229.387 1525.61,230.416 1526.18,231.41 1526.75,232.473 1527.32,232.39 1527.89,232.213 1528.46,231.058 1529.02,230.959 1529.59,230.983 1530.16,231.182 1530.73,231.18 1531.3,232.206 1531.87,233.961 1532.43,233.809 1533,235.449 1533.57,234.031 1534.14,233.771 1534.71,233.288 1535.28,233.069 1535.84,231.859 1536.41,232.927 1536.98,229.664 1537.55,229.512 1538.12,230.538 1538.69,231.546 1539.25,229.306 1539.82,231.406 1540.39,230 1540.96,232.002 1541.53,233.931 1542.1,232.665 1542.66,230.483 1543.23,230.504 1543.8,231.607 1544.37,231.461 1544.94,231.38 1545.51,231.2 1546.08,231.188 1546.64,229.165 1547.21,229.187 1547.78,230.362 1548.35,232.605 1548.92,232.774 1549.49,232.632 1550.05,231.436 1550.62,231.348 1551.19,231.104 1551.76,230.917 1552.33,228.733 1552.9,227.899 1553.46,228.068 1554.03,229.062 1554.6,227.962 1555.17,228.267 1555.74,227.096 1556.31,229.514 1556.87,231.825 1557.44,236.018 1558.01,235.492 1558.58,237.006 1559.15,237.535 1559.72,236.087 1560.28,236.664 1560.85,238.325 1561.42,237.534 1561.99,235.868 1562.56,235.346 1563.13,234.888 1563.69,234.418 1564.26,231.681 1564.83,231.803 1565.4,231.501 1565.97,231.263 1566.54,229.991 1567.1,229.777 1567.67,227.812 1568.24,227.909 1568.81,228 1569.38,230.034 1569.95,228.903 1570.51,231.091 1571.08,232.075 1571.65,230.812 1572.22,229.492 1572.79,228.575 1573.36,227.701 1573.92,226.61 1574.49,229.817 1575.06,228.69 1575.63,229.608 1576.2,227.601 1576.77,226.843 1577.33,226.212 1577.9,225.426 1578.47,225.845 1579.04,227.058 1579.61,227.209 1580.18,225.499 1580.74,220.669 1581.31,220.222 1581.88,219.895 1582.45,220.503 1583.02,222.096 1583.59,221.85 1584.15,221.474 1584.72,223.033 1585.29,222.52 1585.86,228.329 1586.43,228.28 1587,228.36 1587.56,229.709 1588.13,230.651 1588.7,228.509 1589.27,231.761 1589.84,234.032 1590.41,234.86 1590.97,234.616 1591.54,232.266 1592.11,232.227 1592.68,232.092 1593.25,231.787 1593.82,232.685 1594.38,234.402 1594.95,236.219 1595.52,233.809 1596.09,233.589 1596.66,233.114 1597.23,231.621 1597.79,231.491 1598.36,230.271 1598.93,231.228 1599.5,231.072 1600.07,229.952 1600.64,228.866 1601.2,228.922 1601.77,227.941 1602.34,230.177 1602.91,229.29 1603.48,228.157 1604.05,227.267 1604.61,226.201 1605.18,225.27 1605.75,226.644 1606.32,229.084 1606.89,230.239 1607.46,231.241 1608.02,231.91 1608.59,230.799 1609.16,231.927 1609.73,231.834 1610.3,232.543 1610.87,230.341 1611.43,229.269 1612,228.455 1612.57,228.653 1613.14,228.751 1613.71,230.948 1614.28,230.966 1614.84,227.042 1615.41,225.438 1615.98,225.84 1616.55,226.203 1617.12,226.729 1617.69,226.902 1618.26,226.003 1618.82,225.365 1619.39,225.909 1619.96,226.179 1620.53,227.56 1621.1,227.786 1621.67,227.128 1622.23,229.195 1622.8,228.387 1623.37,229.642 1623.94,230.79 1624.51,228.894 1625.08,229.288 1625.64,227.513 1626.21,227.764 1626.78,228.873 1627.35,230.194 1627.92,230.417 1628.49,231.225 1629.05,231.23 1629.62,233.446 1630.19,229.091 1630.76,229.273 1631.33,228.422 1631.9,228.648 1632.46,228.915 1633.03,227.993 1633.6,229.137 1634.17,229.06 1634.74,228.047 1635.31,229.298 1635.87,229.469 1636.44,229.567 1637.01,231.891 1637.58,233.771 1638.15,234.673 1638.72,230.273 1639.28,229.358 1639.85,228.362 1640.42,230.709 1640.99,231.834 1641.56,233.816 1642.13,233.695 1642.69,234.633 1643.26,236.602 1643.83,235.176 1644.4,234.963 1644.97,234.618 1645.54,236.236 1646.1,236.944 1646.67,238.426 1647.24,238.625 1647.81,240.074 1648.38,238.102 1648.95,236.434 1649.51,238.994 1650.08,239.398 1650.65,236.608 1651.22,232.971 1651.79,231.801 1652.36,231.548 1652.92,231.379 1653.49,230.03 1654.06,229.937 1654.63,228.888 1655.2,228.978 1655.77,228.03 1656.33,230.167 1656.9,229.085 1657.47,228.072 1658.04,227.112 1658.61,227.181 1659.18,226.294 1659.74,226.716 1660.31,223.672 1660.88,225.26 1661.45,228.492 1662.02,229.324 1662.59,230.356 1663.15,232.372 1663.72,231.275 1664.29,232.188 1664.86,228.057 1665.43,228.145 1666,228.329 1666.56,230.529 1667.13,229.8 1667.7,228.809 1668.27,229.76 1668.84,229.705 1669.41,228.978 1669.97,229.128 1670.54,230.318 1671.11,230.314 1671.68,232.211 1672.25,233.072 1672.82,231.625 1673.38,233.584 1673.95,234.109 1674.52,235.995 1675.09,234.443 1675.66,238.18 1676.23,237.419 1676.79,238.662 1677.36,236.899 1677.93,236.447 1678.5,236.026 1679.07,233.267 1679.64,232.882 1680.2,230.383 1680.77,228.257 1681.34,227.227 1681.91,225.2 1682.48,226.332 1683.05,225.396 1683.61,226.649 1684.18,227.93 1684.75,225.975 1685.32,225.068 1685.89,225.523 1686.46,223.71 1687.02,221.895 1687.59,222.326 1688.16,222.935 1688.73,223.221 1689.3,224.82 1689.87,226.216 1690.44,226.479 1691,226.722 1691.57,228.932 1692.14,230.129 1692.71,229.307 1693.28,230.263 1693.85,231.072 1694.41,231.038 1694.98,230.911 1695.55,229.927 1696.12,230.917 1696.69,230.816 1697.26,230.656 1697.82,230.379 1698.39,230.438 1698.96,229.476 1699.53,230.576 1700.1,229.351 1700.67,229.27 1701.23,228.437 1701.8,228.311 1702.37,228.145 1702.94,227.021 1703.51,228.8 1704.08,232.085 1704.64,230.791 1705.21,229.707 1705.78,228.863 1706.35,230.096 1706.92,229.883 1707.49,231.869 1708.05,229.68 1708.62,230.799 1709.19,227.889 1709.76,231.413 1710.33,231.418 1710.9,231.299 1711.46,229.16 1712.03,231.138 1712.6,232.201 1713.17,232.973 1713.74,235.028 1714.31,232.496 1714.87,231.266 1715.44,232.156 1716.01,231.033 1716.58,231.143 1717.15,228.095 1717.72,228.401 1718.28,228.335 1718.85,228.45 1719.42,230.828 1719.99,229.624 1720.56,229.456 1721.13,229.29 1721.69,231.352 1722.26,231.408 1722.83,231.28 1723.4,231.141 1723.97,233.065 1724.54,233.853 1725.1,233.64 1725.67,234.377 1726.24,233.898 1726.81,232.534 1727.38,233.261 1727.95,234.069 1728.51,232.6 1729.08,231.496 1729.65,230.365 1730.22,232.433 1730.79,230.137 1731.36,231.037 1731.92,231.755 1732.49,231.581 1733.06,233.476 1733.63,233.096 1734.2,231.713 1734.77,233.647 1735.33,232.237 1735.9,230.837 1736.47,233.793 1737.04,233.29 1737.61,233.169 1738.18,232.877 1738.74,231.232 1739.31,230.086 1739.88,233.177 1740.45,229.996 1741.02,229.887 1741.59,231.883 1742.15,230.747 1742.72,230.656 1743.29,230.625 1743.86,230.507 1744.43,228.363 1745,228.422 1745.56,226.432 1746.13,226.624 1746.7,225.845 1747.27,230.141 1747.84,227.881 1748.41,228.012 1748.97,227.315 1749.54,224.297 1750.11,223.543 1750.68,224.043 1751.25,224.604 1751.82,226.987 1752.38,225.986 1752.95,228.134 1753.52,227.09 1754.09,228.317 1754.66,226.505 1755.23,226.903 1755.79,228.208 1756.36,230.393 1756.93,231.556 1757.5,228.316 1758.07,226.367 1758.64,226.539 1759.21,227.593 1759.77,228.899 1760.34,229.04 1760.91,228.239 1761.48,226.465 1762.05,226.811 1762.62,226.879 1763.18,227.098 1763.75,227.211 1764.32,229.737 1764.89,229.828 1765.46,228.729 1766.03,228.925 1766.59,227.883 1767.16,228.1 1767.73,230.305 1768.3,230.472 1768.87,228.496 1769.44,228.787 1770,229.982 1770.57,227.974 1771.14,228.274 1771.71,229.528 1772.28,228.643 1772.85,229.913 1773.41,229.984 1773.98,231.089 1774.55,229.106 1775.12,229.264 1775.69,229.541 1776.26,231.638 1776.82,232.611 1777.39,232.426 1777.96,231.37 1778.53,230.428 1779.1,230.504 1779.67,234.529 1780.23,233.057 1780.8,232.709 1781.37,232.598 1781.94,233.56 1782.51,233.239 1783.08,233.945 1783.64,233.711 1784.21,233.715 1784.78,234.656 1785.35,234.436 1785.92,234.213 1786.49,233.975 1787.05,233.736 1787.62,232.403 1788.19,232.307 1788.76,233.32 1789.33,231.97 1789.9,230.736 1790.46,230.626 1791.03,227.584 1791.6,226.648 1792.17,224.814 1792.74,224.067 1793.31,223.508 1793.87,225.013 1794.44,226.306 1795.01,225.454 1795.58,227.798 1796.15,227.878 1796.72,229.342 1797.28,228.316 1797.85,227.38 1798.42,227.542 1798.99,226.806 1799.56,228.238 1800.13,226.294 1800.69,227.606 1801.26,227.674 1801.83,226.911 1802.4,228.298 1802.97,228.432 1803.54,226.405 1804.1,227.923 1804.67,227.049 1805.24,225.295 1805.81,225.756 1806.38,225.283 1806.95,228.712 1807.51,229.882 1808.08,229.049 1808.65,230.265 1809.22,230.211 1809.79,234.549 1810.36,234.164 1810.92,232.857 1811.49,232.858 1812.06,231.59 1812.63,232.435 1813.2,235.499 1813.77,237.136 1814.33,236.67 1814.9,237.056 1815.47,236.492 1816.04,235.899 1816.61,233.355 1817.18,235.206 1817.74,234.662 1818.31,234.263 1818.88,231.853 1819.45,231.645 1820.02,230.518 1820.59,231.528 1821.15,232.335 1821.72,231.08 1822.29,232.026 1822.86,229.828 1823.43,229.82 1824,229.698 1824.56,229.821 1825.13,229.878 1825.7,231.02 1826.27,230.861 1826.84,229.696 1827.41,228.879 1827.97,231.235 1828.54,232.332 1829.11,232.359 1829.68,231.273 1830.25,231.246 1830.82,231.135 1831.39,229.861 1831.95,230.163 1832.52,230.094 1833.09,228.964 1833.66,230.23 1834.23,230.143 1834.8,227.047 1835.36,224.924 1835.93,224.355 1836.5,222.754 1837.07,222.245 1837.64,223.836 1838.21,225.069 1838.77,224.347 1839.34,227.773 1839.91,229.054 1840.48,229.088 1841.05,229.124 1841.62,229.069 1842.18,232.127 1842.75,233.05 1843.32,230.851 1843.89,228.839 1844.46,228.013 1845.03,229.292 1845.59,229.562 1846.16,232.678 1846.73,233.652 1847.3,233.376 1847.87,232.202 1848.44,233.112 1849,234.721 1849.57,233.279 1850.14,234.944 1850.71,235.604 1851.28,234.319 1851.85,233.765 1852.41,233.511 1852.98,231.347 1853.55,231.475 1854.12,229.205 1854.69,227.122 1855.26,228.379 1855.82,229.629 1856.39,229.755 1856.96,228.768 1857.53,229.881 1858.1,229.888 1858.67,229.9 1859.23,231.015 1859.8,230.081 1860.37,230.005 1860.94,228.837 1861.51,230.104 1862.08,229.101 1862.64,230.29 1863.21,230.234 1863.78,232.061 1864.35,231.752 1864.92,232.521 1865.49,233.375 1866.05,233.183 1866.62,231.701 1867.19,229.288 1867.76,227.331 1868.33,228.333 1868.9,228.399 1869.46,228.447 1870.03,227.374 1870.6,225.581 1871.17,224.913 1871.74,226.426 1872.31,226.707 1872.87,226.939 1873.44,227.079 1874.01,228.237 1874.58,228.462 1875.15,228.32 1875.72,227.365 1876.28,227.445 1876.85,225.473 1877.42,224.81 1877.99,224.961 1878.56,225.389 1879.13,225.737 1879.69,226.014 1880.26,224.233 1880.83,225.891 1881.4,228.451 1881.97,226.635 1882.54,229.037 1883.1,229.343 1883.67,231.411 1884.24,231.367 1884.81,233.245 1885.38,232.112 1885.95,231.001 1886.51,231.816 1887.08,230.754 1887.65,231.697 1888.22,231.554 1888.79,231.701 1889.36,231.604 1889.92,231.478 1890.49,233.363 1891.06,231.315 1891.63,232.446 1892.2,230.288 1892.77,229.141 1893.33,228.199 1893.9,230.446 1894.47,230.407 1895.04,231.358 1895.61,230.236 1896.18,233.39 1896.74,235.128 1897.31,230.437 1897.88,230.435 1898.45,230.307 1899.02,231.314 1899.59,231.141 1900.16,230.144 1900.72,229.098 1901.29,229.94 1901.86,230.981 1902.43,229.922 1903,229.823 1903.57,230.712 1904.13,230.573 1904.7,230.622 1905.27,231.508 1905.84,232.453 1906.41,232.35 1906.98,234.416 1907.54,231.981 1908.11,229.91 1908.68,227.94 1909.25,227.822 1909.82,227.799 1910.39,227.737 1910.95,228.902 1911.52,229.963 1912.09,229.016 1912.66,229.084 1913.23,228.038 1913.8,225.36 1914.36,224.697 1914.93,225.187 1915.5,225.567 1916.07,225.944 1916.64,226.404 1917.21,227.669 1917.77,227.712 1918.34,230.134 1918.91,231.371 1919.48,231.509 1920.05,231.598 1920.62,232.61 1921.18,234.415 1921.75,234.216 1922.32,232.984 1922.89,232.758 1923.46,231.542 1924.03,232.586 1924.59,231.362 1925.16,230.183 1925.73,230.262 1926.3,230.264 1926.87,234.167 1927.44,232.025 1928,232.926 1928.57,233.045 1929.14,233.185 1929.71,232.057 1930.28,232.923 1930.85,230.644 1931.41,232.605 1931.98,232.546 1932.55,231.284 1933.12,231.079 1933.69,234.066 1934.26,232.582 1934.82,230.23 1935.39,230.026 1935.96,231.191 1936.53,230.193 1937.1,231.03 1937.67,232.105 1938.23,232.908 1938.8,229.715 1939.37,229.564 1939.94,229.784 1940.51,231.002 1941.08,229.97 1941.64,230.043 1942.21,229.186 1942.78,230.345 1943.35,230.396 1943.92,232.508 1944.49,230.233 1945.05,231.089 1945.62,230.955 1946.19,230.963 1946.76,228.669 1947.33,226.642 1947.9,224.706 1948.46,224.202 1949.03,225.428 1949.6,226.915 1950.17,227.256 1950.74,229.764 1951.31,228.837 1951.87,227.704 1952.44,229.908 1953.01,231.058 1953.58,228.04 1954.15,231.309 1954.72,231.336 1955.28,230.255 1955.85,228.151 1956.42,227.239 1956.99,225.111 1957.56,224.515 1958.13,224.822 1958.69,227.436 1959.26,227.483 1959.83,228.711 1960.4,230.016 1960.97,233.011 1961.54,229.596 1962.1,229.543 1962.67,228.725 1963.24,228.577 1963.81,230.912 1964.38,227.851 1964.95,228.05 1965.51,228.463 1966.08,230.674 1966.65,231.695 1967.22,231.598 1967.79,230.495 1968.36,231.396 1968.92,231.553 1969.49,232.638 1970.06,235.662 1970.63,235.265 1971.2,234.67 1971.77,235.533 1972.34,236.259 1972.9,234.774 1973.47,232.462 1974.04,230.236 1974.61,230.259 1975.18,233.171 1975.75,233.725 1976.31,235.31 1976.88,232.944 1977.45,233.676 1978.02,234.458 1978.59,229.984 1979.16,229.225 1979.72,228.327 1980.29,227.57 1980.86,228.642 1981.43,229.723 1982,228.912 1982.57,229.916 1983.13,228.046 1983.7,228.218 1984.27,229.42 1984.84,229.577 1985.41,228.705 1985.98,227.715 1986.54,228.907 1987.11,227.914 1987.68,227.225 1988.25,226.508 1988.82,227.653 1989.39,227.915 1989.95,228.131 1990.52,228.336 1991.09,230.433 1991.66,231.546 1992.23,231.363 1992.8,233.078 1993.36,231.834 1993.93,232.892 1994.5,233.527 1995.07,233.294 1995.64,232.165 1996.21,233.065 1996.77,230.973 1997.34,230.134 1997.91,231.382 1998.48,229.422 1999.05,229.482 1999.62,228.279 2000.18,228.244 2000.75,226.097 2001.32,226.487 2001.89,226.672 2002.46,228.793 2003.03,226.933 2003.59,226.164 2004.16,224.418 2004.73,227.999 2005.3,228.215 2005.87,229.376 2006.44,229.588 2007,229.588 2007.57,227.617 2008.14,228.901 2008.71,230.052 2009.28,229.959 2009.85,231.157 2010.41,230.931 2010.98,230.845 2011.55,230.679 2012.12,231.628 2012.69,232.633 2013.26,231.252 2013.82,230.143 2014.39,230.1 2014.96,228.933 2015.53,232.036 2016.1,230.944 2016.67,228.847 2017.23,228.848 2017.8,228.003 2018.37,226.221 2018.94,227.544 2019.51,229.739 2020.08,229.671 2020.64,230.811 2021.21,232.902 2021.78,230.407 2022.35,229.283 2022.92,226.063 2023.49,229.217 2024.05,229.344 2024.62,228.367 2025.19,228.552 2025.76,228.83 2026.33,229.047 2026.9,232.362 2027.46,232.191 2028.03,232.221 2028.6,230.12 2029.17,229.933 2029.74,230.952 2030.31,229.75 2030.87,229.725 2031.44,229.614 2032.01,230.79 2032.58,231.704 2033.15,230.571 2033.72,231.529 2034.28,231.495 2034.85,231.333 2035.42,230.141 2035.99,228.165 2036.56,230.323 2037.13,228.976 2037.69,227.986 2038.26,230.362 2038.83,229.243 2039.4,231.275 2039.97,231.081 2040.54,228.983 2041.11,230.292 2041.67,230.386 2042.24,231.609 2042.81,229.528 2043.38,228.264 2043.95,228.284 2044.52,230.694 2045.08,231.83 2045.65,232.606 2046.22,232.519 2046.79,234.522 2047.36,232.21 2047.93,232.015 2048.49,230.853 2049.06,229.867 2049.63,230.939 2050.2,231.09 2050.77,233.225 2051.34,233.258 2051.9,235.08 2052.47,234.659 2053.04,233.195 2053.61,234.986 2054.18,233.736 2054.75,233.483 2055.31,233.281 2055.88,232.029 2056.45,232.862 2057.02,232.791 2057.59,232.634 2058.16,231.538 2058.72,229.42 2059.29,228.467 2059.86,225.481 2060.43,230.017 2061,229.919 2061.57,232.007 2062.13,230.994 2062.7,230.831 2063.27,234.162 2063.84,233.925 2064.41,233.785 2064.98,234.614 2065.54,235.312 2066.11,232.768 2066.68,230.3 2067.25,231.611 2067.82,231.44 2068.39,231.219 2068.95,232.091 2069.52,231.925 2070.09,230.791 2070.66,228.506 2071.23,228.838 2071.8,227.804 2072.36,229.882 2072.93,229.573 2073.5,230.729 2074.07,229.481 2074.64,231.622 2075.21,231.4 2075.77,230.13 2076.34,230.968 2076.91,230.828 2077.48,230.835 2078.05,230.019 2078.62,229.986 2079.18,229.753 2079.75,227.776 2080.32,226.85 2080.89,227.007 2081.46,224.215 2082.03,224.485 2082.59,224.612 2083.16,224.004 2083.73,224.459 2084.3,223.961 2084.87,225.342 2085.44,223.82 2086,224.336 2086.57,225.853 2087.14,227.31 2087.71,225.401 2088.28,223.596 2088.85,224.983 2089.41,226.403 2089.98,226.968 2090.55,227.337 2091.12,227.829 2091.69,226.945 2092.26,227.162 2092.82,227.552 2093.39,227.88 2093.96,228.233 2094.53,226.312 2095.1,226.488 2095.67,226.551 2096.23,228.807 2096.8,228.885 2097.37,229.878 2097.94,226.898 2098.51,229.156 2099.08,229.346 2099.64,229.443 2100.21,228.822 2100.78,230.022 2101.35,229.047 2101.92,228.983 2102.49,230.055 2103.05,230.242 2103.62,230.278 2104.19,230.156 2104.76,230.226 2105.33,229.284 2105.9,231.441 2106.46,232.495 2107.03,232.451 2107.6,231.293 2108.17,232.151 2108.74,230.08 2109.31,233.167 2109.87,231.984 2110.44,232.956 2111.01,233.831 2111.58,234.529 2112.15,234.196 2112.72,233.874 2113.29,231.653 2113.85,231.619 2114.42,231.518 2114.99,233.629 2115.56,233.447 2116.13,234.371 2116.7,233.003 2117.26,232.889 2117.83,232.612 2118.4,233.472 2118.97,234.429 2119.54,234.073 2120.11,233.711 2120.67,233.34 2121.24,233.202 2121.81,232.806 2122.38,232.848 2122.95,233.695 2123.52,232.32 2124.08,232.853 2124.65,231.542 2125.22,229.214 2125.79,231.36 2126.36,232.285 2126.93,233.14 2127.49,233.068 2128.06,232.75 2128.63,231.529 2129.2,230.128 2129.77,231.266 2130.34,230.204 2130.9,230.284 2131.47,229.124 2132.04,230.106 2132.61,232.993 2133.18,233.673 2133.75,232.484 2134.31,233.101 2134.88,233 2135.45,232.743 2136.02,231.392 2136.59,231.033 2137.16,230.772 2137.72,232.764 2138.29,231.222 2138.86,231.998 2139.43,229.963 2140,228.933 2140.57,229.142 2141.13,228.774 2141.7,225.685 2142.27,225.692 2142.84,225.943 2143.41,225.11 2143.98,226.498 2144.54,225.808 2145.11,225.175 2145.68,223.395 2146.25,221.827 2146.82,223.562 2147.39,224.949 2147.95,224.264 2148.52,223.384 2149.09,223.726 2149.66,224.138 2150.23,225.668 2150.8,223.992 2151.36,224.571 2151.93,228.385 2152.5,227.334 2153.07,229.531 2153.64,228.558 2154.21,227.683 2154.77,227.767 2155.34,228.728 2155.91,229.035 2156.48,229.191 2157.05,228.446 2157.62,228.748 2158.18,228.857 2158.75,230.256 2159.32,230.291 2159.89,230.604 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.018\n  with uncertainty of ± 0.0011574310560809084\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01486 ± (0.00207909, 0.00214507) (MC)\n  95% confidence interval: [-4.01916, -4.01076] (MC)\n  linear error propagation: -4.0149 ± 0.00208924\n  |δ_y| = |0.00125301| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014861527816752, val_l = 0.004300113434347885, val_u = 0.004098089142973826)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip650\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip651\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip652\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1134.04 2211.02,1134.04 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,958.252 2211.02,958.252 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,782.463 2211.02,782.463 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,606.674 2211.02,606.674 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,430.885 2211.02,430.885 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,255.096 2211.02,255.096 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1134.04 365.751,1134.04 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,958.252 365.751,958.252 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,782.463 365.751,782.463 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,606.674 365.751,606.674 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,430.885 365.751,430.885 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,255.096 365.751,255.096 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M298.909 1119.84 Q295.298 1119.84 293.469 1123.4 Q291.664 1126.95 291.664 1134.08 Q291.664 1141.18 293.469 1144.75 Q295.298 1148.29 298.909 1148.29 Q302.543 1148.29 304.349 1144.75 Q306.177 1141.18 306.177 1134.08 Q306.177 1126.95 304.349 1123.4 Q302.543 1119.84 298.909 1119.84 M298.909 1116.14 Q304.719 1116.14 307.775 1120.74 Q310.853 1125.33 310.853 1134.08 Q310.853 1142.8 307.775 1147.41 Q304.719 1151.99 298.909 1151.99 Q293.099 1151.99 290.02 1147.41 Q286.964 1142.8 286.964 1134.08 Q286.964 1125.33 290.02 1120.74 Q293.099 1116.14 298.909 1116.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M259.557 971.597 L267.196 971.597 L267.196 945.231 L258.886 946.898 L258.886 942.639 L267.15 940.972 L271.826 940.972 L271.826 971.597 L279.465 971.597 L279.465 975.532 L259.557 975.532 L259.557 971.597 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 944.051 Q295.298 944.051 293.469 947.616 Q291.664 951.157 291.664 958.287 Q291.664 965.393 293.469 968.958 Q295.298 972.5 298.909 972.5 Q302.543 972.5 304.349 968.958 Q306.177 965.393 306.177 958.287 Q306.177 951.157 304.349 947.616 Q302.543 944.051 298.909 944.051 M298.909 940.347 Q304.719 940.347 307.775 944.954 Q310.853 949.537 310.853 958.287 Q310.853 967.014 307.775 971.62 Q304.719 976.203 298.909 976.203 Q293.099 976.203 290.02 971.62 Q286.964 967.014 286.964 958.287 Q286.964 949.537 290.02 944.954 Q293.099 940.347 298.909 940.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M262.775 795.808 L279.094 795.808 L279.094 799.743 L257.15 799.743 L257.15 795.808 Q259.812 793.053 264.395 788.424 Q269.002 783.771 270.182 782.428 Q272.428 779.905 273.307 778.169 Q274.21 776.41 274.21 774.72 Q274.21 771.965 272.266 770.229 Q270.344 768.493 267.242 768.493 Q265.043 768.493 262.59 769.257 Q260.159 770.021 257.381 771.572 L257.381 766.85 Q260.205 765.715 262.659 765.137 Q265.113 764.558 267.15 764.558 Q272.52 764.558 275.715 767.243 Q278.909 769.928 278.909 774.419 Q278.909 776.549 278.099 778.47 Q277.312 780.368 275.205 782.961 Q274.627 783.632 271.525 786.85 Q268.423 790.044 262.775 795.808 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 768.262 Q295.298 768.262 293.469 771.827 Q291.664 775.368 291.664 782.498 Q291.664 789.604 293.469 793.169 Q295.298 796.711 298.909 796.711 Q302.543 796.711 304.349 793.169 Q306.177 789.604 306.177 782.498 Q306.177 775.368 304.349 771.827 Q302.543 768.262 298.909 768.262 M298.909 764.558 Q304.719 764.558 307.775 769.164 Q310.853 773.748 310.853 782.498 Q310.853 791.225 307.775 795.831 Q304.719 800.414 298.909 800.414 Q293.099 800.414 290.02 795.831 Q286.964 791.225 286.964 782.498 Q286.964 773.748 290.02 769.164 Q293.099 764.558 298.909 764.558 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M272.914 605.32 Q276.27 606.037 278.145 608.306 Q280.043 610.574 280.043 613.908 Q280.043 619.023 276.525 621.824 Q273.006 624.625 266.525 624.625 Q264.349 624.625 262.034 624.185 Q259.742 623.769 257.289 622.912 L257.289 618.398 Q259.233 619.533 261.548 620.111 Q263.863 620.69 266.386 620.69 Q270.784 620.69 273.076 618.954 Q275.39 617.218 275.39 613.908 Q275.39 610.852 273.238 609.139 Q271.108 607.403 267.289 607.403 L263.261 607.403 L263.261 603.561 L267.474 603.561 Q270.923 603.561 272.752 602.195 Q274.58 600.806 274.58 598.213 Q274.58 595.551 272.682 594.139 Q270.807 592.704 267.289 592.704 Q265.367 592.704 263.168 593.121 Q260.969 593.537 258.33 594.417 L258.33 590.25 Q260.992 589.51 263.307 589.139 Q265.645 588.769 267.705 588.769 Q273.029 588.769 276.131 591.2 Q279.233 593.607 279.233 597.727 Q279.233 600.598 277.59 602.588 Q275.946 604.556 272.914 605.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 592.473 Q295.298 592.473 293.469 596.037 Q291.664 599.579 291.664 606.709 Q291.664 613.815 293.469 617.38 Q295.298 620.922 298.909 620.922 Q302.543 620.922 304.349 617.38 Q306.177 613.815 306.177 606.709 Q306.177 599.579 304.349 596.037 Q302.543 592.473 298.909 592.473 M298.909 588.769 Q304.719 588.769 307.775 593.375 Q310.853 597.959 310.853 606.709 Q310.853 615.435 307.775 620.042 Q304.719 624.625 298.909 624.625 Q293.099 624.625 290.02 620.042 Q286.964 615.435 286.964 606.709 Q286.964 597.959 290.02 593.375 Q293.099 588.769 298.909 588.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M271.594 417.679 L259.789 436.128 L271.594 436.128 L271.594 417.679 M270.367 413.605 L276.247 413.605 L276.247 436.128 L281.177 436.128 L281.177 440.017 L276.247 440.017 L276.247 448.165 L271.594 448.165 L271.594 440.017 L255.992 440.017 L255.992 435.503 L270.367 413.605 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 416.684 Q295.298 416.684 293.469 420.248 Q291.664 423.79 291.664 430.92 Q291.664 438.026 293.469 441.591 Q295.298 445.132 298.909 445.132 Q302.543 445.132 304.349 441.591 Q306.177 438.026 306.177 430.92 Q306.177 423.79 304.349 420.248 Q302.543 416.684 298.909 416.684 M298.909 412.98 Q304.719 412.98 307.775 417.586 Q310.853 422.17 310.853 430.92 Q310.853 439.646 307.775 444.253 Q304.719 448.836 298.909 448.836 Q293.099 448.836 290.02 444.253 Q286.964 439.646 286.964 430.92 Q286.964 422.17 290.02 417.586 Q293.099 412.98 298.909 412.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M258.793 237.816 L277.15 237.816 L277.15 241.751 L263.076 241.751 L263.076 250.223 Q264.094 249.876 265.113 249.714 Q266.131 249.529 267.15 249.529 Q272.937 249.529 276.316 252.7 Q279.696 255.871 279.696 261.288 Q279.696 266.867 276.224 269.968 Q272.752 273.047 266.432 273.047 Q264.256 273.047 261.988 272.677 Q259.742 272.306 257.335 271.566 L257.335 266.867 Q259.418 268.001 261.641 268.556 Q263.863 269.112 266.34 269.112 Q270.344 269.112 272.682 267.005 Q275.02 264.899 275.02 261.288 Q275.02 257.677 272.682 255.57 Q270.344 253.464 266.34 253.464 Q264.465 253.464 262.59 253.881 Q260.738 254.297 258.793 255.177 L258.793 237.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 240.894 Q295.298 240.894 293.469 244.459 Q291.664 248.001 291.664 255.131 Q291.664 262.237 293.469 265.802 Q295.298 269.343 298.909 269.343 Q302.543 269.343 304.349 265.802 Q306.177 262.237 306.177 255.131 Q306.177 248.001 304.349 244.459 Q302.543 240.894 298.909 240.894 M298.909 237.191 Q304.719 237.191 307.775 241.797 Q310.853 246.381 310.853 255.131 Q310.853 263.857 307.775 268.464 Q304.719 273.047 298.909 273.047 Q293.099 273.047 290.02 268.464 Q286.964 263.857 286.964 255.131 Q286.964 246.381 290.02 241.797 Q293.099 237.191 298.909 237.191 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1141.23 400.199,1015.23 400.786,897.278 401.372,911.527 401.958,922.973 402.545,826.147 403.131,831.55 403.718,743.284 404.304,661.291 404.891,584.457 405.477,516.04 406.063,455.528 406.65,398.777 407.236,347.571 407.823,372.854 408.409,328.28 408.995,288.413 409.582,254.343 410.168,222.919 410.755,248.652 411.341,220.863 411.927,288.017 412.514,263.389 413.1,282.516 413.687,260.701 414.273,241.954 414.86,227.076 415.446,245.073 416.032,234.685 416.619,226.187 417.205,219.895 417.792,241.624 418.378,261.584 418.964,258.329 419.551,256.668 420.137,256.614 420.724,259.798 421.31,263.296 421.896,301.128 422.483,306.92 423.069,326.758 423.656,331.719 424.242,351.819 424.829,358.264 425.415,388.988 426.001,395.184 426.588,403.709 427.174,412.702 427.761,430.469 428.347,449.14 428.933,484.887 429.52,492.99 430.106,525.079 430.693,555.079 431.279,576.763 431.865,583.074 432.452,597.099 433.038,610.256 433.625,629.511 434.211,636.287 434.798,649.137 435.384,661.827 435.97,680.16 436.557,692.74 437.143,705.78 437.73,719.349 438.316,741.434 438.902,753.32 439.489,765.203 440.075,776.608 440.662,783.968 441.248,795.795 441.835,807.416 442.421,814.595 443.007,825.586 443.594,843.815 444.18,860.879 444.767,880.808 445.353,889.677 445.939,901.767 446.526,907.025 447.112,915.533 447.699,929.76 448.285,940.261 448.871,950.202 449.458,960.434 450.044,967.637 450.631,977.525 451.217,984.45 451.804,996.399 452.39,1000.52 452.976,1004.45 453.563,1020.67 454.149,1029.01 454.736,1042.14 455.322,1045.39 455.908,1048.73 456.495,1056.41 457.081,1059 457.668,1066.69 458.254,1069.79 458.84,1070.74 459.427,1078.03 460.013,1087.3 460.6,1094.12 461.186,1096.34 461.773,1102.58 462.359,1105.18 462.945,1109.23 463.532,1115.54 464.118,1121.52 464.705,1123.66 465.291,1125.44 465.877,1127.38 466.464,1131.1 467.05,1135.01 467.637,1136.78 468.223,1136.46 468.809,1142.16 469.396,1145.86 469.982,1149.52 470.569,1153.2 471.155,1158.13 471.742,1162.91 472.328,1165.9 472.914,1168.35 473.501,1169.13 474.087,1170.01 474.674,1174.92 475.26,1177.72 475.846,1178.75 476.433,1179.32 477.019,1181.85 477.606,1187.82 478.192,1186.55 478.778,1185.34 479.365,1184.47 479.951,1185.64 480.538,1191.57 481.124,1194.26 481.711,1193.43 482.297,1194.19 482.883,1198.2 483.47,1200.2 484.056,1202.23 484.643,1204.18 485.229,1209.46 485.815,1213.95 486.402,1218.36 486.988,1217.88 487.575,1217.37 488.161,1215.56 488.748,1215.22 489.334,1215.27 489.92,1215.26 490.507,1216.86 491.093,1216.77 491.68,1219.78 492.266,1218.28 492.852,1219.75 493.439,1219.6 494.025,1219.54 494.612,1221.27 495.198,1221.38 495.784,1221.14 496.371,1222.77 496.957,1222.74 497.544,1220.86 498.13,1227.21 498.717,1228.05 499.303,1226.2 499.889,1228.78 500.476,1228.23 501.062,1226.57 501.649,1230.56 502.235,1230.22 502.821,1232.83 503.408,1233.97 503.994,1234.54 504.581,1234.15 505.167,1233.37 505.753,1234.41 506.34,1233.76 506.926,1234.72 507.513,1235.48 508.099,1234.88 508.686,1232.74 509.272,1232.35 509.858,1230.56 510.445,1231.39 511.031,1234.05 511.618,1236.73 512.204,1234.57 512.79,1235.41 513.377,1236.51 513.963,1238.9 514.55,1241.01 515.136,1243.29 515.722,1236.29 516.309,1237.01 516.895,1242.27 517.482,1248.74 518.068,1250.53 518.655,1250.32 519.241,1248.9 519.827,1246.4 520.414,1248.23 521,1245.57 521.587,1242.85 522.173,1246.32 522.759,1238.96 523.346,1241.33 523.932,1241.98 524.519,1239.82 525.105,1241.48 525.691,1243.41 526.278,1245.24 526.864,1245.55 527.451,1244.18 528.037,1243.37 528.624,1245.15 529.21,1241.28 529.796,1237.78 530.383,1238.45 530.969,1239.17 531.556,1241.09 532.142,1240.05 532.728,1241.84 533.315,1242.35 533.901,1241.37 534.488,1243.13 535.074,1239.04 535.661,1241.18 536.247,1240.18 536.833,1239.44 537.42,1239.91 538.006,1240.37 538.593,1238.08 539.179,1234.14 539.765,1233.78 540.352,1232.99 540.938,1230.95 541.525,1228.75 542.111,1228.69 542.697,1230.08 543.284,1229.84 543.87,1231.03 544.457,1227.66 545.043,1223.07 545.63,1223.13 546.216,1221.61 546.802,1227.26 547.389,1227.25 547.975,1229.89 548.562,1229.36 549.148,1227.57 549.734,1229.03 550.321,1228.34 550.907,1232.65 551.494,1232.12 552.08,1231.63 552.666,1236.89 553.253,1240.63 553.839,1241.19 554.426,1244.21 555.012,1241.82 555.599,1240.61 556.185,1242.53 556.771,1243 557.358,1237.57 557.944,1235.52 558.531,1231.99 559.117,1231.61 559.703,1232.36 560.29,1234.5 560.876,1236.53 561.463,1236.9 562.049,1235.91 562.635,1236.45 563.222,1238.52 563.808,1237.73 564.395,1236.92 564.981,1233 565.568,1236.71 566.154,1237.15 566.74,1231.79 567.327,1230.07 567.913,1232.25 568.5,1232.9 569.086,1233.37 569.672,1232.61 570.259,1228.93 570.845,1229.66 571.432,1230.49 572.018,1226.79 572.605,1227.52 573.191,1225.45 573.777,1226.83 574.364,1224.88 574.95,1224.6 575.537,1225.62 576.123,1225.31 576.709,1226.42 577.296,1226.2 577.882,1224.56 578.469,1222.82 579.055,1223.79 579.641,1224.8 580.228,1225.72 580.814,1226.77 581.401,1229.3 581.987,1230.33 582.574,1229.95 583.16,1228.01 583.746,1228.94 584.333,1231.27 584.919,1230.56 585.506,1225.54 586.092,1226.77 586.678,1227.7 587.265,1228.54 587.851,1227.89 588.438,1227.41 589.024,1228.26 589.61,1232.18 590.197,1228.29 590.783,1223.32 591.37,1224.31 591.956,1219.61 592.543,1222.27 593.129,1217.77 593.715,1216.21 594.302,1214.93 594.888,1216.57 595.475,1218.05 596.061,1216.33 596.647,1213.28 597.234,1211.8 597.82,1212 598.407,1211.34 598.993,1211.65 599.579,1216.2 600.166,1214.76 600.752,1214.71 601.339,1213.32 601.925,1213.55 602.512,1214.98 603.098,1213.66 603.684,1213.85 604.271,1215.39 604.857,1213.73 605.444,1212.35 606.03,1215.49 606.616,1215.63 607.203,1213.09 607.789,1214.45 608.376,1214.66 608.962,1214.8 609.548,1217.82 610.135,1221.81 610.721,1221.39 611.308,1222.67 611.894,1222.27 612.481,1224.82 613.067,1221.24 613.653,1218.05 614.24,1217.71 614.826,1216.38 615.413,1216.41 615.999,1216.18 616.585,1216.51 617.172,1216.53 617.758,1216.47 618.345,1217.33 618.931,1216.72 619.518,1216.68 620.104,1215.31 620.69,1215.49 621.277,1217.04 621.863,1216.93 622.45,1218.32 623.036,1218.24 623.622,1216.58 624.209,1217.62 624.795,1217.52 625.382,1215.63 625.968,1214.15 626.554,1216.59 627.141,1216.61 627.727,1212.04 628.314,1213.58 628.9,1214.98 629.487,1217.87 630.073,1217.47 630.659,1217.3 631.246,1217.04 631.832,1218.05 632.419,1222.01 633.005,1221.74 633.591,1224.05 634.178,1223.59 634.764,1221.46 635.351,1218.19 635.937,1217.73 636.523,1217.64 637.11,1215.97 637.696,1215.93 638.283,1217.13 638.869,1216.99 639.456,1215.29 640.042,1216.67 640.628,1214.98 641.215,1213.75 641.801,1212.18 642.388,1215.09 642.974,1219.4 643.56,1219.18 644.147,1220.14 644.733,1219.87 645.32,1216.76 645.906,1214.94 646.492,1214.78 647.079,1214.66 647.665,1215.1 648.252,1216.13 648.838,1213.07 649.425,1211.68 650.011,1210.3 650.597,1207.18 651.184,1210.19 651.77,1210.28 652.357,1209 652.943,1212.25 653.529,1212.21 654.116,1208.14 654.702,1206.88 655.289,1205.75 655.875,1206.19 656.462,1203.72 657.048,1207.5 657.634,1206.59 658.221,1205.76 658.807,1206.05 659.394,1205.01 659.98,1206.9 660.566,1211.61 661.153,1210.24 661.739,1210.56 662.326,1211.15 662.912,1213.86 663.498,1213.69 664.085,1215.45 664.671,1212.37 665.258,1212.33 665.844,1212.26 666.431,1212.29 667.017,1210.83 667.603,1210.47 668.19,1208.97 668.776,1212.36 669.363,1212.27 669.949,1212.22 670.535,1213.79 671.122,1219.51 671.708,1219.02 672.295,1217.12 672.881,1215.23 673.467,1217.98 674.054,1219.56 674.64,1219.09 675.227,1217.08 675.813,1222.84 676.4,1223.83 676.986,1226 677.572,1223.78 678.159,1223.28 678.745,1221.28 679.332,1217.8 679.918,1217.42 680.504,1217.03 681.091,1215.14 681.677,1216.32 682.264,1214.79 682.85,1214.69 683.436,1213.58 684.023,1214.9 684.609,1217.51 685.196,1220.18 685.782,1219.79 686.369,1220.68 686.955,1219.97 687.541,1217.87 688.128,1216.05 688.714,1212.89 689.301,1211.32 689.887,1212.9 690.473,1212.68 691.06,1212.43 691.646,1210.56 692.233,1207.54 692.819,1209.1 693.405,1207.67 693.992,1208.13 694.578,1209.93 695.165,1208.74 695.751,1207.47 696.338,1211.76 696.924,1211.68 697.51,1211.89 698.097,1210.6 698.683,1205.04 699.27,1203.71 699.856,1205.55 700.442,1207.2 701.029,1208.65 701.615,1205.84 702.202,1207.4 702.788,1209.38 703.375,1209.35 703.961,1210.94 704.547,1209.49 705.134,1209.66 705.72,1209.77 706.307,1208.35 706.893,1209.9 707.479,1211.16 708.066,1213.99 708.652,1210.79 709.239,1210.81 709.825,1208.25 710.411,1207.26 710.998,1207.67 711.584,1207.76 712.171,1206.49 712.757,1207.81 713.344,1210.72 713.93,1210.55 714.516,1211.89 715.103,1211.63 715.689,1208.64 716.276,1208.73 716.862,1211.45 717.448,1210.3 718.035,1207.45 718.621,1206.39 719.208,1206.68 719.794,1205.35 720.38,1205.69 720.967,1208.66 721.553,1210.07 722.14,1212.99 722.726,1215.53 723.313,1212.43 723.899,1213.59 724.485,1216.26 725.072,1216.02 725.658,1218.21 726.245,1217.81 726.831,1217.61 727.417,1215.79 728.004,1218.42 728.59,1215 729.177,1216.38 729.763,1217.6 730.349,1218.3 730.936,1220.61 731.522,1220.04 732.109,1222.52 732.695,1223.28 733.282,1222.62 733.868,1223.16 734.454,1223.7 735.041,1219.91 735.627,1219.18 736.214,1214.49 736.8,1212.48 737.386,1212.35 737.973,1212.15 738.559,1204.9 739.146,1203.77 739.732,1205.3 740.318,1208.38 740.905,1207.09 741.491,1208.65 742.078,1207.64 742.664,1209.1 743.251,1210.53 743.837,1210.78 744.423,1212.07 745.01,1210.57 745.596,1212.94 746.183,1214.09 746.769,1212.21 747.355,1212.18 747.942,1212.01 748.528,1213.06 749.115,1214.18 749.701,1216.91 750.288,1215.38 750.874,1219.29 751.46,1220.13 752.047,1218.22 752.633,1219.19 753.22,1218.7 753.806,1220.91 754.392,1220.38 754.979,1216.74 755.565,1217.44 756.152,1217.17 756.738,1216.83 757.324,1216.43 757.911,1215.95 758.497,1216.71 759.084,1216.19 759.67,1214.34 760.257,1212.49 760.843,1212.26 761.429,1212.03 762.016,1213.27 762.602,1215.95 763.189,1215.5 763.775,1215.31 764.361,1215.15 764.948,1214.61 765.534,1215.8 766.121,1215.28 766.707,1213.77 767.293,1209.25 767.88,1203.57 768.466,1204.07 769.053,1202.71 769.639,1205.79 770.226,1206.03 770.812,1204.81 771.398,1206.17 771.985,1207.57 772.571,1205.9 773.158,1206.37 773.744,1208.06 774.33,1208.33 774.917,1208.57 775.503,1207 776.09,1209.86 776.676,1208.26 777.262,1204.98 777.849,1206.35 778.435,1207.75 779.022,1209.2 779.608,1207.44 780.195,1207.64 780.781,1203.26 781.367,1206.01 781.954,1206.1 782.54,1206.17 783.127,1205.98 783.713,1207.6 784.299,1207.59 784.886,1206.1 785.472,1208.88 786.059,1211.66 786.645,1211.74 787.232,1206 787.818,1207.48 788.404,1207.26 788.991,1208.63 789.577,1209.83 790.164,1211.14 790.75,1211.09 791.336,1212.62 791.923,1209.39 792.509,1209.09 793.096,1210.4 793.682,1210.37 794.268,1211.76 794.855,1213.02 795.441,1211.19 796.028,1210.83 796.614,1209.31 797.201,1206.3 797.787,1207.83 798.373,1207.98 798.96,1207.82 799.546,1206.24 800.133,1204.96 800.719,1206.58 801.305,1201.95 801.892,1202 802.478,1200.67 803.065,1203.97 803.651,1205.69 804.237,1204.27 804.824,1205.63 805.41,1205.49 805.997,1205.73 806.583,1205.56 807.17,1207.18 807.756,1205.75 808.342,1204.35 808.929,1203.08 809.515,1203.29 810.102,1204.81 810.688,1203.27 811.274,1203.73 811.861,1205.51 812.447,1202.66 813.034,1203.14 813.62,1203.27 814.206,1206.55 814.793,1208.28 815.379,1208.22 815.966,1208.03 816.552,1209.24 817.139,1212.1 817.725,1214.8 818.311,1211.85 818.898,1211.84 819.484,1211.66 820.071,1212.75 820.657,1212.11 821.243,1210.31 821.83,1210.07 822.416,1211.22 823.003,1210.93 823.589,1209.48 824.175,1206.72 824.762,1206.76 825.348,1208.33 825.935,1202.72 826.521,1203.1 827.108,1204.75 827.694,1205.24 828.28,1206.6 828.867,1206.38 829.453,1206.4 830.04,1206.44 830.626,1209.4 831.212,1207.96 831.799,1209.4 832.385,1210.95 832.972,1213.41 833.558,1213.06 834.145,1210.23 834.731,1209.97 835.317,1207.02 835.904,1207.3 836.49,1208.71 837.077,1209.86 837.663,1208.33 838.249,1212.83 838.836,1214.18 839.422,1215.15 840.009,1214.72 840.595,1212.91 841.181,1211.21 841.768,1212.49 842.354,1213.68 842.941,1213.26 843.527,1213.11 844.114,1214.26 844.7,1213.83 845.286,1213.39 845.873,1212.93 846.459,1209.61 847.046,1212.11 847.632,1214.59 848.218,1212.74 848.805,1211.09 849.391,1215.14 849.978,1214.61 850.564,1212.72 851.15,1209.53 851.737,1212.23 852.323,1211.96 852.91,1208.73 853.496,1208.56 854.083,1208.7 854.669,1209.8 855.255,1211.18 855.842,1210.71 856.428,1210.56 857.015,1213.02 857.601,1214.04 858.187,1210.87 858.774,1210.53 859.36,1210.36 859.947,1208.95 860.533,1208.98 861.119,1212.95 861.706,1211.04 862.292,1209.37 862.879,1209.3 863.465,1209.1 864.052,1207.68 864.638,1207.87 865.224,1208.09 865.811,1207.86 866.397,1204.81 866.984,1204.72 867.57,1203.32 868.156,1207.82 868.743,1212.1 869.329,1211.71 869.916,1209.87 870.502,1205.35 871.089,1205.66 871.675,1202.85 872.261,1201.43 872.848,1198.54 873.434,1199.33 874.021,1199.84 874.607,1199.96 875.193,1200.16 875.78,1196.34 876.366,1197.1 876.953,1197.39 877.539,1198.16 878.125,1198.86 878.712,1200.71 879.298,1197.97 879.885,1199.89 880.471,1198.66 881.058,1197.65 881.644,1197.95 882.23,1198.59 882.817,1197.49 883.403,1198.11 883.99,1201.58 884.576,1206.11 885.162,1204.86 885.749,1203.22 886.335,1203.63 886.922,1202.52 887.508,1205.7 888.094,1205.66 888.681,1205.59 889.267,1210.19 889.854,1208.64 890.44,1208.63 891.027,1205.38 891.613,1207.17 892.199,1211.33 892.786,1210.12 893.372,1208.57 893.959,1208.42 894.545,1211.06 895.131,1209.53 895.718,1208.04 896.304,1210.51 896.891,1207.52 897.477,1207.7 898.063,1209.17 898.65,1207.72 899.236,1210.12 899.823,1211.26 900.409,1211.02 900.996,1210.61 901.582,1206.08 902.168,1204.63 902.755,1203.32 903.341,1203.61 903.928,1205.31 904.514,1203.97 905.1,1207.2 905.687,1204.57 906.273,1204.86 906.86,1203.7 907.446,1199.58 908.032,1204.16 908.619,1204.48 909.205,1203.24 909.792,1200.72 910.378,1201.28 910.965,1201.8 911.551,1202.15 912.137,1201.1 912.724,1201.29 913.31,1200.02 913.897,1199.07 914.483,1199.2 915.069,1200.76 915.656,1198.37 916.242,1197.49 916.829,1198.02 917.415,1198.31 918.002,1199.91 918.588,1200.25 919.174,1200.72 919.761,1197.9 920.347,1201.19 920.934,1201.33 921.52,1203.09 922.106,1204.76 922.693,1204.61 923.279,1207.58 923.866,1212.13 924.452,1213.5 925.038,1213.37 925.625,1213.24 926.211,1210.09 926.798,1211.15 927.384,1210.99 927.971,1209.17 928.557,1210.45 929.143,1209.94 929.73,1206.43 930.316,1209.47 930.903,1212.05 931.489,1211.6 932.075,1211.38 932.662,1212.55 933.248,1216.28 933.835,1214.42 934.421,1215.14 935.007,1213.08 935.594,1212.67 936.18,1211 936.767,1208.16 937.353,1206.72 937.94,1209.13 938.526,1211.95 939.112,1213.11 939.699,1211.41 940.285,1213.9 940.872,1210.54 941.458,1211.8 942.044,1210.03 942.631,1206.8 943.217,1205.17 943.804,1204.99 944.39,1207.73 944.976,1210.28 945.563,1209.89 946.149,1213.96 946.736,1210.86 947.322,1210.71 947.909,1210.55 948.495,1210.33 949.081,1207.51 949.668,1211.9 950.254,1211.51 950.841,1209.74 951.427,1211 952.013,1209.38 952.6,1213.38 953.186,1213.21 953.773,1211.62 954.359,1210.93 954.945,1206.12 955.532,1204.87 956.118,1205.83 956.705,1208.39 957.291,1209.48 957.878,1210.56 958.464,1210.28 959.05,1208.57 959.637,1209.67 960.223,1209.52 960.81,1205.02 961.396,1202.1 961.982,1200.7 962.569,1200.92 963.155,1201.15 963.742,1198.56 964.328,1198.95 964.915,1203.66 965.501,1205.25 966.087,1203.54 966.674,1207.8 967.26,1204.66 967.847,1203.46 968.433,1203.81 969.019,1203.82 969.606,1202.38 970.192,1202.6 970.779,1202.73 971.365,1201.55 971.951,1202.07 972.538,1203.56 973.124,1203.99 973.711,1203.95 974.297,1201.01 974.884,1200.94 975.47,1202.37 976.056,1202.73 976.643,1199.79 977.229,1198.97 977.816,1197.83 978.402,1196.73 978.988,1198.67 979.575,1202.23 980.161,1205.19 980.748,1203.67 981.334,1202.34 981.92,1204.15 982.507,1207.4 983.093,1208.65 983.68,1211.59 984.266,1211.59 984.853,1209.99 985.439,1208.31 986.025,1208.35 986.612,1209.67 987.198,1208.25 987.785,1206.63 988.371,1204.87 988.957,1206.27 989.544,1205.73 990.13,1207.29 990.717,1205.96 991.303,1201.74 991.889,1200.54 992.476,1202.58 993.062,1201.59 993.649,1201.67 994.235,1205.14 994.822,1203.48 995.408,1203.52 995.994,1209.2 996.581,1209.08 997.167,1209.01 997.754,1207.64 998.34,1204.92 998.926,1205.35 999.513,1202.21 1000.1,1205.07 1000.69,1205.06 1001.27,1206.38 1001.86,1209.49 1002.44,1210.6 1003.03,1210.27 1003.62,1209.88 1004.2,1211.24 1004.79,1209.57 1005.38,1209.36 1005.96,1207.96 1006.55,1207.95 1007.14,1206.24 1007.72,1206.11 1008.31,1207.59 1008.9,1207.48 1009.48,1208.87 1010.07,1206.04 1010.65,1205.8 1011.24,1204.08 1011.83,1202.72 1012.41,1204.38 1013,1204.63 1013.59,1202.82 1014.17,1202.88 1014.76,1203.04 1015.35,1201.75 1015.93,1201.79 1016.52,1200.52 1017.11,1200.8 1017.69,1202.53 1018.28,1207.12 1018.86,1208.88 1019.45,1207.37 1020.04,1207.45 1020.62,1205.98 1021.21,1203.15 1021.8,1202.08 1022.38,1203.86 1022.97,1203.88 1023.56,1206.81 1024.14,1210.62 1024.73,1213.18 1025.32,1211.1 1025.9,1212.19 1026.49,1212.11 1027.07,1211.59 1027.66,1209.54 1028.25,1207.99 1028.83,1207.89 1029.42,1210.56 1030.01,1208.66 1030.59,1205.48 1031.18,1202.48 1031.77,1202.55 1032.35,1199.84 1032.94,1199.96 1033.52,1201.52 1034.11,1201.66 1034.7,1201.9 1035.28,1202.34 1035.87,1200.83 1036.46,1199.66 1037.04,1200.03 1037.63,1201.82 1038.22,1201.99 1038.8,1201.89 1039.39,1202.17 1039.98,1203.87 1040.56,1205.35 1041.15,1208.36 1041.73,1208.13 1042.32,1208.3 1042.91,1208.06 1043.49,1206.58 1044.08,1206.58 1044.67,1207.89 1045.25,1207.49 1045.84,1208.82 1046.43,1208.54 1047.01,1208.25 1047.6,1208.11 1048.19,1207.91 1048.77,1206.57 1049.36,1210.81 1049.94,1210.49 1050.53,1215.84 1051.12,1212.01 1051.7,1211.71 1052.29,1212.72 1052.88,1212.11 1053.46,1210.61 1054.05,1211.68 1054.64,1210.93 1055.22,1207.29 1055.81,1207.23 1056.39,1208.58 1056.98,1209.81 1057.57,1209.69 1058.15,1209.42 1058.74,1209.14 1059.33,1208.87 1059.91,1205.86 1060.5,1204.45 1061.09,1204.39 1061.67,1203.31 1062.26,1199.23 1062.85,1199.48 1063.43,1201.3 1064.02,1202.68 1064.6,1204.38 1065.19,1204.16 1065.78,1202.49 1066.36,1200.99 1066.95,1202.67 1067.54,1205.6 1068.12,1205.64 1068.71,1206.93 1069.3,1206.84 1069.88,1211.29 1070.47,1211.14 1071.06,1209.47 1071.64,1213.53 1072.23,1214.36 1072.81,1213.92 1073.4,1214.88 1073.99,1214.21 1074.57,1212.33 1075.16,1211.83 1075.75,1212.99 1076.33,1212.59 1076.92,1209.1 1077.51,1208.84 1078.09,1207.33 1078.68,1207.09 1079.26,1206.69 1079.85,1205.5 1080.44,1205.78 1081.02,1207.04 1081.61,1206.82 1082.2,1206.81 1082.78,1208.09 1083.37,1208.18 1083.96,1208.06 1084.54,1206.68 1085.13,1206.7 1085.72,1207.74 1086.3,1207.4 1086.89,1208.89 1087.47,1208.63 1088.06,1206.84 1088.65,1205.45 1089.23,1205.56 1089.82,1202.57 1090.41,1201.27 1090.99,1202.7 1091.58,1205.7 1092.17,1204.07 1092.75,1205.32 1093.34,1209.35 1093.93,1210.86 1094.51,1212.18 1095.1,1213.29 1095.68,1211.48 1096.27,1212.31 1096.86,1210.15 1097.44,1209.82 1098.03,1210.83 1098.62,1209.2 1099.2,1207.16 1099.79,1207.03 1100.38,1208.31 1100.96,1208.21 1101.55,1208.15 1102.14,1209.65 1102.72,1210.57 1103.31,1210.36 1103.89,1208.65 1104.48,1202.62 1105.07,1204.52 1105.65,1201.68 1106.24,1200.44 1106.83,1200.65 1107.41,1204.24 1108,1202.72 1108.59,1202.97 1109.17,1203.03 1109.76,1203.04 1110.34,1200.37 1110.93,1201.76 1111.52,1204.96 1112.1,1201.98 1112.69,1202.01 1113.28,1202.26 1113.86,1202.39 1114.45,1202.53 1115.04,1202.77 1115.62,1202.94 1116.21,1203.09 1116.8,1204.54 1117.38,1207.27 1117.97,1205.93 1118.55,1204.4 1119.14,1204.66 1119.73,1206.21 1120.31,1207.61 1120.9,1208.81 1121.49,1207.11 1122.07,1207.4 1122.66,1204.44 1123.25,1201.37 1123.83,1198.64 1124.42,1198.87 1125.01,1200.96 1125.59,1199.48 1126.18,1198.43 1126.76,1198.86 1127.35,1195.26 1127.94,1194.23 1128.52,1195.13 1129.11,1195.72 1129.7,1194.71 1130.28,1195.22 1130.87,1194.37 1131.46,1191.96 1132.04,1192.63 1132.63,1193.34 1133.21,1192.73 1133.8,1193.48 1134.39,1195.37 1134.97,1195.96 1135.56,1197.87 1136.15,1199.89 1136.73,1199 1137.32,1199.19 1137.91,1199.31 1138.49,1199.68 1139.08,1197.18 1139.67,1199.11 1140.25,1199.25 1140.84,1199.68 1141.42,1199.79 1142.01,1201.32 1142.6,1201.3 1143.18,1203.02 1143.77,1204.66 1144.36,1205.83 1144.94,1202.99 1145.53,1203.16 1146.12,1203.56 1146.7,1202.18 1147.29,1203.59 1147.88,1205.04 1148.46,1205.3 1149.05,1205.65 1149.63,1205.8 1150.22,1207.16 1150.81,1208.69 1151.39,1208.49 1151.98,1209.74 1152.57,1207.97 1153.15,1207.81 1153.74,1206.02 1154.33,1206.12 1154.91,1209 1155.5,1208.85 1156.09,1208.68 1156.67,1208.72 1157.26,1205.47 1157.84,1203.91 1158.43,1205.46 1159.02,1206.61 1159.6,1207.68 1160.19,1207.27 1160.78,1205.76 1161.36,1206.89 1161.95,1203.93 1162.54,1205.4 1163.12,1206.86 1163.71,1208.25 1164.29,1206.73 1164.88,1206.5 1165.47,1207.9 1166.05,1206.04 1166.64,1207.6 1167.23,1207.67 1167.81,1209.07 1168.4,1208.84 1168.99,1209.79 1169.57,1211.3 1170.16,1207.97 1170.75,1206.35 1171.33,1206.32 1171.92,1207.78 1172.5,1206.21 1173.09,1210.41 1173.68,1207.4 1174.26,1205.62 1174.85,1205.42 1175.44,1205.39 1176.02,1208.22 1176.61,1204.99 1177.2,1204.69 1177.78,1206.18 1178.37,1203.04 1178.96,1204.88 1179.54,1204.75 1180.13,1202.01 1180.71,1202.19 1181.3,1202.4 1181.89,1200.94 1182.47,1199.39 1183.06,1199.65 1183.65,1201.28 1184.23,1201.56 1184.82,1201.74 1185.41,1201.76 1185.99,1201.94 1186.58,1202.73 1187.16,1204.16 1187.75,1204.24 1188.34,1205.82 1188.92,1205.99 1189.51,1208.73 1190.1,1208.66 1190.68,1212.9 1191.27,1212.23 1191.86,1211.69 1192.44,1211.29 1193.03,1212.67 1193.62,1211.29 1194.2,1210.94 1194.79,1212.05 1195.37,1213.14 1195.96,1214.13 1196.55,1212.23 1197.13,1213.14 1197.72,1210.03 1198.31,1208.33 1198.89,1209.36 1199.48,1207.73 1200.07,1207.66 1200.65,1207.75 1201.24,1211.9 1201.83,1214.47 1202.41,1215.09 1203,1212.87 1203.58,1212.24 1204.17,1211.95 1204.76,1210.22 1205.34,1208.61 1205.93,1208.51 1206.52,1208.33 1207.1,1206.73 1207.69,1203.89 1208.28,1201.12 1208.86,1199.85 1209.45,1195.9 1210.03,1199.75 1210.62,1198.6 1211.21,1200.54 1211.79,1202.33 1212.38,1206.7 1212.97,1206.55 1213.55,1206.4 1214.14,1206.24 1214.73,1208.9 1215.31,1206.97 1215.9,1206.9 1216.49,1206.58 1217.07,1203.72 1217.66,1206.77 1218.24,1203.93 1218.83,1204.09 1219.42,1202.63 1220,1204 1220.59,1205.45 1221.18,1205.25 1221.76,1203.41 1222.35,1202 1222.94,1203.77 1223.52,1203.76 1224.11,1206.49 1224.7,1203.24 1225.28,1203.55 1225.87,1200.94 1226.45,1201.26 1227.04,1204.7 1227.63,1203.45 1228.21,1202.33 1228.8,1200.87 1229.39,1202.44 1229.97,1206.94 1230.56,1209.91 1231.15,1209.82 1231.73,1212.52 1232.32,1212.36 1232.91,1210.38 1233.49,1211.64 1234.08,1212.56 1234.66,1209.08 1235.25,1211.79 1235.84,1211.27 1236.42,1213.43 1237.01,1214.62 1237.6,1214.17 1238.18,1214.9 1238.77,1214.08 1239.36,1213.55 1239.94,1213.29 1240.53,1214.23 1241.11,1215.07 1241.7,1214.39 1242.29,1212.35 1242.87,1210.31 1243.46,1209.99 1244.05,1206.57 1244.63,1202.41 1245.22,1201.51 1245.81,1203.12 1246.39,1201.53 1246.98,1203.1 1247.57,1201.81 1248.15,1201.81 1248.74,1200.19 1249.32,1198.81 1249.91,1202.01 1250.5,1203.89 1251.08,1202.42 1251.67,1201.19 1252.26,1202.85 1252.84,1203.06 1253.43,1204.34 1254.02,1205.79 1254.6,1205.6 1255.19,1201.29 1255.78,1200.11 1256.36,1201.95 1256.95,1200.54 1257.53,1202.23 1258.12,1202.14 1258.71,1203.54 1259.29,1207.78 1259.88,1211.98 1260.47,1210.41 1261.05,1210.18 1261.64,1209.76 1262.23,1208.35 1262.81,1209.83 1263.4,1210.88 1263.98,1214.54 1264.57,1213.88 1265.16,1214.8 1265.74,1211.12 1266.33,1209.44 1266.92,1208.99 1267.5,1208.89 1268.09,1207.07 1268.68,1199.81 1269.26,1201.92 1269.85,1202.01 1270.44,1205.34 1271.02,1203.95 1271.61,1203.65 1272.19,1203.55 1272.78,1201.94 1273.37,1199.55 1273.95,1201.18 1274.54,1199.76 1275.13,1199.84 1275.71,1201.45 1276.3,1198.97 1276.89,1199.14 1277.47,1202.23 1278.06,1203.71 1278.65,1201.99 1279.23,1203.16 1279.82,1200.46 1280.4,1194.95 1280.99,1195.43 1281.58,1192.66 1282.16,1196.03 1282.75,1193.6 1283.34,1195.52 1283.92,1198.72 1284.51,1198.87 1285.1,1198.92 1285.68,1200.74 1286.27,1196.92 1286.86,1194.12 1287.44,1196.19 1288.03,1191.17 1288.61,1187.42 1289.2,1188.5 1289.79,1189.5 1290.37,1190.12 1290.96,1192.27 1291.55,1191.56 1292.13,1193.87 1292.72,1193.25 1293.31,1192.24 1293.89,1193.09 1294.48,1190.87 1295.06,1193.2 1295.65,1193.94 1296.24,1194.56 1296.82,1197.88 1297.41,1196.83 1298,1195.97 1298.58,1196.06 1299.17,1197.67 1299.76,1196.77 1300.34,1197.32 1300.93,1197.59 1301.52,1196.6 1302.1,1196.95 1302.69,1199.95 1303.27,1203.37 1303.86,1203.2 1304.45,1203.25 1305.03,1209.4 1305.62,1209.06 1306.21,1210.22 1306.79,1211.39 1307.38,1212.51 1307.97,1210.81 1308.55,1211.87 1309.14,1211.26 1309.73,1208.23 1310.31,1206.71 1310.9,1205.41 1311.48,1209.94 1312.07,1205.3 1312.66,1206.91 1313.24,1211.01 1313.83,1211.95 1314.42,1210.39 1315,1211.3 1315.59,1212.34 1316.18,1212.11 1316.76,1206.1 1317.35,1210.31 1317.93,1210.14 1318.52,1213.87 1319.11,1213.44 1319.69,1213.01 1320.28,1212.29 1320.87,1208.83 1321.45,1210.01 1322.04,1209.66 1322.63,1206.68 1323.21,1206.55 1323.8,1206.49 1324.39,1212.34 1324.97,1213.21 1325.56,1212.64 1326.14,1212.17 1326.73,1210.25 1327.32,1211.32 1327.9,1210.93 1328.49,1209.36 1329.08,1210.64 1329.66,1209.05 1330.25,1210.16 1330.84,1211.26 1331.42,1205.43 1332.01,1205.22 1332.6,1205.08 1333.18,1206.5 1333.77,1205.04 1334.35,1206.44 1334.94,1200.51 1335.53,1196.26 1336.11,1197.79 1336.7,1198.14 1337.29,1199.7 1337.87,1198.37 1338.46,1200.17 1339.05,1199.11 1339.63,1205.02 1340.22,1204.91 1340.8,1204.81 1341.39,1205.89 1341.98,1206.95 1342.56,1204 1343.15,1205.59 1343.74,1205.56 1344.32,1205.49 1344.91,1203.87 1345.5,1202.32 1346.08,1201.43 1346.67,1203.1 1347.26,1203.35 1347.84,1202.33 1348.43,1202.61 1349.01,1201.18 1349.6,1205.49 1350.19,1206.61 1350.77,1212.13 1351.36,1211.56 1351.95,1208.68 1352.53,1207.26 1353.12,1205.86 1353.71,1202.79 1354.29,1204.56 1354.88,1201.72 1355.47,1202.11 1356.05,1202.19 1356.64,1202.61 1357.22,1202.55 1357.81,1204.28 1358.4,1201.49 1358.98,1201.58 1359.57,1201.77 1360.16,1200.42 1360.74,1200.66 1361.33,1199.57 1361.92,1200.03 1362.5,1200.38 1363.09,1202.19 1363.68,1200.77 1364.26,1199.27 1364.85,1198.09 1365.43,1199.64 1366.02,1197.43 1366.61,1199.15 1367.19,1200.99 1367.78,1198.4 1368.37,1200.1 1368.95,1203.19 1369.54,1202.16 1370.13,1201.93 1370.71,1203.51 1371.3,1202.15 1371.88,1202.1 1372.47,1203.71 1373.06,1203.98 1373.64,1202.63 1374.23,1205.77 1374.82,1206 1375.4,1204.7 1375.99,1204.92 1376.58,1209.46 1377.16,1210.48 1377.75,1210.26 1378.34,1209.65 1378.92,1209.35 1379.51,1210.59 1380.09,1207.59 1380.68,1208.74 1381.27,1209.62 1381.85,1206.31 1382.44,1206.06 1383.03,1202.92 1383.61,1199.9 1384.2,1201.65 1384.79,1203.5 1385.37,1206.66 1385.96,1209.71 1386.55,1208.19 1387.13,1209.55 1387.72,1206.19 1388.3,1207.52 1388.89,1206.08 1389.48,1206.13 1390.06,1204.57 1390.65,1205.86 1391.24,1204.42 1391.82,1205.92 1392.41,1204.55 1393,1204.45 1393.58,1203.08 1394.17,1203.53 1394.75,1205.31 1395.34,1202.24 1395.93,1203.88 1396.51,1208.31 1397.1,1207.98 1397.69,1207.94 1398.27,1206.68 1398.86,1205.36 1399.45,1203.86 1400.03,1203.9 1400.62,1203.7 1401.21,1203.72 1401.79,1204 1402.38,1201.44 1402.96,1204.56 1403.55,1204.49 1404.14,1204.64 1404.72,1204.68 1405.31,1201.64 1405.9,1200.58 1406.48,1200.91 1407.07,1202.46 1407.66,1206.33 1408.24,1203.19 1408.83,1201.78 1409.42,1202.21 1410,1198.96 1410.59,1200.45 1411.17,1202.12 1411.76,1203.31 1412.35,1203.38 1412.93,1203.43 1413.52,1205.1 1414.11,1206.43 1414.69,1206.09 1415.28,1206.2 1415.87,1206.1 1416.45,1204.6 1417.04,1205.99 1417.63,1204.46 1418.21,1202.76 1418.8,1203.03 1419.38,1201.98 1419.97,1204.66 1420.56,1201.69 1421.14,1201.92 1421.73,1203.6 1422.32,1202.33 1422.9,1202.56 1423.49,1202.67 1424.08,1203.99 1424.66,1202.41 1425.25,1202.52 1425.83,1207.13 1426.42,1205.22 1427.01,1205.33 1427.59,1205.25 1428.18,1204.03 1428.77,1205.51 1429.35,1208.13 1429.94,1209.42 1430.53,1210.89 1431.11,1210.53 1431.7,1208.97 1432.29,1210.27 1432.87,1214.2 1433.46,1213.72 1434.04,1216.28 1434.63,1214.52 1435.22,1211.2 1435.8,1206.62 1436.39,1206.51 1436.98,1209.3 1437.56,1210.63 1438.15,1210.22 1438.74,1209.76 1439.32,1203.84 1439.91,1205.31 1440.5,1206.34 1441.08,1204.81 1441.67,1203.32 1442.25,1203.27 1442.84,1198.78 1443.43,1200.68 1444.01,1200.68 1444.6,1199.71 1445.19,1199.82 1445.77,1197.35 1446.36,1198.96 1446.95,1196.56 1447.53,1198.47 1448.12,1198.71 1448.7,1197.79 1449.29,1199.5 1449.88,1199.87 1450.46,1203.02 1451.05,1204.61 1451.64,1201.79 1452.22,1200.67 1452.81,1201.95 1453.4,1203.52 1453.98,1206.57 1454.57,1206.61 1455.16,1209.04 1455.74,1205.83 1456.33,1207.18 1456.91,1204.46 1457.5,1205.63 1458.09,1204.22 1458.67,1205.97 1459.26,1205.81 1459.85,1207.17 1460.43,1208.41 1461.02,1206.84 1461.61,1204.14 1462.19,1204.29 1462.78,1202.43 1463.37,1201 1463.95,1201.08 1464.54,1199.88 1465.12,1198.47 1465.71,1197.19 1466.3,1198.77 1466.88,1200.2 1467.47,1200.03 1468.06,1198.93 1468.64,1197.9 1469.23,1199.57 1469.82,1198.32 1470.4,1200.31 1470.99,1200.6 1471.57,1200.73 1472.16,1202.34 1472.75,1199.96 1473.33,1198.72 1473.92,1199.4 1474.51,1198.36 1475.09,1201.57 1475.68,1203.21 1476.27,1204.92 1476.85,1206.46 1477.44,1209.34 1478.03,1210.38 1478.61,1211.84 1479.2,1213.04 1479.78,1211.4 1480.37,1212.66 1480.96,1210.28 1481.54,1209.93 1482.13,1206.74 1482.72,1205.26 1483.3,1207.93 1483.89,1206.6 1484.48,1206.69 1485.06,1203.77 1485.65,1206.74 1486.24,1203.65 1486.82,1205.11 1487.41,1209.38 1487.99,1208.75 1488.58,1212.82 1489.17,1209.32 1489.75,1212.11 1490.34,1210.44 1490.93,1211.51 1491.51,1211.02 1492.1,1209.25 1492.69,1207.6 1493.27,1211.91 1493.86,1208.58 1494.45,1209.78 1495.03,1208.38 1495.62,1206.81 1496.2,1214.1 1496.79,1209.42 1497.38,1209.12 1497.96,1206.08 1498.55,1210.51 1499.14,1210.16 1499.72,1210.17 1500.31,1208.92 1500.9,1208.69 1501.48,1207.98 1502.07,1206.38 1502.65,1209.16 1503.24,1207.5 1503.83,1206.09 1504.41,1204.7 1505,1203.18 1505.59,1203.23 1506.17,1203.41 1506.76,1204.96 1507.35,1205.07 1507.93,1205.02 1508.52,1204.71 1509.11,1204.69 1509.69,1203.23 1510.28,1200.72 1510.86,1200.83 1511.45,1198.44 1512.04,1200.27 1512.62,1200.53 1513.21,1201.1 1513.8,1201.32 1514.38,1202.92 1514.97,1201.39 1515.56,1205.85 1516.14,1206.07 1516.73,1204.66 1517.32,1203.24 1517.9,1206.32 1518.49,1203.42 1519.07,1205.34 1519.66,1202.56 1520.25,1199.81 1520.83,1201.48 1521.42,1204.44 1522.01,1204.4 1522.59,1202.86 1523.18,1203.02 1523.77,1203.09 1524.35,1203.31 1524.94,1203.29 1525.52,1206.08 1526.11,1206.07 1526.7,1204.46 1527.28,1201.33 1527.87,1201.03 1528.46,1201.15 1529.04,1202.75 1529.63,1202.83 1530.22,1203.14 1530.8,1203.37 1531.39,1206.38 1531.98,1207.58 1532.56,1207.4 1533.15,1206.08 1533.73,1207.63 1534.32,1207.27 1534.91,1208.94 1535.49,1205.67 1536.08,1202.47 1536.67,1196.57 1537.25,1197.14 1537.84,1194.88 1538.43,1193.95 1539.01,1195.77 1539.6,1194.8 1540.19,1192.29 1540.77,1193.17 1541.36,1195.3 1541.94,1195.87 1542.53,1196.37 1543.12,1196.89 1543.7,1200.59 1544.29,1200.38 1544.88,1200.75 1545.46,1201.04 1546.05,1202.78 1546.64,1203.08 1547.22,1205.82 1547.81,1205.74 1548.4,1205.68 1548.98,1202.91 1549.57,1204.48 1550.15,1201.47 1550.74,1200.07 1551.33,1201.78 1551.91,1203.59 1552.5,1204.88 1553.09,1206.14 1553.67,1207.71 1554.26,1203.36 1554.85,1204.93 1555.43,1203.69 1556.02,1206.49 1556.6,1207.61 1557.19,1208.57 1557.78,1209.77 1558.36,1209.31 1558.95,1207.75 1559.54,1207.62 1560.12,1210.07 1560.71,1216.86 1561.3,1217.73 1561.88,1218.45 1562.47,1217.89 1563.06,1215.95 1563.64,1216.51 1564.23,1217.25 1564.81,1215.33 1565.4,1216.23 1565.99,1208.4 1566.57,1208.52 1567.16,1208.45 1567.75,1206.63 1568.33,1205.33 1568.92,1208.29 1569.51,1203.81 1570.09,1200.6 1570.68,1199.33 1571.27,1199.54 1571.85,1202.7 1572.44,1202.69 1573.02,1202.82 1573.61,1203.19 1574.2,1201.89 1574.78,1199.43 1575.37,1196.77 1575.96,1199.97 1576.54,1200.17 1577.13,1200.74 1577.72,1202.74 1578.3,1202.88 1578.89,1204.54 1579.47,1203.2 1580.06,1203.39 1580.65,1204.92 1581.23,1206.43 1581.82,1206.38 1582.41,1207.78 1582.99,1204.73 1583.58,1205.96 1584.17,1207.55 1584.75,1208.84 1585.34,1210.39 1585.93,1211.79 1586.51,1210.02 1587.1,1206.73 1587.68,1205.15 1588.27,1203.75 1588.86,1202.79 1589.44,1204.28 1590.03,1202.69 1590.62,1202.77 1591.2,1201.74 1591.79,1204.74 1592.38,1206.22 1592.96,1207.37 1593.55,1207.14 1594.14,1207.04 1594.72,1204.03 1595.31,1203.98 1595.89,1209.4 1596.48,1211.71 1597.07,1211.28 1597.65,1210.89 1598.24,1210.27 1598.83,1210.12 1599.41,1211.45 1600,1212.44 1600.59,1211.82 1601.17,1211.56 1601.76,1209.75 1602.34,1209.51 1602.93,1210.48 1603.52,1207.69 1604.1,1208.84 1604.69,1207.14 1605.28,1205.56 1605.86,1208.17 1606.45,1207.66 1607.04,1210.14 1607.62,1209.87 1608.21,1208.39 1608.8,1206.59 1609.38,1206.27 1609.97,1205.14 1610.55,1205.1 1611.14,1201.98 1611.73,1207.95 1612.31,1207.73 1612.9,1208.93 1613.49,1208.66 1614.07,1208.33 1614.66,1209.64 1615.25,1208.11 1615.83,1208.24 1616.42,1209.68 1617.01,1208 1617.59,1207.78 1618.18,1207.66 1618.76,1204.44 1619.35,1201.77 1619.94,1200.41 1620.52,1206.42 1621.11,1207.68 1621.7,1209.09 1622.28,1205.87 1622.87,1204.29 1623.46,1201.48 1624.04,1201.55 1624.63,1200.14 1625.22,1197.26 1625.8,1199.08 1626.39,1199.23 1626.97,1199.58 1627.56,1197.2 1628.15,1196.04 1628.73,1193.77 1629.32,1193.27 1629.91,1191 1630.49,1193.49 1631.08,1195.61 1631.67,1191.85 1632.25,1191.04 1632.84,1194.69 1633.42,1199.59 1634.01,1201.14 1634.6,1201.45 1635.18,1201.65 1635.77,1203.49 1636.36,1203.62 1636.94,1205.08 1637.53,1204.98 1638.12,1206.33 1638.7,1203.42 1639.29,1204.92 1639.88,1206.35 1640.46,1207.74 1641.05,1207.73 1641.63,1209.03 1642.22,1208.55 1642.81,1212.86 1643.39,1210.83 1643.98,1206.49 1644.57,1205.37 1645.15,1203.96 1645.74,1201.14 1646.33,1202.61 1646.91,1201.31 1647.5,1206.99 1648.09,1206.93 1648.67,1206.72 1649.26,1203.71 1649.84,1204.72 1650.43,1206.1 1651.02,1204.81 1651.6,1204.9 1652.19,1205.92 1652.78,1205.74 1653.36,1204.11 1653.95,1204.11 1654.54,1201.46 1655.12,1200.21 1655.71,1202.14 1656.29,1199.37 1656.88,1198.54 1657.47,1195.8 1658.05,1197.8 1658.64,1192.46 1659.23,1193.3 1659.81,1191.36 1660.4,1193.59 1660.99,1194.04 1661.57,1194.45 1662.16,1198.14 1662.75,1198.59 1663.33,1202 1663.92,1204.94 1664.5,1206.42 1665.09,1209.3 1665.68,1207.87 1666.26,1209.27 1666.85,1207.66 1667.44,1205.98 1668.02,1208.75 1668.61,1210.11 1669.2,1209.62 1669.78,1212.25 1670.37,1214.93 1670.96,1214.56 1671.54,1213.93 1672.13,1213.73 1672.71,1211.7 1673.3,1209.91 1673.89,1209.65 1674.47,1209.42 1675.06,1206.44 1675.65,1204.81 1676.23,1205.95 1676.82,1204.64 1677.41,1203.51 1677.99,1203.53 1678.58,1203.68 1679.17,1205.03 1679.75,1203.66 1680.34,1203.77 1680.92,1203.98 1681.51,1204.35 1682.1,1204.26 1682.68,1205.58 1683.27,1204.07 1683.86,1205.76 1684.44,1205.89 1685.03,1207.07 1685.62,1207.29 1686.2,1207.57 1686.79,1209.18 1687.37,1206.8 1687.96,1202.26 1688.55,1204.01 1689.13,1205.5 1689.72,1206.68 1690.31,1205 1690.89,1205.3 1691.48,1202.54 1692.07,1205.53 1692.65,1203.99 1693.24,1208.01 1693.83,1203.17 1694.41,1203.13 1695,1203.26 1695.58,1206.2 1696.17,1203.48 1696.76,1201.97 1697.34,1200.83 1697.93,1197.89 1698.52,1201.28 1699.1,1202.93 1699.69,1201.66 1700.28,1203.17 1700.86,1202.99 1701.45,1207.19 1702.04,1206.82 1702.62,1206.96 1703.21,1206.85 1703.79,1203.59 1704.38,1205.24 1704.97,1205.49 1705.55,1205.74 1706.14,1202.89 1706.73,1202.78 1707.31,1202.92 1707.9,1203.08 1708.49,1200.37 1709.07,1199.19 1709.66,1199.38 1710.24,1198.26 1710.83,1198.81 1711.42,1200.61 1712,1199.53 1712.59,1198.31 1713.18,1200.25 1713.76,1201.72 1714.35,1203.26 1714.94,1200.37 1715.52,1203.5 1716.11,1202.25 1716.7,1201.22 1717.28,1201.42 1717.87,1198.74 1718.45,1199.18 1719.04,1201.02 1719.63,1198.28 1720.21,1200.15 1720.8,1202.04 1721.39,1197.9 1721.97,1198.5 1722.56,1198.58 1723.15,1198.9 1723.73,1201.12 1724.32,1202.68 1724.91,1198.38 1725.49,1202.72 1726.08,1202.88 1726.66,1200.1 1727.25,1201.64 1727.84,1201.74 1728.42,1201.77 1729.01,1201.92 1729.6,1204.89 1730.18,1204.85 1730.77,1207.66 1731.36,1207.49 1731.94,1208.66 1732.53,1202.82 1733.11,1205.96 1733.7,1205.83 1734.29,1206.86 1734.87,1211.11 1735.46,1212.31 1736.05,1211.8 1736.63,1211.18 1737.22,1208.03 1737.81,1209.5 1738.39,1206.64 1738.98,1208.14 1739.57,1206.52 1740.15,1209.08 1740.74,1208.63 1741.32,1206.9 1741.91,1203.92 1742.5,1202.29 1743.08,1206.76 1743.67,1209.51 1744.26,1209.37 1744.84,1208 1745.43,1206.26 1746.02,1206.1 1746.6,1207.24 1747.19,1209.75 1747.78,1209.37 1748.36,1209.36 1748.95,1209.14 1749.53,1209.07 1750.12,1205.64 1750.71,1205.52 1751.29,1207.06 1751.88,1206.82 1752.47,1208.3 1753.05,1208.06 1753.64,1205.05 1754.23,1204.81 1754.81,1207.54 1755.4,1207.18 1755.99,1205.56 1756.57,1208.35 1757.16,1207.99 1757.74,1206.3 1758.33,1207.54 1758.92,1205.82 1759.5,1205.72 1760.09,1204.19 1760.68,1206.92 1761.26,1206.73 1761.85,1206.36 1762.44,1203.46 1763.02,1202.06 1763.61,1202.25 1764.19,1203.66 1764.78,1204.93 1765.37,1204.82 1765.95,1199.2 1766.54,1201.13 1767.13,1201.53 1767.71,1201.62 1768.3,1200.21 1768.89,1200.56 1769.47,1199.49 1770.06,1199.71 1770.65,1199.6 1771.23,1198.19 1771.82,1198.37 1772.4,1198.57 1772.99,1198.79 1773.58,1199.01 1774.16,1200.77 1774.75,1200.84 1775.34,1199.37 1775.92,1201.16 1776.51,1202.83 1777.1,1202.96 1777.68,1207.17 1778.27,1208.54 1778.86,1211.17 1779.44,1212.35 1780.03,1213.28 1780.61,1211.38 1781.2,1209.73 1781.79,1211.01 1782.37,1207.89 1782.96,1207.84 1783.55,1205.87 1784.13,1207.31 1784.72,1208.66 1785.31,1208.51 1785.89,1209.6 1786.48,1207.7 1787.06,1210.45 1787.65,1208.73 1788.24,1208.71 1788.82,1209.83 1789.41,1207.99 1790,1207.85 1790.58,1210.71 1791.17,1208.7 1791.76,1209.98 1792.34,1212.49 1792.93,1211.98 1793.52,1212.75 1794.1,1208.13 1794.69,1206.54 1795.27,1207.7 1795.86,1206.04 1796.45,1206.11 1797.03,1200.06 1797.62,1200.48 1798.21,1202.19 1798.79,1202.11 1799.38,1203.8 1799.97,1202.59 1800.55,1198.25 1801.14,1195.81 1801.73,1196.27 1802.31,1195.55 1802.9,1196.15 1803.48,1196.8 1804.07,1200.19 1804.66,1197.52 1805.24,1198.14 1805.83,1198.57 1806.42,1201.82 1807,1202.06 1807.59,1203.58 1808.18,1202.17 1808.76,1201 1809.35,1202.69 1809.94,1201.35 1810.52,1204.35 1811.11,1204.37 1811.69,1204.54 1812.28,1204.38 1812.87,1204.31 1813.45,1202.73 1814.04,1202.92 1814.63,1204.52 1815.21,1205.67 1815.8,1202.43 1816.39,1200.87 1816.97,1200.77 1817.56,1202.22 1818.14,1202.22 1818.73,1202.35 1819.32,1204.09 1819.9,1203.68 1820.49,1203.77 1821.08,1205.34 1821.66,1203.61 1822.25,1203.73 1822.84,1208.02 1823.42,1211.04 1824.01,1211.97 1824.6,1214.34 1825.18,1215.24 1825.77,1213.26 1826.35,1211.72 1826.94,1212.86 1827.53,1208.27 1828.11,1206.55 1828.7,1206.53 1829.29,1206.51 1829.87,1206.61 1830.46,1202.39 1831.05,1201.04 1831.63,1204.03 1832.22,1206.8 1832.81,1207.98 1833.39,1206.26 1833.98,1205.91 1834.56,1201.59 1835.15,1200.16 1835.74,1200.45 1836.32,1201.99 1836.91,1200.67 1837.5,1198.34 1838.08,1200.22 1838.67,1197.81 1839.26,1196.76 1839.84,1198.4 1840.43,1199.06 1841.01,1199.31 1841.6,1202.23 1842.19,1202.02 1842.77,1205.14 1843.36,1208.05 1843.95,1206.39 1844.53,1204.7 1845.12,1204.54 1845.71,1205.92 1846.29,1204.41 1846.88,1204.4 1847.47,1204.39 1848.05,1202.85 1848.64,1204.12 1849.22,1204.23 1849.81,1205.85 1850.4,1204.12 1850.98,1205.52 1851.57,1203.89 1852.16,1203.96 1852.74,1201.42 1853.33,1201.79 1853.92,1200.68 1854.5,1199.42 1855.09,1199.6 1855.68,1201.58 1856.26,1204.89 1856.85,1207.63 1857.43,1206.31 1858.02,1206.27 1858.61,1206.25 1859.19,1207.78 1859.78,1210.34 1860.37,1211.38 1860.95,1209.43 1861.54,1209.14 1862.13,1208.91 1862.71,1208.8 1863.3,1207.28 1863.88,1207.02 1864.47,1207.26 1865.06,1208.63 1865.64,1208.59 1866.23,1211.4 1866.82,1212.44 1867.4,1212.37 1867.99,1211.92 1868.58,1211.57 1869.16,1211.3 1869.75,1213.88 1870.34,1211.74 1870.92,1208.31 1871.51,1210.87 1872.09,1207.63 1872.68,1207.23 1873.27,1204.38 1873.85,1204.4 1874.44,1201.75 1875.03,1203.24 1875.61,1204.73 1876.2,1203.58 1876.79,1205.01 1877.37,1203.68 1877.96,1203.83 1878.55,1203.59 1879.13,1203.68 1879.72,1203.81 1880.3,1201.15 1880.89,1203.91 1881.48,1202.3 1882.06,1205.24 1882.65,1206.83 1883.24,1208.16 1883.82,1205.09 1884.41,1205.14 1885,1203.8 1885.58,1205.33 1886.17,1200.93 1886.76,1198.42 1887.34,1204.82 1887.93,1204.81 1888.51,1204.98 1889.1,1203.57 1889.69,1203.78 1890.27,1205.14 1890.86,1206.59 1891.45,1205.45 1892.03,1204 1892.62,1205.45 1893.21,1205.59 1893.79,1204.36 1894.38,1204.54 1894.96,1204.46 1895.55,1203.21 1896.14,1201.85 1896.72,1201.93 1897.31,1198.99 1897.9,1202.27 1898.48,1205.1 1899.07,1207.84 1899.66,1208.06 1900.24,1208.15 1900.83,1208.3 1901.42,1206.75 1902,1205.3 1902.59,1206.62 1903.17,1206.56 1903.76,1208.04 1904.35,1211.8 1904.93,1212.85 1905.52,1212.32 1906.11,1211.92 1906.69,1211.53 1907.28,1211 1907.87,1209.35 1908.45,1209.35 1909.04,1206.06 1909.63,1204.33 1910.21,1204.11 1910.8,1203.94 1911.38,1202.49 1911.97,1199.91 1912.56,1200.06 1913.14,1201.67 1913.73,1201.91 1914.32,1203.53 1914.9,1202.03 1915.49,1203.67 1916.08,1205.27 1916.66,1205.16 1917.25,1205.15 1917.83,1199.71 1918.42,1202.59 1919.01,1201.28 1919.59,1201.03 1920.18,1200.76 1920.77,1202.24 1921.35,1200.98 1921.94,1204.08 1922.53,1201.33 1923.11,1201.35 1923.7,1203.04 1924.29,1203.29 1924.87,1199.1 1925.46,1201.06 1926.04,1204.27 1926.63,1204.55 1927.22,1202.93 1927.8,1204.29 1928.39,1203.12 1928.98,1201.6 1929.56,1200.42 1930.15,1204.79 1930.74,1205.01 1931.32,1204.72 1931.91,1203.03 1932.5,1204.44 1933.08,1204.34 1933.67,1205.53 1934.25,1203.95 1934.84,1203.87 1935.43,1200.92 1936.01,1204.02 1936.6,1202.83 1937.19,1202.99 1937.77,1202.95 1938.36,1206.12 1938.95,1208.97 1939.53,1211.74 1940.12,1212.58 1940.71,1211.05 1941.29,1209.11 1941.88,1208.73 1942.46,1205.32 1943.05,1206.62 1943.64,1208.22 1944.22,1205.23 1944.81,1203.63 1945.4,1207.8 1945.98,1203.31 1946.57,1203.24 1947.16,1204.71 1947.74,1207.63 1948.33,1208.95 1948.91,1211.97 1949.5,1212.93 1950.09,1212.66 1950.67,1209.18 1951.26,1209.19 1951.85,1207.55 1952.43,1205.78 1953.02,1201.61 1953.61,1206.29 1954.19,1206.37 1954.78,1207.52 1955.37,1207.76 1955.95,1204.56 1956.54,1208.79 1957.12,1208.57 1957.71,1208.06 1958.3,1205.03 1958.88,1203.59 1959.47,1203.68 1960.06,1205.18 1960.64,1203.91 1961.23,1203.66 1961.82,1202.11 1962.4,1197.82 1962.99,1198.22 1963.58,1198.91 1964.16,1197.58 1964.75,1196.41 1965.33,1198.32 1965.92,1201.42 1966.51,1204.45 1967.09,1204.41 1967.68,1200.35 1968.27,1199.49 1968.85,1197.18 1969.44,1200.34 1970.03,1199.24 1970.61,1198.05 1971.2,1204.17 1971.78,1205.22 1972.37,1206.49 1972.96,1207.59 1973.54,1206.17 1974.13,1204.71 1974.72,1205.85 1975.3,1204.48 1975.89,1207.09 1976.48,1206.9 1977.06,1205.28 1977.65,1205.08 1978.24,1206.31 1978.82,1207.72 1979.41,1206.13 1979.99,1207.54 1980.58,1208.56 1981.17,1209.63 1981.75,1208.14 1982.34,1207.84 1982.93,1207.6 1983.51,1207.37 1984.1,1204.5 1984.69,1202.94 1985.27,1203.16 1985.86,1200.73 1986.45,1202.39 1987.03,1200.86 1987.62,1199.9 1988.2,1200.13 1988.79,1201.62 1989.38,1200.31 1989.96,1203.14 1990.55,1204.28 1991.14,1202.54 1991.72,1205.23 1992.31,1205.17 1992.9,1206.86 1993.48,1206.95 1994.07,1209.98 1994.65,1209.55 1995.24,1209.39 1995.83,1206.54 1996.41,1209.15 1997,1210.3 1997.59,1212.83 1998.17,1208.02 1998.76,1207.78 1999.35,1206.22 1999.93,1205.94 2000.52,1205.96 2001.11,1208.71 2001.69,1206.99 2002.28,1205.42 2002.86,1205.55 2003.45,1203.89 2004.04,1204.18 2004.62,1204.27 2005.21,1204.48 2005.8,1203.14 2006.38,1201.7 2006.97,1203.56 2007.56,1205.07 2008.14,1205.13 2008.73,1206.75 2009.32,1202.46 2009.9,1203.93 2010.49,1206.82 2011.07,1206.85 2011.66,1208.06 2012.25,1210.59 2012.83,1208.86 2013.42,1205.88 2014.01,1205.98 2014.59,1204.41 2015.18,1201.48 2015.77,1204.87 2016.35,1206.43 2016.94,1210.92 2017.53,1206.65 2018.11,1206.5 2018.7,1207.87 2019.28,1207.66 2019.87,1207.32 2020.46,1207.05 2021.04,1202.47 2021.63,1202.65 2022.22,1202.54 2022.8,1205.41 2023.39,1205.67 2023.98,1204.26 2024.56,1205.9 2025.15,1205.95 2025.73,1206.11 2026.32,1204.49 2026.91,1203.2 2027.49,1204.73 2028.08,1203.38 2028.67,1203.39 2029.25,1203.58 2029.84,1205.2 2030.43,1207.95 2031.01,1205 2031.6,1206.87 2032.19,1208.27 2032.77,1205.03 2033.36,1206.57 2033.94,1203.77 2034.53,1204.01 2035.12,1206.9 2035.7,1205.11 2036.29,1204.97 2036.88,1203.26 2037.46,1206.11 2038.05,1207.89 2038.64,1207.91 2039.22,1204.61 2039.81,1203.01 2040.4,1201.88 2040.98,1201.93 2041.57,1199.07 2042.15,1202.18 2042.74,1202.39 2043.33,1203.95 2043.91,1205.3 2044.5,1203.82 2045.09,1203.59 2045.67,1200.58 2046.26,1200.45 2046.85,1197.82 2047.43,1198.27 2048.02,1200.19 2048.6,1197.61 2049.19,1199.22 2049.78,1199.47 2050.36,1199.66 2050.95,1201.32 2051.54,1200.1 2052.12,1200.13 2052.71,1200.27 2053.3,1201.73 2053.88,1204.63 2054.47,1205.97 2055.06,1210.16 2055.64,1203.99 2056.23,1204.13 2056.81,1201.23 2057.4,1202.59 2057.99,1202.79 2058.57,1198.13 2059.16,1198.34 2059.75,1198.43 2060.33,1197.18 2060.92,1196.08 2061.51,1199.49 2062.09,1202.85 2062.68,1201.02 2063.27,1201.21 2063.85,1201.48 2064.44,1200.24 2065.02,1200.42 2065.61,1201.94 2066.2,1205.1 2066.78,1204.68 2067.37,1206.15 2067.96,1203.33 2068.54,1203.76 2069.13,1202.17 2069.72,1203.89 2070.3,1200.92 2070.89,1201.19 2071.48,1202.92 2072.06,1201.76 2072.65,1201.93 2073.23,1201.9 2073.82,1203.01 2074.41,1203.06 2074.99,1203.38 2075.58,1206.14 2076.17,1207.48 2076.75,1207.35 2077.34,1211.3 2077.93,1211.09 2078.51,1211.07 2079.1,1212.05 2079.68,1211.59 2080.27,1212.43 2080.86,1210.69 2081.44,1212.92 2082.03,1212.38 2082.62,1210.44 2083.2,1208.53 2083.79,1211.25 2084.38,1213.88 2084.96,1212.13 2085.55,1210.31 2086.14,1209.62 2086.72,1209.2 2087.31,1208.59 2087.89,1209.88 2088.48,1209.66 2089.07,1209.2 2089.65,1208.81 2090.24,1208.38 2090.83,1211.1 2091.41,1210.96 2092,1210.97 2092.59,1207.93 2093.17,1207.86 2093.76,1206.51 2094.35,1210.65 2094.93,1207.61 2095.52,1207.37 2096.1,1207.25 2096.69,1208.13 2097.28,1206.5 2097.86,1207.86 2098.45,1207.98 2099.04,1206.52 2099.62,1206.26 2100.21,1206.2 2100.8,1206.37 2101.38,1206.27 2101.97,1207.57 2102.55,1204.59 2103.14,1203.09 2103.73,1203.08 2104.31,1204.63 2104.9,1203.4 2105.49,1206.23 2106.07,1201.93 2106.66,1203.5 2107.25,1202.09 2107.83,1200.79 2108.42,1199.71 2109.01,1200.06 2109.59,1200.39 2110.18,1203.39 2110.76,1203.39 2111.35,1203.49 2111.94,1200.51 2112.52,1200.67 2113.11,1199.28 2113.7,1201.08 2114.28,1201.16 2114.87,1201.46 2115.46,1200.2 2116.04,1198.77 2116.63,1199.15 2117.22,1199.54 2117.8,1199.96 2118.39,1200.06 2118.97,1200.53 2119.56,1200.4 2120.15,1199.14 2120.73,1200.96 2121.32,1200.16 2121.91,1201.91 2122.49,1205.1 2123.08,1202.14 2123.67,1200.82 2124.25,1199.57 2124.84,1199.58 2125.42,1199.95 2126.01,1201.57 2126.6,1203.48 2127.18,1201.9 2127.77,1203.34 2128.36,1203.23 2128.94,1204.84 2129.53,1203.5 2130.12,1199.48 2130.7,1198.45 2131.29,1200.01 2131.88,1199.08 2132.46,1199.14 2133.05,1199.42 2133.63,1201.23 2134.22,1201.69 2134.81,1202.03 2135.39,1199.24 2135.98,1201.31 2136.57,1200.2 2137.15,1202.98 2137.74,1204.42 2138.33,1204.16 2138.91,1204.69 2139.5,1209.01 2140.09,1209.12 2140.67,1208.89 2141.26,1210.16 2141.84,1208.37 2142.43,1209.42 2143.02,1210.42 2143.6,1213.01 2144.19,1215.36 2144.78,1213.19 2145.36,1211.45 2145.95,1212.53 2146.54,1213.91 2147.12,1213.62 2147.71,1213.22 2148.3,1211.27 2148.88,1213.7 2149.47,1213.07 2150.05,1207.93 2150.64,1209.44 2151.23,1206.46 2151.81,1207.83 2152.4,1209.09 2152.99,1209.03 2153.57,1207.76 2154.16,1207.37 2154.75,1207.19 2155.33,1208.25 2155.92,1207.87 2156.5,1207.75 2157.09,1205.84 2157.68,1205.79 2158.26,1205.35 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1205.24 L986.612 1205.24 L987.198 1205.24 L987.785 1205.24 L988.371 1205.24 L988.957 1205.24 L989.544 1205.24 L990.13 1205.24 L990.717 1205.24 L991.303 1205.24 L991.889 1205.24 L992.476 1205.24 L993.062 1205.24 L993.649 1205.24 L994.235 1205.24 L994.822 1205.24 L995.408 1205.24 L995.994 1205.24 L996.581 1205.24 L997.167 1205.24 L997.754 1205.24 L998.34 1205.24 L998.926 1205.24 L999.513 1205.24 L1000.1 1205.24 L1000.69 1205.24 L1001.27 1205.24 L1001.86 1205.24 L1002.44 1205.24 L1003.03 1205.24 L1003.62 1205.24 L1004.2 1205.24 L1004.79 1205.24 L1005.38 1205.24 L1005.96 1205.24 L1006.55 1205.24 L1007.14 1205.24 L1007.72 1205.24 L1008.31 1205.24 L1008.9 1205.24 L1009.48 1205.24 L1010.07 1205.24 L1010.65 1205.24 L1011.24 1205.24 L1011.83 1205.24 L1012.41 1205.24 L1013 1205.24 L1013.59 1205.24 L1014.17 1205.24 L1014.76 1205.24 L1015.35 1205.24 L1015.93 1205.24 L1016.52 1205.24 L1017.11 1205.24 L1017.69 1205.24 L1018.28 1205.24 L1018.86 1205.24 L1019.45 1205.24 L1020.04 1205.24 L1020.62 1205.24 L1021.21 1205.24 L1021.8 1205.24 L1022.38 1205.24 L1022.97 1205.24 L1023.56 1205.24 L1024.14 1205.24 L1024.73 1205.24 L1025.32 1205.24 L1025.9 1205.24 L1026.49 1205.24 L1027.07 1205.24 L1027.66 1205.24 L1028.25 1205.24 L1028.83 1205.24 L1029.42 1205.24 L1030.01 1205.24 L1030.59 1205.24 L1031.18 1205.24 L1031.77 1205.24 L1032.35 1205.24 L1032.94 1205.24 L1033.52 1205.24 L1034.11 1205.24 L1034.7 1205.24 L1035.28 1205.24 L1035.87 1205.24 L1036.46 1205.24 L1037.04 1205.24 L1037.63 1205.24 L1038.22 1205.24 L1038.8 1205.24 L1039.39 1205.24 L1039.98 1205.24 L1040.56 1205.24 L1041.15 1205.24 L1041.73 1205.24 L1042.32 1205.24 L1042.91 1205.24 L1043.49 1205.24 L1044.08 1205.24 L1044.67 1205.24 L1045.25 1205.24 L1045.84 1205.24 L1046.43 1205.24 L1047.01 1205.24 L1047.6 1205.24 L1048.19 1205.24 L1048.77 1205.24 L1049.36 1205.24 L1049.94 1205.24 L1050.53 1205.24 L1051.12 1205.24 L1051.7 1205.24 L1052.29 1205.24 L1052.88 1205.24 L1053.46 1205.24 L1054.05 1205.24 L1054.64 1205.24 L1055.22 1205.24 L1055.81 1205.24 L1056.39 1205.24 L1056.98 1205.24 L1057.57 1205.24 L1058.15 1205.24 L1058.74 1205.24 L1059.33 1205.24 L1059.91 1205.24 L1060.5 1205.24 L1061.09 1205.24 L1061.67 1205.24 L1062.26 1205.24 L1062.85 1205.24 L1063.43 1205.24 L1064.02 1205.24 L1064.6 1205.24 L1065.19 1205.24 L1065.78 1205.24 L1066.36 1205.24 L1066.95 1205.24 L1067.54 1205.24 L1068.12 1205.24 L1068.71 1205.24 L1069.3 1205.24 L1069.88 1205.24 L1070.47 1205.24 L1071.06 1205.24 L1071.64 1205.24 L1072.23 1205.24 L1072.81 1205.24 L1073.4 1205.24 L1073.99 1205.24 L1074.57 1205.24 L1075.16 1205.24 L1075.75 1205.24 L1076.33 1205.24 L1076.92 1205.24 L1077.51 1205.24 L1078.09 1205.24 L1078.68 1205.24 L1079.26 1205.24 L1079.85 1205.24 L1080.44 1205.24 L1081.02 1205.24 L1081.61 1205.24 L1082.2 1205.24 L1082.78 1205.24 L1083.37 1205.24 L1083.96 1205.24 L1084.54 1205.24 L1085.13 1205.24 L1085.72 1205.24 L1086.3 1205.24 L1086.89 1205.24 L1087.47 1205.24 L1088.06 1205.24 L1088.65 1205.24 L1089.23 1205.24 L1089.82 1205.24 L1090.41 1205.24 L1090.99 1205.24 L1091.58 1205.24 L1092.17 1205.24 L1092.75 1205.24 L1093.34 1205.24 L1093.93 1205.24 L1094.51 1205.24 L1095.1 1205.24 L1095.68 1205.24 L1096.27 1205.24 L1096.86 1205.24 L1097.44 1205.24 L1098.03 1205.24 L1098.62 1205.24 L1099.2 1205.24 L1099.79 1205.24 L1100.38 1205.24 L1100.96 1205.24 L1101.55 1205.24 L1102.14 1205.24 L1102.72 1205.24 L1103.31 1205.24 L1103.89 1205.24 L1104.48 1205.24 L1105.07 1205.24 L1105.65 1205.24 L1106.24 1205.24 L1106.83 1205.24 L1107.41 1205.24 L1108 1205.24 L1108.59 1205.24 L1109.17 1205.24 L1109.76 1205.24 L1110.34 1205.24 L1110.93 1205.24 L1111.52 1205.24 L1112.1 1205.24 L1112.69 1205.24 L1113.28 1205.24 L1113.86 1205.24 L1114.45 1205.24 L1115.04 1205.24 L1115.62 1205.24 L1116.21 1205.24 L1116.8 1205.24 L1117.38 1205.24 L1117.97 1205.24 L1118.55 1205.24 L1119.14 1205.24 L1119.73 1205.24 L1120.31 1205.24 L1120.9 1205.24 L1121.49 1205.24 L1122.07 1205.24 L1122.66 1205.24 L1123.25 1205.24 L1123.83 1205.24 L1124.42 1205.24 L1125.01 1205.24 L1125.59 1205.24 L1126.18 1205.24 L1126.76 1205.24 L1127.35 1205.24 L1127.94 1205.24 L1128.52 1205.24 L1129.11 1205.24 L1129.7 1205.24 L1130.28 1205.24 L1130.87 1205.24 L1131.46 1205.24 L1132.04 1205.24 L1132.63 1205.24 L1133.21 1205.24 L1133.8 1205.24 L1134.39 1205.24 L1134.97 1205.24 L1135.56 1205.24 L1136.15 1205.24 L1136.73 1205.24 L1137.32 1205.24 L1137.91 1205.24 L1138.49 1205.24 L1139.08 1205.24 L1139.67 1205.24 L1140.25 1205.24 L1140.84 1205.24 L1141.42 1205.24 L1142.01 1205.24 L1142.6 1205.24 L1143.18 1205.24 L1143.77 1205.24 L1144.36 1205.24 L1144.94 1205.24 L1145.53 1205.24 L1146.12 1205.24 L1146.7 1205.24 L1147.29 1205.24 L1147.88 1205.24 L1148.46 1205.24 L1149.05 1205.24 L1149.63 1205.24 L1150.22 1205.24 L1150.81 1205.24 L1151.39 1205.24 L1151.98 1205.24 L1152.57 1205.24 L1153.15 1205.24 L1153.74 1205.24 L1154.33 1205.24 L1154.91 1205.24 L1155.5 1205.24 L1156.09 1205.24 L1156.67 1205.24 L1157.26 1205.24 L1157.84 1205.24 L1158.43 1205.24 L1159.02 1205.24 L1159.6 1205.24 L1160.19 1205.24 L1160.78 1205.24 L1161.36 1205.24 L1161.95 1205.24 L1162.54 1205.24 L1163.12 1205.24 L1163.71 1205.24 L1164.29 1205.24 L1164.88 1205.24 L1165.47 1205.24 L1166.05 1205.24 L1166.64 1205.24 L1167.23 1205.24 L1167.81 1205.24 L1168.4 1205.24 L1168.99 1205.24 L1169.57 1205.24 L1170.16 1205.24 L1170.75 1205.24 L1171.33 1205.24 L1171.92 1205.24 L1172.5 1205.24 L1173.09 1205.24 L1173.68 1205.24 L1174.26 1205.24 L1174.85 1205.24 L1175.44 1205.24 L1176.02 1205.24 L1176.61 1205.24 L1177.2 1205.24 L1177.78 1205.24 L1178.37 1205.24 L1178.96 1205.24 L1179.54 1205.24 L1180.13 1205.24 L1180.71 1205.24 L1181.3 1205.24 L1181.89 1205.24 L1182.47 1205.24 L1183.06 1205.24 L1183.65 1205.24 L1184.23 1205.24 L1184.82 1205.24 L1185.41 1205.24 L1185.99 1205.24 L1186.58 1205.24 L1187.16 1205.24 L1187.75 1205.24 L1188.34 1205.24 L1188.92 1205.24 L1189.51 1205.24 L1190.1 1205.24 L1190.68 1205.24 L1191.27 1205.24 L1191.86 1205.24 L1192.44 1205.24 L1193.03 1205.24 L1193.62 1205.24 L1194.2 1205.24 L1194.79 1205.24 L1195.37 1205.24 L1195.96 1205.24 L1196.55 1205.24 L1197.13 1205.24 L1197.72 1205.24 L1198.31 1205.24 L1198.89 1205.24 L1199.48 1205.24 L1200.07 1205.24 L1200.65 1205.24 L1201.24 1205.24 L1201.83 1205.24 L1202.41 1205.24 L1203 1205.24 L1203.58 1205.24 L1204.17 1205.24 L1204.76 1205.24 L1205.34 1205.24 L1205.93 1205.24 L1206.52 1205.24 L1207.1 1205.24 L1207.69 1205.24 L1208.28 1205.24 L1208.86 1205.24 L1209.45 1205.24 L1210.03 1205.24 L1210.62 1205.24 L1211.21 1205.24 L1211.79 1205.24 L1212.38 1205.24 L1212.97 1205.24 L1213.55 1205.24 L1214.14 1205.24 L1214.73 1205.24 L1215.31 1205.24 L1215.9 1205.24 L1216.49 1205.24 L1217.07 1205.24 L1217.66 1205.24 L1218.24 1205.24 L1218.83 1205.24 L1219.42 1205.24 L1220 1205.24 L1220.59 1205.24 L1221.18 1205.24 L1221.76 1205.24 L1222.35 1205.24 L1222.94 1205.24 L1223.52 1205.24 L1224.11 1205.24 L1224.7 1205.24 L1225.28 1205.24 L1225.87 1205.24 L1226.45 1205.24 L1227.04 1205.24 L1227.63 1205.24 L1228.21 1205.24 L1228.8 1205.24 L1229.39 1205.24 L1229.97 1205.24 L1230.56 1205.24 L1231.15 1205.24 L1231.73 1205.24 L1232.32 1205.24 L1232.91 1205.24 L1233.49 1205.24 L1234.08 1205.24 L1234.66 1205.24 L1235.25 1205.24 L1235.84 1205.24 L1236.42 1205.24 L1237.01 1205.24 L1237.6 1205.24 L1238.18 1205.24 L1238.77 1205.24 L1239.36 1205.24 L1239.94 1205.24 L1240.53 1205.24 L1241.11 1205.24 L1241.7 1205.24 L1242.29 1205.24 L1242.87 1205.24 L1243.46 1205.24 L1244.05 1205.24 L1244.63 1205.24 L1245.22 1205.24 L1245.81 1205.24 L1246.39 1205.24 L1246.98 1205.24 L1247.57 1205.24 L1248.15 1205.24 L1248.74 1205.24 L1249.32 1205.24 L1249.91 1205.24 L1250.5 1205.24 L1251.08 1205.24 L1251.67 1205.24 L1252.26 1205.24 L1252.84 1205.24 L1253.43 1205.24 L1254.02 1205.24 L1254.6 1205.24 L1255.19 1205.24 L1255.78 1205.24 L1256.36 1205.24 L1256.95 1205.24 L1257.53 1205.24 L1258.12 1205.24 L1258.71 1205.24 L1259.29 1205.24 L1259.88 1205.24 L1260.47 1205.24 L1261.05 1205.24 L1261.64 1205.24 L1262.23 1205.24 L1262.81 1205.24 L1263.4 1205.24 L1263.98 1205.24 L1264.57 1205.24 L1265.16 1205.24 L1265.74 1205.24 L1266.33 1205.24 L1266.92 1205.24 L1267.5 1205.24 L1268.09 1205.24 L1268.68 1205.24 L1269.26 1205.24 L1269.85 1205.24 L1270.44 1205.24 L1271.02 1205.24 L1271.61 1205.24 L1272.19 1205.24 L1272.78 1205.24 L1273.37 1205.24 L1273.95 1205.24 L1274.54 1205.24 L1275.13 1205.24 L1275.71 1205.24 L1276.3 1205.24 L1276.89 1205.24 L1277.47 1205.24 L1278.06 1205.24 L1278.65 1205.24 L1279.23 1205.24 L1279.82 1205.24 L1280.4 1205.24 L1280.99 1205.24 L1281.58 1205.24 L1282.16 1205.24 L1282.75 1205.24 L1283.34 1205.24 L1283.92 1205.24 L1284.51 1205.24 L1285.1 1205.24 L1285.68 1205.24 L1286.27 1205.24 L1286.86 1205.24 L1287.44 1205.24 L1288.03 1205.24 L1288.61 1205.24 L1289.2 1205.24 L1289.79 1205.24 L1290.37 1205.24 L1290.96 1205.24 L1291.55 1205.24 L1292.13 1205.24 L1292.72 1205.24 L1293.31 1205.24 L1293.89 1205.24 L1294.48 1205.24 L1295.06 1205.24 L1295.65 1205.24 L1296.24 1205.24 L1296.82 1205.24 L1297.41 1205.24 L1298 1205.24 L1298.58 1205.24 L1299.17 1205.24 L1299.76 1205.24 L1300.34 1205.24 L1300.93 1205.24 L1301.52 1205.24 L1302.1 1205.24 L1302.69 1205.24 L1303.27 1205.24 L1303.86 1205.24 L1304.45 1205.24 L1305.03 1205.24 L1305.62 1205.24 L1306.21 1205.24 L1306.79 1205.24 L1307.38 1205.24 L1307.97 1205.24 L1308.55 1205.24 L1309.14 1205.24 L1309.73 1205.24 L1310.31 1205.24 L1310.9 1205.24 L1311.48 1205.24 L1312.07 1205.24 L1312.66 1205.24 L1313.24 1205.24 L1313.83 1205.24 L1314.42 1205.24 L1315 1205.24 L1315.59 1205.24 L1316.18 1205.24 L1316.76 1205.24 L1317.35 1205.24 L1317.93 1205.24 L1318.52 1205.24 L1319.11 1205.24 L1319.69 1205.24 L1320.28 1205.24 L1320.87 1205.24 L1321.45 1205.24 L1322.04 1205.24 L1322.63 1205.24 L1323.21 1205.24 L1323.8 1205.24 L1324.39 1205.24 L1324.97 1205.24 L1325.56 1205.24 L1326.14 1205.24 L1326.73 1205.24 L1327.32 1205.24 L1327.9 1205.24 L1328.49 1205.24 L1329.08 1205.24 L1329.66 1205.24 L1330.25 1205.24 L1330.84 1205.24 L1331.42 1205.24 L1332.01 1205.24 L1332.6 1205.24 L1333.18 1205.24 L1333.77 1205.24 L1334.35 1205.24 L1334.94 1205.24 L1335.53 1205.24 L1336.11 1205.24 L1336.7 1205.24 L1337.29 1205.24 L1337.87 1205.24 L1338.46 1205.24 L1339.05 1205.24 L1339.63 1205.24 L1340.22 1205.24 L1340.8 1205.24 L1341.39 1205.24 L1341.98 1205.24 L1342.56 1205.24 L1343.15 1205.24 L1343.74 1205.24 L1344.32 1205.24 L1344.91 1205.24 L1345.5 1205.24 L1346.08 1205.24 L1346.67 1205.24 L1347.26 1205.24 L1347.84 1205.24 L1348.43 1205.24 L1349.01 1205.24 L1349.6 1205.24 L1350.19 1205.24 L1350.77 1205.24 L1351.36 1205.24 L1351.95 1205.24 L1352.53 1205.24 L1353.12 1205.24 L1353.71 1205.24 L1354.29 1205.24 L1354.88 1205.24 L1355.47 1205.24 L1356.05 1205.24 L1356.64 1205.24 L1357.22 1205.24 L1357.81 1205.24 L1358.4 1205.24 L1358.98 1205.24 L1359.57 1205.24 L1360.16 1205.24 L1360.74 1205.24 L1361.33 1205.24 L1361.92 1205.24 L1362.5 1205.24 L1363.09 1205.24 L1363.68 1205.24 L1364.26 1205.24 L1364.85 1205.24 L1365.43 1205.24 L1366.02 1205.24 L1366.61 1205.24 L1367.19 1205.24 L1367.78 1205.24 L1368.37 1205.24 L1368.95 1205.24 L1369.54 1205.24 L1370.13 1205.24 L1370.71 1205.24 L1371.3 1205.24 L1371.88 1205.24 L1372.47 1205.24 L1373.06 1205.24 L1373.64 1205.24 L1374.23 1205.24 L1374.82 1205.24 L1375.4 1205.24 L1375.99 1205.24 L1376.58 1205.24 L1377.16 1205.24 L1377.75 1205.24 L1378.34 1205.24 L1378.92 1205.24 L1379.51 1205.24 L1380.09 1205.24 L1380.68 1205.24 L1381.27 1205.24 L1381.85 1205.24 L1382.44 1205.24 L1383.03 1205.24 L1383.61 1205.24 L1384.2 1205.24 L1384.79 1205.24 L1385.37 1205.24 L1385.96 1205.24 L1386.55 1205.24 L1387.13 1205.24 L1387.72 1205.24 L1388.3 1205.24 L1388.89 1205.24 L1389.48 1205.24 L1390.06 1205.24 L1390.65 1205.24 L1391.24 1205.24 L1391.82 1205.24 L1392.41 1205.24 L1393 1205.24 L1393.58 1205.24 L1394.17 1205.24 L1394.75 1205.24 L1395.34 1205.24 L1395.93 1205.24 L1396.51 1205.24 L1397.1 1205.24 L1397.69 1205.24 L1398.27 1205.24 L1398.86 1205.24 L1399.45 1205.24 L1400.03 1205.24 L1400.62 1205.24 L1401.21 1205.24 L1401.79 1205.24 L1402.38 1205.24 L1402.96 1205.24 L1403.55 1205.24 L1404.14 1205.24 L1404.72 1205.24 L1405.31 1205.24 L1405.9 1205.24 L1406.48 1205.24 L1407.07 1205.24 L1407.66 1205.24 L1408.24 1205.24 L1408.83 1205.24 L1409.42 1205.24 L1410 1205.24 L1410.59 1205.24 L1411.17 1205.24 L1411.76 1205.24 L1412.35 1205.24 L1412.93 1205.24 L1413.52 1205.24 L1414.11 1205.24 L1414.69 1205.24 L1415.28 1205.24 L1415.87 1205.24 L1416.45 1205.24 L1417.04 1205.24 L1417.63 1205.24 L1418.21 1205.24 L1418.8 1205.24 L1419.38 1205.24 L1419.97 1205.24 L1420.56 1205.24 L1421.14 1205.24 L1421.73 1205.24 L1422.32 1205.24 L1422.9 1205.24 L1423.49 1205.24 L1424.08 1205.24 L1424.66 1205.24 L1425.25 1205.24 L1425.83 1205.24 L1426.42 1205.24 L1427.01 1205.24 L1427.59 1205.24 L1428.18 1205.24 L1428.77 1205.24 L1429.35 1205.24 L1429.94 1205.24 L1430.53 1205.24 L1431.11 1205.24 L1431.7 1205.24 L1432.29 1205.24 L1432.87 1205.24 L1433.46 1205.24 L1434.04 1205.24 L1434.63 1205.24 L1435.22 1205.24 L1435.8 1205.24 L1436.39 1205.24 L1436.98 1205.24 L1437.56 1205.24 L1438.15 1205.24 L1438.74 1205.24 L1439.32 1205.24 L1439.91 1205.24 L1440.5 1205.24 L1441.08 1205.24 L1441.67 1205.24 L1442.25 1205.24 L1442.84 1205.24 L1443.43 1205.24 L1444.01 1205.24 L1444.6 1205.24 L1445.19 1205.24 L1445.77 1205.24 L1446.36 1205.24 L1446.95 1205.24 L1447.53 1205.24 L1448.12 1205.24 L1448.7 1205.24 L1449.29 1205.24 L1449.88 1205.24 L1450.46 1205.24 L1451.05 1205.24 L1451.64 1205.24 L1452.22 1205.24 L1452.81 1205.24 L1453.4 1205.24 L1453.98 1205.24 L1454.57 1205.24 L1455.16 1205.24 L1455.74 1205.24 L1456.33 1205.24 L1456.91 1205.24 L1457.5 1205.24 L1458.09 1205.24 L1458.67 1205.24 L1459.26 1205.24 L1459.85 1205.24 L1460.43 1205.24 L1461.02 1205.24 L1461.61 1205.24 L1462.19 1205.24 L1462.78 1205.24 L1463.37 1205.24 L1463.95 1205.24 L1464.54 1205.24 L1465.12 1205.24 L1465.71 1205.24 L1466.3 1205.24 L1466.88 1205.24 L1467.47 1205.24 L1468.06 1205.24 L1468.64 1205.24 L1469.23 1205.24 L1469.82 1205.24 L1470.4 1205.24 L1470.99 1205.24 L1471.57 1205.24 L1472.16 1205.24 L1472.75 1205.24 L1473.33 1205.24 L1473.92 1205.24 L1474.51 1205.24 L1475.09 1205.24 L1475.68 1205.24 L1476.27 1205.24 L1476.85 1205.24 L1477.44 1205.24 L1478.03 1205.24 L1478.61 1205.24 L1479.2 1205.24 L1479.78 1205.24 L1480.37 1205.24 L1480.96 1205.24 L1481.54 1205.24 L1482.13 1205.24 L1482.72 1205.24 L1483.3 1205.24 L1483.89 1205.24 L1484.48 1205.24 L1485.06 1205.24 L1485.65 1205.24 L1486.24 1205.24 L1486.82 1205.24 L1487.41 1205.24 L1487.99 1205.24 L1488.58 1205.24 L1489.17 1205.24 L1489.75 1205.24 L1490.34 1205.24 L1490.93 1205.24 L1491.51 1205.24 L1492.1 1205.24 L1492.69 1205.24 L1493.27 1205.24 L1493.86 1205.24 L1494.45 1205.24 L1495.03 1205.24 L1495.62 1205.24 L1496.2 1205.24 L1496.79 1205.24 L1497.38 1205.24 L1497.96 1205.24 L1498.55 1205.24 L1499.14 1205.24 L1499.72 1205.24 L1500.31 1205.24 L1500.9 1205.24 L1501.48 1205.24 L1502.07 1205.24 L1502.65 1205.24 L1503.24 1205.24 L1503.83 1205.24 L1504.41 1205.24 L1505 1205.24 L1505.59 1205.24 L1506.17 1205.24 L1506.76 1205.24 L1507.35 1205.24 L1507.93 1205.24 L1508.52 1205.24 L1509.11 1205.24 L1509.69 1205.24 L1510.28 1205.24 L1510.86 1205.24 L1511.45 1205.24 L1512.04 1205.24 L1512.62 1205.24 L1513.21 1205.24 L1513.8 1205.24 L1514.38 1205.24 L1514.97 1205.24 L1515.56 1205.24 L1516.14 1205.24 L1516.73 1205.24 L1517.32 1205.24 L1517.9 1205.24 L1518.49 1205.24 L1519.07 1205.24 L1519.66 1205.24 L1520.25 1205.24 L1520.83 1205.24 L1521.42 1205.24 L1522.01 1205.24 L1522.59 1205.24 L1523.18 1205.24 L1523.77 1205.24 L1524.35 1205.24 L1524.94 1205.24 L1525.52 1205.24 L1526.11 1205.24 L1526.7 1205.24 L1527.28 1205.24 L1527.87 1205.24 L1528.46 1205.24 L1529.04 1205.24 L1529.63 1205.24 L1530.22 1205.24 L1530.8 1205.24 L1531.39 1205.24 L1531.98 1205.24 L1532.56 1205.24 L1533.15 1205.24 L1533.73 1205.24 L1534.32 1205.24 L1534.91 1205.24 L1535.49 1205.24 L1536.08 1205.24 L1536.67 1205.24 L1537.25 1205.24 L1537.84 1205.24 L1538.43 1205.24 L1539.01 1205.24 L1539.6 1205.24 L1540.19 1205.24 L1540.77 1205.24 L1541.36 1205.24 L1541.94 1205.24 L1542.53 1205.24 L1543.12 1205.24 L1543.7 1205.24 L1544.29 1205.24 L1544.88 1205.24 L1545.46 1205.24 L1546.05 1205.24 L1546.64 1205.24 L1547.22 1205.24 L1547.81 1205.24 L1548.4 1205.24 L1548.98 1205.24 L1549.57 1205.24 L1550.15 1205.24 L1550.74 1205.24 L1551.33 1205.24 L1551.91 1205.24 L1552.5 1205.24 L1553.09 1205.24 L1553.67 1205.24 L1554.26 1205.24 L1554.85 1205.24 L1555.43 1205.24 L1556.02 1205.24 L1556.6 1205.24 L1557.19 1205.24 L1557.78 1205.24 L1558.36 1205.24 L1558.95 1205.24 L1559.54 1205.24 L1560.12 1205.24 L1560.71 1205.24 L1561.3 1205.24 L1561.88 1205.24 L1562.47 1205.24 L1563.06 1205.24 L1563.64 1205.24 L1564.23 1205.24 L1564.81 1205.24 L1565.4 1205.24 L1565.99 1205.24 L1566.57 1205.24 L1567.16 1205.24 L1567.75 1205.24 L1568.33 1205.24 L1568.92 1205.24 L1569.51 1205.24 L1570.09 1205.24 L1570.68 1205.24 L1571.27 1205.24 L1571.85 1205.24 L1572.44 1205.24 L1573.02 1205.24 L1573.61 1205.24 L1574.2 1205.24 L1574.78 1205.24 L1575.37 1205.24 L1575.96 1205.24 L1576.54 1205.24 L1577.13 1205.24 L1577.72 1205.24 L1578.3 1205.24 L1578.89 1205.24 L1579.47 1205.24 L1580.06 1205.24 L1580.65 1205.24 L1581.23 1205.24 L1581.82 1205.24 L1582.41 1205.24 L1582.99 1205.24 L1583.58 1205.24 L1584.17 1205.24 L1584.75 1205.24 L1585.34 1205.24 L1585.93 1205.24 L1586.51 1205.24 L1587.1 1205.24 L1587.68 1205.24 L1588.27 1205.24 L1588.86 1205.24 L1589.44 1205.24 L1590.03 1205.24 L1590.62 1205.24 L1591.2 1205.24 L1591.79 1205.24 L1592.38 1205.24 L1592.96 1205.24 L1593.55 1205.24 L1594.14 1205.24 L1594.72 1205.24 L1595.31 1205.24 L1595.89 1205.24 L1596.48 1205.24 L1597.07 1205.24 L1597.65 1205.24 L1598.24 1205.24 L1598.83 1205.24 L1599.41 1205.24 L1600 1205.24 L1600.59 1205.24 L1601.17 1205.24 L1601.76 1205.24 L1602.34 1205.24 L1602.93 1205.24 L1603.52 1205.24 L1604.1 1205.24 L1604.69 1205.24 L1605.28 1205.24 L1605.86 1205.24 L1606.45 1205.24 L1607.04 1205.24 L1607.62 1205.24 L1608.21 1205.24 L1608.8 1205.24 L1609.38 1205.24 L1609.97 1205.24 L1610.55 1205.24 L1611.14 1205.24 L1611.73 1205.24 L1612.31 1205.24 L1612.9 1205.24 L1613.49 1205.24 L1614.07 1205.24 L1614.66 1205.24 L1615.25 1205.24 L1615.83 1205.24 L1616.42 1205.24 L1617.01 1205.24 L1617.59 1205.24 L1618.18 1205.24 L1618.76 1205.24 L1619.35 1205.24 L1619.94 1205.24 L1620.52 1205.24 L1621.11 1205.24 L1621.7 1205.24 L1622.28 1205.24 L1622.87 1205.24 L1623.46 1205.24 L1624.04 1205.24 L1624.63 1205.24 L1625.22 1205.24 L1625.8 1205.24 L1626.39 1205.24 L1626.97 1205.24 L1627.56 1205.24 L1628.15 1205.24 L1628.73 1205.24 L1629.32 1205.24 L1629.91 1205.24 L1630.49 1205.24 L1631.08 1205.24 L1631.67 1205.24 L1632.25 1205.24 L1632.84 1205.24 L1633.42 1205.24 L1634.01 1205.24 L1634.6 1205.24 L1635.18 1205.24 L1635.77 1205.24 L1636.36 1205.24 L1636.94 1205.24 L1637.53 1205.24 L1638.12 1205.24 L1638.7 1205.24 L1639.29 1205.24 L1639.88 1205.24 L1640.46 1205.24 L1641.05 1205.24 L1641.63 1205.24 L1642.22 1205.24 L1642.81 1205.24 L1643.39 1205.24 L1643.98 1205.24 L1644.57 1205.24 L1645.15 1205.24 L1645.74 1205.24 L1646.33 1205.24 L1646.91 1205.24 L1647.5 1205.24 L1648.09 1205.24 L1648.67 1205.24 L1649.26 1205.24 L1649.84 1205.24 L1650.43 1205.24 L1651.02 1205.24 L1651.6 1205.24 L1652.19 1205.24 L1652.78 1205.24 L1653.36 1205.24 L1653.95 1205.24 L1654.54 1205.24 L1655.12 1205.24 L1655.71 1205.24 L1656.29 1205.24 L1656.88 1205.24 L1657.47 1205.24 L1658.05 1205.24 L1658.64 1205.24 L1659.23 1205.24 L1659.81 1205.24 L1660.4 1205.24 L1660.99 1205.24 L1661.57 1205.24 L1662.16 1205.24 L1662.75 1205.24 L1663.33 1205.24 L1663.92 1205.24 L1664.5 1205.24 L1665.09 1205.24 L1665.68 1205.24 L1666.26 1205.24 L1666.85 1205.24 L1667.44 1205.24 L1668.02 1205.24 L1668.61 1205.24 L1669.2 1205.24 L1669.78 1205.24 L1670.37 1205.24 L1670.96 1205.24 L1671.54 1205.24 L1672.13 1205.24 L1672.71 1205.24 L1673.3 1205.24 L1673.89 1205.24 L1674.47 1205.24 L1675.06 1205.24 L1675.65 1205.24 L1676.23 1205.24 L1676.82 1205.24 L1677.41 1205.24 L1677.99 1205.24 L1678.58 1205.24 L1679.17 1205.24 L1679.75 1205.24 L1680.34 1205.24 L1680.92 1205.24 L1681.51 1205.24 L1682.1 1205.24 L1682.68 1205.24 L1683.27 1205.24 L1683.86 1205.24 L1684.44 1205.24 L1685.03 1205.24 L1685.62 1205.24 L1686.2 1205.24 L1686.79 1205.24 L1687.37 1205.24 L1687.96 1205.24 L1688.55 1205.24 L1689.13 1205.24 L1689.72 1205.24 L1690.31 1205.24 L1690.89 1205.24 L1691.48 1205.24 L1692.07 1205.24 L1692.65 1205.24 L1693.24 1205.24 L1693.83 1205.24 L1694.41 1205.24 L1695 1205.24 L1695.58 1205.24 L1696.17 1205.24 L1696.76 1205.24 L1697.34 1205.24 L1697.93 1205.24 L1698.52 1205.24 L1699.1 1205.24 L1699.69 1205.24 L1700.28 1205.24 L1700.86 1205.24 L1701.45 1205.24 L1702.04 1205.24 L1702.62 1205.24 L1703.21 1205.24 L1703.79 1205.24 L1704.38 1205.24 L1704.97 1205.24 L1705.55 1205.24 L1706.14 1205.24 L1706.73 1205.24 L1707.31 1205.24 L1707.9 1205.24 L1708.49 1205.24 L1709.07 1205.24 L1709.66 1205.24 L1710.24 1205.24 L1710.83 1205.24 L1711.42 1205.24 L1712 1205.24 L1712.59 1205.24 L1713.18 1205.24 L1713.76 1205.24 L1714.35 1205.24 L1714.94 1205.24 L1715.52 1205.24 L1716.11 1205.24 L1716.7 1205.24 L1717.28 1205.24 L1717.87 1205.24 L1718.45 1205.24 L1719.04 1205.24 L1719.63 1205.24 L1720.21 1205.24 L1720.8 1205.24 L1721.39 1205.24 L1721.97 1205.24 L1722.56 1205.24 L1723.15 1205.24 L1723.73 1205.24 L1724.32 1205.24 L1724.91 1205.24 L1725.49 1205.24 L1726.08 1205.24 L1726.66 1205.24 L1727.25 1205.24 L1727.84 1205.24 L1728.42 1205.24 L1729.01 1205.24 L1729.6 1205.24 L1730.18 1205.24 L1730.77 1205.24 L1731.36 1205.24 L1731.94 1205.24 L1732.53 1205.24 L1733.11 1205.24 L1733.7 1205.24 L1734.29 1205.24 L1734.87 1205.24 L1735.46 1205.24 L1736.05 1205.24 L1736.63 1205.24 L1737.22 1205.24 L1737.81 1205.24 L1738.39 1205.24 L1738.98 1205.24 L1739.57 1205.24 L1740.15 1205.24 L1740.74 1205.24 L1741.32 1205.24 L1741.91 1205.24 L1742.5 1205.24 L1743.08 1205.24 L1743.67 1205.24 L1744.26 1205.24 L1744.84 1205.24 L1745.43 1205.24 L1746.02 1205.24 L1746.6 1205.24 L1747.19 1205.24 L1747.78 1205.24 L1748.36 1205.24 L1748.95 1205.24 L1749.53 1205.24 L1750.12 1205.24 L1750.71 1205.24 L1751.29 1205.24 L1751.88 1205.24 L1752.47 1205.24 L1753.05 1205.24 L1753.64 1205.24 L1754.23 1205.24 L1754.81 1205.24 L1755.4 1205.24 L1755.99 1205.24 L1756.57 1205.24 L1757.16 1205.24 L1757.74 1205.24 L1758.33 1205.24 L1758.92 1205.24 L1759.5 1205.24 L1760.09 1205.24 L1760.68 1205.24 L1761.26 1205.24 L1761.85 1205.24 L1762.44 1205.24 L1763.02 1205.24 L1763.61 1205.24 L1764.19 1205.24 L1764.78 1205.24 L1765.37 1205.24 L1765.95 1205.24 L1766.54 1205.24 L1767.13 1205.24 L1767.71 1205.24 L1768.3 1205.24 L1768.89 1205.24 L1769.47 1205.24 L1770.06 1205.24 L1770.65 1205.24 L1771.23 1205.24 L1771.82 1205.24 L1772.4 1205.24 L1772.99 1205.24 L1773.58 1205.24 L1774.16 1205.24 L1774.75 1205.24 L1775.34 1205.24 L1775.92 1205.24 L1776.51 1205.24 L1777.1 1205.24 L1777.68 1205.24 L1778.27 1205.24 L1778.86 1205.24 L1779.44 1205.24 L1780.03 1205.24 L1780.61 1205.24 L1781.2 1205.24 L1781.79 1205.24 L1782.37 1205.24 L1782.96 1205.24 L1783.55 1205.24 L1784.13 1205.24 L1784.72 1205.24 L1785.31 1205.24 L1785.89 1205.24 L1786.48 1205.24 L1787.06 1205.24 L1787.65 1205.24 L1788.24 1205.24 L1788.82 1205.24 L1789.41 1205.24 L1790 1205.24 L1790.58 1205.24 L1791.17 1205.24 L1791.76 1205.24 L1792.34 1205.24 L1792.93 1205.24 L1793.52 1205.24 L1794.1 1205.24 L1794.69 1205.24 L1795.27 1205.24 L1795.86 1205.24 L1796.45 1205.24 L1797.03 1205.24 L1797.62 1205.24 L1798.21 1205.24 L1798.79 1205.24 L1799.38 1205.24 L1799.97 1205.24 L1800.55 1205.24 L1801.14 1205.24 L1801.73 1205.24 L1802.31 1205.24 L1802.9 1205.24 L1803.48 1205.24 L1804.07 1205.24 L1804.66 1205.24 L1805.24 1205.24 L1805.83 1205.24 L1806.42 1205.24 L1807 1205.24 L1807.59 1205.24 L1808.18 1205.24 L1808.76 1205.24 L1809.35 1205.24 L1809.94 1205.24 L1810.52 1205.24 L1811.11 1205.24 L1811.69 1205.24 L1812.28 1205.24 L1812.87 1205.24 L1813.45 1205.24 L1814.04 1205.24 L1814.63 1205.24 L1815.21 1205.24 L1815.8 1205.24 L1816.39 1205.24 L1816.97 1205.24 L1817.56 1205.24 L1818.14 1205.24 L1818.73 1205.24 L1819.32 1205.24 L1819.9 1205.24 L1820.49 1205.24 L1821.08 1205.24 L1821.66 1205.24 L1822.25 1205.24 L1822.84 1205.24 L1823.42 1205.24 L1824.01 1205.24 L1824.6 1205.24 L1825.18 1205.24 L1825.77 1205.24 L1826.35 1205.24 L1826.94 1205.24 L1827.53 1205.24 L1828.11 1205.24 L1828.7 1205.24 L1829.29 1205.24 L1829.87 1205.24 L1830.46 1205.24 L1831.05 1205.24 L1831.63 1205.24 L1832.22 1205.24 L1832.81 1205.24 L1833.39 1205.24 L1833.98 1205.24 L1834.56 1205.24 L1835.15 1205.24 L1835.74 1205.24 L1836.32 1205.24 L1836.91 1205.24 L1837.5 1205.24 L1838.08 1205.24 L1838.67 1205.24 L1839.26 1205.24 L1839.84 1205.24 L1840.43 1205.24 L1841.01 1205.24 L1841.6 1205.24 L1842.19 1205.24 L1842.77 1205.24 L1843.36 1205.24 L1843.95 1205.24 L1844.53 1205.24 L1845.12 1205.24 L1845.71 1205.24 L1846.29 1205.24 L1846.88 1205.24 L1847.47 1205.24 L1848.05 1205.24 L1848.64 1205.24 L1849.22 1205.24 L1849.81 1205.24 L1850.4 1205.24 L1850.98 1205.24 L1851.57 1205.24 L1852.16 1205.24 L1852.74 1205.24 L1853.33 1205.24 L1853.92 1205.24 L1854.5 1205.24 L1855.09 1205.24 L1855.68 1205.24 L1856.26 1205.24 L1856.85 1205.24 L1857.43 1205.24 L1858.02 1205.24 L1858.61 1205.24 L1859.19 1205.24 L1859.78 1205.24 L1860.37 1205.24 L1860.95 1205.24 L1861.54 1205.24 L1862.13 1205.24 L1862.71 1205.24 L1863.3 1205.24 L1863.88 1205.24 L1864.47 1205.24 L1865.06 1205.24 L1865.64 1205.24 L1866.23 1205.24 L1866.82 1205.24 L1867.4 1205.24 L1867.99 1205.24 L1868.58 1205.24 L1869.16 1205.24 L1869.75 1205.24 L1870.34 1205.24 L1870.92 1205.24 L1871.51 1205.24 L1872.09 1205.24 L1872.68 1205.24 L1873.27 1205.24 L1873.85 1205.24 L1874.44 1205.24 L1875.03 1205.24 L1875.61 1205.24 L1876.2 1205.24 L1876.79 1205.24 L1877.37 1205.24 L1877.96 1205.24 L1878.55 1205.24 L1879.13 1205.24 L1879.72 1205.24 L1880.3 1205.24 L1880.89 1205.24 L1881.48 1205.24 L1882.06 1205.24 L1882.65 1205.24 L1883.24 1205.24 L1883.82 1205.24 L1884.41 1205.24 L1885 1205.24 L1885.58 1205.24 L1886.17 1205.24 L1886.76 1205.24 L1887.34 1205.24 L1887.93 1205.24 L1888.51 1205.24 L1889.1 1205.24 L1889.69 1205.24 L1890.27 1205.24 L1890.86 1205.24 L1891.45 1205.24 L1892.03 1205.24 L1892.62 1205.24 L1893.21 1205.24 L1893.79 1205.24 L1894.38 1205.24 L1894.96 1205.24 L1895.55 1205.24 L1896.14 1205.24 L1896.72 1205.24 L1897.31 1205.24 L1897.9 1205.24 L1898.48 1205.24 L1899.07 1205.24 L1899.66 1205.24 L1900.24 1205.24 L1900.83 1205.24 L1901.42 1205.24 L1902 1205.24 L1902.59 1205.24 L1903.17 1205.24 L1903.76 1205.24 L1904.35 1205.24 L1904.93 1205.24 L1905.52 1205.24 L1906.11 1205.24 L1906.69 1205.24 L1907.28 1205.24 L1907.87 1205.24 L1908.45 1205.24 L1909.04 1205.24 L1909.63 1205.24 L1910.21 1205.24 L1910.8 1205.24 L1911.38 1205.24 L1911.97 1205.24 L1912.56 1205.24 L1913.14 1205.24 L1913.73 1205.24 L1914.32 1205.24 L1914.9 1205.24 L1915.49 1205.24 L1916.08 1205.24 L1916.66 1205.24 L1917.25 1205.24 L1917.83 1205.24 L1918.42 1205.24 L1919.01 1205.24 L1919.59 1205.24 L1920.18 1205.24 L1920.77 1205.24 L1921.35 1205.24 L1921.94 1205.24 L1922.53 1205.24 L1923.11 1205.24 L1923.7 1205.24 L1924.29 1205.24 L1924.87 1205.24 L1925.46 1205.24 L1926.04 1205.24 L1926.63 1205.24 L1927.22 1205.24 L1927.8 1205.24 L1928.39 1205.24 L1928.98 1205.24 L1929.56 1205.24 L1930.15 1205.24 L1930.74 1205.24 L1931.32 1205.24 L1931.91 1205.24 L1932.5 1205.24 L1933.08 1205.24 L1933.67 1205.24 L1934.25 1205.24 L1934.84 1205.24 L1935.43 1205.24 L1936.01 1205.24 L1936.6 1205.24 L1937.19 1205.24 L1937.77 1205.24 L1938.36 1205.24 L1938.95 1205.24 L1939.53 1205.24 L1940.12 1205.24 L1940.71 1205.24 L1941.29 1205.24 L1941.88 1205.24 L1942.46 1205.24 L1943.05 1205.24 L1943.64 1205.24 L1944.22 1205.24 L1944.81 1205.24 L1945.4 1205.24 L1945.98 1205.24 L1946.57 1205.24 L1947.16 1205.24 L1947.74 1205.24 L1948.33 1205.24 L1948.91 1205.24 L1949.5 1205.24 L1950.09 1205.24 L1950.67 1205.24 L1951.26 1205.24 L1951.85 1205.24 L1952.43 1205.24 L1953.02 1205.24 L1953.61 1205.24 L1954.19 1205.24 L1954.78 1205.24 L1955.37 1205.24 L1955.95 1205.24 L1956.54 1205.24 L1957.12 1205.24 L1957.71 1205.24 L1958.3 1205.24 L1958.88 1205.24 L1959.47 1205.24 L1960.06 1205.24 L1960.64 1205.24 L1961.23 1205.24 L1961.82 1205.24 L1962.4 1205.24 L1962.99 1205.24 L1963.58 1205.24 L1964.16 1205.24 L1964.75 1205.24 L1965.33 1205.24 L1965.92 1205.24 L1966.51 1205.24 L1967.09 1205.24 L1967.68 1205.24 L1968.27 1205.24 L1968.85 1205.24 L1969.44 1205.24 L1970.03 1205.24 L1970.61 1205.24 L1971.2 1205.24 L1971.78 1205.24 L1972.37 1205.24 L1972.96 1205.24 L1973.54 1205.24 L1974.13 1205.24 L1974.72 1205.24 L1975.3 1205.24 L1975.89 1205.24 L1976.48 1205.24 L1977.06 1205.24 L1977.65 1205.24 L1978.24 1205.24 L1978.82 1205.24 L1979.41 1205.24 L1979.99 1205.24 L1980.58 1205.24 L1981.17 1205.24 L1981.75 1205.24 L1982.34 1205.24 L1982.93 1205.24 L1983.51 1205.24 L1984.1 1205.24 L1984.69 1205.24 L1985.27 1205.24 L1985.86 1205.24 L1986.45 1205.24 L1987.03 1205.24 L1987.62 1205.24 L1988.2 1205.24 L1988.79 1205.24 L1989.38 1205.24 L1989.96 1205.24 L1990.55 1205.24 L1991.14 1205.24 L1991.72 1205.24 L1992.31 1205.24 L1992.9 1205.24 L1993.48 1205.24 L1994.07 1205.24 L1994.65 1205.24 L1995.24 1205.24 L1995.83 1205.24 L1996.41 1205.24 L1997 1205.24 L1997.59 1205.24 L1998.17 1205.24 L1998.76 1205.24 L1999.35 1205.24 L1999.93 1205.24 L2000.52 1205.24 L2001.11 1205.24 L2001.69 1205.24 L2002.28 1205.24 L2002.86 1205.24 L2003.45 1205.24 L2004.04 1205.24 L2004.62 1205.24 L2005.21 1205.24 L2005.8 1205.24 L2006.38 1205.24 L2006.97 1205.24 L2007.56 1205.24 L2008.14 1205.24 L2008.73 1205.24 L2009.32 1205.24 L2009.9 1205.24 L2010.49 1205.24 L2011.07 1205.24 L2011.66 1205.24 L2012.25 1205.24 L2012.83 1205.24 L2013.42 1205.24 L2014.01 1205.24 L2014.59 1205.24 L2015.18 1205.24 L2015.77 1205.24 L2016.35 1205.24 L2016.94 1205.24 L2017.53 1205.24 L2018.11 1205.24 L2018.7 1205.24 L2019.28 1205.24 L2019.87 1205.24 L2020.46 1205.24 L2021.04 1205.24 L2021.63 1205.24 L2022.22 1205.24 L2022.8 1205.24 L2023.39 1205.24 L2023.98 1205.24 L2024.56 1205.24 L2025.15 1205.24 L2025.73 1205.24 L2026.32 1205.24 L2026.91 1205.24 L2027.49 1205.24 L2028.08 1205.24 L2028.67 1205.24 L2029.25 1205.24 L2029.84 1205.24 L2030.43 1205.24 L2031.01 1205.24 L2031.6 1205.24 L2032.19 1205.24 L2032.77 1205.24 L2033.36 1205.24 L2033.94 1205.24 L2034.53 1205.24 L2035.12 1205.24 L2035.7 1205.24 L2036.29 1205.24 L2036.88 1205.24 L2037.46 1205.24 L2038.05 1205.24 L2038.64 1205.24 L2039.22 1205.24 L2039.81 1205.24 L2040.4 1205.24 L2040.98 1205.24 L2041.57 1205.24 L2042.15 1205.24 L2042.74 1205.24 L2043.33 1205.24 L2043.91 1205.24 L2044.5 1205.24 L2045.09 1205.24 L2045.67 1205.24 L2046.26 1205.24 L2046.85 1205.24 L2047.43 1205.24 L2048.02 1205.24 L2048.6 1205.24 L2049.19 1205.24 L2049.78 1205.24 L2050.36 1205.24 L2050.95 1205.24 L2051.54 1205.24 L2052.12 1205.24 L2052.71 1205.24 L2053.3 1205.24 L2053.88 1205.24 L2054.47 1205.24 L2055.06 1205.24 L2055.64 1205.24 L2056.23 1205.24 L2056.81 1205.24 L2057.4 1205.24 L2057.99 1205.24 L2058.57 1205.24 L2059.16 1205.24 L2059.75 1205.24 L2060.33 1205.24 L2060.92 1205.24 L2061.51 1205.24 L2062.09 1205.24 L2062.68 1205.24 L2063.27 1205.24 L2063.85 1205.24 L2064.44 1205.24 L2065.02 1205.24 L2065.61 1205.24 L2066.2 1205.24 L2066.78 1205.24 L2067.37 1205.24 L2067.96 1205.24 L2068.54 1205.24 L2069.13 1205.24 L2069.72 1205.24 L2070.3 1205.24 L2070.89 1205.24 L2071.48 1205.24 L2072.06 1205.24 L2072.65 1205.24 L2073.23 1205.24 L2073.82 1205.24 L2074.41 1205.24 L2074.99 1205.24 L2075.58 1205.24 L2076.17 1205.24 L2076.75 1205.24 L2077.34 1205.24 L2077.93 1205.24 L2078.51 1205.24 L2079.1 1205.24 L2079.68 1205.24 L2080.27 1205.24 L2080.86 1205.24 L2081.44 1205.24 L2082.03 1205.24 L2082.62 1205.24 L2083.2 1205.24 L2083.79 1205.24 L2084.38 1205.24 L2084.96 1205.24 L2085.55 1205.24 L2086.14 1205.24 L2086.72 1205.24 L2087.31 1205.24 L2087.89 1205.24 L2088.48 1205.24 L2089.07 1205.24 L2089.65 1205.24 L2090.24 1205.24 L2090.83 1205.24 L2091.41 1205.24 L2092 1205.24 L2092.59 1205.24 L2093.17 1205.24 L2093.76 1205.24 L2094.35 1205.24 L2094.93 1205.24 L2095.52 1205.24 L2096.1 1205.24 L2096.69 1205.24 L2097.28 1205.24 L2097.86 1205.24 L2098.45 1205.24 L2099.04 1205.24 L2099.62 1205.24 L2100.21 1205.24 L2100.8 1205.24 L2101.38 1205.24 L2101.97 1205.24 L2102.55 1205.24 L2103.14 1205.24 L2103.73 1205.24 L2104.31 1205.24 L2104.9 1205.24 L2105.49 1205.24 L2106.07 1205.24 L2106.66 1205.24 L2107.25 1205.24 L2107.83 1205.24 L2108.42 1205.24 L2109.01 1205.24 L2109.59 1205.24 L2110.18 1205.24 L2110.76 1205.24 L2111.35 1205.24 L2111.94 1205.24 L2112.52 1205.24 L2113.11 1205.24 L2113.7 1205.24 L2114.28 1205.24 L2114.87 1205.24 L2115.46 1205.24 L2116.04 1205.24 L2116.63 1205.24 L2117.22 1205.24 L2117.8 1205.24 L2118.39 1205.24 L2118.97 1205.24 L2119.56 1205.24 L2120.15 1205.24 L2120.73 1205.24 L2121.32 1205.24 L2121.91 1205.24 L2122.49 1205.24 L2123.08 1205.24 L2123.67 1205.24 L2124.25 1205.24 L2124.84 1205.24 L2125.42 1205.24 L2126.01 1205.24 L2126.6 1205.24 L2127.18 1205.24 L2127.77 1205.24 L2128.36 1205.24 L2128.94 1205.24 L2129.53 1205.24 L2130.12 1205.24 L2130.7 1205.24 L2131.29 1205.24 L2131.88 1205.24 L2132.46 1205.24 L2133.05 1205.24 L2133.63 1205.24 L2134.22 1205.24 L2134.81 1205.24 L2135.39 1205.24 L2135.98 1205.24 L2136.57 1205.24 L2137.15 1205.24 L2137.74 1205.24 L2138.33 1205.24 L2138.91 1205.24 L2139.5 1205.24 L2140.09 1205.24 L2140.67 1205.24 L2141.26 1205.24 L2141.84 1205.24 L2142.43 1205.24 L2143.02 1205.24 L2143.6 1205.24 L2144.19 1205.24 L2144.78 1205.24 L2145.36 1205.24 L2145.95 1205.24 L2146.54 1205.24 L2147.12 1205.24 L2147.71 1205.24 L2148.3 1205.24 L2148.88 1205.24 L2149.47 1205.24 L2150.05 1205.24 L2150.64 1205.24 L2151.23 1205.24 L2151.81 1205.24 L2152.4 1205.24 L2152.99 1205.24 L2153.57 1205.24 L2154.16 1205.24 L2154.75 1205.24 L2155.33 1205.24 L2155.92 1205.24 L2156.5 1205.24 L2157.09 1205.24 L2157.68 1205.24 L2158.26 1205.24 L2158.26 1204.6 L2157.68 1204.6 L2157.09 1204.6 L2156.5 1204.6 L2155.92 1204.6 L2155.33 1204.6 L2154.75 1204.6 L2154.16 1204.6 L2153.57 1204.6 L2152.99 1204.6 L2152.4 1204.6 L2151.81 1204.6 L2151.23 1204.6 L2150.64 1204.6 L2150.05 1204.6 L2149.47 1204.6 L2148.88 1204.6 L2148.3 1204.6 L2147.71 1204.6 L2147.12 1204.6 L2146.54 1204.6 L2145.95 1204.6 L2145.36 1204.6 L2144.78 1204.6 L2144.19 1204.6 L2143.6 1204.6 L2143.02 1204.6 L2142.43 1204.6 L2141.84 1204.6 L2141.26 1204.6 L2140.67 1204.6 L2140.09 1204.6 L2139.5 1204.6 L2138.91 1204.6 L2138.33 1204.6 L2137.74 1204.6 L2137.15 1204.6 L2136.57 1204.6 L2135.98 1204.6 L2135.39 1204.6 L2134.81 1204.6 L2134.22 1204.6 L2133.63 1204.6 L2133.05 1204.6 L2132.46 1204.6 L2131.88 1204.6 L2131.29 1204.6 L2130.7 1204.6 L2130.12 1204.6 L2129.53 1204.6 L2128.94 1204.6 L2128.36 1204.6 L2127.77 1204.6 L2127.18 1204.6 L2126.6 1204.6 L2126.01 1204.6 L2125.42 1204.6 L2124.84 1204.6 L2124.25 1204.6 L2123.67 1204.6 L2123.08 1204.6 L2122.49 1204.6 L2121.91 1204.6 L2121.32 1204.6 L2120.73 1204.6 L2120.15 1204.6 L2119.56 1204.6 L2118.97 1204.6 L2118.39 1204.6 L2117.8 1204.6 L2117.22 1204.6 L2116.63 1204.6 L2116.04 1204.6 L2115.46 1204.6 L2114.87 1204.6 L2114.28 1204.6 L2113.7 1204.6 L2113.11 1204.6 L2112.52 1204.6 L2111.94 1204.6 L2111.35 1204.6 L2110.76 1204.6 L2110.18 1204.6 L2109.59 1204.6 L2109.01 1204.6 L2108.42 1204.6 L2107.83 1204.6 L2107.25 1204.6 L2106.66 1204.6 L2106.07 1204.6 L2105.49 1204.6 L2104.9 1204.6 L2104.31 1204.6 L2103.73 1204.6 L2103.14 1204.6 L2102.55 1204.6 L2101.97 1204.6 L2101.38 1204.6 L2100.8 1204.6 L2100.21 1204.6 L2099.62 1204.6 L2099.04 1204.6 L2098.45 1204.6 L2097.86 1204.6 L2097.28 1204.6 L2096.69 1204.6 L2096.1 1204.6 L2095.52 1204.6 L2094.93 1204.6 L2094.35 1204.6 L2093.76 1204.6 L2093.17 1204.6 L2092.59 1204.6 L2092 1204.6 L2091.41 1204.6 L2090.83 1204.6 L2090.24 1204.6 L2089.65 1204.6 L2089.07 1204.6 L2088.48 1204.6 L2087.89 1204.6 L2087.31 1204.6 L2086.72 1204.6 L2086.14 1204.6 L2085.55 1204.6 L2084.96 1204.6 L2084.38 1204.6 L2083.79 1204.6 L2083.2 1204.6 L2082.62 1204.6 L2082.03 1204.6 L2081.44 1204.6 L2080.86 1204.6 L2080.27 1204.6 L2079.68 1204.6 L2079.1 1204.6 L2078.51 1204.6 L2077.93 1204.6 L2077.34 1204.6 L2076.75 1204.6 L2076.17 1204.6 L2075.58 1204.6 L2074.99 1204.6 L2074.41 1204.6 L2073.82 1204.6 L2073.23 1204.6 L2072.65 1204.6 L2072.06 1204.6 L2071.48 1204.6 L2070.89 1204.6 L2070.3 1204.6 L2069.72 1204.6 L2069.13 1204.6 L2068.54 1204.6 L2067.96 1204.6 L2067.37 1204.6 L2066.78 1204.6 L2066.2 1204.6 L2065.61 1204.6 L2065.02 1204.6 L2064.44 1204.6 L2063.85 1204.6 L2063.27 1204.6 L2062.68 1204.6 L2062.09 1204.6 L2061.51 1204.6 L2060.92 1204.6 L2060.33 1204.6 L2059.75 1204.6 L2059.16 1204.6 L2058.57 1204.6 L2057.99 1204.6 L2057.4 1204.6 L2056.81 1204.6 L2056.23 1204.6 L2055.64 1204.6 L2055.06 1204.6 L2054.47 1204.6 L2053.88 1204.6 L2053.3 1204.6 L2052.71 1204.6 L2052.12 1204.6 L2051.54 1204.6 L2050.95 1204.6 L2050.36 1204.6 L2049.78 1204.6 L2049.19 1204.6 L2048.6 1204.6 L2048.02 1204.6 L2047.43 1204.6 L2046.85 1204.6 L2046.26 1204.6 L2045.67 1204.6 L2045.09 1204.6 L2044.5 1204.6 L2043.91 1204.6 L2043.33 1204.6 L2042.74 1204.6 L2042.15 1204.6 L2041.57 1204.6 L2040.98 1204.6 L2040.4 1204.6 L2039.81 1204.6 L2039.22 1204.6 L2038.64 1204.6 L2038.05 1204.6 L2037.46 1204.6 L2036.88 1204.6 L2036.29 1204.6 L2035.7 1204.6 L2035.12 1204.6 L2034.53 1204.6 L2033.94 1204.6 L2033.36 1204.6 L2032.77 1204.6 L2032.19 1204.6 L2031.6 1204.6 L2031.01 1204.6 L2030.43 1204.6 L2029.84 1204.6 L2029.25 1204.6 L2028.67 1204.6 L2028.08 1204.6 L2027.49 1204.6 L2026.91 1204.6 L2026.32 1204.6 L2025.73 1204.6 L2025.15 1204.6 L2024.56 1204.6 L2023.98 1204.6 L2023.39 1204.6 L2022.8 1204.6 L2022.22 1204.6 L2021.63 1204.6 L2021.04 1204.6 L2020.46 1204.6 L2019.87 1204.6 L2019.28 1204.6 L2018.7 1204.6 L2018.11 1204.6 L2017.53 1204.6 L2016.94 1204.6 L2016.35 1204.6 L2015.77 1204.6 L2015.18 1204.6 L2014.59 1204.6 L2014.01 1204.6 L2013.42 1204.6 L2012.83 1204.6 L2012.25 1204.6 L2011.66 1204.6 L2011.07 1204.6 L2010.49 1204.6 L2009.9 1204.6 L2009.32 1204.6 L2008.73 1204.6 L2008.14 1204.6 L2007.56 1204.6 L2006.97 1204.6 L2006.38 1204.6 L2005.8 1204.6 L2005.21 1204.6 L2004.62 1204.6 L2004.04 1204.6 L2003.45 1204.6 L2002.86 1204.6 L2002.28 1204.6 L2001.69 1204.6 L2001.11 1204.6 L2000.52 1204.6 L1999.93 1204.6 L1999.35 1204.6 L1998.76 1204.6 L1998.17 1204.6 L1997.59 1204.6 L1997 1204.6 L1996.41 1204.6 L1995.83 1204.6 L1995.24 1204.6 L1994.65 1204.6 L1994.07 1204.6 L1993.48 1204.6 L1992.9 1204.6 L1992.31 1204.6 L1991.72 1204.6 L1991.14 1204.6 L1990.55 1204.6 L1989.96 1204.6 L1989.38 1204.6 L1988.79 1204.6 L1988.2 1204.6 L1987.62 1204.6 L1987.03 1204.6 L1986.45 1204.6 L1985.86 1204.6 L1985.27 1204.6 L1984.69 1204.6 L1984.1 1204.6 L1983.51 1204.6 L1982.93 1204.6 L1982.34 1204.6 L1981.75 1204.6 L1981.17 1204.6 L1980.58 1204.6 L1979.99 1204.6 L1979.41 1204.6 L1978.82 1204.6 L1978.24 1204.6 L1977.65 1204.6 L1977.06 1204.6 L1976.48 1204.6 L1975.89 1204.6 L1975.3 1204.6 L1974.72 1204.6 L1974.13 1204.6 L1973.54 1204.6 L1972.96 1204.6 L1972.37 1204.6 L1971.78 1204.6 L1971.2 1204.6 L1970.61 1204.6 L1970.03 1204.6 L1969.44 1204.6 L1968.85 1204.6 L1968.27 1204.6 L1967.68 1204.6 L1967.09 1204.6 L1966.51 1204.6 L1965.92 1204.6 L1965.33 1204.6 L1964.75 1204.6 L1964.16 1204.6 L1963.58 1204.6 L1962.99 1204.6 L1962.4 1204.6 L1961.82 1204.6 L1961.23 1204.6 L1960.64 1204.6 L1960.06 1204.6 L1959.47 1204.6 L1958.88 1204.6 L1958.3 1204.6 L1957.71 1204.6 L1957.12 1204.6 L1956.54 1204.6 L1955.95 1204.6 L1955.37 1204.6 L1954.78 1204.6 L1954.19 1204.6 L1953.61 1204.6 L1953.02 1204.6 L1952.43 1204.6 L1951.85 1204.6 L1951.26 1204.6 L1950.67 1204.6 L1950.09 1204.6 L1949.5 1204.6 L1948.91 1204.6 L1948.33 1204.6 L1947.74 1204.6 L1947.16 1204.6 L1946.57 1204.6 L1945.98 1204.6 L1945.4 1204.6 L1944.81 1204.6 L1944.22 1204.6 L1943.64 1204.6 L1943.05 1204.6 L1942.46 1204.6 L1941.88 1204.6 L1941.29 1204.6 L1940.71 1204.6 L1940.12 1204.6 L1939.53 1204.6 L1938.95 1204.6 L1938.36 1204.6 L1937.77 1204.6 L1937.19 1204.6 L1936.6 1204.6 L1936.01 1204.6 L1935.43 1204.6 L1934.84 1204.6 L1934.25 1204.6 L1933.67 1204.6 L1933.08 1204.6 L1932.5 1204.6 L1931.91 1204.6 L1931.32 1204.6 L1930.74 1204.6 L1930.15 1204.6 L1929.56 1204.6 L1928.98 1204.6 L1928.39 1204.6 L1927.8 1204.6 L1927.22 1204.6 L1926.63 1204.6 L1926.04 1204.6 L1925.46 1204.6 L1924.87 1204.6 L1924.29 1204.6 L1923.7 1204.6 L1923.11 1204.6 L1922.53 1204.6 L1921.94 1204.6 L1921.35 1204.6 L1920.77 1204.6 L1920.18 1204.6 L1919.59 1204.6 L1919.01 1204.6 L1918.42 1204.6 L1917.83 1204.6 L1917.25 1204.6 L1916.66 1204.6 L1916.08 1204.6 L1915.49 1204.6 L1914.9 1204.6 L1914.32 1204.6 L1913.73 1204.6 L1913.14 1204.6 L1912.56 1204.6 L1911.97 1204.6 L1911.38 1204.6 L1910.8 1204.6 L1910.21 1204.6 L1909.63 1204.6 L1909.04 1204.6 L1908.45 1204.6 L1907.87 1204.6 L1907.28 1204.6 L1906.69 1204.6 L1906.11 1204.6 L1905.52 1204.6 L1904.93 1204.6 L1904.35 1204.6 L1903.76 1204.6 L1903.17 1204.6 L1902.59 1204.6 L1902 1204.6 L1901.42 1204.6 L1900.83 1204.6 L1900.24 1204.6 L1899.66 1204.6 L1899.07 1204.6 L1898.48 1204.6 L1897.9 1204.6 L1897.31 1204.6 L1896.72 1204.6 L1896.14 1204.6 L1895.55 1204.6 L1894.96 1204.6 L1894.38 1204.6 L1893.79 1204.6 L1893.21 1204.6 L1892.62 1204.6 L1892.03 1204.6 L1891.45 1204.6 L1890.86 1204.6 L1890.27 1204.6 L1889.69 1204.6 L1889.1 1204.6 L1888.51 1204.6 L1887.93 1204.6 L1887.34 1204.6 L1886.76 1204.6 L1886.17 1204.6 L1885.58 1204.6 L1885 1204.6 L1884.41 1204.6 L1883.82 1204.6 L1883.24 1204.6 L1882.65 1204.6 L1882.06 1204.6 L1881.48 1204.6 L1880.89 1204.6 L1880.3 1204.6 L1879.72 1204.6 L1879.13 1204.6 L1878.55 1204.6 L1877.96 1204.6 L1877.37 1204.6 L1876.79 1204.6 L1876.2 1204.6 L1875.61 1204.6 L1875.03 1204.6 L1874.44 1204.6 L1873.85 1204.6 L1873.27 1204.6 L1872.68 1204.6 L1872.09 1204.6 L1871.51 1204.6 L1870.92 1204.6 L1870.34 1204.6 L1869.75 1204.6 L1869.16 1204.6 L1868.58 1204.6 L1867.99 1204.6 L1867.4 1204.6 L1866.82 1204.6 L1866.23 1204.6 L1865.64 1204.6 L1865.06 1204.6 L1864.47 1204.6 L1863.88 1204.6 L1863.3 1204.6 L1862.71 1204.6 L1862.13 1204.6 L1861.54 1204.6 L1860.95 1204.6 L1860.37 1204.6 L1859.78 1204.6 L1859.19 1204.6 L1858.61 1204.6 L1858.02 1204.6 L1857.43 1204.6 L1856.85 1204.6 L1856.26 1204.6 L1855.68 1204.6 L1855.09 1204.6 L1854.5 1204.6 L1853.92 1204.6 L1853.33 1204.6 L1852.74 1204.6 L1852.16 1204.6 L1851.57 1204.6 L1850.98 1204.6 L1850.4 1204.6 L1849.81 1204.6 L1849.22 1204.6 L1848.64 1204.6 L1848.05 1204.6 L1847.47 1204.6 L1846.88 1204.6 L1846.29 1204.6 L1845.71 1204.6 L1845.12 1204.6 L1844.53 1204.6 L1843.95 1204.6 L1843.36 1204.6 L1842.77 1204.6 L1842.19 1204.6 L1841.6 1204.6 L1841.01 1204.6 L1840.43 1204.6 L1839.84 1204.6 L1839.26 1204.6 L1838.67 1204.6 L1838.08 1204.6 L1837.5 1204.6 L1836.91 1204.6 L1836.32 1204.6 L1835.74 1204.6 L1835.15 1204.6 L1834.56 1204.6 L1833.98 1204.6 L1833.39 1204.6 L1832.81 1204.6 L1832.22 1204.6 L1831.63 1204.6 L1831.05 1204.6 L1830.46 1204.6 L1829.87 1204.6 L1829.29 1204.6 L1828.7 1204.6 L1828.11 1204.6 L1827.53 1204.6 L1826.94 1204.6 L1826.35 1204.6 L1825.77 1204.6 L1825.18 1204.6 L1824.6 1204.6 L1824.01 1204.6 L1823.42 1204.6 L1822.84 1204.6 L1822.25 1204.6 L1821.66 1204.6 L1821.08 1204.6 L1820.49 1204.6 L1819.9 1204.6 L1819.32 1204.6 L1818.73 1204.6 L1818.14 1204.6 L1817.56 1204.6 L1816.97 1204.6 L1816.39 1204.6 L1815.8 1204.6 L1815.21 1204.6 L1814.63 1204.6 L1814.04 1204.6 L1813.45 1204.6 L1812.87 1204.6 L1812.28 1204.6 L1811.69 1204.6 L1811.11 1204.6 L1810.52 1204.6 L1809.94 1204.6 L1809.35 1204.6 L1808.76 1204.6 L1808.18 1204.6 L1807.59 1204.6 L1807 1204.6 L1806.42 1204.6 L1805.83 1204.6 L1805.24 1204.6 L1804.66 1204.6 L1804.07 1204.6 L1803.48 1204.6 L1802.9 1204.6 L1802.31 1204.6 L1801.73 1204.6 L1801.14 1204.6 L1800.55 1204.6 L1799.97 1204.6 L1799.38 1204.6 L1798.79 1204.6 L1798.21 1204.6 L1797.62 1204.6 L1797.03 1204.6 L1796.45 1204.6 L1795.86 1204.6 L1795.27 1204.6 L1794.69 1204.6 L1794.1 1204.6 L1793.52 1204.6 L1792.93 1204.6 L1792.34 1204.6 L1791.76 1204.6 L1791.17 1204.6 L1790.58 1204.6 L1790 1204.6 L1789.41 1204.6 L1788.82 1204.6 L1788.24 1204.6 L1787.65 1204.6 L1787.06 1204.6 L1786.48 1204.6 L1785.89 1204.6 L1785.31 1204.6 L1784.72 1204.6 L1784.13 1204.6 L1783.55 1204.6 L1782.96 1204.6 L1782.37 1204.6 L1781.79 1204.6 L1781.2 1204.6 L1780.61 1204.6 L1780.03 1204.6 L1779.44 1204.6 L1778.86 1204.6 L1778.27 1204.6 L1777.68 1204.6 L1777.1 1204.6 L1776.51 1204.6 L1775.92 1204.6 L1775.34 1204.6 L1774.75 1204.6 L1774.16 1204.6 L1773.58 1204.6 L1772.99 1204.6 L1772.4 1204.6 L1771.82 1204.6 L1771.23 1204.6 L1770.65 1204.6 L1770.06 1204.6 L1769.47 1204.6 L1768.89 1204.6 L1768.3 1204.6 L1767.71 1204.6 L1767.13 1204.6 L1766.54 1204.6 L1765.95 1204.6 L1765.37 1204.6 L1764.78 1204.6 L1764.19 1204.6 L1763.61 1204.6 L1763.02 1204.6 L1762.44 1204.6 L1761.85 1204.6 L1761.26 1204.6 L1760.68 1204.6 L1760.09 1204.6 L1759.5 1204.6 L1758.92 1204.6 L1758.33 1204.6 L1757.74 1204.6 L1757.16 1204.6 L1756.57 1204.6 L1755.99 1204.6 L1755.4 1204.6 L1754.81 1204.6 L1754.23 1204.6 L1753.64 1204.6 L1753.05 1204.6 L1752.47 1204.6 L1751.88 1204.6 L1751.29 1204.6 L1750.71 1204.6 L1750.12 1204.6 L1749.53 1204.6 L1748.95 1204.6 L1748.36 1204.6 L1747.78 1204.6 L1747.19 1204.6 L1746.6 1204.6 L1746.02 1204.6 L1745.43 1204.6 L1744.84 1204.6 L1744.26 1204.6 L1743.67 1204.6 L1743.08 1204.6 L1742.5 1204.6 L1741.91 1204.6 L1741.32 1204.6 L1740.74 1204.6 L1740.15 1204.6 L1739.57 1204.6 L1738.98 1204.6 L1738.39 1204.6 L1737.81 1204.6 L1737.22 1204.6 L1736.63 1204.6 L1736.05 1204.6 L1735.46 1204.6 L1734.87 1204.6 L1734.29 1204.6 L1733.7 1204.6 L1733.11 1204.6 L1732.53 1204.6 L1731.94 1204.6 L1731.36 1204.6 L1730.77 1204.6 L1730.18 1204.6 L1729.6 1204.6 L1729.01 1204.6 L1728.42 1204.6 L1727.84 1204.6 L1727.25 1204.6 L1726.66 1204.6 L1726.08 1204.6 L1725.49 1204.6 L1724.91 1204.6 L1724.32 1204.6 L1723.73 1204.6 L1723.15 1204.6 L1722.56 1204.6 L1721.97 1204.6 L1721.39 1204.6 L1720.8 1204.6 L1720.21 1204.6 L1719.63 1204.6 L1719.04 1204.6 L1718.45 1204.6 L1717.87 1204.6 L1717.28 1204.6 L1716.7 1204.6 L1716.11 1204.6 L1715.52 1204.6 L1714.94 1204.6 L1714.35 1204.6 L1713.76 1204.6 L1713.18 1204.6 L1712.59 1204.6 L1712 1204.6 L1711.42 1204.6 L1710.83 1204.6 L1710.24 1204.6 L1709.66 1204.6 L1709.07 1204.6 L1708.49 1204.6 L1707.9 1204.6 L1707.31 1204.6 L1706.73 1204.6 L1706.14 1204.6 L1705.55 1204.6 L1704.97 1204.6 L1704.38 1204.6 L1703.79 1204.6 L1703.21 1204.6 L1702.62 1204.6 L1702.04 1204.6 L1701.45 1204.6 L1700.86 1204.6 L1700.28 1204.6 L1699.69 1204.6 L1699.1 1204.6 L1698.52 1204.6 L1697.93 1204.6 L1697.34 1204.6 L1696.76 1204.6 L1696.17 1204.6 L1695.58 1204.6 L1695 1204.6 L1694.41 1204.6 L1693.83 1204.6 L1693.24 1204.6 L1692.65 1204.6 L1692.07 1204.6 L1691.48 1204.6 L1690.89 1204.6 L1690.31 1204.6 L1689.72 1204.6 L1689.13 1204.6 L1688.55 1204.6 L1687.96 1204.6 L1687.37 1204.6 L1686.79 1204.6 L1686.2 1204.6 L1685.62 1204.6 L1685.03 1204.6 L1684.44 1204.6 L1683.86 1204.6 L1683.27 1204.6 L1682.68 1204.6 L1682.1 1204.6 L1681.51 1204.6 L1680.92 1204.6 L1680.34 1204.6 L1679.75 1204.6 L1679.17 1204.6 L1678.58 1204.6 L1677.99 1204.6 L1677.41 1204.6 L1676.82 1204.6 L1676.23 1204.6 L1675.65 1204.6 L1675.06 1204.6 L1674.47 1204.6 L1673.89 1204.6 L1673.3 1204.6 L1672.71 1204.6 L1672.13 1204.6 L1671.54 1204.6 L1670.96 1204.6 L1670.37 1204.6 L1669.78 1204.6 L1669.2 1204.6 L1668.61 1204.6 L1668.02 1204.6 L1667.44 1204.6 L1666.85 1204.6 L1666.26 1204.6 L1665.68 1204.6 L1665.09 1204.6 L1664.5 1204.6 L1663.92 1204.6 L1663.33 1204.6 L1662.75 1204.6 L1662.16 1204.6 L1661.57 1204.6 L1660.99 1204.6 L1660.4 1204.6 L1659.81 1204.6 L1659.23 1204.6 L1658.64 1204.6 L1658.05 1204.6 L1657.47 1204.6 L1656.88 1204.6 L1656.29 1204.6 L1655.71 1204.6 L1655.12 1204.6 L1654.54 1204.6 L1653.95 1204.6 L1653.36 1204.6 L1652.78 1204.6 L1652.19 1204.6 L1651.6 1204.6 L1651.02 1204.6 L1650.43 1204.6 L1649.84 1204.6 L1649.26 1204.6 L1648.67 1204.6 L1648.09 1204.6 L1647.5 1204.6 L1646.91 1204.6 L1646.33 1204.6 L1645.74 1204.6 L1645.15 1204.6 L1644.57 1204.6 L1643.98 1204.6 L1643.39 1204.6 L1642.81 1204.6 L1642.22 1204.6 L1641.63 1204.6 L1641.05 1204.6 L1640.46 1204.6 L1639.88 1204.6 L1639.29 1204.6 L1638.7 1204.6 L1638.12 1204.6 L1637.53 1204.6 L1636.94 1204.6 L1636.36 1204.6 L1635.77 1204.6 L1635.18 1204.6 L1634.6 1204.6 L1634.01 1204.6 L1633.42 1204.6 L1632.84 1204.6 L1632.25 1204.6 L1631.67 1204.6 L1631.08 1204.6 L1630.49 1204.6 L1629.91 1204.6 L1629.32 1204.6 L1628.73 1204.6 L1628.15 1204.6 L1627.56 1204.6 L1626.97 1204.6 L1626.39 1204.6 L1625.8 1204.6 L1625.22 1204.6 L1624.63 1204.6 L1624.04 1204.6 L1623.46 1204.6 L1622.87 1204.6 L1622.28 1204.6 L1621.7 1204.6 L1621.11 1204.6 L1620.52 1204.6 L1619.94 1204.6 L1619.35 1204.6 L1618.76 1204.6 L1618.18 1204.6 L1617.59 1204.6 L1617.01 1204.6 L1616.42 1204.6 L1615.83 1204.6 L1615.25 1204.6 L1614.66 1204.6 L1614.07 1204.6 L1613.49 1204.6 L1612.9 1204.6 L1612.31 1204.6 L1611.73 1204.6 L1611.14 1204.6 L1610.55 1204.6 L1609.97 1204.6 L1609.38 1204.6 L1608.8 1204.6 L1608.21 1204.6 L1607.62 1204.6 L1607.04 1204.6 L1606.45 1204.6 L1605.86 1204.6 L1605.28 1204.6 L1604.69 1204.6 L1604.1 1204.6 L1603.52 1204.6 L1602.93 1204.6 L1602.34 1204.6 L1601.76 1204.6 L1601.17 1204.6 L1600.59 1204.6 L1600 1204.6 L1599.41 1204.6 L1598.83 1204.6 L1598.24 1204.6 L1597.65 1204.6 L1597.07 1204.6 L1596.48 1204.6 L1595.89 1204.6 L1595.31 1204.6 L1594.72 1204.6 L1594.14 1204.6 L1593.55 1204.6 L1592.96 1204.6 L1592.38 1204.6 L1591.79 1204.6 L1591.2 1204.6 L1590.62 1204.6 L1590.03 1204.6 L1589.44 1204.6 L1588.86 1204.6 L1588.27 1204.6 L1587.68 1204.6 L1587.1 1204.6 L1586.51 1204.6 L1585.93 1204.6 L1585.34 1204.6 L1584.75 1204.6 L1584.17 1204.6 L1583.58 1204.6 L1582.99 1204.6 L1582.41 1204.6 L1581.82 1204.6 L1581.23 1204.6 L1580.65 1204.6 L1580.06 1204.6 L1579.47 1204.6 L1578.89 1204.6 L1578.3 1204.6 L1577.72 1204.6 L1577.13 1204.6 L1576.54 1204.6 L1575.96 1204.6 L1575.37 1204.6 L1574.78 1204.6 L1574.2 1204.6 L1573.61 1204.6 L1573.02 1204.6 L1572.44 1204.6 L1571.85 1204.6 L1571.27 1204.6 L1570.68 1204.6 L1570.09 1204.6 L1569.51 1204.6 L1568.92 1204.6 L1568.33 1204.6 L1567.75 1204.6 L1567.16 1204.6 L1566.57 1204.6 L1565.99 1204.6 L1565.4 1204.6 L1564.81 1204.6 L1564.23 1204.6 L1563.64 1204.6 L1563.06 1204.6 L1562.47 1204.6 L1561.88 1204.6 L1561.3 1204.6 L1560.71 1204.6 L1560.12 1204.6 L1559.54 1204.6 L1558.95 1204.6 L1558.36 1204.6 L1557.78 1204.6 L1557.19 1204.6 L1556.6 1204.6 L1556.02 1204.6 L1555.43 1204.6 L1554.85 1204.6 L1554.26 1204.6 L1553.67 1204.6 L1553.09 1204.6 L1552.5 1204.6 L1551.91 1204.6 L1551.33 1204.6 L1550.74 1204.6 L1550.15 1204.6 L1549.57 1204.6 L1548.98 1204.6 L1548.4 1204.6 L1547.81 1204.6 L1547.22 1204.6 L1546.64 1204.6 L1546.05 1204.6 L1545.46 1204.6 L1544.88 1204.6 L1544.29 1204.6 L1543.7 1204.6 L1543.12 1204.6 L1542.53 1204.6 L1541.94 1204.6 L1541.36 1204.6 L1540.77 1204.6 L1540.19 1204.6 L1539.6 1204.6 L1539.01 1204.6 L1538.43 1204.6 L1537.84 1204.6 L1537.25 1204.6 L1536.67 1204.6 L1536.08 1204.6 L1535.49 1204.6 L1534.91 1204.6 L1534.32 1204.6 L1533.73 1204.6 L1533.15 1204.6 L1532.56 1204.6 L1531.98 1204.6 L1531.39 1204.6 L1530.8 1204.6 L1530.22 1204.6 L1529.63 1204.6 L1529.04 1204.6 L1528.46 1204.6 L1527.87 1204.6 L1527.28 1204.6 L1526.7 1204.6 L1526.11 1204.6 L1525.52 1204.6 L1524.94 1204.6 L1524.35 1204.6 L1523.77 1204.6 L1523.18 1204.6 L1522.59 1204.6 L1522.01 1204.6 L1521.42 1204.6 L1520.83 1204.6 L1520.25 1204.6 L1519.66 1204.6 L1519.07 1204.6 L1518.49 1204.6 L1517.9 1204.6 L1517.32 1204.6 L1516.73 1204.6 L1516.14 1204.6 L1515.56 1204.6 L1514.97 1204.6 L1514.38 1204.6 L1513.8 1204.6 L1513.21 1204.6 L1512.62 1204.6 L1512.04 1204.6 L1511.45 1204.6 L1510.86 1204.6 L1510.28 1204.6 L1509.69 1204.6 L1509.11 1204.6 L1508.52 1204.6 L1507.93 1204.6 L1507.35 1204.6 L1506.76 1204.6 L1506.17 1204.6 L1505.59 1204.6 L1505 1204.6 L1504.41 1204.6 L1503.83 1204.6 L1503.24 1204.6 L1502.65 1204.6 L1502.07 1204.6 L1501.48 1204.6 L1500.9 1204.6 L1500.31 1204.6 L1499.72 1204.6 L1499.14 1204.6 L1498.55 1204.6 L1497.96 1204.6 L1497.38 1204.6 L1496.79 1204.6 L1496.2 1204.6 L1495.62 1204.6 L1495.03 1204.6 L1494.45 1204.6 L1493.86 1204.6 L1493.27 1204.6 L1492.69 1204.6 L1492.1 1204.6 L1491.51 1204.6 L1490.93 1204.6 L1490.34 1204.6 L1489.75 1204.6 L1489.17 1204.6 L1488.58 1204.6 L1487.99 1204.6 L1487.41 1204.6 L1486.82 1204.6 L1486.24 1204.6 L1485.65 1204.6 L1485.06 1204.6 L1484.48 1204.6 L1483.89 1204.6 L1483.3 1204.6 L1482.72 1204.6 L1482.13 1204.6 L1481.54 1204.6 L1480.96 1204.6 L1480.37 1204.6 L1479.78 1204.6 L1479.2 1204.6 L1478.61 1204.6 L1478.03 1204.6 L1477.44 1204.6 L1476.85 1204.6 L1476.27 1204.6 L1475.68 1204.6 L1475.09 1204.6 L1474.51 1204.6 L1473.92 1204.6 L1473.33 1204.6 L1472.75 1204.6 L1472.16 1204.6 L1471.57 1204.6 L1470.99 1204.6 L1470.4 1204.6 L1469.82 1204.6 L1469.23 1204.6 L1468.64 1204.6 L1468.06 1204.6 L1467.47 1204.6 L1466.88 1204.6 L1466.3 1204.6 L1465.71 1204.6 L1465.12 1204.6 L1464.54 1204.6 L1463.95 1204.6 L1463.37 1204.6 L1462.78 1204.6 L1462.19 1204.6 L1461.61 1204.6 L1461.02 1204.6 L1460.43 1204.6 L1459.85 1204.6 L1459.26 1204.6 L1458.67 1204.6 L1458.09 1204.6 L1457.5 1204.6 L1456.91 1204.6 L1456.33 1204.6 L1455.74 1204.6 L1455.16 1204.6 L1454.57 1204.6 L1453.98 1204.6 L1453.4 1204.6 L1452.81 1204.6 L1452.22 1204.6 L1451.64 1204.6 L1451.05 1204.6 L1450.46 1204.6 L1449.88 1204.6 L1449.29 1204.6 L1448.7 1204.6 L1448.12 1204.6 L1447.53 1204.6 L1446.95 1204.6 L1446.36 1204.6 L1445.77 1204.6 L1445.19 1204.6 L1444.6 1204.6 L1444.01 1204.6 L1443.43 1204.6 L1442.84 1204.6 L1442.25 1204.6 L1441.67 1204.6 L1441.08 1204.6 L1440.5 1204.6 L1439.91 1204.6 L1439.32 1204.6 L1438.74 1204.6 L1438.15 1204.6 L1437.56 1204.6 L1436.98 1204.6 L1436.39 1204.6 L1435.8 1204.6 L1435.22 1204.6 L1434.63 1204.6 L1434.04 1204.6 L1433.46 1204.6 L1432.87 1204.6 L1432.29 1204.6 L1431.7 1204.6 L1431.11 1204.6 L1430.53 1204.6 L1429.94 1204.6 L1429.35 1204.6 L1428.77 1204.6 L1428.18 1204.6 L1427.59 1204.6 L1427.01 1204.6 L1426.42 1204.6 L1425.83 1204.6 L1425.25 1204.6 L1424.66 1204.6 L1424.08 1204.6 L1423.49 1204.6 L1422.9 1204.6 L1422.32 1204.6 L1421.73 1204.6 L1421.14 1204.6 L1420.56 1204.6 L1419.97 1204.6 L1419.38 1204.6 L1418.8 1204.6 L1418.21 1204.6 L1417.63 1204.6 L1417.04 1204.6 L1416.45 1204.6 L1415.87 1204.6 L1415.28 1204.6 L1414.69 1204.6 L1414.11 1204.6 L1413.52 1204.6 L1412.93 1204.6 L1412.35 1204.6 L1411.76 1204.6 L1411.17 1204.6 L1410.59 1204.6 L1410 1204.6 L1409.42 1204.6 L1408.83 1204.6 L1408.24 1204.6 L1407.66 1204.6 L1407.07 1204.6 L1406.48 1204.6 L1405.9 1204.6 L1405.31 1204.6 L1404.72 1204.6 L1404.14 1204.6 L1403.55 1204.6 L1402.96 1204.6 L1402.38 1204.6 L1401.79 1204.6 L1401.21 1204.6 L1400.62 1204.6 L1400.03 1204.6 L1399.45 1204.6 L1398.86 1204.6 L1398.27 1204.6 L1397.69 1204.6 L1397.1 1204.6 L1396.51 1204.6 L1395.93 1204.6 L1395.34 1204.6 L1394.75 1204.6 L1394.17 1204.6 L1393.58 1204.6 L1393 1204.6 L1392.41 1204.6 L1391.82 1204.6 L1391.24 1204.6 L1390.65 1204.6 L1390.06 1204.6 L1389.48 1204.6 L1388.89 1204.6 L1388.3 1204.6 L1387.72 1204.6 L1387.13 1204.6 L1386.55 1204.6 L1385.96 1204.6 L1385.37 1204.6 L1384.79 1204.6 L1384.2 1204.6 L1383.61 1204.6 L1383.03 1204.6 L1382.44 1204.6 L1381.85 1204.6 L1381.27 1204.6 L1380.68 1204.6 L1380.09 1204.6 L1379.51 1204.6 L1378.92 1204.6 L1378.34 1204.6 L1377.75 1204.6 L1377.16 1204.6 L1376.58 1204.6 L1375.99 1204.6 L1375.4 1204.6 L1374.82 1204.6 L1374.23 1204.6 L1373.64 1204.6 L1373.06 1204.6 L1372.47 1204.6 L1371.88 1204.6 L1371.3 1204.6 L1370.71 1204.6 L1370.13 1204.6 L1369.54 1204.6 L1368.95 1204.6 L1368.37 1204.6 L1367.78 1204.6 L1367.19 1204.6 L1366.61 1204.6 L1366.02 1204.6 L1365.43 1204.6 L1364.85 1204.6 L1364.26 1204.6 L1363.68 1204.6 L1363.09 1204.6 L1362.5 1204.6 L1361.92 1204.6 L1361.33 1204.6 L1360.74 1204.6 L1360.16 1204.6 L1359.57 1204.6 L1358.98 1204.6 L1358.4 1204.6 L1357.81 1204.6 L1357.22 1204.6 L1356.64 1204.6 L1356.05 1204.6 L1355.47 1204.6 L1354.88 1204.6 L1354.29 1204.6 L1353.71 1204.6 L1353.12 1204.6 L1352.53 1204.6 L1351.95 1204.6 L1351.36 1204.6 L1350.77 1204.6 L1350.19 1204.6 L1349.6 1204.6 L1349.01 1204.6 L1348.43 1204.6 L1347.84 1204.6 L1347.26 1204.6 L1346.67 1204.6 L1346.08 1204.6 L1345.5 1204.6 L1344.91 1204.6 L1344.32 1204.6 L1343.74 1204.6 L1343.15 1204.6 L1342.56 1204.6 L1341.98 1204.6 L1341.39 1204.6 L1340.8 1204.6 L1340.22 1204.6 L1339.63 1204.6 L1339.05 1204.6 L1338.46 1204.6 L1337.87 1204.6 L1337.29 1204.6 L1336.7 1204.6 L1336.11 1204.6 L1335.53 1204.6 L1334.94 1204.6 L1334.35 1204.6 L1333.77 1204.6 L1333.18 1204.6 L1332.6 1204.6 L1332.01 1204.6 L1331.42 1204.6 L1330.84 1204.6 L1330.25 1204.6 L1329.66 1204.6 L1329.08 1204.6 L1328.49 1204.6 L1327.9 1204.6 L1327.32 1204.6 L1326.73 1204.6 L1326.14 1204.6 L1325.56 1204.6 L1324.97 1204.6 L1324.39 1204.6 L1323.8 1204.6 L1323.21 1204.6 L1322.63 1204.6 L1322.04 1204.6 L1321.45 1204.6 L1320.87 1204.6 L1320.28 1204.6 L1319.69 1204.6 L1319.11 1204.6 L1318.52 1204.6 L1317.93 1204.6 L1317.35 1204.6 L1316.76 1204.6 L1316.18 1204.6 L1315.59 1204.6 L1315 1204.6 L1314.42 1204.6 L1313.83 1204.6 L1313.24 1204.6 L1312.66 1204.6 L1312.07 1204.6 L1311.48 1204.6 L1310.9 1204.6 L1310.31 1204.6 L1309.73 1204.6 L1309.14 1204.6 L1308.55 1204.6 L1307.97 1204.6 L1307.38 1204.6 L1306.79 1204.6 L1306.21 1204.6 L1305.62 1204.6 L1305.03 1204.6 L1304.45 1204.6 L1303.86 1204.6 L1303.27 1204.6 L1302.69 1204.6 L1302.1 1204.6 L1301.52 1204.6 L1300.93 1204.6 L1300.34 1204.6 L1299.76 1204.6 L1299.17 1204.6 L1298.58 1204.6 L1298 1204.6 L1297.41 1204.6 L1296.82 1204.6 L1296.24 1204.6 L1295.65 1204.6 L1295.06 1204.6 L1294.48 1204.6 L1293.89 1204.6 L1293.31 1204.6 L1292.72 1204.6 L1292.13 1204.6 L1291.55 1204.6 L1290.96 1204.6 L1290.37 1204.6 L1289.79 1204.6 L1289.2 1204.6 L1288.61 1204.6 L1288.03 1204.6 L1287.44 1204.6 L1286.86 1204.6 L1286.27 1204.6 L1285.68 1204.6 L1285.1 1204.6 L1284.51 1204.6 L1283.92 1204.6 L1283.34 1204.6 L1282.75 1204.6 L1282.16 1204.6 L1281.58 1204.6 L1280.99 1204.6 L1280.4 1204.6 L1279.82 1204.6 L1279.23 1204.6 L1278.65 1204.6 L1278.06 1204.6 L1277.47 1204.6 L1276.89 1204.6 L1276.3 1204.6 L1275.71 1204.6 L1275.13 1204.6 L1274.54 1204.6 L1273.95 1204.6 L1273.37 1204.6 L1272.78 1204.6 L1272.19 1204.6 L1271.61 1204.6 L1271.02 1204.6 L1270.44 1204.6 L1269.85 1204.6 L1269.26 1204.6 L1268.68 1204.6 L1268.09 1204.6 L1267.5 1204.6 L1266.92 1204.6 L1266.33 1204.6 L1265.74 1204.6 L1265.16 1204.6 L1264.57 1204.6 L1263.98 1204.6 L1263.4 1204.6 L1262.81 1204.6 L1262.23 1204.6 L1261.64 1204.6 L1261.05 1204.6 L1260.47 1204.6 L1259.88 1204.6 L1259.29 1204.6 L1258.71 1204.6 L1258.12 1204.6 L1257.53 1204.6 L1256.95 1204.6 L1256.36 1204.6 L1255.78 1204.6 L1255.19 1204.6 L1254.6 1204.6 L1254.02 1204.6 L1253.43 1204.6 L1252.84 1204.6 L1252.26 1204.6 L1251.67 1204.6 L1251.08 1204.6 L1250.5 1204.6 L1249.91 1204.6 L1249.32 1204.6 L1248.74 1204.6 L1248.15 1204.6 L1247.57 1204.6 L1246.98 1204.6 L1246.39 1204.6 L1245.81 1204.6 L1245.22 1204.6 L1244.63 1204.6 L1244.05 1204.6 L1243.46 1204.6 L1242.87 1204.6 L1242.29 1204.6 L1241.7 1204.6 L1241.11 1204.6 L1240.53 1204.6 L1239.94 1204.6 L1239.36 1204.6 L1238.77 1204.6 L1238.18 1204.6 L1237.6 1204.6 L1237.01 1204.6 L1236.42 1204.6 L1235.84 1204.6 L1235.25 1204.6 L1234.66 1204.6 L1234.08 1204.6 L1233.49 1204.6 L1232.91 1204.6 L1232.32 1204.6 L1231.73 1204.6 L1231.15 1204.6 L1230.56 1204.6 L1229.97 1204.6 L1229.39 1204.6 L1228.8 1204.6 L1228.21 1204.6 L1227.63 1204.6 L1227.04 1204.6 L1226.45 1204.6 L1225.87 1204.6 L1225.28 1204.6 L1224.7 1204.6 L1224.11 1204.6 L1223.52 1204.6 L1222.94 1204.6 L1222.35 1204.6 L1221.76 1204.6 L1221.18 1204.6 L1220.59 1204.6 L1220 1204.6 L1219.42 1204.6 L1218.83 1204.6 L1218.24 1204.6 L1217.66 1204.6 L1217.07 1204.6 L1216.49 1204.6 L1215.9 1204.6 L1215.31 1204.6 L1214.73 1204.6 L1214.14 1204.6 L1213.55 1204.6 L1212.97 1204.6 L1212.38 1204.6 L1211.79 1204.6 L1211.21 1204.6 L1210.62 1204.6 L1210.03 1204.6 L1209.45 1204.6 L1208.86 1204.6 L1208.28 1204.6 L1207.69 1204.6 L1207.1 1204.6 L1206.52 1204.6 L1205.93 1204.6 L1205.34 1204.6 L1204.76 1204.6 L1204.17 1204.6 L1203.58 1204.6 L1203 1204.6 L1202.41 1204.6 L1201.83 1204.6 L1201.24 1204.6 L1200.65 1204.6 L1200.07 1204.6 L1199.48 1204.6 L1198.89 1204.6 L1198.31 1204.6 L1197.72 1204.6 L1197.13 1204.6 L1196.55 1204.6 L1195.96 1204.6 L1195.37 1204.6 L1194.79 1204.6 L1194.2 1204.6 L1193.62 1204.6 L1193.03 1204.6 L1192.44 1204.6 L1191.86 1204.6 L1191.27 1204.6 L1190.68 1204.6 L1190.1 1204.6 L1189.51 1204.6 L1188.92 1204.6 L1188.34 1204.6 L1187.75 1204.6 L1187.16 1204.6 L1186.58 1204.6 L1185.99 1204.6 L1185.41 1204.6 L1184.82 1204.6 L1184.23 1204.6 L1183.65 1204.6 L1183.06 1204.6 L1182.47 1204.6 L1181.89 1204.6 L1181.3 1204.6 L1180.71 1204.6 L1180.13 1204.6 L1179.54 1204.6 L1178.96 1204.6 L1178.37 1204.6 L1177.78 1204.6 L1177.2 1204.6 L1176.61 1204.6 L1176.02 1204.6 L1175.44 1204.6 L1174.85 1204.6 L1174.26 1204.6 L1173.68 1204.6 L1173.09 1204.6 L1172.5 1204.6 L1171.92 1204.6 L1171.33 1204.6 L1170.75 1204.6 L1170.16 1204.6 L1169.57 1204.6 L1168.99 1204.6 L1168.4 1204.6 L1167.81 1204.6 L1167.23 1204.6 L1166.64 1204.6 L1166.05 1204.6 L1165.47 1204.6 L1164.88 1204.6 L1164.29 1204.6 L1163.71 1204.6 L1163.12 1204.6 L1162.54 1204.6 L1161.95 1204.6 L1161.36 1204.6 L1160.78 1204.6 L1160.19 1204.6 L1159.6 1204.6 L1159.02 1204.6 L1158.43 1204.6 L1157.84 1204.6 L1157.26 1204.6 L1156.67 1204.6 L1156.09 1204.6 L1155.5 1204.6 L1154.91 1204.6 L1154.33 1204.6 L1153.74 1204.6 L1153.15 1204.6 L1152.57 1204.6 L1151.98 1204.6 L1151.39 1204.6 L1150.81 1204.6 L1150.22 1204.6 L1149.63 1204.6 L1149.05 1204.6 L1148.46 1204.6 L1147.88 1204.6 L1147.29 1204.6 L1146.7 1204.6 L1146.12 1204.6 L1145.53 1204.6 L1144.94 1204.6 L1144.36 1204.6 L1143.77 1204.6 L1143.18 1204.6 L1142.6 1204.6 L1142.01 1204.6 L1141.42 1204.6 L1140.84 1204.6 L1140.25 1204.6 L1139.67 1204.6 L1139.08 1204.6 L1138.49 1204.6 L1137.91 1204.6 L1137.32 1204.6 L1136.73 1204.6 L1136.15 1204.6 L1135.56 1204.6 L1134.97 1204.6 L1134.39 1204.6 L1133.8 1204.6 L1133.21 1204.6 L1132.63 1204.6 L1132.04 1204.6 L1131.46 1204.6 L1130.87 1204.6 L1130.28 1204.6 L1129.7 1204.6 L1129.11 1204.6 L1128.52 1204.6 L1127.94 1204.6 L1127.35 1204.6 L1126.76 1204.6 L1126.18 1204.6 L1125.59 1204.6 L1125.01 1204.6 L1124.42 1204.6 L1123.83 1204.6 L1123.25 1204.6 L1122.66 1204.6 L1122.07 1204.6 L1121.49 1204.6 L1120.9 1204.6 L1120.31 1204.6 L1119.73 1204.6 L1119.14 1204.6 L1118.55 1204.6 L1117.97 1204.6 L1117.38 1204.6 L1116.8 1204.6 L1116.21 1204.6 L1115.62 1204.6 L1115.04 1204.6 L1114.45 1204.6 L1113.86 1204.6 L1113.28 1204.6 L1112.69 1204.6 L1112.1 1204.6 L1111.52 1204.6 L1110.93 1204.6 L1110.34 1204.6 L1109.76 1204.6 L1109.17 1204.6 L1108.59 1204.6 L1108 1204.6 L1107.41 1204.6 L1106.83 1204.6 L1106.24 1204.6 L1105.65 1204.6 L1105.07 1204.6 L1104.48 1204.6 L1103.89 1204.6 L1103.31 1204.6 L1102.72 1204.6 L1102.14 1204.6 L1101.55 1204.6 L1100.96 1204.6 L1100.38 1204.6 L1099.79 1204.6 L1099.2 1204.6 L1098.62 1204.6 L1098.03 1204.6 L1097.44 1204.6 L1096.86 1204.6 L1096.27 1204.6 L1095.68 1204.6 L1095.1 1204.6 L1094.51 1204.6 L1093.93 1204.6 L1093.34 1204.6 L1092.75 1204.6 L1092.17 1204.6 L1091.58 1204.6 L1090.99 1204.6 L1090.41 1204.6 L1089.82 1204.6 L1089.23 1204.6 L1088.65 1204.6 L1088.06 1204.6 L1087.47 1204.6 L1086.89 1204.6 L1086.3 1204.6 L1085.72 1204.6 L1085.13 1204.6 L1084.54 1204.6 L1083.96 1204.6 L1083.37 1204.6 L1082.78 1204.6 L1082.2 1204.6 L1081.61 1204.6 L1081.02 1204.6 L1080.44 1204.6 L1079.85 1204.6 L1079.26 1204.6 L1078.68 1204.6 L1078.09 1204.6 L1077.51 1204.6 L1076.92 1204.6 L1076.33 1204.6 L1075.75 1204.6 L1075.16 1204.6 L1074.57 1204.6 L1073.99 1204.6 L1073.4 1204.6 L1072.81 1204.6 L1072.23 1204.6 L1071.64 1204.6 L1071.06 1204.6 L1070.47 1204.6 L1069.88 1204.6 L1069.3 1204.6 L1068.71 1204.6 L1068.12 1204.6 L1067.54 1204.6 L1066.95 1204.6 L1066.36 1204.6 L1065.78 1204.6 L1065.19 1204.6 L1064.6 1204.6 L1064.02 1204.6 L1063.43 1204.6 L1062.85 1204.6 L1062.26 1204.6 L1061.67 1204.6 L1061.09 1204.6 L1060.5 1204.6 L1059.91 1204.6 L1059.33 1204.6 L1058.74 1204.6 L1058.15 1204.6 L1057.57 1204.6 L1056.98 1204.6 L1056.39 1204.6 L1055.81 1204.6 L1055.22 1204.6 L1054.64 1204.6 L1054.05 1204.6 L1053.46 1204.6 L1052.88 1204.6 L1052.29 1204.6 L1051.7 1204.6 L1051.12 1204.6 L1050.53 1204.6 L1049.94 1204.6 L1049.36 1204.6 L1048.77 1204.6 L1048.19 1204.6 L1047.6 1204.6 L1047.01 1204.6 L1046.43 1204.6 L1045.84 1204.6 L1045.25 1204.6 L1044.67 1204.6 L1044.08 1204.6 L1043.49 1204.6 L1042.91 1204.6 L1042.32 1204.6 L1041.73 1204.6 L1041.15 1204.6 L1040.56 1204.6 L1039.98 1204.6 L1039.39 1204.6 L1038.8 1204.6 L1038.22 1204.6 L1037.63 1204.6 L1037.04 1204.6 L1036.46 1204.6 L1035.87 1204.6 L1035.28 1204.6 L1034.7 1204.6 L1034.11 1204.6 L1033.52 1204.6 L1032.94 1204.6 L1032.35 1204.6 L1031.77 1204.6 L1031.18 1204.6 L1030.59 1204.6 L1030.01 1204.6 L1029.42 1204.6 L1028.83 1204.6 L1028.25 1204.6 L1027.66 1204.6 L1027.07 1204.6 L1026.49 1204.6 L1025.9 1204.6 L1025.32 1204.6 L1024.73 1204.6 L1024.14 1204.6 L1023.56 1204.6 L1022.97 1204.6 L1022.38 1204.6 L1021.8 1204.6 L1021.21 1204.6 L1020.62 1204.6 L1020.04 1204.6 L1019.45 1204.6 L1018.86 1204.6 L1018.28 1204.6 L1017.69 1204.6 L1017.11 1204.6 L1016.52 1204.6 L1015.93 1204.6 L1015.35 1204.6 L1014.76 1204.6 L1014.17 1204.6 L1013.59 1204.6 L1013 1204.6 L1012.41 1204.6 L1011.83 1204.6 L1011.24 1204.6 L1010.65 1204.6 L1010.07 1204.6 L1009.48 1204.6 L1008.9 1204.6 L1008.31 1204.6 L1007.72 1204.6 L1007.14 1204.6 L1006.55 1204.6 L1005.96 1204.6 L1005.38 1204.6 L1004.79 1204.6 L1004.2 1204.6 L1003.62 1204.6 L1003.03 1204.6 L1002.44 1204.6 L1001.86 1204.6 L1001.27 1204.6 L1000.69 1204.6 L1000.1 1204.6 L999.513 1204.6 L998.926 1204.6 L998.34 1204.6 L997.754 1204.6 L997.167 1204.6 L996.581 1204.6 L995.994 1204.6 L995.408 1204.6 L994.822 1204.6 L994.235 1204.6 L993.649 1204.6 L993.062 1204.6 L992.476 1204.6 L991.889 1204.6 L991.303 1204.6 L990.717 1204.6 L990.13 1204.6 L989.544 1204.6 L988.957 1204.6 L988.371 1204.6 L987.785 1204.6 L987.198 1204.6 L986.612 1204.6 L986.025 1204.6  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.92 986.612,1204.92 987.198,1204.92 987.785,1204.92 988.371,1204.92 988.957,1204.92 989.544,1204.92 990.13,1204.92 990.717,1204.92 991.303,1204.92 991.889,1204.92 992.476,1204.92 993.062,1204.92 993.649,1204.92 994.235,1204.92 994.822,1204.92 995.408,1204.92 995.994,1204.92 996.581,1204.92 997.167,1204.92 997.754,1204.92 998.34,1204.92 998.926,1204.92 999.513,1204.92 1000.1,1204.92 1000.69,1204.92 1001.27,1204.92 1001.86,1204.92 1002.44,1204.92 1003.03,1204.92 1003.62,1204.92 1004.2,1204.92 1004.79,1204.92 1005.38,1204.92 1005.96,1204.92 1006.55,1204.92 1007.14,1204.92 1007.72,1204.92 1008.31,1204.92 1008.9,1204.92 1009.48,1204.92 1010.07,1204.92 1010.65,1204.92 1011.24,1204.92 1011.83,1204.92 1012.41,1204.92 1013,1204.92 1013.59,1204.92 1014.17,1204.92 1014.76,1204.92 1015.35,1204.92 1015.93,1204.92 1016.52,1204.92 1017.11,1204.92 1017.69,1204.92 1018.28,1204.92 1018.86,1204.92 1019.45,1204.92 1020.04,1204.92 1020.62,1204.92 1021.21,1204.92 1021.8,1204.92 1022.38,1204.92 1022.97,1204.92 1023.56,1204.92 1024.14,1204.92 1024.73,1204.92 1025.32,1204.92 1025.9,1204.92 1026.49,1204.92 1027.07,1204.92 1027.66,1204.92 1028.25,1204.92 1028.83,1204.92 1029.42,1204.92 1030.01,1204.92 1030.59,1204.92 1031.18,1204.92 1031.77,1204.92 1032.35,1204.92 1032.94,1204.92 1033.52,1204.92 1034.11,1204.92 1034.7,1204.92 1035.28,1204.92 1035.87,1204.92 1036.46,1204.92 1037.04,1204.92 1037.63,1204.92 1038.22,1204.92 1038.8,1204.92 1039.39,1204.92 1039.98,1204.92 1040.56,1204.92 1041.15,1204.92 1041.73,1204.92 1042.32,1204.92 1042.91,1204.92 1043.49,1204.92 1044.08,1204.92 1044.67,1204.92 1045.25,1204.92 1045.84,1204.92 1046.43,1204.92 1047.01,1204.92 1047.6,1204.92 1048.19,1204.92 1048.77,1204.92 1049.36,1204.92 1049.94,1204.92 1050.53,1204.92 1051.12,1204.92 1051.7,1204.92 1052.29,1204.92 1052.88,1204.92 1053.46,1204.92 1054.05,1204.92 1054.64,1204.92 1055.22,1204.92 1055.81,1204.92 1056.39,1204.92 1056.98,1204.92 1057.57,1204.92 1058.15,1204.92 1058.74,1204.92 1059.33,1204.92 1059.91,1204.92 1060.5,1204.92 1061.09,1204.92 1061.67,1204.92 1062.26,1204.92 1062.85,1204.92 1063.43,1204.92 1064.02,1204.92 1064.6,1204.92 1065.19,1204.92 1065.78,1204.92 1066.36,1204.92 1066.95,1204.92 1067.54,1204.92 1068.12,1204.92 1068.71,1204.92 1069.3,1204.92 1069.88,1204.92 1070.47,1204.92 1071.06,1204.92 1071.64,1204.92 1072.23,1204.92 1072.81,1204.92 1073.4,1204.92 1073.99,1204.92 1074.57,1204.92 1075.16,1204.92 1075.75,1204.92 1076.33,1204.92 1076.92,1204.92 1077.51,1204.92 1078.09,1204.92 1078.68,1204.92 1079.26,1204.92 1079.85,1204.92 1080.44,1204.92 1081.02,1204.92 1081.61,1204.92 1082.2,1204.92 1082.78,1204.92 1083.37,1204.92 1083.96,1204.92 1084.54,1204.92 1085.13,1204.92 1085.72,1204.92 1086.3,1204.92 1086.89,1204.92 1087.47,1204.92 1088.06,1204.92 1088.65,1204.92 1089.23,1204.92 1089.82,1204.92 1090.41,1204.92 1090.99,1204.92 1091.58,1204.92 1092.17,1204.92 1092.75,1204.92 1093.34,1204.92 1093.93,1204.92 1094.51,1204.92 1095.1,1204.92 1095.68,1204.92 1096.27,1204.92 1096.86,1204.92 1097.44,1204.92 1098.03,1204.92 1098.62,1204.92 1099.2,1204.92 1099.79,1204.92 1100.38,1204.92 1100.96,1204.92 1101.55,1204.92 1102.14,1204.92 1102.72,1204.92 1103.31,1204.92 1103.89,1204.92 1104.48,1204.92 1105.07,1204.92 1105.65,1204.92 1106.24,1204.92 1106.83,1204.92 1107.41,1204.92 1108,1204.92 1108.59,1204.92 1109.17,1204.92 1109.76,1204.92 1110.34,1204.92 1110.93,1204.92 1111.52,1204.92 1112.1,1204.92 1112.69,1204.92 1113.28,1204.92 1113.86,1204.92 1114.45,1204.92 1115.04,1204.92 1115.62,1204.92 1116.21,1204.92 1116.8,1204.92 1117.38,1204.92 1117.97,1204.92 1118.55,1204.92 1119.14,1204.92 1119.73,1204.92 1120.31,1204.92 1120.9,1204.92 1121.49,1204.92 1122.07,1204.92 1122.66,1204.92 1123.25,1204.92 1123.83,1204.92 1124.42,1204.92 1125.01,1204.92 1125.59,1204.92 1126.18,1204.92 1126.76,1204.92 1127.35,1204.92 1127.94,1204.92 1128.52,1204.92 1129.11,1204.92 1129.7,1204.92 1130.28,1204.92 1130.87,1204.92 1131.46,1204.92 1132.04,1204.92 1132.63,1204.92 1133.21,1204.92 1133.8,1204.92 1134.39,1204.92 1134.97,1204.92 1135.56,1204.92 1136.15,1204.92 1136.73,1204.92 1137.32,1204.92 1137.91,1204.92 1138.49,1204.92 1139.08,1204.92 1139.67,1204.92 1140.25,1204.92 1140.84,1204.92 1141.42,1204.92 1142.01,1204.92 1142.6,1204.92 1143.18,1204.92 1143.77,1204.92 1144.36,1204.92 1144.94,1204.92 1145.53,1204.92 1146.12,1204.92 1146.7,1204.92 1147.29,1204.92 1147.88,1204.92 1148.46,1204.92 1149.05,1204.92 1149.63,1204.92 1150.22,1204.92 1150.81,1204.92 1151.39,1204.92 1151.98,1204.92 1152.57,1204.92 1153.15,1204.92 1153.74,1204.92 1154.33,1204.92 1154.91,1204.92 1155.5,1204.92 1156.09,1204.92 1156.67,1204.92 1157.26,1204.92 1157.84,1204.92 1158.43,1204.92 1159.02,1204.92 1159.6,1204.92 1160.19,1204.92 1160.78,1204.92 1161.36,1204.92 1161.95,1204.92 1162.54,1204.92 1163.12,1204.92 1163.71,1204.92 1164.29,1204.92 1164.88,1204.92 1165.47,1204.92 1166.05,1204.92 1166.64,1204.92 1167.23,1204.92 1167.81,1204.92 1168.4,1204.92 1168.99,1204.92 1169.57,1204.92 1170.16,1204.92 1170.75,1204.92 1171.33,1204.92 1171.92,1204.92 1172.5,1204.92 1173.09,1204.92 1173.68,1204.92 1174.26,1204.92 1174.85,1204.92 1175.44,1204.92 1176.02,1204.92 1176.61,1204.92 1177.2,1204.92 1177.78,1204.92 1178.37,1204.92 1178.96,1204.92 1179.54,1204.92 1180.13,1204.92 1180.71,1204.92 1181.3,1204.92 1181.89,1204.92 1182.47,1204.92 1183.06,1204.92 1183.65,1204.92 1184.23,1204.92 1184.82,1204.92 1185.41,1204.92 1185.99,1204.92 1186.58,1204.92 1187.16,1204.92 1187.75,1204.92 1188.34,1204.92 1188.92,1204.92 1189.51,1204.92 1190.1,1204.92 1190.68,1204.92 1191.27,1204.92 1191.86,1204.92 1192.44,1204.92 1193.03,1204.92 1193.62,1204.92 1194.2,1204.92 1194.79,1204.92 1195.37,1204.92 1195.96,1204.92 1196.55,1204.92 1197.13,1204.92 1197.72,1204.92 1198.31,1204.92 1198.89,1204.92 1199.48,1204.92 1200.07,1204.92 1200.65,1204.92 1201.24,1204.92 1201.83,1204.92 1202.41,1204.92 1203,1204.92 1203.58,1204.92 1204.17,1204.92 1204.76,1204.92 1205.34,1204.92 1205.93,1204.92 1206.52,1204.92 1207.1,1204.92 1207.69,1204.92 1208.28,1204.92 1208.86,1204.92 1209.45,1204.92 1210.03,1204.92 1210.62,1204.92 1211.21,1204.92 1211.79,1204.92 1212.38,1204.92 1212.97,1204.92 1213.55,1204.92 1214.14,1204.92 1214.73,1204.92 1215.31,1204.92 1215.9,1204.92 1216.49,1204.92 1217.07,1204.92 1217.66,1204.92 1218.24,1204.92 1218.83,1204.92 1219.42,1204.92 1220,1204.92 1220.59,1204.92 1221.18,1204.92 1221.76,1204.92 1222.35,1204.92 1222.94,1204.92 1223.52,1204.92 1224.11,1204.92 1224.7,1204.92 1225.28,1204.92 1225.87,1204.92 1226.45,1204.92 1227.04,1204.92 1227.63,1204.92 1228.21,1204.92 1228.8,1204.92 1229.39,1204.92 1229.97,1204.92 1230.56,1204.92 1231.15,1204.92 1231.73,1204.92 1232.32,1204.92 1232.91,1204.92 1233.49,1204.92 1234.08,1204.92 1234.66,1204.92 1235.25,1204.92 1235.84,1204.92 1236.42,1204.92 1237.01,1204.92 1237.6,1204.92 1238.18,1204.92 1238.77,1204.92 1239.36,1204.92 1239.94,1204.92 1240.53,1204.92 1241.11,1204.92 1241.7,1204.92 1242.29,1204.92 1242.87,1204.92 1243.46,1204.92 1244.05,1204.92 1244.63,1204.92 1245.22,1204.92 1245.81,1204.92 1246.39,1204.92 1246.98,1204.92 1247.57,1204.92 1248.15,1204.92 1248.74,1204.92 1249.32,1204.92 1249.91,1204.92 1250.5,1204.92 1251.08,1204.92 1251.67,1204.92 1252.26,1204.92 1252.84,1204.92 1253.43,1204.92 1254.02,1204.92 1254.6,1204.92 1255.19,1204.92 1255.78,1204.92 1256.36,1204.92 1256.95,1204.92 1257.53,1204.92 1258.12,1204.92 1258.71,1204.92 1259.29,1204.92 1259.88,1204.92 1260.47,1204.92 1261.05,1204.92 1261.64,1204.92 1262.23,1204.92 1262.81,1204.92 1263.4,1204.92 1263.98,1204.92 1264.57,1204.92 1265.16,1204.92 1265.74,1204.92 1266.33,1204.92 1266.92,1204.92 1267.5,1204.92 1268.09,1204.92 1268.68,1204.92 1269.26,1204.92 1269.85,1204.92 1270.44,1204.92 1271.02,1204.92 1271.61,1204.92 1272.19,1204.92 1272.78,1204.92 1273.37,1204.92 1273.95,1204.92 1274.54,1204.92 1275.13,1204.92 1275.71,1204.92 1276.3,1204.92 1276.89,1204.92 1277.47,1204.92 1278.06,1204.92 1278.65,1204.92 1279.23,1204.92 1279.82,1204.92 1280.4,1204.92 1280.99,1204.92 1281.58,1204.92 1282.16,1204.92 1282.75,1204.92 1283.34,1204.92 1283.92,1204.92 1284.51,1204.92 1285.1,1204.92 1285.68,1204.92 1286.27,1204.92 1286.86,1204.92 1287.44,1204.92 1288.03,1204.92 1288.61,1204.92 1289.2,1204.92 1289.79,1204.92 1290.37,1204.92 1290.96,1204.92 1291.55,1204.92 1292.13,1204.92 1292.72,1204.92 1293.31,1204.92 1293.89,1204.92 1294.48,1204.92 1295.06,1204.92 1295.65,1204.92 1296.24,1204.92 1296.82,1204.92 1297.41,1204.92 1298,1204.92 1298.58,1204.92 1299.17,1204.92 1299.76,1204.92 1300.34,1204.92 1300.93,1204.92 1301.52,1204.92 1302.1,1204.92 1302.69,1204.92 1303.27,1204.92 1303.86,1204.92 1304.45,1204.92 1305.03,1204.92 1305.62,1204.92 1306.21,1204.92 1306.79,1204.92 1307.38,1204.92 1307.97,1204.92 1308.55,1204.92 1309.14,1204.92 1309.73,1204.92 1310.31,1204.92 1310.9,1204.92 1311.48,1204.92 1312.07,1204.92 1312.66,1204.92 1313.24,1204.92 1313.83,1204.92 1314.42,1204.92 1315,1204.92 1315.59,1204.92 1316.18,1204.92 1316.76,1204.92 1317.35,1204.92 1317.93,1204.92 1318.52,1204.92 1319.11,1204.92 1319.69,1204.92 1320.28,1204.92 1320.87,1204.92 1321.45,1204.92 1322.04,1204.92 1322.63,1204.92 1323.21,1204.92 1323.8,1204.92 1324.39,1204.92 1324.97,1204.92 1325.56,1204.92 1326.14,1204.92 1326.73,1204.92 1327.32,1204.92 1327.9,1204.92 1328.49,1204.92 1329.08,1204.92 1329.66,1204.92 1330.25,1204.92 1330.84,1204.92 1331.42,1204.92 1332.01,1204.92 1332.6,1204.92 1333.18,1204.92 1333.77,1204.92 1334.35,1204.92 1334.94,1204.92 1335.53,1204.92 1336.11,1204.92 1336.7,1204.92 1337.29,1204.92 1337.87,1204.92 1338.46,1204.92 1339.05,1204.92 1339.63,1204.92 1340.22,1204.92 1340.8,1204.92 1341.39,1204.92 1341.98,1204.92 1342.56,1204.92 1343.15,1204.92 1343.74,1204.92 1344.32,1204.92 1344.91,1204.92 1345.5,1204.92 1346.08,1204.92 1346.67,1204.92 1347.26,1204.92 1347.84,1204.92 1348.43,1204.92 1349.01,1204.92 1349.6,1204.92 1350.19,1204.92 1350.77,1204.92 1351.36,1204.92 1351.95,1204.92 1352.53,1204.92 1353.12,1204.92 1353.71,1204.92 1354.29,1204.92 1354.88,1204.92 1355.47,1204.92 1356.05,1204.92 1356.64,1204.92 1357.22,1204.92 1357.81,1204.92 1358.4,1204.92 1358.98,1204.92 1359.57,1204.92 1360.16,1204.92 1360.74,1204.92 1361.33,1204.92 1361.92,1204.92 1362.5,1204.92 1363.09,1204.92 1363.68,1204.92 1364.26,1204.92 1364.85,1204.92 1365.43,1204.92 1366.02,1204.92 1366.61,1204.92 1367.19,1204.92 1367.78,1204.92 1368.37,1204.92 1368.95,1204.92 1369.54,1204.92 1370.13,1204.92 1370.71,1204.92 1371.3,1204.92 1371.88,1204.92 1372.47,1204.92 1373.06,1204.92 1373.64,1204.92 1374.23,1204.92 1374.82,1204.92 1375.4,1204.92 1375.99,1204.92 1376.58,1204.92 1377.16,1204.92 1377.75,1204.92 1378.34,1204.92 1378.92,1204.92 1379.51,1204.92 1380.09,1204.92 1380.68,1204.92 1381.27,1204.92 1381.85,1204.92 1382.44,1204.92 1383.03,1204.92 1383.61,1204.92 1384.2,1204.92 1384.79,1204.92 1385.37,1204.92 1385.96,1204.92 1386.55,1204.92 1387.13,1204.92 1387.72,1204.92 1388.3,1204.92 1388.89,1204.92 1389.48,1204.92 1390.06,1204.92 1390.65,1204.92 1391.24,1204.92 1391.82,1204.92 1392.41,1204.92 1393,1204.92 1393.58,1204.92 1394.17,1204.92 1394.75,1204.92 1395.34,1204.92 1395.93,1204.92 1396.51,1204.92 1397.1,1204.92 1397.69,1204.92 1398.27,1204.92 1398.86,1204.92 1399.45,1204.92 1400.03,1204.92 1400.62,1204.92 1401.21,1204.92 1401.79,1204.92 1402.38,1204.92 1402.96,1204.92 1403.55,1204.92 1404.14,1204.92 1404.72,1204.92 1405.31,1204.92 1405.9,1204.92 1406.48,1204.92 1407.07,1204.92 1407.66,1204.92 1408.24,1204.92 1408.83,1204.92 1409.42,1204.92 1410,1204.92 1410.59,1204.92 1411.17,1204.92 1411.76,1204.92 1412.35,1204.92 1412.93,1204.92 1413.52,1204.92 1414.11,1204.92 1414.69,1204.92 1415.28,1204.92 1415.87,1204.92 1416.45,1204.92 1417.04,1204.92 1417.63,1204.92 1418.21,1204.92 1418.8,1204.92 1419.38,1204.92 1419.97,1204.92 1420.56,1204.92 1421.14,1204.92 1421.73,1204.92 1422.32,1204.92 1422.9,1204.92 1423.49,1204.92 1424.08,1204.92 1424.66,1204.92 1425.25,1204.92 1425.83,1204.92 1426.42,1204.92 1427.01,1204.92 1427.59,1204.92 1428.18,1204.92 1428.77,1204.92 1429.35,1204.92 1429.94,1204.92 1430.53,1204.92 1431.11,1204.92 1431.7,1204.92 1432.29,1204.92 1432.87,1204.92 1433.46,1204.92 1434.04,1204.92 1434.63,1204.92 1435.22,1204.92 1435.8,1204.92 1436.39,1204.92 1436.98,1204.92 1437.56,1204.92 1438.15,1204.92 1438.74,1204.92 1439.32,1204.92 1439.91,1204.92 1440.5,1204.92 1441.08,1204.92 1441.67,1204.92 1442.25,1204.92 1442.84,1204.92 1443.43,1204.92 1444.01,1204.92 1444.6,1204.92 1445.19,1204.92 1445.77,1204.92 1446.36,1204.92 1446.95,1204.92 1447.53,1204.92 1448.12,1204.92 1448.7,1204.92 1449.29,1204.92 1449.88,1204.92 1450.46,1204.92 1451.05,1204.92 1451.64,1204.92 1452.22,1204.92 1452.81,1204.92 1453.4,1204.92 1453.98,1204.92 1454.57,1204.92 1455.16,1204.92 1455.74,1204.92 1456.33,1204.92 1456.91,1204.92 1457.5,1204.92 1458.09,1204.92 1458.67,1204.92 1459.26,1204.92 1459.85,1204.92 1460.43,1204.92 1461.02,1204.92 1461.61,1204.92 1462.19,1204.92 1462.78,1204.92 1463.37,1204.92 1463.95,1204.92 1464.54,1204.92 1465.12,1204.92 1465.71,1204.92 1466.3,1204.92 1466.88,1204.92 1467.47,1204.92 1468.06,1204.92 1468.64,1204.92 1469.23,1204.92 1469.82,1204.92 1470.4,1204.92 1470.99,1204.92 1471.57,1204.92 1472.16,1204.92 1472.75,1204.92 1473.33,1204.92 1473.92,1204.92 1474.51,1204.92 1475.09,1204.92 1475.68,1204.92 1476.27,1204.92 1476.85,1204.92 1477.44,1204.92 1478.03,1204.92 1478.61,1204.92 1479.2,1204.92 1479.78,1204.92 1480.37,1204.92 1480.96,1204.92 1481.54,1204.92 1482.13,1204.92 1482.72,1204.92 1483.3,1204.92 1483.89,1204.92 1484.48,1204.92 1485.06,1204.92 1485.65,1204.92 1486.24,1204.92 1486.82,1204.92 1487.41,1204.92 1487.99,1204.92 1488.58,1204.92 1489.17,1204.92 1489.75,1204.92 1490.34,1204.92 1490.93,1204.92 1491.51,1204.92 1492.1,1204.92 1492.69,1204.92 1493.27,1204.92 1493.86,1204.92 1494.45,1204.92 1495.03,1204.92 1495.62,1204.92 1496.2,1204.92 1496.79,1204.92 1497.38,1204.92 1497.96,1204.92 1498.55,1204.92 1499.14,1204.92 1499.72,1204.92 1500.31,1204.92 1500.9,1204.92 1501.48,1204.92 1502.07,1204.92 1502.65,1204.92 1503.24,1204.92 1503.83,1204.92 1504.41,1204.92 1505,1204.92 1505.59,1204.92 1506.17,1204.92 1506.76,1204.92 1507.35,1204.92 1507.93,1204.92 1508.52,1204.92 1509.11,1204.92 1509.69,1204.92 1510.28,1204.92 1510.86,1204.92 1511.45,1204.92 1512.04,1204.92 1512.62,1204.92 1513.21,1204.92 1513.8,1204.92 1514.38,1204.92 1514.97,1204.92 1515.56,1204.92 1516.14,1204.92 1516.73,1204.92 1517.32,1204.92 1517.9,1204.92 1518.49,1204.92 1519.07,1204.92 1519.66,1204.92 1520.25,1204.92 1520.83,1204.92 1521.42,1204.92 1522.01,1204.92 1522.59,1204.92 1523.18,1204.92 1523.77,1204.92 1524.35,1204.92 1524.94,1204.92 1525.52,1204.92 1526.11,1204.92 1526.7,1204.92 1527.28,1204.92 1527.87,1204.92 1528.46,1204.92 1529.04,1204.92 1529.63,1204.92 1530.22,1204.92 1530.8,1204.92 1531.39,1204.92 1531.98,1204.92 1532.56,1204.92 1533.15,1204.92 1533.73,1204.92 1534.32,1204.92 1534.91,1204.92 1535.49,1204.92 1536.08,1204.92 1536.67,1204.92 1537.25,1204.92 1537.84,1204.92 1538.43,1204.92 1539.01,1204.92 1539.6,1204.92 1540.19,1204.92 1540.77,1204.92 1541.36,1204.92 1541.94,1204.92 1542.53,1204.92 1543.12,1204.92 1543.7,1204.92 1544.29,1204.92 1544.88,1204.92 1545.46,1204.92 1546.05,1204.92 1546.64,1204.92 1547.22,1204.92 1547.81,1204.92 1548.4,1204.92 1548.98,1204.92 1549.57,1204.92 1550.15,1204.92 1550.74,1204.92 1551.33,1204.92 1551.91,1204.92 1552.5,1204.92 1553.09,1204.92 1553.67,1204.92 1554.26,1204.92 1554.85,1204.92 1555.43,1204.92 1556.02,1204.92 1556.6,1204.92 1557.19,1204.92 1557.78,1204.92 1558.36,1204.92 1558.95,1204.92 1559.54,1204.92 1560.12,1204.92 1560.71,1204.92 1561.3,1204.92 1561.88,1204.92 1562.47,1204.92 1563.06,1204.92 1563.64,1204.92 1564.23,1204.92 1564.81,1204.92 1565.4,1204.92 1565.99,1204.92 1566.57,1204.92 1567.16,1204.92 1567.75,1204.92 1568.33,1204.92 1568.92,1204.92 1569.51,1204.92 1570.09,1204.92 1570.68,1204.92 1571.27,1204.92 1571.85,1204.92 1572.44,1204.92 1573.02,1204.92 1573.61,1204.92 1574.2,1204.92 1574.78,1204.92 1575.37,1204.92 1575.96,1204.92 1576.54,1204.92 1577.13,1204.92 1577.72,1204.92 1578.3,1204.92 1578.89,1204.92 1579.47,1204.92 1580.06,1204.92 1580.65,1204.92 1581.23,1204.92 1581.82,1204.92 1582.41,1204.92 1582.99,1204.92 1583.58,1204.92 1584.17,1204.92 1584.75,1204.92 1585.34,1204.92 1585.93,1204.92 1586.51,1204.92 1587.1,1204.92 1587.68,1204.92 1588.27,1204.92 1588.86,1204.92 1589.44,1204.92 1590.03,1204.92 1590.62,1204.92 1591.2,1204.92 1591.79,1204.92 1592.38,1204.92 1592.96,1204.92 1593.55,1204.92 1594.14,1204.92 1594.72,1204.92 1595.31,1204.92 1595.89,1204.92 1596.48,1204.92 1597.07,1204.92 1597.65,1204.92 1598.24,1204.92 1598.83,1204.92 1599.41,1204.92 1600,1204.92 1600.59,1204.92 1601.17,1204.92 1601.76,1204.92 1602.34,1204.92 1602.93,1204.92 1603.52,1204.92 1604.1,1204.92 1604.69,1204.92 1605.28,1204.92 1605.86,1204.92 1606.45,1204.92 1607.04,1204.92 1607.62,1204.92 1608.21,1204.92 1608.8,1204.92 1609.38,1204.92 1609.97,1204.92 1610.55,1204.92 1611.14,1204.92 1611.73,1204.92 1612.31,1204.92 1612.9,1204.92 1613.49,1204.92 1614.07,1204.92 1614.66,1204.92 1615.25,1204.92 1615.83,1204.92 1616.42,1204.92 1617.01,1204.92 1617.59,1204.92 1618.18,1204.92 1618.76,1204.92 1619.35,1204.92 1619.94,1204.92 1620.52,1204.92 1621.11,1204.92 1621.7,1204.92 1622.28,1204.92 1622.87,1204.92 1623.46,1204.92 1624.04,1204.92 1624.63,1204.92 1625.22,1204.92 1625.8,1204.92 1626.39,1204.92 1626.97,1204.92 1627.56,1204.92 1628.15,1204.92 1628.73,1204.92 1629.32,1204.92 1629.91,1204.92 1630.49,1204.92 1631.08,1204.92 1631.67,1204.92 1632.25,1204.92 1632.84,1204.92 1633.42,1204.92 1634.01,1204.92 1634.6,1204.92 1635.18,1204.92 1635.77,1204.92 1636.36,1204.92 1636.94,1204.92 1637.53,1204.92 1638.12,1204.92 1638.7,1204.92 1639.29,1204.92 1639.88,1204.92 1640.46,1204.92 1641.05,1204.92 1641.63,1204.92 1642.22,1204.92 1642.81,1204.92 1643.39,1204.92 1643.98,1204.92 1644.57,1204.92 1645.15,1204.92 1645.74,1204.92 1646.33,1204.92 1646.91,1204.92 1647.5,1204.92 1648.09,1204.92 1648.67,1204.92 1649.26,1204.92 1649.84,1204.92 1650.43,1204.92 1651.02,1204.92 1651.6,1204.92 1652.19,1204.92 1652.78,1204.92 1653.36,1204.92 1653.95,1204.92 1654.54,1204.92 1655.12,1204.92 1655.71,1204.92 1656.29,1204.92 1656.88,1204.92 1657.47,1204.92 1658.05,1204.92 1658.64,1204.92 1659.23,1204.92 1659.81,1204.92 1660.4,1204.92 1660.99,1204.92 1661.57,1204.92 1662.16,1204.92 1662.75,1204.92 1663.33,1204.92 1663.92,1204.92 1664.5,1204.92 1665.09,1204.92 1665.68,1204.92 1666.26,1204.92 1666.85,1204.92 1667.44,1204.92 1668.02,1204.92 1668.61,1204.92 1669.2,1204.92 1669.78,1204.92 1670.37,1204.92 1670.96,1204.92 1671.54,1204.92 1672.13,1204.92 1672.71,1204.92 1673.3,1204.92 1673.89,1204.92 1674.47,1204.92 1675.06,1204.92 1675.65,1204.92 1676.23,1204.92 1676.82,1204.92 1677.41,1204.92 1677.99,1204.92 1678.58,1204.92 1679.17,1204.92 1679.75,1204.92 1680.34,1204.92 1680.92,1204.92 1681.51,1204.92 1682.1,1204.92 1682.68,1204.92 1683.27,1204.92 1683.86,1204.92 1684.44,1204.92 1685.03,1204.92 1685.62,1204.92 1686.2,1204.92 1686.79,1204.92 1687.37,1204.92 1687.96,1204.92 1688.55,1204.92 1689.13,1204.92 1689.72,1204.92 1690.31,1204.92 1690.89,1204.92 1691.48,1204.92 1692.07,1204.92 1692.65,1204.92 1693.24,1204.92 1693.83,1204.92 1694.41,1204.92 1695,1204.92 1695.58,1204.92 1696.17,1204.92 1696.76,1204.92 1697.34,1204.92 1697.93,1204.92 1698.52,1204.92 1699.1,1204.92 1699.69,1204.92 1700.28,1204.92 1700.86,1204.92 1701.45,1204.92 1702.04,1204.92 1702.62,1204.92 1703.21,1204.92 1703.79,1204.92 1704.38,1204.92 1704.97,1204.92 1705.55,1204.92 1706.14,1204.92 1706.73,1204.92 1707.31,1204.92 1707.9,1204.92 1708.49,1204.92 1709.07,1204.92 1709.66,1204.92 1710.24,1204.92 1710.83,1204.92 1711.42,1204.92 1712,1204.92 1712.59,1204.92 1713.18,1204.92 1713.76,1204.92 1714.35,1204.92 1714.94,1204.92 1715.52,1204.92 1716.11,1204.92 1716.7,1204.92 1717.28,1204.92 1717.87,1204.92 1718.45,1204.92 1719.04,1204.92 1719.63,1204.92 1720.21,1204.92 1720.8,1204.92 1721.39,1204.92 1721.97,1204.92 1722.56,1204.92 1723.15,1204.92 1723.73,1204.92 1724.32,1204.92 1724.91,1204.92 1725.49,1204.92 1726.08,1204.92 1726.66,1204.92 1727.25,1204.92 1727.84,1204.92 1728.42,1204.92 1729.01,1204.92 1729.6,1204.92 1730.18,1204.92 1730.77,1204.92 1731.36,1204.92 1731.94,1204.92 1732.53,1204.92 1733.11,1204.92 1733.7,1204.92 1734.29,1204.92 1734.87,1204.92 1735.46,1204.92 1736.05,1204.92 1736.63,1204.92 1737.22,1204.92 1737.81,1204.92 1738.39,1204.92 1738.98,1204.92 1739.57,1204.92 1740.15,1204.92 1740.74,1204.92 1741.32,1204.92 1741.91,1204.92 1742.5,1204.92 1743.08,1204.92 1743.67,1204.92 1744.26,1204.92 1744.84,1204.92 1745.43,1204.92 1746.02,1204.92 1746.6,1204.92 1747.19,1204.92 1747.78,1204.92 1748.36,1204.92 1748.95,1204.92 1749.53,1204.92 1750.12,1204.92 1750.71,1204.92 1751.29,1204.92 1751.88,1204.92 1752.47,1204.92 1753.05,1204.92 1753.64,1204.92 1754.23,1204.92 1754.81,1204.92 1755.4,1204.92 1755.99,1204.92 1756.57,1204.92 1757.16,1204.92 1757.74,1204.92 1758.33,1204.92 1758.92,1204.92 1759.5,1204.92 1760.09,1204.92 1760.68,1204.92 1761.26,1204.92 1761.85,1204.92 1762.44,1204.92 1763.02,1204.92 1763.61,1204.92 1764.19,1204.92 1764.78,1204.92 1765.37,1204.92 1765.95,1204.92 1766.54,1204.92 1767.13,1204.92 1767.71,1204.92 1768.3,1204.92 1768.89,1204.92 1769.47,1204.92 1770.06,1204.92 1770.65,1204.92 1771.23,1204.92 1771.82,1204.92 1772.4,1204.92 1772.99,1204.92 1773.58,1204.92 1774.16,1204.92 1774.75,1204.92 1775.34,1204.92 1775.92,1204.92 1776.51,1204.92 1777.1,1204.92 1777.68,1204.92 1778.27,1204.92 1778.86,1204.92 1779.44,1204.92 1780.03,1204.92 1780.61,1204.92 1781.2,1204.92 1781.79,1204.92 1782.37,1204.92 1782.96,1204.92 1783.55,1204.92 1784.13,1204.92 1784.72,1204.92 1785.31,1204.92 1785.89,1204.92 1786.48,1204.92 1787.06,1204.92 1787.65,1204.92 1788.24,1204.92 1788.82,1204.92 1789.41,1204.92 1790,1204.92 1790.58,1204.92 1791.17,1204.92 1791.76,1204.92 1792.34,1204.92 1792.93,1204.92 1793.52,1204.92 1794.1,1204.92 1794.69,1204.92 1795.27,1204.92 1795.86,1204.92 1796.45,1204.92 1797.03,1204.92 1797.62,1204.92 1798.21,1204.92 1798.79,1204.92 1799.38,1204.92 1799.97,1204.92 1800.55,1204.92 1801.14,1204.92 1801.73,1204.92 1802.31,1204.92 1802.9,1204.92 1803.48,1204.92 1804.07,1204.92 1804.66,1204.92 1805.24,1204.92 1805.83,1204.92 1806.42,1204.92 1807,1204.92 1807.59,1204.92 1808.18,1204.92 1808.76,1204.92 1809.35,1204.92 1809.94,1204.92 1810.52,1204.92 1811.11,1204.92 1811.69,1204.92 1812.28,1204.92 1812.87,1204.92 1813.45,1204.92 1814.04,1204.92 1814.63,1204.92 1815.21,1204.92 1815.8,1204.92 1816.39,1204.92 1816.97,1204.92 1817.56,1204.92 1818.14,1204.92 1818.73,1204.92 1819.32,1204.92 1819.9,1204.92 1820.49,1204.92 1821.08,1204.92 1821.66,1204.92 1822.25,1204.92 1822.84,1204.92 1823.42,1204.92 1824.01,1204.92 1824.6,1204.92 1825.18,1204.92 1825.77,1204.92 1826.35,1204.92 1826.94,1204.92 1827.53,1204.92 1828.11,1204.92 1828.7,1204.92 1829.29,1204.92 1829.87,1204.92 1830.46,1204.92 1831.05,1204.92 1831.63,1204.92 1832.22,1204.92 1832.81,1204.92 1833.39,1204.92 1833.98,1204.92 1834.56,1204.92 1835.15,1204.92 1835.74,1204.92 1836.32,1204.92 1836.91,1204.92 1837.5,1204.92 1838.08,1204.92 1838.67,1204.92 1839.26,1204.92 1839.84,1204.92 1840.43,1204.92 1841.01,1204.92 1841.6,1204.92 1842.19,1204.92 1842.77,1204.92 1843.36,1204.92 1843.95,1204.92 1844.53,1204.92 1845.12,1204.92 1845.71,1204.92 1846.29,1204.92 1846.88,1204.92 1847.47,1204.92 1848.05,1204.92 1848.64,1204.92 1849.22,1204.92 1849.81,1204.92 1850.4,1204.92 1850.98,1204.92 1851.57,1204.92 1852.16,1204.92 1852.74,1204.92 1853.33,1204.92 1853.92,1204.92 1854.5,1204.92 1855.09,1204.92 1855.68,1204.92 1856.26,1204.92 1856.85,1204.92 1857.43,1204.92 1858.02,1204.92 1858.61,1204.92 1859.19,1204.92 1859.78,1204.92 1860.37,1204.92 1860.95,1204.92 1861.54,1204.92 1862.13,1204.92 1862.71,1204.92 1863.3,1204.92 1863.88,1204.92 1864.47,1204.92 1865.06,1204.92 1865.64,1204.92 1866.23,1204.92 1866.82,1204.92 1867.4,1204.92 1867.99,1204.92 1868.58,1204.92 1869.16,1204.92 1869.75,1204.92 1870.34,1204.92 1870.92,1204.92 1871.51,1204.92 1872.09,1204.92 1872.68,1204.92 1873.27,1204.92 1873.85,1204.92 1874.44,1204.92 1875.03,1204.92 1875.61,1204.92 1876.2,1204.92 1876.79,1204.92 1877.37,1204.92 1877.96,1204.92 1878.55,1204.92 1879.13,1204.92 1879.72,1204.92 1880.3,1204.92 1880.89,1204.92 1881.48,1204.92 1882.06,1204.92 1882.65,1204.92 1883.24,1204.92 1883.82,1204.92 1884.41,1204.92 1885,1204.92 1885.58,1204.92 1886.17,1204.92 1886.76,1204.92 1887.34,1204.92 1887.93,1204.92 1888.51,1204.92 1889.1,1204.92 1889.69,1204.92 1890.27,1204.92 1890.86,1204.92 1891.45,1204.92 1892.03,1204.92 1892.62,1204.92 1893.21,1204.92 1893.79,1204.92 1894.38,1204.92 1894.96,1204.92 1895.55,1204.92 1896.14,1204.92 1896.72,1204.92 1897.31,1204.92 1897.9,1204.92 1898.48,1204.92 1899.07,1204.92 1899.66,1204.92 1900.24,1204.92 1900.83,1204.92 1901.42,1204.92 1902,1204.92 1902.59,1204.92 1903.17,1204.92 1903.76,1204.92 1904.35,1204.92 1904.93,1204.92 1905.52,1204.92 1906.11,1204.92 1906.69,1204.92 1907.28,1204.92 1907.87,1204.92 1908.45,1204.92 1909.04,1204.92 1909.63,1204.92 1910.21,1204.92 1910.8,1204.92 1911.38,1204.92 1911.97,1204.92 1912.56,1204.92 1913.14,1204.92 1913.73,1204.92 1914.32,1204.92 1914.9,1204.92 1915.49,1204.92 1916.08,1204.92 1916.66,1204.92 1917.25,1204.92 1917.83,1204.92 1918.42,1204.92 1919.01,1204.92 1919.59,1204.92 1920.18,1204.92 1920.77,1204.92 1921.35,1204.92 1921.94,1204.92 1922.53,1204.92 1923.11,1204.92 1923.7,1204.92 1924.29,1204.92 1924.87,1204.92 1925.46,1204.92 1926.04,1204.92 1926.63,1204.92 1927.22,1204.92 1927.8,1204.92 1928.39,1204.92 1928.98,1204.92 1929.56,1204.92 1930.15,1204.92 1930.74,1204.92 1931.32,1204.92 1931.91,1204.92 1932.5,1204.92 1933.08,1204.92 1933.67,1204.92 1934.25,1204.92 1934.84,1204.92 1935.43,1204.92 1936.01,1204.92 1936.6,1204.92 1937.19,1204.92 1937.77,1204.92 1938.36,1204.92 1938.95,1204.92 1939.53,1204.92 1940.12,1204.92 1940.71,1204.92 1941.29,1204.92 1941.88,1204.92 1942.46,1204.92 1943.05,1204.92 1943.64,1204.92 1944.22,1204.92 1944.81,1204.92 1945.4,1204.92 1945.98,1204.92 1946.57,1204.92 1947.16,1204.92 1947.74,1204.92 1948.33,1204.92 1948.91,1204.92 1949.5,1204.92 1950.09,1204.92 1950.67,1204.92 1951.26,1204.92 1951.85,1204.92 1952.43,1204.92 1953.02,1204.92 1953.61,1204.92 1954.19,1204.92 1954.78,1204.92 1955.37,1204.92 1955.95,1204.92 1956.54,1204.92 1957.12,1204.92 1957.71,1204.92 1958.3,1204.92 1958.88,1204.92 1959.47,1204.92 1960.06,1204.92 1960.64,1204.92 1961.23,1204.92 1961.82,1204.92 1962.4,1204.92 1962.99,1204.92 1963.58,1204.92 1964.16,1204.92 1964.75,1204.92 1965.33,1204.92 1965.92,1204.92 1966.51,1204.92 1967.09,1204.92 1967.68,1204.92 1968.27,1204.92 1968.85,1204.92 1969.44,1204.92 1970.03,1204.92 1970.61,1204.92 1971.2,1204.92 1971.78,1204.92 1972.37,1204.92 1972.96,1204.92 1973.54,1204.92 1974.13,1204.92 1974.72,1204.92 1975.3,1204.92 1975.89,1204.92 1976.48,1204.92 1977.06,1204.92 1977.65,1204.92 1978.24,1204.92 1978.82,1204.92 1979.41,1204.92 1979.99,1204.92 1980.58,1204.92 1981.17,1204.92 1981.75,1204.92 1982.34,1204.92 1982.93,1204.92 1983.51,1204.92 1984.1,1204.92 1984.69,1204.92 1985.27,1204.92 1985.86,1204.92 1986.45,1204.92 1987.03,1204.92 1987.62,1204.92 1988.2,1204.92 1988.79,1204.92 1989.38,1204.92 1989.96,1204.92 1990.55,1204.92 1991.14,1204.92 1991.72,1204.92 1992.31,1204.92 1992.9,1204.92 1993.48,1204.92 1994.07,1204.92 1994.65,1204.92 1995.24,1204.92 1995.83,1204.92 1996.41,1204.92 1997,1204.92 1997.59,1204.92 1998.17,1204.92 1998.76,1204.92 1999.35,1204.92 1999.93,1204.92 2000.52,1204.92 2001.11,1204.92 2001.69,1204.92 2002.28,1204.92 2002.86,1204.92 2003.45,1204.92 2004.04,1204.92 2004.62,1204.92 2005.21,1204.92 2005.8,1204.92 2006.38,1204.92 2006.97,1204.92 2007.56,1204.92 2008.14,1204.92 2008.73,1204.92 2009.32,1204.92 2009.9,1204.92 2010.49,1204.92 2011.07,1204.92 2011.66,1204.92 2012.25,1204.92 2012.83,1204.92 2013.42,1204.92 2014.01,1204.92 2014.59,1204.92 2015.18,1204.92 2015.77,1204.92 2016.35,1204.92 2016.94,1204.92 2017.53,1204.92 2018.11,1204.92 2018.7,1204.92 2019.28,1204.92 2019.87,1204.92 2020.46,1204.92 2021.04,1204.92 2021.63,1204.92 2022.22,1204.92 2022.8,1204.92 2023.39,1204.92 2023.98,1204.92 2024.56,1204.92 2025.15,1204.92 2025.73,1204.92 2026.32,1204.92 2026.91,1204.92 2027.49,1204.92 2028.08,1204.92 2028.67,1204.92 2029.25,1204.92 2029.84,1204.92 2030.43,1204.92 2031.01,1204.92 2031.6,1204.92 2032.19,1204.92 2032.77,1204.92 2033.36,1204.92 2033.94,1204.92 2034.53,1204.92 2035.12,1204.92 2035.7,1204.92 2036.29,1204.92 2036.88,1204.92 2037.46,1204.92 2038.05,1204.92 2038.64,1204.92 2039.22,1204.92 2039.81,1204.92 2040.4,1204.92 2040.98,1204.92 2041.57,1204.92 2042.15,1204.92 2042.74,1204.92 2043.33,1204.92 2043.91,1204.92 2044.5,1204.92 2045.09,1204.92 2045.67,1204.92 2046.26,1204.92 2046.85,1204.92 2047.43,1204.92 2048.02,1204.92 2048.6,1204.92 2049.19,1204.92 2049.78,1204.92 2050.36,1204.92 2050.95,1204.92 2051.54,1204.92 2052.12,1204.92 2052.71,1204.92 2053.3,1204.92 2053.88,1204.92 2054.47,1204.92 2055.06,1204.92 2055.64,1204.92 2056.23,1204.92 2056.81,1204.92 2057.4,1204.92 2057.99,1204.92 2058.57,1204.92 2059.16,1204.92 2059.75,1204.92 2060.33,1204.92 2060.92,1204.92 2061.51,1204.92 2062.09,1204.92 2062.68,1204.92 2063.27,1204.92 2063.85,1204.92 2064.44,1204.92 2065.02,1204.92 2065.61,1204.92 2066.2,1204.92 2066.78,1204.92 2067.37,1204.92 2067.96,1204.92 2068.54,1204.92 2069.13,1204.92 2069.72,1204.92 2070.3,1204.92 2070.89,1204.92 2071.48,1204.92 2072.06,1204.92 2072.65,1204.92 2073.23,1204.92 2073.82,1204.92 2074.41,1204.92 2074.99,1204.92 2075.58,1204.92 2076.17,1204.92 2076.75,1204.92 2077.34,1204.92 2077.93,1204.92 2078.51,1204.92 2079.1,1204.92 2079.68,1204.92 2080.27,1204.92 2080.86,1204.92 2081.44,1204.92 2082.03,1204.92 2082.62,1204.92 2083.2,1204.92 2083.79,1204.92 2084.38,1204.92 2084.96,1204.92 2085.55,1204.92 2086.14,1204.92 2086.72,1204.92 2087.31,1204.92 2087.89,1204.92 2088.48,1204.92 2089.07,1204.92 2089.65,1204.92 2090.24,1204.92 2090.83,1204.92 2091.41,1204.92 2092,1204.92 2092.59,1204.92 2093.17,1204.92 2093.76,1204.92 2094.35,1204.92 2094.93,1204.92 2095.52,1204.92 2096.1,1204.92 2096.69,1204.92 2097.28,1204.92 2097.86,1204.92 2098.45,1204.92 2099.04,1204.92 2099.62,1204.92 2100.21,1204.92 2100.8,1204.92 2101.38,1204.92 2101.97,1204.92 2102.55,1204.92 2103.14,1204.92 2103.73,1204.92 2104.31,1204.92 2104.9,1204.92 2105.49,1204.92 2106.07,1204.92 2106.66,1204.92 2107.25,1204.92 2107.83,1204.92 2108.42,1204.92 2109.01,1204.92 2109.59,1204.92 2110.18,1204.92 2110.76,1204.92 2111.35,1204.92 2111.94,1204.92 2112.52,1204.92 2113.11,1204.92 2113.7,1204.92 2114.28,1204.92 2114.87,1204.92 2115.46,1204.92 2116.04,1204.92 2116.63,1204.92 2117.22,1204.92 2117.8,1204.92 2118.39,1204.92 2118.97,1204.92 2119.56,1204.92 2120.15,1204.92 2120.73,1204.92 2121.32,1204.92 2121.91,1204.92 2122.49,1204.92 2123.08,1204.92 2123.67,1204.92 2124.25,1204.92 2124.84,1204.92 2125.42,1204.92 2126.01,1204.92 2126.6,1204.92 2127.18,1204.92 2127.77,1204.92 2128.36,1204.92 2128.94,1204.92 2129.53,1204.92 2130.12,1204.92 2130.7,1204.92 2131.29,1204.92 2131.88,1204.92 2132.46,1204.92 2133.05,1204.92 2133.63,1204.92 2134.22,1204.92 2134.81,1204.92 2135.39,1204.92 2135.98,1204.92 2136.57,1204.92 2137.15,1204.92 2137.74,1204.92 2138.33,1204.92 2138.91,1204.92 2139.5,1204.92 2140.09,1204.92 2140.67,1204.92 2141.26,1204.92 2141.84,1204.92 2142.43,1204.92 2143.02,1204.92 2143.6,1204.92 2144.19,1204.92 2144.78,1204.92 2145.36,1204.92 2145.95,1204.92 2146.54,1204.92 2147.12,1204.92 2147.71,1204.92 2148.3,1204.92 2148.88,1204.92 2149.47,1204.92 2150.05,1204.92 2150.64,1204.92 2151.23,1204.92 2151.81,1204.92 2152.4,1204.92 2152.99,1204.92 2153.57,1204.92 2154.16,1204.92 2154.75,1204.92 2155.33,1204.92 2155.92,1204.92 2156.5,1204.92 2157.09,1204.92 2157.68,1204.92 2158.26,1204.92 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1204.69 L986.612 1204.69 L987.198 1204.69 L987.785 1204.69 L988.371 1204.69 L988.957 1204.69 L989.544 1204.69 L990.13 1204.69 L990.717 1204.69 L991.303 1204.69 L991.889 1204.69 L992.476 1204.69 L993.062 1204.69 L993.649 1204.69 L994.235 1204.69 L994.822 1204.69 L995.408 1204.69 L995.994 1204.69 L996.581 1204.69 L997.167 1204.69 L997.754 1204.69 L998.34 1204.69 L998.926 1204.69 L999.513 1204.69 L1000.1 1204.69 L1000.69 1204.69 L1001.27 1204.69 L1001.86 1204.69 L1002.44 1204.69 L1003.03 1204.69 L1003.62 1204.69 L1004.2 1204.69 L1004.79 1204.69 L1005.38 1204.69 L1005.96 1204.69 L1006.55 1204.69 L1007.14 1204.69 L1007.72 1204.69 L1008.31 1204.69 L1008.9 1204.69 L1009.48 1204.69 L1010.07 1204.69 L1010.65 1204.69 L1011.24 1204.69 L1011.83 1204.69 L1012.41 1204.69 L1013 1204.69 L1013.59 1204.69 L1014.17 1204.69 L1014.76 1204.69 L1015.35 1204.69 L1015.93 1204.69 L1016.52 1204.69 L1017.11 1204.69 L1017.69 1204.69 L1018.28 1204.69 L1018.86 1204.69 L1019.45 1204.69 L1020.04 1204.69 L1020.62 1204.69 L1021.21 1204.69 L1021.8 1204.69 L1022.38 1204.69 L1022.97 1204.69 L1023.56 1204.69 L1024.14 1204.69 L1024.73 1204.69 L1025.32 1204.69 L1025.9 1204.69 L1026.49 1204.69 L1027.07 1204.69 L1027.66 1204.69 L1028.25 1204.69 L1028.83 1204.69 L1029.42 1204.69 L1030.01 1204.69 L1030.59 1204.69 L1031.18 1204.69 L1031.77 1204.69 L1032.35 1204.69 L1032.94 1204.69 L1033.52 1204.69 L1034.11 1204.69 L1034.7 1204.69 L1035.28 1204.69 L1035.87 1204.69 L1036.46 1204.69 L1037.04 1204.69 L1037.63 1204.69 L1038.22 1204.69 L1038.8 1204.69 L1039.39 1204.69 L1039.98 1204.69 L1040.56 1204.69 L1041.15 1204.69 L1041.73 1204.69 L1042.32 1204.69 L1042.91 1204.69 L1043.49 1204.69 L1044.08 1204.69 L1044.67 1204.69 L1045.25 1204.69 L1045.84 1204.69 L1046.43 1204.69 L1047.01 1204.69 L1047.6 1204.69 L1048.19 1204.69 L1048.77 1204.69 L1049.36 1204.69 L1049.94 1204.69 L1050.53 1204.69 L1051.12 1204.69 L1051.7 1204.69 L1052.29 1204.69 L1052.88 1204.69 L1053.46 1204.69 L1054.05 1204.69 L1054.64 1204.69 L1055.22 1204.69 L1055.81 1204.69 L1056.39 1204.69 L1056.98 1204.69 L1057.57 1204.69 L1058.15 1204.69 L1058.74 1204.69 L1059.33 1204.69 L1059.91 1204.69 L1060.5 1204.69 L1061.09 1204.69 L1061.67 1204.69 L1062.26 1204.69 L1062.85 1204.69 L1063.43 1204.69 L1064.02 1204.69 L1064.6 1204.69 L1065.19 1204.69 L1065.78 1204.69 L1066.36 1204.69 L1066.95 1204.69 L1067.54 1204.69 L1068.12 1204.69 L1068.71 1204.69 L1069.3 1204.69 L1069.88 1204.69 L1070.47 1204.69 L1071.06 1204.69 L1071.64 1204.69 L1072.23 1204.69 L1072.81 1204.69 L1073.4 1204.69 L1073.99 1204.69 L1074.57 1204.69 L1075.16 1204.69 L1075.75 1204.69 L1076.33 1204.69 L1076.92 1204.69 L1077.51 1204.69 L1078.09 1204.69 L1078.68 1204.69 L1079.26 1204.69 L1079.85 1204.69 L1080.44 1204.69 L1081.02 1204.69 L1081.61 1204.69 L1082.2 1204.69 L1082.78 1204.69 L1083.37 1204.69 L1083.96 1204.69 L1084.54 1204.69 L1085.13 1204.69 L1085.72 1204.69 L1086.3 1204.69 L1086.89 1204.69 L1087.47 1204.69 L1088.06 1204.69 L1088.65 1204.69 L1089.23 1204.69 L1089.82 1204.69 L1090.41 1204.69 L1090.99 1204.69 L1091.58 1204.69 L1092.17 1204.69 L1092.75 1204.69 L1093.34 1204.69 L1093.93 1204.69 L1094.51 1204.69 L1095.1 1204.69 L1095.68 1204.69 L1096.27 1204.69 L1096.86 1204.69 L1097.44 1204.69 L1098.03 1204.69 L1098.62 1204.69 L1099.2 1204.69 L1099.79 1204.69 L1100.38 1204.69 L1100.96 1204.69 L1101.55 1204.69 L1102.14 1204.69 L1102.72 1204.69 L1103.31 1204.69 L1103.89 1204.69 L1104.48 1204.69 L1105.07 1204.69 L1105.65 1204.69 L1106.24 1204.69 L1106.83 1204.69 L1107.41 1204.69 L1108 1204.69 L1108.59 1204.69 L1109.17 1204.69 L1109.76 1204.69 L1110.34 1204.69 L1110.93 1204.69 L1111.52 1204.69 L1112.1 1204.69 L1112.69 1204.69 L1113.28 1204.69 L1113.86 1204.69 L1114.45 1204.69 L1115.04 1204.69 L1115.62 1204.69 L1116.21 1204.69 L1116.8 1204.69 L1117.38 1204.69 L1117.97 1204.69 L1118.55 1204.69 L1119.14 1204.69 L1119.73 1204.69 L1120.31 1204.69 L1120.9 1204.69 L1121.49 1204.69 L1122.07 1204.69 L1122.66 1204.69 L1123.25 1204.69 L1123.83 1204.69 L1124.42 1204.69 L1125.01 1204.69 L1125.59 1204.69 L1126.18 1204.69 L1126.76 1204.69 L1127.35 1204.69 L1127.94 1204.69 L1128.52 1204.69 L1129.11 1204.69 L1129.7 1204.69 L1130.28 1204.69 L1130.87 1204.69 L1131.46 1204.69 L1132.04 1204.69 L1132.63 1204.69 L1133.21 1204.69 L1133.8 1204.69 L1134.39 1204.69 L1134.97 1204.69 L1135.56 1204.69 L1136.15 1204.69 L1136.73 1204.69 L1137.32 1204.69 L1137.91 1204.69 L1138.49 1204.69 L1139.08 1204.69 L1139.67 1204.69 L1140.25 1204.69 L1140.84 1204.69 L1141.42 1204.69 L1142.01 1204.69 L1142.6 1204.69 L1143.18 1204.69 L1143.77 1204.69 L1144.36 1204.69 L1144.94 1204.69 L1145.53 1204.69 L1146.12 1204.69 L1146.7 1204.69 L1147.29 1204.69 L1147.88 1204.69 L1148.46 1204.69 L1149.05 1204.69 L1149.63 1204.69 L1150.22 1204.69 L1150.81 1204.69 L1151.39 1204.69 L1151.98 1204.69 L1152.57 1204.69 L1153.15 1204.69 L1153.74 1204.69 L1154.33 1204.69 L1154.91 1204.69 L1155.5 1204.69 L1156.09 1204.69 L1156.67 1204.69 L1157.26 1204.69 L1157.84 1204.69 L1158.43 1204.69 L1159.02 1204.69 L1159.6 1204.69 L1160.19 1204.69 L1160.78 1204.69 L1161.36 1204.69 L1161.95 1204.69 L1162.54 1204.69 L1163.12 1204.69 L1163.71 1204.69 L1164.29 1204.69 L1164.88 1204.69 L1165.47 1204.69 L1166.05 1204.69 L1166.64 1204.69 L1167.23 1204.69 L1167.81 1204.69 L1168.4 1204.69 L1168.99 1204.69 L1169.57 1204.69 L1170.16 1204.69 L1170.75 1204.69 L1171.33 1204.69 L1171.92 1204.69 L1172.5 1204.69 L1173.09 1204.69 L1173.68 1204.69 L1174.26 1204.69 L1174.85 1204.69 L1175.44 1204.69 L1176.02 1204.69 L1176.61 1204.69 L1177.2 1204.69 L1177.78 1204.69 L1178.37 1204.69 L1178.96 1204.69 L1179.54 1204.69 L1180.13 1204.69 L1180.71 1204.69 L1181.3 1204.69 L1181.89 1204.69 L1182.47 1204.69 L1183.06 1204.69 L1183.65 1204.69 L1184.23 1204.69 L1184.82 1204.69 L1185.41 1204.69 L1185.99 1204.69 L1186.58 1204.69 L1187.16 1204.69 L1187.75 1204.69 L1188.34 1204.69 L1188.92 1204.69 L1189.51 1204.69 L1190.1 1204.69 L1190.68 1204.69 L1191.27 1204.69 L1191.86 1204.69 L1192.44 1204.69 L1193.03 1204.69 L1193.62 1204.69 L1194.2 1204.69 L1194.79 1204.69 L1195.37 1204.69 L1195.96 1204.69 L1196.55 1204.69 L1197.13 1204.69 L1197.72 1204.69 L1198.31 1204.69 L1198.89 1204.69 L1199.48 1204.69 L1200.07 1204.69 L1200.65 1204.69 L1201.24 1204.69 L1201.83 1204.69 L1202.41 1204.69 L1203 1204.69 L1203.58 1204.69 L1204.17 1204.69 L1204.76 1204.69 L1205.34 1204.69 L1205.93 1204.69 L1206.52 1204.69 L1207.1 1204.69 L1207.69 1204.69 L1208.28 1204.69 L1208.86 1204.69 L1209.45 1204.69 L1210.03 1204.69 L1210.62 1204.69 L1211.21 1204.69 L1211.79 1204.69 L1212.38 1204.69 L1212.97 1204.69 L1213.55 1204.69 L1214.14 1204.69 L1214.73 1204.69 L1215.31 1204.69 L1215.9 1204.69 L1216.49 1204.69 L1217.07 1204.69 L1217.66 1204.69 L1218.24 1204.69 L1218.83 1204.69 L1219.42 1204.69 L1220 1204.69 L1220.59 1204.69 L1221.18 1204.69 L1221.76 1204.69 L1222.35 1204.69 L1222.94 1204.69 L1223.52 1204.69 L1224.11 1204.69 L1224.7 1204.69 L1225.28 1204.69 L1225.87 1204.69 L1226.45 1204.69 L1227.04 1204.69 L1227.63 1204.69 L1228.21 1204.69 L1228.8 1204.69 L1229.39 1204.69 L1229.97 1204.69 L1230.56 1204.69 L1231.15 1204.69 L1231.73 1204.69 L1232.32 1204.69 L1232.91 1204.69 L1233.49 1204.69 L1234.08 1204.69 L1234.66 1204.69 L1235.25 1204.69 L1235.84 1204.69 L1236.42 1204.69 L1237.01 1204.69 L1237.6 1204.69 L1238.18 1204.69 L1238.77 1204.69 L1239.36 1204.69 L1239.94 1204.69 L1240.53 1204.69 L1241.11 1204.69 L1241.7 1204.69 L1242.29 1204.69 L1242.87 1204.69 L1243.46 1204.69 L1244.05 1204.69 L1244.63 1204.69 L1245.22 1204.69 L1245.81 1204.69 L1246.39 1204.69 L1246.98 1204.69 L1247.57 1204.69 L1248.15 1204.69 L1248.74 1204.69 L1249.32 1204.69 L1249.91 1204.69 L1250.5 1204.69 L1251.08 1204.69 L1251.67 1204.69 L1252.26 1204.69 L1252.84 1204.69 L1253.43 1204.69 L1254.02 1204.69 L1254.6 1204.69 L1255.19 1204.69 L1255.78 1204.69 L1256.36 1204.69 L1256.95 1204.69 L1257.53 1204.69 L1258.12 1204.69 L1258.71 1204.69 L1259.29 1204.69 L1259.88 1204.69 L1260.47 1204.69 L1261.05 1204.69 L1261.64 1204.69 L1262.23 1204.69 L1262.81 1204.69 L1263.4 1204.69 L1263.98 1204.69 L1264.57 1204.69 L1265.16 1204.69 L1265.74 1204.69 L1266.33 1204.69 L1266.92 1204.69 L1267.5 1204.69 L1268.09 1204.69 L1268.68 1204.69 L1269.26 1204.69 L1269.85 1204.69 L1270.44 1204.69 L1271.02 1204.69 L1271.61 1204.69 L1272.19 1204.69 L1272.78 1204.69 L1273.37 1204.69 L1273.95 1204.69 L1274.54 1204.69 L1275.13 1204.69 L1275.71 1204.69 L1276.3 1204.69 L1276.89 1204.69 L1277.47 1204.69 L1278.06 1204.69 L1278.65 1204.69 L1279.23 1204.69 L1279.82 1204.69 L1280.4 1204.69 L1280.99 1204.69 L1281.58 1204.69 L1282.16 1204.69 L1282.75 1204.69 L1283.34 1204.69 L1283.92 1204.69 L1284.51 1204.69 L1285.1 1204.69 L1285.68 1204.69 L1286.27 1204.69 L1286.86 1204.69 L1287.44 1204.69 L1288.03 1204.69 L1288.61 1204.69 L1289.2 1204.69 L1289.79 1204.69 L1290.37 1204.69 L1290.96 1204.69 L1291.55 1204.69 L1292.13 1204.69 L1292.72 1204.69 L1293.31 1204.69 L1293.89 1204.69 L1294.48 1204.69 L1295.06 1204.69 L1295.65 1204.69 L1296.24 1204.69 L1296.82 1204.69 L1297.41 1204.69 L1298 1204.69 L1298.58 1204.69 L1299.17 1204.69 L1299.76 1204.69 L1300.34 1204.69 L1300.93 1204.69 L1301.52 1204.69 L1302.1 1204.69 L1302.69 1204.69 L1303.27 1204.69 L1303.86 1204.69 L1304.45 1204.69 L1305.03 1204.69 L1305.62 1204.69 L1306.21 1204.69 L1306.79 1204.69 L1307.38 1204.69 L1307.97 1204.69 L1308.55 1204.69 L1309.14 1204.69 L1309.73 1204.69 L1310.31 1204.69 L1310.9 1204.69 L1311.48 1204.69 L1312.07 1204.69 L1312.66 1204.69 L1313.24 1204.69 L1313.83 1204.69 L1314.42 1204.69 L1315 1204.69 L1315.59 1204.69 L1316.18 1204.69 L1316.76 1204.69 L1317.35 1204.69 L1317.93 1204.69 L1318.52 1204.69 L1319.11 1204.69 L1319.69 1204.69 L1320.28 1204.69 L1320.87 1204.69 L1321.45 1204.69 L1322.04 1204.69 L1322.63 1204.69 L1323.21 1204.69 L1323.8 1204.69 L1324.39 1204.69 L1324.97 1204.69 L1325.56 1204.69 L1326.14 1204.69 L1326.73 1204.69 L1327.32 1204.69 L1327.9 1204.69 L1328.49 1204.69 L1329.08 1204.69 L1329.66 1204.69 L1330.25 1204.69 L1330.84 1204.69 L1331.42 1204.69 L1332.01 1204.69 L1332.6 1204.69 L1333.18 1204.69 L1333.77 1204.69 L1334.35 1204.69 L1334.94 1204.69 L1335.53 1204.69 L1336.11 1204.69 L1336.7 1204.69 L1337.29 1204.69 L1337.87 1204.69 L1338.46 1204.69 L1339.05 1204.69 L1339.63 1204.69 L1340.22 1204.69 L1340.8 1204.69 L1341.39 1204.69 L1341.98 1204.69 L1342.56 1204.69 L1343.15 1204.69 L1343.74 1204.69 L1344.32 1204.69 L1344.91 1204.69 L1345.5 1204.69 L1346.08 1204.69 L1346.67 1204.69 L1347.26 1204.69 L1347.84 1204.69 L1348.43 1204.69 L1349.01 1204.69 L1349.6 1204.69 L1350.19 1204.69 L1350.77 1204.69 L1351.36 1204.69 L1351.95 1204.69 L1352.53 1204.69 L1353.12 1204.69 L1353.71 1204.69 L1354.29 1204.69 L1354.88 1204.69 L1355.47 1204.69 L1356.05 1204.69 L1356.64 1204.69 L1357.22 1204.69 L1357.81 1204.69 L1358.4 1204.69 L1358.98 1204.69 L1359.57 1204.69 L1360.16 1204.69 L1360.74 1204.69 L1361.33 1204.69 L1361.92 1204.69 L1362.5 1204.69 L1363.09 1204.69 L1363.68 1204.69 L1364.26 1204.69 L1364.85 1204.69 L1365.43 1204.69 L1366.02 1204.69 L1366.61 1204.69 L1367.19 1204.69 L1367.78 1204.69 L1368.37 1204.69 L1368.95 1204.69 L1369.54 1204.69 L1370.13 1204.69 L1370.71 1204.69 L1371.3 1204.69 L1371.88 1204.69 L1372.47 1204.69 L1373.06 1204.69 L1373.64 1204.69 L1374.23 1204.69 L1374.82 1204.69 L1375.4 1204.69 L1375.99 1204.69 L1376.58 1204.69 L1377.16 1204.69 L1377.75 1204.69 L1378.34 1204.69 L1378.92 1204.69 L1379.51 1204.69 L1380.09 1204.69 L1380.68 1204.69 L1381.27 1204.69 L1381.85 1204.69 L1382.44 1204.69 L1383.03 1204.69 L1383.61 1204.69 L1384.2 1204.69 L1384.79 1204.69 L1385.37 1204.69 L1385.96 1204.69 L1386.55 1204.69 L1387.13 1204.69 L1387.72 1204.69 L1388.3 1204.69 L1388.89 1204.69 L1389.48 1204.69 L1390.06 1204.69 L1390.65 1204.69 L1391.24 1204.69 L1391.82 1204.69 L1392.41 1204.69 L1393 1204.69 L1393.58 1204.69 L1394.17 1204.69 L1394.75 1204.69 L1395.34 1204.69 L1395.93 1204.69 L1396.51 1204.69 L1397.1 1204.69 L1397.69 1204.69 L1398.27 1204.69 L1398.86 1204.69 L1399.45 1204.69 L1400.03 1204.69 L1400.62 1204.69 L1401.21 1204.69 L1401.79 1204.69 L1402.38 1204.69 L1402.96 1204.69 L1403.55 1204.69 L1404.14 1204.69 L1404.72 1204.69 L1405.31 1204.69 L1405.9 1204.69 L1406.48 1204.69 L1407.07 1204.69 L1407.66 1204.69 L1408.24 1204.69 L1408.83 1204.69 L1409.42 1204.69 L1410 1204.69 L1410.59 1204.69 L1411.17 1204.69 L1411.76 1204.69 L1412.35 1204.69 L1412.93 1204.69 L1413.52 1204.69 L1414.11 1204.69 L1414.69 1204.69 L1415.28 1204.69 L1415.87 1204.69 L1416.45 1204.69 L1417.04 1204.69 L1417.63 1204.69 L1418.21 1204.69 L1418.8 1204.69 L1419.38 1204.69 L1419.97 1204.69 L1420.56 1204.69 L1421.14 1204.69 L1421.73 1204.69 L1422.32 1204.69 L1422.9 1204.69 L1423.49 1204.69 L1424.08 1204.69 L1424.66 1204.69 L1425.25 1204.69 L1425.83 1204.69 L1426.42 1204.69 L1427.01 1204.69 L1427.59 1204.69 L1428.18 1204.69 L1428.77 1204.69 L1429.35 1204.69 L1429.94 1204.69 L1430.53 1204.69 L1431.11 1204.69 L1431.7 1204.69 L1432.29 1204.69 L1432.87 1204.69 L1433.46 1204.69 L1434.04 1204.69 L1434.63 1204.69 L1435.22 1204.69 L1435.8 1204.69 L1436.39 1204.69 L1436.98 1204.69 L1437.56 1204.69 L1438.15 1204.69 L1438.74 1204.69 L1439.32 1204.69 L1439.91 1204.69 L1440.5 1204.69 L1441.08 1204.69 L1441.67 1204.69 L1442.25 1204.69 L1442.84 1204.69 L1443.43 1204.69 L1444.01 1204.69 L1444.6 1204.69 L1445.19 1204.69 L1445.77 1204.69 L1446.36 1204.69 L1446.95 1204.69 L1447.53 1204.69 L1448.12 1204.69 L1448.7 1204.69 L1449.29 1204.69 L1449.88 1204.69 L1450.46 1204.69 L1451.05 1204.69 L1451.64 1204.69 L1452.22 1204.69 L1452.81 1204.69 L1453.4 1204.69 L1453.98 1204.69 L1454.57 1204.69 L1455.16 1204.69 L1455.74 1204.69 L1456.33 1204.69 L1456.91 1204.69 L1457.5 1204.69 L1458.09 1204.69 L1458.67 1204.69 L1459.26 1204.69 L1459.85 1204.69 L1460.43 1204.69 L1461.02 1204.69 L1461.61 1204.69 L1462.19 1204.69 L1462.78 1204.69 L1463.37 1204.69 L1463.95 1204.69 L1464.54 1204.69 L1465.12 1204.69 L1465.71 1204.69 L1466.3 1204.69 L1466.88 1204.69 L1467.47 1204.69 L1468.06 1204.69 L1468.64 1204.69 L1469.23 1204.69 L1469.82 1204.69 L1470.4 1204.69 L1470.99 1204.69 L1471.57 1204.69 L1472.16 1204.69 L1472.75 1204.69 L1473.33 1204.69 L1473.92 1204.69 L1474.51 1204.69 L1475.09 1204.69 L1475.68 1204.69 L1476.27 1204.69 L1476.85 1204.69 L1477.44 1204.69 L1478.03 1204.69 L1478.61 1204.69 L1479.2 1204.69 L1479.78 1204.69 L1480.37 1204.69 L1480.96 1204.69 L1481.54 1204.69 L1482.13 1204.69 L1482.72 1204.69 L1483.3 1204.69 L1483.89 1204.69 L1484.48 1204.69 L1485.06 1204.69 L1485.65 1204.69 L1486.24 1204.69 L1486.82 1204.69 L1487.41 1204.69 L1487.99 1204.69 L1488.58 1204.69 L1489.17 1204.69 L1489.75 1204.69 L1490.34 1204.69 L1490.93 1204.69 L1491.51 1204.69 L1492.1 1204.69 L1492.69 1204.69 L1493.27 1204.69 L1493.86 1204.69 L1494.45 1204.69 L1495.03 1204.69 L1495.62 1204.69 L1496.2 1204.69 L1496.79 1204.69 L1497.38 1204.69 L1497.96 1204.69 L1498.55 1204.69 L1499.14 1204.69 L1499.72 1204.69 L1500.31 1204.69 L1500.9 1204.69 L1501.48 1204.69 L1502.07 1204.69 L1502.65 1204.69 L1503.24 1204.69 L1503.83 1204.69 L1504.41 1204.69 L1505 1204.69 L1505.59 1204.69 L1506.17 1204.69 L1506.76 1204.69 L1507.35 1204.69 L1507.93 1204.69 L1508.52 1204.69 L1509.11 1204.69 L1509.69 1204.69 L1510.28 1204.69 L1510.86 1204.69 L1511.45 1204.69 L1512.04 1204.69 L1512.62 1204.69 L1513.21 1204.69 L1513.8 1204.69 L1514.38 1204.69 L1514.97 1204.69 L1515.56 1204.69 L1516.14 1204.69 L1516.73 1204.69 L1517.32 1204.69 L1517.9 1204.69 L1518.49 1204.69 L1519.07 1204.69 L1519.66 1204.69 L1520.25 1204.69 L1520.83 1204.69 L1521.42 1204.69 L1522.01 1204.69 L1522.59 1204.69 L1523.18 1204.69 L1523.77 1204.69 L1524.35 1204.69 L1524.94 1204.69 L1525.52 1204.69 L1526.11 1204.69 L1526.7 1204.69 L1527.28 1204.69 L1527.87 1204.69 L1528.46 1204.69 L1529.04 1204.69 L1529.63 1204.69 L1530.22 1204.69 L1530.8 1204.69 L1531.39 1204.69 L1531.98 1204.69 L1532.56 1204.69 L1533.15 1204.69 L1533.73 1204.69 L1534.32 1204.69 L1534.91 1204.69 L1535.49 1204.69 L1536.08 1204.69 L1536.67 1204.69 L1537.25 1204.69 L1537.84 1204.69 L1538.43 1204.69 L1539.01 1204.69 L1539.6 1204.69 L1540.19 1204.69 L1540.77 1204.69 L1541.36 1204.69 L1541.94 1204.69 L1542.53 1204.69 L1543.12 1204.69 L1543.7 1204.69 L1544.29 1204.69 L1544.88 1204.69 L1545.46 1204.69 L1546.05 1204.69 L1546.64 1204.69 L1547.22 1204.69 L1547.81 1204.69 L1548.4 1204.69 L1548.98 1204.69 L1549.57 1204.69 L1550.15 1204.69 L1550.74 1204.69 L1551.33 1204.69 L1551.91 1204.69 L1552.5 1204.69 L1553.09 1204.69 L1553.67 1204.69 L1554.26 1204.69 L1554.85 1204.69 L1555.43 1204.69 L1556.02 1204.69 L1556.6 1204.69 L1557.19 1204.69 L1557.78 1204.69 L1558.36 1204.69 L1558.95 1204.69 L1559.54 1204.69 L1560.12 1204.69 L1560.71 1204.69 L1561.3 1204.69 L1561.88 1204.69 L1562.47 1204.69 L1563.06 1204.69 L1563.64 1204.69 L1564.23 1204.69 L1564.81 1204.69 L1565.4 1204.69 L1565.99 1204.69 L1566.57 1204.69 L1567.16 1204.69 L1567.75 1204.69 L1568.33 1204.69 L1568.92 1204.69 L1569.51 1204.69 L1570.09 1204.69 L1570.68 1204.69 L1571.27 1204.69 L1571.85 1204.69 L1572.44 1204.69 L1573.02 1204.69 L1573.61 1204.69 L1574.2 1204.69 L1574.78 1204.69 L1575.37 1204.69 L1575.96 1204.69 L1576.54 1204.69 L1577.13 1204.69 L1577.72 1204.69 L1578.3 1204.69 L1578.89 1204.69 L1579.47 1204.69 L1580.06 1204.69 L1580.65 1204.69 L1581.23 1204.69 L1581.82 1204.69 L1582.41 1204.69 L1582.99 1204.69 L1583.58 1204.69 L1584.17 1204.69 L1584.75 1204.69 L1585.34 1204.69 L1585.93 1204.69 L1586.51 1204.69 L1587.1 1204.69 L1587.68 1204.69 L1588.27 1204.69 L1588.86 1204.69 L1589.44 1204.69 L1590.03 1204.69 L1590.62 1204.69 L1591.2 1204.69 L1591.79 1204.69 L1592.38 1204.69 L1592.96 1204.69 L1593.55 1204.69 L1594.14 1204.69 L1594.72 1204.69 L1595.31 1204.69 L1595.89 1204.69 L1596.48 1204.69 L1597.07 1204.69 L1597.65 1204.69 L1598.24 1204.69 L1598.83 1204.69 L1599.41 1204.69 L1600 1204.69 L1600.59 1204.69 L1601.17 1204.69 L1601.76 1204.69 L1602.34 1204.69 L1602.93 1204.69 L1603.52 1204.69 L1604.1 1204.69 L1604.69 1204.69 L1605.28 1204.69 L1605.86 1204.69 L1606.45 1204.69 L1607.04 1204.69 L1607.62 1204.69 L1608.21 1204.69 L1608.8 1204.69 L1609.38 1204.69 L1609.97 1204.69 L1610.55 1204.69 L1611.14 1204.69 L1611.73 1204.69 L1612.31 1204.69 L1612.9 1204.69 L1613.49 1204.69 L1614.07 1204.69 L1614.66 1204.69 L1615.25 1204.69 L1615.83 1204.69 L1616.42 1204.69 L1617.01 1204.69 L1617.59 1204.69 L1618.18 1204.69 L1618.76 1204.69 L1619.35 1204.69 L1619.94 1204.69 L1620.52 1204.69 L1621.11 1204.69 L1621.7 1204.69 L1622.28 1204.69 L1622.87 1204.69 L1623.46 1204.69 L1624.04 1204.69 L1624.63 1204.69 L1625.22 1204.69 L1625.8 1204.69 L1626.39 1204.69 L1626.97 1204.69 L1627.56 1204.69 L1628.15 1204.69 L1628.73 1204.69 L1629.32 1204.69 L1629.91 1204.69 L1630.49 1204.69 L1631.08 1204.69 L1631.67 1204.69 L1632.25 1204.69 L1632.84 1204.69 L1633.42 1204.69 L1634.01 1204.69 L1634.6 1204.69 L1635.18 1204.69 L1635.77 1204.69 L1636.36 1204.69 L1636.94 1204.69 L1637.53 1204.69 L1638.12 1204.69 L1638.7 1204.69 L1639.29 1204.69 L1639.88 1204.69 L1640.46 1204.69 L1641.05 1204.69 L1641.63 1204.69 L1642.22 1204.69 L1642.81 1204.69 L1643.39 1204.69 L1643.98 1204.69 L1644.57 1204.69 L1645.15 1204.69 L1645.74 1204.69 L1646.33 1204.69 L1646.91 1204.69 L1647.5 1204.69 L1648.09 1204.69 L1648.67 1204.69 L1649.26 1204.69 L1649.84 1204.69 L1650.43 1204.69 L1651.02 1204.69 L1651.6 1204.69 L1652.19 1204.69 L1652.78 1204.69 L1653.36 1204.69 L1653.95 1204.69 L1654.54 1204.69 L1655.12 1204.69 L1655.71 1204.69 L1656.29 1204.69 L1656.88 1204.69 L1657.47 1204.69 L1658.05 1204.69 L1658.64 1204.69 L1659.23 1204.69 L1659.81 1204.69 L1660.4 1204.69 L1660.99 1204.69 L1661.57 1204.69 L1662.16 1204.69 L1662.75 1204.69 L1663.33 1204.69 L1663.92 1204.69 L1664.5 1204.69 L1665.09 1204.69 L1665.68 1204.69 L1666.26 1204.69 L1666.85 1204.69 L1667.44 1204.69 L1668.02 1204.69 L1668.61 1204.69 L1669.2 1204.69 L1669.78 1204.69 L1670.37 1204.69 L1670.96 1204.69 L1671.54 1204.69 L1672.13 1204.69 L1672.71 1204.69 L1673.3 1204.69 L1673.89 1204.69 L1674.47 1204.69 L1675.06 1204.69 L1675.65 1204.69 L1676.23 1204.69 L1676.82 1204.69 L1677.41 1204.69 L1677.99 1204.69 L1678.58 1204.69 L1679.17 1204.69 L1679.75 1204.69 L1680.34 1204.69 L1680.92 1204.69 L1681.51 1204.69 L1682.1 1204.69 L1682.68 1204.69 L1683.27 1204.69 L1683.86 1204.69 L1684.44 1204.69 L1685.03 1204.69 L1685.62 1204.69 L1686.2 1204.69 L1686.79 1204.69 L1687.37 1204.69 L1687.96 1204.69 L1688.55 1204.69 L1689.13 1204.69 L1689.72 1204.69 L1690.31 1204.69 L1690.89 1204.69 L1691.48 1204.69 L1692.07 1204.69 L1692.65 1204.69 L1693.24 1204.69 L1693.83 1204.69 L1694.41 1204.69 L1695 1204.69 L1695.58 1204.69 L1696.17 1204.69 L1696.76 1204.69 L1697.34 1204.69 L1697.93 1204.69 L1698.52 1204.69 L1699.1 1204.69 L1699.69 1204.69 L1700.28 1204.69 L1700.86 1204.69 L1701.45 1204.69 L1702.04 1204.69 L1702.62 1204.69 L1703.21 1204.69 L1703.79 1204.69 L1704.38 1204.69 L1704.97 1204.69 L1705.55 1204.69 L1706.14 1204.69 L1706.73 1204.69 L1707.31 1204.69 L1707.9 1204.69 L1708.49 1204.69 L1709.07 1204.69 L1709.66 1204.69 L1710.24 1204.69 L1710.83 1204.69 L1711.42 1204.69 L1712 1204.69 L1712.59 1204.69 L1713.18 1204.69 L1713.76 1204.69 L1714.35 1204.69 L1714.94 1204.69 L1715.52 1204.69 L1716.11 1204.69 L1716.7 1204.69 L1717.28 1204.69 L1717.87 1204.69 L1718.45 1204.69 L1719.04 1204.69 L1719.63 1204.69 L1720.21 1204.69 L1720.8 1204.69 L1721.39 1204.69 L1721.97 1204.69 L1722.56 1204.69 L1723.15 1204.69 L1723.73 1204.69 L1724.32 1204.69 L1724.91 1204.69 L1725.49 1204.69 L1726.08 1204.69 L1726.66 1204.69 L1727.25 1204.69 L1727.84 1204.69 L1728.42 1204.69 L1729.01 1204.69 L1729.6 1204.69 L1730.18 1204.69 L1730.77 1204.69 L1731.36 1204.69 L1731.94 1204.69 L1732.53 1204.69 L1733.11 1204.69 L1733.7 1204.69 L1734.29 1204.69 L1734.87 1204.69 L1735.46 1204.69 L1736.05 1204.69 L1736.63 1204.69 L1737.22 1204.69 L1737.81 1204.69 L1738.39 1204.69 L1738.98 1204.69 L1739.57 1204.69 L1740.15 1204.69 L1740.74 1204.69 L1741.32 1204.69 L1741.91 1204.69 L1742.5 1204.69 L1743.08 1204.69 L1743.67 1204.69 L1744.26 1204.69 L1744.84 1204.69 L1745.43 1204.69 L1746.02 1204.69 L1746.6 1204.69 L1747.19 1204.69 L1747.78 1204.69 L1748.36 1204.69 L1748.95 1204.69 L1749.53 1204.69 L1750.12 1204.69 L1750.71 1204.69 L1751.29 1204.69 L1751.88 1204.69 L1752.47 1204.69 L1753.05 1204.69 L1753.64 1204.69 L1754.23 1204.69 L1754.81 1204.69 L1755.4 1204.69 L1755.99 1204.69 L1756.57 1204.69 L1757.16 1204.69 L1757.74 1204.69 L1758.33 1204.69 L1758.92 1204.69 L1759.5 1204.69 L1760.09 1204.69 L1760.68 1204.69 L1761.26 1204.69 L1761.85 1204.69 L1762.44 1204.69 L1763.02 1204.69 L1763.61 1204.69 L1764.19 1204.69 L1764.78 1204.69 L1765.37 1204.69 L1765.95 1204.69 L1766.54 1204.69 L1767.13 1204.69 L1767.71 1204.69 L1768.3 1204.69 L1768.89 1204.69 L1769.47 1204.69 L1770.06 1204.69 L1770.65 1204.69 L1771.23 1204.69 L1771.82 1204.69 L1772.4 1204.69 L1772.99 1204.69 L1773.58 1204.69 L1774.16 1204.69 L1774.75 1204.69 L1775.34 1204.69 L1775.92 1204.69 L1776.51 1204.69 L1777.1 1204.69 L1777.68 1204.69 L1778.27 1204.69 L1778.86 1204.69 L1779.44 1204.69 L1780.03 1204.69 L1780.61 1204.69 L1781.2 1204.69 L1781.79 1204.69 L1782.37 1204.69 L1782.96 1204.69 L1783.55 1204.69 L1784.13 1204.69 L1784.72 1204.69 L1785.31 1204.69 L1785.89 1204.69 L1786.48 1204.69 L1787.06 1204.69 L1787.65 1204.69 L1788.24 1204.69 L1788.82 1204.69 L1789.41 1204.69 L1790 1204.69 L1790.58 1204.69 L1791.17 1204.69 L1791.76 1204.69 L1792.34 1204.69 L1792.93 1204.69 L1793.52 1204.69 L1794.1 1204.69 L1794.69 1204.69 L1795.27 1204.69 L1795.86 1204.69 L1796.45 1204.69 L1797.03 1204.69 L1797.62 1204.69 L1798.21 1204.69 L1798.79 1204.69 L1799.38 1204.69 L1799.97 1204.69 L1800.55 1204.69 L1801.14 1204.69 L1801.73 1204.69 L1802.31 1204.69 L1802.9 1204.69 L1803.48 1204.69 L1804.07 1204.69 L1804.66 1204.69 L1805.24 1204.69 L1805.83 1204.69 L1806.42 1204.69 L1807 1204.69 L1807.59 1204.69 L1808.18 1204.69 L1808.76 1204.69 L1809.35 1204.69 L1809.94 1204.69 L1810.52 1204.69 L1811.11 1204.69 L1811.69 1204.69 L1812.28 1204.69 L1812.87 1204.69 L1813.45 1204.69 L1814.04 1204.69 L1814.63 1204.69 L1815.21 1204.69 L1815.8 1204.69 L1816.39 1204.69 L1816.97 1204.69 L1817.56 1204.69 L1818.14 1204.69 L1818.73 1204.69 L1819.32 1204.69 L1819.9 1204.69 L1820.49 1204.69 L1821.08 1204.69 L1821.66 1204.69 L1822.25 1204.69 L1822.84 1204.69 L1823.42 1204.69 L1824.01 1204.69 L1824.6 1204.69 L1825.18 1204.69 L1825.77 1204.69 L1826.35 1204.69 L1826.94 1204.69 L1827.53 1204.69 L1828.11 1204.69 L1828.7 1204.69 L1829.29 1204.69 L1829.87 1204.69 L1830.46 1204.69 L1831.05 1204.69 L1831.63 1204.69 L1832.22 1204.69 L1832.81 1204.69 L1833.39 1204.69 L1833.98 1204.69 L1834.56 1204.69 L1835.15 1204.69 L1835.74 1204.69 L1836.32 1204.69 L1836.91 1204.69 L1837.5 1204.69 L1838.08 1204.69 L1838.67 1204.69 L1839.26 1204.69 L1839.84 1204.69 L1840.43 1204.69 L1841.01 1204.69 L1841.6 1204.69 L1842.19 1204.69 L1842.77 1204.69 L1843.36 1204.69 L1843.95 1204.69 L1844.53 1204.69 L1845.12 1204.69 L1845.71 1204.69 L1846.29 1204.69 L1846.88 1204.69 L1847.47 1204.69 L1848.05 1204.69 L1848.64 1204.69 L1849.22 1204.69 L1849.81 1204.69 L1850.4 1204.69 L1850.98 1204.69 L1851.57 1204.69 L1852.16 1204.69 L1852.74 1204.69 L1853.33 1204.69 L1853.92 1204.69 L1854.5 1204.69 L1855.09 1204.69 L1855.68 1204.69 L1856.26 1204.69 L1856.85 1204.69 L1857.43 1204.69 L1858.02 1204.69 L1858.61 1204.69 L1859.19 1204.69 L1859.78 1204.69 L1860.37 1204.69 L1860.95 1204.69 L1861.54 1204.69 L1862.13 1204.69 L1862.71 1204.69 L1863.3 1204.69 L1863.88 1204.69 L1864.47 1204.69 L1865.06 1204.69 L1865.64 1204.69 L1866.23 1204.69 L1866.82 1204.69 L1867.4 1204.69 L1867.99 1204.69 L1868.58 1204.69 L1869.16 1204.69 L1869.75 1204.69 L1870.34 1204.69 L1870.92 1204.69 L1871.51 1204.69 L1872.09 1204.69 L1872.68 1204.69 L1873.27 1204.69 L1873.85 1204.69 L1874.44 1204.69 L1875.03 1204.69 L1875.61 1204.69 L1876.2 1204.69 L1876.79 1204.69 L1877.37 1204.69 L1877.96 1204.69 L1878.55 1204.69 L1879.13 1204.69 L1879.72 1204.69 L1880.3 1204.69 L1880.89 1204.69 L1881.48 1204.69 L1882.06 1204.69 L1882.65 1204.69 L1883.24 1204.69 L1883.82 1204.69 L1884.41 1204.69 L1885 1204.69 L1885.58 1204.69 L1886.17 1204.69 L1886.76 1204.69 L1887.34 1204.69 L1887.93 1204.69 L1888.51 1204.69 L1889.1 1204.69 L1889.69 1204.69 L1890.27 1204.69 L1890.86 1204.69 L1891.45 1204.69 L1892.03 1204.69 L1892.62 1204.69 L1893.21 1204.69 L1893.79 1204.69 L1894.38 1204.69 L1894.96 1204.69 L1895.55 1204.69 L1896.14 1204.69 L1896.72 1204.69 L1897.31 1204.69 L1897.9 1204.69 L1898.48 1204.69 L1899.07 1204.69 L1899.66 1204.69 L1900.24 1204.69 L1900.83 1204.69 L1901.42 1204.69 L1902 1204.69 L1902.59 1204.69 L1903.17 1204.69 L1903.76 1204.69 L1904.35 1204.69 L1904.93 1204.69 L1905.52 1204.69 L1906.11 1204.69 L1906.69 1204.69 L1907.28 1204.69 L1907.87 1204.69 L1908.45 1204.69 L1909.04 1204.69 L1909.63 1204.69 L1910.21 1204.69 L1910.8 1204.69 L1911.38 1204.69 L1911.97 1204.69 L1912.56 1204.69 L1913.14 1204.69 L1913.73 1204.69 L1914.32 1204.69 L1914.9 1204.69 L1915.49 1204.69 L1916.08 1204.69 L1916.66 1204.69 L1917.25 1204.69 L1917.83 1204.69 L1918.42 1204.69 L1919.01 1204.69 L1919.59 1204.69 L1920.18 1204.69 L1920.77 1204.69 L1921.35 1204.69 L1921.94 1204.69 L1922.53 1204.69 L1923.11 1204.69 L1923.7 1204.69 L1924.29 1204.69 L1924.87 1204.69 L1925.46 1204.69 L1926.04 1204.69 L1926.63 1204.69 L1927.22 1204.69 L1927.8 1204.69 L1928.39 1204.69 L1928.98 1204.69 L1929.56 1204.69 L1930.15 1204.69 L1930.74 1204.69 L1931.32 1204.69 L1931.91 1204.69 L1932.5 1204.69 L1933.08 1204.69 L1933.67 1204.69 L1934.25 1204.69 L1934.84 1204.69 L1935.43 1204.69 L1936.01 1204.69 L1936.6 1204.69 L1937.19 1204.69 L1937.77 1204.69 L1938.36 1204.69 L1938.95 1204.69 L1939.53 1204.69 L1940.12 1204.69 L1940.71 1204.69 L1941.29 1204.69 L1941.88 1204.69 L1942.46 1204.69 L1943.05 1204.69 L1943.64 1204.69 L1944.22 1204.69 L1944.81 1204.69 L1945.4 1204.69 L1945.98 1204.69 L1946.57 1204.69 L1947.16 1204.69 L1947.74 1204.69 L1948.33 1204.69 L1948.91 1204.69 L1949.5 1204.69 L1950.09 1204.69 L1950.67 1204.69 L1951.26 1204.69 L1951.85 1204.69 L1952.43 1204.69 L1953.02 1204.69 L1953.61 1204.69 L1954.19 1204.69 L1954.78 1204.69 L1955.37 1204.69 L1955.95 1204.69 L1956.54 1204.69 L1957.12 1204.69 L1957.71 1204.69 L1958.3 1204.69 L1958.88 1204.69 L1959.47 1204.69 L1960.06 1204.69 L1960.64 1204.69 L1961.23 1204.69 L1961.82 1204.69 L1962.4 1204.69 L1962.99 1204.69 L1963.58 1204.69 L1964.16 1204.69 L1964.75 1204.69 L1965.33 1204.69 L1965.92 1204.69 L1966.51 1204.69 L1967.09 1204.69 L1967.68 1204.69 L1968.27 1204.69 L1968.85 1204.69 L1969.44 1204.69 L1970.03 1204.69 L1970.61 1204.69 L1971.2 1204.69 L1971.78 1204.69 L1972.37 1204.69 L1972.96 1204.69 L1973.54 1204.69 L1974.13 1204.69 L1974.72 1204.69 L1975.3 1204.69 L1975.89 1204.69 L1976.48 1204.69 L1977.06 1204.69 L1977.65 1204.69 L1978.24 1204.69 L1978.82 1204.69 L1979.41 1204.69 L1979.99 1204.69 L1980.58 1204.69 L1981.17 1204.69 L1981.75 1204.69 L1982.34 1204.69 L1982.93 1204.69 L1983.51 1204.69 L1984.1 1204.69 L1984.69 1204.69 L1985.27 1204.69 L1985.86 1204.69 L1986.45 1204.69 L1987.03 1204.69 L1987.62 1204.69 L1988.2 1204.69 L1988.79 1204.69 L1989.38 1204.69 L1989.96 1204.69 L1990.55 1204.69 L1991.14 1204.69 L1991.72 1204.69 L1992.31 1204.69 L1992.9 1204.69 L1993.48 1204.69 L1994.07 1204.69 L1994.65 1204.69 L1995.24 1204.69 L1995.83 1204.69 L1996.41 1204.69 L1997 1204.69 L1997.59 1204.69 L1998.17 1204.69 L1998.76 1204.69 L1999.35 1204.69 L1999.93 1204.69 L2000.52 1204.69 L2001.11 1204.69 L2001.69 1204.69 L2002.28 1204.69 L2002.86 1204.69 L2003.45 1204.69 L2004.04 1204.69 L2004.62 1204.69 L2005.21 1204.69 L2005.8 1204.69 L2006.38 1204.69 L2006.97 1204.69 L2007.56 1204.69 L2008.14 1204.69 L2008.73 1204.69 L2009.32 1204.69 L2009.9 1204.69 L2010.49 1204.69 L2011.07 1204.69 L2011.66 1204.69 L2012.25 1204.69 L2012.83 1204.69 L2013.42 1204.69 L2014.01 1204.69 L2014.59 1204.69 L2015.18 1204.69 L2015.77 1204.69 L2016.35 1204.69 L2016.94 1204.69 L2017.53 1204.69 L2018.11 1204.69 L2018.7 1204.69 L2019.28 1204.69 L2019.87 1204.69 L2020.46 1204.69 L2021.04 1204.69 L2021.63 1204.69 L2022.22 1204.69 L2022.8 1204.69 L2023.39 1204.69 L2023.98 1204.69 L2024.56 1204.69 L2025.15 1204.69 L2025.73 1204.69 L2026.32 1204.69 L2026.91 1204.69 L2027.49 1204.69 L2028.08 1204.69 L2028.67 1204.69 L2029.25 1204.69 L2029.84 1204.69 L2030.43 1204.69 L2031.01 1204.69 L2031.6 1204.69 L2032.19 1204.69 L2032.77 1204.69 L2033.36 1204.69 L2033.94 1204.69 L2034.53 1204.69 L2035.12 1204.69 L2035.7 1204.69 L2036.29 1204.69 L2036.88 1204.69 L2037.46 1204.69 L2038.05 1204.69 L2038.64 1204.69 L2039.22 1204.69 L2039.81 1204.69 L2040.4 1204.69 L2040.98 1204.69 L2041.57 1204.69 L2042.15 1204.69 L2042.74 1204.69 L2043.33 1204.69 L2043.91 1204.69 L2044.5 1204.69 L2045.09 1204.69 L2045.67 1204.69 L2046.26 1204.69 L2046.85 1204.69 L2047.43 1204.69 L2048.02 1204.69 L2048.6 1204.69 L2049.19 1204.69 L2049.78 1204.69 L2050.36 1204.69 L2050.95 1204.69 L2051.54 1204.69 L2052.12 1204.69 L2052.71 1204.69 L2053.3 1204.69 L2053.88 1204.69 L2054.47 1204.69 L2055.06 1204.69 L2055.64 1204.69 L2056.23 1204.69 L2056.81 1204.69 L2057.4 1204.69 L2057.99 1204.69 L2058.57 1204.69 L2059.16 1204.69 L2059.75 1204.69 L2060.33 1204.69 L2060.92 1204.69 L2061.51 1204.69 L2062.09 1204.69 L2062.68 1204.69 L2063.27 1204.69 L2063.85 1204.69 L2064.44 1204.69 L2065.02 1204.69 L2065.61 1204.69 L2066.2 1204.69 L2066.78 1204.69 L2067.37 1204.69 L2067.96 1204.69 L2068.54 1204.69 L2069.13 1204.69 L2069.72 1204.69 L2070.3 1204.69 L2070.89 1204.69 L2071.48 1204.69 L2072.06 1204.69 L2072.65 1204.69 L2073.23 1204.69 L2073.82 1204.69 L2074.41 1204.69 L2074.99 1204.69 L2075.58 1204.69 L2076.17 1204.69 L2076.75 1204.69 L2077.34 1204.69 L2077.93 1204.69 L2078.51 1204.69 L2079.1 1204.69 L2079.68 1204.69 L2080.27 1204.69 L2080.86 1204.69 L2081.44 1204.69 L2082.03 1204.69 L2082.62 1204.69 L2083.2 1204.69 L2083.79 1204.69 L2084.38 1204.69 L2084.96 1204.69 L2085.55 1204.69 L2086.14 1204.69 L2086.72 1204.69 L2087.31 1204.69 L2087.89 1204.69 L2088.48 1204.69 L2089.07 1204.69 L2089.65 1204.69 L2090.24 1204.69 L2090.83 1204.69 L2091.41 1204.69 L2092 1204.69 L2092.59 1204.69 L2093.17 1204.69 L2093.76 1204.69 L2094.35 1204.69 L2094.93 1204.69 L2095.52 1204.69 L2096.1 1204.69 L2096.69 1204.69 L2097.28 1204.69 L2097.86 1204.69 L2098.45 1204.69 L2099.04 1204.69 L2099.62 1204.69 L2100.21 1204.69 L2100.8 1204.69 L2101.38 1204.69 L2101.97 1204.69 L2102.55 1204.69 L2103.14 1204.69 L2103.73 1204.69 L2104.31 1204.69 L2104.9 1204.69 L2105.49 1204.69 L2106.07 1204.69 L2106.66 1204.69 L2107.25 1204.69 L2107.83 1204.69 L2108.42 1204.69 L2109.01 1204.69 L2109.59 1204.69 L2110.18 1204.69 L2110.76 1204.69 L2111.35 1204.69 L2111.94 1204.69 L2112.52 1204.69 L2113.11 1204.69 L2113.7 1204.69 L2114.28 1204.69 L2114.87 1204.69 L2115.46 1204.69 L2116.04 1204.69 L2116.63 1204.69 L2117.22 1204.69 L2117.8 1204.69 L2118.39 1204.69 L2118.97 1204.69 L2119.56 1204.69 L2120.15 1204.69 L2120.73 1204.69 L2121.32 1204.69 L2121.91 1204.69 L2122.49 1204.69 L2123.08 1204.69 L2123.67 1204.69 L2124.25 1204.69 L2124.84 1204.69 L2125.42 1204.69 L2126.01 1204.69 L2126.6 1204.69 L2127.18 1204.69 L2127.77 1204.69 L2128.36 1204.69 L2128.94 1204.69 L2129.53 1204.69 L2130.12 1204.69 L2130.7 1204.69 L2131.29 1204.69 L2131.88 1204.69 L2132.46 1204.69 L2133.05 1204.69 L2133.63 1204.69 L2134.22 1204.69 L2134.81 1204.69 L2135.39 1204.69 L2135.98 1204.69 L2136.57 1204.69 L2137.15 1204.69 L2137.74 1204.69 L2138.33 1204.69 L2138.91 1204.69 L2139.5 1204.69 L2140.09 1204.69 L2140.67 1204.69 L2141.26 1204.69 L2141.84 1204.69 L2142.43 1204.69 L2143.02 1204.69 L2143.6 1204.69 L2144.19 1204.69 L2144.78 1204.69 L2145.36 1204.69 L2145.95 1204.69 L2146.54 1204.69 L2147.12 1204.69 L2147.71 1204.69 L2148.3 1204.69 L2148.88 1204.69 L2149.47 1204.69 L2150.05 1204.69 L2150.64 1204.69 L2151.23 1204.69 L2151.81 1204.69 L2152.4 1204.69 L2152.99 1204.69 L2153.57 1204.69 L2154.16 1204.69 L2154.75 1204.69 L2155.33 1204.69 L2155.92 1204.69 L2156.5 1204.69 L2157.09 1204.69 L2157.68 1204.69 L2158.26 1204.69 L2158.26 1204.55 L2157.68 1204.55 L2157.09 1204.55 L2156.5 1204.55 L2155.92 1204.55 L2155.33 1204.55 L2154.75 1204.55 L2154.16 1204.55 L2153.57 1204.55 L2152.99 1204.55 L2152.4 1204.55 L2151.81 1204.55 L2151.23 1204.55 L2150.64 1204.55 L2150.05 1204.55 L2149.47 1204.55 L2148.88 1204.55 L2148.3 1204.55 L2147.71 1204.55 L2147.12 1204.55 L2146.54 1204.55 L2145.95 1204.55 L2145.36 1204.55 L2144.78 1204.55 L2144.19 1204.55 L2143.6 1204.55 L2143.02 1204.55 L2142.43 1204.55 L2141.84 1204.55 L2141.26 1204.55 L2140.67 1204.55 L2140.09 1204.55 L2139.5 1204.55 L2138.91 1204.55 L2138.33 1204.55 L2137.74 1204.55 L2137.15 1204.55 L2136.57 1204.55 L2135.98 1204.55 L2135.39 1204.55 L2134.81 1204.55 L2134.22 1204.55 L2133.63 1204.55 L2133.05 1204.55 L2132.46 1204.55 L2131.88 1204.55 L2131.29 1204.55 L2130.7 1204.55 L2130.12 1204.55 L2129.53 1204.55 L2128.94 1204.55 L2128.36 1204.55 L2127.77 1204.55 L2127.18 1204.55 L2126.6 1204.55 L2126.01 1204.55 L2125.42 1204.55 L2124.84 1204.55 L2124.25 1204.55 L2123.67 1204.55 L2123.08 1204.55 L2122.49 1204.55 L2121.91 1204.55 L2121.32 1204.55 L2120.73 1204.55 L2120.15 1204.55 L2119.56 1204.55 L2118.97 1204.55 L2118.39 1204.55 L2117.8 1204.55 L2117.22 1204.55 L2116.63 1204.55 L2116.04 1204.55 L2115.46 1204.55 L2114.87 1204.55 L2114.28 1204.55 L2113.7 1204.55 L2113.11 1204.55 L2112.52 1204.55 L2111.94 1204.55 L2111.35 1204.55 L2110.76 1204.55 L2110.18 1204.55 L2109.59 1204.55 L2109.01 1204.55 L2108.42 1204.55 L2107.83 1204.55 L2107.25 1204.55 L2106.66 1204.55 L2106.07 1204.55 L2105.49 1204.55 L2104.9 1204.55 L2104.31 1204.55 L2103.73 1204.55 L2103.14 1204.55 L2102.55 1204.55 L2101.97 1204.55 L2101.38 1204.55 L2100.8 1204.55 L2100.21 1204.55 L2099.62 1204.55 L2099.04 1204.55 L2098.45 1204.55 L2097.86 1204.55 L2097.28 1204.55 L2096.69 1204.55 L2096.1 1204.55 L2095.52 1204.55 L2094.93 1204.55 L2094.35 1204.55 L2093.76 1204.55 L2093.17 1204.55 L2092.59 1204.55 L2092 1204.55 L2091.41 1204.55 L2090.83 1204.55 L2090.24 1204.55 L2089.65 1204.55 L2089.07 1204.55 L2088.48 1204.55 L2087.89 1204.55 L2087.31 1204.55 L2086.72 1204.55 L2086.14 1204.55 L2085.55 1204.55 L2084.96 1204.55 L2084.38 1204.55 L2083.79 1204.55 L2083.2 1204.55 L2082.62 1204.55 L2082.03 1204.55 L2081.44 1204.55 L2080.86 1204.55 L2080.27 1204.55 L2079.68 1204.55 L2079.1 1204.55 L2078.51 1204.55 L2077.93 1204.55 L2077.34 1204.55 L2076.75 1204.55 L2076.17 1204.55 L2075.58 1204.55 L2074.99 1204.55 L2074.41 1204.55 L2073.82 1204.55 L2073.23 1204.55 L2072.65 1204.55 L2072.06 1204.55 L2071.48 1204.55 L2070.89 1204.55 L2070.3 1204.55 L2069.72 1204.55 L2069.13 1204.55 L2068.54 1204.55 L2067.96 1204.55 L2067.37 1204.55 L2066.78 1204.55 L2066.2 1204.55 L2065.61 1204.55 L2065.02 1204.55 L2064.44 1204.55 L2063.85 1204.55 L2063.27 1204.55 L2062.68 1204.55 L2062.09 1204.55 L2061.51 1204.55 L2060.92 1204.55 L2060.33 1204.55 L2059.75 1204.55 L2059.16 1204.55 L2058.57 1204.55 L2057.99 1204.55 L2057.4 1204.55 L2056.81 1204.55 L2056.23 1204.55 L2055.64 1204.55 L2055.06 1204.55 L2054.47 1204.55 L2053.88 1204.55 L2053.3 1204.55 L2052.71 1204.55 L2052.12 1204.55 L2051.54 1204.55 L2050.95 1204.55 L2050.36 1204.55 L2049.78 1204.55 L2049.19 1204.55 L2048.6 1204.55 L2048.02 1204.55 L2047.43 1204.55 L2046.85 1204.55 L2046.26 1204.55 L2045.67 1204.55 L2045.09 1204.55 L2044.5 1204.55 L2043.91 1204.55 L2043.33 1204.55 L2042.74 1204.55 L2042.15 1204.55 L2041.57 1204.55 L2040.98 1204.55 L2040.4 1204.55 L2039.81 1204.55 L2039.22 1204.55 L2038.64 1204.55 L2038.05 1204.55 L2037.46 1204.55 L2036.88 1204.55 L2036.29 1204.55 L2035.7 1204.55 L2035.12 1204.55 L2034.53 1204.55 L2033.94 1204.55 L2033.36 1204.55 L2032.77 1204.55 L2032.19 1204.55 L2031.6 1204.55 L2031.01 1204.55 L2030.43 1204.55 L2029.84 1204.55 L2029.25 1204.55 L2028.67 1204.55 L2028.08 1204.55 L2027.49 1204.55 L2026.91 1204.55 L2026.32 1204.55 L2025.73 1204.55 L2025.15 1204.55 L2024.56 1204.55 L2023.98 1204.55 L2023.39 1204.55 L2022.8 1204.55 L2022.22 1204.55 L2021.63 1204.55 L2021.04 1204.55 L2020.46 1204.55 L2019.87 1204.55 L2019.28 1204.55 L2018.7 1204.55 L2018.11 1204.55 L2017.53 1204.55 L2016.94 1204.55 L2016.35 1204.55 L2015.77 1204.55 L2015.18 1204.55 L2014.59 1204.55 L2014.01 1204.55 L2013.42 1204.55 L2012.83 1204.55 L2012.25 1204.55 L2011.66 1204.55 L2011.07 1204.55 L2010.49 1204.55 L2009.9 1204.55 L2009.32 1204.55 L2008.73 1204.55 L2008.14 1204.55 L2007.56 1204.55 L2006.97 1204.55 L2006.38 1204.55 L2005.8 1204.55 L2005.21 1204.55 L2004.62 1204.55 L2004.04 1204.55 L2003.45 1204.55 L2002.86 1204.55 L2002.28 1204.55 L2001.69 1204.55 L2001.11 1204.55 L2000.52 1204.55 L1999.93 1204.55 L1999.35 1204.55 L1998.76 1204.55 L1998.17 1204.55 L1997.59 1204.55 L1997 1204.55 L1996.41 1204.55 L1995.83 1204.55 L1995.24 1204.55 L1994.65 1204.55 L1994.07 1204.55 L1993.48 1204.55 L1992.9 1204.55 L1992.31 1204.55 L1991.72 1204.55 L1991.14 1204.55 L1990.55 1204.55 L1989.96 1204.55 L1989.38 1204.55 L1988.79 1204.55 L1988.2 1204.55 L1987.62 1204.55 L1987.03 1204.55 L1986.45 1204.55 L1985.86 1204.55 L1985.27 1204.55 L1984.69 1204.55 L1984.1 1204.55 L1983.51 1204.55 L1982.93 1204.55 L1982.34 1204.55 L1981.75 1204.55 L1981.17 1204.55 L1980.58 1204.55 L1979.99 1204.55 L1979.41 1204.55 L1978.82 1204.55 L1978.24 1204.55 L1977.65 1204.55 L1977.06 1204.55 L1976.48 1204.55 L1975.89 1204.55 L1975.3 1204.55 L1974.72 1204.55 L1974.13 1204.55 L1973.54 1204.55 L1972.96 1204.55 L1972.37 1204.55 L1971.78 1204.55 L1971.2 1204.55 L1970.61 1204.55 L1970.03 1204.55 L1969.44 1204.55 L1968.85 1204.55 L1968.27 1204.55 L1967.68 1204.55 L1967.09 1204.55 L1966.51 1204.55 L1965.92 1204.55 L1965.33 1204.55 L1964.75 1204.55 L1964.16 1204.55 L1963.58 1204.55 L1962.99 1204.55 L1962.4 1204.55 L1961.82 1204.55 L1961.23 1204.55 L1960.64 1204.55 L1960.06 1204.55 L1959.47 1204.55 L1958.88 1204.55 L1958.3 1204.55 L1957.71 1204.55 L1957.12 1204.55 L1956.54 1204.55 L1955.95 1204.55 L1955.37 1204.55 L1954.78 1204.55 L1954.19 1204.55 L1953.61 1204.55 L1953.02 1204.55 L1952.43 1204.55 L1951.85 1204.55 L1951.26 1204.55 L1950.67 1204.55 L1950.09 1204.55 L1949.5 1204.55 L1948.91 1204.55 L1948.33 1204.55 L1947.74 1204.55 L1947.16 1204.55 L1946.57 1204.55 L1945.98 1204.55 L1945.4 1204.55 L1944.81 1204.55 L1944.22 1204.55 L1943.64 1204.55 L1943.05 1204.55 L1942.46 1204.55 L1941.88 1204.55 L1941.29 1204.55 L1940.71 1204.55 L1940.12 1204.55 L1939.53 1204.55 L1938.95 1204.55 L1938.36 1204.55 L1937.77 1204.55 L1937.19 1204.55 L1936.6 1204.55 L1936.01 1204.55 L1935.43 1204.55 L1934.84 1204.55 L1934.25 1204.55 L1933.67 1204.55 L1933.08 1204.55 L1932.5 1204.55 L1931.91 1204.55 L1931.32 1204.55 L1930.74 1204.55 L1930.15 1204.55 L1929.56 1204.55 L1928.98 1204.55 L1928.39 1204.55 L1927.8 1204.55 L1927.22 1204.55 L1926.63 1204.55 L1926.04 1204.55 L1925.46 1204.55 L1924.87 1204.55 L1924.29 1204.55 L1923.7 1204.55 L1923.11 1204.55 L1922.53 1204.55 L1921.94 1204.55 L1921.35 1204.55 L1920.77 1204.55 L1920.18 1204.55 L1919.59 1204.55 L1919.01 1204.55 L1918.42 1204.55 L1917.83 1204.55 L1917.25 1204.55 L1916.66 1204.55 L1916.08 1204.55 L1915.49 1204.55 L1914.9 1204.55 L1914.32 1204.55 L1913.73 1204.55 L1913.14 1204.55 L1912.56 1204.55 L1911.97 1204.55 L1911.38 1204.55 L1910.8 1204.55 L1910.21 1204.55 L1909.63 1204.55 L1909.04 1204.55 L1908.45 1204.55 L1907.87 1204.55 L1907.28 1204.55 L1906.69 1204.55 L1906.11 1204.55 L1905.52 1204.55 L1904.93 1204.55 L1904.35 1204.55 L1903.76 1204.55 L1903.17 1204.55 L1902.59 1204.55 L1902 1204.55 L1901.42 1204.55 L1900.83 1204.55 L1900.24 1204.55 L1899.66 1204.55 L1899.07 1204.55 L1898.48 1204.55 L1897.9 1204.55 L1897.31 1204.55 L1896.72 1204.55 L1896.14 1204.55 L1895.55 1204.55 L1894.96 1204.55 L1894.38 1204.55 L1893.79 1204.55 L1893.21 1204.55 L1892.62 1204.55 L1892.03 1204.55 L1891.45 1204.55 L1890.86 1204.55 L1890.27 1204.55 L1889.69 1204.55 L1889.1 1204.55 L1888.51 1204.55 L1887.93 1204.55 L1887.34 1204.55 L1886.76 1204.55 L1886.17 1204.55 L1885.58 1204.55 L1885 1204.55 L1884.41 1204.55 L1883.82 1204.55 L1883.24 1204.55 L1882.65 1204.55 L1882.06 1204.55 L1881.48 1204.55 L1880.89 1204.55 L1880.3 1204.55 L1879.72 1204.55 L1879.13 1204.55 L1878.55 1204.55 L1877.96 1204.55 L1877.37 1204.55 L1876.79 1204.55 L1876.2 1204.55 L1875.61 1204.55 L1875.03 1204.55 L1874.44 1204.55 L1873.85 1204.55 L1873.27 1204.55 L1872.68 1204.55 L1872.09 1204.55 L1871.51 1204.55 L1870.92 1204.55 L1870.34 1204.55 L1869.75 1204.55 L1869.16 1204.55 L1868.58 1204.55 L1867.99 1204.55 L1867.4 1204.55 L1866.82 1204.55 L1866.23 1204.55 L1865.64 1204.55 L1865.06 1204.55 L1864.47 1204.55 L1863.88 1204.55 L1863.3 1204.55 L1862.71 1204.55 L1862.13 1204.55 L1861.54 1204.55 L1860.95 1204.55 L1860.37 1204.55 L1859.78 1204.55 L1859.19 1204.55 L1858.61 1204.55 L1858.02 1204.55 L1857.43 1204.55 L1856.85 1204.55 L1856.26 1204.55 L1855.68 1204.55 L1855.09 1204.55 L1854.5 1204.55 L1853.92 1204.55 L1853.33 1204.55 L1852.74 1204.55 L1852.16 1204.55 L1851.57 1204.55 L1850.98 1204.55 L1850.4 1204.55 L1849.81 1204.55 L1849.22 1204.55 L1848.64 1204.55 L1848.05 1204.55 L1847.47 1204.55 L1846.88 1204.55 L1846.29 1204.55 L1845.71 1204.55 L1845.12 1204.55 L1844.53 1204.55 L1843.95 1204.55 L1843.36 1204.55 L1842.77 1204.55 L1842.19 1204.55 L1841.6 1204.55 L1841.01 1204.55 L1840.43 1204.55 L1839.84 1204.55 L1839.26 1204.55 L1838.67 1204.55 L1838.08 1204.55 L1837.5 1204.55 L1836.91 1204.55 L1836.32 1204.55 L1835.74 1204.55 L1835.15 1204.55 L1834.56 1204.55 L1833.98 1204.55 L1833.39 1204.55 L1832.81 1204.55 L1832.22 1204.55 L1831.63 1204.55 L1831.05 1204.55 L1830.46 1204.55 L1829.87 1204.55 L1829.29 1204.55 L1828.7 1204.55 L1828.11 1204.55 L1827.53 1204.55 L1826.94 1204.55 L1826.35 1204.55 L1825.77 1204.55 L1825.18 1204.55 L1824.6 1204.55 L1824.01 1204.55 L1823.42 1204.55 L1822.84 1204.55 L1822.25 1204.55 L1821.66 1204.55 L1821.08 1204.55 L1820.49 1204.55 L1819.9 1204.55 L1819.32 1204.55 L1818.73 1204.55 L1818.14 1204.55 L1817.56 1204.55 L1816.97 1204.55 L1816.39 1204.55 L1815.8 1204.55 L1815.21 1204.55 L1814.63 1204.55 L1814.04 1204.55 L1813.45 1204.55 L1812.87 1204.55 L1812.28 1204.55 L1811.69 1204.55 L1811.11 1204.55 L1810.52 1204.55 L1809.94 1204.55 L1809.35 1204.55 L1808.76 1204.55 L1808.18 1204.55 L1807.59 1204.55 L1807 1204.55 L1806.42 1204.55 L1805.83 1204.55 L1805.24 1204.55 L1804.66 1204.55 L1804.07 1204.55 L1803.48 1204.55 L1802.9 1204.55 L1802.31 1204.55 L1801.73 1204.55 L1801.14 1204.55 L1800.55 1204.55 L1799.97 1204.55 L1799.38 1204.55 L1798.79 1204.55 L1798.21 1204.55 L1797.62 1204.55 L1797.03 1204.55 L1796.45 1204.55 L1795.86 1204.55 L1795.27 1204.55 L1794.69 1204.55 L1794.1 1204.55 L1793.52 1204.55 L1792.93 1204.55 L1792.34 1204.55 L1791.76 1204.55 L1791.17 1204.55 L1790.58 1204.55 L1790 1204.55 L1789.41 1204.55 L1788.82 1204.55 L1788.24 1204.55 L1787.65 1204.55 L1787.06 1204.55 L1786.48 1204.55 L1785.89 1204.55 L1785.31 1204.55 L1784.72 1204.55 L1784.13 1204.55 L1783.55 1204.55 L1782.96 1204.55 L1782.37 1204.55 L1781.79 1204.55 L1781.2 1204.55 L1780.61 1204.55 L1780.03 1204.55 L1779.44 1204.55 L1778.86 1204.55 L1778.27 1204.55 L1777.68 1204.55 L1777.1 1204.55 L1776.51 1204.55 L1775.92 1204.55 L1775.34 1204.55 L1774.75 1204.55 L1774.16 1204.55 L1773.58 1204.55 L1772.99 1204.55 L1772.4 1204.55 L1771.82 1204.55 L1771.23 1204.55 L1770.65 1204.55 L1770.06 1204.55 L1769.47 1204.55 L1768.89 1204.55 L1768.3 1204.55 L1767.71 1204.55 L1767.13 1204.55 L1766.54 1204.55 L1765.95 1204.55 L1765.37 1204.55 L1764.78 1204.55 L1764.19 1204.55 L1763.61 1204.55 L1763.02 1204.55 L1762.44 1204.55 L1761.85 1204.55 L1761.26 1204.55 L1760.68 1204.55 L1760.09 1204.55 L1759.5 1204.55 L1758.92 1204.55 L1758.33 1204.55 L1757.74 1204.55 L1757.16 1204.55 L1756.57 1204.55 L1755.99 1204.55 L1755.4 1204.55 L1754.81 1204.55 L1754.23 1204.55 L1753.64 1204.55 L1753.05 1204.55 L1752.47 1204.55 L1751.88 1204.55 L1751.29 1204.55 L1750.71 1204.55 L1750.12 1204.55 L1749.53 1204.55 L1748.95 1204.55 L1748.36 1204.55 L1747.78 1204.55 L1747.19 1204.55 L1746.6 1204.55 L1746.02 1204.55 L1745.43 1204.55 L1744.84 1204.55 L1744.26 1204.55 L1743.67 1204.55 L1743.08 1204.55 L1742.5 1204.55 L1741.91 1204.55 L1741.32 1204.55 L1740.74 1204.55 L1740.15 1204.55 L1739.57 1204.55 L1738.98 1204.55 L1738.39 1204.55 L1737.81 1204.55 L1737.22 1204.55 L1736.63 1204.55 L1736.05 1204.55 L1735.46 1204.55 L1734.87 1204.55 L1734.29 1204.55 L1733.7 1204.55 L1733.11 1204.55 L1732.53 1204.55 L1731.94 1204.55 L1731.36 1204.55 L1730.77 1204.55 L1730.18 1204.55 L1729.6 1204.55 L1729.01 1204.55 L1728.42 1204.55 L1727.84 1204.55 L1727.25 1204.55 L1726.66 1204.55 L1726.08 1204.55 L1725.49 1204.55 L1724.91 1204.55 L1724.32 1204.55 L1723.73 1204.55 L1723.15 1204.55 L1722.56 1204.55 L1721.97 1204.55 L1721.39 1204.55 L1720.8 1204.55 L1720.21 1204.55 L1719.63 1204.55 L1719.04 1204.55 L1718.45 1204.55 L1717.87 1204.55 L1717.28 1204.55 L1716.7 1204.55 L1716.11 1204.55 L1715.52 1204.55 L1714.94 1204.55 L1714.35 1204.55 L1713.76 1204.55 L1713.18 1204.55 L1712.59 1204.55 L1712 1204.55 L1711.42 1204.55 L1710.83 1204.55 L1710.24 1204.55 L1709.66 1204.55 L1709.07 1204.55 L1708.49 1204.55 L1707.9 1204.55 L1707.31 1204.55 L1706.73 1204.55 L1706.14 1204.55 L1705.55 1204.55 L1704.97 1204.55 L1704.38 1204.55 L1703.79 1204.55 L1703.21 1204.55 L1702.62 1204.55 L1702.04 1204.55 L1701.45 1204.55 L1700.86 1204.55 L1700.28 1204.55 L1699.69 1204.55 L1699.1 1204.55 L1698.52 1204.55 L1697.93 1204.55 L1697.34 1204.55 L1696.76 1204.55 L1696.17 1204.55 L1695.58 1204.55 L1695 1204.55 L1694.41 1204.55 L1693.83 1204.55 L1693.24 1204.55 L1692.65 1204.55 L1692.07 1204.55 L1691.48 1204.55 L1690.89 1204.55 L1690.31 1204.55 L1689.72 1204.55 L1689.13 1204.55 L1688.55 1204.55 L1687.96 1204.55 L1687.37 1204.55 L1686.79 1204.55 L1686.2 1204.55 L1685.62 1204.55 L1685.03 1204.55 L1684.44 1204.55 L1683.86 1204.55 L1683.27 1204.55 L1682.68 1204.55 L1682.1 1204.55 L1681.51 1204.55 L1680.92 1204.55 L1680.34 1204.55 L1679.75 1204.55 L1679.17 1204.55 L1678.58 1204.55 L1677.99 1204.55 L1677.41 1204.55 L1676.82 1204.55 L1676.23 1204.55 L1675.65 1204.55 L1675.06 1204.55 L1674.47 1204.55 L1673.89 1204.55 L1673.3 1204.55 L1672.71 1204.55 L1672.13 1204.55 L1671.54 1204.55 L1670.96 1204.55 L1670.37 1204.55 L1669.78 1204.55 L1669.2 1204.55 L1668.61 1204.55 L1668.02 1204.55 L1667.44 1204.55 L1666.85 1204.55 L1666.26 1204.55 L1665.68 1204.55 L1665.09 1204.55 L1664.5 1204.55 L1663.92 1204.55 L1663.33 1204.55 L1662.75 1204.55 L1662.16 1204.55 L1661.57 1204.55 L1660.99 1204.55 L1660.4 1204.55 L1659.81 1204.55 L1659.23 1204.55 L1658.64 1204.55 L1658.05 1204.55 L1657.47 1204.55 L1656.88 1204.55 L1656.29 1204.55 L1655.71 1204.55 L1655.12 1204.55 L1654.54 1204.55 L1653.95 1204.55 L1653.36 1204.55 L1652.78 1204.55 L1652.19 1204.55 L1651.6 1204.55 L1651.02 1204.55 L1650.43 1204.55 L1649.84 1204.55 L1649.26 1204.55 L1648.67 1204.55 L1648.09 1204.55 L1647.5 1204.55 L1646.91 1204.55 L1646.33 1204.55 L1645.74 1204.55 L1645.15 1204.55 L1644.57 1204.55 L1643.98 1204.55 L1643.39 1204.55 L1642.81 1204.55 L1642.22 1204.55 L1641.63 1204.55 L1641.05 1204.55 L1640.46 1204.55 L1639.88 1204.55 L1639.29 1204.55 L1638.7 1204.55 L1638.12 1204.55 L1637.53 1204.55 L1636.94 1204.55 L1636.36 1204.55 L1635.77 1204.55 L1635.18 1204.55 L1634.6 1204.55 L1634.01 1204.55 L1633.42 1204.55 L1632.84 1204.55 L1632.25 1204.55 L1631.67 1204.55 L1631.08 1204.55 L1630.49 1204.55 L1629.91 1204.55 L1629.32 1204.55 L1628.73 1204.55 L1628.15 1204.55 L1627.56 1204.55 L1626.97 1204.55 L1626.39 1204.55 L1625.8 1204.55 L1625.22 1204.55 L1624.63 1204.55 L1624.04 1204.55 L1623.46 1204.55 L1622.87 1204.55 L1622.28 1204.55 L1621.7 1204.55 L1621.11 1204.55 L1620.52 1204.55 L1619.94 1204.55 L1619.35 1204.55 L1618.76 1204.55 L1618.18 1204.55 L1617.59 1204.55 L1617.01 1204.55 L1616.42 1204.55 L1615.83 1204.55 L1615.25 1204.55 L1614.66 1204.55 L1614.07 1204.55 L1613.49 1204.55 L1612.9 1204.55 L1612.31 1204.55 L1611.73 1204.55 L1611.14 1204.55 L1610.55 1204.55 L1609.97 1204.55 L1609.38 1204.55 L1608.8 1204.55 L1608.21 1204.55 L1607.62 1204.55 L1607.04 1204.55 L1606.45 1204.55 L1605.86 1204.55 L1605.28 1204.55 L1604.69 1204.55 L1604.1 1204.55 L1603.52 1204.55 L1602.93 1204.55 L1602.34 1204.55 L1601.76 1204.55 L1601.17 1204.55 L1600.59 1204.55 L1600 1204.55 L1599.41 1204.55 L1598.83 1204.55 L1598.24 1204.55 L1597.65 1204.55 L1597.07 1204.55 L1596.48 1204.55 L1595.89 1204.55 L1595.31 1204.55 L1594.72 1204.55 L1594.14 1204.55 L1593.55 1204.55 L1592.96 1204.55 L1592.38 1204.55 L1591.79 1204.55 L1591.2 1204.55 L1590.62 1204.55 L1590.03 1204.55 L1589.44 1204.55 L1588.86 1204.55 L1588.27 1204.55 L1587.68 1204.55 L1587.1 1204.55 L1586.51 1204.55 L1585.93 1204.55 L1585.34 1204.55 L1584.75 1204.55 L1584.17 1204.55 L1583.58 1204.55 L1582.99 1204.55 L1582.41 1204.55 L1581.82 1204.55 L1581.23 1204.55 L1580.65 1204.55 L1580.06 1204.55 L1579.47 1204.55 L1578.89 1204.55 L1578.3 1204.55 L1577.72 1204.55 L1577.13 1204.55 L1576.54 1204.55 L1575.96 1204.55 L1575.37 1204.55 L1574.78 1204.55 L1574.2 1204.55 L1573.61 1204.55 L1573.02 1204.55 L1572.44 1204.55 L1571.85 1204.55 L1571.27 1204.55 L1570.68 1204.55 L1570.09 1204.55 L1569.51 1204.55 L1568.92 1204.55 L1568.33 1204.55 L1567.75 1204.55 L1567.16 1204.55 L1566.57 1204.55 L1565.99 1204.55 L1565.4 1204.55 L1564.81 1204.55 L1564.23 1204.55 L1563.64 1204.55 L1563.06 1204.55 L1562.47 1204.55 L1561.88 1204.55 L1561.3 1204.55 L1560.71 1204.55 L1560.12 1204.55 L1559.54 1204.55 L1558.95 1204.55 L1558.36 1204.55 L1557.78 1204.55 L1557.19 1204.55 L1556.6 1204.55 L1556.02 1204.55 L1555.43 1204.55 L1554.85 1204.55 L1554.26 1204.55 L1553.67 1204.55 L1553.09 1204.55 L1552.5 1204.55 L1551.91 1204.55 L1551.33 1204.55 L1550.74 1204.55 L1550.15 1204.55 L1549.57 1204.55 L1548.98 1204.55 L1548.4 1204.55 L1547.81 1204.55 L1547.22 1204.55 L1546.64 1204.55 L1546.05 1204.55 L1545.46 1204.55 L1544.88 1204.55 L1544.29 1204.55 L1543.7 1204.55 L1543.12 1204.55 L1542.53 1204.55 L1541.94 1204.55 L1541.36 1204.55 L1540.77 1204.55 L1540.19 1204.55 L1539.6 1204.55 L1539.01 1204.55 L1538.43 1204.55 L1537.84 1204.55 L1537.25 1204.55 L1536.67 1204.55 L1536.08 1204.55 L1535.49 1204.55 L1534.91 1204.55 L1534.32 1204.55 L1533.73 1204.55 L1533.15 1204.55 L1532.56 1204.55 L1531.98 1204.55 L1531.39 1204.55 L1530.8 1204.55 L1530.22 1204.55 L1529.63 1204.55 L1529.04 1204.55 L1528.46 1204.55 L1527.87 1204.55 L1527.28 1204.55 L1526.7 1204.55 L1526.11 1204.55 L1525.52 1204.55 L1524.94 1204.55 L1524.35 1204.55 L1523.77 1204.55 L1523.18 1204.55 L1522.59 1204.55 L1522.01 1204.55 L1521.42 1204.55 L1520.83 1204.55 L1520.25 1204.55 L1519.66 1204.55 L1519.07 1204.55 L1518.49 1204.55 L1517.9 1204.55 L1517.32 1204.55 L1516.73 1204.55 L1516.14 1204.55 L1515.56 1204.55 L1514.97 1204.55 L1514.38 1204.55 L1513.8 1204.55 L1513.21 1204.55 L1512.62 1204.55 L1512.04 1204.55 L1511.45 1204.55 L1510.86 1204.55 L1510.28 1204.55 L1509.69 1204.55 L1509.11 1204.55 L1508.52 1204.55 L1507.93 1204.55 L1507.35 1204.55 L1506.76 1204.55 L1506.17 1204.55 L1505.59 1204.55 L1505 1204.55 L1504.41 1204.55 L1503.83 1204.55 L1503.24 1204.55 L1502.65 1204.55 L1502.07 1204.55 L1501.48 1204.55 L1500.9 1204.55 L1500.31 1204.55 L1499.72 1204.55 L1499.14 1204.55 L1498.55 1204.55 L1497.96 1204.55 L1497.38 1204.55 L1496.79 1204.55 L1496.2 1204.55 L1495.62 1204.55 L1495.03 1204.55 L1494.45 1204.55 L1493.86 1204.55 L1493.27 1204.55 L1492.69 1204.55 L1492.1 1204.55 L1491.51 1204.55 L1490.93 1204.55 L1490.34 1204.55 L1489.75 1204.55 L1489.17 1204.55 L1488.58 1204.55 L1487.99 1204.55 L1487.41 1204.55 L1486.82 1204.55 L1486.24 1204.55 L1485.65 1204.55 L1485.06 1204.55 L1484.48 1204.55 L1483.89 1204.55 L1483.3 1204.55 L1482.72 1204.55 L1482.13 1204.55 L1481.54 1204.55 L1480.96 1204.55 L1480.37 1204.55 L1479.78 1204.55 L1479.2 1204.55 L1478.61 1204.55 L1478.03 1204.55 L1477.44 1204.55 L1476.85 1204.55 L1476.27 1204.55 L1475.68 1204.55 L1475.09 1204.55 L1474.51 1204.55 L1473.92 1204.55 L1473.33 1204.55 L1472.75 1204.55 L1472.16 1204.55 L1471.57 1204.55 L1470.99 1204.55 L1470.4 1204.55 L1469.82 1204.55 L1469.23 1204.55 L1468.64 1204.55 L1468.06 1204.55 L1467.47 1204.55 L1466.88 1204.55 L1466.3 1204.55 L1465.71 1204.55 L1465.12 1204.55 L1464.54 1204.55 L1463.95 1204.55 L1463.37 1204.55 L1462.78 1204.55 L1462.19 1204.55 L1461.61 1204.55 L1461.02 1204.55 L1460.43 1204.55 L1459.85 1204.55 L1459.26 1204.55 L1458.67 1204.55 L1458.09 1204.55 L1457.5 1204.55 L1456.91 1204.55 L1456.33 1204.55 L1455.74 1204.55 L1455.16 1204.55 L1454.57 1204.55 L1453.98 1204.55 L1453.4 1204.55 L1452.81 1204.55 L1452.22 1204.55 L1451.64 1204.55 L1451.05 1204.55 L1450.46 1204.55 L1449.88 1204.55 L1449.29 1204.55 L1448.7 1204.55 L1448.12 1204.55 L1447.53 1204.55 L1446.95 1204.55 L1446.36 1204.55 L1445.77 1204.55 L1445.19 1204.55 L1444.6 1204.55 L1444.01 1204.55 L1443.43 1204.55 L1442.84 1204.55 L1442.25 1204.55 L1441.67 1204.55 L1441.08 1204.55 L1440.5 1204.55 L1439.91 1204.55 L1439.32 1204.55 L1438.74 1204.55 L1438.15 1204.55 L1437.56 1204.55 L1436.98 1204.55 L1436.39 1204.55 L1435.8 1204.55 L1435.22 1204.55 L1434.63 1204.55 L1434.04 1204.55 L1433.46 1204.55 L1432.87 1204.55 L1432.29 1204.55 L1431.7 1204.55 L1431.11 1204.55 L1430.53 1204.55 L1429.94 1204.55 L1429.35 1204.55 L1428.77 1204.55 L1428.18 1204.55 L1427.59 1204.55 L1427.01 1204.55 L1426.42 1204.55 L1425.83 1204.55 L1425.25 1204.55 L1424.66 1204.55 L1424.08 1204.55 L1423.49 1204.55 L1422.9 1204.55 L1422.32 1204.55 L1421.73 1204.55 L1421.14 1204.55 L1420.56 1204.55 L1419.97 1204.55 L1419.38 1204.55 L1418.8 1204.55 L1418.21 1204.55 L1417.63 1204.55 L1417.04 1204.55 L1416.45 1204.55 L1415.87 1204.55 L1415.28 1204.55 L1414.69 1204.55 L1414.11 1204.55 L1413.52 1204.55 L1412.93 1204.55 L1412.35 1204.55 L1411.76 1204.55 L1411.17 1204.55 L1410.59 1204.55 L1410 1204.55 L1409.42 1204.55 L1408.83 1204.55 L1408.24 1204.55 L1407.66 1204.55 L1407.07 1204.55 L1406.48 1204.55 L1405.9 1204.55 L1405.31 1204.55 L1404.72 1204.55 L1404.14 1204.55 L1403.55 1204.55 L1402.96 1204.55 L1402.38 1204.55 L1401.79 1204.55 L1401.21 1204.55 L1400.62 1204.55 L1400.03 1204.55 L1399.45 1204.55 L1398.86 1204.55 L1398.27 1204.55 L1397.69 1204.55 L1397.1 1204.55 L1396.51 1204.55 L1395.93 1204.55 L1395.34 1204.55 L1394.75 1204.55 L1394.17 1204.55 L1393.58 1204.55 L1393 1204.55 L1392.41 1204.55 L1391.82 1204.55 L1391.24 1204.55 L1390.65 1204.55 L1390.06 1204.55 L1389.48 1204.55 L1388.89 1204.55 L1388.3 1204.55 L1387.72 1204.55 L1387.13 1204.55 L1386.55 1204.55 L1385.96 1204.55 L1385.37 1204.55 L1384.79 1204.55 L1384.2 1204.55 L1383.61 1204.55 L1383.03 1204.55 L1382.44 1204.55 L1381.85 1204.55 L1381.27 1204.55 L1380.68 1204.55 L1380.09 1204.55 L1379.51 1204.55 L1378.92 1204.55 L1378.34 1204.55 L1377.75 1204.55 L1377.16 1204.55 L1376.58 1204.55 L1375.99 1204.55 L1375.4 1204.55 L1374.82 1204.55 L1374.23 1204.55 L1373.64 1204.55 L1373.06 1204.55 L1372.47 1204.55 L1371.88 1204.55 L1371.3 1204.55 L1370.71 1204.55 L1370.13 1204.55 L1369.54 1204.55 L1368.95 1204.55 L1368.37 1204.55 L1367.78 1204.55 L1367.19 1204.55 L1366.61 1204.55 L1366.02 1204.55 L1365.43 1204.55 L1364.85 1204.55 L1364.26 1204.55 L1363.68 1204.55 L1363.09 1204.55 L1362.5 1204.55 L1361.92 1204.55 L1361.33 1204.55 L1360.74 1204.55 L1360.16 1204.55 L1359.57 1204.55 L1358.98 1204.55 L1358.4 1204.55 L1357.81 1204.55 L1357.22 1204.55 L1356.64 1204.55 L1356.05 1204.55 L1355.47 1204.55 L1354.88 1204.55 L1354.29 1204.55 L1353.71 1204.55 L1353.12 1204.55 L1352.53 1204.55 L1351.95 1204.55 L1351.36 1204.55 L1350.77 1204.55 L1350.19 1204.55 L1349.6 1204.55 L1349.01 1204.55 L1348.43 1204.55 L1347.84 1204.55 L1347.26 1204.55 L1346.67 1204.55 L1346.08 1204.55 L1345.5 1204.55 L1344.91 1204.55 L1344.32 1204.55 L1343.74 1204.55 L1343.15 1204.55 L1342.56 1204.55 L1341.98 1204.55 L1341.39 1204.55 L1340.8 1204.55 L1340.22 1204.55 L1339.63 1204.55 L1339.05 1204.55 L1338.46 1204.55 L1337.87 1204.55 L1337.29 1204.55 L1336.7 1204.55 L1336.11 1204.55 L1335.53 1204.55 L1334.94 1204.55 L1334.35 1204.55 L1333.77 1204.55 L1333.18 1204.55 L1332.6 1204.55 L1332.01 1204.55 L1331.42 1204.55 L1330.84 1204.55 L1330.25 1204.55 L1329.66 1204.55 L1329.08 1204.55 L1328.49 1204.55 L1327.9 1204.55 L1327.32 1204.55 L1326.73 1204.55 L1326.14 1204.55 L1325.56 1204.55 L1324.97 1204.55 L1324.39 1204.55 L1323.8 1204.55 L1323.21 1204.55 L1322.63 1204.55 L1322.04 1204.55 L1321.45 1204.55 L1320.87 1204.55 L1320.28 1204.55 L1319.69 1204.55 L1319.11 1204.55 L1318.52 1204.55 L1317.93 1204.55 L1317.35 1204.55 L1316.76 1204.55 L1316.18 1204.55 L1315.59 1204.55 L1315 1204.55 L1314.42 1204.55 L1313.83 1204.55 L1313.24 1204.55 L1312.66 1204.55 L1312.07 1204.55 L1311.48 1204.55 L1310.9 1204.55 L1310.31 1204.55 L1309.73 1204.55 L1309.14 1204.55 L1308.55 1204.55 L1307.97 1204.55 L1307.38 1204.55 L1306.79 1204.55 L1306.21 1204.55 L1305.62 1204.55 L1305.03 1204.55 L1304.45 1204.55 L1303.86 1204.55 L1303.27 1204.55 L1302.69 1204.55 L1302.1 1204.55 L1301.52 1204.55 L1300.93 1204.55 L1300.34 1204.55 L1299.76 1204.55 L1299.17 1204.55 L1298.58 1204.55 L1298 1204.55 L1297.41 1204.55 L1296.82 1204.55 L1296.24 1204.55 L1295.65 1204.55 L1295.06 1204.55 L1294.48 1204.55 L1293.89 1204.55 L1293.31 1204.55 L1292.72 1204.55 L1292.13 1204.55 L1291.55 1204.55 L1290.96 1204.55 L1290.37 1204.55 L1289.79 1204.55 L1289.2 1204.55 L1288.61 1204.55 L1288.03 1204.55 L1287.44 1204.55 L1286.86 1204.55 L1286.27 1204.55 L1285.68 1204.55 L1285.1 1204.55 L1284.51 1204.55 L1283.92 1204.55 L1283.34 1204.55 L1282.75 1204.55 L1282.16 1204.55 L1281.58 1204.55 L1280.99 1204.55 L1280.4 1204.55 L1279.82 1204.55 L1279.23 1204.55 L1278.65 1204.55 L1278.06 1204.55 L1277.47 1204.55 L1276.89 1204.55 L1276.3 1204.55 L1275.71 1204.55 L1275.13 1204.55 L1274.54 1204.55 L1273.95 1204.55 L1273.37 1204.55 L1272.78 1204.55 L1272.19 1204.55 L1271.61 1204.55 L1271.02 1204.55 L1270.44 1204.55 L1269.85 1204.55 L1269.26 1204.55 L1268.68 1204.55 L1268.09 1204.55 L1267.5 1204.55 L1266.92 1204.55 L1266.33 1204.55 L1265.74 1204.55 L1265.16 1204.55 L1264.57 1204.55 L1263.98 1204.55 L1263.4 1204.55 L1262.81 1204.55 L1262.23 1204.55 L1261.64 1204.55 L1261.05 1204.55 L1260.47 1204.55 L1259.88 1204.55 L1259.29 1204.55 L1258.71 1204.55 L1258.12 1204.55 L1257.53 1204.55 L1256.95 1204.55 L1256.36 1204.55 L1255.78 1204.55 L1255.19 1204.55 L1254.6 1204.55 L1254.02 1204.55 L1253.43 1204.55 L1252.84 1204.55 L1252.26 1204.55 L1251.67 1204.55 L1251.08 1204.55 L1250.5 1204.55 L1249.91 1204.55 L1249.32 1204.55 L1248.74 1204.55 L1248.15 1204.55 L1247.57 1204.55 L1246.98 1204.55 L1246.39 1204.55 L1245.81 1204.55 L1245.22 1204.55 L1244.63 1204.55 L1244.05 1204.55 L1243.46 1204.55 L1242.87 1204.55 L1242.29 1204.55 L1241.7 1204.55 L1241.11 1204.55 L1240.53 1204.55 L1239.94 1204.55 L1239.36 1204.55 L1238.77 1204.55 L1238.18 1204.55 L1237.6 1204.55 L1237.01 1204.55 L1236.42 1204.55 L1235.84 1204.55 L1235.25 1204.55 L1234.66 1204.55 L1234.08 1204.55 L1233.49 1204.55 L1232.91 1204.55 L1232.32 1204.55 L1231.73 1204.55 L1231.15 1204.55 L1230.56 1204.55 L1229.97 1204.55 L1229.39 1204.55 L1228.8 1204.55 L1228.21 1204.55 L1227.63 1204.55 L1227.04 1204.55 L1226.45 1204.55 L1225.87 1204.55 L1225.28 1204.55 L1224.7 1204.55 L1224.11 1204.55 L1223.52 1204.55 L1222.94 1204.55 L1222.35 1204.55 L1221.76 1204.55 L1221.18 1204.55 L1220.59 1204.55 L1220 1204.55 L1219.42 1204.55 L1218.83 1204.55 L1218.24 1204.55 L1217.66 1204.55 L1217.07 1204.55 L1216.49 1204.55 L1215.9 1204.55 L1215.31 1204.55 L1214.73 1204.55 L1214.14 1204.55 L1213.55 1204.55 L1212.97 1204.55 L1212.38 1204.55 L1211.79 1204.55 L1211.21 1204.55 L1210.62 1204.55 L1210.03 1204.55 L1209.45 1204.55 L1208.86 1204.55 L1208.28 1204.55 L1207.69 1204.55 L1207.1 1204.55 L1206.52 1204.55 L1205.93 1204.55 L1205.34 1204.55 L1204.76 1204.55 L1204.17 1204.55 L1203.58 1204.55 L1203 1204.55 L1202.41 1204.55 L1201.83 1204.55 L1201.24 1204.55 L1200.65 1204.55 L1200.07 1204.55 L1199.48 1204.55 L1198.89 1204.55 L1198.31 1204.55 L1197.72 1204.55 L1197.13 1204.55 L1196.55 1204.55 L1195.96 1204.55 L1195.37 1204.55 L1194.79 1204.55 L1194.2 1204.55 L1193.62 1204.55 L1193.03 1204.55 L1192.44 1204.55 L1191.86 1204.55 L1191.27 1204.55 L1190.68 1204.55 L1190.1 1204.55 L1189.51 1204.55 L1188.92 1204.55 L1188.34 1204.55 L1187.75 1204.55 L1187.16 1204.55 L1186.58 1204.55 L1185.99 1204.55 L1185.41 1204.55 L1184.82 1204.55 L1184.23 1204.55 L1183.65 1204.55 L1183.06 1204.55 L1182.47 1204.55 L1181.89 1204.55 L1181.3 1204.55 L1180.71 1204.55 L1180.13 1204.55 L1179.54 1204.55 L1178.96 1204.55 L1178.37 1204.55 L1177.78 1204.55 L1177.2 1204.55 L1176.61 1204.55 L1176.02 1204.55 L1175.44 1204.55 L1174.85 1204.55 L1174.26 1204.55 L1173.68 1204.55 L1173.09 1204.55 L1172.5 1204.55 L1171.92 1204.55 L1171.33 1204.55 L1170.75 1204.55 L1170.16 1204.55 L1169.57 1204.55 L1168.99 1204.55 L1168.4 1204.55 L1167.81 1204.55 L1167.23 1204.55 L1166.64 1204.55 L1166.05 1204.55 L1165.47 1204.55 L1164.88 1204.55 L1164.29 1204.55 L1163.71 1204.55 L1163.12 1204.55 L1162.54 1204.55 L1161.95 1204.55 L1161.36 1204.55 L1160.78 1204.55 L1160.19 1204.55 L1159.6 1204.55 L1159.02 1204.55 L1158.43 1204.55 L1157.84 1204.55 L1157.26 1204.55 L1156.67 1204.55 L1156.09 1204.55 L1155.5 1204.55 L1154.91 1204.55 L1154.33 1204.55 L1153.74 1204.55 L1153.15 1204.55 L1152.57 1204.55 L1151.98 1204.55 L1151.39 1204.55 L1150.81 1204.55 L1150.22 1204.55 L1149.63 1204.55 L1149.05 1204.55 L1148.46 1204.55 L1147.88 1204.55 L1147.29 1204.55 L1146.7 1204.55 L1146.12 1204.55 L1145.53 1204.55 L1144.94 1204.55 L1144.36 1204.55 L1143.77 1204.55 L1143.18 1204.55 L1142.6 1204.55 L1142.01 1204.55 L1141.42 1204.55 L1140.84 1204.55 L1140.25 1204.55 L1139.67 1204.55 L1139.08 1204.55 L1138.49 1204.55 L1137.91 1204.55 L1137.32 1204.55 L1136.73 1204.55 L1136.15 1204.55 L1135.56 1204.55 L1134.97 1204.55 L1134.39 1204.55 L1133.8 1204.55 L1133.21 1204.55 L1132.63 1204.55 L1132.04 1204.55 L1131.46 1204.55 L1130.87 1204.55 L1130.28 1204.55 L1129.7 1204.55 L1129.11 1204.55 L1128.52 1204.55 L1127.94 1204.55 L1127.35 1204.55 L1126.76 1204.55 L1126.18 1204.55 L1125.59 1204.55 L1125.01 1204.55 L1124.42 1204.55 L1123.83 1204.55 L1123.25 1204.55 L1122.66 1204.55 L1122.07 1204.55 L1121.49 1204.55 L1120.9 1204.55 L1120.31 1204.55 L1119.73 1204.55 L1119.14 1204.55 L1118.55 1204.55 L1117.97 1204.55 L1117.38 1204.55 L1116.8 1204.55 L1116.21 1204.55 L1115.62 1204.55 L1115.04 1204.55 L1114.45 1204.55 L1113.86 1204.55 L1113.28 1204.55 L1112.69 1204.55 L1112.1 1204.55 L1111.52 1204.55 L1110.93 1204.55 L1110.34 1204.55 L1109.76 1204.55 L1109.17 1204.55 L1108.59 1204.55 L1108 1204.55 L1107.41 1204.55 L1106.83 1204.55 L1106.24 1204.55 L1105.65 1204.55 L1105.07 1204.55 L1104.48 1204.55 L1103.89 1204.55 L1103.31 1204.55 L1102.72 1204.55 L1102.14 1204.55 L1101.55 1204.55 L1100.96 1204.55 L1100.38 1204.55 L1099.79 1204.55 L1099.2 1204.55 L1098.62 1204.55 L1098.03 1204.55 L1097.44 1204.55 L1096.86 1204.55 L1096.27 1204.55 L1095.68 1204.55 L1095.1 1204.55 L1094.51 1204.55 L1093.93 1204.55 L1093.34 1204.55 L1092.75 1204.55 L1092.17 1204.55 L1091.58 1204.55 L1090.99 1204.55 L1090.41 1204.55 L1089.82 1204.55 L1089.23 1204.55 L1088.65 1204.55 L1088.06 1204.55 L1087.47 1204.55 L1086.89 1204.55 L1086.3 1204.55 L1085.72 1204.55 L1085.13 1204.55 L1084.54 1204.55 L1083.96 1204.55 L1083.37 1204.55 L1082.78 1204.55 L1082.2 1204.55 L1081.61 1204.55 L1081.02 1204.55 L1080.44 1204.55 L1079.85 1204.55 L1079.26 1204.55 L1078.68 1204.55 L1078.09 1204.55 L1077.51 1204.55 L1076.92 1204.55 L1076.33 1204.55 L1075.75 1204.55 L1075.16 1204.55 L1074.57 1204.55 L1073.99 1204.55 L1073.4 1204.55 L1072.81 1204.55 L1072.23 1204.55 L1071.64 1204.55 L1071.06 1204.55 L1070.47 1204.55 L1069.88 1204.55 L1069.3 1204.55 L1068.71 1204.55 L1068.12 1204.55 L1067.54 1204.55 L1066.95 1204.55 L1066.36 1204.55 L1065.78 1204.55 L1065.19 1204.55 L1064.6 1204.55 L1064.02 1204.55 L1063.43 1204.55 L1062.85 1204.55 L1062.26 1204.55 L1061.67 1204.55 L1061.09 1204.55 L1060.5 1204.55 L1059.91 1204.55 L1059.33 1204.55 L1058.74 1204.55 L1058.15 1204.55 L1057.57 1204.55 L1056.98 1204.55 L1056.39 1204.55 L1055.81 1204.55 L1055.22 1204.55 L1054.64 1204.55 L1054.05 1204.55 L1053.46 1204.55 L1052.88 1204.55 L1052.29 1204.55 L1051.7 1204.55 L1051.12 1204.55 L1050.53 1204.55 L1049.94 1204.55 L1049.36 1204.55 L1048.77 1204.55 L1048.19 1204.55 L1047.6 1204.55 L1047.01 1204.55 L1046.43 1204.55 L1045.84 1204.55 L1045.25 1204.55 L1044.67 1204.55 L1044.08 1204.55 L1043.49 1204.55 L1042.91 1204.55 L1042.32 1204.55 L1041.73 1204.55 L1041.15 1204.55 L1040.56 1204.55 L1039.98 1204.55 L1039.39 1204.55 L1038.8 1204.55 L1038.22 1204.55 L1037.63 1204.55 L1037.04 1204.55 L1036.46 1204.55 L1035.87 1204.55 L1035.28 1204.55 L1034.7 1204.55 L1034.11 1204.55 L1033.52 1204.55 L1032.94 1204.55 L1032.35 1204.55 L1031.77 1204.55 L1031.18 1204.55 L1030.59 1204.55 L1030.01 1204.55 L1029.42 1204.55 L1028.83 1204.55 L1028.25 1204.55 L1027.66 1204.55 L1027.07 1204.55 L1026.49 1204.55 L1025.9 1204.55 L1025.32 1204.55 L1024.73 1204.55 L1024.14 1204.55 L1023.56 1204.55 L1022.97 1204.55 L1022.38 1204.55 L1021.8 1204.55 L1021.21 1204.55 L1020.62 1204.55 L1020.04 1204.55 L1019.45 1204.55 L1018.86 1204.55 L1018.28 1204.55 L1017.69 1204.55 L1017.11 1204.55 L1016.52 1204.55 L1015.93 1204.55 L1015.35 1204.55 L1014.76 1204.55 L1014.17 1204.55 L1013.59 1204.55 L1013 1204.55 L1012.41 1204.55 L1011.83 1204.55 L1011.24 1204.55 L1010.65 1204.55 L1010.07 1204.55 L1009.48 1204.55 L1008.9 1204.55 L1008.31 1204.55 L1007.72 1204.55 L1007.14 1204.55 L1006.55 1204.55 L1005.96 1204.55 L1005.38 1204.55 L1004.79 1204.55 L1004.2 1204.55 L1003.62 1204.55 L1003.03 1204.55 L1002.44 1204.55 L1001.86 1204.55 L1001.27 1204.55 L1000.69 1204.55 L1000.1 1204.55 L999.513 1204.55 L998.926 1204.55 L998.34 1204.55 L997.754 1204.55 L997.167 1204.55 L996.581 1204.55 L995.994 1204.55 L995.408 1204.55 L994.822 1204.55 L994.235 1204.55 L993.649 1204.55 L993.062 1204.55 L992.476 1204.55 L991.889 1204.55 L991.303 1204.55 L990.717 1204.55 L990.13 1204.55 L989.544 1204.55 L988.957 1204.55 L988.371 1204.55 L987.785 1204.55 L987.198 1204.55 L986.612 1204.55 L986.025 1204.55  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1204.62 986.612,1204.62 987.198,1204.62 987.785,1204.62 988.371,1204.62 988.957,1204.62 989.544,1204.62 990.13,1204.62 990.717,1204.62 991.303,1204.62 991.889,1204.62 992.476,1204.62 993.062,1204.62 993.649,1204.62 994.235,1204.62 994.822,1204.62 995.408,1204.62 995.994,1204.62 996.581,1204.62 997.167,1204.62 997.754,1204.62 998.34,1204.62 998.926,1204.62 999.513,1204.62 1000.1,1204.62 1000.69,1204.62 1001.27,1204.62 1001.86,1204.62 1002.44,1204.62 1003.03,1204.62 1003.62,1204.62 1004.2,1204.62 1004.79,1204.62 1005.38,1204.62 1005.96,1204.62 1006.55,1204.62 1007.14,1204.62 1007.72,1204.62 1008.31,1204.62 1008.9,1204.62 1009.48,1204.62 1010.07,1204.62 1010.65,1204.62 1011.24,1204.62 1011.83,1204.62 1012.41,1204.62 1013,1204.62 1013.59,1204.62 1014.17,1204.62 1014.76,1204.62 1015.35,1204.62 1015.93,1204.62 1016.52,1204.62 1017.11,1204.62 1017.69,1204.62 1018.28,1204.62 1018.86,1204.62 1019.45,1204.62 1020.04,1204.62 1020.62,1204.62 1021.21,1204.62 1021.8,1204.62 1022.38,1204.62 1022.97,1204.62 1023.56,1204.62 1024.14,1204.62 1024.73,1204.62 1025.32,1204.62 1025.9,1204.62 1026.49,1204.62 1027.07,1204.62 1027.66,1204.62 1028.25,1204.62 1028.83,1204.62 1029.42,1204.62 1030.01,1204.62 1030.59,1204.62 1031.18,1204.62 1031.77,1204.62 1032.35,1204.62 1032.94,1204.62 1033.52,1204.62 1034.11,1204.62 1034.7,1204.62 1035.28,1204.62 1035.87,1204.62 1036.46,1204.62 1037.04,1204.62 1037.63,1204.62 1038.22,1204.62 1038.8,1204.62 1039.39,1204.62 1039.98,1204.62 1040.56,1204.62 1041.15,1204.62 1041.73,1204.62 1042.32,1204.62 1042.91,1204.62 1043.49,1204.62 1044.08,1204.62 1044.67,1204.62 1045.25,1204.62 1045.84,1204.62 1046.43,1204.62 1047.01,1204.62 1047.6,1204.62 1048.19,1204.62 1048.77,1204.62 1049.36,1204.62 1049.94,1204.62 1050.53,1204.62 1051.12,1204.62 1051.7,1204.62 1052.29,1204.62 1052.88,1204.62 1053.46,1204.62 1054.05,1204.62 1054.64,1204.62 1055.22,1204.62 1055.81,1204.62 1056.39,1204.62 1056.98,1204.62 1057.57,1204.62 1058.15,1204.62 1058.74,1204.62 1059.33,1204.62 1059.91,1204.62 1060.5,1204.62 1061.09,1204.62 1061.67,1204.62 1062.26,1204.62 1062.85,1204.62 1063.43,1204.62 1064.02,1204.62 1064.6,1204.62 1065.19,1204.62 1065.78,1204.62 1066.36,1204.62 1066.95,1204.62 1067.54,1204.62 1068.12,1204.62 1068.71,1204.62 1069.3,1204.62 1069.88,1204.62 1070.47,1204.62 1071.06,1204.62 1071.64,1204.62 1072.23,1204.62 1072.81,1204.62 1073.4,1204.62 1073.99,1204.62 1074.57,1204.62 1075.16,1204.62 1075.75,1204.62 1076.33,1204.62 1076.92,1204.62 1077.51,1204.62 1078.09,1204.62 1078.68,1204.62 1079.26,1204.62 1079.85,1204.62 1080.44,1204.62 1081.02,1204.62 1081.61,1204.62 1082.2,1204.62 1082.78,1204.62 1083.37,1204.62 1083.96,1204.62 1084.54,1204.62 1085.13,1204.62 1085.72,1204.62 1086.3,1204.62 1086.89,1204.62 1087.47,1204.62 1088.06,1204.62 1088.65,1204.62 1089.23,1204.62 1089.82,1204.62 1090.41,1204.62 1090.99,1204.62 1091.58,1204.62 1092.17,1204.62 1092.75,1204.62 1093.34,1204.62 1093.93,1204.62 1094.51,1204.62 1095.1,1204.62 1095.68,1204.62 1096.27,1204.62 1096.86,1204.62 1097.44,1204.62 1098.03,1204.62 1098.62,1204.62 1099.2,1204.62 1099.79,1204.62 1100.38,1204.62 1100.96,1204.62 1101.55,1204.62 1102.14,1204.62 1102.72,1204.62 1103.31,1204.62 1103.89,1204.62 1104.48,1204.62 1105.07,1204.62 1105.65,1204.62 1106.24,1204.62 1106.83,1204.62 1107.41,1204.62 1108,1204.62 1108.59,1204.62 1109.17,1204.62 1109.76,1204.62 1110.34,1204.62 1110.93,1204.62 1111.52,1204.62 1112.1,1204.62 1112.69,1204.62 1113.28,1204.62 1113.86,1204.62 1114.45,1204.62 1115.04,1204.62 1115.62,1204.62 1116.21,1204.62 1116.8,1204.62 1117.38,1204.62 1117.97,1204.62 1118.55,1204.62 1119.14,1204.62 1119.73,1204.62 1120.31,1204.62 1120.9,1204.62 1121.49,1204.62 1122.07,1204.62 1122.66,1204.62 1123.25,1204.62 1123.83,1204.62 1124.42,1204.62 1125.01,1204.62 1125.59,1204.62 1126.18,1204.62 1126.76,1204.62 1127.35,1204.62 1127.94,1204.62 1128.52,1204.62 1129.11,1204.62 1129.7,1204.62 1130.28,1204.62 1130.87,1204.62 1131.46,1204.62 1132.04,1204.62 1132.63,1204.62 1133.21,1204.62 1133.8,1204.62 1134.39,1204.62 1134.97,1204.62 1135.56,1204.62 1136.15,1204.62 1136.73,1204.62 1137.32,1204.62 1137.91,1204.62 1138.49,1204.62 1139.08,1204.62 1139.67,1204.62 1140.25,1204.62 1140.84,1204.62 1141.42,1204.62 1142.01,1204.62 1142.6,1204.62 1143.18,1204.62 1143.77,1204.62 1144.36,1204.62 1144.94,1204.62 1145.53,1204.62 1146.12,1204.62 1146.7,1204.62 1147.29,1204.62 1147.88,1204.62 1148.46,1204.62 1149.05,1204.62 1149.63,1204.62 1150.22,1204.62 1150.81,1204.62 1151.39,1204.62 1151.98,1204.62 1152.57,1204.62 1153.15,1204.62 1153.74,1204.62 1154.33,1204.62 1154.91,1204.62 1155.5,1204.62 1156.09,1204.62 1156.67,1204.62 1157.26,1204.62 1157.84,1204.62 1158.43,1204.62 1159.02,1204.62 1159.6,1204.62 1160.19,1204.62 1160.78,1204.62 1161.36,1204.62 1161.95,1204.62 1162.54,1204.62 1163.12,1204.62 1163.71,1204.62 1164.29,1204.62 1164.88,1204.62 1165.47,1204.62 1166.05,1204.62 1166.64,1204.62 1167.23,1204.62 1167.81,1204.62 1168.4,1204.62 1168.99,1204.62 1169.57,1204.62 1170.16,1204.62 1170.75,1204.62 1171.33,1204.62 1171.92,1204.62 1172.5,1204.62 1173.09,1204.62 1173.68,1204.62 1174.26,1204.62 1174.85,1204.62 1175.44,1204.62 1176.02,1204.62 1176.61,1204.62 1177.2,1204.62 1177.78,1204.62 1178.37,1204.62 1178.96,1204.62 1179.54,1204.62 1180.13,1204.62 1180.71,1204.62 1181.3,1204.62 1181.89,1204.62 1182.47,1204.62 1183.06,1204.62 1183.65,1204.62 1184.23,1204.62 1184.82,1204.62 1185.41,1204.62 1185.99,1204.62 1186.58,1204.62 1187.16,1204.62 1187.75,1204.62 1188.34,1204.62 1188.92,1204.62 1189.51,1204.62 1190.1,1204.62 1190.68,1204.62 1191.27,1204.62 1191.86,1204.62 1192.44,1204.62 1193.03,1204.62 1193.62,1204.62 1194.2,1204.62 1194.79,1204.62 1195.37,1204.62 1195.96,1204.62 1196.55,1204.62 1197.13,1204.62 1197.72,1204.62 1198.31,1204.62 1198.89,1204.62 1199.48,1204.62 1200.07,1204.62 1200.65,1204.62 1201.24,1204.62 1201.83,1204.62 1202.41,1204.62 1203,1204.62 1203.58,1204.62 1204.17,1204.62 1204.76,1204.62 1205.34,1204.62 1205.93,1204.62 1206.52,1204.62 1207.1,1204.62 1207.69,1204.62 1208.28,1204.62 1208.86,1204.62 1209.45,1204.62 1210.03,1204.62 1210.62,1204.62 1211.21,1204.62 1211.79,1204.62 1212.38,1204.62 1212.97,1204.62 1213.55,1204.62 1214.14,1204.62 1214.73,1204.62 1215.31,1204.62 1215.9,1204.62 1216.49,1204.62 1217.07,1204.62 1217.66,1204.62 1218.24,1204.62 1218.83,1204.62 1219.42,1204.62 1220,1204.62 1220.59,1204.62 1221.18,1204.62 1221.76,1204.62 1222.35,1204.62 1222.94,1204.62 1223.52,1204.62 1224.11,1204.62 1224.7,1204.62 1225.28,1204.62 1225.87,1204.62 1226.45,1204.62 1227.04,1204.62 1227.63,1204.62 1228.21,1204.62 1228.8,1204.62 1229.39,1204.62 1229.97,1204.62 1230.56,1204.62 1231.15,1204.62 1231.73,1204.62 1232.32,1204.62 1232.91,1204.62 1233.49,1204.62 1234.08,1204.62 1234.66,1204.62 1235.25,1204.62 1235.84,1204.62 1236.42,1204.62 1237.01,1204.62 1237.6,1204.62 1238.18,1204.62 1238.77,1204.62 1239.36,1204.62 1239.94,1204.62 1240.53,1204.62 1241.11,1204.62 1241.7,1204.62 1242.29,1204.62 1242.87,1204.62 1243.46,1204.62 1244.05,1204.62 1244.63,1204.62 1245.22,1204.62 1245.81,1204.62 1246.39,1204.62 1246.98,1204.62 1247.57,1204.62 1248.15,1204.62 1248.74,1204.62 1249.32,1204.62 1249.91,1204.62 1250.5,1204.62 1251.08,1204.62 1251.67,1204.62 1252.26,1204.62 1252.84,1204.62 1253.43,1204.62 1254.02,1204.62 1254.6,1204.62 1255.19,1204.62 1255.78,1204.62 1256.36,1204.62 1256.95,1204.62 1257.53,1204.62 1258.12,1204.62 1258.71,1204.62 1259.29,1204.62 1259.88,1204.62 1260.47,1204.62 1261.05,1204.62 1261.64,1204.62 1262.23,1204.62 1262.81,1204.62 1263.4,1204.62 1263.98,1204.62 1264.57,1204.62 1265.16,1204.62 1265.74,1204.62 1266.33,1204.62 1266.92,1204.62 1267.5,1204.62 1268.09,1204.62 1268.68,1204.62 1269.26,1204.62 1269.85,1204.62 1270.44,1204.62 1271.02,1204.62 1271.61,1204.62 1272.19,1204.62 1272.78,1204.62 1273.37,1204.62 1273.95,1204.62 1274.54,1204.62 1275.13,1204.62 1275.71,1204.62 1276.3,1204.62 1276.89,1204.62 1277.47,1204.62 1278.06,1204.62 1278.65,1204.62 1279.23,1204.62 1279.82,1204.62 1280.4,1204.62 1280.99,1204.62 1281.58,1204.62 1282.16,1204.62 1282.75,1204.62 1283.34,1204.62 1283.92,1204.62 1284.51,1204.62 1285.1,1204.62 1285.68,1204.62 1286.27,1204.62 1286.86,1204.62 1287.44,1204.62 1288.03,1204.62 1288.61,1204.62 1289.2,1204.62 1289.79,1204.62 1290.37,1204.62 1290.96,1204.62 1291.55,1204.62 1292.13,1204.62 1292.72,1204.62 1293.31,1204.62 1293.89,1204.62 1294.48,1204.62 1295.06,1204.62 1295.65,1204.62 1296.24,1204.62 1296.82,1204.62 1297.41,1204.62 1298,1204.62 1298.58,1204.62 1299.17,1204.62 1299.76,1204.62 1300.34,1204.62 1300.93,1204.62 1301.52,1204.62 1302.1,1204.62 1302.69,1204.62 1303.27,1204.62 1303.86,1204.62 1304.45,1204.62 1305.03,1204.62 1305.62,1204.62 1306.21,1204.62 1306.79,1204.62 1307.38,1204.62 1307.97,1204.62 1308.55,1204.62 1309.14,1204.62 1309.73,1204.62 1310.31,1204.62 1310.9,1204.62 1311.48,1204.62 1312.07,1204.62 1312.66,1204.62 1313.24,1204.62 1313.83,1204.62 1314.42,1204.62 1315,1204.62 1315.59,1204.62 1316.18,1204.62 1316.76,1204.62 1317.35,1204.62 1317.93,1204.62 1318.52,1204.62 1319.11,1204.62 1319.69,1204.62 1320.28,1204.62 1320.87,1204.62 1321.45,1204.62 1322.04,1204.62 1322.63,1204.62 1323.21,1204.62 1323.8,1204.62 1324.39,1204.62 1324.97,1204.62 1325.56,1204.62 1326.14,1204.62 1326.73,1204.62 1327.32,1204.62 1327.9,1204.62 1328.49,1204.62 1329.08,1204.62 1329.66,1204.62 1330.25,1204.62 1330.84,1204.62 1331.42,1204.62 1332.01,1204.62 1332.6,1204.62 1333.18,1204.62 1333.77,1204.62 1334.35,1204.62 1334.94,1204.62 1335.53,1204.62 1336.11,1204.62 1336.7,1204.62 1337.29,1204.62 1337.87,1204.62 1338.46,1204.62 1339.05,1204.62 1339.63,1204.62 1340.22,1204.62 1340.8,1204.62 1341.39,1204.62 1341.98,1204.62 1342.56,1204.62 1343.15,1204.62 1343.74,1204.62 1344.32,1204.62 1344.91,1204.62 1345.5,1204.62 1346.08,1204.62 1346.67,1204.62 1347.26,1204.62 1347.84,1204.62 1348.43,1204.62 1349.01,1204.62 1349.6,1204.62 1350.19,1204.62 1350.77,1204.62 1351.36,1204.62 1351.95,1204.62 1352.53,1204.62 1353.12,1204.62 1353.71,1204.62 1354.29,1204.62 1354.88,1204.62 1355.47,1204.62 1356.05,1204.62 1356.64,1204.62 1357.22,1204.62 1357.81,1204.62 1358.4,1204.62 1358.98,1204.62 1359.57,1204.62 1360.16,1204.62 1360.74,1204.62 1361.33,1204.62 1361.92,1204.62 1362.5,1204.62 1363.09,1204.62 1363.68,1204.62 1364.26,1204.62 1364.85,1204.62 1365.43,1204.62 1366.02,1204.62 1366.61,1204.62 1367.19,1204.62 1367.78,1204.62 1368.37,1204.62 1368.95,1204.62 1369.54,1204.62 1370.13,1204.62 1370.71,1204.62 1371.3,1204.62 1371.88,1204.62 1372.47,1204.62 1373.06,1204.62 1373.64,1204.62 1374.23,1204.62 1374.82,1204.62 1375.4,1204.62 1375.99,1204.62 1376.58,1204.62 1377.16,1204.62 1377.75,1204.62 1378.34,1204.62 1378.92,1204.62 1379.51,1204.62 1380.09,1204.62 1380.68,1204.62 1381.27,1204.62 1381.85,1204.62 1382.44,1204.62 1383.03,1204.62 1383.61,1204.62 1384.2,1204.62 1384.79,1204.62 1385.37,1204.62 1385.96,1204.62 1386.55,1204.62 1387.13,1204.62 1387.72,1204.62 1388.3,1204.62 1388.89,1204.62 1389.48,1204.62 1390.06,1204.62 1390.65,1204.62 1391.24,1204.62 1391.82,1204.62 1392.41,1204.62 1393,1204.62 1393.58,1204.62 1394.17,1204.62 1394.75,1204.62 1395.34,1204.62 1395.93,1204.62 1396.51,1204.62 1397.1,1204.62 1397.69,1204.62 1398.27,1204.62 1398.86,1204.62 1399.45,1204.62 1400.03,1204.62 1400.62,1204.62 1401.21,1204.62 1401.79,1204.62 1402.38,1204.62 1402.96,1204.62 1403.55,1204.62 1404.14,1204.62 1404.72,1204.62 1405.31,1204.62 1405.9,1204.62 1406.48,1204.62 1407.07,1204.62 1407.66,1204.62 1408.24,1204.62 1408.83,1204.62 1409.42,1204.62 1410,1204.62 1410.59,1204.62 1411.17,1204.62 1411.76,1204.62 1412.35,1204.62 1412.93,1204.62 1413.52,1204.62 1414.11,1204.62 1414.69,1204.62 1415.28,1204.62 1415.87,1204.62 1416.45,1204.62 1417.04,1204.62 1417.63,1204.62 1418.21,1204.62 1418.8,1204.62 1419.38,1204.62 1419.97,1204.62 1420.56,1204.62 1421.14,1204.62 1421.73,1204.62 1422.32,1204.62 1422.9,1204.62 1423.49,1204.62 1424.08,1204.62 1424.66,1204.62 1425.25,1204.62 1425.83,1204.62 1426.42,1204.62 1427.01,1204.62 1427.59,1204.62 1428.18,1204.62 1428.77,1204.62 1429.35,1204.62 1429.94,1204.62 1430.53,1204.62 1431.11,1204.62 1431.7,1204.62 1432.29,1204.62 1432.87,1204.62 1433.46,1204.62 1434.04,1204.62 1434.63,1204.62 1435.22,1204.62 1435.8,1204.62 1436.39,1204.62 1436.98,1204.62 1437.56,1204.62 1438.15,1204.62 1438.74,1204.62 1439.32,1204.62 1439.91,1204.62 1440.5,1204.62 1441.08,1204.62 1441.67,1204.62 1442.25,1204.62 1442.84,1204.62 1443.43,1204.62 1444.01,1204.62 1444.6,1204.62 1445.19,1204.62 1445.77,1204.62 1446.36,1204.62 1446.95,1204.62 1447.53,1204.62 1448.12,1204.62 1448.7,1204.62 1449.29,1204.62 1449.88,1204.62 1450.46,1204.62 1451.05,1204.62 1451.64,1204.62 1452.22,1204.62 1452.81,1204.62 1453.4,1204.62 1453.98,1204.62 1454.57,1204.62 1455.16,1204.62 1455.74,1204.62 1456.33,1204.62 1456.91,1204.62 1457.5,1204.62 1458.09,1204.62 1458.67,1204.62 1459.26,1204.62 1459.85,1204.62 1460.43,1204.62 1461.02,1204.62 1461.61,1204.62 1462.19,1204.62 1462.78,1204.62 1463.37,1204.62 1463.95,1204.62 1464.54,1204.62 1465.12,1204.62 1465.71,1204.62 1466.3,1204.62 1466.88,1204.62 1467.47,1204.62 1468.06,1204.62 1468.64,1204.62 1469.23,1204.62 1469.82,1204.62 1470.4,1204.62 1470.99,1204.62 1471.57,1204.62 1472.16,1204.62 1472.75,1204.62 1473.33,1204.62 1473.92,1204.62 1474.51,1204.62 1475.09,1204.62 1475.68,1204.62 1476.27,1204.62 1476.85,1204.62 1477.44,1204.62 1478.03,1204.62 1478.61,1204.62 1479.2,1204.62 1479.78,1204.62 1480.37,1204.62 1480.96,1204.62 1481.54,1204.62 1482.13,1204.62 1482.72,1204.62 1483.3,1204.62 1483.89,1204.62 1484.48,1204.62 1485.06,1204.62 1485.65,1204.62 1486.24,1204.62 1486.82,1204.62 1487.41,1204.62 1487.99,1204.62 1488.58,1204.62 1489.17,1204.62 1489.75,1204.62 1490.34,1204.62 1490.93,1204.62 1491.51,1204.62 1492.1,1204.62 1492.69,1204.62 1493.27,1204.62 1493.86,1204.62 1494.45,1204.62 1495.03,1204.62 1495.62,1204.62 1496.2,1204.62 1496.79,1204.62 1497.38,1204.62 1497.96,1204.62 1498.55,1204.62 1499.14,1204.62 1499.72,1204.62 1500.31,1204.62 1500.9,1204.62 1501.48,1204.62 1502.07,1204.62 1502.65,1204.62 1503.24,1204.62 1503.83,1204.62 1504.41,1204.62 1505,1204.62 1505.59,1204.62 1506.17,1204.62 1506.76,1204.62 1507.35,1204.62 1507.93,1204.62 1508.52,1204.62 1509.11,1204.62 1509.69,1204.62 1510.28,1204.62 1510.86,1204.62 1511.45,1204.62 1512.04,1204.62 1512.62,1204.62 1513.21,1204.62 1513.8,1204.62 1514.38,1204.62 1514.97,1204.62 1515.56,1204.62 1516.14,1204.62 1516.73,1204.62 1517.32,1204.62 1517.9,1204.62 1518.49,1204.62 1519.07,1204.62 1519.66,1204.62 1520.25,1204.62 1520.83,1204.62 1521.42,1204.62 1522.01,1204.62 1522.59,1204.62 1523.18,1204.62 1523.77,1204.62 1524.35,1204.62 1524.94,1204.62 1525.52,1204.62 1526.11,1204.62 1526.7,1204.62 1527.28,1204.62 1527.87,1204.62 1528.46,1204.62 1529.04,1204.62 1529.63,1204.62 1530.22,1204.62 1530.8,1204.62 1531.39,1204.62 1531.98,1204.62 1532.56,1204.62 1533.15,1204.62 1533.73,1204.62 1534.32,1204.62 1534.91,1204.62 1535.49,1204.62 1536.08,1204.62 1536.67,1204.62 1537.25,1204.62 1537.84,1204.62 1538.43,1204.62 1539.01,1204.62 1539.6,1204.62 1540.19,1204.62 1540.77,1204.62 1541.36,1204.62 1541.94,1204.62 1542.53,1204.62 1543.12,1204.62 1543.7,1204.62 1544.29,1204.62 1544.88,1204.62 1545.46,1204.62 1546.05,1204.62 1546.64,1204.62 1547.22,1204.62 1547.81,1204.62 1548.4,1204.62 1548.98,1204.62 1549.57,1204.62 1550.15,1204.62 1550.74,1204.62 1551.33,1204.62 1551.91,1204.62 1552.5,1204.62 1553.09,1204.62 1553.67,1204.62 1554.26,1204.62 1554.85,1204.62 1555.43,1204.62 1556.02,1204.62 1556.6,1204.62 1557.19,1204.62 1557.78,1204.62 1558.36,1204.62 1558.95,1204.62 1559.54,1204.62 1560.12,1204.62 1560.71,1204.62 1561.3,1204.62 1561.88,1204.62 1562.47,1204.62 1563.06,1204.62 1563.64,1204.62 1564.23,1204.62 1564.81,1204.62 1565.4,1204.62 1565.99,1204.62 1566.57,1204.62 1567.16,1204.62 1567.75,1204.62 1568.33,1204.62 1568.92,1204.62 1569.51,1204.62 1570.09,1204.62 1570.68,1204.62 1571.27,1204.62 1571.85,1204.62 1572.44,1204.62 1573.02,1204.62 1573.61,1204.62 1574.2,1204.62 1574.78,1204.62 1575.37,1204.62 1575.96,1204.62 1576.54,1204.62 1577.13,1204.62 1577.72,1204.62 1578.3,1204.62 1578.89,1204.62 1579.47,1204.62 1580.06,1204.62 1580.65,1204.62 1581.23,1204.62 1581.82,1204.62 1582.41,1204.62 1582.99,1204.62 1583.58,1204.62 1584.17,1204.62 1584.75,1204.62 1585.34,1204.62 1585.93,1204.62 1586.51,1204.62 1587.1,1204.62 1587.68,1204.62 1588.27,1204.62 1588.86,1204.62 1589.44,1204.62 1590.03,1204.62 1590.62,1204.62 1591.2,1204.62 1591.79,1204.62 1592.38,1204.62 1592.96,1204.62 1593.55,1204.62 1594.14,1204.62 1594.72,1204.62 1595.31,1204.62 1595.89,1204.62 1596.48,1204.62 1597.07,1204.62 1597.65,1204.62 1598.24,1204.62 1598.83,1204.62 1599.41,1204.62 1600,1204.62 1600.59,1204.62 1601.17,1204.62 1601.76,1204.62 1602.34,1204.62 1602.93,1204.62 1603.52,1204.62 1604.1,1204.62 1604.69,1204.62 1605.28,1204.62 1605.86,1204.62 1606.45,1204.62 1607.04,1204.62 1607.62,1204.62 1608.21,1204.62 1608.8,1204.62 1609.38,1204.62 1609.97,1204.62 1610.55,1204.62 1611.14,1204.62 1611.73,1204.62 1612.31,1204.62 1612.9,1204.62 1613.49,1204.62 1614.07,1204.62 1614.66,1204.62 1615.25,1204.62 1615.83,1204.62 1616.42,1204.62 1617.01,1204.62 1617.59,1204.62 1618.18,1204.62 1618.76,1204.62 1619.35,1204.62 1619.94,1204.62 1620.52,1204.62 1621.11,1204.62 1621.7,1204.62 1622.28,1204.62 1622.87,1204.62 1623.46,1204.62 1624.04,1204.62 1624.63,1204.62 1625.22,1204.62 1625.8,1204.62 1626.39,1204.62 1626.97,1204.62 1627.56,1204.62 1628.15,1204.62 1628.73,1204.62 1629.32,1204.62 1629.91,1204.62 1630.49,1204.62 1631.08,1204.62 1631.67,1204.62 1632.25,1204.62 1632.84,1204.62 1633.42,1204.62 1634.01,1204.62 1634.6,1204.62 1635.18,1204.62 1635.77,1204.62 1636.36,1204.62 1636.94,1204.62 1637.53,1204.62 1638.12,1204.62 1638.7,1204.62 1639.29,1204.62 1639.88,1204.62 1640.46,1204.62 1641.05,1204.62 1641.63,1204.62 1642.22,1204.62 1642.81,1204.62 1643.39,1204.62 1643.98,1204.62 1644.57,1204.62 1645.15,1204.62 1645.74,1204.62 1646.33,1204.62 1646.91,1204.62 1647.5,1204.62 1648.09,1204.62 1648.67,1204.62 1649.26,1204.62 1649.84,1204.62 1650.43,1204.62 1651.02,1204.62 1651.6,1204.62 1652.19,1204.62 1652.78,1204.62 1653.36,1204.62 1653.95,1204.62 1654.54,1204.62 1655.12,1204.62 1655.71,1204.62 1656.29,1204.62 1656.88,1204.62 1657.47,1204.62 1658.05,1204.62 1658.64,1204.62 1659.23,1204.62 1659.81,1204.62 1660.4,1204.62 1660.99,1204.62 1661.57,1204.62 1662.16,1204.62 1662.75,1204.62 1663.33,1204.62 1663.92,1204.62 1664.5,1204.62 1665.09,1204.62 1665.68,1204.62 1666.26,1204.62 1666.85,1204.62 1667.44,1204.62 1668.02,1204.62 1668.61,1204.62 1669.2,1204.62 1669.78,1204.62 1670.37,1204.62 1670.96,1204.62 1671.54,1204.62 1672.13,1204.62 1672.71,1204.62 1673.3,1204.62 1673.89,1204.62 1674.47,1204.62 1675.06,1204.62 1675.65,1204.62 1676.23,1204.62 1676.82,1204.62 1677.41,1204.62 1677.99,1204.62 1678.58,1204.62 1679.17,1204.62 1679.75,1204.62 1680.34,1204.62 1680.92,1204.62 1681.51,1204.62 1682.1,1204.62 1682.68,1204.62 1683.27,1204.62 1683.86,1204.62 1684.44,1204.62 1685.03,1204.62 1685.62,1204.62 1686.2,1204.62 1686.79,1204.62 1687.37,1204.62 1687.96,1204.62 1688.55,1204.62 1689.13,1204.62 1689.72,1204.62 1690.31,1204.62 1690.89,1204.62 1691.48,1204.62 1692.07,1204.62 1692.65,1204.62 1693.24,1204.62 1693.83,1204.62 1694.41,1204.62 1695,1204.62 1695.58,1204.62 1696.17,1204.62 1696.76,1204.62 1697.34,1204.62 1697.93,1204.62 1698.52,1204.62 1699.1,1204.62 1699.69,1204.62 1700.28,1204.62 1700.86,1204.62 1701.45,1204.62 1702.04,1204.62 1702.62,1204.62 1703.21,1204.62 1703.79,1204.62 1704.38,1204.62 1704.97,1204.62 1705.55,1204.62 1706.14,1204.62 1706.73,1204.62 1707.31,1204.62 1707.9,1204.62 1708.49,1204.62 1709.07,1204.62 1709.66,1204.62 1710.24,1204.62 1710.83,1204.62 1711.42,1204.62 1712,1204.62 1712.59,1204.62 1713.18,1204.62 1713.76,1204.62 1714.35,1204.62 1714.94,1204.62 1715.52,1204.62 1716.11,1204.62 1716.7,1204.62 1717.28,1204.62 1717.87,1204.62 1718.45,1204.62 1719.04,1204.62 1719.63,1204.62 1720.21,1204.62 1720.8,1204.62 1721.39,1204.62 1721.97,1204.62 1722.56,1204.62 1723.15,1204.62 1723.73,1204.62 1724.32,1204.62 1724.91,1204.62 1725.49,1204.62 1726.08,1204.62 1726.66,1204.62 1727.25,1204.62 1727.84,1204.62 1728.42,1204.62 1729.01,1204.62 1729.6,1204.62 1730.18,1204.62 1730.77,1204.62 1731.36,1204.62 1731.94,1204.62 1732.53,1204.62 1733.11,1204.62 1733.7,1204.62 1734.29,1204.62 1734.87,1204.62 1735.46,1204.62 1736.05,1204.62 1736.63,1204.62 1737.22,1204.62 1737.81,1204.62 1738.39,1204.62 1738.98,1204.62 1739.57,1204.62 1740.15,1204.62 1740.74,1204.62 1741.32,1204.62 1741.91,1204.62 1742.5,1204.62 1743.08,1204.62 1743.67,1204.62 1744.26,1204.62 1744.84,1204.62 1745.43,1204.62 1746.02,1204.62 1746.6,1204.62 1747.19,1204.62 1747.78,1204.62 1748.36,1204.62 1748.95,1204.62 1749.53,1204.62 1750.12,1204.62 1750.71,1204.62 1751.29,1204.62 1751.88,1204.62 1752.47,1204.62 1753.05,1204.62 1753.64,1204.62 1754.23,1204.62 1754.81,1204.62 1755.4,1204.62 1755.99,1204.62 1756.57,1204.62 1757.16,1204.62 1757.74,1204.62 1758.33,1204.62 1758.92,1204.62 1759.5,1204.62 1760.09,1204.62 1760.68,1204.62 1761.26,1204.62 1761.85,1204.62 1762.44,1204.62 1763.02,1204.62 1763.61,1204.62 1764.19,1204.62 1764.78,1204.62 1765.37,1204.62 1765.95,1204.62 1766.54,1204.62 1767.13,1204.62 1767.71,1204.62 1768.3,1204.62 1768.89,1204.62 1769.47,1204.62 1770.06,1204.62 1770.65,1204.62 1771.23,1204.62 1771.82,1204.62 1772.4,1204.62 1772.99,1204.62 1773.58,1204.62 1774.16,1204.62 1774.75,1204.62 1775.34,1204.62 1775.92,1204.62 1776.51,1204.62 1777.1,1204.62 1777.68,1204.62 1778.27,1204.62 1778.86,1204.62 1779.44,1204.62 1780.03,1204.62 1780.61,1204.62 1781.2,1204.62 1781.79,1204.62 1782.37,1204.62 1782.96,1204.62 1783.55,1204.62 1784.13,1204.62 1784.72,1204.62 1785.31,1204.62 1785.89,1204.62 1786.48,1204.62 1787.06,1204.62 1787.65,1204.62 1788.24,1204.62 1788.82,1204.62 1789.41,1204.62 1790,1204.62 1790.58,1204.62 1791.17,1204.62 1791.76,1204.62 1792.34,1204.62 1792.93,1204.62 1793.52,1204.62 1794.1,1204.62 1794.69,1204.62 1795.27,1204.62 1795.86,1204.62 1796.45,1204.62 1797.03,1204.62 1797.62,1204.62 1798.21,1204.62 1798.79,1204.62 1799.38,1204.62 1799.97,1204.62 1800.55,1204.62 1801.14,1204.62 1801.73,1204.62 1802.31,1204.62 1802.9,1204.62 1803.48,1204.62 1804.07,1204.62 1804.66,1204.62 1805.24,1204.62 1805.83,1204.62 1806.42,1204.62 1807,1204.62 1807.59,1204.62 1808.18,1204.62 1808.76,1204.62 1809.35,1204.62 1809.94,1204.62 1810.52,1204.62 1811.11,1204.62 1811.69,1204.62 1812.28,1204.62 1812.87,1204.62 1813.45,1204.62 1814.04,1204.62 1814.63,1204.62 1815.21,1204.62 1815.8,1204.62 1816.39,1204.62 1816.97,1204.62 1817.56,1204.62 1818.14,1204.62 1818.73,1204.62 1819.32,1204.62 1819.9,1204.62 1820.49,1204.62 1821.08,1204.62 1821.66,1204.62 1822.25,1204.62 1822.84,1204.62 1823.42,1204.62 1824.01,1204.62 1824.6,1204.62 1825.18,1204.62 1825.77,1204.62 1826.35,1204.62 1826.94,1204.62 1827.53,1204.62 1828.11,1204.62 1828.7,1204.62 1829.29,1204.62 1829.87,1204.62 1830.46,1204.62 1831.05,1204.62 1831.63,1204.62 1832.22,1204.62 1832.81,1204.62 1833.39,1204.62 1833.98,1204.62 1834.56,1204.62 1835.15,1204.62 1835.74,1204.62 1836.32,1204.62 1836.91,1204.62 1837.5,1204.62 1838.08,1204.62 1838.67,1204.62 1839.26,1204.62 1839.84,1204.62 1840.43,1204.62 1841.01,1204.62 1841.6,1204.62 1842.19,1204.62 1842.77,1204.62 1843.36,1204.62 1843.95,1204.62 1844.53,1204.62 1845.12,1204.62 1845.71,1204.62 1846.29,1204.62 1846.88,1204.62 1847.47,1204.62 1848.05,1204.62 1848.64,1204.62 1849.22,1204.62 1849.81,1204.62 1850.4,1204.62 1850.98,1204.62 1851.57,1204.62 1852.16,1204.62 1852.74,1204.62 1853.33,1204.62 1853.92,1204.62 1854.5,1204.62 1855.09,1204.62 1855.68,1204.62 1856.26,1204.62 1856.85,1204.62 1857.43,1204.62 1858.02,1204.62 1858.61,1204.62 1859.19,1204.62 1859.78,1204.62 1860.37,1204.62 1860.95,1204.62 1861.54,1204.62 1862.13,1204.62 1862.71,1204.62 1863.3,1204.62 1863.88,1204.62 1864.47,1204.62 1865.06,1204.62 1865.64,1204.62 1866.23,1204.62 1866.82,1204.62 1867.4,1204.62 1867.99,1204.62 1868.58,1204.62 1869.16,1204.62 1869.75,1204.62 1870.34,1204.62 1870.92,1204.62 1871.51,1204.62 1872.09,1204.62 1872.68,1204.62 1873.27,1204.62 1873.85,1204.62 1874.44,1204.62 1875.03,1204.62 1875.61,1204.62 1876.2,1204.62 1876.79,1204.62 1877.37,1204.62 1877.96,1204.62 1878.55,1204.62 1879.13,1204.62 1879.72,1204.62 1880.3,1204.62 1880.89,1204.62 1881.48,1204.62 1882.06,1204.62 1882.65,1204.62 1883.24,1204.62 1883.82,1204.62 1884.41,1204.62 1885,1204.62 1885.58,1204.62 1886.17,1204.62 1886.76,1204.62 1887.34,1204.62 1887.93,1204.62 1888.51,1204.62 1889.1,1204.62 1889.69,1204.62 1890.27,1204.62 1890.86,1204.62 1891.45,1204.62 1892.03,1204.62 1892.62,1204.62 1893.21,1204.62 1893.79,1204.62 1894.38,1204.62 1894.96,1204.62 1895.55,1204.62 1896.14,1204.62 1896.72,1204.62 1897.31,1204.62 1897.9,1204.62 1898.48,1204.62 1899.07,1204.62 1899.66,1204.62 1900.24,1204.62 1900.83,1204.62 1901.42,1204.62 1902,1204.62 1902.59,1204.62 1903.17,1204.62 1903.76,1204.62 1904.35,1204.62 1904.93,1204.62 1905.52,1204.62 1906.11,1204.62 1906.69,1204.62 1907.28,1204.62 1907.87,1204.62 1908.45,1204.62 1909.04,1204.62 1909.63,1204.62 1910.21,1204.62 1910.8,1204.62 1911.38,1204.62 1911.97,1204.62 1912.56,1204.62 1913.14,1204.62 1913.73,1204.62 1914.32,1204.62 1914.9,1204.62 1915.49,1204.62 1916.08,1204.62 1916.66,1204.62 1917.25,1204.62 1917.83,1204.62 1918.42,1204.62 1919.01,1204.62 1919.59,1204.62 1920.18,1204.62 1920.77,1204.62 1921.35,1204.62 1921.94,1204.62 1922.53,1204.62 1923.11,1204.62 1923.7,1204.62 1924.29,1204.62 1924.87,1204.62 1925.46,1204.62 1926.04,1204.62 1926.63,1204.62 1927.22,1204.62 1927.8,1204.62 1928.39,1204.62 1928.98,1204.62 1929.56,1204.62 1930.15,1204.62 1930.74,1204.62 1931.32,1204.62 1931.91,1204.62 1932.5,1204.62 1933.08,1204.62 1933.67,1204.62 1934.25,1204.62 1934.84,1204.62 1935.43,1204.62 1936.01,1204.62 1936.6,1204.62 1937.19,1204.62 1937.77,1204.62 1938.36,1204.62 1938.95,1204.62 1939.53,1204.62 1940.12,1204.62 1940.71,1204.62 1941.29,1204.62 1941.88,1204.62 1942.46,1204.62 1943.05,1204.62 1943.64,1204.62 1944.22,1204.62 1944.81,1204.62 1945.4,1204.62 1945.98,1204.62 1946.57,1204.62 1947.16,1204.62 1947.74,1204.62 1948.33,1204.62 1948.91,1204.62 1949.5,1204.62 1950.09,1204.62 1950.67,1204.62 1951.26,1204.62 1951.85,1204.62 1952.43,1204.62 1953.02,1204.62 1953.61,1204.62 1954.19,1204.62 1954.78,1204.62 1955.37,1204.62 1955.95,1204.62 1956.54,1204.62 1957.12,1204.62 1957.71,1204.62 1958.3,1204.62 1958.88,1204.62 1959.47,1204.62 1960.06,1204.62 1960.64,1204.62 1961.23,1204.62 1961.82,1204.62 1962.4,1204.62 1962.99,1204.62 1963.58,1204.62 1964.16,1204.62 1964.75,1204.62 1965.33,1204.62 1965.92,1204.62 1966.51,1204.62 1967.09,1204.62 1967.68,1204.62 1968.27,1204.62 1968.85,1204.62 1969.44,1204.62 1970.03,1204.62 1970.61,1204.62 1971.2,1204.62 1971.78,1204.62 1972.37,1204.62 1972.96,1204.62 1973.54,1204.62 1974.13,1204.62 1974.72,1204.62 1975.3,1204.62 1975.89,1204.62 1976.48,1204.62 1977.06,1204.62 1977.65,1204.62 1978.24,1204.62 1978.82,1204.62 1979.41,1204.62 1979.99,1204.62 1980.58,1204.62 1981.17,1204.62 1981.75,1204.62 1982.34,1204.62 1982.93,1204.62 1983.51,1204.62 1984.1,1204.62 1984.69,1204.62 1985.27,1204.62 1985.86,1204.62 1986.45,1204.62 1987.03,1204.62 1987.62,1204.62 1988.2,1204.62 1988.79,1204.62 1989.38,1204.62 1989.96,1204.62 1990.55,1204.62 1991.14,1204.62 1991.72,1204.62 1992.31,1204.62 1992.9,1204.62 1993.48,1204.62 1994.07,1204.62 1994.65,1204.62 1995.24,1204.62 1995.83,1204.62 1996.41,1204.62 1997,1204.62 1997.59,1204.62 1998.17,1204.62 1998.76,1204.62 1999.35,1204.62 1999.93,1204.62 2000.52,1204.62 2001.11,1204.62 2001.69,1204.62 2002.28,1204.62 2002.86,1204.62 2003.45,1204.62 2004.04,1204.62 2004.62,1204.62 2005.21,1204.62 2005.8,1204.62 2006.38,1204.62 2006.97,1204.62 2007.56,1204.62 2008.14,1204.62 2008.73,1204.62 2009.32,1204.62 2009.9,1204.62 2010.49,1204.62 2011.07,1204.62 2011.66,1204.62 2012.25,1204.62 2012.83,1204.62 2013.42,1204.62 2014.01,1204.62 2014.59,1204.62 2015.18,1204.62 2015.77,1204.62 2016.35,1204.62 2016.94,1204.62 2017.53,1204.62 2018.11,1204.62 2018.7,1204.62 2019.28,1204.62 2019.87,1204.62 2020.46,1204.62 2021.04,1204.62 2021.63,1204.62 2022.22,1204.62 2022.8,1204.62 2023.39,1204.62 2023.98,1204.62 2024.56,1204.62 2025.15,1204.62 2025.73,1204.62 2026.32,1204.62 2026.91,1204.62 2027.49,1204.62 2028.08,1204.62 2028.67,1204.62 2029.25,1204.62 2029.84,1204.62 2030.43,1204.62 2031.01,1204.62 2031.6,1204.62 2032.19,1204.62 2032.77,1204.62 2033.36,1204.62 2033.94,1204.62 2034.53,1204.62 2035.12,1204.62 2035.7,1204.62 2036.29,1204.62 2036.88,1204.62 2037.46,1204.62 2038.05,1204.62 2038.64,1204.62 2039.22,1204.62 2039.81,1204.62 2040.4,1204.62 2040.98,1204.62 2041.57,1204.62 2042.15,1204.62 2042.74,1204.62 2043.33,1204.62 2043.91,1204.62 2044.5,1204.62 2045.09,1204.62 2045.67,1204.62 2046.26,1204.62 2046.85,1204.62 2047.43,1204.62 2048.02,1204.62 2048.6,1204.62 2049.19,1204.62 2049.78,1204.62 2050.36,1204.62 2050.95,1204.62 2051.54,1204.62 2052.12,1204.62 2052.71,1204.62 2053.3,1204.62 2053.88,1204.62 2054.47,1204.62 2055.06,1204.62 2055.64,1204.62 2056.23,1204.62 2056.81,1204.62 2057.4,1204.62 2057.99,1204.62 2058.57,1204.62 2059.16,1204.62 2059.75,1204.62 2060.33,1204.62 2060.92,1204.62 2061.51,1204.62 2062.09,1204.62 2062.68,1204.62 2063.27,1204.62 2063.85,1204.62 2064.44,1204.62 2065.02,1204.62 2065.61,1204.62 2066.2,1204.62 2066.78,1204.62 2067.37,1204.62 2067.96,1204.62 2068.54,1204.62 2069.13,1204.62 2069.72,1204.62 2070.3,1204.62 2070.89,1204.62 2071.48,1204.62 2072.06,1204.62 2072.65,1204.62 2073.23,1204.62 2073.82,1204.62 2074.41,1204.62 2074.99,1204.62 2075.58,1204.62 2076.17,1204.62 2076.75,1204.62 2077.34,1204.62 2077.93,1204.62 2078.51,1204.62 2079.1,1204.62 2079.68,1204.62 2080.27,1204.62 2080.86,1204.62 2081.44,1204.62 2082.03,1204.62 2082.62,1204.62 2083.2,1204.62 2083.79,1204.62 2084.38,1204.62 2084.96,1204.62 2085.55,1204.62 2086.14,1204.62 2086.72,1204.62 2087.31,1204.62 2087.89,1204.62 2088.48,1204.62 2089.07,1204.62 2089.65,1204.62 2090.24,1204.62 2090.83,1204.62 2091.41,1204.62 2092,1204.62 2092.59,1204.62 2093.17,1204.62 2093.76,1204.62 2094.35,1204.62 2094.93,1204.62 2095.52,1204.62 2096.1,1204.62 2096.69,1204.62 2097.28,1204.62 2097.86,1204.62 2098.45,1204.62 2099.04,1204.62 2099.62,1204.62 2100.21,1204.62 2100.8,1204.62 2101.38,1204.62 2101.97,1204.62 2102.55,1204.62 2103.14,1204.62 2103.73,1204.62 2104.31,1204.62 2104.9,1204.62 2105.49,1204.62 2106.07,1204.62 2106.66,1204.62 2107.25,1204.62 2107.83,1204.62 2108.42,1204.62 2109.01,1204.62 2109.59,1204.62 2110.18,1204.62 2110.76,1204.62 2111.35,1204.62 2111.94,1204.62 2112.52,1204.62 2113.11,1204.62 2113.7,1204.62 2114.28,1204.62 2114.87,1204.62 2115.46,1204.62 2116.04,1204.62 2116.63,1204.62 2117.22,1204.62 2117.8,1204.62 2118.39,1204.62 2118.97,1204.62 2119.56,1204.62 2120.15,1204.62 2120.73,1204.62 2121.32,1204.62 2121.91,1204.62 2122.49,1204.62 2123.08,1204.62 2123.67,1204.62 2124.25,1204.62 2124.84,1204.62 2125.42,1204.62 2126.01,1204.62 2126.6,1204.62 2127.18,1204.62 2127.77,1204.62 2128.36,1204.62 2128.94,1204.62 2129.53,1204.62 2130.12,1204.62 2130.7,1204.62 2131.29,1204.62 2131.88,1204.62 2132.46,1204.62 2133.05,1204.62 2133.63,1204.62 2134.22,1204.62 2134.81,1204.62 2135.39,1204.62 2135.98,1204.62 2136.57,1204.62 2137.15,1204.62 2137.74,1204.62 2138.33,1204.62 2138.91,1204.62 2139.5,1204.62 2140.09,1204.62 2140.67,1204.62 2141.26,1204.62 2141.84,1204.62 2142.43,1204.62 2143.02,1204.62 2143.6,1204.62 2144.19,1204.62 2144.78,1204.62 2145.36,1204.62 2145.95,1204.62 2146.54,1204.62 2147.12,1204.62 2147.71,1204.62 2148.3,1204.62 2148.88,1204.62 2149.47,1204.62 2150.05,1204.62 2150.64,1204.62 2151.23,1204.62 2151.81,1204.62 2152.4,1204.62 2152.99,1204.62 2153.57,1204.62 2154.16,1204.62 2154.75,1204.62 2155.33,1204.62 2155.92,1204.62 2156.5,1204.62 2157.09,1204.62 2157.68,1204.62 2158.26,1204.62 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.04,1185.02 1401.13,899.083 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.69 985.439,1185.02 2158.26,1185.02 2158.26,1223.69 985.439,1223.69 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip653\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip653)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2789.22 162.673,-2628.21 163.232,-2498.88 163.792,-3592.95 164.351,-3531.91 164.91,-4529.26 165.469,-5455.74 166.029,-6323.91 166.588,-7096.98 167.147,-7780.73 167.706,-8421.98 168.266,-9000.58 168.825,-8714.9 169.384,-9218.56 169.943,-9669.02 170.503,-10054 171.062,-10409.1 171.621,-10118.3 172.18,-10432.3 172.74,-9673.5 173.299,-9951.78 173.858,-9735.66 174.417,-9982.16 174.977,-10194 175.536,-10362.1 176.095,-10158.7 176.655,-10276.1 177.214,-10372.1 177.773,-10443.2 178.332,-10197.7 178.892,-9972.18 179.451,-10009 180.01,-10027.7 180.569,-10028.3 181.129,-9992.36 181.688,-9952.83 182.247,-9525.36 182.806,-9459.92 183.366,-9235.75 183.925,-9179.69 184.484,-8952.58 185.043,-8879.76 185.603,-8532.6 186.162,-8462.58 186.721,-8366.26 187.28,-8264.64 187.84,-8063.88 188.399,-7852.9 188.958,-7448.98 189.517,-7357.43 190.077,-6994.85 190.636,-6655.87 191.195,-6410.84 191.754,-6339.54 192.314,-6181.06 192.873,-6032.39 193.432,-5814.82 193.991,-5738.26 194.551,-5593.07 195.11,-5449.67 195.669,-5242.52 196.228,-5100.38 196.788,-4953.03 197.347,-4799.71 197.906,-4550.16 198.465,-4415.85 199.025,-4281.59 199.584,-4152.72 200.143,-4069.55 200.702,-3935.92 201.262,-3804.61 201.821,-3723.49 202.38,-3599.29 202.939,-3393.32 203.499,-3200.51 204.058,-2975.32 204.617,-2875.11 205.176,-2738.5 205.736,-2679.08 206.295,-2582.95 206.854,-2422.19 207.413,-2303.54 207.973,-2191.21 208.532,-2075.59 209.091,-1994.2 209.65,-1882.47 210.21,-1804.22 210.769,-1669.21 211.328,-1622.59 211.887,-1578.21 212.447,-1395.01 213.006,-1300.77 213.565,-1152.4 214.124,-1115.59 214.684,-1077.95 215.243,-991.123 215.802,-961.908 216.361,-875.009 216.921,-839.942 217.48,-829.152 218.039,-746.872 218.598,-642.057 219.158,-564.983 219.717,-539.962 220.276,-469.372 220.835,-440.06 221.395,-394.328 221.954,-323.035 222.513,-255.439 223.072,-231.232 223.632,-211.175 224.191,-189.205 224.75,-147.17 225.309,-103.038 225.869,-82.9505 226.428,-86.6183 226.987,-22.1446 227.546,19.6013 228.106,60.9601 228.665,102.566 229.224,158.304 229.783,212.299 230.343,246.036 230.902,273.703 231.461,282.514 232.02,292.455 232.58,347.98 233.139,379.62 233.698,391.303 234.257,397.704 234.817,426.263 235.376,493.708 235.935,479.327 236.494,465.703 237.054,455.936 237.613,469.097 238.172,536.138 238.731,566.521 239.291,557.079 239.85,565.738 240.409,611.066 240.968,633.627 241.528,656.516 242.087,678.631 242.646,738.272 243.205,789.027 243.765,838.827 244.324,833.38 244.883,827.646 245.442,807.185 246.002,803.288 246.561,803.907 247.12,803.744 247.679,821.902 248.239,820.901 248.798,854.805 249.357,837.86 249.916,854.56 250.476,852.854 251.035,852.111 251.594,871.67 252.153,872.884 252.713,870.255 253.272,888.65 253.831,888.256 254.39,867.108 254.95,938.787 255.509,948.359 256.068,927.414 256.627,956.556 257.187,950.372 257.746,931.564 258.305,976.664 258.864,972.882 259.424,1002.35 259.983,1015.16 260.542,1021.59 261.101,1017.18 261.661,1008.41 262.22,1020.18 262.779,1012.87 263.338,1023.7 263.898,1032.27 264.457,1025.43 265.016,1001.3 265.575,996.949 266.135,976.653 266.694,986.067 267.253,1016.08 267.812,1046.35 268.372,1022.02 268.931,1031.51 269.49,1043.85 270.049,1070.86 270.609,1094.78 271.168,1120.5 271.727,1041.44 272.286,1049.53 272.846,1109.03 273.405,1182.13 273.964,1202.3 274.523,1199.94 275.083,1183.88 275.642,1155.7 276.201,1176.3 276.76,1146.31 277.32,1115.52 277.879,1154.73 278.438,1071.61 278.997,1098.38 279.557,1105.76 280.116,1081.29 280.675,1100.06 281.234,1121.84 281.794,1142.52 282.353,1146.1 282.912,1130.61 283.471,1121.45 284.031,1141.49 284.59,1097.84 285.149,1058.21 285.708,1065.86 286.268,1073.91 286.827,1095.67 287.386,1083.87 287.945,1104.1 288.505,1109.93 289.064,1098.79 289.623,1118.67 290.182,1072.46 290.742,1096.65 291.301,1085.4 291.86,1077.04 292.419,1082.33 292.979,1087.55 293.538,1061.65 294.097,1017.11 294.656,1013.1 295.216,1004.08 295.775,981.026 296.334,956.166 296.893,955.563 297.453,971.291 298.012,968.485 298.571,982.011 299.13,943.905 299.69,892.062 300.249,892.683 300.808,875.59 301.368,939.423 301.927,939.236 302.486,969.138 303.045,963.135 303.605,942.894 304.164,959.387 304.723,951.61 305.282,1000.33 305.842,994.259 306.401,988.759 306.96,1048.24 307.519,1090.51 308.079,1096.84 308.638,1130.88 309.197,1103.86 309.756,1090.22 310.316,1111.97 310.875,1117.26 311.434,1055.9 311.993,1032.74 312.553,992.872 313.112,988.567 313.671,996.976 314.23,1021.21 314.79,1044.15 315.349,1048.32 315.908,1037.14 316.467,1043.27 317.027,1066.6 317.586,1057.67 318.145,1048.48 318.704,1004.26 319.264,1046.12 319.823,1051.09 320.382,990.594 320.941,971.129 321.501,995.728 322.06,1003.15 322.619,1008.43 323.178,999.859 323.738,958.258 324.297,966.518 324.856,975.838 325.415,934.108 325.975,942.368 326.534,918.973 327.093,934.509 327.652,912.486 328.212,909.349 328.771,920.86 329.33,917.309 329.889,929.927 330.449,927.376 331.008,908.867 331.567,889.205 332.126,900.141 332.686,911.634 333.245,921.924 333.804,933.861 334.363,962.4 334.923,974.056 335.482,969.72 336.041,947.819 336.6,958.404 337.16,984.648 337.719,976.674 338.278,919.959 338.837,933.8 339.397,944.398 339.956,953.792 340.515,946.481 341.074,941.062 341.634,950.628 342.193,994.919 342.752,951.046 343.311,894.86 343.871,906.041 344.43,852.947 344.989,883.053 345.548,832.099 346.108,814.569 346.667,800.065 347.226,818.57 347.785,835.344 348.345,815.859 348.904,781.43 349.463,764.666 350.022,766.924 350.582,759.533 351.141,762.965 351.7,814.356 352.259,798.085 352.819,797.524 353.378,781.824 353.937,784.441 354.496,800.615 355.056,785.733 355.615,787.824 356.174,805.272 356.733,786.538 357.293,770.907 357.852,806.379 358.411,807.922 358.97,779.317 359.53,794.589 360.089,797.059 360.648,798.558 361.207,832.739 361.767,877.825 362.326,873.023 362.885,887.497 363.444,883.032 364.004,911.819 364.563,871.364 365.122,835.289 365.681,831.493 366.241,816.409 366.8,816.819 367.359,814.134 367.918,817.92 368.478,818.084 369.037,817.469 369.596,827.21 370.155,820.338 370.715,819.797 371.274,804.384 371.833,806.383 372.392,823.851 372.952,822.61 373.511,838.387 374.07,837.49 374.629,818.753 375.189,830.435 375.748,829.272 376.307,808.012 376.866,791.193 377.426,818.864 377.985,819.08 378.544,767.384 379.103,784.813 379.663,800.596 380.222,833.315 380.781,828.767 381.34,826.851 381.9,823.86 382.459,835.321 383.018,880.032 383.577,876.99 384.137,903.105 384.696,897.922 385.255,873.882 385.814,836.904 386.374,831.645 386.933,830.644 387.492,811.832 388.051,811.37 388.611,824.943 389.17,823.321 389.729,804.074 390.288,819.665 390.848,800.591 391.407,786.732 391.966,769.009 392.525,801.911 393.085,850.553 393.644,848.083 394.203,858.932 394.762,855.923 395.322,820.787 395.881,800.191 396.44,798.386 396.999,797.002 397.559,801.973 398.118,813.661 398.677,778.989 399.236,763.312 399.796,747.764 400.355,712.509 400.914,746.446 401.473,747.477 402.033,733.072 402.592,769.825 403.151,769.347 403.71,723.359 404.27,709.126 404.829,696.365 405.388,701.273 405.947,673.384 406.507,716.126 407.066,705.778 407.625,696.471 408.184,699.727 408.744,687.96 409.303,709.3 409.862,762.494 410.421,747.11 410.981,750.712 411.54,757.296 412.099,787.925 412.658,786.054 413.218,805.959 413.777,771.09 414.336,770.659 414.895,769.927 415.455,770.277 416.014,753.736 416.573,749.704 417.132,732.739 417.692,771 418.251,770 418.81,769.493 419.369,787.194 419.929,851.836 420.488,846.249 421.047,824.753 421.606,803.451 422.166,834.555 422.725,852.421 423.284,847.054 423.843,824.341 424.403,889.383 424.962,900.585 425.521,925.17 426.08,900.04 426.64,894.423 427.199,871.838 427.758,832.441 428.318,828.243 428.877,823.838 429.436,802.478 429.995,815.717 430.555,798.425 431.114,797.39 431.673,784.764 432.232,799.689 432.792,829.199 433.351,859.373 433.91,855.007 434.469,865.063 435.029,856.988 435.588,833.291 436.147,812.666 436.706,777.002 437.266,759.308 437.825,777.068 438.384,774.593 438.943,771.852 439.503,750.714 440.062,716.599 440.621,734.239 441.18,718.033 441.74,723.217 442.299,743.568 442.858,730.15 443.417,715.779 443.977,764.296 444.536,763.373 445.095,765.724 445.654,751.113 446.214,688.279 446.773,673.311 447.332,694.036 447.891,712.67 448.451,729.135 449.01,697.291 449.569,715.03 450.128,737.295 450.688,736.979 451.247,754.922 451.806,738.596 452.365,740.535 452.925,741.735 453.484,725.707 454.043,743.247 454.602,757.462 455.162,789.383 455.721,753.301 456.28,753.557 456.839,724.534 457.399,713.417 457.958,718.041 458.517,719.079 459.076,704.704 459.636,719.569 460.195,752.487 460.754,750.604 461.313,765.68 461.873,762.723 462.432,728.978 462.991,730.04 463.55,760.745 464.11,747.742 464.669,715.516 465.228,703.567 465.787,706.814 466.347,691.84 466.906,695.651 467.465,729.24 468.024,745.155 468.584,778.155 469.143,806.806 469.702,771.816 470.261,784.902 470.821,815.096 471.38,812.358 471.939,837.139 472.498,832.589 473.058,830.362 473.617,809.756 474.176,839.481 474.735,800.906 475.295,816.455 475.854,830.234 476.413,838.157 476.972,864.189 477.532,857.852 478.091,885.85 478.65,894.449 479.209,886.929 479.769,893.089 480.328,899.135 480.887,856.346 481.446,848.115 482.006,795.055 482.565,772.413 483.124,770.961 483.683,768.646 484.243,686.725 484.802,674.009 485.361,691.24 485.92,726.041 486.48,711.523 487.039,729.127 487.598,717.719 488.157,734.187 488.717,750.359 489.276,753.179 489.835,767.776 490.394,750.828 490.954,777.574 491.513,790.583 492.072,769.292 492.631,768.986 493.191,767.04 493.75,778.896 494.309,791.567 494.868,822.411 495.428,805.161 495.987,849.313 496.546,858.765 497.105,837.282 497.665,848.225 498.224,842.627 498.783,867.649 499.342,861.626 499.902,820.536 500.461,828.373 501.02,825.368 501.579,821.485 502.139,817.061 502.698,811.624 503.257,820.206 503.816,814.311 504.376,793.359 504.935,772.512 505.494,769.861 506.053,767.337 506.613,781.339 507.172,811.538 507.731,806.507 508.29,804.322 508.85,802.531 509.409,796.474 509.968,809.849 510.527,804.039 511.087,786.913 511.646,735.906 512.205,671.643 512.764,677.341 513.324,661.993 513.883,696.778 514.442,699.484 515.001,685.766 515.561,701.098 516.12,716.949 516.679,698.03 517.238,703.37 517.798,722.444 518.357,725.486 518.916,728.144 519.475,710.412 520.035,742.77 520.594,724.685 521.153,687.675 521.712,703.092 522.272,718.956 522.831,735.346 523.39,715.472 523.949,717.736 524.509,668.202 525.068,699.215 525.627,700.339 526.186,701.077 526.746,698.946 527.305,717.273 527.864,717.082 528.423,700.299 528.983,731.692 529.542,763.055 530.101,764.063 530.66,699.188 531.22,715.824 531.779,713.379 532.338,728.876 532.897,742.437 533.457,757.236 534.016,756.618 534.575,773.995 535.134,737.454 535.694,734.049 536.253,748.891 536.812,748.513 537.371,764.206 537.931,778.484 538.49,757.821 539.049,753.693 539.608,736.516 540.168,702.532 540.727,719.796 541.286,721.52 541.845,719.728 542.405,701.856 542.964,687.428 543.523,705.664 544.082,653.373 544.642,653.99 545.201,638.89 545.76,676.238 546.319,695.691 546.879,679.65 547.438,694.976 547.997,693.367 548.556,696.096 549.116,694.222 549.675,712.514 550.234,696.363 550.793,680.465 551.353,666.163 551.912,668.517 552.471,685.685 553.031,668.298 553.59,673.499 554.149,693.645 554.708,661.427 555.268,666.889 555.827,668.296 556.386,705.381 556.945,724.943 557.505,724.229 558.064,722.078 558.623,735.815 559.182,768.032 559.742,798.548 560.301,765.306 560.86,765.199 561.419,763.093 561.979,775.443 562.538,768.151 563.097,747.868 563.656,745.151 564.216,758.102 564.775,754.874 565.334,738.433 565.893,707.323 566.453,707.79 567.012,725.458 567.571,662.083 568.13,666.397 568.69,685.026 569.249,690.58 569.808,705.936 570.367,703.501 570.927,703.683 571.486,704.153 572.045,737.587 572.604,721.261 573.164,737.619 573.723,755.06 574.282,782.839 574.841,778.957 575.401,746.994 575.96,743.96 576.519,710.636 577.078,713.817 577.638,729.796 578.197,742.761 578.756,725.473 579.315,776.387 579.875,791.592 580.434,802.516 580.993,797.7 581.552,777.189 582.112,758.001 582.671,772.494 583.23,785.947 583.789,781.153 584.349,779.52 584.908,792.536 585.467,787.6 586.026,782.711 586.586,777.455 587.145,739.919 587.704,768.202 588.263,796.17 588.823,775.36 589.382,756.639 589.941,802.445 590.5,796.42 591.06,775.067 591.619,739.009 592.178,769.551 592.737,766.546 593.297,729.995 593.856,728.044 594.415,729.656 594.974,742.072 595.534,757.701 596.093,752.324 596.652,750.72 597.211,778.496 597.771,790.034 598.33,754.239 598.889,750.301 599.448,748.463 600.008,732.51 600.567,732.787 601.126,777.689 601.685,756.125 602.245,737.182 602.804,736.498 603.363,734.212 603.922,718.168 604.482,720.302 605.041,722.758 605.6,720.118 606.159,685.684 606.719,684.646 607.278,668.894 607.837,719.702 608.396,768.097 608.956,763.692 609.515,742.899 610.074,691.86 610.633,695.263 611.193,663.594 611.752,647.529 612.311,614.913 612.87,623.827 613.43,629.573 613.989,630.94 614.548,633.133 615.107,589.968 615.667,598.588 616.226,601.845 616.785,610.535 617.344,618.52 617.904,639.352 618.463,608.4 619.022,630.171 619.581,616.193 620.141,604.773 620.7,608.15 621.259,615.412 621.818,602.959 622.378,609.975 622.937,649.184 623.496,700.408 624.055,686.238 624.615,667.698 625.174,672.426 625.733,659.838 626.292,695.716 626.852,695.283 627.411,694.562 627.97,746.471 628.529,729.025 629.089,728.853 629.648,692.186 630.207,712.402 630.766,759.398 631.326,745.695 631.885,728.185 632.444,726.499 633.003,756.311 633.563,738.992 634.122,722.206 634.681,750.108 635.24,716.334 635.8,718.402 636.359,734.959 636.918,718.618 637.477,745.653 638.037,758.572 638.596,755.865 639.155,751.198 639.714,700.069 640.274,683.729 640.833,668.921 641.392,672.123 641.951,691.32 642.511,676.188 643.07,712.708 643.629,683.033 644.188,686.244 644.748,673.13 645.307,626.666 645.866,678.332 646.425,681.937 646.985,667.92 647.544,639.548 648.103,645.861 648.662,651.667 649.222,655.668 649.781,643.768 650.34,645.94 650.899,631.629 651.459,620.901 652.018,622.288 652.577,639.934 653.136,612.905 653.696,602.965 654.255,609.032 654.814,612.315 655.373,630.287 655.933,634.195 656.492,639.488 657.051,607.584 657.61,644.802 658.17,646.401 658.729,666.294 659.288,685.18 659.847,683.497 660.407,716.966 660.966,768.402 661.525,783.936 662.084,782.392 662.644,780.963 663.203,745.396 663.762,757.35 664.321,755.486 664.881,734.977 665.44,749.483 665.999,743.679 666.558,703.995 667.118,738.328 667.677,767.57 668.236,762.412 668.795,759.944 669.355,773.188 669.914,815.306 670.473,794.304 671.032,802.402 671.592,779.198 672.151,774.522 672.71,755.684 673.269,723.572 673.829,707.326 674.388,734.483 674.947,766.44 675.506,779.445 676.066,760.267 676.625,788.404 677.184,750.44 677.743,764.702 678.303,744.657 678.862,708.23 679.421,689.807 679.981,687.768 680.54,718.706 681.099,747.478 681.658,743.153 682.218,789.14 682.777,754.042 683.336,752.403 683.895,750.58 684.455,748.066 685.014,716.215 685.573,765.837 686.132,761.386 686.692,741.454 687.251,755.656 687.81,737.366 688.369,782.556 688.929,780.619 689.488,762.623 690.047,754.898 690.606,700.519 691.166,686.437 691.725,697.229 692.284,726.143 692.843,738.493 693.403,750.632 693.962,747.524 694.521,728.168 695.08,740.65 695.64,738.965 696.199,688.13 696.758,655.039 697.317,639.302 697.877,641.77 698.436,644.323 698.995,615.095 699.554,619.484 700.114,672.758 700.673,690.645 701.232,671.336 701.791,719.523 702.351,684.009 702.91,670.482 703.469,674.411 704.028,674.566 704.588,658.259 705.147,660.742 705.706,662.256 706.265,648.87 706.825,654.778 707.384,671.554 707.943,676.403 708.502,675.961 709.062,642.769 709.621,642.036 710.18,658.124 710.739,662.153 711.299,629.003 711.858,619.769 712.417,606.791 712.976,594.366 713.536,616.339 714.095,656.537 714.654,690.012 715.213,672.858 715.773,657.751 716.332,678.283 716.891,715.014 717.45,729.12 718.01,762.271 718.569,762.291 719.128,744.233 719.687,725.203 720.247,725.72 720.806,740.648 721.365,724.588 721.924,706.268 722.484,686.377 723.043,702.224 723.602,696.076 724.161,713.703 724.721,698.699 725.28,651.071 725.839,637.49 726.398,660.481 726.958,649.352 727.517,650.21 728.076,689.416 728.635,670.726 729.195,671.171 729.754,735.346 730.313,733.911 730.872,733.157 731.432,717.695 731.991,686.953 732.55,691.763 733.109,656.276 733.669,688.594 734.228,688.528 734.787,703.494 735.346,738.594 735.906,751.182 736.465,747.395 737.024,743.043 737.583,758.395 738.143,739.545 738.702,737.176 739.261,721.272 739.82,721.243 740.38,701.819 740.939,700.409 741.498,717.081 742.057,715.871 742.617,731.607 743.176,699.552 743.735,696.938 744.294,677.498 744.854,662.106 745.413,680.818 745.972,683.707 746.531,663.254 747.091,663.853 747.65,665.731 748.209,651.17 748.768,651.583 749.328,637.238 749.887,640.381 750.446,659.951 751.005,711.839 751.565,731.713 752.124,714.647 752.683,715.5 753.242,698.945 753.802,666.918 754.361,654.855 754.92,675.011 755.479,675.238 756.039,708.315 756.598,751.409 757.157,780.289 757.716,756.738 758.276,769.119 758.835,768.173 759.394,762.34 759.953,739.159 760.513,721.634 761.072,720.546 761.631,750.696 762.19,729.225 762.75,693.29 763.309,659.389 763.868,660.176 764.427,629.55 764.987,630.878 765.546,648.538 766.105,650.164 766.664,652.801 767.224,657.785 767.783,640.767 768.342,627.496 768.901,631.735 769.461,651.934 770.02,653.798 770.579,652.661 771.138,655.875 771.698,675.085 772.257,691.836 772.816,725.78 773.375,723.189 773.935,725.17 774.494,722.395 775.053,705.709 775.612,705.712 776.172,720.563 776.731,715.948 777.29,730.977 777.849,727.9 778.409,724.632 778.968,723.052 779.527,720.741 780.086,705.648 780.646,753.524 781.205,749.84 781.764,810.314 782.323,767.071 782.883,763.643 783.442,775.072 784.001,768.189 784.56,751.215 785.12,763.314 785.679,754.896 786.238,713.726 786.797,713.016 787.357,728.337 787.916,742.218 788.475,740.866 789.034,737.77 789.594,734.688 790.153,731.571 790.712,697.564 791.271,681.65 791.831,680.919 792.39,668.716 792.949,622.625 793.508,625.466 794.068,646.003 794.627,661.696 795.186,680.901 795.745,678.337 796.305,659.456 796.864,642.519 797.423,661.514 797.982,694.614 798.542,695.142 799.101,709.646 799.66,708.602 800.219,758.915 800.779,757.22 801.338,738.322 801.897,784.285 802.456,793.635 803.016,788.626 803.575,799.544 804.134,791.92 804.693,770.672 805.253,764.99 805.812,778.178 806.371,773.648 806.931,734.161 807.49,731.257 808.049,714.152 808.608,711.528 809.168,706.932 809.727,693.477 810.286,696.632 810.845,710.905 811.405,708.433 811.964,708.27 812.523,722.779 813.082,723.83 813.642,722.451 814.201,706.848 814.76,707.015 815.319,718.872 815.879,715.005 816.438,731.799 816.997,728.855 817.556,708.593 818.116,692.938 818.675,694.207 819.234,660.388 819.793,645.688 820.353,661.817 820.912,695.804 821.471,677.336 822.03,691.471 822.59,736.973 823.149,754.106 823.708,769.039 824.267,781.572 824.827,761.092 825.386,770.477 825.945,746.065 826.504,742.312 827.064,753.712 827.623,735.273 828.182,712.212 828.741,710.836 829.301,725.266 829.86,724.127 830.419,723.479 830.978,740.376 831.538,750.844 832.097,748.388 832.656,729.1 833.215,660.972 833.775,682.46 834.334,650.351 834.893,636.32 835.452,638.676 836.012,679.252 836.571,662.083 837.13,664.918 837.689,665.544 838.249,665.733 838.808,635.569 839.367,651.261 839.926,687.384 840.486,653.76 841.045,654.065 841.604,656.903 842.163,658.413 842.723,659.995 843.282,662.66 843.841,664.573 844.4,666.24 844.96,682.687 845.519,713.456 846.078,698.377 846.637,681.048 847.197,683.992 847.756,701.574 848.315,717.339 848.874,730.882 849.434,711.658 849.993,714.98 850.552,681.524 851.111,646.867 851.671,615.975 852.23,618.562 852.789,642.159 853.348,625.433 853.908,613.64 854.467,618.428 855.026,577.777 855.585,566.166 856.145,576.279 856.704,582.971 857.263,571.534 857.822,577.324 858.382,567.794 858.941,540.547 859.5,548.112 860.059,556.129 860.619,549.215 861.178,557.668 861.737,579.004 862.296,585.678 862.856,607.25 863.415,630.125 863.974,620.025 864.533,622.188 865.093,623.54 865.652,627.78 866.211,599.474 866.77,621.29 867.33,622.919 867.889,627.755 868.448,628.95 869.007,646.233 869.567,646.061 870.126,665.503 870.685,684.051 871.244,697.185 871.804,665.119 872.363,667.049 872.922,671.633 873.481,655.945 874.041,671.901 874.6,688.33 875.159,691.233 875.718,695.152 876.278,696.897 876.837,712.3 877.396,729.551 877.955,727.3 878.515,741.459 879.074,721.467 879.633,719.642 880.192,699.374 880.752,700.559 881.311,733.091 881.87,731.343 882.429,729.481 882.989,729.918 883.548,693.222 884.107,675.566 884.666,693.012 885.226,706.038 885.785,718.163 886.344,713.497 886.903,696.428 887.463,709.206 888.022,675.724 888.581,692.394 889.14,708.881 889.7,724.598 890.259,707.353 890.818,704.794 891.377,720.591 891.937,699.561 892.496,717.205 893.055,717.987 893.614,733.854 894.174,731.231 894.733,741.943 895.292,758.995 895.851,721.461 896.411,703.107 896.97,702.804 897.529,719.213 898.088,701.5 898.648,748.971 899.207,714.96 899.766,694.821 900.325,692.638 900.885,692.303 901.444,724.244 902.003,687.705 902.562,684.379 903.122,701.2 903.681,665.697 904.24,686.503 904.799,684.975 905.359,654.028 905.918,656.05 906.477,658.445 907.036,641.939 907.596,624.47 908.155,627.363 908.714,645.825 909.273,648.993 909.833,651.046 910.392,651.247 910.951,653.288 911.51,662.245 912.07,678.411 912.629,679.274 913.188,697.165 913.747,699.009 914.307,729.989 914.866,729.158 915.425,777.065 915.984,769.579 916.544,763.393 917.103,758.907 917.662,774.469 918.221,758.917 918.781,754.944 919.34,767.553 919.899,779.805 920.458,791.055 921.018,769.578 921.577,779.875 922.136,744.728 922.695,725.472 923.255,737.134 923.814,718.753 924.373,717.907 924.932,718.882 925.492,765.802 926.051,794.865 926.61,801.921 927.169,776.824 927.729,769.655 928.288,766.398 928.847,746.871 929.406,728.631 929.966,727.496 930.525,725.456 931.084,707.39 931.644,675.348 932.203,643.972 932.762,629.614 933.321,585.076 933.881,628.531 934.44,615.555 934.999,637.477 935.558,657.645 936.118,707.074 936.677,705.356 937.236,703.694 937.795,701.841 938.355,731.867 938.914,710.105 939.473,709.324 940.032,705.742 940.592,673.367 941.151,707.909 941.71,675.753 942.269,677.549 942.829,661.072 943.388,676.546 943.947,692.887 944.506,690.695 945.066,669.884 945.625,653.95 946.184,673.902 946.743,673.81 947.303,704.728 947.862,667.94 948.421,671.512 948.98,641.933 949.54,645.563 950.099,684.464 950.658,670.292 951.217,657.689 951.777,641.141 952.336,658.892 952.895,709.735 953.454,743.355 954.014,742.313 954.573,772.781 955.132,770.987 955.691,748.616 956.251,762.846 956.81,773.29 957.369,733.946 957.928,764.528 958.488,758.692 959.047,783.147 959.606,796.549 960.165,791.467 960.725,799.728 961.284,790.474 961.843,784.432 962.402,781.518 962.962,792.205 963.521,801.69 964.08,793.909 964.639,770.874 965.199,747.825 965.758,744.247 966.317,705.579 966.876,658.568 967.436,648.439 967.995,666.649 968.554,648.611 969.113,666.416 969.673,651.773 970.232,651.765 970.791,633.516 971.35,617.947 971.91,654.028 972.469,675.276 973.028,658.729 973.587,644.831 974.147,663.508 974.706,665.955 975.265,680.443 975.824,696.747 976.384,694.59 976.943,645.906 977.502,632.647 978.061,653.338 978.621,637.491 979.18,656.571 979.739,655.557 980.298,671.311 980.858,719.306 981.417,766.764 981.976,749.011 982.535,746.364 983.095,741.639 983.654,725.68 984.213,742.42 984.772,754.295 985.332,795.609 985.891,788.223 986.45,798.609 987.009,756.989 987.569,737.974 988.128,732.887 988.687,731.775 989.246,711.213 989.806,629.156 990.365,653.043 990.924,654.07 991.483,691.656 992.043,676.029 992.602,672.609 993.161,671.438 993.72,653.291 994.28,626.328 994.839,644.698 995.398,628.627 995.957,629.592 996.517,647.796 997.076,619.702 997.635,621.587 998.194,656.508 998.754,673.305 999.313,653.817 999.872,667.072 1000.43,636.544 1000.99,574.32 1001.55,579.7 1002.11,548.381 1002.67,586.459 1003.23,559.023 1003.79,580.765 1004.35,616.928 1004.91,618.592 1005.46,619.208 1006.02,639.676 1006.58,596.58 1007.14,564.945 1007.7,588.295 1008.26,531.632 1008.82,489.165 1009.38,501.407 1009.94,512.724 1010.5,519.764 1011.06,544.018 1011.62,535.96 1012.18,562.138 1012.73,555.054 1013.29,543.713 1013.85,553.317 1014.41,528.167 1014.97,554.531 1015.53,562.936 1016.09,569.94 1016.65,607.429 1017.21,595.497 1017.77,585.86 1018.33,586.851 1018.89,604.978 1019.45,594.811 1020.01,601.07 1020.56,604.142 1021.12,592.976 1021.68,596.9 1022.24,630.778 1022.8,669.468 1023.36,667.512 1023.92,668.058 1024.48,737.585 1025.04,733.737 1025.6,746.797 1026.16,760.081 1026.72,772.746 1027.28,753.541 1027.83,765.435 1028.39,758.562 1028.95,724.318 1029.51,707.207 1030.07,692.506 1030.63,743.664 1031.19,691.251 1031.75,709.437 1032.31,755.76 1032.87,766.382 1033.43,748.752 1033.99,759.095 1034.55,770.804 1035.1,768.235 1035.66,700.275 1036.22,747.864 1036.78,745.99 1037.34,788.029 1037.9,783.23 1038.46,778.388 1039.02,770.218 1039.58,731.182 1040.14,744.494 1040.7,740.555 1041.26,706.821 1041.82,705.335 1042.38,704.656 1042.93,770.801 1043.49,780.585 1044.05,774.237 1044.61,768.925 1045.17,747.176 1045.73,759.252 1046.29,754.888 1046.85,737.069 1047.41,751.549 1047.97,733.618 1048.53,746.147 1049.09,758.549 1049.65,692.69 1050.2,690.305 1050.76,688.727 1051.32,704.758 1051.88,688.319 1052.44,704.097 1053,637.135 1053.56,589.137 1054.12,606.441 1054.68,610.337 1055.24,628.011 1055.8,612.905 1056.36,633.254 1056.92,621.306 1057.48,688.033 1058.03,686.833 1058.59,685.73 1059.15,697.931 1059.71,709.872 1060.27,676.518 1060.83,694.551 1061.39,694.227 1061.95,693.365 1062.51,675.108 1063.07,657.568 1063.63,647.492 1064.19,666.333 1064.75,669.242 1065.3,657.718 1065.86,660.893 1066.42,644.665 1066.98,693.43 1067.54,706.086 1068.1,768.455 1068.66,761.956 1069.22,729.424 1069.78,713.347 1070.34,697.58 1070.9,662.861 1071.46,682.896 1072.02,650.78 1072.57,655.185 1073.13,656.106 1073.69,660.883 1074.25,660.213 1074.81,679.746 1075.37,648.225 1075.93,649.234 1076.49,651.394 1077.05,636.096 1077.61,638.826 1078.17,626.495 1078.73,631.708 1079.29,635.663 1079.85,656.092 1080.4,640.029 1080.96,623.089 1081.52,609.811 1082.08,627.317 1082.64,602.286 1083.2,621.703 1083.76,642.515 1084.32,613.24 1084.88,632.479 1085.44,667.416 1086,655.803 1086.56,653.169 1087.12,671.017 1087.67,655.682 1088.23,655.132 1088.79,673.295 1089.35,676.294 1089.91,661.107 1090.47,696.504 1091.03,699.152 1091.59,684.454 1092.15,686.956 1092.71,738.263 1093.27,749.807 1093.83,747.265 1094.39,740.353 1094.94,736.966 1095.5,751.007 1096.06,717.151 1096.62,730.069 1097.18,740.043 1097.74,702.673 1098.3,699.78 1098.86,664.333 1099.42,630.259 1099.98,650.032 1100.54,670.944 1101.1,706.611 1101.66,741.047 1102.22,723.915 1102.77,739.214 1103.33,701.267 1103.89,716.386 1104.45,700.005 1105.01,700.634 1105.57,683.022 1106.13,697.568 1106.69,681.315 1107.25,698.207 1107.81,682.819 1108.37,681.617 1108.93,666.189 1109.49,671.205 1110.04,691.409 1110.6,656.724 1111.16,675.219 1111.72,725.282 1112.28,721.535 1112.84,721.047 1113.4,706.824 1113.96,691.878 1114.52,674.988 1115.08,675.389 1115.64,673.193 1116.2,673.431 1116.76,676.528 1117.31,647.643 1117.87,682.885 1118.43,682.092 1118.99,683.792 1119.55,684.218 1120.11,649.859 1120.67,637.932 1121.23,641.587 1121.79,659.156 1122.35,702.841 1122.91,667.446 1123.47,651.49 1124.03,656.373 1124.59,619.556 1125.14,636.405 1125.7,655.311 1126.26,668.734 1126.82,669.598 1127.38,670.119 1127.94,688.988 1128.5,703.991 1129.06,700.225 1129.62,701.468 1130.18,700.288 1130.74,683.283 1131.3,699.077 1131.86,681.775 1132.41,662.558 1132.97,665.587 1133.53,653.788 1134.09,684.018 1134.65,650.417 1135.21,653.01 1135.77,672.006 1136.33,657.631 1136.89,660.266 1137.45,661.522 1138.01,676.497 1138.57,658.557 1139.13,659.865 1139.68,711.954 1140.24,690.341 1140.8,691.618 1141.36,690.692 1141.92,676.888 1142.48,693.639 1143.04,723.269 1143.6,737.797 1144.16,754.407 1144.72,750.329 1145.28,732.663 1145.84,747.356 1146.4,791.824 1146.96,786.344 1147.51,815.259 1148.07,795.421 1148.63,757.937 1149.19,706.195 1149.75,704.882 1150.31,736.458 1150.87,751.479 1151.43,746.837 1151.99,741.604 1152.55,674.731 1153.11,691.356 1153.67,703.008 1154.23,685.689 1154.78,668.842 1155.34,668.298 1155.9,617.621 1156.46,639.026 1157.02,639.014 1157.58,628.054 1158.14,629.286 1158.7,601.385 1159.26,619.571 1159.82,592.459 1160.38,614.061 1160.94,616.828 1161.5,606.412 1162.05,625.712 1162.61,629.942 1163.17,665.441 1163.73,683.451 1164.29,651.637 1164.85,638.891 1165.41,653.384 1165.97,671.156 1166.53,705.544 1167.09,706.061 1167.65,733.486 1168.21,697.256 1168.77,712.434 1169.33,681.753 1169.88,695.015 1170.44,679.085 1171,698.846 1171.56,696.986 1172.12,712.42 1172.68,726.372 1173.24,708.666 1173.8,678.158 1174.36,679.783 1174.92,658.828 1175.48,642.694 1176.04,643.531 1176.6,630.037 1177.15,614.094 1177.71,599.583 1178.27,617.486 1178.83,633.637 1179.39,631.732 1179.95,619.283 1180.51,607.666 1181.07,626.465 1181.63,612.403 1182.19,634.873 1182.75,638.184 1183.31,639.64 1183.87,657.769 1184.43,630.875 1184.98,616.919 1185.54,624.565 1186.1,612.814 1186.66,649.117 1187.22,667.66 1187.78,686.985 1188.34,704.372 1188.9,736.876 1189.46,748.59 1190.02,765.095 1190.58,778.674 1191.14,760.177 1191.7,774.408 1192.25,747.544 1192.81,743.557 1193.37,707.485 1193.93,690.817 1194.49,720.956 1195.05,705.918 1195.61,706.945 1196.17,673.992 1196.73,707.521 1197.29,672.576 1197.85,689.115 1198.41,737.326 1198.97,730.2 1199.52,776.187 1200.08,736.62 1200.64,768.231 1201.2,749.358 1201.76,761.417 1202.32,755.903 1202.88,735.881 1203.44,717.247 1204,765.881 1204.56,728.3 1205.12,741.822 1205.68,726.066 1206.24,708.294 1206.8,790.722 1207.35,737.833 1207.91,734.462 1208.47,700.054 1209.03,750.138 1209.59,746.166 1210.15,746.308 1210.71,732.178 1211.27,729.503 1211.83,721.476 1212.39,703.449 1212.95,734.893 1213.51,716.088 1214.07,700.142 1214.62,684.415 1215.18,667.267 1215.74,667.839 1216.3,669.915 1216.86,687.43 1217.42,688.675 1217.98,688.028 1218.54,684.619 1219.1,684.317 1219.66,667.834 1220.22,639.53 1220.78,640.734 1221.34,613.709 1221.89,634.413 1222.45,637.305 1223.01,643.767 1223.57,646.228 1224.13,664.369 1224.69,647.01 1225.25,697.448 1225.81,699.957 1226.37,684.019 1226.93,668.022 1227.49,702.778 1228.05,670.01 1228.61,691.711 1229.17,660.251 1229.72,629.267 1230.28,648.038 1230.84,681.564 1231.4,681.114 1231.96,663.642 1232.52,665.464 1233.08,666.306 1233.64,668.746 1234.2,668.588 1234.76,700.031 1235.32,699.957 1235.88,681.785 1236.44,646.414 1236.99,642.968 1237.55,644.377 1238.11,662.418 1238.67,663.386 1239.23,666.822 1239.79,669.447 1240.35,703.497 1240.91,716.988 1241.47,715.01 1242.03,700.04 1242.59,717.597 1243.15,713.47 1243.71,732.389 1244.26,695.389 1244.82,659.234 1245.38,592.578 1245.94,599.059 1246.5,573.455 1247.06,562.947 1247.62,583.543 1248.18,572.558 1248.74,544.256 1249.3,554.22 1249.86,578.261 1250.42,584.71 1250.98,590.313 1251.54,596.245 1252.09,638.021 1252.65,635.614 1253.21,639.836 1253.77,643.148 1254.33,662.775 1254.89,666.149 1255.45,697.085 1256.01,696.253 1256.57,695.502 1257.13,664.226 1257.69,681.993 1258.25,647.988 1258.81,632.191 1259.36,651.441 1259.92,671.959 1260.48,686.523 1261.04,700.688 1261.6,718.522 1262.16,669.298 1262.72,687.073 1263.28,673.092 1263.84,704.709 1264.4,717.355 1264.96,728.223 1265.52,741.713 1266.08,736.594 1266.63,718.904 1267.19,717.463 1267.75,745.117 1268.31,821.881 1268.87,831.731 1269.43,839.83 1269.99,833.496 1270.55,811.627 1271.11,817.903 1271.67,826.289 1272.23,804.623 1272.79,814.787 1273.35,726.272 1273.91,727.576 1274.46,726.869 1275.02,706.228 1275.58,691.546 1276.14,725.009 1276.7,674.399 1277.26,638.109 1277.82,623.833 1278.38,626.195 1278.94,661.83 1279.5,661.774 1280.06,663.239 1280.62,667.422 1281.18,652.757 1281.73,624.898 1282.29,594.868 1282.85,631.016 1283.41,633.329 1283.97,639.735 1284.53,662.308 1285.09,663.868 1285.65,682.61 1286.21,667.508 1286.77,669.609 1287.33,686.904 1287.89,703.992 1288.45,703.497 1289,719.228 1289.56,684.798 1290.12,698.701 1290.68,716.719 1291.24,731.265 1291.8,748.81 1292.36,764.578 1292.92,744.546 1293.48,707.37 1294.04,689.538 1294.6,673.735 1295.16,662.859 1295.72,679.76 1296.28,661.796 1296.83,662.687 1297.39,650.993 1297.95,684.863 1298.51,701.626 1299.07,714.644 1299.63,712.038 1300.19,710.947 1300.75,676.85 1301.31,676.289 1301.87,737.605 1302.43,763.63 1302.99,758.781 1303.55,754.392 1304.1,747.364 1304.66,745.678 1305.22,760.728 1305.78,771.954 1306.34,764.897 1306.9,761.953 1307.46,741.53 1308.02,738.772 1308.58,749.774 1309.14,718.276 1309.7,731.224 1310.26,712.05 1310.82,694.159 1311.38,723.72 1311.93,717.896 1312.49,745.977 1313.05,742.831 1313.61,726.153 1314.17,705.789 1314.73,702.241 1315.29,689.432 1315.85,689.001 1316.41,653.761 1316.97,721.213 1317.53,718.66 1318.09,732.261 1318.65,729.235 1319.2,725.487 1319.76,740.296 1320.32,723 1320.88,724.503 1321.44,740.696 1322,721.704 1322.56,719.256 1323.12,717.907 1323.68,681.531 1324.24,651.367 1324.8,636.006 1325.36,703.871 1325.92,718.17 1326.47,734.031 1327.03,697.711 1327.59,679.822 1328.15,648.058 1328.71,648.818 1329.27,632.911 1329.83,600.395 1330.39,620.914 1330.95,622.704 1331.51,626.646 1332.07,599.689 1332.63,586.597 1333.19,561.017 1333.75,555.28 1334.3,529.682 1334.86,557.829 1335.42,581.739 1335.98,539.267 1336.54,530.104 1337.1,571.378 1337.66,626.758 1338.22,644.288 1338.78,647.737 1339.34,649.949 1339.9,670.757 1340.46,672.22 1341.02,688.731 1341.57,687.685 1342.13,702.897 1342.69,669.993 1343.25,686.964 1343.81,703.154 1344.37,718.816 1344.93,718.652 1345.49,733.425 1346.05,727.983 1346.61,776.619 1347.17,753.763 1347.73,704.642 1348.29,692.064 1348.84,676.089 1349.4,644.295 1349.96,660.86 1350.52,646.131 1351.08,710.371 1351.64,709.608 1352.2,707.315 1352.76,673.325 1353.32,684.644 1353.88,700.279 1354.44,685.751 1355,686.701 1355.56,698.241 1356.12,696.222 1356.67,677.828 1357.23,677.819 1357.79,647.906 1358.35,633.697 1358.91,655.554 1359.47,624.224 1360.03,614.872 1360.59,583.855 1361.15,606.532 1361.71,546.118 1362.27,555.656 1362.83,533.722 1363.39,558.963 1363.94,563.997 1364.5,568.683 1365.06,610.378 1365.62,615.467 1366.18,653.921 1366.74,687.2 1367.3,703.895 1367.86,736.494 1368.42,720.299 1368.98,736.088 1369.54,717.916 1370.1,698.908 1370.66,730.185 1371.21,745.641 1371.77,740.062 1372.33,769.798 1372.89,800.066 1373.45,795.858 1374.01,788.732 1374.57,786.463 1375.13,763.603 1375.69,743.379 1376.25,740.45 1376.81,737.763 1377.37,704.145 1377.93,685.715 1378.49,698.607 1379.04,683.832 1379.6,671.06 1380.16,671.286 1380.72,672.98 1381.28,688.191 1381.84,672.686 1382.4,674.013 1382.96,676.305 1383.52,680.472 1384.08,679.457 1384.64,694.456 1385.2,677.36 1385.76,696.458 1386.31,697.942 1386.87,711.26 1387.43,713.741 1387.99,716.896 1388.55,735.098 1389.11,708.157 1389.67,656.928 1390.23,676.668 1390.79,693.471 1391.35,706.846 1391.91,687.859 1392.47,691.196 1393.03,660.033 1393.58,693.898 1394.14,676.439 1394.7,721.903 1395.26,667.234 1395.82,666.738 1396.38,668.204 1396.94,701.443 1397.5,670.652 1398.06,653.588 1398.62,640.782 1399.18,607.485 1399.74,645.869 1400.3,664.488 1400.86,650.122 1401.41,667.14 1401.97,665.118 1402.53,712.649 1403.09,708.461 1403.65,710.021 1404.21,708.748 1404.77,671.908 1405.33,690.597 1405.89,693.378 1406.45,696.171 1407.01,664.016 1407.57,662.751 1408.13,664.347 1408.68,666.163 1409.24,635.552 1409.8,622.21 1410.36,624.408 1410.92,611.685 1411.48,617.916 1412.04,638.224 1412.6,626.016 1413.16,612.298 1413.72,634.215 1414.28,650.818 1414.84,668.161 1415.4,635.555 1415.95,670.934 1416.51,656.772 1417.07,645.184 1417.63,647.408 1418.19,617.103 1418.75,622.047 1419.31,642.883 1419.87,611.926 1420.43,633.031 1420.99,654.391 1421.55,607.629 1422.11,614.413 1422.67,615.322 1423.23,618.976 1423.78,643.997 1424.34,661.657 1424.9,613.032 1425.46,662.114 1426.02,663.852 1426.58,632.527 1427.14,649.834 1427.7,651.06 1428.26,651.373 1428.82,653.069 1429.38,686.591 1429.94,686.187 1430.5,717.889 1431.05,715.996 1431.61,729.25 1432.17,663.215 1432.73,698.65 1433.29,697.282 1433.85,708.831 1434.41,756.895 1434.97,770.455 1435.53,764.652 1436.09,757.735 1436.65,722.149 1437.21,738.759 1437.77,706.375 1438.33,723.347 1438.88,705.027 1439.44,733.97 1440,728.837 1440.56,709.355 1441.12,675.628 1441.68,657.25 1442.24,707.691 1442.8,738.76 1443.36,737.214 1443.92,721.797 1444.48,702.085 1445.04,700.233 1445.6,713.115 1446.15,741.484 1446.71,737.18 1447.27,737.12 1447.83,734.662 1448.39,733.808 1448.95,695.075 1449.51,693.754 1450.07,711.086 1450.63,708.417 1451.19,725.12 1451.75,722.392 1452.31,688.398 1452.87,685.695 1453.42,716.603 1453.98,712.533 1454.54,694.158 1455.1,725.708 1455.66,721.652 1456.22,702.533 1456.78,716.594 1457.34,697.099 1457.9,696.036 1458.46,678.693 1459.02,709.541 1459.58,707.359 1460.14,703.265 1460.7,670.466 1461.25,654.676 1461.81,656.808 1462.37,672.705 1462.93,687.108 1463.49,685.803 1464.05,622.295 1464.61,644.128 1465.17,648.692 1465.73,649.635 1466.29,633.697 1466.85,637.692 1467.41,625.589 1467.97,628.084 1468.52,626.894 1469.08,610.933 1469.64,612.988 1470.2,615.163 1470.76,617.649 1471.32,620.216 1471.88,640.086 1472.44,640.885 1473,624.241 1473.56,644.498 1474.12,663.317 1474.68,664.843 1475.24,712.427 1475.79,727.855 1476.35,757.595 1476.91,770.884 1477.47,781.456 1478.03,759.973 1478.59,741.3 1479.15,755.789 1479.71,720.512 1480.27,719.964 1480.83,697.679 1481.39,714.001 1481.95,729.217 1482.51,727.5 1483.07,739.82 1483.62,718.384 1484.18,749.399 1484.74,730.014 1485.3,729.722 1485.86,742.417 1486.42,721.656 1486.98,720.1 1487.54,752.362 1488.1,729.715 1488.66,744.08 1489.22,772.459 1489.78,766.72 1490.34,775.441 1490.89,723.207 1491.45,705.265 1492.01,718.413 1492.57,699.63 1493.13,700.425 1493.69,632.086 1494.25,636.775 1494.81,656.123 1495.37,655.245 1495.93,674.35 1496.49,660.586 1497.05,611.55 1497.61,583.999 1498.16,589.19 1498.72,581.051 1499.28,587.809 1499.84,595.193 1500.4,633.539 1500.96,603.341 1501.52,610.34 1502.08,615.211 1502.64,651.889 1503.2,654.62 1503.76,671.854 1504.32,655.838 1504.88,642.699 1505.44,661.743 1505.99,646.557 1506.55,680.512 1507.11,680.715 1507.67,682.711 1508.23,680.905 1508.79,680.087 1509.35,662.203 1509.91,664.404 1510.47,682.468 1511.03,695.411 1511.59,658.774 1512.15,641.164 1512.71,640.043 1513.26,656.421 1513.82,656.489 1514.38,657.863 1514.94,677.56 1515.5,672.89 1516.06,673.942 1516.62,691.679 1517.18,672.148 1517.74,673.468 1518.3,722.016 1518.86,756.159 1519.42,766.637 1519.98,793.398 1520.53,803.582 1521.09,781.151 1521.65,763.816 1522.21,776.642 1522.77,724.786 1523.33,705.41 1523.89,705.186 1524.45,704.928 1525.01,706.084 1525.57,658.342 1526.13,643.164 1526.69,676.863 1527.25,708.22 1527.81,721.562 1528.36,702.134 1528.92,698.133 1529.48,649.297 1530.04,633.15 1530.6,636.403 1531.16,653.878 1531.72,638.884 1532.28,612.586 1532.84,633.88 1533.4,606.64 1533.96,594.723 1534.52,613.302 1535.08,620.726 1535.63,623.592 1536.19,656.602 1536.75,654.203 1537.31,689.444 1537.87,722.373 1538.43,703.579 1538.99,684.487 1539.55,682.645 1540.11,698.232 1540.67,681.169 1541.23,681.12 1541.79,680.989 1542.35,663.517 1542.9,677.923 1543.46,679.115 1544.02,697.467 1544.58,677.965 1545.14,693.701 1545.7,675.33 1546.26,676.147 1546.82,647.367 1547.38,651.629 1547.94,639.007 1548.5,624.794 1549.06,626.809 1549.62,649.187 1550.18,686.603 1550.73,717.534 1551.29,702.676 1551.85,702.185 1552.41,701.94 1552.97,719.259 1553.53,748.173 1554.09,759.993 1554.65,737.918 1555.21,734.646 1555.77,732.044 1556.33,730.824 1556.89,713.589 1557.45,710.635 1558,713.354 1558.56,728.865 1559.12,728.449 1559.68,760.135 1560.24,771.917 1560.8,771.175 1561.36,766.054 1561.92,762.043 1562.48,759.049 1563.04,788.151 1563.6,764.026 1564.16,725.214 1564.72,754.158 1565.28,717.57 1565.83,713.1 1566.39,680.823 1566.95,681.101 1567.51,651.152 1568.07,668.017 1568.63,684.859 1569.19,671.764 1569.75,687.92 1570.31,672.894 1570.87,674.645 1571.43,671.87 1571.99,672.9 1572.55,674.42 1573.1,644.302 1573.66,675.536 1574.22,657.355 1574.78,690.559 1575.34,708.508 1575.9,723.585 1576.46,688.887 1577.02,689.394 1577.58,674.333 1578.14,691.574 1578.7,641.907 1579.26,613.475 1579.82,685.789 1580.37,685.719 1580.93,687.621 1581.49,671.717 1582.05,674.065 1582.61,689.405 1583.17,705.805 1583.73,692.893 1584.29,676.579 1584.85,692.933 1585.41,694.54 1585.97,680.652 1586.53,682.638 1587.09,681.712 1587.65,667.621 1588.2,652.311 1588.76,653.195 1589.32,619.94 1589.88,656.974 1590.44,688.95 1591,719.9 1591.56,722.422 1592.12,723.478 1592.68,725.144 1593.24,707.6 1593.8,691.298 1594.36,706.206 1594.92,705.47 1595.47,722.172 1596.03,764.732 1596.59,776.56 1597.15,770.551 1597.71,766.102 1598.27,761.598 1598.83,755.676 1599.39,736.985 1599.95,737.061 1600.51,699.78 1601.07,680.313 1601.63,677.756 1602.19,675.916 1602.74,659.513 1603.3,630.287 1603.86,632.09 1604.42,650.227 1604.98,652.898 1605.54,671.204 1606.1,654.328 1606.66,672.82 1607.22,690.947 1607.78,689.68 1608.34,689.597 1608.9,628.105 1609.46,660.589 1610.02,645.798 1610.57,643.043 1611.13,639.928 1611.69,656.723 1612.25,642.48 1612.81,677.473 1613.37,646.44 1613.93,646.59 1614.49,665.695 1615.05,668.548 1615.61,621.203 1616.17,643.351 1616.73,679.587 1617.29,682.733 1617.84,664.446 1618.4,679.792 1618.96,666.607 1619.52,649.389 1620.08,636.124 1620.64,685.479 1621.2,687.954 1621.76,684.66 1622.32,665.617 1622.88,681.541 1623.44,680.429 1624,693.896 1624.56,675.968 1625.11,675.092 1625.67,641.772 1626.23,676.814 1626.79,663.3 1627.35,665.099 1627.91,664.708 1628.47,700.464 1629.03,732.659 1629.59,764.007 1630.15,773.523 1630.71,756.171 1631.27,734.338 1631.83,729.966 1632.39,691.497 1632.94,706.143 1633.5,724.291 1634.06,690.442 1634.62,672.422 1635.18,719.507 1635.74,668.798 1636.3,667.999 1636.86,684.604 1637.42,717.569 1637.98,732.468 1638.54,766.633 1639.1,777.487 1639.66,774.396 1640.21,735.1 1640.77,735.179 1641.33,716.719 1641.89,696.652 1642.45,649.571 1643.01,702.376 1643.57,703.35 1644.13,716.354 1644.69,719.098 1645.25,682.881 1645.81,730.682 1646.37,728.249 1646.93,722.401 1647.48,688.185 1648.04,671.941 1648.6,672.971 1649.16,689.847 1649.72,675.549 1650.28,672.681 1650.84,655.148 1651.4,606.672 1651.96,611.217 1652.52,618.996 1653.08,603.959 1653.64,590.811 1654.2,612.346 1654.76,647.348 1655.31,681.627 1655.87,681.207 1656.43,635.342 1656.99,625.651 1657.55,599.531 1658.11,635.223 1658.67,622.809 1659.23,609.365 1659.79,678.433 1660.35,690.389 1660.91,704.732 1661.47,717.151 1662.03,701.109 1662.58,684.58 1663.14,697.433 1663.7,682.028 1664.26,711.425 1664.82,709.34 1665.38,691.06 1665.94,688.798 1666.5,702.642 1667.06,718.59 1667.62,700.627 1668.18,716.559 1668.74,728.028 1669.3,740.131 1669.85,723.287 1670.41,719.932 1670.97,717.21 1671.53,714.589 1672.09,682.216 1672.65,664.603 1673.21,667.03 1673.77,639.648 1674.33,658.309 1674.89,641.111 1675.45,630.226 1676.01,632.839 1676.57,649.625 1677.13,634.808 1677.68,666.822 1678.24,679.723 1678.8,660.087 1679.36,690.493 1679.92,689.754 1680.48,708.819 1681.04,709.915 1681.6,744.106 1682.16,739.236 1682.72,737.443 1683.28,705.25 1683.84,734.798 1684.4,747.799 1684.95,776.311 1685.51,722.011 1686.07,719.257 1686.63,701.613 1687.19,698.514 1687.75,698.662 1688.31,729.722 1688.87,710.359 1689.43,692.645 1689.99,694.117 1690.55,675.317 1691.11,678.538 1691.67,679.633 1692.23,682.01 1692.78,666.894 1693.34,650.599 1693.9,671.556 1694.46,688.616 1695.02,689.269 1695.58,707.597 1696.14,659.185 1696.7,675.757 1697.26,708.433 1697.82,708.791 1698.38,722.42 1698.94,750.976 1699.5,731.446 1700.05,697.789 1700.61,698.966 1701.17,681.183 1701.73,648.053 1702.29,686.428 1702.85,703.98 1703.41,754.693 1703.97,706.497 1704.53,704.779 1705.09,720.33 1705.65,717.95 1706.21,714.065 1706.77,711.046 1707.32,659.26 1707.88,661.25 1708.44,660.115 1709,692.491 1709.56,695.424 1710.12,679.455 1710.68,698.075 1711.24,698.563 1711.8,700.422 1712.36,682.092 1712.92,667.491 1713.48,684.805 1714.04,669.59 1714.6,669.677 1715.15,671.796 1715.71,690.149 1716.27,721.145 1716.83,687.86 1717.39,708.93 1717.95,724.797 1718.51,688.148 1719.07,705.641 1719.63,673.979 1720.19,676.662 1720.75,709.298 1721.31,689.082 1721.87,687.536 1722.42,668.219 1722.98,700.449 1723.54,720.459 1724.1,720.698 1724.66,683.424 1725.22,665.363 1725.78,652.606 1726.34,653.207 1726.9,620.885 1727.46,655.95 1728.02,658.355 1728.58,676.04 1729.14,691.289 1729.69,674.511 1730.25,671.871 1730.81,637.963 1731.37,636.46 1731.93,606.752 1732.49,611.853 1733.05,633.522 1733.61,604.315 1734.17,622.522 1734.73,625.384 1735.29,627.504 1735.85,646.242 1736.41,632.517 1736.97,632.779 1737.52,634.423 1738.08,650.887 1738.64,683.72 1739.2,698.871 1739.76,746.14 1740.32,676.448 1740.88,678.013 1741.44,645.233 1742,660.57 1742.56,662.852 1743.12,610.176 1743.68,612.657 1744.24,613.671 1744.79,599.459 1745.35,587.035 1745.91,625.546 1746.47,663.54 1747.03,642.853 1747.59,645.069 1748.15,648.132 1748.71,634.069 1749.27,636.05 1749.83,653.329 1750.39,688.978 1750.95,684.262 1751.51,700.849 1752.06,668.952 1752.62,673.86 1753.18,655.86 1753.74,675.262 1754.3,641.798 1754.86,644.814 1755.42,664.377 1755.98,651.194 1756.54,653.12 1757.1,652.776 1757.66,665.366 1758.22,665.899 1758.78,669.586 1759.34,700.717 1759.89,715.929 1760.45,714.458 1761.01,759.075 1761.57,756.656 1762.13,756.387 1762.69,767.571 1763.25,762.334 1763.81,771.84 1764.37,752.133 1764.93,777.37 1765.49,771.236 1766.05,749.278 1766.61,727.778 1767.16,758.499 1767.72,788.146 1768.28,768.464 1768.84,747.825 1769.4,740.11 1769.96,735.283 1770.52,728.415 1771.08,742.967 1771.64,740.527 1772.2,735.321 1772.76,730.955 1773.32,726.089 1773.88,756.757 1774.43,755.162 1774.99,755.278 1775.55,721.008 1776.11,720.172 1776.67,704.961 1777.23,751.747 1777.79,717.331 1778.35,714.633 1778.91,713.334 1779.47,723.274 1780.03,704.835 1780.59,720.158 1781.15,721.473 1781.71,704.982 1782.26,702.053 1782.82,701.441 1783.38,703.294 1783.94,702.164 1784.5,716.914 1785.06,683.263 1785.62,666.27 1786.18,666.21 1786.74,683.695 1787.3,669.833 1787.86,701.756 1788.42,653.183 1788.98,670.868 1789.53,654.972 1790.09,640.298 1790.65,628.128 1791.21,632.011 1791.77,635.818 1792.33,669.625 1792.89,669.686 1793.45,670.787 1794.01,637.106 1794.57,638.88 1795.13,623.272 1795.69,643.513 1796.25,644.414 1796.8,647.905 1797.36,633.582 1797.92,617.435 1798.48,621.712 1799.04,626.18 1799.6,630.919 1800.16,632.085 1800.72,637.362 1801.28,635.855 1801.84,621.654 1802.4,642.203 1802.96,633.121 1803.52,652.901 1804.08,689.023 1804.63,655.584 1805.19,640.636 1805.75,626.488 1806.31,626.666 1806.87,630.766 1807.43,649.154 1807.99,670.727 1808.55,652.825 1809.11,669.155 1809.67,667.868 1810.23,686.023 1810.79,670.899 1811.35,625.462 1811.9,613.85 1812.46,631.481 1813.02,621.012 1813.58,621.676 1814.14,624.824 1814.7,645.263 1815.26,650.511 1815.82,654.315 1816.38,622.761 1816.94,646.202 1817.5,633.643 1818.06,665.039 1818.62,681.256 1819.18,678.32 1819.73,684.391 1820.29,733.184 1820.85,734.424 1821.41,731.847 1821.97,746.139 1822.53,725.952 1823.09,737.85 1823.65,749.069 1824.21,778.378 1824.77,804.889 1825.33,780.367 1825.89,760.689 1826.45,772.969 1827,788.498 1827.56,785.227 1828.12,780.744 1828.68,758.654 1829.24,786.198 1829.8,779.017 1830.36,721.004 1830.92,737.999 1831.48,704.397 1832.04,719.832 1832.6,734.017 1833.16,733.44 1833.72,719.086 1834.27,714.683 1834.83,712.551 1835.39,724.523 1835.95,720.283 1836.51,718.978 1837.07,697.39 1837.63,696.793 1838.19,691.799 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 690.539 L720.806 690.539 L721.365 690.539 L721.924 690.539 L722.484 690.539 L723.043 690.539 L723.602 690.539 L724.161 690.539 L724.721 690.539 L725.28 690.539 L725.839 690.539 L726.398 690.539 L726.958 690.539 L727.517 690.539 L728.076 690.539 L728.635 690.539 L729.195 690.539 L729.754 690.539 L730.313 690.539 L730.872 690.539 L731.432 690.539 L731.991 690.539 L732.55 690.539 L733.109 690.539 L733.669 690.539 L734.228 690.539 L734.787 690.539 L735.346 690.539 L735.906 690.539 L736.465 690.539 L737.024 690.539 L737.583 690.539 L738.143 690.539 L738.702 690.539 L739.261 690.539 L739.82 690.539 L740.38 690.539 L740.939 690.539 L741.498 690.539 L742.057 690.539 L742.617 690.539 L743.176 690.539 L743.735 690.539 L744.294 690.539 L744.854 690.539 L745.413 690.539 L745.972 690.539 L746.531 690.539 L747.091 690.539 L747.65 690.539 L748.209 690.539 L748.768 690.539 L749.328 690.539 L749.887 690.539 L750.446 690.539 L751.005 690.539 L751.565 690.539 L752.124 690.539 L752.683 690.539 L753.242 690.539 L753.802 690.539 L754.361 690.539 L754.92 690.539 L755.479 690.539 L756.039 690.539 L756.598 690.539 L757.157 690.539 L757.716 690.539 L758.276 690.539 L758.835 690.539 L759.394 690.539 L759.953 690.539 L760.513 690.539 L761.072 690.539 L761.631 690.539 L762.19 690.539 L762.75 690.539 L763.309 690.539 L763.868 690.539 L764.427 690.539 L764.987 690.539 L765.546 690.539 L766.105 690.539 L766.664 690.539 L767.224 690.539 L767.783 690.539 L768.342 690.539 L768.901 690.539 L769.461 690.539 L770.02 690.539 L770.579 690.539 L771.138 690.539 L771.698 690.539 L772.257 690.539 L772.816 690.539 L773.375 690.539 L773.935 690.539 L774.494 690.539 L775.053 690.539 L775.612 690.539 L776.172 690.539 L776.731 690.539 L777.29 690.539 L777.849 690.539 L778.409 690.539 L778.968 690.539 L779.527 690.539 L780.086 690.539 L780.646 690.539 L781.205 690.539 L781.764 690.539 L782.323 690.539 L782.883 690.539 L783.442 690.539 L784.001 690.539 L784.56 690.539 L785.12 690.539 L785.679 690.539 L786.238 690.539 L786.797 690.539 L787.357 690.539 L787.916 690.539 L788.475 690.539 L789.034 690.539 L789.594 690.539 L790.153 690.539 L790.712 690.539 L791.271 690.539 L791.831 690.539 L792.39 690.539 L792.949 690.539 L793.508 690.539 L794.068 690.539 L794.627 690.539 L795.186 690.539 L795.745 690.539 L796.305 690.539 L796.864 690.539 L797.423 690.539 L797.982 690.539 L798.542 690.539 L799.101 690.539 L799.66 690.539 L800.219 690.539 L800.779 690.539 L801.338 690.539 L801.897 690.539 L802.456 690.539 L803.016 690.539 L803.575 690.539 L804.134 690.539 L804.693 690.539 L805.253 690.539 L805.812 690.539 L806.371 690.539 L806.931 690.539 L807.49 690.539 L808.049 690.539 L808.608 690.539 L809.168 690.539 L809.727 690.539 L810.286 690.539 L810.845 690.539 L811.405 690.539 L811.964 690.539 L812.523 690.539 L813.082 690.539 L813.642 690.539 L814.201 690.539 L814.76 690.539 L815.319 690.539 L815.879 690.539 L816.438 690.539 L816.997 690.539 L817.556 690.539 L818.116 690.539 L818.675 690.539 L819.234 690.539 L819.793 690.539 L820.353 690.539 L820.912 690.539 L821.471 690.539 L822.03 690.539 L822.59 690.539 L823.149 690.539 L823.708 690.539 L824.267 690.539 L824.827 690.539 L825.386 690.539 L825.945 690.539 L826.504 690.539 L827.064 690.539 L827.623 690.539 L828.182 690.539 L828.741 690.539 L829.301 690.539 L829.86 690.539 L830.419 690.539 L830.978 690.539 L831.538 690.539 L832.097 690.539 L832.656 690.539 L833.215 690.539 L833.775 690.539 L834.334 690.539 L834.893 690.539 L835.452 690.539 L836.012 690.539 L836.571 690.539 L837.13 690.539 L837.689 690.539 L838.249 690.539 L838.808 690.539 L839.367 690.539 L839.926 690.539 L840.486 690.539 L841.045 690.539 L841.604 690.539 L842.163 690.539 L842.723 690.539 L843.282 690.539 L843.841 690.539 L844.4 690.539 L844.96 690.539 L845.519 690.539 L846.078 690.539 L846.637 690.539 L847.197 690.539 L847.756 690.539 L848.315 690.539 L848.874 690.539 L849.434 690.539 L849.993 690.539 L850.552 690.539 L851.111 690.539 L851.671 690.539 L852.23 690.539 L852.789 690.539 L853.348 690.539 L853.908 690.539 L854.467 690.539 L855.026 690.539 L855.585 690.539 L856.145 690.539 L856.704 690.539 L857.263 690.539 L857.822 690.539 L858.382 690.539 L858.941 690.539 L859.5 690.539 L860.059 690.539 L860.619 690.539 L861.178 690.539 L861.737 690.539 L862.296 690.539 L862.856 690.539 L863.415 690.539 L863.974 690.539 L864.533 690.539 L865.093 690.539 L865.652 690.539 L866.211 690.539 L866.77 690.539 L867.33 690.539 L867.889 690.539 L868.448 690.539 L869.007 690.539 L869.567 690.539 L870.126 690.539 L870.685 690.539 L871.244 690.539 L871.804 690.539 L872.363 690.539 L872.922 690.539 L873.481 690.539 L874.041 690.539 L874.6 690.539 L875.159 690.539 L875.718 690.539 L876.278 690.539 L876.837 690.539 L877.396 690.539 L877.955 690.539 L878.515 690.539 L879.074 690.539 L879.633 690.539 L880.192 690.539 L880.752 690.539 L881.311 690.539 L881.87 690.539 L882.429 690.539 L882.989 690.539 L883.548 690.539 L884.107 690.539 L884.666 690.539 L885.226 690.539 L885.785 690.539 L886.344 690.539 L886.903 690.539 L887.463 690.539 L888.022 690.539 L888.581 690.539 L889.14 690.539 L889.7 690.539 L890.259 690.539 L890.818 690.539 L891.377 690.539 L891.937 690.539 L892.496 690.539 L893.055 690.539 L893.614 690.539 L894.174 690.539 L894.733 690.539 L895.292 690.539 L895.851 690.539 L896.411 690.539 L896.97 690.539 L897.529 690.539 L898.088 690.539 L898.648 690.539 L899.207 690.539 L899.766 690.539 L900.325 690.539 L900.885 690.539 L901.444 690.539 L902.003 690.539 L902.562 690.539 L903.122 690.539 L903.681 690.539 L904.24 690.539 L904.799 690.539 L905.359 690.539 L905.918 690.539 L906.477 690.539 L907.036 690.539 L907.596 690.539 L908.155 690.539 L908.714 690.539 L909.273 690.539 L909.833 690.539 L910.392 690.539 L910.951 690.539 L911.51 690.539 L912.07 690.539 L912.629 690.539 L913.188 690.539 L913.747 690.539 L914.307 690.539 L914.866 690.539 L915.425 690.539 L915.984 690.539 L916.544 690.539 L917.103 690.539 L917.662 690.539 L918.221 690.539 L918.781 690.539 L919.34 690.539 L919.899 690.539 L920.458 690.539 L921.018 690.539 L921.577 690.539 L922.136 690.539 L922.695 690.539 L923.255 690.539 L923.814 690.539 L924.373 690.539 L924.932 690.539 L925.492 690.539 L926.051 690.539 L926.61 690.539 L927.169 690.539 L927.729 690.539 L928.288 690.539 L928.847 690.539 L929.406 690.539 L929.966 690.539 L930.525 690.539 L931.084 690.539 L931.644 690.539 L932.203 690.539 L932.762 690.539 L933.321 690.539 L933.881 690.539 L934.44 690.539 L934.999 690.539 L935.558 690.539 L936.118 690.539 L936.677 690.539 L937.236 690.539 L937.795 690.539 L938.355 690.539 L938.914 690.539 L939.473 690.539 L940.032 690.539 L940.592 690.539 L941.151 690.539 L941.71 690.539 L942.269 690.539 L942.829 690.539 L943.388 690.539 L943.947 690.539 L944.506 690.539 L945.066 690.539 L945.625 690.539 L946.184 690.539 L946.743 690.539 L947.303 690.539 L947.862 690.539 L948.421 690.539 L948.98 690.539 L949.54 690.539 L950.099 690.539 L950.658 690.539 L951.217 690.539 L951.777 690.539 L952.336 690.539 L952.895 690.539 L953.454 690.539 L954.014 690.539 L954.573 690.539 L955.132 690.539 L955.691 690.539 L956.251 690.539 L956.81 690.539 L957.369 690.539 L957.928 690.539 L958.488 690.539 L959.047 690.539 L959.606 690.539 L960.165 690.539 L960.725 690.539 L961.284 690.539 L961.843 690.539 L962.402 690.539 L962.962 690.539 L963.521 690.539 L964.08 690.539 L964.639 690.539 L965.199 690.539 L965.758 690.539 L966.317 690.539 L966.876 690.539 L967.436 690.539 L967.995 690.539 L968.554 690.539 L969.113 690.539 L969.673 690.539 L970.232 690.539 L970.791 690.539 L971.35 690.539 L971.91 690.539 L972.469 690.539 L973.028 690.539 L973.587 690.539 L974.147 690.539 L974.706 690.539 L975.265 690.539 L975.824 690.539 L976.384 690.539 L976.943 690.539 L977.502 690.539 L978.061 690.539 L978.621 690.539 L979.18 690.539 L979.739 690.539 L980.298 690.539 L980.858 690.539 L981.417 690.539 L981.976 690.539 L982.535 690.539 L983.095 690.539 L983.654 690.539 L984.213 690.539 L984.772 690.539 L985.332 690.539 L985.891 690.539 L986.45 690.539 L987.009 690.539 L987.569 690.539 L988.128 690.539 L988.687 690.539 L989.246 690.539 L989.806 690.539 L990.365 690.539 L990.924 690.539 L991.483 690.539 L992.043 690.539 L992.602 690.539 L993.161 690.539 L993.72 690.539 L994.28 690.539 L994.839 690.539 L995.398 690.539 L995.957 690.539 L996.517 690.539 L997.076 690.539 L997.635 690.539 L998.194 690.539 L998.754 690.539 L999.313 690.539 L999.872 690.539 L1000.43 690.539 L1000.99 690.539 L1001.55 690.539 L1002.11 690.539 L1002.67 690.539 L1003.23 690.539 L1003.79 690.539 L1004.35 690.539 L1004.91 690.539 L1005.46 690.539 L1006.02 690.539 L1006.58 690.539 L1007.14 690.539 L1007.7 690.539 L1008.26 690.539 L1008.82 690.539 L1009.38 690.539 L1009.94 690.539 L1010.5 690.539 L1011.06 690.539 L1011.62 690.539 L1012.18 690.539 L1012.73 690.539 L1013.29 690.539 L1013.85 690.539 L1014.41 690.539 L1014.97 690.539 L1015.53 690.539 L1016.09 690.539 L1016.65 690.539 L1017.21 690.539 L1017.77 690.539 L1018.33 690.539 L1018.89 690.539 L1019.45 690.539 L1020.01 690.539 L1020.56 690.539 L1021.12 690.539 L1021.68 690.539 L1022.24 690.539 L1022.8 690.539 L1023.36 690.539 L1023.92 690.539 L1024.48 690.539 L1025.04 690.539 L1025.6 690.539 L1026.16 690.539 L1026.72 690.539 L1027.28 690.539 L1027.83 690.539 L1028.39 690.539 L1028.95 690.539 L1029.51 690.539 L1030.07 690.539 L1030.63 690.539 L1031.19 690.539 L1031.75 690.539 L1032.31 690.539 L1032.87 690.539 L1033.43 690.539 L1033.99 690.539 L1034.55 690.539 L1035.1 690.539 L1035.66 690.539 L1036.22 690.539 L1036.78 690.539 L1037.34 690.539 L1037.9 690.539 L1038.46 690.539 L1039.02 690.539 L1039.58 690.539 L1040.14 690.539 L1040.7 690.539 L1041.26 690.539 L1041.82 690.539 L1042.38 690.539 L1042.93 690.539 L1043.49 690.539 L1044.05 690.539 L1044.61 690.539 L1045.17 690.539 L1045.73 690.539 L1046.29 690.539 L1046.85 690.539 L1047.41 690.539 L1047.97 690.539 L1048.53 690.539 L1049.09 690.539 L1049.65 690.539 L1050.2 690.539 L1050.76 690.539 L1051.32 690.539 L1051.88 690.539 L1052.44 690.539 L1053 690.539 L1053.56 690.539 L1054.12 690.539 L1054.68 690.539 L1055.24 690.539 L1055.8 690.539 L1056.36 690.539 L1056.92 690.539 L1057.48 690.539 L1058.03 690.539 L1058.59 690.539 L1059.15 690.539 L1059.71 690.539 L1060.27 690.539 L1060.83 690.539 L1061.39 690.539 L1061.95 690.539 L1062.51 690.539 L1063.07 690.539 L1063.63 690.539 L1064.19 690.539 L1064.75 690.539 L1065.3 690.539 L1065.86 690.539 L1066.42 690.539 L1066.98 690.539 L1067.54 690.539 L1068.1 690.539 L1068.66 690.539 L1069.22 690.539 L1069.78 690.539 L1070.34 690.539 L1070.9 690.539 L1071.46 690.539 L1072.02 690.539 L1072.57 690.539 L1073.13 690.539 L1073.69 690.539 L1074.25 690.539 L1074.81 690.539 L1075.37 690.539 L1075.93 690.539 L1076.49 690.539 L1077.05 690.539 L1077.61 690.539 L1078.17 690.539 L1078.73 690.539 L1079.29 690.539 L1079.85 690.539 L1080.4 690.539 L1080.96 690.539 L1081.52 690.539 L1082.08 690.539 L1082.64 690.539 L1083.2 690.539 L1083.76 690.539 L1084.32 690.539 L1084.88 690.539 L1085.44 690.539 L1086 690.539 L1086.56 690.539 L1087.12 690.539 L1087.67 690.539 L1088.23 690.539 L1088.79 690.539 L1089.35 690.539 L1089.91 690.539 L1090.47 690.539 L1091.03 690.539 L1091.59 690.539 L1092.15 690.539 L1092.71 690.539 L1093.27 690.539 L1093.83 690.539 L1094.39 690.539 L1094.94 690.539 L1095.5 690.539 L1096.06 690.539 L1096.62 690.539 L1097.18 690.539 L1097.74 690.539 L1098.3 690.539 L1098.86 690.539 L1099.42 690.539 L1099.98 690.539 L1100.54 690.539 L1101.1 690.539 L1101.66 690.539 L1102.22 690.539 L1102.77 690.539 L1103.33 690.539 L1103.89 690.539 L1104.45 690.539 L1105.01 690.539 L1105.57 690.539 L1106.13 690.539 L1106.69 690.539 L1107.25 690.539 L1107.81 690.539 L1108.37 690.539 L1108.93 690.539 L1109.49 690.539 L1110.04 690.539 L1110.6 690.539 L1111.16 690.539 L1111.72 690.539 L1112.28 690.539 L1112.84 690.539 L1113.4 690.539 L1113.96 690.539 L1114.52 690.539 L1115.08 690.539 L1115.64 690.539 L1116.2 690.539 L1116.76 690.539 L1117.31 690.539 L1117.87 690.539 L1118.43 690.539 L1118.99 690.539 L1119.55 690.539 L1120.11 690.539 L1120.67 690.539 L1121.23 690.539 L1121.79 690.539 L1122.35 690.539 L1122.91 690.539 L1123.47 690.539 L1124.03 690.539 L1124.59 690.539 L1125.14 690.539 L1125.7 690.539 L1126.26 690.539 L1126.82 690.539 L1127.38 690.539 L1127.94 690.539 L1128.5 690.539 L1129.06 690.539 L1129.62 690.539 L1130.18 690.539 L1130.74 690.539 L1131.3 690.539 L1131.86 690.539 L1132.41 690.539 L1132.97 690.539 L1133.53 690.539 L1134.09 690.539 L1134.65 690.539 L1135.21 690.539 L1135.77 690.539 L1136.33 690.539 L1136.89 690.539 L1137.45 690.539 L1138.01 690.539 L1138.57 690.539 L1139.13 690.539 L1139.68 690.539 L1140.24 690.539 L1140.8 690.539 L1141.36 690.539 L1141.92 690.539 L1142.48 690.539 L1143.04 690.539 L1143.6 690.539 L1144.16 690.539 L1144.72 690.539 L1145.28 690.539 L1145.84 690.539 L1146.4 690.539 L1146.96 690.539 L1147.51 690.539 L1148.07 690.539 L1148.63 690.539 L1149.19 690.539 L1149.75 690.539 L1150.31 690.539 L1150.87 690.539 L1151.43 690.539 L1151.99 690.539 L1152.55 690.539 L1153.11 690.539 L1153.67 690.539 L1154.23 690.539 L1154.78 690.539 L1155.34 690.539 L1155.9 690.539 L1156.46 690.539 L1157.02 690.539 L1157.58 690.539 L1158.14 690.539 L1158.7 690.539 L1159.26 690.539 L1159.82 690.539 L1160.38 690.539 L1160.94 690.539 L1161.5 690.539 L1162.05 690.539 L1162.61 690.539 L1163.17 690.539 L1163.73 690.539 L1164.29 690.539 L1164.85 690.539 L1165.41 690.539 L1165.97 690.539 L1166.53 690.539 L1167.09 690.539 L1167.65 690.539 L1168.21 690.539 L1168.77 690.539 L1169.33 690.539 L1169.88 690.539 L1170.44 690.539 L1171 690.539 L1171.56 690.539 L1172.12 690.539 L1172.68 690.539 L1173.24 690.539 L1173.8 690.539 L1174.36 690.539 L1174.92 690.539 L1175.48 690.539 L1176.04 690.539 L1176.6 690.539 L1177.15 690.539 L1177.71 690.539 L1178.27 690.539 L1178.83 690.539 L1179.39 690.539 L1179.95 690.539 L1180.51 690.539 L1181.07 690.539 L1181.63 690.539 L1182.19 690.539 L1182.75 690.539 L1183.31 690.539 L1183.87 690.539 L1184.43 690.539 L1184.98 690.539 L1185.54 690.539 L1186.1 690.539 L1186.66 690.539 L1187.22 690.539 L1187.78 690.539 L1188.34 690.539 L1188.9 690.539 L1189.46 690.539 L1190.02 690.539 L1190.58 690.539 L1191.14 690.539 L1191.7 690.539 L1192.25 690.539 L1192.81 690.539 L1193.37 690.539 L1193.93 690.539 L1194.49 690.539 L1195.05 690.539 L1195.61 690.539 L1196.17 690.539 L1196.73 690.539 L1197.29 690.539 L1197.85 690.539 L1198.41 690.539 L1198.97 690.539 L1199.52 690.539 L1200.08 690.539 L1200.64 690.539 L1201.2 690.539 L1201.76 690.539 L1202.32 690.539 L1202.88 690.539 L1203.44 690.539 L1204 690.539 L1204.56 690.539 L1205.12 690.539 L1205.68 690.539 L1206.24 690.539 L1206.8 690.539 L1207.35 690.539 L1207.91 690.539 L1208.47 690.539 L1209.03 690.539 L1209.59 690.539 L1210.15 690.539 L1210.71 690.539 L1211.27 690.539 L1211.83 690.539 L1212.39 690.539 L1212.95 690.539 L1213.51 690.539 L1214.07 690.539 L1214.62 690.539 L1215.18 690.539 L1215.74 690.539 L1216.3 690.539 L1216.86 690.539 L1217.42 690.539 L1217.98 690.539 L1218.54 690.539 L1219.1 690.539 L1219.66 690.539 L1220.22 690.539 L1220.78 690.539 L1221.34 690.539 L1221.89 690.539 L1222.45 690.539 L1223.01 690.539 L1223.57 690.539 L1224.13 690.539 L1224.69 690.539 L1225.25 690.539 L1225.81 690.539 L1226.37 690.539 L1226.93 690.539 L1227.49 690.539 L1228.05 690.539 L1228.61 690.539 L1229.17 690.539 L1229.72 690.539 L1230.28 690.539 L1230.84 690.539 L1231.4 690.539 L1231.96 690.539 L1232.52 690.539 L1233.08 690.539 L1233.64 690.539 L1234.2 690.539 L1234.76 690.539 L1235.32 690.539 L1235.88 690.539 L1236.44 690.539 L1236.99 690.539 L1237.55 690.539 L1238.11 690.539 L1238.67 690.539 L1239.23 690.539 L1239.79 690.539 L1240.35 690.539 L1240.91 690.539 L1241.47 690.539 L1242.03 690.539 L1242.59 690.539 L1243.15 690.539 L1243.71 690.539 L1244.26 690.539 L1244.82 690.539 L1245.38 690.539 L1245.94 690.539 L1246.5 690.539 L1247.06 690.539 L1247.62 690.539 L1248.18 690.539 L1248.74 690.539 L1249.3 690.539 L1249.86 690.539 L1250.42 690.539 L1250.98 690.539 L1251.54 690.539 L1252.09 690.539 L1252.65 690.539 L1253.21 690.539 L1253.77 690.539 L1254.33 690.539 L1254.89 690.539 L1255.45 690.539 L1256.01 690.539 L1256.57 690.539 L1257.13 690.539 L1257.69 690.539 L1258.25 690.539 L1258.81 690.539 L1259.36 690.539 L1259.92 690.539 L1260.48 690.539 L1261.04 690.539 L1261.6 690.539 L1262.16 690.539 L1262.72 690.539 L1263.28 690.539 L1263.84 690.539 L1264.4 690.539 L1264.96 690.539 L1265.52 690.539 L1266.08 690.539 L1266.63 690.539 L1267.19 690.539 L1267.75 690.539 L1268.31 690.539 L1268.87 690.539 L1269.43 690.539 L1269.99 690.539 L1270.55 690.539 L1271.11 690.539 L1271.67 690.539 L1272.23 690.539 L1272.79 690.539 L1273.35 690.539 L1273.91 690.539 L1274.46 690.539 L1275.02 690.539 L1275.58 690.539 L1276.14 690.539 L1276.7 690.539 L1277.26 690.539 L1277.82 690.539 L1278.38 690.539 L1278.94 690.539 L1279.5 690.539 L1280.06 690.539 L1280.62 690.539 L1281.18 690.539 L1281.73 690.539 L1282.29 690.539 L1282.85 690.539 L1283.41 690.539 L1283.97 690.539 L1284.53 690.539 L1285.09 690.539 L1285.65 690.539 L1286.21 690.539 L1286.77 690.539 L1287.33 690.539 L1287.89 690.539 L1288.45 690.539 L1289 690.539 L1289.56 690.539 L1290.12 690.539 L1290.68 690.539 L1291.24 690.539 L1291.8 690.539 L1292.36 690.539 L1292.92 690.539 L1293.48 690.539 L1294.04 690.539 L1294.6 690.539 L1295.16 690.539 L1295.72 690.539 L1296.28 690.539 L1296.83 690.539 L1297.39 690.539 L1297.95 690.539 L1298.51 690.539 L1299.07 690.539 L1299.63 690.539 L1300.19 690.539 L1300.75 690.539 L1301.31 690.539 L1301.87 690.539 L1302.43 690.539 L1302.99 690.539 L1303.55 690.539 L1304.1 690.539 L1304.66 690.539 L1305.22 690.539 L1305.78 690.539 L1306.34 690.539 L1306.9 690.539 L1307.46 690.539 L1308.02 690.539 L1308.58 690.539 L1309.14 690.539 L1309.7 690.539 L1310.26 690.539 L1310.82 690.539 L1311.38 690.539 L1311.93 690.539 L1312.49 690.539 L1313.05 690.539 L1313.61 690.539 L1314.17 690.539 L1314.73 690.539 L1315.29 690.539 L1315.85 690.539 L1316.41 690.539 L1316.97 690.539 L1317.53 690.539 L1318.09 690.539 L1318.65 690.539 L1319.2 690.539 L1319.76 690.539 L1320.32 690.539 L1320.88 690.539 L1321.44 690.539 L1322 690.539 L1322.56 690.539 L1323.12 690.539 L1323.68 690.539 L1324.24 690.539 L1324.8 690.539 L1325.36 690.539 L1325.92 690.539 L1326.47 690.539 L1327.03 690.539 L1327.59 690.539 L1328.15 690.539 L1328.71 690.539 L1329.27 690.539 L1329.83 690.539 L1330.39 690.539 L1330.95 690.539 L1331.51 690.539 L1332.07 690.539 L1332.63 690.539 L1333.19 690.539 L1333.75 690.539 L1334.3 690.539 L1334.86 690.539 L1335.42 690.539 L1335.98 690.539 L1336.54 690.539 L1337.1 690.539 L1337.66 690.539 L1338.22 690.539 L1338.78 690.539 L1339.34 690.539 L1339.9 690.539 L1340.46 690.539 L1341.02 690.539 L1341.57 690.539 L1342.13 690.539 L1342.69 690.539 L1343.25 690.539 L1343.81 690.539 L1344.37 690.539 L1344.93 690.539 L1345.49 690.539 L1346.05 690.539 L1346.61 690.539 L1347.17 690.539 L1347.73 690.539 L1348.29 690.539 L1348.84 690.539 L1349.4 690.539 L1349.96 690.539 L1350.52 690.539 L1351.08 690.539 L1351.64 690.539 L1352.2 690.539 L1352.76 690.539 L1353.32 690.539 L1353.88 690.539 L1354.44 690.539 L1355 690.539 L1355.56 690.539 L1356.12 690.539 L1356.67 690.539 L1357.23 690.539 L1357.79 690.539 L1358.35 690.539 L1358.91 690.539 L1359.47 690.539 L1360.03 690.539 L1360.59 690.539 L1361.15 690.539 L1361.71 690.539 L1362.27 690.539 L1362.83 690.539 L1363.39 690.539 L1363.94 690.539 L1364.5 690.539 L1365.06 690.539 L1365.62 690.539 L1366.18 690.539 L1366.74 690.539 L1367.3 690.539 L1367.86 690.539 L1368.42 690.539 L1368.98 690.539 L1369.54 690.539 L1370.1 690.539 L1370.66 690.539 L1371.21 690.539 L1371.77 690.539 L1372.33 690.539 L1372.89 690.539 L1373.45 690.539 L1374.01 690.539 L1374.57 690.539 L1375.13 690.539 L1375.69 690.539 L1376.25 690.539 L1376.81 690.539 L1377.37 690.539 L1377.93 690.539 L1378.49 690.539 L1379.04 690.539 L1379.6 690.539 L1380.16 690.539 L1380.72 690.539 L1381.28 690.539 L1381.84 690.539 L1382.4 690.539 L1382.96 690.539 L1383.52 690.539 L1384.08 690.539 L1384.64 690.539 L1385.2 690.539 L1385.76 690.539 L1386.31 690.539 L1386.87 690.539 L1387.43 690.539 L1387.99 690.539 L1388.55 690.539 L1389.11 690.539 L1389.67 690.539 L1390.23 690.539 L1390.79 690.539 L1391.35 690.539 L1391.91 690.539 L1392.47 690.539 L1393.03 690.539 L1393.58 690.539 L1394.14 690.539 L1394.7 690.539 L1395.26 690.539 L1395.82 690.539 L1396.38 690.539 L1396.94 690.539 L1397.5 690.539 L1398.06 690.539 L1398.62 690.539 L1399.18 690.539 L1399.74 690.539 L1400.3 690.539 L1400.86 690.539 L1401.41 690.539 L1401.97 690.539 L1402.53 690.539 L1403.09 690.539 L1403.65 690.539 L1404.21 690.539 L1404.77 690.539 L1405.33 690.539 L1405.89 690.539 L1406.45 690.539 L1407.01 690.539 L1407.57 690.539 L1408.13 690.539 L1408.68 690.539 L1409.24 690.539 L1409.8 690.539 L1410.36 690.539 L1410.92 690.539 L1411.48 690.539 L1412.04 690.539 L1412.6 690.539 L1413.16 690.539 L1413.72 690.539 L1414.28 690.539 L1414.84 690.539 L1415.4 690.539 L1415.95 690.539 L1416.51 690.539 L1417.07 690.539 L1417.63 690.539 L1418.19 690.539 L1418.75 690.539 L1419.31 690.539 L1419.87 690.539 L1420.43 690.539 L1420.99 690.539 L1421.55 690.539 L1422.11 690.539 L1422.67 690.539 L1423.23 690.539 L1423.78 690.539 L1424.34 690.539 L1424.9 690.539 L1425.46 690.539 L1426.02 690.539 L1426.58 690.539 L1427.14 690.539 L1427.7 690.539 L1428.26 690.539 L1428.82 690.539 L1429.38 690.539 L1429.94 690.539 L1430.5 690.539 L1431.05 690.539 L1431.61 690.539 L1432.17 690.539 L1432.73 690.539 L1433.29 690.539 L1433.85 690.539 L1434.41 690.539 L1434.97 690.539 L1435.53 690.539 L1436.09 690.539 L1436.65 690.539 L1437.21 690.539 L1437.77 690.539 L1438.33 690.539 L1438.88 690.539 L1439.44 690.539 L1440 690.539 L1440.56 690.539 L1441.12 690.539 L1441.68 690.539 L1442.24 690.539 L1442.8 690.539 L1443.36 690.539 L1443.92 690.539 L1444.48 690.539 L1445.04 690.539 L1445.6 690.539 L1446.15 690.539 L1446.71 690.539 L1447.27 690.539 L1447.83 690.539 L1448.39 690.539 L1448.95 690.539 L1449.51 690.539 L1450.07 690.539 L1450.63 690.539 L1451.19 690.539 L1451.75 690.539 L1452.31 690.539 L1452.87 690.539 L1453.42 690.539 L1453.98 690.539 L1454.54 690.539 L1455.1 690.539 L1455.66 690.539 L1456.22 690.539 L1456.78 690.539 L1457.34 690.539 L1457.9 690.539 L1458.46 690.539 L1459.02 690.539 L1459.58 690.539 L1460.14 690.539 L1460.7 690.539 L1461.25 690.539 L1461.81 690.539 L1462.37 690.539 L1462.93 690.539 L1463.49 690.539 L1464.05 690.539 L1464.61 690.539 L1465.17 690.539 L1465.73 690.539 L1466.29 690.539 L1466.85 690.539 L1467.41 690.539 L1467.97 690.539 L1468.52 690.539 L1469.08 690.539 L1469.64 690.539 L1470.2 690.539 L1470.76 690.539 L1471.32 690.539 L1471.88 690.539 L1472.44 690.539 L1473 690.539 L1473.56 690.539 L1474.12 690.539 L1474.68 690.539 L1475.24 690.539 L1475.79 690.539 L1476.35 690.539 L1476.91 690.539 L1477.47 690.539 L1478.03 690.539 L1478.59 690.539 L1479.15 690.539 L1479.71 690.539 L1480.27 690.539 L1480.83 690.539 L1481.39 690.539 L1481.95 690.539 L1482.51 690.539 L1483.07 690.539 L1483.62 690.539 L1484.18 690.539 L1484.74 690.539 L1485.3 690.539 L1485.86 690.539 L1486.42 690.539 L1486.98 690.539 L1487.54 690.539 L1488.1 690.539 L1488.66 690.539 L1489.22 690.539 L1489.78 690.539 L1490.34 690.539 L1490.89 690.539 L1491.45 690.539 L1492.01 690.539 L1492.57 690.539 L1493.13 690.539 L1493.69 690.539 L1494.25 690.539 L1494.81 690.539 L1495.37 690.539 L1495.93 690.539 L1496.49 690.539 L1497.05 690.539 L1497.61 690.539 L1498.16 690.539 L1498.72 690.539 L1499.28 690.539 L1499.84 690.539 L1500.4 690.539 L1500.96 690.539 L1501.52 690.539 L1502.08 690.539 L1502.64 690.539 L1503.2 690.539 L1503.76 690.539 L1504.32 690.539 L1504.88 690.539 L1505.44 690.539 L1505.99 690.539 L1506.55 690.539 L1507.11 690.539 L1507.67 690.539 L1508.23 690.539 L1508.79 690.539 L1509.35 690.539 L1509.91 690.539 L1510.47 690.539 L1511.03 690.539 L1511.59 690.539 L1512.15 690.539 L1512.71 690.539 L1513.26 690.539 L1513.82 690.539 L1514.38 690.539 L1514.94 690.539 L1515.5 690.539 L1516.06 690.539 L1516.62 690.539 L1517.18 690.539 L1517.74 690.539 L1518.3 690.539 L1518.86 690.539 L1519.42 690.539 L1519.98 690.539 L1520.53 690.539 L1521.09 690.539 L1521.65 690.539 L1522.21 690.539 L1522.77 690.539 L1523.33 690.539 L1523.89 690.539 L1524.45 690.539 L1525.01 690.539 L1525.57 690.539 L1526.13 690.539 L1526.69 690.539 L1527.25 690.539 L1527.81 690.539 L1528.36 690.539 L1528.92 690.539 L1529.48 690.539 L1530.04 690.539 L1530.6 690.539 L1531.16 690.539 L1531.72 690.539 L1532.28 690.539 L1532.84 690.539 L1533.4 690.539 L1533.96 690.539 L1534.52 690.539 L1535.08 690.539 L1535.63 690.539 L1536.19 690.539 L1536.75 690.539 L1537.31 690.539 L1537.87 690.539 L1538.43 690.539 L1538.99 690.539 L1539.55 690.539 L1540.11 690.539 L1540.67 690.539 L1541.23 690.539 L1541.79 690.539 L1542.35 690.539 L1542.9 690.539 L1543.46 690.539 L1544.02 690.539 L1544.58 690.539 L1545.14 690.539 L1545.7 690.539 L1546.26 690.539 L1546.82 690.539 L1547.38 690.539 L1547.94 690.539 L1548.5 690.539 L1549.06 690.539 L1549.62 690.539 L1550.18 690.539 L1550.73 690.539 L1551.29 690.539 L1551.85 690.539 L1552.41 690.539 L1552.97 690.539 L1553.53 690.539 L1554.09 690.539 L1554.65 690.539 L1555.21 690.539 L1555.77 690.539 L1556.33 690.539 L1556.89 690.539 L1557.45 690.539 L1558 690.539 L1558.56 690.539 L1559.12 690.539 L1559.68 690.539 L1560.24 690.539 L1560.8 690.539 L1561.36 690.539 L1561.92 690.539 L1562.48 690.539 L1563.04 690.539 L1563.6 690.539 L1564.16 690.539 L1564.72 690.539 L1565.28 690.539 L1565.83 690.539 L1566.39 690.539 L1566.95 690.539 L1567.51 690.539 L1568.07 690.539 L1568.63 690.539 L1569.19 690.539 L1569.75 690.539 L1570.31 690.539 L1570.87 690.539 L1571.43 690.539 L1571.99 690.539 L1572.55 690.539 L1573.1 690.539 L1573.66 690.539 L1574.22 690.539 L1574.78 690.539 L1575.34 690.539 L1575.9 690.539 L1576.46 690.539 L1577.02 690.539 L1577.58 690.539 L1578.14 690.539 L1578.7 690.539 L1579.26 690.539 L1579.82 690.539 L1580.37 690.539 L1580.93 690.539 L1581.49 690.539 L1582.05 690.539 L1582.61 690.539 L1583.17 690.539 L1583.73 690.539 L1584.29 690.539 L1584.85 690.539 L1585.41 690.539 L1585.97 690.539 L1586.53 690.539 L1587.09 690.539 L1587.65 690.539 L1588.2 690.539 L1588.76 690.539 L1589.32 690.539 L1589.88 690.539 L1590.44 690.539 L1591 690.539 L1591.56 690.539 L1592.12 690.539 L1592.68 690.539 L1593.24 690.539 L1593.8 690.539 L1594.36 690.539 L1594.92 690.539 L1595.47 690.539 L1596.03 690.539 L1596.59 690.539 L1597.15 690.539 L1597.71 690.539 L1598.27 690.539 L1598.83 690.539 L1599.39 690.539 L1599.95 690.539 L1600.51 690.539 L1601.07 690.539 L1601.63 690.539 L1602.19 690.539 L1602.74 690.539 L1603.3 690.539 L1603.86 690.539 L1604.42 690.539 L1604.98 690.539 L1605.54 690.539 L1606.1 690.539 L1606.66 690.539 L1607.22 690.539 L1607.78 690.539 L1608.34 690.539 L1608.9 690.539 L1609.46 690.539 L1610.02 690.539 L1610.57 690.539 L1611.13 690.539 L1611.69 690.539 L1612.25 690.539 L1612.81 690.539 L1613.37 690.539 L1613.93 690.539 L1614.49 690.539 L1615.05 690.539 L1615.61 690.539 L1616.17 690.539 L1616.73 690.539 L1617.29 690.539 L1617.84 690.539 L1618.4 690.539 L1618.96 690.539 L1619.52 690.539 L1620.08 690.539 L1620.64 690.539 L1621.2 690.539 L1621.76 690.539 L1622.32 690.539 L1622.88 690.539 L1623.44 690.539 L1624 690.539 L1624.56 690.539 L1625.11 690.539 L1625.67 690.539 L1626.23 690.539 L1626.79 690.539 L1627.35 690.539 L1627.91 690.539 L1628.47 690.539 L1629.03 690.539 L1629.59 690.539 L1630.15 690.539 L1630.71 690.539 L1631.27 690.539 L1631.83 690.539 L1632.39 690.539 L1632.94 690.539 L1633.5 690.539 L1634.06 690.539 L1634.62 690.539 L1635.18 690.539 L1635.74 690.539 L1636.3 690.539 L1636.86 690.539 L1637.42 690.539 L1637.98 690.539 L1638.54 690.539 L1639.1 690.539 L1639.66 690.539 L1640.21 690.539 L1640.77 690.539 L1641.33 690.539 L1641.89 690.539 L1642.45 690.539 L1643.01 690.539 L1643.57 690.539 L1644.13 690.539 L1644.69 690.539 L1645.25 690.539 L1645.81 690.539 L1646.37 690.539 L1646.93 690.539 L1647.48 690.539 L1648.04 690.539 L1648.6 690.539 L1649.16 690.539 L1649.72 690.539 L1650.28 690.539 L1650.84 690.539 L1651.4 690.539 L1651.96 690.539 L1652.52 690.539 L1653.08 690.539 L1653.64 690.539 L1654.2 690.539 L1654.76 690.539 L1655.31 690.539 L1655.87 690.539 L1656.43 690.539 L1656.99 690.539 L1657.55 690.539 L1658.11 690.539 L1658.67 690.539 L1659.23 690.539 L1659.79 690.539 L1660.35 690.539 L1660.91 690.539 L1661.47 690.539 L1662.03 690.539 L1662.58 690.539 L1663.14 690.539 L1663.7 690.539 L1664.26 690.539 L1664.82 690.539 L1665.38 690.539 L1665.94 690.539 L1666.5 690.539 L1667.06 690.539 L1667.62 690.539 L1668.18 690.539 L1668.74 690.539 L1669.3 690.539 L1669.85 690.539 L1670.41 690.539 L1670.97 690.539 L1671.53 690.539 L1672.09 690.539 L1672.65 690.539 L1673.21 690.539 L1673.77 690.539 L1674.33 690.539 L1674.89 690.539 L1675.45 690.539 L1676.01 690.539 L1676.57 690.539 L1677.13 690.539 L1677.68 690.539 L1678.24 690.539 L1678.8 690.539 L1679.36 690.539 L1679.92 690.539 L1680.48 690.539 L1681.04 690.539 L1681.6 690.539 L1682.16 690.539 L1682.72 690.539 L1683.28 690.539 L1683.84 690.539 L1684.4 690.539 L1684.95 690.539 L1685.51 690.539 L1686.07 690.539 L1686.63 690.539 L1687.19 690.539 L1687.75 690.539 L1688.31 690.539 L1688.87 690.539 L1689.43 690.539 L1689.99 690.539 L1690.55 690.539 L1691.11 690.539 L1691.67 690.539 L1692.23 690.539 L1692.78 690.539 L1693.34 690.539 L1693.9 690.539 L1694.46 690.539 L1695.02 690.539 L1695.58 690.539 L1696.14 690.539 L1696.7 690.539 L1697.26 690.539 L1697.82 690.539 L1698.38 690.539 L1698.94 690.539 L1699.5 690.539 L1700.05 690.539 L1700.61 690.539 L1701.17 690.539 L1701.73 690.539 L1702.29 690.539 L1702.85 690.539 L1703.41 690.539 L1703.97 690.539 L1704.53 690.539 L1705.09 690.539 L1705.65 690.539 L1706.21 690.539 L1706.77 690.539 L1707.32 690.539 L1707.88 690.539 L1708.44 690.539 L1709 690.539 L1709.56 690.539 L1710.12 690.539 L1710.68 690.539 L1711.24 690.539 L1711.8 690.539 L1712.36 690.539 L1712.92 690.539 L1713.48 690.539 L1714.04 690.539 L1714.6 690.539 L1715.15 690.539 L1715.71 690.539 L1716.27 690.539 L1716.83 690.539 L1717.39 690.539 L1717.95 690.539 L1718.51 690.539 L1719.07 690.539 L1719.63 690.539 L1720.19 690.539 L1720.75 690.539 L1721.31 690.539 L1721.87 690.539 L1722.42 690.539 L1722.98 690.539 L1723.54 690.539 L1724.1 690.539 L1724.66 690.539 L1725.22 690.539 L1725.78 690.539 L1726.34 690.539 L1726.9 690.539 L1727.46 690.539 L1728.02 690.539 L1728.58 690.539 L1729.14 690.539 L1729.69 690.539 L1730.25 690.539 L1730.81 690.539 L1731.37 690.539 L1731.93 690.539 L1732.49 690.539 L1733.05 690.539 L1733.61 690.539 L1734.17 690.539 L1734.73 690.539 L1735.29 690.539 L1735.85 690.539 L1736.41 690.539 L1736.97 690.539 L1737.52 690.539 L1738.08 690.539 L1738.64 690.539 L1739.2 690.539 L1739.76 690.539 L1740.32 690.539 L1740.88 690.539 L1741.44 690.539 L1742 690.539 L1742.56 690.539 L1743.12 690.539 L1743.68 690.539 L1744.24 690.539 L1744.79 690.539 L1745.35 690.539 L1745.91 690.539 L1746.47 690.539 L1747.03 690.539 L1747.59 690.539 L1748.15 690.539 L1748.71 690.539 L1749.27 690.539 L1749.83 690.539 L1750.39 690.539 L1750.95 690.539 L1751.51 690.539 L1752.06 690.539 L1752.62 690.539 L1753.18 690.539 L1753.74 690.539 L1754.3 690.539 L1754.86 690.539 L1755.42 690.539 L1755.98 690.539 L1756.54 690.539 L1757.1 690.539 L1757.66 690.539 L1758.22 690.539 L1758.78 690.539 L1759.34 690.539 L1759.89 690.539 L1760.45 690.539 L1761.01 690.539 L1761.57 690.539 L1762.13 690.539 L1762.69 690.539 L1763.25 690.539 L1763.81 690.539 L1764.37 690.539 L1764.93 690.539 L1765.49 690.539 L1766.05 690.539 L1766.61 690.539 L1767.16 690.539 L1767.72 690.539 L1768.28 690.539 L1768.84 690.539 L1769.4 690.539 L1769.96 690.539 L1770.52 690.539 L1771.08 690.539 L1771.64 690.539 L1772.2 690.539 L1772.76 690.539 L1773.32 690.539 L1773.88 690.539 L1774.43 690.539 L1774.99 690.539 L1775.55 690.539 L1776.11 690.539 L1776.67 690.539 L1777.23 690.539 L1777.79 690.539 L1778.35 690.539 L1778.91 690.539 L1779.47 690.539 L1780.03 690.539 L1780.59 690.539 L1781.15 690.539 L1781.71 690.539 L1782.26 690.539 L1782.82 690.539 L1783.38 690.539 L1783.94 690.539 L1784.5 690.539 L1785.06 690.539 L1785.62 690.539 L1786.18 690.539 L1786.74 690.539 L1787.3 690.539 L1787.86 690.539 L1788.42 690.539 L1788.98 690.539 L1789.53 690.539 L1790.09 690.539 L1790.65 690.539 L1791.21 690.539 L1791.77 690.539 L1792.33 690.539 L1792.89 690.539 L1793.45 690.539 L1794.01 690.539 L1794.57 690.539 L1795.13 690.539 L1795.69 690.539 L1796.25 690.539 L1796.8 690.539 L1797.36 690.539 L1797.92 690.539 L1798.48 690.539 L1799.04 690.539 L1799.6 690.539 L1800.16 690.539 L1800.72 690.539 L1801.28 690.539 L1801.84 690.539 L1802.4 690.539 L1802.96 690.539 L1803.52 690.539 L1804.08 690.539 L1804.63 690.539 L1805.19 690.539 L1805.75 690.539 L1806.31 690.539 L1806.87 690.539 L1807.43 690.539 L1807.99 690.539 L1808.55 690.539 L1809.11 690.539 L1809.67 690.539 L1810.23 690.539 L1810.79 690.539 L1811.35 690.539 L1811.9 690.539 L1812.46 690.539 L1813.02 690.539 L1813.58 690.539 L1814.14 690.539 L1814.7 690.539 L1815.26 690.539 L1815.82 690.539 L1816.38 690.539 L1816.94 690.539 L1817.5 690.539 L1818.06 690.539 L1818.62 690.539 L1819.18 690.539 L1819.73 690.539 L1820.29 690.539 L1820.85 690.539 L1821.41 690.539 L1821.97 690.539 L1822.53 690.539 L1823.09 690.539 L1823.65 690.539 L1824.21 690.539 L1824.77 690.539 L1825.33 690.539 L1825.89 690.539 L1826.45 690.539 L1827 690.539 L1827.56 690.539 L1828.12 690.539 L1828.68 690.539 L1829.24 690.539 L1829.8 690.539 L1830.36 690.539 L1830.92 690.539 L1831.48 690.539 L1832.04 690.539 L1832.6 690.539 L1833.16 690.539 L1833.72 690.539 L1834.27 690.539 L1834.83 690.539 L1835.39 690.539 L1835.95 690.539 L1836.51 690.539 L1837.07 690.539 L1837.63 690.539 L1838.19 690.539 L1838.19 683.298 L1837.63 683.298 L1837.07 683.298 L1836.51 683.298 L1835.95 683.298 L1835.39 683.298 L1834.83 683.298 L1834.27 683.298 L1833.72 683.298 L1833.16 683.298 L1832.6 683.298 L1832.04 683.298 L1831.48 683.298 L1830.92 683.298 L1830.36 683.298 L1829.8 683.298 L1829.24 683.298 L1828.68 683.298 L1828.12 683.298 L1827.56 683.298 L1827 683.298 L1826.45 683.298 L1825.89 683.298 L1825.33 683.298 L1824.77 683.298 L1824.21 683.298 L1823.65 683.298 L1823.09 683.298 L1822.53 683.298 L1821.97 683.298 L1821.41 683.298 L1820.85 683.298 L1820.29 683.298 L1819.73 683.298 L1819.18 683.298 L1818.62 683.298 L1818.06 683.298 L1817.5 683.298 L1816.94 683.298 L1816.38 683.298 L1815.82 683.298 L1815.26 683.298 L1814.7 683.298 L1814.14 683.298 L1813.58 683.298 L1813.02 683.298 L1812.46 683.298 L1811.9 683.298 L1811.35 683.298 L1810.79 683.298 L1810.23 683.298 L1809.67 683.298 L1809.11 683.298 L1808.55 683.298 L1807.99 683.298 L1807.43 683.298 L1806.87 683.298 L1806.31 683.298 L1805.75 683.298 L1805.19 683.298 L1804.63 683.298 L1804.08 683.298 L1803.52 683.298 L1802.96 683.298 L1802.4 683.298 L1801.84 683.298 L1801.28 683.298 L1800.72 683.298 L1800.16 683.298 L1799.6 683.298 L1799.04 683.298 L1798.48 683.298 L1797.92 683.298 L1797.36 683.298 L1796.8 683.298 L1796.25 683.298 L1795.69 683.298 L1795.13 683.298 L1794.57 683.298 L1794.01 683.298 L1793.45 683.298 L1792.89 683.298 L1792.33 683.298 L1791.77 683.298 L1791.21 683.298 L1790.65 683.298 L1790.09 683.298 L1789.53 683.298 L1788.98 683.298 L1788.42 683.298 L1787.86 683.298 L1787.3 683.298 L1786.74 683.298 L1786.18 683.298 L1785.62 683.298 L1785.06 683.298 L1784.5 683.298 L1783.94 683.298 L1783.38 683.298 L1782.82 683.298 L1782.26 683.298 L1781.71 683.298 L1781.15 683.298 L1780.59 683.298 L1780.03 683.298 L1779.47 683.298 L1778.91 683.298 L1778.35 683.298 L1777.79 683.298 L1777.23 683.298 L1776.67 683.298 L1776.11 683.298 L1775.55 683.298 L1774.99 683.298 L1774.43 683.298 L1773.88 683.298 L1773.32 683.298 L1772.76 683.298 L1772.2 683.298 L1771.64 683.298 L1771.08 683.298 L1770.52 683.298 L1769.96 683.298 L1769.4 683.298 L1768.84 683.298 L1768.28 683.298 L1767.72 683.298 L1767.16 683.298 L1766.61 683.298 L1766.05 683.298 L1765.49 683.298 L1764.93 683.298 L1764.37 683.298 L1763.81 683.298 L1763.25 683.298 L1762.69 683.298 L1762.13 683.298 L1761.57 683.298 L1761.01 683.298 L1760.45 683.298 L1759.89 683.298 L1759.34 683.298 L1758.78 683.298 L1758.22 683.298 L1757.66 683.298 L1757.1 683.298 L1756.54 683.298 L1755.98 683.298 L1755.42 683.298 L1754.86 683.298 L1754.3 683.298 L1753.74 683.298 L1753.18 683.298 L1752.62 683.298 L1752.06 683.298 L1751.51 683.298 L1750.95 683.298 L1750.39 683.298 L1749.83 683.298 L1749.27 683.298 L1748.71 683.298 L1748.15 683.298 L1747.59 683.298 L1747.03 683.298 L1746.47 683.298 L1745.91 683.298 L1745.35 683.298 L1744.79 683.298 L1744.24 683.298 L1743.68 683.298 L1743.12 683.298 L1742.56 683.298 L1742 683.298 L1741.44 683.298 L1740.88 683.298 L1740.32 683.298 L1739.76 683.298 L1739.2 683.298 L1738.64 683.298 L1738.08 683.298 L1737.52 683.298 L1736.97 683.298 L1736.41 683.298 L1735.85 683.298 L1735.29 683.298 L1734.73 683.298 L1734.17 683.298 L1733.61 683.298 L1733.05 683.298 L1732.49 683.298 L1731.93 683.298 L1731.37 683.298 L1730.81 683.298 L1730.25 683.298 L1729.69 683.298 L1729.14 683.298 L1728.58 683.298 L1728.02 683.298 L1727.46 683.298 L1726.9 683.298 L1726.34 683.298 L1725.78 683.298 L1725.22 683.298 L1724.66 683.298 L1724.1 683.298 L1723.54 683.298 L1722.98 683.298 L1722.42 683.298 L1721.87 683.298 L1721.31 683.298 L1720.75 683.298 L1720.19 683.298 L1719.63 683.298 L1719.07 683.298 L1718.51 683.298 L1717.95 683.298 L1717.39 683.298 L1716.83 683.298 L1716.27 683.298 L1715.71 683.298 L1715.15 683.298 L1714.6 683.298 L1714.04 683.298 L1713.48 683.298 L1712.92 683.298 L1712.36 683.298 L1711.8 683.298 L1711.24 683.298 L1710.68 683.298 L1710.12 683.298 L1709.56 683.298 L1709 683.298 L1708.44 683.298 L1707.88 683.298 L1707.32 683.298 L1706.77 683.298 L1706.21 683.298 L1705.65 683.298 L1705.09 683.298 L1704.53 683.298 L1703.97 683.298 L1703.41 683.298 L1702.85 683.298 L1702.29 683.298 L1701.73 683.298 L1701.17 683.298 L1700.61 683.298 L1700.05 683.298 L1699.5 683.298 L1698.94 683.298 L1698.38 683.298 L1697.82 683.298 L1697.26 683.298 L1696.7 683.298 L1696.14 683.298 L1695.58 683.298 L1695.02 683.298 L1694.46 683.298 L1693.9 683.298 L1693.34 683.298 L1692.78 683.298 L1692.23 683.298 L1691.67 683.298 L1691.11 683.298 L1690.55 683.298 L1689.99 683.298 L1689.43 683.298 L1688.87 683.298 L1688.31 683.298 L1687.75 683.298 L1687.19 683.298 L1686.63 683.298 L1686.07 683.298 L1685.51 683.298 L1684.95 683.298 L1684.4 683.298 L1683.84 683.298 L1683.28 683.298 L1682.72 683.298 L1682.16 683.298 L1681.6 683.298 L1681.04 683.298 L1680.48 683.298 L1679.92 683.298 L1679.36 683.298 L1678.8 683.298 L1678.24 683.298 L1677.68 683.298 L1677.13 683.298 L1676.57 683.298 L1676.01 683.298 L1675.45 683.298 L1674.89 683.298 L1674.33 683.298 L1673.77 683.298 L1673.21 683.298 L1672.65 683.298 L1672.09 683.298 L1671.53 683.298 L1670.97 683.298 L1670.41 683.298 L1669.85 683.298 L1669.3 683.298 L1668.74 683.298 L1668.18 683.298 L1667.62 683.298 L1667.06 683.298 L1666.5 683.298 L1665.94 683.298 L1665.38 683.298 L1664.82 683.298 L1664.26 683.298 L1663.7 683.298 L1663.14 683.298 L1662.58 683.298 L1662.03 683.298 L1661.47 683.298 L1660.91 683.298 L1660.35 683.298 L1659.79 683.298 L1659.23 683.298 L1658.67 683.298 L1658.11 683.298 L1657.55 683.298 L1656.99 683.298 L1656.43 683.298 L1655.87 683.298 L1655.31 683.298 L1654.76 683.298 L1654.2 683.298 L1653.64 683.298 L1653.08 683.298 L1652.52 683.298 L1651.96 683.298 L1651.4 683.298 L1650.84 683.298 L1650.28 683.298 L1649.72 683.298 L1649.16 683.298 L1648.6 683.298 L1648.04 683.298 L1647.48 683.298 L1646.93 683.298 L1646.37 683.298 L1645.81 683.298 L1645.25 683.298 L1644.69 683.298 L1644.13 683.298 L1643.57 683.298 L1643.01 683.298 L1642.45 683.298 L1641.89 683.298 L1641.33 683.298 L1640.77 683.298 L1640.21 683.298 L1639.66 683.298 L1639.1 683.298 L1638.54 683.298 L1637.98 683.298 L1637.42 683.298 L1636.86 683.298 L1636.3 683.298 L1635.74 683.298 L1635.18 683.298 L1634.62 683.298 L1634.06 683.298 L1633.5 683.298 L1632.94 683.298 L1632.39 683.298 L1631.83 683.298 L1631.27 683.298 L1630.71 683.298 L1630.15 683.298 L1629.59 683.298 L1629.03 683.298 L1628.47 683.298 L1627.91 683.298 L1627.35 683.298 L1626.79 683.298 L1626.23 683.298 L1625.67 683.298 L1625.11 683.298 L1624.56 683.298 L1624 683.298 L1623.44 683.298 L1622.88 683.298 L1622.32 683.298 L1621.76 683.298 L1621.2 683.298 L1620.64 683.298 L1620.08 683.298 L1619.52 683.298 L1618.96 683.298 L1618.4 683.298 L1617.84 683.298 L1617.29 683.298 L1616.73 683.298 L1616.17 683.298 L1615.61 683.298 L1615.05 683.298 L1614.49 683.298 L1613.93 683.298 L1613.37 683.298 L1612.81 683.298 L1612.25 683.298 L1611.69 683.298 L1611.13 683.298 L1610.57 683.298 L1610.02 683.298 L1609.46 683.298 L1608.9 683.298 L1608.34 683.298 L1607.78 683.298 L1607.22 683.298 L1606.66 683.298 L1606.1 683.298 L1605.54 683.298 L1604.98 683.298 L1604.42 683.298 L1603.86 683.298 L1603.3 683.298 L1602.74 683.298 L1602.19 683.298 L1601.63 683.298 L1601.07 683.298 L1600.51 683.298 L1599.95 683.298 L1599.39 683.298 L1598.83 683.298 L1598.27 683.298 L1597.71 683.298 L1597.15 683.298 L1596.59 683.298 L1596.03 683.298 L1595.47 683.298 L1594.92 683.298 L1594.36 683.298 L1593.8 683.298 L1593.24 683.298 L1592.68 683.298 L1592.12 683.298 L1591.56 683.298 L1591 683.298 L1590.44 683.298 L1589.88 683.298 L1589.32 683.298 L1588.76 683.298 L1588.2 683.298 L1587.65 683.298 L1587.09 683.298 L1586.53 683.298 L1585.97 683.298 L1585.41 683.298 L1584.85 683.298 L1584.29 683.298 L1583.73 683.298 L1583.17 683.298 L1582.61 683.298 L1582.05 683.298 L1581.49 683.298 L1580.93 683.298 L1580.37 683.298 L1579.82 683.298 L1579.26 683.298 L1578.7 683.298 L1578.14 683.298 L1577.58 683.298 L1577.02 683.298 L1576.46 683.298 L1575.9 683.298 L1575.34 683.298 L1574.78 683.298 L1574.22 683.298 L1573.66 683.298 L1573.1 683.298 L1572.55 683.298 L1571.99 683.298 L1571.43 683.298 L1570.87 683.298 L1570.31 683.298 L1569.75 683.298 L1569.19 683.298 L1568.63 683.298 L1568.07 683.298 L1567.51 683.298 L1566.95 683.298 L1566.39 683.298 L1565.83 683.298 L1565.28 683.298 L1564.72 683.298 L1564.16 683.298 L1563.6 683.298 L1563.04 683.298 L1562.48 683.298 L1561.92 683.298 L1561.36 683.298 L1560.8 683.298 L1560.24 683.298 L1559.68 683.298 L1559.12 683.298 L1558.56 683.298 L1558 683.298 L1557.45 683.298 L1556.89 683.298 L1556.33 683.298 L1555.77 683.298 L1555.21 683.298 L1554.65 683.298 L1554.09 683.298 L1553.53 683.298 L1552.97 683.298 L1552.41 683.298 L1551.85 683.298 L1551.29 683.298 L1550.73 683.298 L1550.18 683.298 L1549.62 683.298 L1549.06 683.298 L1548.5 683.298 L1547.94 683.298 L1547.38 683.298 L1546.82 683.298 L1546.26 683.298 L1545.7 683.298 L1545.14 683.298 L1544.58 683.298 L1544.02 683.298 L1543.46 683.298 L1542.9 683.298 L1542.35 683.298 L1541.79 683.298 L1541.23 683.298 L1540.67 683.298 L1540.11 683.298 L1539.55 683.298 L1538.99 683.298 L1538.43 683.298 L1537.87 683.298 L1537.31 683.298 L1536.75 683.298 L1536.19 683.298 L1535.63 683.298 L1535.08 683.298 L1534.52 683.298 L1533.96 683.298 L1533.4 683.298 L1532.84 683.298 L1532.28 683.298 L1531.72 683.298 L1531.16 683.298 L1530.6 683.298 L1530.04 683.298 L1529.48 683.298 L1528.92 683.298 L1528.36 683.298 L1527.81 683.298 L1527.25 683.298 L1526.69 683.298 L1526.13 683.298 L1525.57 683.298 L1525.01 683.298 L1524.45 683.298 L1523.89 683.298 L1523.33 683.298 L1522.77 683.298 L1522.21 683.298 L1521.65 683.298 L1521.09 683.298 L1520.53 683.298 L1519.98 683.298 L1519.42 683.298 L1518.86 683.298 L1518.3 683.298 L1517.74 683.298 L1517.18 683.298 L1516.62 683.298 L1516.06 683.298 L1515.5 683.298 L1514.94 683.298 L1514.38 683.298 L1513.82 683.298 L1513.26 683.298 L1512.71 683.298 L1512.15 683.298 L1511.59 683.298 L1511.03 683.298 L1510.47 683.298 L1509.91 683.298 L1509.35 683.298 L1508.79 683.298 L1508.23 683.298 L1507.67 683.298 L1507.11 683.298 L1506.55 683.298 L1505.99 683.298 L1505.44 683.298 L1504.88 683.298 L1504.32 683.298 L1503.76 683.298 L1503.2 683.298 L1502.64 683.298 L1502.08 683.298 L1501.52 683.298 L1500.96 683.298 L1500.4 683.298 L1499.84 683.298 L1499.28 683.298 L1498.72 683.298 L1498.16 683.298 L1497.61 683.298 L1497.05 683.298 L1496.49 683.298 L1495.93 683.298 L1495.37 683.298 L1494.81 683.298 L1494.25 683.298 L1493.69 683.298 L1493.13 683.298 L1492.57 683.298 L1492.01 683.298 L1491.45 683.298 L1490.89 683.298 L1490.34 683.298 L1489.78 683.298 L1489.22 683.298 L1488.66 683.298 L1488.1 683.298 L1487.54 683.298 L1486.98 683.298 L1486.42 683.298 L1485.86 683.298 L1485.3 683.298 L1484.74 683.298 L1484.18 683.298 L1483.62 683.298 L1483.07 683.298 L1482.51 683.298 L1481.95 683.298 L1481.39 683.298 L1480.83 683.298 L1480.27 683.298 L1479.71 683.298 L1479.15 683.298 L1478.59 683.298 L1478.03 683.298 L1477.47 683.298 L1476.91 683.298 L1476.35 683.298 L1475.79 683.298 L1475.24 683.298 L1474.68 683.298 L1474.12 683.298 L1473.56 683.298 L1473 683.298 L1472.44 683.298 L1471.88 683.298 L1471.32 683.298 L1470.76 683.298 L1470.2 683.298 L1469.64 683.298 L1469.08 683.298 L1468.52 683.298 L1467.97 683.298 L1467.41 683.298 L1466.85 683.298 L1466.29 683.298 L1465.73 683.298 L1465.17 683.298 L1464.61 683.298 L1464.05 683.298 L1463.49 683.298 L1462.93 683.298 L1462.37 683.298 L1461.81 683.298 L1461.25 683.298 L1460.7 683.298 L1460.14 683.298 L1459.58 683.298 L1459.02 683.298 L1458.46 683.298 L1457.9 683.298 L1457.34 683.298 L1456.78 683.298 L1456.22 683.298 L1455.66 683.298 L1455.1 683.298 L1454.54 683.298 L1453.98 683.298 L1453.42 683.298 L1452.87 683.298 L1452.31 683.298 L1451.75 683.298 L1451.19 683.298 L1450.63 683.298 L1450.07 683.298 L1449.51 683.298 L1448.95 683.298 L1448.39 683.298 L1447.83 683.298 L1447.27 683.298 L1446.71 683.298 L1446.15 683.298 L1445.6 683.298 L1445.04 683.298 L1444.48 683.298 L1443.92 683.298 L1443.36 683.298 L1442.8 683.298 L1442.24 683.298 L1441.68 683.298 L1441.12 683.298 L1440.56 683.298 L1440 683.298 L1439.44 683.298 L1438.88 683.298 L1438.33 683.298 L1437.77 683.298 L1437.21 683.298 L1436.65 683.298 L1436.09 683.298 L1435.53 683.298 L1434.97 683.298 L1434.41 683.298 L1433.85 683.298 L1433.29 683.298 L1432.73 683.298 L1432.17 683.298 L1431.61 683.298 L1431.05 683.298 L1430.5 683.298 L1429.94 683.298 L1429.38 683.298 L1428.82 683.298 L1428.26 683.298 L1427.7 683.298 L1427.14 683.298 L1426.58 683.298 L1426.02 683.298 L1425.46 683.298 L1424.9 683.298 L1424.34 683.298 L1423.78 683.298 L1423.23 683.298 L1422.67 683.298 L1422.11 683.298 L1421.55 683.298 L1420.99 683.298 L1420.43 683.298 L1419.87 683.298 L1419.31 683.298 L1418.75 683.298 L1418.19 683.298 L1417.63 683.298 L1417.07 683.298 L1416.51 683.298 L1415.95 683.298 L1415.4 683.298 L1414.84 683.298 L1414.28 683.298 L1413.72 683.298 L1413.16 683.298 L1412.6 683.298 L1412.04 683.298 L1411.48 683.298 L1410.92 683.298 L1410.36 683.298 L1409.8 683.298 L1409.24 683.298 L1408.68 683.298 L1408.13 683.298 L1407.57 683.298 L1407.01 683.298 L1406.45 683.298 L1405.89 683.298 L1405.33 683.298 L1404.77 683.298 L1404.21 683.298 L1403.65 683.298 L1403.09 683.298 L1402.53 683.298 L1401.97 683.298 L1401.41 683.298 L1400.86 683.298 L1400.3 683.298 L1399.74 683.298 L1399.18 683.298 L1398.62 683.298 L1398.06 683.298 L1397.5 683.298 L1396.94 683.298 L1396.38 683.298 L1395.82 683.298 L1395.26 683.298 L1394.7 683.298 L1394.14 683.298 L1393.58 683.298 L1393.03 683.298 L1392.47 683.298 L1391.91 683.298 L1391.35 683.298 L1390.79 683.298 L1390.23 683.298 L1389.67 683.298 L1389.11 683.298 L1388.55 683.298 L1387.99 683.298 L1387.43 683.298 L1386.87 683.298 L1386.31 683.298 L1385.76 683.298 L1385.2 683.298 L1384.64 683.298 L1384.08 683.298 L1383.52 683.298 L1382.96 683.298 L1382.4 683.298 L1381.84 683.298 L1381.28 683.298 L1380.72 683.298 L1380.16 683.298 L1379.6 683.298 L1379.04 683.298 L1378.49 683.298 L1377.93 683.298 L1377.37 683.298 L1376.81 683.298 L1376.25 683.298 L1375.69 683.298 L1375.13 683.298 L1374.57 683.298 L1374.01 683.298 L1373.45 683.298 L1372.89 683.298 L1372.33 683.298 L1371.77 683.298 L1371.21 683.298 L1370.66 683.298 L1370.1 683.298 L1369.54 683.298 L1368.98 683.298 L1368.42 683.298 L1367.86 683.298 L1367.3 683.298 L1366.74 683.298 L1366.18 683.298 L1365.62 683.298 L1365.06 683.298 L1364.5 683.298 L1363.94 683.298 L1363.39 683.298 L1362.83 683.298 L1362.27 683.298 L1361.71 683.298 L1361.15 683.298 L1360.59 683.298 L1360.03 683.298 L1359.47 683.298 L1358.91 683.298 L1358.35 683.298 L1357.79 683.298 L1357.23 683.298 L1356.67 683.298 L1356.12 683.298 L1355.56 683.298 L1355 683.298 L1354.44 683.298 L1353.88 683.298 L1353.32 683.298 L1352.76 683.298 L1352.2 683.298 L1351.64 683.298 L1351.08 683.298 L1350.52 683.298 L1349.96 683.298 L1349.4 683.298 L1348.84 683.298 L1348.29 683.298 L1347.73 683.298 L1347.17 683.298 L1346.61 683.298 L1346.05 683.298 L1345.49 683.298 L1344.93 683.298 L1344.37 683.298 L1343.81 683.298 L1343.25 683.298 L1342.69 683.298 L1342.13 683.298 L1341.57 683.298 L1341.02 683.298 L1340.46 683.298 L1339.9 683.298 L1339.34 683.298 L1338.78 683.298 L1338.22 683.298 L1337.66 683.298 L1337.1 683.298 L1336.54 683.298 L1335.98 683.298 L1335.42 683.298 L1334.86 683.298 L1334.3 683.298 L1333.75 683.298 L1333.19 683.298 L1332.63 683.298 L1332.07 683.298 L1331.51 683.298 L1330.95 683.298 L1330.39 683.298 L1329.83 683.298 L1329.27 683.298 L1328.71 683.298 L1328.15 683.298 L1327.59 683.298 L1327.03 683.298 L1326.47 683.298 L1325.92 683.298 L1325.36 683.298 L1324.8 683.298 L1324.24 683.298 L1323.68 683.298 L1323.12 683.298 L1322.56 683.298 L1322 683.298 L1321.44 683.298 L1320.88 683.298 L1320.32 683.298 L1319.76 683.298 L1319.2 683.298 L1318.65 683.298 L1318.09 683.298 L1317.53 683.298 L1316.97 683.298 L1316.41 683.298 L1315.85 683.298 L1315.29 683.298 L1314.73 683.298 L1314.17 683.298 L1313.61 683.298 L1313.05 683.298 L1312.49 683.298 L1311.93 683.298 L1311.38 683.298 L1310.82 683.298 L1310.26 683.298 L1309.7 683.298 L1309.14 683.298 L1308.58 683.298 L1308.02 683.298 L1307.46 683.298 L1306.9 683.298 L1306.34 683.298 L1305.78 683.298 L1305.22 683.298 L1304.66 683.298 L1304.1 683.298 L1303.55 683.298 L1302.99 683.298 L1302.43 683.298 L1301.87 683.298 L1301.31 683.298 L1300.75 683.298 L1300.19 683.298 L1299.63 683.298 L1299.07 683.298 L1298.51 683.298 L1297.95 683.298 L1297.39 683.298 L1296.83 683.298 L1296.28 683.298 L1295.72 683.298 L1295.16 683.298 L1294.6 683.298 L1294.04 683.298 L1293.48 683.298 L1292.92 683.298 L1292.36 683.298 L1291.8 683.298 L1291.24 683.298 L1290.68 683.298 L1290.12 683.298 L1289.56 683.298 L1289 683.298 L1288.45 683.298 L1287.89 683.298 L1287.33 683.298 L1286.77 683.298 L1286.21 683.298 L1285.65 683.298 L1285.09 683.298 L1284.53 683.298 L1283.97 683.298 L1283.41 683.298 L1282.85 683.298 L1282.29 683.298 L1281.73 683.298 L1281.18 683.298 L1280.62 683.298 L1280.06 683.298 L1279.5 683.298 L1278.94 683.298 L1278.38 683.298 L1277.82 683.298 L1277.26 683.298 L1276.7 683.298 L1276.14 683.298 L1275.58 683.298 L1275.02 683.298 L1274.46 683.298 L1273.91 683.298 L1273.35 683.298 L1272.79 683.298 L1272.23 683.298 L1271.67 683.298 L1271.11 683.298 L1270.55 683.298 L1269.99 683.298 L1269.43 683.298 L1268.87 683.298 L1268.31 683.298 L1267.75 683.298 L1267.19 683.298 L1266.63 683.298 L1266.08 683.298 L1265.52 683.298 L1264.96 683.298 L1264.4 683.298 L1263.84 683.298 L1263.28 683.298 L1262.72 683.298 L1262.16 683.298 L1261.6 683.298 L1261.04 683.298 L1260.48 683.298 L1259.92 683.298 L1259.36 683.298 L1258.81 683.298 L1258.25 683.298 L1257.69 683.298 L1257.13 683.298 L1256.57 683.298 L1256.01 683.298 L1255.45 683.298 L1254.89 683.298 L1254.33 683.298 L1253.77 683.298 L1253.21 683.298 L1252.65 683.298 L1252.09 683.298 L1251.54 683.298 L1250.98 683.298 L1250.42 683.298 L1249.86 683.298 L1249.3 683.298 L1248.74 683.298 L1248.18 683.298 L1247.62 683.298 L1247.06 683.298 L1246.5 683.298 L1245.94 683.298 L1245.38 683.298 L1244.82 683.298 L1244.26 683.298 L1243.71 683.298 L1243.15 683.298 L1242.59 683.298 L1242.03 683.298 L1241.47 683.298 L1240.91 683.298 L1240.35 683.298 L1239.79 683.298 L1239.23 683.298 L1238.67 683.298 L1238.11 683.298 L1237.55 683.298 L1236.99 683.298 L1236.44 683.298 L1235.88 683.298 L1235.32 683.298 L1234.76 683.298 L1234.2 683.298 L1233.64 683.298 L1233.08 683.298 L1232.52 683.298 L1231.96 683.298 L1231.4 683.298 L1230.84 683.298 L1230.28 683.298 L1229.72 683.298 L1229.17 683.298 L1228.61 683.298 L1228.05 683.298 L1227.49 683.298 L1226.93 683.298 L1226.37 683.298 L1225.81 683.298 L1225.25 683.298 L1224.69 683.298 L1224.13 683.298 L1223.57 683.298 L1223.01 683.298 L1222.45 683.298 L1221.89 683.298 L1221.34 683.298 L1220.78 683.298 L1220.22 683.298 L1219.66 683.298 L1219.1 683.298 L1218.54 683.298 L1217.98 683.298 L1217.42 683.298 L1216.86 683.298 L1216.3 683.298 L1215.74 683.298 L1215.18 683.298 L1214.62 683.298 L1214.07 683.298 L1213.51 683.298 L1212.95 683.298 L1212.39 683.298 L1211.83 683.298 L1211.27 683.298 L1210.71 683.298 L1210.15 683.298 L1209.59 683.298 L1209.03 683.298 L1208.47 683.298 L1207.91 683.298 L1207.35 683.298 L1206.8 683.298 L1206.24 683.298 L1205.68 683.298 L1205.12 683.298 L1204.56 683.298 L1204 683.298 L1203.44 683.298 L1202.88 683.298 L1202.32 683.298 L1201.76 683.298 L1201.2 683.298 L1200.64 683.298 L1200.08 683.298 L1199.52 683.298 L1198.97 683.298 L1198.41 683.298 L1197.85 683.298 L1197.29 683.298 L1196.73 683.298 L1196.17 683.298 L1195.61 683.298 L1195.05 683.298 L1194.49 683.298 L1193.93 683.298 L1193.37 683.298 L1192.81 683.298 L1192.25 683.298 L1191.7 683.298 L1191.14 683.298 L1190.58 683.298 L1190.02 683.298 L1189.46 683.298 L1188.9 683.298 L1188.34 683.298 L1187.78 683.298 L1187.22 683.298 L1186.66 683.298 L1186.1 683.298 L1185.54 683.298 L1184.98 683.298 L1184.43 683.298 L1183.87 683.298 L1183.31 683.298 L1182.75 683.298 L1182.19 683.298 L1181.63 683.298 L1181.07 683.298 L1180.51 683.298 L1179.95 683.298 L1179.39 683.298 L1178.83 683.298 L1178.27 683.298 L1177.71 683.298 L1177.15 683.298 L1176.6 683.298 L1176.04 683.298 L1175.48 683.298 L1174.92 683.298 L1174.36 683.298 L1173.8 683.298 L1173.24 683.298 L1172.68 683.298 L1172.12 683.298 L1171.56 683.298 L1171 683.298 L1170.44 683.298 L1169.88 683.298 L1169.33 683.298 L1168.77 683.298 L1168.21 683.298 L1167.65 683.298 L1167.09 683.298 L1166.53 683.298 L1165.97 683.298 L1165.41 683.298 L1164.85 683.298 L1164.29 683.298 L1163.73 683.298 L1163.17 683.298 L1162.61 683.298 L1162.05 683.298 L1161.5 683.298 L1160.94 683.298 L1160.38 683.298 L1159.82 683.298 L1159.26 683.298 L1158.7 683.298 L1158.14 683.298 L1157.58 683.298 L1157.02 683.298 L1156.46 683.298 L1155.9 683.298 L1155.34 683.298 L1154.78 683.298 L1154.23 683.298 L1153.67 683.298 L1153.11 683.298 L1152.55 683.298 L1151.99 683.298 L1151.43 683.298 L1150.87 683.298 L1150.31 683.298 L1149.75 683.298 L1149.19 683.298 L1148.63 683.298 L1148.07 683.298 L1147.51 683.298 L1146.96 683.298 L1146.4 683.298 L1145.84 683.298 L1145.28 683.298 L1144.72 683.298 L1144.16 683.298 L1143.6 683.298 L1143.04 683.298 L1142.48 683.298 L1141.92 683.298 L1141.36 683.298 L1140.8 683.298 L1140.24 683.298 L1139.68 683.298 L1139.13 683.298 L1138.57 683.298 L1138.01 683.298 L1137.45 683.298 L1136.89 683.298 L1136.33 683.298 L1135.77 683.298 L1135.21 683.298 L1134.65 683.298 L1134.09 683.298 L1133.53 683.298 L1132.97 683.298 L1132.41 683.298 L1131.86 683.298 L1131.3 683.298 L1130.74 683.298 L1130.18 683.298 L1129.62 683.298 L1129.06 683.298 L1128.5 683.298 L1127.94 683.298 L1127.38 683.298 L1126.82 683.298 L1126.26 683.298 L1125.7 683.298 L1125.14 683.298 L1124.59 683.298 L1124.03 683.298 L1123.47 683.298 L1122.91 683.298 L1122.35 683.298 L1121.79 683.298 L1121.23 683.298 L1120.67 683.298 L1120.11 683.298 L1119.55 683.298 L1118.99 683.298 L1118.43 683.298 L1117.87 683.298 L1117.31 683.298 L1116.76 683.298 L1116.2 683.298 L1115.64 683.298 L1115.08 683.298 L1114.52 683.298 L1113.96 683.298 L1113.4 683.298 L1112.84 683.298 L1112.28 683.298 L1111.72 683.298 L1111.16 683.298 L1110.6 683.298 L1110.04 683.298 L1109.49 683.298 L1108.93 683.298 L1108.37 683.298 L1107.81 683.298 L1107.25 683.298 L1106.69 683.298 L1106.13 683.298 L1105.57 683.298 L1105.01 683.298 L1104.45 683.298 L1103.89 683.298 L1103.33 683.298 L1102.77 683.298 L1102.22 683.298 L1101.66 683.298 L1101.1 683.298 L1100.54 683.298 L1099.98 683.298 L1099.42 683.298 L1098.86 683.298 L1098.3 683.298 L1097.74 683.298 L1097.18 683.298 L1096.62 683.298 L1096.06 683.298 L1095.5 683.298 L1094.94 683.298 L1094.39 683.298 L1093.83 683.298 L1093.27 683.298 L1092.71 683.298 L1092.15 683.298 L1091.59 683.298 L1091.03 683.298 L1090.47 683.298 L1089.91 683.298 L1089.35 683.298 L1088.79 683.298 L1088.23 683.298 L1087.67 683.298 L1087.12 683.298 L1086.56 683.298 L1086 683.298 L1085.44 683.298 L1084.88 683.298 L1084.32 683.298 L1083.76 683.298 L1083.2 683.298 L1082.64 683.298 L1082.08 683.298 L1081.52 683.298 L1080.96 683.298 L1080.4 683.298 L1079.85 683.298 L1079.29 683.298 L1078.73 683.298 L1078.17 683.298 L1077.61 683.298 L1077.05 683.298 L1076.49 683.298 L1075.93 683.298 L1075.37 683.298 L1074.81 683.298 L1074.25 683.298 L1073.69 683.298 L1073.13 683.298 L1072.57 683.298 L1072.02 683.298 L1071.46 683.298 L1070.9 683.298 L1070.34 683.298 L1069.78 683.298 L1069.22 683.298 L1068.66 683.298 L1068.1 683.298 L1067.54 683.298 L1066.98 683.298 L1066.42 683.298 L1065.86 683.298 L1065.3 683.298 L1064.75 683.298 L1064.19 683.298 L1063.63 683.298 L1063.07 683.298 L1062.51 683.298 L1061.95 683.298 L1061.39 683.298 L1060.83 683.298 L1060.27 683.298 L1059.71 683.298 L1059.15 683.298 L1058.59 683.298 L1058.03 683.298 L1057.48 683.298 L1056.92 683.298 L1056.36 683.298 L1055.8 683.298 L1055.24 683.298 L1054.68 683.298 L1054.12 683.298 L1053.56 683.298 L1053 683.298 L1052.44 683.298 L1051.88 683.298 L1051.32 683.298 L1050.76 683.298 L1050.2 683.298 L1049.65 683.298 L1049.09 683.298 L1048.53 683.298 L1047.97 683.298 L1047.41 683.298 L1046.85 683.298 L1046.29 683.298 L1045.73 683.298 L1045.17 683.298 L1044.61 683.298 L1044.05 683.298 L1043.49 683.298 L1042.93 683.298 L1042.38 683.298 L1041.82 683.298 L1041.26 683.298 L1040.7 683.298 L1040.14 683.298 L1039.58 683.298 L1039.02 683.298 L1038.46 683.298 L1037.9 683.298 L1037.34 683.298 L1036.78 683.298 L1036.22 683.298 L1035.66 683.298 L1035.1 683.298 L1034.55 683.298 L1033.99 683.298 L1033.43 683.298 L1032.87 683.298 L1032.31 683.298 L1031.75 683.298 L1031.19 683.298 L1030.63 683.298 L1030.07 683.298 L1029.51 683.298 L1028.95 683.298 L1028.39 683.298 L1027.83 683.298 L1027.28 683.298 L1026.72 683.298 L1026.16 683.298 L1025.6 683.298 L1025.04 683.298 L1024.48 683.298 L1023.92 683.298 L1023.36 683.298 L1022.8 683.298 L1022.24 683.298 L1021.68 683.298 L1021.12 683.298 L1020.56 683.298 L1020.01 683.298 L1019.45 683.298 L1018.89 683.298 L1018.33 683.298 L1017.77 683.298 L1017.21 683.298 L1016.65 683.298 L1016.09 683.298 L1015.53 683.298 L1014.97 683.298 L1014.41 683.298 L1013.85 683.298 L1013.29 683.298 L1012.73 683.298 L1012.18 683.298 L1011.62 683.298 L1011.06 683.298 L1010.5 683.298 L1009.94 683.298 L1009.38 683.298 L1008.82 683.298 L1008.26 683.298 L1007.7 683.298 L1007.14 683.298 L1006.58 683.298 L1006.02 683.298 L1005.46 683.298 L1004.91 683.298 L1004.35 683.298 L1003.79 683.298 L1003.23 683.298 L1002.67 683.298 L1002.11 683.298 L1001.55 683.298 L1000.99 683.298 L1000.43 683.298 L999.872 683.298 L999.313 683.298 L998.754 683.298 L998.194 683.298 L997.635 683.298 L997.076 683.298 L996.517 683.298 L995.957 683.298 L995.398 683.298 L994.839 683.298 L994.28 683.298 L993.72 683.298 L993.161 683.298 L992.602 683.298 L992.043 683.298 L991.483 683.298 L990.924 683.298 L990.365 683.298 L989.806 683.298 L989.246 683.298 L988.687 683.298 L988.128 683.298 L987.569 683.298 L987.009 683.298 L986.45 683.298 L985.891 683.298 L985.332 683.298 L984.772 683.298 L984.213 683.298 L983.654 683.298 L983.095 683.298 L982.535 683.298 L981.976 683.298 L981.417 683.298 L980.858 683.298 L980.298 683.298 L979.739 683.298 L979.18 683.298 L978.621 683.298 L978.061 683.298 L977.502 683.298 L976.943 683.298 L976.384 683.298 L975.824 683.298 L975.265 683.298 L974.706 683.298 L974.147 683.298 L973.587 683.298 L973.028 683.298 L972.469 683.298 L971.91 683.298 L971.35 683.298 L970.791 683.298 L970.232 683.298 L969.673 683.298 L969.113 683.298 L968.554 683.298 L967.995 683.298 L967.436 683.298 L966.876 683.298 L966.317 683.298 L965.758 683.298 L965.199 683.298 L964.639 683.298 L964.08 683.298 L963.521 683.298 L962.962 683.298 L962.402 683.298 L961.843 683.298 L961.284 683.298 L960.725 683.298 L960.165 683.298 L959.606 683.298 L959.047 683.298 L958.488 683.298 L957.928 683.298 L957.369 683.298 L956.81 683.298 L956.251 683.298 L955.691 683.298 L955.132 683.298 L954.573 683.298 L954.014 683.298 L953.454 683.298 L952.895 683.298 L952.336 683.298 L951.777 683.298 L951.217 683.298 L950.658 683.298 L950.099 683.298 L949.54 683.298 L948.98 683.298 L948.421 683.298 L947.862 683.298 L947.303 683.298 L946.743 683.298 L946.184 683.298 L945.625 683.298 L945.066 683.298 L944.506 683.298 L943.947 683.298 L943.388 683.298 L942.829 683.298 L942.269 683.298 L941.71 683.298 L941.151 683.298 L940.592 683.298 L940.032 683.298 L939.473 683.298 L938.914 683.298 L938.355 683.298 L937.795 683.298 L937.236 683.298 L936.677 683.298 L936.118 683.298 L935.558 683.298 L934.999 683.298 L934.44 683.298 L933.881 683.298 L933.321 683.298 L932.762 683.298 L932.203 683.298 L931.644 683.298 L931.084 683.298 L930.525 683.298 L929.966 683.298 L929.406 683.298 L928.847 683.298 L928.288 683.298 L927.729 683.298 L927.169 683.298 L926.61 683.298 L926.051 683.298 L925.492 683.298 L924.932 683.298 L924.373 683.298 L923.814 683.298 L923.255 683.298 L922.695 683.298 L922.136 683.298 L921.577 683.298 L921.018 683.298 L920.458 683.298 L919.899 683.298 L919.34 683.298 L918.781 683.298 L918.221 683.298 L917.662 683.298 L917.103 683.298 L916.544 683.298 L915.984 683.298 L915.425 683.298 L914.866 683.298 L914.307 683.298 L913.747 683.298 L913.188 683.298 L912.629 683.298 L912.07 683.298 L911.51 683.298 L910.951 683.298 L910.392 683.298 L909.833 683.298 L909.273 683.298 L908.714 683.298 L908.155 683.298 L907.596 683.298 L907.036 683.298 L906.477 683.298 L905.918 683.298 L905.359 683.298 L904.799 683.298 L904.24 683.298 L903.681 683.298 L903.122 683.298 L902.562 683.298 L902.003 683.298 L901.444 683.298 L900.885 683.298 L900.325 683.298 L899.766 683.298 L899.207 683.298 L898.648 683.298 L898.088 683.298 L897.529 683.298 L896.97 683.298 L896.411 683.298 L895.851 683.298 L895.292 683.298 L894.733 683.298 L894.174 683.298 L893.614 683.298 L893.055 683.298 L892.496 683.298 L891.937 683.298 L891.377 683.298 L890.818 683.298 L890.259 683.298 L889.7 683.298 L889.14 683.298 L888.581 683.298 L888.022 683.298 L887.463 683.298 L886.903 683.298 L886.344 683.298 L885.785 683.298 L885.226 683.298 L884.666 683.298 L884.107 683.298 L883.548 683.298 L882.989 683.298 L882.429 683.298 L881.87 683.298 L881.311 683.298 L880.752 683.298 L880.192 683.298 L879.633 683.298 L879.074 683.298 L878.515 683.298 L877.955 683.298 L877.396 683.298 L876.837 683.298 L876.278 683.298 L875.718 683.298 L875.159 683.298 L874.6 683.298 L874.041 683.298 L873.481 683.298 L872.922 683.298 L872.363 683.298 L871.804 683.298 L871.244 683.298 L870.685 683.298 L870.126 683.298 L869.567 683.298 L869.007 683.298 L868.448 683.298 L867.889 683.298 L867.33 683.298 L866.77 683.298 L866.211 683.298 L865.652 683.298 L865.093 683.298 L864.533 683.298 L863.974 683.298 L863.415 683.298 L862.856 683.298 L862.296 683.298 L861.737 683.298 L861.178 683.298 L860.619 683.298 L860.059 683.298 L859.5 683.298 L858.941 683.298 L858.382 683.298 L857.822 683.298 L857.263 683.298 L856.704 683.298 L856.145 683.298 L855.585 683.298 L855.026 683.298 L854.467 683.298 L853.908 683.298 L853.348 683.298 L852.789 683.298 L852.23 683.298 L851.671 683.298 L851.111 683.298 L850.552 683.298 L849.993 683.298 L849.434 683.298 L848.874 683.298 L848.315 683.298 L847.756 683.298 L847.197 683.298 L846.637 683.298 L846.078 683.298 L845.519 683.298 L844.96 683.298 L844.4 683.298 L843.841 683.298 L843.282 683.298 L842.723 683.298 L842.163 683.298 L841.604 683.298 L841.045 683.298 L840.486 683.298 L839.926 683.298 L839.367 683.298 L838.808 683.298 L838.249 683.298 L837.689 683.298 L837.13 683.298 L836.571 683.298 L836.012 683.298 L835.452 683.298 L834.893 683.298 L834.334 683.298 L833.775 683.298 L833.215 683.298 L832.656 683.298 L832.097 683.298 L831.538 683.298 L830.978 683.298 L830.419 683.298 L829.86 683.298 L829.301 683.298 L828.741 683.298 L828.182 683.298 L827.623 683.298 L827.064 683.298 L826.504 683.298 L825.945 683.298 L825.386 683.298 L824.827 683.298 L824.267 683.298 L823.708 683.298 L823.149 683.298 L822.59 683.298 L822.03 683.298 L821.471 683.298 L820.912 683.298 L820.353 683.298 L819.793 683.298 L819.234 683.298 L818.675 683.298 L818.116 683.298 L817.556 683.298 L816.997 683.298 L816.438 683.298 L815.879 683.298 L815.319 683.298 L814.76 683.298 L814.201 683.298 L813.642 683.298 L813.082 683.298 L812.523 683.298 L811.964 683.298 L811.405 683.298 L810.845 683.298 L810.286 683.298 L809.727 683.298 L809.168 683.298 L808.608 683.298 L808.049 683.298 L807.49 683.298 L806.931 683.298 L806.371 683.298 L805.812 683.298 L805.253 683.298 L804.693 683.298 L804.134 683.298 L803.575 683.298 L803.016 683.298 L802.456 683.298 L801.897 683.298 L801.338 683.298 L800.779 683.298 L800.219 683.298 L799.66 683.298 L799.101 683.298 L798.542 683.298 L797.982 683.298 L797.423 683.298 L796.864 683.298 L796.305 683.298 L795.745 683.298 L795.186 683.298 L794.627 683.298 L794.068 683.298 L793.508 683.298 L792.949 683.298 L792.39 683.298 L791.831 683.298 L791.271 683.298 L790.712 683.298 L790.153 683.298 L789.594 683.298 L789.034 683.298 L788.475 683.298 L787.916 683.298 L787.357 683.298 L786.797 683.298 L786.238 683.298 L785.679 683.298 L785.12 683.298 L784.56 683.298 L784.001 683.298 L783.442 683.298 L782.883 683.298 L782.323 683.298 L781.764 683.298 L781.205 683.298 L780.646 683.298 L780.086 683.298 L779.527 683.298 L778.968 683.298 L778.409 683.298 L777.849 683.298 L777.29 683.298 L776.731 683.298 L776.172 683.298 L775.612 683.298 L775.053 683.298 L774.494 683.298 L773.935 683.298 L773.375 683.298 L772.816 683.298 L772.257 683.298 L771.698 683.298 L771.138 683.298 L770.579 683.298 L770.02 683.298 L769.461 683.298 L768.901 683.298 L768.342 683.298 L767.783 683.298 L767.224 683.298 L766.664 683.298 L766.105 683.298 L765.546 683.298 L764.987 683.298 L764.427 683.298 L763.868 683.298 L763.309 683.298 L762.75 683.298 L762.19 683.298 L761.631 683.298 L761.072 683.298 L760.513 683.298 L759.953 683.298 L759.394 683.298 L758.835 683.298 L758.276 683.298 L757.716 683.298 L757.157 683.298 L756.598 683.298 L756.039 683.298 L755.479 683.298 L754.92 683.298 L754.361 683.298 L753.802 683.298 L753.242 683.298 L752.683 683.298 L752.124 683.298 L751.565 683.298 L751.005 683.298 L750.446 683.298 L749.887 683.298 L749.328 683.298 L748.768 683.298 L748.209 683.298 L747.65 683.298 L747.091 683.298 L746.531 683.298 L745.972 683.298 L745.413 683.298 L744.854 683.298 L744.294 683.298 L743.735 683.298 L743.176 683.298 L742.617 683.298 L742.057 683.298 L741.498 683.298 L740.939 683.298 L740.38 683.298 L739.82 683.298 L739.261 683.298 L738.702 683.298 L738.143 683.298 L737.583 683.298 L737.024 683.298 L736.465 683.298 L735.906 683.298 L735.346 683.298 L734.787 683.298 L734.228 683.298 L733.669 683.298 L733.109 683.298 L732.55 683.298 L731.991 683.298 L731.432 683.298 L730.872 683.298 L730.313 683.298 L729.754 683.298 L729.195 683.298 L728.635 683.298 L728.076 683.298 L727.517 683.298 L726.958 683.298 L726.398 683.298 L725.839 683.298 L725.28 683.298 L724.721 683.298 L724.161 683.298 L723.602 683.298 L723.043 683.298 L722.484 683.298 L721.924 683.298 L721.365 683.298 L720.806 683.298 L720.247 683.298  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.918 720.806,686.918 721.365,686.918 721.924,686.918 722.484,686.918 723.043,686.918 723.602,686.918 724.161,686.918 724.721,686.918 725.28,686.918 725.839,686.918 726.398,686.918 726.958,686.918 727.517,686.918 728.076,686.918 728.635,686.918 729.195,686.918 729.754,686.918 730.313,686.918 730.872,686.918 731.432,686.918 731.991,686.918 732.55,686.918 733.109,686.918 733.669,686.918 734.228,686.918 734.787,686.918 735.346,686.918 735.906,686.918 736.465,686.918 737.024,686.918 737.583,686.918 738.143,686.918 738.702,686.918 739.261,686.918 739.82,686.918 740.38,686.918 740.939,686.918 741.498,686.918 742.057,686.918 742.617,686.918 743.176,686.918 743.735,686.918 744.294,686.918 744.854,686.918 745.413,686.918 745.972,686.918 746.531,686.918 747.091,686.918 747.65,686.918 748.209,686.918 748.768,686.918 749.328,686.918 749.887,686.918 750.446,686.918 751.005,686.918 751.565,686.918 752.124,686.918 752.683,686.918 753.242,686.918 753.802,686.918 754.361,686.918 754.92,686.918 755.479,686.918 756.039,686.918 756.598,686.918 757.157,686.918 757.716,686.918 758.276,686.918 758.835,686.918 759.394,686.918 759.953,686.918 760.513,686.918 761.072,686.918 761.631,686.918 762.19,686.918 762.75,686.918 763.309,686.918 763.868,686.918 764.427,686.918 764.987,686.918 765.546,686.918 766.105,686.918 766.664,686.918 767.224,686.918 767.783,686.918 768.342,686.918 768.901,686.918 769.461,686.918 770.02,686.918 770.579,686.918 771.138,686.918 771.698,686.918 772.257,686.918 772.816,686.918 773.375,686.918 773.935,686.918 774.494,686.918 775.053,686.918 775.612,686.918 776.172,686.918 776.731,686.918 777.29,686.918 777.849,686.918 778.409,686.918 778.968,686.918 779.527,686.918 780.086,686.918 780.646,686.918 781.205,686.918 781.764,686.918 782.323,686.918 782.883,686.918 783.442,686.918 784.001,686.918 784.56,686.918 785.12,686.918 785.679,686.918 786.238,686.918 786.797,686.918 787.357,686.918 787.916,686.918 788.475,686.918 789.034,686.918 789.594,686.918 790.153,686.918 790.712,686.918 791.271,686.918 791.831,686.918 792.39,686.918 792.949,686.918 793.508,686.918 794.068,686.918 794.627,686.918 795.186,686.918 795.745,686.918 796.305,686.918 796.864,686.918 797.423,686.918 797.982,686.918 798.542,686.918 799.101,686.918 799.66,686.918 800.219,686.918 800.779,686.918 801.338,686.918 801.897,686.918 802.456,686.918 803.016,686.918 803.575,686.918 804.134,686.918 804.693,686.918 805.253,686.918 805.812,686.918 806.371,686.918 806.931,686.918 807.49,686.918 808.049,686.918 808.608,686.918 809.168,686.918 809.727,686.918 810.286,686.918 810.845,686.918 811.405,686.918 811.964,686.918 812.523,686.918 813.082,686.918 813.642,686.918 814.201,686.918 814.76,686.918 815.319,686.918 815.879,686.918 816.438,686.918 816.997,686.918 817.556,686.918 818.116,686.918 818.675,686.918 819.234,686.918 819.793,686.918 820.353,686.918 820.912,686.918 821.471,686.918 822.03,686.918 822.59,686.918 823.149,686.918 823.708,686.918 824.267,686.918 824.827,686.918 825.386,686.918 825.945,686.918 826.504,686.918 827.064,686.918 827.623,686.918 828.182,686.918 828.741,686.918 829.301,686.918 829.86,686.918 830.419,686.918 830.978,686.918 831.538,686.918 832.097,686.918 832.656,686.918 833.215,686.918 833.775,686.918 834.334,686.918 834.893,686.918 835.452,686.918 836.012,686.918 836.571,686.918 837.13,686.918 837.689,686.918 838.249,686.918 838.808,686.918 839.367,686.918 839.926,686.918 840.486,686.918 841.045,686.918 841.604,686.918 842.163,686.918 842.723,686.918 843.282,686.918 843.841,686.918 844.4,686.918 844.96,686.918 845.519,686.918 846.078,686.918 846.637,686.918 847.197,686.918 847.756,686.918 848.315,686.918 848.874,686.918 849.434,686.918 849.993,686.918 850.552,686.918 851.111,686.918 851.671,686.918 852.23,686.918 852.789,686.918 853.348,686.918 853.908,686.918 854.467,686.918 855.026,686.918 855.585,686.918 856.145,686.918 856.704,686.918 857.263,686.918 857.822,686.918 858.382,686.918 858.941,686.918 859.5,686.918 860.059,686.918 860.619,686.918 861.178,686.918 861.737,686.918 862.296,686.918 862.856,686.918 863.415,686.918 863.974,686.918 864.533,686.918 865.093,686.918 865.652,686.918 866.211,686.918 866.77,686.918 867.33,686.918 867.889,686.918 868.448,686.918 869.007,686.918 869.567,686.918 870.126,686.918 870.685,686.918 871.244,686.918 871.804,686.918 872.363,686.918 872.922,686.918 873.481,686.918 874.041,686.918 874.6,686.918 875.159,686.918 875.718,686.918 876.278,686.918 876.837,686.918 877.396,686.918 877.955,686.918 878.515,686.918 879.074,686.918 879.633,686.918 880.192,686.918 880.752,686.918 881.311,686.918 881.87,686.918 882.429,686.918 882.989,686.918 883.548,686.918 884.107,686.918 884.666,686.918 885.226,686.918 885.785,686.918 886.344,686.918 886.903,686.918 887.463,686.918 888.022,686.918 888.581,686.918 889.14,686.918 889.7,686.918 890.259,686.918 890.818,686.918 891.377,686.918 891.937,686.918 892.496,686.918 893.055,686.918 893.614,686.918 894.174,686.918 894.733,686.918 895.292,686.918 895.851,686.918 896.411,686.918 896.97,686.918 897.529,686.918 898.088,686.918 898.648,686.918 899.207,686.918 899.766,686.918 900.325,686.918 900.885,686.918 901.444,686.918 902.003,686.918 902.562,686.918 903.122,686.918 903.681,686.918 904.24,686.918 904.799,686.918 905.359,686.918 905.918,686.918 906.477,686.918 907.036,686.918 907.596,686.918 908.155,686.918 908.714,686.918 909.273,686.918 909.833,686.918 910.392,686.918 910.951,686.918 911.51,686.918 912.07,686.918 912.629,686.918 913.188,686.918 913.747,686.918 914.307,686.918 914.866,686.918 915.425,686.918 915.984,686.918 916.544,686.918 917.103,686.918 917.662,686.918 918.221,686.918 918.781,686.918 919.34,686.918 919.899,686.918 920.458,686.918 921.018,686.918 921.577,686.918 922.136,686.918 922.695,686.918 923.255,686.918 923.814,686.918 924.373,686.918 924.932,686.918 925.492,686.918 926.051,686.918 926.61,686.918 927.169,686.918 927.729,686.918 928.288,686.918 928.847,686.918 929.406,686.918 929.966,686.918 930.525,686.918 931.084,686.918 931.644,686.918 932.203,686.918 932.762,686.918 933.321,686.918 933.881,686.918 934.44,686.918 934.999,686.918 935.558,686.918 936.118,686.918 936.677,686.918 937.236,686.918 937.795,686.918 938.355,686.918 938.914,686.918 939.473,686.918 940.032,686.918 940.592,686.918 941.151,686.918 941.71,686.918 942.269,686.918 942.829,686.918 943.388,686.918 943.947,686.918 944.506,686.918 945.066,686.918 945.625,686.918 946.184,686.918 946.743,686.918 947.303,686.918 947.862,686.918 948.421,686.918 948.98,686.918 949.54,686.918 950.099,686.918 950.658,686.918 951.217,686.918 951.777,686.918 952.336,686.918 952.895,686.918 953.454,686.918 954.014,686.918 954.573,686.918 955.132,686.918 955.691,686.918 956.251,686.918 956.81,686.918 957.369,686.918 957.928,686.918 958.488,686.918 959.047,686.918 959.606,686.918 960.165,686.918 960.725,686.918 961.284,686.918 961.843,686.918 962.402,686.918 962.962,686.918 963.521,686.918 964.08,686.918 964.639,686.918 965.199,686.918 965.758,686.918 966.317,686.918 966.876,686.918 967.436,686.918 967.995,686.918 968.554,686.918 969.113,686.918 969.673,686.918 970.232,686.918 970.791,686.918 971.35,686.918 971.91,686.918 972.469,686.918 973.028,686.918 973.587,686.918 974.147,686.918 974.706,686.918 975.265,686.918 975.824,686.918 976.384,686.918 976.943,686.918 977.502,686.918 978.061,686.918 978.621,686.918 979.18,686.918 979.739,686.918 980.298,686.918 980.858,686.918 981.417,686.918 981.976,686.918 982.535,686.918 983.095,686.918 983.654,686.918 984.213,686.918 984.772,686.918 985.332,686.918 985.891,686.918 986.45,686.918 987.009,686.918 987.569,686.918 988.128,686.918 988.687,686.918 989.246,686.918 989.806,686.918 990.365,686.918 990.924,686.918 991.483,686.918 992.043,686.918 992.602,686.918 993.161,686.918 993.72,686.918 994.28,686.918 994.839,686.918 995.398,686.918 995.957,686.918 996.517,686.918 997.076,686.918 997.635,686.918 998.194,686.918 998.754,686.918 999.313,686.918 999.872,686.918 1000.43,686.918 1000.99,686.918 1001.55,686.918 1002.11,686.918 1002.67,686.918 1003.23,686.918 1003.79,686.918 1004.35,686.918 1004.91,686.918 1005.46,686.918 1006.02,686.918 1006.58,686.918 1007.14,686.918 1007.7,686.918 1008.26,686.918 1008.82,686.918 1009.38,686.918 1009.94,686.918 1010.5,686.918 1011.06,686.918 1011.62,686.918 1012.18,686.918 1012.73,686.918 1013.29,686.918 1013.85,686.918 1014.41,686.918 1014.97,686.918 1015.53,686.918 1016.09,686.918 1016.65,686.918 1017.21,686.918 1017.77,686.918 1018.33,686.918 1018.89,686.918 1019.45,686.918 1020.01,686.918 1020.56,686.918 1021.12,686.918 1021.68,686.918 1022.24,686.918 1022.8,686.918 1023.36,686.918 1023.92,686.918 1024.48,686.918 1025.04,686.918 1025.6,686.918 1026.16,686.918 1026.72,686.918 1027.28,686.918 1027.83,686.918 1028.39,686.918 1028.95,686.918 1029.51,686.918 1030.07,686.918 1030.63,686.918 1031.19,686.918 1031.75,686.918 1032.31,686.918 1032.87,686.918 1033.43,686.918 1033.99,686.918 1034.55,686.918 1035.1,686.918 1035.66,686.918 1036.22,686.918 1036.78,686.918 1037.34,686.918 1037.9,686.918 1038.46,686.918 1039.02,686.918 1039.58,686.918 1040.14,686.918 1040.7,686.918 1041.26,686.918 1041.82,686.918 1042.38,686.918 1042.93,686.918 1043.49,686.918 1044.05,686.918 1044.61,686.918 1045.17,686.918 1045.73,686.918 1046.29,686.918 1046.85,686.918 1047.41,686.918 1047.97,686.918 1048.53,686.918 1049.09,686.918 1049.65,686.918 1050.2,686.918 1050.76,686.918 1051.32,686.918 1051.88,686.918 1052.44,686.918 1053,686.918 1053.56,686.918 1054.12,686.918 1054.68,686.918 1055.24,686.918 1055.8,686.918 1056.36,686.918 1056.92,686.918 1057.48,686.918 1058.03,686.918 1058.59,686.918 1059.15,686.918 1059.71,686.918 1060.27,686.918 1060.83,686.918 1061.39,686.918 1061.95,686.918 1062.51,686.918 1063.07,686.918 1063.63,686.918 1064.19,686.918 1064.75,686.918 1065.3,686.918 1065.86,686.918 1066.42,686.918 1066.98,686.918 1067.54,686.918 1068.1,686.918 1068.66,686.918 1069.22,686.918 1069.78,686.918 1070.34,686.918 1070.9,686.918 1071.46,686.918 1072.02,686.918 1072.57,686.918 1073.13,686.918 1073.69,686.918 1074.25,686.918 1074.81,686.918 1075.37,686.918 1075.93,686.918 1076.49,686.918 1077.05,686.918 1077.61,686.918 1078.17,686.918 1078.73,686.918 1079.29,686.918 1079.85,686.918 1080.4,686.918 1080.96,686.918 1081.52,686.918 1082.08,686.918 1082.64,686.918 1083.2,686.918 1083.76,686.918 1084.32,686.918 1084.88,686.918 1085.44,686.918 1086,686.918 1086.56,686.918 1087.12,686.918 1087.67,686.918 1088.23,686.918 1088.79,686.918 1089.35,686.918 1089.91,686.918 1090.47,686.918 1091.03,686.918 1091.59,686.918 1092.15,686.918 1092.71,686.918 1093.27,686.918 1093.83,686.918 1094.39,686.918 1094.94,686.918 1095.5,686.918 1096.06,686.918 1096.62,686.918 1097.18,686.918 1097.74,686.918 1098.3,686.918 1098.86,686.918 1099.42,686.918 1099.98,686.918 1100.54,686.918 1101.1,686.918 1101.66,686.918 1102.22,686.918 1102.77,686.918 1103.33,686.918 1103.89,686.918 1104.45,686.918 1105.01,686.918 1105.57,686.918 1106.13,686.918 1106.69,686.918 1107.25,686.918 1107.81,686.918 1108.37,686.918 1108.93,686.918 1109.49,686.918 1110.04,686.918 1110.6,686.918 1111.16,686.918 1111.72,686.918 1112.28,686.918 1112.84,686.918 1113.4,686.918 1113.96,686.918 1114.52,686.918 1115.08,686.918 1115.64,686.918 1116.2,686.918 1116.76,686.918 1117.31,686.918 1117.87,686.918 1118.43,686.918 1118.99,686.918 1119.55,686.918 1120.11,686.918 1120.67,686.918 1121.23,686.918 1121.79,686.918 1122.35,686.918 1122.91,686.918 1123.47,686.918 1124.03,686.918 1124.59,686.918 1125.14,686.918 1125.7,686.918 1126.26,686.918 1126.82,686.918 1127.38,686.918 1127.94,686.918 1128.5,686.918 1129.06,686.918 1129.62,686.918 1130.18,686.918 1130.74,686.918 1131.3,686.918 1131.86,686.918 1132.41,686.918 1132.97,686.918 1133.53,686.918 1134.09,686.918 1134.65,686.918 1135.21,686.918 1135.77,686.918 1136.33,686.918 1136.89,686.918 1137.45,686.918 1138.01,686.918 1138.57,686.918 1139.13,686.918 1139.68,686.918 1140.24,686.918 1140.8,686.918 1141.36,686.918 1141.92,686.918 1142.48,686.918 1143.04,686.918 1143.6,686.918 1144.16,686.918 1144.72,686.918 1145.28,686.918 1145.84,686.918 1146.4,686.918 1146.96,686.918 1147.51,686.918 1148.07,686.918 1148.63,686.918 1149.19,686.918 1149.75,686.918 1150.31,686.918 1150.87,686.918 1151.43,686.918 1151.99,686.918 1152.55,686.918 1153.11,686.918 1153.67,686.918 1154.23,686.918 1154.78,686.918 1155.34,686.918 1155.9,686.918 1156.46,686.918 1157.02,686.918 1157.58,686.918 1158.14,686.918 1158.7,686.918 1159.26,686.918 1159.82,686.918 1160.38,686.918 1160.94,686.918 1161.5,686.918 1162.05,686.918 1162.61,686.918 1163.17,686.918 1163.73,686.918 1164.29,686.918 1164.85,686.918 1165.41,686.918 1165.97,686.918 1166.53,686.918 1167.09,686.918 1167.65,686.918 1168.21,686.918 1168.77,686.918 1169.33,686.918 1169.88,686.918 1170.44,686.918 1171,686.918 1171.56,686.918 1172.12,686.918 1172.68,686.918 1173.24,686.918 1173.8,686.918 1174.36,686.918 1174.92,686.918 1175.48,686.918 1176.04,686.918 1176.6,686.918 1177.15,686.918 1177.71,686.918 1178.27,686.918 1178.83,686.918 1179.39,686.918 1179.95,686.918 1180.51,686.918 1181.07,686.918 1181.63,686.918 1182.19,686.918 1182.75,686.918 1183.31,686.918 1183.87,686.918 1184.43,686.918 1184.98,686.918 1185.54,686.918 1186.1,686.918 1186.66,686.918 1187.22,686.918 1187.78,686.918 1188.34,686.918 1188.9,686.918 1189.46,686.918 1190.02,686.918 1190.58,686.918 1191.14,686.918 1191.7,686.918 1192.25,686.918 1192.81,686.918 1193.37,686.918 1193.93,686.918 1194.49,686.918 1195.05,686.918 1195.61,686.918 1196.17,686.918 1196.73,686.918 1197.29,686.918 1197.85,686.918 1198.41,686.918 1198.97,686.918 1199.52,686.918 1200.08,686.918 1200.64,686.918 1201.2,686.918 1201.76,686.918 1202.32,686.918 1202.88,686.918 1203.44,686.918 1204,686.918 1204.56,686.918 1205.12,686.918 1205.68,686.918 1206.24,686.918 1206.8,686.918 1207.35,686.918 1207.91,686.918 1208.47,686.918 1209.03,686.918 1209.59,686.918 1210.15,686.918 1210.71,686.918 1211.27,686.918 1211.83,686.918 1212.39,686.918 1212.95,686.918 1213.51,686.918 1214.07,686.918 1214.62,686.918 1215.18,686.918 1215.74,686.918 1216.3,686.918 1216.86,686.918 1217.42,686.918 1217.98,686.918 1218.54,686.918 1219.1,686.918 1219.66,686.918 1220.22,686.918 1220.78,686.918 1221.34,686.918 1221.89,686.918 1222.45,686.918 1223.01,686.918 1223.57,686.918 1224.13,686.918 1224.69,686.918 1225.25,686.918 1225.81,686.918 1226.37,686.918 1226.93,686.918 1227.49,686.918 1228.05,686.918 1228.61,686.918 1229.17,686.918 1229.72,686.918 1230.28,686.918 1230.84,686.918 1231.4,686.918 1231.96,686.918 1232.52,686.918 1233.08,686.918 1233.64,686.918 1234.2,686.918 1234.76,686.918 1235.32,686.918 1235.88,686.918 1236.44,686.918 1236.99,686.918 1237.55,686.918 1238.11,686.918 1238.67,686.918 1239.23,686.918 1239.79,686.918 1240.35,686.918 1240.91,686.918 1241.47,686.918 1242.03,686.918 1242.59,686.918 1243.15,686.918 1243.71,686.918 1244.26,686.918 1244.82,686.918 1245.38,686.918 1245.94,686.918 1246.5,686.918 1247.06,686.918 1247.62,686.918 1248.18,686.918 1248.74,686.918 1249.3,686.918 1249.86,686.918 1250.42,686.918 1250.98,686.918 1251.54,686.918 1252.09,686.918 1252.65,686.918 1253.21,686.918 1253.77,686.918 1254.33,686.918 1254.89,686.918 1255.45,686.918 1256.01,686.918 1256.57,686.918 1257.13,686.918 1257.69,686.918 1258.25,686.918 1258.81,686.918 1259.36,686.918 1259.92,686.918 1260.48,686.918 1261.04,686.918 1261.6,686.918 1262.16,686.918 1262.72,686.918 1263.28,686.918 1263.84,686.918 1264.4,686.918 1264.96,686.918 1265.52,686.918 1266.08,686.918 1266.63,686.918 1267.19,686.918 1267.75,686.918 1268.31,686.918 1268.87,686.918 1269.43,686.918 1269.99,686.918 1270.55,686.918 1271.11,686.918 1271.67,686.918 1272.23,686.918 1272.79,686.918 1273.35,686.918 1273.91,686.918 1274.46,686.918 1275.02,686.918 1275.58,686.918 1276.14,686.918 1276.7,686.918 1277.26,686.918 1277.82,686.918 1278.38,686.918 1278.94,686.918 1279.5,686.918 1280.06,686.918 1280.62,686.918 1281.18,686.918 1281.73,686.918 1282.29,686.918 1282.85,686.918 1283.41,686.918 1283.97,686.918 1284.53,686.918 1285.09,686.918 1285.65,686.918 1286.21,686.918 1286.77,686.918 1287.33,686.918 1287.89,686.918 1288.45,686.918 1289,686.918 1289.56,686.918 1290.12,686.918 1290.68,686.918 1291.24,686.918 1291.8,686.918 1292.36,686.918 1292.92,686.918 1293.48,686.918 1294.04,686.918 1294.6,686.918 1295.16,686.918 1295.72,686.918 1296.28,686.918 1296.83,686.918 1297.39,686.918 1297.95,686.918 1298.51,686.918 1299.07,686.918 1299.63,686.918 1300.19,686.918 1300.75,686.918 1301.31,686.918 1301.87,686.918 1302.43,686.918 1302.99,686.918 1303.55,686.918 1304.1,686.918 1304.66,686.918 1305.22,686.918 1305.78,686.918 1306.34,686.918 1306.9,686.918 1307.46,686.918 1308.02,686.918 1308.58,686.918 1309.14,686.918 1309.7,686.918 1310.26,686.918 1310.82,686.918 1311.38,686.918 1311.93,686.918 1312.49,686.918 1313.05,686.918 1313.61,686.918 1314.17,686.918 1314.73,686.918 1315.29,686.918 1315.85,686.918 1316.41,686.918 1316.97,686.918 1317.53,686.918 1318.09,686.918 1318.65,686.918 1319.2,686.918 1319.76,686.918 1320.32,686.918 1320.88,686.918 1321.44,686.918 1322,686.918 1322.56,686.918 1323.12,686.918 1323.68,686.918 1324.24,686.918 1324.8,686.918 1325.36,686.918 1325.92,686.918 1326.47,686.918 1327.03,686.918 1327.59,686.918 1328.15,686.918 1328.71,686.918 1329.27,686.918 1329.83,686.918 1330.39,686.918 1330.95,686.918 1331.51,686.918 1332.07,686.918 1332.63,686.918 1333.19,686.918 1333.75,686.918 1334.3,686.918 1334.86,686.918 1335.42,686.918 1335.98,686.918 1336.54,686.918 1337.1,686.918 1337.66,686.918 1338.22,686.918 1338.78,686.918 1339.34,686.918 1339.9,686.918 1340.46,686.918 1341.02,686.918 1341.57,686.918 1342.13,686.918 1342.69,686.918 1343.25,686.918 1343.81,686.918 1344.37,686.918 1344.93,686.918 1345.49,686.918 1346.05,686.918 1346.61,686.918 1347.17,686.918 1347.73,686.918 1348.29,686.918 1348.84,686.918 1349.4,686.918 1349.96,686.918 1350.52,686.918 1351.08,686.918 1351.64,686.918 1352.2,686.918 1352.76,686.918 1353.32,686.918 1353.88,686.918 1354.44,686.918 1355,686.918 1355.56,686.918 1356.12,686.918 1356.67,686.918 1357.23,686.918 1357.79,686.918 1358.35,686.918 1358.91,686.918 1359.47,686.918 1360.03,686.918 1360.59,686.918 1361.15,686.918 1361.71,686.918 1362.27,686.918 1362.83,686.918 1363.39,686.918 1363.94,686.918 1364.5,686.918 1365.06,686.918 1365.62,686.918 1366.18,686.918 1366.74,686.918 1367.3,686.918 1367.86,686.918 1368.42,686.918 1368.98,686.918 1369.54,686.918 1370.1,686.918 1370.66,686.918 1371.21,686.918 1371.77,686.918 1372.33,686.918 1372.89,686.918 1373.45,686.918 1374.01,686.918 1374.57,686.918 1375.13,686.918 1375.69,686.918 1376.25,686.918 1376.81,686.918 1377.37,686.918 1377.93,686.918 1378.49,686.918 1379.04,686.918 1379.6,686.918 1380.16,686.918 1380.72,686.918 1381.28,686.918 1381.84,686.918 1382.4,686.918 1382.96,686.918 1383.52,686.918 1384.08,686.918 1384.64,686.918 1385.2,686.918 1385.76,686.918 1386.31,686.918 1386.87,686.918 1387.43,686.918 1387.99,686.918 1388.55,686.918 1389.11,686.918 1389.67,686.918 1390.23,686.918 1390.79,686.918 1391.35,686.918 1391.91,686.918 1392.47,686.918 1393.03,686.918 1393.58,686.918 1394.14,686.918 1394.7,686.918 1395.26,686.918 1395.82,686.918 1396.38,686.918 1396.94,686.918 1397.5,686.918 1398.06,686.918 1398.62,686.918 1399.18,686.918 1399.74,686.918 1400.3,686.918 1400.86,686.918 1401.41,686.918 1401.97,686.918 1402.53,686.918 1403.09,686.918 1403.65,686.918 1404.21,686.918 1404.77,686.918 1405.33,686.918 1405.89,686.918 1406.45,686.918 1407.01,686.918 1407.57,686.918 1408.13,686.918 1408.68,686.918 1409.24,686.918 1409.8,686.918 1410.36,686.918 1410.92,686.918 1411.48,686.918 1412.04,686.918 1412.6,686.918 1413.16,686.918 1413.72,686.918 1414.28,686.918 1414.84,686.918 1415.4,686.918 1415.95,686.918 1416.51,686.918 1417.07,686.918 1417.63,686.918 1418.19,686.918 1418.75,686.918 1419.31,686.918 1419.87,686.918 1420.43,686.918 1420.99,686.918 1421.55,686.918 1422.11,686.918 1422.67,686.918 1423.23,686.918 1423.78,686.918 1424.34,686.918 1424.9,686.918 1425.46,686.918 1426.02,686.918 1426.58,686.918 1427.14,686.918 1427.7,686.918 1428.26,686.918 1428.82,686.918 1429.38,686.918 1429.94,686.918 1430.5,686.918 1431.05,686.918 1431.61,686.918 1432.17,686.918 1432.73,686.918 1433.29,686.918 1433.85,686.918 1434.41,686.918 1434.97,686.918 1435.53,686.918 1436.09,686.918 1436.65,686.918 1437.21,686.918 1437.77,686.918 1438.33,686.918 1438.88,686.918 1439.44,686.918 1440,686.918 1440.56,686.918 1441.12,686.918 1441.68,686.918 1442.24,686.918 1442.8,686.918 1443.36,686.918 1443.92,686.918 1444.48,686.918 1445.04,686.918 1445.6,686.918 1446.15,686.918 1446.71,686.918 1447.27,686.918 1447.83,686.918 1448.39,686.918 1448.95,686.918 1449.51,686.918 1450.07,686.918 1450.63,686.918 1451.19,686.918 1451.75,686.918 1452.31,686.918 1452.87,686.918 1453.42,686.918 1453.98,686.918 1454.54,686.918 1455.1,686.918 1455.66,686.918 1456.22,686.918 1456.78,686.918 1457.34,686.918 1457.9,686.918 1458.46,686.918 1459.02,686.918 1459.58,686.918 1460.14,686.918 1460.7,686.918 1461.25,686.918 1461.81,686.918 1462.37,686.918 1462.93,686.918 1463.49,686.918 1464.05,686.918 1464.61,686.918 1465.17,686.918 1465.73,686.918 1466.29,686.918 1466.85,686.918 1467.41,686.918 1467.97,686.918 1468.52,686.918 1469.08,686.918 1469.64,686.918 1470.2,686.918 1470.76,686.918 1471.32,686.918 1471.88,686.918 1472.44,686.918 1473,686.918 1473.56,686.918 1474.12,686.918 1474.68,686.918 1475.24,686.918 1475.79,686.918 1476.35,686.918 1476.91,686.918 1477.47,686.918 1478.03,686.918 1478.59,686.918 1479.15,686.918 1479.71,686.918 1480.27,686.918 1480.83,686.918 1481.39,686.918 1481.95,686.918 1482.51,686.918 1483.07,686.918 1483.62,686.918 1484.18,686.918 1484.74,686.918 1485.3,686.918 1485.86,686.918 1486.42,686.918 1486.98,686.918 1487.54,686.918 1488.1,686.918 1488.66,686.918 1489.22,686.918 1489.78,686.918 1490.34,686.918 1490.89,686.918 1491.45,686.918 1492.01,686.918 1492.57,686.918 1493.13,686.918 1493.69,686.918 1494.25,686.918 1494.81,686.918 1495.37,686.918 1495.93,686.918 1496.49,686.918 1497.05,686.918 1497.61,686.918 1498.16,686.918 1498.72,686.918 1499.28,686.918 1499.84,686.918 1500.4,686.918 1500.96,686.918 1501.52,686.918 1502.08,686.918 1502.64,686.918 1503.2,686.918 1503.76,686.918 1504.32,686.918 1504.88,686.918 1505.44,686.918 1505.99,686.918 1506.55,686.918 1507.11,686.918 1507.67,686.918 1508.23,686.918 1508.79,686.918 1509.35,686.918 1509.91,686.918 1510.47,686.918 1511.03,686.918 1511.59,686.918 1512.15,686.918 1512.71,686.918 1513.26,686.918 1513.82,686.918 1514.38,686.918 1514.94,686.918 1515.5,686.918 1516.06,686.918 1516.62,686.918 1517.18,686.918 1517.74,686.918 1518.3,686.918 1518.86,686.918 1519.42,686.918 1519.98,686.918 1520.53,686.918 1521.09,686.918 1521.65,686.918 1522.21,686.918 1522.77,686.918 1523.33,686.918 1523.89,686.918 1524.45,686.918 1525.01,686.918 1525.57,686.918 1526.13,686.918 1526.69,686.918 1527.25,686.918 1527.81,686.918 1528.36,686.918 1528.92,686.918 1529.48,686.918 1530.04,686.918 1530.6,686.918 1531.16,686.918 1531.72,686.918 1532.28,686.918 1532.84,686.918 1533.4,686.918 1533.96,686.918 1534.52,686.918 1535.08,686.918 1535.63,686.918 1536.19,686.918 1536.75,686.918 1537.31,686.918 1537.87,686.918 1538.43,686.918 1538.99,686.918 1539.55,686.918 1540.11,686.918 1540.67,686.918 1541.23,686.918 1541.79,686.918 1542.35,686.918 1542.9,686.918 1543.46,686.918 1544.02,686.918 1544.58,686.918 1545.14,686.918 1545.7,686.918 1546.26,686.918 1546.82,686.918 1547.38,686.918 1547.94,686.918 1548.5,686.918 1549.06,686.918 1549.62,686.918 1550.18,686.918 1550.73,686.918 1551.29,686.918 1551.85,686.918 1552.41,686.918 1552.97,686.918 1553.53,686.918 1554.09,686.918 1554.65,686.918 1555.21,686.918 1555.77,686.918 1556.33,686.918 1556.89,686.918 1557.45,686.918 1558,686.918 1558.56,686.918 1559.12,686.918 1559.68,686.918 1560.24,686.918 1560.8,686.918 1561.36,686.918 1561.92,686.918 1562.48,686.918 1563.04,686.918 1563.6,686.918 1564.16,686.918 1564.72,686.918 1565.28,686.918 1565.83,686.918 1566.39,686.918 1566.95,686.918 1567.51,686.918 1568.07,686.918 1568.63,686.918 1569.19,686.918 1569.75,686.918 1570.31,686.918 1570.87,686.918 1571.43,686.918 1571.99,686.918 1572.55,686.918 1573.1,686.918 1573.66,686.918 1574.22,686.918 1574.78,686.918 1575.34,686.918 1575.9,686.918 1576.46,686.918 1577.02,686.918 1577.58,686.918 1578.14,686.918 1578.7,686.918 1579.26,686.918 1579.82,686.918 1580.37,686.918 1580.93,686.918 1581.49,686.918 1582.05,686.918 1582.61,686.918 1583.17,686.918 1583.73,686.918 1584.29,686.918 1584.85,686.918 1585.41,686.918 1585.97,686.918 1586.53,686.918 1587.09,686.918 1587.65,686.918 1588.2,686.918 1588.76,686.918 1589.32,686.918 1589.88,686.918 1590.44,686.918 1591,686.918 1591.56,686.918 1592.12,686.918 1592.68,686.918 1593.24,686.918 1593.8,686.918 1594.36,686.918 1594.92,686.918 1595.47,686.918 1596.03,686.918 1596.59,686.918 1597.15,686.918 1597.71,686.918 1598.27,686.918 1598.83,686.918 1599.39,686.918 1599.95,686.918 1600.51,686.918 1601.07,686.918 1601.63,686.918 1602.19,686.918 1602.74,686.918 1603.3,686.918 1603.86,686.918 1604.42,686.918 1604.98,686.918 1605.54,686.918 1606.1,686.918 1606.66,686.918 1607.22,686.918 1607.78,686.918 1608.34,686.918 1608.9,686.918 1609.46,686.918 1610.02,686.918 1610.57,686.918 1611.13,686.918 1611.69,686.918 1612.25,686.918 1612.81,686.918 1613.37,686.918 1613.93,686.918 1614.49,686.918 1615.05,686.918 1615.61,686.918 1616.17,686.918 1616.73,686.918 1617.29,686.918 1617.84,686.918 1618.4,686.918 1618.96,686.918 1619.52,686.918 1620.08,686.918 1620.64,686.918 1621.2,686.918 1621.76,686.918 1622.32,686.918 1622.88,686.918 1623.44,686.918 1624,686.918 1624.56,686.918 1625.11,686.918 1625.67,686.918 1626.23,686.918 1626.79,686.918 1627.35,686.918 1627.91,686.918 1628.47,686.918 1629.03,686.918 1629.59,686.918 1630.15,686.918 1630.71,686.918 1631.27,686.918 1631.83,686.918 1632.39,686.918 1632.94,686.918 1633.5,686.918 1634.06,686.918 1634.62,686.918 1635.18,686.918 1635.74,686.918 1636.3,686.918 1636.86,686.918 1637.42,686.918 1637.98,686.918 1638.54,686.918 1639.1,686.918 1639.66,686.918 1640.21,686.918 1640.77,686.918 1641.33,686.918 1641.89,686.918 1642.45,686.918 1643.01,686.918 1643.57,686.918 1644.13,686.918 1644.69,686.918 1645.25,686.918 1645.81,686.918 1646.37,686.918 1646.93,686.918 1647.48,686.918 1648.04,686.918 1648.6,686.918 1649.16,686.918 1649.72,686.918 1650.28,686.918 1650.84,686.918 1651.4,686.918 1651.96,686.918 1652.52,686.918 1653.08,686.918 1653.64,686.918 1654.2,686.918 1654.76,686.918 1655.31,686.918 1655.87,686.918 1656.43,686.918 1656.99,686.918 1657.55,686.918 1658.11,686.918 1658.67,686.918 1659.23,686.918 1659.79,686.918 1660.35,686.918 1660.91,686.918 1661.47,686.918 1662.03,686.918 1662.58,686.918 1663.14,686.918 1663.7,686.918 1664.26,686.918 1664.82,686.918 1665.38,686.918 1665.94,686.918 1666.5,686.918 1667.06,686.918 1667.62,686.918 1668.18,686.918 1668.74,686.918 1669.3,686.918 1669.85,686.918 1670.41,686.918 1670.97,686.918 1671.53,686.918 1672.09,686.918 1672.65,686.918 1673.21,686.918 1673.77,686.918 1674.33,686.918 1674.89,686.918 1675.45,686.918 1676.01,686.918 1676.57,686.918 1677.13,686.918 1677.68,686.918 1678.24,686.918 1678.8,686.918 1679.36,686.918 1679.92,686.918 1680.48,686.918 1681.04,686.918 1681.6,686.918 1682.16,686.918 1682.72,686.918 1683.28,686.918 1683.84,686.918 1684.4,686.918 1684.95,686.918 1685.51,686.918 1686.07,686.918 1686.63,686.918 1687.19,686.918 1687.75,686.918 1688.31,686.918 1688.87,686.918 1689.43,686.918 1689.99,686.918 1690.55,686.918 1691.11,686.918 1691.67,686.918 1692.23,686.918 1692.78,686.918 1693.34,686.918 1693.9,686.918 1694.46,686.918 1695.02,686.918 1695.58,686.918 1696.14,686.918 1696.7,686.918 1697.26,686.918 1697.82,686.918 1698.38,686.918 1698.94,686.918 1699.5,686.918 1700.05,686.918 1700.61,686.918 1701.17,686.918 1701.73,686.918 1702.29,686.918 1702.85,686.918 1703.41,686.918 1703.97,686.918 1704.53,686.918 1705.09,686.918 1705.65,686.918 1706.21,686.918 1706.77,686.918 1707.32,686.918 1707.88,686.918 1708.44,686.918 1709,686.918 1709.56,686.918 1710.12,686.918 1710.68,686.918 1711.24,686.918 1711.8,686.918 1712.36,686.918 1712.92,686.918 1713.48,686.918 1714.04,686.918 1714.6,686.918 1715.15,686.918 1715.71,686.918 1716.27,686.918 1716.83,686.918 1717.39,686.918 1717.95,686.918 1718.51,686.918 1719.07,686.918 1719.63,686.918 1720.19,686.918 1720.75,686.918 1721.31,686.918 1721.87,686.918 1722.42,686.918 1722.98,686.918 1723.54,686.918 1724.1,686.918 1724.66,686.918 1725.22,686.918 1725.78,686.918 1726.34,686.918 1726.9,686.918 1727.46,686.918 1728.02,686.918 1728.58,686.918 1729.14,686.918 1729.69,686.918 1730.25,686.918 1730.81,686.918 1731.37,686.918 1731.93,686.918 1732.49,686.918 1733.05,686.918 1733.61,686.918 1734.17,686.918 1734.73,686.918 1735.29,686.918 1735.85,686.918 1736.41,686.918 1736.97,686.918 1737.52,686.918 1738.08,686.918 1738.64,686.918 1739.2,686.918 1739.76,686.918 1740.32,686.918 1740.88,686.918 1741.44,686.918 1742,686.918 1742.56,686.918 1743.12,686.918 1743.68,686.918 1744.24,686.918 1744.79,686.918 1745.35,686.918 1745.91,686.918 1746.47,686.918 1747.03,686.918 1747.59,686.918 1748.15,686.918 1748.71,686.918 1749.27,686.918 1749.83,686.918 1750.39,686.918 1750.95,686.918 1751.51,686.918 1752.06,686.918 1752.62,686.918 1753.18,686.918 1753.74,686.918 1754.3,686.918 1754.86,686.918 1755.42,686.918 1755.98,686.918 1756.54,686.918 1757.1,686.918 1757.66,686.918 1758.22,686.918 1758.78,686.918 1759.34,686.918 1759.89,686.918 1760.45,686.918 1761.01,686.918 1761.57,686.918 1762.13,686.918 1762.69,686.918 1763.25,686.918 1763.81,686.918 1764.37,686.918 1764.93,686.918 1765.49,686.918 1766.05,686.918 1766.61,686.918 1767.16,686.918 1767.72,686.918 1768.28,686.918 1768.84,686.918 1769.4,686.918 1769.96,686.918 1770.52,686.918 1771.08,686.918 1771.64,686.918 1772.2,686.918 1772.76,686.918 1773.32,686.918 1773.88,686.918 1774.43,686.918 1774.99,686.918 1775.55,686.918 1776.11,686.918 1776.67,686.918 1777.23,686.918 1777.79,686.918 1778.35,686.918 1778.91,686.918 1779.47,686.918 1780.03,686.918 1780.59,686.918 1781.15,686.918 1781.71,686.918 1782.26,686.918 1782.82,686.918 1783.38,686.918 1783.94,686.918 1784.5,686.918 1785.06,686.918 1785.62,686.918 1786.18,686.918 1786.74,686.918 1787.3,686.918 1787.86,686.918 1788.42,686.918 1788.98,686.918 1789.53,686.918 1790.09,686.918 1790.65,686.918 1791.21,686.918 1791.77,686.918 1792.33,686.918 1792.89,686.918 1793.45,686.918 1794.01,686.918 1794.57,686.918 1795.13,686.918 1795.69,686.918 1796.25,686.918 1796.8,686.918 1797.36,686.918 1797.92,686.918 1798.48,686.918 1799.04,686.918 1799.6,686.918 1800.16,686.918 1800.72,686.918 1801.28,686.918 1801.84,686.918 1802.4,686.918 1802.96,686.918 1803.52,686.918 1804.08,686.918 1804.63,686.918 1805.19,686.918 1805.75,686.918 1806.31,686.918 1806.87,686.918 1807.43,686.918 1807.99,686.918 1808.55,686.918 1809.11,686.918 1809.67,686.918 1810.23,686.918 1810.79,686.918 1811.35,686.918 1811.9,686.918 1812.46,686.918 1813.02,686.918 1813.58,686.918 1814.14,686.918 1814.7,686.918 1815.26,686.918 1815.82,686.918 1816.38,686.918 1816.94,686.918 1817.5,686.918 1818.06,686.918 1818.62,686.918 1819.18,686.918 1819.73,686.918 1820.29,686.918 1820.85,686.918 1821.41,686.918 1821.97,686.918 1822.53,686.918 1823.09,686.918 1823.65,686.918 1824.21,686.918 1824.77,686.918 1825.33,686.918 1825.89,686.918 1826.45,686.918 1827,686.918 1827.56,686.918 1828.12,686.918 1828.68,686.918 1829.24,686.918 1829.8,686.918 1830.36,686.918 1830.92,686.918 1831.48,686.918 1832.04,686.918 1832.6,686.918 1833.16,686.918 1833.72,686.918 1834.27,686.918 1834.83,686.918 1835.39,686.918 1835.95,686.918 1836.51,686.918 1837.07,686.918 1837.63,686.918 1838.19,686.918 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 684.395 L720.806 684.395 L721.365 684.395 L721.924 684.395 L722.484 684.395 L723.043 684.395 L723.602 684.395 L724.161 684.395 L724.721 684.395 L725.28 684.395 L725.839 684.395 L726.398 684.395 L726.958 684.395 L727.517 684.395 L728.076 684.395 L728.635 684.395 L729.195 684.395 L729.754 684.395 L730.313 684.395 L730.872 684.395 L731.432 684.395 L731.991 684.395 L732.55 684.395 L733.109 684.395 L733.669 684.395 L734.228 684.395 L734.787 684.395 L735.346 684.395 L735.906 684.395 L736.465 684.395 L737.024 684.395 L737.583 684.395 L738.143 684.395 L738.702 684.395 L739.261 684.395 L739.82 684.395 L740.38 684.395 L740.939 684.395 L741.498 684.395 L742.057 684.395 L742.617 684.395 L743.176 684.395 L743.735 684.395 L744.294 684.395 L744.854 684.395 L745.413 684.395 L745.972 684.395 L746.531 684.395 L747.091 684.395 L747.65 684.395 L748.209 684.395 L748.768 684.395 L749.328 684.395 L749.887 684.395 L750.446 684.395 L751.005 684.395 L751.565 684.395 L752.124 684.395 L752.683 684.395 L753.242 684.395 L753.802 684.395 L754.361 684.395 L754.92 684.395 L755.479 684.395 L756.039 684.395 L756.598 684.395 L757.157 684.395 L757.716 684.395 L758.276 684.395 L758.835 684.395 L759.394 684.395 L759.953 684.395 L760.513 684.395 L761.072 684.395 L761.631 684.395 L762.19 684.395 L762.75 684.395 L763.309 684.395 L763.868 684.395 L764.427 684.395 L764.987 684.395 L765.546 684.395 L766.105 684.395 L766.664 684.395 L767.224 684.395 L767.783 684.395 L768.342 684.395 L768.901 684.395 L769.461 684.395 L770.02 684.395 L770.579 684.395 L771.138 684.395 L771.698 684.395 L772.257 684.395 L772.816 684.395 L773.375 684.395 L773.935 684.395 L774.494 684.395 L775.053 684.395 L775.612 684.395 L776.172 684.395 L776.731 684.395 L777.29 684.395 L777.849 684.395 L778.409 684.395 L778.968 684.395 L779.527 684.395 L780.086 684.395 L780.646 684.395 L781.205 684.395 L781.764 684.395 L782.323 684.395 L782.883 684.395 L783.442 684.395 L784.001 684.395 L784.56 684.395 L785.12 684.395 L785.679 684.395 L786.238 684.395 L786.797 684.395 L787.357 684.395 L787.916 684.395 L788.475 684.395 L789.034 684.395 L789.594 684.395 L790.153 684.395 L790.712 684.395 L791.271 684.395 L791.831 684.395 L792.39 684.395 L792.949 684.395 L793.508 684.395 L794.068 684.395 L794.627 684.395 L795.186 684.395 L795.745 684.395 L796.305 684.395 L796.864 684.395 L797.423 684.395 L797.982 684.395 L798.542 684.395 L799.101 684.395 L799.66 684.395 L800.219 684.395 L800.779 684.395 L801.338 684.395 L801.897 684.395 L802.456 684.395 L803.016 684.395 L803.575 684.395 L804.134 684.395 L804.693 684.395 L805.253 684.395 L805.812 684.395 L806.371 684.395 L806.931 684.395 L807.49 684.395 L808.049 684.395 L808.608 684.395 L809.168 684.395 L809.727 684.395 L810.286 684.395 L810.845 684.395 L811.405 684.395 L811.964 684.395 L812.523 684.395 L813.082 684.395 L813.642 684.395 L814.201 684.395 L814.76 684.395 L815.319 684.395 L815.879 684.395 L816.438 684.395 L816.997 684.395 L817.556 684.395 L818.116 684.395 L818.675 684.395 L819.234 684.395 L819.793 684.395 L820.353 684.395 L820.912 684.395 L821.471 684.395 L822.03 684.395 L822.59 684.395 L823.149 684.395 L823.708 684.395 L824.267 684.395 L824.827 684.395 L825.386 684.395 L825.945 684.395 L826.504 684.395 L827.064 684.395 L827.623 684.395 L828.182 684.395 L828.741 684.395 L829.301 684.395 L829.86 684.395 L830.419 684.395 L830.978 684.395 L831.538 684.395 L832.097 684.395 L832.656 684.395 L833.215 684.395 L833.775 684.395 L834.334 684.395 L834.893 684.395 L835.452 684.395 L836.012 684.395 L836.571 684.395 L837.13 684.395 L837.689 684.395 L838.249 684.395 L838.808 684.395 L839.367 684.395 L839.926 684.395 L840.486 684.395 L841.045 684.395 L841.604 684.395 L842.163 684.395 L842.723 684.395 L843.282 684.395 L843.841 684.395 L844.4 684.395 L844.96 684.395 L845.519 684.395 L846.078 684.395 L846.637 684.395 L847.197 684.395 L847.756 684.395 L848.315 684.395 L848.874 684.395 L849.434 684.395 L849.993 684.395 L850.552 684.395 L851.111 684.395 L851.671 684.395 L852.23 684.395 L852.789 684.395 L853.348 684.395 L853.908 684.395 L854.467 684.395 L855.026 684.395 L855.585 684.395 L856.145 684.395 L856.704 684.395 L857.263 684.395 L857.822 684.395 L858.382 684.395 L858.941 684.395 L859.5 684.395 L860.059 684.395 L860.619 684.395 L861.178 684.395 L861.737 684.395 L862.296 684.395 L862.856 684.395 L863.415 684.395 L863.974 684.395 L864.533 684.395 L865.093 684.395 L865.652 684.395 L866.211 684.395 L866.77 684.395 L867.33 684.395 L867.889 684.395 L868.448 684.395 L869.007 684.395 L869.567 684.395 L870.126 684.395 L870.685 684.395 L871.244 684.395 L871.804 684.395 L872.363 684.395 L872.922 684.395 L873.481 684.395 L874.041 684.395 L874.6 684.395 L875.159 684.395 L875.718 684.395 L876.278 684.395 L876.837 684.395 L877.396 684.395 L877.955 684.395 L878.515 684.395 L879.074 684.395 L879.633 684.395 L880.192 684.395 L880.752 684.395 L881.311 684.395 L881.87 684.395 L882.429 684.395 L882.989 684.395 L883.548 684.395 L884.107 684.395 L884.666 684.395 L885.226 684.395 L885.785 684.395 L886.344 684.395 L886.903 684.395 L887.463 684.395 L888.022 684.395 L888.581 684.395 L889.14 684.395 L889.7 684.395 L890.259 684.395 L890.818 684.395 L891.377 684.395 L891.937 684.395 L892.496 684.395 L893.055 684.395 L893.614 684.395 L894.174 684.395 L894.733 684.395 L895.292 684.395 L895.851 684.395 L896.411 684.395 L896.97 684.395 L897.529 684.395 L898.088 684.395 L898.648 684.395 L899.207 684.395 L899.766 684.395 L900.325 684.395 L900.885 684.395 L901.444 684.395 L902.003 684.395 L902.562 684.395 L903.122 684.395 L903.681 684.395 L904.24 684.395 L904.799 684.395 L905.359 684.395 L905.918 684.395 L906.477 684.395 L907.036 684.395 L907.596 684.395 L908.155 684.395 L908.714 684.395 L909.273 684.395 L909.833 684.395 L910.392 684.395 L910.951 684.395 L911.51 684.395 L912.07 684.395 L912.629 684.395 L913.188 684.395 L913.747 684.395 L914.307 684.395 L914.866 684.395 L915.425 684.395 L915.984 684.395 L916.544 684.395 L917.103 684.395 L917.662 684.395 L918.221 684.395 L918.781 684.395 L919.34 684.395 L919.899 684.395 L920.458 684.395 L921.018 684.395 L921.577 684.395 L922.136 684.395 L922.695 684.395 L923.255 684.395 L923.814 684.395 L924.373 684.395 L924.932 684.395 L925.492 684.395 L926.051 684.395 L926.61 684.395 L927.169 684.395 L927.729 684.395 L928.288 684.395 L928.847 684.395 L929.406 684.395 L929.966 684.395 L930.525 684.395 L931.084 684.395 L931.644 684.395 L932.203 684.395 L932.762 684.395 L933.321 684.395 L933.881 684.395 L934.44 684.395 L934.999 684.395 L935.558 684.395 L936.118 684.395 L936.677 684.395 L937.236 684.395 L937.795 684.395 L938.355 684.395 L938.914 684.395 L939.473 684.395 L940.032 684.395 L940.592 684.395 L941.151 684.395 L941.71 684.395 L942.269 684.395 L942.829 684.395 L943.388 684.395 L943.947 684.395 L944.506 684.395 L945.066 684.395 L945.625 684.395 L946.184 684.395 L946.743 684.395 L947.303 684.395 L947.862 684.395 L948.421 684.395 L948.98 684.395 L949.54 684.395 L950.099 684.395 L950.658 684.395 L951.217 684.395 L951.777 684.395 L952.336 684.395 L952.895 684.395 L953.454 684.395 L954.014 684.395 L954.573 684.395 L955.132 684.395 L955.691 684.395 L956.251 684.395 L956.81 684.395 L957.369 684.395 L957.928 684.395 L958.488 684.395 L959.047 684.395 L959.606 684.395 L960.165 684.395 L960.725 684.395 L961.284 684.395 L961.843 684.395 L962.402 684.395 L962.962 684.395 L963.521 684.395 L964.08 684.395 L964.639 684.395 L965.199 684.395 L965.758 684.395 L966.317 684.395 L966.876 684.395 L967.436 684.395 L967.995 684.395 L968.554 684.395 L969.113 684.395 L969.673 684.395 L970.232 684.395 L970.791 684.395 L971.35 684.395 L971.91 684.395 L972.469 684.395 L973.028 684.395 L973.587 684.395 L974.147 684.395 L974.706 684.395 L975.265 684.395 L975.824 684.395 L976.384 684.395 L976.943 684.395 L977.502 684.395 L978.061 684.395 L978.621 684.395 L979.18 684.395 L979.739 684.395 L980.298 684.395 L980.858 684.395 L981.417 684.395 L981.976 684.395 L982.535 684.395 L983.095 684.395 L983.654 684.395 L984.213 684.395 L984.772 684.395 L985.332 684.395 L985.891 684.395 L986.45 684.395 L987.009 684.395 L987.569 684.395 L988.128 684.395 L988.687 684.395 L989.246 684.395 L989.806 684.395 L990.365 684.395 L990.924 684.395 L991.483 684.395 L992.043 684.395 L992.602 684.395 L993.161 684.395 L993.72 684.395 L994.28 684.395 L994.839 684.395 L995.398 684.395 L995.957 684.395 L996.517 684.395 L997.076 684.395 L997.635 684.395 L998.194 684.395 L998.754 684.395 L999.313 684.395 L999.872 684.395 L1000.43 684.395 L1000.99 684.395 L1001.55 684.395 L1002.11 684.395 L1002.67 684.395 L1003.23 684.395 L1003.79 684.395 L1004.35 684.395 L1004.91 684.395 L1005.46 684.395 L1006.02 684.395 L1006.58 684.395 L1007.14 684.395 L1007.7 684.395 L1008.26 684.395 L1008.82 684.395 L1009.38 684.395 L1009.94 684.395 L1010.5 684.395 L1011.06 684.395 L1011.62 684.395 L1012.18 684.395 L1012.73 684.395 L1013.29 684.395 L1013.85 684.395 L1014.41 684.395 L1014.97 684.395 L1015.53 684.395 L1016.09 684.395 L1016.65 684.395 L1017.21 684.395 L1017.77 684.395 L1018.33 684.395 L1018.89 684.395 L1019.45 684.395 L1020.01 684.395 L1020.56 684.395 L1021.12 684.395 L1021.68 684.395 L1022.24 684.395 L1022.8 684.395 L1023.36 684.395 L1023.92 684.395 L1024.48 684.395 L1025.04 684.395 L1025.6 684.395 L1026.16 684.395 L1026.72 684.395 L1027.28 684.395 L1027.83 684.395 L1028.39 684.395 L1028.95 684.395 L1029.51 684.395 L1030.07 684.395 L1030.63 684.395 L1031.19 684.395 L1031.75 684.395 L1032.31 684.395 L1032.87 684.395 L1033.43 684.395 L1033.99 684.395 L1034.55 684.395 L1035.1 684.395 L1035.66 684.395 L1036.22 684.395 L1036.78 684.395 L1037.34 684.395 L1037.9 684.395 L1038.46 684.395 L1039.02 684.395 L1039.58 684.395 L1040.14 684.395 L1040.7 684.395 L1041.26 684.395 L1041.82 684.395 L1042.38 684.395 L1042.93 684.395 L1043.49 684.395 L1044.05 684.395 L1044.61 684.395 L1045.17 684.395 L1045.73 684.395 L1046.29 684.395 L1046.85 684.395 L1047.41 684.395 L1047.97 684.395 L1048.53 684.395 L1049.09 684.395 L1049.65 684.395 L1050.2 684.395 L1050.76 684.395 L1051.32 684.395 L1051.88 684.395 L1052.44 684.395 L1053 684.395 L1053.56 684.395 L1054.12 684.395 L1054.68 684.395 L1055.24 684.395 L1055.8 684.395 L1056.36 684.395 L1056.92 684.395 L1057.48 684.395 L1058.03 684.395 L1058.59 684.395 L1059.15 684.395 L1059.71 684.395 L1060.27 684.395 L1060.83 684.395 L1061.39 684.395 L1061.95 684.395 L1062.51 684.395 L1063.07 684.395 L1063.63 684.395 L1064.19 684.395 L1064.75 684.395 L1065.3 684.395 L1065.86 684.395 L1066.42 684.395 L1066.98 684.395 L1067.54 684.395 L1068.1 684.395 L1068.66 684.395 L1069.22 684.395 L1069.78 684.395 L1070.34 684.395 L1070.9 684.395 L1071.46 684.395 L1072.02 684.395 L1072.57 684.395 L1073.13 684.395 L1073.69 684.395 L1074.25 684.395 L1074.81 684.395 L1075.37 684.395 L1075.93 684.395 L1076.49 684.395 L1077.05 684.395 L1077.61 684.395 L1078.17 684.395 L1078.73 684.395 L1079.29 684.395 L1079.85 684.395 L1080.4 684.395 L1080.96 684.395 L1081.52 684.395 L1082.08 684.395 L1082.64 684.395 L1083.2 684.395 L1083.76 684.395 L1084.32 684.395 L1084.88 684.395 L1085.44 684.395 L1086 684.395 L1086.56 684.395 L1087.12 684.395 L1087.67 684.395 L1088.23 684.395 L1088.79 684.395 L1089.35 684.395 L1089.91 684.395 L1090.47 684.395 L1091.03 684.395 L1091.59 684.395 L1092.15 684.395 L1092.71 684.395 L1093.27 684.395 L1093.83 684.395 L1094.39 684.395 L1094.94 684.395 L1095.5 684.395 L1096.06 684.395 L1096.62 684.395 L1097.18 684.395 L1097.74 684.395 L1098.3 684.395 L1098.86 684.395 L1099.42 684.395 L1099.98 684.395 L1100.54 684.395 L1101.1 684.395 L1101.66 684.395 L1102.22 684.395 L1102.77 684.395 L1103.33 684.395 L1103.89 684.395 L1104.45 684.395 L1105.01 684.395 L1105.57 684.395 L1106.13 684.395 L1106.69 684.395 L1107.25 684.395 L1107.81 684.395 L1108.37 684.395 L1108.93 684.395 L1109.49 684.395 L1110.04 684.395 L1110.6 684.395 L1111.16 684.395 L1111.72 684.395 L1112.28 684.395 L1112.84 684.395 L1113.4 684.395 L1113.96 684.395 L1114.52 684.395 L1115.08 684.395 L1115.64 684.395 L1116.2 684.395 L1116.76 684.395 L1117.31 684.395 L1117.87 684.395 L1118.43 684.395 L1118.99 684.395 L1119.55 684.395 L1120.11 684.395 L1120.67 684.395 L1121.23 684.395 L1121.79 684.395 L1122.35 684.395 L1122.91 684.395 L1123.47 684.395 L1124.03 684.395 L1124.59 684.395 L1125.14 684.395 L1125.7 684.395 L1126.26 684.395 L1126.82 684.395 L1127.38 684.395 L1127.94 684.395 L1128.5 684.395 L1129.06 684.395 L1129.62 684.395 L1130.18 684.395 L1130.74 684.395 L1131.3 684.395 L1131.86 684.395 L1132.41 684.395 L1132.97 684.395 L1133.53 684.395 L1134.09 684.395 L1134.65 684.395 L1135.21 684.395 L1135.77 684.395 L1136.33 684.395 L1136.89 684.395 L1137.45 684.395 L1138.01 684.395 L1138.57 684.395 L1139.13 684.395 L1139.68 684.395 L1140.24 684.395 L1140.8 684.395 L1141.36 684.395 L1141.92 684.395 L1142.48 684.395 L1143.04 684.395 L1143.6 684.395 L1144.16 684.395 L1144.72 684.395 L1145.28 684.395 L1145.84 684.395 L1146.4 684.395 L1146.96 684.395 L1147.51 684.395 L1148.07 684.395 L1148.63 684.395 L1149.19 684.395 L1149.75 684.395 L1150.31 684.395 L1150.87 684.395 L1151.43 684.395 L1151.99 684.395 L1152.55 684.395 L1153.11 684.395 L1153.67 684.395 L1154.23 684.395 L1154.78 684.395 L1155.34 684.395 L1155.9 684.395 L1156.46 684.395 L1157.02 684.395 L1157.58 684.395 L1158.14 684.395 L1158.7 684.395 L1159.26 684.395 L1159.82 684.395 L1160.38 684.395 L1160.94 684.395 L1161.5 684.395 L1162.05 684.395 L1162.61 684.395 L1163.17 684.395 L1163.73 684.395 L1164.29 684.395 L1164.85 684.395 L1165.41 684.395 L1165.97 684.395 L1166.53 684.395 L1167.09 684.395 L1167.65 684.395 L1168.21 684.395 L1168.77 684.395 L1169.33 684.395 L1169.88 684.395 L1170.44 684.395 L1171 684.395 L1171.56 684.395 L1172.12 684.395 L1172.68 684.395 L1173.24 684.395 L1173.8 684.395 L1174.36 684.395 L1174.92 684.395 L1175.48 684.395 L1176.04 684.395 L1176.6 684.395 L1177.15 684.395 L1177.71 684.395 L1178.27 684.395 L1178.83 684.395 L1179.39 684.395 L1179.95 684.395 L1180.51 684.395 L1181.07 684.395 L1181.63 684.395 L1182.19 684.395 L1182.75 684.395 L1183.31 684.395 L1183.87 684.395 L1184.43 684.395 L1184.98 684.395 L1185.54 684.395 L1186.1 684.395 L1186.66 684.395 L1187.22 684.395 L1187.78 684.395 L1188.34 684.395 L1188.9 684.395 L1189.46 684.395 L1190.02 684.395 L1190.58 684.395 L1191.14 684.395 L1191.7 684.395 L1192.25 684.395 L1192.81 684.395 L1193.37 684.395 L1193.93 684.395 L1194.49 684.395 L1195.05 684.395 L1195.61 684.395 L1196.17 684.395 L1196.73 684.395 L1197.29 684.395 L1197.85 684.395 L1198.41 684.395 L1198.97 684.395 L1199.52 684.395 L1200.08 684.395 L1200.64 684.395 L1201.2 684.395 L1201.76 684.395 L1202.32 684.395 L1202.88 684.395 L1203.44 684.395 L1204 684.395 L1204.56 684.395 L1205.12 684.395 L1205.68 684.395 L1206.24 684.395 L1206.8 684.395 L1207.35 684.395 L1207.91 684.395 L1208.47 684.395 L1209.03 684.395 L1209.59 684.395 L1210.15 684.395 L1210.71 684.395 L1211.27 684.395 L1211.83 684.395 L1212.39 684.395 L1212.95 684.395 L1213.51 684.395 L1214.07 684.395 L1214.62 684.395 L1215.18 684.395 L1215.74 684.395 L1216.3 684.395 L1216.86 684.395 L1217.42 684.395 L1217.98 684.395 L1218.54 684.395 L1219.1 684.395 L1219.66 684.395 L1220.22 684.395 L1220.78 684.395 L1221.34 684.395 L1221.89 684.395 L1222.45 684.395 L1223.01 684.395 L1223.57 684.395 L1224.13 684.395 L1224.69 684.395 L1225.25 684.395 L1225.81 684.395 L1226.37 684.395 L1226.93 684.395 L1227.49 684.395 L1228.05 684.395 L1228.61 684.395 L1229.17 684.395 L1229.72 684.395 L1230.28 684.395 L1230.84 684.395 L1231.4 684.395 L1231.96 684.395 L1232.52 684.395 L1233.08 684.395 L1233.64 684.395 L1234.2 684.395 L1234.76 684.395 L1235.32 684.395 L1235.88 684.395 L1236.44 684.395 L1236.99 684.395 L1237.55 684.395 L1238.11 684.395 L1238.67 684.395 L1239.23 684.395 L1239.79 684.395 L1240.35 684.395 L1240.91 684.395 L1241.47 684.395 L1242.03 684.395 L1242.59 684.395 L1243.15 684.395 L1243.71 684.395 L1244.26 684.395 L1244.82 684.395 L1245.38 684.395 L1245.94 684.395 L1246.5 684.395 L1247.06 684.395 L1247.62 684.395 L1248.18 684.395 L1248.74 684.395 L1249.3 684.395 L1249.86 684.395 L1250.42 684.395 L1250.98 684.395 L1251.54 684.395 L1252.09 684.395 L1252.65 684.395 L1253.21 684.395 L1253.77 684.395 L1254.33 684.395 L1254.89 684.395 L1255.45 684.395 L1256.01 684.395 L1256.57 684.395 L1257.13 684.395 L1257.69 684.395 L1258.25 684.395 L1258.81 684.395 L1259.36 684.395 L1259.92 684.395 L1260.48 684.395 L1261.04 684.395 L1261.6 684.395 L1262.16 684.395 L1262.72 684.395 L1263.28 684.395 L1263.84 684.395 L1264.4 684.395 L1264.96 684.395 L1265.52 684.395 L1266.08 684.395 L1266.63 684.395 L1267.19 684.395 L1267.75 684.395 L1268.31 684.395 L1268.87 684.395 L1269.43 684.395 L1269.99 684.395 L1270.55 684.395 L1271.11 684.395 L1271.67 684.395 L1272.23 684.395 L1272.79 684.395 L1273.35 684.395 L1273.91 684.395 L1274.46 684.395 L1275.02 684.395 L1275.58 684.395 L1276.14 684.395 L1276.7 684.395 L1277.26 684.395 L1277.82 684.395 L1278.38 684.395 L1278.94 684.395 L1279.5 684.395 L1280.06 684.395 L1280.62 684.395 L1281.18 684.395 L1281.73 684.395 L1282.29 684.395 L1282.85 684.395 L1283.41 684.395 L1283.97 684.395 L1284.53 684.395 L1285.09 684.395 L1285.65 684.395 L1286.21 684.395 L1286.77 684.395 L1287.33 684.395 L1287.89 684.395 L1288.45 684.395 L1289 684.395 L1289.56 684.395 L1290.12 684.395 L1290.68 684.395 L1291.24 684.395 L1291.8 684.395 L1292.36 684.395 L1292.92 684.395 L1293.48 684.395 L1294.04 684.395 L1294.6 684.395 L1295.16 684.395 L1295.72 684.395 L1296.28 684.395 L1296.83 684.395 L1297.39 684.395 L1297.95 684.395 L1298.51 684.395 L1299.07 684.395 L1299.63 684.395 L1300.19 684.395 L1300.75 684.395 L1301.31 684.395 L1301.87 684.395 L1302.43 684.395 L1302.99 684.395 L1303.55 684.395 L1304.1 684.395 L1304.66 684.395 L1305.22 684.395 L1305.78 684.395 L1306.34 684.395 L1306.9 684.395 L1307.46 684.395 L1308.02 684.395 L1308.58 684.395 L1309.14 684.395 L1309.7 684.395 L1310.26 684.395 L1310.82 684.395 L1311.38 684.395 L1311.93 684.395 L1312.49 684.395 L1313.05 684.395 L1313.61 684.395 L1314.17 684.395 L1314.73 684.395 L1315.29 684.395 L1315.85 684.395 L1316.41 684.395 L1316.97 684.395 L1317.53 684.395 L1318.09 684.395 L1318.65 684.395 L1319.2 684.395 L1319.76 684.395 L1320.32 684.395 L1320.88 684.395 L1321.44 684.395 L1322 684.395 L1322.56 684.395 L1323.12 684.395 L1323.68 684.395 L1324.24 684.395 L1324.8 684.395 L1325.36 684.395 L1325.92 684.395 L1326.47 684.395 L1327.03 684.395 L1327.59 684.395 L1328.15 684.395 L1328.71 684.395 L1329.27 684.395 L1329.83 684.395 L1330.39 684.395 L1330.95 684.395 L1331.51 684.395 L1332.07 684.395 L1332.63 684.395 L1333.19 684.395 L1333.75 684.395 L1334.3 684.395 L1334.86 684.395 L1335.42 684.395 L1335.98 684.395 L1336.54 684.395 L1337.1 684.395 L1337.66 684.395 L1338.22 684.395 L1338.78 684.395 L1339.34 684.395 L1339.9 684.395 L1340.46 684.395 L1341.02 684.395 L1341.57 684.395 L1342.13 684.395 L1342.69 684.395 L1343.25 684.395 L1343.81 684.395 L1344.37 684.395 L1344.93 684.395 L1345.49 684.395 L1346.05 684.395 L1346.61 684.395 L1347.17 684.395 L1347.73 684.395 L1348.29 684.395 L1348.84 684.395 L1349.4 684.395 L1349.96 684.395 L1350.52 684.395 L1351.08 684.395 L1351.64 684.395 L1352.2 684.395 L1352.76 684.395 L1353.32 684.395 L1353.88 684.395 L1354.44 684.395 L1355 684.395 L1355.56 684.395 L1356.12 684.395 L1356.67 684.395 L1357.23 684.395 L1357.79 684.395 L1358.35 684.395 L1358.91 684.395 L1359.47 684.395 L1360.03 684.395 L1360.59 684.395 L1361.15 684.395 L1361.71 684.395 L1362.27 684.395 L1362.83 684.395 L1363.39 684.395 L1363.94 684.395 L1364.5 684.395 L1365.06 684.395 L1365.62 684.395 L1366.18 684.395 L1366.74 684.395 L1367.3 684.395 L1367.86 684.395 L1368.42 684.395 L1368.98 684.395 L1369.54 684.395 L1370.1 684.395 L1370.66 684.395 L1371.21 684.395 L1371.77 684.395 L1372.33 684.395 L1372.89 684.395 L1373.45 684.395 L1374.01 684.395 L1374.57 684.395 L1375.13 684.395 L1375.69 684.395 L1376.25 684.395 L1376.81 684.395 L1377.37 684.395 L1377.93 684.395 L1378.49 684.395 L1379.04 684.395 L1379.6 684.395 L1380.16 684.395 L1380.72 684.395 L1381.28 684.395 L1381.84 684.395 L1382.4 684.395 L1382.96 684.395 L1383.52 684.395 L1384.08 684.395 L1384.64 684.395 L1385.2 684.395 L1385.76 684.395 L1386.31 684.395 L1386.87 684.395 L1387.43 684.395 L1387.99 684.395 L1388.55 684.395 L1389.11 684.395 L1389.67 684.395 L1390.23 684.395 L1390.79 684.395 L1391.35 684.395 L1391.91 684.395 L1392.47 684.395 L1393.03 684.395 L1393.58 684.395 L1394.14 684.395 L1394.7 684.395 L1395.26 684.395 L1395.82 684.395 L1396.38 684.395 L1396.94 684.395 L1397.5 684.395 L1398.06 684.395 L1398.62 684.395 L1399.18 684.395 L1399.74 684.395 L1400.3 684.395 L1400.86 684.395 L1401.41 684.395 L1401.97 684.395 L1402.53 684.395 L1403.09 684.395 L1403.65 684.395 L1404.21 684.395 L1404.77 684.395 L1405.33 684.395 L1405.89 684.395 L1406.45 684.395 L1407.01 684.395 L1407.57 684.395 L1408.13 684.395 L1408.68 684.395 L1409.24 684.395 L1409.8 684.395 L1410.36 684.395 L1410.92 684.395 L1411.48 684.395 L1412.04 684.395 L1412.6 684.395 L1413.16 684.395 L1413.72 684.395 L1414.28 684.395 L1414.84 684.395 L1415.4 684.395 L1415.95 684.395 L1416.51 684.395 L1417.07 684.395 L1417.63 684.395 L1418.19 684.395 L1418.75 684.395 L1419.31 684.395 L1419.87 684.395 L1420.43 684.395 L1420.99 684.395 L1421.55 684.395 L1422.11 684.395 L1422.67 684.395 L1423.23 684.395 L1423.78 684.395 L1424.34 684.395 L1424.9 684.395 L1425.46 684.395 L1426.02 684.395 L1426.58 684.395 L1427.14 684.395 L1427.7 684.395 L1428.26 684.395 L1428.82 684.395 L1429.38 684.395 L1429.94 684.395 L1430.5 684.395 L1431.05 684.395 L1431.61 684.395 L1432.17 684.395 L1432.73 684.395 L1433.29 684.395 L1433.85 684.395 L1434.41 684.395 L1434.97 684.395 L1435.53 684.395 L1436.09 684.395 L1436.65 684.395 L1437.21 684.395 L1437.77 684.395 L1438.33 684.395 L1438.88 684.395 L1439.44 684.395 L1440 684.395 L1440.56 684.395 L1441.12 684.395 L1441.68 684.395 L1442.24 684.395 L1442.8 684.395 L1443.36 684.395 L1443.92 684.395 L1444.48 684.395 L1445.04 684.395 L1445.6 684.395 L1446.15 684.395 L1446.71 684.395 L1447.27 684.395 L1447.83 684.395 L1448.39 684.395 L1448.95 684.395 L1449.51 684.395 L1450.07 684.395 L1450.63 684.395 L1451.19 684.395 L1451.75 684.395 L1452.31 684.395 L1452.87 684.395 L1453.42 684.395 L1453.98 684.395 L1454.54 684.395 L1455.1 684.395 L1455.66 684.395 L1456.22 684.395 L1456.78 684.395 L1457.34 684.395 L1457.9 684.395 L1458.46 684.395 L1459.02 684.395 L1459.58 684.395 L1460.14 684.395 L1460.7 684.395 L1461.25 684.395 L1461.81 684.395 L1462.37 684.395 L1462.93 684.395 L1463.49 684.395 L1464.05 684.395 L1464.61 684.395 L1465.17 684.395 L1465.73 684.395 L1466.29 684.395 L1466.85 684.395 L1467.41 684.395 L1467.97 684.395 L1468.52 684.395 L1469.08 684.395 L1469.64 684.395 L1470.2 684.395 L1470.76 684.395 L1471.32 684.395 L1471.88 684.395 L1472.44 684.395 L1473 684.395 L1473.56 684.395 L1474.12 684.395 L1474.68 684.395 L1475.24 684.395 L1475.79 684.395 L1476.35 684.395 L1476.91 684.395 L1477.47 684.395 L1478.03 684.395 L1478.59 684.395 L1479.15 684.395 L1479.71 684.395 L1480.27 684.395 L1480.83 684.395 L1481.39 684.395 L1481.95 684.395 L1482.51 684.395 L1483.07 684.395 L1483.62 684.395 L1484.18 684.395 L1484.74 684.395 L1485.3 684.395 L1485.86 684.395 L1486.42 684.395 L1486.98 684.395 L1487.54 684.395 L1488.1 684.395 L1488.66 684.395 L1489.22 684.395 L1489.78 684.395 L1490.34 684.395 L1490.89 684.395 L1491.45 684.395 L1492.01 684.395 L1492.57 684.395 L1493.13 684.395 L1493.69 684.395 L1494.25 684.395 L1494.81 684.395 L1495.37 684.395 L1495.93 684.395 L1496.49 684.395 L1497.05 684.395 L1497.61 684.395 L1498.16 684.395 L1498.72 684.395 L1499.28 684.395 L1499.84 684.395 L1500.4 684.395 L1500.96 684.395 L1501.52 684.395 L1502.08 684.395 L1502.64 684.395 L1503.2 684.395 L1503.76 684.395 L1504.32 684.395 L1504.88 684.395 L1505.44 684.395 L1505.99 684.395 L1506.55 684.395 L1507.11 684.395 L1507.67 684.395 L1508.23 684.395 L1508.79 684.395 L1509.35 684.395 L1509.91 684.395 L1510.47 684.395 L1511.03 684.395 L1511.59 684.395 L1512.15 684.395 L1512.71 684.395 L1513.26 684.395 L1513.82 684.395 L1514.38 684.395 L1514.94 684.395 L1515.5 684.395 L1516.06 684.395 L1516.62 684.395 L1517.18 684.395 L1517.74 684.395 L1518.3 684.395 L1518.86 684.395 L1519.42 684.395 L1519.98 684.395 L1520.53 684.395 L1521.09 684.395 L1521.65 684.395 L1522.21 684.395 L1522.77 684.395 L1523.33 684.395 L1523.89 684.395 L1524.45 684.395 L1525.01 684.395 L1525.57 684.395 L1526.13 684.395 L1526.69 684.395 L1527.25 684.395 L1527.81 684.395 L1528.36 684.395 L1528.92 684.395 L1529.48 684.395 L1530.04 684.395 L1530.6 684.395 L1531.16 684.395 L1531.72 684.395 L1532.28 684.395 L1532.84 684.395 L1533.4 684.395 L1533.96 684.395 L1534.52 684.395 L1535.08 684.395 L1535.63 684.395 L1536.19 684.395 L1536.75 684.395 L1537.31 684.395 L1537.87 684.395 L1538.43 684.395 L1538.99 684.395 L1539.55 684.395 L1540.11 684.395 L1540.67 684.395 L1541.23 684.395 L1541.79 684.395 L1542.35 684.395 L1542.9 684.395 L1543.46 684.395 L1544.02 684.395 L1544.58 684.395 L1545.14 684.395 L1545.7 684.395 L1546.26 684.395 L1546.82 684.395 L1547.38 684.395 L1547.94 684.395 L1548.5 684.395 L1549.06 684.395 L1549.62 684.395 L1550.18 684.395 L1550.73 684.395 L1551.29 684.395 L1551.85 684.395 L1552.41 684.395 L1552.97 684.395 L1553.53 684.395 L1554.09 684.395 L1554.65 684.395 L1555.21 684.395 L1555.77 684.395 L1556.33 684.395 L1556.89 684.395 L1557.45 684.395 L1558 684.395 L1558.56 684.395 L1559.12 684.395 L1559.68 684.395 L1560.24 684.395 L1560.8 684.395 L1561.36 684.395 L1561.92 684.395 L1562.48 684.395 L1563.04 684.395 L1563.6 684.395 L1564.16 684.395 L1564.72 684.395 L1565.28 684.395 L1565.83 684.395 L1566.39 684.395 L1566.95 684.395 L1567.51 684.395 L1568.07 684.395 L1568.63 684.395 L1569.19 684.395 L1569.75 684.395 L1570.31 684.395 L1570.87 684.395 L1571.43 684.395 L1571.99 684.395 L1572.55 684.395 L1573.1 684.395 L1573.66 684.395 L1574.22 684.395 L1574.78 684.395 L1575.34 684.395 L1575.9 684.395 L1576.46 684.395 L1577.02 684.395 L1577.58 684.395 L1578.14 684.395 L1578.7 684.395 L1579.26 684.395 L1579.82 684.395 L1580.37 684.395 L1580.93 684.395 L1581.49 684.395 L1582.05 684.395 L1582.61 684.395 L1583.17 684.395 L1583.73 684.395 L1584.29 684.395 L1584.85 684.395 L1585.41 684.395 L1585.97 684.395 L1586.53 684.395 L1587.09 684.395 L1587.65 684.395 L1588.2 684.395 L1588.76 684.395 L1589.32 684.395 L1589.88 684.395 L1590.44 684.395 L1591 684.395 L1591.56 684.395 L1592.12 684.395 L1592.68 684.395 L1593.24 684.395 L1593.8 684.395 L1594.36 684.395 L1594.92 684.395 L1595.47 684.395 L1596.03 684.395 L1596.59 684.395 L1597.15 684.395 L1597.71 684.395 L1598.27 684.395 L1598.83 684.395 L1599.39 684.395 L1599.95 684.395 L1600.51 684.395 L1601.07 684.395 L1601.63 684.395 L1602.19 684.395 L1602.74 684.395 L1603.3 684.395 L1603.86 684.395 L1604.42 684.395 L1604.98 684.395 L1605.54 684.395 L1606.1 684.395 L1606.66 684.395 L1607.22 684.395 L1607.78 684.395 L1608.34 684.395 L1608.9 684.395 L1609.46 684.395 L1610.02 684.395 L1610.57 684.395 L1611.13 684.395 L1611.69 684.395 L1612.25 684.395 L1612.81 684.395 L1613.37 684.395 L1613.93 684.395 L1614.49 684.395 L1615.05 684.395 L1615.61 684.395 L1616.17 684.395 L1616.73 684.395 L1617.29 684.395 L1617.84 684.395 L1618.4 684.395 L1618.96 684.395 L1619.52 684.395 L1620.08 684.395 L1620.64 684.395 L1621.2 684.395 L1621.76 684.395 L1622.32 684.395 L1622.88 684.395 L1623.44 684.395 L1624 684.395 L1624.56 684.395 L1625.11 684.395 L1625.67 684.395 L1626.23 684.395 L1626.79 684.395 L1627.35 684.395 L1627.91 684.395 L1628.47 684.395 L1629.03 684.395 L1629.59 684.395 L1630.15 684.395 L1630.71 684.395 L1631.27 684.395 L1631.83 684.395 L1632.39 684.395 L1632.94 684.395 L1633.5 684.395 L1634.06 684.395 L1634.62 684.395 L1635.18 684.395 L1635.74 684.395 L1636.3 684.395 L1636.86 684.395 L1637.42 684.395 L1637.98 684.395 L1638.54 684.395 L1639.1 684.395 L1639.66 684.395 L1640.21 684.395 L1640.77 684.395 L1641.33 684.395 L1641.89 684.395 L1642.45 684.395 L1643.01 684.395 L1643.57 684.395 L1644.13 684.395 L1644.69 684.395 L1645.25 684.395 L1645.81 684.395 L1646.37 684.395 L1646.93 684.395 L1647.48 684.395 L1648.04 684.395 L1648.6 684.395 L1649.16 684.395 L1649.72 684.395 L1650.28 684.395 L1650.84 684.395 L1651.4 684.395 L1651.96 684.395 L1652.52 684.395 L1653.08 684.395 L1653.64 684.395 L1654.2 684.395 L1654.76 684.395 L1655.31 684.395 L1655.87 684.395 L1656.43 684.395 L1656.99 684.395 L1657.55 684.395 L1658.11 684.395 L1658.67 684.395 L1659.23 684.395 L1659.79 684.395 L1660.35 684.395 L1660.91 684.395 L1661.47 684.395 L1662.03 684.395 L1662.58 684.395 L1663.14 684.395 L1663.7 684.395 L1664.26 684.395 L1664.82 684.395 L1665.38 684.395 L1665.94 684.395 L1666.5 684.395 L1667.06 684.395 L1667.62 684.395 L1668.18 684.395 L1668.74 684.395 L1669.3 684.395 L1669.85 684.395 L1670.41 684.395 L1670.97 684.395 L1671.53 684.395 L1672.09 684.395 L1672.65 684.395 L1673.21 684.395 L1673.77 684.395 L1674.33 684.395 L1674.89 684.395 L1675.45 684.395 L1676.01 684.395 L1676.57 684.395 L1677.13 684.395 L1677.68 684.395 L1678.24 684.395 L1678.8 684.395 L1679.36 684.395 L1679.92 684.395 L1680.48 684.395 L1681.04 684.395 L1681.6 684.395 L1682.16 684.395 L1682.72 684.395 L1683.28 684.395 L1683.84 684.395 L1684.4 684.395 L1684.95 684.395 L1685.51 684.395 L1686.07 684.395 L1686.63 684.395 L1687.19 684.395 L1687.75 684.395 L1688.31 684.395 L1688.87 684.395 L1689.43 684.395 L1689.99 684.395 L1690.55 684.395 L1691.11 684.395 L1691.67 684.395 L1692.23 684.395 L1692.78 684.395 L1693.34 684.395 L1693.9 684.395 L1694.46 684.395 L1695.02 684.395 L1695.58 684.395 L1696.14 684.395 L1696.7 684.395 L1697.26 684.395 L1697.82 684.395 L1698.38 684.395 L1698.94 684.395 L1699.5 684.395 L1700.05 684.395 L1700.61 684.395 L1701.17 684.395 L1701.73 684.395 L1702.29 684.395 L1702.85 684.395 L1703.41 684.395 L1703.97 684.395 L1704.53 684.395 L1705.09 684.395 L1705.65 684.395 L1706.21 684.395 L1706.77 684.395 L1707.32 684.395 L1707.88 684.395 L1708.44 684.395 L1709 684.395 L1709.56 684.395 L1710.12 684.395 L1710.68 684.395 L1711.24 684.395 L1711.8 684.395 L1712.36 684.395 L1712.92 684.395 L1713.48 684.395 L1714.04 684.395 L1714.6 684.395 L1715.15 684.395 L1715.71 684.395 L1716.27 684.395 L1716.83 684.395 L1717.39 684.395 L1717.95 684.395 L1718.51 684.395 L1719.07 684.395 L1719.63 684.395 L1720.19 684.395 L1720.75 684.395 L1721.31 684.395 L1721.87 684.395 L1722.42 684.395 L1722.98 684.395 L1723.54 684.395 L1724.1 684.395 L1724.66 684.395 L1725.22 684.395 L1725.78 684.395 L1726.34 684.395 L1726.9 684.395 L1727.46 684.395 L1728.02 684.395 L1728.58 684.395 L1729.14 684.395 L1729.69 684.395 L1730.25 684.395 L1730.81 684.395 L1731.37 684.395 L1731.93 684.395 L1732.49 684.395 L1733.05 684.395 L1733.61 684.395 L1734.17 684.395 L1734.73 684.395 L1735.29 684.395 L1735.85 684.395 L1736.41 684.395 L1736.97 684.395 L1737.52 684.395 L1738.08 684.395 L1738.64 684.395 L1739.2 684.395 L1739.76 684.395 L1740.32 684.395 L1740.88 684.395 L1741.44 684.395 L1742 684.395 L1742.56 684.395 L1743.12 684.395 L1743.68 684.395 L1744.24 684.395 L1744.79 684.395 L1745.35 684.395 L1745.91 684.395 L1746.47 684.395 L1747.03 684.395 L1747.59 684.395 L1748.15 684.395 L1748.71 684.395 L1749.27 684.395 L1749.83 684.395 L1750.39 684.395 L1750.95 684.395 L1751.51 684.395 L1752.06 684.395 L1752.62 684.395 L1753.18 684.395 L1753.74 684.395 L1754.3 684.395 L1754.86 684.395 L1755.42 684.395 L1755.98 684.395 L1756.54 684.395 L1757.1 684.395 L1757.66 684.395 L1758.22 684.395 L1758.78 684.395 L1759.34 684.395 L1759.89 684.395 L1760.45 684.395 L1761.01 684.395 L1761.57 684.395 L1762.13 684.395 L1762.69 684.395 L1763.25 684.395 L1763.81 684.395 L1764.37 684.395 L1764.93 684.395 L1765.49 684.395 L1766.05 684.395 L1766.61 684.395 L1767.16 684.395 L1767.72 684.395 L1768.28 684.395 L1768.84 684.395 L1769.4 684.395 L1769.96 684.395 L1770.52 684.395 L1771.08 684.395 L1771.64 684.395 L1772.2 684.395 L1772.76 684.395 L1773.32 684.395 L1773.88 684.395 L1774.43 684.395 L1774.99 684.395 L1775.55 684.395 L1776.11 684.395 L1776.67 684.395 L1777.23 684.395 L1777.79 684.395 L1778.35 684.395 L1778.91 684.395 L1779.47 684.395 L1780.03 684.395 L1780.59 684.395 L1781.15 684.395 L1781.71 684.395 L1782.26 684.395 L1782.82 684.395 L1783.38 684.395 L1783.94 684.395 L1784.5 684.395 L1785.06 684.395 L1785.62 684.395 L1786.18 684.395 L1786.74 684.395 L1787.3 684.395 L1787.86 684.395 L1788.42 684.395 L1788.98 684.395 L1789.53 684.395 L1790.09 684.395 L1790.65 684.395 L1791.21 684.395 L1791.77 684.395 L1792.33 684.395 L1792.89 684.395 L1793.45 684.395 L1794.01 684.395 L1794.57 684.395 L1795.13 684.395 L1795.69 684.395 L1796.25 684.395 L1796.8 684.395 L1797.36 684.395 L1797.92 684.395 L1798.48 684.395 L1799.04 684.395 L1799.6 684.395 L1800.16 684.395 L1800.72 684.395 L1801.28 684.395 L1801.84 684.395 L1802.4 684.395 L1802.96 684.395 L1803.52 684.395 L1804.08 684.395 L1804.63 684.395 L1805.19 684.395 L1805.75 684.395 L1806.31 684.395 L1806.87 684.395 L1807.43 684.395 L1807.99 684.395 L1808.55 684.395 L1809.11 684.395 L1809.67 684.395 L1810.23 684.395 L1810.79 684.395 L1811.35 684.395 L1811.9 684.395 L1812.46 684.395 L1813.02 684.395 L1813.58 684.395 L1814.14 684.395 L1814.7 684.395 L1815.26 684.395 L1815.82 684.395 L1816.38 684.395 L1816.94 684.395 L1817.5 684.395 L1818.06 684.395 L1818.62 684.395 L1819.18 684.395 L1819.73 684.395 L1820.29 684.395 L1820.85 684.395 L1821.41 684.395 L1821.97 684.395 L1822.53 684.395 L1823.09 684.395 L1823.65 684.395 L1824.21 684.395 L1824.77 684.395 L1825.33 684.395 L1825.89 684.395 L1826.45 684.395 L1827 684.395 L1827.56 684.395 L1828.12 684.395 L1828.68 684.395 L1829.24 684.395 L1829.8 684.395 L1830.36 684.395 L1830.92 684.395 L1831.48 684.395 L1832.04 684.395 L1832.6 684.395 L1833.16 684.395 L1833.72 684.395 L1834.27 684.395 L1834.83 684.395 L1835.39 684.395 L1835.95 684.395 L1836.51 684.395 L1837.07 684.395 L1837.63 684.395 L1838.19 684.395 L1838.19 682.726 L1837.63 682.726 L1837.07 682.726 L1836.51 682.726 L1835.95 682.726 L1835.39 682.726 L1834.83 682.726 L1834.27 682.726 L1833.72 682.726 L1833.16 682.726 L1832.6 682.726 L1832.04 682.726 L1831.48 682.726 L1830.92 682.726 L1830.36 682.726 L1829.8 682.726 L1829.24 682.726 L1828.68 682.726 L1828.12 682.726 L1827.56 682.726 L1827 682.726 L1826.45 682.726 L1825.89 682.726 L1825.33 682.726 L1824.77 682.726 L1824.21 682.726 L1823.65 682.726 L1823.09 682.726 L1822.53 682.726 L1821.97 682.726 L1821.41 682.726 L1820.85 682.726 L1820.29 682.726 L1819.73 682.726 L1819.18 682.726 L1818.62 682.726 L1818.06 682.726 L1817.5 682.726 L1816.94 682.726 L1816.38 682.726 L1815.82 682.726 L1815.26 682.726 L1814.7 682.726 L1814.14 682.726 L1813.58 682.726 L1813.02 682.726 L1812.46 682.726 L1811.9 682.726 L1811.35 682.726 L1810.79 682.726 L1810.23 682.726 L1809.67 682.726 L1809.11 682.726 L1808.55 682.726 L1807.99 682.726 L1807.43 682.726 L1806.87 682.726 L1806.31 682.726 L1805.75 682.726 L1805.19 682.726 L1804.63 682.726 L1804.08 682.726 L1803.52 682.726 L1802.96 682.726 L1802.4 682.726 L1801.84 682.726 L1801.28 682.726 L1800.72 682.726 L1800.16 682.726 L1799.6 682.726 L1799.04 682.726 L1798.48 682.726 L1797.92 682.726 L1797.36 682.726 L1796.8 682.726 L1796.25 682.726 L1795.69 682.726 L1795.13 682.726 L1794.57 682.726 L1794.01 682.726 L1793.45 682.726 L1792.89 682.726 L1792.33 682.726 L1791.77 682.726 L1791.21 682.726 L1790.65 682.726 L1790.09 682.726 L1789.53 682.726 L1788.98 682.726 L1788.42 682.726 L1787.86 682.726 L1787.3 682.726 L1786.74 682.726 L1786.18 682.726 L1785.62 682.726 L1785.06 682.726 L1784.5 682.726 L1783.94 682.726 L1783.38 682.726 L1782.82 682.726 L1782.26 682.726 L1781.71 682.726 L1781.15 682.726 L1780.59 682.726 L1780.03 682.726 L1779.47 682.726 L1778.91 682.726 L1778.35 682.726 L1777.79 682.726 L1777.23 682.726 L1776.67 682.726 L1776.11 682.726 L1775.55 682.726 L1774.99 682.726 L1774.43 682.726 L1773.88 682.726 L1773.32 682.726 L1772.76 682.726 L1772.2 682.726 L1771.64 682.726 L1771.08 682.726 L1770.52 682.726 L1769.96 682.726 L1769.4 682.726 L1768.84 682.726 L1768.28 682.726 L1767.72 682.726 L1767.16 682.726 L1766.61 682.726 L1766.05 682.726 L1765.49 682.726 L1764.93 682.726 L1764.37 682.726 L1763.81 682.726 L1763.25 682.726 L1762.69 682.726 L1762.13 682.726 L1761.57 682.726 L1761.01 682.726 L1760.45 682.726 L1759.89 682.726 L1759.34 682.726 L1758.78 682.726 L1758.22 682.726 L1757.66 682.726 L1757.1 682.726 L1756.54 682.726 L1755.98 682.726 L1755.42 682.726 L1754.86 682.726 L1754.3 682.726 L1753.74 682.726 L1753.18 682.726 L1752.62 682.726 L1752.06 682.726 L1751.51 682.726 L1750.95 682.726 L1750.39 682.726 L1749.83 682.726 L1749.27 682.726 L1748.71 682.726 L1748.15 682.726 L1747.59 682.726 L1747.03 682.726 L1746.47 682.726 L1745.91 682.726 L1745.35 682.726 L1744.79 682.726 L1744.24 682.726 L1743.68 682.726 L1743.12 682.726 L1742.56 682.726 L1742 682.726 L1741.44 682.726 L1740.88 682.726 L1740.32 682.726 L1739.76 682.726 L1739.2 682.726 L1738.64 682.726 L1738.08 682.726 L1737.52 682.726 L1736.97 682.726 L1736.41 682.726 L1735.85 682.726 L1735.29 682.726 L1734.73 682.726 L1734.17 682.726 L1733.61 682.726 L1733.05 682.726 L1732.49 682.726 L1731.93 682.726 L1731.37 682.726 L1730.81 682.726 L1730.25 682.726 L1729.69 682.726 L1729.14 682.726 L1728.58 682.726 L1728.02 682.726 L1727.46 682.726 L1726.9 682.726 L1726.34 682.726 L1725.78 682.726 L1725.22 682.726 L1724.66 682.726 L1724.1 682.726 L1723.54 682.726 L1722.98 682.726 L1722.42 682.726 L1721.87 682.726 L1721.31 682.726 L1720.75 682.726 L1720.19 682.726 L1719.63 682.726 L1719.07 682.726 L1718.51 682.726 L1717.95 682.726 L1717.39 682.726 L1716.83 682.726 L1716.27 682.726 L1715.71 682.726 L1715.15 682.726 L1714.6 682.726 L1714.04 682.726 L1713.48 682.726 L1712.92 682.726 L1712.36 682.726 L1711.8 682.726 L1711.24 682.726 L1710.68 682.726 L1710.12 682.726 L1709.56 682.726 L1709 682.726 L1708.44 682.726 L1707.88 682.726 L1707.32 682.726 L1706.77 682.726 L1706.21 682.726 L1705.65 682.726 L1705.09 682.726 L1704.53 682.726 L1703.97 682.726 L1703.41 682.726 L1702.85 682.726 L1702.29 682.726 L1701.73 682.726 L1701.17 682.726 L1700.61 682.726 L1700.05 682.726 L1699.5 682.726 L1698.94 682.726 L1698.38 682.726 L1697.82 682.726 L1697.26 682.726 L1696.7 682.726 L1696.14 682.726 L1695.58 682.726 L1695.02 682.726 L1694.46 682.726 L1693.9 682.726 L1693.34 682.726 L1692.78 682.726 L1692.23 682.726 L1691.67 682.726 L1691.11 682.726 L1690.55 682.726 L1689.99 682.726 L1689.43 682.726 L1688.87 682.726 L1688.31 682.726 L1687.75 682.726 L1687.19 682.726 L1686.63 682.726 L1686.07 682.726 L1685.51 682.726 L1684.95 682.726 L1684.4 682.726 L1683.84 682.726 L1683.28 682.726 L1682.72 682.726 L1682.16 682.726 L1681.6 682.726 L1681.04 682.726 L1680.48 682.726 L1679.92 682.726 L1679.36 682.726 L1678.8 682.726 L1678.24 682.726 L1677.68 682.726 L1677.13 682.726 L1676.57 682.726 L1676.01 682.726 L1675.45 682.726 L1674.89 682.726 L1674.33 682.726 L1673.77 682.726 L1673.21 682.726 L1672.65 682.726 L1672.09 682.726 L1671.53 682.726 L1670.97 682.726 L1670.41 682.726 L1669.85 682.726 L1669.3 682.726 L1668.74 682.726 L1668.18 682.726 L1667.62 682.726 L1667.06 682.726 L1666.5 682.726 L1665.94 682.726 L1665.38 682.726 L1664.82 682.726 L1664.26 682.726 L1663.7 682.726 L1663.14 682.726 L1662.58 682.726 L1662.03 682.726 L1661.47 682.726 L1660.91 682.726 L1660.35 682.726 L1659.79 682.726 L1659.23 682.726 L1658.67 682.726 L1658.11 682.726 L1657.55 682.726 L1656.99 682.726 L1656.43 682.726 L1655.87 682.726 L1655.31 682.726 L1654.76 682.726 L1654.2 682.726 L1653.64 682.726 L1653.08 682.726 L1652.52 682.726 L1651.96 682.726 L1651.4 682.726 L1650.84 682.726 L1650.28 682.726 L1649.72 682.726 L1649.16 682.726 L1648.6 682.726 L1648.04 682.726 L1647.48 682.726 L1646.93 682.726 L1646.37 682.726 L1645.81 682.726 L1645.25 682.726 L1644.69 682.726 L1644.13 682.726 L1643.57 682.726 L1643.01 682.726 L1642.45 682.726 L1641.89 682.726 L1641.33 682.726 L1640.77 682.726 L1640.21 682.726 L1639.66 682.726 L1639.1 682.726 L1638.54 682.726 L1637.98 682.726 L1637.42 682.726 L1636.86 682.726 L1636.3 682.726 L1635.74 682.726 L1635.18 682.726 L1634.62 682.726 L1634.06 682.726 L1633.5 682.726 L1632.94 682.726 L1632.39 682.726 L1631.83 682.726 L1631.27 682.726 L1630.71 682.726 L1630.15 682.726 L1629.59 682.726 L1629.03 682.726 L1628.47 682.726 L1627.91 682.726 L1627.35 682.726 L1626.79 682.726 L1626.23 682.726 L1625.67 682.726 L1625.11 682.726 L1624.56 682.726 L1624 682.726 L1623.44 682.726 L1622.88 682.726 L1622.32 682.726 L1621.76 682.726 L1621.2 682.726 L1620.64 682.726 L1620.08 682.726 L1619.52 682.726 L1618.96 682.726 L1618.4 682.726 L1617.84 682.726 L1617.29 682.726 L1616.73 682.726 L1616.17 682.726 L1615.61 682.726 L1615.05 682.726 L1614.49 682.726 L1613.93 682.726 L1613.37 682.726 L1612.81 682.726 L1612.25 682.726 L1611.69 682.726 L1611.13 682.726 L1610.57 682.726 L1610.02 682.726 L1609.46 682.726 L1608.9 682.726 L1608.34 682.726 L1607.78 682.726 L1607.22 682.726 L1606.66 682.726 L1606.1 682.726 L1605.54 682.726 L1604.98 682.726 L1604.42 682.726 L1603.86 682.726 L1603.3 682.726 L1602.74 682.726 L1602.19 682.726 L1601.63 682.726 L1601.07 682.726 L1600.51 682.726 L1599.95 682.726 L1599.39 682.726 L1598.83 682.726 L1598.27 682.726 L1597.71 682.726 L1597.15 682.726 L1596.59 682.726 L1596.03 682.726 L1595.47 682.726 L1594.92 682.726 L1594.36 682.726 L1593.8 682.726 L1593.24 682.726 L1592.68 682.726 L1592.12 682.726 L1591.56 682.726 L1591 682.726 L1590.44 682.726 L1589.88 682.726 L1589.32 682.726 L1588.76 682.726 L1588.2 682.726 L1587.65 682.726 L1587.09 682.726 L1586.53 682.726 L1585.97 682.726 L1585.41 682.726 L1584.85 682.726 L1584.29 682.726 L1583.73 682.726 L1583.17 682.726 L1582.61 682.726 L1582.05 682.726 L1581.49 682.726 L1580.93 682.726 L1580.37 682.726 L1579.82 682.726 L1579.26 682.726 L1578.7 682.726 L1578.14 682.726 L1577.58 682.726 L1577.02 682.726 L1576.46 682.726 L1575.9 682.726 L1575.34 682.726 L1574.78 682.726 L1574.22 682.726 L1573.66 682.726 L1573.1 682.726 L1572.55 682.726 L1571.99 682.726 L1571.43 682.726 L1570.87 682.726 L1570.31 682.726 L1569.75 682.726 L1569.19 682.726 L1568.63 682.726 L1568.07 682.726 L1567.51 682.726 L1566.95 682.726 L1566.39 682.726 L1565.83 682.726 L1565.28 682.726 L1564.72 682.726 L1564.16 682.726 L1563.6 682.726 L1563.04 682.726 L1562.48 682.726 L1561.92 682.726 L1561.36 682.726 L1560.8 682.726 L1560.24 682.726 L1559.68 682.726 L1559.12 682.726 L1558.56 682.726 L1558 682.726 L1557.45 682.726 L1556.89 682.726 L1556.33 682.726 L1555.77 682.726 L1555.21 682.726 L1554.65 682.726 L1554.09 682.726 L1553.53 682.726 L1552.97 682.726 L1552.41 682.726 L1551.85 682.726 L1551.29 682.726 L1550.73 682.726 L1550.18 682.726 L1549.62 682.726 L1549.06 682.726 L1548.5 682.726 L1547.94 682.726 L1547.38 682.726 L1546.82 682.726 L1546.26 682.726 L1545.7 682.726 L1545.14 682.726 L1544.58 682.726 L1544.02 682.726 L1543.46 682.726 L1542.9 682.726 L1542.35 682.726 L1541.79 682.726 L1541.23 682.726 L1540.67 682.726 L1540.11 682.726 L1539.55 682.726 L1538.99 682.726 L1538.43 682.726 L1537.87 682.726 L1537.31 682.726 L1536.75 682.726 L1536.19 682.726 L1535.63 682.726 L1535.08 682.726 L1534.52 682.726 L1533.96 682.726 L1533.4 682.726 L1532.84 682.726 L1532.28 682.726 L1531.72 682.726 L1531.16 682.726 L1530.6 682.726 L1530.04 682.726 L1529.48 682.726 L1528.92 682.726 L1528.36 682.726 L1527.81 682.726 L1527.25 682.726 L1526.69 682.726 L1526.13 682.726 L1525.57 682.726 L1525.01 682.726 L1524.45 682.726 L1523.89 682.726 L1523.33 682.726 L1522.77 682.726 L1522.21 682.726 L1521.65 682.726 L1521.09 682.726 L1520.53 682.726 L1519.98 682.726 L1519.42 682.726 L1518.86 682.726 L1518.3 682.726 L1517.74 682.726 L1517.18 682.726 L1516.62 682.726 L1516.06 682.726 L1515.5 682.726 L1514.94 682.726 L1514.38 682.726 L1513.82 682.726 L1513.26 682.726 L1512.71 682.726 L1512.15 682.726 L1511.59 682.726 L1511.03 682.726 L1510.47 682.726 L1509.91 682.726 L1509.35 682.726 L1508.79 682.726 L1508.23 682.726 L1507.67 682.726 L1507.11 682.726 L1506.55 682.726 L1505.99 682.726 L1505.44 682.726 L1504.88 682.726 L1504.32 682.726 L1503.76 682.726 L1503.2 682.726 L1502.64 682.726 L1502.08 682.726 L1501.52 682.726 L1500.96 682.726 L1500.4 682.726 L1499.84 682.726 L1499.28 682.726 L1498.72 682.726 L1498.16 682.726 L1497.61 682.726 L1497.05 682.726 L1496.49 682.726 L1495.93 682.726 L1495.37 682.726 L1494.81 682.726 L1494.25 682.726 L1493.69 682.726 L1493.13 682.726 L1492.57 682.726 L1492.01 682.726 L1491.45 682.726 L1490.89 682.726 L1490.34 682.726 L1489.78 682.726 L1489.22 682.726 L1488.66 682.726 L1488.1 682.726 L1487.54 682.726 L1486.98 682.726 L1486.42 682.726 L1485.86 682.726 L1485.3 682.726 L1484.74 682.726 L1484.18 682.726 L1483.62 682.726 L1483.07 682.726 L1482.51 682.726 L1481.95 682.726 L1481.39 682.726 L1480.83 682.726 L1480.27 682.726 L1479.71 682.726 L1479.15 682.726 L1478.59 682.726 L1478.03 682.726 L1477.47 682.726 L1476.91 682.726 L1476.35 682.726 L1475.79 682.726 L1475.24 682.726 L1474.68 682.726 L1474.12 682.726 L1473.56 682.726 L1473 682.726 L1472.44 682.726 L1471.88 682.726 L1471.32 682.726 L1470.76 682.726 L1470.2 682.726 L1469.64 682.726 L1469.08 682.726 L1468.52 682.726 L1467.97 682.726 L1467.41 682.726 L1466.85 682.726 L1466.29 682.726 L1465.73 682.726 L1465.17 682.726 L1464.61 682.726 L1464.05 682.726 L1463.49 682.726 L1462.93 682.726 L1462.37 682.726 L1461.81 682.726 L1461.25 682.726 L1460.7 682.726 L1460.14 682.726 L1459.58 682.726 L1459.02 682.726 L1458.46 682.726 L1457.9 682.726 L1457.34 682.726 L1456.78 682.726 L1456.22 682.726 L1455.66 682.726 L1455.1 682.726 L1454.54 682.726 L1453.98 682.726 L1453.42 682.726 L1452.87 682.726 L1452.31 682.726 L1451.75 682.726 L1451.19 682.726 L1450.63 682.726 L1450.07 682.726 L1449.51 682.726 L1448.95 682.726 L1448.39 682.726 L1447.83 682.726 L1447.27 682.726 L1446.71 682.726 L1446.15 682.726 L1445.6 682.726 L1445.04 682.726 L1444.48 682.726 L1443.92 682.726 L1443.36 682.726 L1442.8 682.726 L1442.24 682.726 L1441.68 682.726 L1441.12 682.726 L1440.56 682.726 L1440 682.726 L1439.44 682.726 L1438.88 682.726 L1438.33 682.726 L1437.77 682.726 L1437.21 682.726 L1436.65 682.726 L1436.09 682.726 L1435.53 682.726 L1434.97 682.726 L1434.41 682.726 L1433.85 682.726 L1433.29 682.726 L1432.73 682.726 L1432.17 682.726 L1431.61 682.726 L1431.05 682.726 L1430.5 682.726 L1429.94 682.726 L1429.38 682.726 L1428.82 682.726 L1428.26 682.726 L1427.7 682.726 L1427.14 682.726 L1426.58 682.726 L1426.02 682.726 L1425.46 682.726 L1424.9 682.726 L1424.34 682.726 L1423.78 682.726 L1423.23 682.726 L1422.67 682.726 L1422.11 682.726 L1421.55 682.726 L1420.99 682.726 L1420.43 682.726 L1419.87 682.726 L1419.31 682.726 L1418.75 682.726 L1418.19 682.726 L1417.63 682.726 L1417.07 682.726 L1416.51 682.726 L1415.95 682.726 L1415.4 682.726 L1414.84 682.726 L1414.28 682.726 L1413.72 682.726 L1413.16 682.726 L1412.6 682.726 L1412.04 682.726 L1411.48 682.726 L1410.92 682.726 L1410.36 682.726 L1409.8 682.726 L1409.24 682.726 L1408.68 682.726 L1408.13 682.726 L1407.57 682.726 L1407.01 682.726 L1406.45 682.726 L1405.89 682.726 L1405.33 682.726 L1404.77 682.726 L1404.21 682.726 L1403.65 682.726 L1403.09 682.726 L1402.53 682.726 L1401.97 682.726 L1401.41 682.726 L1400.86 682.726 L1400.3 682.726 L1399.74 682.726 L1399.18 682.726 L1398.62 682.726 L1398.06 682.726 L1397.5 682.726 L1396.94 682.726 L1396.38 682.726 L1395.82 682.726 L1395.26 682.726 L1394.7 682.726 L1394.14 682.726 L1393.58 682.726 L1393.03 682.726 L1392.47 682.726 L1391.91 682.726 L1391.35 682.726 L1390.79 682.726 L1390.23 682.726 L1389.67 682.726 L1389.11 682.726 L1388.55 682.726 L1387.99 682.726 L1387.43 682.726 L1386.87 682.726 L1386.31 682.726 L1385.76 682.726 L1385.2 682.726 L1384.64 682.726 L1384.08 682.726 L1383.52 682.726 L1382.96 682.726 L1382.4 682.726 L1381.84 682.726 L1381.28 682.726 L1380.72 682.726 L1380.16 682.726 L1379.6 682.726 L1379.04 682.726 L1378.49 682.726 L1377.93 682.726 L1377.37 682.726 L1376.81 682.726 L1376.25 682.726 L1375.69 682.726 L1375.13 682.726 L1374.57 682.726 L1374.01 682.726 L1373.45 682.726 L1372.89 682.726 L1372.33 682.726 L1371.77 682.726 L1371.21 682.726 L1370.66 682.726 L1370.1 682.726 L1369.54 682.726 L1368.98 682.726 L1368.42 682.726 L1367.86 682.726 L1367.3 682.726 L1366.74 682.726 L1366.18 682.726 L1365.62 682.726 L1365.06 682.726 L1364.5 682.726 L1363.94 682.726 L1363.39 682.726 L1362.83 682.726 L1362.27 682.726 L1361.71 682.726 L1361.15 682.726 L1360.59 682.726 L1360.03 682.726 L1359.47 682.726 L1358.91 682.726 L1358.35 682.726 L1357.79 682.726 L1357.23 682.726 L1356.67 682.726 L1356.12 682.726 L1355.56 682.726 L1355 682.726 L1354.44 682.726 L1353.88 682.726 L1353.32 682.726 L1352.76 682.726 L1352.2 682.726 L1351.64 682.726 L1351.08 682.726 L1350.52 682.726 L1349.96 682.726 L1349.4 682.726 L1348.84 682.726 L1348.29 682.726 L1347.73 682.726 L1347.17 682.726 L1346.61 682.726 L1346.05 682.726 L1345.49 682.726 L1344.93 682.726 L1344.37 682.726 L1343.81 682.726 L1343.25 682.726 L1342.69 682.726 L1342.13 682.726 L1341.57 682.726 L1341.02 682.726 L1340.46 682.726 L1339.9 682.726 L1339.34 682.726 L1338.78 682.726 L1338.22 682.726 L1337.66 682.726 L1337.1 682.726 L1336.54 682.726 L1335.98 682.726 L1335.42 682.726 L1334.86 682.726 L1334.3 682.726 L1333.75 682.726 L1333.19 682.726 L1332.63 682.726 L1332.07 682.726 L1331.51 682.726 L1330.95 682.726 L1330.39 682.726 L1329.83 682.726 L1329.27 682.726 L1328.71 682.726 L1328.15 682.726 L1327.59 682.726 L1327.03 682.726 L1326.47 682.726 L1325.92 682.726 L1325.36 682.726 L1324.8 682.726 L1324.24 682.726 L1323.68 682.726 L1323.12 682.726 L1322.56 682.726 L1322 682.726 L1321.44 682.726 L1320.88 682.726 L1320.32 682.726 L1319.76 682.726 L1319.2 682.726 L1318.65 682.726 L1318.09 682.726 L1317.53 682.726 L1316.97 682.726 L1316.41 682.726 L1315.85 682.726 L1315.29 682.726 L1314.73 682.726 L1314.17 682.726 L1313.61 682.726 L1313.05 682.726 L1312.49 682.726 L1311.93 682.726 L1311.38 682.726 L1310.82 682.726 L1310.26 682.726 L1309.7 682.726 L1309.14 682.726 L1308.58 682.726 L1308.02 682.726 L1307.46 682.726 L1306.9 682.726 L1306.34 682.726 L1305.78 682.726 L1305.22 682.726 L1304.66 682.726 L1304.1 682.726 L1303.55 682.726 L1302.99 682.726 L1302.43 682.726 L1301.87 682.726 L1301.31 682.726 L1300.75 682.726 L1300.19 682.726 L1299.63 682.726 L1299.07 682.726 L1298.51 682.726 L1297.95 682.726 L1297.39 682.726 L1296.83 682.726 L1296.28 682.726 L1295.72 682.726 L1295.16 682.726 L1294.6 682.726 L1294.04 682.726 L1293.48 682.726 L1292.92 682.726 L1292.36 682.726 L1291.8 682.726 L1291.24 682.726 L1290.68 682.726 L1290.12 682.726 L1289.56 682.726 L1289 682.726 L1288.45 682.726 L1287.89 682.726 L1287.33 682.726 L1286.77 682.726 L1286.21 682.726 L1285.65 682.726 L1285.09 682.726 L1284.53 682.726 L1283.97 682.726 L1283.41 682.726 L1282.85 682.726 L1282.29 682.726 L1281.73 682.726 L1281.18 682.726 L1280.62 682.726 L1280.06 682.726 L1279.5 682.726 L1278.94 682.726 L1278.38 682.726 L1277.82 682.726 L1277.26 682.726 L1276.7 682.726 L1276.14 682.726 L1275.58 682.726 L1275.02 682.726 L1274.46 682.726 L1273.91 682.726 L1273.35 682.726 L1272.79 682.726 L1272.23 682.726 L1271.67 682.726 L1271.11 682.726 L1270.55 682.726 L1269.99 682.726 L1269.43 682.726 L1268.87 682.726 L1268.31 682.726 L1267.75 682.726 L1267.19 682.726 L1266.63 682.726 L1266.08 682.726 L1265.52 682.726 L1264.96 682.726 L1264.4 682.726 L1263.84 682.726 L1263.28 682.726 L1262.72 682.726 L1262.16 682.726 L1261.6 682.726 L1261.04 682.726 L1260.48 682.726 L1259.92 682.726 L1259.36 682.726 L1258.81 682.726 L1258.25 682.726 L1257.69 682.726 L1257.13 682.726 L1256.57 682.726 L1256.01 682.726 L1255.45 682.726 L1254.89 682.726 L1254.33 682.726 L1253.77 682.726 L1253.21 682.726 L1252.65 682.726 L1252.09 682.726 L1251.54 682.726 L1250.98 682.726 L1250.42 682.726 L1249.86 682.726 L1249.3 682.726 L1248.74 682.726 L1248.18 682.726 L1247.62 682.726 L1247.06 682.726 L1246.5 682.726 L1245.94 682.726 L1245.38 682.726 L1244.82 682.726 L1244.26 682.726 L1243.71 682.726 L1243.15 682.726 L1242.59 682.726 L1242.03 682.726 L1241.47 682.726 L1240.91 682.726 L1240.35 682.726 L1239.79 682.726 L1239.23 682.726 L1238.67 682.726 L1238.11 682.726 L1237.55 682.726 L1236.99 682.726 L1236.44 682.726 L1235.88 682.726 L1235.32 682.726 L1234.76 682.726 L1234.2 682.726 L1233.64 682.726 L1233.08 682.726 L1232.52 682.726 L1231.96 682.726 L1231.4 682.726 L1230.84 682.726 L1230.28 682.726 L1229.72 682.726 L1229.17 682.726 L1228.61 682.726 L1228.05 682.726 L1227.49 682.726 L1226.93 682.726 L1226.37 682.726 L1225.81 682.726 L1225.25 682.726 L1224.69 682.726 L1224.13 682.726 L1223.57 682.726 L1223.01 682.726 L1222.45 682.726 L1221.89 682.726 L1221.34 682.726 L1220.78 682.726 L1220.22 682.726 L1219.66 682.726 L1219.1 682.726 L1218.54 682.726 L1217.98 682.726 L1217.42 682.726 L1216.86 682.726 L1216.3 682.726 L1215.74 682.726 L1215.18 682.726 L1214.62 682.726 L1214.07 682.726 L1213.51 682.726 L1212.95 682.726 L1212.39 682.726 L1211.83 682.726 L1211.27 682.726 L1210.71 682.726 L1210.15 682.726 L1209.59 682.726 L1209.03 682.726 L1208.47 682.726 L1207.91 682.726 L1207.35 682.726 L1206.8 682.726 L1206.24 682.726 L1205.68 682.726 L1205.12 682.726 L1204.56 682.726 L1204 682.726 L1203.44 682.726 L1202.88 682.726 L1202.32 682.726 L1201.76 682.726 L1201.2 682.726 L1200.64 682.726 L1200.08 682.726 L1199.52 682.726 L1198.97 682.726 L1198.41 682.726 L1197.85 682.726 L1197.29 682.726 L1196.73 682.726 L1196.17 682.726 L1195.61 682.726 L1195.05 682.726 L1194.49 682.726 L1193.93 682.726 L1193.37 682.726 L1192.81 682.726 L1192.25 682.726 L1191.7 682.726 L1191.14 682.726 L1190.58 682.726 L1190.02 682.726 L1189.46 682.726 L1188.9 682.726 L1188.34 682.726 L1187.78 682.726 L1187.22 682.726 L1186.66 682.726 L1186.1 682.726 L1185.54 682.726 L1184.98 682.726 L1184.43 682.726 L1183.87 682.726 L1183.31 682.726 L1182.75 682.726 L1182.19 682.726 L1181.63 682.726 L1181.07 682.726 L1180.51 682.726 L1179.95 682.726 L1179.39 682.726 L1178.83 682.726 L1178.27 682.726 L1177.71 682.726 L1177.15 682.726 L1176.6 682.726 L1176.04 682.726 L1175.48 682.726 L1174.92 682.726 L1174.36 682.726 L1173.8 682.726 L1173.24 682.726 L1172.68 682.726 L1172.12 682.726 L1171.56 682.726 L1171 682.726 L1170.44 682.726 L1169.88 682.726 L1169.33 682.726 L1168.77 682.726 L1168.21 682.726 L1167.65 682.726 L1167.09 682.726 L1166.53 682.726 L1165.97 682.726 L1165.41 682.726 L1164.85 682.726 L1164.29 682.726 L1163.73 682.726 L1163.17 682.726 L1162.61 682.726 L1162.05 682.726 L1161.5 682.726 L1160.94 682.726 L1160.38 682.726 L1159.82 682.726 L1159.26 682.726 L1158.7 682.726 L1158.14 682.726 L1157.58 682.726 L1157.02 682.726 L1156.46 682.726 L1155.9 682.726 L1155.34 682.726 L1154.78 682.726 L1154.23 682.726 L1153.67 682.726 L1153.11 682.726 L1152.55 682.726 L1151.99 682.726 L1151.43 682.726 L1150.87 682.726 L1150.31 682.726 L1149.75 682.726 L1149.19 682.726 L1148.63 682.726 L1148.07 682.726 L1147.51 682.726 L1146.96 682.726 L1146.4 682.726 L1145.84 682.726 L1145.28 682.726 L1144.72 682.726 L1144.16 682.726 L1143.6 682.726 L1143.04 682.726 L1142.48 682.726 L1141.92 682.726 L1141.36 682.726 L1140.8 682.726 L1140.24 682.726 L1139.68 682.726 L1139.13 682.726 L1138.57 682.726 L1138.01 682.726 L1137.45 682.726 L1136.89 682.726 L1136.33 682.726 L1135.77 682.726 L1135.21 682.726 L1134.65 682.726 L1134.09 682.726 L1133.53 682.726 L1132.97 682.726 L1132.41 682.726 L1131.86 682.726 L1131.3 682.726 L1130.74 682.726 L1130.18 682.726 L1129.62 682.726 L1129.06 682.726 L1128.5 682.726 L1127.94 682.726 L1127.38 682.726 L1126.82 682.726 L1126.26 682.726 L1125.7 682.726 L1125.14 682.726 L1124.59 682.726 L1124.03 682.726 L1123.47 682.726 L1122.91 682.726 L1122.35 682.726 L1121.79 682.726 L1121.23 682.726 L1120.67 682.726 L1120.11 682.726 L1119.55 682.726 L1118.99 682.726 L1118.43 682.726 L1117.87 682.726 L1117.31 682.726 L1116.76 682.726 L1116.2 682.726 L1115.64 682.726 L1115.08 682.726 L1114.52 682.726 L1113.96 682.726 L1113.4 682.726 L1112.84 682.726 L1112.28 682.726 L1111.72 682.726 L1111.16 682.726 L1110.6 682.726 L1110.04 682.726 L1109.49 682.726 L1108.93 682.726 L1108.37 682.726 L1107.81 682.726 L1107.25 682.726 L1106.69 682.726 L1106.13 682.726 L1105.57 682.726 L1105.01 682.726 L1104.45 682.726 L1103.89 682.726 L1103.33 682.726 L1102.77 682.726 L1102.22 682.726 L1101.66 682.726 L1101.1 682.726 L1100.54 682.726 L1099.98 682.726 L1099.42 682.726 L1098.86 682.726 L1098.3 682.726 L1097.74 682.726 L1097.18 682.726 L1096.62 682.726 L1096.06 682.726 L1095.5 682.726 L1094.94 682.726 L1094.39 682.726 L1093.83 682.726 L1093.27 682.726 L1092.71 682.726 L1092.15 682.726 L1091.59 682.726 L1091.03 682.726 L1090.47 682.726 L1089.91 682.726 L1089.35 682.726 L1088.79 682.726 L1088.23 682.726 L1087.67 682.726 L1087.12 682.726 L1086.56 682.726 L1086 682.726 L1085.44 682.726 L1084.88 682.726 L1084.32 682.726 L1083.76 682.726 L1083.2 682.726 L1082.64 682.726 L1082.08 682.726 L1081.52 682.726 L1080.96 682.726 L1080.4 682.726 L1079.85 682.726 L1079.29 682.726 L1078.73 682.726 L1078.17 682.726 L1077.61 682.726 L1077.05 682.726 L1076.49 682.726 L1075.93 682.726 L1075.37 682.726 L1074.81 682.726 L1074.25 682.726 L1073.69 682.726 L1073.13 682.726 L1072.57 682.726 L1072.02 682.726 L1071.46 682.726 L1070.9 682.726 L1070.34 682.726 L1069.78 682.726 L1069.22 682.726 L1068.66 682.726 L1068.1 682.726 L1067.54 682.726 L1066.98 682.726 L1066.42 682.726 L1065.86 682.726 L1065.3 682.726 L1064.75 682.726 L1064.19 682.726 L1063.63 682.726 L1063.07 682.726 L1062.51 682.726 L1061.95 682.726 L1061.39 682.726 L1060.83 682.726 L1060.27 682.726 L1059.71 682.726 L1059.15 682.726 L1058.59 682.726 L1058.03 682.726 L1057.48 682.726 L1056.92 682.726 L1056.36 682.726 L1055.8 682.726 L1055.24 682.726 L1054.68 682.726 L1054.12 682.726 L1053.56 682.726 L1053 682.726 L1052.44 682.726 L1051.88 682.726 L1051.32 682.726 L1050.76 682.726 L1050.2 682.726 L1049.65 682.726 L1049.09 682.726 L1048.53 682.726 L1047.97 682.726 L1047.41 682.726 L1046.85 682.726 L1046.29 682.726 L1045.73 682.726 L1045.17 682.726 L1044.61 682.726 L1044.05 682.726 L1043.49 682.726 L1042.93 682.726 L1042.38 682.726 L1041.82 682.726 L1041.26 682.726 L1040.7 682.726 L1040.14 682.726 L1039.58 682.726 L1039.02 682.726 L1038.46 682.726 L1037.9 682.726 L1037.34 682.726 L1036.78 682.726 L1036.22 682.726 L1035.66 682.726 L1035.1 682.726 L1034.55 682.726 L1033.99 682.726 L1033.43 682.726 L1032.87 682.726 L1032.31 682.726 L1031.75 682.726 L1031.19 682.726 L1030.63 682.726 L1030.07 682.726 L1029.51 682.726 L1028.95 682.726 L1028.39 682.726 L1027.83 682.726 L1027.28 682.726 L1026.72 682.726 L1026.16 682.726 L1025.6 682.726 L1025.04 682.726 L1024.48 682.726 L1023.92 682.726 L1023.36 682.726 L1022.8 682.726 L1022.24 682.726 L1021.68 682.726 L1021.12 682.726 L1020.56 682.726 L1020.01 682.726 L1019.45 682.726 L1018.89 682.726 L1018.33 682.726 L1017.77 682.726 L1017.21 682.726 L1016.65 682.726 L1016.09 682.726 L1015.53 682.726 L1014.97 682.726 L1014.41 682.726 L1013.85 682.726 L1013.29 682.726 L1012.73 682.726 L1012.18 682.726 L1011.62 682.726 L1011.06 682.726 L1010.5 682.726 L1009.94 682.726 L1009.38 682.726 L1008.82 682.726 L1008.26 682.726 L1007.7 682.726 L1007.14 682.726 L1006.58 682.726 L1006.02 682.726 L1005.46 682.726 L1004.91 682.726 L1004.35 682.726 L1003.79 682.726 L1003.23 682.726 L1002.67 682.726 L1002.11 682.726 L1001.55 682.726 L1000.99 682.726 L1000.43 682.726 L999.872 682.726 L999.313 682.726 L998.754 682.726 L998.194 682.726 L997.635 682.726 L997.076 682.726 L996.517 682.726 L995.957 682.726 L995.398 682.726 L994.839 682.726 L994.28 682.726 L993.72 682.726 L993.161 682.726 L992.602 682.726 L992.043 682.726 L991.483 682.726 L990.924 682.726 L990.365 682.726 L989.806 682.726 L989.246 682.726 L988.687 682.726 L988.128 682.726 L987.569 682.726 L987.009 682.726 L986.45 682.726 L985.891 682.726 L985.332 682.726 L984.772 682.726 L984.213 682.726 L983.654 682.726 L983.095 682.726 L982.535 682.726 L981.976 682.726 L981.417 682.726 L980.858 682.726 L980.298 682.726 L979.739 682.726 L979.18 682.726 L978.621 682.726 L978.061 682.726 L977.502 682.726 L976.943 682.726 L976.384 682.726 L975.824 682.726 L975.265 682.726 L974.706 682.726 L974.147 682.726 L973.587 682.726 L973.028 682.726 L972.469 682.726 L971.91 682.726 L971.35 682.726 L970.791 682.726 L970.232 682.726 L969.673 682.726 L969.113 682.726 L968.554 682.726 L967.995 682.726 L967.436 682.726 L966.876 682.726 L966.317 682.726 L965.758 682.726 L965.199 682.726 L964.639 682.726 L964.08 682.726 L963.521 682.726 L962.962 682.726 L962.402 682.726 L961.843 682.726 L961.284 682.726 L960.725 682.726 L960.165 682.726 L959.606 682.726 L959.047 682.726 L958.488 682.726 L957.928 682.726 L957.369 682.726 L956.81 682.726 L956.251 682.726 L955.691 682.726 L955.132 682.726 L954.573 682.726 L954.014 682.726 L953.454 682.726 L952.895 682.726 L952.336 682.726 L951.777 682.726 L951.217 682.726 L950.658 682.726 L950.099 682.726 L949.54 682.726 L948.98 682.726 L948.421 682.726 L947.862 682.726 L947.303 682.726 L946.743 682.726 L946.184 682.726 L945.625 682.726 L945.066 682.726 L944.506 682.726 L943.947 682.726 L943.388 682.726 L942.829 682.726 L942.269 682.726 L941.71 682.726 L941.151 682.726 L940.592 682.726 L940.032 682.726 L939.473 682.726 L938.914 682.726 L938.355 682.726 L937.795 682.726 L937.236 682.726 L936.677 682.726 L936.118 682.726 L935.558 682.726 L934.999 682.726 L934.44 682.726 L933.881 682.726 L933.321 682.726 L932.762 682.726 L932.203 682.726 L931.644 682.726 L931.084 682.726 L930.525 682.726 L929.966 682.726 L929.406 682.726 L928.847 682.726 L928.288 682.726 L927.729 682.726 L927.169 682.726 L926.61 682.726 L926.051 682.726 L925.492 682.726 L924.932 682.726 L924.373 682.726 L923.814 682.726 L923.255 682.726 L922.695 682.726 L922.136 682.726 L921.577 682.726 L921.018 682.726 L920.458 682.726 L919.899 682.726 L919.34 682.726 L918.781 682.726 L918.221 682.726 L917.662 682.726 L917.103 682.726 L916.544 682.726 L915.984 682.726 L915.425 682.726 L914.866 682.726 L914.307 682.726 L913.747 682.726 L913.188 682.726 L912.629 682.726 L912.07 682.726 L911.51 682.726 L910.951 682.726 L910.392 682.726 L909.833 682.726 L909.273 682.726 L908.714 682.726 L908.155 682.726 L907.596 682.726 L907.036 682.726 L906.477 682.726 L905.918 682.726 L905.359 682.726 L904.799 682.726 L904.24 682.726 L903.681 682.726 L903.122 682.726 L902.562 682.726 L902.003 682.726 L901.444 682.726 L900.885 682.726 L900.325 682.726 L899.766 682.726 L899.207 682.726 L898.648 682.726 L898.088 682.726 L897.529 682.726 L896.97 682.726 L896.411 682.726 L895.851 682.726 L895.292 682.726 L894.733 682.726 L894.174 682.726 L893.614 682.726 L893.055 682.726 L892.496 682.726 L891.937 682.726 L891.377 682.726 L890.818 682.726 L890.259 682.726 L889.7 682.726 L889.14 682.726 L888.581 682.726 L888.022 682.726 L887.463 682.726 L886.903 682.726 L886.344 682.726 L885.785 682.726 L885.226 682.726 L884.666 682.726 L884.107 682.726 L883.548 682.726 L882.989 682.726 L882.429 682.726 L881.87 682.726 L881.311 682.726 L880.752 682.726 L880.192 682.726 L879.633 682.726 L879.074 682.726 L878.515 682.726 L877.955 682.726 L877.396 682.726 L876.837 682.726 L876.278 682.726 L875.718 682.726 L875.159 682.726 L874.6 682.726 L874.041 682.726 L873.481 682.726 L872.922 682.726 L872.363 682.726 L871.804 682.726 L871.244 682.726 L870.685 682.726 L870.126 682.726 L869.567 682.726 L869.007 682.726 L868.448 682.726 L867.889 682.726 L867.33 682.726 L866.77 682.726 L866.211 682.726 L865.652 682.726 L865.093 682.726 L864.533 682.726 L863.974 682.726 L863.415 682.726 L862.856 682.726 L862.296 682.726 L861.737 682.726 L861.178 682.726 L860.619 682.726 L860.059 682.726 L859.5 682.726 L858.941 682.726 L858.382 682.726 L857.822 682.726 L857.263 682.726 L856.704 682.726 L856.145 682.726 L855.585 682.726 L855.026 682.726 L854.467 682.726 L853.908 682.726 L853.348 682.726 L852.789 682.726 L852.23 682.726 L851.671 682.726 L851.111 682.726 L850.552 682.726 L849.993 682.726 L849.434 682.726 L848.874 682.726 L848.315 682.726 L847.756 682.726 L847.197 682.726 L846.637 682.726 L846.078 682.726 L845.519 682.726 L844.96 682.726 L844.4 682.726 L843.841 682.726 L843.282 682.726 L842.723 682.726 L842.163 682.726 L841.604 682.726 L841.045 682.726 L840.486 682.726 L839.926 682.726 L839.367 682.726 L838.808 682.726 L838.249 682.726 L837.689 682.726 L837.13 682.726 L836.571 682.726 L836.012 682.726 L835.452 682.726 L834.893 682.726 L834.334 682.726 L833.775 682.726 L833.215 682.726 L832.656 682.726 L832.097 682.726 L831.538 682.726 L830.978 682.726 L830.419 682.726 L829.86 682.726 L829.301 682.726 L828.741 682.726 L828.182 682.726 L827.623 682.726 L827.064 682.726 L826.504 682.726 L825.945 682.726 L825.386 682.726 L824.827 682.726 L824.267 682.726 L823.708 682.726 L823.149 682.726 L822.59 682.726 L822.03 682.726 L821.471 682.726 L820.912 682.726 L820.353 682.726 L819.793 682.726 L819.234 682.726 L818.675 682.726 L818.116 682.726 L817.556 682.726 L816.997 682.726 L816.438 682.726 L815.879 682.726 L815.319 682.726 L814.76 682.726 L814.201 682.726 L813.642 682.726 L813.082 682.726 L812.523 682.726 L811.964 682.726 L811.405 682.726 L810.845 682.726 L810.286 682.726 L809.727 682.726 L809.168 682.726 L808.608 682.726 L808.049 682.726 L807.49 682.726 L806.931 682.726 L806.371 682.726 L805.812 682.726 L805.253 682.726 L804.693 682.726 L804.134 682.726 L803.575 682.726 L803.016 682.726 L802.456 682.726 L801.897 682.726 L801.338 682.726 L800.779 682.726 L800.219 682.726 L799.66 682.726 L799.101 682.726 L798.542 682.726 L797.982 682.726 L797.423 682.726 L796.864 682.726 L796.305 682.726 L795.745 682.726 L795.186 682.726 L794.627 682.726 L794.068 682.726 L793.508 682.726 L792.949 682.726 L792.39 682.726 L791.831 682.726 L791.271 682.726 L790.712 682.726 L790.153 682.726 L789.594 682.726 L789.034 682.726 L788.475 682.726 L787.916 682.726 L787.357 682.726 L786.797 682.726 L786.238 682.726 L785.679 682.726 L785.12 682.726 L784.56 682.726 L784.001 682.726 L783.442 682.726 L782.883 682.726 L782.323 682.726 L781.764 682.726 L781.205 682.726 L780.646 682.726 L780.086 682.726 L779.527 682.726 L778.968 682.726 L778.409 682.726 L777.849 682.726 L777.29 682.726 L776.731 682.726 L776.172 682.726 L775.612 682.726 L775.053 682.726 L774.494 682.726 L773.935 682.726 L773.375 682.726 L772.816 682.726 L772.257 682.726 L771.698 682.726 L771.138 682.726 L770.579 682.726 L770.02 682.726 L769.461 682.726 L768.901 682.726 L768.342 682.726 L767.783 682.726 L767.224 682.726 L766.664 682.726 L766.105 682.726 L765.546 682.726 L764.987 682.726 L764.427 682.726 L763.868 682.726 L763.309 682.726 L762.75 682.726 L762.19 682.726 L761.631 682.726 L761.072 682.726 L760.513 682.726 L759.953 682.726 L759.394 682.726 L758.835 682.726 L758.276 682.726 L757.716 682.726 L757.157 682.726 L756.598 682.726 L756.039 682.726 L755.479 682.726 L754.92 682.726 L754.361 682.726 L753.802 682.726 L753.242 682.726 L752.683 682.726 L752.124 682.726 L751.565 682.726 L751.005 682.726 L750.446 682.726 L749.887 682.726 L749.328 682.726 L748.768 682.726 L748.209 682.726 L747.65 682.726 L747.091 682.726 L746.531 682.726 L745.972 682.726 L745.413 682.726 L744.854 682.726 L744.294 682.726 L743.735 682.726 L743.176 682.726 L742.617 682.726 L742.057 682.726 L741.498 682.726 L740.939 682.726 L740.38 682.726 L739.82 682.726 L739.261 682.726 L738.702 682.726 L738.143 682.726 L737.583 682.726 L737.024 682.726 L736.465 682.726 L735.906 682.726 L735.346 682.726 L734.787 682.726 L734.228 682.726 L733.669 682.726 L733.109 682.726 L732.55 682.726 L731.991 682.726 L731.432 682.726 L730.872 682.726 L730.313 682.726 L729.754 682.726 L729.195 682.726 L728.635 682.726 L728.076 682.726 L727.517 682.726 L726.958 682.726 L726.398 682.726 L725.839 682.726 L725.28 682.726 L724.721 682.726 L724.161 682.726 L723.602 682.726 L723.043 682.726 L722.484 682.726 L721.924 682.726 L721.365 682.726 L720.806 682.726 L720.247 682.726  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.54 720.806,683.54 721.365,683.54 721.924,683.54 722.484,683.54 723.043,683.54 723.602,683.54 724.161,683.54 724.721,683.54 725.28,683.54 725.839,683.54 726.398,683.54 726.958,683.54 727.517,683.54 728.076,683.54 728.635,683.54 729.195,683.54 729.754,683.54 730.313,683.54 730.872,683.54 731.432,683.54 731.991,683.54 732.55,683.54 733.109,683.54 733.669,683.54 734.228,683.54 734.787,683.54 735.346,683.54 735.906,683.54 736.465,683.54 737.024,683.54 737.583,683.54 738.143,683.54 738.702,683.54 739.261,683.54 739.82,683.54 740.38,683.54 740.939,683.54 741.498,683.54 742.057,683.54 742.617,683.54 743.176,683.54 743.735,683.54 744.294,683.54 744.854,683.54 745.413,683.54 745.972,683.54 746.531,683.54 747.091,683.54 747.65,683.54 748.209,683.54 748.768,683.54 749.328,683.54 749.887,683.54 750.446,683.54 751.005,683.54 751.565,683.54 752.124,683.54 752.683,683.54 753.242,683.54 753.802,683.54 754.361,683.54 754.92,683.54 755.479,683.54 756.039,683.54 756.598,683.54 757.157,683.54 757.716,683.54 758.276,683.54 758.835,683.54 759.394,683.54 759.953,683.54 760.513,683.54 761.072,683.54 761.631,683.54 762.19,683.54 762.75,683.54 763.309,683.54 763.868,683.54 764.427,683.54 764.987,683.54 765.546,683.54 766.105,683.54 766.664,683.54 767.224,683.54 767.783,683.54 768.342,683.54 768.901,683.54 769.461,683.54 770.02,683.54 770.579,683.54 771.138,683.54 771.698,683.54 772.257,683.54 772.816,683.54 773.375,683.54 773.935,683.54 774.494,683.54 775.053,683.54 775.612,683.54 776.172,683.54 776.731,683.54 777.29,683.54 777.849,683.54 778.409,683.54 778.968,683.54 779.527,683.54 780.086,683.54 780.646,683.54 781.205,683.54 781.764,683.54 782.323,683.54 782.883,683.54 783.442,683.54 784.001,683.54 784.56,683.54 785.12,683.54 785.679,683.54 786.238,683.54 786.797,683.54 787.357,683.54 787.916,683.54 788.475,683.54 789.034,683.54 789.594,683.54 790.153,683.54 790.712,683.54 791.271,683.54 791.831,683.54 792.39,683.54 792.949,683.54 793.508,683.54 794.068,683.54 794.627,683.54 795.186,683.54 795.745,683.54 796.305,683.54 796.864,683.54 797.423,683.54 797.982,683.54 798.542,683.54 799.101,683.54 799.66,683.54 800.219,683.54 800.779,683.54 801.338,683.54 801.897,683.54 802.456,683.54 803.016,683.54 803.575,683.54 804.134,683.54 804.693,683.54 805.253,683.54 805.812,683.54 806.371,683.54 806.931,683.54 807.49,683.54 808.049,683.54 808.608,683.54 809.168,683.54 809.727,683.54 810.286,683.54 810.845,683.54 811.405,683.54 811.964,683.54 812.523,683.54 813.082,683.54 813.642,683.54 814.201,683.54 814.76,683.54 815.319,683.54 815.879,683.54 816.438,683.54 816.997,683.54 817.556,683.54 818.116,683.54 818.675,683.54 819.234,683.54 819.793,683.54 820.353,683.54 820.912,683.54 821.471,683.54 822.03,683.54 822.59,683.54 823.149,683.54 823.708,683.54 824.267,683.54 824.827,683.54 825.386,683.54 825.945,683.54 826.504,683.54 827.064,683.54 827.623,683.54 828.182,683.54 828.741,683.54 829.301,683.54 829.86,683.54 830.419,683.54 830.978,683.54 831.538,683.54 832.097,683.54 832.656,683.54 833.215,683.54 833.775,683.54 834.334,683.54 834.893,683.54 835.452,683.54 836.012,683.54 836.571,683.54 837.13,683.54 837.689,683.54 838.249,683.54 838.808,683.54 839.367,683.54 839.926,683.54 840.486,683.54 841.045,683.54 841.604,683.54 842.163,683.54 842.723,683.54 843.282,683.54 843.841,683.54 844.4,683.54 844.96,683.54 845.519,683.54 846.078,683.54 846.637,683.54 847.197,683.54 847.756,683.54 848.315,683.54 848.874,683.54 849.434,683.54 849.993,683.54 850.552,683.54 851.111,683.54 851.671,683.54 852.23,683.54 852.789,683.54 853.348,683.54 853.908,683.54 854.467,683.54 855.026,683.54 855.585,683.54 856.145,683.54 856.704,683.54 857.263,683.54 857.822,683.54 858.382,683.54 858.941,683.54 859.5,683.54 860.059,683.54 860.619,683.54 861.178,683.54 861.737,683.54 862.296,683.54 862.856,683.54 863.415,683.54 863.974,683.54 864.533,683.54 865.093,683.54 865.652,683.54 866.211,683.54 866.77,683.54 867.33,683.54 867.889,683.54 868.448,683.54 869.007,683.54 869.567,683.54 870.126,683.54 870.685,683.54 871.244,683.54 871.804,683.54 872.363,683.54 872.922,683.54 873.481,683.54 874.041,683.54 874.6,683.54 875.159,683.54 875.718,683.54 876.278,683.54 876.837,683.54 877.396,683.54 877.955,683.54 878.515,683.54 879.074,683.54 879.633,683.54 880.192,683.54 880.752,683.54 881.311,683.54 881.87,683.54 882.429,683.54 882.989,683.54 883.548,683.54 884.107,683.54 884.666,683.54 885.226,683.54 885.785,683.54 886.344,683.54 886.903,683.54 887.463,683.54 888.022,683.54 888.581,683.54 889.14,683.54 889.7,683.54 890.259,683.54 890.818,683.54 891.377,683.54 891.937,683.54 892.496,683.54 893.055,683.54 893.614,683.54 894.174,683.54 894.733,683.54 895.292,683.54 895.851,683.54 896.411,683.54 896.97,683.54 897.529,683.54 898.088,683.54 898.648,683.54 899.207,683.54 899.766,683.54 900.325,683.54 900.885,683.54 901.444,683.54 902.003,683.54 902.562,683.54 903.122,683.54 903.681,683.54 904.24,683.54 904.799,683.54 905.359,683.54 905.918,683.54 906.477,683.54 907.036,683.54 907.596,683.54 908.155,683.54 908.714,683.54 909.273,683.54 909.833,683.54 910.392,683.54 910.951,683.54 911.51,683.54 912.07,683.54 912.629,683.54 913.188,683.54 913.747,683.54 914.307,683.54 914.866,683.54 915.425,683.54 915.984,683.54 916.544,683.54 917.103,683.54 917.662,683.54 918.221,683.54 918.781,683.54 919.34,683.54 919.899,683.54 920.458,683.54 921.018,683.54 921.577,683.54 922.136,683.54 922.695,683.54 923.255,683.54 923.814,683.54 924.373,683.54 924.932,683.54 925.492,683.54 926.051,683.54 926.61,683.54 927.169,683.54 927.729,683.54 928.288,683.54 928.847,683.54 929.406,683.54 929.966,683.54 930.525,683.54 931.084,683.54 931.644,683.54 932.203,683.54 932.762,683.54 933.321,683.54 933.881,683.54 934.44,683.54 934.999,683.54 935.558,683.54 936.118,683.54 936.677,683.54 937.236,683.54 937.795,683.54 938.355,683.54 938.914,683.54 939.473,683.54 940.032,683.54 940.592,683.54 941.151,683.54 941.71,683.54 942.269,683.54 942.829,683.54 943.388,683.54 943.947,683.54 944.506,683.54 945.066,683.54 945.625,683.54 946.184,683.54 946.743,683.54 947.303,683.54 947.862,683.54 948.421,683.54 948.98,683.54 949.54,683.54 950.099,683.54 950.658,683.54 951.217,683.54 951.777,683.54 952.336,683.54 952.895,683.54 953.454,683.54 954.014,683.54 954.573,683.54 955.132,683.54 955.691,683.54 956.251,683.54 956.81,683.54 957.369,683.54 957.928,683.54 958.488,683.54 959.047,683.54 959.606,683.54 960.165,683.54 960.725,683.54 961.284,683.54 961.843,683.54 962.402,683.54 962.962,683.54 963.521,683.54 964.08,683.54 964.639,683.54 965.199,683.54 965.758,683.54 966.317,683.54 966.876,683.54 967.436,683.54 967.995,683.54 968.554,683.54 969.113,683.54 969.673,683.54 970.232,683.54 970.791,683.54 971.35,683.54 971.91,683.54 972.469,683.54 973.028,683.54 973.587,683.54 974.147,683.54 974.706,683.54 975.265,683.54 975.824,683.54 976.384,683.54 976.943,683.54 977.502,683.54 978.061,683.54 978.621,683.54 979.18,683.54 979.739,683.54 980.298,683.54 980.858,683.54 981.417,683.54 981.976,683.54 982.535,683.54 983.095,683.54 983.654,683.54 984.213,683.54 984.772,683.54 985.332,683.54 985.891,683.54 986.45,683.54 987.009,683.54 987.569,683.54 988.128,683.54 988.687,683.54 989.246,683.54 989.806,683.54 990.365,683.54 990.924,683.54 991.483,683.54 992.043,683.54 992.602,683.54 993.161,683.54 993.72,683.54 994.28,683.54 994.839,683.54 995.398,683.54 995.957,683.54 996.517,683.54 997.076,683.54 997.635,683.54 998.194,683.54 998.754,683.54 999.313,683.54 999.872,683.54 1000.43,683.54 1000.99,683.54 1001.55,683.54 1002.11,683.54 1002.67,683.54 1003.23,683.54 1003.79,683.54 1004.35,683.54 1004.91,683.54 1005.46,683.54 1006.02,683.54 1006.58,683.54 1007.14,683.54 1007.7,683.54 1008.26,683.54 1008.82,683.54 1009.38,683.54 1009.94,683.54 1010.5,683.54 1011.06,683.54 1011.62,683.54 1012.18,683.54 1012.73,683.54 1013.29,683.54 1013.85,683.54 1014.41,683.54 1014.97,683.54 1015.53,683.54 1016.09,683.54 1016.65,683.54 1017.21,683.54 1017.77,683.54 1018.33,683.54 1018.89,683.54 1019.45,683.54 1020.01,683.54 1020.56,683.54 1021.12,683.54 1021.68,683.54 1022.24,683.54 1022.8,683.54 1023.36,683.54 1023.92,683.54 1024.48,683.54 1025.04,683.54 1025.6,683.54 1026.16,683.54 1026.72,683.54 1027.28,683.54 1027.83,683.54 1028.39,683.54 1028.95,683.54 1029.51,683.54 1030.07,683.54 1030.63,683.54 1031.19,683.54 1031.75,683.54 1032.31,683.54 1032.87,683.54 1033.43,683.54 1033.99,683.54 1034.55,683.54 1035.1,683.54 1035.66,683.54 1036.22,683.54 1036.78,683.54 1037.34,683.54 1037.9,683.54 1038.46,683.54 1039.02,683.54 1039.58,683.54 1040.14,683.54 1040.7,683.54 1041.26,683.54 1041.82,683.54 1042.38,683.54 1042.93,683.54 1043.49,683.54 1044.05,683.54 1044.61,683.54 1045.17,683.54 1045.73,683.54 1046.29,683.54 1046.85,683.54 1047.41,683.54 1047.97,683.54 1048.53,683.54 1049.09,683.54 1049.65,683.54 1050.2,683.54 1050.76,683.54 1051.32,683.54 1051.88,683.54 1052.44,683.54 1053,683.54 1053.56,683.54 1054.12,683.54 1054.68,683.54 1055.24,683.54 1055.8,683.54 1056.36,683.54 1056.92,683.54 1057.48,683.54 1058.03,683.54 1058.59,683.54 1059.15,683.54 1059.71,683.54 1060.27,683.54 1060.83,683.54 1061.39,683.54 1061.95,683.54 1062.51,683.54 1063.07,683.54 1063.63,683.54 1064.19,683.54 1064.75,683.54 1065.3,683.54 1065.86,683.54 1066.42,683.54 1066.98,683.54 1067.54,683.54 1068.1,683.54 1068.66,683.54 1069.22,683.54 1069.78,683.54 1070.34,683.54 1070.9,683.54 1071.46,683.54 1072.02,683.54 1072.57,683.54 1073.13,683.54 1073.69,683.54 1074.25,683.54 1074.81,683.54 1075.37,683.54 1075.93,683.54 1076.49,683.54 1077.05,683.54 1077.61,683.54 1078.17,683.54 1078.73,683.54 1079.29,683.54 1079.85,683.54 1080.4,683.54 1080.96,683.54 1081.52,683.54 1082.08,683.54 1082.64,683.54 1083.2,683.54 1083.76,683.54 1084.32,683.54 1084.88,683.54 1085.44,683.54 1086,683.54 1086.56,683.54 1087.12,683.54 1087.67,683.54 1088.23,683.54 1088.79,683.54 1089.35,683.54 1089.91,683.54 1090.47,683.54 1091.03,683.54 1091.59,683.54 1092.15,683.54 1092.71,683.54 1093.27,683.54 1093.83,683.54 1094.39,683.54 1094.94,683.54 1095.5,683.54 1096.06,683.54 1096.62,683.54 1097.18,683.54 1097.74,683.54 1098.3,683.54 1098.86,683.54 1099.42,683.54 1099.98,683.54 1100.54,683.54 1101.1,683.54 1101.66,683.54 1102.22,683.54 1102.77,683.54 1103.33,683.54 1103.89,683.54 1104.45,683.54 1105.01,683.54 1105.57,683.54 1106.13,683.54 1106.69,683.54 1107.25,683.54 1107.81,683.54 1108.37,683.54 1108.93,683.54 1109.49,683.54 1110.04,683.54 1110.6,683.54 1111.16,683.54 1111.72,683.54 1112.28,683.54 1112.84,683.54 1113.4,683.54 1113.96,683.54 1114.52,683.54 1115.08,683.54 1115.64,683.54 1116.2,683.54 1116.76,683.54 1117.31,683.54 1117.87,683.54 1118.43,683.54 1118.99,683.54 1119.55,683.54 1120.11,683.54 1120.67,683.54 1121.23,683.54 1121.79,683.54 1122.35,683.54 1122.91,683.54 1123.47,683.54 1124.03,683.54 1124.59,683.54 1125.14,683.54 1125.7,683.54 1126.26,683.54 1126.82,683.54 1127.38,683.54 1127.94,683.54 1128.5,683.54 1129.06,683.54 1129.62,683.54 1130.18,683.54 1130.74,683.54 1131.3,683.54 1131.86,683.54 1132.41,683.54 1132.97,683.54 1133.53,683.54 1134.09,683.54 1134.65,683.54 1135.21,683.54 1135.77,683.54 1136.33,683.54 1136.89,683.54 1137.45,683.54 1138.01,683.54 1138.57,683.54 1139.13,683.54 1139.68,683.54 1140.24,683.54 1140.8,683.54 1141.36,683.54 1141.92,683.54 1142.48,683.54 1143.04,683.54 1143.6,683.54 1144.16,683.54 1144.72,683.54 1145.28,683.54 1145.84,683.54 1146.4,683.54 1146.96,683.54 1147.51,683.54 1148.07,683.54 1148.63,683.54 1149.19,683.54 1149.75,683.54 1150.31,683.54 1150.87,683.54 1151.43,683.54 1151.99,683.54 1152.55,683.54 1153.11,683.54 1153.67,683.54 1154.23,683.54 1154.78,683.54 1155.34,683.54 1155.9,683.54 1156.46,683.54 1157.02,683.54 1157.58,683.54 1158.14,683.54 1158.7,683.54 1159.26,683.54 1159.82,683.54 1160.38,683.54 1160.94,683.54 1161.5,683.54 1162.05,683.54 1162.61,683.54 1163.17,683.54 1163.73,683.54 1164.29,683.54 1164.85,683.54 1165.41,683.54 1165.97,683.54 1166.53,683.54 1167.09,683.54 1167.65,683.54 1168.21,683.54 1168.77,683.54 1169.33,683.54 1169.88,683.54 1170.44,683.54 1171,683.54 1171.56,683.54 1172.12,683.54 1172.68,683.54 1173.24,683.54 1173.8,683.54 1174.36,683.54 1174.92,683.54 1175.48,683.54 1176.04,683.54 1176.6,683.54 1177.15,683.54 1177.71,683.54 1178.27,683.54 1178.83,683.54 1179.39,683.54 1179.95,683.54 1180.51,683.54 1181.07,683.54 1181.63,683.54 1182.19,683.54 1182.75,683.54 1183.31,683.54 1183.87,683.54 1184.43,683.54 1184.98,683.54 1185.54,683.54 1186.1,683.54 1186.66,683.54 1187.22,683.54 1187.78,683.54 1188.34,683.54 1188.9,683.54 1189.46,683.54 1190.02,683.54 1190.58,683.54 1191.14,683.54 1191.7,683.54 1192.25,683.54 1192.81,683.54 1193.37,683.54 1193.93,683.54 1194.49,683.54 1195.05,683.54 1195.61,683.54 1196.17,683.54 1196.73,683.54 1197.29,683.54 1197.85,683.54 1198.41,683.54 1198.97,683.54 1199.52,683.54 1200.08,683.54 1200.64,683.54 1201.2,683.54 1201.76,683.54 1202.32,683.54 1202.88,683.54 1203.44,683.54 1204,683.54 1204.56,683.54 1205.12,683.54 1205.68,683.54 1206.24,683.54 1206.8,683.54 1207.35,683.54 1207.91,683.54 1208.47,683.54 1209.03,683.54 1209.59,683.54 1210.15,683.54 1210.71,683.54 1211.27,683.54 1211.83,683.54 1212.39,683.54 1212.95,683.54 1213.51,683.54 1214.07,683.54 1214.62,683.54 1215.18,683.54 1215.74,683.54 1216.3,683.54 1216.86,683.54 1217.42,683.54 1217.98,683.54 1218.54,683.54 1219.1,683.54 1219.66,683.54 1220.22,683.54 1220.78,683.54 1221.34,683.54 1221.89,683.54 1222.45,683.54 1223.01,683.54 1223.57,683.54 1224.13,683.54 1224.69,683.54 1225.25,683.54 1225.81,683.54 1226.37,683.54 1226.93,683.54 1227.49,683.54 1228.05,683.54 1228.61,683.54 1229.17,683.54 1229.72,683.54 1230.28,683.54 1230.84,683.54 1231.4,683.54 1231.96,683.54 1232.52,683.54 1233.08,683.54 1233.64,683.54 1234.2,683.54 1234.76,683.54 1235.32,683.54 1235.88,683.54 1236.44,683.54 1236.99,683.54 1237.55,683.54 1238.11,683.54 1238.67,683.54 1239.23,683.54 1239.79,683.54 1240.35,683.54 1240.91,683.54 1241.47,683.54 1242.03,683.54 1242.59,683.54 1243.15,683.54 1243.71,683.54 1244.26,683.54 1244.82,683.54 1245.38,683.54 1245.94,683.54 1246.5,683.54 1247.06,683.54 1247.62,683.54 1248.18,683.54 1248.74,683.54 1249.3,683.54 1249.86,683.54 1250.42,683.54 1250.98,683.54 1251.54,683.54 1252.09,683.54 1252.65,683.54 1253.21,683.54 1253.77,683.54 1254.33,683.54 1254.89,683.54 1255.45,683.54 1256.01,683.54 1256.57,683.54 1257.13,683.54 1257.69,683.54 1258.25,683.54 1258.81,683.54 1259.36,683.54 1259.92,683.54 1260.48,683.54 1261.04,683.54 1261.6,683.54 1262.16,683.54 1262.72,683.54 1263.28,683.54 1263.84,683.54 1264.4,683.54 1264.96,683.54 1265.52,683.54 1266.08,683.54 1266.63,683.54 1267.19,683.54 1267.75,683.54 1268.31,683.54 1268.87,683.54 1269.43,683.54 1269.99,683.54 1270.55,683.54 1271.11,683.54 1271.67,683.54 1272.23,683.54 1272.79,683.54 1273.35,683.54 1273.91,683.54 1274.46,683.54 1275.02,683.54 1275.58,683.54 1276.14,683.54 1276.7,683.54 1277.26,683.54 1277.82,683.54 1278.38,683.54 1278.94,683.54 1279.5,683.54 1280.06,683.54 1280.62,683.54 1281.18,683.54 1281.73,683.54 1282.29,683.54 1282.85,683.54 1283.41,683.54 1283.97,683.54 1284.53,683.54 1285.09,683.54 1285.65,683.54 1286.21,683.54 1286.77,683.54 1287.33,683.54 1287.89,683.54 1288.45,683.54 1289,683.54 1289.56,683.54 1290.12,683.54 1290.68,683.54 1291.24,683.54 1291.8,683.54 1292.36,683.54 1292.92,683.54 1293.48,683.54 1294.04,683.54 1294.6,683.54 1295.16,683.54 1295.72,683.54 1296.28,683.54 1296.83,683.54 1297.39,683.54 1297.95,683.54 1298.51,683.54 1299.07,683.54 1299.63,683.54 1300.19,683.54 1300.75,683.54 1301.31,683.54 1301.87,683.54 1302.43,683.54 1302.99,683.54 1303.55,683.54 1304.1,683.54 1304.66,683.54 1305.22,683.54 1305.78,683.54 1306.34,683.54 1306.9,683.54 1307.46,683.54 1308.02,683.54 1308.58,683.54 1309.14,683.54 1309.7,683.54 1310.26,683.54 1310.82,683.54 1311.38,683.54 1311.93,683.54 1312.49,683.54 1313.05,683.54 1313.61,683.54 1314.17,683.54 1314.73,683.54 1315.29,683.54 1315.85,683.54 1316.41,683.54 1316.97,683.54 1317.53,683.54 1318.09,683.54 1318.65,683.54 1319.2,683.54 1319.76,683.54 1320.32,683.54 1320.88,683.54 1321.44,683.54 1322,683.54 1322.56,683.54 1323.12,683.54 1323.68,683.54 1324.24,683.54 1324.8,683.54 1325.36,683.54 1325.92,683.54 1326.47,683.54 1327.03,683.54 1327.59,683.54 1328.15,683.54 1328.71,683.54 1329.27,683.54 1329.83,683.54 1330.39,683.54 1330.95,683.54 1331.51,683.54 1332.07,683.54 1332.63,683.54 1333.19,683.54 1333.75,683.54 1334.3,683.54 1334.86,683.54 1335.42,683.54 1335.98,683.54 1336.54,683.54 1337.1,683.54 1337.66,683.54 1338.22,683.54 1338.78,683.54 1339.34,683.54 1339.9,683.54 1340.46,683.54 1341.02,683.54 1341.57,683.54 1342.13,683.54 1342.69,683.54 1343.25,683.54 1343.81,683.54 1344.37,683.54 1344.93,683.54 1345.49,683.54 1346.05,683.54 1346.61,683.54 1347.17,683.54 1347.73,683.54 1348.29,683.54 1348.84,683.54 1349.4,683.54 1349.96,683.54 1350.52,683.54 1351.08,683.54 1351.64,683.54 1352.2,683.54 1352.76,683.54 1353.32,683.54 1353.88,683.54 1354.44,683.54 1355,683.54 1355.56,683.54 1356.12,683.54 1356.67,683.54 1357.23,683.54 1357.79,683.54 1358.35,683.54 1358.91,683.54 1359.47,683.54 1360.03,683.54 1360.59,683.54 1361.15,683.54 1361.71,683.54 1362.27,683.54 1362.83,683.54 1363.39,683.54 1363.94,683.54 1364.5,683.54 1365.06,683.54 1365.62,683.54 1366.18,683.54 1366.74,683.54 1367.3,683.54 1367.86,683.54 1368.42,683.54 1368.98,683.54 1369.54,683.54 1370.1,683.54 1370.66,683.54 1371.21,683.54 1371.77,683.54 1372.33,683.54 1372.89,683.54 1373.45,683.54 1374.01,683.54 1374.57,683.54 1375.13,683.54 1375.69,683.54 1376.25,683.54 1376.81,683.54 1377.37,683.54 1377.93,683.54 1378.49,683.54 1379.04,683.54 1379.6,683.54 1380.16,683.54 1380.72,683.54 1381.28,683.54 1381.84,683.54 1382.4,683.54 1382.96,683.54 1383.52,683.54 1384.08,683.54 1384.64,683.54 1385.2,683.54 1385.76,683.54 1386.31,683.54 1386.87,683.54 1387.43,683.54 1387.99,683.54 1388.55,683.54 1389.11,683.54 1389.67,683.54 1390.23,683.54 1390.79,683.54 1391.35,683.54 1391.91,683.54 1392.47,683.54 1393.03,683.54 1393.58,683.54 1394.14,683.54 1394.7,683.54 1395.26,683.54 1395.82,683.54 1396.38,683.54 1396.94,683.54 1397.5,683.54 1398.06,683.54 1398.62,683.54 1399.18,683.54 1399.74,683.54 1400.3,683.54 1400.86,683.54 1401.41,683.54 1401.97,683.54 1402.53,683.54 1403.09,683.54 1403.65,683.54 1404.21,683.54 1404.77,683.54 1405.33,683.54 1405.89,683.54 1406.45,683.54 1407.01,683.54 1407.57,683.54 1408.13,683.54 1408.68,683.54 1409.24,683.54 1409.8,683.54 1410.36,683.54 1410.92,683.54 1411.48,683.54 1412.04,683.54 1412.6,683.54 1413.16,683.54 1413.72,683.54 1414.28,683.54 1414.84,683.54 1415.4,683.54 1415.95,683.54 1416.51,683.54 1417.07,683.54 1417.63,683.54 1418.19,683.54 1418.75,683.54 1419.31,683.54 1419.87,683.54 1420.43,683.54 1420.99,683.54 1421.55,683.54 1422.11,683.54 1422.67,683.54 1423.23,683.54 1423.78,683.54 1424.34,683.54 1424.9,683.54 1425.46,683.54 1426.02,683.54 1426.58,683.54 1427.14,683.54 1427.7,683.54 1428.26,683.54 1428.82,683.54 1429.38,683.54 1429.94,683.54 1430.5,683.54 1431.05,683.54 1431.61,683.54 1432.17,683.54 1432.73,683.54 1433.29,683.54 1433.85,683.54 1434.41,683.54 1434.97,683.54 1435.53,683.54 1436.09,683.54 1436.65,683.54 1437.21,683.54 1437.77,683.54 1438.33,683.54 1438.88,683.54 1439.44,683.54 1440,683.54 1440.56,683.54 1441.12,683.54 1441.68,683.54 1442.24,683.54 1442.8,683.54 1443.36,683.54 1443.92,683.54 1444.48,683.54 1445.04,683.54 1445.6,683.54 1446.15,683.54 1446.71,683.54 1447.27,683.54 1447.83,683.54 1448.39,683.54 1448.95,683.54 1449.51,683.54 1450.07,683.54 1450.63,683.54 1451.19,683.54 1451.75,683.54 1452.31,683.54 1452.87,683.54 1453.42,683.54 1453.98,683.54 1454.54,683.54 1455.1,683.54 1455.66,683.54 1456.22,683.54 1456.78,683.54 1457.34,683.54 1457.9,683.54 1458.46,683.54 1459.02,683.54 1459.58,683.54 1460.14,683.54 1460.7,683.54 1461.25,683.54 1461.81,683.54 1462.37,683.54 1462.93,683.54 1463.49,683.54 1464.05,683.54 1464.61,683.54 1465.17,683.54 1465.73,683.54 1466.29,683.54 1466.85,683.54 1467.41,683.54 1467.97,683.54 1468.52,683.54 1469.08,683.54 1469.64,683.54 1470.2,683.54 1470.76,683.54 1471.32,683.54 1471.88,683.54 1472.44,683.54 1473,683.54 1473.56,683.54 1474.12,683.54 1474.68,683.54 1475.24,683.54 1475.79,683.54 1476.35,683.54 1476.91,683.54 1477.47,683.54 1478.03,683.54 1478.59,683.54 1479.15,683.54 1479.71,683.54 1480.27,683.54 1480.83,683.54 1481.39,683.54 1481.95,683.54 1482.51,683.54 1483.07,683.54 1483.62,683.54 1484.18,683.54 1484.74,683.54 1485.3,683.54 1485.86,683.54 1486.42,683.54 1486.98,683.54 1487.54,683.54 1488.1,683.54 1488.66,683.54 1489.22,683.54 1489.78,683.54 1490.34,683.54 1490.89,683.54 1491.45,683.54 1492.01,683.54 1492.57,683.54 1493.13,683.54 1493.69,683.54 1494.25,683.54 1494.81,683.54 1495.37,683.54 1495.93,683.54 1496.49,683.54 1497.05,683.54 1497.61,683.54 1498.16,683.54 1498.72,683.54 1499.28,683.54 1499.84,683.54 1500.4,683.54 1500.96,683.54 1501.52,683.54 1502.08,683.54 1502.64,683.54 1503.2,683.54 1503.76,683.54 1504.32,683.54 1504.88,683.54 1505.44,683.54 1505.99,683.54 1506.55,683.54 1507.11,683.54 1507.67,683.54 1508.23,683.54 1508.79,683.54 1509.35,683.54 1509.91,683.54 1510.47,683.54 1511.03,683.54 1511.59,683.54 1512.15,683.54 1512.71,683.54 1513.26,683.54 1513.82,683.54 1514.38,683.54 1514.94,683.54 1515.5,683.54 1516.06,683.54 1516.62,683.54 1517.18,683.54 1517.74,683.54 1518.3,683.54 1518.86,683.54 1519.42,683.54 1519.98,683.54 1520.53,683.54 1521.09,683.54 1521.65,683.54 1522.21,683.54 1522.77,683.54 1523.33,683.54 1523.89,683.54 1524.45,683.54 1525.01,683.54 1525.57,683.54 1526.13,683.54 1526.69,683.54 1527.25,683.54 1527.81,683.54 1528.36,683.54 1528.92,683.54 1529.48,683.54 1530.04,683.54 1530.6,683.54 1531.16,683.54 1531.72,683.54 1532.28,683.54 1532.84,683.54 1533.4,683.54 1533.96,683.54 1534.52,683.54 1535.08,683.54 1535.63,683.54 1536.19,683.54 1536.75,683.54 1537.31,683.54 1537.87,683.54 1538.43,683.54 1538.99,683.54 1539.55,683.54 1540.11,683.54 1540.67,683.54 1541.23,683.54 1541.79,683.54 1542.35,683.54 1542.9,683.54 1543.46,683.54 1544.02,683.54 1544.58,683.54 1545.14,683.54 1545.7,683.54 1546.26,683.54 1546.82,683.54 1547.38,683.54 1547.94,683.54 1548.5,683.54 1549.06,683.54 1549.62,683.54 1550.18,683.54 1550.73,683.54 1551.29,683.54 1551.85,683.54 1552.41,683.54 1552.97,683.54 1553.53,683.54 1554.09,683.54 1554.65,683.54 1555.21,683.54 1555.77,683.54 1556.33,683.54 1556.89,683.54 1557.45,683.54 1558,683.54 1558.56,683.54 1559.12,683.54 1559.68,683.54 1560.24,683.54 1560.8,683.54 1561.36,683.54 1561.92,683.54 1562.48,683.54 1563.04,683.54 1563.6,683.54 1564.16,683.54 1564.72,683.54 1565.28,683.54 1565.83,683.54 1566.39,683.54 1566.95,683.54 1567.51,683.54 1568.07,683.54 1568.63,683.54 1569.19,683.54 1569.75,683.54 1570.31,683.54 1570.87,683.54 1571.43,683.54 1571.99,683.54 1572.55,683.54 1573.1,683.54 1573.66,683.54 1574.22,683.54 1574.78,683.54 1575.34,683.54 1575.9,683.54 1576.46,683.54 1577.02,683.54 1577.58,683.54 1578.14,683.54 1578.7,683.54 1579.26,683.54 1579.82,683.54 1580.37,683.54 1580.93,683.54 1581.49,683.54 1582.05,683.54 1582.61,683.54 1583.17,683.54 1583.73,683.54 1584.29,683.54 1584.85,683.54 1585.41,683.54 1585.97,683.54 1586.53,683.54 1587.09,683.54 1587.65,683.54 1588.2,683.54 1588.76,683.54 1589.32,683.54 1589.88,683.54 1590.44,683.54 1591,683.54 1591.56,683.54 1592.12,683.54 1592.68,683.54 1593.24,683.54 1593.8,683.54 1594.36,683.54 1594.92,683.54 1595.47,683.54 1596.03,683.54 1596.59,683.54 1597.15,683.54 1597.71,683.54 1598.27,683.54 1598.83,683.54 1599.39,683.54 1599.95,683.54 1600.51,683.54 1601.07,683.54 1601.63,683.54 1602.19,683.54 1602.74,683.54 1603.3,683.54 1603.86,683.54 1604.42,683.54 1604.98,683.54 1605.54,683.54 1606.1,683.54 1606.66,683.54 1607.22,683.54 1607.78,683.54 1608.34,683.54 1608.9,683.54 1609.46,683.54 1610.02,683.54 1610.57,683.54 1611.13,683.54 1611.69,683.54 1612.25,683.54 1612.81,683.54 1613.37,683.54 1613.93,683.54 1614.49,683.54 1615.05,683.54 1615.61,683.54 1616.17,683.54 1616.73,683.54 1617.29,683.54 1617.84,683.54 1618.4,683.54 1618.96,683.54 1619.52,683.54 1620.08,683.54 1620.64,683.54 1621.2,683.54 1621.76,683.54 1622.32,683.54 1622.88,683.54 1623.44,683.54 1624,683.54 1624.56,683.54 1625.11,683.54 1625.67,683.54 1626.23,683.54 1626.79,683.54 1627.35,683.54 1627.91,683.54 1628.47,683.54 1629.03,683.54 1629.59,683.54 1630.15,683.54 1630.71,683.54 1631.27,683.54 1631.83,683.54 1632.39,683.54 1632.94,683.54 1633.5,683.54 1634.06,683.54 1634.62,683.54 1635.18,683.54 1635.74,683.54 1636.3,683.54 1636.86,683.54 1637.42,683.54 1637.98,683.54 1638.54,683.54 1639.1,683.54 1639.66,683.54 1640.21,683.54 1640.77,683.54 1641.33,683.54 1641.89,683.54 1642.45,683.54 1643.01,683.54 1643.57,683.54 1644.13,683.54 1644.69,683.54 1645.25,683.54 1645.81,683.54 1646.37,683.54 1646.93,683.54 1647.48,683.54 1648.04,683.54 1648.6,683.54 1649.16,683.54 1649.72,683.54 1650.28,683.54 1650.84,683.54 1651.4,683.54 1651.96,683.54 1652.52,683.54 1653.08,683.54 1653.64,683.54 1654.2,683.54 1654.76,683.54 1655.31,683.54 1655.87,683.54 1656.43,683.54 1656.99,683.54 1657.55,683.54 1658.11,683.54 1658.67,683.54 1659.23,683.54 1659.79,683.54 1660.35,683.54 1660.91,683.54 1661.47,683.54 1662.03,683.54 1662.58,683.54 1663.14,683.54 1663.7,683.54 1664.26,683.54 1664.82,683.54 1665.38,683.54 1665.94,683.54 1666.5,683.54 1667.06,683.54 1667.62,683.54 1668.18,683.54 1668.74,683.54 1669.3,683.54 1669.85,683.54 1670.41,683.54 1670.97,683.54 1671.53,683.54 1672.09,683.54 1672.65,683.54 1673.21,683.54 1673.77,683.54 1674.33,683.54 1674.89,683.54 1675.45,683.54 1676.01,683.54 1676.57,683.54 1677.13,683.54 1677.68,683.54 1678.24,683.54 1678.8,683.54 1679.36,683.54 1679.92,683.54 1680.48,683.54 1681.04,683.54 1681.6,683.54 1682.16,683.54 1682.72,683.54 1683.28,683.54 1683.84,683.54 1684.4,683.54 1684.95,683.54 1685.51,683.54 1686.07,683.54 1686.63,683.54 1687.19,683.54 1687.75,683.54 1688.31,683.54 1688.87,683.54 1689.43,683.54 1689.99,683.54 1690.55,683.54 1691.11,683.54 1691.67,683.54 1692.23,683.54 1692.78,683.54 1693.34,683.54 1693.9,683.54 1694.46,683.54 1695.02,683.54 1695.58,683.54 1696.14,683.54 1696.7,683.54 1697.26,683.54 1697.82,683.54 1698.38,683.54 1698.94,683.54 1699.5,683.54 1700.05,683.54 1700.61,683.54 1701.17,683.54 1701.73,683.54 1702.29,683.54 1702.85,683.54 1703.41,683.54 1703.97,683.54 1704.53,683.54 1705.09,683.54 1705.65,683.54 1706.21,683.54 1706.77,683.54 1707.32,683.54 1707.88,683.54 1708.44,683.54 1709,683.54 1709.56,683.54 1710.12,683.54 1710.68,683.54 1711.24,683.54 1711.8,683.54 1712.36,683.54 1712.92,683.54 1713.48,683.54 1714.04,683.54 1714.6,683.54 1715.15,683.54 1715.71,683.54 1716.27,683.54 1716.83,683.54 1717.39,683.54 1717.95,683.54 1718.51,683.54 1719.07,683.54 1719.63,683.54 1720.19,683.54 1720.75,683.54 1721.31,683.54 1721.87,683.54 1722.42,683.54 1722.98,683.54 1723.54,683.54 1724.1,683.54 1724.66,683.54 1725.22,683.54 1725.78,683.54 1726.34,683.54 1726.9,683.54 1727.46,683.54 1728.02,683.54 1728.58,683.54 1729.14,683.54 1729.69,683.54 1730.25,683.54 1730.81,683.54 1731.37,683.54 1731.93,683.54 1732.49,683.54 1733.05,683.54 1733.61,683.54 1734.17,683.54 1734.73,683.54 1735.29,683.54 1735.85,683.54 1736.41,683.54 1736.97,683.54 1737.52,683.54 1738.08,683.54 1738.64,683.54 1739.2,683.54 1739.76,683.54 1740.32,683.54 1740.88,683.54 1741.44,683.54 1742,683.54 1742.56,683.54 1743.12,683.54 1743.68,683.54 1744.24,683.54 1744.79,683.54 1745.35,683.54 1745.91,683.54 1746.47,683.54 1747.03,683.54 1747.59,683.54 1748.15,683.54 1748.71,683.54 1749.27,683.54 1749.83,683.54 1750.39,683.54 1750.95,683.54 1751.51,683.54 1752.06,683.54 1752.62,683.54 1753.18,683.54 1753.74,683.54 1754.3,683.54 1754.86,683.54 1755.42,683.54 1755.98,683.54 1756.54,683.54 1757.1,683.54 1757.66,683.54 1758.22,683.54 1758.78,683.54 1759.34,683.54 1759.89,683.54 1760.45,683.54 1761.01,683.54 1761.57,683.54 1762.13,683.54 1762.69,683.54 1763.25,683.54 1763.81,683.54 1764.37,683.54 1764.93,683.54 1765.49,683.54 1766.05,683.54 1766.61,683.54 1767.16,683.54 1767.72,683.54 1768.28,683.54 1768.84,683.54 1769.4,683.54 1769.96,683.54 1770.52,683.54 1771.08,683.54 1771.64,683.54 1772.2,683.54 1772.76,683.54 1773.32,683.54 1773.88,683.54 1774.43,683.54 1774.99,683.54 1775.55,683.54 1776.11,683.54 1776.67,683.54 1777.23,683.54 1777.79,683.54 1778.35,683.54 1778.91,683.54 1779.47,683.54 1780.03,683.54 1780.59,683.54 1781.15,683.54 1781.71,683.54 1782.26,683.54 1782.82,683.54 1783.38,683.54 1783.94,683.54 1784.5,683.54 1785.06,683.54 1785.62,683.54 1786.18,683.54 1786.74,683.54 1787.3,683.54 1787.86,683.54 1788.42,683.54 1788.98,683.54 1789.53,683.54 1790.09,683.54 1790.65,683.54 1791.21,683.54 1791.77,683.54 1792.33,683.54 1792.89,683.54 1793.45,683.54 1794.01,683.54 1794.57,683.54 1795.13,683.54 1795.69,683.54 1796.25,683.54 1796.8,683.54 1797.36,683.54 1797.92,683.54 1798.48,683.54 1799.04,683.54 1799.6,683.54 1800.16,683.54 1800.72,683.54 1801.28,683.54 1801.84,683.54 1802.4,683.54 1802.96,683.54 1803.52,683.54 1804.08,683.54 1804.63,683.54 1805.19,683.54 1805.75,683.54 1806.31,683.54 1806.87,683.54 1807.43,683.54 1807.99,683.54 1808.55,683.54 1809.11,683.54 1809.67,683.54 1810.23,683.54 1810.79,683.54 1811.35,683.54 1811.9,683.54 1812.46,683.54 1813.02,683.54 1813.58,683.54 1814.14,683.54 1814.7,683.54 1815.26,683.54 1815.82,683.54 1816.38,683.54 1816.94,683.54 1817.5,683.54 1818.06,683.54 1818.62,683.54 1819.18,683.54 1819.73,683.54 1820.29,683.54 1820.85,683.54 1821.41,683.54 1821.97,683.54 1822.53,683.54 1823.09,683.54 1823.65,683.54 1824.21,683.54 1824.77,683.54 1825.33,683.54 1825.89,683.54 1826.45,683.54 1827,683.54 1827.56,683.54 1828.12,683.54 1828.68,683.54 1829.24,683.54 1829.8,683.54 1830.36,683.54 1830.92,683.54 1831.48,683.54 1832.04,683.54 1832.6,683.54 1833.16,683.54 1833.72,683.54 1834.27,683.54 1834.83,683.54 1835.39,683.54 1835.95,683.54 1836.51,683.54 1837.07,683.54 1837.63,683.54 1838.19,683.54 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0318666576506645 ± 0.018227242498413756\nProjected Energy: -4.014861527816752 ± (0.004300113434347885, 0.004098089142973826)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.19623</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.2832e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.6841e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5509e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.977e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.953e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3695e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321594\n -3.3631242916133637\n -0.7590191922770906\n  0.13584182219621432\n  0.15789998694607554\n  0.8767114411781378\n  1.5305929970973224\n  1.5835732611867481\n  3.0728703303258555\n  3.1256726539518453\n  4.862107221562175\n  6.260694850380595\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
