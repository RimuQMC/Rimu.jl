var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20946062916670855 ± 0.0013573961594871428\n   G2(1) = 0.9182883356645103 ± 0.0006664710008634758\n   G2(2) = 0.981953317031952 ± 0.0005577638775060168\n   G2(3) = 0.990056065440367 ± 0.0008138351365466957\n   G2(4) = 0.981953317031952 ± 0.0005577638775060168\n   G2(5) = 0.9182883356645103 ± 0.0006664710008634758\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.10737435845364 ± 0.13850572440372164\n   Replica 2: -3.980494849623598 ± 0.13260194932959518\n   Replica 3: -3.943334276444877 ± 0.12562461001087794\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.09 2211.02,1003.09 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.341 2211.02,745.341 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.592 2211.02,487.592 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.843 2211.02,229.843 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.09 423.181,1003.09 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.341 423.181,745.341 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.592 423.181,487.592 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.843 423.181,229.843 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M290.043 1016.43 L306.363 1016.43 L306.363 1020.37 L284.418 1020.37 L284.418 1016.43 Q287.08 1013.68 291.664 1009.05 Q296.27 1004.4 297.451 1003.06 Q299.696 1000.53 300.576 998.796 Q301.478 997.037 301.478 995.347 Q301.478 992.592 299.534 990.856 Q297.613 989.12 294.511 989.12 Q292.312 989.12 289.858 989.884 Q287.427 990.648 284.65 992.199 L284.65 987.476 Q287.474 986.342 289.927 985.763 Q292.381 985.185 294.418 985.185 Q299.789 985.185 302.983 987.87 Q306.177 990.555 306.177 995.046 Q306.177 997.175 305.367 999.097 Q304.58 1000.99 302.474 1003.59 Q301.895 1004.26 298.793 1007.48 Q295.691 1010.67 290.043 1016.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 985.81 L334.58 985.81 L334.58 989.745 L320.506 989.745 L320.506 998.217 Q321.524 997.87 322.543 997.708 Q323.562 997.523 324.58 997.523 Q330.367 997.523 333.747 1000.69 Q337.126 1003.87 337.126 1009.28 Q337.126 1014.86 333.654 1017.96 Q330.182 1021.04 323.862 1021.04 Q321.687 1021.04 319.418 1020.67 Q317.173 1020.3 314.765 1019.56 L314.765 1014.86 Q316.849 1015.99 319.071 1016.55 Q321.293 1017.11 323.77 1017.11 Q327.774 1017.11 330.112 1015 Q332.45 1012.89 332.45 1009.28 Q332.45 1005.67 330.112 1003.56 Q327.774 1001.46 323.77 1001.46 Q321.895 1001.46 320.02 1001.87 Q318.168 1002.29 316.224 1003.17 L316.224 985.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 988.888 Q352.728 988.888 350.899 992.453 Q349.094 995.995 349.094 1003.12 Q349.094 1010.23 350.899 1013.8 Q352.728 1017.34 356.339 1017.34 Q359.973 1017.34 361.779 1013.8 Q363.608 1010.23 363.608 1003.12 Q363.608 995.995 361.779 992.453 Q359.973 988.888 356.339 988.888 M356.339 985.185 Q362.149 985.185 365.205 989.791 Q368.284 994.375 368.284 1003.12 Q368.284 1011.85 365.205 1016.46 Q362.149 1021.04 356.339 1021.04 Q350.529 1021.04 347.45 1016.46 Q344.395 1011.85 344.395 1003.12 Q344.395 994.375 347.45 989.791 Q350.529 985.185 356.339 985.185 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M286.062 728.061 L304.418 728.061 L304.418 731.996 L290.344 731.996 L290.344 740.468 Q291.363 740.121 292.381 739.959 Q293.4 739.774 294.418 739.774 Q300.205 739.774 303.585 742.945 Q306.964 746.116 306.964 751.533 Q306.964 757.112 303.492 760.214 Q300.02 763.292 293.701 763.292 Q291.525 763.292 289.256 762.922 Q287.011 762.552 284.603 761.811 L284.603 757.112 Q286.687 758.246 288.909 758.802 Q291.131 759.357 293.608 759.357 Q297.613 759.357 299.951 757.251 Q302.288 755.144 302.288 751.533 Q302.288 747.922 299.951 745.816 Q297.613 743.709 293.608 743.709 Q291.733 743.709 289.858 744.126 Q288.006 744.542 286.062 745.422 L286.062 728.061 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 731.14 Q322.566 731.14 320.737 734.704 Q318.932 738.246 318.932 745.376 Q318.932 752.482 320.737 756.047 Q322.566 759.589 326.177 759.589 Q329.811 759.589 331.617 756.047 Q333.446 752.482 333.446 745.376 Q333.446 738.246 331.617 734.704 Q329.811 731.14 326.177 731.14 M326.177 727.436 Q331.987 727.436 335.043 732.042 Q338.122 736.626 338.122 745.376 Q338.122 754.102 335.043 758.709 Q331.987 763.292 326.177 763.292 Q320.367 763.292 317.288 758.709 Q314.233 754.102 314.233 745.376 Q314.233 736.626 317.288 732.042 Q320.367 727.436 326.177 727.436 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 731.14 Q352.728 731.14 350.899 734.704 Q349.094 738.246 349.094 745.376 Q349.094 752.482 350.899 756.047 Q352.728 759.589 356.339 759.589 Q359.973 759.589 361.779 756.047 Q363.608 752.482 363.608 745.376 Q363.608 738.246 361.779 734.704 Q359.973 731.14 356.339 731.14 M356.339 727.436 Q362.149 727.436 365.205 732.042 Q368.284 736.626 368.284 745.376 Q368.284 754.102 365.205 758.709 Q362.149 763.292 356.339 763.292 Q350.529 763.292 347.45 758.709 Q344.395 754.102 344.395 745.376 Q344.395 736.626 347.45 732.042 Q350.529 727.436 356.339 727.436 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M284.835 470.312 L307.057 470.312 L307.057 472.303 L294.511 504.872 L289.627 504.872 L301.432 474.247 L284.835 474.247 L284.835 470.312 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M316.224 470.312 L334.58 470.312 L334.58 474.247 L320.506 474.247 L320.506 482.72 Q321.524 482.372 322.543 482.21 Q323.562 482.025 324.58 482.025 Q330.367 482.025 333.747 485.196 Q337.126 488.368 337.126 493.784 Q337.126 499.363 333.654 502.465 Q330.182 505.543 323.862 505.543 Q321.687 505.543 319.418 505.173 Q317.173 504.803 314.765 504.062 L314.765 499.363 Q316.849 500.497 319.071 501.053 Q321.293 501.608 323.77 501.608 Q327.774 501.608 330.112 499.502 Q332.45 497.395 332.45 493.784 Q332.45 490.173 330.112 488.067 Q327.774 485.96 323.77 485.96 Q321.895 485.96 320.02 486.377 Q318.168 486.794 316.224 487.673 L316.224 470.312 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 473.391 Q352.728 473.391 350.899 476.956 Q349.094 480.497 349.094 487.627 Q349.094 494.733 350.899 498.298 Q352.728 501.84 356.339 501.84 Q359.973 501.84 361.779 498.298 Q363.608 494.733 363.608 487.627 Q363.608 480.497 361.779 476.956 Q359.973 473.391 356.339 473.391 M356.339 469.687 Q362.149 469.687 365.205 474.294 Q368.284 478.877 368.284 487.627 Q368.284 496.354 365.205 500.96 Q362.149 505.543 356.339 505.543 Q350.529 505.543 347.45 500.96 Q344.395 496.354 344.395 487.627 Q344.395 478.877 347.45 474.294 Q350.529 469.687 356.339 469.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M256.664 243.188 L264.303 243.188 L264.303 216.823 L255.992 218.489 L255.992 214.23 L264.256 212.563 L268.932 212.563 L268.932 243.188 L276.571 243.188 L276.571 247.123 L256.664 247.123 L256.664 243.188 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M296.015 215.642 Q292.404 215.642 290.576 219.207 Q288.77 222.749 288.77 229.878 Q288.77 236.985 290.576 240.549 Q292.404 244.091 296.015 244.091 Q299.65 244.091 301.455 240.549 Q303.284 236.985 303.284 229.878 Q303.284 222.749 301.455 219.207 Q299.65 215.642 296.015 215.642 M296.015 211.938 Q301.826 211.938 304.881 216.545 Q307.96 221.128 307.96 229.878 Q307.96 238.605 304.881 243.211 Q301.826 247.795 296.015 247.795 Q290.205 247.795 287.127 243.211 Q284.071 238.605 284.071 229.878 Q284.071 221.128 287.127 216.545 Q290.205 211.938 296.015 211.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M326.177 215.642 Q322.566 215.642 320.737 219.207 Q318.932 222.749 318.932 229.878 Q318.932 236.985 320.737 240.549 Q322.566 244.091 326.177 244.091 Q329.811 244.091 331.617 240.549 Q333.446 236.985 333.446 229.878 Q333.446 222.749 331.617 219.207 Q329.811 215.642 326.177 215.642 M326.177 211.938 Q331.987 211.938 335.043 216.545 Q338.122 221.128 338.122 229.878 Q338.122 238.605 335.043 243.211 Q331.987 247.795 326.177 247.795 Q320.367 247.795 317.288 243.211 Q314.233 238.605 314.233 229.878 Q314.233 221.128 317.288 216.545 Q320.367 211.938 326.177 211.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M356.339 215.642 Q352.728 215.642 350.899 219.207 Q349.094 222.749 349.094 229.878 Q349.094 236.985 350.899 240.549 Q352.728 244.091 356.339 244.091 Q359.973 244.091 361.779 240.549 Q363.608 236.985 363.608 229.878 Q363.608 222.749 361.779 219.207 Q359.973 215.642 356.339 215.642 M356.339 211.938 Q362.149 211.938 365.205 216.545 Q368.284 221.128 368.284 229.878 Q368.284 238.605 365.205 243.211 Q362.149 247.795 356.339 247.795 Q350.529 247.795 347.45 243.211 Q344.395 238.605 344.395 229.878 Q344.395 221.128 347.45 216.545 Q350.529 211.938 356.339 211.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.843 4017.76,229.843 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1245.71 461.669,1244.97 462.238,1244.15 462.806,1243.24 463.375,1241.21 463.943,1239.1 464.511,1237.92 465.08,1236.64 465.648,1235.25 466.216,1233.73 466.785,1232.1 467.353,1230.34 467.921,1228.45 468.49,1226.42 469.058,1223.21 469.626,1220.92 470.195,1217.43 470.763,1214.77 471.331,1210.91 471.9,1206.86 472.468,1203.63 473.036,1196.06 473.605,1192.26 474.173,1188.33 474.741,1184.17 475.31,1179.8 475.878,1174.17 476.446,1169.4 477.015,1163.34 477.583,1158.14 478.152,1152.68 478.72,1144.96 479.288,1139.2 479.857,1133.22 480.425,1126.06 480.993,1119.61 481.562,1112.91 482.13,1106.02 482.698,1097.89 483.267,1089.56 483.835,1079.09 484.403,1070.48 484.972,1062.72 485.54,1053.91 486.108,1044.03 486.677,1032.88 487.245,1023.72 487.813,1014.41 488.382,1004.89 488.95,995.425 489.518,985.822 490.087,977.176 490.655,966.253 491.224,953.232 491.792,943.175 492.36,933.127 492.929,922.871 493.497,912.719 494.065,899.351 494.634,889.138 495.202,877.824 495.77,867.543 496.339,857.224 496.907,846.816 497.475,836.508 498.044,827.094 498.612,817.83 499.18,806.465 499.749,794.174 500.317,783.054 500.885,770.919 501.454,761.03 502.022,749.197 502.59,737.516 503.159,725.95 503.727,716.448 504.295,707.104 504.864,697.938 505.432,688.733 506.001,679.778 506.569,671.745 507.137,662.765 507.706,653.975 508.274,647.161 508.842,636.242 509.411,626.527 509.979,616.919 510.547,609.583 511.116,600.267 511.684,592.121 512.252,583.167 512.821,573.236 513.389,564.726 513.957,558.265 514.526,549.781 515.094,541.556 515.662,535.466 516.231,525.295 516.799,518.305 517.367,511.836 517.936,503.521 518.504,499.32 519.072,492.976 519.641,487.894 520.209,480.936 520.778,473.026 521.346,468.436 521.914,462.929 522.483,458.235 523.051,455.84 523.619,453.187 524.188,445.689 524.756,440.426 525.324,434.113 525.893,426.971 526.461,423.111 527.029,418.424 527.598,413.615 528.166,410.336 528.734,405.803 529.303,401.46 529.871,398.314 530.439,395.106 531.008,391.921 531.576,387.728 532.144,380.328 532.713,374.488 533.281,370.918 533.85,369.624 534.418,364.945 534.986,360.543 535.555,357.126 536.123,353.083 536.691,348.886 537.26,344.995 537.828,343.442 538.396,341.62 538.965,341.927 539.533,340.039 540.101,339.172 540.67,335.183 541.238,332.484 541.806,329.591 542.375,328.096 542.943,326.616 543.511,322.97 544.08,319.195 544.648,317.749 545.216,316.301 545.785,315.825 546.353,316.245 546.921,313.455 547.49,307.935 548.058,305.744 548.627,304.62 549.195,299.363 549.763,296.196 550.332,296.764 550.9,294.892 551.468,291.007 552.037,290.53 552.605,289.97 553.173,291.44 553.742,291.601 554.31,291.952 554.878,290.935 555.447,292.967 556.015,292.976 556.583,290.772 557.152,288.431 557.72,288.278 558.288,287.021 558.857,285.965 559.425,283.946 559.993,281.753 560.562,283.878 561.13,281.958 561.698,280.767 562.267,279.95 562.835,279.076 563.404,277.248 563.972,275.525 564.54,272.519 565.109,269.647 565.677,269.474 566.245,268.944 566.814,267.372 567.382,268.741 567.95,267.18 568.519,266.528 569.087,265.895 569.655,264.42 570.224,261.879 570.792,261.426 571.36,261.088 571.929,258.771 572.497,258.642 573.065,256.236 573.634,256.132 574.202,256.172 574.77,256.081 575.339,253.941 575.907,254.794 576.476,252.523 577.044,251.39 577.612,249.35 578.181,247.555 578.749,246.91 579.317,246.31 579.886,247.714 580.454,245.203 581.022,245.517 581.591,245.955 582.159,248.289 582.727,246.609 583.296,246.075 583.864,244.43 584.432,244.863 585.001,245.338 585.569,246.869 586.137,247.099 586.706,246.043 587.274,246.161 587.842,248.603 588.411,246.3 588.979,246.489 589.547,246.678 590.116,244.897 590.684,245.168 591.253,245.537 591.821,244.609 592.389,245.869 592.958,246.003 593.526,247.026 594.094,245.985 594.663,246.264 595.231,247.424 595.799,246.153 596.368,245.126 596.936,243.969 597.504,244.288 598.073,243.239 598.641,242.397 599.209,242.923 599.778,242.817 600.346,244.124 600.914,246.155 601.483,248.09 602.051,248.863 602.619,249.427 603.188,249.101 603.756,248.735 604.325,247.235 604.893,246.102 605.461,245.185 606.03,243.938 606.598,244.034 607.166,243.846 607.735,242.697 608.303,241.639 608.871,239.647 609.44,237.624 610.008,236.943 610.576,236.367 611.145,233.587 611.713,234.333 612.281,234.627 612.85,234.995 613.418,235.47 613.986,236.057 614.555,237.49 615.123,239.976 615.691,241.035 616.26,240.202 616.828,240.228 617.396,240.341 617.965,240.403 618.533,240.354 619.102,241.367 619.67,239.071 620.238,238.175 620.807,239.259 621.375,239.577 621.943,239.84 622.512,239.968 623.08,240.009 623.648,240.15 624.217,241.036 624.785,237.895 625.353,238.139 625.922,238.144 626.49,238.321 627.058,236.474 627.627,237.595 628.195,236.57 628.763,237.758 629.332,236.831 629.9,235.923 630.468,236.13 631.037,235.501 631.605,234.865 632.173,237.323 632.742,237.516 633.31,235.567 633.879,233.996 634.447,233.261 635.015,233.79 635.584,234.069 636.152,235.416 636.72,236.571 637.289,236.983 637.857,234.005 638.425,234.381 638.994,234.643 639.562,234.953 640.13,236.329 640.699,235.322 641.267,234.644 641.835,233.822 642.404,232.208 642.972,231.576 643.54,232.04 644.109,234.472 644.677,236.822 645.245,236.012 645.814,236.014 646.382,236.54 646.951,234.528 647.519,234.676 648.087,233.963 648.656,235.368 649.224,233.544 649.792,233.874 650.361,233.233 650.929,234.646 651.497,233.989 652.066,235.35 652.634,234.507 653.202,237.823 653.771,236.972 654.339,236.881 654.907,235.817 655.476,237.955 656.044,237.047 656.612,235.915 657.181,236.968 657.749,240.07 658.317,239.775 658.886,238.433 659.454,237.138 660.022,237.033 660.591,236.16 661.159,237.28 661.728,236.098 662.296,235.269 662.864,235.46 663.433,236.62 664.001,237.621 664.569,238.44 665.138,240.699 665.706,240.204 666.274,238.76 666.843,237.663 667.411,237.5 667.979,237.262 668.548,238.255 669.116,236.151 669.684,237.388 670.253,237.138 670.821,234.335 671.389,233.234 671.958,234.24 672.526,235.373 673.094,235.334 673.663,236.44 674.231,237.452 674.799,235.277 675.368,236.156 675.936,237.062 676.505,234.875 677.073,232.734 677.641,230.766 678.21,231.033 678.778,232.274 679.346,232.396 679.915,231.692 680.483,232.847 681.051,230.908 681.62,231.029 682.188,231.458 682.756,232.84 683.325,233.049 683.893,230.26 684.461,230.486 685.03,231.897 685.598,232.176 686.166,231.316 686.735,230.553 687.303,229.692 687.871,228.029 688.44,227.742 689.008,226.856 689.577,228.591 690.145,229.148 690.713,228.534 691.282,228.831 691.85,229.196 692.418,229.717 692.987,230.146 693.555,233.55 694.123,234.801 694.692,233.714 695.26,234.865 695.828,236.978 696.397,236.852 696.965,237.784 697.533,236.669 698.102,235.567 698.67,235.645 699.238,235.583 699.807,236.392 700.375,235.25 700.943,235.177 701.512,235.125 702.08,233.148 702.648,234.108 703.217,236.29 703.785,236.218 704.354,235.883 704.922,233.866 705.49,231.792 706.059,233.351 706.627,233.42 707.195,233.51 707.764,231.49 708.332,232.435 708.9,232.407 709.469,232.46 710.037,232.725 710.605,231.84 711.174,231.964 711.742,232.914 712.31,230.849 712.879,231.118 713.447,231.255 714.015,231.488 714.584,232.779 715.152,231.972 715.72,232.174 716.289,232.118 716.857,233.228 717.425,232.439 717.994,231.605 718.562,233.685 719.131,233.84 719.699,232.85 720.267,233.821 720.836,235.054 721.404,234.914 721.972,234.582 722.541,231.414 723.109,232.602 723.677,234.014 724.246,237.098 724.814,236.009 725.382,234.707 725.951,233.632 726.519,233.518 727.087,231.187 727.656,229.311 728.224,231.827 728.792,233.06 729.361,231.969 729.929,233.138 730.497,232.006 731.066,230.225 731.634,230.309 732.203,229.339 732.771,225.578 733.339,225.981 733.908,228.36 734.476,229.891 735.044,232.994 735.613,231.824 736.181,233.068 736.749,232.031 737.318,232.226 737.886,233.385 738.454,233.201 739.023,233.205 739.591,232.011 740.159,232.208 740.728,232.001 741.296,231.029 741.864,229.36 742.433,230.722 743.001,232.007 743.569,230.932 744.138,229.116 744.706,228.291 745.274,227.588 745.843,229.065 746.411,229.228 746.98,231.643 747.548,232.896 748.116,233.918 748.685,237.033 749.253,234.731 749.821,236.516 750.39,236.369 750.958,235.08 751.526,235.98 752.095,236.919 752.663,236.552 753.231,234.297 753.8,233.101 754.368,233.978 754.936,233.979 755.505,234.976 756.073,233.855 756.641,233.496 757.21,233.564 757.778,234.13 758.346,234.032 758.915,232.884 759.483,232.799 760.052,232.718 760.62,232.648 761.188,236.793 761.757,236.502 762.325,234.247 762.893,233.992 763.462,232.931 764.03,235.111 764.598,232.889 765.167,232.644 765.735,232.652 766.303,231.736 766.872,230.528 767.44,229.69 768.008,233.144 768.577,231.974 769.145,232.809 769.713,231.648 770.282,230.751 770.85,228.924 771.418,229.045 771.987,229.202 772.555,229.534 773.123,230.825 773.692,230.957 774.26,231.166 774.829,231.268 775.397,230.236 775.965,228.045 776.534,227.249 777.102,227.475 777.67,230.009 778.239,232.36 778.807,230.343 779.375,228.326 779.944,227.381 780.512,227.356 781.08,229.666 781.649,228.704 782.217,229.916 782.785,230.013 783.354,230.101 783.922,230.247 784.49,231.21 785.059,229.958 785.627,232.02 786.195,230.897 786.764,232.022 787.332,232.959 787.9,232.864 788.469,230.695 789.037,230.715 789.606,229.988 790.174,230.115 790.742,230.262 791.311,229.508 791.879,228.556 792.447,228.598 793.016,231.718 793.584,230.796 794.152,230.985 794.721,228.924 795.289,232.235 795.857,234.311 796.426,235.156 796.994,233.878 797.562,232.712 798.131,232.656 798.699,233.452 799.267,235.302 799.836,236.898 800.404,234.569 800.972,235.395 801.541,234.175 802.109,230.823 802.678,230.748 803.246,228.842 803.814,230.945 804.383,232.087 804.951,231.008 805.519,232.993 806.088,233.72 806.656,232.743 807.224,231.4 807.793,230.401 808.361,232.363 808.929,235.269 809.498,234.994 810.066,236.706 810.634,237.316 811.203,235.688 811.771,234.294 812.339,230.887 812.908,228.694 813.476,228.643 814.044,228.883 814.613,228.134 815.181,227.277 815.749,227.504 816.318,227.795 816.886,227.152 817.455,227.586 818.023,226.811 818.591,226.078 819.16,226.516 819.728,225.025 820.296,227.469 820.865,227.851 821.433,226.848 822.001,228.294 822.57,227.52 823.138,229.94 823.706,228.911 824.275,229.099 824.843,225.269 825.411,224.621 825.98,224.879 826.548,226.535 827.116,227.566 827.685,229.816 828.253,230.785 828.821,230.73 829.39,230.719 829.958,229.705 830.526,229.69 831.095,228.792 831.663,229.89 832.232,230.899 832.8,231.163 833.368,231.258 833.937,230.158 834.505,230.168 835.073,232.46 835.642,231.333 836.21,230.27 836.778,232.373 837.347,232.195 837.915,230.283 838.483,229.261 839.052,228.361 839.62,228.621 840.188,228.863 840.757,228.983 841.325,230.18 841.893,229.123 842.462,230.321 843.03,230.415 843.598,230.395 844.167,230.389 844.735,231.255 845.304,228.286 845.872,229.632 846.44,230.898 847.009,229.858 847.577,231.015 848.145,230.129 848.714,229.122 849.282,228.078 849.85,226.189 850.419,225.484 850.987,228.144 851.555,228.34 852.124,229.492 852.692,231.813 853.26,229.619 853.829,227.639 854.397,228.04 854.965,227.274 855.534,227.533 856.102,226.94 856.67,227.275 857.239,228.86 857.807,228.988 858.375,229.14 858.944,230.619 859.512,231.697 860.081,230.594 860.649,230.803 861.217,229.874 861.786,229.06 862.354,227.021 862.922,227.471 863.491,228.717 864.059,229.95 864.627,229.993 865.196,233.162 865.764,231.156 866.332,231.19 866.901,229.411 867.469,230.496 868.037,230.456 868.606,227.442 869.174,225.825 869.742,224.314 870.311,225.76 870.879,224.959 871.447,224.788 872.016,224.34 872.584,226.971 873.152,229.537 873.721,230.108 874.289,232.259 874.858,233.24 875.426,232.13 875.994,229.061 876.563,229.108 877.131,232.501 877.699,231.59 878.268,231.565 878.836,232.886 879.404,233.827 879.973,231.758 880.541,234.058 881.109,236.02 881.678,237.006 882.246,236.729 882.814,236.524 883.383,237.312 883.951,236.8 884.519,235.353 885.088,236.074 885.656,236.657 886.224,236.134 886.793,234.706 887.361,234.407 887.93,233.28 888.498,233.04 889.066,231.579 889.635,232.493 890.203,234.33 890.771,233.113 891.34,234.106 891.908,232.86 892.476,233.749 893.045,234.456 893.613,234.135 894.181,235.111 894.75,235.912 895.318,236.454 895.886,234.937 896.455,235.335 897.023,233.05 897.591,229.804 898.16,229.101 898.728,230.332 899.296,230.237 899.865,229.244 900.433,228.07 901.001,228.344 901.57,227.449 902.138,227.987 902.707,228.129 903.275,227.292 903.843,227.698 904.412,228.945 904.98,229.017 905.548,230.109 906.117,231.241 906.685,230.287 907.253,230.375 907.822,234.31 908.39,232.035 908.958,233.83 909.527,233.596 910.095,235.429 910.663,234.956 911.232,232.738 911.8,232.516 912.368,230.152 912.937,232.306 913.505,229.21 914.073,228.195 914.642,227.209 915.21,228.23 915.779,229.391 916.347,229.479 916.915,228.37 917.484,228.453 918.052,229.571 918.62,232.639 919.189,232.241 919.757,233.954 920.325,233.623 920.894,234.286 921.462,234.003 922.03,235.664 922.599,230.912 923.167,230.88 923.735,232.042 924.304,231.798 924.872,231.642 925.44,231.62 926.009,229.549 926.577,229.801 927.145,231.006 927.714,231.024 928.282,230.003 928.85,229.037 929.419,229.538 929.987,228.708 930.556,227.661 931.124,225.804 931.692,228.016 932.261,229.08 932.829,224.957 933.397,224.385 933.966,226.695 934.534,228.906 935.102,228.228 935.671,228.372 936.239,228.736 936.807,229.903 937.376,229.091 937.944,230.142 938.512,228.969 939.081,229.27 939.649,230.271 940.217,229.151 940.786,227.155 941.354,230.524 941.922,230.566 942.491,229.354 943.059,227.139 943.627,226.285 944.196,222.388 944.764,219.895 945.333,220.732 945.901,221.489 946.469,222.21 947.038,224.615 947.606,224.985 948.174,223.683 948.743,225.236 949.311,226.661 949.879,226.94 950.448,227.268 951.016,225.521 951.584,225.789 952.153,226.308 952.721,228.826 953.289,229.933 953.858,228.98 954.426,231.209 954.994,231.287 955.563,233.52 956.131,232.384 956.699,232.166 957.268,233.338 957.836,232.045 958.405,230.944 958.973,231.991 959.541,231.812 960.11,231.685 960.678,231.43 961.246,229.303 961.815,227.584 962.383,226.912 962.951,227.195 963.52,227.621 964.088,228.886 964.656,228.867 965.225,227.047 965.793,227.426 966.361,227.609 966.93,225.658 967.498,228.223 968.066,232.626 968.635,233.613 969.203,235.507 969.771,235.162 970.34,234.922 970.908,233.556 971.476,233.308 972.045,234.985 972.613,236.913 973.182,236.795 973.75,236.354 974.318,235.044 974.887,235.705 975.455,238.355 976.023,238.736 976.592,238.179 977.16,235.614 977.728,234.243 978.297,232.942 978.865,233.78 979.433,233.383 980.002,234.162 980.57,231.712 981.138,232.39 981.707,232.145 982.275,234.077 982.843,232.693 983.412,232.442 983.98,231.091 984.548,230.876 985.117,229.985 985.685,231.066 986.253,230.992 986.822,231.65 987.39,230.246 987.959,230.125 988.527,229.059 989.095,228.214 989.664,228.06 990.232,229.276 990.8,229.183 991.369,229.182 991.937,229.07 992.505,228.152 993.074,228.307 993.642,228.653 994.21,229.77 994.779,230.612 995.347,230.574 995.915,230.452 996.484,230.303 997.052,230.186 997.62,233.367 998.189,234.239 998.757,234.057 999.325,234.554 999.894,234.018 1000.46,233.894 1001.03,233.535 1001.6,234.224 1002.17,232.777 1002.74,232.57 1003.3,229.134 1003.87,229.433 1004.44,229.289 1005.01,229.01 1005.58,227.155 1006.15,228.44 1006.71,229.299 1007.28,230.302 1007.85,229.562 1008.42,229.54 1008.99,227.571 1009.56,227.642 1010.12,228.518 1010.69,228.581 1011.26,226.61 1011.83,226.873 1012.4,227.979 1012.97,227.203 1013.53,228.439 1014.1,229.805 1014.67,230.929 1015.24,230.662 1015.81,231.62 1016.38,231.448 1016.94,230.33 1017.51,231.531 1018.08,232.277 1018.65,232.028 1019.22,231.834 1019.79,230.648 1020.35,228.495 1020.92,228.497 1021.49,228.771 1022.06,229.921 1022.63,228.942 1023.2,232.241 1023.76,232.966 1024.33,231.6 1024.9,228.306 1025.47,226.339 1026.04,225.707 1026.61,226.02 1027.17,227.66 1027.74,227.896 1028.31,226.843 1028.88,228.152 1029.45,227.211 1030.02,227.24 1030.58,230.586 1031.15,230.694 1031.72,230.785 1032.29,231.927 1032.86,232.783 1033.43,233.578 1033.99,233.274 1034.56,233.905 1035.13,232.765 1035.7,232.491 1036.27,233.496 1036.84,232.392 1037.4,231.291 1037.97,231.176 1038.54,229.136 1039.11,230.138 1039.68,231.094 1040.25,229.988 1040.81,232.208 1041.38,233.112 1041.95,232.79 1042.52,231.592 1043.09,234.384 1043.66,233.885 1044.22,233.699 1044.79,234.379 1045.36,232.841 1045.93,232.635 1046.5,234.47 1047.07,234.108 1047.63,232.653 1048.2,232.152 1048.77,230.578 1049.34,230.338 1049.91,229.284 1050.48,229.351 1051.05,230.297 1051.61,231.123 1052.18,230.919 1052.75,230.899 1053.32,228.558 1053.89,228.713 1054.46,229.084 1055.02,227.036 1055.59,228.165 1056.16,228.242 1056.73,230.367 1057.3,232.412 1057.87,230.096 1058.43,231.028 1059,230.673 1059.57,230.709 1060.14,230.771 1060.71,230.557 1061.28,229.598 1061.84,229.595 1062.41,229.397 1062.98,229.284 1063.55,229.217 1064.12,230.141 1064.69,230.242 1065.25,228.107 1065.82,228.282 1066.39,227.277 1066.96,227.385 1067.53,227.387 1068.1,227.454 1068.66,226.444 1069.23,225.503 1069.8,226.84 1070.37,231.368 1070.94,232.188 1071.51,230.796 1072.07,228.643 1072.64,229.878 1073.21,229.81 1073.78,228.846 1074.35,228.921 1074.92,228.929 1075.48,229.759 1076.05,230.696 1076.62,229.626 1077.19,227.441 1077.76,227.478 1078.33,227.362 1078.89,225.702 1079.46,224.969 1080.03,226.343 1080.6,227.655 1081.17,228.801 1081.74,227.906 1082.3,226.947 1082.87,227.295 1083.44,225.573 1084.01,227.139 1084.58,226.245 1085.15,226.42 1085.71,226.663 1086.28,227.141 1086.85,226.262 1087.42,223.508 1087.99,223.075 1088.56,222.817 1089.12,222.11 1089.69,224.903 1090.26,225.45 1090.83,225.721 1091.4,228.398 1091.97,228.59 1092.53,226.542 1093.1,227.685 1093.67,228.923 1094.24,228.959 1094.81,230.203 1095.38,230.264 1095.94,229.339 1096.51,230.256 1097.08,229.147 1097.65,229.433 1098.22,229.452 1098.79,229.569 1099.35,230.963 1099.92,229.785 1100.49,229.785 1101.06,228.718 1101.63,230.043 1102.2,230.285 1102.76,232.569 1103.33,232.305 1103.9,232.259 1104.47,230.213 1105.04,232.584 1105.61,232.339 1106.17,233.271 1106.74,233.149 1107.31,231.156 1107.88,233.184 1108.45,231.94 1109.02,230.76 1109.58,230.35 1110.15,232.387 1110.72,231.193 1111.29,230.107 1111.86,229.286 1112.43,232.447 1112.99,233.437 1113.56,234.307 1114.13,233.995 1114.7,233.878 1115.27,229.497 1115.84,229.448 1116.4,227.338 1116.97,228.581 1117.54,228.655 1118.11,227.725 1118.68,231.027 1119.25,231.992 1119.81,233.831 1120.38,233.394 1120.95,233.286 1121.52,232.046 1122.09,230.928 1122.66,231.9 1123.23,232.676 1123.79,232.523 1124.36,231.274 1124.93,233.078 1125.5,233.457 1126.07,232.082 1126.64,232.986 1127.2,229.785 1127.77,229.64 1128.34,232.964 1128.91,232.454 1129.48,232.296 1130.05,233.216 1130.61,231.747 1131.18,232.893 1131.75,231.483 1132.32,231.52 1132.89,230.409 1133.46,228.32 1134.02,227.295 1134.59,228.211 1135.16,228.133 1135.73,228.17 1136.3,229.419 1136.87,229.462 1137.43,227.425 1138,228.502 1138.57,230.503 1139.14,231.502 1139.71,231.166 1140.28,231.805 1140.84,231.642 1141.41,232.477 1141.98,232.11 1142.55,232.92 1143.12,233.847 1143.69,232.536 1144.25,232.485 1144.82,230.212 1145.39,228.958 1145.96,229.034 1146.53,227.054 1147.1,227.218 1147.66,226.239 1148.23,226.662 1148.8,226.819 1149.37,226.956 1149.94,227.114 1150.51,226.313 1151.07,225.586 1151.64,226.961 1152.21,228.287 1152.78,230.453 1153.35,228.108 1153.92,224.101 1154.48,229.644 1155.05,228.392 1155.62,229.668 1156.19,229.681 1156.76,229.642 1157.33,228.555 1157.89,229.542 1158.46,227.405 1159.03,227.316 1159.6,226.525 1160.17,227.858 1160.74,225.923 1161.3,228.124 1161.87,229.413 1162.44,230.625 1163.01,229.824 1163.58,229.888 1164.15,229.802 1164.71,226.008 1165.28,227.522 1165.85,228.814 1166.42,227.263 1166.99,227.552 1167.56,230.811 1168.12,230.816 1168.69,231.857 1169.26,230.63 1169.83,230.489 1170.4,230.419 1170.97,229.461 1171.53,229.418 1172.1,228.472 1172.67,227.604 1173.24,227.881 1173.81,228.033 1174.38,228.328 1174.94,230.64 1175.51,229.652 1176.08,228.503 1176.65,228.596 1177.22,229.708 1177.79,227.757 1178.35,226.952 1178.92,226.307 1179.49,225.613 1180.06,225.997 1180.63,226.095 1181.2,228.749 1181.76,229.86 1182.33,231.278 1182.9,234.446 1183.47,233.342 1184.04,233.348 1184.61,234.174 1185.17,235.155 1185.74,237.027 1186.31,237.588 1186.88,236.155 1187.45,234.694 1188.02,233.335 1188.58,233.387 1189.15,235.212 1189.72,232.47 1190.29,231.238 1190.86,232.183 1191.43,231.831 1192,232.591 1192.56,232.587 1193.13,230.409 1193.7,231.405 1194.27,231.313 1194.84,230.181 1195.41,230.068 1195.97,227.932 1196.54,228.029 1197.11,228.365 1197.68,231.412 1198.25,232.567 1198.82,231.678 1199.38,231.548 1199.95,230.19 1200.52,230.282 1201.09,231.368 1201.66,230.54 1202.23,229.493 1202.79,231.635 1203.36,232.51 1203.93,233.328 1204.5,232.142 1205.07,232.785 1205.64,232.565 1206.2,231.315 1206.77,231.239 1207.34,231.186 1207.91,233.113 1208.48,233.637 1209.05,232.298 1209.61,233.021 1210.18,231.577 1210.75,230.27 1211.32,229.944 1211.89,226.839 1212.46,225.94 1213.02,226.272 1213.59,227.433 1214.16,229.632 1214.73,232.668 1215.3,231.354 1215.87,231.954 1216.43,231.593 1217,229.361 1217.57,229.184 1218.14,229.358 1218.71,228.007 1219.28,228.15 1219.84,228.044 1220.41,225.907 1220.98,225.008 1221.55,226.156 1222.12,226.303 1222.69,226.583 1223.25,228.789 1223.82,230.835 1224.39,229.614 1224.96,229.494 1225.53,231.547 1226.1,231.447 1226.66,230.354 1227.23,231.475 1227.8,231.388 1228.37,229.09 1228.94,229.024 1229.51,227.976 1230.07,228.156 1230.64,229.56 1231.21,230.615 1231.78,230.642 1232.35,229.43 1232.92,230.48 1233.48,229.574 1234.05,230.564 1234.62,228.373 1235.19,227.29 1235.76,228.558 1236.33,229.399 1236.89,230.286 1237.46,230.188 1238.03,230.333 1238.6,229.294 1239.17,228.16 1239.74,230.399 1240.3,231.628 1240.87,232.285 1241.44,232.049 1242.01,231.861 1242.58,231.9 1243.15,228.866 1243.71,227.875 1244.28,227.14 1244.85,228.33 1245.42,228.545 1245.99,228.4 1246.56,228.306 1247.12,229.369 1247.69,230.214 1248.26,230.085 1248.83,231.189 1249.4,229.898 1249.97,229.925 1250.53,229.937 1251.1,228.873 1251.67,227.861 1252.24,226.828 1252.81,226.967 1253.38,228.048 1253.94,229.106 1254.51,231.227 1255.08,231.15 1255.65,229.051 1256.22,231.098 1256.79,230.857 1257.35,230.752 1257.92,230.803 1258.49,229.724 1259.06,229.993 1259.63,228.889 1260.2,231.056 1260.76,229.916 1261.33,230.021 1261.9,231.173 1262.47,230.173 1263.04,228.505 1263.61,227.669 1264.18,228.756 1264.74,227.749 1265.31,222.945 1265.88,221.495 1266.45,223.252 1267.02,224.662 1267.59,225.152 1268.15,224.48 1268.72,227.925 1269.29,229.101 1269.86,227.216 1270.43,227.529 1271,227.933 1271.56,229.142 1272.13,229.101 1272.7,230.223 1273.27,232.324 1273.84,234.052 1274.41,231.497 1274.97,232.536 1275.54,233.377 1276.11,235.376 1276.68,235.005 1277.25,236.749 1277.82,236.139 1278.38,234.295 1278.95,234.789 1279.52,233.35 1280.09,233.118 1280.66,231.808 1281.23,230.784 1281.79,229.669 1282.36,229.573 1282.93,230.626 1283.5,230.448 1284.07,230.289 1284.64,230.21 1285.2,229.041 1285.77,229.147 1286.34,230.038 1286.91,228.883 1287.48,228.742 1288.05,228.713 1288.61,227.68 1289.18,228.754 1289.75,233.072 1290.32,231.747 1290.89,230.526 1291.46,230.606 1292.02,228.58 1292.59,230.699 1293.16,230.645 1293.73,233.865 1294.3,231.244 1294.87,232.195 1295.43,235.076 1296,234.727 1296.57,234.328 1297.14,232.175 1297.71,230.82 1298.28,230.734 1298.84,231.742 1299.41,231.411 1299.98,232.431 1300.55,233.112 1301.12,232.788 1301.69,231.618 1302.25,230.421 1302.82,230.453 1303.39,230.578 1303.96,231.661 1304.53,229.407 1305.1,228.964 1305.66,229.075 1306.23,229.239 1306.8,228.091 1307.37,226.852 1307.94,226.945 1308.51,227.078 1309.07,225.35 1309.64,225.649 1310.21,225.845 1310.78,227.208 1311.35,228.389 1311.92,225.647 1312.48,225.96 1313.05,225.142 1313.62,227.521 1314.19,225.627 1314.76,226.101 1315.33,224.29 1315.89,224.569 1316.46,222.692 1317.03,220.123 1317.6,222.893 1318.17,224.272 1318.74,220.594 1319.3,222.452 1319.87,225.253 1320.44,223.505 1321.01,224.985 1321.58,226.516 1322.15,229.036 1322.71,229.162 1323.28,226.177 1323.85,226.479 1324.42,227.885 1324.99,228.25 1325.56,227.539 1326.12,227.766 1326.69,228.011 1327.26,228.33 1327.83,230.424 1328.4,229.513 1328.97,229.439 1329.53,230.328 1330.1,232.181 1330.67,232.159 1331.24,232.987 1331.81,234.121 1332.38,232.92 1332.94,234.865 1333.51,232.531 1334.08,231.429 1334.65,231.495 1335.22,232.286 1335.79,232.073 1336.36,233.111 1336.92,233.773 1337.49,235.484 1338.06,234.249 1338.63,234.107 1339.2,232.837 1339.77,233.483 1340.33,233.225 1340.9,230.072 1341.47,230.073 1342.04,230.301 1342.61,230.086 1343.18,230.131 1343.74,232.274 1344.31,228.937 1344.88,225.921 1345.45,226.105 1346.02,226.409 1346.59,227.902 1347.15,226.186 1347.72,226.549 1348.29,226.826 1348.86,226.995 1349.43,227.31 1350,226.431 1350.56,228.628 1351.13,228.602 1351.7,228.732 1352.27,227.984 1352.84,228.131 1353.41,228.209 1353.97,228.403 1354.54,226.58 1355.11,227.661 1355.68,226.758 1356.25,226.997 1356.82,225.151 1357.38,225.503 1357.95,227.811 1358.52,230.022 1359.09,232.229 1359.66,230.199 1360.23,229.277 1360.79,227.341 1361.36,228.529 1361.93,225.777 1362.5,226.176 1363.07,225.428 1363.64,225.933 1364.2,227.279 1364.77,226.491 1365.34,228.949 1365.91,231.212 1366.48,230.197 1367.05,227.217 1367.61,226.506 1368.18,225.881 1368.75,225.235 1369.32,230.815 1369.89,229.758 1370.46,229.877 1371.02,231.01 1371.59,232.004 1372.16,235.012 1372.73,234.692 1373.3,236.655 1373.87,236.478 1374.43,235.223 1375,235.725 1375.57,237.457 1376.14,237.2 1376.71,237.715 1377.28,238.422 1377.84,238.962 1378.41,242.686 1378.98,240.68 1379.55,240.06 1380.12,240.411 1380.69,239.699 1381.25,236.897 1381.82,236.396 1382.39,236.869 1382.96,237.531 1383.53,236.03 1384.1,235.48 1384.66,233.619 1385.23,232.18 1385.8,233.943 1386.37,235.486 1386.94,234.861 1387.51,236.382 1388.07,237.701 1388.64,236.937 1389.21,236.546 1389.78,236.974 1390.35,236.366 1390.92,235.777 1391.48,236.177 1392.05,238.486 1392.62,238.923 1393.19,236.096 1393.76,234.346 1394.33,231.887 1394.89,232.542 1395.46,232.145 1396.03,231.837 1396.6,231.473 1397.17,229.159 1397.74,229.873 1398.3,229.572 1398.87,228.323 1399.44,229.154 1400.01,228.958 1400.58,228.906 1401.15,227.835 1401.71,227.694 1402.28,224.553 1402.85,224.77 1403.42,225.921 1403.99,226.907 1404.56,225.701 1405.13,223.923 1405.69,225.297 1406.26,225.313 1406.83,224.61 1407.4,224.904 1407.97,227.911 1408.54,227.994 1409.1,226.877 1409.67,227.144 1410.24,230.234 1410.81,231.241 1411.38,229.939 1411.95,229.776 1412.51,229.669 1413.08,229.518 1413.65,229.444 1414.22,227.595 1414.79,228.523 1415.36,227.29 1415.92,226.065 1416.49,226.242 1417.06,227.668 1417.63,227.856 1418.2,229.977 1418.77,230.925 1419.33,231.818 1419.9,231.688 1420.47,231.526 1421.04,230.182 1421.61,233.08 1422.18,233.855 1422.74,233.33 1423.31,232.261 1423.88,232.865 1424.45,232.599 1425.02,232.41 1425.59,230.238 1426.15,229.931 1426.72,230.819 1427.29,231.892 1427.86,232.711 1428.43,230.199 1429,232.185 1429.56,228.579 1430.13,227.364 1430.7,227.519 1431.27,229.606 1431.84,229.491 1432.41,229.561 1432.97,229.51 1433.54,228.457 1434.11,226.325 1434.68,225.487 1435.25,224.46 1435.82,223.453 1436.38,221.691 1436.95,225.416 1437.52,227.579 1438.09,226.531 1438.66,227.752 1439.23,227.912 1439.79,227.945 1440.36,225.744 1440.93,222.767 1441.5,224.049 1442.07,222.148 1442.64,223.809 1443.2,223.227 1443.77,224.71 1444.34,223.768 1444.91,226.355 1445.48,227.694 1446.05,227.663 1446.61,227.748 1447.18,228.042 1447.75,230.355 1448.32,231.374 1448.89,231.19 1449.46,232.118 1450.02,230.982 1450.59,230.002 1451.16,229.899 1451.73,228.906 1452.3,225.871 1452.87,225.103 1453.43,227.575 1454,227.564 1454.57,226.962 1455.14,227.139 1455.71,227.177 1456.28,226.384 1456.84,223.633 1457.41,223.983 1457.98,224.511 1458.55,225.849 1459.12,226.115 1459.69,225.242 1460.25,225.672 1460.82,227.12 1461.39,227.349 1461.96,229.744 1462.53,227.841 1463.1,227.093 1463.66,225.161 1464.23,224.635 1464.8,222.848 1465.37,225.528 1465.94,227.063 1466.51,226.186 1467.07,226.732 1467.64,226.889 1468.21,226.178 1468.78,228.391 1469.35,229.587 1469.92,229.605 1470.48,229.715 1471.05,227.802 1471.62,227.913 1472.19,229.149 1472.76,229.206 1473.33,228.45 1473.89,230.809 1474.46,229.923 1475.03,229.042 1475.6,230.431 1476.17,230.592 1476.74,229.641 1477.31,227.867 1477.87,227.127 1478.44,227.533 1479.01,227.047 1479.58,224.258 1480.15,224.74 1480.72,225.168 1481.28,226.667 1481.85,227.082 1482.42,226.345 1482.99,226.661 1483.56,228.968 1484.13,229.278 1484.69,229.593 1485.26,228.814 1485.83,225.775 1486.4,226.291 1486.97,224.92 1487.54,223.661 1488.1,224.373 1488.67,224.94 1489.24,224.333 1489.81,224.926 1490.38,226.574 1490.95,228.025 1491.51,226.151 1492.08,226.809 1492.65,226.957 1493.22,226.493 1493.79,228.91 1494.36,229.149 1494.92,231.279 1495.49,231.321 1496.06,230.452 1496.63,231.661 1497.2,230.896 1497.77,233.014 1498.33,232.851 1498.9,231.846 1499.47,232.003 1500.04,232.057 1500.61,234.398 1501.18,238.57 1501.74,238.996 1502.31,238.506 1502.88,237.232 1503.45,234.962 1504.02,235.06 1504.59,234.657 1505.15,233.427 1505.72,234.329 1506.29,235.227 1506.86,236.047 1507.43,233.651 1508,234.409 1508.56,236.387 1509.13,236.034 1509.7,235.786 1510.27,234.573 1510.84,235.55 1511.41,236.575 1511.97,236.2 1512.54,235.846 1513.11,236.527 1513.68,234.059 1514.25,233.639 1514.82,233.317 1515.38,235.29 1515.95,232.922 1516.52,232.673 1517.09,231.507 1517.66,232.568 1518.23,235.444 1518.79,235.108 1519.36,232.63 1519.93,231.45 1520.5,230.406 1521.07,230.486 1521.64,230.496 1522.2,229.375 1522.77,229.422 1523.34,230.293 1523.91,231.345 1524.48,232.28 1525.05,231.091 1525.61,231.005 1526.18,229.715 1526.75,229.89 1527.32,230.825 1527.89,230.845 1528.46,230.817 1529.02,232.795 1529.59,233.565 1530.16,233.331 1530.73,232.18 1531.3,232.788 1531.87,234.874 1532.43,233.349 1533,232.088 1533.57,233.938 1534.14,231.504 1534.71,230.376 1535.28,230.28 1535.84,231.011 1536.41,232.829 1536.98,230.409 1537.55,230.529 1538.12,229.679 1538.69,230.634 1539.25,230.612 1539.82,230.373 1540.39,230.316 1540.96,231.348 1541.53,233.361 1542.1,233.023 1542.66,231.945 1543.23,231.64 1543.8,232.322 1544.37,235.059 1544.94,235.633 1545.51,235.114 1546.08,233.675 1546.64,234.296 1547.21,231.809 1547.78,232.58 1548.35,232.489 1548.92,233.267 1549.49,232.979 1550.05,231.629 1550.62,228.309 1551.19,227.464 1551.76,224.347 1552.33,225.379 1552.9,225.541 1553.46,225.574 1554.03,226.941 1554.6,228.1 1555.17,227.194 1555.74,227.312 1556.31,226.524 1556.87,228.745 1557.44,228.705 1558.01,229.784 1558.58,229.876 1559.15,228.609 1559.72,228.656 1560.28,228.693 1560.85,230.692 1561.42,229.488 1561.99,228.291 1562.56,226.354 1563.13,225.207 1563.69,225.623 1564.26,225.963 1564.83,228.109 1565.4,227.958 1565.97,226.043 1566.54,226.189 1567.1,225.317 1567.67,224.382 1568.24,224.779 1568.81,224.257 1569.38,224.62 1569.95,225.877 1570.51,226.003 1571.08,227.2 1571.65,226.345 1572.22,223.552 1572.79,223.961 1573.36,222.308 1573.92,221.025 1574.49,221.305 1575.06,221.952 1575.63,224.64 1576.2,229.157 1576.77,228.329 1577.33,228.581 1577.9,230.548 1578.47,230.284 1579.04,230.285 1579.61,229.083 1580.18,231.129 1580.74,230.896 1581.31,233.869 1581.88,232.651 1582.45,232.399 1583.02,229.218 1583.59,228.254 1584.15,229.25 1584.72,231.444 1585.29,232.296 1585.86,234.125 1586.43,235.044 1587,234.655 1587.56,233.083 1588.13,230.77 1588.7,228.872 1589.27,226.857 1589.84,227.046 1590.41,228.405 1590.97,229.611 1591.54,231.605 1592.11,231.696 1592.68,233.697 1593.25,233.621 1593.82,233.493 1594.38,234.333 1594.95,231.956 1595.52,231.662 1596.09,231.7 1596.66,230.438 1597.23,231.412 1597.79,232.232 1598.36,233.086 1598.93,232.727 1599.5,232.444 1600.07,233.137 1600.64,233.769 1601.2,232.436 1601.77,232.296 1602.34,231.891 1602.91,230.617 1603.48,230.465 1604.05,230.326 1604.61,229.217 1605.18,229.163 1605.75,228.074 1606.32,227.941 1606.89,228.231 1607.46,229.303 1608.02,226.458 1608.59,228.629 1609.16,228.604 1609.73,228.745 1610.3,228.768 1610.87,231.965 1611.43,232.019 1612,230.817 1612.57,228.766 1613.14,228.833 1613.71,228.698 1614.28,228.54 1614.84,226.383 1615.41,226.524 1615.98,225.714 1616.55,224.838 1617.12,228.08 1617.69,229.208 1618.26,229.269 1618.82,229.352 1619.39,226.537 1619.96,227.916 1620.53,224.682 1621.1,226.077 1621.67,227.361 1622.23,229.558 1622.8,228.449 1623.37,227.749 1623.94,227.024 1624.51,227.349 1625.08,225.372 1625.64,224.734 1626.21,226.208 1626.78,227.425 1627.35,228.784 1627.92,229.004 1628.49,229.034 1629.05,229.084 1629.62,230.17 1630.19,231.143 1630.76,233.128 1631.33,235.016 1631.9,234.81 1632.46,234.445 1633.03,235.257 1633.6,233.815 1634.17,230.562 1634.74,228.465 1635.31,227.637 1635.87,227.953 1636.44,228.168 1637.01,228.244 1637.58,229.602 1638.15,229.715 1638.72,228.928 1639.28,227.978 1639.85,230.15 1640.42,230.362 1640.99,230.701 1641.56,232.695 1642.13,232.495 1642.69,234.444 1643.26,236.177 1643.83,233.801 1644.4,233.474 1644.97,234.318 1645.54,233.088 1646.1,232.116 1646.67,231.712 1647.24,231.538 1647.81,231.611 1648.38,230.265 1648.95,233.328 1649.51,235.266 1650.08,234.98 1650.65,234.565 1651.22,234.361 1651.79,235.428 1652.36,233.954 1652.92,233.682 1653.49,232.568 1654.06,233.211 1654.63,234.111 1655.2,233.615 1655.77,233.404 1656.33,232.135 1656.9,233.965 1657.47,231.653 1658.04,232.432 1658.61,232.043 1659.18,231.783 1659.74,230.57 1660.31,229.345 1660.88,230.252 1661.45,233.419 1662.02,234.005 1662.59,232.718 1663.15,232.377 1663.72,233.281 1664.29,231.814 1664.86,230.543 1665.43,231.635 1666,230.244 1666.56,231.002 1667.13,230.794 1667.7,232.484 1668.27,232.008 1668.84,231.724 1669.41,231.484 1669.97,231.333 1670.54,232.192 1671.11,231.906 1671.68,226.405 1672.25,224.474 1672.82,223.673 1673.38,224.232 1673.95,223.346 1674.52,221.632 1675.09,222.353 1675.66,222.834 1676.23,224.482 1676.79,224.767 1677.36,224.92 1677.93,224.182 1678.5,222.583 1679.07,224.232 1679.64,224.671 1680.2,224.131 1680.77,224.54 1681.34,225.82 1681.91,226.194 1682.48,227.629 1683.05,226.707 1683.61,226.032 1684.18,223.282 1684.75,221.859 1685.32,223.449 1685.89,224.05 1686.46,227.671 1687.02,227.795 1687.59,226.704 1688.16,226.142 1688.73,227.649 1689.3,228.887 1689.87,228.94 1690.44,226.053 1691,224.161 1691.57,222.551 1692.14,221.951 1692.71,226.754 1693.28,225.882 1693.85,227.262 1694.41,230.793 1694.98,231.826 1695.55,232.737 1696.12,233.719 1696.69,234.544 1697.26,231.211 1697.82,231.224 1698.39,231.55 1698.96,232.78 1699.53,234.851 1700.1,234.523 1700.67,235.384 1701.23,235.888 1701.8,233.494 1702.37,235.304 1702.94,233.882 1703.51,233.669 1704.08,232.403 1704.64,233.414 1705.21,234.14 1705.78,231.739 1706.35,230.434 1706.92,231.316 1707.49,229.907 1708.05,227.556 1708.62,227.79 1709.19,227.96 1709.76,230.196 1710.33,229.319 1710.9,229.447 1711.46,228.628 1712.03,227.613 1712.6,227.926 1713.17,226.999 1713.74,229.514 1714.31,229.775 1714.87,228.558 1715.44,228.68 1716.01,227.785 1716.58,227.608 1717.15,228.757 1717.72,229.979 1718.28,229.09 1718.85,231.17 1719.42,231.097 1719.99,235.182 1720.56,234.771 1721.13,235.419 1721.69,234.077 1722.26,234.852 1722.83,234.581 1723.4,236.255 1723.97,235.918 1724.54,235.505 1725.1,234.066 1725.67,231.721 1726.24,229.339 1726.81,230.397 1727.38,226.242 1727.95,226.424 1728.51,224.73 1729.08,227.21 1729.65,227.359 1730.22,227.591 1730.79,229.909 1731.36,228.881 1731.92,227.921 1732.49,230.029 1733.06,229.134 1733.63,229.223 1734.2,228.385 1734.77,229.637 1735.33,229.601 1735.9,228.531 1736.47,228.748 1737.04,226.701 1737.61,228.149 1738.18,229.46 1738.74,229.718 1739.31,230.64 1739.88,231.634 1740.45,230.473 1741.02,230.598 1741.59,231.562 1742.15,234.753 1742.72,233.309 1743.29,231.926 1743.86,231.859 1744.43,232.686 1745,231.314 1745.56,230.066 1746.13,231.172 1746.7,230.934 1747.27,229.631 1747.84,229.448 1748.41,229.504 1748.97,229.585 1749.54,229.676 1750.11,229.548 1750.68,227.429 1751.25,228.579 1751.82,232.728 1752.38,233.594 1752.95,232.363 1753.52,233.202 1754.09,233.756 1754.66,233.489 1755.23,233.281 1755.79,233.999 1756.36,234.842 1756.93,236.348 1757.5,235.632 1758.07,236.143 1758.64,233.535 1759.21,232.261 1759.77,230.69 1760.34,230.417 1760.91,227.952 1761.48,226.108 1762.05,226 1762.62,227.345 1763.18,227.294 1763.75,226.408 1764.32,226.67 1764.89,223.932 1765.46,224.173 1766.03,222.513 1766.59,223.094 1767.16,223.616 1767.73,226.123 1768.3,226.522 1768.87,227.772 1769.44,229.017 1770,227.871 1770.57,227.95 1771.14,229.186 1771.71,230.267 1772.28,231.089 1772.85,231.08 1773.41,228.679 1773.98,227.813 1774.55,228.148 1775.12,229.281 1775.69,228.161 1776.26,228.436 1776.82,226.697 1777.39,226.924 1777.96,228.211 1778.53,227.472 1779.1,226.772 1779.67,227.971 1780.23,224.871 1780.8,227.082 1781.37,228.452 1781.94,231.764 1782.51,232.592 1783.08,230.264 1783.64,229.259 1784.21,230.583 1784.78,229.591 1785.35,228.591 1785.92,228.694 1786.49,229.831 1787.05,230.85 1787.62,230.836 1788.19,228.728 1788.76,228.8 1789.33,231.978 1789.9,231.6 1790.46,229.576 1791.03,228.612 1791.6,229.978 1792.17,229.137 1792.74,229.36 1793.31,229.554 1793.87,229.77 1794.44,229.815 1795.01,229.749 1795.58,226.603 1796.15,227.748 1796.72,228.078 1797.28,229.221 1797.85,229.029 1798.42,229.025 1798.99,228.08 1799.56,229.198 1800.13,232.435 1800.69,232.452 1801.26,232.453 1801.83,232.392 1802.4,234.173 1802.97,234.769 1803.54,233.462 1804.1,235.18 1804.67,234.577 1805.24,233.255 1805.81,233.022 1806.38,232.789 1806.95,231.638 1807.51,230.409 1808.08,230.26 1808.65,229.024 1809.22,229.297 1809.79,230.32 1810.36,229.151 1810.92,229.196 1811.49,229.178 1812.06,230.421 1812.63,230.382 1813.2,230.245 1813.77,229.198 1814.33,228.371 1814.9,228.558 1815.47,229.619 1816.04,229.657 1816.61,229.695 1817.18,228.621 1817.74,227.565 1818.31,227.801 1818.88,228.856 1819.45,230.993 1820.02,232.021 1820.59,232.804 1821.15,233.464 1821.72,233.018 1822.29,233.538 1822.86,235.246 1823.43,234.578 1824,234.174 1824.56,232.744 1825.13,230.369 1825.7,230.43 1826.27,230.102 1826.84,230.124 1827.41,231.223 1827.97,232.251 1828.54,233.091 1829.11,231.871 1829.68,230.598 1830.25,231.416 1830.82,231.071 1831.39,229.675 1831.95,228.653 1832.52,229.742 1833.09,226.896 1833.66,226.755 1834.23,226.897 1834.8,226.886 1835.36,226.993 1835.93,228.238 1836.5,228.409 1837.07,226.591 1837.64,228.788 1838.21,229.892 1838.77,228.641 1839.34,228.666 1839.91,230.737 1840.48,230.601 1841.05,227.491 1841.62,226.594 1842.18,225.769 1842.75,224.16 1843.32,225.644 1843.89,225.884 1844.46,227.402 1845.03,227.582 1845.59,226.758 1846.16,226.913 1846.73,228.207 1847.3,226.124 1847.87,225.321 1848.44,226.947 1849,228.426 1849.57,229.769 1850.14,229.756 1850.71,229.795 1851.28,229.801 1851.85,229.719 1852.41,229.739 1852.98,228.868 1853.55,225.99 1854.12,227.412 1854.69,226.667 1855.26,228.911 1855.82,226.018 1856.39,227.499 1856.96,225.727 1857.53,225.081 1858.1,225.333 1858.67,225.884 1859.23,226.033 1859.8,226.485 1860.37,226.953 1860.94,227.083 1861.51,227.676 1862.08,228.993 1862.64,229.349 1863.21,227.588 1863.78,230.895 1864.35,229.892 1864.92,232.091 1865.49,232.064 1866.05,234.174 1866.62,233.845 1867.19,234.708 1867.76,234.269 1868.33,235.136 1868.9,236.056 1869.46,235.694 1870.03,235.174 1870.6,233.719 1871.17,234.48 1871.74,233.132 1872.31,234.886 1872.87,236.553 1873.44,234.814 1874.01,233.259 1874.58,231.798 1875.15,231.561 1875.72,231.322 1876.28,228.328 1876.85,230.447 1877.42,230.38 1877.99,230.315 1878.56,234.318 1879.13,233.776 1879.69,233.396 1880.26,232.161 1880.83,232.12 1881.4,230.874 1881.97,232.719 1882.54,232.524 1883.1,230.265 1883.67,229.194 1884.24,229.887 1884.81,230.843 1885.38,231.716 1885.95,230.391 1886.51,228.351 1887.08,228.421 1887.65,229.564 1888.22,230.722 1888.79,231.936 1889.36,230.776 1889.92,229.637 1890.49,229.557 1891.06,227.435 1891.63,228.793 1892.2,228.937 1892.77,226.072 1893.33,226.204 1893.9,227.69 1894.47,227.953 1895.04,229.131 1895.61,228.038 1896.18,227.002 1896.74,225.088 1897.31,224.361 1897.88,223.682 1898.45,227.314 1899.02,225.582 1899.59,224.852 1900.16,225.427 1900.72,227.891 1901.29,231.095 1901.86,232.058 1902.43,230.868 1903,231.889 1903.57,233.906 1904.13,231.52 1904.7,231.551 1905.27,231.65 1905.84,234.764 1906.41,234.38 1906.98,233.035 1907.54,231.925 1908.11,232.695 1908.68,228.519 1909.25,227.577 1909.82,225.735 1910.39,227.112 1910.95,227.505 1911.52,229.581 1912.09,230.713 1912.66,230.718 1913.23,229.676 1913.8,227.573 1914.36,228.7 1914.93,229.601 1915.5,228.481 1916.07,228.768 1916.64,228.869 1917.21,228.914 1917.77,227.888 1918.34,225.099 1918.91,226.578 1919.48,225.799 1920.05,225.125 1920.62,224.614 1921.18,225.147 1921.75,226.595 1922.32,229.319 1922.89,230.409 1923.46,228.543 1924.03,229.48 1924.59,229.639 1925.16,231.761 1925.73,230.578 1926.3,232.659 1926.87,233.409 1927.44,232.305 1928,232.042 1928.57,233.053 1929.14,232.914 1929.71,231.718 1930.28,228.325 1930.85,227.338 1931.41,228.316 1931.98,227.329 1932.55,227.636 1933.12,229.025 1933.69,228 1934.26,232.237 1934.82,230.986 1935.39,230.876 1935.96,230.995 1936.53,228.876 1937.1,228.999 1937.67,225.164 1938.23,225.609 1938.8,225.934 1939.37,227.528 1939.94,228.843 1940.51,229.15 1941.08,228.144 1941.64,229.352 1942.21,229.437 1942.78,229.672 1943.35,230.976 1943.92,230.819 1944.49,230.693 1945.05,230.55 1945.62,229.557 1946.19,231.756 1946.76,230.704 1947.33,230.663 1947.9,231.904 1948.46,232.854 1949.03,231.807 1949.6,234.631 1950.17,234.202 1950.74,232.688 1951.31,233.681 1951.87,233.697 1952.44,234.351 1953.01,237.183 1953.58,236.866 1954.15,235.68 1954.72,237.253 1955.28,236.474 1955.85,234.966 1956.42,233.465 1956.99,231.234 1957.56,233.159 1958.13,232.014 1958.69,230.798 1959.26,230.706 1959.83,230.744 1960.4,229.381 1960.97,230.712 1961.54,230.507 1962.1,230.655 1962.67,227.395 1963.24,228.498 1963.81,230.733 1964.38,229.653 1964.95,229.699 1965.51,228.464 1966.08,227.727 1966.65,226.62 1967.22,225.627 1967.79,228.859 1968.36,227.815 1968.92,227.154 1969.49,226.05 1970.06,226.239 1970.63,225.46 1971.2,227.039 1971.77,228.247 1972.34,227.4 1972.9,227.364 1973.47,226.49 1974.04,227.608 1974.61,228.966 1975.18,227.936 1975.75,227.254 1976.31,228.68 1976.88,226.843 1977.45,227.094 1978.02,227.376 1978.59,227.505 1979.16,227.958 1979.72,227.064 1980.29,226.095 1980.86,226.405 1981.43,227.646 1982,227.912 1982.57,226.823 1983.13,228.111 1983.7,227.401 1984.27,227.677 1984.84,227.03 1985.41,226.343 1985.98,224.436 1986.54,223.793 1987.11,223.366 1987.68,224.011 1988.25,223.44 1988.82,226.999 1989.39,230.612 1989.95,231.635 1990.52,235.62 1991.09,236.38 1991.66,236.874 1992.23,235.344 1992.8,236.187 1993.36,231.583 1993.93,230.502 1994.5,227.48 1995.07,229.714 1995.64,229.879 1996.21,229.857 1996.77,229.979 1997.34,228.793 1997.91,230.943 1998.48,231.872 1999.05,229.908 1999.62,227.884 2000.18,227.772 2000.75,229.184 2001.32,229.526 2001.89,230.753 2002.46,232.987 2003.03,234.077 2003.59,233.528 2004.16,233.237 2004.73,232.099 2005.3,231.932 2005.87,233.94 2006.44,233.664 2007,233.295 2007.57,236.871 2008.14,235.52 2008.71,235.323 2009.28,233.986 2009.85,233.569 2010.41,233.295 2010.98,234.164 2011.55,234.89 2012.12,233.41 2012.69,233.135 2013.26,230.975 2013.82,232.668 2014.39,232.211 2014.96,232.059 2015.53,228.957 2016.1,229.921 2016.67,231.222 2017.23,231.199 2017.8,231.088 2018.37,230.834 2018.94,229.647 2019.51,230.577 2020.08,227.227 2020.64,227.431 2021.21,226.541 2021.78,231.969 2022.35,231.915 2022.92,231.938 2023.49,231.823 2024.05,230.418 2024.62,229.427 2025.19,230.4 2025.76,231.196 2026.33,231.069 2026.9,229.866 2027.46,229.075 2028.03,228.039 2028.6,227.092 2029.17,228.453 2029.74,232.483 2030.31,235.393 2030.87,232.713 2031.44,231.412 2032.01,232.348 2032.58,231.02 2033.15,230.031 2033.72,230.853 2034.28,228.835 2034.85,227.82 2035.42,229.755 2035.99,228.689 2036.56,227.658 2037.13,228.746 2037.69,227.797 2038.26,230.044 2038.83,228.924 2039.4,230.029 2039.97,230.115 2040.54,232.221 2041.11,229.843 2041.67,229.833 2042.24,230.807 2042.81,230.695 2043.38,230.517 2043.95,230.38 2044.52,229.108 2045.08,230.228 2045.65,229.334 2046.22,229.246 2046.79,228.141 2047.36,229.596 2047.93,230.768 2048.49,229.603 2049.06,229.783 2049.63,225.806 2050.2,224.942 2050.77,226.381 2051.34,226.652 2051.9,226.855 2052.47,225.889 2053.04,230.202 2053.61,229.316 2054.18,228.212 2054.75,231.313 2055.31,229.384 2055.88,230.497 2056.45,230.55 2057.02,230.548 2057.59,230.454 2058.16,228.446 2058.72,229.519 2059.29,229.619 2059.86,229.719 2060.43,229.903 2061,229.889 2061.57,229.052 2062.13,231.034 2062.7,231.996 2063.27,232.022 2063.84,230.681 2064.41,232.63 2064.98,234.256 2065.54,235.126 2066.11,235.665 2066.68,235.313 2067.25,234.748 2067.82,232.021 2068.39,231.66 2068.95,229.538 2069.52,229.402 2070.09,228.437 2070.66,229.576 2071.23,230.751 2071.8,230.589 2072.36,231.343 2072.93,230.804 2073.5,231.456 2074.07,231.279 2074.64,231.958 2075.21,229.654 2075.77,231.577 2076.34,231.512 2076.91,231.444 2077.48,228.109 2078.05,226.873 2078.62,225.927 2079.18,225.097 2079.75,226.459 2080.32,227.744 2080.89,228.006 2081.46,230.007 2082.03,229.079 2082.59,230.018 2083.16,229.846 2083.73,227.307 2084.3,227.214 2084.87,228.21 2085.44,227.057 2086,228.302 2086.57,227.387 2087.14,228.525 2087.71,228.49 2088.28,230.645 2088.85,230.606 2089.41,230.432 2089.98,230.327 2090.55,231.532 2091.12,230.36 2091.69,230.312 2092.26,232.312 2092.82,230.971 2093.39,229.837 2093.96,230.854 2094.53,229.829 2095.1,229.716 2095.67,228.528 2096.23,227.63 2096.8,225.692 2097.37,224.786 2097.94,227.338 2098.51,227.668 2099.08,228.654 2099.64,231.73 2100.21,231.599 2100.78,232.409 2101.35,231.932 2101.92,232.826 2102.49,234.41 2103.05,232.843 2103.62,232.507 2104.19,233.424 2104.76,233.226 2105.33,232.014 2105.9,228.802 2106.46,230.059 2107.03,230.027 2107.6,231.905 2108.17,230.814 2108.74,230.584 2109.31,231.686 2109.87,231.439 2110.44,232.409 2111.01,231.971 2111.58,230.784 2112.15,230.731 2112.72,229.4 2113.29,229.45 2113.85,227.406 2114.42,227.318 2114.99,227.365 2115.56,227.466 2116.13,227.504 2116.7,227.796 2117.26,230.982 2117.83,233.941 2118.4,232.668 2118.97,233.358 2119.54,230.982 2120.11,231.545 2120.67,231.622 2121.24,231.479 2121.81,232.388 2122.38,231.237 2122.95,230.958 2123.52,229.836 2124.08,228.682 2124.65,229.694 2125.22,231.836 2125.79,232.24 2126.36,232.848 2126.93,233.711 2127.49,230.256 2128.06,230.268 2128.63,228.99 2129.2,226.836 2129.77,228.065 2130.34,228.018 2130.9,225.715 2131.47,226.009 2132.04,228.237 2132.61,227.414 2133.18,227.681 2133.75,226.758 2134.31,226.998 2134.88,227.103 2135.45,227.303 2136.02,227.424 2136.59,225.409 2137.16,224.635 2137.72,221.691 2138.29,222.291 2138.86,222.934 2139.43,223.636 2140,221.929 2140.57,222.682 2141.13,220.333 2141.7,220.12 2142.27,221.929 2142.84,222.462 2143.41,224.136 2143.98,223.727 2144.54,221.306 2145.11,222.006 2145.68,224.727 2146.25,226.131 2146.82,226.608 2147.39,228.896 2147.95,229.092 2148.52,228.271 2149.09,227.601 2149.66,228.858 2150.23,231.084 2150.8,230.025 2151.36,230.104 2151.93,229.153 2152.5,230.401 2153.07,228.53 2153.64,228.692 2154.21,228.79 2154.77,230.004 2155.34,229.182 2155.91,231.443 2156.48,231.675 2157.05,231.738 2157.62,230.53 2158.18,226.559 2158.75,226.963 2159.32,228.294 2159.89,228.567 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.023\n  with uncertainty of ± 0.0020429070332109523\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01731 ± (0.00328013, 0.00336262) (MC)\n  95% confidence interval: [-4.02404, -4.01098] (MC)\n  linear error propagation: -4.01728 ± 0.00331448\n  |δ_y| = |0.00277135| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017313971585386, val_l = 0.006726532697184595, val_u = 0.00632957149081026)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip270\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip271\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip272\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.59 2211.02,1151.59 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,998.439 2211.02,998.439 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,845.288 2211.02,845.288 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,692.137 2211.02,692.137 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,538.986 2211.02,538.986 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,385.835 2211.02,385.835 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,232.684 2211.02,232.684 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.59 365.751,1151.59 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,998.439 365.751,998.439 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,845.288 365.751,845.288 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,692.137 365.751,692.137 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,538.986 365.751,538.986 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,385.835 365.751,385.835 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,232.684 365.751,232.684 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M298.909 1137.39 Q295.298 1137.39 293.469 1140.95 Q291.664 1144.49 291.664 1151.62 Q291.664 1158.73 293.469 1162.3 Q295.298 1165.84 298.909 1165.84 Q302.543 1165.84 304.349 1162.3 Q306.177 1158.73 306.177 1151.62 Q306.177 1144.49 304.349 1140.95 Q302.543 1137.39 298.909 1137.39 M298.909 1133.68 Q304.719 1133.68 307.775 1138.29 Q310.853 1142.87 310.853 1151.62 Q310.853 1160.35 307.775 1164.96 Q304.719 1169.54 298.909 1169.54 Q293.099 1169.54 290.02 1164.96 Q286.964 1160.35 286.964 1151.62 Q286.964 1142.87 290.02 1138.29 Q293.099 1133.68 298.909 1133.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M259.557 1011.78 L267.196 1011.78 L267.196 985.418 L258.886 987.085 L258.886 982.826 L267.15 981.159 L271.826 981.159 L271.826 1011.78 L279.465 1011.78 L279.465 1015.72 L259.557 1015.72 L259.557 1011.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 984.238 Q295.298 984.238 293.469 987.802 Q291.664 991.344 291.664 998.474 Q291.664 1005.58 293.469 1009.14 Q295.298 1012.69 298.909 1012.69 Q302.543 1012.69 304.349 1009.14 Q306.177 1005.58 306.177 998.474 Q306.177 991.344 304.349 987.802 Q302.543 984.238 298.909 984.238 M298.909 980.534 Q304.719 980.534 307.775 985.14 Q310.853 989.724 310.853 998.474 Q310.853 1007.2 307.775 1011.81 Q304.719 1016.39 298.909 1016.39 Q293.099 1016.39 290.02 1011.81 Q286.964 1007.2 286.964 998.474 Q286.964 989.724 290.02 985.14 Q293.099 980.534 298.909 980.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M262.775 858.633 L279.094 858.633 L279.094 862.568 L257.15 862.568 L257.15 858.633 Q259.812 855.878 264.395 851.248 Q269.002 846.596 270.182 845.253 Q272.428 842.73 273.307 840.994 Q274.21 839.235 274.21 837.545 Q274.21 834.79 272.266 833.054 Q270.344 831.318 267.242 831.318 Q265.043 831.318 262.59 832.082 Q260.159 832.846 257.381 834.397 L257.381 829.675 Q260.205 828.54 262.659 827.962 Q265.113 827.383 267.15 827.383 Q272.52 827.383 275.715 830.068 Q278.909 832.753 278.909 837.244 Q278.909 839.374 278.099 841.295 Q277.312 843.193 275.205 845.786 Q274.627 846.457 271.525 849.674 Q268.423 852.869 262.775 858.633 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 831.087 Q295.298 831.087 293.469 834.651 Q291.664 838.193 291.664 845.323 Q291.664 852.429 293.469 855.994 Q295.298 859.535 298.909 859.535 Q302.543 859.535 304.349 855.994 Q306.177 852.429 306.177 845.323 Q306.177 838.193 304.349 834.651 Q302.543 831.087 298.909 831.087 M298.909 827.383 Q304.719 827.383 307.775 831.989 Q310.853 836.573 310.853 845.323 Q310.853 854.049 307.775 858.656 Q304.719 863.239 298.909 863.239 Q293.099 863.239 290.02 858.656 Q286.964 854.049 286.964 845.323 Q286.964 836.573 290.02 831.989 Q293.099 827.383 298.909 827.383 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M272.914 690.783 Q276.27 691.5 278.145 693.769 Q280.043 696.037 280.043 699.371 Q280.043 704.486 276.525 707.287 Q273.006 710.088 266.525 710.088 Q264.349 710.088 262.034 709.648 Q259.742 709.232 257.289 708.375 L257.289 703.861 Q259.233 704.996 261.548 705.574 Q263.863 706.153 266.386 706.153 Q270.784 706.153 273.076 704.417 Q275.39 702.681 275.39 699.371 Q275.39 696.315 273.238 694.602 Q271.108 692.866 267.289 692.866 L263.261 692.866 L263.261 689.023 L267.474 689.023 Q270.923 689.023 272.752 687.658 Q274.58 686.269 274.58 683.676 Q274.58 681.014 272.682 679.602 Q270.807 678.167 267.289 678.167 Q265.367 678.167 263.168 678.584 Q260.969 679 258.33 679.88 L258.33 675.713 Q260.992 674.973 263.307 674.602 Q265.645 674.232 267.705 674.232 Q273.029 674.232 276.131 676.662 Q279.233 679.07 279.233 683.19 Q279.233 686.061 277.59 688.051 Q275.946 690.019 272.914 690.783 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 677.936 Q295.298 677.936 293.469 681.5 Q291.664 685.042 291.664 692.172 Q291.664 699.278 293.469 702.843 Q295.298 706.384 298.909 706.384 Q302.543 706.384 304.349 702.843 Q306.177 699.278 306.177 692.172 Q306.177 685.042 304.349 681.5 Q302.543 677.936 298.909 677.936 M298.909 674.232 Q304.719 674.232 307.775 678.838 Q310.853 683.422 310.853 692.172 Q310.853 700.898 307.775 705.505 Q304.719 710.088 298.909 710.088 Q293.099 710.088 290.02 705.505 Q286.964 700.898 286.964 692.172 Q286.964 683.422 290.02 678.838 Q293.099 674.232 298.909 674.232 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M271.594 525.78 L259.789 544.229 L271.594 544.229 L271.594 525.78 M270.367 521.706 L276.247 521.706 L276.247 544.229 L281.177 544.229 L281.177 548.118 L276.247 548.118 L276.247 556.266 L271.594 556.266 L271.594 548.118 L255.992 548.118 L255.992 543.604 L270.367 521.706 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 524.785 Q295.298 524.785 293.469 528.349 Q291.664 531.891 291.664 539.021 Q291.664 546.127 293.469 549.692 Q295.298 553.234 298.909 553.234 Q302.543 553.234 304.349 549.692 Q306.177 546.127 306.177 539.021 Q306.177 531.891 304.349 528.349 Q302.543 524.785 298.909 524.785 M298.909 521.081 Q304.719 521.081 307.775 525.687 Q310.853 530.271 310.853 539.021 Q310.853 547.747 307.775 552.354 Q304.719 556.937 298.909 556.937 Q293.099 556.937 290.02 552.354 Q286.964 547.747 286.964 539.021 Q286.964 530.271 290.02 525.687 Q293.099 521.081 298.909 521.081 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M258.793 368.555 L277.15 368.555 L277.15 372.49 L263.076 372.49 L263.076 380.962 Q264.094 380.615 265.113 380.453 Q266.131 380.268 267.15 380.268 Q272.937 380.268 276.316 383.439 Q279.696 386.61 279.696 392.027 Q279.696 397.606 276.224 400.708 Q272.752 403.786 266.432 403.786 Q264.256 403.786 261.988 403.416 Q259.742 403.045 257.335 402.305 L257.335 397.606 Q259.418 398.74 261.641 399.295 Q263.863 399.851 266.34 399.851 Q270.344 399.851 272.682 397.745 Q275.02 395.638 275.02 392.027 Q275.02 388.416 272.682 386.309 Q270.344 384.203 266.34 384.203 Q264.465 384.203 262.59 384.62 Q260.738 385.036 258.793 385.916 L258.793 368.555 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 371.634 Q295.298 371.634 293.469 375.198 Q291.664 378.74 291.664 385.87 Q291.664 392.976 293.469 396.541 Q295.298 400.083 298.909 400.083 Q302.543 400.083 304.349 396.541 Q306.177 392.976 306.177 385.87 Q306.177 378.74 304.349 375.198 Q302.543 371.634 298.909 371.634 M298.909 367.93 Q304.719 367.93 307.775 372.536 Q310.853 377.12 310.853 385.87 Q310.853 394.596 307.775 399.203 Q304.719 403.786 298.909 403.786 Q293.099 403.786 290.02 399.203 Q286.964 394.596 286.964 385.87 Q286.964 377.12 290.02 372.536 Q293.099 367.93 298.909 367.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M269.326 230.821 Q266.178 230.821 264.326 232.973 Q262.497 235.126 262.497 238.876 Q262.497 242.603 264.326 244.779 Q266.178 246.932 269.326 246.932 Q272.474 246.932 274.303 244.779 Q276.154 242.603 276.154 238.876 Q276.154 235.126 274.303 232.973 Q272.474 230.821 269.326 230.821 M278.608 216.168 L278.608 220.427 Q276.849 219.594 275.043 219.154 Q273.261 218.714 271.502 218.714 Q266.872 218.714 264.418 221.839 Q261.988 224.964 261.641 231.283 Q263.006 229.27 265.066 228.205 Q267.127 227.117 269.603 227.117 Q274.812 227.117 277.821 230.288 Q280.853 233.436 280.853 238.876 Q280.853 244.2 277.705 247.418 Q274.557 250.635 269.326 250.635 Q263.33 250.635 260.159 246.052 Q256.988 241.445 256.988 232.719 Q256.988 224.524 260.877 219.663 Q264.766 214.779 271.316 214.779 Q273.076 214.779 274.858 215.126 Q276.664 215.473 278.608 216.168 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M298.909 218.483 Q295.298 218.483 293.469 222.047 Q291.664 225.589 291.664 232.719 Q291.664 239.825 293.469 243.39 Q295.298 246.932 298.909 246.932 Q302.543 246.932 304.349 243.39 Q306.177 239.825 306.177 232.719 Q306.177 225.589 304.349 222.047 Q302.543 218.483 298.909 218.483 M298.909 214.779 Q304.719 214.779 307.775 219.385 Q310.853 223.969 310.853 232.719 Q310.853 241.445 307.775 246.052 Q304.719 250.635 298.909 250.635 Q293.099 250.635 290.02 246.052 Q286.964 241.445 286.964 232.719 Q286.964 223.969 290.02 219.385 Q293.099 214.779 298.909 214.779 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1038.74 400.199,935.073 400.786,839.951 401.372,752.803 401.958,673.1 402.545,600.348 403.131,534.095 403.718,473.915 404.304,419.415 404.891,370.228 405.477,414.239 406.063,370.631 406.65,331.578 407.236,296.783 407.823,333.4 408.409,364.18 408.995,335.324 409.582,309.965 410.168,287.871 410.755,269.654 411.341,253.409 411.927,239.82 412.514,228.705 413.1,219.895 413.687,247.951 414.273,240.826 414.86,265.727 415.446,262.63 416.032,286.869 416.619,310.272 417.205,310.524 417.792,395.025 418.378,398.454 418.964,401.583 419.551,406.324 420.137,411.876 420.724,433.524 421.31,439.783 421.896,460.676 422.483,467.746 423.069,475.975 423.656,506.916 424.242,513.971 424.829,521.539 425.415,538.633 426.001,547.176 426.588,556.382 427.174,565.719 427.761,583.231 428.347,600.324 428.933,630.442 429.52,645.799 430.106,654.347 430.693,668.253 431.279,687.229 431.865,711.679 432.452,723.933 433.038,736.031 433.625,748.354 434.211,759.581 434.798,770.743 435.384,777.048 435.97,792.642 436.557,816.002 437.143,826.567 437.73,836.637 438.316,847.064 438.902,856.719 439.489,877.206 440.075,886.342 440.662,898.816 441.248,907.655 441.835,916.405 442.421,925.243 443.007,933.619 443.594,939.287 444.18,944.483 444.767,955.438 445.353,968.718 445.939,978.724 446.526,991.221 447.112,997.963 447.699,1009.46 448.285,1020.5 448.871,1031.21 449.458,1037.13 450.044,1042.75 450.631,1048.04 451.217,1053.48 451.804,1058.46 452.39,1061.57 452.976,1066.76 453.563,1071.65 454.149,1072.61 454.736,1081.94 455.322,1088.95 455.908,1095.83 456.495,1098.46 457.081,1104.95 457.668,1109.36 458.254,1115.37 458.84,1123.27 459.427,1128.72 460.013,1130.64 460.6,1136.24 461.186,1141.51 461.773,1143.23 462.359,1152.01 462.945,1155.56 463.532,1158.35 464.118,1164.32 464.705,1163.68 465.291,1166.62 465.877,1167.64 466.464,1171.78 467.05,1177.56 467.637,1178.22 468.223,1180.43 468.809,1181.48 469.396,1179.07 469.982,1177.11 470.569,1182.68 471.155,1184.97 471.742,1188.95 472.328,1194.29 472.914,1194.86 473.501,1196.74 474.087,1198.91 474.674,1198.92 475.26,1200.85 475.846,1202.6 476.433,1202.7 477.019,1202.97 477.606,1203.28 478.192,1205.1 478.778,1211.58 479.365,1215.97 479.951,1217.29 480.538,1215.5 481.124,1218.48 481.711,1221.16 482.297,1222.57 482.883,1224.92 483.47,1227.57 484.056,1229.88 484.643,1229.1 485.229,1228.72 485.815,1225.49 486.402,1225.23 486.988,1223.64 487.575,1226.29 488.161,1227.29 488.748,1228.6 489.334,1228.12 489.92,1227.64 490.507,1230.1 491.093,1232.8 491.68,1232.49 492.266,1232.23 492.852,1230.71 493.439,1228.02 494.025,1229.56 494.612,1234.75 495.198,1235.69 495.784,1235.28 496.371,1240.29 496.957,1242.69 497.544,1240.32 498.13,1241.1 498.717,1244.52 499.303,1243.64 499.889,1242.87 500.476,1239.51 501.062,1237.79 501.649,1235.82 502.235,1235.61 502.821,1231.5 503.408,1229.94 503.994,1231.23 504.581,1232.75 505.167,1231.51 505.753,1231.7 506.34,1231.65 506.926,1232.87 507.513,1234.35 508.099,1230.37 508.686,1231.5 509.272,1231.75 509.858,1231.55 510.445,1231.44 511.031,1232.57 511.618,1233.6 512.204,1236.3 512.79,1238.89 513.377,1238.14 513.963,1237.85 514.55,1238.88 515.136,1236.25 515.722,1237.27 516.309,1237.19 516.895,1237.09 517.482,1238.07 518.068,1240.42 518.655,1240.21 519.241,1239.87 519.827,1242.01 520.414,1241.48 521,1243.78 521.587,1243.27 522.173,1242.59 522.759,1242.07 523.346,1244.1 523.932,1242.46 524.519,1244.68 525.105,1245.53 525.691,1247.54 526.278,1249.29 526.864,1249.66 527.451,1249.99 528.037,1247.86 528.624,1250.53 529.21,1249.77 529.796,1248.86 530.383,1245.6 530.969,1247.22 531.556,1247.48 532.142,1249.12 532.728,1248.24 533.315,1247.29 533.901,1245.03 534.488,1244.34 535.074,1245.23 535.661,1244.7 536.247,1241.3 536.833,1243.69 537.42,1243.06 538.006,1242.43 538.593,1244.22 539.179,1243.52 539.765,1242.7 540.352,1243.47 540.938,1241.56 541.525,1241.01 542.111,1239.37 542.697,1240.24 543.284,1239.51 543.87,1237.68 544.457,1238.83 545.043,1239.7 545.63,1240.76 546.216,1240.03 546.802,1240.97 547.389,1241.68 547.975,1240.74 548.562,1240.56 549.148,1238.64 549.734,1235.8 550.321,1233.02 550.907,1231.63 551.494,1230.48 552.08,1230.41 552.666,1230.4 553.253,1231.8 553.839,1232.78 554.426,1233.52 555.012,1234.68 555.599,1234.23 556.185,1234.12 556.771,1235.2 557.358,1236.19 557.944,1238.34 558.531,1240.58 559.117,1241.23 559.703,1241.76 560.29,1244.99 560.876,1244 561.463,1243.53 562.049,1242.97 562.635,1242.27 563.222,1241.42 563.808,1239.52 564.395,1236.3 564.981,1234.76 565.568,1235.51 566.154,1235.23 566.74,1234.85 567.327,1234.52 567.913,1234.33 568.5,1232.84 569.086,1235.37 569.672,1236.25 570.259,1234.72 570.845,1234.11 571.432,1233.55 572.018,1233.16 572.605,1232.87 573.191,1232.45 573.777,1231.12 574.364,1234.7 574.95,1234.21 575.537,1234 576.123,1233.59 576.709,1235.64 577.296,1234.11 577.882,1235.18 578.469,1233.57 579.055,1234.51 579.641,1235.45 580.228,1235.06 580.814,1235.67 581.401,1236.31 581.987,1233.2 582.574,1232.78 583.16,1234.98 583.746,1236.75 584.333,1237.55 584.919,1236.82 585.506,1236.39 586.092,1234.65 586.678,1233.11 587.265,1232.45 587.851,1235.91 588.438,1235.35 589.024,1234.92 589.61,1234.43 590.197,1232.63 590.783,1233.7 591.37,1234.4 591.956,1235.29 592.543,1237.15 593.129,1237.86 593.715,1237.26 594.302,1234.25 594.888,1231.28 595.475,1232.1 596.061,1231.95 596.647,1231.16 597.234,1233.45 597.82,1233.16 598.407,1233.91 598.993,1232.1 599.579,1234.19 600.166,1233.7 600.752,1234.39 601.339,1232.59 601.925,1233.27 602.512,1231.52 603.098,1232.41 603.684,1228.26 604.271,1229.1 604.857,1229.04 605.444,1230.18 606.03,1227.42 606.616,1228.34 607.203,1229.55 607.789,1228.12 608.376,1224.16 608.962,1224.27 609.548,1225.68 610.135,1227.06 610.721,1227.01 611.308,1227.9 611.894,1226.39 612.481,1227.65 613.067,1228.51 613.653,1228.15 614.24,1226.6 614.826,1225.22 615.413,1224.03 615.999,1221.06 616.585,1221.41 617.172,1222.93 617.758,1224.06 618.345,1224.07 618.931,1224.18 619.518,1222.79 620.104,1225.16 620.69,1223.49 621.277,1223.62 621.863,1226.86 622.45,1228.1 623.036,1226.79 623.622,1225.31 624.209,1225.22 624.795,1223.74 625.382,1222.35 625.968,1224.82 626.554,1223.62 627.141,1222.36 627.727,1224.86 628.314,1227.34 628.9,1229.67 629.487,1229.32 630.073,1227.78 630.659,1227.58 631.246,1228.37 631.832,1226.93 632.419,1229.21 633.005,1229.04 633.591,1228.49 634.178,1226.77 634.764,1226.45 635.351,1229.76 635.937,1229.47 636.523,1227.74 637.11,1227.36 637.696,1228.34 638.283,1229.24 638.869,1230.26 639.456,1232.28 640.042,1232.67 640.628,1233.79 641.215,1231.76 641.801,1231.12 642.388,1231.88 642.974,1231.55 643.56,1231.13 644.147,1230.52 644.733,1230 645.32,1225.86 645.906,1224.25 646.492,1225.45 647.079,1223.96 647.665,1221.26 648.252,1221.25 648.838,1219.94 649.425,1221.11 650.011,1222.29 650.597,1222.06 651.184,1222 651.77,1220.88 652.357,1222.11 652.943,1222.07 653.529,1222.01 654.116,1224.29 654.702,1223.04 655.289,1220.28 655.875,1220.22 656.462,1220.47 657.048,1222.79 657.634,1225.21 658.221,1223.27 658.807,1223.1 659.394,1222.91 659.98,1225.28 660.566,1224.09 661.153,1224.06 661.739,1223.94 662.326,1223.55 662.912,1224.56 663.498,1224.36 664.085,1223.16 664.671,1225.59 665.258,1225.24 665.844,1225.04 666.431,1224.73 667.017,1223.12 667.603,1224.03 668.19,1223.73 668.776,1223.75 669.363,1222.34 669.949,1223.22 670.535,1224.17 671.122,1221.6 671.708,1221.32 672.295,1222.43 672.881,1221.18 673.467,1219.58 674.054,1219.63 674.64,1219.91 675.227,1223.65 675.813,1222.17 676.4,1220.39 676.986,1216.53 677.572,1217.69 678.159,1219.13 678.745,1220.32 679.332,1220.37 679.918,1223.11 680.504,1225.36 681.091,1222.32 681.677,1220.77 682.264,1222.02 682.85,1220.55 683.436,1221.85 684.023,1223.96 684.609,1223.85 685.196,1225.01 685.782,1229.57 686.369,1229.19 686.955,1226.4 687.541,1224.58 688.128,1220.81 688.714,1222.16 689.301,1220.6 689.887,1221.78 690.473,1221.5 691.06,1220.03 691.646,1220.17 692.233,1220.08 692.819,1221.46 693.405,1221.16 693.992,1221.36 694.578,1222.49 695.165,1224.48 695.751,1222.84 696.338,1221.26 696.924,1222.52 697.51,1224.69 698.097,1225.71 698.683,1226.6 699.27,1224.86 699.856,1224.68 700.442,1221.77 701.029,1220.2 701.615,1218.89 702.202,1215 702.788,1217.63 703.375,1215.34 703.961,1215.36 704.547,1216.77 705.134,1215.55 705.72,1214.26 706.307,1214.54 706.893,1217.13 707.479,1218.48 708.066,1217.33 708.652,1217.23 709.239,1215.92 709.825,1217.16 710.411,1217.5 710.998,1217.33 711.584,1216.56 712.171,1216.57 712.757,1217.87 713.344,1217.9 713.93,1217.93 714.516,1217.95 715.103,1212.83 715.689,1213.02 716.276,1215.61 716.862,1215.82 717.448,1217.01 718.035,1214.28 718.621,1216.86 719.208,1217.09 719.794,1217.01 720.38,1218.05 720.967,1219.48 721.553,1220.48 722.14,1216.29 722.726,1217.63 723.313,1216.56 723.899,1217.9 724.485,1218.95 725.072,1221.14 725.658,1221.02 726.245,1220.85 726.831,1220.46 727.417,1218.9 728.004,1218.72 728.59,1218.44 729.177,1218.28 729.763,1219.5 730.349,1222.15 730.936,1223.15 731.522,1222.94 732.109,1219.93 732.695,1217.07 733.282,1219.46 733.868,1221.89 734.454,1223.07 735.041,1223.16 735.627,1220.42 736.214,1221.59 736.8,1220.15 737.386,1220.03 737.973,1219.92 738.559,1219.74 739.146,1218.56 739.732,1220.04 740.318,1217.54 740.905,1218.85 741.491,1217.46 742.078,1216.27 742.664,1216.31 743.251,1218.87 743.837,1218.83 744.423,1219.69 745.01,1219.53 745.596,1219.35 746.183,1220.25 746.769,1221.41 747.355,1221.39 747.942,1217.64 748.528,1218.71 749.115,1218.46 749.701,1220.93 750.288,1216.94 750.874,1214.36 751.46,1213.22 752.047,1214.65 752.633,1215.97 753.22,1215.97 753.806,1214.94 754.392,1212.6 754.979,1210.52 755.565,1213.19 756.152,1212.07 756.738,1213.43 757.324,1217.4 757.911,1217.47 758.497,1219.76 759.084,1217.23 759.67,1215.82 760.257,1217.07 760.843,1214.63 761.429,1213.68 762.016,1214.77 762.602,1216.33 763.189,1217.51 763.775,1215.11 764.361,1211.52 764.948,1211.72 765.534,1209.51 766.121,1208.61 766.707,1210.41 767.293,1211.97 767.88,1216.01 768.466,1218.64 769.053,1218.73 769.639,1218.47 770.226,1219.4 770.812,1220.47 771.398,1220.26 771.985,1219.96 772.571,1220.79 773.158,1220.33 773.744,1221.32 774.33,1222.28 774.917,1221.84 775.503,1223.72 776.09,1220.88 776.676,1220.47 777.262,1221.73 777.849,1220.06 778.435,1221.03 779.022,1218.15 779.608,1219.4 780.195,1219.19 780.781,1223.84 781.367,1224.73 781.954,1224.54 782.54,1222.66 783.127,1221.49 783.713,1218.82 784.299,1217.65 784.886,1217.69 785.472,1217.69 786.059,1218.9 786.645,1218.92 787.232,1220.01 787.818,1218.7 788.404,1217.48 788.991,1217.13 789.577,1216.99 790.164,1218.29 790.75,1218.27 791.336,1215.48 791.923,1216.78 792.509,1218.04 793.096,1215.48 793.682,1215.63 794.268,1217.9 794.855,1219.12 795.441,1220.23 796.028,1219.95 796.614,1219.69 797.201,1219.56 797.787,1218.13 798.373,1219.41 798.96,1217.97 799.546,1217.85 800.133,1217.86 800.719,1217.85 801.305,1216.79 801.892,1220.35 802.478,1218.76 803.065,1217.23 803.651,1218.46 804.237,1217.06 804.824,1218.11 805.41,1219.32 805.997,1220.6 806.583,1222.93 807.17,1223.87 807.756,1220.75 808.342,1220.56 808.929,1219.2 809.515,1216.39 810.102,1219.01 810.688,1221.41 811.274,1220.98 811.861,1221.95 812.447,1221.69 813.034,1222.46 813.62,1222.13 814.206,1220.27 814.793,1220.14 815.379,1219.98 815.966,1218.2 816.552,1216.87 817.139,1218.17 817.725,1217.9 818.311,1219 818.898,1219.99 819.484,1222.47 820.071,1221.99 820.657,1220.54 821.243,1219.08 821.83,1219.02 822.416,1215.17 823.003,1217.53 823.589,1217.45 824.175,1219.58 824.762,1218.28 825.348,1218.31 825.935,1221.94 826.521,1223.96 827.108,1225.87 827.694,1224.26 828.28,1225.32 828.867,1225.65 829.453,1226.31 830.04,1223.26 830.626,1220.22 831.212,1219.54 831.799,1216.92 832.385,1215.67 832.972,1216.94 833.558,1220.61 834.145,1220.57 834.731,1216.47 835.317,1217.51 835.904,1217.5 836.49,1215.86 837.077,1214.64 837.663,1217.06 838.249,1214.22 838.836,1211.73 839.422,1210.38 840.009,1210.54 840.595,1210.63 841.181,1209.51 841.768,1209.96 842.354,1211.56 842.941,1210.55 843.527,1209.69 844.114,1210.16 844.7,1211.75 845.286,1212 845.873,1213.26 846.459,1213.47 847.046,1215.17 847.632,1214.02 848.218,1211.72 848.805,1213.1 849.391,1211.81 849.978,1213.22 850.564,1212.07 851.15,1211.12 851.737,1211.4 852.323,1210.11 852.91,1209.01 853.496,1208.2 854.083,1209.89 854.669,1209.29 855.255,1211.94 855.842,1215.8 856.428,1216.65 857.015,1215.18 857.601,1215.28 858.187,1216.48 858.774,1217.91 859.36,1217.62 859.947,1218.74 860.533,1218.15 861.119,1218.02 861.706,1219.07 862.292,1218.64 862.879,1217.18 863.465,1217.12 864.052,1215.81 864.638,1214.44 865.224,1215.56 865.811,1215.44 866.397,1210.65 866.984,1213.31 867.57,1211.07 868.156,1211.26 868.743,1208.94 869.329,1209.39 869.916,1211.96 870.502,1212.16 871.089,1214.97 871.675,1212.35 872.261,1216.05 872.848,1217.29 873.434,1218.52 874.021,1217.35 874.607,1215.98 875.193,1215.88 875.78,1217.24 876.366,1217.17 876.953,1215.85 877.539,1212.13 878.125,1212.55 878.712,1210.41 879.298,1210.71 879.885,1209.82 880.471,1210.06 881.058,1207.94 881.644,1213.58 882.23,1213.59 882.817,1212.15 883.403,1212.4 883.99,1212.54 884.576,1212.52 885.162,1214.99 885.749,1214.7 886.335,1213.23 886.922,1213.19 887.508,1214.4 888.094,1215.56 888.681,1214.98 889.267,1215.99 889.854,1217.28 890.44,1219.58 891.027,1217 891.613,1215.76 892.199,1220.76 892.786,1221.56 893.372,1218.9 893.959,1216.3 894.545,1217.15 895.131,1217.01 895.718,1216.61 896.304,1215.22 896.891,1216.2 897.477,1214.95 898.063,1216.36 898.65,1216.02 899.236,1214.82 899.823,1216.16 900.409,1218.6 900.996,1214.58 901.582,1214.51 902.168,1215.96 902.755,1218.66 903.341,1219.75 903.928,1224.54 904.514,1227.71 905.1,1226.94 905.687,1226.25 906.273,1225.58 906.86,1222.86 907.446,1222.54 908.032,1224.22 908.619,1222.49 909.205,1220.88 909.792,1220.62 910.378,1220.29 910.965,1222.47 911.551,1222.24 912.137,1221.71 912.724,1218.75 913.31,1217.44 913.897,1218.59 914.483,1215.91 915.069,1215.78 915.656,1213.03 916.242,1214.32 916.829,1214.53 917.415,1213.05 918.002,1214.54 918.588,1215.82 919.174,1214.52 919.761,1214.69 920.347,1214.8 920.934,1215.06 921.52,1217.61 922.106,1219.7 922.693,1220.57 923.279,1220.29 923.866,1219.84 924.452,1218.36 925.038,1218.41 925.625,1220.63 926.211,1220.24 926.798,1220.08 927.384,1222.49 927.971,1219.49 928.557,1214.19 929.143,1212.92 929.73,1210.52 930.316,1210.81 930.903,1210.97 931.489,1212.52 932.075,1212.73 932.662,1210.61 933.248,1208.13 933.835,1208.11 934.421,1208.48 935.007,1209.92 935.594,1208.99 936.18,1205.62 936.767,1204.95 937.353,1205.42 937.94,1208.35 938.526,1209.88 939.112,1211.36 939.699,1210.27 940.285,1210.66 940.872,1209.62 941.458,1212.5 942.044,1211.63 942.631,1211.87 943.217,1209.46 943.804,1211.05 944.39,1211.28 944.976,1212.86 945.563,1213.09 946.149,1214.15 946.736,1212.84 947.322,1212.9 947.909,1212.07 948.495,1213.73 949.081,1213.87 949.668,1215.15 950.254,1216.2 950.841,1216.42 951.427,1214.99 952.013,1215.12 952.6,1215.13 953.186,1215.28 953.773,1216.42 954.359,1216.27 954.945,1215.88 955.532,1214.56 956.118,1213.54 956.705,1213.57 957.291,1213.7 957.878,1213.87 958.464,1214 959.05,1210.13 959.637,1208.98 960.223,1209.1 960.81,1208.39 961.396,1208.93 961.982,1208.98 962.569,1209.32 963.155,1208.4 963.742,1210.05 964.328,1210.23 964.915,1214.34 965.501,1213.99 966.087,1214.18 966.674,1214.53 967.26,1216.79 967.847,1215.3 968.433,1214.3 969.019,1213.09 969.606,1213.98 970.192,1214.01 970.779,1216.4 971.365,1216.37 971.951,1215.36 972.538,1215.32 973.124,1217.73 973.711,1217.49 974.297,1216.23 974.884,1217.21 975.47,1215.78 976.056,1214.15 976.643,1212.79 977.229,1213.09 977.816,1211.91 978.402,1212.07 978.988,1213.39 979.575,1211.92 980.161,1210.98 980.748,1211.22 981.334,1211.41 981.92,1212.8 982.507,1215.39 983.093,1215.42 983.68,1215.12 984.266,1213.75 984.853,1214.93 985.439,1210.95 986.025,1210.02 986.612,1211.6 987.198,1215.55 987.785,1217.97 988.371,1218.81 988.957,1218.53 989.544,1216.64 990.13,1216.41 990.717,1217.73 991.303,1216.22 991.889,1217.4 992.476,1217.42 993.062,1213.43 993.649,1213.28 994.235,1213.15 994.822,1211.74 995.408,1210.65 995.994,1209.62 996.581,1209.9 997.167,1209.05 997.754,1210.34 998.34,1210.6 998.926,1209.32 999.513,1210.57 1000.1,1211.85 1000.69,1211.95 1001.27,1214.4 1001.86,1213.2 1002.44,1212.03 1003.03,1213.34 1003.62,1210.65 1004.2,1209.49 1004.79,1209.81 1005.38,1211.19 1005.96,1207.75 1006.55,1208.25 1007.14,1208.38 1007.72,1207.46 1008.31,1209.23 1008.9,1209.41 1009.48,1207.11 1010.07,1207.44 1010.65,1209.11 1011.24,1209.65 1011.83,1211.5 1012.41,1211.78 1013,1213.04 1013.59,1212.98 1014.17,1211.84 1014.76,1210.83 1015.35,1211.05 1015.93,1211.04 1016.52,1213.86 1017.11,1213.7 1017.69,1213.28 1018.28,1215.77 1018.86,1214.47 1019.45,1214.42 1020.04,1211.88 1020.62,1209.39 1021.21,1212.14 1021.8,1211 1022.38,1211.41 1022.97,1211.34 1023.56,1211.25 1024.14,1211.48 1024.73,1212.63 1025.32,1212.64 1025.9,1212.88 1026.49,1213.03 1027.07,1213.13 1027.66,1212.02 1028.25,1211.89 1028.83,1214.47 1029.42,1214.3 1030.01,1215.55 1030.59,1215.48 1031.18,1215.54 1031.77,1215.51 1032.35,1216.79 1032.94,1218.01 1033.52,1216.5 1034.11,1211.08 1034.7,1210.05 1035.28,1211.69 1035.87,1214.27 1036.46,1212.8 1037.04,1212.89 1037.63,1214.06 1038.22,1213.99 1038.8,1214 1039.39,1213.02 1039.98,1211.88 1040.56,1213.16 1041.15,1215.81 1041.73,1215.82 1042.32,1216.02 1042.91,1218.08 1043.49,1219.07 1044.08,1217.52 1044.67,1216.02 1045.25,1214.68 1045.84,1215.79 1046.43,1217 1047.01,1216.65 1047.6,1218.79 1048.19,1217 1048.77,1218.14 1049.36,1218.02 1049.94,1217.8 1050.53,1217.3 1051.12,1218.43 1051.7,1221.83 1052.29,1222.51 1052.88,1222.98 1053.46,1223.99 1054.05,1220.81 1054.64,1220.27 1055.22,1220.05 1055.81,1216.91 1056.39,1216.71 1056.98,1219.22 1057.57,1217.91 1058.15,1216.47 1058.74,1216.44 1059.33,1214.96 1059.91,1214.88 1060.5,1215.99 1061.09,1214.89 1061.67,1216.22 1062.26,1215.89 1062.85,1215.88 1063.43,1215.75 1064.02,1214.06 1064.6,1215.46 1065.19,1215.47 1065.78,1216.76 1066.36,1215.18 1066.95,1214.88 1067.54,1212.1 1068.12,1212.36 1068.71,1212.35 1069.3,1214.78 1069.88,1211.89 1070.47,1212.12 1071.06,1210.93 1071.64,1211 1072.23,1213.34 1072.81,1210.85 1073.4,1212.28 1073.99,1213.66 1074.57,1214.14 1075.16,1211.65 1075.75,1213.04 1076.33,1214.33 1076.92,1215.31 1077.51,1211.49 1078.09,1210.23 1078.68,1209.08 1079.26,1209.36 1079.85,1209.4 1080.44,1214.62 1081.02,1214.69 1081.61,1217.25 1082.2,1215.81 1082.78,1215.75 1083.37,1216.9 1083.96,1212.95 1084.54,1211.75 1085.13,1209.47 1085.72,1209.9 1086.3,1209.95 1086.89,1211.38 1087.47,1212.68 1088.06,1211.48 1088.65,1210.48 1089.23,1210.6 1089.82,1212.05 1090.41,1209.83 1090.99,1209.29 1091.58,1210.88 1092.17,1209.73 1092.75,1213.54 1093.34,1213.71 1093.93,1209.68 1094.51,1210.23 1095.1,1210.36 1095.68,1209.18 1096.27,1210.89 1096.86,1209.45 1097.44,1211.09 1098.03,1211.01 1098.62,1212.31 1099.2,1214.83 1099.79,1216.11 1100.38,1215.06 1100.96,1215.19 1101.55,1215.19 1102.14,1213.72 1102.72,1213.68 1103.31,1216.15 1103.89,1214.9 1104.48,1212.51 1105.07,1211.28 1105.65,1211.65 1106.24,1210.84 1106.83,1211 1107.41,1209.94 1108,1210.32 1108.59,1209.28 1109.17,1208.08 1109.76,1209.58 1110.34,1209.58 1110.93,1212.28 1111.52,1213.79 1112.1,1213.72 1112.69,1216.13 1113.28,1216 1113.86,1217.24 1114.45,1216.82 1115.04,1216.7 1115.62,1216.61 1116.21,1216.49 1116.8,1217.52 1117.38,1218.48 1117.97,1216.92 1118.55,1215.39 1119.14,1212.8 1119.73,1215.63 1120.31,1220.51 1120.9,1213.94 1121.49,1215.46 1122.07,1213.95 1122.66,1213.94 1123.25,1213.99 1123.83,1215.31 1124.42,1214.15 1125.01,1216.74 1125.59,1216.91 1126.18,1217.93 1126.76,1216.39 1127.35,1218.78 1127.94,1216.21 1128.52,1214.69 1129.11,1213.23 1129.7,1214.18 1130.28,1214.11 1130.87,1214.21 1131.46,1218.8 1132.04,1217.06 1132.63,1215.55 1133.21,1217.46 1133.8,1217.17 1134.39,1213.27 1134.97,1213.24 1135.56,1211.96 1136.15,1213.4 1136.73,1213.55 1137.32,1213.62 1137.91,1214.77 1138.49,1214.83 1139.08,1215.99 1139.67,1217.07 1140.25,1216.79 1140.84,1216.65 1141.42,1216.34 1142.01,1213.57 1142.6,1214.75 1143.18,1216.15 1143.77,1216.07 1144.36,1214.75 1144.94,1217.11 1145.53,1218.14 1146.12,1218.98 1146.7,1219.91 1147.29,1219.54 1147.88,1219.52 1148.46,1216.39 1149.05,1215.07 1149.63,1213.35 1150.22,1209.47 1150.81,1210.7 1151.39,1210.61 1151.98,1209.52 1152.57,1208.23 1153.15,1205.82 1153.74,1204.96 1154.33,1206.52 1154.91,1208.15 1155.5,1209.69 1156.09,1209.55 1156.67,1207.24 1157.26,1210.45 1157.84,1211.88 1158.43,1210.7 1159.02,1211.07 1159.6,1210.1 1160.19,1210.04 1160.78,1212.62 1161.36,1211.4 1161.95,1211.47 1162.54,1212.81 1163.12,1212.94 1163.71,1215.52 1164.29,1215.45 1164.88,1215.09 1165.47,1211.43 1166.05,1209.99 1166.64,1211 1167.23,1211.12 1167.81,1212.73 1168.4,1212.61 1168.99,1211.28 1169.57,1212.25 1170.16,1213.5 1170.75,1210.91 1171.33,1209.8 1171.92,1208.75 1172.5,1210.1 1173.09,1209.27 1173.68,1209.47 1174.26,1210.92 1174.85,1210.98 1175.44,1211.01 1176.02,1208.63 1176.61,1207.92 1177.2,1209.46 1177.78,1208.52 1178.37,1210.2 1178.96,1211.74 1179.54,1212.13 1180.13,1215.88 1180.71,1217.04 1181.3,1216.73 1181.89,1215.42 1182.47,1212.81 1183.06,1209.13 1183.65,1210.66 1184.23,1209.89 1184.82,1210.28 1185.41,1212.95 1185.99,1213.17 1186.58,1212.98 1187.16,1214.63 1187.75,1214.5 1188.34,1214.67 1188.92,1217.29 1189.51,1218.47 1190.1,1217.2 1190.68,1217.11 1191.27,1216.85 1191.86,1214.26 1192.44,1211.81 1193.03,1213.27 1193.62,1213.42 1194.2,1210.93 1194.79,1211.02 1195.37,1212.3 1195.96,1210.93 1196.55,1211 1197.13,1213.75 1197.72,1213.85 1198.31,1215.13 1198.89,1214.96 1199.48,1213.3 1200.07,1212.03 1200.65,1211.98 1201.24,1213.43 1201.83,1212.16 1202.41,1213.25 1203,1212.05 1203.58,1214.69 1204.17,1216.04 1204.76,1214.56 1205.34,1213.57 1205.93,1212.51 1206.52,1212.62 1207.1,1212.43 1207.69,1213.68 1208.28,1215.07 1208.86,1212.4 1209.45,1210.89 1210.03,1210.05 1210.62,1210.28 1211.21,1210.46 1211.79,1210.36 1212.38,1213.99 1212.97,1215.21 1213.55,1216.15 1214.14,1214.77 1214.73,1214.55 1215.31,1214.76 1215.9,1214.9 1216.49,1213.65 1217.07,1212.64 1217.66,1212.79 1218.24,1211.44 1218.83,1212.98 1219.42,1212.94 1220,1212.93 1220.59,1214.21 1221.18,1215.46 1221.76,1216.76 1222.35,1216.66 1222.94,1215.42 1223.52,1214.18 1224.11,1211.63 1224.7,1211.69 1225.28,1214.2 1225.87,1211.74 1226.45,1212 1227.04,1212.11 1227.63,1212.02 1228.21,1213.31 1228.8,1212.99 1229.39,1214.32 1229.97,1211.72 1230.56,1213.07 1231.15,1212.94 1231.73,1211.54 1232.32,1212.72 1232.91,1214.73 1233.49,1215.78 1234.08,1214.51 1234.66,1215.76 1235.25,1221.6 1235.84,1223.51 1236.42,1221.6 1237.01,1220.05 1237.6,1219.58 1238.18,1220.51 1238.77,1216.47 1239.36,1215.09 1239.94,1217.39 1240.53,1217.08 1241.11,1216.64 1241.7,1215.22 1242.29,1215.29 1242.87,1213.95 1243.46,1211.39 1244.05,1209.23 1244.63,1212.23 1245.22,1210.93 1245.81,1209.85 1246.39,1207.33 1246.98,1207.65 1247.57,1205.4 1248.15,1205.98 1248.74,1208.08 1249.32,1207.37 1249.91,1209 1250.5,1209.2 1251.08,1210.71 1251.67,1211.91 1252.26,1213.24 1252.84,1213.36 1253.43,1212.09 1254.02,1212.29 1254.6,1212.47 1255.19,1212.55 1255.78,1213.96 1256.36,1213.85 1256.95,1212.79 1257.53,1214.18 1258.12,1214.38 1258.71,1214.44 1259.29,1215.71 1259.88,1214.47 1260.47,1209.25 1261.05,1210.78 1261.64,1212.22 1262.23,1212.11 1262.81,1214.55 1263.4,1212.01 1263.98,1212.05 1264.57,1208.12 1265.16,1211.21 1265.74,1210.02 1266.33,1206.46 1266.92,1206.76 1267.5,1207.13 1268.09,1209.64 1268.68,1211.23 1269.26,1211.31 1269.85,1210.07 1270.44,1210.43 1271.02,1209.15 1271.61,1208.26 1272.19,1208.58 1272.78,1209.93 1273.37,1211.34 1273.95,1211.29 1274.54,1211.12 1275.13,1209.79 1275.71,1212.48 1276.3,1213.03 1276.89,1212.91 1277.47,1212.73 1278.06,1214.14 1278.65,1215.68 1279.23,1215.63 1279.82,1215.54 1280.4,1217.7 1280.99,1217.44 1281.58,1217.3 1282.16,1215.75 1282.75,1214.39 1283.34,1217.74 1283.92,1217.46 1284.51,1218.54 1285.1,1215.77 1285.68,1218.12 1286.27,1217.65 1286.86,1219.92 1287.44,1219.71 1288.03,1222.1 1288.61,1225.36 1289.2,1222.26 1289.79,1220.76 1290.37,1225.32 1290.96,1223.3 1291.55,1220.1 1292.13,1222.32 1292.72,1220.69 1293.31,1218.95 1293.89,1215.98 1294.48,1215.85 1295.06,1219.48 1295.65,1219.2 1296.24,1217.58 1296.82,1217.18 1297.41,1218.08 1298,1217.86 1298.58,1217.62 1299.17,1217.27 1299.76,1214.77 1300.34,1215.86 1300.93,1215.96 1301.52,1214.89 1302.1,1212.63 1302.69,1212.6 1303.27,1211.54 1303.86,1210.09 1304.45,1211.45 1305.03,1209.01 1305.62,1211.73 1306.21,1213 1306.79,1212.88 1307.38,1211.88 1307.97,1212.08 1308.55,1210.77 1309.14,1209.89 1309.73,1207.71 1310.31,1209.08 1310.9,1209.15 1311.48,1210.59 1312.07,1209.73 1312.66,1209.96 1313.24,1213.71 1313.83,1213.7 1314.42,1213.42 1315,1213.67 1315.59,1213.61 1316.18,1211 1316.76,1214.99 1317.35,1218.66 1317.93,1218.53 1318.52,1218.25 1319.11,1216.53 1319.69,1218.65 1320.28,1218.3 1320.87,1218.04 1321.45,1217.91 1322.04,1217.6 1322.63,1218.72 1323.21,1216.14 1323.8,1216.2 1324.39,1216.07 1324.97,1217.01 1325.56,1216.87 1326.14,1216.82 1326.73,1216.62 1327.32,1218.86 1327.9,1217.63 1328.49,1218.77 1329.08,1218.56 1329.66,1220.86 1330.25,1220.54 1330.84,1217.86 1331.42,1215.23 1332.01,1212.54 1332.6,1214.95 1333.18,1216.06 1333.77,1218.42 1334.35,1217.04 1334.94,1220.4 1335.53,1220.01 1336.11,1221 1336.7,1220.5 1337.29,1218.96 1337.87,1219.98 1338.46,1217.08 1339.05,1214.36 1339.63,1215.56 1340.22,1219.16 1340.8,1220.08 1341.39,1220.92 1341.98,1221.79 1342.56,1215.15 1343.15,1216.41 1343.74,1216.26 1344.32,1214.89 1344.91,1213.65 1345.5,1209.94 1346.08,1210.21 1346.67,1207.7 1347.26,1207.75 1347.84,1209.13 1348.43,1208.39 1349.01,1206.13 1349.6,1206.27 1350.19,1205.46 1350.77,1204.41 1351.36,1203.54 1351.95,1198.76 1352.53,1200.92 1353.12,1201.42 1353.71,1200.74 1354.29,1201.36 1354.88,1204.55 1355.47,1205 1356.05,1204.26 1356.64,1203.29 1357.22,1204.93 1357.81,1205.46 1358.4,1207.59 1358.98,1209.25 1359.57,1207.05 1360.16,1205.07 1360.74,1205.7 1361.33,1203.73 1361.92,1201.96 1362.5,1202.71 1363.09,1203.01 1363.68,1202.33 1364.26,1202.9 1364.85,1203.47 1365.43,1202.84 1366.02,1199.87 1366.61,1199.13 1367.19,1202.36 1367.78,1204.34 1368.37,1207.23 1368.95,1206.38 1369.54,1206.8 1370.13,1207.12 1370.71,1207.51 1371.3,1210.28 1371.88,1209.43 1372.47,1209.8 1373.06,1211.32 1373.64,1210.35 1374.23,1210.6 1374.82,1210.68 1375.4,1212 1375.99,1212.22 1376.58,1216.07 1377.16,1215.93 1377.75,1214.66 1378.34,1213.56 1378.92,1215.09 1379.51,1217.33 1380.09,1215.82 1380.68,1215.9 1381.27,1216.86 1381.85,1216.63 1382.44,1213.11 1383.03,1213.06 1383.61,1214.45 1384.2,1214.2 1384.79,1210.52 1385.37,1209.29 1385.96,1210.84 1386.55,1211.03 1387.13,1211.17 1387.72,1211.35 1388.3,1211.45 1388.89,1213.7 1389.48,1212.63 1390.06,1214.15 1390.65,1215.69 1391.24,1215.57 1391.82,1213.93 1392.41,1213.75 1393,1211.23 1393.58,1210.08 1394.17,1208.97 1394.75,1209.08 1395.34,1209.23 1395.93,1210.82 1396.51,1207.3 1397.1,1206.28 1397.69,1206.82 1398.27,1208.04 1398.86,1207.25 1399.45,1207.5 1400.03,1207.66 1400.62,1210.24 1401.21,1210.6 1401.79,1209.52 1402.38,1208.19 1402.96,1207.15 1403.55,1210.13 1404.14,1207.71 1404.72,1212.03 1405.31,1213.53 1405.9,1213.4 1406.48,1210.93 1407.07,1211.08 1407.66,1211 1408.24,1211.07 1408.83,1212.35 1409.42,1214.96 1410,1216.06 1410.59,1217.4 1411.17,1218.74 1411.76,1221.01 1412.35,1216.72 1412.93,1214.21 1413.52,1215.53 1414.11,1214.13 1414.69,1213.99 1415.28,1214 1415.87,1216.7 1416.45,1220.39 1417.04,1219.01 1417.63,1221.44 1418.21,1219.62 1418.8,1220.46 1419.38,1218.83 1419.97,1220.09 1420.56,1217.11 1421.14,1215.58 1421.73,1215.67 1422.32,1215.61 1422.9,1215.31 1423.49,1212.55 1424.08,1211.3 1424.66,1211.49 1425.25,1210.33 1425.83,1211.65 1426.42,1212.82 1427.01,1212.94 1427.59,1214.14 1428.18,1217.83 1428.77,1218.85 1429.35,1215.98 1429.94,1216.05 1430.53,1216.83 1431.11,1216.68 1431.7,1216.7 1432.29,1217.72 1432.87,1221.12 1433.46,1220.85 1434.04,1220.35 1434.63,1218.86 1435.22,1218.64 1435.8,1219.78 1436.39,1219.37 1436.98,1217.72 1437.56,1217.51 1438.15,1214.67 1438.74,1216.97 1439.32,1217.92 1439.91,1220.32 1440.5,1221.07 1441.08,1223.35 1441.67,1220.28 1442.25,1218.53 1442.84,1219.65 1443.43,1219.08 1444.01,1218.97 1444.6,1219.9 1445.19,1217.31 1445.77,1215.89 1446.36,1215.88 1446.95,1215.75 1447.53,1218.07 1448.12,1217.98 1448.7,1216.53 1449.29,1216.48 1449.88,1217.41 1450.46,1214.58 1451.05,1215.64 1451.64,1216.7 1452.22,1215.04 1452.81,1214.83 1453.4,1215.96 1453.98,1218.12 1454.57,1219.06 1455.16,1218.63 1455.74,1219.27 1456.33,1222.71 1456.91,1222.26 1457.5,1221.86 1458.09,1220.16 1458.67,1219.74 1459.26,1220.69 1459.85,1220.39 1460.43,1217.68 1461.02,1217.33 1461.61,1216.96 1462.19,1217.91 1462.78,1221.61 1463.37,1221.08 1463.95,1222.82 1464.54,1224.45 1465.12,1223.74 1465.71,1223.19 1466.3,1224.04 1466.88,1223.45 1467.47,1221.58 1468.06,1219.9 1468.64,1222.21 1469.23,1221.5 1469.82,1221.4 1470.4,1222.02 1470.99,1219.18 1471.57,1218.91 1472.16,1216.35 1472.75,1216.26 1473.33,1217.28 1473.92,1215.8 1474.51,1216.68 1475.09,1214.09 1475.68,1214.21 1476.27,1215.36 1476.85,1215.12 1477.44,1215 1478.03,1212.1 1478.61,1206.91 1479.2,1206.18 1479.78,1206.56 1480.37,1207.91 1480.96,1210.5 1481.54,1210.26 1482.13,1210.62 1482.72,1212.01 1483.3,1210.82 1483.89,1209.62 1484.48,1208.49 1485.06,1211.27 1485.65,1210.25 1486.24,1207.73 1486.82,1208.01 1487.41,1208.16 1487.99,1209.5 1488.58,1208.2 1489.17,1206.81 1489.75,1207.11 1490.34,1207.39 1490.93,1206.41 1491.51,1209.26 1492.1,1209.67 1492.69,1209.97 1493.27,1207.49 1493.86,1210.24 1494.45,1210.47 1495.03,1211.82 1495.62,1210.49 1496.2,1206.93 1496.79,1207.2 1497.38,1210.09 1497.96,1211.46 1498.55,1212.69 1499.14,1212.58 1499.72,1212.55 1500.31,1213.89 1500.9,1213.85 1501.48,1212.8 1502.07,1211.51 1502.65,1210.34 1503.24,1211.73 1503.83,1211.8 1504.41,1213.34 1505,1213.13 1505.59,1212 1506.17,1211.95 1506.76,1211.96 1507.35,1209.53 1507.93,1208.53 1508.52,1208.72 1509.11,1210.04 1509.69,1209.24 1510.28,1206.64 1510.86,1208.37 1511.45,1209.82 1512.04,1207.52 1512.62,1210.38 1513.21,1211.71 1513.8,1211.81 1514.38,1210.92 1514.97,1208.68 1515.56,1211.55 1516.14,1211.39 1516.73,1212.4 1517.32,1211.25 1517.9,1211.26 1518.49,1211.53 1519.07,1211.59 1519.66,1210.32 1520.25,1207.84 1520.83,1208.17 1521.42,1209.4 1522.01,1209.72 1522.59,1208.85 1523.18,1205.46 1523.77,1204.64 1524.35,1205.13 1524.94,1206.76 1525.52,1205.91 1526.11,1208.83 1526.7,1207.85 1527.28,1207.89 1527.87,1206.88 1528.46,1207.15 1529.04,1208.72 1529.63,1212.7 1530.22,1213.76 1530.8,1217.58 1531.39,1216.46 1531.98,1216.37 1532.56,1216.44 1533.15,1214.89 1533.73,1213.55 1534.32,1214.69 1534.91,1214.61 1535.49,1215.62 1536.08,1213.02 1536.67,1213.09 1537.25,1211.81 1537.84,1211.7 1538.43,1213.24 1539.01,1213.21 1539.6,1213.19 1540.19,1210.8 1540.77,1212.24 1541.36,1213.69 1541.94,1216.07 1542.53,1217.54 1543.12,1217.15 1543.7,1216.84 1544.29,1214.34 1544.88,1214.56 1545.46,1216.92 1546.05,1216.83 1546.64,1217.97 1547.22,1219.21 1547.81,1218.86 1548.4,1219.61 1548.98,1219.3 1549.57,1217.91 1550.15,1217.85 1550.74,1216.5 1551.33,1217.59 1551.91,1221.04 1552.5,1220.7 1553.09,1222.83 1553.67,1224.55 1554.26,1224.42 1554.85,1223.85 1555.43,1220.8 1556.02,1215.46 1556.6,1216.48 1557.19,1216.21 1557.78,1213.86 1558.36,1214.16 1558.95,1214.15 1559.54,1215.6 1560.12,1213.13 1560.71,1213.38 1561.3,1209.75 1561.88,1211.13 1562.47,1211.37 1563.06,1215.17 1563.64,1216.35 1564.23,1215.18 1564.81,1212.54 1565.4,1211.47 1565.99,1209.18 1566.57,1207.96 1567.16,1208.31 1567.75,1210.11 1568.33,1212.84 1568.92,1215.12 1569.51,1217.58 1570.09,1217.42 1570.68,1215.85 1571.27,1214.42 1571.85,1212.01 1572.44,1211.85 1573.02,1209.38 1573.61,1209.38 1574.2,1209.44 1574.78,1208.33 1575.37,1211.12 1575.96,1211.43 1576.54,1211.34 1577.13,1212.82 1577.72,1211.63 1578.3,1210.59 1578.89,1209.5 1579.47,1209.86 1580.06,1210.13 1580.65,1209.23 1581.23,1208.38 1581.82,1209.91 1582.41,1210.02 1582.99,1210.45 1583.58,1211.95 1584.17,1212.12 1584.75,1212.27 1585.34,1213.6 1585.93,1213.68 1586.51,1215.02 1587.1,1215.22 1587.68,1214.91 1588.27,1213.65 1588.86,1217.11 1589.44,1214.56 1590.03,1214.62 1590.62,1214.48 1591.2,1214.48 1591.79,1210.63 1592.38,1210.51 1592.96,1211.92 1593.55,1214.38 1594.14,1214.33 1594.72,1214.51 1595.31,1214.73 1595.89,1217.37 1596.48,1217.28 1597.07,1218.34 1597.65,1219.5 1598.24,1215.7 1598.83,1214.37 1599.41,1214.32 1600,1214.23 1600.59,1217.65 1601.17,1216.06 1601.76,1220.01 1602.34,1218.45 1602.93,1216.99 1603.52,1214.39 1604.1,1215.74 1604.69,1216.62 1605.28,1217.54 1605.86,1217.22 1606.45,1219.66 1607.04,1220.54 1607.62,1218.88 1608.21,1217.5 1608.8,1215.91 1609.38,1215.67 1609.97,1215.65 1610.55,1215.61 1611.14,1214.31 1611.73,1213.12 1612.31,1210.68 1612.9,1208.31 1613.49,1208.43 1614.07,1208.76 1614.66,1207.66 1615.25,1209.29 1615.83,1213.15 1616.42,1215.67 1617.01,1216.7 1617.59,1216.37 1618.18,1216.16 1618.76,1216.11 1619.35,1214.5 1619.94,1214.37 1620.52,1215.33 1621.11,1216.5 1621.7,1213.91 1622.28,1213.65 1622.87,1213.22 1623.46,1210.78 1624.04,1210.96 1624.63,1208.52 1625.22,1206.3 1625.8,1209.05 1626.39,1209.35 1626.97,1208.23 1627.56,1209.62 1628.15,1210.73 1628.73,1211.17 1629.32,1211.33 1629.91,1211.2 1630.49,1212.79 1631.08,1209.06 1631.67,1206.62 1632.25,1206.84 1632.84,1207.22 1633.42,1207.36 1634.01,1205.95 1634.6,1207.62 1635.18,1207.85 1635.77,1209.11 1636.36,1208.27 1636.94,1207.09 1637.53,1207.59 1638.12,1207.76 1638.7,1209.22 1639.29,1206.94 1639.88,1209.65 1640.46,1208.66 1641.05,1209.07 1641.63,1209.33 1642.22,1210.76 1642.81,1212.23 1643.39,1211.14 1643.98,1207.29 1644.57,1206.49 1645.15,1207.95 1645.74,1208.3 1646.33,1207.14 1646.91,1208.84 1647.5,1210.34 1648.09,1208.99 1648.67,1210.64 1649.26,1209.71 1649.84,1209.94 1650.43,1207.86 1651.02,1208.38 1651.6,1208.67 1652.19,1208.92 1652.78,1209.06 1653.36,1207.98 1653.95,1208.27 1654.54,1214.89 1655.12,1217.3 1655.71,1218.39 1656.29,1217.87 1656.88,1219.07 1657.47,1221.28 1658.05,1220.61 1658.64,1220.21 1659.23,1218.39 1659.81,1218.17 1660.4,1218.11 1660.99,1219.12 1661.57,1221.18 1662.16,1219.36 1662.75,1218.96 1663.33,1219.74 1663.92,1219.38 1664.5,1217.96 1665.09,1217.61 1665.68,1215.96 1666.26,1217.12 1666.85,1218.01 1667.44,1221.42 1668.02,1223.29 1668.61,1221.57 1669.2,1220.99 1669.78,1216.76 1670.37,1216.66 1670.96,1218.03 1671.54,1218.78 1672.13,1217.05 1672.71,1215.6 1673.3,1215.56 1673.89,1219.07 1674.47,1221.44 1675.06,1223.52 1675.65,1224.41 1676.23,1218.81 1676.82,1219.94 1677.41,1218.36 1677.99,1214.15 1678.58,1212.87 1679.17,1211.72 1679.75,1210.45 1680.34,1209.36 1680.92,1213.3 1681.51,1213.25 1682.1,1212.82 1682.68,1211.29 1683.27,1208.7 1683.86,1208.98 1684.44,1207.81 1685.03,1207.07 1685.62,1209.84 1686.2,1207.55 1686.79,1209.15 1687.37,1209.31 1687.96,1210.76 1688.55,1209.47 1689.13,1208.5 1689.72,1211.32 1690.31,1212.86 1690.89,1211.77 1691.48,1213.45 1692.07,1216.29 1692.65,1216.07 1693.24,1215.91 1693.83,1213.24 1694.41,1214.3 1695,1214.16 1695.58,1215.16 1696.17,1216.42 1696.76,1216.09 1697.34,1217.26 1697.93,1214.28 1698.52,1213.97 1699.1,1215.45 1699.69,1215.33 1700.28,1216.44 1700.86,1216.7 1701.45,1215.37 1702.04,1213.91 1702.62,1214.99 1703.21,1212.48 1703.79,1212.54 1704.38,1207.54 1704.97,1207.92 1705.55,1207.01 1706.14,1208.51 1706.73,1207.46 1707.31,1207.68 1707.9,1205.52 1708.49,1205.78 1709.07,1206.14 1709.66,1207.76 1710.24,1210.51 1710.83,1213.35 1711.42,1212.08 1712,1217.1 1712.59,1216.96 1713.18,1219.09 1713.76,1216.22 1714.35,1216.1 1714.94,1215.88 1715.52,1213.12 1716.11,1214.37 1716.7,1215.55 1717.28,1213.04 1717.87,1214.13 1718.45,1214.03 1719.04,1215.06 1719.63,1213.58 1720.21,1213.63 1720.8,1214.93 1721.39,1214.7 1721.97,1217.2 1722.56,1215.53 1723.15,1213.98 1723.73,1213.68 1724.32,1212.56 1724.91,1211.33 1725.49,1212.7 1726.08,1212.53 1726.66,1211.35 1727.25,1207.43 1727.84,1209.07 1728.42,1210.66 1729.01,1210.7 1729.6,1209.64 1730.18,1211.24 1730.77,1212.72 1731.36,1211.38 1731.94,1211.63 1732.53,1213.19 1733.11,1213.41 1733.7,1213.35 1734.29,1213.26 1734.87,1213.16 1735.46,1213.32 1736.05,1215.89 1736.63,1214.56 1737.22,1209.55 1737.81,1208.43 1738.39,1209.84 1738.98,1208.76 1739.57,1208.01 1740.15,1208.24 1740.74,1208.4 1741.32,1207.45 1741.91,1206.32 1742.5,1204.37 1743.08,1205.09 1743.67,1204.33 1744.26,1207.35 1744.84,1208.81 1745.43,1210.66 1746.02,1210.97 1746.6,1213.95 1747.19,1216.22 1747.78,1216.44 1748.36,1214.9 1748.95,1215.03 1749.53,1216.16 1750.12,1215.92 1750.71,1219.3 1751.29,1219.15 1751.88,1221.29 1752.47,1220.76 1753.05,1220.29 1753.64,1217.41 1754.23,1217.02 1754.81,1215.59 1755.4,1214.13 1755.99,1215.54 1756.57,1215.49 1757.16,1214.04 1757.74,1212.74 1758.33,1211.73 1758.92,1211.72 1759.5,1214.6 1760.09,1215.67 1760.68,1215.32 1761.26,1213.98 1761.85,1215.35 1762.44,1215.06 1763.02,1217.2 1763.61,1217 1764.19,1215.51 1764.78,1216.44 1765.37,1217.35 1765.95,1215.97 1766.54,1219.76 1767.13,1217.21 1767.71,1215.62 1768.3,1211.63 1768.89,1210.58 1769.47,1213.34 1770.06,1214.55 1770.65,1212.96 1771.23,1214.14 1771.82,1215.36 1772.4,1215.27 1772.99,1213.92 1773.58,1212.68 1774.16,1212.67 1774.75,1215.2 1775.34,1215.14 1775.92,1211.31 1776.51,1211.72 1777.1,1214.14 1777.68,1215.31 1778.27,1213.68 1778.86,1214.7 1779.44,1214.45 1780.03,1214.22 1780.61,1213.97 1781.2,1213.92 1781.79,1214 1782.37,1217.81 1782.96,1216.5 1783.55,1216.15 1784.13,1214.81 1784.72,1215.05 1785.31,1215.08 1785.89,1216.24 1786.48,1214.93 1787.06,1211.02 1787.65,1210.94 1788.24,1210.87 1788.82,1210.88 1789.41,1208.66 1790,1207.83 1790.58,1209.3 1791.17,1207.13 1791.76,1207.73 1792.34,1209.23 1792.93,1209.43 1793.52,1209.64 1794.1,1210.97 1794.69,1212.42 1795.27,1212.58 1795.86,1214.07 1796.45,1213.76 1797.03,1212.53 1797.62,1213.94 1798.21,1213.9 1798.79,1213.94 1799.38,1212.45 1799.97,1212.48 1800.55,1212.63 1801.14,1213.89 1801.73,1214.91 1802.31,1214.72 1802.9,1213.46 1803.48,1213.42 1804.07,1213.38 1804.66,1214.69 1805.24,1215.99 1805.83,1215.76 1806.42,1214.53 1807,1211.97 1807.59,1210.69 1808.18,1209.69 1808.76,1208.81 1809.35,1209.27 1809.94,1208.56 1810.52,1206.39 1811.11,1207.08 1811.69,1207.46 1812.28,1209.09 1812.87,1211.91 1813.45,1211.82 1814.04,1212.21 1814.63,1212.17 1815.21,1210.83 1815.8,1209.55 1816.39,1208.47 1816.97,1209.88 1817.56,1211.38 1818.14,1210.37 1818.73,1210.75 1819.32,1212.41 1819.9,1213.65 1820.49,1212.36 1821.08,1215.81 1821.66,1216.05 1822.25,1215.95 1822.84,1216.03 1823.42,1215.98 1824.01,1214.54 1824.6,1214.37 1825.18,1216.6 1825.77,1214.02 1826.35,1212.71 1826.94,1214.22 1827.53,1214.22 1828.11,1211.74 1828.7,1211.88 1829.29,1215.63 1829.87,1216.77 1830.46,1217.84 1831.05,1219.88 1831.63,1218.23 1832.22,1218.04 1832.81,1216.3 1833.39,1216.14 1833.98,1217.19 1834.56,1217.07 1835.15,1215.58 1835.74,1218.14 1836.32,1219.19 1836.91,1217.34 1837.5,1215.62 1838.08,1214.02 1838.67,1214.04 1839.26,1213.99 1839.84,1213.99 1840.43,1214.09 1841.01,1214.07 1841.6,1215.13 1842.19,1218.63 1842.77,1217 1843.36,1217.96 1843.95,1215.32 1844.53,1218.84 1845.12,1217.14 1845.71,1219.34 1846.29,1220.22 1846.88,1220.03 1847.47,1219.47 1848.05,1219.38 1848.64,1218.93 1849.22,1218.44 1849.81,1218.35 1850.4,1217.7 1850.98,1216.16 1851.57,1215.75 1852.16,1217.89 1852.74,1213.94 1853.33,1215.13 1853.92,1212.46 1854.5,1212.44 1855.09,1209.82 1855.68,1210.12 1856.26,1208.97 1856.85,1209.39 1857.43,1208.23 1858.02,1206.98 1858.61,1207.27 1859.19,1207.77 1859.78,1209.41 1860.37,1208.4 1860.95,1209.92 1861.54,1207.71 1862.13,1205.56 1862.71,1207.52 1863.3,1209.29 1863.88,1210.99 1864.47,1211.23 1865.06,1211.48 1865.64,1215.07 1866.23,1212.54 1866.82,1212.61 1867.4,1212.67 1867.99,1207.8 1868.58,1208.35 1869.16,1208.72 1869.75,1210.14 1870.34,1210.13 1870.92,1211.59 1871.51,1209.32 1872.09,1209.49 1872.68,1212.17 1873.27,1213.46 1873.85,1212.64 1874.44,1211.48 1875.03,1210.39 1875.61,1211.96 1876.2,1214.41 1876.79,1214.36 1877.37,1213.01 1877.96,1211.62 1878.55,1210.12 1879.13,1211.48 1879.72,1212.84 1880.3,1212.94 1880.89,1215.52 1881.48,1213.93 1882.06,1213.78 1882.65,1217.27 1883.24,1217.2 1883.82,1215.49 1884.41,1215.22 1885,1213.84 1885.58,1215.18 1886.17,1216.48 1886.76,1218.85 1887.34,1219.84 1887.93,1220.79 1888.51,1216.55 1889.1,1218.71 1889.69,1219.69 1890.27,1219.11 1890.86,1216.24 1891.45,1212.4 1892.03,1211.21 1892.62,1212.6 1893.21,1211.33 1893.79,1208.83 1894.38,1211.64 1894.96,1211.56 1895.55,1211.4 1896.14,1207.57 1896.72,1207.92 1897.31,1209.45 1897.9,1210.72 1898.48,1209.74 1899.07,1214.73 1899.66,1215.9 1900.24,1218.18 1900.83,1216.62 1901.42,1216.21 1902,1213.75 1902.59,1212.38 1903.17,1212.36 1903.76,1213.6 1904.35,1216.15 1904.93,1214.84 1905.52,1213.78 1906.11,1215.14 1906.69,1214.82 1907.28,1214.73 1907.87,1214.69 1908.45,1215.96 1909.04,1219.37 1909.63,1217.7 1910.21,1218.72 1910.8,1219.63 1911.38,1220.36 1911.97,1219.84 1912.56,1218.2 1913.14,1214.98 1913.73,1213.67 1914.32,1215.92 1914.9,1214.82 1915.49,1214.63 1916.08,1212.06 1916.66,1213.45 1917.25,1210.91 1917.83,1209.93 1918.42,1211.19 1919.01,1211.45 1919.59,1210.17 1920.18,1210.26 1920.77,1211.64 1921.35,1215.71 1921.94,1216.94 1922.53,1215.82 1923.11,1217.05 1923.7,1216.74 1924.29,1215.11 1924.87,1216.37 1925.46,1211.27 1926.04,1212.73 1926.63,1212.84 1927.22,1212.67 1927.8,1215.21 1928.39,1215.09 1928.98,1219.74 1929.56,1219.32 1930.15,1219.03 1930.74,1217.19 1931.32,1215.66 1931.91,1215.31 1932.5,1216.54 1933.08,1215.12 1933.67,1215.03 1934.25,1214.75 1934.84,1213.18 1935.43,1213.34 1936.01,1213.47 1936.6,1213.62 1937.19,1214.81 1937.77,1212.15 1938.36,1213.38 1938.95,1213.41 1939.53,1211.88 1940.12,1210.68 1940.71,1211.88 1941.29,1208.4 1941.88,1208.81 1942.46,1210.55 1943.05,1209.27 1943.64,1209.16 1944.22,1208.27 1944.81,1204.71 1945.4,1204.92 1945.98,1206.2 1946.57,1204.14 1947.16,1204.92 1947.74,1206.6 1948.33,1208.3 1948.91,1210.93 1949.5,1208.56 1950.09,1209.87 1950.67,1211.29 1951.26,1211.38 1951.85,1211.32 1952.43,1212.95 1953.02,1211.35 1953.61,1211.57 1954.19,1211.38 1954.78,1215.31 1955.37,1214.03 1955.95,1211.35 1956.54,1212.64 1957.12,1212.59 1957.71,1214.09 1958.3,1215.01 1958.88,1216.4 1959.47,1217.68 1960.06,1213.87 1960.64,1215.16 1961.23,1216.01 1961.82,1217.4 1962.4,1217.27 1962.99,1218.29 1963.58,1216.49 1964.16,1215.09 1964.75,1216.16 1965.33,1216.26 1965.92,1217.37 1966.51,1216.1 1967.09,1214.51 1967.68,1215.78 1968.27,1216.65 1968.85,1214.99 1969.44,1217.23 1970.03,1217 1970.61,1216.73 1971.2,1216.63 1971.78,1216.14 1972.37,1217.26 1972.96,1218.5 1973.54,1218.21 1974.13,1216.8 1974.72,1216.53 1975.3,1217.89 1975.89,1216.4 1976.48,1217.3 1977.06,1217.03 1977.65,1217.86 1978.24,1218.76 1978.82,1221.14 1979.41,1222.05 1979.99,1222.7 1980.58,1222.08 1981.17,1222.91 1981.75,1218.76 1982.34,1214.46 1982.93,1213.2 1983.51,1208.3 1984.1,1207.24 1984.69,1206.48 1985.27,1208.18 1985.86,1207.02 1986.45,1212.47 1987.03,1213.74 1987.62,1217.39 1988.2,1214.74 1988.79,1214.54 1989.38,1214.57 1989.96,1214.42 1990.55,1215.85 1991.14,1213.27 1991.72,1212.12 1992.31,1214.45 1992.9,1216.9 1993.48,1217.09 1994.07,1215.42 1994.65,1215.03 1995.24,1213.55 1995.83,1210.81 1996.41,1209.41 1997,1209.98 1997.59,1210.24 1998.17,1211.55 1998.76,1211.69 1999.35,1209.2 1999.93,1209.44 2000.52,1209.8 2001.11,1205.36 2001.69,1206.84 2002.28,1206.95 2002.86,1208.44 2003.45,1208.85 2004.04,1209.1 2004.62,1207.96 2005.21,1206.97 2005.8,1208.65 2006.38,1208.9 2006.97,1211.45 2007.56,1209.36 2008.14,1209.85 2008.73,1209.98 2009.32,1213.69 2009.9,1212.54 2010.49,1210.96 2011.07,1210.96 2011.66,1211.06 2012.25,1211.34 2012.83,1212.75 2013.42,1211.63 2014.01,1215.67 2014.59,1215.49 2015.18,1216.62 2015.77,1210.12 2016.35,1210.14 2016.94,1210.06 2017.53,1210.15 2018.11,1211.81 2018.7,1213 2019.28,1211.83 2019.87,1210.85 2020.46,1210.97 2021.04,1212.4 2021.63,1213.36 2022.22,1214.63 2022.8,1215.82 2023.39,1214.24 2023.98,1209.38 2024.56,1205.78 2025.15,1208.91 2025.73,1210.42 2026.32,1209.25 2026.91,1210.8 2027.49,1211.97 2028.08,1210.97 2028.67,1213.39 2029.25,1214.64 2029.84,1212.35 2030.43,1213.64 2031.01,1214.92 2031.6,1213.65 2032.19,1214.83 2032.77,1212.15 2033.36,1213.51 2033.94,1212.19 2034.53,1212.08 2035.12,1209.52 2035.7,1212.35 2036.29,1212.36 2036.88,1211.18 2037.46,1211.29 2038.05,1211.49 2038.64,1211.64 2039.22,1213.17 2039.81,1211.83 2040.4,1212.9 2040.98,1213.02 2041.57,1214.37 2042.15,1212.65 2042.74,1211.24 2043.33,1212.63 2043.91,1212.41 2044.5,1217.23 2045.09,1218.36 2045.67,1216.74 2046.26,1216.5 2046.85,1216.33 2047.43,1217.57 2048.02,1212.44 2048.6,1213.51 2049.19,1214.86 2049.78,1211.14 2050.36,1213.44 2050.95,1212.1 2051.54,1212.02 2052.12,1212.01 2052.71,1212.11 2053.3,1214.52 2053.88,1213.26 2054.47,1213.14 2055.06,1213.03 2055.64,1212.81 2056.23,1212.82 2056.81,1213.84 2057.4,1211.45 2057.99,1210.26 2058.57,1210.17 2059.16,1211.75 2059.75,1209.36 2060.33,1207.32 2060.92,1206.16 2061.51,1205.37 2062.09,1205.66 2062.68,1206.22 2063.27,1209.42 2063.85,1209.81 2064.44,1212.34 2065.02,1212.51 2065.61,1213.69 2066.2,1212.34 2066.78,1210.92 2067.37,1211.1 2067.96,1210.17 2068.54,1210.79 2069.13,1209.97 2069.72,1210.15 2070.3,1209.29 2070.89,1212.03 2071.48,1209.71 2072.06,1209.74 2072.65,1209.79 2073.23,1213.79 2073.82,1215.33 2074.41,1216.54 2074.99,1217.63 2075.58,1216.1 2076.17,1214.63 2076.75,1214.36 2077.34,1211.98 2077.93,1213.1 2078.51,1211.98 2079.1,1212.19 2079.68,1215.26 2080.27,1215.43 2080.86,1214.29 2081.44,1215.73 2082.03,1214.29 2082.62,1215.43 2083.2,1214.11 2083.79,1214.18 2084.38,1211.6 2084.96,1211.63 2085.55,1211.83 2086.14,1211.94 2086.72,1210.47 2087.31,1211.85 2087.89,1211.89 2088.48,1209.46 2089.07,1211.02 2089.65,1212.37 2090.24,1211.14 2090.83,1212.36 2091.41,1212.5 2092,1213.94 2092.59,1215.06 2093.17,1217.45 2093.76,1218.64 2094.35,1215.68 2094.93,1215.34 2095.52,1214.2 2096.1,1210.5 2096.69,1210.61 2097.28,1209.59 2097.86,1210.1 2098.45,1208.97 2099.04,1206.97 2099.62,1208.77 2100.21,1209.1 2100.8,1207.93 2101.38,1208.08 2101.97,1209.47 2102.55,1213.32 2103.14,1211.82 2103.73,1211.85 2104.31,1209.57 2104.9,1210.85 2105.49,1211.1 2106.07,1209.75 2106.66,1210 2107.25,1208.79 2107.83,1209.26 2108.42,1210.65 2109.01,1210.69 2109.59,1212.28 2110.18,1212.23 2110.76,1214.72 2111.35,1214.88 2111.94,1214.88 2112.52,1214.82 2113.11,1214.83 2113.7,1214.53 2114.28,1210.72 2114.87,1207.1 2115.46,1208.55 2116.04,1207.64 2116.63,1210.45 2117.22,1209.74 2117.8,1209.6 2118.39,1209.73 2118.97,1208.59 2119.56,1209.93 2120.15,1210.23 2120.73,1211.57 2121.32,1212.97 2121.91,1211.77 2122.49,1209.17 2123.08,1208.63 2123.67,1207.84 2124.25,1206.72 2124.84,1210.82 2125.42,1210.8 2126.01,1212.34 2126.6,1214.96 2127.18,1213.55 2127.77,1213.65 2128.36,1216.47 2128.94,1216.22 2129.53,1213.61 2130.12,1214.65 2130.7,1214.38 2131.29,1215.55 2131.88,1215.33 2132.46,1215.27 2133.05,1215.1 2133.63,1215.01 2134.22,1217.5 2134.81,1218.54 2135.39,1222.21 2135.98,1221.68 2136.57,1221.09 2137.15,1220.4 2137.74,1222.61 2138.33,1221.89 2138.91,1224.88 2139.5,1225.36 2140.09,1223.42 2140.67,1222.96 2141.26,1221.12 2141.84,1221.75 2142.43,1224.81 2143.02,1224.17 2143.6,1221.08 2144.19,1219.5 2144.78,1219.02 2145.36,1216.33 2145.95,1216.11 2146.54,1217.12 2147.12,1217.97 2147.71,1216.5 2148.3,1213.83 2148.88,1215.08 2149.47,1214.98 2150.05,1216.13 2150.64,1214.63 2151.23,1216.89 2151.81,1216.72 2152.4,1216.63 2152.99,1215.18 2153.57,1216.18 2154.16,1213.45 2154.75,1213.13 2155.33,1213.01 2155.92,1214.43 2156.5,1219.22 2157.09,1218.81 2157.68,1217.27 2158.26,1216.98 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1213.77 L986.612 1213.77 L987.198 1213.77 L987.785 1213.77 L988.371 1213.77 L988.957 1213.77 L989.544 1213.77 L990.13 1213.77 L990.717 1213.77 L991.303 1213.77 L991.889 1213.77 L992.476 1213.77 L993.062 1213.77 L993.649 1213.77 L994.235 1213.77 L994.822 1213.77 L995.408 1213.77 L995.994 1213.77 L996.581 1213.77 L997.167 1213.77 L997.754 1213.77 L998.34 1213.77 L998.926 1213.77 L999.513 1213.77 L1000.1 1213.77 L1000.69 1213.77 L1001.27 1213.77 L1001.86 1213.77 L1002.44 1213.77 L1003.03 1213.77 L1003.62 1213.77 L1004.2 1213.77 L1004.79 1213.77 L1005.38 1213.77 L1005.96 1213.77 L1006.55 1213.77 L1007.14 1213.77 L1007.72 1213.77 L1008.31 1213.77 L1008.9 1213.77 L1009.48 1213.77 L1010.07 1213.77 L1010.65 1213.77 L1011.24 1213.77 L1011.83 1213.77 L1012.41 1213.77 L1013 1213.77 L1013.59 1213.77 L1014.17 1213.77 L1014.76 1213.77 L1015.35 1213.77 L1015.93 1213.77 L1016.52 1213.77 L1017.11 1213.77 L1017.69 1213.77 L1018.28 1213.77 L1018.86 1213.77 L1019.45 1213.77 L1020.04 1213.77 L1020.62 1213.77 L1021.21 1213.77 L1021.8 1213.77 L1022.38 1213.77 L1022.97 1213.77 L1023.56 1213.77 L1024.14 1213.77 L1024.73 1213.77 L1025.32 1213.77 L1025.9 1213.77 L1026.49 1213.77 L1027.07 1213.77 L1027.66 1213.77 L1028.25 1213.77 L1028.83 1213.77 L1029.42 1213.77 L1030.01 1213.77 L1030.59 1213.77 L1031.18 1213.77 L1031.77 1213.77 L1032.35 1213.77 L1032.94 1213.77 L1033.52 1213.77 L1034.11 1213.77 L1034.7 1213.77 L1035.28 1213.77 L1035.87 1213.77 L1036.46 1213.77 L1037.04 1213.77 L1037.63 1213.77 L1038.22 1213.77 L1038.8 1213.77 L1039.39 1213.77 L1039.98 1213.77 L1040.56 1213.77 L1041.15 1213.77 L1041.73 1213.77 L1042.32 1213.77 L1042.91 1213.77 L1043.49 1213.77 L1044.08 1213.77 L1044.67 1213.77 L1045.25 1213.77 L1045.84 1213.77 L1046.43 1213.77 L1047.01 1213.77 L1047.6 1213.77 L1048.19 1213.77 L1048.77 1213.77 L1049.36 1213.77 L1049.94 1213.77 L1050.53 1213.77 L1051.12 1213.77 L1051.7 1213.77 L1052.29 1213.77 L1052.88 1213.77 L1053.46 1213.77 L1054.05 1213.77 L1054.64 1213.77 L1055.22 1213.77 L1055.81 1213.77 L1056.39 1213.77 L1056.98 1213.77 L1057.57 1213.77 L1058.15 1213.77 L1058.74 1213.77 L1059.33 1213.77 L1059.91 1213.77 L1060.5 1213.77 L1061.09 1213.77 L1061.67 1213.77 L1062.26 1213.77 L1062.85 1213.77 L1063.43 1213.77 L1064.02 1213.77 L1064.6 1213.77 L1065.19 1213.77 L1065.78 1213.77 L1066.36 1213.77 L1066.95 1213.77 L1067.54 1213.77 L1068.12 1213.77 L1068.71 1213.77 L1069.3 1213.77 L1069.88 1213.77 L1070.47 1213.77 L1071.06 1213.77 L1071.64 1213.77 L1072.23 1213.77 L1072.81 1213.77 L1073.4 1213.77 L1073.99 1213.77 L1074.57 1213.77 L1075.16 1213.77 L1075.75 1213.77 L1076.33 1213.77 L1076.92 1213.77 L1077.51 1213.77 L1078.09 1213.77 L1078.68 1213.77 L1079.26 1213.77 L1079.85 1213.77 L1080.44 1213.77 L1081.02 1213.77 L1081.61 1213.77 L1082.2 1213.77 L1082.78 1213.77 L1083.37 1213.77 L1083.96 1213.77 L1084.54 1213.77 L1085.13 1213.77 L1085.72 1213.77 L1086.3 1213.77 L1086.89 1213.77 L1087.47 1213.77 L1088.06 1213.77 L1088.65 1213.77 L1089.23 1213.77 L1089.82 1213.77 L1090.41 1213.77 L1090.99 1213.77 L1091.58 1213.77 L1092.17 1213.77 L1092.75 1213.77 L1093.34 1213.77 L1093.93 1213.77 L1094.51 1213.77 L1095.1 1213.77 L1095.68 1213.77 L1096.27 1213.77 L1096.86 1213.77 L1097.44 1213.77 L1098.03 1213.77 L1098.62 1213.77 L1099.2 1213.77 L1099.79 1213.77 L1100.38 1213.77 L1100.96 1213.77 L1101.55 1213.77 L1102.14 1213.77 L1102.72 1213.77 L1103.31 1213.77 L1103.89 1213.77 L1104.48 1213.77 L1105.07 1213.77 L1105.65 1213.77 L1106.24 1213.77 L1106.83 1213.77 L1107.41 1213.77 L1108 1213.77 L1108.59 1213.77 L1109.17 1213.77 L1109.76 1213.77 L1110.34 1213.77 L1110.93 1213.77 L1111.52 1213.77 L1112.1 1213.77 L1112.69 1213.77 L1113.28 1213.77 L1113.86 1213.77 L1114.45 1213.77 L1115.04 1213.77 L1115.62 1213.77 L1116.21 1213.77 L1116.8 1213.77 L1117.38 1213.77 L1117.97 1213.77 L1118.55 1213.77 L1119.14 1213.77 L1119.73 1213.77 L1120.31 1213.77 L1120.9 1213.77 L1121.49 1213.77 L1122.07 1213.77 L1122.66 1213.77 L1123.25 1213.77 L1123.83 1213.77 L1124.42 1213.77 L1125.01 1213.77 L1125.59 1213.77 L1126.18 1213.77 L1126.76 1213.77 L1127.35 1213.77 L1127.94 1213.77 L1128.52 1213.77 L1129.11 1213.77 L1129.7 1213.77 L1130.28 1213.77 L1130.87 1213.77 L1131.46 1213.77 L1132.04 1213.77 L1132.63 1213.77 L1133.21 1213.77 L1133.8 1213.77 L1134.39 1213.77 L1134.97 1213.77 L1135.56 1213.77 L1136.15 1213.77 L1136.73 1213.77 L1137.32 1213.77 L1137.91 1213.77 L1138.49 1213.77 L1139.08 1213.77 L1139.67 1213.77 L1140.25 1213.77 L1140.84 1213.77 L1141.42 1213.77 L1142.01 1213.77 L1142.6 1213.77 L1143.18 1213.77 L1143.77 1213.77 L1144.36 1213.77 L1144.94 1213.77 L1145.53 1213.77 L1146.12 1213.77 L1146.7 1213.77 L1147.29 1213.77 L1147.88 1213.77 L1148.46 1213.77 L1149.05 1213.77 L1149.63 1213.77 L1150.22 1213.77 L1150.81 1213.77 L1151.39 1213.77 L1151.98 1213.77 L1152.57 1213.77 L1153.15 1213.77 L1153.74 1213.77 L1154.33 1213.77 L1154.91 1213.77 L1155.5 1213.77 L1156.09 1213.77 L1156.67 1213.77 L1157.26 1213.77 L1157.84 1213.77 L1158.43 1213.77 L1159.02 1213.77 L1159.6 1213.77 L1160.19 1213.77 L1160.78 1213.77 L1161.36 1213.77 L1161.95 1213.77 L1162.54 1213.77 L1163.12 1213.77 L1163.71 1213.77 L1164.29 1213.77 L1164.88 1213.77 L1165.47 1213.77 L1166.05 1213.77 L1166.64 1213.77 L1167.23 1213.77 L1167.81 1213.77 L1168.4 1213.77 L1168.99 1213.77 L1169.57 1213.77 L1170.16 1213.77 L1170.75 1213.77 L1171.33 1213.77 L1171.92 1213.77 L1172.5 1213.77 L1173.09 1213.77 L1173.68 1213.77 L1174.26 1213.77 L1174.85 1213.77 L1175.44 1213.77 L1176.02 1213.77 L1176.61 1213.77 L1177.2 1213.77 L1177.78 1213.77 L1178.37 1213.77 L1178.96 1213.77 L1179.54 1213.77 L1180.13 1213.77 L1180.71 1213.77 L1181.3 1213.77 L1181.89 1213.77 L1182.47 1213.77 L1183.06 1213.77 L1183.65 1213.77 L1184.23 1213.77 L1184.82 1213.77 L1185.41 1213.77 L1185.99 1213.77 L1186.58 1213.77 L1187.16 1213.77 L1187.75 1213.77 L1188.34 1213.77 L1188.92 1213.77 L1189.51 1213.77 L1190.1 1213.77 L1190.68 1213.77 L1191.27 1213.77 L1191.86 1213.77 L1192.44 1213.77 L1193.03 1213.77 L1193.62 1213.77 L1194.2 1213.77 L1194.79 1213.77 L1195.37 1213.77 L1195.96 1213.77 L1196.55 1213.77 L1197.13 1213.77 L1197.72 1213.77 L1198.31 1213.77 L1198.89 1213.77 L1199.48 1213.77 L1200.07 1213.77 L1200.65 1213.77 L1201.24 1213.77 L1201.83 1213.77 L1202.41 1213.77 L1203 1213.77 L1203.58 1213.77 L1204.17 1213.77 L1204.76 1213.77 L1205.34 1213.77 L1205.93 1213.77 L1206.52 1213.77 L1207.1 1213.77 L1207.69 1213.77 L1208.28 1213.77 L1208.86 1213.77 L1209.45 1213.77 L1210.03 1213.77 L1210.62 1213.77 L1211.21 1213.77 L1211.79 1213.77 L1212.38 1213.77 L1212.97 1213.77 L1213.55 1213.77 L1214.14 1213.77 L1214.73 1213.77 L1215.31 1213.77 L1215.9 1213.77 L1216.49 1213.77 L1217.07 1213.77 L1217.66 1213.77 L1218.24 1213.77 L1218.83 1213.77 L1219.42 1213.77 L1220 1213.77 L1220.59 1213.77 L1221.18 1213.77 L1221.76 1213.77 L1222.35 1213.77 L1222.94 1213.77 L1223.52 1213.77 L1224.11 1213.77 L1224.7 1213.77 L1225.28 1213.77 L1225.87 1213.77 L1226.45 1213.77 L1227.04 1213.77 L1227.63 1213.77 L1228.21 1213.77 L1228.8 1213.77 L1229.39 1213.77 L1229.97 1213.77 L1230.56 1213.77 L1231.15 1213.77 L1231.73 1213.77 L1232.32 1213.77 L1232.91 1213.77 L1233.49 1213.77 L1234.08 1213.77 L1234.66 1213.77 L1235.25 1213.77 L1235.84 1213.77 L1236.42 1213.77 L1237.01 1213.77 L1237.6 1213.77 L1238.18 1213.77 L1238.77 1213.77 L1239.36 1213.77 L1239.94 1213.77 L1240.53 1213.77 L1241.11 1213.77 L1241.7 1213.77 L1242.29 1213.77 L1242.87 1213.77 L1243.46 1213.77 L1244.05 1213.77 L1244.63 1213.77 L1245.22 1213.77 L1245.81 1213.77 L1246.39 1213.77 L1246.98 1213.77 L1247.57 1213.77 L1248.15 1213.77 L1248.74 1213.77 L1249.32 1213.77 L1249.91 1213.77 L1250.5 1213.77 L1251.08 1213.77 L1251.67 1213.77 L1252.26 1213.77 L1252.84 1213.77 L1253.43 1213.77 L1254.02 1213.77 L1254.6 1213.77 L1255.19 1213.77 L1255.78 1213.77 L1256.36 1213.77 L1256.95 1213.77 L1257.53 1213.77 L1258.12 1213.77 L1258.71 1213.77 L1259.29 1213.77 L1259.88 1213.77 L1260.47 1213.77 L1261.05 1213.77 L1261.64 1213.77 L1262.23 1213.77 L1262.81 1213.77 L1263.4 1213.77 L1263.98 1213.77 L1264.57 1213.77 L1265.16 1213.77 L1265.74 1213.77 L1266.33 1213.77 L1266.92 1213.77 L1267.5 1213.77 L1268.09 1213.77 L1268.68 1213.77 L1269.26 1213.77 L1269.85 1213.77 L1270.44 1213.77 L1271.02 1213.77 L1271.61 1213.77 L1272.19 1213.77 L1272.78 1213.77 L1273.37 1213.77 L1273.95 1213.77 L1274.54 1213.77 L1275.13 1213.77 L1275.71 1213.77 L1276.3 1213.77 L1276.89 1213.77 L1277.47 1213.77 L1278.06 1213.77 L1278.65 1213.77 L1279.23 1213.77 L1279.82 1213.77 L1280.4 1213.77 L1280.99 1213.77 L1281.58 1213.77 L1282.16 1213.77 L1282.75 1213.77 L1283.34 1213.77 L1283.92 1213.77 L1284.51 1213.77 L1285.1 1213.77 L1285.68 1213.77 L1286.27 1213.77 L1286.86 1213.77 L1287.44 1213.77 L1288.03 1213.77 L1288.61 1213.77 L1289.2 1213.77 L1289.79 1213.77 L1290.37 1213.77 L1290.96 1213.77 L1291.55 1213.77 L1292.13 1213.77 L1292.72 1213.77 L1293.31 1213.77 L1293.89 1213.77 L1294.48 1213.77 L1295.06 1213.77 L1295.65 1213.77 L1296.24 1213.77 L1296.82 1213.77 L1297.41 1213.77 L1298 1213.77 L1298.58 1213.77 L1299.17 1213.77 L1299.76 1213.77 L1300.34 1213.77 L1300.93 1213.77 L1301.52 1213.77 L1302.1 1213.77 L1302.69 1213.77 L1303.27 1213.77 L1303.86 1213.77 L1304.45 1213.77 L1305.03 1213.77 L1305.62 1213.77 L1306.21 1213.77 L1306.79 1213.77 L1307.38 1213.77 L1307.97 1213.77 L1308.55 1213.77 L1309.14 1213.77 L1309.73 1213.77 L1310.31 1213.77 L1310.9 1213.77 L1311.48 1213.77 L1312.07 1213.77 L1312.66 1213.77 L1313.24 1213.77 L1313.83 1213.77 L1314.42 1213.77 L1315 1213.77 L1315.59 1213.77 L1316.18 1213.77 L1316.76 1213.77 L1317.35 1213.77 L1317.93 1213.77 L1318.52 1213.77 L1319.11 1213.77 L1319.69 1213.77 L1320.28 1213.77 L1320.87 1213.77 L1321.45 1213.77 L1322.04 1213.77 L1322.63 1213.77 L1323.21 1213.77 L1323.8 1213.77 L1324.39 1213.77 L1324.97 1213.77 L1325.56 1213.77 L1326.14 1213.77 L1326.73 1213.77 L1327.32 1213.77 L1327.9 1213.77 L1328.49 1213.77 L1329.08 1213.77 L1329.66 1213.77 L1330.25 1213.77 L1330.84 1213.77 L1331.42 1213.77 L1332.01 1213.77 L1332.6 1213.77 L1333.18 1213.77 L1333.77 1213.77 L1334.35 1213.77 L1334.94 1213.77 L1335.53 1213.77 L1336.11 1213.77 L1336.7 1213.77 L1337.29 1213.77 L1337.87 1213.77 L1338.46 1213.77 L1339.05 1213.77 L1339.63 1213.77 L1340.22 1213.77 L1340.8 1213.77 L1341.39 1213.77 L1341.98 1213.77 L1342.56 1213.77 L1343.15 1213.77 L1343.74 1213.77 L1344.32 1213.77 L1344.91 1213.77 L1345.5 1213.77 L1346.08 1213.77 L1346.67 1213.77 L1347.26 1213.77 L1347.84 1213.77 L1348.43 1213.77 L1349.01 1213.77 L1349.6 1213.77 L1350.19 1213.77 L1350.77 1213.77 L1351.36 1213.77 L1351.95 1213.77 L1352.53 1213.77 L1353.12 1213.77 L1353.71 1213.77 L1354.29 1213.77 L1354.88 1213.77 L1355.47 1213.77 L1356.05 1213.77 L1356.64 1213.77 L1357.22 1213.77 L1357.81 1213.77 L1358.4 1213.77 L1358.98 1213.77 L1359.57 1213.77 L1360.16 1213.77 L1360.74 1213.77 L1361.33 1213.77 L1361.92 1213.77 L1362.5 1213.77 L1363.09 1213.77 L1363.68 1213.77 L1364.26 1213.77 L1364.85 1213.77 L1365.43 1213.77 L1366.02 1213.77 L1366.61 1213.77 L1367.19 1213.77 L1367.78 1213.77 L1368.37 1213.77 L1368.95 1213.77 L1369.54 1213.77 L1370.13 1213.77 L1370.71 1213.77 L1371.3 1213.77 L1371.88 1213.77 L1372.47 1213.77 L1373.06 1213.77 L1373.64 1213.77 L1374.23 1213.77 L1374.82 1213.77 L1375.4 1213.77 L1375.99 1213.77 L1376.58 1213.77 L1377.16 1213.77 L1377.75 1213.77 L1378.34 1213.77 L1378.92 1213.77 L1379.51 1213.77 L1380.09 1213.77 L1380.68 1213.77 L1381.27 1213.77 L1381.85 1213.77 L1382.44 1213.77 L1383.03 1213.77 L1383.61 1213.77 L1384.2 1213.77 L1384.79 1213.77 L1385.37 1213.77 L1385.96 1213.77 L1386.55 1213.77 L1387.13 1213.77 L1387.72 1213.77 L1388.3 1213.77 L1388.89 1213.77 L1389.48 1213.77 L1390.06 1213.77 L1390.65 1213.77 L1391.24 1213.77 L1391.82 1213.77 L1392.41 1213.77 L1393 1213.77 L1393.58 1213.77 L1394.17 1213.77 L1394.75 1213.77 L1395.34 1213.77 L1395.93 1213.77 L1396.51 1213.77 L1397.1 1213.77 L1397.69 1213.77 L1398.27 1213.77 L1398.86 1213.77 L1399.45 1213.77 L1400.03 1213.77 L1400.62 1213.77 L1401.21 1213.77 L1401.79 1213.77 L1402.38 1213.77 L1402.96 1213.77 L1403.55 1213.77 L1404.14 1213.77 L1404.72 1213.77 L1405.31 1213.77 L1405.9 1213.77 L1406.48 1213.77 L1407.07 1213.77 L1407.66 1213.77 L1408.24 1213.77 L1408.83 1213.77 L1409.42 1213.77 L1410 1213.77 L1410.59 1213.77 L1411.17 1213.77 L1411.76 1213.77 L1412.35 1213.77 L1412.93 1213.77 L1413.52 1213.77 L1414.11 1213.77 L1414.69 1213.77 L1415.28 1213.77 L1415.87 1213.77 L1416.45 1213.77 L1417.04 1213.77 L1417.63 1213.77 L1418.21 1213.77 L1418.8 1213.77 L1419.38 1213.77 L1419.97 1213.77 L1420.56 1213.77 L1421.14 1213.77 L1421.73 1213.77 L1422.32 1213.77 L1422.9 1213.77 L1423.49 1213.77 L1424.08 1213.77 L1424.66 1213.77 L1425.25 1213.77 L1425.83 1213.77 L1426.42 1213.77 L1427.01 1213.77 L1427.59 1213.77 L1428.18 1213.77 L1428.77 1213.77 L1429.35 1213.77 L1429.94 1213.77 L1430.53 1213.77 L1431.11 1213.77 L1431.7 1213.77 L1432.29 1213.77 L1432.87 1213.77 L1433.46 1213.77 L1434.04 1213.77 L1434.63 1213.77 L1435.22 1213.77 L1435.8 1213.77 L1436.39 1213.77 L1436.98 1213.77 L1437.56 1213.77 L1438.15 1213.77 L1438.74 1213.77 L1439.32 1213.77 L1439.91 1213.77 L1440.5 1213.77 L1441.08 1213.77 L1441.67 1213.77 L1442.25 1213.77 L1442.84 1213.77 L1443.43 1213.77 L1444.01 1213.77 L1444.6 1213.77 L1445.19 1213.77 L1445.77 1213.77 L1446.36 1213.77 L1446.95 1213.77 L1447.53 1213.77 L1448.12 1213.77 L1448.7 1213.77 L1449.29 1213.77 L1449.88 1213.77 L1450.46 1213.77 L1451.05 1213.77 L1451.64 1213.77 L1452.22 1213.77 L1452.81 1213.77 L1453.4 1213.77 L1453.98 1213.77 L1454.57 1213.77 L1455.16 1213.77 L1455.74 1213.77 L1456.33 1213.77 L1456.91 1213.77 L1457.5 1213.77 L1458.09 1213.77 L1458.67 1213.77 L1459.26 1213.77 L1459.85 1213.77 L1460.43 1213.77 L1461.02 1213.77 L1461.61 1213.77 L1462.19 1213.77 L1462.78 1213.77 L1463.37 1213.77 L1463.95 1213.77 L1464.54 1213.77 L1465.12 1213.77 L1465.71 1213.77 L1466.3 1213.77 L1466.88 1213.77 L1467.47 1213.77 L1468.06 1213.77 L1468.64 1213.77 L1469.23 1213.77 L1469.82 1213.77 L1470.4 1213.77 L1470.99 1213.77 L1471.57 1213.77 L1472.16 1213.77 L1472.75 1213.77 L1473.33 1213.77 L1473.92 1213.77 L1474.51 1213.77 L1475.09 1213.77 L1475.68 1213.77 L1476.27 1213.77 L1476.85 1213.77 L1477.44 1213.77 L1478.03 1213.77 L1478.61 1213.77 L1479.2 1213.77 L1479.78 1213.77 L1480.37 1213.77 L1480.96 1213.77 L1481.54 1213.77 L1482.13 1213.77 L1482.72 1213.77 L1483.3 1213.77 L1483.89 1213.77 L1484.48 1213.77 L1485.06 1213.77 L1485.65 1213.77 L1486.24 1213.77 L1486.82 1213.77 L1487.41 1213.77 L1487.99 1213.77 L1488.58 1213.77 L1489.17 1213.77 L1489.75 1213.77 L1490.34 1213.77 L1490.93 1213.77 L1491.51 1213.77 L1492.1 1213.77 L1492.69 1213.77 L1493.27 1213.77 L1493.86 1213.77 L1494.45 1213.77 L1495.03 1213.77 L1495.62 1213.77 L1496.2 1213.77 L1496.79 1213.77 L1497.38 1213.77 L1497.96 1213.77 L1498.55 1213.77 L1499.14 1213.77 L1499.72 1213.77 L1500.31 1213.77 L1500.9 1213.77 L1501.48 1213.77 L1502.07 1213.77 L1502.65 1213.77 L1503.24 1213.77 L1503.83 1213.77 L1504.41 1213.77 L1505 1213.77 L1505.59 1213.77 L1506.17 1213.77 L1506.76 1213.77 L1507.35 1213.77 L1507.93 1213.77 L1508.52 1213.77 L1509.11 1213.77 L1509.69 1213.77 L1510.28 1213.77 L1510.86 1213.77 L1511.45 1213.77 L1512.04 1213.77 L1512.62 1213.77 L1513.21 1213.77 L1513.8 1213.77 L1514.38 1213.77 L1514.97 1213.77 L1515.56 1213.77 L1516.14 1213.77 L1516.73 1213.77 L1517.32 1213.77 L1517.9 1213.77 L1518.49 1213.77 L1519.07 1213.77 L1519.66 1213.77 L1520.25 1213.77 L1520.83 1213.77 L1521.42 1213.77 L1522.01 1213.77 L1522.59 1213.77 L1523.18 1213.77 L1523.77 1213.77 L1524.35 1213.77 L1524.94 1213.77 L1525.52 1213.77 L1526.11 1213.77 L1526.7 1213.77 L1527.28 1213.77 L1527.87 1213.77 L1528.46 1213.77 L1529.04 1213.77 L1529.63 1213.77 L1530.22 1213.77 L1530.8 1213.77 L1531.39 1213.77 L1531.98 1213.77 L1532.56 1213.77 L1533.15 1213.77 L1533.73 1213.77 L1534.32 1213.77 L1534.91 1213.77 L1535.49 1213.77 L1536.08 1213.77 L1536.67 1213.77 L1537.25 1213.77 L1537.84 1213.77 L1538.43 1213.77 L1539.01 1213.77 L1539.6 1213.77 L1540.19 1213.77 L1540.77 1213.77 L1541.36 1213.77 L1541.94 1213.77 L1542.53 1213.77 L1543.12 1213.77 L1543.7 1213.77 L1544.29 1213.77 L1544.88 1213.77 L1545.46 1213.77 L1546.05 1213.77 L1546.64 1213.77 L1547.22 1213.77 L1547.81 1213.77 L1548.4 1213.77 L1548.98 1213.77 L1549.57 1213.77 L1550.15 1213.77 L1550.74 1213.77 L1551.33 1213.77 L1551.91 1213.77 L1552.5 1213.77 L1553.09 1213.77 L1553.67 1213.77 L1554.26 1213.77 L1554.85 1213.77 L1555.43 1213.77 L1556.02 1213.77 L1556.6 1213.77 L1557.19 1213.77 L1557.78 1213.77 L1558.36 1213.77 L1558.95 1213.77 L1559.54 1213.77 L1560.12 1213.77 L1560.71 1213.77 L1561.3 1213.77 L1561.88 1213.77 L1562.47 1213.77 L1563.06 1213.77 L1563.64 1213.77 L1564.23 1213.77 L1564.81 1213.77 L1565.4 1213.77 L1565.99 1213.77 L1566.57 1213.77 L1567.16 1213.77 L1567.75 1213.77 L1568.33 1213.77 L1568.92 1213.77 L1569.51 1213.77 L1570.09 1213.77 L1570.68 1213.77 L1571.27 1213.77 L1571.85 1213.77 L1572.44 1213.77 L1573.02 1213.77 L1573.61 1213.77 L1574.2 1213.77 L1574.78 1213.77 L1575.37 1213.77 L1575.96 1213.77 L1576.54 1213.77 L1577.13 1213.77 L1577.72 1213.77 L1578.3 1213.77 L1578.89 1213.77 L1579.47 1213.77 L1580.06 1213.77 L1580.65 1213.77 L1581.23 1213.77 L1581.82 1213.77 L1582.41 1213.77 L1582.99 1213.77 L1583.58 1213.77 L1584.17 1213.77 L1584.75 1213.77 L1585.34 1213.77 L1585.93 1213.77 L1586.51 1213.77 L1587.1 1213.77 L1587.68 1213.77 L1588.27 1213.77 L1588.86 1213.77 L1589.44 1213.77 L1590.03 1213.77 L1590.62 1213.77 L1591.2 1213.77 L1591.79 1213.77 L1592.38 1213.77 L1592.96 1213.77 L1593.55 1213.77 L1594.14 1213.77 L1594.72 1213.77 L1595.31 1213.77 L1595.89 1213.77 L1596.48 1213.77 L1597.07 1213.77 L1597.65 1213.77 L1598.24 1213.77 L1598.83 1213.77 L1599.41 1213.77 L1600 1213.77 L1600.59 1213.77 L1601.17 1213.77 L1601.76 1213.77 L1602.34 1213.77 L1602.93 1213.77 L1603.52 1213.77 L1604.1 1213.77 L1604.69 1213.77 L1605.28 1213.77 L1605.86 1213.77 L1606.45 1213.77 L1607.04 1213.77 L1607.62 1213.77 L1608.21 1213.77 L1608.8 1213.77 L1609.38 1213.77 L1609.97 1213.77 L1610.55 1213.77 L1611.14 1213.77 L1611.73 1213.77 L1612.31 1213.77 L1612.9 1213.77 L1613.49 1213.77 L1614.07 1213.77 L1614.66 1213.77 L1615.25 1213.77 L1615.83 1213.77 L1616.42 1213.77 L1617.01 1213.77 L1617.59 1213.77 L1618.18 1213.77 L1618.76 1213.77 L1619.35 1213.77 L1619.94 1213.77 L1620.52 1213.77 L1621.11 1213.77 L1621.7 1213.77 L1622.28 1213.77 L1622.87 1213.77 L1623.46 1213.77 L1624.04 1213.77 L1624.63 1213.77 L1625.22 1213.77 L1625.8 1213.77 L1626.39 1213.77 L1626.97 1213.77 L1627.56 1213.77 L1628.15 1213.77 L1628.73 1213.77 L1629.32 1213.77 L1629.91 1213.77 L1630.49 1213.77 L1631.08 1213.77 L1631.67 1213.77 L1632.25 1213.77 L1632.84 1213.77 L1633.42 1213.77 L1634.01 1213.77 L1634.6 1213.77 L1635.18 1213.77 L1635.77 1213.77 L1636.36 1213.77 L1636.94 1213.77 L1637.53 1213.77 L1638.12 1213.77 L1638.7 1213.77 L1639.29 1213.77 L1639.88 1213.77 L1640.46 1213.77 L1641.05 1213.77 L1641.63 1213.77 L1642.22 1213.77 L1642.81 1213.77 L1643.39 1213.77 L1643.98 1213.77 L1644.57 1213.77 L1645.15 1213.77 L1645.74 1213.77 L1646.33 1213.77 L1646.91 1213.77 L1647.5 1213.77 L1648.09 1213.77 L1648.67 1213.77 L1649.26 1213.77 L1649.84 1213.77 L1650.43 1213.77 L1651.02 1213.77 L1651.6 1213.77 L1652.19 1213.77 L1652.78 1213.77 L1653.36 1213.77 L1653.95 1213.77 L1654.54 1213.77 L1655.12 1213.77 L1655.71 1213.77 L1656.29 1213.77 L1656.88 1213.77 L1657.47 1213.77 L1658.05 1213.77 L1658.64 1213.77 L1659.23 1213.77 L1659.81 1213.77 L1660.4 1213.77 L1660.99 1213.77 L1661.57 1213.77 L1662.16 1213.77 L1662.75 1213.77 L1663.33 1213.77 L1663.92 1213.77 L1664.5 1213.77 L1665.09 1213.77 L1665.68 1213.77 L1666.26 1213.77 L1666.85 1213.77 L1667.44 1213.77 L1668.02 1213.77 L1668.61 1213.77 L1669.2 1213.77 L1669.78 1213.77 L1670.37 1213.77 L1670.96 1213.77 L1671.54 1213.77 L1672.13 1213.77 L1672.71 1213.77 L1673.3 1213.77 L1673.89 1213.77 L1674.47 1213.77 L1675.06 1213.77 L1675.65 1213.77 L1676.23 1213.77 L1676.82 1213.77 L1677.41 1213.77 L1677.99 1213.77 L1678.58 1213.77 L1679.17 1213.77 L1679.75 1213.77 L1680.34 1213.77 L1680.92 1213.77 L1681.51 1213.77 L1682.1 1213.77 L1682.68 1213.77 L1683.27 1213.77 L1683.86 1213.77 L1684.44 1213.77 L1685.03 1213.77 L1685.62 1213.77 L1686.2 1213.77 L1686.79 1213.77 L1687.37 1213.77 L1687.96 1213.77 L1688.55 1213.77 L1689.13 1213.77 L1689.72 1213.77 L1690.31 1213.77 L1690.89 1213.77 L1691.48 1213.77 L1692.07 1213.77 L1692.65 1213.77 L1693.24 1213.77 L1693.83 1213.77 L1694.41 1213.77 L1695 1213.77 L1695.58 1213.77 L1696.17 1213.77 L1696.76 1213.77 L1697.34 1213.77 L1697.93 1213.77 L1698.52 1213.77 L1699.1 1213.77 L1699.69 1213.77 L1700.28 1213.77 L1700.86 1213.77 L1701.45 1213.77 L1702.04 1213.77 L1702.62 1213.77 L1703.21 1213.77 L1703.79 1213.77 L1704.38 1213.77 L1704.97 1213.77 L1705.55 1213.77 L1706.14 1213.77 L1706.73 1213.77 L1707.31 1213.77 L1707.9 1213.77 L1708.49 1213.77 L1709.07 1213.77 L1709.66 1213.77 L1710.24 1213.77 L1710.83 1213.77 L1711.42 1213.77 L1712 1213.77 L1712.59 1213.77 L1713.18 1213.77 L1713.76 1213.77 L1714.35 1213.77 L1714.94 1213.77 L1715.52 1213.77 L1716.11 1213.77 L1716.7 1213.77 L1717.28 1213.77 L1717.87 1213.77 L1718.45 1213.77 L1719.04 1213.77 L1719.63 1213.77 L1720.21 1213.77 L1720.8 1213.77 L1721.39 1213.77 L1721.97 1213.77 L1722.56 1213.77 L1723.15 1213.77 L1723.73 1213.77 L1724.32 1213.77 L1724.91 1213.77 L1725.49 1213.77 L1726.08 1213.77 L1726.66 1213.77 L1727.25 1213.77 L1727.84 1213.77 L1728.42 1213.77 L1729.01 1213.77 L1729.6 1213.77 L1730.18 1213.77 L1730.77 1213.77 L1731.36 1213.77 L1731.94 1213.77 L1732.53 1213.77 L1733.11 1213.77 L1733.7 1213.77 L1734.29 1213.77 L1734.87 1213.77 L1735.46 1213.77 L1736.05 1213.77 L1736.63 1213.77 L1737.22 1213.77 L1737.81 1213.77 L1738.39 1213.77 L1738.98 1213.77 L1739.57 1213.77 L1740.15 1213.77 L1740.74 1213.77 L1741.32 1213.77 L1741.91 1213.77 L1742.5 1213.77 L1743.08 1213.77 L1743.67 1213.77 L1744.26 1213.77 L1744.84 1213.77 L1745.43 1213.77 L1746.02 1213.77 L1746.6 1213.77 L1747.19 1213.77 L1747.78 1213.77 L1748.36 1213.77 L1748.95 1213.77 L1749.53 1213.77 L1750.12 1213.77 L1750.71 1213.77 L1751.29 1213.77 L1751.88 1213.77 L1752.47 1213.77 L1753.05 1213.77 L1753.64 1213.77 L1754.23 1213.77 L1754.81 1213.77 L1755.4 1213.77 L1755.99 1213.77 L1756.57 1213.77 L1757.16 1213.77 L1757.74 1213.77 L1758.33 1213.77 L1758.92 1213.77 L1759.5 1213.77 L1760.09 1213.77 L1760.68 1213.77 L1761.26 1213.77 L1761.85 1213.77 L1762.44 1213.77 L1763.02 1213.77 L1763.61 1213.77 L1764.19 1213.77 L1764.78 1213.77 L1765.37 1213.77 L1765.95 1213.77 L1766.54 1213.77 L1767.13 1213.77 L1767.71 1213.77 L1768.3 1213.77 L1768.89 1213.77 L1769.47 1213.77 L1770.06 1213.77 L1770.65 1213.77 L1771.23 1213.77 L1771.82 1213.77 L1772.4 1213.77 L1772.99 1213.77 L1773.58 1213.77 L1774.16 1213.77 L1774.75 1213.77 L1775.34 1213.77 L1775.92 1213.77 L1776.51 1213.77 L1777.1 1213.77 L1777.68 1213.77 L1778.27 1213.77 L1778.86 1213.77 L1779.44 1213.77 L1780.03 1213.77 L1780.61 1213.77 L1781.2 1213.77 L1781.79 1213.77 L1782.37 1213.77 L1782.96 1213.77 L1783.55 1213.77 L1784.13 1213.77 L1784.72 1213.77 L1785.31 1213.77 L1785.89 1213.77 L1786.48 1213.77 L1787.06 1213.77 L1787.65 1213.77 L1788.24 1213.77 L1788.82 1213.77 L1789.41 1213.77 L1790 1213.77 L1790.58 1213.77 L1791.17 1213.77 L1791.76 1213.77 L1792.34 1213.77 L1792.93 1213.77 L1793.52 1213.77 L1794.1 1213.77 L1794.69 1213.77 L1795.27 1213.77 L1795.86 1213.77 L1796.45 1213.77 L1797.03 1213.77 L1797.62 1213.77 L1798.21 1213.77 L1798.79 1213.77 L1799.38 1213.77 L1799.97 1213.77 L1800.55 1213.77 L1801.14 1213.77 L1801.73 1213.77 L1802.31 1213.77 L1802.9 1213.77 L1803.48 1213.77 L1804.07 1213.77 L1804.66 1213.77 L1805.24 1213.77 L1805.83 1213.77 L1806.42 1213.77 L1807 1213.77 L1807.59 1213.77 L1808.18 1213.77 L1808.76 1213.77 L1809.35 1213.77 L1809.94 1213.77 L1810.52 1213.77 L1811.11 1213.77 L1811.69 1213.77 L1812.28 1213.77 L1812.87 1213.77 L1813.45 1213.77 L1814.04 1213.77 L1814.63 1213.77 L1815.21 1213.77 L1815.8 1213.77 L1816.39 1213.77 L1816.97 1213.77 L1817.56 1213.77 L1818.14 1213.77 L1818.73 1213.77 L1819.32 1213.77 L1819.9 1213.77 L1820.49 1213.77 L1821.08 1213.77 L1821.66 1213.77 L1822.25 1213.77 L1822.84 1213.77 L1823.42 1213.77 L1824.01 1213.77 L1824.6 1213.77 L1825.18 1213.77 L1825.77 1213.77 L1826.35 1213.77 L1826.94 1213.77 L1827.53 1213.77 L1828.11 1213.77 L1828.7 1213.77 L1829.29 1213.77 L1829.87 1213.77 L1830.46 1213.77 L1831.05 1213.77 L1831.63 1213.77 L1832.22 1213.77 L1832.81 1213.77 L1833.39 1213.77 L1833.98 1213.77 L1834.56 1213.77 L1835.15 1213.77 L1835.74 1213.77 L1836.32 1213.77 L1836.91 1213.77 L1837.5 1213.77 L1838.08 1213.77 L1838.67 1213.77 L1839.26 1213.77 L1839.84 1213.77 L1840.43 1213.77 L1841.01 1213.77 L1841.6 1213.77 L1842.19 1213.77 L1842.77 1213.77 L1843.36 1213.77 L1843.95 1213.77 L1844.53 1213.77 L1845.12 1213.77 L1845.71 1213.77 L1846.29 1213.77 L1846.88 1213.77 L1847.47 1213.77 L1848.05 1213.77 L1848.64 1213.77 L1849.22 1213.77 L1849.81 1213.77 L1850.4 1213.77 L1850.98 1213.77 L1851.57 1213.77 L1852.16 1213.77 L1852.74 1213.77 L1853.33 1213.77 L1853.92 1213.77 L1854.5 1213.77 L1855.09 1213.77 L1855.68 1213.77 L1856.26 1213.77 L1856.85 1213.77 L1857.43 1213.77 L1858.02 1213.77 L1858.61 1213.77 L1859.19 1213.77 L1859.78 1213.77 L1860.37 1213.77 L1860.95 1213.77 L1861.54 1213.77 L1862.13 1213.77 L1862.71 1213.77 L1863.3 1213.77 L1863.88 1213.77 L1864.47 1213.77 L1865.06 1213.77 L1865.64 1213.77 L1866.23 1213.77 L1866.82 1213.77 L1867.4 1213.77 L1867.99 1213.77 L1868.58 1213.77 L1869.16 1213.77 L1869.75 1213.77 L1870.34 1213.77 L1870.92 1213.77 L1871.51 1213.77 L1872.09 1213.77 L1872.68 1213.77 L1873.27 1213.77 L1873.85 1213.77 L1874.44 1213.77 L1875.03 1213.77 L1875.61 1213.77 L1876.2 1213.77 L1876.79 1213.77 L1877.37 1213.77 L1877.96 1213.77 L1878.55 1213.77 L1879.13 1213.77 L1879.72 1213.77 L1880.3 1213.77 L1880.89 1213.77 L1881.48 1213.77 L1882.06 1213.77 L1882.65 1213.77 L1883.24 1213.77 L1883.82 1213.77 L1884.41 1213.77 L1885 1213.77 L1885.58 1213.77 L1886.17 1213.77 L1886.76 1213.77 L1887.34 1213.77 L1887.93 1213.77 L1888.51 1213.77 L1889.1 1213.77 L1889.69 1213.77 L1890.27 1213.77 L1890.86 1213.77 L1891.45 1213.77 L1892.03 1213.77 L1892.62 1213.77 L1893.21 1213.77 L1893.79 1213.77 L1894.38 1213.77 L1894.96 1213.77 L1895.55 1213.77 L1896.14 1213.77 L1896.72 1213.77 L1897.31 1213.77 L1897.9 1213.77 L1898.48 1213.77 L1899.07 1213.77 L1899.66 1213.77 L1900.24 1213.77 L1900.83 1213.77 L1901.42 1213.77 L1902 1213.77 L1902.59 1213.77 L1903.17 1213.77 L1903.76 1213.77 L1904.35 1213.77 L1904.93 1213.77 L1905.52 1213.77 L1906.11 1213.77 L1906.69 1213.77 L1907.28 1213.77 L1907.87 1213.77 L1908.45 1213.77 L1909.04 1213.77 L1909.63 1213.77 L1910.21 1213.77 L1910.8 1213.77 L1911.38 1213.77 L1911.97 1213.77 L1912.56 1213.77 L1913.14 1213.77 L1913.73 1213.77 L1914.32 1213.77 L1914.9 1213.77 L1915.49 1213.77 L1916.08 1213.77 L1916.66 1213.77 L1917.25 1213.77 L1917.83 1213.77 L1918.42 1213.77 L1919.01 1213.77 L1919.59 1213.77 L1920.18 1213.77 L1920.77 1213.77 L1921.35 1213.77 L1921.94 1213.77 L1922.53 1213.77 L1923.11 1213.77 L1923.7 1213.77 L1924.29 1213.77 L1924.87 1213.77 L1925.46 1213.77 L1926.04 1213.77 L1926.63 1213.77 L1927.22 1213.77 L1927.8 1213.77 L1928.39 1213.77 L1928.98 1213.77 L1929.56 1213.77 L1930.15 1213.77 L1930.74 1213.77 L1931.32 1213.77 L1931.91 1213.77 L1932.5 1213.77 L1933.08 1213.77 L1933.67 1213.77 L1934.25 1213.77 L1934.84 1213.77 L1935.43 1213.77 L1936.01 1213.77 L1936.6 1213.77 L1937.19 1213.77 L1937.77 1213.77 L1938.36 1213.77 L1938.95 1213.77 L1939.53 1213.77 L1940.12 1213.77 L1940.71 1213.77 L1941.29 1213.77 L1941.88 1213.77 L1942.46 1213.77 L1943.05 1213.77 L1943.64 1213.77 L1944.22 1213.77 L1944.81 1213.77 L1945.4 1213.77 L1945.98 1213.77 L1946.57 1213.77 L1947.16 1213.77 L1947.74 1213.77 L1948.33 1213.77 L1948.91 1213.77 L1949.5 1213.77 L1950.09 1213.77 L1950.67 1213.77 L1951.26 1213.77 L1951.85 1213.77 L1952.43 1213.77 L1953.02 1213.77 L1953.61 1213.77 L1954.19 1213.77 L1954.78 1213.77 L1955.37 1213.77 L1955.95 1213.77 L1956.54 1213.77 L1957.12 1213.77 L1957.71 1213.77 L1958.3 1213.77 L1958.88 1213.77 L1959.47 1213.77 L1960.06 1213.77 L1960.64 1213.77 L1961.23 1213.77 L1961.82 1213.77 L1962.4 1213.77 L1962.99 1213.77 L1963.58 1213.77 L1964.16 1213.77 L1964.75 1213.77 L1965.33 1213.77 L1965.92 1213.77 L1966.51 1213.77 L1967.09 1213.77 L1967.68 1213.77 L1968.27 1213.77 L1968.85 1213.77 L1969.44 1213.77 L1970.03 1213.77 L1970.61 1213.77 L1971.2 1213.77 L1971.78 1213.77 L1972.37 1213.77 L1972.96 1213.77 L1973.54 1213.77 L1974.13 1213.77 L1974.72 1213.77 L1975.3 1213.77 L1975.89 1213.77 L1976.48 1213.77 L1977.06 1213.77 L1977.65 1213.77 L1978.24 1213.77 L1978.82 1213.77 L1979.41 1213.77 L1979.99 1213.77 L1980.58 1213.77 L1981.17 1213.77 L1981.75 1213.77 L1982.34 1213.77 L1982.93 1213.77 L1983.51 1213.77 L1984.1 1213.77 L1984.69 1213.77 L1985.27 1213.77 L1985.86 1213.77 L1986.45 1213.77 L1987.03 1213.77 L1987.62 1213.77 L1988.2 1213.77 L1988.79 1213.77 L1989.38 1213.77 L1989.96 1213.77 L1990.55 1213.77 L1991.14 1213.77 L1991.72 1213.77 L1992.31 1213.77 L1992.9 1213.77 L1993.48 1213.77 L1994.07 1213.77 L1994.65 1213.77 L1995.24 1213.77 L1995.83 1213.77 L1996.41 1213.77 L1997 1213.77 L1997.59 1213.77 L1998.17 1213.77 L1998.76 1213.77 L1999.35 1213.77 L1999.93 1213.77 L2000.52 1213.77 L2001.11 1213.77 L2001.69 1213.77 L2002.28 1213.77 L2002.86 1213.77 L2003.45 1213.77 L2004.04 1213.77 L2004.62 1213.77 L2005.21 1213.77 L2005.8 1213.77 L2006.38 1213.77 L2006.97 1213.77 L2007.56 1213.77 L2008.14 1213.77 L2008.73 1213.77 L2009.32 1213.77 L2009.9 1213.77 L2010.49 1213.77 L2011.07 1213.77 L2011.66 1213.77 L2012.25 1213.77 L2012.83 1213.77 L2013.42 1213.77 L2014.01 1213.77 L2014.59 1213.77 L2015.18 1213.77 L2015.77 1213.77 L2016.35 1213.77 L2016.94 1213.77 L2017.53 1213.77 L2018.11 1213.77 L2018.7 1213.77 L2019.28 1213.77 L2019.87 1213.77 L2020.46 1213.77 L2021.04 1213.77 L2021.63 1213.77 L2022.22 1213.77 L2022.8 1213.77 L2023.39 1213.77 L2023.98 1213.77 L2024.56 1213.77 L2025.15 1213.77 L2025.73 1213.77 L2026.32 1213.77 L2026.91 1213.77 L2027.49 1213.77 L2028.08 1213.77 L2028.67 1213.77 L2029.25 1213.77 L2029.84 1213.77 L2030.43 1213.77 L2031.01 1213.77 L2031.6 1213.77 L2032.19 1213.77 L2032.77 1213.77 L2033.36 1213.77 L2033.94 1213.77 L2034.53 1213.77 L2035.12 1213.77 L2035.7 1213.77 L2036.29 1213.77 L2036.88 1213.77 L2037.46 1213.77 L2038.05 1213.77 L2038.64 1213.77 L2039.22 1213.77 L2039.81 1213.77 L2040.4 1213.77 L2040.98 1213.77 L2041.57 1213.77 L2042.15 1213.77 L2042.74 1213.77 L2043.33 1213.77 L2043.91 1213.77 L2044.5 1213.77 L2045.09 1213.77 L2045.67 1213.77 L2046.26 1213.77 L2046.85 1213.77 L2047.43 1213.77 L2048.02 1213.77 L2048.6 1213.77 L2049.19 1213.77 L2049.78 1213.77 L2050.36 1213.77 L2050.95 1213.77 L2051.54 1213.77 L2052.12 1213.77 L2052.71 1213.77 L2053.3 1213.77 L2053.88 1213.77 L2054.47 1213.77 L2055.06 1213.77 L2055.64 1213.77 L2056.23 1213.77 L2056.81 1213.77 L2057.4 1213.77 L2057.99 1213.77 L2058.57 1213.77 L2059.16 1213.77 L2059.75 1213.77 L2060.33 1213.77 L2060.92 1213.77 L2061.51 1213.77 L2062.09 1213.77 L2062.68 1213.77 L2063.27 1213.77 L2063.85 1213.77 L2064.44 1213.77 L2065.02 1213.77 L2065.61 1213.77 L2066.2 1213.77 L2066.78 1213.77 L2067.37 1213.77 L2067.96 1213.77 L2068.54 1213.77 L2069.13 1213.77 L2069.72 1213.77 L2070.3 1213.77 L2070.89 1213.77 L2071.48 1213.77 L2072.06 1213.77 L2072.65 1213.77 L2073.23 1213.77 L2073.82 1213.77 L2074.41 1213.77 L2074.99 1213.77 L2075.58 1213.77 L2076.17 1213.77 L2076.75 1213.77 L2077.34 1213.77 L2077.93 1213.77 L2078.51 1213.77 L2079.1 1213.77 L2079.68 1213.77 L2080.27 1213.77 L2080.86 1213.77 L2081.44 1213.77 L2082.03 1213.77 L2082.62 1213.77 L2083.2 1213.77 L2083.79 1213.77 L2084.38 1213.77 L2084.96 1213.77 L2085.55 1213.77 L2086.14 1213.77 L2086.72 1213.77 L2087.31 1213.77 L2087.89 1213.77 L2088.48 1213.77 L2089.07 1213.77 L2089.65 1213.77 L2090.24 1213.77 L2090.83 1213.77 L2091.41 1213.77 L2092 1213.77 L2092.59 1213.77 L2093.17 1213.77 L2093.76 1213.77 L2094.35 1213.77 L2094.93 1213.77 L2095.52 1213.77 L2096.1 1213.77 L2096.69 1213.77 L2097.28 1213.77 L2097.86 1213.77 L2098.45 1213.77 L2099.04 1213.77 L2099.62 1213.77 L2100.21 1213.77 L2100.8 1213.77 L2101.38 1213.77 L2101.97 1213.77 L2102.55 1213.77 L2103.14 1213.77 L2103.73 1213.77 L2104.31 1213.77 L2104.9 1213.77 L2105.49 1213.77 L2106.07 1213.77 L2106.66 1213.77 L2107.25 1213.77 L2107.83 1213.77 L2108.42 1213.77 L2109.01 1213.77 L2109.59 1213.77 L2110.18 1213.77 L2110.76 1213.77 L2111.35 1213.77 L2111.94 1213.77 L2112.52 1213.77 L2113.11 1213.77 L2113.7 1213.77 L2114.28 1213.77 L2114.87 1213.77 L2115.46 1213.77 L2116.04 1213.77 L2116.63 1213.77 L2117.22 1213.77 L2117.8 1213.77 L2118.39 1213.77 L2118.97 1213.77 L2119.56 1213.77 L2120.15 1213.77 L2120.73 1213.77 L2121.32 1213.77 L2121.91 1213.77 L2122.49 1213.77 L2123.08 1213.77 L2123.67 1213.77 L2124.25 1213.77 L2124.84 1213.77 L2125.42 1213.77 L2126.01 1213.77 L2126.6 1213.77 L2127.18 1213.77 L2127.77 1213.77 L2128.36 1213.77 L2128.94 1213.77 L2129.53 1213.77 L2130.12 1213.77 L2130.7 1213.77 L2131.29 1213.77 L2131.88 1213.77 L2132.46 1213.77 L2133.05 1213.77 L2133.63 1213.77 L2134.22 1213.77 L2134.81 1213.77 L2135.39 1213.77 L2135.98 1213.77 L2136.57 1213.77 L2137.15 1213.77 L2137.74 1213.77 L2138.33 1213.77 L2138.91 1213.77 L2139.5 1213.77 L2140.09 1213.77 L2140.67 1213.77 L2141.26 1213.77 L2141.84 1213.77 L2142.43 1213.77 L2143.02 1213.77 L2143.6 1213.77 L2144.19 1213.77 L2144.78 1213.77 L2145.36 1213.77 L2145.95 1213.77 L2146.54 1213.77 L2147.12 1213.77 L2147.71 1213.77 L2148.3 1213.77 L2148.88 1213.77 L2149.47 1213.77 L2150.05 1213.77 L2150.64 1213.77 L2151.23 1213.77 L2151.81 1213.77 L2152.4 1213.77 L2152.99 1213.77 L2153.57 1213.77 L2154.16 1213.77 L2154.75 1213.77 L2155.33 1213.77 L2155.92 1213.77 L2156.5 1213.77 L2157.09 1213.77 L2157.68 1213.77 L2158.26 1213.77 L2158.26 1213.08 L2157.68 1213.08 L2157.09 1213.08 L2156.5 1213.08 L2155.92 1213.08 L2155.33 1213.08 L2154.75 1213.08 L2154.16 1213.08 L2153.57 1213.08 L2152.99 1213.08 L2152.4 1213.08 L2151.81 1213.08 L2151.23 1213.08 L2150.64 1213.08 L2150.05 1213.08 L2149.47 1213.08 L2148.88 1213.08 L2148.3 1213.08 L2147.71 1213.08 L2147.12 1213.08 L2146.54 1213.08 L2145.95 1213.08 L2145.36 1213.08 L2144.78 1213.08 L2144.19 1213.08 L2143.6 1213.08 L2143.02 1213.08 L2142.43 1213.08 L2141.84 1213.08 L2141.26 1213.08 L2140.67 1213.08 L2140.09 1213.08 L2139.5 1213.08 L2138.91 1213.08 L2138.33 1213.08 L2137.74 1213.08 L2137.15 1213.08 L2136.57 1213.08 L2135.98 1213.08 L2135.39 1213.08 L2134.81 1213.08 L2134.22 1213.08 L2133.63 1213.08 L2133.05 1213.08 L2132.46 1213.08 L2131.88 1213.08 L2131.29 1213.08 L2130.7 1213.08 L2130.12 1213.08 L2129.53 1213.08 L2128.94 1213.08 L2128.36 1213.08 L2127.77 1213.08 L2127.18 1213.08 L2126.6 1213.08 L2126.01 1213.08 L2125.42 1213.08 L2124.84 1213.08 L2124.25 1213.08 L2123.67 1213.08 L2123.08 1213.08 L2122.49 1213.08 L2121.91 1213.08 L2121.32 1213.08 L2120.73 1213.08 L2120.15 1213.08 L2119.56 1213.08 L2118.97 1213.08 L2118.39 1213.08 L2117.8 1213.08 L2117.22 1213.08 L2116.63 1213.08 L2116.04 1213.08 L2115.46 1213.08 L2114.87 1213.08 L2114.28 1213.08 L2113.7 1213.08 L2113.11 1213.08 L2112.52 1213.08 L2111.94 1213.08 L2111.35 1213.08 L2110.76 1213.08 L2110.18 1213.08 L2109.59 1213.08 L2109.01 1213.08 L2108.42 1213.08 L2107.83 1213.08 L2107.25 1213.08 L2106.66 1213.08 L2106.07 1213.08 L2105.49 1213.08 L2104.9 1213.08 L2104.31 1213.08 L2103.73 1213.08 L2103.14 1213.08 L2102.55 1213.08 L2101.97 1213.08 L2101.38 1213.08 L2100.8 1213.08 L2100.21 1213.08 L2099.62 1213.08 L2099.04 1213.08 L2098.45 1213.08 L2097.86 1213.08 L2097.28 1213.08 L2096.69 1213.08 L2096.1 1213.08 L2095.52 1213.08 L2094.93 1213.08 L2094.35 1213.08 L2093.76 1213.08 L2093.17 1213.08 L2092.59 1213.08 L2092 1213.08 L2091.41 1213.08 L2090.83 1213.08 L2090.24 1213.08 L2089.65 1213.08 L2089.07 1213.08 L2088.48 1213.08 L2087.89 1213.08 L2087.31 1213.08 L2086.72 1213.08 L2086.14 1213.08 L2085.55 1213.08 L2084.96 1213.08 L2084.38 1213.08 L2083.79 1213.08 L2083.2 1213.08 L2082.62 1213.08 L2082.03 1213.08 L2081.44 1213.08 L2080.86 1213.08 L2080.27 1213.08 L2079.68 1213.08 L2079.1 1213.08 L2078.51 1213.08 L2077.93 1213.08 L2077.34 1213.08 L2076.75 1213.08 L2076.17 1213.08 L2075.58 1213.08 L2074.99 1213.08 L2074.41 1213.08 L2073.82 1213.08 L2073.23 1213.08 L2072.65 1213.08 L2072.06 1213.08 L2071.48 1213.08 L2070.89 1213.08 L2070.3 1213.08 L2069.72 1213.08 L2069.13 1213.08 L2068.54 1213.08 L2067.96 1213.08 L2067.37 1213.08 L2066.78 1213.08 L2066.2 1213.08 L2065.61 1213.08 L2065.02 1213.08 L2064.44 1213.08 L2063.85 1213.08 L2063.27 1213.08 L2062.68 1213.08 L2062.09 1213.08 L2061.51 1213.08 L2060.92 1213.08 L2060.33 1213.08 L2059.75 1213.08 L2059.16 1213.08 L2058.57 1213.08 L2057.99 1213.08 L2057.4 1213.08 L2056.81 1213.08 L2056.23 1213.08 L2055.64 1213.08 L2055.06 1213.08 L2054.47 1213.08 L2053.88 1213.08 L2053.3 1213.08 L2052.71 1213.08 L2052.12 1213.08 L2051.54 1213.08 L2050.95 1213.08 L2050.36 1213.08 L2049.78 1213.08 L2049.19 1213.08 L2048.6 1213.08 L2048.02 1213.08 L2047.43 1213.08 L2046.85 1213.08 L2046.26 1213.08 L2045.67 1213.08 L2045.09 1213.08 L2044.5 1213.08 L2043.91 1213.08 L2043.33 1213.08 L2042.74 1213.08 L2042.15 1213.08 L2041.57 1213.08 L2040.98 1213.08 L2040.4 1213.08 L2039.81 1213.08 L2039.22 1213.08 L2038.64 1213.08 L2038.05 1213.08 L2037.46 1213.08 L2036.88 1213.08 L2036.29 1213.08 L2035.7 1213.08 L2035.12 1213.08 L2034.53 1213.08 L2033.94 1213.08 L2033.36 1213.08 L2032.77 1213.08 L2032.19 1213.08 L2031.6 1213.08 L2031.01 1213.08 L2030.43 1213.08 L2029.84 1213.08 L2029.25 1213.08 L2028.67 1213.08 L2028.08 1213.08 L2027.49 1213.08 L2026.91 1213.08 L2026.32 1213.08 L2025.73 1213.08 L2025.15 1213.08 L2024.56 1213.08 L2023.98 1213.08 L2023.39 1213.08 L2022.8 1213.08 L2022.22 1213.08 L2021.63 1213.08 L2021.04 1213.08 L2020.46 1213.08 L2019.87 1213.08 L2019.28 1213.08 L2018.7 1213.08 L2018.11 1213.08 L2017.53 1213.08 L2016.94 1213.08 L2016.35 1213.08 L2015.77 1213.08 L2015.18 1213.08 L2014.59 1213.08 L2014.01 1213.08 L2013.42 1213.08 L2012.83 1213.08 L2012.25 1213.08 L2011.66 1213.08 L2011.07 1213.08 L2010.49 1213.08 L2009.9 1213.08 L2009.32 1213.08 L2008.73 1213.08 L2008.14 1213.08 L2007.56 1213.08 L2006.97 1213.08 L2006.38 1213.08 L2005.8 1213.08 L2005.21 1213.08 L2004.62 1213.08 L2004.04 1213.08 L2003.45 1213.08 L2002.86 1213.08 L2002.28 1213.08 L2001.69 1213.08 L2001.11 1213.08 L2000.52 1213.08 L1999.93 1213.08 L1999.35 1213.08 L1998.76 1213.08 L1998.17 1213.08 L1997.59 1213.08 L1997 1213.08 L1996.41 1213.08 L1995.83 1213.08 L1995.24 1213.08 L1994.65 1213.08 L1994.07 1213.08 L1993.48 1213.08 L1992.9 1213.08 L1992.31 1213.08 L1991.72 1213.08 L1991.14 1213.08 L1990.55 1213.08 L1989.96 1213.08 L1989.38 1213.08 L1988.79 1213.08 L1988.2 1213.08 L1987.62 1213.08 L1987.03 1213.08 L1986.45 1213.08 L1985.86 1213.08 L1985.27 1213.08 L1984.69 1213.08 L1984.1 1213.08 L1983.51 1213.08 L1982.93 1213.08 L1982.34 1213.08 L1981.75 1213.08 L1981.17 1213.08 L1980.58 1213.08 L1979.99 1213.08 L1979.41 1213.08 L1978.82 1213.08 L1978.24 1213.08 L1977.65 1213.08 L1977.06 1213.08 L1976.48 1213.08 L1975.89 1213.08 L1975.3 1213.08 L1974.72 1213.08 L1974.13 1213.08 L1973.54 1213.08 L1972.96 1213.08 L1972.37 1213.08 L1971.78 1213.08 L1971.2 1213.08 L1970.61 1213.08 L1970.03 1213.08 L1969.44 1213.08 L1968.85 1213.08 L1968.27 1213.08 L1967.68 1213.08 L1967.09 1213.08 L1966.51 1213.08 L1965.92 1213.08 L1965.33 1213.08 L1964.75 1213.08 L1964.16 1213.08 L1963.58 1213.08 L1962.99 1213.08 L1962.4 1213.08 L1961.82 1213.08 L1961.23 1213.08 L1960.64 1213.08 L1960.06 1213.08 L1959.47 1213.08 L1958.88 1213.08 L1958.3 1213.08 L1957.71 1213.08 L1957.12 1213.08 L1956.54 1213.08 L1955.95 1213.08 L1955.37 1213.08 L1954.78 1213.08 L1954.19 1213.08 L1953.61 1213.08 L1953.02 1213.08 L1952.43 1213.08 L1951.85 1213.08 L1951.26 1213.08 L1950.67 1213.08 L1950.09 1213.08 L1949.5 1213.08 L1948.91 1213.08 L1948.33 1213.08 L1947.74 1213.08 L1947.16 1213.08 L1946.57 1213.08 L1945.98 1213.08 L1945.4 1213.08 L1944.81 1213.08 L1944.22 1213.08 L1943.64 1213.08 L1943.05 1213.08 L1942.46 1213.08 L1941.88 1213.08 L1941.29 1213.08 L1940.71 1213.08 L1940.12 1213.08 L1939.53 1213.08 L1938.95 1213.08 L1938.36 1213.08 L1937.77 1213.08 L1937.19 1213.08 L1936.6 1213.08 L1936.01 1213.08 L1935.43 1213.08 L1934.84 1213.08 L1934.25 1213.08 L1933.67 1213.08 L1933.08 1213.08 L1932.5 1213.08 L1931.91 1213.08 L1931.32 1213.08 L1930.74 1213.08 L1930.15 1213.08 L1929.56 1213.08 L1928.98 1213.08 L1928.39 1213.08 L1927.8 1213.08 L1927.22 1213.08 L1926.63 1213.08 L1926.04 1213.08 L1925.46 1213.08 L1924.87 1213.08 L1924.29 1213.08 L1923.7 1213.08 L1923.11 1213.08 L1922.53 1213.08 L1921.94 1213.08 L1921.35 1213.08 L1920.77 1213.08 L1920.18 1213.08 L1919.59 1213.08 L1919.01 1213.08 L1918.42 1213.08 L1917.83 1213.08 L1917.25 1213.08 L1916.66 1213.08 L1916.08 1213.08 L1915.49 1213.08 L1914.9 1213.08 L1914.32 1213.08 L1913.73 1213.08 L1913.14 1213.08 L1912.56 1213.08 L1911.97 1213.08 L1911.38 1213.08 L1910.8 1213.08 L1910.21 1213.08 L1909.63 1213.08 L1909.04 1213.08 L1908.45 1213.08 L1907.87 1213.08 L1907.28 1213.08 L1906.69 1213.08 L1906.11 1213.08 L1905.52 1213.08 L1904.93 1213.08 L1904.35 1213.08 L1903.76 1213.08 L1903.17 1213.08 L1902.59 1213.08 L1902 1213.08 L1901.42 1213.08 L1900.83 1213.08 L1900.24 1213.08 L1899.66 1213.08 L1899.07 1213.08 L1898.48 1213.08 L1897.9 1213.08 L1897.31 1213.08 L1896.72 1213.08 L1896.14 1213.08 L1895.55 1213.08 L1894.96 1213.08 L1894.38 1213.08 L1893.79 1213.08 L1893.21 1213.08 L1892.62 1213.08 L1892.03 1213.08 L1891.45 1213.08 L1890.86 1213.08 L1890.27 1213.08 L1889.69 1213.08 L1889.1 1213.08 L1888.51 1213.08 L1887.93 1213.08 L1887.34 1213.08 L1886.76 1213.08 L1886.17 1213.08 L1885.58 1213.08 L1885 1213.08 L1884.41 1213.08 L1883.82 1213.08 L1883.24 1213.08 L1882.65 1213.08 L1882.06 1213.08 L1881.48 1213.08 L1880.89 1213.08 L1880.3 1213.08 L1879.72 1213.08 L1879.13 1213.08 L1878.55 1213.08 L1877.96 1213.08 L1877.37 1213.08 L1876.79 1213.08 L1876.2 1213.08 L1875.61 1213.08 L1875.03 1213.08 L1874.44 1213.08 L1873.85 1213.08 L1873.27 1213.08 L1872.68 1213.08 L1872.09 1213.08 L1871.51 1213.08 L1870.92 1213.08 L1870.34 1213.08 L1869.75 1213.08 L1869.16 1213.08 L1868.58 1213.08 L1867.99 1213.08 L1867.4 1213.08 L1866.82 1213.08 L1866.23 1213.08 L1865.64 1213.08 L1865.06 1213.08 L1864.47 1213.08 L1863.88 1213.08 L1863.3 1213.08 L1862.71 1213.08 L1862.13 1213.08 L1861.54 1213.08 L1860.95 1213.08 L1860.37 1213.08 L1859.78 1213.08 L1859.19 1213.08 L1858.61 1213.08 L1858.02 1213.08 L1857.43 1213.08 L1856.85 1213.08 L1856.26 1213.08 L1855.68 1213.08 L1855.09 1213.08 L1854.5 1213.08 L1853.92 1213.08 L1853.33 1213.08 L1852.74 1213.08 L1852.16 1213.08 L1851.57 1213.08 L1850.98 1213.08 L1850.4 1213.08 L1849.81 1213.08 L1849.22 1213.08 L1848.64 1213.08 L1848.05 1213.08 L1847.47 1213.08 L1846.88 1213.08 L1846.29 1213.08 L1845.71 1213.08 L1845.12 1213.08 L1844.53 1213.08 L1843.95 1213.08 L1843.36 1213.08 L1842.77 1213.08 L1842.19 1213.08 L1841.6 1213.08 L1841.01 1213.08 L1840.43 1213.08 L1839.84 1213.08 L1839.26 1213.08 L1838.67 1213.08 L1838.08 1213.08 L1837.5 1213.08 L1836.91 1213.08 L1836.32 1213.08 L1835.74 1213.08 L1835.15 1213.08 L1834.56 1213.08 L1833.98 1213.08 L1833.39 1213.08 L1832.81 1213.08 L1832.22 1213.08 L1831.63 1213.08 L1831.05 1213.08 L1830.46 1213.08 L1829.87 1213.08 L1829.29 1213.08 L1828.7 1213.08 L1828.11 1213.08 L1827.53 1213.08 L1826.94 1213.08 L1826.35 1213.08 L1825.77 1213.08 L1825.18 1213.08 L1824.6 1213.08 L1824.01 1213.08 L1823.42 1213.08 L1822.84 1213.08 L1822.25 1213.08 L1821.66 1213.08 L1821.08 1213.08 L1820.49 1213.08 L1819.9 1213.08 L1819.32 1213.08 L1818.73 1213.08 L1818.14 1213.08 L1817.56 1213.08 L1816.97 1213.08 L1816.39 1213.08 L1815.8 1213.08 L1815.21 1213.08 L1814.63 1213.08 L1814.04 1213.08 L1813.45 1213.08 L1812.87 1213.08 L1812.28 1213.08 L1811.69 1213.08 L1811.11 1213.08 L1810.52 1213.08 L1809.94 1213.08 L1809.35 1213.08 L1808.76 1213.08 L1808.18 1213.08 L1807.59 1213.08 L1807 1213.08 L1806.42 1213.08 L1805.83 1213.08 L1805.24 1213.08 L1804.66 1213.08 L1804.07 1213.08 L1803.48 1213.08 L1802.9 1213.08 L1802.31 1213.08 L1801.73 1213.08 L1801.14 1213.08 L1800.55 1213.08 L1799.97 1213.08 L1799.38 1213.08 L1798.79 1213.08 L1798.21 1213.08 L1797.62 1213.08 L1797.03 1213.08 L1796.45 1213.08 L1795.86 1213.08 L1795.27 1213.08 L1794.69 1213.08 L1794.1 1213.08 L1793.52 1213.08 L1792.93 1213.08 L1792.34 1213.08 L1791.76 1213.08 L1791.17 1213.08 L1790.58 1213.08 L1790 1213.08 L1789.41 1213.08 L1788.82 1213.08 L1788.24 1213.08 L1787.65 1213.08 L1787.06 1213.08 L1786.48 1213.08 L1785.89 1213.08 L1785.31 1213.08 L1784.72 1213.08 L1784.13 1213.08 L1783.55 1213.08 L1782.96 1213.08 L1782.37 1213.08 L1781.79 1213.08 L1781.2 1213.08 L1780.61 1213.08 L1780.03 1213.08 L1779.44 1213.08 L1778.86 1213.08 L1778.27 1213.08 L1777.68 1213.08 L1777.1 1213.08 L1776.51 1213.08 L1775.92 1213.08 L1775.34 1213.08 L1774.75 1213.08 L1774.16 1213.08 L1773.58 1213.08 L1772.99 1213.08 L1772.4 1213.08 L1771.82 1213.08 L1771.23 1213.08 L1770.65 1213.08 L1770.06 1213.08 L1769.47 1213.08 L1768.89 1213.08 L1768.3 1213.08 L1767.71 1213.08 L1767.13 1213.08 L1766.54 1213.08 L1765.95 1213.08 L1765.37 1213.08 L1764.78 1213.08 L1764.19 1213.08 L1763.61 1213.08 L1763.02 1213.08 L1762.44 1213.08 L1761.85 1213.08 L1761.26 1213.08 L1760.68 1213.08 L1760.09 1213.08 L1759.5 1213.08 L1758.92 1213.08 L1758.33 1213.08 L1757.74 1213.08 L1757.16 1213.08 L1756.57 1213.08 L1755.99 1213.08 L1755.4 1213.08 L1754.81 1213.08 L1754.23 1213.08 L1753.64 1213.08 L1753.05 1213.08 L1752.47 1213.08 L1751.88 1213.08 L1751.29 1213.08 L1750.71 1213.08 L1750.12 1213.08 L1749.53 1213.08 L1748.95 1213.08 L1748.36 1213.08 L1747.78 1213.08 L1747.19 1213.08 L1746.6 1213.08 L1746.02 1213.08 L1745.43 1213.08 L1744.84 1213.08 L1744.26 1213.08 L1743.67 1213.08 L1743.08 1213.08 L1742.5 1213.08 L1741.91 1213.08 L1741.32 1213.08 L1740.74 1213.08 L1740.15 1213.08 L1739.57 1213.08 L1738.98 1213.08 L1738.39 1213.08 L1737.81 1213.08 L1737.22 1213.08 L1736.63 1213.08 L1736.05 1213.08 L1735.46 1213.08 L1734.87 1213.08 L1734.29 1213.08 L1733.7 1213.08 L1733.11 1213.08 L1732.53 1213.08 L1731.94 1213.08 L1731.36 1213.08 L1730.77 1213.08 L1730.18 1213.08 L1729.6 1213.08 L1729.01 1213.08 L1728.42 1213.08 L1727.84 1213.08 L1727.25 1213.08 L1726.66 1213.08 L1726.08 1213.08 L1725.49 1213.08 L1724.91 1213.08 L1724.32 1213.08 L1723.73 1213.08 L1723.15 1213.08 L1722.56 1213.08 L1721.97 1213.08 L1721.39 1213.08 L1720.8 1213.08 L1720.21 1213.08 L1719.63 1213.08 L1719.04 1213.08 L1718.45 1213.08 L1717.87 1213.08 L1717.28 1213.08 L1716.7 1213.08 L1716.11 1213.08 L1715.52 1213.08 L1714.94 1213.08 L1714.35 1213.08 L1713.76 1213.08 L1713.18 1213.08 L1712.59 1213.08 L1712 1213.08 L1711.42 1213.08 L1710.83 1213.08 L1710.24 1213.08 L1709.66 1213.08 L1709.07 1213.08 L1708.49 1213.08 L1707.9 1213.08 L1707.31 1213.08 L1706.73 1213.08 L1706.14 1213.08 L1705.55 1213.08 L1704.97 1213.08 L1704.38 1213.08 L1703.79 1213.08 L1703.21 1213.08 L1702.62 1213.08 L1702.04 1213.08 L1701.45 1213.08 L1700.86 1213.08 L1700.28 1213.08 L1699.69 1213.08 L1699.1 1213.08 L1698.52 1213.08 L1697.93 1213.08 L1697.34 1213.08 L1696.76 1213.08 L1696.17 1213.08 L1695.58 1213.08 L1695 1213.08 L1694.41 1213.08 L1693.83 1213.08 L1693.24 1213.08 L1692.65 1213.08 L1692.07 1213.08 L1691.48 1213.08 L1690.89 1213.08 L1690.31 1213.08 L1689.72 1213.08 L1689.13 1213.08 L1688.55 1213.08 L1687.96 1213.08 L1687.37 1213.08 L1686.79 1213.08 L1686.2 1213.08 L1685.62 1213.08 L1685.03 1213.08 L1684.44 1213.08 L1683.86 1213.08 L1683.27 1213.08 L1682.68 1213.08 L1682.1 1213.08 L1681.51 1213.08 L1680.92 1213.08 L1680.34 1213.08 L1679.75 1213.08 L1679.17 1213.08 L1678.58 1213.08 L1677.99 1213.08 L1677.41 1213.08 L1676.82 1213.08 L1676.23 1213.08 L1675.65 1213.08 L1675.06 1213.08 L1674.47 1213.08 L1673.89 1213.08 L1673.3 1213.08 L1672.71 1213.08 L1672.13 1213.08 L1671.54 1213.08 L1670.96 1213.08 L1670.37 1213.08 L1669.78 1213.08 L1669.2 1213.08 L1668.61 1213.08 L1668.02 1213.08 L1667.44 1213.08 L1666.85 1213.08 L1666.26 1213.08 L1665.68 1213.08 L1665.09 1213.08 L1664.5 1213.08 L1663.92 1213.08 L1663.33 1213.08 L1662.75 1213.08 L1662.16 1213.08 L1661.57 1213.08 L1660.99 1213.08 L1660.4 1213.08 L1659.81 1213.08 L1659.23 1213.08 L1658.64 1213.08 L1658.05 1213.08 L1657.47 1213.08 L1656.88 1213.08 L1656.29 1213.08 L1655.71 1213.08 L1655.12 1213.08 L1654.54 1213.08 L1653.95 1213.08 L1653.36 1213.08 L1652.78 1213.08 L1652.19 1213.08 L1651.6 1213.08 L1651.02 1213.08 L1650.43 1213.08 L1649.84 1213.08 L1649.26 1213.08 L1648.67 1213.08 L1648.09 1213.08 L1647.5 1213.08 L1646.91 1213.08 L1646.33 1213.08 L1645.74 1213.08 L1645.15 1213.08 L1644.57 1213.08 L1643.98 1213.08 L1643.39 1213.08 L1642.81 1213.08 L1642.22 1213.08 L1641.63 1213.08 L1641.05 1213.08 L1640.46 1213.08 L1639.88 1213.08 L1639.29 1213.08 L1638.7 1213.08 L1638.12 1213.08 L1637.53 1213.08 L1636.94 1213.08 L1636.36 1213.08 L1635.77 1213.08 L1635.18 1213.08 L1634.6 1213.08 L1634.01 1213.08 L1633.42 1213.08 L1632.84 1213.08 L1632.25 1213.08 L1631.67 1213.08 L1631.08 1213.08 L1630.49 1213.08 L1629.91 1213.08 L1629.32 1213.08 L1628.73 1213.08 L1628.15 1213.08 L1627.56 1213.08 L1626.97 1213.08 L1626.39 1213.08 L1625.8 1213.08 L1625.22 1213.08 L1624.63 1213.08 L1624.04 1213.08 L1623.46 1213.08 L1622.87 1213.08 L1622.28 1213.08 L1621.7 1213.08 L1621.11 1213.08 L1620.52 1213.08 L1619.94 1213.08 L1619.35 1213.08 L1618.76 1213.08 L1618.18 1213.08 L1617.59 1213.08 L1617.01 1213.08 L1616.42 1213.08 L1615.83 1213.08 L1615.25 1213.08 L1614.66 1213.08 L1614.07 1213.08 L1613.49 1213.08 L1612.9 1213.08 L1612.31 1213.08 L1611.73 1213.08 L1611.14 1213.08 L1610.55 1213.08 L1609.97 1213.08 L1609.38 1213.08 L1608.8 1213.08 L1608.21 1213.08 L1607.62 1213.08 L1607.04 1213.08 L1606.45 1213.08 L1605.86 1213.08 L1605.28 1213.08 L1604.69 1213.08 L1604.1 1213.08 L1603.52 1213.08 L1602.93 1213.08 L1602.34 1213.08 L1601.76 1213.08 L1601.17 1213.08 L1600.59 1213.08 L1600 1213.08 L1599.41 1213.08 L1598.83 1213.08 L1598.24 1213.08 L1597.65 1213.08 L1597.07 1213.08 L1596.48 1213.08 L1595.89 1213.08 L1595.31 1213.08 L1594.72 1213.08 L1594.14 1213.08 L1593.55 1213.08 L1592.96 1213.08 L1592.38 1213.08 L1591.79 1213.08 L1591.2 1213.08 L1590.62 1213.08 L1590.03 1213.08 L1589.44 1213.08 L1588.86 1213.08 L1588.27 1213.08 L1587.68 1213.08 L1587.1 1213.08 L1586.51 1213.08 L1585.93 1213.08 L1585.34 1213.08 L1584.75 1213.08 L1584.17 1213.08 L1583.58 1213.08 L1582.99 1213.08 L1582.41 1213.08 L1581.82 1213.08 L1581.23 1213.08 L1580.65 1213.08 L1580.06 1213.08 L1579.47 1213.08 L1578.89 1213.08 L1578.3 1213.08 L1577.72 1213.08 L1577.13 1213.08 L1576.54 1213.08 L1575.96 1213.08 L1575.37 1213.08 L1574.78 1213.08 L1574.2 1213.08 L1573.61 1213.08 L1573.02 1213.08 L1572.44 1213.08 L1571.85 1213.08 L1571.27 1213.08 L1570.68 1213.08 L1570.09 1213.08 L1569.51 1213.08 L1568.92 1213.08 L1568.33 1213.08 L1567.75 1213.08 L1567.16 1213.08 L1566.57 1213.08 L1565.99 1213.08 L1565.4 1213.08 L1564.81 1213.08 L1564.23 1213.08 L1563.64 1213.08 L1563.06 1213.08 L1562.47 1213.08 L1561.88 1213.08 L1561.3 1213.08 L1560.71 1213.08 L1560.12 1213.08 L1559.54 1213.08 L1558.95 1213.08 L1558.36 1213.08 L1557.78 1213.08 L1557.19 1213.08 L1556.6 1213.08 L1556.02 1213.08 L1555.43 1213.08 L1554.85 1213.08 L1554.26 1213.08 L1553.67 1213.08 L1553.09 1213.08 L1552.5 1213.08 L1551.91 1213.08 L1551.33 1213.08 L1550.74 1213.08 L1550.15 1213.08 L1549.57 1213.08 L1548.98 1213.08 L1548.4 1213.08 L1547.81 1213.08 L1547.22 1213.08 L1546.64 1213.08 L1546.05 1213.08 L1545.46 1213.08 L1544.88 1213.08 L1544.29 1213.08 L1543.7 1213.08 L1543.12 1213.08 L1542.53 1213.08 L1541.94 1213.08 L1541.36 1213.08 L1540.77 1213.08 L1540.19 1213.08 L1539.6 1213.08 L1539.01 1213.08 L1538.43 1213.08 L1537.84 1213.08 L1537.25 1213.08 L1536.67 1213.08 L1536.08 1213.08 L1535.49 1213.08 L1534.91 1213.08 L1534.32 1213.08 L1533.73 1213.08 L1533.15 1213.08 L1532.56 1213.08 L1531.98 1213.08 L1531.39 1213.08 L1530.8 1213.08 L1530.22 1213.08 L1529.63 1213.08 L1529.04 1213.08 L1528.46 1213.08 L1527.87 1213.08 L1527.28 1213.08 L1526.7 1213.08 L1526.11 1213.08 L1525.52 1213.08 L1524.94 1213.08 L1524.35 1213.08 L1523.77 1213.08 L1523.18 1213.08 L1522.59 1213.08 L1522.01 1213.08 L1521.42 1213.08 L1520.83 1213.08 L1520.25 1213.08 L1519.66 1213.08 L1519.07 1213.08 L1518.49 1213.08 L1517.9 1213.08 L1517.32 1213.08 L1516.73 1213.08 L1516.14 1213.08 L1515.56 1213.08 L1514.97 1213.08 L1514.38 1213.08 L1513.8 1213.08 L1513.21 1213.08 L1512.62 1213.08 L1512.04 1213.08 L1511.45 1213.08 L1510.86 1213.08 L1510.28 1213.08 L1509.69 1213.08 L1509.11 1213.08 L1508.52 1213.08 L1507.93 1213.08 L1507.35 1213.08 L1506.76 1213.08 L1506.17 1213.08 L1505.59 1213.08 L1505 1213.08 L1504.41 1213.08 L1503.83 1213.08 L1503.24 1213.08 L1502.65 1213.08 L1502.07 1213.08 L1501.48 1213.08 L1500.9 1213.08 L1500.31 1213.08 L1499.72 1213.08 L1499.14 1213.08 L1498.55 1213.08 L1497.96 1213.08 L1497.38 1213.08 L1496.79 1213.08 L1496.2 1213.08 L1495.62 1213.08 L1495.03 1213.08 L1494.45 1213.08 L1493.86 1213.08 L1493.27 1213.08 L1492.69 1213.08 L1492.1 1213.08 L1491.51 1213.08 L1490.93 1213.08 L1490.34 1213.08 L1489.75 1213.08 L1489.17 1213.08 L1488.58 1213.08 L1487.99 1213.08 L1487.41 1213.08 L1486.82 1213.08 L1486.24 1213.08 L1485.65 1213.08 L1485.06 1213.08 L1484.48 1213.08 L1483.89 1213.08 L1483.3 1213.08 L1482.72 1213.08 L1482.13 1213.08 L1481.54 1213.08 L1480.96 1213.08 L1480.37 1213.08 L1479.78 1213.08 L1479.2 1213.08 L1478.61 1213.08 L1478.03 1213.08 L1477.44 1213.08 L1476.85 1213.08 L1476.27 1213.08 L1475.68 1213.08 L1475.09 1213.08 L1474.51 1213.08 L1473.92 1213.08 L1473.33 1213.08 L1472.75 1213.08 L1472.16 1213.08 L1471.57 1213.08 L1470.99 1213.08 L1470.4 1213.08 L1469.82 1213.08 L1469.23 1213.08 L1468.64 1213.08 L1468.06 1213.08 L1467.47 1213.08 L1466.88 1213.08 L1466.3 1213.08 L1465.71 1213.08 L1465.12 1213.08 L1464.54 1213.08 L1463.95 1213.08 L1463.37 1213.08 L1462.78 1213.08 L1462.19 1213.08 L1461.61 1213.08 L1461.02 1213.08 L1460.43 1213.08 L1459.85 1213.08 L1459.26 1213.08 L1458.67 1213.08 L1458.09 1213.08 L1457.5 1213.08 L1456.91 1213.08 L1456.33 1213.08 L1455.74 1213.08 L1455.16 1213.08 L1454.57 1213.08 L1453.98 1213.08 L1453.4 1213.08 L1452.81 1213.08 L1452.22 1213.08 L1451.64 1213.08 L1451.05 1213.08 L1450.46 1213.08 L1449.88 1213.08 L1449.29 1213.08 L1448.7 1213.08 L1448.12 1213.08 L1447.53 1213.08 L1446.95 1213.08 L1446.36 1213.08 L1445.77 1213.08 L1445.19 1213.08 L1444.6 1213.08 L1444.01 1213.08 L1443.43 1213.08 L1442.84 1213.08 L1442.25 1213.08 L1441.67 1213.08 L1441.08 1213.08 L1440.5 1213.08 L1439.91 1213.08 L1439.32 1213.08 L1438.74 1213.08 L1438.15 1213.08 L1437.56 1213.08 L1436.98 1213.08 L1436.39 1213.08 L1435.8 1213.08 L1435.22 1213.08 L1434.63 1213.08 L1434.04 1213.08 L1433.46 1213.08 L1432.87 1213.08 L1432.29 1213.08 L1431.7 1213.08 L1431.11 1213.08 L1430.53 1213.08 L1429.94 1213.08 L1429.35 1213.08 L1428.77 1213.08 L1428.18 1213.08 L1427.59 1213.08 L1427.01 1213.08 L1426.42 1213.08 L1425.83 1213.08 L1425.25 1213.08 L1424.66 1213.08 L1424.08 1213.08 L1423.49 1213.08 L1422.9 1213.08 L1422.32 1213.08 L1421.73 1213.08 L1421.14 1213.08 L1420.56 1213.08 L1419.97 1213.08 L1419.38 1213.08 L1418.8 1213.08 L1418.21 1213.08 L1417.63 1213.08 L1417.04 1213.08 L1416.45 1213.08 L1415.87 1213.08 L1415.28 1213.08 L1414.69 1213.08 L1414.11 1213.08 L1413.52 1213.08 L1412.93 1213.08 L1412.35 1213.08 L1411.76 1213.08 L1411.17 1213.08 L1410.59 1213.08 L1410 1213.08 L1409.42 1213.08 L1408.83 1213.08 L1408.24 1213.08 L1407.66 1213.08 L1407.07 1213.08 L1406.48 1213.08 L1405.9 1213.08 L1405.31 1213.08 L1404.72 1213.08 L1404.14 1213.08 L1403.55 1213.08 L1402.96 1213.08 L1402.38 1213.08 L1401.79 1213.08 L1401.21 1213.08 L1400.62 1213.08 L1400.03 1213.08 L1399.45 1213.08 L1398.86 1213.08 L1398.27 1213.08 L1397.69 1213.08 L1397.1 1213.08 L1396.51 1213.08 L1395.93 1213.08 L1395.34 1213.08 L1394.75 1213.08 L1394.17 1213.08 L1393.58 1213.08 L1393 1213.08 L1392.41 1213.08 L1391.82 1213.08 L1391.24 1213.08 L1390.65 1213.08 L1390.06 1213.08 L1389.48 1213.08 L1388.89 1213.08 L1388.3 1213.08 L1387.72 1213.08 L1387.13 1213.08 L1386.55 1213.08 L1385.96 1213.08 L1385.37 1213.08 L1384.79 1213.08 L1384.2 1213.08 L1383.61 1213.08 L1383.03 1213.08 L1382.44 1213.08 L1381.85 1213.08 L1381.27 1213.08 L1380.68 1213.08 L1380.09 1213.08 L1379.51 1213.08 L1378.92 1213.08 L1378.34 1213.08 L1377.75 1213.08 L1377.16 1213.08 L1376.58 1213.08 L1375.99 1213.08 L1375.4 1213.08 L1374.82 1213.08 L1374.23 1213.08 L1373.64 1213.08 L1373.06 1213.08 L1372.47 1213.08 L1371.88 1213.08 L1371.3 1213.08 L1370.71 1213.08 L1370.13 1213.08 L1369.54 1213.08 L1368.95 1213.08 L1368.37 1213.08 L1367.78 1213.08 L1367.19 1213.08 L1366.61 1213.08 L1366.02 1213.08 L1365.43 1213.08 L1364.85 1213.08 L1364.26 1213.08 L1363.68 1213.08 L1363.09 1213.08 L1362.5 1213.08 L1361.92 1213.08 L1361.33 1213.08 L1360.74 1213.08 L1360.16 1213.08 L1359.57 1213.08 L1358.98 1213.08 L1358.4 1213.08 L1357.81 1213.08 L1357.22 1213.08 L1356.64 1213.08 L1356.05 1213.08 L1355.47 1213.08 L1354.88 1213.08 L1354.29 1213.08 L1353.71 1213.08 L1353.12 1213.08 L1352.53 1213.08 L1351.95 1213.08 L1351.36 1213.08 L1350.77 1213.08 L1350.19 1213.08 L1349.6 1213.08 L1349.01 1213.08 L1348.43 1213.08 L1347.84 1213.08 L1347.26 1213.08 L1346.67 1213.08 L1346.08 1213.08 L1345.5 1213.08 L1344.91 1213.08 L1344.32 1213.08 L1343.74 1213.08 L1343.15 1213.08 L1342.56 1213.08 L1341.98 1213.08 L1341.39 1213.08 L1340.8 1213.08 L1340.22 1213.08 L1339.63 1213.08 L1339.05 1213.08 L1338.46 1213.08 L1337.87 1213.08 L1337.29 1213.08 L1336.7 1213.08 L1336.11 1213.08 L1335.53 1213.08 L1334.94 1213.08 L1334.35 1213.08 L1333.77 1213.08 L1333.18 1213.08 L1332.6 1213.08 L1332.01 1213.08 L1331.42 1213.08 L1330.84 1213.08 L1330.25 1213.08 L1329.66 1213.08 L1329.08 1213.08 L1328.49 1213.08 L1327.9 1213.08 L1327.32 1213.08 L1326.73 1213.08 L1326.14 1213.08 L1325.56 1213.08 L1324.97 1213.08 L1324.39 1213.08 L1323.8 1213.08 L1323.21 1213.08 L1322.63 1213.08 L1322.04 1213.08 L1321.45 1213.08 L1320.87 1213.08 L1320.28 1213.08 L1319.69 1213.08 L1319.11 1213.08 L1318.52 1213.08 L1317.93 1213.08 L1317.35 1213.08 L1316.76 1213.08 L1316.18 1213.08 L1315.59 1213.08 L1315 1213.08 L1314.42 1213.08 L1313.83 1213.08 L1313.24 1213.08 L1312.66 1213.08 L1312.07 1213.08 L1311.48 1213.08 L1310.9 1213.08 L1310.31 1213.08 L1309.73 1213.08 L1309.14 1213.08 L1308.55 1213.08 L1307.97 1213.08 L1307.38 1213.08 L1306.79 1213.08 L1306.21 1213.08 L1305.62 1213.08 L1305.03 1213.08 L1304.45 1213.08 L1303.86 1213.08 L1303.27 1213.08 L1302.69 1213.08 L1302.1 1213.08 L1301.52 1213.08 L1300.93 1213.08 L1300.34 1213.08 L1299.76 1213.08 L1299.17 1213.08 L1298.58 1213.08 L1298 1213.08 L1297.41 1213.08 L1296.82 1213.08 L1296.24 1213.08 L1295.65 1213.08 L1295.06 1213.08 L1294.48 1213.08 L1293.89 1213.08 L1293.31 1213.08 L1292.72 1213.08 L1292.13 1213.08 L1291.55 1213.08 L1290.96 1213.08 L1290.37 1213.08 L1289.79 1213.08 L1289.2 1213.08 L1288.61 1213.08 L1288.03 1213.08 L1287.44 1213.08 L1286.86 1213.08 L1286.27 1213.08 L1285.68 1213.08 L1285.1 1213.08 L1284.51 1213.08 L1283.92 1213.08 L1283.34 1213.08 L1282.75 1213.08 L1282.16 1213.08 L1281.58 1213.08 L1280.99 1213.08 L1280.4 1213.08 L1279.82 1213.08 L1279.23 1213.08 L1278.65 1213.08 L1278.06 1213.08 L1277.47 1213.08 L1276.89 1213.08 L1276.3 1213.08 L1275.71 1213.08 L1275.13 1213.08 L1274.54 1213.08 L1273.95 1213.08 L1273.37 1213.08 L1272.78 1213.08 L1272.19 1213.08 L1271.61 1213.08 L1271.02 1213.08 L1270.44 1213.08 L1269.85 1213.08 L1269.26 1213.08 L1268.68 1213.08 L1268.09 1213.08 L1267.5 1213.08 L1266.92 1213.08 L1266.33 1213.08 L1265.74 1213.08 L1265.16 1213.08 L1264.57 1213.08 L1263.98 1213.08 L1263.4 1213.08 L1262.81 1213.08 L1262.23 1213.08 L1261.64 1213.08 L1261.05 1213.08 L1260.47 1213.08 L1259.88 1213.08 L1259.29 1213.08 L1258.71 1213.08 L1258.12 1213.08 L1257.53 1213.08 L1256.95 1213.08 L1256.36 1213.08 L1255.78 1213.08 L1255.19 1213.08 L1254.6 1213.08 L1254.02 1213.08 L1253.43 1213.08 L1252.84 1213.08 L1252.26 1213.08 L1251.67 1213.08 L1251.08 1213.08 L1250.5 1213.08 L1249.91 1213.08 L1249.32 1213.08 L1248.74 1213.08 L1248.15 1213.08 L1247.57 1213.08 L1246.98 1213.08 L1246.39 1213.08 L1245.81 1213.08 L1245.22 1213.08 L1244.63 1213.08 L1244.05 1213.08 L1243.46 1213.08 L1242.87 1213.08 L1242.29 1213.08 L1241.7 1213.08 L1241.11 1213.08 L1240.53 1213.08 L1239.94 1213.08 L1239.36 1213.08 L1238.77 1213.08 L1238.18 1213.08 L1237.6 1213.08 L1237.01 1213.08 L1236.42 1213.08 L1235.84 1213.08 L1235.25 1213.08 L1234.66 1213.08 L1234.08 1213.08 L1233.49 1213.08 L1232.91 1213.08 L1232.32 1213.08 L1231.73 1213.08 L1231.15 1213.08 L1230.56 1213.08 L1229.97 1213.08 L1229.39 1213.08 L1228.8 1213.08 L1228.21 1213.08 L1227.63 1213.08 L1227.04 1213.08 L1226.45 1213.08 L1225.87 1213.08 L1225.28 1213.08 L1224.7 1213.08 L1224.11 1213.08 L1223.52 1213.08 L1222.94 1213.08 L1222.35 1213.08 L1221.76 1213.08 L1221.18 1213.08 L1220.59 1213.08 L1220 1213.08 L1219.42 1213.08 L1218.83 1213.08 L1218.24 1213.08 L1217.66 1213.08 L1217.07 1213.08 L1216.49 1213.08 L1215.9 1213.08 L1215.31 1213.08 L1214.73 1213.08 L1214.14 1213.08 L1213.55 1213.08 L1212.97 1213.08 L1212.38 1213.08 L1211.79 1213.08 L1211.21 1213.08 L1210.62 1213.08 L1210.03 1213.08 L1209.45 1213.08 L1208.86 1213.08 L1208.28 1213.08 L1207.69 1213.08 L1207.1 1213.08 L1206.52 1213.08 L1205.93 1213.08 L1205.34 1213.08 L1204.76 1213.08 L1204.17 1213.08 L1203.58 1213.08 L1203 1213.08 L1202.41 1213.08 L1201.83 1213.08 L1201.24 1213.08 L1200.65 1213.08 L1200.07 1213.08 L1199.48 1213.08 L1198.89 1213.08 L1198.31 1213.08 L1197.72 1213.08 L1197.13 1213.08 L1196.55 1213.08 L1195.96 1213.08 L1195.37 1213.08 L1194.79 1213.08 L1194.2 1213.08 L1193.62 1213.08 L1193.03 1213.08 L1192.44 1213.08 L1191.86 1213.08 L1191.27 1213.08 L1190.68 1213.08 L1190.1 1213.08 L1189.51 1213.08 L1188.92 1213.08 L1188.34 1213.08 L1187.75 1213.08 L1187.16 1213.08 L1186.58 1213.08 L1185.99 1213.08 L1185.41 1213.08 L1184.82 1213.08 L1184.23 1213.08 L1183.65 1213.08 L1183.06 1213.08 L1182.47 1213.08 L1181.89 1213.08 L1181.3 1213.08 L1180.71 1213.08 L1180.13 1213.08 L1179.54 1213.08 L1178.96 1213.08 L1178.37 1213.08 L1177.78 1213.08 L1177.2 1213.08 L1176.61 1213.08 L1176.02 1213.08 L1175.44 1213.08 L1174.85 1213.08 L1174.26 1213.08 L1173.68 1213.08 L1173.09 1213.08 L1172.5 1213.08 L1171.92 1213.08 L1171.33 1213.08 L1170.75 1213.08 L1170.16 1213.08 L1169.57 1213.08 L1168.99 1213.08 L1168.4 1213.08 L1167.81 1213.08 L1167.23 1213.08 L1166.64 1213.08 L1166.05 1213.08 L1165.47 1213.08 L1164.88 1213.08 L1164.29 1213.08 L1163.71 1213.08 L1163.12 1213.08 L1162.54 1213.08 L1161.95 1213.08 L1161.36 1213.08 L1160.78 1213.08 L1160.19 1213.08 L1159.6 1213.08 L1159.02 1213.08 L1158.43 1213.08 L1157.84 1213.08 L1157.26 1213.08 L1156.67 1213.08 L1156.09 1213.08 L1155.5 1213.08 L1154.91 1213.08 L1154.33 1213.08 L1153.74 1213.08 L1153.15 1213.08 L1152.57 1213.08 L1151.98 1213.08 L1151.39 1213.08 L1150.81 1213.08 L1150.22 1213.08 L1149.63 1213.08 L1149.05 1213.08 L1148.46 1213.08 L1147.88 1213.08 L1147.29 1213.08 L1146.7 1213.08 L1146.12 1213.08 L1145.53 1213.08 L1144.94 1213.08 L1144.36 1213.08 L1143.77 1213.08 L1143.18 1213.08 L1142.6 1213.08 L1142.01 1213.08 L1141.42 1213.08 L1140.84 1213.08 L1140.25 1213.08 L1139.67 1213.08 L1139.08 1213.08 L1138.49 1213.08 L1137.91 1213.08 L1137.32 1213.08 L1136.73 1213.08 L1136.15 1213.08 L1135.56 1213.08 L1134.97 1213.08 L1134.39 1213.08 L1133.8 1213.08 L1133.21 1213.08 L1132.63 1213.08 L1132.04 1213.08 L1131.46 1213.08 L1130.87 1213.08 L1130.28 1213.08 L1129.7 1213.08 L1129.11 1213.08 L1128.52 1213.08 L1127.94 1213.08 L1127.35 1213.08 L1126.76 1213.08 L1126.18 1213.08 L1125.59 1213.08 L1125.01 1213.08 L1124.42 1213.08 L1123.83 1213.08 L1123.25 1213.08 L1122.66 1213.08 L1122.07 1213.08 L1121.49 1213.08 L1120.9 1213.08 L1120.31 1213.08 L1119.73 1213.08 L1119.14 1213.08 L1118.55 1213.08 L1117.97 1213.08 L1117.38 1213.08 L1116.8 1213.08 L1116.21 1213.08 L1115.62 1213.08 L1115.04 1213.08 L1114.45 1213.08 L1113.86 1213.08 L1113.28 1213.08 L1112.69 1213.08 L1112.1 1213.08 L1111.52 1213.08 L1110.93 1213.08 L1110.34 1213.08 L1109.76 1213.08 L1109.17 1213.08 L1108.59 1213.08 L1108 1213.08 L1107.41 1213.08 L1106.83 1213.08 L1106.24 1213.08 L1105.65 1213.08 L1105.07 1213.08 L1104.48 1213.08 L1103.89 1213.08 L1103.31 1213.08 L1102.72 1213.08 L1102.14 1213.08 L1101.55 1213.08 L1100.96 1213.08 L1100.38 1213.08 L1099.79 1213.08 L1099.2 1213.08 L1098.62 1213.08 L1098.03 1213.08 L1097.44 1213.08 L1096.86 1213.08 L1096.27 1213.08 L1095.68 1213.08 L1095.1 1213.08 L1094.51 1213.08 L1093.93 1213.08 L1093.34 1213.08 L1092.75 1213.08 L1092.17 1213.08 L1091.58 1213.08 L1090.99 1213.08 L1090.41 1213.08 L1089.82 1213.08 L1089.23 1213.08 L1088.65 1213.08 L1088.06 1213.08 L1087.47 1213.08 L1086.89 1213.08 L1086.3 1213.08 L1085.72 1213.08 L1085.13 1213.08 L1084.54 1213.08 L1083.96 1213.08 L1083.37 1213.08 L1082.78 1213.08 L1082.2 1213.08 L1081.61 1213.08 L1081.02 1213.08 L1080.44 1213.08 L1079.85 1213.08 L1079.26 1213.08 L1078.68 1213.08 L1078.09 1213.08 L1077.51 1213.08 L1076.92 1213.08 L1076.33 1213.08 L1075.75 1213.08 L1075.16 1213.08 L1074.57 1213.08 L1073.99 1213.08 L1073.4 1213.08 L1072.81 1213.08 L1072.23 1213.08 L1071.64 1213.08 L1071.06 1213.08 L1070.47 1213.08 L1069.88 1213.08 L1069.3 1213.08 L1068.71 1213.08 L1068.12 1213.08 L1067.54 1213.08 L1066.95 1213.08 L1066.36 1213.08 L1065.78 1213.08 L1065.19 1213.08 L1064.6 1213.08 L1064.02 1213.08 L1063.43 1213.08 L1062.85 1213.08 L1062.26 1213.08 L1061.67 1213.08 L1061.09 1213.08 L1060.5 1213.08 L1059.91 1213.08 L1059.33 1213.08 L1058.74 1213.08 L1058.15 1213.08 L1057.57 1213.08 L1056.98 1213.08 L1056.39 1213.08 L1055.81 1213.08 L1055.22 1213.08 L1054.64 1213.08 L1054.05 1213.08 L1053.46 1213.08 L1052.88 1213.08 L1052.29 1213.08 L1051.7 1213.08 L1051.12 1213.08 L1050.53 1213.08 L1049.94 1213.08 L1049.36 1213.08 L1048.77 1213.08 L1048.19 1213.08 L1047.6 1213.08 L1047.01 1213.08 L1046.43 1213.08 L1045.84 1213.08 L1045.25 1213.08 L1044.67 1213.08 L1044.08 1213.08 L1043.49 1213.08 L1042.91 1213.08 L1042.32 1213.08 L1041.73 1213.08 L1041.15 1213.08 L1040.56 1213.08 L1039.98 1213.08 L1039.39 1213.08 L1038.8 1213.08 L1038.22 1213.08 L1037.63 1213.08 L1037.04 1213.08 L1036.46 1213.08 L1035.87 1213.08 L1035.28 1213.08 L1034.7 1213.08 L1034.11 1213.08 L1033.52 1213.08 L1032.94 1213.08 L1032.35 1213.08 L1031.77 1213.08 L1031.18 1213.08 L1030.59 1213.08 L1030.01 1213.08 L1029.42 1213.08 L1028.83 1213.08 L1028.25 1213.08 L1027.66 1213.08 L1027.07 1213.08 L1026.49 1213.08 L1025.9 1213.08 L1025.32 1213.08 L1024.73 1213.08 L1024.14 1213.08 L1023.56 1213.08 L1022.97 1213.08 L1022.38 1213.08 L1021.8 1213.08 L1021.21 1213.08 L1020.62 1213.08 L1020.04 1213.08 L1019.45 1213.08 L1018.86 1213.08 L1018.28 1213.08 L1017.69 1213.08 L1017.11 1213.08 L1016.52 1213.08 L1015.93 1213.08 L1015.35 1213.08 L1014.76 1213.08 L1014.17 1213.08 L1013.59 1213.08 L1013 1213.08 L1012.41 1213.08 L1011.83 1213.08 L1011.24 1213.08 L1010.65 1213.08 L1010.07 1213.08 L1009.48 1213.08 L1008.9 1213.08 L1008.31 1213.08 L1007.72 1213.08 L1007.14 1213.08 L1006.55 1213.08 L1005.96 1213.08 L1005.38 1213.08 L1004.79 1213.08 L1004.2 1213.08 L1003.62 1213.08 L1003.03 1213.08 L1002.44 1213.08 L1001.86 1213.08 L1001.27 1213.08 L1000.69 1213.08 L1000.1 1213.08 L999.513 1213.08 L998.926 1213.08 L998.34 1213.08 L997.754 1213.08 L997.167 1213.08 L996.581 1213.08 L995.994 1213.08 L995.408 1213.08 L994.822 1213.08 L994.235 1213.08 L993.649 1213.08 L993.062 1213.08 L992.476 1213.08 L991.889 1213.08 L991.303 1213.08 L990.717 1213.08 L990.13 1213.08 L989.544 1213.08 L988.957 1213.08 L988.371 1213.08 L987.785 1213.08 L987.198 1213.08 L986.612 1213.08 L986.025 1213.08  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.43 986.612,1213.43 987.198,1213.43 987.785,1213.43 988.371,1213.43 988.957,1213.43 989.544,1213.43 990.13,1213.43 990.717,1213.43 991.303,1213.43 991.889,1213.43 992.476,1213.43 993.062,1213.43 993.649,1213.43 994.235,1213.43 994.822,1213.43 995.408,1213.43 995.994,1213.43 996.581,1213.43 997.167,1213.43 997.754,1213.43 998.34,1213.43 998.926,1213.43 999.513,1213.43 1000.1,1213.43 1000.69,1213.43 1001.27,1213.43 1001.86,1213.43 1002.44,1213.43 1003.03,1213.43 1003.62,1213.43 1004.2,1213.43 1004.79,1213.43 1005.38,1213.43 1005.96,1213.43 1006.55,1213.43 1007.14,1213.43 1007.72,1213.43 1008.31,1213.43 1008.9,1213.43 1009.48,1213.43 1010.07,1213.43 1010.65,1213.43 1011.24,1213.43 1011.83,1213.43 1012.41,1213.43 1013,1213.43 1013.59,1213.43 1014.17,1213.43 1014.76,1213.43 1015.35,1213.43 1015.93,1213.43 1016.52,1213.43 1017.11,1213.43 1017.69,1213.43 1018.28,1213.43 1018.86,1213.43 1019.45,1213.43 1020.04,1213.43 1020.62,1213.43 1021.21,1213.43 1021.8,1213.43 1022.38,1213.43 1022.97,1213.43 1023.56,1213.43 1024.14,1213.43 1024.73,1213.43 1025.32,1213.43 1025.9,1213.43 1026.49,1213.43 1027.07,1213.43 1027.66,1213.43 1028.25,1213.43 1028.83,1213.43 1029.42,1213.43 1030.01,1213.43 1030.59,1213.43 1031.18,1213.43 1031.77,1213.43 1032.35,1213.43 1032.94,1213.43 1033.52,1213.43 1034.11,1213.43 1034.7,1213.43 1035.28,1213.43 1035.87,1213.43 1036.46,1213.43 1037.04,1213.43 1037.63,1213.43 1038.22,1213.43 1038.8,1213.43 1039.39,1213.43 1039.98,1213.43 1040.56,1213.43 1041.15,1213.43 1041.73,1213.43 1042.32,1213.43 1042.91,1213.43 1043.49,1213.43 1044.08,1213.43 1044.67,1213.43 1045.25,1213.43 1045.84,1213.43 1046.43,1213.43 1047.01,1213.43 1047.6,1213.43 1048.19,1213.43 1048.77,1213.43 1049.36,1213.43 1049.94,1213.43 1050.53,1213.43 1051.12,1213.43 1051.7,1213.43 1052.29,1213.43 1052.88,1213.43 1053.46,1213.43 1054.05,1213.43 1054.64,1213.43 1055.22,1213.43 1055.81,1213.43 1056.39,1213.43 1056.98,1213.43 1057.57,1213.43 1058.15,1213.43 1058.74,1213.43 1059.33,1213.43 1059.91,1213.43 1060.5,1213.43 1061.09,1213.43 1061.67,1213.43 1062.26,1213.43 1062.85,1213.43 1063.43,1213.43 1064.02,1213.43 1064.6,1213.43 1065.19,1213.43 1065.78,1213.43 1066.36,1213.43 1066.95,1213.43 1067.54,1213.43 1068.12,1213.43 1068.71,1213.43 1069.3,1213.43 1069.88,1213.43 1070.47,1213.43 1071.06,1213.43 1071.64,1213.43 1072.23,1213.43 1072.81,1213.43 1073.4,1213.43 1073.99,1213.43 1074.57,1213.43 1075.16,1213.43 1075.75,1213.43 1076.33,1213.43 1076.92,1213.43 1077.51,1213.43 1078.09,1213.43 1078.68,1213.43 1079.26,1213.43 1079.85,1213.43 1080.44,1213.43 1081.02,1213.43 1081.61,1213.43 1082.2,1213.43 1082.78,1213.43 1083.37,1213.43 1083.96,1213.43 1084.54,1213.43 1085.13,1213.43 1085.72,1213.43 1086.3,1213.43 1086.89,1213.43 1087.47,1213.43 1088.06,1213.43 1088.65,1213.43 1089.23,1213.43 1089.82,1213.43 1090.41,1213.43 1090.99,1213.43 1091.58,1213.43 1092.17,1213.43 1092.75,1213.43 1093.34,1213.43 1093.93,1213.43 1094.51,1213.43 1095.1,1213.43 1095.68,1213.43 1096.27,1213.43 1096.86,1213.43 1097.44,1213.43 1098.03,1213.43 1098.62,1213.43 1099.2,1213.43 1099.79,1213.43 1100.38,1213.43 1100.96,1213.43 1101.55,1213.43 1102.14,1213.43 1102.72,1213.43 1103.31,1213.43 1103.89,1213.43 1104.48,1213.43 1105.07,1213.43 1105.65,1213.43 1106.24,1213.43 1106.83,1213.43 1107.41,1213.43 1108,1213.43 1108.59,1213.43 1109.17,1213.43 1109.76,1213.43 1110.34,1213.43 1110.93,1213.43 1111.52,1213.43 1112.1,1213.43 1112.69,1213.43 1113.28,1213.43 1113.86,1213.43 1114.45,1213.43 1115.04,1213.43 1115.62,1213.43 1116.21,1213.43 1116.8,1213.43 1117.38,1213.43 1117.97,1213.43 1118.55,1213.43 1119.14,1213.43 1119.73,1213.43 1120.31,1213.43 1120.9,1213.43 1121.49,1213.43 1122.07,1213.43 1122.66,1213.43 1123.25,1213.43 1123.83,1213.43 1124.42,1213.43 1125.01,1213.43 1125.59,1213.43 1126.18,1213.43 1126.76,1213.43 1127.35,1213.43 1127.94,1213.43 1128.52,1213.43 1129.11,1213.43 1129.7,1213.43 1130.28,1213.43 1130.87,1213.43 1131.46,1213.43 1132.04,1213.43 1132.63,1213.43 1133.21,1213.43 1133.8,1213.43 1134.39,1213.43 1134.97,1213.43 1135.56,1213.43 1136.15,1213.43 1136.73,1213.43 1137.32,1213.43 1137.91,1213.43 1138.49,1213.43 1139.08,1213.43 1139.67,1213.43 1140.25,1213.43 1140.84,1213.43 1141.42,1213.43 1142.01,1213.43 1142.6,1213.43 1143.18,1213.43 1143.77,1213.43 1144.36,1213.43 1144.94,1213.43 1145.53,1213.43 1146.12,1213.43 1146.7,1213.43 1147.29,1213.43 1147.88,1213.43 1148.46,1213.43 1149.05,1213.43 1149.63,1213.43 1150.22,1213.43 1150.81,1213.43 1151.39,1213.43 1151.98,1213.43 1152.57,1213.43 1153.15,1213.43 1153.74,1213.43 1154.33,1213.43 1154.91,1213.43 1155.5,1213.43 1156.09,1213.43 1156.67,1213.43 1157.26,1213.43 1157.84,1213.43 1158.43,1213.43 1159.02,1213.43 1159.6,1213.43 1160.19,1213.43 1160.78,1213.43 1161.36,1213.43 1161.95,1213.43 1162.54,1213.43 1163.12,1213.43 1163.71,1213.43 1164.29,1213.43 1164.88,1213.43 1165.47,1213.43 1166.05,1213.43 1166.64,1213.43 1167.23,1213.43 1167.81,1213.43 1168.4,1213.43 1168.99,1213.43 1169.57,1213.43 1170.16,1213.43 1170.75,1213.43 1171.33,1213.43 1171.92,1213.43 1172.5,1213.43 1173.09,1213.43 1173.68,1213.43 1174.26,1213.43 1174.85,1213.43 1175.44,1213.43 1176.02,1213.43 1176.61,1213.43 1177.2,1213.43 1177.78,1213.43 1178.37,1213.43 1178.96,1213.43 1179.54,1213.43 1180.13,1213.43 1180.71,1213.43 1181.3,1213.43 1181.89,1213.43 1182.47,1213.43 1183.06,1213.43 1183.65,1213.43 1184.23,1213.43 1184.82,1213.43 1185.41,1213.43 1185.99,1213.43 1186.58,1213.43 1187.16,1213.43 1187.75,1213.43 1188.34,1213.43 1188.92,1213.43 1189.51,1213.43 1190.1,1213.43 1190.68,1213.43 1191.27,1213.43 1191.86,1213.43 1192.44,1213.43 1193.03,1213.43 1193.62,1213.43 1194.2,1213.43 1194.79,1213.43 1195.37,1213.43 1195.96,1213.43 1196.55,1213.43 1197.13,1213.43 1197.72,1213.43 1198.31,1213.43 1198.89,1213.43 1199.48,1213.43 1200.07,1213.43 1200.65,1213.43 1201.24,1213.43 1201.83,1213.43 1202.41,1213.43 1203,1213.43 1203.58,1213.43 1204.17,1213.43 1204.76,1213.43 1205.34,1213.43 1205.93,1213.43 1206.52,1213.43 1207.1,1213.43 1207.69,1213.43 1208.28,1213.43 1208.86,1213.43 1209.45,1213.43 1210.03,1213.43 1210.62,1213.43 1211.21,1213.43 1211.79,1213.43 1212.38,1213.43 1212.97,1213.43 1213.55,1213.43 1214.14,1213.43 1214.73,1213.43 1215.31,1213.43 1215.9,1213.43 1216.49,1213.43 1217.07,1213.43 1217.66,1213.43 1218.24,1213.43 1218.83,1213.43 1219.42,1213.43 1220,1213.43 1220.59,1213.43 1221.18,1213.43 1221.76,1213.43 1222.35,1213.43 1222.94,1213.43 1223.52,1213.43 1224.11,1213.43 1224.7,1213.43 1225.28,1213.43 1225.87,1213.43 1226.45,1213.43 1227.04,1213.43 1227.63,1213.43 1228.21,1213.43 1228.8,1213.43 1229.39,1213.43 1229.97,1213.43 1230.56,1213.43 1231.15,1213.43 1231.73,1213.43 1232.32,1213.43 1232.91,1213.43 1233.49,1213.43 1234.08,1213.43 1234.66,1213.43 1235.25,1213.43 1235.84,1213.43 1236.42,1213.43 1237.01,1213.43 1237.6,1213.43 1238.18,1213.43 1238.77,1213.43 1239.36,1213.43 1239.94,1213.43 1240.53,1213.43 1241.11,1213.43 1241.7,1213.43 1242.29,1213.43 1242.87,1213.43 1243.46,1213.43 1244.05,1213.43 1244.63,1213.43 1245.22,1213.43 1245.81,1213.43 1246.39,1213.43 1246.98,1213.43 1247.57,1213.43 1248.15,1213.43 1248.74,1213.43 1249.32,1213.43 1249.91,1213.43 1250.5,1213.43 1251.08,1213.43 1251.67,1213.43 1252.26,1213.43 1252.84,1213.43 1253.43,1213.43 1254.02,1213.43 1254.6,1213.43 1255.19,1213.43 1255.78,1213.43 1256.36,1213.43 1256.95,1213.43 1257.53,1213.43 1258.12,1213.43 1258.71,1213.43 1259.29,1213.43 1259.88,1213.43 1260.47,1213.43 1261.05,1213.43 1261.64,1213.43 1262.23,1213.43 1262.81,1213.43 1263.4,1213.43 1263.98,1213.43 1264.57,1213.43 1265.16,1213.43 1265.74,1213.43 1266.33,1213.43 1266.92,1213.43 1267.5,1213.43 1268.09,1213.43 1268.68,1213.43 1269.26,1213.43 1269.85,1213.43 1270.44,1213.43 1271.02,1213.43 1271.61,1213.43 1272.19,1213.43 1272.78,1213.43 1273.37,1213.43 1273.95,1213.43 1274.54,1213.43 1275.13,1213.43 1275.71,1213.43 1276.3,1213.43 1276.89,1213.43 1277.47,1213.43 1278.06,1213.43 1278.65,1213.43 1279.23,1213.43 1279.82,1213.43 1280.4,1213.43 1280.99,1213.43 1281.58,1213.43 1282.16,1213.43 1282.75,1213.43 1283.34,1213.43 1283.92,1213.43 1284.51,1213.43 1285.1,1213.43 1285.68,1213.43 1286.27,1213.43 1286.86,1213.43 1287.44,1213.43 1288.03,1213.43 1288.61,1213.43 1289.2,1213.43 1289.79,1213.43 1290.37,1213.43 1290.96,1213.43 1291.55,1213.43 1292.13,1213.43 1292.72,1213.43 1293.31,1213.43 1293.89,1213.43 1294.48,1213.43 1295.06,1213.43 1295.65,1213.43 1296.24,1213.43 1296.82,1213.43 1297.41,1213.43 1298,1213.43 1298.58,1213.43 1299.17,1213.43 1299.76,1213.43 1300.34,1213.43 1300.93,1213.43 1301.52,1213.43 1302.1,1213.43 1302.69,1213.43 1303.27,1213.43 1303.86,1213.43 1304.45,1213.43 1305.03,1213.43 1305.62,1213.43 1306.21,1213.43 1306.79,1213.43 1307.38,1213.43 1307.97,1213.43 1308.55,1213.43 1309.14,1213.43 1309.73,1213.43 1310.31,1213.43 1310.9,1213.43 1311.48,1213.43 1312.07,1213.43 1312.66,1213.43 1313.24,1213.43 1313.83,1213.43 1314.42,1213.43 1315,1213.43 1315.59,1213.43 1316.18,1213.43 1316.76,1213.43 1317.35,1213.43 1317.93,1213.43 1318.52,1213.43 1319.11,1213.43 1319.69,1213.43 1320.28,1213.43 1320.87,1213.43 1321.45,1213.43 1322.04,1213.43 1322.63,1213.43 1323.21,1213.43 1323.8,1213.43 1324.39,1213.43 1324.97,1213.43 1325.56,1213.43 1326.14,1213.43 1326.73,1213.43 1327.32,1213.43 1327.9,1213.43 1328.49,1213.43 1329.08,1213.43 1329.66,1213.43 1330.25,1213.43 1330.84,1213.43 1331.42,1213.43 1332.01,1213.43 1332.6,1213.43 1333.18,1213.43 1333.77,1213.43 1334.35,1213.43 1334.94,1213.43 1335.53,1213.43 1336.11,1213.43 1336.7,1213.43 1337.29,1213.43 1337.87,1213.43 1338.46,1213.43 1339.05,1213.43 1339.63,1213.43 1340.22,1213.43 1340.8,1213.43 1341.39,1213.43 1341.98,1213.43 1342.56,1213.43 1343.15,1213.43 1343.74,1213.43 1344.32,1213.43 1344.91,1213.43 1345.5,1213.43 1346.08,1213.43 1346.67,1213.43 1347.26,1213.43 1347.84,1213.43 1348.43,1213.43 1349.01,1213.43 1349.6,1213.43 1350.19,1213.43 1350.77,1213.43 1351.36,1213.43 1351.95,1213.43 1352.53,1213.43 1353.12,1213.43 1353.71,1213.43 1354.29,1213.43 1354.88,1213.43 1355.47,1213.43 1356.05,1213.43 1356.64,1213.43 1357.22,1213.43 1357.81,1213.43 1358.4,1213.43 1358.98,1213.43 1359.57,1213.43 1360.16,1213.43 1360.74,1213.43 1361.33,1213.43 1361.92,1213.43 1362.5,1213.43 1363.09,1213.43 1363.68,1213.43 1364.26,1213.43 1364.85,1213.43 1365.43,1213.43 1366.02,1213.43 1366.61,1213.43 1367.19,1213.43 1367.78,1213.43 1368.37,1213.43 1368.95,1213.43 1369.54,1213.43 1370.13,1213.43 1370.71,1213.43 1371.3,1213.43 1371.88,1213.43 1372.47,1213.43 1373.06,1213.43 1373.64,1213.43 1374.23,1213.43 1374.82,1213.43 1375.4,1213.43 1375.99,1213.43 1376.58,1213.43 1377.16,1213.43 1377.75,1213.43 1378.34,1213.43 1378.92,1213.43 1379.51,1213.43 1380.09,1213.43 1380.68,1213.43 1381.27,1213.43 1381.85,1213.43 1382.44,1213.43 1383.03,1213.43 1383.61,1213.43 1384.2,1213.43 1384.79,1213.43 1385.37,1213.43 1385.96,1213.43 1386.55,1213.43 1387.13,1213.43 1387.72,1213.43 1388.3,1213.43 1388.89,1213.43 1389.48,1213.43 1390.06,1213.43 1390.65,1213.43 1391.24,1213.43 1391.82,1213.43 1392.41,1213.43 1393,1213.43 1393.58,1213.43 1394.17,1213.43 1394.75,1213.43 1395.34,1213.43 1395.93,1213.43 1396.51,1213.43 1397.1,1213.43 1397.69,1213.43 1398.27,1213.43 1398.86,1213.43 1399.45,1213.43 1400.03,1213.43 1400.62,1213.43 1401.21,1213.43 1401.79,1213.43 1402.38,1213.43 1402.96,1213.43 1403.55,1213.43 1404.14,1213.43 1404.72,1213.43 1405.31,1213.43 1405.9,1213.43 1406.48,1213.43 1407.07,1213.43 1407.66,1213.43 1408.24,1213.43 1408.83,1213.43 1409.42,1213.43 1410,1213.43 1410.59,1213.43 1411.17,1213.43 1411.76,1213.43 1412.35,1213.43 1412.93,1213.43 1413.52,1213.43 1414.11,1213.43 1414.69,1213.43 1415.28,1213.43 1415.87,1213.43 1416.45,1213.43 1417.04,1213.43 1417.63,1213.43 1418.21,1213.43 1418.8,1213.43 1419.38,1213.43 1419.97,1213.43 1420.56,1213.43 1421.14,1213.43 1421.73,1213.43 1422.32,1213.43 1422.9,1213.43 1423.49,1213.43 1424.08,1213.43 1424.66,1213.43 1425.25,1213.43 1425.83,1213.43 1426.42,1213.43 1427.01,1213.43 1427.59,1213.43 1428.18,1213.43 1428.77,1213.43 1429.35,1213.43 1429.94,1213.43 1430.53,1213.43 1431.11,1213.43 1431.7,1213.43 1432.29,1213.43 1432.87,1213.43 1433.46,1213.43 1434.04,1213.43 1434.63,1213.43 1435.22,1213.43 1435.8,1213.43 1436.39,1213.43 1436.98,1213.43 1437.56,1213.43 1438.15,1213.43 1438.74,1213.43 1439.32,1213.43 1439.91,1213.43 1440.5,1213.43 1441.08,1213.43 1441.67,1213.43 1442.25,1213.43 1442.84,1213.43 1443.43,1213.43 1444.01,1213.43 1444.6,1213.43 1445.19,1213.43 1445.77,1213.43 1446.36,1213.43 1446.95,1213.43 1447.53,1213.43 1448.12,1213.43 1448.7,1213.43 1449.29,1213.43 1449.88,1213.43 1450.46,1213.43 1451.05,1213.43 1451.64,1213.43 1452.22,1213.43 1452.81,1213.43 1453.4,1213.43 1453.98,1213.43 1454.57,1213.43 1455.16,1213.43 1455.74,1213.43 1456.33,1213.43 1456.91,1213.43 1457.5,1213.43 1458.09,1213.43 1458.67,1213.43 1459.26,1213.43 1459.85,1213.43 1460.43,1213.43 1461.02,1213.43 1461.61,1213.43 1462.19,1213.43 1462.78,1213.43 1463.37,1213.43 1463.95,1213.43 1464.54,1213.43 1465.12,1213.43 1465.71,1213.43 1466.3,1213.43 1466.88,1213.43 1467.47,1213.43 1468.06,1213.43 1468.64,1213.43 1469.23,1213.43 1469.82,1213.43 1470.4,1213.43 1470.99,1213.43 1471.57,1213.43 1472.16,1213.43 1472.75,1213.43 1473.33,1213.43 1473.92,1213.43 1474.51,1213.43 1475.09,1213.43 1475.68,1213.43 1476.27,1213.43 1476.85,1213.43 1477.44,1213.43 1478.03,1213.43 1478.61,1213.43 1479.2,1213.43 1479.78,1213.43 1480.37,1213.43 1480.96,1213.43 1481.54,1213.43 1482.13,1213.43 1482.72,1213.43 1483.3,1213.43 1483.89,1213.43 1484.48,1213.43 1485.06,1213.43 1485.65,1213.43 1486.24,1213.43 1486.82,1213.43 1487.41,1213.43 1487.99,1213.43 1488.58,1213.43 1489.17,1213.43 1489.75,1213.43 1490.34,1213.43 1490.93,1213.43 1491.51,1213.43 1492.1,1213.43 1492.69,1213.43 1493.27,1213.43 1493.86,1213.43 1494.45,1213.43 1495.03,1213.43 1495.62,1213.43 1496.2,1213.43 1496.79,1213.43 1497.38,1213.43 1497.96,1213.43 1498.55,1213.43 1499.14,1213.43 1499.72,1213.43 1500.31,1213.43 1500.9,1213.43 1501.48,1213.43 1502.07,1213.43 1502.65,1213.43 1503.24,1213.43 1503.83,1213.43 1504.41,1213.43 1505,1213.43 1505.59,1213.43 1506.17,1213.43 1506.76,1213.43 1507.35,1213.43 1507.93,1213.43 1508.52,1213.43 1509.11,1213.43 1509.69,1213.43 1510.28,1213.43 1510.86,1213.43 1511.45,1213.43 1512.04,1213.43 1512.62,1213.43 1513.21,1213.43 1513.8,1213.43 1514.38,1213.43 1514.97,1213.43 1515.56,1213.43 1516.14,1213.43 1516.73,1213.43 1517.32,1213.43 1517.9,1213.43 1518.49,1213.43 1519.07,1213.43 1519.66,1213.43 1520.25,1213.43 1520.83,1213.43 1521.42,1213.43 1522.01,1213.43 1522.59,1213.43 1523.18,1213.43 1523.77,1213.43 1524.35,1213.43 1524.94,1213.43 1525.52,1213.43 1526.11,1213.43 1526.7,1213.43 1527.28,1213.43 1527.87,1213.43 1528.46,1213.43 1529.04,1213.43 1529.63,1213.43 1530.22,1213.43 1530.8,1213.43 1531.39,1213.43 1531.98,1213.43 1532.56,1213.43 1533.15,1213.43 1533.73,1213.43 1534.32,1213.43 1534.91,1213.43 1535.49,1213.43 1536.08,1213.43 1536.67,1213.43 1537.25,1213.43 1537.84,1213.43 1538.43,1213.43 1539.01,1213.43 1539.6,1213.43 1540.19,1213.43 1540.77,1213.43 1541.36,1213.43 1541.94,1213.43 1542.53,1213.43 1543.12,1213.43 1543.7,1213.43 1544.29,1213.43 1544.88,1213.43 1545.46,1213.43 1546.05,1213.43 1546.64,1213.43 1547.22,1213.43 1547.81,1213.43 1548.4,1213.43 1548.98,1213.43 1549.57,1213.43 1550.15,1213.43 1550.74,1213.43 1551.33,1213.43 1551.91,1213.43 1552.5,1213.43 1553.09,1213.43 1553.67,1213.43 1554.26,1213.43 1554.85,1213.43 1555.43,1213.43 1556.02,1213.43 1556.6,1213.43 1557.19,1213.43 1557.78,1213.43 1558.36,1213.43 1558.95,1213.43 1559.54,1213.43 1560.12,1213.43 1560.71,1213.43 1561.3,1213.43 1561.88,1213.43 1562.47,1213.43 1563.06,1213.43 1563.64,1213.43 1564.23,1213.43 1564.81,1213.43 1565.4,1213.43 1565.99,1213.43 1566.57,1213.43 1567.16,1213.43 1567.75,1213.43 1568.33,1213.43 1568.92,1213.43 1569.51,1213.43 1570.09,1213.43 1570.68,1213.43 1571.27,1213.43 1571.85,1213.43 1572.44,1213.43 1573.02,1213.43 1573.61,1213.43 1574.2,1213.43 1574.78,1213.43 1575.37,1213.43 1575.96,1213.43 1576.54,1213.43 1577.13,1213.43 1577.72,1213.43 1578.3,1213.43 1578.89,1213.43 1579.47,1213.43 1580.06,1213.43 1580.65,1213.43 1581.23,1213.43 1581.82,1213.43 1582.41,1213.43 1582.99,1213.43 1583.58,1213.43 1584.17,1213.43 1584.75,1213.43 1585.34,1213.43 1585.93,1213.43 1586.51,1213.43 1587.1,1213.43 1587.68,1213.43 1588.27,1213.43 1588.86,1213.43 1589.44,1213.43 1590.03,1213.43 1590.62,1213.43 1591.2,1213.43 1591.79,1213.43 1592.38,1213.43 1592.96,1213.43 1593.55,1213.43 1594.14,1213.43 1594.72,1213.43 1595.31,1213.43 1595.89,1213.43 1596.48,1213.43 1597.07,1213.43 1597.65,1213.43 1598.24,1213.43 1598.83,1213.43 1599.41,1213.43 1600,1213.43 1600.59,1213.43 1601.17,1213.43 1601.76,1213.43 1602.34,1213.43 1602.93,1213.43 1603.52,1213.43 1604.1,1213.43 1604.69,1213.43 1605.28,1213.43 1605.86,1213.43 1606.45,1213.43 1607.04,1213.43 1607.62,1213.43 1608.21,1213.43 1608.8,1213.43 1609.38,1213.43 1609.97,1213.43 1610.55,1213.43 1611.14,1213.43 1611.73,1213.43 1612.31,1213.43 1612.9,1213.43 1613.49,1213.43 1614.07,1213.43 1614.66,1213.43 1615.25,1213.43 1615.83,1213.43 1616.42,1213.43 1617.01,1213.43 1617.59,1213.43 1618.18,1213.43 1618.76,1213.43 1619.35,1213.43 1619.94,1213.43 1620.52,1213.43 1621.11,1213.43 1621.7,1213.43 1622.28,1213.43 1622.87,1213.43 1623.46,1213.43 1624.04,1213.43 1624.63,1213.43 1625.22,1213.43 1625.8,1213.43 1626.39,1213.43 1626.97,1213.43 1627.56,1213.43 1628.15,1213.43 1628.73,1213.43 1629.32,1213.43 1629.91,1213.43 1630.49,1213.43 1631.08,1213.43 1631.67,1213.43 1632.25,1213.43 1632.84,1213.43 1633.42,1213.43 1634.01,1213.43 1634.6,1213.43 1635.18,1213.43 1635.77,1213.43 1636.36,1213.43 1636.94,1213.43 1637.53,1213.43 1638.12,1213.43 1638.7,1213.43 1639.29,1213.43 1639.88,1213.43 1640.46,1213.43 1641.05,1213.43 1641.63,1213.43 1642.22,1213.43 1642.81,1213.43 1643.39,1213.43 1643.98,1213.43 1644.57,1213.43 1645.15,1213.43 1645.74,1213.43 1646.33,1213.43 1646.91,1213.43 1647.5,1213.43 1648.09,1213.43 1648.67,1213.43 1649.26,1213.43 1649.84,1213.43 1650.43,1213.43 1651.02,1213.43 1651.6,1213.43 1652.19,1213.43 1652.78,1213.43 1653.36,1213.43 1653.95,1213.43 1654.54,1213.43 1655.12,1213.43 1655.71,1213.43 1656.29,1213.43 1656.88,1213.43 1657.47,1213.43 1658.05,1213.43 1658.64,1213.43 1659.23,1213.43 1659.81,1213.43 1660.4,1213.43 1660.99,1213.43 1661.57,1213.43 1662.16,1213.43 1662.75,1213.43 1663.33,1213.43 1663.92,1213.43 1664.5,1213.43 1665.09,1213.43 1665.68,1213.43 1666.26,1213.43 1666.85,1213.43 1667.44,1213.43 1668.02,1213.43 1668.61,1213.43 1669.2,1213.43 1669.78,1213.43 1670.37,1213.43 1670.96,1213.43 1671.54,1213.43 1672.13,1213.43 1672.71,1213.43 1673.3,1213.43 1673.89,1213.43 1674.47,1213.43 1675.06,1213.43 1675.65,1213.43 1676.23,1213.43 1676.82,1213.43 1677.41,1213.43 1677.99,1213.43 1678.58,1213.43 1679.17,1213.43 1679.75,1213.43 1680.34,1213.43 1680.92,1213.43 1681.51,1213.43 1682.1,1213.43 1682.68,1213.43 1683.27,1213.43 1683.86,1213.43 1684.44,1213.43 1685.03,1213.43 1685.62,1213.43 1686.2,1213.43 1686.79,1213.43 1687.37,1213.43 1687.96,1213.43 1688.55,1213.43 1689.13,1213.43 1689.72,1213.43 1690.31,1213.43 1690.89,1213.43 1691.48,1213.43 1692.07,1213.43 1692.65,1213.43 1693.24,1213.43 1693.83,1213.43 1694.41,1213.43 1695,1213.43 1695.58,1213.43 1696.17,1213.43 1696.76,1213.43 1697.34,1213.43 1697.93,1213.43 1698.52,1213.43 1699.1,1213.43 1699.69,1213.43 1700.28,1213.43 1700.86,1213.43 1701.45,1213.43 1702.04,1213.43 1702.62,1213.43 1703.21,1213.43 1703.79,1213.43 1704.38,1213.43 1704.97,1213.43 1705.55,1213.43 1706.14,1213.43 1706.73,1213.43 1707.31,1213.43 1707.9,1213.43 1708.49,1213.43 1709.07,1213.43 1709.66,1213.43 1710.24,1213.43 1710.83,1213.43 1711.42,1213.43 1712,1213.43 1712.59,1213.43 1713.18,1213.43 1713.76,1213.43 1714.35,1213.43 1714.94,1213.43 1715.52,1213.43 1716.11,1213.43 1716.7,1213.43 1717.28,1213.43 1717.87,1213.43 1718.45,1213.43 1719.04,1213.43 1719.63,1213.43 1720.21,1213.43 1720.8,1213.43 1721.39,1213.43 1721.97,1213.43 1722.56,1213.43 1723.15,1213.43 1723.73,1213.43 1724.32,1213.43 1724.91,1213.43 1725.49,1213.43 1726.08,1213.43 1726.66,1213.43 1727.25,1213.43 1727.84,1213.43 1728.42,1213.43 1729.01,1213.43 1729.6,1213.43 1730.18,1213.43 1730.77,1213.43 1731.36,1213.43 1731.94,1213.43 1732.53,1213.43 1733.11,1213.43 1733.7,1213.43 1734.29,1213.43 1734.87,1213.43 1735.46,1213.43 1736.05,1213.43 1736.63,1213.43 1737.22,1213.43 1737.81,1213.43 1738.39,1213.43 1738.98,1213.43 1739.57,1213.43 1740.15,1213.43 1740.74,1213.43 1741.32,1213.43 1741.91,1213.43 1742.5,1213.43 1743.08,1213.43 1743.67,1213.43 1744.26,1213.43 1744.84,1213.43 1745.43,1213.43 1746.02,1213.43 1746.6,1213.43 1747.19,1213.43 1747.78,1213.43 1748.36,1213.43 1748.95,1213.43 1749.53,1213.43 1750.12,1213.43 1750.71,1213.43 1751.29,1213.43 1751.88,1213.43 1752.47,1213.43 1753.05,1213.43 1753.64,1213.43 1754.23,1213.43 1754.81,1213.43 1755.4,1213.43 1755.99,1213.43 1756.57,1213.43 1757.16,1213.43 1757.74,1213.43 1758.33,1213.43 1758.92,1213.43 1759.5,1213.43 1760.09,1213.43 1760.68,1213.43 1761.26,1213.43 1761.85,1213.43 1762.44,1213.43 1763.02,1213.43 1763.61,1213.43 1764.19,1213.43 1764.78,1213.43 1765.37,1213.43 1765.95,1213.43 1766.54,1213.43 1767.13,1213.43 1767.71,1213.43 1768.3,1213.43 1768.89,1213.43 1769.47,1213.43 1770.06,1213.43 1770.65,1213.43 1771.23,1213.43 1771.82,1213.43 1772.4,1213.43 1772.99,1213.43 1773.58,1213.43 1774.16,1213.43 1774.75,1213.43 1775.34,1213.43 1775.92,1213.43 1776.51,1213.43 1777.1,1213.43 1777.68,1213.43 1778.27,1213.43 1778.86,1213.43 1779.44,1213.43 1780.03,1213.43 1780.61,1213.43 1781.2,1213.43 1781.79,1213.43 1782.37,1213.43 1782.96,1213.43 1783.55,1213.43 1784.13,1213.43 1784.72,1213.43 1785.31,1213.43 1785.89,1213.43 1786.48,1213.43 1787.06,1213.43 1787.65,1213.43 1788.24,1213.43 1788.82,1213.43 1789.41,1213.43 1790,1213.43 1790.58,1213.43 1791.17,1213.43 1791.76,1213.43 1792.34,1213.43 1792.93,1213.43 1793.52,1213.43 1794.1,1213.43 1794.69,1213.43 1795.27,1213.43 1795.86,1213.43 1796.45,1213.43 1797.03,1213.43 1797.62,1213.43 1798.21,1213.43 1798.79,1213.43 1799.38,1213.43 1799.97,1213.43 1800.55,1213.43 1801.14,1213.43 1801.73,1213.43 1802.31,1213.43 1802.9,1213.43 1803.48,1213.43 1804.07,1213.43 1804.66,1213.43 1805.24,1213.43 1805.83,1213.43 1806.42,1213.43 1807,1213.43 1807.59,1213.43 1808.18,1213.43 1808.76,1213.43 1809.35,1213.43 1809.94,1213.43 1810.52,1213.43 1811.11,1213.43 1811.69,1213.43 1812.28,1213.43 1812.87,1213.43 1813.45,1213.43 1814.04,1213.43 1814.63,1213.43 1815.21,1213.43 1815.8,1213.43 1816.39,1213.43 1816.97,1213.43 1817.56,1213.43 1818.14,1213.43 1818.73,1213.43 1819.32,1213.43 1819.9,1213.43 1820.49,1213.43 1821.08,1213.43 1821.66,1213.43 1822.25,1213.43 1822.84,1213.43 1823.42,1213.43 1824.01,1213.43 1824.6,1213.43 1825.18,1213.43 1825.77,1213.43 1826.35,1213.43 1826.94,1213.43 1827.53,1213.43 1828.11,1213.43 1828.7,1213.43 1829.29,1213.43 1829.87,1213.43 1830.46,1213.43 1831.05,1213.43 1831.63,1213.43 1832.22,1213.43 1832.81,1213.43 1833.39,1213.43 1833.98,1213.43 1834.56,1213.43 1835.15,1213.43 1835.74,1213.43 1836.32,1213.43 1836.91,1213.43 1837.5,1213.43 1838.08,1213.43 1838.67,1213.43 1839.26,1213.43 1839.84,1213.43 1840.43,1213.43 1841.01,1213.43 1841.6,1213.43 1842.19,1213.43 1842.77,1213.43 1843.36,1213.43 1843.95,1213.43 1844.53,1213.43 1845.12,1213.43 1845.71,1213.43 1846.29,1213.43 1846.88,1213.43 1847.47,1213.43 1848.05,1213.43 1848.64,1213.43 1849.22,1213.43 1849.81,1213.43 1850.4,1213.43 1850.98,1213.43 1851.57,1213.43 1852.16,1213.43 1852.74,1213.43 1853.33,1213.43 1853.92,1213.43 1854.5,1213.43 1855.09,1213.43 1855.68,1213.43 1856.26,1213.43 1856.85,1213.43 1857.43,1213.43 1858.02,1213.43 1858.61,1213.43 1859.19,1213.43 1859.78,1213.43 1860.37,1213.43 1860.95,1213.43 1861.54,1213.43 1862.13,1213.43 1862.71,1213.43 1863.3,1213.43 1863.88,1213.43 1864.47,1213.43 1865.06,1213.43 1865.64,1213.43 1866.23,1213.43 1866.82,1213.43 1867.4,1213.43 1867.99,1213.43 1868.58,1213.43 1869.16,1213.43 1869.75,1213.43 1870.34,1213.43 1870.92,1213.43 1871.51,1213.43 1872.09,1213.43 1872.68,1213.43 1873.27,1213.43 1873.85,1213.43 1874.44,1213.43 1875.03,1213.43 1875.61,1213.43 1876.2,1213.43 1876.79,1213.43 1877.37,1213.43 1877.96,1213.43 1878.55,1213.43 1879.13,1213.43 1879.72,1213.43 1880.3,1213.43 1880.89,1213.43 1881.48,1213.43 1882.06,1213.43 1882.65,1213.43 1883.24,1213.43 1883.82,1213.43 1884.41,1213.43 1885,1213.43 1885.58,1213.43 1886.17,1213.43 1886.76,1213.43 1887.34,1213.43 1887.93,1213.43 1888.51,1213.43 1889.1,1213.43 1889.69,1213.43 1890.27,1213.43 1890.86,1213.43 1891.45,1213.43 1892.03,1213.43 1892.62,1213.43 1893.21,1213.43 1893.79,1213.43 1894.38,1213.43 1894.96,1213.43 1895.55,1213.43 1896.14,1213.43 1896.72,1213.43 1897.31,1213.43 1897.9,1213.43 1898.48,1213.43 1899.07,1213.43 1899.66,1213.43 1900.24,1213.43 1900.83,1213.43 1901.42,1213.43 1902,1213.43 1902.59,1213.43 1903.17,1213.43 1903.76,1213.43 1904.35,1213.43 1904.93,1213.43 1905.52,1213.43 1906.11,1213.43 1906.69,1213.43 1907.28,1213.43 1907.87,1213.43 1908.45,1213.43 1909.04,1213.43 1909.63,1213.43 1910.21,1213.43 1910.8,1213.43 1911.38,1213.43 1911.97,1213.43 1912.56,1213.43 1913.14,1213.43 1913.73,1213.43 1914.32,1213.43 1914.9,1213.43 1915.49,1213.43 1916.08,1213.43 1916.66,1213.43 1917.25,1213.43 1917.83,1213.43 1918.42,1213.43 1919.01,1213.43 1919.59,1213.43 1920.18,1213.43 1920.77,1213.43 1921.35,1213.43 1921.94,1213.43 1922.53,1213.43 1923.11,1213.43 1923.7,1213.43 1924.29,1213.43 1924.87,1213.43 1925.46,1213.43 1926.04,1213.43 1926.63,1213.43 1927.22,1213.43 1927.8,1213.43 1928.39,1213.43 1928.98,1213.43 1929.56,1213.43 1930.15,1213.43 1930.74,1213.43 1931.32,1213.43 1931.91,1213.43 1932.5,1213.43 1933.08,1213.43 1933.67,1213.43 1934.25,1213.43 1934.84,1213.43 1935.43,1213.43 1936.01,1213.43 1936.6,1213.43 1937.19,1213.43 1937.77,1213.43 1938.36,1213.43 1938.95,1213.43 1939.53,1213.43 1940.12,1213.43 1940.71,1213.43 1941.29,1213.43 1941.88,1213.43 1942.46,1213.43 1943.05,1213.43 1943.64,1213.43 1944.22,1213.43 1944.81,1213.43 1945.4,1213.43 1945.98,1213.43 1946.57,1213.43 1947.16,1213.43 1947.74,1213.43 1948.33,1213.43 1948.91,1213.43 1949.5,1213.43 1950.09,1213.43 1950.67,1213.43 1951.26,1213.43 1951.85,1213.43 1952.43,1213.43 1953.02,1213.43 1953.61,1213.43 1954.19,1213.43 1954.78,1213.43 1955.37,1213.43 1955.95,1213.43 1956.54,1213.43 1957.12,1213.43 1957.71,1213.43 1958.3,1213.43 1958.88,1213.43 1959.47,1213.43 1960.06,1213.43 1960.64,1213.43 1961.23,1213.43 1961.82,1213.43 1962.4,1213.43 1962.99,1213.43 1963.58,1213.43 1964.16,1213.43 1964.75,1213.43 1965.33,1213.43 1965.92,1213.43 1966.51,1213.43 1967.09,1213.43 1967.68,1213.43 1968.27,1213.43 1968.85,1213.43 1969.44,1213.43 1970.03,1213.43 1970.61,1213.43 1971.2,1213.43 1971.78,1213.43 1972.37,1213.43 1972.96,1213.43 1973.54,1213.43 1974.13,1213.43 1974.72,1213.43 1975.3,1213.43 1975.89,1213.43 1976.48,1213.43 1977.06,1213.43 1977.65,1213.43 1978.24,1213.43 1978.82,1213.43 1979.41,1213.43 1979.99,1213.43 1980.58,1213.43 1981.17,1213.43 1981.75,1213.43 1982.34,1213.43 1982.93,1213.43 1983.51,1213.43 1984.1,1213.43 1984.69,1213.43 1985.27,1213.43 1985.86,1213.43 1986.45,1213.43 1987.03,1213.43 1987.62,1213.43 1988.2,1213.43 1988.79,1213.43 1989.38,1213.43 1989.96,1213.43 1990.55,1213.43 1991.14,1213.43 1991.72,1213.43 1992.31,1213.43 1992.9,1213.43 1993.48,1213.43 1994.07,1213.43 1994.65,1213.43 1995.24,1213.43 1995.83,1213.43 1996.41,1213.43 1997,1213.43 1997.59,1213.43 1998.17,1213.43 1998.76,1213.43 1999.35,1213.43 1999.93,1213.43 2000.52,1213.43 2001.11,1213.43 2001.69,1213.43 2002.28,1213.43 2002.86,1213.43 2003.45,1213.43 2004.04,1213.43 2004.62,1213.43 2005.21,1213.43 2005.8,1213.43 2006.38,1213.43 2006.97,1213.43 2007.56,1213.43 2008.14,1213.43 2008.73,1213.43 2009.32,1213.43 2009.9,1213.43 2010.49,1213.43 2011.07,1213.43 2011.66,1213.43 2012.25,1213.43 2012.83,1213.43 2013.42,1213.43 2014.01,1213.43 2014.59,1213.43 2015.18,1213.43 2015.77,1213.43 2016.35,1213.43 2016.94,1213.43 2017.53,1213.43 2018.11,1213.43 2018.7,1213.43 2019.28,1213.43 2019.87,1213.43 2020.46,1213.43 2021.04,1213.43 2021.63,1213.43 2022.22,1213.43 2022.8,1213.43 2023.39,1213.43 2023.98,1213.43 2024.56,1213.43 2025.15,1213.43 2025.73,1213.43 2026.32,1213.43 2026.91,1213.43 2027.49,1213.43 2028.08,1213.43 2028.67,1213.43 2029.25,1213.43 2029.84,1213.43 2030.43,1213.43 2031.01,1213.43 2031.6,1213.43 2032.19,1213.43 2032.77,1213.43 2033.36,1213.43 2033.94,1213.43 2034.53,1213.43 2035.12,1213.43 2035.7,1213.43 2036.29,1213.43 2036.88,1213.43 2037.46,1213.43 2038.05,1213.43 2038.64,1213.43 2039.22,1213.43 2039.81,1213.43 2040.4,1213.43 2040.98,1213.43 2041.57,1213.43 2042.15,1213.43 2042.74,1213.43 2043.33,1213.43 2043.91,1213.43 2044.5,1213.43 2045.09,1213.43 2045.67,1213.43 2046.26,1213.43 2046.85,1213.43 2047.43,1213.43 2048.02,1213.43 2048.6,1213.43 2049.19,1213.43 2049.78,1213.43 2050.36,1213.43 2050.95,1213.43 2051.54,1213.43 2052.12,1213.43 2052.71,1213.43 2053.3,1213.43 2053.88,1213.43 2054.47,1213.43 2055.06,1213.43 2055.64,1213.43 2056.23,1213.43 2056.81,1213.43 2057.4,1213.43 2057.99,1213.43 2058.57,1213.43 2059.16,1213.43 2059.75,1213.43 2060.33,1213.43 2060.92,1213.43 2061.51,1213.43 2062.09,1213.43 2062.68,1213.43 2063.27,1213.43 2063.85,1213.43 2064.44,1213.43 2065.02,1213.43 2065.61,1213.43 2066.2,1213.43 2066.78,1213.43 2067.37,1213.43 2067.96,1213.43 2068.54,1213.43 2069.13,1213.43 2069.72,1213.43 2070.3,1213.43 2070.89,1213.43 2071.48,1213.43 2072.06,1213.43 2072.65,1213.43 2073.23,1213.43 2073.82,1213.43 2074.41,1213.43 2074.99,1213.43 2075.58,1213.43 2076.17,1213.43 2076.75,1213.43 2077.34,1213.43 2077.93,1213.43 2078.51,1213.43 2079.1,1213.43 2079.68,1213.43 2080.27,1213.43 2080.86,1213.43 2081.44,1213.43 2082.03,1213.43 2082.62,1213.43 2083.2,1213.43 2083.79,1213.43 2084.38,1213.43 2084.96,1213.43 2085.55,1213.43 2086.14,1213.43 2086.72,1213.43 2087.31,1213.43 2087.89,1213.43 2088.48,1213.43 2089.07,1213.43 2089.65,1213.43 2090.24,1213.43 2090.83,1213.43 2091.41,1213.43 2092,1213.43 2092.59,1213.43 2093.17,1213.43 2093.76,1213.43 2094.35,1213.43 2094.93,1213.43 2095.52,1213.43 2096.1,1213.43 2096.69,1213.43 2097.28,1213.43 2097.86,1213.43 2098.45,1213.43 2099.04,1213.43 2099.62,1213.43 2100.21,1213.43 2100.8,1213.43 2101.38,1213.43 2101.97,1213.43 2102.55,1213.43 2103.14,1213.43 2103.73,1213.43 2104.31,1213.43 2104.9,1213.43 2105.49,1213.43 2106.07,1213.43 2106.66,1213.43 2107.25,1213.43 2107.83,1213.43 2108.42,1213.43 2109.01,1213.43 2109.59,1213.43 2110.18,1213.43 2110.76,1213.43 2111.35,1213.43 2111.94,1213.43 2112.52,1213.43 2113.11,1213.43 2113.7,1213.43 2114.28,1213.43 2114.87,1213.43 2115.46,1213.43 2116.04,1213.43 2116.63,1213.43 2117.22,1213.43 2117.8,1213.43 2118.39,1213.43 2118.97,1213.43 2119.56,1213.43 2120.15,1213.43 2120.73,1213.43 2121.32,1213.43 2121.91,1213.43 2122.49,1213.43 2123.08,1213.43 2123.67,1213.43 2124.25,1213.43 2124.84,1213.43 2125.42,1213.43 2126.01,1213.43 2126.6,1213.43 2127.18,1213.43 2127.77,1213.43 2128.36,1213.43 2128.94,1213.43 2129.53,1213.43 2130.12,1213.43 2130.7,1213.43 2131.29,1213.43 2131.88,1213.43 2132.46,1213.43 2133.05,1213.43 2133.63,1213.43 2134.22,1213.43 2134.81,1213.43 2135.39,1213.43 2135.98,1213.43 2136.57,1213.43 2137.15,1213.43 2137.74,1213.43 2138.33,1213.43 2138.91,1213.43 2139.5,1213.43 2140.09,1213.43 2140.67,1213.43 2141.26,1213.43 2141.84,1213.43 2142.43,1213.43 2143.02,1213.43 2143.6,1213.43 2144.19,1213.43 2144.78,1213.43 2145.36,1213.43 2145.95,1213.43 2146.54,1213.43 2147.12,1213.43 2147.71,1213.43 2148.3,1213.43 2148.88,1213.43 2149.47,1213.43 2150.05,1213.43 2150.64,1213.43 2151.23,1213.43 2151.81,1213.43 2152.4,1213.43 2152.99,1213.43 2153.57,1213.43 2154.16,1213.43 2154.75,1213.43 2155.33,1213.43 2155.92,1213.43 2156.5,1213.43 2157.09,1213.43 2157.68,1213.43 2158.26,1213.43 \"/>\n<path clip-path=\"url(#clip272)\" d=\"M986.025 1213.22 L986.612 1213.22 L987.198 1213.22 L987.785 1213.22 L988.371 1213.22 L988.957 1213.22 L989.544 1213.22 L990.13 1213.22 L990.717 1213.22 L991.303 1213.22 L991.889 1213.22 L992.476 1213.22 L993.062 1213.22 L993.649 1213.22 L994.235 1213.22 L994.822 1213.22 L995.408 1213.22 L995.994 1213.22 L996.581 1213.22 L997.167 1213.22 L997.754 1213.22 L998.34 1213.22 L998.926 1213.22 L999.513 1213.22 L1000.1 1213.22 L1000.69 1213.22 L1001.27 1213.22 L1001.86 1213.22 L1002.44 1213.22 L1003.03 1213.22 L1003.62 1213.22 L1004.2 1213.22 L1004.79 1213.22 L1005.38 1213.22 L1005.96 1213.22 L1006.55 1213.22 L1007.14 1213.22 L1007.72 1213.22 L1008.31 1213.22 L1008.9 1213.22 L1009.48 1213.22 L1010.07 1213.22 L1010.65 1213.22 L1011.24 1213.22 L1011.83 1213.22 L1012.41 1213.22 L1013 1213.22 L1013.59 1213.22 L1014.17 1213.22 L1014.76 1213.22 L1015.35 1213.22 L1015.93 1213.22 L1016.52 1213.22 L1017.11 1213.22 L1017.69 1213.22 L1018.28 1213.22 L1018.86 1213.22 L1019.45 1213.22 L1020.04 1213.22 L1020.62 1213.22 L1021.21 1213.22 L1021.8 1213.22 L1022.38 1213.22 L1022.97 1213.22 L1023.56 1213.22 L1024.14 1213.22 L1024.73 1213.22 L1025.32 1213.22 L1025.9 1213.22 L1026.49 1213.22 L1027.07 1213.22 L1027.66 1213.22 L1028.25 1213.22 L1028.83 1213.22 L1029.42 1213.22 L1030.01 1213.22 L1030.59 1213.22 L1031.18 1213.22 L1031.77 1213.22 L1032.35 1213.22 L1032.94 1213.22 L1033.52 1213.22 L1034.11 1213.22 L1034.7 1213.22 L1035.28 1213.22 L1035.87 1213.22 L1036.46 1213.22 L1037.04 1213.22 L1037.63 1213.22 L1038.22 1213.22 L1038.8 1213.22 L1039.39 1213.22 L1039.98 1213.22 L1040.56 1213.22 L1041.15 1213.22 L1041.73 1213.22 L1042.32 1213.22 L1042.91 1213.22 L1043.49 1213.22 L1044.08 1213.22 L1044.67 1213.22 L1045.25 1213.22 L1045.84 1213.22 L1046.43 1213.22 L1047.01 1213.22 L1047.6 1213.22 L1048.19 1213.22 L1048.77 1213.22 L1049.36 1213.22 L1049.94 1213.22 L1050.53 1213.22 L1051.12 1213.22 L1051.7 1213.22 L1052.29 1213.22 L1052.88 1213.22 L1053.46 1213.22 L1054.05 1213.22 L1054.64 1213.22 L1055.22 1213.22 L1055.81 1213.22 L1056.39 1213.22 L1056.98 1213.22 L1057.57 1213.22 L1058.15 1213.22 L1058.74 1213.22 L1059.33 1213.22 L1059.91 1213.22 L1060.5 1213.22 L1061.09 1213.22 L1061.67 1213.22 L1062.26 1213.22 L1062.85 1213.22 L1063.43 1213.22 L1064.02 1213.22 L1064.6 1213.22 L1065.19 1213.22 L1065.78 1213.22 L1066.36 1213.22 L1066.95 1213.22 L1067.54 1213.22 L1068.12 1213.22 L1068.71 1213.22 L1069.3 1213.22 L1069.88 1213.22 L1070.47 1213.22 L1071.06 1213.22 L1071.64 1213.22 L1072.23 1213.22 L1072.81 1213.22 L1073.4 1213.22 L1073.99 1213.22 L1074.57 1213.22 L1075.16 1213.22 L1075.75 1213.22 L1076.33 1213.22 L1076.92 1213.22 L1077.51 1213.22 L1078.09 1213.22 L1078.68 1213.22 L1079.26 1213.22 L1079.85 1213.22 L1080.44 1213.22 L1081.02 1213.22 L1081.61 1213.22 L1082.2 1213.22 L1082.78 1213.22 L1083.37 1213.22 L1083.96 1213.22 L1084.54 1213.22 L1085.13 1213.22 L1085.72 1213.22 L1086.3 1213.22 L1086.89 1213.22 L1087.47 1213.22 L1088.06 1213.22 L1088.65 1213.22 L1089.23 1213.22 L1089.82 1213.22 L1090.41 1213.22 L1090.99 1213.22 L1091.58 1213.22 L1092.17 1213.22 L1092.75 1213.22 L1093.34 1213.22 L1093.93 1213.22 L1094.51 1213.22 L1095.1 1213.22 L1095.68 1213.22 L1096.27 1213.22 L1096.86 1213.22 L1097.44 1213.22 L1098.03 1213.22 L1098.62 1213.22 L1099.2 1213.22 L1099.79 1213.22 L1100.38 1213.22 L1100.96 1213.22 L1101.55 1213.22 L1102.14 1213.22 L1102.72 1213.22 L1103.31 1213.22 L1103.89 1213.22 L1104.48 1213.22 L1105.07 1213.22 L1105.65 1213.22 L1106.24 1213.22 L1106.83 1213.22 L1107.41 1213.22 L1108 1213.22 L1108.59 1213.22 L1109.17 1213.22 L1109.76 1213.22 L1110.34 1213.22 L1110.93 1213.22 L1111.52 1213.22 L1112.1 1213.22 L1112.69 1213.22 L1113.28 1213.22 L1113.86 1213.22 L1114.45 1213.22 L1115.04 1213.22 L1115.62 1213.22 L1116.21 1213.22 L1116.8 1213.22 L1117.38 1213.22 L1117.97 1213.22 L1118.55 1213.22 L1119.14 1213.22 L1119.73 1213.22 L1120.31 1213.22 L1120.9 1213.22 L1121.49 1213.22 L1122.07 1213.22 L1122.66 1213.22 L1123.25 1213.22 L1123.83 1213.22 L1124.42 1213.22 L1125.01 1213.22 L1125.59 1213.22 L1126.18 1213.22 L1126.76 1213.22 L1127.35 1213.22 L1127.94 1213.22 L1128.52 1213.22 L1129.11 1213.22 L1129.7 1213.22 L1130.28 1213.22 L1130.87 1213.22 L1131.46 1213.22 L1132.04 1213.22 L1132.63 1213.22 L1133.21 1213.22 L1133.8 1213.22 L1134.39 1213.22 L1134.97 1213.22 L1135.56 1213.22 L1136.15 1213.22 L1136.73 1213.22 L1137.32 1213.22 L1137.91 1213.22 L1138.49 1213.22 L1139.08 1213.22 L1139.67 1213.22 L1140.25 1213.22 L1140.84 1213.22 L1141.42 1213.22 L1142.01 1213.22 L1142.6 1213.22 L1143.18 1213.22 L1143.77 1213.22 L1144.36 1213.22 L1144.94 1213.22 L1145.53 1213.22 L1146.12 1213.22 L1146.7 1213.22 L1147.29 1213.22 L1147.88 1213.22 L1148.46 1213.22 L1149.05 1213.22 L1149.63 1213.22 L1150.22 1213.22 L1150.81 1213.22 L1151.39 1213.22 L1151.98 1213.22 L1152.57 1213.22 L1153.15 1213.22 L1153.74 1213.22 L1154.33 1213.22 L1154.91 1213.22 L1155.5 1213.22 L1156.09 1213.22 L1156.67 1213.22 L1157.26 1213.22 L1157.84 1213.22 L1158.43 1213.22 L1159.02 1213.22 L1159.6 1213.22 L1160.19 1213.22 L1160.78 1213.22 L1161.36 1213.22 L1161.95 1213.22 L1162.54 1213.22 L1163.12 1213.22 L1163.71 1213.22 L1164.29 1213.22 L1164.88 1213.22 L1165.47 1213.22 L1166.05 1213.22 L1166.64 1213.22 L1167.23 1213.22 L1167.81 1213.22 L1168.4 1213.22 L1168.99 1213.22 L1169.57 1213.22 L1170.16 1213.22 L1170.75 1213.22 L1171.33 1213.22 L1171.92 1213.22 L1172.5 1213.22 L1173.09 1213.22 L1173.68 1213.22 L1174.26 1213.22 L1174.85 1213.22 L1175.44 1213.22 L1176.02 1213.22 L1176.61 1213.22 L1177.2 1213.22 L1177.78 1213.22 L1178.37 1213.22 L1178.96 1213.22 L1179.54 1213.22 L1180.13 1213.22 L1180.71 1213.22 L1181.3 1213.22 L1181.89 1213.22 L1182.47 1213.22 L1183.06 1213.22 L1183.65 1213.22 L1184.23 1213.22 L1184.82 1213.22 L1185.41 1213.22 L1185.99 1213.22 L1186.58 1213.22 L1187.16 1213.22 L1187.75 1213.22 L1188.34 1213.22 L1188.92 1213.22 L1189.51 1213.22 L1190.1 1213.22 L1190.68 1213.22 L1191.27 1213.22 L1191.86 1213.22 L1192.44 1213.22 L1193.03 1213.22 L1193.62 1213.22 L1194.2 1213.22 L1194.79 1213.22 L1195.37 1213.22 L1195.96 1213.22 L1196.55 1213.22 L1197.13 1213.22 L1197.72 1213.22 L1198.31 1213.22 L1198.89 1213.22 L1199.48 1213.22 L1200.07 1213.22 L1200.65 1213.22 L1201.24 1213.22 L1201.83 1213.22 L1202.41 1213.22 L1203 1213.22 L1203.58 1213.22 L1204.17 1213.22 L1204.76 1213.22 L1205.34 1213.22 L1205.93 1213.22 L1206.52 1213.22 L1207.1 1213.22 L1207.69 1213.22 L1208.28 1213.22 L1208.86 1213.22 L1209.45 1213.22 L1210.03 1213.22 L1210.62 1213.22 L1211.21 1213.22 L1211.79 1213.22 L1212.38 1213.22 L1212.97 1213.22 L1213.55 1213.22 L1214.14 1213.22 L1214.73 1213.22 L1215.31 1213.22 L1215.9 1213.22 L1216.49 1213.22 L1217.07 1213.22 L1217.66 1213.22 L1218.24 1213.22 L1218.83 1213.22 L1219.42 1213.22 L1220 1213.22 L1220.59 1213.22 L1221.18 1213.22 L1221.76 1213.22 L1222.35 1213.22 L1222.94 1213.22 L1223.52 1213.22 L1224.11 1213.22 L1224.7 1213.22 L1225.28 1213.22 L1225.87 1213.22 L1226.45 1213.22 L1227.04 1213.22 L1227.63 1213.22 L1228.21 1213.22 L1228.8 1213.22 L1229.39 1213.22 L1229.97 1213.22 L1230.56 1213.22 L1231.15 1213.22 L1231.73 1213.22 L1232.32 1213.22 L1232.91 1213.22 L1233.49 1213.22 L1234.08 1213.22 L1234.66 1213.22 L1235.25 1213.22 L1235.84 1213.22 L1236.42 1213.22 L1237.01 1213.22 L1237.6 1213.22 L1238.18 1213.22 L1238.77 1213.22 L1239.36 1213.22 L1239.94 1213.22 L1240.53 1213.22 L1241.11 1213.22 L1241.7 1213.22 L1242.29 1213.22 L1242.87 1213.22 L1243.46 1213.22 L1244.05 1213.22 L1244.63 1213.22 L1245.22 1213.22 L1245.81 1213.22 L1246.39 1213.22 L1246.98 1213.22 L1247.57 1213.22 L1248.15 1213.22 L1248.74 1213.22 L1249.32 1213.22 L1249.91 1213.22 L1250.5 1213.22 L1251.08 1213.22 L1251.67 1213.22 L1252.26 1213.22 L1252.84 1213.22 L1253.43 1213.22 L1254.02 1213.22 L1254.6 1213.22 L1255.19 1213.22 L1255.78 1213.22 L1256.36 1213.22 L1256.95 1213.22 L1257.53 1213.22 L1258.12 1213.22 L1258.71 1213.22 L1259.29 1213.22 L1259.88 1213.22 L1260.47 1213.22 L1261.05 1213.22 L1261.64 1213.22 L1262.23 1213.22 L1262.81 1213.22 L1263.4 1213.22 L1263.98 1213.22 L1264.57 1213.22 L1265.16 1213.22 L1265.74 1213.22 L1266.33 1213.22 L1266.92 1213.22 L1267.5 1213.22 L1268.09 1213.22 L1268.68 1213.22 L1269.26 1213.22 L1269.85 1213.22 L1270.44 1213.22 L1271.02 1213.22 L1271.61 1213.22 L1272.19 1213.22 L1272.78 1213.22 L1273.37 1213.22 L1273.95 1213.22 L1274.54 1213.22 L1275.13 1213.22 L1275.71 1213.22 L1276.3 1213.22 L1276.89 1213.22 L1277.47 1213.22 L1278.06 1213.22 L1278.65 1213.22 L1279.23 1213.22 L1279.82 1213.22 L1280.4 1213.22 L1280.99 1213.22 L1281.58 1213.22 L1282.16 1213.22 L1282.75 1213.22 L1283.34 1213.22 L1283.92 1213.22 L1284.51 1213.22 L1285.1 1213.22 L1285.68 1213.22 L1286.27 1213.22 L1286.86 1213.22 L1287.44 1213.22 L1288.03 1213.22 L1288.61 1213.22 L1289.2 1213.22 L1289.79 1213.22 L1290.37 1213.22 L1290.96 1213.22 L1291.55 1213.22 L1292.13 1213.22 L1292.72 1213.22 L1293.31 1213.22 L1293.89 1213.22 L1294.48 1213.22 L1295.06 1213.22 L1295.65 1213.22 L1296.24 1213.22 L1296.82 1213.22 L1297.41 1213.22 L1298 1213.22 L1298.58 1213.22 L1299.17 1213.22 L1299.76 1213.22 L1300.34 1213.22 L1300.93 1213.22 L1301.52 1213.22 L1302.1 1213.22 L1302.69 1213.22 L1303.27 1213.22 L1303.86 1213.22 L1304.45 1213.22 L1305.03 1213.22 L1305.62 1213.22 L1306.21 1213.22 L1306.79 1213.22 L1307.38 1213.22 L1307.97 1213.22 L1308.55 1213.22 L1309.14 1213.22 L1309.73 1213.22 L1310.31 1213.22 L1310.9 1213.22 L1311.48 1213.22 L1312.07 1213.22 L1312.66 1213.22 L1313.24 1213.22 L1313.83 1213.22 L1314.42 1213.22 L1315 1213.22 L1315.59 1213.22 L1316.18 1213.22 L1316.76 1213.22 L1317.35 1213.22 L1317.93 1213.22 L1318.52 1213.22 L1319.11 1213.22 L1319.69 1213.22 L1320.28 1213.22 L1320.87 1213.22 L1321.45 1213.22 L1322.04 1213.22 L1322.63 1213.22 L1323.21 1213.22 L1323.8 1213.22 L1324.39 1213.22 L1324.97 1213.22 L1325.56 1213.22 L1326.14 1213.22 L1326.73 1213.22 L1327.32 1213.22 L1327.9 1213.22 L1328.49 1213.22 L1329.08 1213.22 L1329.66 1213.22 L1330.25 1213.22 L1330.84 1213.22 L1331.42 1213.22 L1332.01 1213.22 L1332.6 1213.22 L1333.18 1213.22 L1333.77 1213.22 L1334.35 1213.22 L1334.94 1213.22 L1335.53 1213.22 L1336.11 1213.22 L1336.7 1213.22 L1337.29 1213.22 L1337.87 1213.22 L1338.46 1213.22 L1339.05 1213.22 L1339.63 1213.22 L1340.22 1213.22 L1340.8 1213.22 L1341.39 1213.22 L1341.98 1213.22 L1342.56 1213.22 L1343.15 1213.22 L1343.74 1213.22 L1344.32 1213.22 L1344.91 1213.22 L1345.5 1213.22 L1346.08 1213.22 L1346.67 1213.22 L1347.26 1213.22 L1347.84 1213.22 L1348.43 1213.22 L1349.01 1213.22 L1349.6 1213.22 L1350.19 1213.22 L1350.77 1213.22 L1351.36 1213.22 L1351.95 1213.22 L1352.53 1213.22 L1353.12 1213.22 L1353.71 1213.22 L1354.29 1213.22 L1354.88 1213.22 L1355.47 1213.22 L1356.05 1213.22 L1356.64 1213.22 L1357.22 1213.22 L1357.81 1213.22 L1358.4 1213.22 L1358.98 1213.22 L1359.57 1213.22 L1360.16 1213.22 L1360.74 1213.22 L1361.33 1213.22 L1361.92 1213.22 L1362.5 1213.22 L1363.09 1213.22 L1363.68 1213.22 L1364.26 1213.22 L1364.85 1213.22 L1365.43 1213.22 L1366.02 1213.22 L1366.61 1213.22 L1367.19 1213.22 L1367.78 1213.22 L1368.37 1213.22 L1368.95 1213.22 L1369.54 1213.22 L1370.13 1213.22 L1370.71 1213.22 L1371.3 1213.22 L1371.88 1213.22 L1372.47 1213.22 L1373.06 1213.22 L1373.64 1213.22 L1374.23 1213.22 L1374.82 1213.22 L1375.4 1213.22 L1375.99 1213.22 L1376.58 1213.22 L1377.16 1213.22 L1377.75 1213.22 L1378.34 1213.22 L1378.92 1213.22 L1379.51 1213.22 L1380.09 1213.22 L1380.68 1213.22 L1381.27 1213.22 L1381.85 1213.22 L1382.44 1213.22 L1383.03 1213.22 L1383.61 1213.22 L1384.2 1213.22 L1384.79 1213.22 L1385.37 1213.22 L1385.96 1213.22 L1386.55 1213.22 L1387.13 1213.22 L1387.72 1213.22 L1388.3 1213.22 L1388.89 1213.22 L1389.48 1213.22 L1390.06 1213.22 L1390.65 1213.22 L1391.24 1213.22 L1391.82 1213.22 L1392.41 1213.22 L1393 1213.22 L1393.58 1213.22 L1394.17 1213.22 L1394.75 1213.22 L1395.34 1213.22 L1395.93 1213.22 L1396.51 1213.22 L1397.1 1213.22 L1397.69 1213.22 L1398.27 1213.22 L1398.86 1213.22 L1399.45 1213.22 L1400.03 1213.22 L1400.62 1213.22 L1401.21 1213.22 L1401.79 1213.22 L1402.38 1213.22 L1402.96 1213.22 L1403.55 1213.22 L1404.14 1213.22 L1404.72 1213.22 L1405.31 1213.22 L1405.9 1213.22 L1406.48 1213.22 L1407.07 1213.22 L1407.66 1213.22 L1408.24 1213.22 L1408.83 1213.22 L1409.42 1213.22 L1410 1213.22 L1410.59 1213.22 L1411.17 1213.22 L1411.76 1213.22 L1412.35 1213.22 L1412.93 1213.22 L1413.52 1213.22 L1414.11 1213.22 L1414.69 1213.22 L1415.28 1213.22 L1415.87 1213.22 L1416.45 1213.22 L1417.04 1213.22 L1417.63 1213.22 L1418.21 1213.22 L1418.8 1213.22 L1419.38 1213.22 L1419.97 1213.22 L1420.56 1213.22 L1421.14 1213.22 L1421.73 1213.22 L1422.32 1213.22 L1422.9 1213.22 L1423.49 1213.22 L1424.08 1213.22 L1424.66 1213.22 L1425.25 1213.22 L1425.83 1213.22 L1426.42 1213.22 L1427.01 1213.22 L1427.59 1213.22 L1428.18 1213.22 L1428.77 1213.22 L1429.35 1213.22 L1429.94 1213.22 L1430.53 1213.22 L1431.11 1213.22 L1431.7 1213.22 L1432.29 1213.22 L1432.87 1213.22 L1433.46 1213.22 L1434.04 1213.22 L1434.63 1213.22 L1435.22 1213.22 L1435.8 1213.22 L1436.39 1213.22 L1436.98 1213.22 L1437.56 1213.22 L1438.15 1213.22 L1438.74 1213.22 L1439.32 1213.22 L1439.91 1213.22 L1440.5 1213.22 L1441.08 1213.22 L1441.67 1213.22 L1442.25 1213.22 L1442.84 1213.22 L1443.43 1213.22 L1444.01 1213.22 L1444.6 1213.22 L1445.19 1213.22 L1445.77 1213.22 L1446.36 1213.22 L1446.95 1213.22 L1447.53 1213.22 L1448.12 1213.22 L1448.7 1213.22 L1449.29 1213.22 L1449.88 1213.22 L1450.46 1213.22 L1451.05 1213.22 L1451.64 1213.22 L1452.22 1213.22 L1452.81 1213.22 L1453.4 1213.22 L1453.98 1213.22 L1454.57 1213.22 L1455.16 1213.22 L1455.74 1213.22 L1456.33 1213.22 L1456.91 1213.22 L1457.5 1213.22 L1458.09 1213.22 L1458.67 1213.22 L1459.26 1213.22 L1459.85 1213.22 L1460.43 1213.22 L1461.02 1213.22 L1461.61 1213.22 L1462.19 1213.22 L1462.78 1213.22 L1463.37 1213.22 L1463.95 1213.22 L1464.54 1213.22 L1465.12 1213.22 L1465.71 1213.22 L1466.3 1213.22 L1466.88 1213.22 L1467.47 1213.22 L1468.06 1213.22 L1468.64 1213.22 L1469.23 1213.22 L1469.82 1213.22 L1470.4 1213.22 L1470.99 1213.22 L1471.57 1213.22 L1472.16 1213.22 L1472.75 1213.22 L1473.33 1213.22 L1473.92 1213.22 L1474.51 1213.22 L1475.09 1213.22 L1475.68 1213.22 L1476.27 1213.22 L1476.85 1213.22 L1477.44 1213.22 L1478.03 1213.22 L1478.61 1213.22 L1479.2 1213.22 L1479.78 1213.22 L1480.37 1213.22 L1480.96 1213.22 L1481.54 1213.22 L1482.13 1213.22 L1482.72 1213.22 L1483.3 1213.22 L1483.89 1213.22 L1484.48 1213.22 L1485.06 1213.22 L1485.65 1213.22 L1486.24 1213.22 L1486.82 1213.22 L1487.41 1213.22 L1487.99 1213.22 L1488.58 1213.22 L1489.17 1213.22 L1489.75 1213.22 L1490.34 1213.22 L1490.93 1213.22 L1491.51 1213.22 L1492.1 1213.22 L1492.69 1213.22 L1493.27 1213.22 L1493.86 1213.22 L1494.45 1213.22 L1495.03 1213.22 L1495.62 1213.22 L1496.2 1213.22 L1496.79 1213.22 L1497.38 1213.22 L1497.96 1213.22 L1498.55 1213.22 L1499.14 1213.22 L1499.72 1213.22 L1500.31 1213.22 L1500.9 1213.22 L1501.48 1213.22 L1502.07 1213.22 L1502.65 1213.22 L1503.24 1213.22 L1503.83 1213.22 L1504.41 1213.22 L1505 1213.22 L1505.59 1213.22 L1506.17 1213.22 L1506.76 1213.22 L1507.35 1213.22 L1507.93 1213.22 L1508.52 1213.22 L1509.11 1213.22 L1509.69 1213.22 L1510.28 1213.22 L1510.86 1213.22 L1511.45 1213.22 L1512.04 1213.22 L1512.62 1213.22 L1513.21 1213.22 L1513.8 1213.22 L1514.38 1213.22 L1514.97 1213.22 L1515.56 1213.22 L1516.14 1213.22 L1516.73 1213.22 L1517.32 1213.22 L1517.9 1213.22 L1518.49 1213.22 L1519.07 1213.22 L1519.66 1213.22 L1520.25 1213.22 L1520.83 1213.22 L1521.42 1213.22 L1522.01 1213.22 L1522.59 1213.22 L1523.18 1213.22 L1523.77 1213.22 L1524.35 1213.22 L1524.94 1213.22 L1525.52 1213.22 L1526.11 1213.22 L1526.7 1213.22 L1527.28 1213.22 L1527.87 1213.22 L1528.46 1213.22 L1529.04 1213.22 L1529.63 1213.22 L1530.22 1213.22 L1530.8 1213.22 L1531.39 1213.22 L1531.98 1213.22 L1532.56 1213.22 L1533.15 1213.22 L1533.73 1213.22 L1534.32 1213.22 L1534.91 1213.22 L1535.49 1213.22 L1536.08 1213.22 L1536.67 1213.22 L1537.25 1213.22 L1537.84 1213.22 L1538.43 1213.22 L1539.01 1213.22 L1539.6 1213.22 L1540.19 1213.22 L1540.77 1213.22 L1541.36 1213.22 L1541.94 1213.22 L1542.53 1213.22 L1543.12 1213.22 L1543.7 1213.22 L1544.29 1213.22 L1544.88 1213.22 L1545.46 1213.22 L1546.05 1213.22 L1546.64 1213.22 L1547.22 1213.22 L1547.81 1213.22 L1548.4 1213.22 L1548.98 1213.22 L1549.57 1213.22 L1550.15 1213.22 L1550.74 1213.22 L1551.33 1213.22 L1551.91 1213.22 L1552.5 1213.22 L1553.09 1213.22 L1553.67 1213.22 L1554.26 1213.22 L1554.85 1213.22 L1555.43 1213.22 L1556.02 1213.22 L1556.6 1213.22 L1557.19 1213.22 L1557.78 1213.22 L1558.36 1213.22 L1558.95 1213.22 L1559.54 1213.22 L1560.12 1213.22 L1560.71 1213.22 L1561.3 1213.22 L1561.88 1213.22 L1562.47 1213.22 L1563.06 1213.22 L1563.64 1213.22 L1564.23 1213.22 L1564.81 1213.22 L1565.4 1213.22 L1565.99 1213.22 L1566.57 1213.22 L1567.16 1213.22 L1567.75 1213.22 L1568.33 1213.22 L1568.92 1213.22 L1569.51 1213.22 L1570.09 1213.22 L1570.68 1213.22 L1571.27 1213.22 L1571.85 1213.22 L1572.44 1213.22 L1573.02 1213.22 L1573.61 1213.22 L1574.2 1213.22 L1574.78 1213.22 L1575.37 1213.22 L1575.96 1213.22 L1576.54 1213.22 L1577.13 1213.22 L1577.72 1213.22 L1578.3 1213.22 L1578.89 1213.22 L1579.47 1213.22 L1580.06 1213.22 L1580.65 1213.22 L1581.23 1213.22 L1581.82 1213.22 L1582.41 1213.22 L1582.99 1213.22 L1583.58 1213.22 L1584.17 1213.22 L1584.75 1213.22 L1585.34 1213.22 L1585.93 1213.22 L1586.51 1213.22 L1587.1 1213.22 L1587.68 1213.22 L1588.27 1213.22 L1588.86 1213.22 L1589.44 1213.22 L1590.03 1213.22 L1590.62 1213.22 L1591.2 1213.22 L1591.79 1213.22 L1592.38 1213.22 L1592.96 1213.22 L1593.55 1213.22 L1594.14 1213.22 L1594.72 1213.22 L1595.31 1213.22 L1595.89 1213.22 L1596.48 1213.22 L1597.07 1213.22 L1597.65 1213.22 L1598.24 1213.22 L1598.83 1213.22 L1599.41 1213.22 L1600 1213.22 L1600.59 1213.22 L1601.17 1213.22 L1601.76 1213.22 L1602.34 1213.22 L1602.93 1213.22 L1603.52 1213.22 L1604.1 1213.22 L1604.69 1213.22 L1605.28 1213.22 L1605.86 1213.22 L1606.45 1213.22 L1607.04 1213.22 L1607.62 1213.22 L1608.21 1213.22 L1608.8 1213.22 L1609.38 1213.22 L1609.97 1213.22 L1610.55 1213.22 L1611.14 1213.22 L1611.73 1213.22 L1612.31 1213.22 L1612.9 1213.22 L1613.49 1213.22 L1614.07 1213.22 L1614.66 1213.22 L1615.25 1213.22 L1615.83 1213.22 L1616.42 1213.22 L1617.01 1213.22 L1617.59 1213.22 L1618.18 1213.22 L1618.76 1213.22 L1619.35 1213.22 L1619.94 1213.22 L1620.52 1213.22 L1621.11 1213.22 L1621.7 1213.22 L1622.28 1213.22 L1622.87 1213.22 L1623.46 1213.22 L1624.04 1213.22 L1624.63 1213.22 L1625.22 1213.22 L1625.8 1213.22 L1626.39 1213.22 L1626.97 1213.22 L1627.56 1213.22 L1628.15 1213.22 L1628.73 1213.22 L1629.32 1213.22 L1629.91 1213.22 L1630.49 1213.22 L1631.08 1213.22 L1631.67 1213.22 L1632.25 1213.22 L1632.84 1213.22 L1633.42 1213.22 L1634.01 1213.22 L1634.6 1213.22 L1635.18 1213.22 L1635.77 1213.22 L1636.36 1213.22 L1636.94 1213.22 L1637.53 1213.22 L1638.12 1213.22 L1638.7 1213.22 L1639.29 1213.22 L1639.88 1213.22 L1640.46 1213.22 L1641.05 1213.22 L1641.63 1213.22 L1642.22 1213.22 L1642.81 1213.22 L1643.39 1213.22 L1643.98 1213.22 L1644.57 1213.22 L1645.15 1213.22 L1645.74 1213.22 L1646.33 1213.22 L1646.91 1213.22 L1647.5 1213.22 L1648.09 1213.22 L1648.67 1213.22 L1649.26 1213.22 L1649.84 1213.22 L1650.43 1213.22 L1651.02 1213.22 L1651.6 1213.22 L1652.19 1213.22 L1652.78 1213.22 L1653.36 1213.22 L1653.95 1213.22 L1654.54 1213.22 L1655.12 1213.22 L1655.71 1213.22 L1656.29 1213.22 L1656.88 1213.22 L1657.47 1213.22 L1658.05 1213.22 L1658.64 1213.22 L1659.23 1213.22 L1659.81 1213.22 L1660.4 1213.22 L1660.99 1213.22 L1661.57 1213.22 L1662.16 1213.22 L1662.75 1213.22 L1663.33 1213.22 L1663.92 1213.22 L1664.5 1213.22 L1665.09 1213.22 L1665.68 1213.22 L1666.26 1213.22 L1666.85 1213.22 L1667.44 1213.22 L1668.02 1213.22 L1668.61 1213.22 L1669.2 1213.22 L1669.78 1213.22 L1670.37 1213.22 L1670.96 1213.22 L1671.54 1213.22 L1672.13 1213.22 L1672.71 1213.22 L1673.3 1213.22 L1673.89 1213.22 L1674.47 1213.22 L1675.06 1213.22 L1675.65 1213.22 L1676.23 1213.22 L1676.82 1213.22 L1677.41 1213.22 L1677.99 1213.22 L1678.58 1213.22 L1679.17 1213.22 L1679.75 1213.22 L1680.34 1213.22 L1680.92 1213.22 L1681.51 1213.22 L1682.1 1213.22 L1682.68 1213.22 L1683.27 1213.22 L1683.86 1213.22 L1684.44 1213.22 L1685.03 1213.22 L1685.62 1213.22 L1686.2 1213.22 L1686.79 1213.22 L1687.37 1213.22 L1687.96 1213.22 L1688.55 1213.22 L1689.13 1213.22 L1689.72 1213.22 L1690.31 1213.22 L1690.89 1213.22 L1691.48 1213.22 L1692.07 1213.22 L1692.65 1213.22 L1693.24 1213.22 L1693.83 1213.22 L1694.41 1213.22 L1695 1213.22 L1695.58 1213.22 L1696.17 1213.22 L1696.76 1213.22 L1697.34 1213.22 L1697.93 1213.22 L1698.52 1213.22 L1699.1 1213.22 L1699.69 1213.22 L1700.28 1213.22 L1700.86 1213.22 L1701.45 1213.22 L1702.04 1213.22 L1702.62 1213.22 L1703.21 1213.22 L1703.79 1213.22 L1704.38 1213.22 L1704.97 1213.22 L1705.55 1213.22 L1706.14 1213.22 L1706.73 1213.22 L1707.31 1213.22 L1707.9 1213.22 L1708.49 1213.22 L1709.07 1213.22 L1709.66 1213.22 L1710.24 1213.22 L1710.83 1213.22 L1711.42 1213.22 L1712 1213.22 L1712.59 1213.22 L1713.18 1213.22 L1713.76 1213.22 L1714.35 1213.22 L1714.94 1213.22 L1715.52 1213.22 L1716.11 1213.22 L1716.7 1213.22 L1717.28 1213.22 L1717.87 1213.22 L1718.45 1213.22 L1719.04 1213.22 L1719.63 1213.22 L1720.21 1213.22 L1720.8 1213.22 L1721.39 1213.22 L1721.97 1213.22 L1722.56 1213.22 L1723.15 1213.22 L1723.73 1213.22 L1724.32 1213.22 L1724.91 1213.22 L1725.49 1213.22 L1726.08 1213.22 L1726.66 1213.22 L1727.25 1213.22 L1727.84 1213.22 L1728.42 1213.22 L1729.01 1213.22 L1729.6 1213.22 L1730.18 1213.22 L1730.77 1213.22 L1731.36 1213.22 L1731.94 1213.22 L1732.53 1213.22 L1733.11 1213.22 L1733.7 1213.22 L1734.29 1213.22 L1734.87 1213.22 L1735.46 1213.22 L1736.05 1213.22 L1736.63 1213.22 L1737.22 1213.22 L1737.81 1213.22 L1738.39 1213.22 L1738.98 1213.22 L1739.57 1213.22 L1740.15 1213.22 L1740.74 1213.22 L1741.32 1213.22 L1741.91 1213.22 L1742.5 1213.22 L1743.08 1213.22 L1743.67 1213.22 L1744.26 1213.22 L1744.84 1213.22 L1745.43 1213.22 L1746.02 1213.22 L1746.6 1213.22 L1747.19 1213.22 L1747.78 1213.22 L1748.36 1213.22 L1748.95 1213.22 L1749.53 1213.22 L1750.12 1213.22 L1750.71 1213.22 L1751.29 1213.22 L1751.88 1213.22 L1752.47 1213.22 L1753.05 1213.22 L1753.64 1213.22 L1754.23 1213.22 L1754.81 1213.22 L1755.4 1213.22 L1755.99 1213.22 L1756.57 1213.22 L1757.16 1213.22 L1757.74 1213.22 L1758.33 1213.22 L1758.92 1213.22 L1759.5 1213.22 L1760.09 1213.22 L1760.68 1213.22 L1761.26 1213.22 L1761.85 1213.22 L1762.44 1213.22 L1763.02 1213.22 L1763.61 1213.22 L1764.19 1213.22 L1764.78 1213.22 L1765.37 1213.22 L1765.95 1213.22 L1766.54 1213.22 L1767.13 1213.22 L1767.71 1213.22 L1768.3 1213.22 L1768.89 1213.22 L1769.47 1213.22 L1770.06 1213.22 L1770.65 1213.22 L1771.23 1213.22 L1771.82 1213.22 L1772.4 1213.22 L1772.99 1213.22 L1773.58 1213.22 L1774.16 1213.22 L1774.75 1213.22 L1775.34 1213.22 L1775.92 1213.22 L1776.51 1213.22 L1777.1 1213.22 L1777.68 1213.22 L1778.27 1213.22 L1778.86 1213.22 L1779.44 1213.22 L1780.03 1213.22 L1780.61 1213.22 L1781.2 1213.22 L1781.79 1213.22 L1782.37 1213.22 L1782.96 1213.22 L1783.55 1213.22 L1784.13 1213.22 L1784.72 1213.22 L1785.31 1213.22 L1785.89 1213.22 L1786.48 1213.22 L1787.06 1213.22 L1787.65 1213.22 L1788.24 1213.22 L1788.82 1213.22 L1789.41 1213.22 L1790 1213.22 L1790.58 1213.22 L1791.17 1213.22 L1791.76 1213.22 L1792.34 1213.22 L1792.93 1213.22 L1793.52 1213.22 L1794.1 1213.22 L1794.69 1213.22 L1795.27 1213.22 L1795.86 1213.22 L1796.45 1213.22 L1797.03 1213.22 L1797.62 1213.22 L1798.21 1213.22 L1798.79 1213.22 L1799.38 1213.22 L1799.97 1213.22 L1800.55 1213.22 L1801.14 1213.22 L1801.73 1213.22 L1802.31 1213.22 L1802.9 1213.22 L1803.48 1213.22 L1804.07 1213.22 L1804.66 1213.22 L1805.24 1213.22 L1805.83 1213.22 L1806.42 1213.22 L1807 1213.22 L1807.59 1213.22 L1808.18 1213.22 L1808.76 1213.22 L1809.35 1213.22 L1809.94 1213.22 L1810.52 1213.22 L1811.11 1213.22 L1811.69 1213.22 L1812.28 1213.22 L1812.87 1213.22 L1813.45 1213.22 L1814.04 1213.22 L1814.63 1213.22 L1815.21 1213.22 L1815.8 1213.22 L1816.39 1213.22 L1816.97 1213.22 L1817.56 1213.22 L1818.14 1213.22 L1818.73 1213.22 L1819.32 1213.22 L1819.9 1213.22 L1820.49 1213.22 L1821.08 1213.22 L1821.66 1213.22 L1822.25 1213.22 L1822.84 1213.22 L1823.42 1213.22 L1824.01 1213.22 L1824.6 1213.22 L1825.18 1213.22 L1825.77 1213.22 L1826.35 1213.22 L1826.94 1213.22 L1827.53 1213.22 L1828.11 1213.22 L1828.7 1213.22 L1829.29 1213.22 L1829.87 1213.22 L1830.46 1213.22 L1831.05 1213.22 L1831.63 1213.22 L1832.22 1213.22 L1832.81 1213.22 L1833.39 1213.22 L1833.98 1213.22 L1834.56 1213.22 L1835.15 1213.22 L1835.74 1213.22 L1836.32 1213.22 L1836.91 1213.22 L1837.5 1213.22 L1838.08 1213.22 L1838.67 1213.22 L1839.26 1213.22 L1839.84 1213.22 L1840.43 1213.22 L1841.01 1213.22 L1841.6 1213.22 L1842.19 1213.22 L1842.77 1213.22 L1843.36 1213.22 L1843.95 1213.22 L1844.53 1213.22 L1845.12 1213.22 L1845.71 1213.22 L1846.29 1213.22 L1846.88 1213.22 L1847.47 1213.22 L1848.05 1213.22 L1848.64 1213.22 L1849.22 1213.22 L1849.81 1213.22 L1850.4 1213.22 L1850.98 1213.22 L1851.57 1213.22 L1852.16 1213.22 L1852.74 1213.22 L1853.33 1213.22 L1853.92 1213.22 L1854.5 1213.22 L1855.09 1213.22 L1855.68 1213.22 L1856.26 1213.22 L1856.85 1213.22 L1857.43 1213.22 L1858.02 1213.22 L1858.61 1213.22 L1859.19 1213.22 L1859.78 1213.22 L1860.37 1213.22 L1860.95 1213.22 L1861.54 1213.22 L1862.13 1213.22 L1862.71 1213.22 L1863.3 1213.22 L1863.88 1213.22 L1864.47 1213.22 L1865.06 1213.22 L1865.64 1213.22 L1866.23 1213.22 L1866.82 1213.22 L1867.4 1213.22 L1867.99 1213.22 L1868.58 1213.22 L1869.16 1213.22 L1869.75 1213.22 L1870.34 1213.22 L1870.92 1213.22 L1871.51 1213.22 L1872.09 1213.22 L1872.68 1213.22 L1873.27 1213.22 L1873.85 1213.22 L1874.44 1213.22 L1875.03 1213.22 L1875.61 1213.22 L1876.2 1213.22 L1876.79 1213.22 L1877.37 1213.22 L1877.96 1213.22 L1878.55 1213.22 L1879.13 1213.22 L1879.72 1213.22 L1880.3 1213.22 L1880.89 1213.22 L1881.48 1213.22 L1882.06 1213.22 L1882.65 1213.22 L1883.24 1213.22 L1883.82 1213.22 L1884.41 1213.22 L1885 1213.22 L1885.58 1213.22 L1886.17 1213.22 L1886.76 1213.22 L1887.34 1213.22 L1887.93 1213.22 L1888.51 1213.22 L1889.1 1213.22 L1889.69 1213.22 L1890.27 1213.22 L1890.86 1213.22 L1891.45 1213.22 L1892.03 1213.22 L1892.62 1213.22 L1893.21 1213.22 L1893.79 1213.22 L1894.38 1213.22 L1894.96 1213.22 L1895.55 1213.22 L1896.14 1213.22 L1896.72 1213.22 L1897.31 1213.22 L1897.9 1213.22 L1898.48 1213.22 L1899.07 1213.22 L1899.66 1213.22 L1900.24 1213.22 L1900.83 1213.22 L1901.42 1213.22 L1902 1213.22 L1902.59 1213.22 L1903.17 1213.22 L1903.76 1213.22 L1904.35 1213.22 L1904.93 1213.22 L1905.52 1213.22 L1906.11 1213.22 L1906.69 1213.22 L1907.28 1213.22 L1907.87 1213.22 L1908.45 1213.22 L1909.04 1213.22 L1909.63 1213.22 L1910.21 1213.22 L1910.8 1213.22 L1911.38 1213.22 L1911.97 1213.22 L1912.56 1213.22 L1913.14 1213.22 L1913.73 1213.22 L1914.32 1213.22 L1914.9 1213.22 L1915.49 1213.22 L1916.08 1213.22 L1916.66 1213.22 L1917.25 1213.22 L1917.83 1213.22 L1918.42 1213.22 L1919.01 1213.22 L1919.59 1213.22 L1920.18 1213.22 L1920.77 1213.22 L1921.35 1213.22 L1921.94 1213.22 L1922.53 1213.22 L1923.11 1213.22 L1923.7 1213.22 L1924.29 1213.22 L1924.87 1213.22 L1925.46 1213.22 L1926.04 1213.22 L1926.63 1213.22 L1927.22 1213.22 L1927.8 1213.22 L1928.39 1213.22 L1928.98 1213.22 L1929.56 1213.22 L1930.15 1213.22 L1930.74 1213.22 L1931.32 1213.22 L1931.91 1213.22 L1932.5 1213.22 L1933.08 1213.22 L1933.67 1213.22 L1934.25 1213.22 L1934.84 1213.22 L1935.43 1213.22 L1936.01 1213.22 L1936.6 1213.22 L1937.19 1213.22 L1937.77 1213.22 L1938.36 1213.22 L1938.95 1213.22 L1939.53 1213.22 L1940.12 1213.22 L1940.71 1213.22 L1941.29 1213.22 L1941.88 1213.22 L1942.46 1213.22 L1943.05 1213.22 L1943.64 1213.22 L1944.22 1213.22 L1944.81 1213.22 L1945.4 1213.22 L1945.98 1213.22 L1946.57 1213.22 L1947.16 1213.22 L1947.74 1213.22 L1948.33 1213.22 L1948.91 1213.22 L1949.5 1213.22 L1950.09 1213.22 L1950.67 1213.22 L1951.26 1213.22 L1951.85 1213.22 L1952.43 1213.22 L1953.02 1213.22 L1953.61 1213.22 L1954.19 1213.22 L1954.78 1213.22 L1955.37 1213.22 L1955.95 1213.22 L1956.54 1213.22 L1957.12 1213.22 L1957.71 1213.22 L1958.3 1213.22 L1958.88 1213.22 L1959.47 1213.22 L1960.06 1213.22 L1960.64 1213.22 L1961.23 1213.22 L1961.82 1213.22 L1962.4 1213.22 L1962.99 1213.22 L1963.58 1213.22 L1964.16 1213.22 L1964.75 1213.22 L1965.33 1213.22 L1965.92 1213.22 L1966.51 1213.22 L1967.09 1213.22 L1967.68 1213.22 L1968.27 1213.22 L1968.85 1213.22 L1969.44 1213.22 L1970.03 1213.22 L1970.61 1213.22 L1971.2 1213.22 L1971.78 1213.22 L1972.37 1213.22 L1972.96 1213.22 L1973.54 1213.22 L1974.13 1213.22 L1974.72 1213.22 L1975.3 1213.22 L1975.89 1213.22 L1976.48 1213.22 L1977.06 1213.22 L1977.65 1213.22 L1978.24 1213.22 L1978.82 1213.22 L1979.41 1213.22 L1979.99 1213.22 L1980.58 1213.22 L1981.17 1213.22 L1981.75 1213.22 L1982.34 1213.22 L1982.93 1213.22 L1983.51 1213.22 L1984.1 1213.22 L1984.69 1213.22 L1985.27 1213.22 L1985.86 1213.22 L1986.45 1213.22 L1987.03 1213.22 L1987.62 1213.22 L1988.2 1213.22 L1988.79 1213.22 L1989.38 1213.22 L1989.96 1213.22 L1990.55 1213.22 L1991.14 1213.22 L1991.72 1213.22 L1992.31 1213.22 L1992.9 1213.22 L1993.48 1213.22 L1994.07 1213.22 L1994.65 1213.22 L1995.24 1213.22 L1995.83 1213.22 L1996.41 1213.22 L1997 1213.22 L1997.59 1213.22 L1998.17 1213.22 L1998.76 1213.22 L1999.35 1213.22 L1999.93 1213.22 L2000.52 1213.22 L2001.11 1213.22 L2001.69 1213.22 L2002.28 1213.22 L2002.86 1213.22 L2003.45 1213.22 L2004.04 1213.22 L2004.62 1213.22 L2005.21 1213.22 L2005.8 1213.22 L2006.38 1213.22 L2006.97 1213.22 L2007.56 1213.22 L2008.14 1213.22 L2008.73 1213.22 L2009.32 1213.22 L2009.9 1213.22 L2010.49 1213.22 L2011.07 1213.22 L2011.66 1213.22 L2012.25 1213.22 L2012.83 1213.22 L2013.42 1213.22 L2014.01 1213.22 L2014.59 1213.22 L2015.18 1213.22 L2015.77 1213.22 L2016.35 1213.22 L2016.94 1213.22 L2017.53 1213.22 L2018.11 1213.22 L2018.7 1213.22 L2019.28 1213.22 L2019.87 1213.22 L2020.46 1213.22 L2021.04 1213.22 L2021.63 1213.22 L2022.22 1213.22 L2022.8 1213.22 L2023.39 1213.22 L2023.98 1213.22 L2024.56 1213.22 L2025.15 1213.22 L2025.73 1213.22 L2026.32 1213.22 L2026.91 1213.22 L2027.49 1213.22 L2028.08 1213.22 L2028.67 1213.22 L2029.25 1213.22 L2029.84 1213.22 L2030.43 1213.22 L2031.01 1213.22 L2031.6 1213.22 L2032.19 1213.22 L2032.77 1213.22 L2033.36 1213.22 L2033.94 1213.22 L2034.53 1213.22 L2035.12 1213.22 L2035.7 1213.22 L2036.29 1213.22 L2036.88 1213.22 L2037.46 1213.22 L2038.05 1213.22 L2038.64 1213.22 L2039.22 1213.22 L2039.81 1213.22 L2040.4 1213.22 L2040.98 1213.22 L2041.57 1213.22 L2042.15 1213.22 L2042.74 1213.22 L2043.33 1213.22 L2043.91 1213.22 L2044.5 1213.22 L2045.09 1213.22 L2045.67 1213.22 L2046.26 1213.22 L2046.85 1213.22 L2047.43 1213.22 L2048.02 1213.22 L2048.6 1213.22 L2049.19 1213.22 L2049.78 1213.22 L2050.36 1213.22 L2050.95 1213.22 L2051.54 1213.22 L2052.12 1213.22 L2052.71 1213.22 L2053.3 1213.22 L2053.88 1213.22 L2054.47 1213.22 L2055.06 1213.22 L2055.64 1213.22 L2056.23 1213.22 L2056.81 1213.22 L2057.4 1213.22 L2057.99 1213.22 L2058.57 1213.22 L2059.16 1213.22 L2059.75 1213.22 L2060.33 1213.22 L2060.92 1213.22 L2061.51 1213.22 L2062.09 1213.22 L2062.68 1213.22 L2063.27 1213.22 L2063.85 1213.22 L2064.44 1213.22 L2065.02 1213.22 L2065.61 1213.22 L2066.2 1213.22 L2066.78 1213.22 L2067.37 1213.22 L2067.96 1213.22 L2068.54 1213.22 L2069.13 1213.22 L2069.72 1213.22 L2070.3 1213.22 L2070.89 1213.22 L2071.48 1213.22 L2072.06 1213.22 L2072.65 1213.22 L2073.23 1213.22 L2073.82 1213.22 L2074.41 1213.22 L2074.99 1213.22 L2075.58 1213.22 L2076.17 1213.22 L2076.75 1213.22 L2077.34 1213.22 L2077.93 1213.22 L2078.51 1213.22 L2079.1 1213.22 L2079.68 1213.22 L2080.27 1213.22 L2080.86 1213.22 L2081.44 1213.22 L2082.03 1213.22 L2082.62 1213.22 L2083.2 1213.22 L2083.79 1213.22 L2084.38 1213.22 L2084.96 1213.22 L2085.55 1213.22 L2086.14 1213.22 L2086.72 1213.22 L2087.31 1213.22 L2087.89 1213.22 L2088.48 1213.22 L2089.07 1213.22 L2089.65 1213.22 L2090.24 1213.22 L2090.83 1213.22 L2091.41 1213.22 L2092 1213.22 L2092.59 1213.22 L2093.17 1213.22 L2093.76 1213.22 L2094.35 1213.22 L2094.93 1213.22 L2095.52 1213.22 L2096.1 1213.22 L2096.69 1213.22 L2097.28 1213.22 L2097.86 1213.22 L2098.45 1213.22 L2099.04 1213.22 L2099.62 1213.22 L2100.21 1213.22 L2100.8 1213.22 L2101.38 1213.22 L2101.97 1213.22 L2102.55 1213.22 L2103.14 1213.22 L2103.73 1213.22 L2104.31 1213.22 L2104.9 1213.22 L2105.49 1213.22 L2106.07 1213.22 L2106.66 1213.22 L2107.25 1213.22 L2107.83 1213.22 L2108.42 1213.22 L2109.01 1213.22 L2109.59 1213.22 L2110.18 1213.22 L2110.76 1213.22 L2111.35 1213.22 L2111.94 1213.22 L2112.52 1213.22 L2113.11 1213.22 L2113.7 1213.22 L2114.28 1213.22 L2114.87 1213.22 L2115.46 1213.22 L2116.04 1213.22 L2116.63 1213.22 L2117.22 1213.22 L2117.8 1213.22 L2118.39 1213.22 L2118.97 1213.22 L2119.56 1213.22 L2120.15 1213.22 L2120.73 1213.22 L2121.32 1213.22 L2121.91 1213.22 L2122.49 1213.22 L2123.08 1213.22 L2123.67 1213.22 L2124.25 1213.22 L2124.84 1213.22 L2125.42 1213.22 L2126.01 1213.22 L2126.6 1213.22 L2127.18 1213.22 L2127.77 1213.22 L2128.36 1213.22 L2128.94 1213.22 L2129.53 1213.22 L2130.12 1213.22 L2130.7 1213.22 L2131.29 1213.22 L2131.88 1213.22 L2132.46 1213.22 L2133.05 1213.22 L2133.63 1213.22 L2134.22 1213.22 L2134.81 1213.22 L2135.39 1213.22 L2135.98 1213.22 L2136.57 1213.22 L2137.15 1213.22 L2137.74 1213.22 L2138.33 1213.22 L2138.91 1213.22 L2139.5 1213.22 L2140.09 1213.22 L2140.67 1213.22 L2141.26 1213.22 L2141.84 1213.22 L2142.43 1213.22 L2143.02 1213.22 L2143.6 1213.22 L2144.19 1213.22 L2144.78 1213.22 L2145.36 1213.22 L2145.95 1213.22 L2146.54 1213.22 L2147.12 1213.22 L2147.71 1213.22 L2148.3 1213.22 L2148.88 1213.22 L2149.47 1213.22 L2150.05 1213.22 L2150.64 1213.22 L2151.23 1213.22 L2151.81 1213.22 L2152.4 1213.22 L2152.99 1213.22 L2153.57 1213.22 L2154.16 1213.22 L2154.75 1213.22 L2155.33 1213.22 L2155.92 1213.22 L2156.5 1213.22 L2157.09 1213.22 L2157.68 1213.22 L2158.26 1213.22 L2158.26 1213.02 L2157.68 1213.02 L2157.09 1213.02 L2156.5 1213.02 L2155.92 1213.02 L2155.33 1213.02 L2154.75 1213.02 L2154.16 1213.02 L2153.57 1213.02 L2152.99 1213.02 L2152.4 1213.02 L2151.81 1213.02 L2151.23 1213.02 L2150.64 1213.02 L2150.05 1213.02 L2149.47 1213.02 L2148.88 1213.02 L2148.3 1213.02 L2147.71 1213.02 L2147.12 1213.02 L2146.54 1213.02 L2145.95 1213.02 L2145.36 1213.02 L2144.78 1213.02 L2144.19 1213.02 L2143.6 1213.02 L2143.02 1213.02 L2142.43 1213.02 L2141.84 1213.02 L2141.26 1213.02 L2140.67 1213.02 L2140.09 1213.02 L2139.5 1213.02 L2138.91 1213.02 L2138.33 1213.02 L2137.74 1213.02 L2137.15 1213.02 L2136.57 1213.02 L2135.98 1213.02 L2135.39 1213.02 L2134.81 1213.02 L2134.22 1213.02 L2133.63 1213.02 L2133.05 1213.02 L2132.46 1213.02 L2131.88 1213.02 L2131.29 1213.02 L2130.7 1213.02 L2130.12 1213.02 L2129.53 1213.02 L2128.94 1213.02 L2128.36 1213.02 L2127.77 1213.02 L2127.18 1213.02 L2126.6 1213.02 L2126.01 1213.02 L2125.42 1213.02 L2124.84 1213.02 L2124.25 1213.02 L2123.67 1213.02 L2123.08 1213.02 L2122.49 1213.02 L2121.91 1213.02 L2121.32 1213.02 L2120.73 1213.02 L2120.15 1213.02 L2119.56 1213.02 L2118.97 1213.02 L2118.39 1213.02 L2117.8 1213.02 L2117.22 1213.02 L2116.63 1213.02 L2116.04 1213.02 L2115.46 1213.02 L2114.87 1213.02 L2114.28 1213.02 L2113.7 1213.02 L2113.11 1213.02 L2112.52 1213.02 L2111.94 1213.02 L2111.35 1213.02 L2110.76 1213.02 L2110.18 1213.02 L2109.59 1213.02 L2109.01 1213.02 L2108.42 1213.02 L2107.83 1213.02 L2107.25 1213.02 L2106.66 1213.02 L2106.07 1213.02 L2105.49 1213.02 L2104.9 1213.02 L2104.31 1213.02 L2103.73 1213.02 L2103.14 1213.02 L2102.55 1213.02 L2101.97 1213.02 L2101.38 1213.02 L2100.8 1213.02 L2100.21 1213.02 L2099.62 1213.02 L2099.04 1213.02 L2098.45 1213.02 L2097.86 1213.02 L2097.28 1213.02 L2096.69 1213.02 L2096.1 1213.02 L2095.52 1213.02 L2094.93 1213.02 L2094.35 1213.02 L2093.76 1213.02 L2093.17 1213.02 L2092.59 1213.02 L2092 1213.02 L2091.41 1213.02 L2090.83 1213.02 L2090.24 1213.02 L2089.65 1213.02 L2089.07 1213.02 L2088.48 1213.02 L2087.89 1213.02 L2087.31 1213.02 L2086.72 1213.02 L2086.14 1213.02 L2085.55 1213.02 L2084.96 1213.02 L2084.38 1213.02 L2083.79 1213.02 L2083.2 1213.02 L2082.62 1213.02 L2082.03 1213.02 L2081.44 1213.02 L2080.86 1213.02 L2080.27 1213.02 L2079.68 1213.02 L2079.1 1213.02 L2078.51 1213.02 L2077.93 1213.02 L2077.34 1213.02 L2076.75 1213.02 L2076.17 1213.02 L2075.58 1213.02 L2074.99 1213.02 L2074.41 1213.02 L2073.82 1213.02 L2073.23 1213.02 L2072.65 1213.02 L2072.06 1213.02 L2071.48 1213.02 L2070.89 1213.02 L2070.3 1213.02 L2069.72 1213.02 L2069.13 1213.02 L2068.54 1213.02 L2067.96 1213.02 L2067.37 1213.02 L2066.78 1213.02 L2066.2 1213.02 L2065.61 1213.02 L2065.02 1213.02 L2064.44 1213.02 L2063.85 1213.02 L2063.27 1213.02 L2062.68 1213.02 L2062.09 1213.02 L2061.51 1213.02 L2060.92 1213.02 L2060.33 1213.02 L2059.75 1213.02 L2059.16 1213.02 L2058.57 1213.02 L2057.99 1213.02 L2057.4 1213.02 L2056.81 1213.02 L2056.23 1213.02 L2055.64 1213.02 L2055.06 1213.02 L2054.47 1213.02 L2053.88 1213.02 L2053.3 1213.02 L2052.71 1213.02 L2052.12 1213.02 L2051.54 1213.02 L2050.95 1213.02 L2050.36 1213.02 L2049.78 1213.02 L2049.19 1213.02 L2048.6 1213.02 L2048.02 1213.02 L2047.43 1213.02 L2046.85 1213.02 L2046.26 1213.02 L2045.67 1213.02 L2045.09 1213.02 L2044.5 1213.02 L2043.91 1213.02 L2043.33 1213.02 L2042.74 1213.02 L2042.15 1213.02 L2041.57 1213.02 L2040.98 1213.02 L2040.4 1213.02 L2039.81 1213.02 L2039.22 1213.02 L2038.64 1213.02 L2038.05 1213.02 L2037.46 1213.02 L2036.88 1213.02 L2036.29 1213.02 L2035.7 1213.02 L2035.12 1213.02 L2034.53 1213.02 L2033.94 1213.02 L2033.36 1213.02 L2032.77 1213.02 L2032.19 1213.02 L2031.6 1213.02 L2031.01 1213.02 L2030.43 1213.02 L2029.84 1213.02 L2029.25 1213.02 L2028.67 1213.02 L2028.08 1213.02 L2027.49 1213.02 L2026.91 1213.02 L2026.32 1213.02 L2025.73 1213.02 L2025.15 1213.02 L2024.56 1213.02 L2023.98 1213.02 L2023.39 1213.02 L2022.8 1213.02 L2022.22 1213.02 L2021.63 1213.02 L2021.04 1213.02 L2020.46 1213.02 L2019.87 1213.02 L2019.28 1213.02 L2018.7 1213.02 L2018.11 1213.02 L2017.53 1213.02 L2016.94 1213.02 L2016.35 1213.02 L2015.77 1213.02 L2015.18 1213.02 L2014.59 1213.02 L2014.01 1213.02 L2013.42 1213.02 L2012.83 1213.02 L2012.25 1213.02 L2011.66 1213.02 L2011.07 1213.02 L2010.49 1213.02 L2009.9 1213.02 L2009.32 1213.02 L2008.73 1213.02 L2008.14 1213.02 L2007.56 1213.02 L2006.97 1213.02 L2006.38 1213.02 L2005.8 1213.02 L2005.21 1213.02 L2004.62 1213.02 L2004.04 1213.02 L2003.45 1213.02 L2002.86 1213.02 L2002.28 1213.02 L2001.69 1213.02 L2001.11 1213.02 L2000.52 1213.02 L1999.93 1213.02 L1999.35 1213.02 L1998.76 1213.02 L1998.17 1213.02 L1997.59 1213.02 L1997 1213.02 L1996.41 1213.02 L1995.83 1213.02 L1995.24 1213.02 L1994.65 1213.02 L1994.07 1213.02 L1993.48 1213.02 L1992.9 1213.02 L1992.31 1213.02 L1991.72 1213.02 L1991.14 1213.02 L1990.55 1213.02 L1989.96 1213.02 L1989.38 1213.02 L1988.79 1213.02 L1988.2 1213.02 L1987.62 1213.02 L1987.03 1213.02 L1986.45 1213.02 L1985.86 1213.02 L1985.27 1213.02 L1984.69 1213.02 L1984.1 1213.02 L1983.51 1213.02 L1982.93 1213.02 L1982.34 1213.02 L1981.75 1213.02 L1981.17 1213.02 L1980.58 1213.02 L1979.99 1213.02 L1979.41 1213.02 L1978.82 1213.02 L1978.24 1213.02 L1977.65 1213.02 L1977.06 1213.02 L1976.48 1213.02 L1975.89 1213.02 L1975.3 1213.02 L1974.72 1213.02 L1974.13 1213.02 L1973.54 1213.02 L1972.96 1213.02 L1972.37 1213.02 L1971.78 1213.02 L1971.2 1213.02 L1970.61 1213.02 L1970.03 1213.02 L1969.44 1213.02 L1968.85 1213.02 L1968.27 1213.02 L1967.68 1213.02 L1967.09 1213.02 L1966.51 1213.02 L1965.92 1213.02 L1965.33 1213.02 L1964.75 1213.02 L1964.16 1213.02 L1963.58 1213.02 L1962.99 1213.02 L1962.4 1213.02 L1961.82 1213.02 L1961.23 1213.02 L1960.64 1213.02 L1960.06 1213.02 L1959.47 1213.02 L1958.88 1213.02 L1958.3 1213.02 L1957.71 1213.02 L1957.12 1213.02 L1956.54 1213.02 L1955.95 1213.02 L1955.37 1213.02 L1954.78 1213.02 L1954.19 1213.02 L1953.61 1213.02 L1953.02 1213.02 L1952.43 1213.02 L1951.85 1213.02 L1951.26 1213.02 L1950.67 1213.02 L1950.09 1213.02 L1949.5 1213.02 L1948.91 1213.02 L1948.33 1213.02 L1947.74 1213.02 L1947.16 1213.02 L1946.57 1213.02 L1945.98 1213.02 L1945.4 1213.02 L1944.81 1213.02 L1944.22 1213.02 L1943.64 1213.02 L1943.05 1213.02 L1942.46 1213.02 L1941.88 1213.02 L1941.29 1213.02 L1940.71 1213.02 L1940.12 1213.02 L1939.53 1213.02 L1938.95 1213.02 L1938.36 1213.02 L1937.77 1213.02 L1937.19 1213.02 L1936.6 1213.02 L1936.01 1213.02 L1935.43 1213.02 L1934.84 1213.02 L1934.25 1213.02 L1933.67 1213.02 L1933.08 1213.02 L1932.5 1213.02 L1931.91 1213.02 L1931.32 1213.02 L1930.74 1213.02 L1930.15 1213.02 L1929.56 1213.02 L1928.98 1213.02 L1928.39 1213.02 L1927.8 1213.02 L1927.22 1213.02 L1926.63 1213.02 L1926.04 1213.02 L1925.46 1213.02 L1924.87 1213.02 L1924.29 1213.02 L1923.7 1213.02 L1923.11 1213.02 L1922.53 1213.02 L1921.94 1213.02 L1921.35 1213.02 L1920.77 1213.02 L1920.18 1213.02 L1919.59 1213.02 L1919.01 1213.02 L1918.42 1213.02 L1917.83 1213.02 L1917.25 1213.02 L1916.66 1213.02 L1916.08 1213.02 L1915.49 1213.02 L1914.9 1213.02 L1914.32 1213.02 L1913.73 1213.02 L1913.14 1213.02 L1912.56 1213.02 L1911.97 1213.02 L1911.38 1213.02 L1910.8 1213.02 L1910.21 1213.02 L1909.63 1213.02 L1909.04 1213.02 L1908.45 1213.02 L1907.87 1213.02 L1907.28 1213.02 L1906.69 1213.02 L1906.11 1213.02 L1905.52 1213.02 L1904.93 1213.02 L1904.35 1213.02 L1903.76 1213.02 L1903.17 1213.02 L1902.59 1213.02 L1902 1213.02 L1901.42 1213.02 L1900.83 1213.02 L1900.24 1213.02 L1899.66 1213.02 L1899.07 1213.02 L1898.48 1213.02 L1897.9 1213.02 L1897.31 1213.02 L1896.72 1213.02 L1896.14 1213.02 L1895.55 1213.02 L1894.96 1213.02 L1894.38 1213.02 L1893.79 1213.02 L1893.21 1213.02 L1892.62 1213.02 L1892.03 1213.02 L1891.45 1213.02 L1890.86 1213.02 L1890.27 1213.02 L1889.69 1213.02 L1889.1 1213.02 L1888.51 1213.02 L1887.93 1213.02 L1887.34 1213.02 L1886.76 1213.02 L1886.17 1213.02 L1885.58 1213.02 L1885 1213.02 L1884.41 1213.02 L1883.82 1213.02 L1883.24 1213.02 L1882.65 1213.02 L1882.06 1213.02 L1881.48 1213.02 L1880.89 1213.02 L1880.3 1213.02 L1879.72 1213.02 L1879.13 1213.02 L1878.55 1213.02 L1877.96 1213.02 L1877.37 1213.02 L1876.79 1213.02 L1876.2 1213.02 L1875.61 1213.02 L1875.03 1213.02 L1874.44 1213.02 L1873.85 1213.02 L1873.27 1213.02 L1872.68 1213.02 L1872.09 1213.02 L1871.51 1213.02 L1870.92 1213.02 L1870.34 1213.02 L1869.75 1213.02 L1869.16 1213.02 L1868.58 1213.02 L1867.99 1213.02 L1867.4 1213.02 L1866.82 1213.02 L1866.23 1213.02 L1865.64 1213.02 L1865.06 1213.02 L1864.47 1213.02 L1863.88 1213.02 L1863.3 1213.02 L1862.71 1213.02 L1862.13 1213.02 L1861.54 1213.02 L1860.95 1213.02 L1860.37 1213.02 L1859.78 1213.02 L1859.19 1213.02 L1858.61 1213.02 L1858.02 1213.02 L1857.43 1213.02 L1856.85 1213.02 L1856.26 1213.02 L1855.68 1213.02 L1855.09 1213.02 L1854.5 1213.02 L1853.92 1213.02 L1853.33 1213.02 L1852.74 1213.02 L1852.16 1213.02 L1851.57 1213.02 L1850.98 1213.02 L1850.4 1213.02 L1849.81 1213.02 L1849.22 1213.02 L1848.64 1213.02 L1848.05 1213.02 L1847.47 1213.02 L1846.88 1213.02 L1846.29 1213.02 L1845.71 1213.02 L1845.12 1213.02 L1844.53 1213.02 L1843.95 1213.02 L1843.36 1213.02 L1842.77 1213.02 L1842.19 1213.02 L1841.6 1213.02 L1841.01 1213.02 L1840.43 1213.02 L1839.84 1213.02 L1839.26 1213.02 L1838.67 1213.02 L1838.08 1213.02 L1837.5 1213.02 L1836.91 1213.02 L1836.32 1213.02 L1835.74 1213.02 L1835.15 1213.02 L1834.56 1213.02 L1833.98 1213.02 L1833.39 1213.02 L1832.81 1213.02 L1832.22 1213.02 L1831.63 1213.02 L1831.05 1213.02 L1830.46 1213.02 L1829.87 1213.02 L1829.29 1213.02 L1828.7 1213.02 L1828.11 1213.02 L1827.53 1213.02 L1826.94 1213.02 L1826.35 1213.02 L1825.77 1213.02 L1825.18 1213.02 L1824.6 1213.02 L1824.01 1213.02 L1823.42 1213.02 L1822.84 1213.02 L1822.25 1213.02 L1821.66 1213.02 L1821.08 1213.02 L1820.49 1213.02 L1819.9 1213.02 L1819.32 1213.02 L1818.73 1213.02 L1818.14 1213.02 L1817.56 1213.02 L1816.97 1213.02 L1816.39 1213.02 L1815.8 1213.02 L1815.21 1213.02 L1814.63 1213.02 L1814.04 1213.02 L1813.45 1213.02 L1812.87 1213.02 L1812.28 1213.02 L1811.69 1213.02 L1811.11 1213.02 L1810.52 1213.02 L1809.94 1213.02 L1809.35 1213.02 L1808.76 1213.02 L1808.18 1213.02 L1807.59 1213.02 L1807 1213.02 L1806.42 1213.02 L1805.83 1213.02 L1805.24 1213.02 L1804.66 1213.02 L1804.07 1213.02 L1803.48 1213.02 L1802.9 1213.02 L1802.31 1213.02 L1801.73 1213.02 L1801.14 1213.02 L1800.55 1213.02 L1799.97 1213.02 L1799.38 1213.02 L1798.79 1213.02 L1798.21 1213.02 L1797.62 1213.02 L1797.03 1213.02 L1796.45 1213.02 L1795.86 1213.02 L1795.27 1213.02 L1794.69 1213.02 L1794.1 1213.02 L1793.52 1213.02 L1792.93 1213.02 L1792.34 1213.02 L1791.76 1213.02 L1791.17 1213.02 L1790.58 1213.02 L1790 1213.02 L1789.41 1213.02 L1788.82 1213.02 L1788.24 1213.02 L1787.65 1213.02 L1787.06 1213.02 L1786.48 1213.02 L1785.89 1213.02 L1785.31 1213.02 L1784.72 1213.02 L1784.13 1213.02 L1783.55 1213.02 L1782.96 1213.02 L1782.37 1213.02 L1781.79 1213.02 L1781.2 1213.02 L1780.61 1213.02 L1780.03 1213.02 L1779.44 1213.02 L1778.86 1213.02 L1778.27 1213.02 L1777.68 1213.02 L1777.1 1213.02 L1776.51 1213.02 L1775.92 1213.02 L1775.34 1213.02 L1774.75 1213.02 L1774.16 1213.02 L1773.58 1213.02 L1772.99 1213.02 L1772.4 1213.02 L1771.82 1213.02 L1771.23 1213.02 L1770.65 1213.02 L1770.06 1213.02 L1769.47 1213.02 L1768.89 1213.02 L1768.3 1213.02 L1767.71 1213.02 L1767.13 1213.02 L1766.54 1213.02 L1765.95 1213.02 L1765.37 1213.02 L1764.78 1213.02 L1764.19 1213.02 L1763.61 1213.02 L1763.02 1213.02 L1762.44 1213.02 L1761.85 1213.02 L1761.26 1213.02 L1760.68 1213.02 L1760.09 1213.02 L1759.5 1213.02 L1758.92 1213.02 L1758.33 1213.02 L1757.74 1213.02 L1757.16 1213.02 L1756.57 1213.02 L1755.99 1213.02 L1755.4 1213.02 L1754.81 1213.02 L1754.23 1213.02 L1753.64 1213.02 L1753.05 1213.02 L1752.47 1213.02 L1751.88 1213.02 L1751.29 1213.02 L1750.71 1213.02 L1750.12 1213.02 L1749.53 1213.02 L1748.95 1213.02 L1748.36 1213.02 L1747.78 1213.02 L1747.19 1213.02 L1746.6 1213.02 L1746.02 1213.02 L1745.43 1213.02 L1744.84 1213.02 L1744.26 1213.02 L1743.67 1213.02 L1743.08 1213.02 L1742.5 1213.02 L1741.91 1213.02 L1741.32 1213.02 L1740.74 1213.02 L1740.15 1213.02 L1739.57 1213.02 L1738.98 1213.02 L1738.39 1213.02 L1737.81 1213.02 L1737.22 1213.02 L1736.63 1213.02 L1736.05 1213.02 L1735.46 1213.02 L1734.87 1213.02 L1734.29 1213.02 L1733.7 1213.02 L1733.11 1213.02 L1732.53 1213.02 L1731.94 1213.02 L1731.36 1213.02 L1730.77 1213.02 L1730.18 1213.02 L1729.6 1213.02 L1729.01 1213.02 L1728.42 1213.02 L1727.84 1213.02 L1727.25 1213.02 L1726.66 1213.02 L1726.08 1213.02 L1725.49 1213.02 L1724.91 1213.02 L1724.32 1213.02 L1723.73 1213.02 L1723.15 1213.02 L1722.56 1213.02 L1721.97 1213.02 L1721.39 1213.02 L1720.8 1213.02 L1720.21 1213.02 L1719.63 1213.02 L1719.04 1213.02 L1718.45 1213.02 L1717.87 1213.02 L1717.28 1213.02 L1716.7 1213.02 L1716.11 1213.02 L1715.52 1213.02 L1714.94 1213.02 L1714.35 1213.02 L1713.76 1213.02 L1713.18 1213.02 L1712.59 1213.02 L1712 1213.02 L1711.42 1213.02 L1710.83 1213.02 L1710.24 1213.02 L1709.66 1213.02 L1709.07 1213.02 L1708.49 1213.02 L1707.9 1213.02 L1707.31 1213.02 L1706.73 1213.02 L1706.14 1213.02 L1705.55 1213.02 L1704.97 1213.02 L1704.38 1213.02 L1703.79 1213.02 L1703.21 1213.02 L1702.62 1213.02 L1702.04 1213.02 L1701.45 1213.02 L1700.86 1213.02 L1700.28 1213.02 L1699.69 1213.02 L1699.1 1213.02 L1698.52 1213.02 L1697.93 1213.02 L1697.34 1213.02 L1696.76 1213.02 L1696.17 1213.02 L1695.58 1213.02 L1695 1213.02 L1694.41 1213.02 L1693.83 1213.02 L1693.24 1213.02 L1692.65 1213.02 L1692.07 1213.02 L1691.48 1213.02 L1690.89 1213.02 L1690.31 1213.02 L1689.72 1213.02 L1689.13 1213.02 L1688.55 1213.02 L1687.96 1213.02 L1687.37 1213.02 L1686.79 1213.02 L1686.2 1213.02 L1685.62 1213.02 L1685.03 1213.02 L1684.44 1213.02 L1683.86 1213.02 L1683.27 1213.02 L1682.68 1213.02 L1682.1 1213.02 L1681.51 1213.02 L1680.92 1213.02 L1680.34 1213.02 L1679.75 1213.02 L1679.17 1213.02 L1678.58 1213.02 L1677.99 1213.02 L1677.41 1213.02 L1676.82 1213.02 L1676.23 1213.02 L1675.65 1213.02 L1675.06 1213.02 L1674.47 1213.02 L1673.89 1213.02 L1673.3 1213.02 L1672.71 1213.02 L1672.13 1213.02 L1671.54 1213.02 L1670.96 1213.02 L1670.37 1213.02 L1669.78 1213.02 L1669.2 1213.02 L1668.61 1213.02 L1668.02 1213.02 L1667.44 1213.02 L1666.85 1213.02 L1666.26 1213.02 L1665.68 1213.02 L1665.09 1213.02 L1664.5 1213.02 L1663.92 1213.02 L1663.33 1213.02 L1662.75 1213.02 L1662.16 1213.02 L1661.57 1213.02 L1660.99 1213.02 L1660.4 1213.02 L1659.81 1213.02 L1659.23 1213.02 L1658.64 1213.02 L1658.05 1213.02 L1657.47 1213.02 L1656.88 1213.02 L1656.29 1213.02 L1655.71 1213.02 L1655.12 1213.02 L1654.54 1213.02 L1653.95 1213.02 L1653.36 1213.02 L1652.78 1213.02 L1652.19 1213.02 L1651.6 1213.02 L1651.02 1213.02 L1650.43 1213.02 L1649.84 1213.02 L1649.26 1213.02 L1648.67 1213.02 L1648.09 1213.02 L1647.5 1213.02 L1646.91 1213.02 L1646.33 1213.02 L1645.74 1213.02 L1645.15 1213.02 L1644.57 1213.02 L1643.98 1213.02 L1643.39 1213.02 L1642.81 1213.02 L1642.22 1213.02 L1641.63 1213.02 L1641.05 1213.02 L1640.46 1213.02 L1639.88 1213.02 L1639.29 1213.02 L1638.7 1213.02 L1638.12 1213.02 L1637.53 1213.02 L1636.94 1213.02 L1636.36 1213.02 L1635.77 1213.02 L1635.18 1213.02 L1634.6 1213.02 L1634.01 1213.02 L1633.42 1213.02 L1632.84 1213.02 L1632.25 1213.02 L1631.67 1213.02 L1631.08 1213.02 L1630.49 1213.02 L1629.91 1213.02 L1629.32 1213.02 L1628.73 1213.02 L1628.15 1213.02 L1627.56 1213.02 L1626.97 1213.02 L1626.39 1213.02 L1625.8 1213.02 L1625.22 1213.02 L1624.63 1213.02 L1624.04 1213.02 L1623.46 1213.02 L1622.87 1213.02 L1622.28 1213.02 L1621.7 1213.02 L1621.11 1213.02 L1620.52 1213.02 L1619.94 1213.02 L1619.35 1213.02 L1618.76 1213.02 L1618.18 1213.02 L1617.59 1213.02 L1617.01 1213.02 L1616.42 1213.02 L1615.83 1213.02 L1615.25 1213.02 L1614.66 1213.02 L1614.07 1213.02 L1613.49 1213.02 L1612.9 1213.02 L1612.31 1213.02 L1611.73 1213.02 L1611.14 1213.02 L1610.55 1213.02 L1609.97 1213.02 L1609.38 1213.02 L1608.8 1213.02 L1608.21 1213.02 L1607.62 1213.02 L1607.04 1213.02 L1606.45 1213.02 L1605.86 1213.02 L1605.28 1213.02 L1604.69 1213.02 L1604.1 1213.02 L1603.52 1213.02 L1602.93 1213.02 L1602.34 1213.02 L1601.76 1213.02 L1601.17 1213.02 L1600.59 1213.02 L1600 1213.02 L1599.41 1213.02 L1598.83 1213.02 L1598.24 1213.02 L1597.65 1213.02 L1597.07 1213.02 L1596.48 1213.02 L1595.89 1213.02 L1595.31 1213.02 L1594.72 1213.02 L1594.14 1213.02 L1593.55 1213.02 L1592.96 1213.02 L1592.38 1213.02 L1591.79 1213.02 L1591.2 1213.02 L1590.62 1213.02 L1590.03 1213.02 L1589.44 1213.02 L1588.86 1213.02 L1588.27 1213.02 L1587.68 1213.02 L1587.1 1213.02 L1586.51 1213.02 L1585.93 1213.02 L1585.34 1213.02 L1584.75 1213.02 L1584.17 1213.02 L1583.58 1213.02 L1582.99 1213.02 L1582.41 1213.02 L1581.82 1213.02 L1581.23 1213.02 L1580.65 1213.02 L1580.06 1213.02 L1579.47 1213.02 L1578.89 1213.02 L1578.3 1213.02 L1577.72 1213.02 L1577.13 1213.02 L1576.54 1213.02 L1575.96 1213.02 L1575.37 1213.02 L1574.78 1213.02 L1574.2 1213.02 L1573.61 1213.02 L1573.02 1213.02 L1572.44 1213.02 L1571.85 1213.02 L1571.27 1213.02 L1570.68 1213.02 L1570.09 1213.02 L1569.51 1213.02 L1568.92 1213.02 L1568.33 1213.02 L1567.75 1213.02 L1567.16 1213.02 L1566.57 1213.02 L1565.99 1213.02 L1565.4 1213.02 L1564.81 1213.02 L1564.23 1213.02 L1563.64 1213.02 L1563.06 1213.02 L1562.47 1213.02 L1561.88 1213.02 L1561.3 1213.02 L1560.71 1213.02 L1560.12 1213.02 L1559.54 1213.02 L1558.95 1213.02 L1558.36 1213.02 L1557.78 1213.02 L1557.19 1213.02 L1556.6 1213.02 L1556.02 1213.02 L1555.43 1213.02 L1554.85 1213.02 L1554.26 1213.02 L1553.67 1213.02 L1553.09 1213.02 L1552.5 1213.02 L1551.91 1213.02 L1551.33 1213.02 L1550.74 1213.02 L1550.15 1213.02 L1549.57 1213.02 L1548.98 1213.02 L1548.4 1213.02 L1547.81 1213.02 L1547.22 1213.02 L1546.64 1213.02 L1546.05 1213.02 L1545.46 1213.02 L1544.88 1213.02 L1544.29 1213.02 L1543.7 1213.02 L1543.12 1213.02 L1542.53 1213.02 L1541.94 1213.02 L1541.36 1213.02 L1540.77 1213.02 L1540.19 1213.02 L1539.6 1213.02 L1539.01 1213.02 L1538.43 1213.02 L1537.84 1213.02 L1537.25 1213.02 L1536.67 1213.02 L1536.08 1213.02 L1535.49 1213.02 L1534.91 1213.02 L1534.32 1213.02 L1533.73 1213.02 L1533.15 1213.02 L1532.56 1213.02 L1531.98 1213.02 L1531.39 1213.02 L1530.8 1213.02 L1530.22 1213.02 L1529.63 1213.02 L1529.04 1213.02 L1528.46 1213.02 L1527.87 1213.02 L1527.28 1213.02 L1526.7 1213.02 L1526.11 1213.02 L1525.52 1213.02 L1524.94 1213.02 L1524.35 1213.02 L1523.77 1213.02 L1523.18 1213.02 L1522.59 1213.02 L1522.01 1213.02 L1521.42 1213.02 L1520.83 1213.02 L1520.25 1213.02 L1519.66 1213.02 L1519.07 1213.02 L1518.49 1213.02 L1517.9 1213.02 L1517.32 1213.02 L1516.73 1213.02 L1516.14 1213.02 L1515.56 1213.02 L1514.97 1213.02 L1514.38 1213.02 L1513.8 1213.02 L1513.21 1213.02 L1512.62 1213.02 L1512.04 1213.02 L1511.45 1213.02 L1510.86 1213.02 L1510.28 1213.02 L1509.69 1213.02 L1509.11 1213.02 L1508.52 1213.02 L1507.93 1213.02 L1507.35 1213.02 L1506.76 1213.02 L1506.17 1213.02 L1505.59 1213.02 L1505 1213.02 L1504.41 1213.02 L1503.83 1213.02 L1503.24 1213.02 L1502.65 1213.02 L1502.07 1213.02 L1501.48 1213.02 L1500.9 1213.02 L1500.31 1213.02 L1499.72 1213.02 L1499.14 1213.02 L1498.55 1213.02 L1497.96 1213.02 L1497.38 1213.02 L1496.79 1213.02 L1496.2 1213.02 L1495.62 1213.02 L1495.03 1213.02 L1494.45 1213.02 L1493.86 1213.02 L1493.27 1213.02 L1492.69 1213.02 L1492.1 1213.02 L1491.51 1213.02 L1490.93 1213.02 L1490.34 1213.02 L1489.75 1213.02 L1489.17 1213.02 L1488.58 1213.02 L1487.99 1213.02 L1487.41 1213.02 L1486.82 1213.02 L1486.24 1213.02 L1485.65 1213.02 L1485.06 1213.02 L1484.48 1213.02 L1483.89 1213.02 L1483.3 1213.02 L1482.72 1213.02 L1482.13 1213.02 L1481.54 1213.02 L1480.96 1213.02 L1480.37 1213.02 L1479.78 1213.02 L1479.2 1213.02 L1478.61 1213.02 L1478.03 1213.02 L1477.44 1213.02 L1476.85 1213.02 L1476.27 1213.02 L1475.68 1213.02 L1475.09 1213.02 L1474.51 1213.02 L1473.92 1213.02 L1473.33 1213.02 L1472.75 1213.02 L1472.16 1213.02 L1471.57 1213.02 L1470.99 1213.02 L1470.4 1213.02 L1469.82 1213.02 L1469.23 1213.02 L1468.64 1213.02 L1468.06 1213.02 L1467.47 1213.02 L1466.88 1213.02 L1466.3 1213.02 L1465.71 1213.02 L1465.12 1213.02 L1464.54 1213.02 L1463.95 1213.02 L1463.37 1213.02 L1462.78 1213.02 L1462.19 1213.02 L1461.61 1213.02 L1461.02 1213.02 L1460.43 1213.02 L1459.85 1213.02 L1459.26 1213.02 L1458.67 1213.02 L1458.09 1213.02 L1457.5 1213.02 L1456.91 1213.02 L1456.33 1213.02 L1455.74 1213.02 L1455.16 1213.02 L1454.57 1213.02 L1453.98 1213.02 L1453.4 1213.02 L1452.81 1213.02 L1452.22 1213.02 L1451.64 1213.02 L1451.05 1213.02 L1450.46 1213.02 L1449.88 1213.02 L1449.29 1213.02 L1448.7 1213.02 L1448.12 1213.02 L1447.53 1213.02 L1446.95 1213.02 L1446.36 1213.02 L1445.77 1213.02 L1445.19 1213.02 L1444.6 1213.02 L1444.01 1213.02 L1443.43 1213.02 L1442.84 1213.02 L1442.25 1213.02 L1441.67 1213.02 L1441.08 1213.02 L1440.5 1213.02 L1439.91 1213.02 L1439.32 1213.02 L1438.74 1213.02 L1438.15 1213.02 L1437.56 1213.02 L1436.98 1213.02 L1436.39 1213.02 L1435.8 1213.02 L1435.22 1213.02 L1434.63 1213.02 L1434.04 1213.02 L1433.46 1213.02 L1432.87 1213.02 L1432.29 1213.02 L1431.7 1213.02 L1431.11 1213.02 L1430.53 1213.02 L1429.94 1213.02 L1429.35 1213.02 L1428.77 1213.02 L1428.18 1213.02 L1427.59 1213.02 L1427.01 1213.02 L1426.42 1213.02 L1425.83 1213.02 L1425.25 1213.02 L1424.66 1213.02 L1424.08 1213.02 L1423.49 1213.02 L1422.9 1213.02 L1422.32 1213.02 L1421.73 1213.02 L1421.14 1213.02 L1420.56 1213.02 L1419.97 1213.02 L1419.38 1213.02 L1418.8 1213.02 L1418.21 1213.02 L1417.63 1213.02 L1417.04 1213.02 L1416.45 1213.02 L1415.87 1213.02 L1415.28 1213.02 L1414.69 1213.02 L1414.11 1213.02 L1413.52 1213.02 L1412.93 1213.02 L1412.35 1213.02 L1411.76 1213.02 L1411.17 1213.02 L1410.59 1213.02 L1410 1213.02 L1409.42 1213.02 L1408.83 1213.02 L1408.24 1213.02 L1407.66 1213.02 L1407.07 1213.02 L1406.48 1213.02 L1405.9 1213.02 L1405.31 1213.02 L1404.72 1213.02 L1404.14 1213.02 L1403.55 1213.02 L1402.96 1213.02 L1402.38 1213.02 L1401.79 1213.02 L1401.21 1213.02 L1400.62 1213.02 L1400.03 1213.02 L1399.45 1213.02 L1398.86 1213.02 L1398.27 1213.02 L1397.69 1213.02 L1397.1 1213.02 L1396.51 1213.02 L1395.93 1213.02 L1395.34 1213.02 L1394.75 1213.02 L1394.17 1213.02 L1393.58 1213.02 L1393 1213.02 L1392.41 1213.02 L1391.82 1213.02 L1391.24 1213.02 L1390.65 1213.02 L1390.06 1213.02 L1389.48 1213.02 L1388.89 1213.02 L1388.3 1213.02 L1387.72 1213.02 L1387.13 1213.02 L1386.55 1213.02 L1385.96 1213.02 L1385.37 1213.02 L1384.79 1213.02 L1384.2 1213.02 L1383.61 1213.02 L1383.03 1213.02 L1382.44 1213.02 L1381.85 1213.02 L1381.27 1213.02 L1380.68 1213.02 L1380.09 1213.02 L1379.51 1213.02 L1378.92 1213.02 L1378.34 1213.02 L1377.75 1213.02 L1377.16 1213.02 L1376.58 1213.02 L1375.99 1213.02 L1375.4 1213.02 L1374.82 1213.02 L1374.23 1213.02 L1373.64 1213.02 L1373.06 1213.02 L1372.47 1213.02 L1371.88 1213.02 L1371.3 1213.02 L1370.71 1213.02 L1370.13 1213.02 L1369.54 1213.02 L1368.95 1213.02 L1368.37 1213.02 L1367.78 1213.02 L1367.19 1213.02 L1366.61 1213.02 L1366.02 1213.02 L1365.43 1213.02 L1364.85 1213.02 L1364.26 1213.02 L1363.68 1213.02 L1363.09 1213.02 L1362.5 1213.02 L1361.92 1213.02 L1361.33 1213.02 L1360.74 1213.02 L1360.16 1213.02 L1359.57 1213.02 L1358.98 1213.02 L1358.4 1213.02 L1357.81 1213.02 L1357.22 1213.02 L1356.64 1213.02 L1356.05 1213.02 L1355.47 1213.02 L1354.88 1213.02 L1354.29 1213.02 L1353.71 1213.02 L1353.12 1213.02 L1352.53 1213.02 L1351.95 1213.02 L1351.36 1213.02 L1350.77 1213.02 L1350.19 1213.02 L1349.6 1213.02 L1349.01 1213.02 L1348.43 1213.02 L1347.84 1213.02 L1347.26 1213.02 L1346.67 1213.02 L1346.08 1213.02 L1345.5 1213.02 L1344.91 1213.02 L1344.32 1213.02 L1343.74 1213.02 L1343.15 1213.02 L1342.56 1213.02 L1341.98 1213.02 L1341.39 1213.02 L1340.8 1213.02 L1340.22 1213.02 L1339.63 1213.02 L1339.05 1213.02 L1338.46 1213.02 L1337.87 1213.02 L1337.29 1213.02 L1336.7 1213.02 L1336.11 1213.02 L1335.53 1213.02 L1334.94 1213.02 L1334.35 1213.02 L1333.77 1213.02 L1333.18 1213.02 L1332.6 1213.02 L1332.01 1213.02 L1331.42 1213.02 L1330.84 1213.02 L1330.25 1213.02 L1329.66 1213.02 L1329.08 1213.02 L1328.49 1213.02 L1327.9 1213.02 L1327.32 1213.02 L1326.73 1213.02 L1326.14 1213.02 L1325.56 1213.02 L1324.97 1213.02 L1324.39 1213.02 L1323.8 1213.02 L1323.21 1213.02 L1322.63 1213.02 L1322.04 1213.02 L1321.45 1213.02 L1320.87 1213.02 L1320.28 1213.02 L1319.69 1213.02 L1319.11 1213.02 L1318.52 1213.02 L1317.93 1213.02 L1317.35 1213.02 L1316.76 1213.02 L1316.18 1213.02 L1315.59 1213.02 L1315 1213.02 L1314.42 1213.02 L1313.83 1213.02 L1313.24 1213.02 L1312.66 1213.02 L1312.07 1213.02 L1311.48 1213.02 L1310.9 1213.02 L1310.31 1213.02 L1309.73 1213.02 L1309.14 1213.02 L1308.55 1213.02 L1307.97 1213.02 L1307.38 1213.02 L1306.79 1213.02 L1306.21 1213.02 L1305.62 1213.02 L1305.03 1213.02 L1304.45 1213.02 L1303.86 1213.02 L1303.27 1213.02 L1302.69 1213.02 L1302.1 1213.02 L1301.52 1213.02 L1300.93 1213.02 L1300.34 1213.02 L1299.76 1213.02 L1299.17 1213.02 L1298.58 1213.02 L1298 1213.02 L1297.41 1213.02 L1296.82 1213.02 L1296.24 1213.02 L1295.65 1213.02 L1295.06 1213.02 L1294.48 1213.02 L1293.89 1213.02 L1293.31 1213.02 L1292.72 1213.02 L1292.13 1213.02 L1291.55 1213.02 L1290.96 1213.02 L1290.37 1213.02 L1289.79 1213.02 L1289.2 1213.02 L1288.61 1213.02 L1288.03 1213.02 L1287.44 1213.02 L1286.86 1213.02 L1286.27 1213.02 L1285.68 1213.02 L1285.1 1213.02 L1284.51 1213.02 L1283.92 1213.02 L1283.34 1213.02 L1282.75 1213.02 L1282.16 1213.02 L1281.58 1213.02 L1280.99 1213.02 L1280.4 1213.02 L1279.82 1213.02 L1279.23 1213.02 L1278.65 1213.02 L1278.06 1213.02 L1277.47 1213.02 L1276.89 1213.02 L1276.3 1213.02 L1275.71 1213.02 L1275.13 1213.02 L1274.54 1213.02 L1273.95 1213.02 L1273.37 1213.02 L1272.78 1213.02 L1272.19 1213.02 L1271.61 1213.02 L1271.02 1213.02 L1270.44 1213.02 L1269.85 1213.02 L1269.26 1213.02 L1268.68 1213.02 L1268.09 1213.02 L1267.5 1213.02 L1266.92 1213.02 L1266.33 1213.02 L1265.74 1213.02 L1265.16 1213.02 L1264.57 1213.02 L1263.98 1213.02 L1263.4 1213.02 L1262.81 1213.02 L1262.23 1213.02 L1261.64 1213.02 L1261.05 1213.02 L1260.47 1213.02 L1259.88 1213.02 L1259.29 1213.02 L1258.71 1213.02 L1258.12 1213.02 L1257.53 1213.02 L1256.95 1213.02 L1256.36 1213.02 L1255.78 1213.02 L1255.19 1213.02 L1254.6 1213.02 L1254.02 1213.02 L1253.43 1213.02 L1252.84 1213.02 L1252.26 1213.02 L1251.67 1213.02 L1251.08 1213.02 L1250.5 1213.02 L1249.91 1213.02 L1249.32 1213.02 L1248.74 1213.02 L1248.15 1213.02 L1247.57 1213.02 L1246.98 1213.02 L1246.39 1213.02 L1245.81 1213.02 L1245.22 1213.02 L1244.63 1213.02 L1244.05 1213.02 L1243.46 1213.02 L1242.87 1213.02 L1242.29 1213.02 L1241.7 1213.02 L1241.11 1213.02 L1240.53 1213.02 L1239.94 1213.02 L1239.36 1213.02 L1238.77 1213.02 L1238.18 1213.02 L1237.6 1213.02 L1237.01 1213.02 L1236.42 1213.02 L1235.84 1213.02 L1235.25 1213.02 L1234.66 1213.02 L1234.08 1213.02 L1233.49 1213.02 L1232.91 1213.02 L1232.32 1213.02 L1231.73 1213.02 L1231.15 1213.02 L1230.56 1213.02 L1229.97 1213.02 L1229.39 1213.02 L1228.8 1213.02 L1228.21 1213.02 L1227.63 1213.02 L1227.04 1213.02 L1226.45 1213.02 L1225.87 1213.02 L1225.28 1213.02 L1224.7 1213.02 L1224.11 1213.02 L1223.52 1213.02 L1222.94 1213.02 L1222.35 1213.02 L1221.76 1213.02 L1221.18 1213.02 L1220.59 1213.02 L1220 1213.02 L1219.42 1213.02 L1218.83 1213.02 L1218.24 1213.02 L1217.66 1213.02 L1217.07 1213.02 L1216.49 1213.02 L1215.9 1213.02 L1215.31 1213.02 L1214.73 1213.02 L1214.14 1213.02 L1213.55 1213.02 L1212.97 1213.02 L1212.38 1213.02 L1211.79 1213.02 L1211.21 1213.02 L1210.62 1213.02 L1210.03 1213.02 L1209.45 1213.02 L1208.86 1213.02 L1208.28 1213.02 L1207.69 1213.02 L1207.1 1213.02 L1206.52 1213.02 L1205.93 1213.02 L1205.34 1213.02 L1204.76 1213.02 L1204.17 1213.02 L1203.58 1213.02 L1203 1213.02 L1202.41 1213.02 L1201.83 1213.02 L1201.24 1213.02 L1200.65 1213.02 L1200.07 1213.02 L1199.48 1213.02 L1198.89 1213.02 L1198.31 1213.02 L1197.72 1213.02 L1197.13 1213.02 L1196.55 1213.02 L1195.96 1213.02 L1195.37 1213.02 L1194.79 1213.02 L1194.2 1213.02 L1193.62 1213.02 L1193.03 1213.02 L1192.44 1213.02 L1191.86 1213.02 L1191.27 1213.02 L1190.68 1213.02 L1190.1 1213.02 L1189.51 1213.02 L1188.92 1213.02 L1188.34 1213.02 L1187.75 1213.02 L1187.16 1213.02 L1186.58 1213.02 L1185.99 1213.02 L1185.41 1213.02 L1184.82 1213.02 L1184.23 1213.02 L1183.65 1213.02 L1183.06 1213.02 L1182.47 1213.02 L1181.89 1213.02 L1181.3 1213.02 L1180.71 1213.02 L1180.13 1213.02 L1179.54 1213.02 L1178.96 1213.02 L1178.37 1213.02 L1177.78 1213.02 L1177.2 1213.02 L1176.61 1213.02 L1176.02 1213.02 L1175.44 1213.02 L1174.85 1213.02 L1174.26 1213.02 L1173.68 1213.02 L1173.09 1213.02 L1172.5 1213.02 L1171.92 1213.02 L1171.33 1213.02 L1170.75 1213.02 L1170.16 1213.02 L1169.57 1213.02 L1168.99 1213.02 L1168.4 1213.02 L1167.81 1213.02 L1167.23 1213.02 L1166.64 1213.02 L1166.05 1213.02 L1165.47 1213.02 L1164.88 1213.02 L1164.29 1213.02 L1163.71 1213.02 L1163.12 1213.02 L1162.54 1213.02 L1161.95 1213.02 L1161.36 1213.02 L1160.78 1213.02 L1160.19 1213.02 L1159.6 1213.02 L1159.02 1213.02 L1158.43 1213.02 L1157.84 1213.02 L1157.26 1213.02 L1156.67 1213.02 L1156.09 1213.02 L1155.5 1213.02 L1154.91 1213.02 L1154.33 1213.02 L1153.74 1213.02 L1153.15 1213.02 L1152.57 1213.02 L1151.98 1213.02 L1151.39 1213.02 L1150.81 1213.02 L1150.22 1213.02 L1149.63 1213.02 L1149.05 1213.02 L1148.46 1213.02 L1147.88 1213.02 L1147.29 1213.02 L1146.7 1213.02 L1146.12 1213.02 L1145.53 1213.02 L1144.94 1213.02 L1144.36 1213.02 L1143.77 1213.02 L1143.18 1213.02 L1142.6 1213.02 L1142.01 1213.02 L1141.42 1213.02 L1140.84 1213.02 L1140.25 1213.02 L1139.67 1213.02 L1139.08 1213.02 L1138.49 1213.02 L1137.91 1213.02 L1137.32 1213.02 L1136.73 1213.02 L1136.15 1213.02 L1135.56 1213.02 L1134.97 1213.02 L1134.39 1213.02 L1133.8 1213.02 L1133.21 1213.02 L1132.63 1213.02 L1132.04 1213.02 L1131.46 1213.02 L1130.87 1213.02 L1130.28 1213.02 L1129.7 1213.02 L1129.11 1213.02 L1128.52 1213.02 L1127.94 1213.02 L1127.35 1213.02 L1126.76 1213.02 L1126.18 1213.02 L1125.59 1213.02 L1125.01 1213.02 L1124.42 1213.02 L1123.83 1213.02 L1123.25 1213.02 L1122.66 1213.02 L1122.07 1213.02 L1121.49 1213.02 L1120.9 1213.02 L1120.31 1213.02 L1119.73 1213.02 L1119.14 1213.02 L1118.55 1213.02 L1117.97 1213.02 L1117.38 1213.02 L1116.8 1213.02 L1116.21 1213.02 L1115.62 1213.02 L1115.04 1213.02 L1114.45 1213.02 L1113.86 1213.02 L1113.28 1213.02 L1112.69 1213.02 L1112.1 1213.02 L1111.52 1213.02 L1110.93 1213.02 L1110.34 1213.02 L1109.76 1213.02 L1109.17 1213.02 L1108.59 1213.02 L1108 1213.02 L1107.41 1213.02 L1106.83 1213.02 L1106.24 1213.02 L1105.65 1213.02 L1105.07 1213.02 L1104.48 1213.02 L1103.89 1213.02 L1103.31 1213.02 L1102.72 1213.02 L1102.14 1213.02 L1101.55 1213.02 L1100.96 1213.02 L1100.38 1213.02 L1099.79 1213.02 L1099.2 1213.02 L1098.62 1213.02 L1098.03 1213.02 L1097.44 1213.02 L1096.86 1213.02 L1096.27 1213.02 L1095.68 1213.02 L1095.1 1213.02 L1094.51 1213.02 L1093.93 1213.02 L1093.34 1213.02 L1092.75 1213.02 L1092.17 1213.02 L1091.58 1213.02 L1090.99 1213.02 L1090.41 1213.02 L1089.82 1213.02 L1089.23 1213.02 L1088.65 1213.02 L1088.06 1213.02 L1087.47 1213.02 L1086.89 1213.02 L1086.3 1213.02 L1085.72 1213.02 L1085.13 1213.02 L1084.54 1213.02 L1083.96 1213.02 L1083.37 1213.02 L1082.78 1213.02 L1082.2 1213.02 L1081.61 1213.02 L1081.02 1213.02 L1080.44 1213.02 L1079.85 1213.02 L1079.26 1213.02 L1078.68 1213.02 L1078.09 1213.02 L1077.51 1213.02 L1076.92 1213.02 L1076.33 1213.02 L1075.75 1213.02 L1075.16 1213.02 L1074.57 1213.02 L1073.99 1213.02 L1073.4 1213.02 L1072.81 1213.02 L1072.23 1213.02 L1071.64 1213.02 L1071.06 1213.02 L1070.47 1213.02 L1069.88 1213.02 L1069.3 1213.02 L1068.71 1213.02 L1068.12 1213.02 L1067.54 1213.02 L1066.95 1213.02 L1066.36 1213.02 L1065.78 1213.02 L1065.19 1213.02 L1064.6 1213.02 L1064.02 1213.02 L1063.43 1213.02 L1062.85 1213.02 L1062.26 1213.02 L1061.67 1213.02 L1061.09 1213.02 L1060.5 1213.02 L1059.91 1213.02 L1059.33 1213.02 L1058.74 1213.02 L1058.15 1213.02 L1057.57 1213.02 L1056.98 1213.02 L1056.39 1213.02 L1055.81 1213.02 L1055.22 1213.02 L1054.64 1213.02 L1054.05 1213.02 L1053.46 1213.02 L1052.88 1213.02 L1052.29 1213.02 L1051.7 1213.02 L1051.12 1213.02 L1050.53 1213.02 L1049.94 1213.02 L1049.36 1213.02 L1048.77 1213.02 L1048.19 1213.02 L1047.6 1213.02 L1047.01 1213.02 L1046.43 1213.02 L1045.84 1213.02 L1045.25 1213.02 L1044.67 1213.02 L1044.08 1213.02 L1043.49 1213.02 L1042.91 1213.02 L1042.32 1213.02 L1041.73 1213.02 L1041.15 1213.02 L1040.56 1213.02 L1039.98 1213.02 L1039.39 1213.02 L1038.8 1213.02 L1038.22 1213.02 L1037.63 1213.02 L1037.04 1213.02 L1036.46 1213.02 L1035.87 1213.02 L1035.28 1213.02 L1034.7 1213.02 L1034.11 1213.02 L1033.52 1213.02 L1032.94 1213.02 L1032.35 1213.02 L1031.77 1213.02 L1031.18 1213.02 L1030.59 1213.02 L1030.01 1213.02 L1029.42 1213.02 L1028.83 1213.02 L1028.25 1213.02 L1027.66 1213.02 L1027.07 1213.02 L1026.49 1213.02 L1025.9 1213.02 L1025.32 1213.02 L1024.73 1213.02 L1024.14 1213.02 L1023.56 1213.02 L1022.97 1213.02 L1022.38 1213.02 L1021.8 1213.02 L1021.21 1213.02 L1020.62 1213.02 L1020.04 1213.02 L1019.45 1213.02 L1018.86 1213.02 L1018.28 1213.02 L1017.69 1213.02 L1017.11 1213.02 L1016.52 1213.02 L1015.93 1213.02 L1015.35 1213.02 L1014.76 1213.02 L1014.17 1213.02 L1013.59 1213.02 L1013 1213.02 L1012.41 1213.02 L1011.83 1213.02 L1011.24 1213.02 L1010.65 1213.02 L1010.07 1213.02 L1009.48 1213.02 L1008.9 1213.02 L1008.31 1213.02 L1007.72 1213.02 L1007.14 1213.02 L1006.55 1213.02 L1005.96 1213.02 L1005.38 1213.02 L1004.79 1213.02 L1004.2 1213.02 L1003.62 1213.02 L1003.03 1213.02 L1002.44 1213.02 L1001.86 1213.02 L1001.27 1213.02 L1000.69 1213.02 L1000.1 1213.02 L999.513 1213.02 L998.926 1213.02 L998.34 1213.02 L997.754 1213.02 L997.167 1213.02 L996.581 1213.02 L995.994 1213.02 L995.408 1213.02 L994.822 1213.02 L994.235 1213.02 L993.649 1213.02 L993.062 1213.02 L992.476 1213.02 L991.889 1213.02 L991.303 1213.02 L990.717 1213.02 L990.13 1213.02 L989.544 1213.02 L988.957 1213.02 L988.371 1213.02 L987.785 1213.02 L987.198 1213.02 L986.612 1213.02 L986.025 1213.02  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.12 986.612,1213.12 987.198,1213.12 987.785,1213.12 988.371,1213.12 988.957,1213.12 989.544,1213.12 990.13,1213.12 990.717,1213.12 991.303,1213.12 991.889,1213.12 992.476,1213.12 993.062,1213.12 993.649,1213.12 994.235,1213.12 994.822,1213.12 995.408,1213.12 995.994,1213.12 996.581,1213.12 997.167,1213.12 997.754,1213.12 998.34,1213.12 998.926,1213.12 999.513,1213.12 1000.1,1213.12 1000.69,1213.12 1001.27,1213.12 1001.86,1213.12 1002.44,1213.12 1003.03,1213.12 1003.62,1213.12 1004.2,1213.12 1004.79,1213.12 1005.38,1213.12 1005.96,1213.12 1006.55,1213.12 1007.14,1213.12 1007.72,1213.12 1008.31,1213.12 1008.9,1213.12 1009.48,1213.12 1010.07,1213.12 1010.65,1213.12 1011.24,1213.12 1011.83,1213.12 1012.41,1213.12 1013,1213.12 1013.59,1213.12 1014.17,1213.12 1014.76,1213.12 1015.35,1213.12 1015.93,1213.12 1016.52,1213.12 1017.11,1213.12 1017.69,1213.12 1018.28,1213.12 1018.86,1213.12 1019.45,1213.12 1020.04,1213.12 1020.62,1213.12 1021.21,1213.12 1021.8,1213.12 1022.38,1213.12 1022.97,1213.12 1023.56,1213.12 1024.14,1213.12 1024.73,1213.12 1025.32,1213.12 1025.9,1213.12 1026.49,1213.12 1027.07,1213.12 1027.66,1213.12 1028.25,1213.12 1028.83,1213.12 1029.42,1213.12 1030.01,1213.12 1030.59,1213.12 1031.18,1213.12 1031.77,1213.12 1032.35,1213.12 1032.94,1213.12 1033.52,1213.12 1034.11,1213.12 1034.7,1213.12 1035.28,1213.12 1035.87,1213.12 1036.46,1213.12 1037.04,1213.12 1037.63,1213.12 1038.22,1213.12 1038.8,1213.12 1039.39,1213.12 1039.98,1213.12 1040.56,1213.12 1041.15,1213.12 1041.73,1213.12 1042.32,1213.12 1042.91,1213.12 1043.49,1213.12 1044.08,1213.12 1044.67,1213.12 1045.25,1213.12 1045.84,1213.12 1046.43,1213.12 1047.01,1213.12 1047.6,1213.12 1048.19,1213.12 1048.77,1213.12 1049.36,1213.12 1049.94,1213.12 1050.53,1213.12 1051.12,1213.12 1051.7,1213.12 1052.29,1213.12 1052.88,1213.12 1053.46,1213.12 1054.05,1213.12 1054.64,1213.12 1055.22,1213.12 1055.81,1213.12 1056.39,1213.12 1056.98,1213.12 1057.57,1213.12 1058.15,1213.12 1058.74,1213.12 1059.33,1213.12 1059.91,1213.12 1060.5,1213.12 1061.09,1213.12 1061.67,1213.12 1062.26,1213.12 1062.85,1213.12 1063.43,1213.12 1064.02,1213.12 1064.6,1213.12 1065.19,1213.12 1065.78,1213.12 1066.36,1213.12 1066.95,1213.12 1067.54,1213.12 1068.12,1213.12 1068.71,1213.12 1069.3,1213.12 1069.88,1213.12 1070.47,1213.12 1071.06,1213.12 1071.64,1213.12 1072.23,1213.12 1072.81,1213.12 1073.4,1213.12 1073.99,1213.12 1074.57,1213.12 1075.16,1213.12 1075.75,1213.12 1076.33,1213.12 1076.92,1213.12 1077.51,1213.12 1078.09,1213.12 1078.68,1213.12 1079.26,1213.12 1079.85,1213.12 1080.44,1213.12 1081.02,1213.12 1081.61,1213.12 1082.2,1213.12 1082.78,1213.12 1083.37,1213.12 1083.96,1213.12 1084.54,1213.12 1085.13,1213.12 1085.72,1213.12 1086.3,1213.12 1086.89,1213.12 1087.47,1213.12 1088.06,1213.12 1088.65,1213.12 1089.23,1213.12 1089.82,1213.12 1090.41,1213.12 1090.99,1213.12 1091.58,1213.12 1092.17,1213.12 1092.75,1213.12 1093.34,1213.12 1093.93,1213.12 1094.51,1213.12 1095.1,1213.12 1095.68,1213.12 1096.27,1213.12 1096.86,1213.12 1097.44,1213.12 1098.03,1213.12 1098.62,1213.12 1099.2,1213.12 1099.79,1213.12 1100.38,1213.12 1100.96,1213.12 1101.55,1213.12 1102.14,1213.12 1102.72,1213.12 1103.31,1213.12 1103.89,1213.12 1104.48,1213.12 1105.07,1213.12 1105.65,1213.12 1106.24,1213.12 1106.83,1213.12 1107.41,1213.12 1108,1213.12 1108.59,1213.12 1109.17,1213.12 1109.76,1213.12 1110.34,1213.12 1110.93,1213.12 1111.52,1213.12 1112.1,1213.12 1112.69,1213.12 1113.28,1213.12 1113.86,1213.12 1114.45,1213.12 1115.04,1213.12 1115.62,1213.12 1116.21,1213.12 1116.8,1213.12 1117.38,1213.12 1117.97,1213.12 1118.55,1213.12 1119.14,1213.12 1119.73,1213.12 1120.31,1213.12 1120.9,1213.12 1121.49,1213.12 1122.07,1213.12 1122.66,1213.12 1123.25,1213.12 1123.83,1213.12 1124.42,1213.12 1125.01,1213.12 1125.59,1213.12 1126.18,1213.12 1126.76,1213.12 1127.35,1213.12 1127.94,1213.12 1128.52,1213.12 1129.11,1213.12 1129.7,1213.12 1130.28,1213.12 1130.87,1213.12 1131.46,1213.12 1132.04,1213.12 1132.63,1213.12 1133.21,1213.12 1133.8,1213.12 1134.39,1213.12 1134.97,1213.12 1135.56,1213.12 1136.15,1213.12 1136.73,1213.12 1137.32,1213.12 1137.91,1213.12 1138.49,1213.12 1139.08,1213.12 1139.67,1213.12 1140.25,1213.12 1140.84,1213.12 1141.42,1213.12 1142.01,1213.12 1142.6,1213.12 1143.18,1213.12 1143.77,1213.12 1144.36,1213.12 1144.94,1213.12 1145.53,1213.12 1146.12,1213.12 1146.7,1213.12 1147.29,1213.12 1147.88,1213.12 1148.46,1213.12 1149.05,1213.12 1149.63,1213.12 1150.22,1213.12 1150.81,1213.12 1151.39,1213.12 1151.98,1213.12 1152.57,1213.12 1153.15,1213.12 1153.74,1213.12 1154.33,1213.12 1154.91,1213.12 1155.5,1213.12 1156.09,1213.12 1156.67,1213.12 1157.26,1213.12 1157.84,1213.12 1158.43,1213.12 1159.02,1213.12 1159.6,1213.12 1160.19,1213.12 1160.78,1213.12 1161.36,1213.12 1161.95,1213.12 1162.54,1213.12 1163.12,1213.12 1163.71,1213.12 1164.29,1213.12 1164.88,1213.12 1165.47,1213.12 1166.05,1213.12 1166.64,1213.12 1167.23,1213.12 1167.81,1213.12 1168.4,1213.12 1168.99,1213.12 1169.57,1213.12 1170.16,1213.12 1170.75,1213.12 1171.33,1213.12 1171.92,1213.12 1172.5,1213.12 1173.09,1213.12 1173.68,1213.12 1174.26,1213.12 1174.85,1213.12 1175.44,1213.12 1176.02,1213.12 1176.61,1213.12 1177.2,1213.12 1177.78,1213.12 1178.37,1213.12 1178.96,1213.12 1179.54,1213.12 1180.13,1213.12 1180.71,1213.12 1181.3,1213.12 1181.89,1213.12 1182.47,1213.12 1183.06,1213.12 1183.65,1213.12 1184.23,1213.12 1184.82,1213.12 1185.41,1213.12 1185.99,1213.12 1186.58,1213.12 1187.16,1213.12 1187.75,1213.12 1188.34,1213.12 1188.92,1213.12 1189.51,1213.12 1190.1,1213.12 1190.68,1213.12 1191.27,1213.12 1191.86,1213.12 1192.44,1213.12 1193.03,1213.12 1193.62,1213.12 1194.2,1213.12 1194.79,1213.12 1195.37,1213.12 1195.96,1213.12 1196.55,1213.12 1197.13,1213.12 1197.72,1213.12 1198.31,1213.12 1198.89,1213.12 1199.48,1213.12 1200.07,1213.12 1200.65,1213.12 1201.24,1213.12 1201.83,1213.12 1202.41,1213.12 1203,1213.12 1203.58,1213.12 1204.17,1213.12 1204.76,1213.12 1205.34,1213.12 1205.93,1213.12 1206.52,1213.12 1207.1,1213.12 1207.69,1213.12 1208.28,1213.12 1208.86,1213.12 1209.45,1213.12 1210.03,1213.12 1210.62,1213.12 1211.21,1213.12 1211.79,1213.12 1212.38,1213.12 1212.97,1213.12 1213.55,1213.12 1214.14,1213.12 1214.73,1213.12 1215.31,1213.12 1215.9,1213.12 1216.49,1213.12 1217.07,1213.12 1217.66,1213.12 1218.24,1213.12 1218.83,1213.12 1219.42,1213.12 1220,1213.12 1220.59,1213.12 1221.18,1213.12 1221.76,1213.12 1222.35,1213.12 1222.94,1213.12 1223.52,1213.12 1224.11,1213.12 1224.7,1213.12 1225.28,1213.12 1225.87,1213.12 1226.45,1213.12 1227.04,1213.12 1227.63,1213.12 1228.21,1213.12 1228.8,1213.12 1229.39,1213.12 1229.97,1213.12 1230.56,1213.12 1231.15,1213.12 1231.73,1213.12 1232.32,1213.12 1232.91,1213.12 1233.49,1213.12 1234.08,1213.12 1234.66,1213.12 1235.25,1213.12 1235.84,1213.12 1236.42,1213.12 1237.01,1213.12 1237.6,1213.12 1238.18,1213.12 1238.77,1213.12 1239.36,1213.12 1239.94,1213.12 1240.53,1213.12 1241.11,1213.12 1241.7,1213.12 1242.29,1213.12 1242.87,1213.12 1243.46,1213.12 1244.05,1213.12 1244.63,1213.12 1245.22,1213.12 1245.81,1213.12 1246.39,1213.12 1246.98,1213.12 1247.57,1213.12 1248.15,1213.12 1248.74,1213.12 1249.32,1213.12 1249.91,1213.12 1250.5,1213.12 1251.08,1213.12 1251.67,1213.12 1252.26,1213.12 1252.84,1213.12 1253.43,1213.12 1254.02,1213.12 1254.6,1213.12 1255.19,1213.12 1255.78,1213.12 1256.36,1213.12 1256.95,1213.12 1257.53,1213.12 1258.12,1213.12 1258.71,1213.12 1259.29,1213.12 1259.88,1213.12 1260.47,1213.12 1261.05,1213.12 1261.64,1213.12 1262.23,1213.12 1262.81,1213.12 1263.4,1213.12 1263.98,1213.12 1264.57,1213.12 1265.16,1213.12 1265.74,1213.12 1266.33,1213.12 1266.92,1213.12 1267.5,1213.12 1268.09,1213.12 1268.68,1213.12 1269.26,1213.12 1269.85,1213.12 1270.44,1213.12 1271.02,1213.12 1271.61,1213.12 1272.19,1213.12 1272.78,1213.12 1273.37,1213.12 1273.95,1213.12 1274.54,1213.12 1275.13,1213.12 1275.71,1213.12 1276.3,1213.12 1276.89,1213.12 1277.47,1213.12 1278.06,1213.12 1278.65,1213.12 1279.23,1213.12 1279.82,1213.12 1280.4,1213.12 1280.99,1213.12 1281.58,1213.12 1282.16,1213.12 1282.75,1213.12 1283.34,1213.12 1283.92,1213.12 1284.51,1213.12 1285.1,1213.12 1285.68,1213.12 1286.27,1213.12 1286.86,1213.12 1287.44,1213.12 1288.03,1213.12 1288.61,1213.12 1289.2,1213.12 1289.79,1213.12 1290.37,1213.12 1290.96,1213.12 1291.55,1213.12 1292.13,1213.12 1292.72,1213.12 1293.31,1213.12 1293.89,1213.12 1294.48,1213.12 1295.06,1213.12 1295.65,1213.12 1296.24,1213.12 1296.82,1213.12 1297.41,1213.12 1298,1213.12 1298.58,1213.12 1299.17,1213.12 1299.76,1213.12 1300.34,1213.12 1300.93,1213.12 1301.52,1213.12 1302.1,1213.12 1302.69,1213.12 1303.27,1213.12 1303.86,1213.12 1304.45,1213.12 1305.03,1213.12 1305.62,1213.12 1306.21,1213.12 1306.79,1213.12 1307.38,1213.12 1307.97,1213.12 1308.55,1213.12 1309.14,1213.12 1309.73,1213.12 1310.31,1213.12 1310.9,1213.12 1311.48,1213.12 1312.07,1213.12 1312.66,1213.12 1313.24,1213.12 1313.83,1213.12 1314.42,1213.12 1315,1213.12 1315.59,1213.12 1316.18,1213.12 1316.76,1213.12 1317.35,1213.12 1317.93,1213.12 1318.52,1213.12 1319.11,1213.12 1319.69,1213.12 1320.28,1213.12 1320.87,1213.12 1321.45,1213.12 1322.04,1213.12 1322.63,1213.12 1323.21,1213.12 1323.8,1213.12 1324.39,1213.12 1324.97,1213.12 1325.56,1213.12 1326.14,1213.12 1326.73,1213.12 1327.32,1213.12 1327.9,1213.12 1328.49,1213.12 1329.08,1213.12 1329.66,1213.12 1330.25,1213.12 1330.84,1213.12 1331.42,1213.12 1332.01,1213.12 1332.6,1213.12 1333.18,1213.12 1333.77,1213.12 1334.35,1213.12 1334.94,1213.12 1335.53,1213.12 1336.11,1213.12 1336.7,1213.12 1337.29,1213.12 1337.87,1213.12 1338.46,1213.12 1339.05,1213.12 1339.63,1213.12 1340.22,1213.12 1340.8,1213.12 1341.39,1213.12 1341.98,1213.12 1342.56,1213.12 1343.15,1213.12 1343.74,1213.12 1344.32,1213.12 1344.91,1213.12 1345.5,1213.12 1346.08,1213.12 1346.67,1213.12 1347.26,1213.12 1347.84,1213.12 1348.43,1213.12 1349.01,1213.12 1349.6,1213.12 1350.19,1213.12 1350.77,1213.12 1351.36,1213.12 1351.95,1213.12 1352.53,1213.12 1353.12,1213.12 1353.71,1213.12 1354.29,1213.12 1354.88,1213.12 1355.47,1213.12 1356.05,1213.12 1356.64,1213.12 1357.22,1213.12 1357.81,1213.12 1358.4,1213.12 1358.98,1213.12 1359.57,1213.12 1360.16,1213.12 1360.74,1213.12 1361.33,1213.12 1361.92,1213.12 1362.5,1213.12 1363.09,1213.12 1363.68,1213.12 1364.26,1213.12 1364.85,1213.12 1365.43,1213.12 1366.02,1213.12 1366.61,1213.12 1367.19,1213.12 1367.78,1213.12 1368.37,1213.12 1368.95,1213.12 1369.54,1213.12 1370.13,1213.12 1370.71,1213.12 1371.3,1213.12 1371.88,1213.12 1372.47,1213.12 1373.06,1213.12 1373.64,1213.12 1374.23,1213.12 1374.82,1213.12 1375.4,1213.12 1375.99,1213.12 1376.58,1213.12 1377.16,1213.12 1377.75,1213.12 1378.34,1213.12 1378.92,1213.12 1379.51,1213.12 1380.09,1213.12 1380.68,1213.12 1381.27,1213.12 1381.85,1213.12 1382.44,1213.12 1383.03,1213.12 1383.61,1213.12 1384.2,1213.12 1384.79,1213.12 1385.37,1213.12 1385.96,1213.12 1386.55,1213.12 1387.13,1213.12 1387.72,1213.12 1388.3,1213.12 1388.89,1213.12 1389.48,1213.12 1390.06,1213.12 1390.65,1213.12 1391.24,1213.12 1391.82,1213.12 1392.41,1213.12 1393,1213.12 1393.58,1213.12 1394.17,1213.12 1394.75,1213.12 1395.34,1213.12 1395.93,1213.12 1396.51,1213.12 1397.1,1213.12 1397.69,1213.12 1398.27,1213.12 1398.86,1213.12 1399.45,1213.12 1400.03,1213.12 1400.62,1213.12 1401.21,1213.12 1401.79,1213.12 1402.38,1213.12 1402.96,1213.12 1403.55,1213.12 1404.14,1213.12 1404.72,1213.12 1405.31,1213.12 1405.9,1213.12 1406.48,1213.12 1407.07,1213.12 1407.66,1213.12 1408.24,1213.12 1408.83,1213.12 1409.42,1213.12 1410,1213.12 1410.59,1213.12 1411.17,1213.12 1411.76,1213.12 1412.35,1213.12 1412.93,1213.12 1413.52,1213.12 1414.11,1213.12 1414.69,1213.12 1415.28,1213.12 1415.87,1213.12 1416.45,1213.12 1417.04,1213.12 1417.63,1213.12 1418.21,1213.12 1418.8,1213.12 1419.38,1213.12 1419.97,1213.12 1420.56,1213.12 1421.14,1213.12 1421.73,1213.12 1422.32,1213.12 1422.9,1213.12 1423.49,1213.12 1424.08,1213.12 1424.66,1213.12 1425.25,1213.12 1425.83,1213.12 1426.42,1213.12 1427.01,1213.12 1427.59,1213.12 1428.18,1213.12 1428.77,1213.12 1429.35,1213.12 1429.94,1213.12 1430.53,1213.12 1431.11,1213.12 1431.7,1213.12 1432.29,1213.12 1432.87,1213.12 1433.46,1213.12 1434.04,1213.12 1434.63,1213.12 1435.22,1213.12 1435.8,1213.12 1436.39,1213.12 1436.98,1213.12 1437.56,1213.12 1438.15,1213.12 1438.74,1213.12 1439.32,1213.12 1439.91,1213.12 1440.5,1213.12 1441.08,1213.12 1441.67,1213.12 1442.25,1213.12 1442.84,1213.12 1443.43,1213.12 1444.01,1213.12 1444.6,1213.12 1445.19,1213.12 1445.77,1213.12 1446.36,1213.12 1446.95,1213.12 1447.53,1213.12 1448.12,1213.12 1448.7,1213.12 1449.29,1213.12 1449.88,1213.12 1450.46,1213.12 1451.05,1213.12 1451.64,1213.12 1452.22,1213.12 1452.81,1213.12 1453.4,1213.12 1453.98,1213.12 1454.57,1213.12 1455.16,1213.12 1455.74,1213.12 1456.33,1213.12 1456.91,1213.12 1457.5,1213.12 1458.09,1213.12 1458.67,1213.12 1459.26,1213.12 1459.85,1213.12 1460.43,1213.12 1461.02,1213.12 1461.61,1213.12 1462.19,1213.12 1462.78,1213.12 1463.37,1213.12 1463.95,1213.12 1464.54,1213.12 1465.12,1213.12 1465.71,1213.12 1466.3,1213.12 1466.88,1213.12 1467.47,1213.12 1468.06,1213.12 1468.64,1213.12 1469.23,1213.12 1469.82,1213.12 1470.4,1213.12 1470.99,1213.12 1471.57,1213.12 1472.16,1213.12 1472.75,1213.12 1473.33,1213.12 1473.92,1213.12 1474.51,1213.12 1475.09,1213.12 1475.68,1213.12 1476.27,1213.12 1476.85,1213.12 1477.44,1213.12 1478.03,1213.12 1478.61,1213.12 1479.2,1213.12 1479.78,1213.12 1480.37,1213.12 1480.96,1213.12 1481.54,1213.12 1482.13,1213.12 1482.72,1213.12 1483.3,1213.12 1483.89,1213.12 1484.48,1213.12 1485.06,1213.12 1485.65,1213.12 1486.24,1213.12 1486.82,1213.12 1487.41,1213.12 1487.99,1213.12 1488.58,1213.12 1489.17,1213.12 1489.75,1213.12 1490.34,1213.12 1490.93,1213.12 1491.51,1213.12 1492.1,1213.12 1492.69,1213.12 1493.27,1213.12 1493.86,1213.12 1494.45,1213.12 1495.03,1213.12 1495.62,1213.12 1496.2,1213.12 1496.79,1213.12 1497.38,1213.12 1497.96,1213.12 1498.55,1213.12 1499.14,1213.12 1499.72,1213.12 1500.31,1213.12 1500.9,1213.12 1501.48,1213.12 1502.07,1213.12 1502.65,1213.12 1503.24,1213.12 1503.83,1213.12 1504.41,1213.12 1505,1213.12 1505.59,1213.12 1506.17,1213.12 1506.76,1213.12 1507.35,1213.12 1507.93,1213.12 1508.52,1213.12 1509.11,1213.12 1509.69,1213.12 1510.28,1213.12 1510.86,1213.12 1511.45,1213.12 1512.04,1213.12 1512.62,1213.12 1513.21,1213.12 1513.8,1213.12 1514.38,1213.12 1514.97,1213.12 1515.56,1213.12 1516.14,1213.12 1516.73,1213.12 1517.32,1213.12 1517.9,1213.12 1518.49,1213.12 1519.07,1213.12 1519.66,1213.12 1520.25,1213.12 1520.83,1213.12 1521.42,1213.12 1522.01,1213.12 1522.59,1213.12 1523.18,1213.12 1523.77,1213.12 1524.35,1213.12 1524.94,1213.12 1525.52,1213.12 1526.11,1213.12 1526.7,1213.12 1527.28,1213.12 1527.87,1213.12 1528.46,1213.12 1529.04,1213.12 1529.63,1213.12 1530.22,1213.12 1530.8,1213.12 1531.39,1213.12 1531.98,1213.12 1532.56,1213.12 1533.15,1213.12 1533.73,1213.12 1534.32,1213.12 1534.91,1213.12 1535.49,1213.12 1536.08,1213.12 1536.67,1213.12 1537.25,1213.12 1537.84,1213.12 1538.43,1213.12 1539.01,1213.12 1539.6,1213.12 1540.19,1213.12 1540.77,1213.12 1541.36,1213.12 1541.94,1213.12 1542.53,1213.12 1543.12,1213.12 1543.7,1213.12 1544.29,1213.12 1544.88,1213.12 1545.46,1213.12 1546.05,1213.12 1546.64,1213.12 1547.22,1213.12 1547.81,1213.12 1548.4,1213.12 1548.98,1213.12 1549.57,1213.12 1550.15,1213.12 1550.74,1213.12 1551.33,1213.12 1551.91,1213.12 1552.5,1213.12 1553.09,1213.12 1553.67,1213.12 1554.26,1213.12 1554.85,1213.12 1555.43,1213.12 1556.02,1213.12 1556.6,1213.12 1557.19,1213.12 1557.78,1213.12 1558.36,1213.12 1558.95,1213.12 1559.54,1213.12 1560.12,1213.12 1560.71,1213.12 1561.3,1213.12 1561.88,1213.12 1562.47,1213.12 1563.06,1213.12 1563.64,1213.12 1564.23,1213.12 1564.81,1213.12 1565.4,1213.12 1565.99,1213.12 1566.57,1213.12 1567.16,1213.12 1567.75,1213.12 1568.33,1213.12 1568.92,1213.12 1569.51,1213.12 1570.09,1213.12 1570.68,1213.12 1571.27,1213.12 1571.85,1213.12 1572.44,1213.12 1573.02,1213.12 1573.61,1213.12 1574.2,1213.12 1574.78,1213.12 1575.37,1213.12 1575.96,1213.12 1576.54,1213.12 1577.13,1213.12 1577.72,1213.12 1578.3,1213.12 1578.89,1213.12 1579.47,1213.12 1580.06,1213.12 1580.65,1213.12 1581.23,1213.12 1581.82,1213.12 1582.41,1213.12 1582.99,1213.12 1583.58,1213.12 1584.17,1213.12 1584.75,1213.12 1585.34,1213.12 1585.93,1213.12 1586.51,1213.12 1587.1,1213.12 1587.68,1213.12 1588.27,1213.12 1588.86,1213.12 1589.44,1213.12 1590.03,1213.12 1590.62,1213.12 1591.2,1213.12 1591.79,1213.12 1592.38,1213.12 1592.96,1213.12 1593.55,1213.12 1594.14,1213.12 1594.72,1213.12 1595.31,1213.12 1595.89,1213.12 1596.48,1213.12 1597.07,1213.12 1597.65,1213.12 1598.24,1213.12 1598.83,1213.12 1599.41,1213.12 1600,1213.12 1600.59,1213.12 1601.17,1213.12 1601.76,1213.12 1602.34,1213.12 1602.93,1213.12 1603.52,1213.12 1604.1,1213.12 1604.69,1213.12 1605.28,1213.12 1605.86,1213.12 1606.45,1213.12 1607.04,1213.12 1607.62,1213.12 1608.21,1213.12 1608.8,1213.12 1609.38,1213.12 1609.97,1213.12 1610.55,1213.12 1611.14,1213.12 1611.73,1213.12 1612.31,1213.12 1612.9,1213.12 1613.49,1213.12 1614.07,1213.12 1614.66,1213.12 1615.25,1213.12 1615.83,1213.12 1616.42,1213.12 1617.01,1213.12 1617.59,1213.12 1618.18,1213.12 1618.76,1213.12 1619.35,1213.12 1619.94,1213.12 1620.52,1213.12 1621.11,1213.12 1621.7,1213.12 1622.28,1213.12 1622.87,1213.12 1623.46,1213.12 1624.04,1213.12 1624.63,1213.12 1625.22,1213.12 1625.8,1213.12 1626.39,1213.12 1626.97,1213.12 1627.56,1213.12 1628.15,1213.12 1628.73,1213.12 1629.32,1213.12 1629.91,1213.12 1630.49,1213.12 1631.08,1213.12 1631.67,1213.12 1632.25,1213.12 1632.84,1213.12 1633.42,1213.12 1634.01,1213.12 1634.6,1213.12 1635.18,1213.12 1635.77,1213.12 1636.36,1213.12 1636.94,1213.12 1637.53,1213.12 1638.12,1213.12 1638.7,1213.12 1639.29,1213.12 1639.88,1213.12 1640.46,1213.12 1641.05,1213.12 1641.63,1213.12 1642.22,1213.12 1642.81,1213.12 1643.39,1213.12 1643.98,1213.12 1644.57,1213.12 1645.15,1213.12 1645.74,1213.12 1646.33,1213.12 1646.91,1213.12 1647.5,1213.12 1648.09,1213.12 1648.67,1213.12 1649.26,1213.12 1649.84,1213.12 1650.43,1213.12 1651.02,1213.12 1651.6,1213.12 1652.19,1213.12 1652.78,1213.12 1653.36,1213.12 1653.95,1213.12 1654.54,1213.12 1655.12,1213.12 1655.71,1213.12 1656.29,1213.12 1656.88,1213.12 1657.47,1213.12 1658.05,1213.12 1658.64,1213.12 1659.23,1213.12 1659.81,1213.12 1660.4,1213.12 1660.99,1213.12 1661.57,1213.12 1662.16,1213.12 1662.75,1213.12 1663.33,1213.12 1663.92,1213.12 1664.5,1213.12 1665.09,1213.12 1665.68,1213.12 1666.26,1213.12 1666.85,1213.12 1667.44,1213.12 1668.02,1213.12 1668.61,1213.12 1669.2,1213.12 1669.78,1213.12 1670.37,1213.12 1670.96,1213.12 1671.54,1213.12 1672.13,1213.12 1672.71,1213.12 1673.3,1213.12 1673.89,1213.12 1674.47,1213.12 1675.06,1213.12 1675.65,1213.12 1676.23,1213.12 1676.82,1213.12 1677.41,1213.12 1677.99,1213.12 1678.58,1213.12 1679.17,1213.12 1679.75,1213.12 1680.34,1213.12 1680.92,1213.12 1681.51,1213.12 1682.1,1213.12 1682.68,1213.12 1683.27,1213.12 1683.86,1213.12 1684.44,1213.12 1685.03,1213.12 1685.62,1213.12 1686.2,1213.12 1686.79,1213.12 1687.37,1213.12 1687.96,1213.12 1688.55,1213.12 1689.13,1213.12 1689.72,1213.12 1690.31,1213.12 1690.89,1213.12 1691.48,1213.12 1692.07,1213.12 1692.65,1213.12 1693.24,1213.12 1693.83,1213.12 1694.41,1213.12 1695,1213.12 1695.58,1213.12 1696.17,1213.12 1696.76,1213.12 1697.34,1213.12 1697.93,1213.12 1698.52,1213.12 1699.1,1213.12 1699.69,1213.12 1700.28,1213.12 1700.86,1213.12 1701.45,1213.12 1702.04,1213.12 1702.62,1213.12 1703.21,1213.12 1703.79,1213.12 1704.38,1213.12 1704.97,1213.12 1705.55,1213.12 1706.14,1213.12 1706.73,1213.12 1707.31,1213.12 1707.9,1213.12 1708.49,1213.12 1709.07,1213.12 1709.66,1213.12 1710.24,1213.12 1710.83,1213.12 1711.42,1213.12 1712,1213.12 1712.59,1213.12 1713.18,1213.12 1713.76,1213.12 1714.35,1213.12 1714.94,1213.12 1715.52,1213.12 1716.11,1213.12 1716.7,1213.12 1717.28,1213.12 1717.87,1213.12 1718.45,1213.12 1719.04,1213.12 1719.63,1213.12 1720.21,1213.12 1720.8,1213.12 1721.39,1213.12 1721.97,1213.12 1722.56,1213.12 1723.15,1213.12 1723.73,1213.12 1724.32,1213.12 1724.91,1213.12 1725.49,1213.12 1726.08,1213.12 1726.66,1213.12 1727.25,1213.12 1727.84,1213.12 1728.42,1213.12 1729.01,1213.12 1729.6,1213.12 1730.18,1213.12 1730.77,1213.12 1731.36,1213.12 1731.94,1213.12 1732.53,1213.12 1733.11,1213.12 1733.7,1213.12 1734.29,1213.12 1734.87,1213.12 1735.46,1213.12 1736.05,1213.12 1736.63,1213.12 1737.22,1213.12 1737.81,1213.12 1738.39,1213.12 1738.98,1213.12 1739.57,1213.12 1740.15,1213.12 1740.74,1213.12 1741.32,1213.12 1741.91,1213.12 1742.5,1213.12 1743.08,1213.12 1743.67,1213.12 1744.26,1213.12 1744.84,1213.12 1745.43,1213.12 1746.02,1213.12 1746.6,1213.12 1747.19,1213.12 1747.78,1213.12 1748.36,1213.12 1748.95,1213.12 1749.53,1213.12 1750.12,1213.12 1750.71,1213.12 1751.29,1213.12 1751.88,1213.12 1752.47,1213.12 1753.05,1213.12 1753.64,1213.12 1754.23,1213.12 1754.81,1213.12 1755.4,1213.12 1755.99,1213.12 1756.57,1213.12 1757.16,1213.12 1757.74,1213.12 1758.33,1213.12 1758.92,1213.12 1759.5,1213.12 1760.09,1213.12 1760.68,1213.12 1761.26,1213.12 1761.85,1213.12 1762.44,1213.12 1763.02,1213.12 1763.61,1213.12 1764.19,1213.12 1764.78,1213.12 1765.37,1213.12 1765.95,1213.12 1766.54,1213.12 1767.13,1213.12 1767.71,1213.12 1768.3,1213.12 1768.89,1213.12 1769.47,1213.12 1770.06,1213.12 1770.65,1213.12 1771.23,1213.12 1771.82,1213.12 1772.4,1213.12 1772.99,1213.12 1773.58,1213.12 1774.16,1213.12 1774.75,1213.12 1775.34,1213.12 1775.92,1213.12 1776.51,1213.12 1777.1,1213.12 1777.68,1213.12 1778.27,1213.12 1778.86,1213.12 1779.44,1213.12 1780.03,1213.12 1780.61,1213.12 1781.2,1213.12 1781.79,1213.12 1782.37,1213.12 1782.96,1213.12 1783.55,1213.12 1784.13,1213.12 1784.72,1213.12 1785.31,1213.12 1785.89,1213.12 1786.48,1213.12 1787.06,1213.12 1787.65,1213.12 1788.24,1213.12 1788.82,1213.12 1789.41,1213.12 1790,1213.12 1790.58,1213.12 1791.17,1213.12 1791.76,1213.12 1792.34,1213.12 1792.93,1213.12 1793.52,1213.12 1794.1,1213.12 1794.69,1213.12 1795.27,1213.12 1795.86,1213.12 1796.45,1213.12 1797.03,1213.12 1797.62,1213.12 1798.21,1213.12 1798.79,1213.12 1799.38,1213.12 1799.97,1213.12 1800.55,1213.12 1801.14,1213.12 1801.73,1213.12 1802.31,1213.12 1802.9,1213.12 1803.48,1213.12 1804.07,1213.12 1804.66,1213.12 1805.24,1213.12 1805.83,1213.12 1806.42,1213.12 1807,1213.12 1807.59,1213.12 1808.18,1213.12 1808.76,1213.12 1809.35,1213.12 1809.94,1213.12 1810.52,1213.12 1811.11,1213.12 1811.69,1213.12 1812.28,1213.12 1812.87,1213.12 1813.45,1213.12 1814.04,1213.12 1814.63,1213.12 1815.21,1213.12 1815.8,1213.12 1816.39,1213.12 1816.97,1213.12 1817.56,1213.12 1818.14,1213.12 1818.73,1213.12 1819.32,1213.12 1819.9,1213.12 1820.49,1213.12 1821.08,1213.12 1821.66,1213.12 1822.25,1213.12 1822.84,1213.12 1823.42,1213.12 1824.01,1213.12 1824.6,1213.12 1825.18,1213.12 1825.77,1213.12 1826.35,1213.12 1826.94,1213.12 1827.53,1213.12 1828.11,1213.12 1828.7,1213.12 1829.29,1213.12 1829.87,1213.12 1830.46,1213.12 1831.05,1213.12 1831.63,1213.12 1832.22,1213.12 1832.81,1213.12 1833.39,1213.12 1833.98,1213.12 1834.56,1213.12 1835.15,1213.12 1835.74,1213.12 1836.32,1213.12 1836.91,1213.12 1837.5,1213.12 1838.08,1213.12 1838.67,1213.12 1839.26,1213.12 1839.84,1213.12 1840.43,1213.12 1841.01,1213.12 1841.6,1213.12 1842.19,1213.12 1842.77,1213.12 1843.36,1213.12 1843.95,1213.12 1844.53,1213.12 1845.12,1213.12 1845.71,1213.12 1846.29,1213.12 1846.88,1213.12 1847.47,1213.12 1848.05,1213.12 1848.64,1213.12 1849.22,1213.12 1849.81,1213.12 1850.4,1213.12 1850.98,1213.12 1851.57,1213.12 1852.16,1213.12 1852.74,1213.12 1853.33,1213.12 1853.92,1213.12 1854.5,1213.12 1855.09,1213.12 1855.68,1213.12 1856.26,1213.12 1856.85,1213.12 1857.43,1213.12 1858.02,1213.12 1858.61,1213.12 1859.19,1213.12 1859.78,1213.12 1860.37,1213.12 1860.95,1213.12 1861.54,1213.12 1862.13,1213.12 1862.71,1213.12 1863.3,1213.12 1863.88,1213.12 1864.47,1213.12 1865.06,1213.12 1865.64,1213.12 1866.23,1213.12 1866.82,1213.12 1867.4,1213.12 1867.99,1213.12 1868.58,1213.12 1869.16,1213.12 1869.75,1213.12 1870.34,1213.12 1870.92,1213.12 1871.51,1213.12 1872.09,1213.12 1872.68,1213.12 1873.27,1213.12 1873.85,1213.12 1874.44,1213.12 1875.03,1213.12 1875.61,1213.12 1876.2,1213.12 1876.79,1213.12 1877.37,1213.12 1877.96,1213.12 1878.55,1213.12 1879.13,1213.12 1879.72,1213.12 1880.3,1213.12 1880.89,1213.12 1881.48,1213.12 1882.06,1213.12 1882.65,1213.12 1883.24,1213.12 1883.82,1213.12 1884.41,1213.12 1885,1213.12 1885.58,1213.12 1886.17,1213.12 1886.76,1213.12 1887.34,1213.12 1887.93,1213.12 1888.51,1213.12 1889.1,1213.12 1889.69,1213.12 1890.27,1213.12 1890.86,1213.12 1891.45,1213.12 1892.03,1213.12 1892.62,1213.12 1893.21,1213.12 1893.79,1213.12 1894.38,1213.12 1894.96,1213.12 1895.55,1213.12 1896.14,1213.12 1896.72,1213.12 1897.31,1213.12 1897.9,1213.12 1898.48,1213.12 1899.07,1213.12 1899.66,1213.12 1900.24,1213.12 1900.83,1213.12 1901.42,1213.12 1902,1213.12 1902.59,1213.12 1903.17,1213.12 1903.76,1213.12 1904.35,1213.12 1904.93,1213.12 1905.52,1213.12 1906.11,1213.12 1906.69,1213.12 1907.28,1213.12 1907.87,1213.12 1908.45,1213.12 1909.04,1213.12 1909.63,1213.12 1910.21,1213.12 1910.8,1213.12 1911.38,1213.12 1911.97,1213.12 1912.56,1213.12 1913.14,1213.12 1913.73,1213.12 1914.32,1213.12 1914.9,1213.12 1915.49,1213.12 1916.08,1213.12 1916.66,1213.12 1917.25,1213.12 1917.83,1213.12 1918.42,1213.12 1919.01,1213.12 1919.59,1213.12 1920.18,1213.12 1920.77,1213.12 1921.35,1213.12 1921.94,1213.12 1922.53,1213.12 1923.11,1213.12 1923.7,1213.12 1924.29,1213.12 1924.87,1213.12 1925.46,1213.12 1926.04,1213.12 1926.63,1213.12 1927.22,1213.12 1927.8,1213.12 1928.39,1213.12 1928.98,1213.12 1929.56,1213.12 1930.15,1213.12 1930.74,1213.12 1931.32,1213.12 1931.91,1213.12 1932.5,1213.12 1933.08,1213.12 1933.67,1213.12 1934.25,1213.12 1934.84,1213.12 1935.43,1213.12 1936.01,1213.12 1936.6,1213.12 1937.19,1213.12 1937.77,1213.12 1938.36,1213.12 1938.95,1213.12 1939.53,1213.12 1940.12,1213.12 1940.71,1213.12 1941.29,1213.12 1941.88,1213.12 1942.46,1213.12 1943.05,1213.12 1943.64,1213.12 1944.22,1213.12 1944.81,1213.12 1945.4,1213.12 1945.98,1213.12 1946.57,1213.12 1947.16,1213.12 1947.74,1213.12 1948.33,1213.12 1948.91,1213.12 1949.5,1213.12 1950.09,1213.12 1950.67,1213.12 1951.26,1213.12 1951.85,1213.12 1952.43,1213.12 1953.02,1213.12 1953.61,1213.12 1954.19,1213.12 1954.78,1213.12 1955.37,1213.12 1955.95,1213.12 1956.54,1213.12 1957.12,1213.12 1957.71,1213.12 1958.3,1213.12 1958.88,1213.12 1959.47,1213.12 1960.06,1213.12 1960.64,1213.12 1961.23,1213.12 1961.82,1213.12 1962.4,1213.12 1962.99,1213.12 1963.58,1213.12 1964.16,1213.12 1964.75,1213.12 1965.33,1213.12 1965.92,1213.12 1966.51,1213.12 1967.09,1213.12 1967.68,1213.12 1968.27,1213.12 1968.85,1213.12 1969.44,1213.12 1970.03,1213.12 1970.61,1213.12 1971.2,1213.12 1971.78,1213.12 1972.37,1213.12 1972.96,1213.12 1973.54,1213.12 1974.13,1213.12 1974.72,1213.12 1975.3,1213.12 1975.89,1213.12 1976.48,1213.12 1977.06,1213.12 1977.65,1213.12 1978.24,1213.12 1978.82,1213.12 1979.41,1213.12 1979.99,1213.12 1980.58,1213.12 1981.17,1213.12 1981.75,1213.12 1982.34,1213.12 1982.93,1213.12 1983.51,1213.12 1984.1,1213.12 1984.69,1213.12 1985.27,1213.12 1985.86,1213.12 1986.45,1213.12 1987.03,1213.12 1987.62,1213.12 1988.2,1213.12 1988.79,1213.12 1989.38,1213.12 1989.96,1213.12 1990.55,1213.12 1991.14,1213.12 1991.72,1213.12 1992.31,1213.12 1992.9,1213.12 1993.48,1213.12 1994.07,1213.12 1994.65,1213.12 1995.24,1213.12 1995.83,1213.12 1996.41,1213.12 1997,1213.12 1997.59,1213.12 1998.17,1213.12 1998.76,1213.12 1999.35,1213.12 1999.93,1213.12 2000.52,1213.12 2001.11,1213.12 2001.69,1213.12 2002.28,1213.12 2002.86,1213.12 2003.45,1213.12 2004.04,1213.12 2004.62,1213.12 2005.21,1213.12 2005.8,1213.12 2006.38,1213.12 2006.97,1213.12 2007.56,1213.12 2008.14,1213.12 2008.73,1213.12 2009.32,1213.12 2009.9,1213.12 2010.49,1213.12 2011.07,1213.12 2011.66,1213.12 2012.25,1213.12 2012.83,1213.12 2013.42,1213.12 2014.01,1213.12 2014.59,1213.12 2015.18,1213.12 2015.77,1213.12 2016.35,1213.12 2016.94,1213.12 2017.53,1213.12 2018.11,1213.12 2018.7,1213.12 2019.28,1213.12 2019.87,1213.12 2020.46,1213.12 2021.04,1213.12 2021.63,1213.12 2022.22,1213.12 2022.8,1213.12 2023.39,1213.12 2023.98,1213.12 2024.56,1213.12 2025.15,1213.12 2025.73,1213.12 2026.32,1213.12 2026.91,1213.12 2027.49,1213.12 2028.08,1213.12 2028.67,1213.12 2029.25,1213.12 2029.84,1213.12 2030.43,1213.12 2031.01,1213.12 2031.6,1213.12 2032.19,1213.12 2032.77,1213.12 2033.36,1213.12 2033.94,1213.12 2034.53,1213.12 2035.12,1213.12 2035.7,1213.12 2036.29,1213.12 2036.88,1213.12 2037.46,1213.12 2038.05,1213.12 2038.64,1213.12 2039.22,1213.12 2039.81,1213.12 2040.4,1213.12 2040.98,1213.12 2041.57,1213.12 2042.15,1213.12 2042.74,1213.12 2043.33,1213.12 2043.91,1213.12 2044.5,1213.12 2045.09,1213.12 2045.67,1213.12 2046.26,1213.12 2046.85,1213.12 2047.43,1213.12 2048.02,1213.12 2048.6,1213.12 2049.19,1213.12 2049.78,1213.12 2050.36,1213.12 2050.95,1213.12 2051.54,1213.12 2052.12,1213.12 2052.71,1213.12 2053.3,1213.12 2053.88,1213.12 2054.47,1213.12 2055.06,1213.12 2055.64,1213.12 2056.23,1213.12 2056.81,1213.12 2057.4,1213.12 2057.99,1213.12 2058.57,1213.12 2059.16,1213.12 2059.75,1213.12 2060.33,1213.12 2060.92,1213.12 2061.51,1213.12 2062.09,1213.12 2062.68,1213.12 2063.27,1213.12 2063.85,1213.12 2064.44,1213.12 2065.02,1213.12 2065.61,1213.12 2066.2,1213.12 2066.78,1213.12 2067.37,1213.12 2067.96,1213.12 2068.54,1213.12 2069.13,1213.12 2069.72,1213.12 2070.3,1213.12 2070.89,1213.12 2071.48,1213.12 2072.06,1213.12 2072.65,1213.12 2073.23,1213.12 2073.82,1213.12 2074.41,1213.12 2074.99,1213.12 2075.58,1213.12 2076.17,1213.12 2076.75,1213.12 2077.34,1213.12 2077.93,1213.12 2078.51,1213.12 2079.1,1213.12 2079.68,1213.12 2080.27,1213.12 2080.86,1213.12 2081.44,1213.12 2082.03,1213.12 2082.62,1213.12 2083.2,1213.12 2083.79,1213.12 2084.38,1213.12 2084.96,1213.12 2085.55,1213.12 2086.14,1213.12 2086.72,1213.12 2087.31,1213.12 2087.89,1213.12 2088.48,1213.12 2089.07,1213.12 2089.65,1213.12 2090.24,1213.12 2090.83,1213.12 2091.41,1213.12 2092,1213.12 2092.59,1213.12 2093.17,1213.12 2093.76,1213.12 2094.35,1213.12 2094.93,1213.12 2095.52,1213.12 2096.1,1213.12 2096.69,1213.12 2097.28,1213.12 2097.86,1213.12 2098.45,1213.12 2099.04,1213.12 2099.62,1213.12 2100.21,1213.12 2100.8,1213.12 2101.38,1213.12 2101.97,1213.12 2102.55,1213.12 2103.14,1213.12 2103.73,1213.12 2104.31,1213.12 2104.9,1213.12 2105.49,1213.12 2106.07,1213.12 2106.66,1213.12 2107.25,1213.12 2107.83,1213.12 2108.42,1213.12 2109.01,1213.12 2109.59,1213.12 2110.18,1213.12 2110.76,1213.12 2111.35,1213.12 2111.94,1213.12 2112.52,1213.12 2113.11,1213.12 2113.7,1213.12 2114.28,1213.12 2114.87,1213.12 2115.46,1213.12 2116.04,1213.12 2116.63,1213.12 2117.22,1213.12 2117.8,1213.12 2118.39,1213.12 2118.97,1213.12 2119.56,1213.12 2120.15,1213.12 2120.73,1213.12 2121.32,1213.12 2121.91,1213.12 2122.49,1213.12 2123.08,1213.12 2123.67,1213.12 2124.25,1213.12 2124.84,1213.12 2125.42,1213.12 2126.01,1213.12 2126.6,1213.12 2127.18,1213.12 2127.77,1213.12 2128.36,1213.12 2128.94,1213.12 2129.53,1213.12 2130.12,1213.12 2130.7,1213.12 2131.29,1213.12 2131.88,1213.12 2132.46,1213.12 2133.05,1213.12 2133.63,1213.12 2134.22,1213.12 2134.81,1213.12 2135.39,1213.12 2135.98,1213.12 2136.57,1213.12 2137.15,1213.12 2137.74,1213.12 2138.33,1213.12 2138.91,1213.12 2139.5,1213.12 2140.09,1213.12 2140.67,1213.12 2141.26,1213.12 2141.84,1213.12 2142.43,1213.12 2143.02,1213.12 2143.6,1213.12 2144.19,1213.12 2144.78,1213.12 2145.36,1213.12 2145.95,1213.12 2146.54,1213.12 2147.12,1213.12 2147.71,1213.12 2148.3,1213.12 2148.88,1213.12 2149.47,1213.12 2150.05,1213.12 2150.64,1213.12 2151.23,1213.12 2151.81,1213.12 2152.4,1213.12 2152.99,1213.12 2153.57,1213.12 2154.16,1213.12 2154.75,1213.12 2155.33,1213.12 2155.92,1213.12 2156.5,1213.12 2157.09,1213.12 2157.68,1213.12 2158.26,1213.12 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.58,1196 1399.18,899.083 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.7 985.439,1196 2158.26,1196 2158.26,1229.7 985.439,1229.7 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip273\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip273)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-9677.11 167.147,-10242.7 167.706,-10749.2 168.266,-11200.5 168.825,-10725.6 169.384,-10326.4 169.943,-10700.6 170.503,-11029.5 171.062,-11316 171.621,-11552.3 172.18,-11763 172.74,-11939.3 173.299,-12083.4 173.858,-12197.7 174.417,-11833.8 174.977,-11926.2 175.536,-11603.2 176.095,-11643.4 176.655,-11329 177.214,-11025.5 177.773,-11022.3 178.332,-9926.31 178.892,-9881.82 179.451,-9841.25 180.01,-9779.76 180.569,-9707.75 181.129,-9426.98 181.688,-9345.81 182.247,-9074.83 182.806,-8983.14 183.366,-8876.41 183.925,-8475.12 184.484,-8383.62 185.043,-8285.46 185.603,-8063.76 186.162,-7952.96 186.721,-7833.56 187.28,-7712.46 187.84,-7485.33 188.399,-7263.65 188.958,-6873.03 189.517,-6673.85 190.077,-6562.99 190.636,-6382.64 191.195,-6136.53 191.754,-5819.41 192.314,-5660.49 192.873,-5503.59 193.432,-5343.76 193.991,-5198.14 194.551,-5053.37 195.11,-4971.61 195.669,-4769.35 196.228,-4466.39 196.788,-4329.37 197.347,-4198.75 197.906,-4063.52 198.465,-3938.3 199.025,-3672.59 199.584,-3554.1 200.143,-3392.33 200.702,-3277.68 201.262,-3164.2 201.821,-3049.57 202.38,-2940.94 202.939,-2867.43 203.499,-2800.04 204.058,-2657.95 204.617,-2485.72 205.176,-2355.94 205.736,-2193.86 206.295,-2106.41 206.854,-1957.26 207.413,-1814.06 207.973,-1675.23 208.532,-1598.39 209.091,-1525.52 209.65,-1456.95 210.21,-1386.36 210.769,-1321.8 211.328,-1281.52 211.887,-1214.19 212.447,-1150.77 213.006,-1138.23 213.565,-1017.26 214.124,-926.353 214.684,-837.067 215.243,-803.043 215.802,-718.838 216.361,-661.654 216.921,-583.661 217.48,-481.219 218.039,-410.576 218.598,-385.655 219.158,-313.004 219.717,-244.667 220.276,-222.421 220.835,-108.467 221.395,-62.4884 221.954,-26.1998 222.513,51.1794 223.072,42.8133 223.632,80.9857 224.191,94.2547 224.75,147.965 225.309,222.827 225.869,231.483 226.428,260.076 226.987,273.715 227.546,242.409 228.106,217.098 228.665,289.283 229.224,318.95 229.783,370.58 230.343,439.832 230.902,447.246 231.461,471.699 232.02,499.76 232.58,499.977 233.139,524.974 233.698,547.623 234.257,548.989 234.817,552.453 235.376,556.458 235.935,580.128 236.494,664.099 237.054,721.101 237.613,738.204 238.172,714.992 238.731,753.568 239.291,788.364 239.85,806.683 240.409,837.155 240.968,871.465 241.528,901.478 242.087,891.301 242.646,886.358 243.205,844.476 243.765,841.167 244.324,820.492 244.883,854.866 245.442,867.814 246.002,884.918 246.561,878.577 247.12,872.442 247.679,904.252 248.239,939.272 248.798,935.324 249.357,931.881 249.916,912.2 250.476,877.331 251.035,897.314 251.594,964.605 252.153,976.791 252.713,971.55 253.272,1036.49 253.831,1067.59 254.39,1036.92 254.95,1047.03 255.509,1091.38 256.068,1079.91 256.627,1069.99 257.187,1026.32 257.746,1004.04 258.305,978.557 258.864,975.806 259.424,922.408 259.983,902.18 260.542,918.956 261.101,938.668 261.661,922.628 262.22,925.011 262.779,924.448 263.338,940.195 263.898,959.4 264.457,907.779 265.016,922.483 265.575,925.71 266.135,923.118 266.694,921.71 267.253,936.312 267.812,949.734 268.372,984.693 268.931,1018.29 269.49,1008.61 270.049,1004.81 270.609,1018.2 271.168,984.06 271.727,997.319 272.286,996.232 272.846,995.025 273.405,1007.73 273.964,1038.17 274.523,1035.49 275.083,1031.09 275.642,1058.83 276.201,1051.86 276.76,1081.73 277.32,1075.17 277.879,1066.31 278.438,1059.55 278.997,1085.84 279.557,1064.59 280.116,1093.35 280.675,1104.48 281.234,1130.49 281.794,1153.16 282.353,1157.98 282.912,1162.25 283.471,1134.69 284.031,1169.26 284.59,1159.48 285.149,1147.61 285.708,1105.28 286.268,1126.42 286.827,1129.74 287.386,1150.96 287.945,1139.52 288.505,1127.27 289.064,1098.01 289.623,1089.04 290.182,1100.54 290.742,1093.63 291.301,1049.51 291.86,1080.51 292.419,1072.37 292.979,1064.17 293.538,1087.38 294.097,1078.39 294.656,1067.73 295.216,1077.66 295.775,1052.97 296.334,1045.85 296.893,1024.49 297.453,1035.78 298.012,1026.3 298.571,1002.66 299.13,1017.51 299.69,1028.85 300.249,1042.55 300.808,1033.08 301.368,1045.31 301.927,1054.55 302.486,1042.3 303.045,1039.93 303.605,1015.08 304.164,978.228 304.723,942.229 305.282,924.184 305.842,909.225 306.401,908.355 306.96,908.227 307.519,926.347 308.079,939.051 308.638,948.643 309.197,963.759 309.756,957.862 310.316,956.446 310.875,970.4 311.434,983.249 311.993,1011.24 312.553,1040.28 313.112,1048.66 313.671,1055.57 314.23,1097.48 314.79,1084.55 315.349,1078.52 315.908,1071.24 316.467,1062.13 317.027,1051.11 317.586,1026.51 318.145,984.727 318.704,964.764 319.264,974.519 319.823,970.906 320.382,965.893 320.941,961.658 321.501,959.162 322.06,939.812 322.619,972.705 323.178,984.053 323.738,964.274 324.297,956.323 324.856,949.121 325.415,944.002 325.975,940.209 326.534,934.827 327.093,917.563 327.652,963.933 328.212,957.57 328.771,954.932 329.33,949.56 329.889,976.18 330.449,956.384 331.008,970.206 331.567,949.32 332.126,961.544 332.686,973.75 333.245,968.596 333.804,976.605 334.363,984.906 334.923,944.481 335.482,939.107 336.041,967.568 336.6,990.618 337.16,1000.94 337.719,991.532 338.278,985.918 338.837,963.324 339.397,943.344 339.956,934.735 340.515,979.604 341.074,972.385 341.634,966.85 342.193,960.469 342.752,937.136 343.311,951.043 343.871,960.069 344.43,971.562 344.989,995.785 345.548,1005.02 346.108,997.167 346.667,958.126 347.226,919.551 347.785,930.201 348.345,928.263 348.904,918.03 349.463,947.776 350.022,943.988 350.582,953.752 351.141,930.283 351.7,957.384 352.259,951.031 352.819,959.896 353.378,936.55 353.937,945.45 354.496,922.672 355.056,934.287 355.615,880.396 356.174,891.389 356.733,890.626 357.293,905.295 357.852,869.597 358.411,881.465 358.97,897.147 359.53,878.62 360.089,827.231 360.648,828.752 361.207,846.954 361.767,864.821 362.326,864.226 362.885,875.809 363.444,856.135 364.004,872.535 364.563,883.706 365.122,879.015 365.681,858.936 366.241,840.995 366.8,825.6 367.359,787.095 367.918,791.589 368.478,811.296 369.037,825.916 369.596,826.08 370.155,827.484 370.715,809.461 371.274,840.177 371.833,818.64 372.392,820.264 372.952,862.325 373.511,878.31 374.07,861.394 374.629,842.132 375.189,841.038 375.748,821.855 376.307,803.798 376.866,835.85 377.426,820.28 377.985,803.98 378.544,836.339 379.103,868.569 379.663,898.679 380.222,894.201 380.781,874.281 381.34,871.61 381.9,881.906 382.459,863.137 383.018,892.764 383.577,890.53 384.137,883.414 384.696,861.141 385.255,856.918 385.814,899.853 386.374,896.161 386.933,873.751 387.492,868.728 388.051,881.548 388.611,893.104 389.17,906.421 389.729,932.59 390.288,937.649 390.848,952.188 391.407,925.897 391.966,917.537 392.525,927.389 393.085,923.129 393.644,917.704 394.203,909.711 394.762,903.01 395.322,849.294 395.881,828.4 396.44,844.034 396.999,824.66 397.559,789.693 398.118,789.485 398.677,772.556 399.236,787.764 399.796,803.075 400.355,800.074 400.914,799.26 401.473,784.687 402.033,800.727 402.592,800.207 403.151,799.384 403.71,828.955 404.27,812.798 404.829,776.999 405.388,776.139 405.947,779.468 406.507,809.456 407.066,840.915 407.625,815.741 408.184,813.566 408.744,811.053 409.303,841.76 409.862,826.357 410.421,825.996 410.981,824.38 411.54,819.386 412.099,832.445 412.658,829.875 413.218,814.255 413.777,845.836 414.336,841.286 414.895,838.732 415.455,834.639 416.014,813.793 416.573,825.602 417.132,821.756 417.692,821.914 418.251,803.717 418.81,815.115 419.369,827.454 419.929,794.119 420.488,790.492 421.047,804.878 421.606,788.625 422.166,767.93 422.725,768.534 423.284,772.211 423.843,820.704 424.403,801.502 424.962,778.372 425.521,728.327 426.08,743.325 426.64,761.992 427.199,777.461 427.758,778.092 428.318,813.687 428.877,842.786 429.436,803.367 429.995,783.311 430.555,799.521 431.114,780.439 431.673,797.257 432.232,824.634 432.792,823.189 433.351,838.292 433.91,897.452 434.469,892.453 435.029,856.328 435.588,832.739 436.147,783.864 436.706,801.323 437.266,781.118 437.825,796.454 438.384,792.721 438.943,773.708 439.503,775.513 440.062,774.42 440.621,792.202 441.18,788.421 441.74,790.959 442.299,805.591 442.858,831.473 443.417,810.217 443.977,789.714 444.536,805.963 445.095,834.194 445.654,847.361 446.214,858.883 446.773,836.389 447.332,834.059 447.891,796.261 448.451,775.967 449.01,758.894 449.569,708.407 450.128,742.582 450.688,712.85 451.247,713.118 451.806,731.47 452.365,715.623 452.925,698.883 453.484,702.494 454.043,736.062 454.602,753.567 455.162,738.727 455.721,737.43 456.28,720.398 456.839,736.519 457.399,740.95 457.958,738.749 458.517,728.665 459.076,728.883 459.636,745.708 460.195,746.103 460.754,746.472 461.313,746.685 461.873,680.342 462.432,682.804 462.991,716.39 463.55,719.046 464.11,734.506 464.669,699.138 465.228,732.584 465.787,735.515 466.347,734.513 466.906,748.086 467.465,766.524 468.024,779.486 468.584,725.154 469.143,742.576 469.702,728.751 470.261,746.127 470.821,759.691 471.38,788.135 471.939,786.528 472.498,784.299 473.058,779.288 473.617,759.068 474.176,756.702 474.735,753.066 475.295,751.051 475.854,766.847 476.413,801.147 476.972,814.189 477.532,811.445 478.091,772.379 478.65,735.318 479.209,766.298 479.769,797.842 480.328,813.133 480.887,814.281 481.446,778.786 482.006,793.944 482.565,775.259 483.124,773.713 483.683,772.267 484.243,769.894 484.802,754.626 485.361,773.89 485.92,741.404 486.48,758.425 487.039,740.382 487.598,724.937 488.157,725.467 488.717,758.705 489.276,758.121 489.835,769.288 490.394,767.248 490.954,764.855 491.513,776.586 492.072,791.638 492.631,791.376 493.191,742.7 493.75,756.628 494.309,753.36 494.868,785.418 495.428,733.604 495.987,700.121 496.546,685.396 497.105,703.944 497.665,721.083 498.224,721.075 498.783,707.664 499.342,677.337 499.902,650.409 500.461,685.042 501.02,670.529 501.579,688.085 502.139,739.588 502.698,740.471 503.257,770.151 503.816,737.389 504.376,719.075 504.935,735.377 505.494,703.736 506.053,691.294 506.613,705.518 507.172,725.781 507.731,741.022 508.29,709.955 508.85,663.31 509.409,665.978 509.968,637.315 510.527,625.548 511.087,648.993 511.646,669.204 512.205,721.543 512.764,755.685 513.324,756.846 513.883,753.451 514.442,765.506 515.001,779.474 515.561,776.699 516.12,772.854 516.679,783.579 517.238,777.6 517.798,790.436 518.357,802.865 518.916,797.153 519.475,821.532 520.035,784.718 520.594,779.469 521.153,795.802 521.712,774.042 522.272,786.667 522.831,749.378 523.39,765.516 523.949,762.851 524.509,823.143 525.068,834.694 525.627,832.26 526.186,807.855 526.746,792.707 527.305,758.07 527.864,742.842 528.423,743.422 528.983,743.312 529.542,758.995 530.101,759.274 530.66,773.435 531.22,756.493 531.779,740.622 532.338,736.134 532.897,734.236 533.457,751.102 534.016,750.847 534.575,714.659 535.134,731.616 535.694,747.877 536.253,714.638 536.812,716.659 537.371,746.034 537.931,761.961 538.49,776.286 539.049,772.66 539.608,769.235 540.168,767.642 540.727,749.096 541.286,765.605 541.845,746.993 542.405,745.373 542.964,745.508 543.523,745.442 544.082,731.636 544.642,777.882 545.201,757.22 545.76,737.367 546.319,753.409 546.879,735.199 547.438,748.775 547.997,764.519 548.556,781.133 549.116,811.289 549.675,823.452 550.234,783.103 550.793,780.546 551.353,762.914 551.912,726.506 552.471,760.432 553.031,791.577 553.59,785.965 554.149,798.551 554.708,795.269 555.268,805.279 555.827,800.918 556.386,776.835 556.945,775.131 557.505,773.004 558.064,749.977 558.623,732.759 559.182,749.547 559.742,746.039 560.301,760.353 560.86,773.139 561.419,805.367 561.979,799.189 562.538,780.363 563.097,761.33 563.656,760.63 564.216,710.67 564.775,741.261 565.334,740.31 565.893,767.886 566.453,750.952 567.012,751.384 567.571,798.535 568.13,824.618 568.69,849.504 569.249,828.576 569.808,842.375 570.367,846.548 570.927,855.104 571.486,815.603 572.045,776.208 572.604,767.334 573.164,733.387 573.723,717.179 574.282,733.619 574.841,781.201 575.401,780.706 575.96,727.535 576.519,741.069 577.078,740.92 577.638,719.585 578.197,703.801 578.756,735.193 579.315,698.324 579.875,666.023 580.434,648.519 580.993,650.677 581.552,651.8 582.112,637.257 582.671,643.051 583.23,663.792 583.789,650.693 584.349,639.541 584.908,645.706 585.467,666.33 586.026,669.558 586.586,685.921 587.145,688.657 587.704,710.688 588.263,695.759 588.823,665.954 589.382,683.769 589.941,667.101 590.5,685.435 591.06,670.489 591.619,658.121 592.178,661.767 592.737,645.026 593.297,630.73 593.856,620.285 594.415,642.223 594.974,634.359 595.534,668.734 596.093,718.846 596.652,729.917 597.211,710.79 597.771,712.135 598.33,727.629 598.889,746.244 599.448,742.495 600.008,756.992 600.567,749.29 601.126,747.635 601.685,761.292 602.245,755.706 602.804,736.804 603.363,735.939 603.922,719.038 604.482,701.144 605.041,715.729 605.6,714.195 606.159,652.018 606.719,686.526 607.278,657.539 607.837,660.011 608.396,629.906 608.956,635.646 609.515,669.071 610.074,671.675 610.633,708.08 611.193,674.066 611.752,722.025 612.311,738.166 612.87,754.141 613.43,738.927 613.989,721.196 614.548,719.945 615.107,737.485 615.667,736.631 616.226,719.498 616.785,671.289 617.344,676.699 617.904,648.94 618.463,652.893 619.022,641.266 619.581,644.356 620.141,616.841 620.7,689.989 621.259,690.163 621.818,671.56 622.378,674.719 622.937,676.573 623.496,676.358 624.055,708.405 624.615,704.53 625.174,685.579 625.733,684.948 626.292,700.638 626.852,715.769 627.411,708.153 627.97,721.277 628.529,738.062 629.089,767.847 629.648,734.415 630.207,718.265 630.766,783.141 631.326,793.599 631.885,759.112 632.444,725.392 633.003,736.327 633.563,734.565 634.122,729.298 634.681,711.294 635.24,724.043 635.8,707.763 636.359,726.095 636.918,721.642 637.477,706.085 638.037,723.556 638.596,755.097 639.155,703.009 639.714,702.14 640.274,720.969 640.833,755.888 641.392,770.105 641.951,832.139 642.511,873.293 643.07,863.315 643.629,854.316 644.188,845.626 644.748,810.394 645.307,806.208 645.866,828.071 646.425,805.675 646.985,784.778 647.544,781.374 648.103,777.135 648.662,805.297 649.222,802.43 649.781,795.555 650.34,757.139 650.899,740.055 651.459,755.007 652.018,720.218 652.577,718.565 653.136,682.937 653.696,699.704 654.255,702.355 654.814,683.171 655.373,702.478 655.933,719.124 656.492,702.309 657.051,704.466 657.61,705.852 658.17,709.296 658.729,742.272 659.288,769.417 659.847,780.655 660.407,777.12 660.966,771.247 661.525,752.088 662.084,752.672 662.644,781.542 663.203,776.452 663.762,774.325 664.321,805.591 664.881,766.667 665.44,697.912 665.999,681.479 666.558,650.407 667.118,654.109 667.677,656.262 668.236,676.257 668.795,679.026 669.355,651.485 669.914,619.398 670.473,619.081 671.032,623.91 671.592,642.601 672.151,630.549 672.71,586.781 673.269,578.117 673.829,584.188 674.388,622.208 674.947,642.093 675.506,661.257 676.066,647.084 676.625,652.126 677.184,638.743 677.743,676.033 678.303,664.774 678.862,667.856 679.421,636.67 679.981,657.206 680.54,660.281 681.099,680.759 681.658,683.751 682.218,697.459 682.777,680.399 683.336,681.195 683.895,670.484 684.455,692.022 685.014,693.792 685.573,710.457 686.132,723.973 686.692,726.892 687.251,708.338 687.81,709.978 688.369,710.207 688.929,712.162 689.488,726.823 690.047,724.9 690.606,719.942 691.166,702.76 691.725,689.551 692.284,689.909 692.843,691.594 693.403,693.758 693.962,695.458 694.521,645.247 695.08,630.394 695.64,631.908 696.199,622.758 696.758,629.776 697.317,630.431 697.877,634.847 698.436,622.842 698.995,644.306 699.554,646.667 700.114,699.903 700.673,695.42 701.232,697.802 701.791,702.364 702.351,731.736 702.91,712.4 703.469,699.337 704.028,683.741 704.588,695.231 705.147,695.671 705.706,726.682 706.265,726.264 706.825,713.184 707.384,712.604 707.943,743.918 708.502,740.796 709.062,724.36 709.621,737.11 710.18,718.523 710.739,697.503 711.299,679.834 711.858,683.699 712.417,668.359 712.976,670.529 713.536,687.628 714.095,668.576 714.654,656.307 715.213,659.481 715.773,661.859 716.332,679.912 716.891,713.51 717.45,713.881 718.01,709.997 718.569,692.257 719.128,707.622 719.687,656.003 720.247,643.829 720.806,664.393 721.365,715.64 721.924,746.959 722.484,757.943 723.043,754.309 723.602,729.782 724.161,726.745 724.721,743.863 725.28,724.258 725.839,739.534 726.398,739.89 726.958,688.133 727.517,686.213 728.076,684.52 728.635,666.246 729.195,652.116 729.754,638.666 730.313,642.301 730.872,631.292 731.432,648.017 731.991,651.432 732.55,634.777 733.109,651.056 733.669,667.603 734.228,668.974 734.787,700.637 735.346,685.114 735.906,669.986 736.465,686.989 737.024,652.002 737.583,637.027 738.143,641.097 738.702,659.058 739.261,614.502 739.82,620.974 740.38,622.654 740.939,610.727 741.498,633.602 742.057,635.923 742.617,606.11 743.176,610.4 743.735,632.029 744.294,639.057 744.854,663.122 745.413,666.67 745.972,683.099 746.531,682.209 747.091,667.49 747.65,654.358 748.209,657.176 748.768,657.158 749.328,693.622 749.887,691.593 750.446,686.115 751.005,718.49 751.565,701.636 752.124,700.948 752.683,668.056 753.242,635.694 753.802,671.361 754.361,656.615 754.92,661.845 755.479,661.015 756.039,659.783 756.598,662.86 757.157,677.713 757.716,677.836 758.276,681.03 758.835,682.947 759.394,684.161 759.953,669.833 760.513,668.156 761.072,701.573 761.631,699.355 762.19,715.614 762.75,714.706 763.309,715.43 763.868,715.135 764.427,731.709 764.987,747.488 765.546,727.889 766.105,657.673 766.664,644.292 767.224,665.49 767.783,699.035 768.342,679.998 768.901,681.062 769.461,696.221 770.02,695.34 770.579,695.502 771.138,682.749 771.698,668.034 772.257,684.594 772.816,718.975 773.375,719.128 773.935,721.683 774.494,748.447 775.053,761.201 775.612,741.181 776.172,721.701 776.731,704.373 777.29,718.753 777.849,734.385 778.409,729.832 778.968,757.599 779.527,734.373 780.086,749.217 780.646,747.583 781.205,744.822 781.764,738.304 782.323,752.918 782.883,797.102 783.442,805.815 784.001,811.933 784.56,825.127 785.12,783.862 785.679,776.816 786.238,773.918 786.797,733.223 787.357,730.647 787.916,763.17 788.475,746.26 789.034,727.486 789.594,727.203 790.153,707.923 790.712,706.864 791.271,721.275 791.831,707.002 792.39,724.312 792.949,720.031 793.508,719.866 794.068,718.144 794.627,696.308 795.186,714.487 795.745,714.507 796.305,731.296 796.864,710.817 797.423,706.956 797.982,670.849 798.542,674.167 799.101,674.129 799.66,705.594 800.219,668.15 800.779,671.162 801.338,655.709 801.897,656.565 802.456,686.954 803.016,654.586 803.575,673.177 804.134,691.102 804.693,697.27 805.253,665.044 805.812,683.059 806.371,699.73 806.931,712.549 807.49,662.991 808.049,646.572 808.608,631.729 809.168,635.275 809.727,635.838 810.286,703.594 810.845,704.466 811.405,737.714 811.964,718.988 812.523,718.206 813.082,733.172 813.642,681.943 814.201,666.382 814.76,636.713 815.319,642.375 815.879,642.993 816.438,661.464 816.997,678.395 817.556,662.763 818.116,649.901 818.675,651.429 819.234,670.275 819.793,641.414 820.353,634.438 820.912,654.996 821.471,640.058 822.03,689.489 822.59,691.779 823.149,639.521 823.708,646.591 824.267,648.269 824.827,633.023 825.386,655.12 825.945,636.48 826.504,657.76 827.064,656.67 827.623,673.642 828.182,706.287 828.741,722.836 829.301,709.251 829.86,710.98 830.419,710.933 830.978,691.831 831.538,691.287 832.097,723.386 832.656,707.215 833.215,676.185 833.775,660.262 834.334,665.042 834.893,654.576 835.452,656.537 836.012,642.819 836.571,647.799 837.13,634.324 837.689,618.747 838.249,638.196 838.808,638.167 839.367,673.133 839.926,692.738 840.486,691.815 841.045,723.141 841.604,721.415 842.163,737.583 842.723,732.053 843.282,730.575 843.841,729.361 844.4,727.771 844.96,741.157 845.519,753.633 846.078,733.397 846.637,713.494 847.197,679.934 847.756,716.593 848.315,779.891 848.874,694.771 849.434,714.5 849.993,694.895 850.552,694.74 851.111,695.404 851.671,712.554 852.23,697.443 852.789,731.081 853.348,733.231 853.908,746.409 854.467,726.535 855.026,757.467 855.585,724.172 856.145,704.458 856.704,685.536 857.263,697.894 857.822,696.894 858.382,698.233 858.941,757.772 859.5,735.217 860.059,715.668 860.619,740.325 861.178,736.576 861.737,686.077 862.296,685.708 862.856,669.014 863.415,687.716 863.974,689.682 864.533,690.589 865.093,705.479 865.652,706.266 866.211,721.259 866.77,735.305 867.33,731.648 867.889,729.859 868.448,725.799 869.007,689.927 869.567,705.215 870.126,723.332 870.685,722.286 871.244,705.186 871.804,735.87 872.363,749.135 872.922,760.146 873.481,772.092 874.041,767.387 874.6,767.039 875.159,726.554 875.718,709.437 876.278,687.121 876.837,636.734 877.396,652.731 877.955,651.558 878.515,637.449 879.074,620.616 879.633,589.366 880.192,578.254 880.752,598.543 881.311,619.685 881.87,639.633 882.429,637.74 882.989,607.833 883.548,649.447 884.107,668.036 884.666,652.728 885.226,657.556 885.785,644.954 886.344,644.182 886.903,677.629 887.463,661.777 888.022,662.751 888.581,680.108 889.14,681.778 889.7,715.255 890.259,714.322 890.818,709.605 891.377,662.167 891.937,643.482 892.496,656.643 893.055,658.127 893.614,678.981 894.174,677.428 894.733,660.194 895.292,672.764 895.851,689.001 896.411,655.413 896.97,641.073 897.529,627.357 898.088,644.983 898.648,634.13 899.207,636.696 899.766,655.55 900.325,656.287 900.885,656.691 901.444,625.914 902.003,616.641 902.562,636.585 903.122,624.421 903.681,646.204 904.24,666.234 904.799,671.227 905.359,719.946 905.918,734.959 906.477,730.948 907.036,713.861 907.596,680.068 908.155,632.351 908.714,652.172 909.273,642.256 909.833,647.302 910.392,681.86 910.951,684.789 911.51,682.259 912.07,703.624 912.629,701.952 913.188,704.134 913.747,738.196 914.307,753.47 914.866,736.989 915.425,735.828 915.984,732.52 916.544,698.923 917.103,667.08 917.662,685.984 918.221,687.93 918.781,655.746 919.34,656.801 919.899,673.5 920.458,655.703 921.018,656.575 921.577,692.235 922.136,693.498 922.695,710.213 923.255,707.954 923.814,686.433 924.373,669.927 924.932,669.258 925.492,688.077 926.051,671.696 926.61,685.742 927.169,670.25 927.729,704.462 928.288,721.913 928.847,702.795 929.406,689.98 929.966,676.176 930.525,677.589 931.084,675.196 931.644,691.384 932.203,709.362 932.762,674.701 933.321,655.179 933.881,644.28 934.44,647.241 934.999,649.525 935.558,648.292 936.118,695.373 936.677,711.235 937.236,723.375 937.795,705.53 938.355,702.63 938.914,705.303 939.473,707.228 940.032,691.005 940.592,677.864 941.151,679.785 941.71,662.333 942.269,682.234 942.829,681.788 943.388,681.57 943.947,698.267 944.506,714.448 945.066,731.258 945.625,730.012 946.184,713.943 946.743,697.874 947.303,664.751 947.862,665.535 948.421,698.146 948.98,666.193 949.54,669.605 950.099,670.945 950.658,669.861 951.217,686.535 951.777,682.345 952.336,699.639 952.895,665.869 953.454,683.434 954.014,681.75 954.573,663.573 955.132,678.893 955.691,705 956.251,718.538 956.81,702.143 957.369,718.296 957.928,794.123 958.488,818.88 959.047,794.015 959.606,773.996 960.165,767.931 960.725,779.89 961.284,727.563 961.843,709.691 962.402,739.514 962.962,735.41 963.521,729.776 964.08,711.382 964.639,712.254 965.199,694.838 965.758,661.654 966.317,633.621 966.876,672.609 967.436,655.728 967.995,641.631 968.554,608.979 969.113,613.127 969.673,583.959 970.232,591.478 970.791,618.666 971.35,609.49 971.91,630.673 972.469,633.25 973.028,652.892 973.587,668.403 974.147,685.651 974.706,687.218 975.265,670.734 975.824,673.295 976.384,675.613 976.943,676.716 977.502,694.974 978.061,693.568 978.621,679.776 979.18,697.864 979.739,700.376 980.298,701.177 980.858,717.732 981.417,701.533 981.976,633.914 982.535,653.801 983.095,672.436 983.654,670.973 984.213,702.582 984.772,669.657 985.332,670.251 985.891,619.259 986.45,659.328 987.009,643.914 987.569,597.74 988.128,601.639 988.687,606.418 989.246,638.995 989.806,659.609 990.365,660.665 990.924,644.519 991.483,649.149 992.043,632.604 992.602,621.067 993.161,625.167 993.72,642.691 994.28,660.986 994.839,660.305 995.398,658.144 995.957,640.878 996.517,675.767 997.076,682.862 997.635,681.401 998.194,679.054 998.754,697.272 999.313,717.243 999.872,716.696 1000.43,715.506 1000.99,743.438 1001.55,740.131 1002.11,738.355 1002.67,718.232 1003.23,700.502 1003.79,743.953 1004.35,740.33 1004.91,754.334 1005.46,718.501 1006.02,748.897 1006.58,742.782 1007.14,772.276 1007.7,769.618 1008.26,800.576 1008.82,842.829 1009.38,802.605 1009.94,783.203 1010.5,842.313 1011.06,816.181 1011.62,774.68 1012.18,803.416 1012.73,782.229 1013.29,759.754 1013.85,721.24 1014.41,719.5 1014.97,766.536 1015.53,762.936 1016.09,741.921 1016.65,736.808 1017.21,748.449 1017.77,745.601 1018.33,742.396 1018.89,737.944 1019.45,705.516 1020.01,719.65 1020.56,720.913 1021.12,707.066 1021.68,677.741 1022.24,677.38 1022.8,663.611 1023.36,644.738 1023.92,662.371 1024.48,630.725 1025.04,666.002 1025.6,682.54 1026.16,681.008 1026.72,668.035 1027.28,670.646 1027.83,653.594 1028.39,642.143 1028.95,613.905 1029.51,631.669 1030.07,632.541 1030.63,651.272 1031.19,640.153 1031.75,643.103 1032.31,691.713 1032.87,691.629 1033.43,687.975 1033.99,691.205 1034.55,690.429 1035.1,656.603 1035.66,708.359 1036.22,755.929 1036.78,754.258 1037.34,750.653 1037.9,728.29 1038.46,755.793 1039.02,751.236 1039.58,747.909 1040.14,746.185 1040.7,742.127 1041.26,756.68 1041.82,723.264 1042.38,724.048 1042.93,722.4 1043.49,734.483 1044.05,732.747 1044.61,732.043 1045.17,729.51 1045.73,758.545 1046.29,742.602 1046.85,757.426 1047.41,754.628 1047.97,784.422 1048.53,780.365 1049.09,745.529 1049.65,711.414 1050.2,676.621 1050.76,707.853 1051.32,722.233 1051.88,752.79 1052.44,734.927 1053,778.485 1053.56,773.489 1054.12,786.322 1054.68,779.782 1055.24,759.878 1055.8,773.025 1056.36,735.489 1056.92,700.187 1057.48,715.738 1058.03,762.427 1058.59,774.368 1059.15,785.193 1059.71,796.52 1060.27,710.371 1060.83,726.695 1061.39,724.854 1061.95,707.019 1062.51,691.016 1063.07,642.878 1063.63,646.345 1064.19,613.803 1064.75,614.503 1065.3,632.298 1065.86,622.701 1066.42,593.468 1066.98,595.182 1067.54,584.757 1068.1,571.12 1068.66,559.89 1069.22,497.904 1069.78,525.817 1070.34,532.313 1070.9,523.563 1071.46,531.606 1072.02,572.965 1072.57,578.709 1073.13,569.196 1073.69,556.534 1074.25,577.924 1074.81,584.7 1075.37,612.359 1075.93,633.876 1076.49,605.343 1077.05,579.713 1077.61,587.85 1078.17,562.251 1078.73,539.337 1079.29,549.01 1079.85,552.999 1080.4,544.154 1080.96,551.569 1081.52,558.867 1082.08,550.719 1082.64,512.182 1083.2,502.583 1083.76,544.555 1084.32,570.267 1084.88,607.664 1085.44,596.717 1086,602.138 1086.56,606.279 1087.12,611.392 1087.67,647.289 1088.23,636.274 1088.79,641.001 1089.35,660.707 1089.91,648.111 1090.47,651.405 1091.03,652.503 1091.59,669.602 1092.15,672.438 1092.71,722.302 1093.27,720.529 1093.83,704.08 1094.39,689.824 1094.94,709.628 1095.5,738.716 1096.06,719.043 1096.62,720.187 1097.18,732.583 1097.74,729.592 1098.3,683.995 1098.86,683.295 1099.42,701.38 1099.98,698.105 1100.54,650.42 1101.1,634.446 1101.66,654.497 1102.22,657.042 1102.77,658.743 1103.33,661.168 1103.89,662.437 1104.45,691.588 1105.01,677.713 1105.57,697.475 1106.13,717.452 1106.69,715.836 1107.25,694.592 1107.81,692.312 1108.37,659.615 1108.93,644.663 1109.49,630.261 1110.04,631.701 1110.6,633.681 1111.16,654.311 1111.72,608.572 1112.28,595.343 1112.84,602.385 1113.4,618.169 1113.96,607.907 1114.52,611.158 1115.08,613.287 1115.64,646.69 1116.2,651.404 1116.76,637.4 1117.31,620.209 1117.87,606.678 1118.43,645.342 1118.99,613.976 1119.55,669.964 1120.11,689.42 1120.67,687.753 1121.23,655.697 1121.79,657.578 1122.35,656.594 1122.91,657.479 1123.47,674.122 1124.03,707.992 1124.59,722.197 1125.14,739.608 1125.7,757.002 1126.26,786.473 1126.82,730.762 1127.38,698.242 1127.94,715.363 1128.5,697.233 1129.06,695.376 1129.62,695.446 1130.18,730.537 1130.74,778.344 1131.3,760.482 1131.86,791.954 1132.41,768.384 1132.97,779.334 1133.53,758.19 1134.09,774.492 1134.65,735.87 1135.21,715.965 1135.77,717.106 1136.33,716.446 1136.89,712.472 1137.45,676.696 1138.01,660.495 1138.57,662.918 1139.13,647.893 1139.68,665.077 1140.24,680.141 1140.8,681.721 1141.36,697.297 1141.92,745.195 1142.48,758.431 1143.04,721.156 1143.6,722.037 1144.16,732.168 1144.72,730.287 1145.28,730.527 1145.84,743.767 1146.4,787.891 1146.96,784.321 1147.51,777.877 1148.07,758.569 1148.63,755.627 1149.19,770.443 1149.75,765.132 1150.31,743.73 1150.87,740.968 1151.43,704.141 1151.99,734.061 1152.55,746.398 1153.11,777.518 1153.67,787.186 1154.23,816.712 1154.78,776.959 1155.34,754.245 1155.9,768.843 1156.46,761.404 1157.02,759.91 1157.58,771.962 1158.14,738.379 1158.7,720.049 1159.26,719.832 1159.82,718.185 1160.38,748.266 1160.94,747.149 1161.5,728.348 1162.05,727.655 1162.61,739.734 1163.17,703.075 1163.73,716.718 1164.29,730.531 1164.85,708.945 1165.41,706.233 1165.97,720.96 1166.53,748.879 1167.09,761.102 1167.65,755.566 1168.21,763.905 1168.77,808.424 1169.33,802.612 1169.88,797.487 1170.44,775.444 1171,769.92 1171.56,782.319 1172.12,778.44 1172.68,743.22 1173.24,738.629 1173.8,733.839 1174.36,746.165 1174.92,794.146 1175.48,787.311 1176.04,809.865 1176.6,831.063 1177.15,821.841 1177.71,814.652 1178.27,825.657 1178.83,818.071 1179.39,793.771 1179.95,772.028 1180.51,801.975 1181.07,792.801 1181.63,791.413 1182.19,799.566 1182.75,762.679 1183.31,759.213 1183.87,725.932 1184.43,724.822 1184.98,738.042 1185.54,718.837 1186.1,730.312 1186.66,696.619 1187.22,698.219 1187.78,713.12 1188.34,710.037 1188.9,708.518 1189.46,670.91 1190.02,603.491 1190.58,594.033 1191.14,598.97 1191.7,616.48 1192.25,650.088 1192.81,646.968 1193.37,651.719 1193.93,669.639 1194.49,654.303 1195.05,638.729 1195.61,624.098 1196.17,660.032 1196.73,646.888 1197.29,614.226 1197.85,617.773 1198.41,619.792 1198.97,637.124 1199.52,620.224 1200.08,602.246 1200.64,606.1 1201.2,609.725 1201.76,597.107 1202.32,634.036 1202.88,639.364 1203.44,643.276 1204,611.055 1204.56,646.753 1205.12,649.724 1205.68,667.226 1206.24,649.996 1206.8,603.759 1207.35,607.339 1207.91,644.813 1208.47,662.546 1209.03,678.485 1209.59,677.054 1210.15,676.689 1210.71,694.124 1211.27,693.517 1211.83,679.966 1212.39,663.266 1212.95,648.072 1213.51,666.055 1214.07,667.02 1214.62,686.955 1215.18,684.236 1215.74,669.513 1216.3,668.896 1216.86,669.036 1217.42,637.575 1217.98,624.529 1218.54,627.07 1219.1,644.131 1219.66,633.827 1220.22,600.005 1220.78,622.519 1221.34,641.32 1221.89,611.447 1222.45,648.561 1223.01,665.796 1223.57,667.148 1224.13,655.514 1224.69,626.503 1225.25,663.696 1225.81,661.634 1226.37,674.79 1226.93,659.821 1227.49,659.931 1228.05,663.442 1228.61,664.183 1229.17,647.792 1229.72,615.607 1230.28,619.851 1230.84,635.855 1231.4,640.02 1231.96,628.716 1232.52,584.769 1233.08,574.084 1233.64,580.487 1234.2,601.592 1234.76,590.607 1235.32,628.44 1235.88,615.69 1236.44,616.283 1236.99,603.191 1237.55,606.68 1238.11,626.988 1238.67,678.645 1239.23,692.372 1239.79,741.924 1240.35,727.462 1240.91,726.299 1241.47,727.109 1242.03,706.999 1242.59,689.724 1243.15,704.474 1243.71,703.426 1244.26,716.561 1244.82,682.75 1245.38,683.718 1245.94,667.114 1246.5,665.686 1247.06,685.582 1247.62,685.224 1248.18,685.005 1248.74,653.935 1249.3,672.611 1249.86,691.521 1250.42,722.369 1250.98,741.413 1251.54,736.324 1252.09,732.295 1252.65,699.851 1253.21,702.755 1253.77,733.349 1254.33,732.239 1254.89,747.016 1255.45,763.032 1256.01,758.5 1256.57,768.229 1257.13,764.265 1257.69,746.196 1258.25,745.454 1258.81,727.87 1259.36,742.087 1259.92,786.857 1260.48,782.409 1261.04,810.031 1261.6,832.362 1262.16,830.697 1262.72,823.232 1263.28,783.66 1263.84,714.443 1264.4,727.664 1264.96,724.168 1265.52,693.65 1266.08,697.587 1266.63,697.429 1267.19,716.191 1267.75,684.252 1268.31,687.515 1268.87,640.338 1269.43,658.319 1269.99,661.422 1270.55,710.683 1271.11,726.016 1271.67,710.859 1272.23,676.531 1272.79,662.624 1273.35,633.018 1273.91,617.182 1274.46,621.715 1275.02,645.042 1275.58,680.487 1276.14,710.026 1276.7,741.955 1277.26,739.908 1277.82,719.443 1278.38,700.949 1278.94,669.649 1279.5,667.662 1280.06,635.55 1280.62,635.563 1281.18,636.41 1281.73,622.021 1282.29,658.132 1282.85,662.115 1283.41,660.955 1283.97,680.236 1284.53,664.727 1285.09,651.326 1285.65,637.132 1286.21,641.781 1286.77,645.366 1287.33,633.623 1287.89,622.647 1288.45,642.456 1289,643.864 1289.56,649.488 1290.12,668.915 1290.68,671.063 1291.24,673.061 1291.8,690.336 1292.36,691.379 1292.92,708.69 1293.48,711.328 1294.04,707.35 1294.6,691.025 1295.16,735.82 1295.72,702.81 1296.28,703.588 1296.83,701.745 1297.39,701.723 1297.95,651.771 1298.51,650.272 1299.07,668.517 1299.63,700.459 1300.19,699.736 1300.75,702.174 1301.31,705.01 1301.87,739.242 1302.43,738.095 1302.99,751.799 1303.55,766.787 1304.1,717.529 1304.66,700.351 1305.22,699.592 1305.78,698.472 1306.34,742.791 1306.9,722.186 1307.46,773.449 1308.02,753.199 1308.58,734.232 1309.14,700.499 1309.7,718.01 1310.26,729.429 1310.82,741.444 1311.38,737.218 1311.93,768.959 1312.49,780.318 1313.05,758.805 1313.61,740.857 1314.17,720.268 1314.73,717.134 1315.29,716.935 1315.85,716.394 1316.41,699.555 1316.97,684.148 1317.53,652.476 1318.09,621.646 1318.65,623.312 1319.2,627.541 1319.76,613.297 1320.32,634.391 1320.88,684.42 1321.44,717.154 1322,730.573 1322.56,726.303 1323.12,723.509 1323.68,722.835 1324.24,701.988 1324.8,700.294 1325.36,712.699 1325.92,727.891 1326.47,694.351 1327.03,690.922 1327.59,685.42 1328.15,653.754 1328.71,656.021 1329.27,624.456 1329.83,595.643 1330.39,631.239 1330.95,635.174 1331.51,620.73 1332.07,638.751 1332.63,653.069 1333.19,658.741 1333.75,660.896 1334.3,659.227 1334.86,679.864 1335.42,631.485 1335.98,599.82 1336.54,602.658 1337.1,607.63 1337.66,609.387 1338.22,591.137 1338.78,612.697 1339.34,615.719 1339.9,632.093 1340.46,621.125 1341.02,605.878 1341.57,612.389 1342.13,614.556 1342.69,633.463 1343.25,603.894 1343.81,639.067 1344.37,626.249 1344.93,631.578 1345.49,634.991 1346.05,653.486 1346.61,672.518 1347.17,658.41 1347.73,608.414 1348.29,598.057 1348.84,617.065 1349.4,621.557 1349.96,606.525 1350.52,628.588 1351.08,647.992 1351.64,630.577 1352.2,651.916 1352.76,639.871 1353.32,642.794 1353.88,615.877 1354.44,622.572 1355,626.363 1355.56,629.563 1356.12,631.434 1356.67,617.458 1357.23,621.226 1357.79,707.016 1358.35,738.311 1358.91,752.476 1359.47,745.632 1360.03,761.203 1360.59,789.963 1361.15,781.241 1361.71,776.028 1362.27,752.425 1362.83,749.611 1363.39,748.791 1363.94,761.844 1364.5,788.568 1365.06,765.026 1365.62,759.886 1366.18,769.931 1366.74,765.286 1367.3,746.882 1367.86,742.259 1368.42,720.884 1368.98,736.028 1369.54,747.568 1370.1,791.757 1370.66,815.995 1371.21,793.622 1371.77,786.187 1372.33,731.268 1372.89,729.993 1373.45,747.724 1374.01,757.494 1374.57,735.01 1375.13,716.255 1375.69,715.725 1376.25,761.274 1376.81,792.059 1377.37,818.955 1377.93,830.557 1378.49,757.87 1379.04,772.482 1379.6,752.077 1380.16,697.402 1380.72,680.844 1381.28,665.883 1381.84,649.501 1382.4,635.278 1382.96,686.388 1383.52,685.752 1384.08,680.192 1384.64,660.289 1385.2,626.701 1385.76,630.329 1386.31,615.276 1386.87,605.601 1387.43,641.543 1387.99,611.842 1388.55,632.609 1389.11,634.72 1389.67,653.51 1390.23,636.773 1390.79,624.219 1391.35,660.742 1391.91,680.71 1392.47,666.641 1393.03,688.36 1393.58,725.254 1394.14,722.296 1394.7,720.262 1395.26,685.708 1395.82,699.387 1396.38,697.543 1396.94,710.521 1397.5,726.832 1398.06,722.6 1398.62,737.734 1399.18,699.136 1399.74,695.131 1400.3,714.27 1400.86,712.752 1401.41,727.155 1401.97,730.564 1402.53,713.226 1403.09,694.359 1403.65,708.292 1404.21,675.813 1404.77,676.556 1405.33,611.743 1405.89,616.582 1406.45,604.824 1407.01,624.291 1407.57,610.744 1408.13,613.48 1408.68,585.564 1409.24,588.91 1409.8,593.551 1410.36,614.538 1410.92,650.216 1411.48,687.107 1412.04,670.619 1412.6,735.682 1413.16,733.941 1413.72,761.511 1414.28,724.24 1414.84,722.717 1415.4,719.842 1415.95,684.137 1416.51,700.272 1417.07,715.633 1417.63,683.108 1418.19,697.127 1418.75,695.937 1419.31,709.291 1419.87,690.084 1420.43,690.699 1420.99,707.59 1421.55,704.581 1422.11,737.039 1422.67,715.289 1423.23,695.22 1423.78,691.297 1424.34,676.833 1424.9,660.934 1425.46,678.659 1426.02,676.498 1426.58,661.089 1427.14,610.228 1427.7,631.514 1428.26,652.244 1428.82,652.652 1429.38,639.007 1429.94,659.736 1430.5,678.914 1431.05,661.459 1431.61,664.793 1432.17,684.944 1432.73,687.883 1433.29,687.131 1433.85,685.958 1434.41,684.605 1434.97,686.672 1435.53,720.03 1436.09,702.73 1436.65,637.845 1437.21,623.292 1437.77,641.551 1438.33,627.539 1438.88,617.769 1439.44,620.77 1440,622.929 1440.56,610.53 1441.12,595.934 1441.68,570.586 1442.24,579.901 1442.8,570.021 1443.36,609.283 1443.92,628.222 1444.48,652.221 1445.04,656.243 1445.6,694.797 1446.15,724.299 1446.71,727.13 1447.27,707.233 1447.83,708.805 1448.39,723.475 1448.95,720.434 1449.51,764.262 1450.07,762.314 1450.63,789.993 1451.19,783.167 1451.75,777.084 1452.31,739.774 1452.87,734.674 1453.42,716.096 1453.98,697.187 1454.54,715.437 1455.1,714.796 1455.66,695.974 1456.22,679.192 1456.78,666.12 1457.34,665.875 1457.9,703.249 1458.46,717.197 1459.02,712.564 1459.58,695.302 1460.14,713.063 1460.7,709.267 1461.25,736.978 1461.81,734.389 1462.37,715.09 1462.93,727.195 1463.49,738.895 1464.05,721.043 1464.61,770.193 1465.17,737.095 1465.73,716.45 1466.29,664.784 1466.85,651.154 1467.41,686.958 1467.97,702.629 1468.52,681.996 1469.08,697.37 1469.64,713.153 1470.2,711.919 1470.76,694.404 1471.32,678.381 1471.88,678.288 1472.44,711.123 1473,710.338 1473.56,660.669 1474.12,665.974 1474.68,697.266 1475.24,712.496 1475.79,691.405 1476.35,704.584 1476.91,701.301 1477.47,698.405 1478.03,695.096 1478.59,694.406 1479.15,695.461 1479.71,744.857 1480.27,727.907 1480.83,723.37 1481.39,705.97 1481.95,709.173 1482.51,709.484 1483.07,724.586 1483.62,707.571 1484.18,656.825 1484.74,655.76 1485.3,654.94 1485.86,655.09 1486.42,626.213 1486.98,615.471 1487.54,634.577 1488.1,606.336 1488.66,614.213 1489.22,633.617 1489.78,636.244 1490.34,638.922 1490.89,656.159 1491.45,674.946 1492.01,677.121 1492.57,696.416 1493.13,692.377 1493.69,676.461 1494.25,694.697 1494.81,694.202 1495.37,694.679 1495.93,675.35 1496.49,675.78 1497.05,677.777 1497.61,694.098 1498.16,707.294 1498.72,704.807 1499.28,688.541 1499.84,688.013 1500.4,687.47 1500.96,704.387 1501.52,721.34 1502.08,718.345 1502.64,702.408 1503.2,669.108 1503.76,652.567 1504.32,639.559 1504.88,628.231 1505.44,634.151 1505.99,624.968 1506.55,596.86 1507.11,605.747 1507.67,610.655 1508.23,631.88 1508.79,668.383 1509.35,667.261 1509.91,672.242 1510.47,671.814 1511.03,654.435 1511.59,637.818 1512.15,623.835 1512.71,642.062 1513.26,661.477 1513.82,648.376 1514.38,653.308 1514.94,674.887 1515.5,691 1516.06,674.255 1516.62,718.961 1517.18,722.084 1517.74,720.814 1518.3,721.886 1518.86,721.126 1519.42,702.468 1519.98,700.278 1520.53,729.229 1521.09,695.777 1521.65,678.752 1522.21,698.382 1522.77,698.369 1523.33,666.182 1523.89,668.046 1524.45,716.666 1525.01,731.442 1525.57,745.367 1526.13,771.795 1526.69,750.325 1527.25,747.87 1527.81,725.292 1528.36,723.217 1528.92,736.839 1529.48,735.354 1530.04,715.959 1530.6,749.134 1531.16,762.847 1531.72,738.764 1532.28,716.451 1532.84,695.8 1533.4,696.021 1533.96,695.433 1534.52,695.356 1535.08,696.661 1535.63,696.387 1536.19,710.106 1536.75,755.545 1537.31,734.435 1537.87,746.86 1538.43,712.637 1538.99,758.307 1539.55,736.262 1540.11,764.762 1540.67,776.141 1541.23,773.654 1541.79,766.414 1542.35,765.298 1542.9,759.398 1543.46,753.092 1544.02,751.947 1544.58,743.487 1545.14,723.48 1545.7,718.154 1546.26,745.954 1546.82,694.681 1547.38,710.139 1547.94,675.517 1548.5,675.255 1549.06,641.289 1549.62,645.14 1550.18,630.275 1550.73,635.711 1551.29,620.64 1551.85,604.466 1552.41,608.265 1552.97,614.681 1553.53,636.014 1554.09,622.807 1554.65,642.645 1555.21,613.938 1555.77,586.024 1556.33,611.441 1556.89,634.458 1557.45,656.434 1558,659.552 1558.56,662.795 1559.12,709.41 1559.68,676.575 1560.24,677.443 1560.8,678.3 1561.36,615.069 1561.92,622.248 1562.48,627.028 1563.04,645.398 1563.6,645.329 1564.16,664.239 1564.72,634.863 1565.28,637.053 1565.83,671.797 1566.39,688.503 1566.95,677.809 1567.51,662.757 1568.07,648.701 1568.63,668.981 1569.19,700.868 1569.75,700.229 1570.31,682.722 1570.87,664.589 1571.43,645.202 1571.99,662.825 1572.55,680.452 1573.1,681.766 1573.66,715.178 1574.22,694.599 1574.78,692.658 1575.34,737.881 1575.9,736.977 1576.46,714.805 1577.02,711.34 1577.58,693.422 1578.14,710.807 1578.7,727.612 1579.26,758.464 1579.82,771.294 1580.37,783.594 1580.93,728.627 1581.49,756.546 1582.05,769.283 1582.61,761.823 1583.17,724.56 1583.73,674.809 1584.29,659.265 1584.85,677.323 1585.41,660.918 1585.97,628.499 1586.53,664.853 1587.09,663.854 1587.65,661.761 1588.2,612.089 1588.76,616.627 1589.32,636.458 1589.88,652.963 1590.44,640.194 1591,705.015 1591.56,720.203 1592.12,749.765 1592.68,729.452 1593.24,724.136 1593.8,692.248 1594.36,674.536 1594.92,674.185 1595.47,690.3 1596.03,723.374 1596.59,706.386 1597.15,692.59 1597.71,710.255 1598.27,706.173 1598.83,704.909 1599.39,704.513 1599.95,720.907 1600.51,765.21 1601.07,743.511 1601.63,756.71 1602.19,768.507 1602.74,777.956 1603.3,771.23 1603.86,749.985 1604.42,708.244 1604.98,691.265 1605.54,720.418 1606.1,706.104 1606.66,703.71 1607.22,670.397 1607.78,688.416 1608.34,655.417 1608.9,642.72 1609.46,659.037 1610.02,662.424 1610.57,645.804 1611.13,646.997 1611.69,664.906 1612.25,717.677 1612.81,733.628 1613.37,719.057 1613.93,735.013 1614.49,730.976 1615.05,709.846 1615.61,726.196 1616.17,660.131 1616.73,679.089 1617.29,680.479 1617.84,678.278 1618.4,711.25 1618.96,709.607 1619.52,770.002 1620.08,764.473 1620.64,760.69 1621.2,736.898 1621.76,716.969 1622.32,712.458 1622.88,728.48 1623.44,710.023 1624,708.84 1624.56,705.274 1625.11,684.815 1625.67,686.931 1626.23,688.623 1626.79,690.606 1627.35,706.008 1627.91,671.487 1628.47,687.459 1629.03,687.848 1629.59,668.055 1630.15,652.443 1630.71,668.018 1631.27,622.869 1631.83,628.159 1632.39,650.697 1632.94,634.165 1633.5,632.722 1634.06,621.215 1634.62,575.042 1635.18,577.792 1635.74,594.37 1636.3,567.681 1636.86,577.729 1637.42,599.518 1637.98,621.632 1638.54,655.668 1639.1,624.909 1639.66,641.935 1640.21,660.417 1640.77,661.571 1641.33,660.699 1641.89,681.854 1642.45,661.071 1643.01,664.024 1643.57,661.486 1644.13,712.45 1644.69,695.903 1645.25,661.178 1645.81,677.893 1646.37,677.224 1646.93,696.672 1647.48,708.662 1648.04,726.672 1648.6,743.221 1649.16,693.838 1649.72,710.532 1650.28,721.515 1650.84,739.644 1651.4,737.857 1651.96,751.16 1652.52,727.776 1653.08,709.693 1653.64,723.478 1654.2,724.79 1654.76,739.255 1655.31,722.753 1655.87,702.136 1656.43,718.565 1656.99,729.852 1657.55,708.277 1658.11,737.455 1658.67,734.438 1659.23,730.867 1659.79,729.608 1660.35,723.212 1660.91,737.822 1661.47,753.858 1662.03,750.164 1662.58,731.756 1663.14,728.265 1663.7,745.932 1664.26,726.669 1664.82,738.339 1665.38,734.76 1665.94,745.578 1666.5,757.207 1667.06,788.134 1667.62,799.857 1668.18,808.388 1668.74,800.294 1669.3,811.008 1669.85,757.283 1670.41,701.417 1670.97,685.066 1671.53,621.635 1672.09,607.829 1672.65,597.997 1673.21,620.012 1673.77,604.992 1674.33,675.7 1674.89,692.178 1675.45,739.431 1676.01,705.092 1676.57,702.537 1677.13,702.866 1677.68,700.952 1678.24,719.535 1678.8,686.062 1679.36,671.104 1679.92,701.38 1680.48,733.148 1681.04,735.513 1681.6,713.98 1682.16,708.807 1682.72,689.617 1683.28,654.14 1683.84,635.968 1684.4,643.336 1684.95,646.787 1685.51,663.678 1686.07,665.604 1686.63,633.305 1687.19,636.398 1687.75,641.035 1688.31,583.455 1688.87,602.653 1689.43,604.011 1689.99,623.441 1690.55,628.741 1691.11,631.918 1691.67,617.14 1692.23,604.333 1692.78,626.148 1693.34,629.379 1693.9,662.396 1694.46,635.377 1695.02,641.707 1695.58,643.367 1696.14,691.48 1696.7,676.609 1697.26,656.122 1697.82,656.058 1698.38,657.384 1698.94,660.996 1699.5,679.353 1700.05,664.794 1700.61,717.187 1701.17,714.792 1701.73,729.49 1702.29,645.219 1702.85,645.411 1703.41,644.41 1703.97,645.579 1704.53,667.077 1705.09,682.486 1705.65,667.314 1706.21,654.615 1706.77,656.197 1707.32,674.747 1707.88,687.18 1708.44,703.683 1709,719.085 1709.56,698.576 1710.12,635.619 1710.68,588.862 1711.24,629.458 1711.8,649.066 1712.36,633.842 1712.92,653.983 1713.48,669.179 1714.04,656.186 1714.6,687.611 1715.15,703.848 1715.71,674.087 1716.27,690.866 1716.83,707.394 1717.39,690.988 1717.95,706.226 1718.51,671.567 1719.07,689.102 1719.63,672.027 1720.19,670.613 1720.75,637.382 1721.31,674.071 1721.87,674.232 1722.42,658.915 1722.98,660.374 1723.54,662.917 1724.1,664.86 1724.66,684.694 1725.22,667.314 1725.78,681.246 1726.34,682.789 1726.9,700.327 1727.46,677.992 1728.02,659.64 1728.58,677.673 1729.14,674.925 1729.69,737.344 1730.25,752.11 1730.81,731.08 1731.37,727.903 1731.93,725.698 1732.49,741.761 1733.05,675.288 1733.61,689.098 1734.17,706.602 1734.73,658.361 1735.29,688.252 1735.85,670.89 1736.41,669.862 1736.97,669.672 1737.52,670.93 1738.08,702.292 1738.64,685.868 1739.2,684.409 1739.76,682.903 1740.32,680.048 1740.88,680.244 1741.44,693.381 1742,662.459 1742.56,646.953 1743.12,645.878 1743.68,666.318 1744.24,635.357 1744.79,608.859 1745.35,593.754 1745.91,583.59 1746.47,587.366 1747.03,594.602 1747.59,636.098 1748.15,641.116 1748.71,673.936 1749.27,676.167 1749.83,691.456 1750.39,674.007 1750.95,655.615 1751.51,657.879 1752.06,645.78 1752.62,653.803 1753.18,643.246 1753.74,645.535 1754.3,634.39 1754.86,670.004 1755.42,639.801 1755.98,640.296 1756.54,640.853 1757.1,692.774 1757.66,712.706 1758.22,728.438 1758.78,742.644 1759.34,722.776 1759.89,703.657 1760.45,700.199 1761.01,669.336 1761.57,683.874 1762.13,669.352 1762.69,671.997 1763.25,711.866 1763.81,714.094 1764.37,699.278 1764.93,717.881 1765.49,699.201 1766.05,714.035 1766.61,696.931 1767.16,697.892 1767.72,664.438 1768.28,664.802 1768.84,667.305 1769.4,668.768 1769.96,649.659 1770.52,667.584 1771.08,668.18 1771.64,636.554 1772.2,656.909 1772.76,674.393 1773.32,658.395 1773.88,674.215 1774.43,675.996 1774.99,694.689 1775.55,709.188 1776.11,740.244 1776.67,755.706 1777.23,717.279 1777.79,712.883 1778.35,698.069 1778.91,650.072 1779.47,651.552 1780.03,638.242 1780.59,644.964 1781.15,630.233 1781.71,604.315 1782.26,627.642 1782.82,632.013 1783.38,616.73 1783.94,618.751 1784.5,636.801 1785.06,686.655 1785.62,667.224 1786.18,667.661 1786.74,638.042 1787.3,654.586 1787.86,657.914 1788.42,640.335 1788.98,643.652 1789.53,627.886 1790.09,633.993 1790.65,652.031 1791.21,652.57 1791.77,673.22 1792.33,672.582 1792.89,704.783 1793.45,706.921 1794.01,706.965 1794.57,706.134 1795.13,706.279 1795.69,702.417 1796.25,652.984 1796.8,605.984 1797.36,624.809 1797.92,613.059 1798.48,649.401 1799.04,640.195 1799.6,638.448 1800.16,640.155 1800.72,625.334 1801.28,642.679 1801.84,646.641 1802.4,663.942 1802.96,682.083 1803.52,666.539 1804.08,632.883 1804.63,625.897 1805.19,615.567 1805.75,601.035 1806.31,654.275 1806.87,653.946 1807.43,673.907 1807.99,707.976 1808.55,689.621 1809.11,690.901 1809.67,727.572 1810.23,724.234 1810.79,690.48 1811.35,703.889 1811.9,700.455 1812.46,715.587 1813.02,712.78 1813.58,712.009 1814.14,709.716 1814.7,708.594 1815.26,740.922 1815.82,754.388 1816.38,801.982 1816.94,795.114 1817.5,787.398 1818.06,778.557 1818.62,807.115 1819.18,797.795 1819.73,836.628 1820.29,842.87 1820.85,817.642 1821.41,811.757 1821.97,787.879 1822.53,796.032 1823.09,835.692 1823.65,827.394 1824.21,787.298 1824.77,766.887 1825.33,760.56 1825.89,725.664 1826.45,722.869 1827,736 1827.56,746.998 1828.12,727.959 1828.68,693.258 1829.24,709.538 1829.8,708.235 1830.36,723.102 1830.92,703.694 1831.48,732.937 1832.04,730.791 1832.6,729.611 1833.16,710.854 1833.72,723.725 1834.27,688.37 1834.83,684.228 1835.39,682.669 1835.95,701.1 1836.51,763.232 1837.07,757.915 1837.63,737.913 1838.19,734.104 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 692.537 L720.806 692.537 L721.365 692.537 L721.924 692.537 L722.484 692.537 L723.043 692.537 L723.602 692.537 L724.161 692.537 L724.721 692.537 L725.28 692.537 L725.839 692.537 L726.398 692.537 L726.958 692.537 L727.517 692.537 L728.076 692.537 L728.635 692.537 L729.195 692.537 L729.754 692.537 L730.313 692.537 L730.872 692.537 L731.432 692.537 L731.991 692.537 L732.55 692.537 L733.109 692.537 L733.669 692.537 L734.228 692.537 L734.787 692.537 L735.346 692.537 L735.906 692.537 L736.465 692.537 L737.024 692.537 L737.583 692.537 L738.143 692.537 L738.702 692.537 L739.261 692.537 L739.82 692.537 L740.38 692.537 L740.939 692.537 L741.498 692.537 L742.057 692.537 L742.617 692.537 L743.176 692.537 L743.735 692.537 L744.294 692.537 L744.854 692.537 L745.413 692.537 L745.972 692.537 L746.531 692.537 L747.091 692.537 L747.65 692.537 L748.209 692.537 L748.768 692.537 L749.328 692.537 L749.887 692.537 L750.446 692.537 L751.005 692.537 L751.565 692.537 L752.124 692.537 L752.683 692.537 L753.242 692.537 L753.802 692.537 L754.361 692.537 L754.92 692.537 L755.479 692.537 L756.039 692.537 L756.598 692.537 L757.157 692.537 L757.716 692.537 L758.276 692.537 L758.835 692.537 L759.394 692.537 L759.953 692.537 L760.513 692.537 L761.072 692.537 L761.631 692.537 L762.19 692.537 L762.75 692.537 L763.309 692.537 L763.868 692.537 L764.427 692.537 L764.987 692.537 L765.546 692.537 L766.105 692.537 L766.664 692.537 L767.224 692.537 L767.783 692.537 L768.342 692.537 L768.901 692.537 L769.461 692.537 L770.02 692.537 L770.579 692.537 L771.138 692.537 L771.698 692.537 L772.257 692.537 L772.816 692.537 L773.375 692.537 L773.935 692.537 L774.494 692.537 L775.053 692.537 L775.612 692.537 L776.172 692.537 L776.731 692.537 L777.29 692.537 L777.849 692.537 L778.409 692.537 L778.968 692.537 L779.527 692.537 L780.086 692.537 L780.646 692.537 L781.205 692.537 L781.764 692.537 L782.323 692.537 L782.883 692.537 L783.442 692.537 L784.001 692.537 L784.56 692.537 L785.12 692.537 L785.679 692.537 L786.238 692.537 L786.797 692.537 L787.357 692.537 L787.916 692.537 L788.475 692.537 L789.034 692.537 L789.594 692.537 L790.153 692.537 L790.712 692.537 L791.271 692.537 L791.831 692.537 L792.39 692.537 L792.949 692.537 L793.508 692.537 L794.068 692.537 L794.627 692.537 L795.186 692.537 L795.745 692.537 L796.305 692.537 L796.864 692.537 L797.423 692.537 L797.982 692.537 L798.542 692.537 L799.101 692.537 L799.66 692.537 L800.219 692.537 L800.779 692.537 L801.338 692.537 L801.897 692.537 L802.456 692.537 L803.016 692.537 L803.575 692.537 L804.134 692.537 L804.693 692.537 L805.253 692.537 L805.812 692.537 L806.371 692.537 L806.931 692.537 L807.49 692.537 L808.049 692.537 L808.608 692.537 L809.168 692.537 L809.727 692.537 L810.286 692.537 L810.845 692.537 L811.405 692.537 L811.964 692.537 L812.523 692.537 L813.082 692.537 L813.642 692.537 L814.201 692.537 L814.76 692.537 L815.319 692.537 L815.879 692.537 L816.438 692.537 L816.997 692.537 L817.556 692.537 L818.116 692.537 L818.675 692.537 L819.234 692.537 L819.793 692.537 L820.353 692.537 L820.912 692.537 L821.471 692.537 L822.03 692.537 L822.59 692.537 L823.149 692.537 L823.708 692.537 L824.267 692.537 L824.827 692.537 L825.386 692.537 L825.945 692.537 L826.504 692.537 L827.064 692.537 L827.623 692.537 L828.182 692.537 L828.741 692.537 L829.301 692.537 L829.86 692.537 L830.419 692.537 L830.978 692.537 L831.538 692.537 L832.097 692.537 L832.656 692.537 L833.215 692.537 L833.775 692.537 L834.334 692.537 L834.893 692.537 L835.452 692.537 L836.012 692.537 L836.571 692.537 L837.13 692.537 L837.689 692.537 L838.249 692.537 L838.808 692.537 L839.367 692.537 L839.926 692.537 L840.486 692.537 L841.045 692.537 L841.604 692.537 L842.163 692.537 L842.723 692.537 L843.282 692.537 L843.841 692.537 L844.4 692.537 L844.96 692.537 L845.519 692.537 L846.078 692.537 L846.637 692.537 L847.197 692.537 L847.756 692.537 L848.315 692.537 L848.874 692.537 L849.434 692.537 L849.993 692.537 L850.552 692.537 L851.111 692.537 L851.671 692.537 L852.23 692.537 L852.789 692.537 L853.348 692.537 L853.908 692.537 L854.467 692.537 L855.026 692.537 L855.585 692.537 L856.145 692.537 L856.704 692.537 L857.263 692.537 L857.822 692.537 L858.382 692.537 L858.941 692.537 L859.5 692.537 L860.059 692.537 L860.619 692.537 L861.178 692.537 L861.737 692.537 L862.296 692.537 L862.856 692.537 L863.415 692.537 L863.974 692.537 L864.533 692.537 L865.093 692.537 L865.652 692.537 L866.211 692.537 L866.77 692.537 L867.33 692.537 L867.889 692.537 L868.448 692.537 L869.007 692.537 L869.567 692.537 L870.126 692.537 L870.685 692.537 L871.244 692.537 L871.804 692.537 L872.363 692.537 L872.922 692.537 L873.481 692.537 L874.041 692.537 L874.6 692.537 L875.159 692.537 L875.718 692.537 L876.278 692.537 L876.837 692.537 L877.396 692.537 L877.955 692.537 L878.515 692.537 L879.074 692.537 L879.633 692.537 L880.192 692.537 L880.752 692.537 L881.311 692.537 L881.87 692.537 L882.429 692.537 L882.989 692.537 L883.548 692.537 L884.107 692.537 L884.666 692.537 L885.226 692.537 L885.785 692.537 L886.344 692.537 L886.903 692.537 L887.463 692.537 L888.022 692.537 L888.581 692.537 L889.14 692.537 L889.7 692.537 L890.259 692.537 L890.818 692.537 L891.377 692.537 L891.937 692.537 L892.496 692.537 L893.055 692.537 L893.614 692.537 L894.174 692.537 L894.733 692.537 L895.292 692.537 L895.851 692.537 L896.411 692.537 L896.97 692.537 L897.529 692.537 L898.088 692.537 L898.648 692.537 L899.207 692.537 L899.766 692.537 L900.325 692.537 L900.885 692.537 L901.444 692.537 L902.003 692.537 L902.562 692.537 L903.122 692.537 L903.681 692.537 L904.24 692.537 L904.799 692.537 L905.359 692.537 L905.918 692.537 L906.477 692.537 L907.036 692.537 L907.596 692.537 L908.155 692.537 L908.714 692.537 L909.273 692.537 L909.833 692.537 L910.392 692.537 L910.951 692.537 L911.51 692.537 L912.07 692.537 L912.629 692.537 L913.188 692.537 L913.747 692.537 L914.307 692.537 L914.866 692.537 L915.425 692.537 L915.984 692.537 L916.544 692.537 L917.103 692.537 L917.662 692.537 L918.221 692.537 L918.781 692.537 L919.34 692.537 L919.899 692.537 L920.458 692.537 L921.018 692.537 L921.577 692.537 L922.136 692.537 L922.695 692.537 L923.255 692.537 L923.814 692.537 L924.373 692.537 L924.932 692.537 L925.492 692.537 L926.051 692.537 L926.61 692.537 L927.169 692.537 L927.729 692.537 L928.288 692.537 L928.847 692.537 L929.406 692.537 L929.966 692.537 L930.525 692.537 L931.084 692.537 L931.644 692.537 L932.203 692.537 L932.762 692.537 L933.321 692.537 L933.881 692.537 L934.44 692.537 L934.999 692.537 L935.558 692.537 L936.118 692.537 L936.677 692.537 L937.236 692.537 L937.795 692.537 L938.355 692.537 L938.914 692.537 L939.473 692.537 L940.032 692.537 L940.592 692.537 L941.151 692.537 L941.71 692.537 L942.269 692.537 L942.829 692.537 L943.388 692.537 L943.947 692.537 L944.506 692.537 L945.066 692.537 L945.625 692.537 L946.184 692.537 L946.743 692.537 L947.303 692.537 L947.862 692.537 L948.421 692.537 L948.98 692.537 L949.54 692.537 L950.099 692.537 L950.658 692.537 L951.217 692.537 L951.777 692.537 L952.336 692.537 L952.895 692.537 L953.454 692.537 L954.014 692.537 L954.573 692.537 L955.132 692.537 L955.691 692.537 L956.251 692.537 L956.81 692.537 L957.369 692.537 L957.928 692.537 L958.488 692.537 L959.047 692.537 L959.606 692.537 L960.165 692.537 L960.725 692.537 L961.284 692.537 L961.843 692.537 L962.402 692.537 L962.962 692.537 L963.521 692.537 L964.08 692.537 L964.639 692.537 L965.199 692.537 L965.758 692.537 L966.317 692.537 L966.876 692.537 L967.436 692.537 L967.995 692.537 L968.554 692.537 L969.113 692.537 L969.673 692.537 L970.232 692.537 L970.791 692.537 L971.35 692.537 L971.91 692.537 L972.469 692.537 L973.028 692.537 L973.587 692.537 L974.147 692.537 L974.706 692.537 L975.265 692.537 L975.824 692.537 L976.384 692.537 L976.943 692.537 L977.502 692.537 L978.061 692.537 L978.621 692.537 L979.18 692.537 L979.739 692.537 L980.298 692.537 L980.858 692.537 L981.417 692.537 L981.976 692.537 L982.535 692.537 L983.095 692.537 L983.654 692.537 L984.213 692.537 L984.772 692.537 L985.332 692.537 L985.891 692.537 L986.45 692.537 L987.009 692.537 L987.569 692.537 L988.128 692.537 L988.687 692.537 L989.246 692.537 L989.806 692.537 L990.365 692.537 L990.924 692.537 L991.483 692.537 L992.043 692.537 L992.602 692.537 L993.161 692.537 L993.72 692.537 L994.28 692.537 L994.839 692.537 L995.398 692.537 L995.957 692.537 L996.517 692.537 L997.076 692.537 L997.635 692.537 L998.194 692.537 L998.754 692.537 L999.313 692.537 L999.872 692.537 L1000.43 692.537 L1000.99 692.537 L1001.55 692.537 L1002.11 692.537 L1002.67 692.537 L1003.23 692.537 L1003.79 692.537 L1004.35 692.537 L1004.91 692.537 L1005.46 692.537 L1006.02 692.537 L1006.58 692.537 L1007.14 692.537 L1007.7 692.537 L1008.26 692.537 L1008.82 692.537 L1009.38 692.537 L1009.94 692.537 L1010.5 692.537 L1011.06 692.537 L1011.62 692.537 L1012.18 692.537 L1012.73 692.537 L1013.29 692.537 L1013.85 692.537 L1014.41 692.537 L1014.97 692.537 L1015.53 692.537 L1016.09 692.537 L1016.65 692.537 L1017.21 692.537 L1017.77 692.537 L1018.33 692.537 L1018.89 692.537 L1019.45 692.537 L1020.01 692.537 L1020.56 692.537 L1021.12 692.537 L1021.68 692.537 L1022.24 692.537 L1022.8 692.537 L1023.36 692.537 L1023.92 692.537 L1024.48 692.537 L1025.04 692.537 L1025.6 692.537 L1026.16 692.537 L1026.72 692.537 L1027.28 692.537 L1027.83 692.537 L1028.39 692.537 L1028.95 692.537 L1029.51 692.537 L1030.07 692.537 L1030.63 692.537 L1031.19 692.537 L1031.75 692.537 L1032.31 692.537 L1032.87 692.537 L1033.43 692.537 L1033.99 692.537 L1034.55 692.537 L1035.1 692.537 L1035.66 692.537 L1036.22 692.537 L1036.78 692.537 L1037.34 692.537 L1037.9 692.537 L1038.46 692.537 L1039.02 692.537 L1039.58 692.537 L1040.14 692.537 L1040.7 692.537 L1041.26 692.537 L1041.82 692.537 L1042.38 692.537 L1042.93 692.537 L1043.49 692.537 L1044.05 692.537 L1044.61 692.537 L1045.17 692.537 L1045.73 692.537 L1046.29 692.537 L1046.85 692.537 L1047.41 692.537 L1047.97 692.537 L1048.53 692.537 L1049.09 692.537 L1049.65 692.537 L1050.2 692.537 L1050.76 692.537 L1051.32 692.537 L1051.88 692.537 L1052.44 692.537 L1053 692.537 L1053.56 692.537 L1054.12 692.537 L1054.68 692.537 L1055.24 692.537 L1055.8 692.537 L1056.36 692.537 L1056.92 692.537 L1057.48 692.537 L1058.03 692.537 L1058.59 692.537 L1059.15 692.537 L1059.71 692.537 L1060.27 692.537 L1060.83 692.537 L1061.39 692.537 L1061.95 692.537 L1062.51 692.537 L1063.07 692.537 L1063.63 692.537 L1064.19 692.537 L1064.75 692.537 L1065.3 692.537 L1065.86 692.537 L1066.42 692.537 L1066.98 692.537 L1067.54 692.537 L1068.1 692.537 L1068.66 692.537 L1069.22 692.537 L1069.78 692.537 L1070.34 692.537 L1070.9 692.537 L1071.46 692.537 L1072.02 692.537 L1072.57 692.537 L1073.13 692.537 L1073.69 692.537 L1074.25 692.537 L1074.81 692.537 L1075.37 692.537 L1075.93 692.537 L1076.49 692.537 L1077.05 692.537 L1077.61 692.537 L1078.17 692.537 L1078.73 692.537 L1079.29 692.537 L1079.85 692.537 L1080.4 692.537 L1080.96 692.537 L1081.52 692.537 L1082.08 692.537 L1082.64 692.537 L1083.2 692.537 L1083.76 692.537 L1084.32 692.537 L1084.88 692.537 L1085.44 692.537 L1086 692.537 L1086.56 692.537 L1087.12 692.537 L1087.67 692.537 L1088.23 692.537 L1088.79 692.537 L1089.35 692.537 L1089.91 692.537 L1090.47 692.537 L1091.03 692.537 L1091.59 692.537 L1092.15 692.537 L1092.71 692.537 L1093.27 692.537 L1093.83 692.537 L1094.39 692.537 L1094.94 692.537 L1095.5 692.537 L1096.06 692.537 L1096.62 692.537 L1097.18 692.537 L1097.74 692.537 L1098.3 692.537 L1098.86 692.537 L1099.42 692.537 L1099.98 692.537 L1100.54 692.537 L1101.1 692.537 L1101.66 692.537 L1102.22 692.537 L1102.77 692.537 L1103.33 692.537 L1103.89 692.537 L1104.45 692.537 L1105.01 692.537 L1105.57 692.537 L1106.13 692.537 L1106.69 692.537 L1107.25 692.537 L1107.81 692.537 L1108.37 692.537 L1108.93 692.537 L1109.49 692.537 L1110.04 692.537 L1110.6 692.537 L1111.16 692.537 L1111.72 692.537 L1112.28 692.537 L1112.84 692.537 L1113.4 692.537 L1113.96 692.537 L1114.52 692.537 L1115.08 692.537 L1115.64 692.537 L1116.2 692.537 L1116.76 692.537 L1117.31 692.537 L1117.87 692.537 L1118.43 692.537 L1118.99 692.537 L1119.55 692.537 L1120.11 692.537 L1120.67 692.537 L1121.23 692.537 L1121.79 692.537 L1122.35 692.537 L1122.91 692.537 L1123.47 692.537 L1124.03 692.537 L1124.59 692.537 L1125.14 692.537 L1125.7 692.537 L1126.26 692.537 L1126.82 692.537 L1127.38 692.537 L1127.94 692.537 L1128.5 692.537 L1129.06 692.537 L1129.62 692.537 L1130.18 692.537 L1130.74 692.537 L1131.3 692.537 L1131.86 692.537 L1132.41 692.537 L1132.97 692.537 L1133.53 692.537 L1134.09 692.537 L1134.65 692.537 L1135.21 692.537 L1135.77 692.537 L1136.33 692.537 L1136.89 692.537 L1137.45 692.537 L1138.01 692.537 L1138.57 692.537 L1139.13 692.537 L1139.68 692.537 L1140.24 692.537 L1140.8 692.537 L1141.36 692.537 L1141.92 692.537 L1142.48 692.537 L1143.04 692.537 L1143.6 692.537 L1144.16 692.537 L1144.72 692.537 L1145.28 692.537 L1145.84 692.537 L1146.4 692.537 L1146.96 692.537 L1147.51 692.537 L1148.07 692.537 L1148.63 692.537 L1149.19 692.537 L1149.75 692.537 L1150.31 692.537 L1150.87 692.537 L1151.43 692.537 L1151.99 692.537 L1152.55 692.537 L1153.11 692.537 L1153.67 692.537 L1154.23 692.537 L1154.78 692.537 L1155.34 692.537 L1155.9 692.537 L1156.46 692.537 L1157.02 692.537 L1157.58 692.537 L1158.14 692.537 L1158.7 692.537 L1159.26 692.537 L1159.82 692.537 L1160.38 692.537 L1160.94 692.537 L1161.5 692.537 L1162.05 692.537 L1162.61 692.537 L1163.17 692.537 L1163.73 692.537 L1164.29 692.537 L1164.85 692.537 L1165.41 692.537 L1165.97 692.537 L1166.53 692.537 L1167.09 692.537 L1167.65 692.537 L1168.21 692.537 L1168.77 692.537 L1169.33 692.537 L1169.88 692.537 L1170.44 692.537 L1171 692.537 L1171.56 692.537 L1172.12 692.537 L1172.68 692.537 L1173.24 692.537 L1173.8 692.537 L1174.36 692.537 L1174.92 692.537 L1175.48 692.537 L1176.04 692.537 L1176.6 692.537 L1177.15 692.537 L1177.71 692.537 L1178.27 692.537 L1178.83 692.537 L1179.39 692.537 L1179.95 692.537 L1180.51 692.537 L1181.07 692.537 L1181.63 692.537 L1182.19 692.537 L1182.75 692.537 L1183.31 692.537 L1183.87 692.537 L1184.43 692.537 L1184.98 692.537 L1185.54 692.537 L1186.1 692.537 L1186.66 692.537 L1187.22 692.537 L1187.78 692.537 L1188.34 692.537 L1188.9 692.537 L1189.46 692.537 L1190.02 692.537 L1190.58 692.537 L1191.14 692.537 L1191.7 692.537 L1192.25 692.537 L1192.81 692.537 L1193.37 692.537 L1193.93 692.537 L1194.49 692.537 L1195.05 692.537 L1195.61 692.537 L1196.17 692.537 L1196.73 692.537 L1197.29 692.537 L1197.85 692.537 L1198.41 692.537 L1198.97 692.537 L1199.52 692.537 L1200.08 692.537 L1200.64 692.537 L1201.2 692.537 L1201.76 692.537 L1202.32 692.537 L1202.88 692.537 L1203.44 692.537 L1204 692.537 L1204.56 692.537 L1205.12 692.537 L1205.68 692.537 L1206.24 692.537 L1206.8 692.537 L1207.35 692.537 L1207.91 692.537 L1208.47 692.537 L1209.03 692.537 L1209.59 692.537 L1210.15 692.537 L1210.71 692.537 L1211.27 692.537 L1211.83 692.537 L1212.39 692.537 L1212.95 692.537 L1213.51 692.537 L1214.07 692.537 L1214.62 692.537 L1215.18 692.537 L1215.74 692.537 L1216.3 692.537 L1216.86 692.537 L1217.42 692.537 L1217.98 692.537 L1218.54 692.537 L1219.1 692.537 L1219.66 692.537 L1220.22 692.537 L1220.78 692.537 L1221.34 692.537 L1221.89 692.537 L1222.45 692.537 L1223.01 692.537 L1223.57 692.537 L1224.13 692.537 L1224.69 692.537 L1225.25 692.537 L1225.81 692.537 L1226.37 692.537 L1226.93 692.537 L1227.49 692.537 L1228.05 692.537 L1228.61 692.537 L1229.17 692.537 L1229.72 692.537 L1230.28 692.537 L1230.84 692.537 L1231.4 692.537 L1231.96 692.537 L1232.52 692.537 L1233.08 692.537 L1233.64 692.537 L1234.2 692.537 L1234.76 692.537 L1235.32 692.537 L1235.88 692.537 L1236.44 692.537 L1236.99 692.537 L1237.55 692.537 L1238.11 692.537 L1238.67 692.537 L1239.23 692.537 L1239.79 692.537 L1240.35 692.537 L1240.91 692.537 L1241.47 692.537 L1242.03 692.537 L1242.59 692.537 L1243.15 692.537 L1243.71 692.537 L1244.26 692.537 L1244.82 692.537 L1245.38 692.537 L1245.94 692.537 L1246.5 692.537 L1247.06 692.537 L1247.62 692.537 L1248.18 692.537 L1248.74 692.537 L1249.3 692.537 L1249.86 692.537 L1250.42 692.537 L1250.98 692.537 L1251.54 692.537 L1252.09 692.537 L1252.65 692.537 L1253.21 692.537 L1253.77 692.537 L1254.33 692.537 L1254.89 692.537 L1255.45 692.537 L1256.01 692.537 L1256.57 692.537 L1257.13 692.537 L1257.69 692.537 L1258.25 692.537 L1258.81 692.537 L1259.36 692.537 L1259.92 692.537 L1260.48 692.537 L1261.04 692.537 L1261.6 692.537 L1262.16 692.537 L1262.72 692.537 L1263.28 692.537 L1263.84 692.537 L1264.4 692.537 L1264.96 692.537 L1265.52 692.537 L1266.08 692.537 L1266.63 692.537 L1267.19 692.537 L1267.75 692.537 L1268.31 692.537 L1268.87 692.537 L1269.43 692.537 L1269.99 692.537 L1270.55 692.537 L1271.11 692.537 L1271.67 692.537 L1272.23 692.537 L1272.79 692.537 L1273.35 692.537 L1273.91 692.537 L1274.46 692.537 L1275.02 692.537 L1275.58 692.537 L1276.14 692.537 L1276.7 692.537 L1277.26 692.537 L1277.82 692.537 L1278.38 692.537 L1278.94 692.537 L1279.5 692.537 L1280.06 692.537 L1280.62 692.537 L1281.18 692.537 L1281.73 692.537 L1282.29 692.537 L1282.85 692.537 L1283.41 692.537 L1283.97 692.537 L1284.53 692.537 L1285.09 692.537 L1285.65 692.537 L1286.21 692.537 L1286.77 692.537 L1287.33 692.537 L1287.89 692.537 L1288.45 692.537 L1289 692.537 L1289.56 692.537 L1290.12 692.537 L1290.68 692.537 L1291.24 692.537 L1291.8 692.537 L1292.36 692.537 L1292.92 692.537 L1293.48 692.537 L1294.04 692.537 L1294.6 692.537 L1295.16 692.537 L1295.72 692.537 L1296.28 692.537 L1296.83 692.537 L1297.39 692.537 L1297.95 692.537 L1298.51 692.537 L1299.07 692.537 L1299.63 692.537 L1300.19 692.537 L1300.75 692.537 L1301.31 692.537 L1301.87 692.537 L1302.43 692.537 L1302.99 692.537 L1303.55 692.537 L1304.1 692.537 L1304.66 692.537 L1305.22 692.537 L1305.78 692.537 L1306.34 692.537 L1306.9 692.537 L1307.46 692.537 L1308.02 692.537 L1308.58 692.537 L1309.14 692.537 L1309.7 692.537 L1310.26 692.537 L1310.82 692.537 L1311.38 692.537 L1311.93 692.537 L1312.49 692.537 L1313.05 692.537 L1313.61 692.537 L1314.17 692.537 L1314.73 692.537 L1315.29 692.537 L1315.85 692.537 L1316.41 692.537 L1316.97 692.537 L1317.53 692.537 L1318.09 692.537 L1318.65 692.537 L1319.2 692.537 L1319.76 692.537 L1320.32 692.537 L1320.88 692.537 L1321.44 692.537 L1322 692.537 L1322.56 692.537 L1323.12 692.537 L1323.68 692.537 L1324.24 692.537 L1324.8 692.537 L1325.36 692.537 L1325.92 692.537 L1326.47 692.537 L1327.03 692.537 L1327.59 692.537 L1328.15 692.537 L1328.71 692.537 L1329.27 692.537 L1329.83 692.537 L1330.39 692.537 L1330.95 692.537 L1331.51 692.537 L1332.07 692.537 L1332.63 692.537 L1333.19 692.537 L1333.75 692.537 L1334.3 692.537 L1334.86 692.537 L1335.42 692.537 L1335.98 692.537 L1336.54 692.537 L1337.1 692.537 L1337.66 692.537 L1338.22 692.537 L1338.78 692.537 L1339.34 692.537 L1339.9 692.537 L1340.46 692.537 L1341.02 692.537 L1341.57 692.537 L1342.13 692.537 L1342.69 692.537 L1343.25 692.537 L1343.81 692.537 L1344.37 692.537 L1344.93 692.537 L1345.49 692.537 L1346.05 692.537 L1346.61 692.537 L1347.17 692.537 L1347.73 692.537 L1348.29 692.537 L1348.84 692.537 L1349.4 692.537 L1349.96 692.537 L1350.52 692.537 L1351.08 692.537 L1351.64 692.537 L1352.2 692.537 L1352.76 692.537 L1353.32 692.537 L1353.88 692.537 L1354.44 692.537 L1355 692.537 L1355.56 692.537 L1356.12 692.537 L1356.67 692.537 L1357.23 692.537 L1357.79 692.537 L1358.35 692.537 L1358.91 692.537 L1359.47 692.537 L1360.03 692.537 L1360.59 692.537 L1361.15 692.537 L1361.71 692.537 L1362.27 692.537 L1362.83 692.537 L1363.39 692.537 L1363.94 692.537 L1364.5 692.537 L1365.06 692.537 L1365.62 692.537 L1366.18 692.537 L1366.74 692.537 L1367.3 692.537 L1367.86 692.537 L1368.42 692.537 L1368.98 692.537 L1369.54 692.537 L1370.1 692.537 L1370.66 692.537 L1371.21 692.537 L1371.77 692.537 L1372.33 692.537 L1372.89 692.537 L1373.45 692.537 L1374.01 692.537 L1374.57 692.537 L1375.13 692.537 L1375.69 692.537 L1376.25 692.537 L1376.81 692.537 L1377.37 692.537 L1377.93 692.537 L1378.49 692.537 L1379.04 692.537 L1379.6 692.537 L1380.16 692.537 L1380.72 692.537 L1381.28 692.537 L1381.84 692.537 L1382.4 692.537 L1382.96 692.537 L1383.52 692.537 L1384.08 692.537 L1384.64 692.537 L1385.2 692.537 L1385.76 692.537 L1386.31 692.537 L1386.87 692.537 L1387.43 692.537 L1387.99 692.537 L1388.55 692.537 L1389.11 692.537 L1389.67 692.537 L1390.23 692.537 L1390.79 692.537 L1391.35 692.537 L1391.91 692.537 L1392.47 692.537 L1393.03 692.537 L1393.58 692.537 L1394.14 692.537 L1394.7 692.537 L1395.26 692.537 L1395.82 692.537 L1396.38 692.537 L1396.94 692.537 L1397.5 692.537 L1398.06 692.537 L1398.62 692.537 L1399.18 692.537 L1399.74 692.537 L1400.3 692.537 L1400.86 692.537 L1401.41 692.537 L1401.97 692.537 L1402.53 692.537 L1403.09 692.537 L1403.65 692.537 L1404.21 692.537 L1404.77 692.537 L1405.33 692.537 L1405.89 692.537 L1406.45 692.537 L1407.01 692.537 L1407.57 692.537 L1408.13 692.537 L1408.68 692.537 L1409.24 692.537 L1409.8 692.537 L1410.36 692.537 L1410.92 692.537 L1411.48 692.537 L1412.04 692.537 L1412.6 692.537 L1413.16 692.537 L1413.72 692.537 L1414.28 692.537 L1414.84 692.537 L1415.4 692.537 L1415.95 692.537 L1416.51 692.537 L1417.07 692.537 L1417.63 692.537 L1418.19 692.537 L1418.75 692.537 L1419.31 692.537 L1419.87 692.537 L1420.43 692.537 L1420.99 692.537 L1421.55 692.537 L1422.11 692.537 L1422.67 692.537 L1423.23 692.537 L1423.78 692.537 L1424.34 692.537 L1424.9 692.537 L1425.46 692.537 L1426.02 692.537 L1426.58 692.537 L1427.14 692.537 L1427.7 692.537 L1428.26 692.537 L1428.82 692.537 L1429.38 692.537 L1429.94 692.537 L1430.5 692.537 L1431.05 692.537 L1431.61 692.537 L1432.17 692.537 L1432.73 692.537 L1433.29 692.537 L1433.85 692.537 L1434.41 692.537 L1434.97 692.537 L1435.53 692.537 L1436.09 692.537 L1436.65 692.537 L1437.21 692.537 L1437.77 692.537 L1438.33 692.537 L1438.88 692.537 L1439.44 692.537 L1440 692.537 L1440.56 692.537 L1441.12 692.537 L1441.68 692.537 L1442.24 692.537 L1442.8 692.537 L1443.36 692.537 L1443.92 692.537 L1444.48 692.537 L1445.04 692.537 L1445.6 692.537 L1446.15 692.537 L1446.71 692.537 L1447.27 692.537 L1447.83 692.537 L1448.39 692.537 L1448.95 692.537 L1449.51 692.537 L1450.07 692.537 L1450.63 692.537 L1451.19 692.537 L1451.75 692.537 L1452.31 692.537 L1452.87 692.537 L1453.42 692.537 L1453.98 692.537 L1454.54 692.537 L1455.1 692.537 L1455.66 692.537 L1456.22 692.537 L1456.78 692.537 L1457.34 692.537 L1457.9 692.537 L1458.46 692.537 L1459.02 692.537 L1459.58 692.537 L1460.14 692.537 L1460.7 692.537 L1461.25 692.537 L1461.81 692.537 L1462.37 692.537 L1462.93 692.537 L1463.49 692.537 L1464.05 692.537 L1464.61 692.537 L1465.17 692.537 L1465.73 692.537 L1466.29 692.537 L1466.85 692.537 L1467.41 692.537 L1467.97 692.537 L1468.52 692.537 L1469.08 692.537 L1469.64 692.537 L1470.2 692.537 L1470.76 692.537 L1471.32 692.537 L1471.88 692.537 L1472.44 692.537 L1473 692.537 L1473.56 692.537 L1474.12 692.537 L1474.68 692.537 L1475.24 692.537 L1475.79 692.537 L1476.35 692.537 L1476.91 692.537 L1477.47 692.537 L1478.03 692.537 L1478.59 692.537 L1479.15 692.537 L1479.71 692.537 L1480.27 692.537 L1480.83 692.537 L1481.39 692.537 L1481.95 692.537 L1482.51 692.537 L1483.07 692.537 L1483.62 692.537 L1484.18 692.537 L1484.74 692.537 L1485.3 692.537 L1485.86 692.537 L1486.42 692.537 L1486.98 692.537 L1487.54 692.537 L1488.1 692.537 L1488.66 692.537 L1489.22 692.537 L1489.78 692.537 L1490.34 692.537 L1490.89 692.537 L1491.45 692.537 L1492.01 692.537 L1492.57 692.537 L1493.13 692.537 L1493.69 692.537 L1494.25 692.537 L1494.81 692.537 L1495.37 692.537 L1495.93 692.537 L1496.49 692.537 L1497.05 692.537 L1497.61 692.537 L1498.16 692.537 L1498.72 692.537 L1499.28 692.537 L1499.84 692.537 L1500.4 692.537 L1500.96 692.537 L1501.52 692.537 L1502.08 692.537 L1502.64 692.537 L1503.2 692.537 L1503.76 692.537 L1504.32 692.537 L1504.88 692.537 L1505.44 692.537 L1505.99 692.537 L1506.55 692.537 L1507.11 692.537 L1507.67 692.537 L1508.23 692.537 L1508.79 692.537 L1509.35 692.537 L1509.91 692.537 L1510.47 692.537 L1511.03 692.537 L1511.59 692.537 L1512.15 692.537 L1512.71 692.537 L1513.26 692.537 L1513.82 692.537 L1514.38 692.537 L1514.94 692.537 L1515.5 692.537 L1516.06 692.537 L1516.62 692.537 L1517.18 692.537 L1517.74 692.537 L1518.3 692.537 L1518.86 692.537 L1519.42 692.537 L1519.98 692.537 L1520.53 692.537 L1521.09 692.537 L1521.65 692.537 L1522.21 692.537 L1522.77 692.537 L1523.33 692.537 L1523.89 692.537 L1524.45 692.537 L1525.01 692.537 L1525.57 692.537 L1526.13 692.537 L1526.69 692.537 L1527.25 692.537 L1527.81 692.537 L1528.36 692.537 L1528.92 692.537 L1529.48 692.537 L1530.04 692.537 L1530.6 692.537 L1531.16 692.537 L1531.72 692.537 L1532.28 692.537 L1532.84 692.537 L1533.4 692.537 L1533.96 692.537 L1534.52 692.537 L1535.08 692.537 L1535.63 692.537 L1536.19 692.537 L1536.75 692.537 L1537.31 692.537 L1537.87 692.537 L1538.43 692.537 L1538.99 692.537 L1539.55 692.537 L1540.11 692.537 L1540.67 692.537 L1541.23 692.537 L1541.79 692.537 L1542.35 692.537 L1542.9 692.537 L1543.46 692.537 L1544.02 692.537 L1544.58 692.537 L1545.14 692.537 L1545.7 692.537 L1546.26 692.537 L1546.82 692.537 L1547.38 692.537 L1547.94 692.537 L1548.5 692.537 L1549.06 692.537 L1549.62 692.537 L1550.18 692.537 L1550.73 692.537 L1551.29 692.537 L1551.85 692.537 L1552.41 692.537 L1552.97 692.537 L1553.53 692.537 L1554.09 692.537 L1554.65 692.537 L1555.21 692.537 L1555.77 692.537 L1556.33 692.537 L1556.89 692.537 L1557.45 692.537 L1558 692.537 L1558.56 692.537 L1559.12 692.537 L1559.68 692.537 L1560.24 692.537 L1560.8 692.537 L1561.36 692.537 L1561.92 692.537 L1562.48 692.537 L1563.04 692.537 L1563.6 692.537 L1564.16 692.537 L1564.72 692.537 L1565.28 692.537 L1565.83 692.537 L1566.39 692.537 L1566.95 692.537 L1567.51 692.537 L1568.07 692.537 L1568.63 692.537 L1569.19 692.537 L1569.75 692.537 L1570.31 692.537 L1570.87 692.537 L1571.43 692.537 L1571.99 692.537 L1572.55 692.537 L1573.1 692.537 L1573.66 692.537 L1574.22 692.537 L1574.78 692.537 L1575.34 692.537 L1575.9 692.537 L1576.46 692.537 L1577.02 692.537 L1577.58 692.537 L1578.14 692.537 L1578.7 692.537 L1579.26 692.537 L1579.82 692.537 L1580.37 692.537 L1580.93 692.537 L1581.49 692.537 L1582.05 692.537 L1582.61 692.537 L1583.17 692.537 L1583.73 692.537 L1584.29 692.537 L1584.85 692.537 L1585.41 692.537 L1585.97 692.537 L1586.53 692.537 L1587.09 692.537 L1587.65 692.537 L1588.2 692.537 L1588.76 692.537 L1589.32 692.537 L1589.88 692.537 L1590.44 692.537 L1591 692.537 L1591.56 692.537 L1592.12 692.537 L1592.68 692.537 L1593.24 692.537 L1593.8 692.537 L1594.36 692.537 L1594.92 692.537 L1595.47 692.537 L1596.03 692.537 L1596.59 692.537 L1597.15 692.537 L1597.71 692.537 L1598.27 692.537 L1598.83 692.537 L1599.39 692.537 L1599.95 692.537 L1600.51 692.537 L1601.07 692.537 L1601.63 692.537 L1602.19 692.537 L1602.74 692.537 L1603.3 692.537 L1603.86 692.537 L1604.42 692.537 L1604.98 692.537 L1605.54 692.537 L1606.1 692.537 L1606.66 692.537 L1607.22 692.537 L1607.78 692.537 L1608.34 692.537 L1608.9 692.537 L1609.46 692.537 L1610.02 692.537 L1610.57 692.537 L1611.13 692.537 L1611.69 692.537 L1612.25 692.537 L1612.81 692.537 L1613.37 692.537 L1613.93 692.537 L1614.49 692.537 L1615.05 692.537 L1615.61 692.537 L1616.17 692.537 L1616.73 692.537 L1617.29 692.537 L1617.84 692.537 L1618.4 692.537 L1618.96 692.537 L1619.52 692.537 L1620.08 692.537 L1620.64 692.537 L1621.2 692.537 L1621.76 692.537 L1622.32 692.537 L1622.88 692.537 L1623.44 692.537 L1624 692.537 L1624.56 692.537 L1625.11 692.537 L1625.67 692.537 L1626.23 692.537 L1626.79 692.537 L1627.35 692.537 L1627.91 692.537 L1628.47 692.537 L1629.03 692.537 L1629.59 692.537 L1630.15 692.537 L1630.71 692.537 L1631.27 692.537 L1631.83 692.537 L1632.39 692.537 L1632.94 692.537 L1633.5 692.537 L1634.06 692.537 L1634.62 692.537 L1635.18 692.537 L1635.74 692.537 L1636.3 692.537 L1636.86 692.537 L1637.42 692.537 L1637.98 692.537 L1638.54 692.537 L1639.1 692.537 L1639.66 692.537 L1640.21 692.537 L1640.77 692.537 L1641.33 692.537 L1641.89 692.537 L1642.45 692.537 L1643.01 692.537 L1643.57 692.537 L1644.13 692.537 L1644.69 692.537 L1645.25 692.537 L1645.81 692.537 L1646.37 692.537 L1646.93 692.537 L1647.48 692.537 L1648.04 692.537 L1648.6 692.537 L1649.16 692.537 L1649.72 692.537 L1650.28 692.537 L1650.84 692.537 L1651.4 692.537 L1651.96 692.537 L1652.52 692.537 L1653.08 692.537 L1653.64 692.537 L1654.2 692.537 L1654.76 692.537 L1655.31 692.537 L1655.87 692.537 L1656.43 692.537 L1656.99 692.537 L1657.55 692.537 L1658.11 692.537 L1658.67 692.537 L1659.23 692.537 L1659.79 692.537 L1660.35 692.537 L1660.91 692.537 L1661.47 692.537 L1662.03 692.537 L1662.58 692.537 L1663.14 692.537 L1663.7 692.537 L1664.26 692.537 L1664.82 692.537 L1665.38 692.537 L1665.94 692.537 L1666.5 692.537 L1667.06 692.537 L1667.62 692.537 L1668.18 692.537 L1668.74 692.537 L1669.3 692.537 L1669.85 692.537 L1670.41 692.537 L1670.97 692.537 L1671.53 692.537 L1672.09 692.537 L1672.65 692.537 L1673.21 692.537 L1673.77 692.537 L1674.33 692.537 L1674.89 692.537 L1675.45 692.537 L1676.01 692.537 L1676.57 692.537 L1677.13 692.537 L1677.68 692.537 L1678.24 692.537 L1678.8 692.537 L1679.36 692.537 L1679.92 692.537 L1680.48 692.537 L1681.04 692.537 L1681.6 692.537 L1682.16 692.537 L1682.72 692.537 L1683.28 692.537 L1683.84 692.537 L1684.4 692.537 L1684.95 692.537 L1685.51 692.537 L1686.07 692.537 L1686.63 692.537 L1687.19 692.537 L1687.75 692.537 L1688.31 692.537 L1688.87 692.537 L1689.43 692.537 L1689.99 692.537 L1690.55 692.537 L1691.11 692.537 L1691.67 692.537 L1692.23 692.537 L1692.78 692.537 L1693.34 692.537 L1693.9 692.537 L1694.46 692.537 L1695.02 692.537 L1695.58 692.537 L1696.14 692.537 L1696.7 692.537 L1697.26 692.537 L1697.82 692.537 L1698.38 692.537 L1698.94 692.537 L1699.5 692.537 L1700.05 692.537 L1700.61 692.537 L1701.17 692.537 L1701.73 692.537 L1702.29 692.537 L1702.85 692.537 L1703.41 692.537 L1703.97 692.537 L1704.53 692.537 L1705.09 692.537 L1705.65 692.537 L1706.21 692.537 L1706.77 692.537 L1707.32 692.537 L1707.88 692.537 L1708.44 692.537 L1709 692.537 L1709.56 692.537 L1710.12 692.537 L1710.68 692.537 L1711.24 692.537 L1711.8 692.537 L1712.36 692.537 L1712.92 692.537 L1713.48 692.537 L1714.04 692.537 L1714.6 692.537 L1715.15 692.537 L1715.71 692.537 L1716.27 692.537 L1716.83 692.537 L1717.39 692.537 L1717.95 692.537 L1718.51 692.537 L1719.07 692.537 L1719.63 692.537 L1720.19 692.537 L1720.75 692.537 L1721.31 692.537 L1721.87 692.537 L1722.42 692.537 L1722.98 692.537 L1723.54 692.537 L1724.1 692.537 L1724.66 692.537 L1725.22 692.537 L1725.78 692.537 L1726.34 692.537 L1726.9 692.537 L1727.46 692.537 L1728.02 692.537 L1728.58 692.537 L1729.14 692.537 L1729.69 692.537 L1730.25 692.537 L1730.81 692.537 L1731.37 692.537 L1731.93 692.537 L1732.49 692.537 L1733.05 692.537 L1733.61 692.537 L1734.17 692.537 L1734.73 692.537 L1735.29 692.537 L1735.85 692.537 L1736.41 692.537 L1736.97 692.537 L1737.52 692.537 L1738.08 692.537 L1738.64 692.537 L1739.2 692.537 L1739.76 692.537 L1740.32 692.537 L1740.88 692.537 L1741.44 692.537 L1742 692.537 L1742.56 692.537 L1743.12 692.537 L1743.68 692.537 L1744.24 692.537 L1744.79 692.537 L1745.35 692.537 L1745.91 692.537 L1746.47 692.537 L1747.03 692.537 L1747.59 692.537 L1748.15 692.537 L1748.71 692.537 L1749.27 692.537 L1749.83 692.537 L1750.39 692.537 L1750.95 692.537 L1751.51 692.537 L1752.06 692.537 L1752.62 692.537 L1753.18 692.537 L1753.74 692.537 L1754.3 692.537 L1754.86 692.537 L1755.42 692.537 L1755.98 692.537 L1756.54 692.537 L1757.1 692.537 L1757.66 692.537 L1758.22 692.537 L1758.78 692.537 L1759.34 692.537 L1759.89 692.537 L1760.45 692.537 L1761.01 692.537 L1761.57 692.537 L1762.13 692.537 L1762.69 692.537 L1763.25 692.537 L1763.81 692.537 L1764.37 692.537 L1764.93 692.537 L1765.49 692.537 L1766.05 692.537 L1766.61 692.537 L1767.16 692.537 L1767.72 692.537 L1768.28 692.537 L1768.84 692.537 L1769.4 692.537 L1769.96 692.537 L1770.52 692.537 L1771.08 692.537 L1771.64 692.537 L1772.2 692.537 L1772.76 692.537 L1773.32 692.537 L1773.88 692.537 L1774.43 692.537 L1774.99 692.537 L1775.55 692.537 L1776.11 692.537 L1776.67 692.537 L1777.23 692.537 L1777.79 692.537 L1778.35 692.537 L1778.91 692.537 L1779.47 692.537 L1780.03 692.537 L1780.59 692.537 L1781.15 692.537 L1781.71 692.537 L1782.26 692.537 L1782.82 692.537 L1783.38 692.537 L1783.94 692.537 L1784.5 692.537 L1785.06 692.537 L1785.62 692.537 L1786.18 692.537 L1786.74 692.537 L1787.3 692.537 L1787.86 692.537 L1788.42 692.537 L1788.98 692.537 L1789.53 692.537 L1790.09 692.537 L1790.65 692.537 L1791.21 692.537 L1791.77 692.537 L1792.33 692.537 L1792.89 692.537 L1793.45 692.537 L1794.01 692.537 L1794.57 692.537 L1795.13 692.537 L1795.69 692.537 L1796.25 692.537 L1796.8 692.537 L1797.36 692.537 L1797.92 692.537 L1798.48 692.537 L1799.04 692.537 L1799.6 692.537 L1800.16 692.537 L1800.72 692.537 L1801.28 692.537 L1801.84 692.537 L1802.4 692.537 L1802.96 692.537 L1803.52 692.537 L1804.08 692.537 L1804.63 692.537 L1805.19 692.537 L1805.75 692.537 L1806.31 692.537 L1806.87 692.537 L1807.43 692.537 L1807.99 692.537 L1808.55 692.537 L1809.11 692.537 L1809.67 692.537 L1810.23 692.537 L1810.79 692.537 L1811.35 692.537 L1811.9 692.537 L1812.46 692.537 L1813.02 692.537 L1813.58 692.537 L1814.14 692.537 L1814.7 692.537 L1815.26 692.537 L1815.82 692.537 L1816.38 692.537 L1816.94 692.537 L1817.5 692.537 L1818.06 692.537 L1818.62 692.537 L1819.18 692.537 L1819.73 692.537 L1820.29 692.537 L1820.85 692.537 L1821.41 692.537 L1821.97 692.537 L1822.53 692.537 L1823.09 692.537 L1823.65 692.537 L1824.21 692.537 L1824.77 692.537 L1825.33 692.537 L1825.89 692.537 L1826.45 692.537 L1827 692.537 L1827.56 692.537 L1828.12 692.537 L1828.68 692.537 L1829.24 692.537 L1829.8 692.537 L1830.36 692.537 L1830.92 692.537 L1831.48 692.537 L1832.04 692.537 L1832.6 692.537 L1833.16 692.537 L1833.72 692.537 L1834.27 692.537 L1834.83 692.537 L1835.39 692.537 L1835.95 692.537 L1836.51 692.537 L1837.07 692.537 L1837.63 692.537 L1838.19 692.537 L1838.19 683.573 L1837.63 683.573 L1837.07 683.573 L1836.51 683.573 L1835.95 683.573 L1835.39 683.573 L1834.83 683.573 L1834.27 683.573 L1833.72 683.573 L1833.16 683.573 L1832.6 683.573 L1832.04 683.573 L1831.48 683.573 L1830.92 683.573 L1830.36 683.573 L1829.8 683.573 L1829.24 683.573 L1828.68 683.573 L1828.12 683.573 L1827.56 683.573 L1827 683.573 L1826.45 683.573 L1825.89 683.573 L1825.33 683.573 L1824.77 683.573 L1824.21 683.573 L1823.65 683.573 L1823.09 683.573 L1822.53 683.573 L1821.97 683.573 L1821.41 683.573 L1820.85 683.573 L1820.29 683.573 L1819.73 683.573 L1819.18 683.573 L1818.62 683.573 L1818.06 683.573 L1817.5 683.573 L1816.94 683.573 L1816.38 683.573 L1815.82 683.573 L1815.26 683.573 L1814.7 683.573 L1814.14 683.573 L1813.58 683.573 L1813.02 683.573 L1812.46 683.573 L1811.9 683.573 L1811.35 683.573 L1810.79 683.573 L1810.23 683.573 L1809.67 683.573 L1809.11 683.573 L1808.55 683.573 L1807.99 683.573 L1807.43 683.573 L1806.87 683.573 L1806.31 683.573 L1805.75 683.573 L1805.19 683.573 L1804.63 683.573 L1804.08 683.573 L1803.52 683.573 L1802.96 683.573 L1802.4 683.573 L1801.84 683.573 L1801.28 683.573 L1800.72 683.573 L1800.16 683.573 L1799.6 683.573 L1799.04 683.573 L1798.48 683.573 L1797.92 683.573 L1797.36 683.573 L1796.8 683.573 L1796.25 683.573 L1795.69 683.573 L1795.13 683.573 L1794.57 683.573 L1794.01 683.573 L1793.45 683.573 L1792.89 683.573 L1792.33 683.573 L1791.77 683.573 L1791.21 683.573 L1790.65 683.573 L1790.09 683.573 L1789.53 683.573 L1788.98 683.573 L1788.42 683.573 L1787.86 683.573 L1787.3 683.573 L1786.74 683.573 L1786.18 683.573 L1785.62 683.573 L1785.06 683.573 L1784.5 683.573 L1783.94 683.573 L1783.38 683.573 L1782.82 683.573 L1782.26 683.573 L1781.71 683.573 L1781.15 683.573 L1780.59 683.573 L1780.03 683.573 L1779.47 683.573 L1778.91 683.573 L1778.35 683.573 L1777.79 683.573 L1777.23 683.573 L1776.67 683.573 L1776.11 683.573 L1775.55 683.573 L1774.99 683.573 L1774.43 683.573 L1773.88 683.573 L1773.32 683.573 L1772.76 683.573 L1772.2 683.573 L1771.64 683.573 L1771.08 683.573 L1770.52 683.573 L1769.96 683.573 L1769.4 683.573 L1768.84 683.573 L1768.28 683.573 L1767.72 683.573 L1767.16 683.573 L1766.61 683.573 L1766.05 683.573 L1765.49 683.573 L1764.93 683.573 L1764.37 683.573 L1763.81 683.573 L1763.25 683.573 L1762.69 683.573 L1762.13 683.573 L1761.57 683.573 L1761.01 683.573 L1760.45 683.573 L1759.89 683.573 L1759.34 683.573 L1758.78 683.573 L1758.22 683.573 L1757.66 683.573 L1757.1 683.573 L1756.54 683.573 L1755.98 683.573 L1755.42 683.573 L1754.86 683.573 L1754.3 683.573 L1753.74 683.573 L1753.18 683.573 L1752.62 683.573 L1752.06 683.573 L1751.51 683.573 L1750.95 683.573 L1750.39 683.573 L1749.83 683.573 L1749.27 683.573 L1748.71 683.573 L1748.15 683.573 L1747.59 683.573 L1747.03 683.573 L1746.47 683.573 L1745.91 683.573 L1745.35 683.573 L1744.79 683.573 L1744.24 683.573 L1743.68 683.573 L1743.12 683.573 L1742.56 683.573 L1742 683.573 L1741.44 683.573 L1740.88 683.573 L1740.32 683.573 L1739.76 683.573 L1739.2 683.573 L1738.64 683.573 L1738.08 683.573 L1737.52 683.573 L1736.97 683.573 L1736.41 683.573 L1735.85 683.573 L1735.29 683.573 L1734.73 683.573 L1734.17 683.573 L1733.61 683.573 L1733.05 683.573 L1732.49 683.573 L1731.93 683.573 L1731.37 683.573 L1730.81 683.573 L1730.25 683.573 L1729.69 683.573 L1729.14 683.573 L1728.58 683.573 L1728.02 683.573 L1727.46 683.573 L1726.9 683.573 L1726.34 683.573 L1725.78 683.573 L1725.22 683.573 L1724.66 683.573 L1724.1 683.573 L1723.54 683.573 L1722.98 683.573 L1722.42 683.573 L1721.87 683.573 L1721.31 683.573 L1720.75 683.573 L1720.19 683.573 L1719.63 683.573 L1719.07 683.573 L1718.51 683.573 L1717.95 683.573 L1717.39 683.573 L1716.83 683.573 L1716.27 683.573 L1715.71 683.573 L1715.15 683.573 L1714.6 683.573 L1714.04 683.573 L1713.48 683.573 L1712.92 683.573 L1712.36 683.573 L1711.8 683.573 L1711.24 683.573 L1710.68 683.573 L1710.12 683.573 L1709.56 683.573 L1709 683.573 L1708.44 683.573 L1707.88 683.573 L1707.32 683.573 L1706.77 683.573 L1706.21 683.573 L1705.65 683.573 L1705.09 683.573 L1704.53 683.573 L1703.97 683.573 L1703.41 683.573 L1702.85 683.573 L1702.29 683.573 L1701.73 683.573 L1701.17 683.573 L1700.61 683.573 L1700.05 683.573 L1699.5 683.573 L1698.94 683.573 L1698.38 683.573 L1697.82 683.573 L1697.26 683.573 L1696.7 683.573 L1696.14 683.573 L1695.58 683.573 L1695.02 683.573 L1694.46 683.573 L1693.9 683.573 L1693.34 683.573 L1692.78 683.573 L1692.23 683.573 L1691.67 683.573 L1691.11 683.573 L1690.55 683.573 L1689.99 683.573 L1689.43 683.573 L1688.87 683.573 L1688.31 683.573 L1687.75 683.573 L1687.19 683.573 L1686.63 683.573 L1686.07 683.573 L1685.51 683.573 L1684.95 683.573 L1684.4 683.573 L1683.84 683.573 L1683.28 683.573 L1682.72 683.573 L1682.16 683.573 L1681.6 683.573 L1681.04 683.573 L1680.48 683.573 L1679.92 683.573 L1679.36 683.573 L1678.8 683.573 L1678.24 683.573 L1677.68 683.573 L1677.13 683.573 L1676.57 683.573 L1676.01 683.573 L1675.45 683.573 L1674.89 683.573 L1674.33 683.573 L1673.77 683.573 L1673.21 683.573 L1672.65 683.573 L1672.09 683.573 L1671.53 683.573 L1670.97 683.573 L1670.41 683.573 L1669.85 683.573 L1669.3 683.573 L1668.74 683.573 L1668.18 683.573 L1667.62 683.573 L1667.06 683.573 L1666.5 683.573 L1665.94 683.573 L1665.38 683.573 L1664.82 683.573 L1664.26 683.573 L1663.7 683.573 L1663.14 683.573 L1662.58 683.573 L1662.03 683.573 L1661.47 683.573 L1660.91 683.573 L1660.35 683.573 L1659.79 683.573 L1659.23 683.573 L1658.67 683.573 L1658.11 683.573 L1657.55 683.573 L1656.99 683.573 L1656.43 683.573 L1655.87 683.573 L1655.31 683.573 L1654.76 683.573 L1654.2 683.573 L1653.64 683.573 L1653.08 683.573 L1652.52 683.573 L1651.96 683.573 L1651.4 683.573 L1650.84 683.573 L1650.28 683.573 L1649.72 683.573 L1649.16 683.573 L1648.6 683.573 L1648.04 683.573 L1647.48 683.573 L1646.93 683.573 L1646.37 683.573 L1645.81 683.573 L1645.25 683.573 L1644.69 683.573 L1644.13 683.573 L1643.57 683.573 L1643.01 683.573 L1642.45 683.573 L1641.89 683.573 L1641.33 683.573 L1640.77 683.573 L1640.21 683.573 L1639.66 683.573 L1639.1 683.573 L1638.54 683.573 L1637.98 683.573 L1637.42 683.573 L1636.86 683.573 L1636.3 683.573 L1635.74 683.573 L1635.18 683.573 L1634.62 683.573 L1634.06 683.573 L1633.5 683.573 L1632.94 683.573 L1632.39 683.573 L1631.83 683.573 L1631.27 683.573 L1630.71 683.573 L1630.15 683.573 L1629.59 683.573 L1629.03 683.573 L1628.47 683.573 L1627.91 683.573 L1627.35 683.573 L1626.79 683.573 L1626.23 683.573 L1625.67 683.573 L1625.11 683.573 L1624.56 683.573 L1624 683.573 L1623.44 683.573 L1622.88 683.573 L1622.32 683.573 L1621.76 683.573 L1621.2 683.573 L1620.64 683.573 L1620.08 683.573 L1619.52 683.573 L1618.96 683.573 L1618.4 683.573 L1617.84 683.573 L1617.29 683.573 L1616.73 683.573 L1616.17 683.573 L1615.61 683.573 L1615.05 683.573 L1614.49 683.573 L1613.93 683.573 L1613.37 683.573 L1612.81 683.573 L1612.25 683.573 L1611.69 683.573 L1611.13 683.573 L1610.57 683.573 L1610.02 683.573 L1609.46 683.573 L1608.9 683.573 L1608.34 683.573 L1607.78 683.573 L1607.22 683.573 L1606.66 683.573 L1606.1 683.573 L1605.54 683.573 L1604.98 683.573 L1604.42 683.573 L1603.86 683.573 L1603.3 683.573 L1602.74 683.573 L1602.19 683.573 L1601.63 683.573 L1601.07 683.573 L1600.51 683.573 L1599.95 683.573 L1599.39 683.573 L1598.83 683.573 L1598.27 683.573 L1597.71 683.573 L1597.15 683.573 L1596.59 683.573 L1596.03 683.573 L1595.47 683.573 L1594.92 683.573 L1594.36 683.573 L1593.8 683.573 L1593.24 683.573 L1592.68 683.573 L1592.12 683.573 L1591.56 683.573 L1591 683.573 L1590.44 683.573 L1589.88 683.573 L1589.32 683.573 L1588.76 683.573 L1588.2 683.573 L1587.65 683.573 L1587.09 683.573 L1586.53 683.573 L1585.97 683.573 L1585.41 683.573 L1584.85 683.573 L1584.29 683.573 L1583.73 683.573 L1583.17 683.573 L1582.61 683.573 L1582.05 683.573 L1581.49 683.573 L1580.93 683.573 L1580.37 683.573 L1579.82 683.573 L1579.26 683.573 L1578.7 683.573 L1578.14 683.573 L1577.58 683.573 L1577.02 683.573 L1576.46 683.573 L1575.9 683.573 L1575.34 683.573 L1574.78 683.573 L1574.22 683.573 L1573.66 683.573 L1573.1 683.573 L1572.55 683.573 L1571.99 683.573 L1571.43 683.573 L1570.87 683.573 L1570.31 683.573 L1569.75 683.573 L1569.19 683.573 L1568.63 683.573 L1568.07 683.573 L1567.51 683.573 L1566.95 683.573 L1566.39 683.573 L1565.83 683.573 L1565.28 683.573 L1564.72 683.573 L1564.16 683.573 L1563.6 683.573 L1563.04 683.573 L1562.48 683.573 L1561.92 683.573 L1561.36 683.573 L1560.8 683.573 L1560.24 683.573 L1559.68 683.573 L1559.12 683.573 L1558.56 683.573 L1558 683.573 L1557.45 683.573 L1556.89 683.573 L1556.33 683.573 L1555.77 683.573 L1555.21 683.573 L1554.65 683.573 L1554.09 683.573 L1553.53 683.573 L1552.97 683.573 L1552.41 683.573 L1551.85 683.573 L1551.29 683.573 L1550.73 683.573 L1550.18 683.573 L1549.62 683.573 L1549.06 683.573 L1548.5 683.573 L1547.94 683.573 L1547.38 683.573 L1546.82 683.573 L1546.26 683.573 L1545.7 683.573 L1545.14 683.573 L1544.58 683.573 L1544.02 683.573 L1543.46 683.573 L1542.9 683.573 L1542.35 683.573 L1541.79 683.573 L1541.23 683.573 L1540.67 683.573 L1540.11 683.573 L1539.55 683.573 L1538.99 683.573 L1538.43 683.573 L1537.87 683.573 L1537.31 683.573 L1536.75 683.573 L1536.19 683.573 L1535.63 683.573 L1535.08 683.573 L1534.52 683.573 L1533.96 683.573 L1533.4 683.573 L1532.84 683.573 L1532.28 683.573 L1531.72 683.573 L1531.16 683.573 L1530.6 683.573 L1530.04 683.573 L1529.48 683.573 L1528.92 683.573 L1528.36 683.573 L1527.81 683.573 L1527.25 683.573 L1526.69 683.573 L1526.13 683.573 L1525.57 683.573 L1525.01 683.573 L1524.45 683.573 L1523.89 683.573 L1523.33 683.573 L1522.77 683.573 L1522.21 683.573 L1521.65 683.573 L1521.09 683.573 L1520.53 683.573 L1519.98 683.573 L1519.42 683.573 L1518.86 683.573 L1518.3 683.573 L1517.74 683.573 L1517.18 683.573 L1516.62 683.573 L1516.06 683.573 L1515.5 683.573 L1514.94 683.573 L1514.38 683.573 L1513.82 683.573 L1513.26 683.573 L1512.71 683.573 L1512.15 683.573 L1511.59 683.573 L1511.03 683.573 L1510.47 683.573 L1509.91 683.573 L1509.35 683.573 L1508.79 683.573 L1508.23 683.573 L1507.67 683.573 L1507.11 683.573 L1506.55 683.573 L1505.99 683.573 L1505.44 683.573 L1504.88 683.573 L1504.32 683.573 L1503.76 683.573 L1503.2 683.573 L1502.64 683.573 L1502.08 683.573 L1501.52 683.573 L1500.96 683.573 L1500.4 683.573 L1499.84 683.573 L1499.28 683.573 L1498.72 683.573 L1498.16 683.573 L1497.61 683.573 L1497.05 683.573 L1496.49 683.573 L1495.93 683.573 L1495.37 683.573 L1494.81 683.573 L1494.25 683.573 L1493.69 683.573 L1493.13 683.573 L1492.57 683.573 L1492.01 683.573 L1491.45 683.573 L1490.89 683.573 L1490.34 683.573 L1489.78 683.573 L1489.22 683.573 L1488.66 683.573 L1488.1 683.573 L1487.54 683.573 L1486.98 683.573 L1486.42 683.573 L1485.86 683.573 L1485.3 683.573 L1484.74 683.573 L1484.18 683.573 L1483.62 683.573 L1483.07 683.573 L1482.51 683.573 L1481.95 683.573 L1481.39 683.573 L1480.83 683.573 L1480.27 683.573 L1479.71 683.573 L1479.15 683.573 L1478.59 683.573 L1478.03 683.573 L1477.47 683.573 L1476.91 683.573 L1476.35 683.573 L1475.79 683.573 L1475.24 683.573 L1474.68 683.573 L1474.12 683.573 L1473.56 683.573 L1473 683.573 L1472.44 683.573 L1471.88 683.573 L1471.32 683.573 L1470.76 683.573 L1470.2 683.573 L1469.64 683.573 L1469.08 683.573 L1468.52 683.573 L1467.97 683.573 L1467.41 683.573 L1466.85 683.573 L1466.29 683.573 L1465.73 683.573 L1465.17 683.573 L1464.61 683.573 L1464.05 683.573 L1463.49 683.573 L1462.93 683.573 L1462.37 683.573 L1461.81 683.573 L1461.25 683.573 L1460.7 683.573 L1460.14 683.573 L1459.58 683.573 L1459.02 683.573 L1458.46 683.573 L1457.9 683.573 L1457.34 683.573 L1456.78 683.573 L1456.22 683.573 L1455.66 683.573 L1455.1 683.573 L1454.54 683.573 L1453.98 683.573 L1453.42 683.573 L1452.87 683.573 L1452.31 683.573 L1451.75 683.573 L1451.19 683.573 L1450.63 683.573 L1450.07 683.573 L1449.51 683.573 L1448.95 683.573 L1448.39 683.573 L1447.83 683.573 L1447.27 683.573 L1446.71 683.573 L1446.15 683.573 L1445.6 683.573 L1445.04 683.573 L1444.48 683.573 L1443.92 683.573 L1443.36 683.573 L1442.8 683.573 L1442.24 683.573 L1441.68 683.573 L1441.12 683.573 L1440.56 683.573 L1440 683.573 L1439.44 683.573 L1438.88 683.573 L1438.33 683.573 L1437.77 683.573 L1437.21 683.573 L1436.65 683.573 L1436.09 683.573 L1435.53 683.573 L1434.97 683.573 L1434.41 683.573 L1433.85 683.573 L1433.29 683.573 L1432.73 683.573 L1432.17 683.573 L1431.61 683.573 L1431.05 683.573 L1430.5 683.573 L1429.94 683.573 L1429.38 683.573 L1428.82 683.573 L1428.26 683.573 L1427.7 683.573 L1427.14 683.573 L1426.58 683.573 L1426.02 683.573 L1425.46 683.573 L1424.9 683.573 L1424.34 683.573 L1423.78 683.573 L1423.23 683.573 L1422.67 683.573 L1422.11 683.573 L1421.55 683.573 L1420.99 683.573 L1420.43 683.573 L1419.87 683.573 L1419.31 683.573 L1418.75 683.573 L1418.19 683.573 L1417.63 683.573 L1417.07 683.573 L1416.51 683.573 L1415.95 683.573 L1415.4 683.573 L1414.84 683.573 L1414.28 683.573 L1413.72 683.573 L1413.16 683.573 L1412.6 683.573 L1412.04 683.573 L1411.48 683.573 L1410.92 683.573 L1410.36 683.573 L1409.8 683.573 L1409.24 683.573 L1408.68 683.573 L1408.13 683.573 L1407.57 683.573 L1407.01 683.573 L1406.45 683.573 L1405.89 683.573 L1405.33 683.573 L1404.77 683.573 L1404.21 683.573 L1403.65 683.573 L1403.09 683.573 L1402.53 683.573 L1401.97 683.573 L1401.41 683.573 L1400.86 683.573 L1400.3 683.573 L1399.74 683.573 L1399.18 683.573 L1398.62 683.573 L1398.06 683.573 L1397.5 683.573 L1396.94 683.573 L1396.38 683.573 L1395.82 683.573 L1395.26 683.573 L1394.7 683.573 L1394.14 683.573 L1393.58 683.573 L1393.03 683.573 L1392.47 683.573 L1391.91 683.573 L1391.35 683.573 L1390.79 683.573 L1390.23 683.573 L1389.67 683.573 L1389.11 683.573 L1388.55 683.573 L1387.99 683.573 L1387.43 683.573 L1386.87 683.573 L1386.31 683.573 L1385.76 683.573 L1385.2 683.573 L1384.64 683.573 L1384.08 683.573 L1383.52 683.573 L1382.96 683.573 L1382.4 683.573 L1381.84 683.573 L1381.28 683.573 L1380.72 683.573 L1380.16 683.573 L1379.6 683.573 L1379.04 683.573 L1378.49 683.573 L1377.93 683.573 L1377.37 683.573 L1376.81 683.573 L1376.25 683.573 L1375.69 683.573 L1375.13 683.573 L1374.57 683.573 L1374.01 683.573 L1373.45 683.573 L1372.89 683.573 L1372.33 683.573 L1371.77 683.573 L1371.21 683.573 L1370.66 683.573 L1370.1 683.573 L1369.54 683.573 L1368.98 683.573 L1368.42 683.573 L1367.86 683.573 L1367.3 683.573 L1366.74 683.573 L1366.18 683.573 L1365.62 683.573 L1365.06 683.573 L1364.5 683.573 L1363.94 683.573 L1363.39 683.573 L1362.83 683.573 L1362.27 683.573 L1361.71 683.573 L1361.15 683.573 L1360.59 683.573 L1360.03 683.573 L1359.47 683.573 L1358.91 683.573 L1358.35 683.573 L1357.79 683.573 L1357.23 683.573 L1356.67 683.573 L1356.12 683.573 L1355.56 683.573 L1355 683.573 L1354.44 683.573 L1353.88 683.573 L1353.32 683.573 L1352.76 683.573 L1352.2 683.573 L1351.64 683.573 L1351.08 683.573 L1350.52 683.573 L1349.96 683.573 L1349.4 683.573 L1348.84 683.573 L1348.29 683.573 L1347.73 683.573 L1347.17 683.573 L1346.61 683.573 L1346.05 683.573 L1345.49 683.573 L1344.93 683.573 L1344.37 683.573 L1343.81 683.573 L1343.25 683.573 L1342.69 683.573 L1342.13 683.573 L1341.57 683.573 L1341.02 683.573 L1340.46 683.573 L1339.9 683.573 L1339.34 683.573 L1338.78 683.573 L1338.22 683.573 L1337.66 683.573 L1337.1 683.573 L1336.54 683.573 L1335.98 683.573 L1335.42 683.573 L1334.86 683.573 L1334.3 683.573 L1333.75 683.573 L1333.19 683.573 L1332.63 683.573 L1332.07 683.573 L1331.51 683.573 L1330.95 683.573 L1330.39 683.573 L1329.83 683.573 L1329.27 683.573 L1328.71 683.573 L1328.15 683.573 L1327.59 683.573 L1327.03 683.573 L1326.47 683.573 L1325.92 683.573 L1325.36 683.573 L1324.8 683.573 L1324.24 683.573 L1323.68 683.573 L1323.12 683.573 L1322.56 683.573 L1322 683.573 L1321.44 683.573 L1320.88 683.573 L1320.32 683.573 L1319.76 683.573 L1319.2 683.573 L1318.65 683.573 L1318.09 683.573 L1317.53 683.573 L1316.97 683.573 L1316.41 683.573 L1315.85 683.573 L1315.29 683.573 L1314.73 683.573 L1314.17 683.573 L1313.61 683.573 L1313.05 683.573 L1312.49 683.573 L1311.93 683.573 L1311.38 683.573 L1310.82 683.573 L1310.26 683.573 L1309.7 683.573 L1309.14 683.573 L1308.58 683.573 L1308.02 683.573 L1307.46 683.573 L1306.9 683.573 L1306.34 683.573 L1305.78 683.573 L1305.22 683.573 L1304.66 683.573 L1304.1 683.573 L1303.55 683.573 L1302.99 683.573 L1302.43 683.573 L1301.87 683.573 L1301.31 683.573 L1300.75 683.573 L1300.19 683.573 L1299.63 683.573 L1299.07 683.573 L1298.51 683.573 L1297.95 683.573 L1297.39 683.573 L1296.83 683.573 L1296.28 683.573 L1295.72 683.573 L1295.16 683.573 L1294.6 683.573 L1294.04 683.573 L1293.48 683.573 L1292.92 683.573 L1292.36 683.573 L1291.8 683.573 L1291.24 683.573 L1290.68 683.573 L1290.12 683.573 L1289.56 683.573 L1289 683.573 L1288.45 683.573 L1287.89 683.573 L1287.33 683.573 L1286.77 683.573 L1286.21 683.573 L1285.65 683.573 L1285.09 683.573 L1284.53 683.573 L1283.97 683.573 L1283.41 683.573 L1282.85 683.573 L1282.29 683.573 L1281.73 683.573 L1281.18 683.573 L1280.62 683.573 L1280.06 683.573 L1279.5 683.573 L1278.94 683.573 L1278.38 683.573 L1277.82 683.573 L1277.26 683.573 L1276.7 683.573 L1276.14 683.573 L1275.58 683.573 L1275.02 683.573 L1274.46 683.573 L1273.91 683.573 L1273.35 683.573 L1272.79 683.573 L1272.23 683.573 L1271.67 683.573 L1271.11 683.573 L1270.55 683.573 L1269.99 683.573 L1269.43 683.573 L1268.87 683.573 L1268.31 683.573 L1267.75 683.573 L1267.19 683.573 L1266.63 683.573 L1266.08 683.573 L1265.52 683.573 L1264.96 683.573 L1264.4 683.573 L1263.84 683.573 L1263.28 683.573 L1262.72 683.573 L1262.16 683.573 L1261.6 683.573 L1261.04 683.573 L1260.48 683.573 L1259.92 683.573 L1259.36 683.573 L1258.81 683.573 L1258.25 683.573 L1257.69 683.573 L1257.13 683.573 L1256.57 683.573 L1256.01 683.573 L1255.45 683.573 L1254.89 683.573 L1254.33 683.573 L1253.77 683.573 L1253.21 683.573 L1252.65 683.573 L1252.09 683.573 L1251.54 683.573 L1250.98 683.573 L1250.42 683.573 L1249.86 683.573 L1249.3 683.573 L1248.74 683.573 L1248.18 683.573 L1247.62 683.573 L1247.06 683.573 L1246.5 683.573 L1245.94 683.573 L1245.38 683.573 L1244.82 683.573 L1244.26 683.573 L1243.71 683.573 L1243.15 683.573 L1242.59 683.573 L1242.03 683.573 L1241.47 683.573 L1240.91 683.573 L1240.35 683.573 L1239.79 683.573 L1239.23 683.573 L1238.67 683.573 L1238.11 683.573 L1237.55 683.573 L1236.99 683.573 L1236.44 683.573 L1235.88 683.573 L1235.32 683.573 L1234.76 683.573 L1234.2 683.573 L1233.64 683.573 L1233.08 683.573 L1232.52 683.573 L1231.96 683.573 L1231.4 683.573 L1230.84 683.573 L1230.28 683.573 L1229.72 683.573 L1229.17 683.573 L1228.61 683.573 L1228.05 683.573 L1227.49 683.573 L1226.93 683.573 L1226.37 683.573 L1225.81 683.573 L1225.25 683.573 L1224.69 683.573 L1224.13 683.573 L1223.57 683.573 L1223.01 683.573 L1222.45 683.573 L1221.89 683.573 L1221.34 683.573 L1220.78 683.573 L1220.22 683.573 L1219.66 683.573 L1219.1 683.573 L1218.54 683.573 L1217.98 683.573 L1217.42 683.573 L1216.86 683.573 L1216.3 683.573 L1215.74 683.573 L1215.18 683.573 L1214.62 683.573 L1214.07 683.573 L1213.51 683.573 L1212.95 683.573 L1212.39 683.573 L1211.83 683.573 L1211.27 683.573 L1210.71 683.573 L1210.15 683.573 L1209.59 683.573 L1209.03 683.573 L1208.47 683.573 L1207.91 683.573 L1207.35 683.573 L1206.8 683.573 L1206.24 683.573 L1205.68 683.573 L1205.12 683.573 L1204.56 683.573 L1204 683.573 L1203.44 683.573 L1202.88 683.573 L1202.32 683.573 L1201.76 683.573 L1201.2 683.573 L1200.64 683.573 L1200.08 683.573 L1199.52 683.573 L1198.97 683.573 L1198.41 683.573 L1197.85 683.573 L1197.29 683.573 L1196.73 683.573 L1196.17 683.573 L1195.61 683.573 L1195.05 683.573 L1194.49 683.573 L1193.93 683.573 L1193.37 683.573 L1192.81 683.573 L1192.25 683.573 L1191.7 683.573 L1191.14 683.573 L1190.58 683.573 L1190.02 683.573 L1189.46 683.573 L1188.9 683.573 L1188.34 683.573 L1187.78 683.573 L1187.22 683.573 L1186.66 683.573 L1186.1 683.573 L1185.54 683.573 L1184.98 683.573 L1184.43 683.573 L1183.87 683.573 L1183.31 683.573 L1182.75 683.573 L1182.19 683.573 L1181.63 683.573 L1181.07 683.573 L1180.51 683.573 L1179.95 683.573 L1179.39 683.573 L1178.83 683.573 L1178.27 683.573 L1177.71 683.573 L1177.15 683.573 L1176.6 683.573 L1176.04 683.573 L1175.48 683.573 L1174.92 683.573 L1174.36 683.573 L1173.8 683.573 L1173.24 683.573 L1172.68 683.573 L1172.12 683.573 L1171.56 683.573 L1171 683.573 L1170.44 683.573 L1169.88 683.573 L1169.33 683.573 L1168.77 683.573 L1168.21 683.573 L1167.65 683.573 L1167.09 683.573 L1166.53 683.573 L1165.97 683.573 L1165.41 683.573 L1164.85 683.573 L1164.29 683.573 L1163.73 683.573 L1163.17 683.573 L1162.61 683.573 L1162.05 683.573 L1161.5 683.573 L1160.94 683.573 L1160.38 683.573 L1159.82 683.573 L1159.26 683.573 L1158.7 683.573 L1158.14 683.573 L1157.58 683.573 L1157.02 683.573 L1156.46 683.573 L1155.9 683.573 L1155.34 683.573 L1154.78 683.573 L1154.23 683.573 L1153.67 683.573 L1153.11 683.573 L1152.55 683.573 L1151.99 683.573 L1151.43 683.573 L1150.87 683.573 L1150.31 683.573 L1149.75 683.573 L1149.19 683.573 L1148.63 683.573 L1148.07 683.573 L1147.51 683.573 L1146.96 683.573 L1146.4 683.573 L1145.84 683.573 L1145.28 683.573 L1144.72 683.573 L1144.16 683.573 L1143.6 683.573 L1143.04 683.573 L1142.48 683.573 L1141.92 683.573 L1141.36 683.573 L1140.8 683.573 L1140.24 683.573 L1139.68 683.573 L1139.13 683.573 L1138.57 683.573 L1138.01 683.573 L1137.45 683.573 L1136.89 683.573 L1136.33 683.573 L1135.77 683.573 L1135.21 683.573 L1134.65 683.573 L1134.09 683.573 L1133.53 683.573 L1132.97 683.573 L1132.41 683.573 L1131.86 683.573 L1131.3 683.573 L1130.74 683.573 L1130.18 683.573 L1129.62 683.573 L1129.06 683.573 L1128.5 683.573 L1127.94 683.573 L1127.38 683.573 L1126.82 683.573 L1126.26 683.573 L1125.7 683.573 L1125.14 683.573 L1124.59 683.573 L1124.03 683.573 L1123.47 683.573 L1122.91 683.573 L1122.35 683.573 L1121.79 683.573 L1121.23 683.573 L1120.67 683.573 L1120.11 683.573 L1119.55 683.573 L1118.99 683.573 L1118.43 683.573 L1117.87 683.573 L1117.31 683.573 L1116.76 683.573 L1116.2 683.573 L1115.64 683.573 L1115.08 683.573 L1114.52 683.573 L1113.96 683.573 L1113.4 683.573 L1112.84 683.573 L1112.28 683.573 L1111.72 683.573 L1111.16 683.573 L1110.6 683.573 L1110.04 683.573 L1109.49 683.573 L1108.93 683.573 L1108.37 683.573 L1107.81 683.573 L1107.25 683.573 L1106.69 683.573 L1106.13 683.573 L1105.57 683.573 L1105.01 683.573 L1104.45 683.573 L1103.89 683.573 L1103.33 683.573 L1102.77 683.573 L1102.22 683.573 L1101.66 683.573 L1101.1 683.573 L1100.54 683.573 L1099.98 683.573 L1099.42 683.573 L1098.86 683.573 L1098.3 683.573 L1097.74 683.573 L1097.18 683.573 L1096.62 683.573 L1096.06 683.573 L1095.5 683.573 L1094.94 683.573 L1094.39 683.573 L1093.83 683.573 L1093.27 683.573 L1092.71 683.573 L1092.15 683.573 L1091.59 683.573 L1091.03 683.573 L1090.47 683.573 L1089.91 683.573 L1089.35 683.573 L1088.79 683.573 L1088.23 683.573 L1087.67 683.573 L1087.12 683.573 L1086.56 683.573 L1086 683.573 L1085.44 683.573 L1084.88 683.573 L1084.32 683.573 L1083.76 683.573 L1083.2 683.573 L1082.64 683.573 L1082.08 683.573 L1081.52 683.573 L1080.96 683.573 L1080.4 683.573 L1079.85 683.573 L1079.29 683.573 L1078.73 683.573 L1078.17 683.573 L1077.61 683.573 L1077.05 683.573 L1076.49 683.573 L1075.93 683.573 L1075.37 683.573 L1074.81 683.573 L1074.25 683.573 L1073.69 683.573 L1073.13 683.573 L1072.57 683.573 L1072.02 683.573 L1071.46 683.573 L1070.9 683.573 L1070.34 683.573 L1069.78 683.573 L1069.22 683.573 L1068.66 683.573 L1068.1 683.573 L1067.54 683.573 L1066.98 683.573 L1066.42 683.573 L1065.86 683.573 L1065.3 683.573 L1064.75 683.573 L1064.19 683.573 L1063.63 683.573 L1063.07 683.573 L1062.51 683.573 L1061.95 683.573 L1061.39 683.573 L1060.83 683.573 L1060.27 683.573 L1059.71 683.573 L1059.15 683.573 L1058.59 683.573 L1058.03 683.573 L1057.48 683.573 L1056.92 683.573 L1056.36 683.573 L1055.8 683.573 L1055.24 683.573 L1054.68 683.573 L1054.12 683.573 L1053.56 683.573 L1053 683.573 L1052.44 683.573 L1051.88 683.573 L1051.32 683.573 L1050.76 683.573 L1050.2 683.573 L1049.65 683.573 L1049.09 683.573 L1048.53 683.573 L1047.97 683.573 L1047.41 683.573 L1046.85 683.573 L1046.29 683.573 L1045.73 683.573 L1045.17 683.573 L1044.61 683.573 L1044.05 683.573 L1043.49 683.573 L1042.93 683.573 L1042.38 683.573 L1041.82 683.573 L1041.26 683.573 L1040.7 683.573 L1040.14 683.573 L1039.58 683.573 L1039.02 683.573 L1038.46 683.573 L1037.9 683.573 L1037.34 683.573 L1036.78 683.573 L1036.22 683.573 L1035.66 683.573 L1035.1 683.573 L1034.55 683.573 L1033.99 683.573 L1033.43 683.573 L1032.87 683.573 L1032.31 683.573 L1031.75 683.573 L1031.19 683.573 L1030.63 683.573 L1030.07 683.573 L1029.51 683.573 L1028.95 683.573 L1028.39 683.573 L1027.83 683.573 L1027.28 683.573 L1026.72 683.573 L1026.16 683.573 L1025.6 683.573 L1025.04 683.573 L1024.48 683.573 L1023.92 683.573 L1023.36 683.573 L1022.8 683.573 L1022.24 683.573 L1021.68 683.573 L1021.12 683.573 L1020.56 683.573 L1020.01 683.573 L1019.45 683.573 L1018.89 683.573 L1018.33 683.573 L1017.77 683.573 L1017.21 683.573 L1016.65 683.573 L1016.09 683.573 L1015.53 683.573 L1014.97 683.573 L1014.41 683.573 L1013.85 683.573 L1013.29 683.573 L1012.73 683.573 L1012.18 683.573 L1011.62 683.573 L1011.06 683.573 L1010.5 683.573 L1009.94 683.573 L1009.38 683.573 L1008.82 683.573 L1008.26 683.573 L1007.7 683.573 L1007.14 683.573 L1006.58 683.573 L1006.02 683.573 L1005.46 683.573 L1004.91 683.573 L1004.35 683.573 L1003.79 683.573 L1003.23 683.573 L1002.67 683.573 L1002.11 683.573 L1001.55 683.573 L1000.99 683.573 L1000.43 683.573 L999.872 683.573 L999.313 683.573 L998.754 683.573 L998.194 683.573 L997.635 683.573 L997.076 683.573 L996.517 683.573 L995.957 683.573 L995.398 683.573 L994.839 683.573 L994.28 683.573 L993.72 683.573 L993.161 683.573 L992.602 683.573 L992.043 683.573 L991.483 683.573 L990.924 683.573 L990.365 683.573 L989.806 683.573 L989.246 683.573 L988.687 683.573 L988.128 683.573 L987.569 683.573 L987.009 683.573 L986.45 683.573 L985.891 683.573 L985.332 683.573 L984.772 683.573 L984.213 683.573 L983.654 683.573 L983.095 683.573 L982.535 683.573 L981.976 683.573 L981.417 683.573 L980.858 683.573 L980.298 683.573 L979.739 683.573 L979.18 683.573 L978.621 683.573 L978.061 683.573 L977.502 683.573 L976.943 683.573 L976.384 683.573 L975.824 683.573 L975.265 683.573 L974.706 683.573 L974.147 683.573 L973.587 683.573 L973.028 683.573 L972.469 683.573 L971.91 683.573 L971.35 683.573 L970.791 683.573 L970.232 683.573 L969.673 683.573 L969.113 683.573 L968.554 683.573 L967.995 683.573 L967.436 683.573 L966.876 683.573 L966.317 683.573 L965.758 683.573 L965.199 683.573 L964.639 683.573 L964.08 683.573 L963.521 683.573 L962.962 683.573 L962.402 683.573 L961.843 683.573 L961.284 683.573 L960.725 683.573 L960.165 683.573 L959.606 683.573 L959.047 683.573 L958.488 683.573 L957.928 683.573 L957.369 683.573 L956.81 683.573 L956.251 683.573 L955.691 683.573 L955.132 683.573 L954.573 683.573 L954.014 683.573 L953.454 683.573 L952.895 683.573 L952.336 683.573 L951.777 683.573 L951.217 683.573 L950.658 683.573 L950.099 683.573 L949.54 683.573 L948.98 683.573 L948.421 683.573 L947.862 683.573 L947.303 683.573 L946.743 683.573 L946.184 683.573 L945.625 683.573 L945.066 683.573 L944.506 683.573 L943.947 683.573 L943.388 683.573 L942.829 683.573 L942.269 683.573 L941.71 683.573 L941.151 683.573 L940.592 683.573 L940.032 683.573 L939.473 683.573 L938.914 683.573 L938.355 683.573 L937.795 683.573 L937.236 683.573 L936.677 683.573 L936.118 683.573 L935.558 683.573 L934.999 683.573 L934.44 683.573 L933.881 683.573 L933.321 683.573 L932.762 683.573 L932.203 683.573 L931.644 683.573 L931.084 683.573 L930.525 683.573 L929.966 683.573 L929.406 683.573 L928.847 683.573 L928.288 683.573 L927.729 683.573 L927.169 683.573 L926.61 683.573 L926.051 683.573 L925.492 683.573 L924.932 683.573 L924.373 683.573 L923.814 683.573 L923.255 683.573 L922.695 683.573 L922.136 683.573 L921.577 683.573 L921.018 683.573 L920.458 683.573 L919.899 683.573 L919.34 683.573 L918.781 683.573 L918.221 683.573 L917.662 683.573 L917.103 683.573 L916.544 683.573 L915.984 683.573 L915.425 683.573 L914.866 683.573 L914.307 683.573 L913.747 683.573 L913.188 683.573 L912.629 683.573 L912.07 683.573 L911.51 683.573 L910.951 683.573 L910.392 683.573 L909.833 683.573 L909.273 683.573 L908.714 683.573 L908.155 683.573 L907.596 683.573 L907.036 683.573 L906.477 683.573 L905.918 683.573 L905.359 683.573 L904.799 683.573 L904.24 683.573 L903.681 683.573 L903.122 683.573 L902.562 683.573 L902.003 683.573 L901.444 683.573 L900.885 683.573 L900.325 683.573 L899.766 683.573 L899.207 683.573 L898.648 683.573 L898.088 683.573 L897.529 683.573 L896.97 683.573 L896.411 683.573 L895.851 683.573 L895.292 683.573 L894.733 683.573 L894.174 683.573 L893.614 683.573 L893.055 683.573 L892.496 683.573 L891.937 683.573 L891.377 683.573 L890.818 683.573 L890.259 683.573 L889.7 683.573 L889.14 683.573 L888.581 683.573 L888.022 683.573 L887.463 683.573 L886.903 683.573 L886.344 683.573 L885.785 683.573 L885.226 683.573 L884.666 683.573 L884.107 683.573 L883.548 683.573 L882.989 683.573 L882.429 683.573 L881.87 683.573 L881.311 683.573 L880.752 683.573 L880.192 683.573 L879.633 683.573 L879.074 683.573 L878.515 683.573 L877.955 683.573 L877.396 683.573 L876.837 683.573 L876.278 683.573 L875.718 683.573 L875.159 683.573 L874.6 683.573 L874.041 683.573 L873.481 683.573 L872.922 683.573 L872.363 683.573 L871.804 683.573 L871.244 683.573 L870.685 683.573 L870.126 683.573 L869.567 683.573 L869.007 683.573 L868.448 683.573 L867.889 683.573 L867.33 683.573 L866.77 683.573 L866.211 683.573 L865.652 683.573 L865.093 683.573 L864.533 683.573 L863.974 683.573 L863.415 683.573 L862.856 683.573 L862.296 683.573 L861.737 683.573 L861.178 683.573 L860.619 683.573 L860.059 683.573 L859.5 683.573 L858.941 683.573 L858.382 683.573 L857.822 683.573 L857.263 683.573 L856.704 683.573 L856.145 683.573 L855.585 683.573 L855.026 683.573 L854.467 683.573 L853.908 683.573 L853.348 683.573 L852.789 683.573 L852.23 683.573 L851.671 683.573 L851.111 683.573 L850.552 683.573 L849.993 683.573 L849.434 683.573 L848.874 683.573 L848.315 683.573 L847.756 683.573 L847.197 683.573 L846.637 683.573 L846.078 683.573 L845.519 683.573 L844.96 683.573 L844.4 683.573 L843.841 683.573 L843.282 683.573 L842.723 683.573 L842.163 683.573 L841.604 683.573 L841.045 683.573 L840.486 683.573 L839.926 683.573 L839.367 683.573 L838.808 683.573 L838.249 683.573 L837.689 683.573 L837.13 683.573 L836.571 683.573 L836.012 683.573 L835.452 683.573 L834.893 683.573 L834.334 683.573 L833.775 683.573 L833.215 683.573 L832.656 683.573 L832.097 683.573 L831.538 683.573 L830.978 683.573 L830.419 683.573 L829.86 683.573 L829.301 683.573 L828.741 683.573 L828.182 683.573 L827.623 683.573 L827.064 683.573 L826.504 683.573 L825.945 683.573 L825.386 683.573 L824.827 683.573 L824.267 683.573 L823.708 683.573 L823.149 683.573 L822.59 683.573 L822.03 683.573 L821.471 683.573 L820.912 683.573 L820.353 683.573 L819.793 683.573 L819.234 683.573 L818.675 683.573 L818.116 683.573 L817.556 683.573 L816.997 683.573 L816.438 683.573 L815.879 683.573 L815.319 683.573 L814.76 683.573 L814.201 683.573 L813.642 683.573 L813.082 683.573 L812.523 683.573 L811.964 683.573 L811.405 683.573 L810.845 683.573 L810.286 683.573 L809.727 683.573 L809.168 683.573 L808.608 683.573 L808.049 683.573 L807.49 683.573 L806.931 683.573 L806.371 683.573 L805.812 683.573 L805.253 683.573 L804.693 683.573 L804.134 683.573 L803.575 683.573 L803.016 683.573 L802.456 683.573 L801.897 683.573 L801.338 683.573 L800.779 683.573 L800.219 683.573 L799.66 683.573 L799.101 683.573 L798.542 683.573 L797.982 683.573 L797.423 683.573 L796.864 683.573 L796.305 683.573 L795.745 683.573 L795.186 683.573 L794.627 683.573 L794.068 683.573 L793.508 683.573 L792.949 683.573 L792.39 683.573 L791.831 683.573 L791.271 683.573 L790.712 683.573 L790.153 683.573 L789.594 683.573 L789.034 683.573 L788.475 683.573 L787.916 683.573 L787.357 683.573 L786.797 683.573 L786.238 683.573 L785.679 683.573 L785.12 683.573 L784.56 683.573 L784.001 683.573 L783.442 683.573 L782.883 683.573 L782.323 683.573 L781.764 683.573 L781.205 683.573 L780.646 683.573 L780.086 683.573 L779.527 683.573 L778.968 683.573 L778.409 683.573 L777.849 683.573 L777.29 683.573 L776.731 683.573 L776.172 683.573 L775.612 683.573 L775.053 683.573 L774.494 683.573 L773.935 683.573 L773.375 683.573 L772.816 683.573 L772.257 683.573 L771.698 683.573 L771.138 683.573 L770.579 683.573 L770.02 683.573 L769.461 683.573 L768.901 683.573 L768.342 683.573 L767.783 683.573 L767.224 683.573 L766.664 683.573 L766.105 683.573 L765.546 683.573 L764.987 683.573 L764.427 683.573 L763.868 683.573 L763.309 683.573 L762.75 683.573 L762.19 683.573 L761.631 683.573 L761.072 683.573 L760.513 683.573 L759.953 683.573 L759.394 683.573 L758.835 683.573 L758.276 683.573 L757.716 683.573 L757.157 683.573 L756.598 683.573 L756.039 683.573 L755.479 683.573 L754.92 683.573 L754.361 683.573 L753.802 683.573 L753.242 683.573 L752.683 683.573 L752.124 683.573 L751.565 683.573 L751.005 683.573 L750.446 683.573 L749.887 683.573 L749.328 683.573 L748.768 683.573 L748.209 683.573 L747.65 683.573 L747.091 683.573 L746.531 683.573 L745.972 683.573 L745.413 683.573 L744.854 683.573 L744.294 683.573 L743.735 683.573 L743.176 683.573 L742.617 683.573 L742.057 683.573 L741.498 683.573 L740.939 683.573 L740.38 683.573 L739.82 683.573 L739.261 683.573 L738.702 683.573 L738.143 683.573 L737.583 683.573 L737.024 683.573 L736.465 683.573 L735.906 683.573 L735.346 683.573 L734.787 683.573 L734.228 683.573 L733.669 683.573 L733.109 683.573 L732.55 683.573 L731.991 683.573 L731.432 683.573 L730.872 683.573 L730.313 683.573 L729.754 683.573 L729.195 683.573 L728.635 683.573 L728.076 683.573 L727.517 683.573 L726.958 683.573 L726.398 683.573 L725.839 683.573 L725.28 683.573 L724.721 683.573 L724.161 683.573 L723.602 683.573 L723.043 683.573 L722.484 683.573 L721.924 683.573 L721.365 683.573 L720.806 683.573 L720.247 683.573  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.055 720.806,688.055 721.365,688.055 721.924,688.055 722.484,688.055 723.043,688.055 723.602,688.055 724.161,688.055 724.721,688.055 725.28,688.055 725.839,688.055 726.398,688.055 726.958,688.055 727.517,688.055 728.076,688.055 728.635,688.055 729.195,688.055 729.754,688.055 730.313,688.055 730.872,688.055 731.432,688.055 731.991,688.055 732.55,688.055 733.109,688.055 733.669,688.055 734.228,688.055 734.787,688.055 735.346,688.055 735.906,688.055 736.465,688.055 737.024,688.055 737.583,688.055 738.143,688.055 738.702,688.055 739.261,688.055 739.82,688.055 740.38,688.055 740.939,688.055 741.498,688.055 742.057,688.055 742.617,688.055 743.176,688.055 743.735,688.055 744.294,688.055 744.854,688.055 745.413,688.055 745.972,688.055 746.531,688.055 747.091,688.055 747.65,688.055 748.209,688.055 748.768,688.055 749.328,688.055 749.887,688.055 750.446,688.055 751.005,688.055 751.565,688.055 752.124,688.055 752.683,688.055 753.242,688.055 753.802,688.055 754.361,688.055 754.92,688.055 755.479,688.055 756.039,688.055 756.598,688.055 757.157,688.055 757.716,688.055 758.276,688.055 758.835,688.055 759.394,688.055 759.953,688.055 760.513,688.055 761.072,688.055 761.631,688.055 762.19,688.055 762.75,688.055 763.309,688.055 763.868,688.055 764.427,688.055 764.987,688.055 765.546,688.055 766.105,688.055 766.664,688.055 767.224,688.055 767.783,688.055 768.342,688.055 768.901,688.055 769.461,688.055 770.02,688.055 770.579,688.055 771.138,688.055 771.698,688.055 772.257,688.055 772.816,688.055 773.375,688.055 773.935,688.055 774.494,688.055 775.053,688.055 775.612,688.055 776.172,688.055 776.731,688.055 777.29,688.055 777.849,688.055 778.409,688.055 778.968,688.055 779.527,688.055 780.086,688.055 780.646,688.055 781.205,688.055 781.764,688.055 782.323,688.055 782.883,688.055 783.442,688.055 784.001,688.055 784.56,688.055 785.12,688.055 785.679,688.055 786.238,688.055 786.797,688.055 787.357,688.055 787.916,688.055 788.475,688.055 789.034,688.055 789.594,688.055 790.153,688.055 790.712,688.055 791.271,688.055 791.831,688.055 792.39,688.055 792.949,688.055 793.508,688.055 794.068,688.055 794.627,688.055 795.186,688.055 795.745,688.055 796.305,688.055 796.864,688.055 797.423,688.055 797.982,688.055 798.542,688.055 799.101,688.055 799.66,688.055 800.219,688.055 800.779,688.055 801.338,688.055 801.897,688.055 802.456,688.055 803.016,688.055 803.575,688.055 804.134,688.055 804.693,688.055 805.253,688.055 805.812,688.055 806.371,688.055 806.931,688.055 807.49,688.055 808.049,688.055 808.608,688.055 809.168,688.055 809.727,688.055 810.286,688.055 810.845,688.055 811.405,688.055 811.964,688.055 812.523,688.055 813.082,688.055 813.642,688.055 814.201,688.055 814.76,688.055 815.319,688.055 815.879,688.055 816.438,688.055 816.997,688.055 817.556,688.055 818.116,688.055 818.675,688.055 819.234,688.055 819.793,688.055 820.353,688.055 820.912,688.055 821.471,688.055 822.03,688.055 822.59,688.055 823.149,688.055 823.708,688.055 824.267,688.055 824.827,688.055 825.386,688.055 825.945,688.055 826.504,688.055 827.064,688.055 827.623,688.055 828.182,688.055 828.741,688.055 829.301,688.055 829.86,688.055 830.419,688.055 830.978,688.055 831.538,688.055 832.097,688.055 832.656,688.055 833.215,688.055 833.775,688.055 834.334,688.055 834.893,688.055 835.452,688.055 836.012,688.055 836.571,688.055 837.13,688.055 837.689,688.055 838.249,688.055 838.808,688.055 839.367,688.055 839.926,688.055 840.486,688.055 841.045,688.055 841.604,688.055 842.163,688.055 842.723,688.055 843.282,688.055 843.841,688.055 844.4,688.055 844.96,688.055 845.519,688.055 846.078,688.055 846.637,688.055 847.197,688.055 847.756,688.055 848.315,688.055 848.874,688.055 849.434,688.055 849.993,688.055 850.552,688.055 851.111,688.055 851.671,688.055 852.23,688.055 852.789,688.055 853.348,688.055 853.908,688.055 854.467,688.055 855.026,688.055 855.585,688.055 856.145,688.055 856.704,688.055 857.263,688.055 857.822,688.055 858.382,688.055 858.941,688.055 859.5,688.055 860.059,688.055 860.619,688.055 861.178,688.055 861.737,688.055 862.296,688.055 862.856,688.055 863.415,688.055 863.974,688.055 864.533,688.055 865.093,688.055 865.652,688.055 866.211,688.055 866.77,688.055 867.33,688.055 867.889,688.055 868.448,688.055 869.007,688.055 869.567,688.055 870.126,688.055 870.685,688.055 871.244,688.055 871.804,688.055 872.363,688.055 872.922,688.055 873.481,688.055 874.041,688.055 874.6,688.055 875.159,688.055 875.718,688.055 876.278,688.055 876.837,688.055 877.396,688.055 877.955,688.055 878.515,688.055 879.074,688.055 879.633,688.055 880.192,688.055 880.752,688.055 881.311,688.055 881.87,688.055 882.429,688.055 882.989,688.055 883.548,688.055 884.107,688.055 884.666,688.055 885.226,688.055 885.785,688.055 886.344,688.055 886.903,688.055 887.463,688.055 888.022,688.055 888.581,688.055 889.14,688.055 889.7,688.055 890.259,688.055 890.818,688.055 891.377,688.055 891.937,688.055 892.496,688.055 893.055,688.055 893.614,688.055 894.174,688.055 894.733,688.055 895.292,688.055 895.851,688.055 896.411,688.055 896.97,688.055 897.529,688.055 898.088,688.055 898.648,688.055 899.207,688.055 899.766,688.055 900.325,688.055 900.885,688.055 901.444,688.055 902.003,688.055 902.562,688.055 903.122,688.055 903.681,688.055 904.24,688.055 904.799,688.055 905.359,688.055 905.918,688.055 906.477,688.055 907.036,688.055 907.596,688.055 908.155,688.055 908.714,688.055 909.273,688.055 909.833,688.055 910.392,688.055 910.951,688.055 911.51,688.055 912.07,688.055 912.629,688.055 913.188,688.055 913.747,688.055 914.307,688.055 914.866,688.055 915.425,688.055 915.984,688.055 916.544,688.055 917.103,688.055 917.662,688.055 918.221,688.055 918.781,688.055 919.34,688.055 919.899,688.055 920.458,688.055 921.018,688.055 921.577,688.055 922.136,688.055 922.695,688.055 923.255,688.055 923.814,688.055 924.373,688.055 924.932,688.055 925.492,688.055 926.051,688.055 926.61,688.055 927.169,688.055 927.729,688.055 928.288,688.055 928.847,688.055 929.406,688.055 929.966,688.055 930.525,688.055 931.084,688.055 931.644,688.055 932.203,688.055 932.762,688.055 933.321,688.055 933.881,688.055 934.44,688.055 934.999,688.055 935.558,688.055 936.118,688.055 936.677,688.055 937.236,688.055 937.795,688.055 938.355,688.055 938.914,688.055 939.473,688.055 940.032,688.055 940.592,688.055 941.151,688.055 941.71,688.055 942.269,688.055 942.829,688.055 943.388,688.055 943.947,688.055 944.506,688.055 945.066,688.055 945.625,688.055 946.184,688.055 946.743,688.055 947.303,688.055 947.862,688.055 948.421,688.055 948.98,688.055 949.54,688.055 950.099,688.055 950.658,688.055 951.217,688.055 951.777,688.055 952.336,688.055 952.895,688.055 953.454,688.055 954.014,688.055 954.573,688.055 955.132,688.055 955.691,688.055 956.251,688.055 956.81,688.055 957.369,688.055 957.928,688.055 958.488,688.055 959.047,688.055 959.606,688.055 960.165,688.055 960.725,688.055 961.284,688.055 961.843,688.055 962.402,688.055 962.962,688.055 963.521,688.055 964.08,688.055 964.639,688.055 965.199,688.055 965.758,688.055 966.317,688.055 966.876,688.055 967.436,688.055 967.995,688.055 968.554,688.055 969.113,688.055 969.673,688.055 970.232,688.055 970.791,688.055 971.35,688.055 971.91,688.055 972.469,688.055 973.028,688.055 973.587,688.055 974.147,688.055 974.706,688.055 975.265,688.055 975.824,688.055 976.384,688.055 976.943,688.055 977.502,688.055 978.061,688.055 978.621,688.055 979.18,688.055 979.739,688.055 980.298,688.055 980.858,688.055 981.417,688.055 981.976,688.055 982.535,688.055 983.095,688.055 983.654,688.055 984.213,688.055 984.772,688.055 985.332,688.055 985.891,688.055 986.45,688.055 987.009,688.055 987.569,688.055 988.128,688.055 988.687,688.055 989.246,688.055 989.806,688.055 990.365,688.055 990.924,688.055 991.483,688.055 992.043,688.055 992.602,688.055 993.161,688.055 993.72,688.055 994.28,688.055 994.839,688.055 995.398,688.055 995.957,688.055 996.517,688.055 997.076,688.055 997.635,688.055 998.194,688.055 998.754,688.055 999.313,688.055 999.872,688.055 1000.43,688.055 1000.99,688.055 1001.55,688.055 1002.11,688.055 1002.67,688.055 1003.23,688.055 1003.79,688.055 1004.35,688.055 1004.91,688.055 1005.46,688.055 1006.02,688.055 1006.58,688.055 1007.14,688.055 1007.7,688.055 1008.26,688.055 1008.82,688.055 1009.38,688.055 1009.94,688.055 1010.5,688.055 1011.06,688.055 1011.62,688.055 1012.18,688.055 1012.73,688.055 1013.29,688.055 1013.85,688.055 1014.41,688.055 1014.97,688.055 1015.53,688.055 1016.09,688.055 1016.65,688.055 1017.21,688.055 1017.77,688.055 1018.33,688.055 1018.89,688.055 1019.45,688.055 1020.01,688.055 1020.56,688.055 1021.12,688.055 1021.68,688.055 1022.24,688.055 1022.8,688.055 1023.36,688.055 1023.92,688.055 1024.48,688.055 1025.04,688.055 1025.6,688.055 1026.16,688.055 1026.72,688.055 1027.28,688.055 1027.83,688.055 1028.39,688.055 1028.95,688.055 1029.51,688.055 1030.07,688.055 1030.63,688.055 1031.19,688.055 1031.75,688.055 1032.31,688.055 1032.87,688.055 1033.43,688.055 1033.99,688.055 1034.55,688.055 1035.1,688.055 1035.66,688.055 1036.22,688.055 1036.78,688.055 1037.34,688.055 1037.9,688.055 1038.46,688.055 1039.02,688.055 1039.58,688.055 1040.14,688.055 1040.7,688.055 1041.26,688.055 1041.82,688.055 1042.38,688.055 1042.93,688.055 1043.49,688.055 1044.05,688.055 1044.61,688.055 1045.17,688.055 1045.73,688.055 1046.29,688.055 1046.85,688.055 1047.41,688.055 1047.97,688.055 1048.53,688.055 1049.09,688.055 1049.65,688.055 1050.2,688.055 1050.76,688.055 1051.32,688.055 1051.88,688.055 1052.44,688.055 1053,688.055 1053.56,688.055 1054.12,688.055 1054.68,688.055 1055.24,688.055 1055.8,688.055 1056.36,688.055 1056.92,688.055 1057.48,688.055 1058.03,688.055 1058.59,688.055 1059.15,688.055 1059.71,688.055 1060.27,688.055 1060.83,688.055 1061.39,688.055 1061.95,688.055 1062.51,688.055 1063.07,688.055 1063.63,688.055 1064.19,688.055 1064.75,688.055 1065.3,688.055 1065.86,688.055 1066.42,688.055 1066.98,688.055 1067.54,688.055 1068.1,688.055 1068.66,688.055 1069.22,688.055 1069.78,688.055 1070.34,688.055 1070.9,688.055 1071.46,688.055 1072.02,688.055 1072.57,688.055 1073.13,688.055 1073.69,688.055 1074.25,688.055 1074.81,688.055 1075.37,688.055 1075.93,688.055 1076.49,688.055 1077.05,688.055 1077.61,688.055 1078.17,688.055 1078.73,688.055 1079.29,688.055 1079.85,688.055 1080.4,688.055 1080.96,688.055 1081.52,688.055 1082.08,688.055 1082.64,688.055 1083.2,688.055 1083.76,688.055 1084.32,688.055 1084.88,688.055 1085.44,688.055 1086,688.055 1086.56,688.055 1087.12,688.055 1087.67,688.055 1088.23,688.055 1088.79,688.055 1089.35,688.055 1089.91,688.055 1090.47,688.055 1091.03,688.055 1091.59,688.055 1092.15,688.055 1092.71,688.055 1093.27,688.055 1093.83,688.055 1094.39,688.055 1094.94,688.055 1095.5,688.055 1096.06,688.055 1096.62,688.055 1097.18,688.055 1097.74,688.055 1098.3,688.055 1098.86,688.055 1099.42,688.055 1099.98,688.055 1100.54,688.055 1101.1,688.055 1101.66,688.055 1102.22,688.055 1102.77,688.055 1103.33,688.055 1103.89,688.055 1104.45,688.055 1105.01,688.055 1105.57,688.055 1106.13,688.055 1106.69,688.055 1107.25,688.055 1107.81,688.055 1108.37,688.055 1108.93,688.055 1109.49,688.055 1110.04,688.055 1110.6,688.055 1111.16,688.055 1111.72,688.055 1112.28,688.055 1112.84,688.055 1113.4,688.055 1113.96,688.055 1114.52,688.055 1115.08,688.055 1115.64,688.055 1116.2,688.055 1116.76,688.055 1117.31,688.055 1117.87,688.055 1118.43,688.055 1118.99,688.055 1119.55,688.055 1120.11,688.055 1120.67,688.055 1121.23,688.055 1121.79,688.055 1122.35,688.055 1122.91,688.055 1123.47,688.055 1124.03,688.055 1124.59,688.055 1125.14,688.055 1125.7,688.055 1126.26,688.055 1126.82,688.055 1127.38,688.055 1127.94,688.055 1128.5,688.055 1129.06,688.055 1129.62,688.055 1130.18,688.055 1130.74,688.055 1131.3,688.055 1131.86,688.055 1132.41,688.055 1132.97,688.055 1133.53,688.055 1134.09,688.055 1134.65,688.055 1135.21,688.055 1135.77,688.055 1136.33,688.055 1136.89,688.055 1137.45,688.055 1138.01,688.055 1138.57,688.055 1139.13,688.055 1139.68,688.055 1140.24,688.055 1140.8,688.055 1141.36,688.055 1141.92,688.055 1142.48,688.055 1143.04,688.055 1143.6,688.055 1144.16,688.055 1144.72,688.055 1145.28,688.055 1145.84,688.055 1146.4,688.055 1146.96,688.055 1147.51,688.055 1148.07,688.055 1148.63,688.055 1149.19,688.055 1149.75,688.055 1150.31,688.055 1150.87,688.055 1151.43,688.055 1151.99,688.055 1152.55,688.055 1153.11,688.055 1153.67,688.055 1154.23,688.055 1154.78,688.055 1155.34,688.055 1155.9,688.055 1156.46,688.055 1157.02,688.055 1157.58,688.055 1158.14,688.055 1158.7,688.055 1159.26,688.055 1159.82,688.055 1160.38,688.055 1160.94,688.055 1161.5,688.055 1162.05,688.055 1162.61,688.055 1163.17,688.055 1163.73,688.055 1164.29,688.055 1164.85,688.055 1165.41,688.055 1165.97,688.055 1166.53,688.055 1167.09,688.055 1167.65,688.055 1168.21,688.055 1168.77,688.055 1169.33,688.055 1169.88,688.055 1170.44,688.055 1171,688.055 1171.56,688.055 1172.12,688.055 1172.68,688.055 1173.24,688.055 1173.8,688.055 1174.36,688.055 1174.92,688.055 1175.48,688.055 1176.04,688.055 1176.6,688.055 1177.15,688.055 1177.71,688.055 1178.27,688.055 1178.83,688.055 1179.39,688.055 1179.95,688.055 1180.51,688.055 1181.07,688.055 1181.63,688.055 1182.19,688.055 1182.75,688.055 1183.31,688.055 1183.87,688.055 1184.43,688.055 1184.98,688.055 1185.54,688.055 1186.1,688.055 1186.66,688.055 1187.22,688.055 1187.78,688.055 1188.34,688.055 1188.9,688.055 1189.46,688.055 1190.02,688.055 1190.58,688.055 1191.14,688.055 1191.7,688.055 1192.25,688.055 1192.81,688.055 1193.37,688.055 1193.93,688.055 1194.49,688.055 1195.05,688.055 1195.61,688.055 1196.17,688.055 1196.73,688.055 1197.29,688.055 1197.85,688.055 1198.41,688.055 1198.97,688.055 1199.52,688.055 1200.08,688.055 1200.64,688.055 1201.2,688.055 1201.76,688.055 1202.32,688.055 1202.88,688.055 1203.44,688.055 1204,688.055 1204.56,688.055 1205.12,688.055 1205.68,688.055 1206.24,688.055 1206.8,688.055 1207.35,688.055 1207.91,688.055 1208.47,688.055 1209.03,688.055 1209.59,688.055 1210.15,688.055 1210.71,688.055 1211.27,688.055 1211.83,688.055 1212.39,688.055 1212.95,688.055 1213.51,688.055 1214.07,688.055 1214.62,688.055 1215.18,688.055 1215.74,688.055 1216.3,688.055 1216.86,688.055 1217.42,688.055 1217.98,688.055 1218.54,688.055 1219.1,688.055 1219.66,688.055 1220.22,688.055 1220.78,688.055 1221.34,688.055 1221.89,688.055 1222.45,688.055 1223.01,688.055 1223.57,688.055 1224.13,688.055 1224.69,688.055 1225.25,688.055 1225.81,688.055 1226.37,688.055 1226.93,688.055 1227.49,688.055 1228.05,688.055 1228.61,688.055 1229.17,688.055 1229.72,688.055 1230.28,688.055 1230.84,688.055 1231.4,688.055 1231.96,688.055 1232.52,688.055 1233.08,688.055 1233.64,688.055 1234.2,688.055 1234.76,688.055 1235.32,688.055 1235.88,688.055 1236.44,688.055 1236.99,688.055 1237.55,688.055 1238.11,688.055 1238.67,688.055 1239.23,688.055 1239.79,688.055 1240.35,688.055 1240.91,688.055 1241.47,688.055 1242.03,688.055 1242.59,688.055 1243.15,688.055 1243.71,688.055 1244.26,688.055 1244.82,688.055 1245.38,688.055 1245.94,688.055 1246.5,688.055 1247.06,688.055 1247.62,688.055 1248.18,688.055 1248.74,688.055 1249.3,688.055 1249.86,688.055 1250.42,688.055 1250.98,688.055 1251.54,688.055 1252.09,688.055 1252.65,688.055 1253.21,688.055 1253.77,688.055 1254.33,688.055 1254.89,688.055 1255.45,688.055 1256.01,688.055 1256.57,688.055 1257.13,688.055 1257.69,688.055 1258.25,688.055 1258.81,688.055 1259.36,688.055 1259.92,688.055 1260.48,688.055 1261.04,688.055 1261.6,688.055 1262.16,688.055 1262.72,688.055 1263.28,688.055 1263.84,688.055 1264.4,688.055 1264.96,688.055 1265.52,688.055 1266.08,688.055 1266.63,688.055 1267.19,688.055 1267.75,688.055 1268.31,688.055 1268.87,688.055 1269.43,688.055 1269.99,688.055 1270.55,688.055 1271.11,688.055 1271.67,688.055 1272.23,688.055 1272.79,688.055 1273.35,688.055 1273.91,688.055 1274.46,688.055 1275.02,688.055 1275.58,688.055 1276.14,688.055 1276.7,688.055 1277.26,688.055 1277.82,688.055 1278.38,688.055 1278.94,688.055 1279.5,688.055 1280.06,688.055 1280.62,688.055 1281.18,688.055 1281.73,688.055 1282.29,688.055 1282.85,688.055 1283.41,688.055 1283.97,688.055 1284.53,688.055 1285.09,688.055 1285.65,688.055 1286.21,688.055 1286.77,688.055 1287.33,688.055 1287.89,688.055 1288.45,688.055 1289,688.055 1289.56,688.055 1290.12,688.055 1290.68,688.055 1291.24,688.055 1291.8,688.055 1292.36,688.055 1292.92,688.055 1293.48,688.055 1294.04,688.055 1294.6,688.055 1295.16,688.055 1295.72,688.055 1296.28,688.055 1296.83,688.055 1297.39,688.055 1297.95,688.055 1298.51,688.055 1299.07,688.055 1299.63,688.055 1300.19,688.055 1300.75,688.055 1301.31,688.055 1301.87,688.055 1302.43,688.055 1302.99,688.055 1303.55,688.055 1304.1,688.055 1304.66,688.055 1305.22,688.055 1305.78,688.055 1306.34,688.055 1306.9,688.055 1307.46,688.055 1308.02,688.055 1308.58,688.055 1309.14,688.055 1309.7,688.055 1310.26,688.055 1310.82,688.055 1311.38,688.055 1311.93,688.055 1312.49,688.055 1313.05,688.055 1313.61,688.055 1314.17,688.055 1314.73,688.055 1315.29,688.055 1315.85,688.055 1316.41,688.055 1316.97,688.055 1317.53,688.055 1318.09,688.055 1318.65,688.055 1319.2,688.055 1319.76,688.055 1320.32,688.055 1320.88,688.055 1321.44,688.055 1322,688.055 1322.56,688.055 1323.12,688.055 1323.68,688.055 1324.24,688.055 1324.8,688.055 1325.36,688.055 1325.92,688.055 1326.47,688.055 1327.03,688.055 1327.59,688.055 1328.15,688.055 1328.71,688.055 1329.27,688.055 1329.83,688.055 1330.39,688.055 1330.95,688.055 1331.51,688.055 1332.07,688.055 1332.63,688.055 1333.19,688.055 1333.75,688.055 1334.3,688.055 1334.86,688.055 1335.42,688.055 1335.98,688.055 1336.54,688.055 1337.1,688.055 1337.66,688.055 1338.22,688.055 1338.78,688.055 1339.34,688.055 1339.9,688.055 1340.46,688.055 1341.02,688.055 1341.57,688.055 1342.13,688.055 1342.69,688.055 1343.25,688.055 1343.81,688.055 1344.37,688.055 1344.93,688.055 1345.49,688.055 1346.05,688.055 1346.61,688.055 1347.17,688.055 1347.73,688.055 1348.29,688.055 1348.84,688.055 1349.4,688.055 1349.96,688.055 1350.52,688.055 1351.08,688.055 1351.64,688.055 1352.2,688.055 1352.76,688.055 1353.32,688.055 1353.88,688.055 1354.44,688.055 1355,688.055 1355.56,688.055 1356.12,688.055 1356.67,688.055 1357.23,688.055 1357.79,688.055 1358.35,688.055 1358.91,688.055 1359.47,688.055 1360.03,688.055 1360.59,688.055 1361.15,688.055 1361.71,688.055 1362.27,688.055 1362.83,688.055 1363.39,688.055 1363.94,688.055 1364.5,688.055 1365.06,688.055 1365.62,688.055 1366.18,688.055 1366.74,688.055 1367.3,688.055 1367.86,688.055 1368.42,688.055 1368.98,688.055 1369.54,688.055 1370.1,688.055 1370.66,688.055 1371.21,688.055 1371.77,688.055 1372.33,688.055 1372.89,688.055 1373.45,688.055 1374.01,688.055 1374.57,688.055 1375.13,688.055 1375.69,688.055 1376.25,688.055 1376.81,688.055 1377.37,688.055 1377.93,688.055 1378.49,688.055 1379.04,688.055 1379.6,688.055 1380.16,688.055 1380.72,688.055 1381.28,688.055 1381.84,688.055 1382.4,688.055 1382.96,688.055 1383.52,688.055 1384.08,688.055 1384.64,688.055 1385.2,688.055 1385.76,688.055 1386.31,688.055 1386.87,688.055 1387.43,688.055 1387.99,688.055 1388.55,688.055 1389.11,688.055 1389.67,688.055 1390.23,688.055 1390.79,688.055 1391.35,688.055 1391.91,688.055 1392.47,688.055 1393.03,688.055 1393.58,688.055 1394.14,688.055 1394.7,688.055 1395.26,688.055 1395.82,688.055 1396.38,688.055 1396.94,688.055 1397.5,688.055 1398.06,688.055 1398.62,688.055 1399.18,688.055 1399.74,688.055 1400.3,688.055 1400.86,688.055 1401.41,688.055 1401.97,688.055 1402.53,688.055 1403.09,688.055 1403.65,688.055 1404.21,688.055 1404.77,688.055 1405.33,688.055 1405.89,688.055 1406.45,688.055 1407.01,688.055 1407.57,688.055 1408.13,688.055 1408.68,688.055 1409.24,688.055 1409.8,688.055 1410.36,688.055 1410.92,688.055 1411.48,688.055 1412.04,688.055 1412.6,688.055 1413.16,688.055 1413.72,688.055 1414.28,688.055 1414.84,688.055 1415.4,688.055 1415.95,688.055 1416.51,688.055 1417.07,688.055 1417.63,688.055 1418.19,688.055 1418.75,688.055 1419.31,688.055 1419.87,688.055 1420.43,688.055 1420.99,688.055 1421.55,688.055 1422.11,688.055 1422.67,688.055 1423.23,688.055 1423.78,688.055 1424.34,688.055 1424.9,688.055 1425.46,688.055 1426.02,688.055 1426.58,688.055 1427.14,688.055 1427.7,688.055 1428.26,688.055 1428.82,688.055 1429.38,688.055 1429.94,688.055 1430.5,688.055 1431.05,688.055 1431.61,688.055 1432.17,688.055 1432.73,688.055 1433.29,688.055 1433.85,688.055 1434.41,688.055 1434.97,688.055 1435.53,688.055 1436.09,688.055 1436.65,688.055 1437.21,688.055 1437.77,688.055 1438.33,688.055 1438.88,688.055 1439.44,688.055 1440,688.055 1440.56,688.055 1441.12,688.055 1441.68,688.055 1442.24,688.055 1442.8,688.055 1443.36,688.055 1443.92,688.055 1444.48,688.055 1445.04,688.055 1445.6,688.055 1446.15,688.055 1446.71,688.055 1447.27,688.055 1447.83,688.055 1448.39,688.055 1448.95,688.055 1449.51,688.055 1450.07,688.055 1450.63,688.055 1451.19,688.055 1451.75,688.055 1452.31,688.055 1452.87,688.055 1453.42,688.055 1453.98,688.055 1454.54,688.055 1455.1,688.055 1455.66,688.055 1456.22,688.055 1456.78,688.055 1457.34,688.055 1457.9,688.055 1458.46,688.055 1459.02,688.055 1459.58,688.055 1460.14,688.055 1460.7,688.055 1461.25,688.055 1461.81,688.055 1462.37,688.055 1462.93,688.055 1463.49,688.055 1464.05,688.055 1464.61,688.055 1465.17,688.055 1465.73,688.055 1466.29,688.055 1466.85,688.055 1467.41,688.055 1467.97,688.055 1468.52,688.055 1469.08,688.055 1469.64,688.055 1470.2,688.055 1470.76,688.055 1471.32,688.055 1471.88,688.055 1472.44,688.055 1473,688.055 1473.56,688.055 1474.12,688.055 1474.68,688.055 1475.24,688.055 1475.79,688.055 1476.35,688.055 1476.91,688.055 1477.47,688.055 1478.03,688.055 1478.59,688.055 1479.15,688.055 1479.71,688.055 1480.27,688.055 1480.83,688.055 1481.39,688.055 1481.95,688.055 1482.51,688.055 1483.07,688.055 1483.62,688.055 1484.18,688.055 1484.74,688.055 1485.3,688.055 1485.86,688.055 1486.42,688.055 1486.98,688.055 1487.54,688.055 1488.1,688.055 1488.66,688.055 1489.22,688.055 1489.78,688.055 1490.34,688.055 1490.89,688.055 1491.45,688.055 1492.01,688.055 1492.57,688.055 1493.13,688.055 1493.69,688.055 1494.25,688.055 1494.81,688.055 1495.37,688.055 1495.93,688.055 1496.49,688.055 1497.05,688.055 1497.61,688.055 1498.16,688.055 1498.72,688.055 1499.28,688.055 1499.84,688.055 1500.4,688.055 1500.96,688.055 1501.52,688.055 1502.08,688.055 1502.64,688.055 1503.2,688.055 1503.76,688.055 1504.32,688.055 1504.88,688.055 1505.44,688.055 1505.99,688.055 1506.55,688.055 1507.11,688.055 1507.67,688.055 1508.23,688.055 1508.79,688.055 1509.35,688.055 1509.91,688.055 1510.47,688.055 1511.03,688.055 1511.59,688.055 1512.15,688.055 1512.71,688.055 1513.26,688.055 1513.82,688.055 1514.38,688.055 1514.94,688.055 1515.5,688.055 1516.06,688.055 1516.62,688.055 1517.18,688.055 1517.74,688.055 1518.3,688.055 1518.86,688.055 1519.42,688.055 1519.98,688.055 1520.53,688.055 1521.09,688.055 1521.65,688.055 1522.21,688.055 1522.77,688.055 1523.33,688.055 1523.89,688.055 1524.45,688.055 1525.01,688.055 1525.57,688.055 1526.13,688.055 1526.69,688.055 1527.25,688.055 1527.81,688.055 1528.36,688.055 1528.92,688.055 1529.48,688.055 1530.04,688.055 1530.6,688.055 1531.16,688.055 1531.72,688.055 1532.28,688.055 1532.84,688.055 1533.4,688.055 1533.96,688.055 1534.52,688.055 1535.08,688.055 1535.63,688.055 1536.19,688.055 1536.75,688.055 1537.31,688.055 1537.87,688.055 1538.43,688.055 1538.99,688.055 1539.55,688.055 1540.11,688.055 1540.67,688.055 1541.23,688.055 1541.79,688.055 1542.35,688.055 1542.9,688.055 1543.46,688.055 1544.02,688.055 1544.58,688.055 1545.14,688.055 1545.7,688.055 1546.26,688.055 1546.82,688.055 1547.38,688.055 1547.94,688.055 1548.5,688.055 1549.06,688.055 1549.62,688.055 1550.18,688.055 1550.73,688.055 1551.29,688.055 1551.85,688.055 1552.41,688.055 1552.97,688.055 1553.53,688.055 1554.09,688.055 1554.65,688.055 1555.21,688.055 1555.77,688.055 1556.33,688.055 1556.89,688.055 1557.45,688.055 1558,688.055 1558.56,688.055 1559.12,688.055 1559.68,688.055 1560.24,688.055 1560.8,688.055 1561.36,688.055 1561.92,688.055 1562.48,688.055 1563.04,688.055 1563.6,688.055 1564.16,688.055 1564.72,688.055 1565.28,688.055 1565.83,688.055 1566.39,688.055 1566.95,688.055 1567.51,688.055 1568.07,688.055 1568.63,688.055 1569.19,688.055 1569.75,688.055 1570.31,688.055 1570.87,688.055 1571.43,688.055 1571.99,688.055 1572.55,688.055 1573.1,688.055 1573.66,688.055 1574.22,688.055 1574.78,688.055 1575.34,688.055 1575.9,688.055 1576.46,688.055 1577.02,688.055 1577.58,688.055 1578.14,688.055 1578.7,688.055 1579.26,688.055 1579.82,688.055 1580.37,688.055 1580.93,688.055 1581.49,688.055 1582.05,688.055 1582.61,688.055 1583.17,688.055 1583.73,688.055 1584.29,688.055 1584.85,688.055 1585.41,688.055 1585.97,688.055 1586.53,688.055 1587.09,688.055 1587.65,688.055 1588.2,688.055 1588.76,688.055 1589.32,688.055 1589.88,688.055 1590.44,688.055 1591,688.055 1591.56,688.055 1592.12,688.055 1592.68,688.055 1593.24,688.055 1593.8,688.055 1594.36,688.055 1594.92,688.055 1595.47,688.055 1596.03,688.055 1596.59,688.055 1597.15,688.055 1597.71,688.055 1598.27,688.055 1598.83,688.055 1599.39,688.055 1599.95,688.055 1600.51,688.055 1601.07,688.055 1601.63,688.055 1602.19,688.055 1602.74,688.055 1603.3,688.055 1603.86,688.055 1604.42,688.055 1604.98,688.055 1605.54,688.055 1606.1,688.055 1606.66,688.055 1607.22,688.055 1607.78,688.055 1608.34,688.055 1608.9,688.055 1609.46,688.055 1610.02,688.055 1610.57,688.055 1611.13,688.055 1611.69,688.055 1612.25,688.055 1612.81,688.055 1613.37,688.055 1613.93,688.055 1614.49,688.055 1615.05,688.055 1615.61,688.055 1616.17,688.055 1616.73,688.055 1617.29,688.055 1617.84,688.055 1618.4,688.055 1618.96,688.055 1619.52,688.055 1620.08,688.055 1620.64,688.055 1621.2,688.055 1621.76,688.055 1622.32,688.055 1622.88,688.055 1623.44,688.055 1624,688.055 1624.56,688.055 1625.11,688.055 1625.67,688.055 1626.23,688.055 1626.79,688.055 1627.35,688.055 1627.91,688.055 1628.47,688.055 1629.03,688.055 1629.59,688.055 1630.15,688.055 1630.71,688.055 1631.27,688.055 1631.83,688.055 1632.39,688.055 1632.94,688.055 1633.5,688.055 1634.06,688.055 1634.62,688.055 1635.18,688.055 1635.74,688.055 1636.3,688.055 1636.86,688.055 1637.42,688.055 1637.98,688.055 1638.54,688.055 1639.1,688.055 1639.66,688.055 1640.21,688.055 1640.77,688.055 1641.33,688.055 1641.89,688.055 1642.45,688.055 1643.01,688.055 1643.57,688.055 1644.13,688.055 1644.69,688.055 1645.25,688.055 1645.81,688.055 1646.37,688.055 1646.93,688.055 1647.48,688.055 1648.04,688.055 1648.6,688.055 1649.16,688.055 1649.72,688.055 1650.28,688.055 1650.84,688.055 1651.4,688.055 1651.96,688.055 1652.52,688.055 1653.08,688.055 1653.64,688.055 1654.2,688.055 1654.76,688.055 1655.31,688.055 1655.87,688.055 1656.43,688.055 1656.99,688.055 1657.55,688.055 1658.11,688.055 1658.67,688.055 1659.23,688.055 1659.79,688.055 1660.35,688.055 1660.91,688.055 1661.47,688.055 1662.03,688.055 1662.58,688.055 1663.14,688.055 1663.7,688.055 1664.26,688.055 1664.82,688.055 1665.38,688.055 1665.94,688.055 1666.5,688.055 1667.06,688.055 1667.62,688.055 1668.18,688.055 1668.74,688.055 1669.3,688.055 1669.85,688.055 1670.41,688.055 1670.97,688.055 1671.53,688.055 1672.09,688.055 1672.65,688.055 1673.21,688.055 1673.77,688.055 1674.33,688.055 1674.89,688.055 1675.45,688.055 1676.01,688.055 1676.57,688.055 1677.13,688.055 1677.68,688.055 1678.24,688.055 1678.8,688.055 1679.36,688.055 1679.92,688.055 1680.48,688.055 1681.04,688.055 1681.6,688.055 1682.16,688.055 1682.72,688.055 1683.28,688.055 1683.84,688.055 1684.4,688.055 1684.95,688.055 1685.51,688.055 1686.07,688.055 1686.63,688.055 1687.19,688.055 1687.75,688.055 1688.31,688.055 1688.87,688.055 1689.43,688.055 1689.99,688.055 1690.55,688.055 1691.11,688.055 1691.67,688.055 1692.23,688.055 1692.78,688.055 1693.34,688.055 1693.9,688.055 1694.46,688.055 1695.02,688.055 1695.58,688.055 1696.14,688.055 1696.7,688.055 1697.26,688.055 1697.82,688.055 1698.38,688.055 1698.94,688.055 1699.5,688.055 1700.05,688.055 1700.61,688.055 1701.17,688.055 1701.73,688.055 1702.29,688.055 1702.85,688.055 1703.41,688.055 1703.97,688.055 1704.53,688.055 1705.09,688.055 1705.65,688.055 1706.21,688.055 1706.77,688.055 1707.32,688.055 1707.88,688.055 1708.44,688.055 1709,688.055 1709.56,688.055 1710.12,688.055 1710.68,688.055 1711.24,688.055 1711.8,688.055 1712.36,688.055 1712.92,688.055 1713.48,688.055 1714.04,688.055 1714.6,688.055 1715.15,688.055 1715.71,688.055 1716.27,688.055 1716.83,688.055 1717.39,688.055 1717.95,688.055 1718.51,688.055 1719.07,688.055 1719.63,688.055 1720.19,688.055 1720.75,688.055 1721.31,688.055 1721.87,688.055 1722.42,688.055 1722.98,688.055 1723.54,688.055 1724.1,688.055 1724.66,688.055 1725.22,688.055 1725.78,688.055 1726.34,688.055 1726.9,688.055 1727.46,688.055 1728.02,688.055 1728.58,688.055 1729.14,688.055 1729.69,688.055 1730.25,688.055 1730.81,688.055 1731.37,688.055 1731.93,688.055 1732.49,688.055 1733.05,688.055 1733.61,688.055 1734.17,688.055 1734.73,688.055 1735.29,688.055 1735.85,688.055 1736.41,688.055 1736.97,688.055 1737.52,688.055 1738.08,688.055 1738.64,688.055 1739.2,688.055 1739.76,688.055 1740.32,688.055 1740.88,688.055 1741.44,688.055 1742,688.055 1742.56,688.055 1743.12,688.055 1743.68,688.055 1744.24,688.055 1744.79,688.055 1745.35,688.055 1745.91,688.055 1746.47,688.055 1747.03,688.055 1747.59,688.055 1748.15,688.055 1748.71,688.055 1749.27,688.055 1749.83,688.055 1750.39,688.055 1750.95,688.055 1751.51,688.055 1752.06,688.055 1752.62,688.055 1753.18,688.055 1753.74,688.055 1754.3,688.055 1754.86,688.055 1755.42,688.055 1755.98,688.055 1756.54,688.055 1757.1,688.055 1757.66,688.055 1758.22,688.055 1758.78,688.055 1759.34,688.055 1759.89,688.055 1760.45,688.055 1761.01,688.055 1761.57,688.055 1762.13,688.055 1762.69,688.055 1763.25,688.055 1763.81,688.055 1764.37,688.055 1764.93,688.055 1765.49,688.055 1766.05,688.055 1766.61,688.055 1767.16,688.055 1767.72,688.055 1768.28,688.055 1768.84,688.055 1769.4,688.055 1769.96,688.055 1770.52,688.055 1771.08,688.055 1771.64,688.055 1772.2,688.055 1772.76,688.055 1773.32,688.055 1773.88,688.055 1774.43,688.055 1774.99,688.055 1775.55,688.055 1776.11,688.055 1776.67,688.055 1777.23,688.055 1777.79,688.055 1778.35,688.055 1778.91,688.055 1779.47,688.055 1780.03,688.055 1780.59,688.055 1781.15,688.055 1781.71,688.055 1782.26,688.055 1782.82,688.055 1783.38,688.055 1783.94,688.055 1784.5,688.055 1785.06,688.055 1785.62,688.055 1786.18,688.055 1786.74,688.055 1787.3,688.055 1787.86,688.055 1788.42,688.055 1788.98,688.055 1789.53,688.055 1790.09,688.055 1790.65,688.055 1791.21,688.055 1791.77,688.055 1792.33,688.055 1792.89,688.055 1793.45,688.055 1794.01,688.055 1794.57,688.055 1795.13,688.055 1795.69,688.055 1796.25,688.055 1796.8,688.055 1797.36,688.055 1797.92,688.055 1798.48,688.055 1799.04,688.055 1799.6,688.055 1800.16,688.055 1800.72,688.055 1801.28,688.055 1801.84,688.055 1802.4,688.055 1802.96,688.055 1803.52,688.055 1804.08,688.055 1804.63,688.055 1805.19,688.055 1805.75,688.055 1806.31,688.055 1806.87,688.055 1807.43,688.055 1807.99,688.055 1808.55,688.055 1809.11,688.055 1809.67,688.055 1810.23,688.055 1810.79,688.055 1811.35,688.055 1811.9,688.055 1812.46,688.055 1813.02,688.055 1813.58,688.055 1814.14,688.055 1814.7,688.055 1815.26,688.055 1815.82,688.055 1816.38,688.055 1816.94,688.055 1817.5,688.055 1818.06,688.055 1818.62,688.055 1819.18,688.055 1819.73,688.055 1820.29,688.055 1820.85,688.055 1821.41,688.055 1821.97,688.055 1822.53,688.055 1823.09,688.055 1823.65,688.055 1824.21,688.055 1824.77,688.055 1825.33,688.055 1825.89,688.055 1826.45,688.055 1827,688.055 1827.56,688.055 1828.12,688.055 1828.68,688.055 1829.24,688.055 1829.8,688.055 1830.36,688.055 1830.92,688.055 1831.48,688.055 1832.04,688.055 1832.6,688.055 1833.16,688.055 1833.72,688.055 1834.27,688.055 1834.83,688.055 1835.39,688.055 1835.95,688.055 1836.51,688.055 1837.07,688.055 1837.63,688.055 1838.19,688.055 \"/>\n<path clip-path=\"url(#clip273)\" d=\"M720.247 685.364 L720.806 685.364 L721.365 685.364 L721.924 685.364 L722.484 685.364 L723.043 685.364 L723.602 685.364 L724.161 685.364 L724.721 685.364 L725.28 685.364 L725.839 685.364 L726.398 685.364 L726.958 685.364 L727.517 685.364 L728.076 685.364 L728.635 685.364 L729.195 685.364 L729.754 685.364 L730.313 685.364 L730.872 685.364 L731.432 685.364 L731.991 685.364 L732.55 685.364 L733.109 685.364 L733.669 685.364 L734.228 685.364 L734.787 685.364 L735.346 685.364 L735.906 685.364 L736.465 685.364 L737.024 685.364 L737.583 685.364 L738.143 685.364 L738.702 685.364 L739.261 685.364 L739.82 685.364 L740.38 685.364 L740.939 685.364 L741.498 685.364 L742.057 685.364 L742.617 685.364 L743.176 685.364 L743.735 685.364 L744.294 685.364 L744.854 685.364 L745.413 685.364 L745.972 685.364 L746.531 685.364 L747.091 685.364 L747.65 685.364 L748.209 685.364 L748.768 685.364 L749.328 685.364 L749.887 685.364 L750.446 685.364 L751.005 685.364 L751.565 685.364 L752.124 685.364 L752.683 685.364 L753.242 685.364 L753.802 685.364 L754.361 685.364 L754.92 685.364 L755.479 685.364 L756.039 685.364 L756.598 685.364 L757.157 685.364 L757.716 685.364 L758.276 685.364 L758.835 685.364 L759.394 685.364 L759.953 685.364 L760.513 685.364 L761.072 685.364 L761.631 685.364 L762.19 685.364 L762.75 685.364 L763.309 685.364 L763.868 685.364 L764.427 685.364 L764.987 685.364 L765.546 685.364 L766.105 685.364 L766.664 685.364 L767.224 685.364 L767.783 685.364 L768.342 685.364 L768.901 685.364 L769.461 685.364 L770.02 685.364 L770.579 685.364 L771.138 685.364 L771.698 685.364 L772.257 685.364 L772.816 685.364 L773.375 685.364 L773.935 685.364 L774.494 685.364 L775.053 685.364 L775.612 685.364 L776.172 685.364 L776.731 685.364 L777.29 685.364 L777.849 685.364 L778.409 685.364 L778.968 685.364 L779.527 685.364 L780.086 685.364 L780.646 685.364 L781.205 685.364 L781.764 685.364 L782.323 685.364 L782.883 685.364 L783.442 685.364 L784.001 685.364 L784.56 685.364 L785.12 685.364 L785.679 685.364 L786.238 685.364 L786.797 685.364 L787.357 685.364 L787.916 685.364 L788.475 685.364 L789.034 685.364 L789.594 685.364 L790.153 685.364 L790.712 685.364 L791.271 685.364 L791.831 685.364 L792.39 685.364 L792.949 685.364 L793.508 685.364 L794.068 685.364 L794.627 685.364 L795.186 685.364 L795.745 685.364 L796.305 685.364 L796.864 685.364 L797.423 685.364 L797.982 685.364 L798.542 685.364 L799.101 685.364 L799.66 685.364 L800.219 685.364 L800.779 685.364 L801.338 685.364 L801.897 685.364 L802.456 685.364 L803.016 685.364 L803.575 685.364 L804.134 685.364 L804.693 685.364 L805.253 685.364 L805.812 685.364 L806.371 685.364 L806.931 685.364 L807.49 685.364 L808.049 685.364 L808.608 685.364 L809.168 685.364 L809.727 685.364 L810.286 685.364 L810.845 685.364 L811.405 685.364 L811.964 685.364 L812.523 685.364 L813.082 685.364 L813.642 685.364 L814.201 685.364 L814.76 685.364 L815.319 685.364 L815.879 685.364 L816.438 685.364 L816.997 685.364 L817.556 685.364 L818.116 685.364 L818.675 685.364 L819.234 685.364 L819.793 685.364 L820.353 685.364 L820.912 685.364 L821.471 685.364 L822.03 685.364 L822.59 685.364 L823.149 685.364 L823.708 685.364 L824.267 685.364 L824.827 685.364 L825.386 685.364 L825.945 685.364 L826.504 685.364 L827.064 685.364 L827.623 685.364 L828.182 685.364 L828.741 685.364 L829.301 685.364 L829.86 685.364 L830.419 685.364 L830.978 685.364 L831.538 685.364 L832.097 685.364 L832.656 685.364 L833.215 685.364 L833.775 685.364 L834.334 685.364 L834.893 685.364 L835.452 685.364 L836.012 685.364 L836.571 685.364 L837.13 685.364 L837.689 685.364 L838.249 685.364 L838.808 685.364 L839.367 685.364 L839.926 685.364 L840.486 685.364 L841.045 685.364 L841.604 685.364 L842.163 685.364 L842.723 685.364 L843.282 685.364 L843.841 685.364 L844.4 685.364 L844.96 685.364 L845.519 685.364 L846.078 685.364 L846.637 685.364 L847.197 685.364 L847.756 685.364 L848.315 685.364 L848.874 685.364 L849.434 685.364 L849.993 685.364 L850.552 685.364 L851.111 685.364 L851.671 685.364 L852.23 685.364 L852.789 685.364 L853.348 685.364 L853.908 685.364 L854.467 685.364 L855.026 685.364 L855.585 685.364 L856.145 685.364 L856.704 685.364 L857.263 685.364 L857.822 685.364 L858.382 685.364 L858.941 685.364 L859.5 685.364 L860.059 685.364 L860.619 685.364 L861.178 685.364 L861.737 685.364 L862.296 685.364 L862.856 685.364 L863.415 685.364 L863.974 685.364 L864.533 685.364 L865.093 685.364 L865.652 685.364 L866.211 685.364 L866.77 685.364 L867.33 685.364 L867.889 685.364 L868.448 685.364 L869.007 685.364 L869.567 685.364 L870.126 685.364 L870.685 685.364 L871.244 685.364 L871.804 685.364 L872.363 685.364 L872.922 685.364 L873.481 685.364 L874.041 685.364 L874.6 685.364 L875.159 685.364 L875.718 685.364 L876.278 685.364 L876.837 685.364 L877.396 685.364 L877.955 685.364 L878.515 685.364 L879.074 685.364 L879.633 685.364 L880.192 685.364 L880.752 685.364 L881.311 685.364 L881.87 685.364 L882.429 685.364 L882.989 685.364 L883.548 685.364 L884.107 685.364 L884.666 685.364 L885.226 685.364 L885.785 685.364 L886.344 685.364 L886.903 685.364 L887.463 685.364 L888.022 685.364 L888.581 685.364 L889.14 685.364 L889.7 685.364 L890.259 685.364 L890.818 685.364 L891.377 685.364 L891.937 685.364 L892.496 685.364 L893.055 685.364 L893.614 685.364 L894.174 685.364 L894.733 685.364 L895.292 685.364 L895.851 685.364 L896.411 685.364 L896.97 685.364 L897.529 685.364 L898.088 685.364 L898.648 685.364 L899.207 685.364 L899.766 685.364 L900.325 685.364 L900.885 685.364 L901.444 685.364 L902.003 685.364 L902.562 685.364 L903.122 685.364 L903.681 685.364 L904.24 685.364 L904.799 685.364 L905.359 685.364 L905.918 685.364 L906.477 685.364 L907.036 685.364 L907.596 685.364 L908.155 685.364 L908.714 685.364 L909.273 685.364 L909.833 685.364 L910.392 685.364 L910.951 685.364 L911.51 685.364 L912.07 685.364 L912.629 685.364 L913.188 685.364 L913.747 685.364 L914.307 685.364 L914.866 685.364 L915.425 685.364 L915.984 685.364 L916.544 685.364 L917.103 685.364 L917.662 685.364 L918.221 685.364 L918.781 685.364 L919.34 685.364 L919.899 685.364 L920.458 685.364 L921.018 685.364 L921.577 685.364 L922.136 685.364 L922.695 685.364 L923.255 685.364 L923.814 685.364 L924.373 685.364 L924.932 685.364 L925.492 685.364 L926.051 685.364 L926.61 685.364 L927.169 685.364 L927.729 685.364 L928.288 685.364 L928.847 685.364 L929.406 685.364 L929.966 685.364 L930.525 685.364 L931.084 685.364 L931.644 685.364 L932.203 685.364 L932.762 685.364 L933.321 685.364 L933.881 685.364 L934.44 685.364 L934.999 685.364 L935.558 685.364 L936.118 685.364 L936.677 685.364 L937.236 685.364 L937.795 685.364 L938.355 685.364 L938.914 685.364 L939.473 685.364 L940.032 685.364 L940.592 685.364 L941.151 685.364 L941.71 685.364 L942.269 685.364 L942.829 685.364 L943.388 685.364 L943.947 685.364 L944.506 685.364 L945.066 685.364 L945.625 685.364 L946.184 685.364 L946.743 685.364 L947.303 685.364 L947.862 685.364 L948.421 685.364 L948.98 685.364 L949.54 685.364 L950.099 685.364 L950.658 685.364 L951.217 685.364 L951.777 685.364 L952.336 685.364 L952.895 685.364 L953.454 685.364 L954.014 685.364 L954.573 685.364 L955.132 685.364 L955.691 685.364 L956.251 685.364 L956.81 685.364 L957.369 685.364 L957.928 685.364 L958.488 685.364 L959.047 685.364 L959.606 685.364 L960.165 685.364 L960.725 685.364 L961.284 685.364 L961.843 685.364 L962.402 685.364 L962.962 685.364 L963.521 685.364 L964.08 685.364 L964.639 685.364 L965.199 685.364 L965.758 685.364 L966.317 685.364 L966.876 685.364 L967.436 685.364 L967.995 685.364 L968.554 685.364 L969.113 685.364 L969.673 685.364 L970.232 685.364 L970.791 685.364 L971.35 685.364 L971.91 685.364 L972.469 685.364 L973.028 685.364 L973.587 685.364 L974.147 685.364 L974.706 685.364 L975.265 685.364 L975.824 685.364 L976.384 685.364 L976.943 685.364 L977.502 685.364 L978.061 685.364 L978.621 685.364 L979.18 685.364 L979.739 685.364 L980.298 685.364 L980.858 685.364 L981.417 685.364 L981.976 685.364 L982.535 685.364 L983.095 685.364 L983.654 685.364 L984.213 685.364 L984.772 685.364 L985.332 685.364 L985.891 685.364 L986.45 685.364 L987.009 685.364 L987.569 685.364 L988.128 685.364 L988.687 685.364 L989.246 685.364 L989.806 685.364 L990.365 685.364 L990.924 685.364 L991.483 685.364 L992.043 685.364 L992.602 685.364 L993.161 685.364 L993.72 685.364 L994.28 685.364 L994.839 685.364 L995.398 685.364 L995.957 685.364 L996.517 685.364 L997.076 685.364 L997.635 685.364 L998.194 685.364 L998.754 685.364 L999.313 685.364 L999.872 685.364 L1000.43 685.364 L1000.99 685.364 L1001.55 685.364 L1002.11 685.364 L1002.67 685.364 L1003.23 685.364 L1003.79 685.364 L1004.35 685.364 L1004.91 685.364 L1005.46 685.364 L1006.02 685.364 L1006.58 685.364 L1007.14 685.364 L1007.7 685.364 L1008.26 685.364 L1008.82 685.364 L1009.38 685.364 L1009.94 685.364 L1010.5 685.364 L1011.06 685.364 L1011.62 685.364 L1012.18 685.364 L1012.73 685.364 L1013.29 685.364 L1013.85 685.364 L1014.41 685.364 L1014.97 685.364 L1015.53 685.364 L1016.09 685.364 L1016.65 685.364 L1017.21 685.364 L1017.77 685.364 L1018.33 685.364 L1018.89 685.364 L1019.45 685.364 L1020.01 685.364 L1020.56 685.364 L1021.12 685.364 L1021.68 685.364 L1022.24 685.364 L1022.8 685.364 L1023.36 685.364 L1023.92 685.364 L1024.48 685.364 L1025.04 685.364 L1025.6 685.364 L1026.16 685.364 L1026.72 685.364 L1027.28 685.364 L1027.83 685.364 L1028.39 685.364 L1028.95 685.364 L1029.51 685.364 L1030.07 685.364 L1030.63 685.364 L1031.19 685.364 L1031.75 685.364 L1032.31 685.364 L1032.87 685.364 L1033.43 685.364 L1033.99 685.364 L1034.55 685.364 L1035.1 685.364 L1035.66 685.364 L1036.22 685.364 L1036.78 685.364 L1037.34 685.364 L1037.9 685.364 L1038.46 685.364 L1039.02 685.364 L1039.58 685.364 L1040.14 685.364 L1040.7 685.364 L1041.26 685.364 L1041.82 685.364 L1042.38 685.364 L1042.93 685.364 L1043.49 685.364 L1044.05 685.364 L1044.61 685.364 L1045.17 685.364 L1045.73 685.364 L1046.29 685.364 L1046.85 685.364 L1047.41 685.364 L1047.97 685.364 L1048.53 685.364 L1049.09 685.364 L1049.65 685.364 L1050.2 685.364 L1050.76 685.364 L1051.32 685.364 L1051.88 685.364 L1052.44 685.364 L1053 685.364 L1053.56 685.364 L1054.12 685.364 L1054.68 685.364 L1055.24 685.364 L1055.8 685.364 L1056.36 685.364 L1056.92 685.364 L1057.48 685.364 L1058.03 685.364 L1058.59 685.364 L1059.15 685.364 L1059.71 685.364 L1060.27 685.364 L1060.83 685.364 L1061.39 685.364 L1061.95 685.364 L1062.51 685.364 L1063.07 685.364 L1063.63 685.364 L1064.19 685.364 L1064.75 685.364 L1065.3 685.364 L1065.86 685.364 L1066.42 685.364 L1066.98 685.364 L1067.54 685.364 L1068.1 685.364 L1068.66 685.364 L1069.22 685.364 L1069.78 685.364 L1070.34 685.364 L1070.9 685.364 L1071.46 685.364 L1072.02 685.364 L1072.57 685.364 L1073.13 685.364 L1073.69 685.364 L1074.25 685.364 L1074.81 685.364 L1075.37 685.364 L1075.93 685.364 L1076.49 685.364 L1077.05 685.364 L1077.61 685.364 L1078.17 685.364 L1078.73 685.364 L1079.29 685.364 L1079.85 685.364 L1080.4 685.364 L1080.96 685.364 L1081.52 685.364 L1082.08 685.364 L1082.64 685.364 L1083.2 685.364 L1083.76 685.364 L1084.32 685.364 L1084.88 685.364 L1085.44 685.364 L1086 685.364 L1086.56 685.364 L1087.12 685.364 L1087.67 685.364 L1088.23 685.364 L1088.79 685.364 L1089.35 685.364 L1089.91 685.364 L1090.47 685.364 L1091.03 685.364 L1091.59 685.364 L1092.15 685.364 L1092.71 685.364 L1093.27 685.364 L1093.83 685.364 L1094.39 685.364 L1094.94 685.364 L1095.5 685.364 L1096.06 685.364 L1096.62 685.364 L1097.18 685.364 L1097.74 685.364 L1098.3 685.364 L1098.86 685.364 L1099.42 685.364 L1099.98 685.364 L1100.54 685.364 L1101.1 685.364 L1101.66 685.364 L1102.22 685.364 L1102.77 685.364 L1103.33 685.364 L1103.89 685.364 L1104.45 685.364 L1105.01 685.364 L1105.57 685.364 L1106.13 685.364 L1106.69 685.364 L1107.25 685.364 L1107.81 685.364 L1108.37 685.364 L1108.93 685.364 L1109.49 685.364 L1110.04 685.364 L1110.6 685.364 L1111.16 685.364 L1111.72 685.364 L1112.28 685.364 L1112.84 685.364 L1113.4 685.364 L1113.96 685.364 L1114.52 685.364 L1115.08 685.364 L1115.64 685.364 L1116.2 685.364 L1116.76 685.364 L1117.31 685.364 L1117.87 685.364 L1118.43 685.364 L1118.99 685.364 L1119.55 685.364 L1120.11 685.364 L1120.67 685.364 L1121.23 685.364 L1121.79 685.364 L1122.35 685.364 L1122.91 685.364 L1123.47 685.364 L1124.03 685.364 L1124.59 685.364 L1125.14 685.364 L1125.7 685.364 L1126.26 685.364 L1126.82 685.364 L1127.38 685.364 L1127.94 685.364 L1128.5 685.364 L1129.06 685.364 L1129.62 685.364 L1130.18 685.364 L1130.74 685.364 L1131.3 685.364 L1131.86 685.364 L1132.41 685.364 L1132.97 685.364 L1133.53 685.364 L1134.09 685.364 L1134.65 685.364 L1135.21 685.364 L1135.77 685.364 L1136.33 685.364 L1136.89 685.364 L1137.45 685.364 L1138.01 685.364 L1138.57 685.364 L1139.13 685.364 L1139.68 685.364 L1140.24 685.364 L1140.8 685.364 L1141.36 685.364 L1141.92 685.364 L1142.48 685.364 L1143.04 685.364 L1143.6 685.364 L1144.16 685.364 L1144.72 685.364 L1145.28 685.364 L1145.84 685.364 L1146.4 685.364 L1146.96 685.364 L1147.51 685.364 L1148.07 685.364 L1148.63 685.364 L1149.19 685.364 L1149.75 685.364 L1150.31 685.364 L1150.87 685.364 L1151.43 685.364 L1151.99 685.364 L1152.55 685.364 L1153.11 685.364 L1153.67 685.364 L1154.23 685.364 L1154.78 685.364 L1155.34 685.364 L1155.9 685.364 L1156.46 685.364 L1157.02 685.364 L1157.58 685.364 L1158.14 685.364 L1158.7 685.364 L1159.26 685.364 L1159.82 685.364 L1160.38 685.364 L1160.94 685.364 L1161.5 685.364 L1162.05 685.364 L1162.61 685.364 L1163.17 685.364 L1163.73 685.364 L1164.29 685.364 L1164.85 685.364 L1165.41 685.364 L1165.97 685.364 L1166.53 685.364 L1167.09 685.364 L1167.65 685.364 L1168.21 685.364 L1168.77 685.364 L1169.33 685.364 L1169.88 685.364 L1170.44 685.364 L1171 685.364 L1171.56 685.364 L1172.12 685.364 L1172.68 685.364 L1173.24 685.364 L1173.8 685.364 L1174.36 685.364 L1174.92 685.364 L1175.48 685.364 L1176.04 685.364 L1176.6 685.364 L1177.15 685.364 L1177.71 685.364 L1178.27 685.364 L1178.83 685.364 L1179.39 685.364 L1179.95 685.364 L1180.51 685.364 L1181.07 685.364 L1181.63 685.364 L1182.19 685.364 L1182.75 685.364 L1183.31 685.364 L1183.87 685.364 L1184.43 685.364 L1184.98 685.364 L1185.54 685.364 L1186.1 685.364 L1186.66 685.364 L1187.22 685.364 L1187.78 685.364 L1188.34 685.364 L1188.9 685.364 L1189.46 685.364 L1190.02 685.364 L1190.58 685.364 L1191.14 685.364 L1191.7 685.364 L1192.25 685.364 L1192.81 685.364 L1193.37 685.364 L1193.93 685.364 L1194.49 685.364 L1195.05 685.364 L1195.61 685.364 L1196.17 685.364 L1196.73 685.364 L1197.29 685.364 L1197.85 685.364 L1198.41 685.364 L1198.97 685.364 L1199.52 685.364 L1200.08 685.364 L1200.64 685.364 L1201.2 685.364 L1201.76 685.364 L1202.32 685.364 L1202.88 685.364 L1203.44 685.364 L1204 685.364 L1204.56 685.364 L1205.12 685.364 L1205.68 685.364 L1206.24 685.364 L1206.8 685.364 L1207.35 685.364 L1207.91 685.364 L1208.47 685.364 L1209.03 685.364 L1209.59 685.364 L1210.15 685.364 L1210.71 685.364 L1211.27 685.364 L1211.83 685.364 L1212.39 685.364 L1212.95 685.364 L1213.51 685.364 L1214.07 685.364 L1214.62 685.364 L1215.18 685.364 L1215.74 685.364 L1216.3 685.364 L1216.86 685.364 L1217.42 685.364 L1217.98 685.364 L1218.54 685.364 L1219.1 685.364 L1219.66 685.364 L1220.22 685.364 L1220.78 685.364 L1221.34 685.364 L1221.89 685.364 L1222.45 685.364 L1223.01 685.364 L1223.57 685.364 L1224.13 685.364 L1224.69 685.364 L1225.25 685.364 L1225.81 685.364 L1226.37 685.364 L1226.93 685.364 L1227.49 685.364 L1228.05 685.364 L1228.61 685.364 L1229.17 685.364 L1229.72 685.364 L1230.28 685.364 L1230.84 685.364 L1231.4 685.364 L1231.96 685.364 L1232.52 685.364 L1233.08 685.364 L1233.64 685.364 L1234.2 685.364 L1234.76 685.364 L1235.32 685.364 L1235.88 685.364 L1236.44 685.364 L1236.99 685.364 L1237.55 685.364 L1238.11 685.364 L1238.67 685.364 L1239.23 685.364 L1239.79 685.364 L1240.35 685.364 L1240.91 685.364 L1241.47 685.364 L1242.03 685.364 L1242.59 685.364 L1243.15 685.364 L1243.71 685.364 L1244.26 685.364 L1244.82 685.364 L1245.38 685.364 L1245.94 685.364 L1246.5 685.364 L1247.06 685.364 L1247.62 685.364 L1248.18 685.364 L1248.74 685.364 L1249.3 685.364 L1249.86 685.364 L1250.42 685.364 L1250.98 685.364 L1251.54 685.364 L1252.09 685.364 L1252.65 685.364 L1253.21 685.364 L1253.77 685.364 L1254.33 685.364 L1254.89 685.364 L1255.45 685.364 L1256.01 685.364 L1256.57 685.364 L1257.13 685.364 L1257.69 685.364 L1258.25 685.364 L1258.81 685.364 L1259.36 685.364 L1259.92 685.364 L1260.48 685.364 L1261.04 685.364 L1261.6 685.364 L1262.16 685.364 L1262.72 685.364 L1263.28 685.364 L1263.84 685.364 L1264.4 685.364 L1264.96 685.364 L1265.52 685.364 L1266.08 685.364 L1266.63 685.364 L1267.19 685.364 L1267.75 685.364 L1268.31 685.364 L1268.87 685.364 L1269.43 685.364 L1269.99 685.364 L1270.55 685.364 L1271.11 685.364 L1271.67 685.364 L1272.23 685.364 L1272.79 685.364 L1273.35 685.364 L1273.91 685.364 L1274.46 685.364 L1275.02 685.364 L1275.58 685.364 L1276.14 685.364 L1276.7 685.364 L1277.26 685.364 L1277.82 685.364 L1278.38 685.364 L1278.94 685.364 L1279.5 685.364 L1280.06 685.364 L1280.62 685.364 L1281.18 685.364 L1281.73 685.364 L1282.29 685.364 L1282.85 685.364 L1283.41 685.364 L1283.97 685.364 L1284.53 685.364 L1285.09 685.364 L1285.65 685.364 L1286.21 685.364 L1286.77 685.364 L1287.33 685.364 L1287.89 685.364 L1288.45 685.364 L1289 685.364 L1289.56 685.364 L1290.12 685.364 L1290.68 685.364 L1291.24 685.364 L1291.8 685.364 L1292.36 685.364 L1292.92 685.364 L1293.48 685.364 L1294.04 685.364 L1294.6 685.364 L1295.16 685.364 L1295.72 685.364 L1296.28 685.364 L1296.83 685.364 L1297.39 685.364 L1297.95 685.364 L1298.51 685.364 L1299.07 685.364 L1299.63 685.364 L1300.19 685.364 L1300.75 685.364 L1301.31 685.364 L1301.87 685.364 L1302.43 685.364 L1302.99 685.364 L1303.55 685.364 L1304.1 685.364 L1304.66 685.364 L1305.22 685.364 L1305.78 685.364 L1306.34 685.364 L1306.9 685.364 L1307.46 685.364 L1308.02 685.364 L1308.58 685.364 L1309.14 685.364 L1309.7 685.364 L1310.26 685.364 L1310.82 685.364 L1311.38 685.364 L1311.93 685.364 L1312.49 685.364 L1313.05 685.364 L1313.61 685.364 L1314.17 685.364 L1314.73 685.364 L1315.29 685.364 L1315.85 685.364 L1316.41 685.364 L1316.97 685.364 L1317.53 685.364 L1318.09 685.364 L1318.65 685.364 L1319.2 685.364 L1319.76 685.364 L1320.32 685.364 L1320.88 685.364 L1321.44 685.364 L1322 685.364 L1322.56 685.364 L1323.12 685.364 L1323.68 685.364 L1324.24 685.364 L1324.8 685.364 L1325.36 685.364 L1325.92 685.364 L1326.47 685.364 L1327.03 685.364 L1327.59 685.364 L1328.15 685.364 L1328.71 685.364 L1329.27 685.364 L1329.83 685.364 L1330.39 685.364 L1330.95 685.364 L1331.51 685.364 L1332.07 685.364 L1332.63 685.364 L1333.19 685.364 L1333.75 685.364 L1334.3 685.364 L1334.86 685.364 L1335.42 685.364 L1335.98 685.364 L1336.54 685.364 L1337.1 685.364 L1337.66 685.364 L1338.22 685.364 L1338.78 685.364 L1339.34 685.364 L1339.9 685.364 L1340.46 685.364 L1341.02 685.364 L1341.57 685.364 L1342.13 685.364 L1342.69 685.364 L1343.25 685.364 L1343.81 685.364 L1344.37 685.364 L1344.93 685.364 L1345.49 685.364 L1346.05 685.364 L1346.61 685.364 L1347.17 685.364 L1347.73 685.364 L1348.29 685.364 L1348.84 685.364 L1349.4 685.364 L1349.96 685.364 L1350.52 685.364 L1351.08 685.364 L1351.64 685.364 L1352.2 685.364 L1352.76 685.364 L1353.32 685.364 L1353.88 685.364 L1354.44 685.364 L1355 685.364 L1355.56 685.364 L1356.12 685.364 L1356.67 685.364 L1357.23 685.364 L1357.79 685.364 L1358.35 685.364 L1358.91 685.364 L1359.47 685.364 L1360.03 685.364 L1360.59 685.364 L1361.15 685.364 L1361.71 685.364 L1362.27 685.364 L1362.83 685.364 L1363.39 685.364 L1363.94 685.364 L1364.5 685.364 L1365.06 685.364 L1365.62 685.364 L1366.18 685.364 L1366.74 685.364 L1367.3 685.364 L1367.86 685.364 L1368.42 685.364 L1368.98 685.364 L1369.54 685.364 L1370.1 685.364 L1370.66 685.364 L1371.21 685.364 L1371.77 685.364 L1372.33 685.364 L1372.89 685.364 L1373.45 685.364 L1374.01 685.364 L1374.57 685.364 L1375.13 685.364 L1375.69 685.364 L1376.25 685.364 L1376.81 685.364 L1377.37 685.364 L1377.93 685.364 L1378.49 685.364 L1379.04 685.364 L1379.6 685.364 L1380.16 685.364 L1380.72 685.364 L1381.28 685.364 L1381.84 685.364 L1382.4 685.364 L1382.96 685.364 L1383.52 685.364 L1384.08 685.364 L1384.64 685.364 L1385.2 685.364 L1385.76 685.364 L1386.31 685.364 L1386.87 685.364 L1387.43 685.364 L1387.99 685.364 L1388.55 685.364 L1389.11 685.364 L1389.67 685.364 L1390.23 685.364 L1390.79 685.364 L1391.35 685.364 L1391.91 685.364 L1392.47 685.364 L1393.03 685.364 L1393.58 685.364 L1394.14 685.364 L1394.7 685.364 L1395.26 685.364 L1395.82 685.364 L1396.38 685.364 L1396.94 685.364 L1397.5 685.364 L1398.06 685.364 L1398.62 685.364 L1399.18 685.364 L1399.74 685.364 L1400.3 685.364 L1400.86 685.364 L1401.41 685.364 L1401.97 685.364 L1402.53 685.364 L1403.09 685.364 L1403.65 685.364 L1404.21 685.364 L1404.77 685.364 L1405.33 685.364 L1405.89 685.364 L1406.45 685.364 L1407.01 685.364 L1407.57 685.364 L1408.13 685.364 L1408.68 685.364 L1409.24 685.364 L1409.8 685.364 L1410.36 685.364 L1410.92 685.364 L1411.48 685.364 L1412.04 685.364 L1412.6 685.364 L1413.16 685.364 L1413.72 685.364 L1414.28 685.364 L1414.84 685.364 L1415.4 685.364 L1415.95 685.364 L1416.51 685.364 L1417.07 685.364 L1417.63 685.364 L1418.19 685.364 L1418.75 685.364 L1419.31 685.364 L1419.87 685.364 L1420.43 685.364 L1420.99 685.364 L1421.55 685.364 L1422.11 685.364 L1422.67 685.364 L1423.23 685.364 L1423.78 685.364 L1424.34 685.364 L1424.9 685.364 L1425.46 685.364 L1426.02 685.364 L1426.58 685.364 L1427.14 685.364 L1427.7 685.364 L1428.26 685.364 L1428.82 685.364 L1429.38 685.364 L1429.94 685.364 L1430.5 685.364 L1431.05 685.364 L1431.61 685.364 L1432.17 685.364 L1432.73 685.364 L1433.29 685.364 L1433.85 685.364 L1434.41 685.364 L1434.97 685.364 L1435.53 685.364 L1436.09 685.364 L1436.65 685.364 L1437.21 685.364 L1437.77 685.364 L1438.33 685.364 L1438.88 685.364 L1439.44 685.364 L1440 685.364 L1440.56 685.364 L1441.12 685.364 L1441.68 685.364 L1442.24 685.364 L1442.8 685.364 L1443.36 685.364 L1443.92 685.364 L1444.48 685.364 L1445.04 685.364 L1445.6 685.364 L1446.15 685.364 L1446.71 685.364 L1447.27 685.364 L1447.83 685.364 L1448.39 685.364 L1448.95 685.364 L1449.51 685.364 L1450.07 685.364 L1450.63 685.364 L1451.19 685.364 L1451.75 685.364 L1452.31 685.364 L1452.87 685.364 L1453.42 685.364 L1453.98 685.364 L1454.54 685.364 L1455.1 685.364 L1455.66 685.364 L1456.22 685.364 L1456.78 685.364 L1457.34 685.364 L1457.9 685.364 L1458.46 685.364 L1459.02 685.364 L1459.58 685.364 L1460.14 685.364 L1460.7 685.364 L1461.25 685.364 L1461.81 685.364 L1462.37 685.364 L1462.93 685.364 L1463.49 685.364 L1464.05 685.364 L1464.61 685.364 L1465.17 685.364 L1465.73 685.364 L1466.29 685.364 L1466.85 685.364 L1467.41 685.364 L1467.97 685.364 L1468.52 685.364 L1469.08 685.364 L1469.64 685.364 L1470.2 685.364 L1470.76 685.364 L1471.32 685.364 L1471.88 685.364 L1472.44 685.364 L1473 685.364 L1473.56 685.364 L1474.12 685.364 L1474.68 685.364 L1475.24 685.364 L1475.79 685.364 L1476.35 685.364 L1476.91 685.364 L1477.47 685.364 L1478.03 685.364 L1478.59 685.364 L1479.15 685.364 L1479.71 685.364 L1480.27 685.364 L1480.83 685.364 L1481.39 685.364 L1481.95 685.364 L1482.51 685.364 L1483.07 685.364 L1483.62 685.364 L1484.18 685.364 L1484.74 685.364 L1485.3 685.364 L1485.86 685.364 L1486.42 685.364 L1486.98 685.364 L1487.54 685.364 L1488.1 685.364 L1488.66 685.364 L1489.22 685.364 L1489.78 685.364 L1490.34 685.364 L1490.89 685.364 L1491.45 685.364 L1492.01 685.364 L1492.57 685.364 L1493.13 685.364 L1493.69 685.364 L1494.25 685.364 L1494.81 685.364 L1495.37 685.364 L1495.93 685.364 L1496.49 685.364 L1497.05 685.364 L1497.61 685.364 L1498.16 685.364 L1498.72 685.364 L1499.28 685.364 L1499.84 685.364 L1500.4 685.364 L1500.96 685.364 L1501.52 685.364 L1502.08 685.364 L1502.64 685.364 L1503.2 685.364 L1503.76 685.364 L1504.32 685.364 L1504.88 685.364 L1505.44 685.364 L1505.99 685.364 L1506.55 685.364 L1507.11 685.364 L1507.67 685.364 L1508.23 685.364 L1508.79 685.364 L1509.35 685.364 L1509.91 685.364 L1510.47 685.364 L1511.03 685.364 L1511.59 685.364 L1512.15 685.364 L1512.71 685.364 L1513.26 685.364 L1513.82 685.364 L1514.38 685.364 L1514.94 685.364 L1515.5 685.364 L1516.06 685.364 L1516.62 685.364 L1517.18 685.364 L1517.74 685.364 L1518.3 685.364 L1518.86 685.364 L1519.42 685.364 L1519.98 685.364 L1520.53 685.364 L1521.09 685.364 L1521.65 685.364 L1522.21 685.364 L1522.77 685.364 L1523.33 685.364 L1523.89 685.364 L1524.45 685.364 L1525.01 685.364 L1525.57 685.364 L1526.13 685.364 L1526.69 685.364 L1527.25 685.364 L1527.81 685.364 L1528.36 685.364 L1528.92 685.364 L1529.48 685.364 L1530.04 685.364 L1530.6 685.364 L1531.16 685.364 L1531.72 685.364 L1532.28 685.364 L1532.84 685.364 L1533.4 685.364 L1533.96 685.364 L1534.52 685.364 L1535.08 685.364 L1535.63 685.364 L1536.19 685.364 L1536.75 685.364 L1537.31 685.364 L1537.87 685.364 L1538.43 685.364 L1538.99 685.364 L1539.55 685.364 L1540.11 685.364 L1540.67 685.364 L1541.23 685.364 L1541.79 685.364 L1542.35 685.364 L1542.9 685.364 L1543.46 685.364 L1544.02 685.364 L1544.58 685.364 L1545.14 685.364 L1545.7 685.364 L1546.26 685.364 L1546.82 685.364 L1547.38 685.364 L1547.94 685.364 L1548.5 685.364 L1549.06 685.364 L1549.62 685.364 L1550.18 685.364 L1550.73 685.364 L1551.29 685.364 L1551.85 685.364 L1552.41 685.364 L1552.97 685.364 L1553.53 685.364 L1554.09 685.364 L1554.65 685.364 L1555.21 685.364 L1555.77 685.364 L1556.33 685.364 L1556.89 685.364 L1557.45 685.364 L1558 685.364 L1558.56 685.364 L1559.12 685.364 L1559.68 685.364 L1560.24 685.364 L1560.8 685.364 L1561.36 685.364 L1561.92 685.364 L1562.48 685.364 L1563.04 685.364 L1563.6 685.364 L1564.16 685.364 L1564.72 685.364 L1565.28 685.364 L1565.83 685.364 L1566.39 685.364 L1566.95 685.364 L1567.51 685.364 L1568.07 685.364 L1568.63 685.364 L1569.19 685.364 L1569.75 685.364 L1570.31 685.364 L1570.87 685.364 L1571.43 685.364 L1571.99 685.364 L1572.55 685.364 L1573.1 685.364 L1573.66 685.364 L1574.22 685.364 L1574.78 685.364 L1575.34 685.364 L1575.9 685.364 L1576.46 685.364 L1577.02 685.364 L1577.58 685.364 L1578.14 685.364 L1578.7 685.364 L1579.26 685.364 L1579.82 685.364 L1580.37 685.364 L1580.93 685.364 L1581.49 685.364 L1582.05 685.364 L1582.61 685.364 L1583.17 685.364 L1583.73 685.364 L1584.29 685.364 L1584.85 685.364 L1585.41 685.364 L1585.97 685.364 L1586.53 685.364 L1587.09 685.364 L1587.65 685.364 L1588.2 685.364 L1588.76 685.364 L1589.32 685.364 L1589.88 685.364 L1590.44 685.364 L1591 685.364 L1591.56 685.364 L1592.12 685.364 L1592.68 685.364 L1593.24 685.364 L1593.8 685.364 L1594.36 685.364 L1594.92 685.364 L1595.47 685.364 L1596.03 685.364 L1596.59 685.364 L1597.15 685.364 L1597.71 685.364 L1598.27 685.364 L1598.83 685.364 L1599.39 685.364 L1599.95 685.364 L1600.51 685.364 L1601.07 685.364 L1601.63 685.364 L1602.19 685.364 L1602.74 685.364 L1603.3 685.364 L1603.86 685.364 L1604.42 685.364 L1604.98 685.364 L1605.54 685.364 L1606.1 685.364 L1606.66 685.364 L1607.22 685.364 L1607.78 685.364 L1608.34 685.364 L1608.9 685.364 L1609.46 685.364 L1610.02 685.364 L1610.57 685.364 L1611.13 685.364 L1611.69 685.364 L1612.25 685.364 L1612.81 685.364 L1613.37 685.364 L1613.93 685.364 L1614.49 685.364 L1615.05 685.364 L1615.61 685.364 L1616.17 685.364 L1616.73 685.364 L1617.29 685.364 L1617.84 685.364 L1618.4 685.364 L1618.96 685.364 L1619.52 685.364 L1620.08 685.364 L1620.64 685.364 L1621.2 685.364 L1621.76 685.364 L1622.32 685.364 L1622.88 685.364 L1623.44 685.364 L1624 685.364 L1624.56 685.364 L1625.11 685.364 L1625.67 685.364 L1626.23 685.364 L1626.79 685.364 L1627.35 685.364 L1627.91 685.364 L1628.47 685.364 L1629.03 685.364 L1629.59 685.364 L1630.15 685.364 L1630.71 685.364 L1631.27 685.364 L1631.83 685.364 L1632.39 685.364 L1632.94 685.364 L1633.5 685.364 L1634.06 685.364 L1634.62 685.364 L1635.18 685.364 L1635.74 685.364 L1636.3 685.364 L1636.86 685.364 L1637.42 685.364 L1637.98 685.364 L1638.54 685.364 L1639.1 685.364 L1639.66 685.364 L1640.21 685.364 L1640.77 685.364 L1641.33 685.364 L1641.89 685.364 L1642.45 685.364 L1643.01 685.364 L1643.57 685.364 L1644.13 685.364 L1644.69 685.364 L1645.25 685.364 L1645.81 685.364 L1646.37 685.364 L1646.93 685.364 L1647.48 685.364 L1648.04 685.364 L1648.6 685.364 L1649.16 685.364 L1649.72 685.364 L1650.28 685.364 L1650.84 685.364 L1651.4 685.364 L1651.96 685.364 L1652.52 685.364 L1653.08 685.364 L1653.64 685.364 L1654.2 685.364 L1654.76 685.364 L1655.31 685.364 L1655.87 685.364 L1656.43 685.364 L1656.99 685.364 L1657.55 685.364 L1658.11 685.364 L1658.67 685.364 L1659.23 685.364 L1659.79 685.364 L1660.35 685.364 L1660.91 685.364 L1661.47 685.364 L1662.03 685.364 L1662.58 685.364 L1663.14 685.364 L1663.7 685.364 L1664.26 685.364 L1664.82 685.364 L1665.38 685.364 L1665.94 685.364 L1666.5 685.364 L1667.06 685.364 L1667.62 685.364 L1668.18 685.364 L1668.74 685.364 L1669.3 685.364 L1669.85 685.364 L1670.41 685.364 L1670.97 685.364 L1671.53 685.364 L1672.09 685.364 L1672.65 685.364 L1673.21 685.364 L1673.77 685.364 L1674.33 685.364 L1674.89 685.364 L1675.45 685.364 L1676.01 685.364 L1676.57 685.364 L1677.13 685.364 L1677.68 685.364 L1678.24 685.364 L1678.8 685.364 L1679.36 685.364 L1679.92 685.364 L1680.48 685.364 L1681.04 685.364 L1681.6 685.364 L1682.16 685.364 L1682.72 685.364 L1683.28 685.364 L1683.84 685.364 L1684.4 685.364 L1684.95 685.364 L1685.51 685.364 L1686.07 685.364 L1686.63 685.364 L1687.19 685.364 L1687.75 685.364 L1688.31 685.364 L1688.87 685.364 L1689.43 685.364 L1689.99 685.364 L1690.55 685.364 L1691.11 685.364 L1691.67 685.364 L1692.23 685.364 L1692.78 685.364 L1693.34 685.364 L1693.9 685.364 L1694.46 685.364 L1695.02 685.364 L1695.58 685.364 L1696.14 685.364 L1696.7 685.364 L1697.26 685.364 L1697.82 685.364 L1698.38 685.364 L1698.94 685.364 L1699.5 685.364 L1700.05 685.364 L1700.61 685.364 L1701.17 685.364 L1701.73 685.364 L1702.29 685.364 L1702.85 685.364 L1703.41 685.364 L1703.97 685.364 L1704.53 685.364 L1705.09 685.364 L1705.65 685.364 L1706.21 685.364 L1706.77 685.364 L1707.32 685.364 L1707.88 685.364 L1708.44 685.364 L1709 685.364 L1709.56 685.364 L1710.12 685.364 L1710.68 685.364 L1711.24 685.364 L1711.8 685.364 L1712.36 685.364 L1712.92 685.364 L1713.48 685.364 L1714.04 685.364 L1714.6 685.364 L1715.15 685.364 L1715.71 685.364 L1716.27 685.364 L1716.83 685.364 L1717.39 685.364 L1717.95 685.364 L1718.51 685.364 L1719.07 685.364 L1719.63 685.364 L1720.19 685.364 L1720.75 685.364 L1721.31 685.364 L1721.87 685.364 L1722.42 685.364 L1722.98 685.364 L1723.54 685.364 L1724.1 685.364 L1724.66 685.364 L1725.22 685.364 L1725.78 685.364 L1726.34 685.364 L1726.9 685.364 L1727.46 685.364 L1728.02 685.364 L1728.58 685.364 L1729.14 685.364 L1729.69 685.364 L1730.25 685.364 L1730.81 685.364 L1731.37 685.364 L1731.93 685.364 L1732.49 685.364 L1733.05 685.364 L1733.61 685.364 L1734.17 685.364 L1734.73 685.364 L1735.29 685.364 L1735.85 685.364 L1736.41 685.364 L1736.97 685.364 L1737.52 685.364 L1738.08 685.364 L1738.64 685.364 L1739.2 685.364 L1739.76 685.364 L1740.32 685.364 L1740.88 685.364 L1741.44 685.364 L1742 685.364 L1742.56 685.364 L1743.12 685.364 L1743.68 685.364 L1744.24 685.364 L1744.79 685.364 L1745.35 685.364 L1745.91 685.364 L1746.47 685.364 L1747.03 685.364 L1747.59 685.364 L1748.15 685.364 L1748.71 685.364 L1749.27 685.364 L1749.83 685.364 L1750.39 685.364 L1750.95 685.364 L1751.51 685.364 L1752.06 685.364 L1752.62 685.364 L1753.18 685.364 L1753.74 685.364 L1754.3 685.364 L1754.86 685.364 L1755.42 685.364 L1755.98 685.364 L1756.54 685.364 L1757.1 685.364 L1757.66 685.364 L1758.22 685.364 L1758.78 685.364 L1759.34 685.364 L1759.89 685.364 L1760.45 685.364 L1761.01 685.364 L1761.57 685.364 L1762.13 685.364 L1762.69 685.364 L1763.25 685.364 L1763.81 685.364 L1764.37 685.364 L1764.93 685.364 L1765.49 685.364 L1766.05 685.364 L1766.61 685.364 L1767.16 685.364 L1767.72 685.364 L1768.28 685.364 L1768.84 685.364 L1769.4 685.364 L1769.96 685.364 L1770.52 685.364 L1771.08 685.364 L1771.64 685.364 L1772.2 685.364 L1772.76 685.364 L1773.32 685.364 L1773.88 685.364 L1774.43 685.364 L1774.99 685.364 L1775.55 685.364 L1776.11 685.364 L1776.67 685.364 L1777.23 685.364 L1777.79 685.364 L1778.35 685.364 L1778.91 685.364 L1779.47 685.364 L1780.03 685.364 L1780.59 685.364 L1781.15 685.364 L1781.71 685.364 L1782.26 685.364 L1782.82 685.364 L1783.38 685.364 L1783.94 685.364 L1784.5 685.364 L1785.06 685.364 L1785.62 685.364 L1786.18 685.364 L1786.74 685.364 L1787.3 685.364 L1787.86 685.364 L1788.42 685.364 L1788.98 685.364 L1789.53 685.364 L1790.09 685.364 L1790.65 685.364 L1791.21 685.364 L1791.77 685.364 L1792.33 685.364 L1792.89 685.364 L1793.45 685.364 L1794.01 685.364 L1794.57 685.364 L1795.13 685.364 L1795.69 685.364 L1796.25 685.364 L1796.8 685.364 L1797.36 685.364 L1797.92 685.364 L1798.48 685.364 L1799.04 685.364 L1799.6 685.364 L1800.16 685.364 L1800.72 685.364 L1801.28 685.364 L1801.84 685.364 L1802.4 685.364 L1802.96 685.364 L1803.52 685.364 L1804.08 685.364 L1804.63 685.364 L1805.19 685.364 L1805.75 685.364 L1806.31 685.364 L1806.87 685.364 L1807.43 685.364 L1807.99 685.364 L1808.55 685.364 L1809.11 685.364 L1809.67 685.364 L1810.23 685.364 L1810.79 685.364 L1811.35 685.364 L1811.9 685.364 L1812.46 685.364 L1813.02 685.364 L1813.58 685.364 L1814.14 685.364 L1814.7 685.364 L1815.26 685.364 L1815.82 685.364 L1816.38 685.364 L1816.94 685.364 L1817.5 685.364 L1818.06 685.364 L1818.62 685.364 L1819.18 685.364 L1819.73 685.364 L1820.29 685.364 L1820.85 685.364 L1821.41 685.364 L1821.97 685.364 L1822.53 685.364 L1823.09 685.364 L1823.65 685.364 L1824.21 685.364 L1824.77 685.364 L1825.33 685.364 L1825.89 685.364 L1826.45 685.364 L1827 685.364 L1827.56 685.364 L1828.12 685.364 L1828.68 685.364 L1829.24 685.364 L1829.8 685.364 L1830.36 685.364 L1830.92 685.364 L1831.48 685.364 L1832.04 685.364 L1832.6 685.364 L1833.16 685.364 L1833.72 685.364 L1834.27 685.364 L1834.83 685.364 L1835.39 685.364 L1835.95 685.364 L1836.51 685.364 L1837.07 685.364 L1837.63 685.364 L1838.19 685.364 L1838.19 682.77 L1837.63 682.77 L1837.07 682.77 L1836.51 682.77 L1835.95 682.77 L1835.39 682.77 L1834.83 682.77 L1834.27 682.77 L1833.72 682.77 L1833.16 682.77 L1832.6 682.77 L1832.04 682.77 L1831.48 682.77 L1830.92 682.77 L1830.36 682.77 L1829.8 682.77 L1829.24 682.77 L1828.68 682.77 L1828.12 682.77 L1827.56 682.77 L1827 682.77 L1826.45 682.77 L1825.89 682.77 L1825.33 682.77 L1824.77 682.77 L1824.21 682.77 L1823.65 682.77 L1823.09 682.77 L1822.53 682.77 L1821.97 682.77 L1821.41 682.77 L1820.85 682.77 L1820.29 682.77 L1819.73 682.77 L1819.18 682.77 L1818.62 682.77 L1818.06 682.77 L1817.5 682.77 L1816.94 682.77 L1816.38 682.77 L1815.82 682.77 L1815.26 682.77 L1814.7 682.77 L1814.14 682.77 L1813.58 682.77 L1813.02 682.77 L1812.46 682.77 L1811.9 682.77 L1811.35 682.77 L1810.79 682.77 L1810.23 682.77 L1809.67 682.77 L1809.11 682.77 L1808.55 682.77 L1807.99 682.77 L1807.43 682.77 L1806.87 682.77 L1806.31 682.77 L1805.75 682.77 L1805.19 682.77 L1804.63 682.77 L1804.08 682.77 L1803.52 682.77 L1802.96 682.77 L1802.4 682.77 L1801.84 682.77 L1801.28 682.77 L1800.72 682.77 L1800.16 682.77 L1799.6 682.77 L1799.04 682.77 L1798.48 682.77 L1797.92 682.77 L1797.36 682.77 L1796.8 682.77 L1796.25 682.77 L1795.69 682.77 L1795.13 682.77 L1794.57 682.77 L1794.01 682.77 L1793.45 682.77 L1792.89 682.77 L1792.33 682.77 L1791.77 682.77 L1791.21 682.77 L1790.65 682.77 L1790.09 682.77 L1789.53 682.77 L1788.98 682.77 L1788.42 682.77 L1787.86 682.77 L1787.3 682.77 L1786.74 682.77 L1786.18 682.77 L1785.62 682.77 L1785.06 682.77 L1784.5 682.77 L1783.94 682.77 L1783.38 682.77 L1782.82 682.77 L1782.26 682.77 L1781.71 682.77 L1781.15 682.77 L1780.59 682.77 L1780.03 682.77 L1779.47 682.77 L1778.91 682.77 L1778.35 682.77 L1777.79 682.77 L1777.23 682.77 L1776.67 682.77 L1776.11 682.77 L1775.55 682.77 L1774.99 682.77 L1774.43 682.77 L1773.88 682.77 L1773.32 682.77 L1772.76 682.77 L1772.2 682.77 L1771.64 682.77 L1771.08 682.77 L1770.52 682.77 L1769.96 682.77 L1769.4 682.77 L1768.84 682.77 L1768.28 682.77 L1767.72 682.77 L1767.16 682.77 L1766.61 682.77 L1766.05 682.77 L1765.49 682.77 L1764.93 682.77 L1764.37 682.77 L1763.81 682.77 L1763.25 682.77 L1762.69 682.77 L1762.13 682.77 L1761.57 682.77 L1761.01 682.77 L1760.45 682.77 L1759.89 682.77 L1759.34 682.77 L1758.78 682.77 L1758.22 682.77 L1757.66 682.77 L1757.1 682.77 L1756.54 682.77 L1755.98 682.77 L1755.42 682.77 L1754.86 682.77 L1754.3 682.77 L1753.74 682.77 L1753.18 682.77 L1752.62 682.77 L1752.06 682.77 L1751.51 682.77 L1750.95 682.77 L1750.39 682.77 L1749.83 682.77 L1749.27 682.77 L1748.71 682.77 L1748.15 682.77 L1747.59 682.77 L1747.03 682.77 L1746.47 682.77 L1745.91 682.77 L1745.35 682.77 L1744.79 682.77 L1744.24 682.77 L1743.68 682.77 L1743.12 682.77 L1742.56 682.77 L1742 682.77 L1741.44 682.77 L1740.88 682.77 L1740.32 682.77 L1739.76 682.77 L1739.2 682.77 L1738.64 682.77 L1738.08 682.77 L1737.52 682.77 L1736.97 682.77 L1736.41 682.77 L1735.85 682.77 L1735.29 682.77 L1734.73 682.77 L1734.17 682.77 L1733.61 682.77 L1733.05 682.77 L1732.49 682.77 L1731.93 682.77 L1731.37 682.77 L1730.81 682.77 L1730.25 682.77 L1729.69 682.77 L1729.14 682.77 L1728.58 682.77 L1728.02 682.77 L1727.46 682.77 L1726.9 682.77 L1726.34 682.77 L1725.78 682.77 L1725.22 682.77 L1724.66 682.77 L1724.1 682.77 L1723.54 682.77 L1722.98 682.77 L1722.42 682.77 L1721.87 682.77 L1721.31 682.77 L1720.75 682.77 L1720.19 682.77 L1719.63 682.77 L1719.07 682.77 L1718.51 682.77 L1717.95 682.77 L1717.39 682.77 L1716.83 682.77 L1716.27 682.77 L1715.71 682.77 L1715.15 682.77 L1714.6 682.77 L1714.04 682.77 L1713.48 682.77 L1712.92 682.77 L1712.36 682.77 L1711.8 682.77 L1711.24 682.77 L1710.68 682.77 L1710.12 682.77 L1709.56 682.77 L1709 682.77 L1708.44 682.77 L1707.88 682.77 L1707.32 682.77 L1706.77 682.77 L1706.21 682.77 L1705.65 682.77 L1705.09 682.77 L1704.53 682.77 L1703.97 682.77 L1703.41 682.77 L1702.85 682.77 L1702.29 682.77 L1701.73 682.77 L1701.17 682.77 L1700.61 682.77 L1700.05 682.77 L1699.5 682.77 L1698.94 682.77 L1698.38 682.77 L1697.82 682.77 L1697.26 682.77 L1696.7 682.77 L1696.14 682.77 L1695.58 682.77 L1695.02 682.77 L1694.46 682.77 L1693.9 682.77 L1693.34 682.77 L1692.78 682.77 L1692.23 682.77 L1691.67 682.77 L1691.11 682.77 L1690.55 682.77 L1689.99 682.77 L1689.43 682.77 L1688.87 682.77 L1688.31 682.77 L1687.75 682.77 L1687.19 682.77 L1686.63 682.77 L1686.07 682.77 L1685.51 682.77 L1684.95 682.77 L1684.4 682.77 L1683.84 682.77 L1683.28 682.77 L1682.72 682.77 L1682.16 682.77 L1681.6 682.77 L1681.04 682.77 L1680.48 682.77 L1679.92 682.77 L1679.36 682.77 L1678.8 682.77 L1678.24 682.77 L1677.68 682.77 L1677.13 682.77 L1676.57 682.77 L1676.01 682.77 L1675.45 682.77 L1674.89 682.77 L1674.33 682.77 L1673.77 682.77 L1673.21 682.77 L1672.65 682.77 L1672.09 682.77 L1671.53 682.77 L1670.97 682.77 L1670.41 682.77 L1669.85 682.77 L1669.3 682.77 L1668.74 682.77 L1668.18 682.77 L1667.62 682.77 L1667.06 682.77 L1666.5 682.77 L1665.94 682.77 L1665.38 682.77 L1664.82 682.77 L1664.26 682.77 L1663.7 682.77 L1663.14 682.77 L1662.58 682.77 L1662.03 682.77 L1661.47 682.77 L1660.91 682.77 L1660.35 682.77 L1659.79 682.77 L1659.23 682.77 L1658.67 682.77 L1658.11 682.77 L1657.55 682.77 L1656.99 682.77 L1656.43 682.77 L1655.87 682.77 L1655.31 682.77 L1654.76 682.77 L1654.2 682.77 L1653.64 682.77 L1653.08 682.77 L1652.52 682.77 L1651.96 682.77 L1651.4 682.77 L1650.84 682.77 L1650.28 682.77 L1649.72 682.77 L1649.16 682.77 L1648.6 682.77 L1648.04 682.77 L1647.48 682.77 L1646.93 682.77 L1646.37 682.77 L1645.81 682.77 L1645.25 682.77 L1644.69 682.77 L1644.13 682.77 L1643.57 682.77 L1643.01 682.77 L1642.45 682.77 L1641.89 682.77 L1641.33 682.77 L1640.77 682.77 L1640.21 682.77 L1639.66 682.77 L1639.1 682.77 L1638.54 682.77 L1637.98 682.77 L1637.42 682.77 L1636.86 682.77 L1636.3 682.77 L1635.74 682.77 L1635.18 682.77 L1634.62 682.77 L1634.06 682.77 L1633.5 682.77 L1632.94 682.77 L1632.39 682.77 L1631.83 682.77 L1631.27 682.77 L1630.71 682.77 L1630.15 682.77 L1629.59 682.77 L1629.03 682.77 L1628.47 682.77 L1627.91 682.77 L1627.35 682.77 L1626.79 682.77 L1626.23 682.77 L1625.67 682.77 L1625.11 682.77 L1624.56 682.77 L1624 682.77 L1623.44 682.77 L1622.88 682.77 L1622.32 682.77 L1621.76 682.77 L1621.2 682.77 L1620.64 682.77 L1620.08 682.77 L1619.52 682.77 L1618.96 682.77 L1618.4 682.77 L1617.84 682.77 L1617.29 682.77 L1616.73 682.77 L1616.17 682.77 L1615.61 682.77 L1615.05 682.77 L1614.49 682.77 L1613.93 682.77 L1613.37 682.77 L1612.81 682.77 L1612.25 682.77 L1611.69 682.77 L1611.13 682.77 L1610.57 682.77 L1610.02 682.77 L1609.46 682.77 L1608.9 682.77 L1608.34 682.77 L1607.78 682.77 L1607.22 682.77 L1606.66 682.77 L1606.1 682.77 L1605.54 682.77 L1604.98 682.77 L1604.42 682.77 L1603.86 682.77 L1603.3 682.77 L1602.74 682.77 L1602.19 682.77 L1601.63 682.77 L1601.07 682.77 L1600.51 682.77 L1599.95 682.77 L1599.39 682.77 L1598.83 682.77 L1598.27 682.77 L1597.71 682.77 L1597.15 682.77 L1596.59 682.77 L1596.03 682.77 L1595.47 682.77 L1594.92 682.77 L1594.36 682.77 L1593.8 682.77 L1593.24 682.77 L1592.68 682.77 L1592.12 682.77 L1591.56 682.77 L1591 682.77 L1590.44 682.77 L1589.88 682.77 L1589.32 682.77 L1588.76 682.77 L1588.2 682.77 L1587.65 682.77 L1587.09 682.77 L1586.53 682.77 L1585.97 682.77 L1585.41 682.77 L1584.85 682.77 L1584.29 682.77 L1583.73 682.77 L1583.17 682.77 L1582.61 682.77 L1582.05 682.77 L1581.49 682.77 L1580.93 682.77 L1580.37 682.77 L1579.82 682.77 L1579.26 682.77 L1578.7 682.77 L1578.14 682.77 L1577.58 682.77 L1577.02 682.77 L1576.46 682.77 L1575.9 682.77 L1575.34 682.77 L1574.78 682.77 L1574.22 682.77 L1573.66 682.77 L1573.1 682.77 L1572.55 682.77 L1571.99 682.77 L1571.43 682.77 L1570.87 682.77 L1570.31 682.77 L1569.75 682.77 L1569.19 682.77 L1568.63 682.77 L1568.07 682.77 L1567.51 682.77 L1566.95 682.77 L1566.39 682.77 L1565.83 682.77 L1565.28 682.77 L1564.72 682.77 L1564.16 682.77 L1563.6 682.77 L1563.04 682.77 L1562.48 682.77 L1561.92 682.77 L1561.36 682.77 L1560.8 682.77 L1560.24 682.77 L1559.68 682.77 L1559.12 682.77 L1558.56 682.77 L1558 682.77 L1557.45 682.77 L1556.89 682.77 L1556.33 682.77 L1555.77 682.77 L1555.21 682.77 L1554.65 682.77 L1554.09 682.77 L1553.53 682.77 L1552.97 682.77 L1552.41 682.77 L1551.85 682.77 L1551.29 682.77 L1550.73 682.77 L1550.18 682.77 L1549.62 682.77 L1549.06 682.77 L1548.5 682.77 L1547.94 682.77 L1547.38 682.77 L1546.82 682.77 L1546.26 682.77 L1545.7 682.77 L1545.14 682.77 L1544.58 682.77 L1544.02 682.77 L1543.46 682.77 L1542.9 682.77 L1542.35 682.77 L1541.79 682.77 L1541.23 682.77 L1540.67 682.77 L1540.11 682.77 L1539.55 682.77 L1538.99 682.77 L1538.43 682.77 L1537.87 682.77 L1537.31 682.77 L1536.75 682.77 L1536.19 682.77 L1535.63 682.77 L1535.08 682.77 L1534.52 682.77 L1533.96 682.77 L1533.4 682.77 L1532.84 682.77 L1532.28 682.77 L1531.72 682.77 L1531.16 682.77 L1530.6 682.77 L1530.04 682.77 L1529.48 682.77 L1528.92 682.77 L1528.36 682.77 L1527.81 682.77 L1527.25 682.77 L1526.69 682.77 L1526.13 682.77 L1525.57 682.77 L1525.01 682.77 L1524.45 682.77 L1523.89 682.77 L1523.33 682.77 L1522.77 682.77 L1522.21 682.77 L1521.65 682.77 L1521.09 682.77 L1520.53 682.77 L1519.98 682.77 L1519.42 682.77 L1518.86 682.77 L1518.3 682.77 L1517.74 682.77 L1517.18 682.77 L1516.62 682.77 L1516.06 682.77 L1515.5 682.77 L1514.94 682.77 L1514.38 682.77 L1513.82 682.77 L1513.26 682.77 L1512.71 682.77 L1512.15 682.77 L1511.59 682.77 L1511.03 682.77 L1510.47 682.77 L1509.91 682.77 L1509.35 682.77 L1508.79 682.77 L1508.23 682.77 L1507.67 682.77 L1507.11 682.77 L1506.55 682.77 L1505.99 682.77 L1505.44 682.77 L1504.88 682.77 L1504.32 682.77 L1503.76 682.77 L1503.2 682.77 L1502.64 682.77 L1502.08 682.77 L1501.52 682.77 L1500.96 682.77 L1500.4 682.77 L1499.84 682.77 L1499.28 682.77 L1498.72 682.77 L1498.16 682.77 L1497.61 682.77 L1497.05 682.77 L1496.49 682.77 L1495.93 682.77 L1495.37 682.77 L1494.81 682.77 L1494.25 682.77 L1493.69 682.77 L1493.13 682.77 L1492.57 682.77 L1492.01 682.77 L1491.45 682.77 L1490.89 682.77 L1490.34 682.77 L1489.78 682.77 L1489.22 682.77 L1488.66 682.77 L1488.1 682.77 L1487.54 682.77 L1486.98 682.77 L1486.42 682.77 L1485.86 682.77 L1485.3 682.77 L1484.74 682.77 L1484.18 682.77 L1483.62 682.77 L1483.07 682.77 L1482.51 682.77 L1481.95 682.77 L1481.39 682.77 L1480.83 682.77 L1480.27 682.77 L1479.71 682.77 L1479.15 682.77 L1478.59 682.77 L1478.03 682.77 L1477.47 682.77 L1476.91 682.77 L1476.35 682.77 L1475.79 682.77 L1475.24 682.77 L1474.68 682.77 L1474.12 682.77 L1473.56 682.77 L1473 682.77 L1472.44 682.77 L1471.88 682.77 L1471.32 682.77 L1470.76 682.77 L1470.2 682.77 L1469.64 682.77 L1469.08 682.77 L1468.52 682.77 L1467.97 682.77 L1467.41 682.77 L1466.85 682.77 L1466.29 682.77 L1465.73 682.77 L1465.17 682.77 L1464.61 682.77 L1464.05 682.77 L1463.49 682.77 L1462.93 682.77 L1462.37 682.77 L1461.81 682.77 L1461.25 682.77 L1460.7 682.77 L1460.14 682.77 L1459.58 682.77 L1459.02 682.77 L1458.46 682.77 L1457.9 682.77 L1457.34 682.77 L1456.78 682.77 L1456.22 682.77 L1455.66 682.77 L1455.1 682.77 L1454.54 682.77 L1453.98 682.77 L1453.42 682.77 L1452.87 682.77 L1452.31 682.77 L1451.75 682.77 L1451.19 682.77 L1450.63 682.77 L1450.07 682.77 L1449.51 682.77 L1448.95 682.77 L1448.39 682.77 L1447.83 682.77 L1447.27 682.77 L1446.71 682.77 L1446.15 682.77 L1445.6 682.77 L1445.04 682.77 L1444.48 682.77 L1443.92 682.77 L1443.36 682.77 L1442.8 682.77 L1442.24 682.77 L1441.68 682.77 L1441.12 682.77 L1440.56 682.77 L1440 682.77 L1439.44 682.77 L1438.88 682.77 L1438.33 682.77 L1437.77 682.77 L1437.21 682.77 L1436.65 682.77 L1436.09 682.77 L1435.53 682.77 L1434.97 682.77 L1434.41 682.77 L1433.85 682.77 L1433.29 682.77 L1432.73 682.77 L1432.17 682.77 L1431.61 682.77 L1431.05 682.77 L1430.5 682.77 L1429.94 682.77 L1429.38 682.77 L1428.82 682.77 L1428.26 682.77 L1427.7 682.77 L1427.14 682.77 L1426.58 682.77 L1426.02 682.77 L1425.46 682.77 L1424.9 682.77 L1424.34 682.77 L1423.78 682.77 L1423.23 682.77 L1422.67 682.77 L1422.11 682.77 L1421.55 682.77 L1420.99 682.77 L1420.43 682.77 L1419.87 682.77 L1419.31 682.77 L1418.75 682.77 L1418.19 682.77 L1417.63 682.77 L1417.07 682.77 L1416.51 682.77 L1415.95 682.77 L1415.4 682.77 L1414.84 682.77 L1414.28 682.77 L1413.72 682.77 L1413.16 682.77 L1412.6 682.77 L1412.04 682.77 L1411.48 682.77 L1410.92 682.77 L1410.36 682.77 L1409.8 682.77 L1409.24 682.77 L1408.68 682.77 L1408.13 682.77 L1407.57 682.77 L1407.01 682.77 L1406.45 682.77 L1405.89 682.77 L1405.33 682.77 L1404.77 682.77 L1404.21 682.77 L1403.65 682.77 L1403.09 682.77 L1402.53 682.77 L1401.97 682.77 L1401.41 682.77 L1400.86 682.77 L1400.3 682.77 L1399.74 682.77 L1399.18 682.77 L1398.62 682.77 L1398.06 682.77 L1397.5 682.77 L1396.94 682.77 L1396.38 682.77 L1395.82 682.77 L1395.26 682.77 L1394.7 682.77 L1394.14 682.77 L1393.58 682.77 L1393.03 682.77 L1392.47 682.77 L1391.91 682.77 L1391.35 682.77 L1390.79 682.77 L1390.23 682.77 L1389.67 682.77 L1389.11 682.77 L1388.55 682.77 L1387.99 682.77 L1387.43 682.77 L1386.87 682.77 L1386.31 682.77 L1385.76 682.77 L1385.2 682.77 L1384.64 682.77 L1384.08 682.77 L1383.52 682.77 L1382.96 682.77 L1382.4 682.77 L1381.84 682.77 L1381.28 682.77 L1380.72 682.77 L1380.16 682.77 L1379.6 682.77 L1379.04 682.77 L1378.49 682.77 L1377.93 682.77 L1377.37 682.77 L1376.81 682.77 L1376.25 682.77 L1375.69 682.77 L1375.13 682.77 L1374.57 682.77 L1374.01 682.77 L1373.45 682.77 L1372.89 682.77 L1372.33 682.77 L1371.77 682.77 L1371.21 682.77 L1370.66 682.77 L1370.1 682.77 L1369.54 682.77 L1368.98 682.77 L1368.42 682.77 L1367.86 682.77 L1367.3 682.77 L1366.74 682.77 L1366.18 682.77 L1365.62 682.77 L1365.06 682.77 L1364.5 682.77 L1363.94 682.77 L1363.39 682.77 L1362.83 682.77 L1362.27 682.77 L1361.71 682.77 L1361.15 682.77 L1360.59 682.77 L1360.03 682.77 L1359.47 682.77 L1358.91 682.77 L1358.35 682.77 L1357.79 682.77 L1357.23 682.77 L1356.67 682.77 L1356.12 682.77 L1355.56 682.77 L1355 682.77 L1354.44 682.77 L1353.88 682.77 L1353.32 682.77 L1352.76 682.77 L1352.2 682.77 L1351.64 682.77 L1351.08 682.77 L1350.52 682.77 L1349.96 682.77 L1349.4 682.77 L1348.84 682.77 L1348.29 682.77 L1347.73 682.77 L1347.17 682.77 L1346.61 682.77 L1346.05 682.77 L1345.49 682.77 L1344.93 682.77 L1344.37 682.77 L1343.81 682.77 L1343.25 682.77 L1342.69 682.77 L1342.13 682.77 L1341.57 682.77 L1341.02 682.77 L1340.46 682.77 L1339.9 682.77 L1339.34 682.77 L1338.78 682.77 L1338.22 682.77 L1337.66 682.77 L1337.1 682.77 L1336.54 682.77 L1335.98 682.77 L1335.42 682.77 L1334.86 682.77 L1334.3 682.77 L1333.75 682.77 L1333.19 682.77 L1332.63 682.77 L1332.07 682.77 L1331.51 682.77 L1330.95 682.77 L1330.39 682.77 L1329.83 682.77 L1329.27 682.77 L1328.71 682.77 L1328.15 682.77 L1327.59 682.77 L1327.03 682.77 L1326.47 682.77 L1325.92 682.77 L1325.36 682.77 L1324.8 682.77 L1324.24 682.77 L1323.68 682.77 L1323.12 682.77 L1322.56 682.77 L1322 682.77 L1321.44 682.77 L1320.88 682.77 L1320.32 682.77 L1319.76 682.77 L1319.2 682.77 L1318.65 682.77 L1318.09 682.77 L1317.53 682.77 L1316.97 682.77 L1316.41 682.77 L1315.85 682.77 L1315.29 682.77 L1314.73 682.77 L1314.17 682.77 L1313.61 682.77 L1313.05 682.77 L1312.49 682.77 L1311.93 682.77 L1311.38 682.77 L1310.82 682.77 L1310.26 682.77 L1309.7 682.77 L1309.14 682.77 L1308.58 682.77 L1308.02 682.77 L1307.46 682.77 L1306.9 682.77 L1306.34 682.77 L1305.78 682.77 L1305.22 682.77 L1304.66 682.77 L1304.1 682.77 L1303.55 682.77 L1302.99 682.77 L1302.43 682.77 L1301.87 682.77 L1301.31 682.77 L1300.75 682.77 L1300.19 682.77 L1299.63 682.77 L1299.07 682.77 L1298.51 682.77 L1297.95 682.77 L1297.39 682.77 L1296.83 682.77 L1296.28 682.77 L1295.72 682.77 L1295.16 682.77 L1294.6 682.77 L1294.04 682.77 L1293.48 682.77 L1292.92 682.77 L1292.36 682.77 L1291.8 682.77 L1291.24 682.77 L1290.68 682.77 L1290.12 682.77 L1289.56 682.77 L1289 682.77 L1288.45 682.77 L1287.89 682.77 L1287.33 682.77 L1286.77 682.77 L1286.21 682.77 L1285.65 682.77 L1285.09 682.77 L1284.53 682.77 L1283.97 682.77 L1283.41 682.77 L1282.85 682.77 L1282.29 682.77 L1281.73 682.77 L1281.18 682.77 L1280.62 682.77 L1280.06 682.77 L1279.5 682.77 L1278.94 682.77 L1278.38 682.77 L1277.82 682.77 L1277.26 682.77 L1276.7 682.77 L1276.14 682.77 L1275.58 682.77 L1275.02 682.77 L1274.46 682.77 L1273.91 682.77 L1273.35 682.77 L1272.79 682.77 L1272.23 682.77 L1271.67 682.77 L1271.11 682.77 L1270.55 682.77 L1269.99 682.77 L1269.43 682.77 L1268.87 682.77 L1268.31 682.77 L1267.75 682.77 L1267.19 682.77 L1266.63 682.77 L1266.08 682.77 L1265.52 682.77 L1264.96 682.77 L1264.4 682.77 L1263.84 682.77 L1263.28 682.77 L1262.72 682.77 L1262.16 682.77 L1261.6 682.77 L1261.04 682.77 L1260.48 682.77 L1259.92 682.77 L1259.36 682.77 L1258.81 682.77 L1258.25 682.77 L1257.69 682.77 L1257.13 682.77 L1256.57 682.77 L1256.01 682.77 L1255.45 682.77 L1254.89 682.77 L1254.33 682.77 L1253.77 682.77 L1253.21 682.77 L1252.65 682.77 L1252.09 682.77 L1251.54 682.77 L1250.98 682.77 L1250.42 682.77 L1249.86 682.77 L1249.3 682.77 L1248.74 682.77 L1248.18 682.77 L1247.62 682.77 L1247.06 682.77 L1246.5 682.77 L1245.94 682.77 L1245.38 682.77 L1244.82 682.77 L1244.26 682.77 L1243.71 682.77 L1243.15 682.77 L1242.59 682.77 L1242.03 682.77 L1241.47 682.77 L1240.91 682.77 L1240.35 682.77 L1239.79 682.77 L1239.23 682.77 L1238.67 682.77 L1238.11 682.77 L1237.55 682.77 L1236.99 682.77 L1236.44 682.77 L1235.88 682.77 L1235.32 682.77 L1234.76 682.77 L1234.2 682.77 L1233.64 682.77 L1233.08 682.77 L1232.52 682.77 L1231.96 682.77 L1231.4 682.77 L1230.84 682.77 L1230.28 682.77 L1229.72 682.77 L1229.17 682.77 L1228.61 682.77 L1228.05 682.77 L1227.49 682.77 L1226.93 682.77 L1226.37 682.77 L1225.81 682.77 L1225.25 682.77 L1224.69 682.77 L1224.13 682.77 L1223.57 682.77 L1223.01 682.77 L1222.45 682.77 L1221.89 682.77 L1221.34 682.77 L1220.78 682.77 L1220.22 682.77 L1219.66 682.77 L1219.1 682.77 L1218.54 682.77 L1217.98 682.77 L1217.42 682.77 L1216.86 682.77 L1216.3 682.77 L1215.74 682.77 L1215.18 682.77 L1214.62 682.77 L1214.07 682.77 L1213.51 682.77 L1212.95 682.77 L1212.39 682.77 L1211.83 682.77 L1211.27 682.77 L1210.71 682.77 L1210.15 682.77 L1209.59 682.77 L1209.03 682.77 L1208.47 682.77 L1207.91 682.77 L1207.35 682.77 L1206.8 682.77 L1206.24 682.77 L1205.68 682.77 L1205.12 682.77 L1204.56 682.77 L1204 682.77 L1203.44 682.77 L1202.88 682.77 L1202.32 682.77 L1201.76 682.77 L1201.2 682.77 L1200.64 682.77 L1200.08 682.77 L1199.52 682.77 L1198.97 682.77 L1198.41 682.77 L1197.85 682.77 L1197.29 682.77 L1196.73 682.77 L1196.17 682.77 L1195.61 682.77 L1195.05 682.77 L1194.49 682.77 L1193.93 682.77 L1193.37 682.77 L1192.81 682.77 L1192.25 682.77 L1191.7 682.77 L1191.14 682.77 L1190.58 682.77 L1190.02 682.77 L1189.46 682.77 L1188.9 682.77 L1188.34 682.77 L1187.78 682.77 L1187.22 682.77 L1186.66 682.77 L1186.1 682.77 L1185.54 682.77 L1184.98 682.77 L1184.43 682.77 L1183.87 682.77 L1183.31 682.77 L1182.75 682.77 L1182.19 682.77 L1181.63 682.77 L1181.07 682.77 L1180.51 682.77 L1179.95 682.77 L1179.39 682.77 L1178.83 682.77 L1178.27 682.77 L1177.71 682.77 L1177.15 682.77 L1176.6 682.77 L1176.04 682.77 L1175.48 682.77 L1174.92 682.77 L1174.36 682.77 L1173.8 682.77 L1173.24 682.77 L1172.68 682.77 L1172.12 682.77 L1171.56 682.77 L1171 682.77 L1170.44 682.77 L1169.88 682.77 L1169.33 682.77 L1168.77 682.77 L1168.21 682.77 L1167.65 682.77 L1167.09 682.77 L1166.53 682.77 L1165.97 682.77 L1165.41 682.77 L1164.85 682.77 L1164.29 682.77 L1163.73 682.77 L1163.17 682.77 L1162.61 682.77 L1162.05 682.77 L1161.5 682.77 L1160.94 682.77 L1160.38 682.77 L1159.82 682.77 L1159.26 682.77 L1158.7 682.77 L1158.14 682.77 L1157.58 682.77 L1157.02 682.77 L1156.46 682.77 L1155.9 682.77 L1155.34 682.77 L1154.78 682.77 L1154.23 682.77 L1153.67 682.77 L1153.11 682.77 L1152.55 682.77 L1151.99 682.77 L1151.43 682.77 L1150.87 682.77 L1150.31 682.77 L1149.75 682.77 L1149.19 682.77 L1148.63 682.77 L1148.07 682.77 L1147.51 682.77 L1146.96 682.77 L1146.4 682.77 L1145.84 682.77 L1145.28 682.77 L1144.72 682.77 L1144.16 682.77 L1143.6 682.77 L1143.04 682.77 L1142.48 682.77 L1141.92 682.77 L1141.36 682.77 L1140.8 682.77 L1140.24 682.77 L1139.68 682.77 L1139.13 682.77 L1138.57 682.77 L1138.01 682.77 L1137.45 682.77 L1136.89 682.77 L1136.33 682.77 L1135.77 682.77 L1135.21 682.77 L1134.65 682.77 L1134.09 682.77 L1133.53 682.77 L1132.97 682.77 L1132.41 682.77 L1131.86 682.77 L1131.3 682.77 L1130.74 682.77 L1130.18 682.77 L1129.62 682.77 L1129.06 682.77 L1128.5 682.77 L1127.94 682.77 L1127.38 682.77 L1126.82 682.77 L1126.26 682.77 L1125.7 682.77 L1125.14 682.77 L1124.59 682.77 L1124.03 682.77 L1123.47 682.77 L1122.91 682.77 L1122.35 682.77 L1121.79 682.77 L1121.23 682.77 L1120.67 682.77 L1120.11 682.77 L1119.55 682.77 L1118.99 682.77 L1118.43 682.77 L1117.87 682.77 L1117.31 682.77 L1116.76 682.77 L1116.2 682.77 L1115.64 682.77 L1115.08 682.77 L1114.52 682.77 L1113.96 682.77 L1113.4 682.77 L1112.84 682.77 L1112.28 682.77 L1111.72 682.77 L1111.16 682.77 L1110.6 682.77 L1110.04 682.77 L1109.49 682.77 L1108.93 682.77 L1108.37 682.77 L1107.81 682.77 L1107.25 682.77 L1106.69 682.77 L1106.13 682.77 L1105.57 682.77 L1105.01 682.77 L1104.45 682.77 L1103.89 682.77 L1103.33 682.77 L1102.77 682.77 L1102.22 682.77 L1101.66 682.77 L1101.1 682.77 L1100.54 682.77 L1099.98 682.77 L1099.42 682.77 L1098.86 682.77 L1098.3 682.77 L1097.74 682.77 L1097.18 682.77 L1096.62 682.77 L1096.06 682.77 L1095.5 682.77 L1094.94 682.77 L1094.39 682.77 L1093.83 682.77 L1093.27 682.77 L1092.71 682.77 L1092.15 682.77 L1091.59 682.77 L1091.03 682.77 L1090.47 682.77 L1089.91 682.77 L1089.35 682.77 L1088.79 682.77 L1088.23 682.77 L1087.67 682.77 L1087.12 682.77 L1086.56 682.77 L1086 682.77 L1085.44 682.77 L1084.88 682.77 L1084.32 682.77 L1083.76 682.77 L1083.2 682.77 L1082.64 682.77 L1082.08 682.77 L1081.52 682.77 L1080.96 682.77 L1080.4 682.77 L1079.85 682.77 L1079.29 682.77 L1078.73 682.77 L1078.17 682.77 L1077.61 682.77 L1077.05 682.77 L1076.49 682.77 L1075.93 682.77 L1075.37 682.77 L1074.81 682.77 L1074.25 682.77 L1073.69 682.77 L1073.13 682.77 L1072.57 682.77 L1072.02 682.77 L1071.46 682.77 L1070.9 682.77 L1070.34 682.77 L1069.78 682.77 L1069.22 682.77 L1068.66 682.77 L1068.1 682.77 L1067.54 682.77 L1066.98 682.77 L1066.42 682.77 L1065.86 682.77 L1065.3 682.77 L1064.75 682.77 L1064.19 682.77 L1063.63 682.77 L1063.07 682.77 L1062.51 682.77 L1061.95 682.77 L1061.39 682.77 L1060.83 682.77 L1060.27 682.77 L1059.71 682.77 L1059.15 682.77 L1058.59 682.77 L1058.03 682.77 L1057.48 682.77 L1056.92 682.77 L1056.36 682.77 L1055.8 682.77 L1055.24 682.77 L1054.68 682.77 L1054.12 682.77 L1053.56 682.77 L1053 682.77 L1052.44 682.77 L1051.88 682.77 L1051.32 682.77 L1050.76 682.77 L1050.2 682.77 L1049.65 682.77 L1049.09 682.77 L1048.53 682.77 L1047.97 682.77 L1047.41 682.77 L1046.85 682.77 L1046.29 682.77 L1045.73 682.77 L1045.17 682.77 L1044.61 682.77 L1044.05 682.77 L1043.49 682.77 L1042.93 682.77 L1042.38 682.77 L1041.82 682.77 L1041.26 682.77 L1040.7 682.77 L1040.14 682.77 L1039.58 682.77 L1039.02 682.77 L1038.46 682.77 L1037.9 682.77 L1037.34 682.77 L1036.78 682.77 L1036.22 682.77 L1035.66 682.77 L1035.1 682.77 L1034.55 682.77 L1033.99 682.77 L1033.43 682.77 L1032.87 682.77 L1032.31 682.77 L1031.75 682.77 L1031.19 682.77 L1030.63 682.77 L1030.07 682.77 L1029.51 682.77 L1028.95 682.77 L1028.39 682.77 L1027.83 682.77 L1027.28 682.77 L1026.72 682.77 L1026.16 682.77 L1025.6 682.77 L1025.04 682.77 L1024.48 682.77 L1023.92 682.77 L1023.36 682.77 L1022.8 682.77 L1022.24 682.77 L1021.68 682.77 L1021.12 682.77 L1020.56 682.77 L1020.01 682.77 L1019.45 682.77 L1018.89 682.77 L1018.33 682.77 L1017.77 682.77 L1017.21 682.77 L1016.65 682.77 L1016.09 682.77 L1015.53 682.77 L1014.97 682.77 L1014.41 682.77 L1013.85 682.77 L1013.29 682.77 L1012.73 682.77 L1012.18 682.77 L1011.62 682.77 L1011.06 682.77 L1010.5 682.77 L1009.94 682.77 L1009.38 682.77 L1008.82 682.77 L1008.26 682.77 L1007.7 682.77 L1007.14 682.77 L1006.58 682.77 L1006.02 682.77 L1005.46 682.77 L1004.91 682.77 L1004.35 682.77 L1003.79 682.77 L1003.23 682.77 L1002.67 682.77 L1002.11 682.77 L1001.55 682.77 L1000.99 682.77 L1000.43 682.77 L999.872 682.77 L999.313 682.77 L998.754 682.77 L998.194 682.77 L997.635 682.77 L997.076 682.77 L996.517 682.77 L995.957 682.77 L995.398 682.77 L994.839 682.77 L994.28 682.77 L993.72 682.77 L993.161 682.77 L992.602 682.77 L992.043 682.77 L991.483 682.77 L990.924 682.77 L990.365 682.77 L989.806 682.77 L989.246 682.77 L988.687 682.77 L988.128 682.77 L987.569 682.77 L987.009 682.77 L986.45 682.77 L985.891 682.77 L985.332 682.77 L984.772 682.77 L984.213 682.77 L983.654 682.77 L983.095 682.77 L982.535 682.77 L981.976 682.77 L981.417 682.77 L980.858 682.77 L980.298 682.77 L979.739 682.77 L979.18 682.77 L978.621 682.77 L978.061 682.77 L977.502 682.77 L976.943 682.77 L976.384 682.77 L975.824 682.77 L975.265 682.77 L974.706 682.77 L974.147 682.77 L973.587 682.77 L973.028 682.77 L972.469 682.77 L971.91 682.77 L971.35 682.77 L970.791 682.77 L970.232 682.77 L969.673 682.77 L969.113 682.77 L968.554 682.77 L967.995 682.77 L967.436 682.77 L966.876 682.77 L966.317 682.77 L965.758 682.77 L965.199 682.77 L964.639 682.77 L964.08 682.77 L963.521 682.77 L962.962 682.77 L962.402 682.77 L961.843 682.77 L961.284 682.77 L960.725 682.77 L960.165 682.77 L959.606 682.77 L959.047 682.77 L958.488 682.77 L957.928 682.77 L957.369 682.77 L956.81 682.77 L956.251 682.77 L955.691 682.77 L955.132 682.77 L954.573 682.77 L954.014 682.77 L953.454 682.77 L952.895 682.77 L952.336 682.77 L951.777 682.77 L951.217 682.77 L950.658 682.77 L950.099 682.77 L949.54 682.77 L948.98 682.77 L948.421 682.77 L947.862 682.77 L947.303 682.77 L946.743 682.77 L946.184 682.77 L945.625 682.77 L945.066 682.77 L944.506 682.77 L943.947 682.77 L943.388 682.77 L942.829 682.77 L942.269 682.77 L941.71 682.77 L941.151 682.77 L940.592 682.77 L940.032 682.77 L939.473 682.77 L938.914 682.77 L938.355 682.77 L937.795 682.77 L937.236 682.77 L936.677 682.77 L936.118 682.77 L935.558 682.77 L934.999 682.77 L934.44 682.77 L933.881 682.77 L933.321 682.77 L932.762 682.77 L932.203 682.77 L931.644 682.77 L931.084 682.77 L930.525 682.77 L929.966 682.77 L929.406 682.77 L928.847 682.77 L928.288 682.77 L927.729 682.77 L927.169 682.77 L926.61 682.77 L926.051 682.77 L925.492 682.77 L924.932 682.77 L924.373 682.77 L923.814 682.77 L923.255 682.77 L922.695 682.77 L922.136 682.77 L921.577 682.77 L921.018 682.77 L920.458 682.77 L919.899 682.77 L919.34 682.77 L918.781 682.77 L918.221 682.77 L917.662 682.77 L917.103 682.77 L916.544 682.77 L915.984 682.77 L915.425 682.77 L914.866 682.77 L914.307 682.77 L913.747 682.77 L913.188 682.77 L912.629 682.77 L912.07 682.77 L911.51 682.77 L910.951 682.77 L910.392 682.77 L909.833 682.77 L909.273 682.77 L908.714 682.77 L908.155 682.77 L907.596 682.77 L907.036 682.77 L906.477 682.77 L905.918 682.77 L905.359 682.77 L904.799 682.77 L904.24 682.77 L903.681 682.77 L903.122 682.77 L902.562 682.77 L902.003 682.77 L901.444 682.77 L900.885 682.77 L900.325 682.77 L899.766 682.77 L899.207 682.77 L898.648 682.77 L898.088 682.77 L897.529 682.77 L896.97 682.77 L896.411 682.77 L895.851 682.77 L895.292 682.77 L894.733 682.77 L894.174 682.77 L893.614 682.77 L893.055 682.77 L892.496 682.77 L891.937 682.77 L891.377 682.77 L890.818 682.77 L890.259 682.77 L889.7 682.77 L889.14 682.77 L888.581 682.77 L888.022 682.77 L887.463 682.77 L886.903 682.77 L886.344 682.77 L885.785 682.77 L885.226 682.77 L884.666 682.77 L884.107 682.77 L883.548 682.77 L882.989 682.77 L882.429 682.77 L881.87 682.77 L881.311 682.77 L880.752 682.77 L880.192 682.77 L879.633 682.77 L879.074 682.77 L878.515 682.77 L877.955 682.77 L877.396 682.77 L876.837 682.77 L876.278 682.77 L875.718 682.77 L875.159 682.77 L874.6 682.77 L874.041 682.77 L873.481 682.77 L872.922 682.77 L872.363 682.77 L871.804 682.77 L871.244 682.77 L870.685 682.77 L870.126 682.77 L869.567 682.77 L869.007 682.77 L868.448 682.77 L867.889 682.77 L867.33 682.77 L866.77 682.77 L866.211 682.77 L865.652 682.77 L865.093 682.77 L864.533 682.77 L863.974 682.77 L863.415 682.77 L862.856 682.77 L862.296 682.77 L861.737 682.77 L861.178 682.77 L860.619 682.77 L860.059 682.77 L859.5 682.77 L858.941 682.77 L858.382 682.77 L857.822 682.77 L857.263 682.77 L856.704 682.77 L856.145 682.77 L855.585 682.77 L855.026 682.77 L854.467 682.77 L853.908 682.77 L853.348 682.77 L852.789 682.77 L852.23 682.77 L851.671 682.77 L851.111 682.77 L850.552 682.77 L849.993 682.77 L849.434 682.77 L848.874 682.77 L848.315 682.77 L847.756 682.77 L847.197 682.77 L846.637 682.77 L846.078 682.77 L845.519 682.77 L844.96 682.77 L844.4 682.77 L843.841 682.77 L843.282 682.77 L842.723 682.77 L842.163 682.77 L841.604 682.77 L841.045 682.77 L840.486 682.77 L839.926 682.77 L839.367 682.77 L838.808 682.77 L838.249 682.77 L837.689 682.77 L837.13 682.77 L836.571 682.77 L836.012 682.77 L835.452 682.77 L834.893 682.77 L834.334 682.77 L833.775 682.77 L833.215 682.77 L832.656 682.77 L832.097 682.77 L831.538 682.77 L830.978 682.77 L830.419 682.77 L829.86 682.77 L829.301 682.77 L828.741 682.77 L828.182 682.77 L827.623 682.77 L827.064 682.77 L826.504 682.77 L825.945 682.77 L825.386 682.77 L824.827 682.77 L824.267 682.77 L823.708 682.77 L823.149 682.77 L822.59 682.77 L822.03 682.77 L821.471 682.77 L820.912 682.77 L820.353 682.77 L819.793 682.77 L819.234 682.77 L818.675 682.77 L818.116 682.77 L817.556 682.77 L816.997 682.77 L816.438 682.77 L815.879 682.77 L815.319 682.77 L814.76 682.77 L814.201 682.77 L813.642 682.77 L813.082 682.77 L812.523 682.77 L811.964 682.77 L811.405 682.77 L810.845 682.77 L810.286 682.77 L809.727 682.77 L809.168 682.77 L808.608 682.77 L808.049 682.77 L807.49 682.77 L806.931 682.77 L806.371 682.77 L805.812 682.77 L805.253 682.77 L804.693 682.77 L804.134 682.77 L803.575 682.77 L803.016 682.77 L802.456 682.77 L801.897 682.77 L801.338 682.77 L800.779 682.77 L800.219 682.77 L799.66 682.77 L799.101 682.77 L798.542 682.77 L797.982 682.77 L797.423 682.77 L796.864 682.77 L796.305 682.77 L795.745 682.77 L795.186 682.77 L794.627 682.77 L794.068 682.77 L793.508 682.77 L792.949 682.77 L792.39 682.77 L791.831 682.77 L791.271 682.77 L790.712 682.77 L790.153 682.77 L789.594 682.77 L789.034 682.77 L788.475 682.77 L787.916 682.77 L787.357 682.77 L786.797 682.77 L786.238 682.77 L785.679 682.77 L785.12 682.77 L784.56 682.77 L784.001 682.77 L783.442 682.77 L782.883 682.77 L782.323 682.77 L781.764 682.77 L781.205 682.77 L780.646 682.77 L780.086 682.77 L779.527 682.77 L778.968 682.77 L778.409 682.77 L777.849 682.77 L777.29 682.77 L776.731 682.77 L776.172 682.77 L775.612 682.77 L775.053 682.77 L774.494 682.77 L773.935 682.77 L773.375 682.77 L772.816 682.77 L772.257 682.77 L771.698 682.77 L771.138 682.77 L770.579 682.77 L770.02 682.77 L769.461 682.77 L768.901 682.77 L768.342 682.77 L767.783 682.77 L767.224 682.77 L766.664 682.77 L766.105 682.77 L765.546 682.77 L764.987 682.77 L764.427 682.77 L763.868 682.77 L763.309 682.77 L762.75 682.77 L762.19 682.77 L761.631 682.77 L761.072 682.77 L760.513 682.77 L759.953 682.77 L759.394 682.77 L758.835 682.77 L758.276 682.77 L757.716 682.77 L757.157 682.77 L756.598 682.77 L756.039 682.77 L755.479 682.77 L754.92 682.77 L754.361 682.77 L753.802 682.77 L753.242 682.77 L752.683 682.77 L752.124 682.77 L751.565 682.77 L751.005 682.77 L750.446 682.77 L749.887 682.77 L749.328 682.77 L748.768 682.77 L748.209 682.77 L747.65 682.77 L747.091 682.77 L746.531 682.77 L745.972 682.77 L745.413 682.77 L744.854 682.77 L744.294 682.77 L743.735 682.77 L743.176 682.77 L742.617 682.77 L742.057 682.77 L741.498 682.77 L740.939 682.77 L740.38 682.77 L739.82 682.77 L739.261 682.77 L738.702 682.77 L738.143 682.77 L737.583 682.77 L737.024 682.77 L736.465 682.77 L735.906 682.77 L735.346 682.77 L734.787 682.77 L734.228 682.77 L733.669 682.77 L733.109 682.77 L732.55 682.77 L731.991 682.77 L731.432 682.77 L730.872 682.77 L730.313 682.77 L729.754 682.77 L729.195 682.77 L728.635 682.77 L728.076 682.77 L727.517 682.77 L726.958 682.77 L726.398 682.77 L725.839 682.77 L725.28 682.77 L724.721 682.77 L724.161 682.77 L723.602 682.77 L723.043 682.77 L722.484 682.77 L721.924 682.77 L721.365 682.77 L720.806 682.77 L720.247 682.77  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip273)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.028 720.806,684.028 721.365,684.028 721.924,684.028 722.484,684.028 723.043,684.028 723.602,684.028 724.161,684.028 724.721,684.028 725.28,684.028 725.839,684.028 726.398,684.028 726.958,684.028 727.517,684.028 728.076,684.028 728.635,684.028 729.195,684.028 729.754,684.028 730.313,684.028 730.872,684.028 731.432,684.028 731.991,684.028 732.55,684.028 733.109,684.028 733.669,684.028 734.228,684.028 734.787,684.028 735.346,684.028 735.906,684.028 736.465,684.028 737.024,684.028 737.583,684.028 738.143,684.028 738.702,684.028 739.261,684.028 739.82,684.028 740.38,684.028 740.939,684.028 741.498,684.028 742.057,684.028 742.617,684.028 743.176,684.028 743.735,684.028 744.294,684.028 744.854,684.028 745.413,684.028 745.972,684.028 746.531,684.028 747.091,684.028 747.65,684.028 748.209,684.028 748.768,684.028 749.328,684.028 749.887,684.028 750.446,684.028 751.005,684.028 751.565,684.028 752.124,684.028 752.683,684.028 753.242,684.028 753.802,684.028 754.361,684.028 754.92,684.028 755.479,684.028 756.039,684.028 756.598,684.028 757.157,684.028 757.716,684.028 758.276,684.028 758.835,684.028 759.394,684.028 759.953,684.028 760.513,684.028 761.072,684.028 761.631,684.028 762.19,684.028 762.75,684.028 763.309,684.028 763.868,684.028 764.427,684.028 764.987,684.028 765.546,684.028 766.105,684.028 766.664,684.028 767.224,684.028 767.783,684.028 768.342,684.028 768.901,684.028 769.461,684.028 770.02,684.028 770.579,684.028 771.138,684.028 771.698,684.028 772.257,684.028 772.816,684.028 773.375,684.028 773.935,684.028 774.494,684.028 775.053,684.028 775.612,684.028 776.172,684.028 776.731,684.028 777.29,684.028 777.849,684.028 778.409,684.028 778.968,684.028 779.527,684.028 780.086,684.028 780.646,684.028 781.205,684.028 781.764,684.028 782.323,684.028 782.883,684.028 783.442,684.028 784.001,684.028 784.56,684.028 785.12,684.028 785.679,684.028 786.238,684.028 786.797,684.028 787.357,684.028 787.916,684.028 788.475,684.028 789.034,684.028 789.594,684.028 790.153,684.028 790.712,684.028 791.271,684.028 791.831,684.028 792.39,684.028 792.949,684.028 793.508,684.028 794.068,684.028 794.627,684.028 795.186,684.028 795.745,684.028 796.305,684.028 796.864,684.028 797.423,684.028 797.982,684.028 798.542,684.028 799.101,684.028 799.66,684.028 800.219,684.028 800.779,684.028 801.338,684.028 801.897,684.028 802.456,684.028 803.016,684.028 803.575,684.028 804.134,684.028 804.693,684.028 805.253,684.028 805.812,684.028 806.371,684.028 806.931,684.028 807.49,684.028 808.049,684.028 808.608,684.028 809.168,684.028 809.727,684.028 810.286,684.028 810.845,684.028 811.405,684.028 811.964,684.028 812.523,684.028 813.082,684.028 813.642,684.028 814.201,684.028 814.76,684.028 815.319,684.028 815.879,684.028 816.438,684.028 816.997,684.028 817.556,684.028 818.116,684.028 818.675,684.028 819.234,684.028 819.793,684.028 820.353,684.028 820.912,684.028 821.471,684.028 822.03,684.028 822.59,684.028 823.149,684.028 823.708,684.028 824.267,684.028 824.827,684.028 825.386,684.028 825.945,684.028 826.504,684.028 827.064,684.028 827.623,684.028 828.182,684.028 828.741,684.028 829.301,684.028 829.86,684.028 830.419,684.028 830.978,684.028 831.538,684.028 832.097,684.028 832.656,684.028 833.215,684.028 833.775,684.028 834.334,684.028 834.893,684.028 835.452,684.028 836.012,684.028 836.571,684.028 837.13,684.028 837.689,684.028 838.249,684.028 838.808,684.028 839.367,684.028 839.926,684.028 840.486,684.028 841.045,684.028 841.604,684.028 842.163,684.028 842.723,684.028 843.282,684.028 843.841,684.028 844.4,684.028 844.96,684.028 845.519,684.028 846.078,684.028 846.637,684.028 847.197,684.028 847.756,684.028 848.315,684.028 848.874,684.028 849.434,684.028 849.993,684.028 850.552,684.028 851.111,684.028 851.671,684.028 852.23,684.028 852.789,684.028 853.348,684.028 853.908,684.028 854.467,684.028 855.026,684.028 855.585,684.028 856.145,684.028 856.704,684.028 857.263,684.028 857.822,684.028 858.382,684.028 858.941,684.028 859.5,684.028 860.059,684.028 860.619,684.028 861.178,684.028 861.737,684.028 862.296,684.028 862.856,684.028 863.415,684.028 863.974,684.028 864.533,684.028 865.093,684.028 865.652,684.028 866.211,684.028 866.77,684.028 867.33,684.028 867.889,684.028 868.448,684.028 869.007,684.028 869.567,684.028 870.126,684.028 870.685,684.028 871.244,684.028 871.804,684.028 872.363,684.028 872.922,684.028 873.481,684.028 874.041,684.028 874.6,684.028 875.159,684.028 875.718,684.028 876.278,684.028 876.837,684.028 877.396,684.028 877.955,684.028 878.515,684.028 879.074,684.028 879.633,684.028 880.192,684.028 880.752,684.028 881.311,684.028 881.87,684.028 882.429,684.028 882.989,684.028 883.548,684.028 884.107,684.028 884.666,684.028 885.226,684.028 885.785,684.028 886.344,684.028 886.903,684.028 887.463,684.028 888.022,684.028 888.581,684.028 889.14,684.028 889.7,684.028 890.259,684.028 890.818,684.028 891.377,684.028 891.937,684.028 892.496,684.028 893.055,684.028 893.614,684.028 894.174,684.028 894.733,684.028 895.292,684.028 895.851,684.028 896.411,684.028 896.97,684.028 897.529,684.028 898.088,684.028 898.648,684.028 899.207,684.028 899.766,684.028 900.325,684.028 900.885,684.028 901.444,684.028 902.003,684.028 902.562,684.028 903.122,684.028 903.681,684.028 904.24,684.028 904.799,684.028 905.359,684.028 905.918,684.028 906.477,684.028 907.036,684.028 907.596,684.028 908.155,684.028 908.714,684.028 909.273,684.028 909.833,684.028 910.392,684.028 910.951,684.028 911.51,684.028 912.07,684.028 912.629,684.028 913.188,684.028 913.747,684.028 914.307,684.028 914.866,684.028 915.425,684.028 915.984,684.028 916.544,684.028 917.103,684.028 917.662,684.028 918.221,684.028 918.781,684.028 919.34,684.028 919.899,684.028 920.458,684.028 921.018,684.028 921.577,684.028 922.136,684.028 922.695,684.028 923.255,684.028 923.814,684.028 924.373,684.028 924.932,684.028 925.492,684.028 926.051,684.028 926.61,684.028 927.169,684.028 927.729,684.028 928.288,684.028 928.847,684.028 929.406,684.028 929.966,684.028 930.525,684.028 931.084,684.028 931.644,684.028 932.203,684.028 932.762,684.028 933.321,684.028 933.881,684.028 934.44,684.028 934.999,684.028 935.558,684.028 936.118,684.028 936.677,684.028 937.236,684.028 937.795,684.028 938.355,684.028 938.914,684.028 939.473,684.028 940.032,684.028 940.592,684.028 941.151,684.028 941.71,684.028 942.269,684.028 942.829,684.028 943.388,684.028 943.947,684.028 944.506,684.028 945.066,684.028 945.625,684.028 946.184,684.028 946.743,684.028 947.303,684.028 947.862,684.028 948.421,684.028 948.98,684.028 949.54,684.028 950.099,684.028 950.658,684.028 951.217,684.028 951.777,684.028 952.336,684.028 952.895,684.028 953.454,684.028 954.014,684.028 954.573,684.028 955.132,684.028 955.691,684.028 956.251,684.028 956.81,684.028 957.369,684.028 957.928,684.028 958.488,684.028 959.047,684.028 959.606,684.028 960.165,684.028 960.725,684.028 961.284,684.028 961.843,684.028 962.402,684.028 962.962,684.028 963.521,684.028 964.08,684.028 964.639,684.028 965.199,684.028 965.758,684.028 966.317,684.028 966.876,684.028 967.436,684.028 967.995,684.028 968.554,684.028 969.113,684.028 969.673,684.028 970.232,684.028 970.791,684.028 971.35,684.028 971.91,684.028 972.469,684.028 973.028,684.028 973.587,684.028 974.147,684.028 974.706,684.028 975.265,684.028 975.824,684.028 976.384,684.028 976.943,684.028 977.502,684.028 978.061,684.028 978.621,684.028 979.18,684.028 979.739,684.028 980.298,684.028 980.858,684.028 981.417,684.028 981.976,684.028 982.535,684.028 983.095,684.028 983.654,684.028 984.213,684.028 984.772,684.028 985.332,684.028 985.891,684.028 986.45,684.028 987.009,684.028 987.569,684.028 988.128,684.028 988.687,684.028 989.246,684.028 989.806,684.028 990.365,684.028 990.924,684.028 991.483,684.028 992.043,684.028 992.602,684.028 993.161,684.028 993.72,684.028 994.28,684.028 994.839,684.028 995.398,684.028 995.957,684.028 996.517,684.028 997.076,684.028 997.635,684.028 998.194,684.028 998.754,684.028 999.313,684.028 999.872,684.028 1000.43,684.028 1000.99,684.028 1001.55,684.028 1002.11,684.028 1002.67,684.028 1003.23,684.028 1003.79,684.028 1004.35,684.028 1004.91,684.028 1005.46,684.028 1006.02,684.028 1006.58,684.028 1007.14,684.028 1007.7,684.028 1008.26,684.028 1008.82,684.028 1009.38,684.028 1009.94,684.028 1010.5,684.028 1011.06,684.028 1011.62,684.028 1012.18,684.028 1012.73,684.028 1013.29,684.028 1013.85,684.028 1014.41,684.028 1014.97,684.028 1015.53,684.028 1016.09,684.028 1016.65,684.028 1017.21,684.028 1017.77,684.028 1018.33,684.028 1018.89,684.028 1019.45,684.028 1020.01,684.028 1020.56,684.028 1021.12,684.028 1021.68,684.028 1022.24,684.028 1022.8,684.028 1023.36,684.028 1023.92,684.028 1024.48,684.028 1025.04,684.028 1025.6,684.028 1026.16,684.028 1026.72,684.028 1027.28,684.028 1027.83,684.028 1028.39,684.028 1028.95,684.028 1029.51,684.028 1030.07,684.028 1030.63,684.028 1031.19,684.028 1031.75,684.028 1032.31,684.028 1032.87,684.028 1033.43,684.028 1033.99,684.028 1034.55,684.028 1035.1,684.028 1035.66,684.028 1036.22,684.028 1036.78,684.028 1037.34,684.028 1037.9,684.028 1038.46,684.028 1039.02,684.028 1039.58,684.028 1040.14,684.028 1040.7,684.028 1041.26,684.028 1041.82,684.028 1042.38,684.028 1042.93,684.028 1043.49,684.028 1044.05,684.028 1044.61,684.028 1045.17,684.028 1045.73,684.028 1046.29,684.028 1046.85,684.028 1047.41,684.028 1047.97,684.028 1048.53,684.028 1049.09,684.028 1049.65,684.028 1050.2,684.028 1050.76,684.028 1051.32,684.028 1051.88,684.028 1052.44,684.028 1053,684.028 1053.56,684.028 1054.12,684.028 1054.68,684.028 1055.24,684.028 1055.8,684.028 1056.36,684.028 1056.92,684.028 1057.48,684.028 1058.03,684.028 1058.59,684.028 1059.15,684.028 1059.71,684.028 1060.27,684.028 1060.83,684.028 1061.39,684.028 1061.95,684.028 1062.51,684.028 1063.07,684.028 1063.63,684.028 1064.19,684.028 1064.75,684.028 1065.3,684.028 1065.86,684.028 1066.42,684.028 1066.98,684.028 1067.54,684.028 1068.1,684.028 1068.66,684.028 1069.22,684.028 1069.78,684.028 1070.34,684.028 1070.9,684.028 1071.46,684.028 1072.02,684.028 1072.57,684.028 1073.13,684.028 1073.69,684.028 1074.25,684.028 1074.81,684.028 1075.37,684.028 1075.93,684.028 1076.49,684.028 1077.05,684.028 1077.61,684.028 1078.17,684.028 1078.73,684.028 1079.29,684.028 1079.85,684.028 1080.4,684.028 1080.96,684.028 1081.52,684.028 1082.08,684.028 1082.64,684.028 1083.2,684.028 1083.76,684.028 1084.32,684.028 1084.88,684.028 1085.44,684.028 1086,684.028 1086.56,684.028 1087.12,684.028 1087.67,684.028 1088.23,684.028 1088.79,684.028 1089.35,684.028 1089.91,684.028 1090.47,684.028 1091.03,684.028 1091.59,684.028 1092.15,684.028 1092.71,684.028 1093.27,684.028 1093.83,684.028 1094.39,684.028 1094.94,684.028 1095.5,684.028 1096.06,684.028 1096.62,684.028 1097.18,684.028 1097.74,684.028 1098.3,684.028 1098.86,684.028 1099.42,684.028 1099.98,684.028 1100.54,684.028 1101.1,684.028 1101.66,684.028 1102.22,684.028 1102.77,684.028 1103.33,684.028 1103.89,684.028 1104.45,684.028 1105.01,684.028 1105.57,684.028 1106.13,684.028 1106.69,684.028 1107.25,684.028 1107.81,684.028 1108.37,684.028 1108.93,684.028 1109.49,684.028 1110.04,684.028 1110.6,684.028 1111.16,684.028 1111.72,684.028 1112.28,684.028 1112.84,684.028 1113.4,684.028 1113.96,684.028 1114.52,684.028 1115.08,684.028 1115.64,684.028 1116.2,684.028 1116.76,684.028 1117.31,684.028 1117.87,684.028 1118.43,684.028 1118.99,684.028 1119.55,684.028 1120.11,684.028 1120.67,684.028 1121.23,684.028 1121.79,684.028 1122.35,684.028 1122.91,684.028 1123.47,684.028 1124.03,684.028 1124.59,684.028 1125.14,684.028 1125.7,684.028 1126.26,684.028 1126.82,684.028 1127.38,684.028 1127.94,684.028 1128.5,684.028 1129.06,684.028 1129.62,684.028 1130.18,684.028 1130.74,684.028 1131.3,684.028 1131.86,684.028 1132.41,684.028 1132.97,684.028 1133.53,684.028 1134.09,684.028 1134.65,684.028 1135.21,684.028 1135.77,684.028 1136.33,684.028 1136.89,684.028 1137.45,684.028 1138.01,684.028 1138.57,684.028 1139.13,684.028 1139.68,684.028 1140.24,684.028 1140.8,684.028 1141.36,684.028 1141.92,684.028 1142.48,684.028 1143.04,684.028 1143.6,684.028 1144.16,684.028 1144.72,684.028 1145.28,684.028 1145.84,684.028 1146.4,684.028 1146.96,684.028 1147.51,684.028 1148.07,684.028 1148.63,684.028 1149.19,684.028 1149.75,684.028 1150.31,684.028 1150.87,684.028 1151.43,684.028 1151.99,684.028 1152.55,684.028 1153.11,684.028 1153.67,684.028 1154.23,684.028 1154.78,684.028 1155.34,684.028 1155.9,684.028 1156.46,684.028 1157.02,684.028 1157.58,684.028 1158.14,684.028 1158.7,684.028 1159.26,684.028 1159.82,684.028 1160.38,684.028 1160.94,684.028 1161.5,684.028 1162.05,684.028 1162.61,684.028 1163.17,684.028 1163.73,684.028 1164.29,684.028 1164.85,684.028 1165.41,684.028 1165.97,684.028 1166.53,684.028 1167.09,684.028 1167.65,684.028 1168.21,684.028 1168.77,684.028 1169.33,684.028 1169.88,684.028 1170.44,684.028 1171,684.028 1171.56,684.028 1172.12,684.028 1172.68,684.028 1173.24,684.028 1173.8,684.028 1174.36,684.028 1174.92,684.028 1175.48,684.028 1176.04,684.028 1176.6,684.028 1177.15,684.028 1177.71,684.028 1178.27,684.028 1178.83,684.028 1179.39,684.028 1179.95,684.028 1180.51,684.028 1181.07,684.028 1181.63,684.028 1182.19,684.028 1182.75,684.028 1183.31,684.028 1183.87,684.028 1184.43,684.028 1184.98,684.028 1185.54,684.028 1186.1,684.028 1186.66,684.028 1187.22,684.028 1187.78,684.028 1188.34,684.028 1188.9,684.028 1189.46,684.028 1190.02,684.028 1190.58,684.028 1191.14,684.028 1191.7,684.028 1192.25,684.028 1192.81,684.028 1193.37,684.028 1193.93,684.028 1194.49,684.028 1195.05,684.028 1195.61,684.028 1196.17,684.028 1196.73,684.028 1197.29,684.028 1197.85,684.028 1198.41,684.028 1198.97,684.028 1199.52,684.028 1200.08,684.028 1200.64,684.028 1201.2,684.028 1201.76,684.028 1202.32,684.028 1202.88,684.028 1203.44,684.028 1204,684.028 1204.56,684.028 1205.12,684.028 1205.68,684.028 1206.24,684.028 1206.8,684.028 1207.35,684.028 1207.91,684.028 1208.47,684.028 1209.03,684.028 1209.59,684.028 1210.15,684.028 1210.71,684.028 1211.27,684.028 1211.83,684.028 1212.39,684.028 1212.95,684.028 1213.51,684.028 1214.07,684.028 1214.62,684.028 1215.18,684.028 1215.74,684.028 1216.3,684.028 1216.86,684.028 1217.42,684.028 1217.98,684.028 1218.54,684.028 1219.1,684.028 1219.66,684.028 1220.22,684.028 1220.78,684.028 1221.34,684.028 1221.89,684.028 1222.45,684.028 1223.01,684.028 1223.57,684.028 1224.13,684.028 1224.69,684.028 1225.25,684.028 1225.81,684.028 1226.37,684.028 1226.93,684.028 1227.49,684.028 1228.05,684.028 1228.61,684.028 1229.17,684.028 1229.72,684.028 1230.28,684.028 1230.84,684.028 1231.4,684.028 1231.96,684.028 1232.52,684.028 1233.08,684.028 1233.64,684.028 1234.2,684.028 1234.76,684.028 1235.32,684.028 1235.88,684.028 1236.44,684.028 1236.99,684.028 1237.55,684.028 1238.11,684.028 1238.67,684.028 1239.23,684.028 1239.79,684.028 1240.35,684.028 1240.91,684.028 1241.47,684.028 1242.03,684.028 1242.59,684.028 1243.15,684.028 1243.71,684.028 1244.26,684.028 1244.82,684.028 1245.38,684.028 1245.94,684.028 1246.5,684.028 1247.06,684.028 1247.62,684.028 1248.18,684.028 1248.74,684.028 1249.3,684.028 1249.86,684.028 1250.42,684.028 1250.98,684.028 1251.54,684.028 1252.09,684.028 1252.65,684.028 1253.21,684.028 1253.77,684.028 1254.33,684.028 1254.89,684.028 1255.45,684.028 1256.01,684.028 1256.57,684.028 1257.13,684.028 1257.69,684.028 1258.25,684.028 1258.81,684.028 1259.36,684.028 1259.92,684.028 1260.48,684.028 1261.04,684.028 1261.6,684.028 1262.16,684.028 1262.72,684.028 1263.28,684.028 1263.84,684.028 1264.4,684.028 1264.96,684.028 1265.52,684.028 1266.08,684.028 1266.63,684.028 1267.19,684.028 1267.75,684.028 1268.31,684.028 1268.87,684.028 1269.43,684.028 1269.99,684.028 1270.55,684.028 1271.11,684.028 1271.67,684.028 1272.23,684.028 1272.79,684.028 1273.35,684.028 1273.91,684.028 1274.46,684.028 1275.02,684.028 1275.58,684.028 1276.14,684.028 1276.7,684.028 1277.26,684.028 1277.82,684.028 1278.38,684.028 1278.94,684.028 1279.5,684.028 1280.06,684.028 1280.62,684.028 1281.18,684.028 1281.73,684.028 1282.29,684.028 1282.85,684.028 1283.41,684.028 1283.97,684.028 1284.53,684.028 1285.09,684.028 1285.65,684.028 1286.21,684.028 1286.77,684.028 1287.33,684.028 1287.89,684.028 1288.45,684.028 1289,684.028 1289.56,684.028 1290.12,684.028 1290.68,684.028 1291.24,684.028 1291.8,684.028 1292.36,684.028 1292.92,684.028 1293.48,684.028 1294.04,684.028 1294.6,684.028 1295.16,684.028 1295.72,684.028 1296.28,684.028 1296.83,684.028 1297.39,684.028 1297.95,684.028 1298.51,684.028 1299.07,684.028 1299.63,684.028 1300.19,684.028 1300.75,684.028 1301.31,684.028 1301.87,684.028 1302.43,684.028 1302.99,684.028 1303.55,684.028 1304.1,684.028 1304.66,684.028 1305.22,684.028 1305.78,684.028 1306.34,684.028 1306.9,684.028 1307.46,684.028 1308.02,684.028 1308.58,684.028 1309.14,684.028 1309.7,684.028 1310.26,684.028 1310.82,684.028 1311.38,684.028 1311.93,684.028 1312.49,684.028 1313.05,684.028 1313.61,684.028 1314.17,684.028 1314.73,684.028 1315.29,684.028 1315.85,684.028 1316.41,684.028 1316.97,684.028 1317.53,684.028 1318.09,684.028 1318.65,684.028 1319.2,684.028 1319.76,684.028 1320.32,684.028 1320.88,684.028 1321.44,684.028 1322,684.028 1322.56,684.028 1323.12,684.028 1323.68,684.028 1324.24,684.028 1324.8,684.028 1325.36,684.028 1325.92,684.028 1326.47,684.028 1327.03,684.028 1327.59,684.028 1328.15,684.028 1328.71,684.028 1329.27,684.028 1329.83,684.028 1330.39,684.028 1330.95,684.028 1331.51,684.028 1332.07,684.028 1332.63,684.028 1333.19,684.028 1333.75,684.028 1334.3,684.028 1334.86,684.028 1335.42,684.028 1335.98,684.028 1336.54,684.028 1337.1,684.028 1337.66,684.028 1338.22,684.028 1338.78,684.028 1339.34,684.028 1339.9,684.028 1340.46,684.028 1341.02,684.028 1341.57,684.028 1342.13,684.028 1342.69,684.028 1343.25,684.028 1343.81,684.028 1344.37,684.028 1344.93,684.028 1345.49,684.028 1346.05,684.028 1346.61,684.028 1347.17,684.028 1347.73,684.028 1348.29,684.028 1348.84,684.028 1349.4,684.028 1349.96,684.028 1350.52,684.028 1351.08,684.028 1351.64,684.028 1352.2,684.028 1352.76,684.028 1353.32,684.028 1353.88,684.028 1354.44,684.028 1355,684.028 1355.56,684.028 1356.12,684.028 1356.67,684.028 1357.23,684.028 1357.79,684.028 1358.35,684.028 1358.91,684.028 1359.47,684.028 1360.03,684.028 1360.59,684.028 1361.15,684.028 1361.71,684.028 1362.27,684.028 1362.83,684.028 1363.39,684.028 1363.94,684.028 1364.5,684.028 1365.06,684.028 1365.62,684.028 1366.18,684.028 1366.74,684.028 1367.3,684.028 1367.86,684.028 1368.42,684.028 1368.98,684.028 1369.54,684.028 1370.1,684.028 1370.66,684.028 1371.21,684.028 1371.77,684.028 1372.33,684.028 1372.89,684.028 1373.45,684.028 1374.01,684.028 1374.57,684.028 1375.13,684.028 1375.69,684.028 1376.25,684.028 1376.81,684.028 1377.37,684.028 1377.93,684.028 1378.49,684.028 1379.04,684.028 1379.6,684.028 1380.16,684.028 1380.72,684.028 1381.28,684.028 1381.84,684.028 1382.4,684.028 1382.96,684.028 1383.52,684.028 1384.08,684.028 1384.64,684.028 1385.2,684.028 1385.76,684.028 1386.31,684.028 1386.87,684.028 1387.43,684.028 1387.99,684.028 1388.55,684.028 1389.11,684.028 1389.67,684.028 1390.23,684.028 1390.79,684.028 1391.35,684.028 1391.91,684.028 1392.47,684.028 1393.03,684.028 1393.58,684.028 1394.14,684.028 1394.7,684.028 1395.26,684.028 1395.82,684.028 1396.38,684.028 1396.94,684.028 1397.5,684.028 1398.06,684.028 1398.62,684.028 1399.18,684.028 1399.74,684.028 1400.3,684.028 1400.86,684.028 1401.41,684.028 1401.97,684.028 1402.53,684.028 1403.09,684.028 1403.65,684.028 1404.21,684.028 1404.77,684.028 1405.33,684.028 1405.89,684.028 1406.45,684.028 1407.01,684.028 1407.57,684.028 1408.13,684.028 1408.68,684.028 1409.24,684.028 1409.8,684.028 1410.36,684.028 1410.92,684.028 1411.48,684.028 1412.04,684.028 1412.6,684.028 1413.16,684.028 1413.72,684.028 1414.28,684.028 1414.84,684.028 1415.4,684.028 1415.95,684.028 1416.51,684.028 1417.07,684.028 1417.63,684.028 1418.19,684.028 1418.75,684.028 1419.31,684.028 1419.87,684.028 1420.43,684.028 1420.99,684.028 1421.55,684.028 1422.11,684.028 1422.67,684.028 1423.23,684.028 1423.78,684.028 1424.34,684.028 1424.9,684.028 1425.46,684.028 1426.02,684.028 1426.58,684.028 1427.14,684.028 1427.7,684.028 1428.26,684.028 1428.82,684.028 1429.38,684.028 1429.94,684.028 1430.5,684.028 1431.05,684.028 1431.61,684.028 1432.17,684.028 1432.73,684.028 1433.29,684.028 1433.85,684.028 1434.41,684.028 1434.97,684.028 1435.53,684.028 1436.09,684.028 1436.65,684.028 1437.21,684.028 1437.77,684.028 1438.33,684.028 1438.88,684.028 1439.44,684.028 1440,684.028 1440.56,684.028 1441.12,684.028 1441.68,684.028 1442.24,684.028 1442.8,684.028 1443.36,684.028 1443.92,684.028 1444.48,684.028 1445.04,684.028 1445.6,684.028 1446.15,684.028 1446.71,684.028 1447.27,684.028 1447.83,684.028 1448.39,684.028 1448.95,684.028 1449.51,684.028 1450.07,684.028 1450.63,684.028 1451.19,684.028 1451.75,684.028 1452.31,684.028 1452.87,684.028 1453.42,684.028 1453.98,684.028 1454.54,684.028 1455.1,684.028 1455.66,684.028 1456.22,684.028 1456.78,684.028 1457.34,684.028 1457.9,684.028 1458.46,684.028 1459.02,684.028 1459.58,684.028 1460.14,684.028 1460.7,684.028 1461.25,684.028 1461.81,684.028 1462.37,684.028 1462.93,684.028 1463.49,684.028 1464.05,684.028 1464.61,684.028 1465.17,684.028 1465.73,684.028 1466.29,684.028 1466.85,684.028 1467.41,684.028 1467.97,684.028 1468.52,684.028 1469.08,684.028 1469.64,684.028 1470.2,684.028 1470.76,684.028 1471.32,684.028 1471.88,684.028 1472.44,684.028 1473,684.028 1473.56,684.028 1474.12,684.028 1474.68,684.028 1475.24,684.028 1475.79,684.028 1476.35,684.028 1476.91,684.028 1477.47,684.028 1478.03,684.028 1478.59,684.028 1479.15,684.028 1479.71,684.028 1480.27,684.028 1480.83,684.028 1481.39,684.028 1481.95,684.028 1482.51,684.028 1483.07,684.028 1483.62,684.028 1484.18,684.028 1484.74,684.028 1485.3,684.028 1485.86,684.028 1486.42,684.028 1486.98,684.028 1487.54,684.028 1488.1,684.028 1488.66,684.028 1489.22,684.028 1489.78,684.028 1490.34,684.028 1490.89,684.028 1491.45,684.028 1492.01,684.028 1492.57,684.028 1493.13,684.028 1493.69,684.028 1494.25,684.028 1494.81,684.028 1495.37,684.028 1495.93,684.028 1496.49,684.028 1497.05,684.028 1497.61,684.028 1498.16,684.028 1498.72,684.028 1499.28,684.028 1499.84,684.028 1500.4,684.028 1500.96,684.028 1501.52,684.028 1502.08,684.028 1502.64,684.028 1503.2,684.028 1503.76,684.028 1504.32,684.028 1504.88,684.028 1505.44,684.028 1505.99,684.028 1506.55,684.028 1507.11,684.028 1507.67,684.028 1508.23,684.028 1508.79,684.028 1509.35,684.028 1509.91,684.028 1510.47,684.028 1511.03,684.028 1511.59,684.028 1512.15,684.028 1512.71,684.028 1513.26,684.028 1513.82,684.028 1514.38,684.028 1514.94,684.028 1515.5,684.028 1516.06,684.028 1516.62,684.028 1517.18,684.028 1517.74,684.028 1518.3,684.028 1518.86,684.028 1519.42,684.028 1519.98,684.028 1520.53,684.028 1521.09,684.028 1521.65,684.028 1522.21,684.028 1522.77,684.028 1523.33,684.028 1523.89,684.028 1524.45,684.028 1525.01,684.028 1525.57,684.028 1526.13,684.028 1526.69,684.028 1527.25,684.028 1527.81,684.028 1528.36,684.028 1528.92,684.028 1529.48,684.028 1530.04,684.028 1530.6,684.028 1531.16,684.028 1531.72,684.028 1532.28,684.028 1532.84,684.028 1533.4,684.028 1533.96,684.028 1534.52,684.028 1535.08,684.028 1535.63,684.028 1536.19,684.028 1536.75,684.028 1537.31,684.028 1537.87,684.028 1538.43,684.028 1538.99,684.028 1539.55,684.028 1540.11,684.028 1540.67,684.028 1541.23,684.028 1541.79,684.028 1542.35,684.028 1542.9,684.028 1543.46,684.028 1544.02,684.028 1544.58,684.028 1545.14,684.028 1545.7,684.028 1546.26,684.028 1546.82,684.028 1547.38,684.028 1547.94,684.028 1548.5,684.028 1549.06,684.028 1549.62,684.028 1550.18,684.028 1550.73,684.028 1551.29,684.028 1551.85,684.028 1552.41,684.028 1552.97,684.028 1553.53,684.028 1554.09,684.028 1554.65,684.028 1555.21,684.028 1555.77,684.028 1556.33,684.028 1556.89,684.028 1557.45,684.028 1558,684.028 1558.56,684.028 1559.12,684.028 1559.68,684.028 1560.24,684.028 1560.8,684.028 1561.36,684.028 1561.92,684.028 1562.48,684.028 1563.04,684.028 1563.6,684.028 1564.16,684.028 1564.72,684.028 1565.28,684.028 1565.83,684.028 1566.39,684.028 1566.95,684.028 1567.51,684.028 1568.07,684.028 1568.63,684.028 1569.19,684.028 1569.75,684.028 1570.31,684.028 1570.87,684.028 1571.43,684.028 1571.99,684.028 1572.55,684.028 1573.1,684.028 1573.66,684.028 1574.22,684.028 1574.78,684.028 1575.34,684.028 1575.9,684.028 1576.46,684.028 1577.02,684.028 1577.58,684.028 1578.14,684.028 1578.7,684.028 1579.26,684.028 1579.82,684.028 1580.37,684.028 1580.93,684.028 1581.49,684.028 1582.05,684.028 1582.61,684.028 1583.17,684.028 1583.73,684.028 1584.29,684.028 1584.85,684.028 1585.41,684.028 1585.97,684.028 1586.53,684.028 1587.09,684.028 1587.65,684.028 1588.2,684.028 1588.76,684.028 1589.32,684.028 1589.88,684.028 1590.44,684.028 1591,684.028 1591.56,684.028 1592.12,684.028 1592.68,684.028 1593.24,684.028 1593.8,684.028 1594.36,684.028 1594.92,684.028 1595.47,684.028 1596.03,684.028 1596.59,684.028 1597.15,684.028 1597.71,684.028 1598.27,684.028 1598.83,684.028 1599.39,684.028 1599.95,684.028 1600.51,684.028 1601.07,684.028 1601.63,684.028 1602.19,684.028 1602.74,684.028 1603.3,684.028 1603.86,684.028 1604.42,684.028 1604.98,684.028 1605.54,684.028 1606.1,684.028 1606.66,684.028 1607.22,684.028 1607.78,684.028 1608.34,684.028 1608.9,684.028 1609.46,684.028 1610.02,684.028 1610.57,684.028 1611.13,684.028 1611.69,684.028 1612.25,684.028 1612.81,684.028 1613.37,684.028 1613.93,684.028 1614.49,684.028 1615.05,684.028 1615.61,684.028 1616.17,684.028 1616.73,684.028 1617.29,684.028 1617.84,684.028 1618.4,684.028 1618.96,684.028 1619.52,684.028 1620.08,684.028 1620.64,684.028 1621.2,684.028 1621.76,684.028 1622.32,684.028 1622.88,684.028 1623.44,684.028 1624,684.028 1624.56,684.028 1625.11,684.028 1625.67,684.028 1626.23,684.028 1626.79,684.028 1627.35,684.028 1627.91,684.028 1628.47,684.028 1629.03,684.028 1629.59,684.028 1630.15,684.028 1630.71,684.028 1631.27,684.028 1631.83,684.028 1632.39,684.028 1632.94,684.028 1633.5,684.028 1634.06,684.028 1634.62,684.028 1635.18,684.028 1635.74,684.028 1636.3,684.028 1636.86,684.028 1637.42,684.028 1637.98,684.028 1638.54,684.028 1639.1,684.028 1639.66,684.028 1640.21,684.028 1640.77,684.028 1641.33,684.028 1641.89,684.028 1642.45,684.028 1643.01,684.028 1643.57,684.028 1644.13,684.028 1644.69,684.028 1645.25,684.028 1645.81,684.028 1646.37,684.028 1646.93,684.028 1647.48,684.028 1648.04,684.028 1648.6,684.028 1649.16,684.028 1649.72,684.028 1650.28,684.028 1650.84,684.028 1651.4,684.028 1651.96,684.028 1652.52,684.028 1653.08,684.028 1653.64,684.028 1654.2,684.028 1654.76,684.028 1655.31,684.028 1655.87,684.028 1656.43,684.028 1656.99,684.028 1657.55,684.028 1658.11,684.028 1658.67,684.028 1659.23,684.028 1659.79,684.028 1660.35,684.028 1660.91,684.028 1661.47,684.028 1662.03,684.028 1662.58,684.028 1663.14,684.028 1663.7,684.028 1664.26,684.028 1664.82,684.028 1665.38,684.028 1665.94,684.028 1666.5,684.028 1667.06,684.028 1667.62,684.028 1668.18,684.028 1668.74,684.028 1669.3,684.028 1669.85,684.028 1670.41,684.028 1670.97,684.028 1671.53,684.028 1672.09,684.028 1672.65,684.028 1673.21,684.028 1673.77,684.028 1674.33,684.028 1674.89,684.028 1675.45,684.028 1676.01,684.028 1676.57,684.028 1677.13,684.028 1677.68,684.028 1678.24,684.028 1678.8,684.028 1679.36,684.028 1679.92,684.028 1680.48,684.028 1681.04,684.028 1681.6,684.028 1682.16,684.028 1682.72,684.028 1683.28,684.028 1683.84,684.028 1684.4,684.028 1684.95,684.028 1685.51,684.028 1686.07,684.028 1686.63,684.028 1687.19,684.028 1687.75,684.028 1688.31,684.028 1688.87,684.028 1689.43,684.028 1689.99,684.028 1690.55,684.028 1691.11,684.028 1691.67,684.028 1692.23,684.028 1692.78,684.028 1693.34,684.028 1693.9,684.028 1694.46,684.028 1695.02,684.028 1695.58,684.028 1696.14,684.028 1696.7,684.028 1697.26,684.028 1697.82,684.028 1698.38,684.028 1698.94,684.028 1699.5,684.028 1700.05,684.028 1700.61,684.028 1701.17,684.028 1701.73,684.028 1702.29,684.028 1702.85,684.028 1703.41,684.028 1703.97,684.028 1704.53,684.028 1705.09,684.028 1705.65,684.028 1706.21,684.028 1706.77,684.028 1707.32,684.028 1707.88,684.028 1708.44,684.028 1709,684.028 1709.56,684.028 1710.12,684.028 1710.68,684.028 1711.24,684.028 1711.8,684.028 1712.36,684.028 1712.92,684.028 1713.48,684.028 1714.04,684.028 1714.6,684.028 1715.15,684.028 1715.71,684.028 1716.27,684.028 1716.83,684.028 1717.39,684.028 1717.95,684.028 1718.51,684.028 1719.07,684.028 1719.63,684.028 1720.19,684.028 1720.75,684.028 1721.31,684.028 1721.87,684.028 1722.42,684.028 1722.98,684.028 1723.54,684.028 1724.1,684.028 1724.66,684.028 1725.22,684.028 1725.78,684.028 1726.34,684.028 1726.9,684.028 1727.46,684.028 1728.02,684.028 1728.58,684.028 1729.14,684.028 1729.69,684.028 1730.25,684.028 1730.81,684.028 1731.37,684.028 1731.93,684.028 1732.49,684.028 1733.05,684.028 1733.61,684.028 1734.17,684.028 1734.73,684.028 1735.29,684.028 1735.85,684.028 1736.41,684.028 1736.97,684.028 1737.52,684.028 1738.08,684.028 1738.64,684.028 1739.2,684.028 1739.76,684.028 1740.32,684.028 1740.88,684.028 1741.44,684.028 1742,684.028 1742.56,684.028 1743.12,684.028 1743.68,684.028 1744.24,684.028 1744.79,684.028 1745.35,684.028 1745.91,684.028 1746.47,684.028 1747.03,684.028 1747.59,684.028 1748.15,684.028 1748.71,684.028 1749.27,684.028 1749.83,684.028 1750.39,684.028 1750.95,684.028 1751.51,684.028 1752.06,684.028 1752.62,684.028 1753.18,684.028 1753.74,684.028 1754.3,684.028 1754.86,684.028 1755.42,684.028 1755.98,684.028 1756.54,684.028 1757.1,684.028 1757.66,684.028 1758.22,684.028 1758.78,684.028 1759.34,684.028 1759.89,684.028 1760.45,684.028 1761.01,684.028 1761.57,684.028 1762.13,684.028 1762.69,684.028 1763.25,684.028 1763.81,684.028 1764.37,684.028 1764.93,684.028 1765.49,684.028 1766.05,684.028 1766.61,684.028 1767.16,684.028 1767.72,684.028 1768.28,684.028 1768.84,684.028 1769.4,684.028 1769.96,684.028 1770.52,684.028 1771.08,684.028 1771.64,684.028 1772.2,684.028 1772.76,684.028 1773.32,684.028 1773.88,684.028 1774.43,684.028 1774.99,684.028 1775.55,684.028 1776.11,684.028 1776.67,684.028 1777.23,684.028 1777.79,684.028 1778.35,684.028 1778.91,684.028 1779.47,684.028 1780.03,684.028 1780.59,684.028 1781.15,684.028 1781.71,684.028 1782.26,684.028 1782.82,684.028 1783.38,684.028 1783.94,684.028 1784.5,684.028 1785.06,684.028 1785.62,684.028 1786.18,684.028 1786.74,684.028 1787.3,684.028 1787.86,684.028 1788.42,684.028 1788.98,684.028 1789.53,684.028 1790.09,684.028 1790.65,684.028 1791.21,684.028 1791.77,684.028 1792.33,684.028 1792.89,684.028 1793.45,684.028 1794.01,684.028 1794.57,684.028 1795.13,684.028 1795.69,684.028 1796.25,684.028 1796.8,684.028 1797.36,684.028 1797.92,684.028 1798.48,684.028 1799.04,684.028 1799.6,684.028 1800.16,684.028 1800.72,684.028 1801.28,684.028 1801.84,684.028 1802.4,684.028 1802.96,684.028 1803.52,684.028 1804.08,684.028 1804.63,684.028 1805.19,684.028 1805.75,684.028 1806.31,684.028 1806.87,684.028 1807.43,684.028 1807.99,684.028 1808.55,684.028 1809.11,684.028 1809.67,684.028 1810.23,684.028 1810.79,684.028 1811.35,684.028 1811.9,684.028 1812.46,684.028 1813.02,684.028 1813.58,684.028 1814.14,684.028 1814.7,684.028 1815.26,684.028 1815.82,684.028 1816.38,684.028 1816.94,684.028 1817.5,684.028 1818.06,684.028 1818.62,684.028 1819.18,684.028 1819.73,684.028 1820.29,684.028 1820.85,684.028 1821.41,684.028 1821.97,684.028 1822.53,684.028 1823.09,684.028 1823.65,684.028 1824.21,684.028 1824.77,684.028 1825.33,684.028 1825.89,684.028 1826.45,684.028 1827,684.028 1827.56,684.028 1828.12,684.028 1828.68,684.028 1829.24,684.028 1829.8,684.028 1830.36,684.028 1830.92,684.028 1831.48,684.028 1832.04,684.028 1832.6,684.028 1833.16,684.028 1833.72,684.028 1834.27,684.028 1834.83,684.028 1835.39,684.028 1835.95,684.028 1836.51,684.028 1837.07,684.028 1837.63,684.028 1838.19,684.028 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.037591386052367 ± 0.022564645706365932\nProjected Energy: -4.017313971585386 ± (0.006726532697184595, 0.00632957149081026)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.13536</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4815e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.701e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5188e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.617e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.064e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.4628e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.363124291613355\n -0.7590191922770835\n  0.13584182219620722\n  0.15789998694608443\n  0.8767114411781325\n  1.5305929970973162\n  1.583573261186749\n  3.0728703303258698\n  3.1256726539518374\n  4.862107221562165\n  6.260694850380592\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nstop_after = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, stop_after, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing stop_after will stop the bulding process after the basis reaches a length of at least stop_after.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing stop_after will stop the bulding process after the basis reaches a length of at least stop_after.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
