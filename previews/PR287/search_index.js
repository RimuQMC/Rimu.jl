var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21550549567627514 ± 0.0015239471320964133\n   G2(1) = 0.9163850093722848 ± 0.0007134851033413017\n   G2(2) = 0.9818567527873451 ± 0.0005705523742779324\n   G2(3) = 0.9880109800044646 ± 0.0008822735483989898\n   G2(4) = 0.9818567527873451 ± 0.0005705523742779324\n   G2(5) = 0.9163850093722848 ± 0.0007134851033413017\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.039871696840666 ± 0.13590591068393862\n   Replica 2: -4.112303798918826 ± 0.1377384607738035\n   Replica 3: -3.949584140698965 ± 0.14296928297791872\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip230\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip231\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip232\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.9 2211.02,1003.9 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.934 2211.02,745.934 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.963 2211.02,487.963 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.992 2211.02,229.992 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.9 423.181,1003.9 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.934 423.181,745.934 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.963 423.181,487.963 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.992 423.181,229.992 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.24 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.24 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M290.043 1017.25 L306.363 1017.25 L306.363 1021.18 L284.418 1021.18 L284.418 1017.25 Q287.08 1014.49 291.664 1009.86 Q296.27 1005.21 297.451 1003.87 Q299.696 1001.35 300.576 999.61 Q301.478 997.851 301.478 996.161 Q301.478 993.407 299.534 991.671 Q297.613 989.935 294.511 989.935 Q292.312 989.935 289.858 990.698 Q287.427 991.462 284.65 993.013 L284.65 988.291 Q287.474 987.157 289.927 986.578 Q292.381 985.999 294.418 985.999 Q299.789 985.999 302.983 988.685 Q306.177 991.37 306.177 995.86 Q306.177 997.99 305.367 999.911 Q304.58 1001.81 302.474 1004.4 Q301.895 1005.07 298.793 1008.29 Q295.691 1011.49 290.043 1017.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M316.224 986.624 L334.58 986.624 L334.58 990.56 L320.506 990.56 L320.506 999.032 Q321.524 998.684 322.543 998.522 Q323.562 998.337 324.58 998.337 Q330.367 998.337 333.747 1001.51 Q337.126 1004.68 337.126 1010.1 Q337.126 1015.68 333.654 1018.78 Q330.182 1021.86 323.862 1021.86 Q321.687 1021.86 319.418 1021.49 Q317.173 1021.11 314.765 1020.37 L314.765 1015.68 Q316.849 1016.81 319.071 1017.36 Q321.293 1017.92 323.77 1017.92 Q327.774 1017.92 330.112 1015.81 Q332.45 1013.71 332.45 1010.1 Q332.45 1006.49 330.112 1004.38 Q327.774 1002.27 323.77 1002.27 Q321.895 1002.27 320.02 1002.69 Q318.168 1003.11 316.224 1003.99 L316.224 986.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M356.339 989.703 Q352.728 989.703 350.899 993.268 Q349.094 996.809 349.094 1003.94 Q349.094 1011.05 350.899 1014.61 Q352.728 1018.15 356.339 1018.15 Q359.973 1018.15 361.779 1014.61 Q363.608 1011.05 363.608 1003.94 Q363.608 996.809 361.779 993.268 Q359.973 989.703 356.339 989.703 M356.339 985.999 Q362.149 985.999 365.205 990.606 Q368.284 995.189 368.284 1003.94 Q368.284 1012.67 365.205 1017.27 Q362.149 1021.86 356.339 1021.86 Q350.529 1021.86 347.45 1017.27 Q344.395 1012.67 344.395 1003.94 Q344.395 995.189 347.45 990.606 Q350.529 985.999 356.339 985.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M286.062 728.654 L304.418 728.654 L304.418 732.589 L290.344 732.589 L290.344 741.061 Q291.363 740.714 292.381 740.552 Q293.4 740.367 294.418 740.367 Q300.205 740.367 303.585 743.538 Q306.964 746.709 306.964 752.126 Q306.964 757.704 303.492 760.806 Q300.02 763.885 293.701 763.885 Q291.525 763.885 289.256 763.515 Q287.011 763.144 284.603 762.403 L284.603 757.704 Q286.687 758.839 288.909 759.394 Q291.131 759.95 293.608 759.95 Q297.613 759.95 299.951 757.843 Q302.288 755.737 302.288 752.126 Q302.288 748.515 299.951 746.408 Q297.613 744.302 293.608 744.302 Q291.733 744.302 289.858 744.718 Q288.006 745.135 286.062 746.015 L286.062 728.654 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M326.177 731.732 Q322.566 731.732 320.737 735.297 Q318.932 738.839 318.932 745.968 Q318.932 753.075 320.737 756.64 Q322.566 760.181 326.177 760.181 Q329.811 760.181 331.617 756.64 Q333.446 753.075 333.446 745.968 Q333.446 738.839 331.617 735.297 Q329.811 731.732 326.177 731.732 M326.177 728.029 Q331.987 728.029 335.043 732.635 Q338.122 737.218 338.122 745.968 Q338.122 754.695 335.043 759.302 Q331.987 763.885 326.177 763.885 Q320.367 763.885 317.288 759.302 Q314.233 754.695 314.233 745.968 Q314.233 737.218 317.288 732.635 Q320.367 728.029 326.177 728.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M356.339 731.732 Q352.728 731.732 350.899 735.297 Q349.094 738.839 349.094 745.968 Q349.094 753.075 350.899 756.64 Q352.728 760.181 356.339 760.181 Q359.973 760.181 361.779 756.64 Q363.608 753.075 363.608 745.968 Q363.608 738.839 361.779 735.297 Q359.973 731.732 356.339 731.732 M356.339 728.029 Q362.149 728.029 365.205 732.635 Q368.284 737.218 368.284 745.968 Q368.284 754.695 365.205 759.302 Q362.149 763.885 356.339 763.885 Q350.529 763.885 347.45 759.302 Q344.395 754.695 344.395 745.968 Q344.395 737.218 347.45 732.635 Q350.529 728.029 356.339 728.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M284.835 470.683 L307.057 470.683 L307.057 472.674 L294.511 505.243 L289.627 505.243 L301.432 474.618 L284.835 474.618 L284.835 470.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M316.224 470.683 L334.58 470.683 L334.58 474.618 L320.506 474.618 L320.506 483.09 Q321.524 482.743 322.543 482.581 Q323.562 482.396 324.58 482.396 Q330.367 482.396 333.747 485.567 Q337.126 488.738 337.126 494.155 Q337.126 499.734 333.654 502.836 Q330.182 505.914 323.862 505.914 Q321.687 505.914 319.418 505.544 Q317.173 505.173 314.765 504.433 L314.765 499.734 Q316.849 500.868 319.071 501.423 Q321.293 501.979 323.77 501.979 Q327.774 501.979 330.112 499.873 Q332.45 497.766 332.45 494.155 Q332.45 490.544 330.112 488.437 Q327.774 486.331 323.77 486.331 Q321.895 486.331 320.02 486.748 Q318.168 487.164 316.224 488.044 L316.224 470.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M356.339 473.762 Q352.728 473.762 350.899 477.326 Q349.094 480.868 349.094 487.998 Q349.094 495.104 350.899 498.669 Q352.728 502.211 356.339 502.211 Q359.973 502.211 361.779 498.669 Q363.608 495.104 363.608 487.998 Q363.608 480.868 361.779 477.326 Q359.973 473.762 356.339 473.762 M356.339 470.058 Q362.149 470.058 365.205 474.664 Q368.284 479.248 368.284 487.998 Q368.284 496.724 365.205 501.331 Q362.149 505.914 356.339 505.914 Q350.529 505.914 347.45 501.331 Q344.395 496.724 344.395 487.998 Q344.395 479.248 347.45 474.664 Q350.529 470.058 356.339 470.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M256.664 243.337 L264.303 243.337 L264.303 216.971 L255.992 218.638 L255.992 214.379 L264.256 212.712 L268.932 212.712 L268.932 243.337 L276.571 243.337 L276.571 247.272 L256.664 247.272 L256.664 243.337 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M296.015 215.791 Q292.404 215.791 290.576 219.356 Q288.77 222.897 288.77 230.027 Q288.77 237.133 290.576 240.698 Q292.404 244.24 296.015 244.24 Q299.65 244.24 301.455 240.698 Q303.284 237.133 303.284 230.027 Q303.284 222.897 301.455 219.356 Q299.65 215.791 296.015 215.791 M296.015 212.087 Q301.826 212.087 304.881 216.694 Q307.96 221.277 307.96 230.027 Q307.96 238.754 304.881 243.36 Q301.826 247.944 296.015 247.944 Q290.205 247.944 287.127 243.36 Q284.071 238.754 284.071 230.027 Q284.071 221.277 287.127 216.694 Q290.205 212.087 296.015 212.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M326.177 215.791 Q322.566 215.791 320.737 219.356 Q318.932 222.897 318.932 230.027 Q318.932 237.133 320.737 240.698 Q322.566 244.24 326.177 244.24 Q329.811 244.24 331.617 240.698 Q333.446 237.133 333.446 230.027 Q333.446 222.897 331.617 219.356 Q329.811 215.791 326.177 215.791 M326.177 212.087 Q331.987 212.087 335.043 216.694 Q338.122 221.277 338.122 230.027 Q338.122 238.754 335.043 243.36 Q331.987 247.944 326.177 247.944 Q320.367 247.944 317.288 243.36 Q314.233 238.754 314.233 230.027 Q314.233 221.277 317.288 216.694 Q320.367 212.087 326.177 212.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M356.339 215.791 Q352.728 215.791 350.899 219.356 Q349.094 222.897 349.094 230.027 Q349.094 237.133 350.899 240.698 Q352.728 244.24 356.339 244.24 Q359.973 244.24 361.779 240.698 Q363.608 237.133 363.608 230.027 Q363.608 222.897 361.779 219.356 Q359.973 215.791 356.339 215.791 M356.339 212.087 Q362.149 212.087 365.205 216.694 Q368.284 221.277 368.284 230.027 Q368.284 238.754 365.205 243.36 Q362.149 247.944 356.339 247.944 Q350.529 247.944 347.45 243.36 Q344.395 238.754 344.395 230.027 Q344.395 221.277 347.45 216.694 Q350.529 212.087 356.339 212.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip232)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.992 4017.76,229.992 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.44 457.123,1250.26 457.691,1250.04 458.259,1248.72 458.828,1248.42 459.396,1248.03 459.964,1247.55 460.533,1245.96 461.101,1245.36 461.669,1244.68 462.238,1243.91 462.806,1242.01 463.375,1240.03 463.943,1239.04 464.511,1237.91 465.08,1236.71 465.648,1235.34 466.216,1233.9 466.785,1231.32 467.353,1229.63 467.921,1227.81 468.49,1224.83 469.058,1221.72 469.626,1218.47 470.195,1216.13 470.763,1213.62 471.331,1209.84 471.9,1205.98 472.468,1201.93 473.036,1198.77 473.605,1195.39 474.173,1191.83 474.741,1188.12 475.31,1184.21 475.878,1179.97 476.446,1175.63 477.015,1171.03 477.583,1166.16 478.152,1160.09 478.72,1154.88 479.288,1149.43 479.857,1142.72 480.425,1136.97 480.993,1126.8 481.562,1120.62 482.13,1114.12 482.698,1106.4 483.267,1097.53 483.835,1089.45 484.403,1080.14 484.972,1071.72 485.54,1064.14 486.108,1056.47 486.677,1046.45 487.245,1036.33 487.813,1027.07 488.382,1016.54 488.95,1006.98 489.518,996.293 490.087,984.501 490.655,974.684 491.224,962.732 491.792,951.812 492.36,941.94 492.929,933.032 493.497,923.909 494.065,913.796 494.634,902.476 495.202,892.27 495.77,879.856 496.339,868.553 496.907,859.319 497.475,847.944 498.044,838.647 498.612,827.363 499.18,814.098 499.749,802.95 500.317,792.794 500.885,783.656 501.454,773.49 502.022,760.3 502.59,749.521 503.159,740.772 503.727,731.019 504.295,721.417 504.864,709.831 505.432,700.468 506.001,688.222 506.569,678.982 507.137,668.863 507.706,659.868 508.274,647.891 508.842,640.296 509.411,631.684 509.979,624.325 510.547,616.971 511.116,606.497 511.684,599.478 512.252,589.312 512.821,580.387 513.389,571.662 513.957,562.945 514.526,556.604 515.094,545.273 515.662,539.432 516.231,532.736 516.799,524.96 517.367,519.171 517.936,511.706 518.504,503.198 519.072,498.204 519.641,492.05 520.209,486.787 520.778,478.728 521.346,470.902 521.914,465.35 522.483,459.895 523.051,455.636 523.619,450.261 524.188,444.114 524.756,438.997 525.324,433.906 525.893,429.984 526.461,426.346 527.029,423.662 527.598,418.548 528.166,414.694 528.734,409.043 529.303,405.641 529.871,400.12 530.439,396.739 531.008,393.433 531.576,387.025 532.144,382.772 532.713,380.822 533.281,376.8 533.85,369.934 534.418,365.191 534.986,362.584 535.555,359.327 536.123,352.774 536.691,350.723 537.26,347.758 537.828,344.647 538.396,340.715 538.965,338.952 539.533,335.967 540.101,334.28 540.67,332.739 541.238,330.945 541.806,324.056 542.375,322.844 542.943,319.354 543.511,319.22 544.08,319.029 544.648,316.721 545.216,315.406 545.785,312.12 546.353,309.865 546.921,307.842 547.49,305.929 548.058,305.811 548.627,303.272 549.195,302.242 549.763,295.978 550.332,294.121 550.9,291.593 551.468,291.118 552.037,290.681 552.605,289.031 553.173,288.62 553.742,286.175 554.31,285.663 554.878,284.155 555.447,283.801 556.015,282.18 556.583,283.625 557.152,283.171 557.72,280.407 558.288,280.148 558.857,279.651 559.425,278.125 559.993,277.754 560.562,275.237 561.13,272.894 561.698,270.513 562.267,270.26 562.835,269.085 563.404,268.849 563.972,267.543 564.54,268.628 565.109,266.443 565.677,266.152 566.245,265.943 566.814,265.96 567.382,265.947 567.95,265.498 568.519,264.388 569.087,267.281 569.655,266.899 570.224,267.332 570.792,267.742 571.36,266.095 571.929,262.457 572.497,263.338 573.065,263.845 573.634,262.118 574.202,258.842 574.77,257.786 575.339,255.744 575.907,255.77 576.476,256.862 577.044,255.627 577.612,255.562 578.181,257.676 578.749,258.364 579.317,258.096 579.886,254.615 580.454,254.303 581.022,256.248 581.591,255.126 582.159,257.792 582.727,256.403 583.296,256.147 583.864,254.777 584.432,254.21 585.001,251.727 585.569,251.54 586.137,252.291 586.706,252.935 587.274,252.63 587.842,250.216 588.411,249.971 588.979,250.917 589.547,248.833 590.116,247.801 590.684,248.836 591.253,248.468 591.821,248.184 592.389,247.889 592.958,246.734 593.526,246.725 594.094,246.751 594.663,250.722 595.231,249.262 595.799,247.785 596.368,244.5 596.936,243.41 597.504,243.334 598.073,241.142 598.641,239.364 599.209,239.867 599.778,240.182 600.346,241.122 600.914,241.19 601.483,242.47 602.051,241.497 602.619,241.67 603.188,243.87 603.756,241.729 604.325,240.736 604.893,238.764 605.461,240.117 606.03,240.286 606.598,241.277 607.166,242.267 607.735,242.227 608.303,242.078 608.871,239.267 609.44,237.529 610.008,237.729 610.576,239.09 611.145,235.234 611.713,234.781 612.281,234.295 612.85,235.982 613.418,236.476 613.986,236.752 614.555,237.272 615.123,237.399 615.691,237.546 616.26,238.895 616.828,239.235 617.396,239.375 617.965,240.657 618.533,241.787 619.102,240.844 619.67,242.732 620.238,242.426 620.807,241.191 621.375,242.492 621.943,240.291 622.512,240.219 623.08,240.353 623.648,239.434 624.217,241.392 624.785,241.319 625.353,241.22 625.922,241.139 626.49,242.141 627.058,240.788 627.627,240.596 628.195,237.391 628.763,240.572 629.332,241.46 629.9,240.266 630.468,242.091 631.037,241.989 631.605,240.897 632.173,239.58 632.742,238.422 633.31,237.257 633.879,233.019 634.447,230.231 635.015,232.677 635.584,232.105 636.152,231.702 636.72,231.264 637.289,232.561 637.857,234.035 638.425,234.301 638.994,234.701 639.562,232.756 640.13,232.3 640.699,229.482 641.267,229.139 641.835,229.642 642.404,232.149 642.972,232.249 643.54,232.623 644.109,234.139 644.677,233.237 645.245,236.578 645.814,237.866 646.382,236.76 646.951,236.757 647.519,237.73 648.087,236.856 648.656,238.979 649.224,236.868 649.792,235.889 650.361,234.888 650.929,234.986 651.497,235.223 652.066,237.496 652.634,237.434 653.202,237.122 653.771,234.267 654.339,236.529 654.907,236.592 655.476,237.64 656.044,237.559 656.612,237.654 657.181,238.438 657.749,238.096 658.317,238.152 658.886,237.012 659.454,235.888 660.022,234.881 660.591,237.167 661.159,238.036 661.728,235.898 662.296,237.918 662.864,237.896 663.433,236.781 664.001,235.695 664.569,236.62 665.138,233.373 665.706,234.488 666.274,233.454 666.843,233.388 667.411,233.545 667.979,233.892 668.548,233.014 669.116,234.075 669.684,234.161 670.253,234.223 670.821,234.202 671.389,234.189 671.958,237.128 672.526,238.056 673.094,236.682 673.663,236.517 674.231,236.413 674.799,237.541 675.368,235.266 675.936,236.398 676.505,236.243 677.073,234.257 677.641,235.264 678.21,235.116 678.778,235.934 679.346,234.725 679.915,235.635 680.483,233.499 681.051,233.638 681.62,234.686 682.188,235.604 682.756,237.463 683.325,236.01 683.893,235.933 684.461,235.635 685.03,234.48 685.598,235.337 686.166,235.258 686.735,235.257 687.303,233.077 687.871,233.031 688.44,232.151 689.008,231.313 689.577,231.426 690.145,232.793 690.713,232.739 691.282,231.945 691.85,234.064 692.418,233.18 692.987,231.827 693.555,232.123 694.123,234.285 694.692,235.155 695.26,230.806 695.828,229.851 696.397,227.887 696.965,228.36 697.533,228.683 698.102,229.135 698.67,230.546 699.238,230.737 699.807,231.946 700.375,232.03 700.943,231.967 701.512,231.176 702.08,231.165 702.648,231.307 703.217,229.629 703.785,230.07 704.354,229.345 704.922,228.469 705.49,229.036 706.059,226.232 706.627,227.695 707.195,227.902 707.764,229.464 708.332,229.79 708.9,226.12 709.469,226.78 710.037,227.291 710.605,226.812 711.174,227.283 711.742,226.864 712.31,228.248 712.879,227.706 713.447,229.344 714.015,230.821 714.584,229.889 715.152,229.013 715.72,231.139 716.289,230.25 716.857,231.72 717.425,230.736 717.994,231.011 718.562,233.314 719.131,232.468 719.699,233.729 720.267,233.533 720.836,232.648 721.404,231.737 721.972,229.863 722.541,231.544 723.109,232.979 723.677,232.958 724.246,232.057 724.814,231.215 725.382,230.691 725.951,229.762 726.519,231.267 727.087,230.715 727.656,230.843 728.224,228.928 728.792,230.549 729.361,229.762 729.929,230.334 730.497,229.63 731.066,231.02 731.634,233.319 732.203,232.297 732.771,234.531 733.339,233.345 733.908,234.351 734.476,236.39 735.044,234.344 735.613,234.241 736.181,234.194 736.749,233.226 737.318,233.265 737.886,233.113 738.454,230.201 739.023,229.631 739.591,228.922 740.159,229.036 740.728,230.387 741.296,230.753 741.864,228.923 742.433,230.251 743.001,232.298 743.569,236.486 744.138,236.572 744.706,237.377 745.274,236.117 745.843,237.847 746.411,233.468 746.98,232.448 747.548,231.511 748.116,232.535 748.685,233.68 749.253,234.752 749.821,234.858 750.39,234.551 750.958,233.439 751.526,235.276 752.095,235.077 752.663,233.102 753.231,233.198 753.8,234.28 754.368,233.132 754.936,234.249 755.505,233.98 756.073,231.953 756.641,233.07 757.21,233.178 757.778,233.404 758.346,234.234 758.915,235.149 759.483,234.931 760.052,234.622 760.62,233.663 761.188,232.399 761.757,230.382 762.325,232.68 762.893,235.774 763.462,235.388 764.03,233.971 764.598,237.741 765.167,237.439 765.735,236.957 766.303,236.65 766.872,236.107 767.44,233.676 768.008,232.444 768.577,233.321 769.145,233.102 769.713,232.949 770.282,234.938 770.85,235.648 771.418,235.376 771.987,235.09 772.555,235.859 773.123,235.642 773.692,235.264 774.26,237.979 774.829,237.475 775.397,235.983 775.965,234.516 776.534,232.987 777.102,232.787 777.67,233.541 778.239,234.415 778.807,234.177 779.375,235.016 779.944,233.824 780.512,233.518 781.08,233.126 781.649,231.948 782.217,231.72 782.785,231.546 783.354,228.436 783.922,229.638 784.49,229.657 785.059,228.893 785.627,226.697 786.195,226.666 786.764,228.909 787.332,228.893 787.9,229.099 788.469,231.502 789.037,231.371 789.606,231.44 790.174,230.453 790.742,229.446 791.311,229.45 791.879,229.473 792.447,228.563 793.016,225.504 793.584,229.058 794.152,226.012 794.721,225.308 795.289,224.71 795.857,224.112 796.426,223.614 796.994,225.236 797.562,223.516 798.131,224.95 798.699,222.442 799.267,223.014 799.836,223.606 800.404,224.136 800.972,226.9 801.541,228.198 802.109,229.496 802.678,229.657 803.246,231.721 803.814,231.6 804.383,232.835 804.951,232.877 805.519,232.697 806.088,233.715 806.656,233.6 807.224,234.474 807.793,233.423 808.361,234.144 808.929,234.336 809.498,233.23 810.066,233.139 810.634,233.082 811.203,234.04 811.771,231.974 812.339,232.702 812.908,232.45 813.476,231.191 814.044,230.29 814.613,229.269 815.181,230.565 815.749,231.376 816.318,231.691 816.886,232.671 817.455,232.29 818.023,232.22 818.591,233.122 819.16,231.708 819.728,231.773 820.296,230.775 820.865,230.789 821.433,231.621 822.001,233.526 822.57,234.245 823.138,235.17 823.706,235.84 824.275,234.437 824.843,234.474 825.411,235.214 825.98,235.936 826.548,234.318 827.116,234.932 827.685,234.585 828.253,234.343 828.821,234.092 829.39,232.695 829.958,234.609 830.526,234.366 831.095,234.061 831.663,232.667 832.232,232.423 832.8,229.929 833.368,232.952 833.937,229.591 834.505,230.752 835.073,232.622 835.642,235.695 836.21,234.203 836.778,234.813 837.347,232.324 837.915,230.027 838.483,232.003 839.052,231.774 839.62,230.597 840.188,228.457 840.757,229.601 841.325,228.624 841.893,228.582 842.462,227.512 843.03,227.978 843.598,227.07 844.167,225.169 844.735,225.419 845.304,222.334 845.872,223.768 846.44,226.404 847.009,226.526 847.577,227.899 848.145,227.949 848.714,228.005 849.282,228.105 849.85,228.114 850.419,224.237 850.987,225.568 851.555,225.861 852.124,224.827 852.692,226.281 853.26,228.649 853.829,228.889 854.397,227.936 854.965,226.028 855.534,228.304 856.102,230.535 856.67,229.383 857.239,229.481 857.807,227.2 858.375,226.29 858.944,225.5 859.512,226.878 860.081,226.061 860.649,225.501 861.217,226.401 861.786,226.896 862.354,229.282 862.922,229.262 863.491,228.297 864.059,226.424 864.627,225.72 865.196,226.17 865.764,227.635 866.332,224.683 866.901,226.008 867.469,227.385 868.037,226.577 868.606,226.098 869.174,226.42 869.742,227.707 870.311,227.986 870.879,227.884 871.447,227.225 872.016,227.262 872.584,227.545 873.152,227.888 873.721,229.424 874.289,228.63 874.858,230.89 875.426,234.019 875.994,232.954 876.563,234.781 877.131,233.481 877.699,233.557 878.268,233.267 878.836,234.444 879.404,234.386 879.973,234.248 880.541,233.029 881.109,231.823 881.678,230.908 882.246,231.981 882.814,232.07 883.383,233.051 883.951,229.83 884.519,228.856 885.088,227.999 885.656,228.421 886.224,229.456 886.793,227.768 887.361,226.188 887.93,227.581 888.498,227.878 889.066,230.259 889.635,231.093 890.203,231.082 890.771,230.96 891.34,233.177 891.908,233.008 892.476,232.767 893.045,231.57 893.613,229.245 894.181,229.33 894.75,228.539 895.318,227.752 895.886,225.85 896.455,226.323 897.023,226.454 897.591,227.896 898.16,227.105 898.728,229.646 899.296,230.827 899.865,230.787 900.433,230.857 901.001,232.897 901.57,232.857 902.138,231.621 902.707,229.51 903.275,229.707 903.843,231.033 904.412,227.982 904.98,228.324 905.548,225.496 906.117,224.935 906.685,223.558 907.253,223.207 907.822,222.837 908.39,225.536 908.958,229.205 909.527,229.632 910.095,228.825 910.663,227.962 911.232,230.422 911.8,228.539 912.368,227.895 912.937,228.374 913.505,229.722 914.073,230.997 914.642,231.282 915.21,229.514 915.779,227.583 916.347,227.843 916.915,230.508 917.484,229.759 918.052,232.068 918.62,233.978 919.189,231.893 919.757,232.025 920.325,233.115 920.894,235.059 921.462,236.77 922.03,237.382 922.599,237.035 923.167,235.656 923.735,234.213 924.304,235.104 924.872,234.986 925.44,234.701 926.009,234.533 926.577,235.399 927.145,234.34 927.714,235.271 928.282,235.098 928.85,233.75 929.419,231.439 929.987,229.077 930.556,226.066 931.124,226.496 931.692,223.761 932.261,225.383 932.829,226.052 933.397,227.452 933.966,228.666 934.534,227.88 935.102,228.081 935.671,229.162 936.239,229.423 936.807,230.547 937.376,232.63 937.944,231.496 938.512,232.864 939.081,230.83 939.649,232.857 940.217,232.521 940.786,232.491 941.354,233.565 941.922,234.52 942.491,231.29 943.059,231.348 943.627,232.206 944.196,236.503 944.764,234.854 945.333,235.557 945.901,236.121 946.469,237.615 947.038,237.078 947.606,235.706 948.174,236.323 948.743,234.018 949.311,232.756 949.879,232.394 950.448,234.294 951.016,235.14 951.584,233.689 952.153,235.65 952.721,235.248 953.289,235.03 953.858,235.914 954.426,234.428 954.994,234.117 955.563,233.885 956.131,232.623 956.699,231.458 957.268,231.66 957.836,230.517 958.405,230.425 958.973,231.427 959.541,230.4 960.11,232.097 960.678,231.915 961.246,233.801 961.815,233.305 962.383,233.174 962.951,230.853 963.52,229.762 964.088,229.898 964.656,230.904 965.225,229.522 965.793,229.552 966.361,229.565 966.93,228.426 967.498,227.369 968.066,228.653 968.635,228.897 969.203,232.078 969.771,231.875 970.34,230.781 970.908,230.711 971.476,230.581 972.045,230.362 972.613,230.423 973.182,231.445 973.75,232.229 974.318,231.764 974.887,233.596 975.455,233.28 976.023,232.993 976.592,233.961 977.16,232.567 977.728,232.289 978.297,232.141 978.865,229.968 979.433,230.979 980.002,231.893 980.57,229.761 981.138,228.765 981.707,228.86 982.275,230.999 982.843,230.865 983.412,231.586 983.98,232.534 984.548,232.136 985.117,232.112 985.685,231.824 986.253,234.476 986.822,231.858 987.39,229.53 987.959,228.537 988.527,230.338 989.095,230.308 989.664,229.157 990.232,227.894 990.8,227.814 991.369,229.902 991.937,229.779 992.505,229.688 993.074,229.474 993.642,227.255 994.21,228.446 994.779,229.484 995.347,228.543 995.915,227.511 996.484,226.598 997.052,227.903 997.62,229.898 998.189,229.999 998.757,228.039 999.325,228.209 999.894,227.092 1000.46,227.244 1001.03,226.544 1001.6,228.807 1002.17,229.966 1002.74,230.996 1003.3,229.96 1003.87,227.134 1004.44,226.465 1005.01,225.672 1005.58,226.961 1006.15,227.429 1006.71,227.655 1007.28,228.88 1007.85,229.042 1008.42,232.268 1008.99,232.032 1009.56,230.096 1010.12,228.954 1010.69,230.179 1011.26,228.374 1011.83,228.576 1012.4,228.538 1012.97,227.649 1013.53,227.864 1014.1,228.841 1014.67,228.913 1015.24,229.035 1015.81,229.241 1016.38,231.297 1016.94,230.639 1017.51,232.603 1018.08,234.402 1018.65,232.91 1019.22,232.443 1019.79,232.223 1020.35,231.883 1020.92,231.717 1021.49,227.231 1022.06,227.425 1022.63,228.657 1023.2,227.538 1023.76,227.882 1024.33,226.206 1024.9,227.389 1025.47,229.638 1026.04,229.728 1026.61,228.745 1027.17,227.903 1027.74,229.199 1028.31,230.345 1028.88,229.537 1029.45,229.521 1030.02,229.701 1030.58,228.867 1031.15,228.887 1031.72,231.058 1032.29,232.054 1032.86,231.924 1033.43,230.673 1033.99,228.53 1034.56,228.655 1035.13,227.726 1035.7,227.868 1036.27,228.176 1036.84,226.477 1037.4,227.888 1037.97,228.111 1038.54,229.43 1039.11,228.576 1039.68,229.606 1040.25,232.854 1040.81,232.671 1041.38,234.7 1041.95,236.364 1042.52,232.745 1043.09,230.464 1043.66,230.344 1044.22,230.451 1044.79,231.292 1045.36,231.281 1045.93,231.053 1046.5,229.835 1047.07,229.689 1047.63,230.709 1048.2,231.578 1048.77,231.517 1049.34,230.13 1049.91,231.345 1050.48,232.363 1051.05,233.101 1051.61,231.643 1052.18,232.314 1052.75,232.217 1053.32,232.126 1053.89,233.072 1054.46,231.749 1055.02,229.686 1055.59,229.552 1056.16,230.702 1056.73,231.552 1057.3,232.529 1057.87,231.11 1058.43,231.954 1059,230.583 1059.57,230.591 1060.14,229.626 1060.71,227.407 1061.28,226.437 1061.84,227.571 1062.41,228.825 1062.98,229.719 1063.55,229.633 1064.12,230.79 1064.69,229.797 1065.25,231.017 1065.82,230.902 1066.39,230.886 1066.96,229.627 1067.53,229.712 1068.1,229.504 1068.66,230.606 1069.23,230.633 1069.8,230.732 1070.37,228.462 1070.94,227.48 1071.51,228.786 1072.07,228.758 1072.64,228.068 1073.21,229.15 1073.78,231.379 1074.35,232.416 1074.92,232.239 1075.48,232.26 1076.05,235.312 1076.62,233.084 1077.19,230.501 1077.76,230.565 1078.33,229.404 1078.89,229.441 1079.46,230.471 1080.03,229.742 1080.6,228.786 1081.17,227.901 1081.74,229.089 1082.3,228.296 1082.87,227.183 1083.44,227.205 1084.01,229.264 1084.58,228.315 1085.15,228.527 1085.71,227.505 1086.28,228.594 1086.85,225.332 1087.42,225.89 1087.99,226.397 1088.56,225.775 1089.12,226.253 1089.69,228.777 1090.26,230.059 1090.83,229.015 1091.4,229.279 1091.97,230.542 1092.53,229.581 1093.1,225.548 1093.67,226.756 1094.24,225.034 1094.81,225.39 1095.38,226.645 1095.94,226.941 1096.51,229.452 1097.08,230.339 1097.65,229.337 1098.22,229.249 1098.79,229.694 1099.35,229.725 1099.92,227.716 1100.49,226.914 1101.06,227.222 1101.63,227.671 1102.2,226.659 1102.76,229.14 1103.33,227.058 1103.9,226.448 1104.47,226.843 1105.04,230.498 1105.61,232.476 1106.17,234.304 1106.74,234.196 1107.31,232.914 1107.88,230.715 1108.45,232.724 1109.02,232.442 1109.58,229.234 1110.15,228.403 1110.72,233.8 1111.29,234.885 1111.86,235.545 1112.43,235.233 1112.99,230.97 1113.56,230.167 1114.13,230.128 1114.7,231.225 1115.27,231.114 1115.84,230.046 1116.4,230.167 1116.97,228.346 1117.54,231.638 1118.11,230.36 1118.68,230.288 1119.25,230.266 1119.81,231.335 1120.38,232.287 1120.95,231.434 1121.52,232.456 1122.09,233.375 1122.66,236.187 1123.23,234.567 1123.79,234.223 1124.36,233.967 1124.93,232.89 1125.5,231.918 1126.07,230.826 1126.64,230.666 1127.2,230.593 1127.77,230.736 1128.34,231.708 1128.91,230.697 1129.48,231.728 1130.05,234.492 1130.61,235.082 1131.18,235.587 1131.75,236.176 1132.32,236.748 1132.89,236.174 1133.46,235.678 1134.02,234.985 1134.59,233.441 1135.16,231.995 1135.73,233.926 1136.3,231.522 1136.87,232.261 1137.43,232.861 1138,231.618 1138.57,231.294 1139.14,230.026 1139.71,230.134 1140.28,229.081 1140.84,228.991 1141.41,228.862 1141.98,229.106 1142.55,230.202 1143.12,229.079 1143.69,228.968 1144.25,228.9 1144.82,228.96 1145.39,228.031 1145.96,227.216 1146.53,224.276 1147.1,226.795 1147.66,226.868 1148.23,229.064 1148.8,225.049 1149.37,224.436 1149.94,223.881 1150.51,225.313 1151.07,226.59 1151.64,226.641 1152.21,225.944 1152.78,227.166 1153.35,227.259 1153.92,227.539 1154.48,227.876 1155.05,226.967 1155.62,225.032 1156.19,225.397 1156.76,225.635 1157.33,226.112 1157.89,226.344 1158.46,226.649 1159.03,227.07 1159.6,228.289 1160.17,229.489 1160.74,228.414 1161.3,230.32 1161.87,231.316 1162.44,232.16 1163.01,231.985 1163.58,231.782 1164.15,231.812 1164.71,230.701 1165.28,232.73 1165.85,231.333 1166.42,232.463 1166.99,231.191 1167.56,231.261 1168.12,232.188 1168.69,232.2 1169.26,233.053 1169.83,230.837 1170.4,228.706 1170.97,226.01 1171.53,228.377 1172.1,227.662 1172.67,227.918 1173.24,229.417 1173.81,230.538 1174.38,230.424 1174.94,231.525 1175.51,231.364 1176.08,229.3 1176.65,227.145 1177.22,226.43 1177.79,224.538 1178.35,226.997 1178.92,224.235 1179.49,223.593 1180.06,224.006 1180.63,224.412 1181.2,224.974 1181.76,226.495 1182.33,227.997 1182.9,229.416 1183.47,230.715 1184.04,230.865 1184.61,229.801 1185.17,231.823 1185.74,233.917 1186.31,233.854 1186.88,233.605 1187.45,234.439 1188.02,235.133 1188.58,235.66 1189.15,236.236 1189.72,237.085 1190.29,237.446 1190.86,235.747 1191.43,234.176 1192,237.059 1192.56,236.614 1193.13,236.931 1193.7,237.159 1194.27,237.654 1194.84,240.282 1195.41,238.549 1195.97,236.934 1196.54,238.522 1197.11,235.755 1197.68,234.4 1198.25,233.215 1198.82,232.841 1199.38,232.7 1199.95,233.639 1200.52,235.623 1201.09,235.076 1201.66,235.726 1202.23,235.133 1202.79,234.686 1203.36,235.307 1203.93,234.656 1204.5,234.241 1205.07,231.529 1205.64,231.394 1206.2,230.488 1206.77,231.208 1207.34,231.083 1207.91,227.714 1208.48,227.672 1209.05,227.848 1209.61,228.039 1210.18,230.114 1210.75,230.013 1211.32,230.82 1211.89,230.642 1212.46,229.495 1213.02,230.282 1213.59,230.155 1214.16,229.831 1214.73,228.64 1215.3,229.646 1215.87,228.551 1216.43,228.496 1217,228.207 1217.57,228.317 1218.14,228.294 1218.71,227.412 1219.28,227.556 1219.84,227.434 1220.41,227.446 1220.98,228.496 1221.55,227.669 1222.12,226.704 1222.69,226.758 1223.25,226.865 1223.82,228.029 1224.39,230.136 1224.96,230.125 1225.53,231.906 1226.1,231.661 1226.66,230.668 1227.23,230.642 1227.8,229.426 1228.37,230.306 1228.94,231.16 1229.51,232.093 1230.07,232.904 1230.64,233.509 1231.21,232.993 1231.78,232.661 1232.35,232.346 1232.92,230.81 1233.48,230.828 1234.05,228.541 1234.62,227.298 1235.19,227.232 1235.76,226.252 1236.33,225.423 1236.89,225.463 1237.46,225.872 1238.03,226.055 1238.6,226.233 1239.17,227.294 1239.74,223.295 1240.3,225.783 1240.87,223.979 1241.44,223.484 1242.01,222.914 1242.58,222.268 1243.15,219.895 1243.71,220.522 1244.28,224.467 1244.85,223.803 1245.42,224.276 1245.99,224.658 1246.56,224.069 1247.12,223.505 1247.69,222.961 1248.26,225.717 1248.83,225.989 1249.4,226.392 1249.97,227.636 1250.53,227.901 1251.1,229.073 1251.67,229.171 1252.24,229.275 1252.81,229.551 1253.38,229.703 1253.94,230.765 1254.51,228.632 1255.08,226.779 1255.65,228.145 1256.22,227.347 1256.79,228.378 1257.35,227.764 1257.92,227.936 1258.49,229.024 1259.06,228.925 1259.63,228.157 1260.2,228.337 1260.76,228.714 1261.33,228.942 1261.9,227.948 1262.47,228.178 1263.04,228.38 1263.61,228.581 1264.18,227.77 1264.74,228.862 1265.31,228.239 1265.88,229.456 1266.45,231.632 1267.02,230.468 1267.59,230.351 1268.15,231.517 1268.72,232.737 1269.29,233.663 1269.86,232.55 1270.43,231.069 1271,232.878 1271.56,234.057 1272.13,234.763 1272.7,233.587 1273.27,234.325 1273.84,238.005 1274.41,236.546 1274.97,236.154 1275.54,233.592 1276.11,231.656 1276.68,230.684 1277.25,232.902 1277.82,232.648 1278.38,233.364 1278.95,233.087 1279.52,232.006 1280.09,231.166 1280.66,232.169 1281.23,229.766 1281.79,229.673 1282.36,227.552 1282.93,227.661 1283.5,228.893 1284.07,230.057 1284.64,228.047 1285.2,227.09 1285.77,227.247 1286.34,227.463 1286.91,227.732 1287.48,228.922 1288.05,227.008 1288.61,228.319 1289.18,227.572 1289.75,227.968 1290.32,227.33 1290.89,228.567 1291.46,230.18 1292.02,229.313 1292.59,228.444 1293.16,230.652 1293.73,231.826 1294.3,232.868 1294.87,233.955 1295.43,233.856 1296,232.518 1296.57,233.207 1297.14,231.865 1297.71,232.874 1298.28,232.608 1298.84,232.506 1299.41,232.119 1299.98,232.968 1300.55,231.822 1301.12,231.612 1301.69,231.616 1302.25,233.492 1302.82,234.249 1303.39,232.952 1303.96,232.661 1304.53,232.335 1305.1,231.954 1305.66,230.855 1306.23,227.65 1306.8,225.562 1307.37,226.92 1307.94,230.115 1308.51,230.868 1309.07,230.695 1309.64,229.828 1310.21,230.734 1310.78,227.432 1311.35,228.8 1311.92,229.018 1312.48,228.078 1313.05,229.045 1313.62,229.981 1314.19,230.935 1314.76,230.82 1315.33,231.674 1315.89,232.509 1316.46,233.201 1317.03,233.148 1317.6,232.057 1318.17,231.904 1318.74,230.585 1319.3,229.47 1319.87,227.417 1320.44,227.54 1321.01,227.716 1321.58,225.848 1322.15,228.305 1322.71,228.622 1323.28,229.915 1323.85,229.921 1324.42,229.92 1324.99,229.953 1325.56,228.705 1326.12,229.892 1326.69,229.86 1327.26,229.969 1327.83,230.833 1328.4,231.91 1328.97,232.769 1329.53,233.357 1330.1,233.105 1330.67,231.828 1331.24,231.832 1331.81,232.613 1332.38,231.143 1332.94,227.878 1333.51,227.144 1334.08,226.454 1334.65,226.666 1335.22,225.9 1335.79,226.118 1336.36,226.519 1336.92,226.853 1337.49,227.286 1338.06,225.413 1338.63,226.806 1339.2,227.246 1339.77,226.32 1340.33,226.584 1340.9,226.958 1341.47,226.189 1342.04,228.333 1342.61,229.393 1343.18,229.426 1343.74,229.405 1344.31,228.494 1344.88,229.622 1345.45,228.78 1346.02,228.877 1346.59,228.849 1347.15,228.941 1347.72,228.107 1348.29,228.306 1348.86,227.829 1349.43,226.921 1350,226.233 1350.56,224.34 1351.13,224.9 1351.7,225.476 1352.27,224.559 1352.84,222.949 1353.41,224.281 1353.97,225.62 1354.54,225.985 1355.11,226.418 1355.68,227.884 1356.25,226.877 1356.82,226.411 1357.38,227.738 1357.95,227.067 1358.52,226.373 1359.09,228.617 1359.66,230.019 1360.23,228.924 1360.79,231.216 1361.36,230.215 1361.93,232.432 1362.5,230.041 1363.07,230.243 1363.64,231.275 1364.2,231.121 1364.77,231.048 1365.34,230.927 1365.91,230.792 1366.48,228.787 1367.05,230 1367.61,229.13 1368.18,229.486 1368.75,229.813 1369.32,229.988 1369.89,229.24 1370.46,230.251 1371.02,230.068 1371.59,232.191 1372.16,231.251 1372.73,235.298 1373.3,237.067 1373.87,237.551 1374.43,239.998 1375,239.337 1375.57,236.549 1376.14,237.231 1376.71,236.811 1377.28,236.58 1377.84,233.888 1378.41,234.963 1378.98,236.538 1379.55,237.11 1380.12,236.705 1380.69,236.143 1381.25,235.676 1381.82,234.361 1382.39,231.79 1382.96,231.777 1383.53,230.739 1384.1,232.625 1384.66,230.367 1385.23,230.277 1385.8,230.489 1386.37,229.362 1386.94,227.323 1387.51,225.44 1388.07,225.786 1388.64,226.115 1389.21,226.505 1389.78,226.628 1390.35,227.93 1390.92,226.925 1391.48,226.993 1392.05,227.251 1392.62,228.657 1393.19,226.754 1393.76,227.136 1394.33,227.394 1394.89,231.726 1395.46,232.843 1396.03,231.685 1396.6,232.67 1397.17,234.561 1397.74,235.128 1398.3,233.688 1398.87,232.41 1399.44,229.133 1400.01,228.042 1400.58,230.155 1401.15,230.271 1401.71,230.294 1402.28,230.449 1402.85,231.559 1403.42,231.685 1403.99,232.831 1404.56,230.68 1405.13,229.571 1405.69,228.5 1406.26,227.45 1406.83,230.7 1407.4,231.642 1407.97,233.525 1408.54,236.287 1409.1,235.048 1409.67,234.618 1410.24,235.321 1410.81,235.776 1411.38,233.401 1411.95,235.199 1412.51,235.701 1413.08,236.561 1413.65,237.184 1414.22,234.736 1414.79,233.219 1415.36,231.815 1415.92,231.48 1416.49,231.32 1417.06,231.252 1417.63,229.157 1418.2,228.939 1418.77,226.723 1419.33,225.649 1419.9,225.963 1420.47,225.028 1421.04,227.434 1421.61,228.694 1422.18,228.791 1422.74,229.116 1423.31,228.204 1423.88,227.193 1424.45,228.288 1425.02,227.124 1425.59,227.325 1426.15,227.453 1426.72,228.697 1427.29,227.698 1427.86,227.808 1428.43,230.277 1429,230.162 1429.56,234.103 1430.13,235.705 1430.7,237.431 1431.27,234.888 1431.84,236.634 1432.41,237.096 1432.97,237.587 1433.54,237.854 1434.11,235.259 1434.68,231.999 1435.25,232.699 1435.82,231.373 1436.38,230.26 1436.95,230.208 1437.52,229.03 1438.09,228.88 1438.66,227.703 1439.23,225.713 1439.79,226.017 1440.36,226.358 1440.93,225.521 1441.5,225.861 1442.07,227.944 1442.64,227.003 1443.2,228.011 1443.77,227.143 1444.34,228.262 1444.91,229.545 1445.48,230.655 1446.05,231.422 1446.61,231.3 1447.18,230.451 1447.75,231.36 1448.32,231.289 1448.89,231.287 1449.46,232.262 1450.02,231.152 1450.59,232.958 1451.16,232.506 1451.73,233.445 1452.3,233.136 1452.87,231.832 1453.43,230.381 1454,231.262 1454.57,229.924 1455.14,229.885 1455.71,228.601 1456.28,228.815 1456.84,228.864 1457.41,229.746 1457.98,231.596 1458.55,230.395 1459.12,230.128 1459.69,228.018 1460.25,225.936 1460.82,226.094 1461.39,227.383 1461.96,226.617 1462.53,227.703 1463.1,229.005 1463.66,227.903 1464.23,227.944 1464.8,232.078 1465.37,231.849 1465.94,228.655 1466.51,228.772 1467.07,228.817 1467.64,229.758 1468.21,228.675 1468.78,228.674 1469.35,228.643 1469.92,229.934 1470.48,228.819 1471.05,228.974 1471.62,227.895 1472.19,227.124 1472.76,228.285 1473.33,226.966 1473.89,227.122 1474.46,226.297 1475.03,224.435 1475.6,225.077 1476.17,228.248 1476.74,229.41 1477.31,229.363 1477.87,229.539 1478.44,229.611 1479.01,230.586 1479.58,229.564 1480.15,230.618 1480.72,230.543 1481.28,231.472 1481.85,229.365 1482.42,229.338 1482.99,230.511 1483.56,230.325 1484.13,230.092 1484.69,229.048 1485.26,229.171 1485.83,230.575 1486.4,229.708 1486.97,228.813 1487.54,229.891 1488.1,230.854 1488.67,231.907 1489.24,227.677 1489.81,228.11 1490.38,229.495 1490.95,229.666 1491.51,229.745 1492.08,228.95 1492.65,228.102 1493.22,228.18 1493.79,229.269 1494.36,232.347 1494.92,232.349 1495.49,231.134 1496.06,230.817 1496.63,229.795 1497.2,226.475 1497.77,227.692 1498.33,229.792 1498.9,228.769 1499.47,226.893 1500.04,229.128 1500.61,231.304 1501.18,234.522 1501.74,231.277 1502.31,231.147 1502.88,232.182 1503.45,232.103 1504.02,234.875 1504.59,233.527 1505.15,233.197 1505.72,231.954 1506.29,233.906 1506.86,232.676 1507.43,232.594 1508,231.25 1508.56,230.915 1509.13,229.965 1509.7,228.668 1510.27,228.583 1510.84,227.612 1511.41,225.786 1511.97,226.192 1512.54,226.604 1513.11,226.817 1513.68,228.048 1514.25,225.035 1514.82,227.461 1515.38,229.565 1515.95,230.658 1516.52,228.692 1517.09,227.842 1517.66,228.867 1518.23,231.83 1518.79,229.707 1519.36,227.712 1519.93,227.871 1520.5,227.91 1521.07,229.046 1521.64,229.302 1522.2,229.304 1522.77,229.403 1523.34,229.506 1523.91,226.276 1524.48,225.496 1525.05,224.823 1525.61,224.146 1526.18,222.686 1526.75,223.355 1527.32,223.926 1527.89,225.455 1528.46,225.843 1529.02,225.303 1529.59,223.711 1530.16,224.286 1530.73,224.919 1531.3,224.337 1531.87,226.784 1532.43,226.149 1533,228.333 1533.57,230.719 1534.14,229.726 1534.71,227.732 1535.28,228.001 1535.84,229.284 1536.41,230.364 1536.98,231.502 1537.55,231.617 1538.12,233.687 1538.69,234.598 1539.25,233.489 1539.82,234.718 1540.39,233.43 1540.96,233.298 1541.53,233.259 1542.1,233.225 1542.66,231.896 1543.23,234.777 1543.8,233.361 1544.37,233.362 1544.94,233.234 1545.51,235.026 1546.08,234.864 1546.64,233.455 1547.21,232.171 1547.78,230.189 1548.35,232.274 1548.92,234.205 1549.49,234.858 1550.05,232.45 1550.62,234.348 1551.19,234.206 1551.76,232.865 1552.33,232.561 1552.9,231.257 1553.46,230.163 1554.03,229.286 1554.6,228.275 1555.17,229.62 1555.74,231.469 1556.31,232.467 1556.87,233.516 1557.44,233.205 1558.01,234 1558.58,233.552 1559.15,231.133 1559.72,231.302 1560.28,231.229 1560.85,231.258 1561.42,229.932 1561.99,228.784 1562.56,228.879 1563.13,231.006 1563.69,230.018 1564.26,227.96 1564.83,226.12 1565.4,226.229 1565.97,225.426 1566.54,222.807 1567.1,224.247 1567.67,223.748 1568.24,226.18 1568.81,228.818 1569.38,230.95 1569.95,232.017 1570.51,231.878 1571.08,231.72 1571.65,233.501 1572.22,234.319 1572.79,232.663 1573.36,233.355 1573.92,231.444 1574.49,231.309 1575.06,231.094 1575.63,228.737 1576.2,228.838 1576.77,226.676 1577.33,225.796 1577.9,225.979 1578.47,227.312 1579.04,226.465 1579.61,224.719 1580.18,224.252 1580.74,224.754 1581.31,226.167 1581.88,224.586 1582.45,224.936 1583.02,225.275 1583.59,227.664 1584.15,226.959 1584.72,228.138 1585.29,230.367 1585.86,231.547 1586.43,233.627 1587,231.569 1587.56,230.536 1588.13,229.43 1588.7,228.669 1589.27,227.721 1589.84,228.974 1590.41,229.025 1590.97,229.208 1591.54,230.368 1592.11,231.583 1592.68,231.798 1593.25,229.616 1593.82,229.813 1594.38,230.9 1594.95,227.834 1595.52,226.096 1596.09,226.477 1596.66,224.965 1597.23,223.225 1597.79,222.64 1598.36,221.142 1598.93,222.818 1599.5,223.504 1600.07,223.199 1600.64,222.755 1601.2,222.634 1601.77,223.288 1602.34,223.883 1602.91,224.491 1603.48,223.162 1604.05,224.832 1604.61,225.606 1605.18,227.075 1605.75,226.424 1606.32,229.803 1606.89,231.14 1607.46,232.408 1608.02,231.294 1608.59,231.313 1609.16,231.325 1609.73,230.611 1610.3,231.688 1610.87,232.663 1611.43,233.505 1612,234.429 1612.57,233.004 1613.14,233.101 1613.71,234.962 1614.28,235.751 1614.84,237.457 1615.41,238.253 1615.98,239.807 1616.55,240.45 1617.12,241.854 1617.69,241.966 1618.26,242.264 1618.82,246.494 1619.39,242.207 1619.96,242.37 1620.53,240.57 1621.1,237.992 1621.67,236.239 1622.23,234.624 1622.8,233.398 1623.37,232.009 1623.94,231.902 1624.51,232.734 1625.08,231.656 1625.64,231.584 1626.21,231.339 1626.78,232.109 1627.35,232.891 1627.92,231.506 1628.49,230.325 1629.05,229.266 1629.62,228.33 1630.19,228.271 1630.76,228.253 1631.33,228.311 1631.9,228.326 1632.46,227.376 1633.03,226.342 1633.6,226.466 1634.17,227.772 1634.74,228.989 1635.31,230.985 1635.87,231.042 1636.44,231.242 1637.01,231.352 1637.58,231.439 1638.15,233.458 1638.72,233.123 1639.28,229.754 1639.85,229.685 1640.42,233.801 1640.99,233.297 1641.56,233.079 1642.13,233.961 1642.69,236.754 1643.26,235.337 1643.83,234.928 1644.4,235.487 1644.97,235.186 1645.54,234.711 1646.1,234.344 1646.67,231.543 1647.24,230.151 1647.81,229.981 1648.38,229.05 1648.95,230.065 1649.51,230.115 1650.08,232.081 1650.65,231.781 1651.22,233.581 1651.79,233.268 1652.36,232.872 1652.92,232.574 1653.49,229.897 1654.06,230.902 1654.63,230.544 1655.2,229.498 1655.77,227.352 1656.33,229.272 1656.9,231.175 1657.47,231.91 1658.04,230.526 1658.61,231.398 1659.18,231.243 1659.74,230.116 1660.31,229.981 1660.88,229.942 1661.45,227.556 1662.02,226.635 1662.59,225.674 1663.15,225.414 1663.72,227.737 1664.29,226.658 1664.86,227.84 1665.43,227.862 1666,227.772 1666.56,228.025 1667.13,228.171 1667.7,228.317 1668.27,229.297 1668.84,229.188 1669.41,227.132 1669.97,226.278 1670.54,225.556 1671.11,224.897 1671.68,224.114 1672.25,223.373 1672.82,224.915 1673.38,226.404 1673.95,224.995 1674.52,225.126 1675.09,225.5 1675.66,224.742 1676.23,224.251 1676.79,225.625 1677.36,226.831 1677.93,226.308 1678.5,222.604 1679.07,223.121 1679.64,222.676 1680.2,224.276 1680.77,228.877 1681.34,230.947 1681.91,233.018 1682.48,232.852 1683.05,232.745 1683.61,232.666 1684.18,232.543 1684.75,232.298 1685.32,232.3 1685.89,231.161 1686.46,233.024 1687.02,232.804 1687.59,229.781 1688.16,228.781 1688.73,229.845 1689.3,225.862 1689.87,227.353 1690.44,227.431 1691,227.678 1691.57,226.857 1692.14,231.352 1692.71,231.42 1693.28,230.606 1693.85,230.636 1694.41,228.617 1694.98,227.857 1695.55,227.064 1696.12,230.404 1696.69,228.392 1697.26,228.777 1697.82,231.784 1698.39,230.597 1698.96,233.67 1699.53,234.488 1700.1,236.269 1700.67,234.756 1701.23,233.313 1701.8,231.939 1702.37,229.864 1702.94,231.692 1703.51,233.677 1704.08,233.506 1704.64,238.273 1705.21,235.669 1705.78,235.299 1706.35,237.132 1706.92,237.625 1707.49,238.031 1708.05,234.364 1708.62,232.87 1709.19,233.728 1709.76,235.435 1710.33,232.939 1710.9,232.6 1711.46,231.183 1712.03,231.15 1712.6,231.002 1713.17,230.76 1713.74,230.521 1714.31,229.305 1714.87,229.109 1715.44,228.846 1716.01,228.8 1716.58,228.529 1717.15,228.519 1717.72,230.888 1718.28,230.817 1718.85,231.667 1719.42,233.702 1719.99,233.201 1720.56,233.864 1721.13,233.466 1721.69,233.233 1722.26,233.965 1722.83,234.367 1723.4,233.159 1723.97,232.753 1724.54,233.272 1725.1,232.897 1725.67,233.712 1726.24,230.216 1726.81,231.258 1727.38,232.045 1727.95,232.953 1728.51,230.455 1729.08,231.121 1729.65,230.904 1730.22,231.804 1730.79,231.702 1731.36,229.514 1731.92,225.443 1732.49,226.601 1733.06,227.57 1733.63,224.335 1734.2,226.711 1734.77,225.836 1735.33,226.194 1735.9,226.298 1736.47,226.483 1737.04,226.558 1737.61,226.853 1738.18,227.137 1738.74,225.213 1739.31,222.688 1739.88,220.321 1740.45,222.043 1741.02,222.76 1741.59,222.183 1742.15,221.95 1742.72,220.434 1743.29,221.119 1743.86,221.566 1744.43,222.139 1745,223.618 1745.56,225.246 1746.13,227.483 1746.7,228.513 1747.27,230.728 1747.84,228.713 1748.41,227.675 1748.97,225.502 1749.54,224.744 1750.11,227.083 1750.68,225.249 1751.25,223.776 1751.82,223.085 1752.38,223.556 1752.95,225.134 1753.52,224.5 1754.09,225.122 1754.66,222.533 1755.23,223.124 1755.79,220.658 1756.36,223.502 1756.93,226.297 1757.5,227.769 1758.07,227.078 1758.64,228.257 1759.21,228.515 1759.77,228.837 1760.34,228.972 1760.91,232.397 1761.48,235.583 1762.05,238.159 1762.62,237.627 1763.18,237.368 1763.75,236.767 1764.32,236.502 1764.89,237.048 1765.46,236.525 1766.03,235.177 1766.59,235.927 1767.16,236.624 1767.73,235.202 1768.3,235.884 1768.87,237.473 1769.44,236.708 1770,236.208 1770.57,233.55 1771.14,231.42 1771.71,231.286 1772.28,232.105 1772.85,230.85 1773.41,232.8 1773.98,232.509 1774.55,230.257 1775.12,228.284 1775.69,228.527 1776.26,229.559 1776.82,230.827 1777.39,231.548 1777.96,228.486 1778.53,228.854 1779.1,228.679 1779.67,227.754 1780.23,227.867 1780.8,228.197 1781.37,228.272 1781.94,228.236 1782.51,228.39 1783.08,226.335 1783.64,226.403 1784.21,226.586 1784.78,225.844 1785.35,227.319 1785.92,226.371 1786.49,225.819 1787.05,230.357 1787.62,231.449 1788.19,230.444 1788.76,229.458 1789.33,231.533 1789.9,231.393 1790.46,230.198 1791.03,228.174 1791.6,228.199 1792.17,230.503 1792.74,228.305 1793.31,228.257 1793.87,230.356 1794.44,232.31 1795.01,230.146 1795.58,230.164 1796.15,228.109 1796.72,227.564 1797.28,227.867 1797.85,229.232 1798.42,229.406 1798.99,228.574 1799.56,229.532 1800.13,228.555 1800.69,228.02 1801.26,228.25 1801.83,229.734 1802.4,228.871 1802.97,228.945 1803.54,225.16 1804.1,226.715 1804.67,226.839 1805.24,226.047 1805.81,225.534 1806.38,224.91 1806.95,229.599 1807.51,230.841 1808.08,229.989 1808.65,231.143 1809.22,231.067 1809.79,232.349 1810.36,232.291 1810.92,232.201 1811.49,233.25 1812.06,234.134 1812.63,233.788 1813.2,235.581 1813.77,236.027 1814.33,237.605 1814.9,235.112 1815.47,233.812 1816.04,232.594 1816.61,232.303 1817.18,235.631 1817.74,234.137 1818.31,233.899 1818.88,233.58 1819.45,235.682 1820.02,235.31 1820.59,234.866 1821.15,233.473 1821.72,232.167 1822.29,231.978 1822.86,230.85 1823.43,231.988 1824,231.962 1824.56,229.713 1825.13,229.627 1825.7,230.641 1826.27,230.672 1826.84,230.404 1827.41,229.273 1827.97,231.453 1828.54,231.158 1829.11,231.025 1829.68,230.801 1830.25,232.861 1830.82,231.524 1831.39,234.603 1831.95,235.026 1832.52,233.541 1833.09,231.205 1833.66,231.005 1834.23,231.829 1834.8,231.636 1835.36,230.237 1835.93,230.001 1836.5,229.926 1837.07,229.543 1837.64,229.415 1838.21,225.195 1838.77,224.656 1839.34,227.049 1839.91,226.178 1840.48,226.224 1841.05,226.298 1841.62,228.581 1842.18,227.598 1842.75,229.804 1843.32,229.769 1843.89,229.864 1844.46,229.722 1845.03,228.716 1845.59,229.621 1846.16,230.662 1846.73,231.706 1847.3,231.278 1847.87,229.917 1848.44,228.735 1849,231.952 1849.57,231.74 1850.14,230.576 1850.71,232.402 1851.28,231.241 1851.85,231.19 1852.41,233.388 1852.98,232.085 1853.55,230.963 1854.12,229.954 1854.69,230.921 1855.26,231.022 1855.82,230.863 1856.39,232.949 1856.96,232.614 1857.53,231.394 1858.1,230.245 1858.67,229.058 1859.23,226.018 1859.8,226.162 1860.37,226.654 1860.94,228.948 1861.51,227.843 1862.08,226.921 1862.64,226.194 1863.21,226.462 1863.78,227.893 1864.35,226.773 1864.92,228.176 1865.49,229.319 1866.05,228.301 1866.62,227.232 1867.19,225.433 1867.76,224.692 1868.33,223.149 1868.9,224.8 1869.46,225.248 1870.03,226.651 1870.6,226.841 1871.17,229.031 1871.74,229.378 1872.31,228.695 1872.87,228.752 1873.44,227.803 1874.01,225.6 1874.58,224.862 1875.15,227.421 1875.72,226.49 1876.28,225.694 1876.85,225.069 1877.42,224.486 1877.99,227.748 1878.56,227.807 1879.13,228.115 1879.69,231.456 1880.26,230.346 1880.83,230.394 1881.4,231.332 1881.97,231.359 1882.54,233.507 1883.1,233.192 1883.67,235.114 1884.24,236.045 1884.81,235.859 1885.38,234.343 1885.95,233.041 1886.51,233.909 1887.08,231.698 1887.65,229.542 1888.22,230.239 1888.79,230.466 1889.36,229.431 1889.92,228.673 1890.49,226.831 1891.06,226.134 1891.63,226.471 1892.2,225.734 1892.77,225.955 1893.33,228.236 1893.9,228.387 1894.47,229.788 1895.04,228.864 1895.61,231.094 1896.18,231.936 1896.74,229.754 1897.31,228.786 1897.88,229.021 1898.45,233.296 1899.02,233.176 1899.59,231.174 1900.16,231.248 1900.72,232.114 1901.29,235.012 1901.86,234.827 1902.43,236.551 1903,239.275 1903.57,238.501 1904.13,237.888 1904.7,236.189 1905.27,230.442 1905.84,229.111 1906.41,229.225 1906.98,228.239 1907.54,230.534 1908.11,231.505 1908.68,229.564 1909.25,231.677 1909.82,230.503 1910.39,232.437 1910.95,232.172 1911.52,230.918 1912.09,229.711 1912.66,229.543 1913.23,230.968 1913.8,230.911 1914.36,229.666 1914.93,230.894 1915.5,229.736 1916.07,227.805 1916.64,227.731 1917.21,225.812 1917.77,223.949 1918.34,225.351 1918.91,226.748 1919.48,227.972 1920.05,229.271 1920.62,229.394 1921.18,230.539 1921.75,230.622 1922.32,230.295 1922.89,228.216 1923.46,229.42 1924.03,231.149 1924.59,233.132 1925.16,230.986 1925.73,230.936 1926.3,233.041 1926.87,232.697 1927.44,233.332 1928,233.991 1928.57,233.619 1929.14,232.251 1929.71,230.847 1930.28,231.93 1930.85,231.805 1931.41,231.711 1931.98,231.678 1932.55,232.492 1933.12,231.589 1933.69,232.445 1934.26,229.968 1934.82,231.197 1935.39,232.249 1935.96,230.028 1936.53,224.932 1937.1,224.173 1937.67,224.531 1938.23,223.591 1938.8,222.784 1939.37,223.25 1939.94,223.644 1940.51,225.218 1941.08,225.366 1941.64,225.536 1942.21,226.984 1942.78,228.154 1943.35,230.379 1943.92,231.437 1944.49,229.336 1945.05,229.337 1945.62,230.317 1946.19,230.197 1946.76,229.205 1947.33,228.164 1947.9,228.504 1948.46,228.835 1949.03,228.212 1949.6,229.402 1950.17,229.805 1950.74,230.713 1951.31,231.653 1951.87,231.624 1952.44,231.525 1953.01,231.377 1953.58,230.526 1954.15,232.56 1954.72,235.534 1955.28,234.181 1955.85,234.033 1956.42,234.737 1956.99,234.505 1957.56,233.172 1958.13,233.976 1958.69,232.852 1959.26,230.489 1959.83,230.361 1960.4,232.406 1960.97,230.129 1961.54,232.077 1962.1,233.134 1962.67,232.898 1963.24,234.695 1963.81,233.252 1964.38,234.15 1964.95,230.878 1965.51,230.628 1966.08,229.648 1966.65,229.528 1967.22,228.355 1967.79,229.494 1968.36,230.666 1968.92,229.56 1969.49,229.666 1970.06,228.661 1970.63,231.703 1971.2,233.496 1971.77,231.064 1972.34,231.908 1972.9,232.925 1973.47,230.716 1974.04,231.508 1974.61,231.299 1975.18,232.195 1975.75,230.792 1976.31,230.701 1976.88,227.63 1977.45,226.615 1978.02,228.971 1978.59,231.087 1979.16,232.099 1979.72,232.138 1980.29,230.89 1980.86,231.845 1981.43,233.675 1982,233.393 1982.57,233.013 1983.13,233.824 1983.7,234.625 1984.27,234.126 1984.84,233.928 1985.41,233.489 1985.98,233.482 1986.54,233.237 1987.11,232.854 1987.68,231.566 1988.25,232.324 1988.82,231.29 1989.39,231.124 1989.95,232.193 1990.52,231.754 1991.09,229.372 1991.66,226.544 1992.23,226.661 1992.8,227.754 1993.36,228.86 1993.93,228.963 1994.5,228.856 1995.07,228.857 1995.64,228.764 1996.21,229.996 1996.77,228.73 1997.34,228.752 1997.91,229.775 1998.48,229.641 1999.05,228.353 1999.62,229.296 2000.18,230.1 2000.75,229.93 2001.32,229.007 2001.89,226.765 2002.46,226.959 2003.03,228.028 2003.59,227.052 2004.16,228.245 2004.73,227.297 2005.3,229.457 2005.87,229.426 2006.44,228.233 2007,230.399 2007.57,230.442 2008.14,231.2 2008.71,229.974 2009.28,228.951 2009.85,229.129 2010.41,228.263 2010.98,228.39 2011.55,227.389 2012.12,226.625 2012.69,226.847 2013.26,228.17 2013.82,227.307 2014.39,228.474 2014.96,229.574 2015.53,230.692 2016.1,229.808 2016.67,232.014 2017.23,230.806 2017.8,229.621 2018.37,229.825 2018.94,229.776 2019.51,229.707 2020.08,230.644 2020.64,232.583 2021.21,231.217 2021.78,230.049 2022.35,232.048 2022.92,231.929 2023.49,229.815 2024.05,230.864 2024.62,231.844 2025.19,232.697 2025.76,233.535 2026.33,234.247 2026.9,233.963 2027.46,232.504 2028.03,231.244 2028.6,228.225 2029.17,229.271 2029.74,230.233 2030.31,230.008 2030.87,228.869 2031.44,227.78 2032.01,229.099 2032.58,229.164 2033.15,228.036 2033.72,230.16 2034.28,233.321 2034.85,232.993 2035.42,232.887 2035.99,232.453 2036.56,233.287 2037.13,230.935 2037.69,230.687 2038.26,228.588 2038.83,230.698 2039.4,231.846 2039.97,231.707 2040.54,232.579 2041.11,232.535 2041.67,233.376 2042.24,232.063 2042.81,230.79 2043.38,227.483 2043.95,228.839 2044.52,228.863 2045.08,231.034 2045.65,230.887 2046.22,229.702 2046.79,228.528 2047.36,228.361 2047.93,228.347 2048.49,228.136 2049.06,227.062 2049.63,227.317 2050.2,227.348 2050.77,228.559 2051.34,228.634 2051.9,227.808 2052.47,226.802 2053.04,226.99 2053.61,225.251 2054.18,225.453 2054.75,225.638 2055.31,225.04 2055.88,224.135 2056.45,222.304 2057.02,223.739 2057.59,227.236 2058.16,227.573 2058.72,230.022 2059.29,231.007 2059.86,232.181 2060.43,235.283 2061,234.996 2061.57,230.233 2062.13,229.244 2062.7,229.28 2063.27,228.275 2063.84,229.478 2064.41,229.507 2064.98,230.454 2065.54,228.292 2066.11,228.418 2066.68,226.505 2067.25,226.933 2067.82,228.159 2068.39,227.27 2068.95,227.528 2069.52,225.64 2070.09,227.113 2070.66,225.29 2071.23,225.546 2071.8,225.766 2072.36,226.055 2072.93,225.456 2073.5,227.055 2074.07,224.561 2074.64,223.122 2075.21,224.664 2075.77,224.086 2076.34,224.561 2076.91,226.048 2077.48,225.074 2078.05,225.641 2078.62,227.106 2079.18,227.456 2079.75,227.737 2080.32,226.852 2080.89,225.022 2081.46,226.611 2082.03,226.845 2082.59,228.133 2083.16,229.379 2083.73,227.658 2084.3,231.04 2084.87,233.033 2085.44,232.851 2086,230.676 2086.57,231.666 2087.14,231.738 2087.71,233.801 2088.28,232.83 2088.85,232.678 2089.41,233.62 2089.98,231.287 2090.55,233.155 2091.12,234.025 2091.69,235.017 2092.26,233.916 2092.82,233.875 2093.39,233.849 2093.96,233.682 2094.53,234.456 2095.1,234.27 2095.67,234.984 2096.23,233.602 2096.8,234.311 2097.37,234.102 2097.94,235.671 2098.51,234.282 2099.08,232.987 2099.64,232.652 2100.21,231.404 2100.78,231.33 2101.35,230.221 2101.92,232.414 2102.49,231.093 2103.05,231.931 2103.62,230.734 2104.19,230.631 2104.76,233.604 2105.33,232.103 2105.9,230.103 2106.46,231.275 2107.03,230.185 2107.6,230.249 2108.17,230.166 2108.74,230.099 2109.31,228.828 2109.87,229.002 2110.44,229.393 2111.01,230.503 2111.58,228.385 2112.15,229.676 2112.72,229.811 2113.29,230.055 2113.85,227.999 2114.42,227.117 2114.99,228.149 2115.56,228.428 2116.13,229.746 2116.7,229.942 2117.26,229.835 2117.83,232.9 2118.4,233.736 2118.97,233.484 2119.54,233.281 2120.11,232.104 2120.67,230.837 2121.24,232.936 2121.81,231.788 2122.38,231.643 2122.95,231.392 2123.52,231.283 2124.08,229.948 2124.65,230.011 2125.22,229.825 2125.79,230.681 2126.36,230.568 2126.93,230.465 2127.49,231.365 2128.06,231.168 2128.63,232.11 2129.2,229.888 2129.77,230.68 2130.34,233.649 2130.9,232.289 2131.47,233.145 2132.04,232.736 2132.61,233.4 2133.18,230.804 2133.75,229.733 2134.31,230.654 2134.88,229.471 2135.45,230.4 2136.02,234.439 2136.59,233.992 2137.16,232.357 2137.72,232.038 2138.29,232.761 2138.86,231.489 2139.43,232.248 2140,230.128 2140.57,231.964 2141.13,231.655 2141.7,231.197 2142.27,231.937 2142.84,230.444 2143.41,228.288 2143.98,229.387 2144.54,229.336 2145.11,230.391 2145.68,231.146 2146.25,229.031 2146.82,229.088 2147.39,229.104 2147.95,228.992 2148.52,230.954 2149.09,232.02 2149.66,230.779 2150.23,230.481 2150.8,231.482 2151.36,231.353 2151.93,229.14 2152.5,229.209 2153.07,230.079 2153.64,229.976 2154.21,227.876 2154.77,229.859 2155.34,228.819 2155.91,226.751 2156.48,225.774 2157.05,225.893 2157.62,224.793 2158.18,221.985 2158.75,223.493 2159.32,224.741 2159.89,223.928 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip230)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.02\n  with uncertainty of ± 0.0012460719961560186\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01743 ± (0.00320059, 0.00311901) (MC)\n  95% confidence interval: [-4.02383, -4.01156] (MC)\n  linear error propagation: -4.01766 ± 0.00310286\n  |δ_y| = |0.0022773| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017434575355358, val_l = 0.006399918246264846, val_u = 0.0058790611515799895)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip260\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip261\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip260)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip262\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.77 2211.02,1144.77 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,970.966 2211.02,970.966 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,797.16 2211.02,797.16 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,623.355 2211.02,623.355 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,449.55 2211.02,449.55 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,275.745 2211.02,275.745 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.77 365.751,1144.77 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,970.966 365.751,970.966 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,797.16 365.751,797.16 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,623.355 365.751,623.355 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,449.55 365.751,449.55 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,275.745 365.751,275.745 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M298.909 1130.57 Q295.298 1130.57 293.469 1134.13 Q291.664 1137.68 291.664 1144.81 Q291.664 1151.91 293.469 1155.48 Q295.298 1159.02 298.909 1159.02 Q302.543 1159.02 304.349 1155.48 Q306.177 1151.91 306.177 1144.81 Q306.177 1137.68 304.349 1134.13 Q302.543 1130.57 298.909 1130.57 M298.909 1126.87 Q304.719 1126.87 307.775 1131.47 Q310.853 1136.06 310.853 1144.81 Q310.853 1153.53 307.775 1158.14 Q304.719 1162.72 298.909 1162.72 Q293.099 1162.72 290.02 1158.14 Q286.964 1153.53 286.964 1144.81 Q286.964 1136.06 290.02 1131.47 Q293.099 1126.87 298.909 1126.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M259.557 984.311 L267.196 984.311 L267.196 957.945 L258.886 959.612 L258.886 955.352 L267.15 953.686 L271.826 953.686 L271.826 984.311 L279.465 984.311 L279.465 988.246 L259.557 988.246 L259.557 984.311 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M298.909 956.764 Q295.298 956.764 293.469 960.329 Q291.664 963.871 291.664 971 Q291.664 978.107 293.469 981.672 Q295.298 985.213 298.909 985.213 Q302.543 985.213 304.349 981.672 Q306.177 978.107 306.177 971 Q306.177 963.871 304.349 960.329 Q302.543 956.764 298.909 956.764 M298.909 953.061 Q304.719 953.061 307.775 957.667 Q310.853 962.25 310.853 971 Q310.853 979.727 307.775 984.334 Q304.719 988.917 298.909 988.917 Q293.099 988.917 290.02 984.334 Q286.964 979.727 286.964 971 Q286.964 962.25 290.02 957.667 Q293.099 953.061 298.909 953.061 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M262.775 810.505 L279.094 810.505 L279.094 814.44 L257.15 814.44 L257.15 810.505 Q259.812 807.751 264.395 803.121 Q269.002 798.468 270.182 797.126 Q272.428 794.603 273.307 792.866 Q274.21 791.107 274.21 789.417 Q274.21 786.663 272.266 784.927 Q270.344 783.191 267.242 783.191 Q265.043 783.191 262.59 783.954 Q260.159 784.718 257.381 786.269 L257.381 781.547 Q260.205 780.413 262.659 779.834 Q265.113 779.255 267.15 779.255 Q272.52 779.255 275.715 781.941 Q278.909 784.626 278.909 789.116 Q278.909 791.246 278.099 793.167 Q277.312 795.066 275.205 797.658 Q274.627 798.329 271.525 801.547 Q268.423 804.741 262.775 810.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M298.909 782.959 Q295.298 782.959 293.469 786.524 Q291.664 790.066 291.664 797.195 Q291.664 804.302 293.469 807.866 Q295.298 811.408 298.909 811.408 Q302.543 811.408 304.349 807.866 Q306.177 804.302 306.177 797.195 Q306.177 790.066 304.349 786.524 Q302.543 782.959 298.909 782.959 M298.909 779.255 Q304.719 779.255 307.775 783.862 Q310.853 788.445 310.853 797.195 Q310.853 805.922 307.775 810.528 Q304.719 815.112 298.909 815.112 Q293.099 815.112 290.02 810.528 Q286.964 805.922 286.964 797.195 Q286.964 788.445 290.02 783.862 Q293.099 779.255 298.909 779.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M272.914 622.001 Q276.27 622.719 278.145 624.987 Q280.043 627.256 280.043 630.589 Q280.043 635.705 276.525 638.506 Q273.006 641.306 266.525 641.306 Q264.349 641.306 262.034 640.867 Q259.742 640.45 257.289 639.594 L257.289 635.08 Q259.233 636.214 261.548 636.793 Q263.863 637.371 266.386 637.371 Q270.784 637.371 273.076 635.635 Q275.39 633.899 275.39 630.589 Q275.39 627.533 273.238 625.82 Q271.108 624.084 267.289 624.084 L263.261 624.084 L263.261 620.242 L267.474 620.242 Q270.923 620.242 272.752 618.876 Q274.58 617.487 274.58 614.895 Q274.58 612.233 272.682 610.821 Q270.807 609.385 267.289 609.385 Q265.367 609.385 263.168 609.802 Q260.969 610.219 258.33 611.098 L258.33 606.932 Q260.992 606.191 263.307 605.821 Q265.645 605.45 267.705 605.45 Q273.029 605.45 276.131 607.881 Q279.233 610.288 279.233 614.408 Q279.233 617.279 277.59 619.27 Q275.946 621.237 272.914 622.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M298.909 609.154 Q295.298 609.154 293.469 612.719 Q291.664 616.26 291.664 623.39 Q291.664 630.496 293.469 634.061 Q295.298 637.603 298.909 637.603 Q302.543 637.603 304.349 634.061 Q306.177 630.496 306.177 623.39 Q306.177 616.26 304.349 612.719 Q302.543 609.154 298.909 609.154 M298.909 605.45 Q304.719 605.45 307.775 610.057 Q310.853 614.64 310.853 623.39 Q310.853 632.117 307.775 636.723 Q304.719 641.306 298.909 641.306 Q293.099 641.306 290.02 636.723 Q286.964 632.117 286.964 623.39 Q286.964 614.64 290.02 610.057 Q293.099 605.45 298.909 605.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M271.594 436.344 L259.789 454.793 L271.594 454.793 L271.594 436.344 M270.367 432.27 L276.247 432.27 L276.247 454.793 L281.177 454.793 L281.177 458.682 L276.247 458.682 L276.247 466.83 L271.594 466.83 L271.594 458.682 L255.992 458.682 L255.992 454.168 L270.367 432.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M298.909 435.349 Q295.298 435.349 293.469 438.913 Q291.664 442.455 291.664 449.585 Q291.664 456.691 293.469 460.256 Q295.298 463.797 298.909 463.797 Q302.543 463.797 304.349 460.256 Q306.177 456.691 306.177 449.585 Q306.177 442.455 304.349 438.913 Q302.543 435.349 298.909 435.349 M298.909 431.645 Q304.719 431.645 307.775 436.251 Q310.853 440.835 310.853 449.585 Q310.853 458.311 307.775 462.918 Q304.719 467.501 298.909 467.501 Q293.099 467.501 290.02 462.918 Q286.964 458.311 286.964 449.585 Q286.964 440.835 290.02 436.251 Q293.099 431.645 298.909 431.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M258.793 258.465 L277.15 258.465 L277.15 262.4 L263.076 262.4 L263.076 270.872 Q264.094 270.525 265.113 270.363 Q266.131 270.178 267.15 270.178 Q272.937 270.178 276.316 273.349 Q279.696 276.52 279.696 281.937 Q279.696 287.515 276.224 290.617 Q272.752 293.696 266.432 293.696 Q264.256 293.696 261.988 293.326 Q259.742 292.955 257.335 292.214 L257.335 287.515 Q259.418 288.65 261.641 289.205 Q263.863 289.761 266.34 289.761 Q270.344 289.761 272.682 287.654 Q275.02 285.548 275.02 281.937 Q275.02 278.326 272.682 276.219 Q270.344 274.113 266.34 274.113 Q264.465 274.113 262.59 274.529 Q260.738 274.946 258.793 275.826 L258.793 258.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M298.909 261.543 Q295.298 261.543 293.469 265.108 Q291.664 268.65 291.664 275.779 Q291.664 282.886 293.469 286.451 Q295.298 289.992 298.909 289.992 Q302.543 289.992 304.349 286.451 Q306.177 282.886 306.177 275.779 Q306.177 268.65 304.349 265.108 Q302.543 261.543 298.909 261.543 M298.909 257.84 Q304.719 257.84 307.775 262.446 Q310.853 267.029 310.853 275.779 Q310.853 284.506 307.775 289.113 Q304.719 293.696 298.909 293.696 Q293.099 293.696 290.02 289.113 Q286.964 284.506 286.964 275.779 Q286.964 267.029 290.02 262.446 Q293.099 257.84 298.909 257.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip262)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1151.88 400.199,1025.94 400.786,911.221 401.372,808.495 401.958,710.126 402.545,735.993 403.131,646.296 403.718,566.326 404.304,495.073 404.891,525.427 405.477,461.807 406.063,404.187 406.65,352.179 407.236,382.522 407.823,407.062 408.409,363.064 408.995,325.107 409.582,289.995 410.168,261.696 410.755,235.261 411.341,260.048 411.927,238.164 412.514,219.895 413.1,244.014 413.687,265.697 414.273,285.654 414.86,272.238 415.446,261.268 416.032,283.025 416.619,301.535 417.205,319.582 417.792,313.313 418.378,309.509 418.964,307.253 419.551,305.626 420.137,305.68 420.724,309.041 421.31,311.854 421.896,316.482 422.483,323.032 423.069,344.12 423.656,350.454 424.242,357.899 424.829,378.466 425.415,385.318 426.001,437.544 426.588,444.424 427.174,452.969 427.761,471.114 428.347,497.203 428.933,514.197 429.52,539.039 430.106,554.918 430.693,563.322 431.279,571.398 431.865,594.066 432.452,615.593 433.038,630.362 433.625,651.414 434.211,665.678 434.798,685.047 435.384,708.917 435.97,721.714 436.557,743.974 437.143,760.391 437.73,771.403 438.316,777.79 438.902,784.796 439.489,795.571 440.075,810.742 440.662,821.126 441.248,839.427 441.835,853.149 442.421,859.237 443.007,872.58 443.594,878.678 444.18,891.215 444.767,909.809 445.353,921.472 445.939,929.981 446.526,935.423 447.112,943.869 447.699,960.862 448.285,970.957 448.871,975.5 449.458,982.8 450.044,989.742 450.631,1001.84 451.217,1008.3 451.804,1021.97 452.39,1028.31 452.976,1036.84 453.563,1042.78 454.149,1055.74 454.736,1058.73 455.322,1064.15 455.908,1066.91 456.495,1069.78 457.081,1079.56 457.668,1082.04 458.254,1091.32 458.84,1098.11 459.427,1104.62 460.013,1111.23 460.6,1113.21 461.186,1125.23 461.773,1126.6 462.359,1129.78 462.945,1135.16 463.532,1136.9 464.118,1141.94 464.705,1149.06 465.291,1149.82 465.877,1152.83 466.464,1154.35 467.05,1161.06 467.637,1167.49 468.223,1170.02 468.809,1172.5 469.396,1173 469.982,1175.56 470.569,1179.58 471.155,1181.96 471.742,1184.42 472.328,1185 472.914,1185.19 473.501,1183.87 474.087,1186.72 474.674,1187.58 475.26,1191.52 475.846,1191.87 476.433,1195.79 477.019,1196.33 477.606,1196.84 478.192,1202.47 478.778,1204.76 479.365,1203.45 479.951,1205.51 480.538,1212.2 481.124,1215.67 481.711,1215.89 482.297,1217.19 482.883,1223.72 483.47,1223.4 484.056,1224.55 484.643,1225.99 485.229,1228.78 485.815,1228.34 486.402,1229.82 486.988,1229.38 487.575,1228.78 488.161,1228.59 488.748,1236.19 489.334,1235.36 489.92,1238 490.507,1235.68 491.093,1233.46 491.68,1234.41 492.266,1233.94 492.852,1236.46 493.439,1237.51 494.025,1238.28 494.612,1238.94 495.198,1236.99 495.784,1238.63 496.371,1238.11 496.957,1245.32 497.544,1246.2 498.13,1248.12 498.717,1247.1 499.303,1246.04 499.889,1246.76 500.476,1245.72 501.062,1247.66 501.649,1246.84 502.235,1247.49 502.821,1246.5 503.408,1247.36 503.994,1243.83 504.581,1243 505.167,1245.53 505.753,1244.51 506.34,1243.84 506.926,1244.67 507.513,1243.88 508.099,1246.18 508.686,1248.3 509.272,1250.53 509.858,1249.78 510.445,1250.35 511.031,1249.61 511.618,1250.41 512.204,1247.83 512.79,1249.88 513.377,1249.3 513.963,1248.61 514.55,1247.59 515.136,1246.63 515.722,1246.28 516.309,1246.89 516.895,1241.82 517.482,1241.34 518.068,1239.71 518.655,1238.1 519.241,1239.42 519.827,1243.6 520.414,1241.46 521,1239.82 521.587,1241.35 522.173,1245.11 522.759,1245.81 523.346,1247.93 523.932,1247.19 524.519,1244.95 525.105,1245.96 525.691,1245.35 526.278,1241.67 526.864,1239.94 527.451,1239.55 528.037,1243.69 528.624,1243.46 529.21,1240.05 529.796,1240.92 530.383,1236.47 530.969,1237.67 531.556,1237.31 532.142,1238.53 532.728,1238.65 533.315,1241.48 533.901,1241.15 534.488,1239.51 535.074,1238 535.661,1237.8 536.247,1240.57 536.833,1240.36 537.42,1238.49 538.006,1240.85 538.593,1241.78 539.179,1239.84 539.765,1239.85 540.352,1239.74 540.938,1239.66 541.525,1240.79 542.111,1240.35 542.697,1239.85 543.284,1233.84 543.87,1235.32 544.457,1236.86 545.043,1240.97 545.63,1242.09 546.216,1241.84 546.802,1244.52 547.389,1246.69 547.975,1245.74 548.562,1245.03 549.148,1243.45 549.734,1243.06 550.321,1240.97 550.907,1241.99 551.494,1241.43 552.08,1238.06 552.666,1240.66 553.253,1241.72 553.839,1244.17 554.426,1242.05 555.012,1241.54 555.599,1239.89 556.185,1238.2 556.771,1237.93 557.358,1237.8 557.944,1241.38 558.531,1243.54 559.117,1243.06 559.703,1240.96 560.29,1246.05 560.876,1246.54 561.463,1247.08 562.049,1244.63 562.635,1243.79 563.222,1243.23 563.808,1242.33 564.395,1241.95 564.981,1241.55 565.568,1239.48 566.154,1238.77 566.74,1238.32 567.327,1236.29 567.913,1234.43 568.5,1235.42 569.086,1232.5 569.672,1232.58 570.259,1233.96 570.845,1231.85 571.432,1234.57 572.018,1234.39 572.605,1233.93 573.191,1234.92 573.777,1231.95 574.364,1231.74 574.95,1231.57 575.537,1231.38 576.123,1229.68 576.709,1231.23 577.296,1231.21 577.882,1235.36 578.469,1230.75 579.055,1229.23 579.641,1230.58 580.228,1227.77 580.814,1227.58 581.401,1228.77 581.987,1230.31 582.574,1231.65 583.16,1233.04 583.746,1238.7 584.333,1242.45 584.919,1239.08 585.506,1239.79 586.092,1240.29 586.678,1240.85 587.265,1239.03 587.851,1236.93 588.438,1236.45 589.024,1235.78 589.61,1238.34 590.197,1238.89 590.783,1242.71 591.37,1243.19 591.956,1242.52 592.543,1239.08 593.129,1238.89 593.715,1238.31 594.302,1236.15 594.888,1237.28 595.475,1232.58 596.061,1230.62 596.647,1231.94 597.234,1231.76 597.82,1230.23 598.407,1231.23 598.993,1228.1 599.579,1230.78 600.166,1231.95 600.752,1233.18 601.339,1232.91 601.925,1232.45 602.512,1229.16 603.098,1229.04 603.684,1229.28 604.271,1233.03 604.857,1229.79 605.444,1229.52 606.03,1227.89 606.616,1227.8 607.203,1227.46 607.789,1226.17 608.376,1226.42 608.962,1226.12 609.548,1227.48 610.135,1228.84 610.721,1230.07 611.308,1226.78 611.894,1225.38 612.481,1228.12 613.067,1225.17 613.653,1224.98 614.24,1226.32 614.826,1227.63 615.413,1226.2 615.999,1230.51 616.585,1228.88 617.172,1230.18 617.758,1230.18 618.345,1229.87 618.931,1229.3 619.518,1230.4 620.104,1228.86 620.69,1228.63 621.277,1228.43 621.863,1228.34 622.45,1228.25 623.036,1224.07 623.622,1222.6 624.209,1224.28 624.795,1224.33 625.382,1224.29 625.968,1222.56 626.554,1225.5 627.141,1223.79 627.727,1223.84 628.314,1226.41 628.9,1224.91 629.487,1224.97 630.073,1223.7 630.659,1225.21 631.246,1223.82 631.832,1226.62 632.419,1226.33 633.005,1224.79 633.591,1223.39 634.178,1220.67 634.764,1222.48 635.351,1222.42 635.937,1222.67 636.523,1224.12 637.11,1222.81 637.696,1222.78 638.283,1222.64 638.869,1225.5 639.456,1225.48 640.042,1226.61 640.628,1227.71 641.215,1227.52 641.801,1225.6 642.388,1225.59 642.974,1226.61 643.56,1223.64 644.147,1224.75 644.733,1226.53 645.32,1226.07 645.906,1223.03 646.492,1221.71 647.079,1227.57 647.665,1228.86 648.252,1231.56 648.838,1230.97 649.425,1230.57 650.011,1229.98 650.597,1228.07 651.184,1227.79 651.77,1226.11 652.357,1225.94 652.943,1225.97 653.529,1227.01 654.116,1226.99 654.702,1226.76 655.289,1229.03 655.875,1228.44 656.462,1229.43 657.048,1230.65 657.634,1229.91 658.221,1233.79 658.807,1231.88 659.394,1231.66 659.98,1229.57 660.566,1229.14 661.153,1234.18 661.739,1233.38 662.326,1232.77 662.912,1233.49 663.498,1232.93 664.085,1233.58 664.671,1231.77 665.258,1232.56 665.844,1230.37 666.431,1228.36 667.017,1229.62 667.603,1230.82 668.19,1227.93 668.776,1229.12 669.363,1227.09 669.949,1228.4 670.535,1228 671.122,1224.8 671.708,1225.88 672.295,1224.07 672.881,1224.24 673.467,1225.36 674.054,1226.55 674.64,1229.08 675.227,1226.77 675.813,1224.75 676.4,1224.7 676.986,1225.86 677.572,1226.97 678.159,1227.65 678.745,1228.91 679.332,1226.85 679.918,1227.57 680.504,1227.38 681.091,1229.99 681.677,1227.79 682.264,1228.85 682.85,1228.07 683.436,1229.03 684.023,1227.13 684.609,1223.94 685.196,1225.26 685.782,1222.11 686.369,1223.63 686.955,1222.15 687.541,1219.21 688.128,1221.87 688.714,1221.89 689.301,1221.84 689.887,1223.06 690.473,1222.92 691.06,1223.04 691.646,1226.97 692.233,1227.75 692.819,1228.73 693.405,1228.6 693.992,1226.77 694.578,1226.26 695.165,1228.75 695.751,1226.96 696.338,1224.13 696.924,1218.29 697.51,1217.99 698.097,1216.7 698.683,1218.25 699.27,1215.69 699.856,1221.53 700.442,1222.84 701.029,1224.06 701.615,1222.61 702.202,1220.96 702.788,1219.38 703.375,1219.11 703.961,1219.4 704.547,1220.81 705.134,1218.18 705.72,1218.32 706.307,1220.9 706.893,1220.69 707.479,1219.11 708.066,1220.58 708.652,1218.95 709.239,1219.21 709.825,1221.9 710.411,1220.3 710.998,1220.07 711.584,1219.67 712.171,1218.44 712.757,1217.06 713.344,1217.22 713.93,1217.51 714.516,1218.71 715.103,1220.35 715.689,1223.07 716.276,1219.89 716.862,1215.55 717.448,1215.93 718.035,1217.74 718.621,1212.42 719.208,1212.63 719.794,1213.09 720.38,1213.33 720.967,1213.9 721.553,1217.09 722.14,1218.69 722.726,1217.42 723.313,1217.63 723.899,1217.76 724.485,1214.93 725.072,1213.82 725.658,1214.04 726.245,1214.29 726.831,1213.09 727.417,1213.23 728.004,1213.6 728.59,1209.7 729.177,1210.18 729.763,1212.05 730.349,1213.91 730.936,1215.9 731.522,1216.09 732.109,1214.98 732.695,1213.68 733.282,1213.88 733.868,1212.61 734.454,1214.12 735.041,1214.44 735.627,1214.89 736.214,1216.43 736.8,1216.69 737.386,1216.88 737.973,1221.11 738.559,1219.5 739.146,1219.49 739.732,1220.55 740.318,1223.59 740.905,1223.72 741.491,1220.73 742.078,1220.78 742.664,1220.53 743.251,1217.25 743.837,1217.39 744.423,1217.26 745.01,1218.58 745.596,1219.95 746.183,1219.96 746.769,1219.94 747.355,1221.2 747.942,1225.43 748.528,1220.68 749.115,1224.88 749.701,1225.96 750.288,1226.9 750.874,1227.86 751.46,1228.7 752.047,1226.65 752.633,1229.13 753.22,1227.34 753.806,1230.91 754.392,1230.33 754.979,1229.71 755.565,1229.15 756.152,1225.53 756.738,1223.83 757.324,1222.1 757.911,1221.89 758.497,1219.06 759.084,1219.18 759.67,1217.44 760.257,1217.3 760.843,1217.47 761.429,1216 762.016,1216.05 762.602,1214.75 763.189,1216.08 763.775,1214.99 764.361,1214.61 764.948,1216.02 765.534,1216.06 766.121,1216.06 766.707,1214.65 767.293,1217.39 767.88,1216.33 768.466,1216.61 769.053,1218.27 769.639,1219.48 770.226,1220.88 770.812,1219.11 771.398,1217.98 771.985,1217.51 772.571,1216.12 773.158,1216.57 773.744,1216.6 774.33,1215.3 774.917,1217.16 775.503,1217.03 776.09,1218.35 776.676,1218.31 777.262,1217.15 777.849,1214.48 778.435,1213.39 779.022,1212 779.608,1210.93 780.195,1212.71 780.781,1212.54 781.367,1211.4 781.954,1210.26 782.54,1212.33 783.127,1211.37 783.713,1211.72 784.299,1211.93 784.886,1212.15 785.472,1213.97 786.059,1211.26 786.645,1211.47 787.232,1211.77 787.818,1213.58 788.404,1213.85 788.991,1217.21 789.577,1213.05 790.164,1217.6 790.75,1216.01 791.336,1213.42 791.923,1209.11 792.509,1211.01 793.096,1210.06 793.682,1213.36 794.268,1216.46 794.855,1213.74 795.441,1214 796.028,1215.57 796.614,1218.5 797.201,1216.97 797.787,1218.32 798.373,1218.41 798.96,1219.92 799.546,1219.35 800.133,1220.65 800.719,1223.33 801.305,1223.11 801.892,1227.45 802.478,1225.7 803.065,1222.26 803.651,1222.19 804.237,1220.4 804.824,1220.39 805.41,1220.37 805.997,1220.28 806.583,1220.32 807.17,1225.68 807.756,1224.02 808.342,1223.73 808.929,1225.26 809.515,1223.41 810.102,1220.26 810.688,1219.97 811.274,1221.31 811.861,1223.98 812.447,1220.96 813.034,1217.95 813.62,1219.51 814.206,1219.4 814.793,1222.54 815.379,1223.86 815.966,1225.04 816.552,1223.28 817.139,1224.48 817.725,1225.35 818.311,1224.24 818.898,1223.66 819.484,1220.47 820.071,1220.52 820.657,1221.86 821.243,1224.47 821.83,1225.53 822.416,1225.03 823.003,1223.13 823.589,1227.23 824.175,1225.56 824.762,1223.78 825.348,1224.96 825.935,1225.71 826.521,1225.37 827.108,1223.7 827.694,1223.38 828.28,1223.58 828.867,1224.54 829.453,1224.56 830.04,1224.25 830.626,1223.84 831.212,1221.79 831.799,1222.9 832.385,1219.83 832.972,1215.49 833.558,1216.85 834.145,1214.25 834.731,1215.92 835.317,1215.72 835.904,1216.02 836.49,1214.31 837.077,1214.27 837.663,1214.34 838.249,1215.91 838.836,1217.49 839.422,1218.7 840.009,1217.2 840.595,1217.02 841.181,1215.61 841.768,1219.96 842.354,1221.3 842.941,1222.51 843.527,1221.99 844.114,1220.61 844.7,1222.94 845.286,1225.16 845.873,1223.36 846.459,1223.01 847.046,1219.8 847.632,1218.65 848.218,1218.63 848.805,1218.77 849.391,1215.69 849.978,1215.84 850.564,1216.09 851.15,1217.66 851.737,1220.82 852.323,1220.72 852.91,1221.83 853.496,1222.94 854.083,1225.61 854.669,1225.07 855.255,1224.99 855.842,1223.11 856.428,1224.25 857.015,1220.84 857.601,1219.23 858.187,1219.26 858.774,1219.14 859.36,1216.31 859.947,1216.29 860.533,1217.91 861.119,1220.77 861.706,1220.52 862.292,1218.7 862.879,1222.86 863.465,1222.45 864.052,1226.37 864.638,1227.26 865.224,1229.28 865.811,1229.93 866.397,1230.62 866.984,1227.12 867.57,1222.21 868.156,1221.64 868.743,1222.76 869.329,1223.98 869.916,1220.65 870.502,1223.23 871.089,1224.15 871.675,1223.55 872.261,1221.74 872.848,1220 873.434,1219.58 874.021,1221.97 874.607,1224.64 875.193,1224.34 875.78,1220.74 876.366,1221.76 876.953,1218.59 877.539,1215.9 878.125,1218.67 878.712,1218.43 879.298,1216.88 879.885,1214.11 880.471,1211.61 881.058,1210.58 881.644,1210.86 882.23,1212.57 882.817,1214.41 883.403,1213.07 883.99,1213.09 884.576,1213.35 885.162,1213.46 885.749,1212.14 886.335,1213.46 886.922,1212.05 887.508,1212.15 888.094,1213.87 888.681,1216.96 889.267,1220.16 889.854,1224.32 890.44,1223.83 891.027,1227.67 891.613,1225.62 892.199,1224.83 892.786,1223.01 893.372,1221.42 893.959,1222.53 894.545,1222.31 895.131,1220.88 895.718,1220.54 896.304,1219.02 896.891,1216.13 897.477,1217.62 898.063,1215.7 898.65,1218.42 899.236,1215.61 899.823,1215.99 900.409,1215.97 900.996,1214.42 901.582,1213 902.168,1217.33 902.755,1217.22 903.341,1216 903.928,1210.01 904.514,1212.11 905.1,1211.01 905.687,1210.08 906.273,1207.85 906.86,1208.39 907.446,1210.09 908.032,1209.08 908.619,1212.1 909.205,1213.73 909.792,1214.15 910.378,1211.47 910.965,1210.18 911.551,1212.05 912.137,1209.24 912.724,1209.64 913.31,1209.8 913.897,1208.44 914.483,1210.34 915.069,1210.65 915.656,1210.86 916.242,1212.49 916.829,1214.02 917.415,1213.71 918.002,1215.23 918.588,1215.35 919.174,1213.96 919.761,1215.33 920.347,1212.98 920.934,1213.18 921.52,1210.53 922.106,1211.11 922.693,1211.2 923.279,1214.31 923.866,1215.79 924.452,1215.6 925.038,1214.22 925.625,1216.1 926.211,1216.07 926.798,1216.07 927.384,1217.64 927.971,1219.13 928.557,1217.44 929.143,1217.14 929.73,1212.8 930.316,1213.02 930.903,1214.48 931.489,1214.55 932.075,1214.71 932.662,1215 933.248,1214.9 933.835,1213.48 934.421,1212.37 935.007,1212.95 935.594,1210.37 936.18,1210.71 936.767,1211.02 937.353,1209.6 937.94,1211.42 938.526,1211.73 939.112,1211.87 939.699,1214.81 940.285,1213.42 940.872,1212.13 941.458,1215.01 942.044,1216.39 942.631,1216.29 943.217,1213.38 943.804,1213.54 944.39,1212.52 944.976,1211.17 945.563,1211.65 946.149,1211.63 946.736,1211.97 947.322,1208.26 947.909,1211.75 948.495,1214.9 949.081,1216.28 949.668,1213.84 950.254,1213.87 950.841,1215.45 951.427,1217.2 952.013,1217.37 952.6,1214.56 953.186,1214.73 953.773,1214.86 954.359,1215.17 954.945,1218.22 955.532,1216.66 956.118,1215.28 956.705,1216.59 957.291,1218.04 957.878,1219.36 958.464,1217.66 959.05,1214.98 959.637,1214.84 960.223,1217.53 960.81,1217.35 961.396,1218.93 961.982,1218.8 962.569,1219.84 963.155,1216.83 963.742,1215.27 964.328,1213.85 964.915,1215.25 965.501,1219.13 966.087,1220.12 966.674,1221.3 967.26,1219.65 967.847,1219.09 968.433,1218.85 969.019,1217.23 969.606,1217.04 970.192,1212.63 970.779,1212.89 971.365,1215.5 971.951,1217.07 972.538,1215.41 973.124,1217.89 973.711,1217.65 974.297,1217.74 974.884,1219 975.47,1218.77 976.056,1217.49 976.643,1217.42 977.229,1217.28 977.816,1217.02 978.402,1214.22 978.988,1215.09 979.575,1212.37 980.161,1209.82 980.748,1211.75 981.334,1212.32 981.92,1212.56 982.507,1212.96 983.093,1213.14 983.68,1219.26 984.266,1219.07 984.853,1217.45 985.439,1219.02 986.025,1218.61 986.612,1220.96 987.198,1219.45 987.785,1216.43 988.371,1216.31 988.957,1217.67 989.544,1218.86 990.13,1217.14 990.717,1215.59 991.303,1216.69 991.889,1216.72 992.476,1216.49 993.062,1217.64 993.649,1217.64 994.235,1214.69 994.822,1213.29 995.408,1213.41 995.994,1215.08 996.581,1218.01 997.167,1217.87 997.754,1219.18 998.34,1219.05 998.926,1218.69 999.513,1221.06 1000.1,1219.22 1000.69,1218.98 1001.27,1217.22 1001.86,1218.4 1002.44,1217.03 1003.03,1212.57 1003.62,1212.74 1004.2,1209.87 1004.79,1207.44 1005.38,1212.27 1005.96,1215.34 1006.55,1215.49 1007.14,1215.33 1007.72,1214.16 1008.31,1214.14 1008.9,1214.42 1009.48,1216.07 1010.07,1216.27 1010.65,1214.88 1011.24,1213.66 1011.83,1213.7 1012.41,1215.57 1013,1213.9 1013.59,1212.46 1014.17,1211.38 1014.76,1213.3 1015.35,1212.33 1015.93,1212.4 1016.52,1212.47 1017.11,1211.11 1017.69,1212.85 1018.28,1215.64 1018.86,1215.83 1019.45,1214.26 1020.04,1213.07 1020.62,1211.68 1021.21,1213.57 1021.8,1212.38 1022.38,1214.21 1022.97,1214.18 1023.56,1215.5 1024.14,1218.55 1024.73,1219.95 1025.32,1218.49 1025.9,1216.83 1026.49,1215.64 1027.07,1215.76 1027.66,1214.18 1028.25,1215.53 1028.83,1213.85 1029.42,1213.99 1030.01,1213.98 1030.59,1215.69 1031.18,1215.58 1031.77,1215.88 1032.35,1214.37 1032.94,1214.32 1033.52,1214.17 1034.11,1217.27 1034.7,1218.65 1035.28,1216.93 1035.87,1217 1036.46,1217.98 1037.04,1216.55 1037.63,1213.51 1038.22,1212.04 1038.8,1212.22 1039.39,1212.13 1039.98,1207.86 1040.56,1210.79 1041.15,1214.26 1041.73,1214.16 1042.32,1215.74 1042.91,1215.71 1043.49,1214.3 1044.08,1215.29 1044.67,1216.61 1045.25,1217.86 1045.84,1216.29 1046.43,1217.4 1047.01,1218.97 1047.6,1219.02 1048.19,1216.27 1048.77,1217.59 1049.36,1217.34 1049.94,1218.79 1050.53,1217.36 1051.12,1221.87 1051.7,1221.23 1052.29,1220.64 1052.88,1221.59 1053.46,1221.05 1054.05,1217.69 1054.64,1215.96 1055.22,1217.4 1055.81,1217.06 1056.39,1215.34 1056.98,1216.65 1057.57,1222.19 1058.15,1220.65 1058.74,1223.1 1059.33,1222.75 1059.91,1221.15 1060.5,1220.84 1061.09,1217.47 1061.67,1216.27 1062.26,1217.64 1062.85,1217.77 1063.43,1217.18 1064.02,1217.15 1064.6,1219.91 1065.19,1221.07 1065.78,1220.74 1066.36,1220.19 1066.95,1221.64 1067.54,1218.33 1068.12,1221.21 1068.71,1222.12 1069.3,1221.68 1069.88,1216.75 1070.47,1214.01 1071.06,1211.42 1071.64,1211.45 1072.23,1213.11 1072.81,1216.06 1073.4,1213.27 1073.99,1213.59 1074.57,1217.93 1075.16,1219.1 1075.75,1211.71 1076.33,1210.11 1076.92,1209.07 1077.51,1209.35 1078.09,1215.08 1078.68,1216.16 1079.26,1216.21 1079.85,1214.7 1080.44,1214.82 1081.02,1216.26 1081.61,1216.09 1082.2,1218.59 1082.78,1214.11 1083.37,1215.82 1083.96,1215.91 1084.54,1215.93 1085.13,1214.45 1085.72,1213.11 1086.3,1214.22 1086.89,1212.77 1087.47,1211.44 1088.06,1207.46 1088.65,1209.54 1089.23,1209.89 1089.82,1210.13 1090.41,1211.5 1090.99,1212.76 1091.58,1214.21 1092.17,1214.41 1092.75,1214.5 1093.34,1214.28 1093.93,1212.92 1094.51,1214.27 1095.1,1212.83 1095.68,1208.98 1096.27,1208.04 1096.86,1207.2 1097.44,1206.24 1098.03,1205.28 1098.62,1205.89 1099.2,1206.41 1099.79,1207.21 1100.38,1209.21 1100.96,1211.11 1101.55,1208.39 1102.14,1211.6 1102.72,1210.54 1103.31,1209.65 1103.89,1211.29 1104.48,1211.69 1105.07,1213.4 1105.65,1213.25 1106.24,1214.69 1106.83,1214.84 1107.41,1215.04 1108,1214.74 1108.59,1213.26 1109.17,1214.79 1109.76,1214.97 1110.34,1215.09 1110.93,1215.04 1111.52,1216.34 1112.1,1217.51 1112.69,1221.61 1113.28,1218.32 1113.86,1218.3 1114.45,1215.38 1115.04,1220.9 1115.62,1221.88 1116.21,1222.78 1116.8,1220.99 1117.38,1219.37 1117.97,1219.39 1118.55,1220.43 1119.14,1218.87 1119.73,1218.82 1120.31,1218.51 1120.9,1218.11 1121.49,1219.41 1122.07,1222.14 1122.66,1221.78 1123.25,1221.58 1123.83,1221.04 1124.42,1220.83 1125.01,1220.51 1125.59,1220.02 1126.18,1218.43 1126.76,1216.83 1127.35,1218.31 1127.94,1215.74 1128.52,1214.36 1129.11,1213.16 1129.7,1213.35 1130.28,1213.57 1130.87,1213.48 1131.46,1214.96 1132.04,1212.15 1132.63,1214 1133.21,1212.41 1133.8,1214.09 1134.39,1213.96 1134.97,1212.65 1135.56,1212.58 1136.15,1211.34 1136.73,1214.31 1137.32,1217.22 1137.91,1220.95 1138.49,1217.81 1139.08,1218.83 1139.67,1218.54 1140.25,1216.54 1140.84,1215.02 1141.42,1215.16 1142.01,1213.63 1142.6,1213.81 1143.18,1216.62 1143.77,1219.59 1144.36,1220.65 1144.94,1223.33 1145.53,1220.11 1146.12,1223.97 1146.7,1225.01 1147.29,1224.61 1147.88,1224.22 1148.46,1223.6 1149.05,1221.65 1149.63,1219.69 1150.22,1217.79 1150.81,1216.02 1151.39,1215.8 1151.98,1217.24 1152.57,1214.46 1153.15,1211.53 1153.74,1211.51 1154.33,1211.75 1154.91,1210.5 1155.5,1209.42 1156.09,1208.55 1156.67,1207.6 1157.26,1206.26 1157.84,1205.57 1158.43,1207.72 1159.02,1209.73 1159.6,1205.63 1160.19,1206.06 1160.78,1205.44 1161.36,1204.94 1161.95,1204.06 1162.54,1200.21 1163.12,1202.33 1163.71,1204.34 1164.29,1201.95 1164.88,1205.55 1165.47,1207.27 1166.05,1208.78 1166.64,1209.21 1167.23,1209.33 1167.81,1207.96 1168.4,1205.12 1168.99,1205.73 1169.57,1204.69 1170.16,1205.35 1170.75,1205.83 1171.33,1204.85 1171.92,1205.6 1172.5,1206.05 1173.09,1209.67 1173.68,1209.82 1174.26,1211.03 1174.85,1210.02 1175.44,1210.16 1176.02,1214.76 1176.61,1214.88 1177.2,1214.7 1177.78,1214.5 1178.37,1211.7 1178.96,1211.84 1179.54,1210.73 1180.13,1210.95 1180.71,1212.51 1181.3,1211.44 1181.89,1211.61 1182.47,1212.05 1183.06,1213.69 1183.65,1212.34 1184.23,1213.85 1184.82,1213.97 1185.41,1214.4 1185.99,1214.3 1186.58,1214.38 1187.16,1215.63 1187.75,1215.51 1188.34,1215.74 1188.92,1215.79 1189.51,1214.42 1190.1,1215.59 1190.68,1216.98 1191.27,1216.99 1191.86,1216.93 1192.44,1215.42 1193.03,1212.58 1193.62,1212.59 1194.2,1210.14 1194.79,1210.43 1195.37,1211.75 1195.96,1211.77 1196.55,1213.42 1197.13,1212.23 1197.72,1211.04 1198.31,1209.73 1198.89,1208.55 1199.48,1207.64 1200.07,1208.26 1200.65,1208.63 1201.24,1208.99 1201.83,1211.05 1202.41,1211 1203,1214.12 1203.58,1215.86 1204.17,1216.02 1204.76,1217.44 1205.34,1218.68 1205.93,1218.75 1206.52,1218.31 1207.1,1218.17 1207.69,1218.03 1208.28,1216.68 1208.86,1222.22 1209.45,1219 1210.03,1221.58 1210.62,1222.42 1211.21,1223.37 1211.79,1224.44 1212.38,1227.88 1212.97,1227.3 1213.55,1222.17 1214.14,1223.23 1214.73,1222.75 1215.31,1222.38 1215.9,1223.33 1216.49,1224.26 1217.07,1225.18 1217.66,1221.6 1218.24,1221.34 1218.83,1220.89 1219.42,1219.29 1220,1218.99 1220.59,1217.43 1221.18,1217.33 1221.76,1217.2 1222.35,1216.84 1222.94,1216.65 1223.52,1215.19 1224.11,1218.11 1224.7,1220.68 1225.28,1218.9 1225.87,1220.04 1226.45,1218.7 1227.04,1219.58 1227.63,1219.41 1228.21,1217.97 1228.8,1218.13 1229.39,1219.21 1229.97,1219.02 1230.56,1218.54 1231.15,1218.27 1231.73,1219.66 1232.32,1219.4 1232.91,1219.17 1233.49,1218.94 1234.08,1220.09 1234.66,1218.65 1235.25,1219.53 1235.84,1217.91 1236.42,1214.93 1237.01,1216.49 1237.6,1216.64 1238.18,1215.02 1238.77,1213.3 1239.36,1211.95 1239.94,1213.39 1240.53,1215.36 1241.11,1212.84 1241.7,1211.13 1242.29,1210.05 1242.87,1211.54 1243.46,1210.43 1244.05,1205.22 1244.63,1207.03 1245.22,1207.39 1245.81,1210.76 1246.39,1213.33 1246.98,1214.62 1247.57,1211.55 1248.15,1211.82 1248.74,1210.77 1249.32,1211.06 1249.91,1212.46 1250.5,1213.56 1251.08,1212.15 1251.67,1215.4 1252.26,1215.53 1252.84,1218.45 1253.43,1218.37 1254.02,1216.74 1254.6,1215.17 1255.19,1217.93 1255.78,1219.29 1256.36,1219.16 1256.95,1218.94 1257.53,1218.64 1258.12,1217.06 1258.71,1219.72 1259.29,1218 1259.88,1219.07 1260.47,1218.59 1261.05,1219.52 1261.64,1217.89 1262.23,1215.72 1262.81,1216.9 1263.4,1218.12 1263.98,1215.12 1264.57,1213.49 1265.16,1212.01 1265.74,1210.43 1266.33,1210.46 1266.92,1212.2 1267.5,1211.18 1268.09,1212.94 1268.68,1211.5 1269.26,1211.79 1269.85,1211.86 1270.44,1212.33 1271.02,1211.1 1271.61,1212.6 1272.19,1212.84 1272.78,1212.79 1273.37,1210.16 1273.95,1209.02 1274.54,1210.7 1275.13,1211.02 1275.71,1211.39 1276.3,1211.86 1276.89,1213.31 1277.47,1217.69 1278.06,1220.62 1278.65,1218.88 1279.23,1214.57 1279.82,1213.54 1280.4,1213.75 1280.99,1214.92 1281.58,1213.68 1282.16,1218.2 1282.75,1216.39 1283.34,1216.12 1283.92,1217.44 1284.51,1216.16 1285.1,1214.9 1285.68,1213.59 1286.27,1213.72 1286.86,1212.52 1287.44,1211.33 1288.03,1210.31 1288.61,1210.29 1289.2,1211.71 1289.79,1211.87 1290.37,1213.63 1290.96,1215.15 1291.55,1217.98 1292.13,1217.88 1292.72,1217.7 1293.31,1220.33 1293.89,1217.07 1294.48,1216.68 1295.06,1214.94 1295.65,1214.93 1296.24,1214.94 1296.82,1214.9 1297.41,1216.61 1298,1215.01 1298.58,1215.06 1299.17,1214.91 1299.76,1213.73 1300.34,1212.22 1300.93,1210.99 1301.52,1210.1 1302.1,1210.36 1302.69,1212.03 1303.27,1211.98 1303.86,1210.85 1304.45,1212.81 1305.03,1217.26 1305.62,1218.32 1306.21,1219.35 1306.79,1219.15 1307.38,1220.29 1307.97,1220.1 1308.55,1219.66 1309.14,1219.29 1309.73,1218.78 1310.31,1221.42 1310.9,1219.64 1311.48,1219.12 1312.07,1220.46 1312.66,1220.2 1313.24,1219.78 1313.83,1220.91 1314.42,1218.08 1315,1216.67 1315.59,1216.64 1316.18,1216.68 1316.76,1217.95 1317.35,1216.44 1317.93,1217.61 1318.52,1217.51 1319.11,1217.57 1319.69,1217.48 1320.28,1218.65 1320.87,1218.43 1321.45,1219.13 1322.04,1220.43 1322.63,1221.46 1323.21,1224.15 1323.8,1223.53 1324.39,1222.88 1324.97,1224.26 1325.56,1226.6 1326.14,1224.97 1326.73,1223.3 1327.32,1222.91 1327.9,1222.43 1328.49,1220.52 1329.08,1221.95 1329.66,1222.68 1330.25,1220.95 1330.84,1221.93 1331.42,1222.96 1332.01,1219.98 1332.6,1218.1 1333.18,1219.6 1333.77,1216.48 1334.35,1217.82 1334.94,1214.76 1335.53,1217.99 1336.11,1217.71 1336.7,1216.28 1337.29,1216.46 1337.87,1216.53 1338.46,1216.67 1339.05,1216.83 1339.63,1219.56 1340.22,1217.93 1340.8,1219.12 1341.39,1218.66 1341.98,1218.22 1342.56,1217.99 1343.15,1219.01 1343.74,1217.64 1344.32,1217.89 1344.91,1214.97 1345.5,1216.2 1346.08,1210.59 1346.67,1208 1347.26,1207.14 1347.84,1203.54 1348.43,1204.19 1349.01,1207.8 1349.6,1206.67 1350.19,1207.06 1350.77,1207.2 1351.36,1210.74 1351.95,1209.15 1352.53,1206.83 1353.12,1205.87 1353.71,1206.24 1354.29,1206.83 1354.88,1207.31 1355.47,1208.97 1356.05,1212.4 1356.64,1212.37 1357.22,1213.75 1357.81,1211.13 1358.4,1214.17 1358.98,1214.28 1359.57,1213.98 1360.16,1215.52 1360.74,1218.33 1361.33,1220.98 1361.92,1220.63 1362.5,1220.3 1363.09,1219.87 1363.68,1219.79 1364.26,1218.1 1364.85,1219.53 1365.43,1219.52 1366.02,1219.25 1366.61,1217.39 1367.19,1220.04 1367.78,1219.6 1368.37,1219.33 1368.95,1213.44 1369.54,1211.86 1370.13,1213.38 1370.71,1211.97 1371.3,1209.29 1371.88,1208.39 1372.47,1210.24 1373.06,1211.9 1373.64,1216.34 1374.23,1217.86 1374.82,1215.01 1375.4,1214.85 1375.99,1214.81 1376.58,1214.59 1377.16,1213.05 1377.75,1212.83 1378.34,1211.21 1378.92,1214.09 1379.51,1215.6 1380.09,1217.08 1380.68,1218.56 1381.27,1214.17 1381.85,1212.85 1382.44,1210.21 1383.03,1206.3 1383.61,1207.84 1384.2,1208.3 1384.79,1207.21 1385.37,1206.43 1385.96,1209.56 1386.55,1206.98 1387.13,1206.15 1387.72,1204.8 1388.3,1203.77 1388.89,1206.96 1389.48,1208.92 1390.06,1210.77 1390.65,1211.18 1391.24,1211.36 1391.82,1211.42 1392.41,1214.26 1393,1214.58 1393.58,1217.65 1394.17,1219.21 1394.75,1218.9 1395.34,1220.29 1395.93,1217.12 1396.51,1215.46 1397.1,1215.37 1397.69,1214.95 1398.27,1216.23 1398.86,1217.66 1399.45,1216.24 1400.03,1217.88 1400.62,1217.68 1401.21,1217.58 1401.79,1215.94 1402.38,1217.34 1402.96,1217.25 1403.55,1213.92 1404.14,1214.07 1404.72,1208.64 1405.31,1206.32 1405.9,1203.78 1406.48,1207.09 1407.07,1204.55 1407.66,1203.73 1408.24,1202.86 1408.83,1202.28 1409.42,1205.66 1410,1210.01 1410.59,1208.99 1411.17,1210.75 1411.76,1212.24 1412.35,1212.3 1412.93,1213.92 1413.52,1214.15 1414.11,1215.79 1414.69,1218.58 1415.28,1218.28 1415.87,1217.92 1416.45,1219.16 1417.04,1218.82 1417.63,1216.07 1418.21,1217.42 1418.8,1216.12 1419.38,1217.36 1419.97,1215.9 1420.56,1214.19 1421.14,1212.68 1421.73,1211.6 1422.32,1211.73 1422.9,1212.86 1423.49,1211.6 1424.08,1211.66 1424.66,1211.63 1425.25,1210.25 1425.83,1211.72 1426.42,1209.2 1427.01,1209.75 1427.59,1208.38 1428.18,1208.72 1428.77,1210.43 1429.35,1212.37 1429.94,1211.15 1430.53,1212.96 1431.11,1213.01 1431.7,1214.78 1432.29,1214.52 1432.87,1214.49 1433.46,1213.31 1434.04,1210.77 1434.63,1212.38 1435.22,1212.73 1435.8,1215.63 1436.39,1218.53 1436.98,1218.43 1437.56,1216.77 1438.15,1217.89 1438.74,1216.49 1439.32,1214.76 1439.91,1216.3 1440.5,1216.3 1441.08,1210.67 1441.67,1210.93 1442.25,1215.27 1442.84,1215.15 1443.43,1215.12 1444.01,1213.86 1444.6,1215.35 1445.19,1215.39 1445.77,1215.47 1446.36,1213.73 1446.95,1215.27 1447.53,1215.08 1448.12,1216.59 1448.7,1217.71 1449.29,1216.19 1449.88,1218.05 1450.46,1217.91 1451.05,1219.12 1451.64,1221.77 1452.22,1221.04 1452.81,1216.83 1453.4,1215.28 1453.98,1215.36 1454.57,1215.13 1455.16,1215.05 1455.74,1213.72 1456.33,1215.11 1456.91,1213.67 1457.5,1213.76 1458.09,1212.46 1458.67,1215.32 1459.26,1215.37 1459.85,1213.78 1460.43,1214.02 1461.02,1214.33 1461.61,1215.76 1462.19,1215.62 1462.78,1213.71 1463.37,1214.89 1463.95,1216.13 1464.54,1214.68 1465.12,1213.36 1465.71,1211.88 1466.3,1217.64 1466.88,1217.11 1467.47,1215.26 1468.06,1215.04 1468.64,1214.94 1469.23,1216.04 1469.82,1217.23 1470.4,1217.18 1470.99,1215.73 1471.57,1211.51 1472.16,1211.45 1472.75,1213.06 1473.33,1213.46 1473.92,1214.85 1474.51,1219.41 1475.09,1217.83 1475.68,1215.01 1476.27,1216.42 1476.85,1219.03 1477.44,1216.05 1478.03,1213.08 1478.61,1208.61 1479.2,1212.96 1479.78,1213.1 1480.37,1211.65 1480.96,1211.69 1481.54,1207.82 1482.13,1209.54 1482.72,1209.9 1483.3,1211.53 1483.89,1208.79 1484.48,1210.38 1485.06,1210.42 1485.65,1212.2 1486.24,1212.62 1486.82,1213.91 1487.41,1215.69 1487.99,1215.84 1488.58,1217.21 1489.17,1219.78 1489.75,1219.33 1490.34,1218.87 1490.93,1218.67 1491.51,1217.07 1492.1,1221.25 1492.69,1218.06 1493.27,1215.24 1493.86,1213.75 1494.45,1216.43 1495.03,1217.63 1495.62,1216.29 1496.2,1212.24 1496.79,1215.11 1497.38,1217.86 1497.96,1217.7 1498.55,1217.7 1499.14,1216.2 1499.72,1215.88 1500.31,1215.89 1500.9,1215.77 1501.48,1215.65 1502.07,1220.09 1502.65,1221.26 1503.24,1222.3 1503.83,1223.37 1504.41,1225.52 1505,1224.8 1505.59,1224.2 1506.17,1222.27 1506.76,1221.86 1507.35,1222.71 1507.93,1225.02 1508.52,1224.4 1509.11,1223.69 1509.69,1224.62 1510.28,1221.42 1510.86,1222.38 1511.45,1219.49 1512.04,1216.25 1512.62,1217.6 1513.21,1220.34 1513.8,1220.04 1514.38,1218.33 1514.97,1216.86 1515.56,1215.29 1516.14,1215.09 1516.73,1212.19 1517.32,1210.84 1517.9,1212.24 1518.49,1210.45 1519.07,1212.1 1519.66,1212.19 1520.25,1212.15 1520.83,1212.11 1521.42,1213.86 1522.01,1209.83 1522.59,1211.66 1523.18,1211.56 1523.77,1211.65 1524.35,1209.09 1524.94,1209.18 1525.52,1210.99 1526.11,1212.67 1526.7,1215.34 1527.28,1212.46 1527.87,1209.74 1528.46,1208.72 1529.04,1211.91 1529.63,1209.23 1530.22,1209.31 1530.8,1211.04 1531.39,1211.38 1531.98,1213.11 1532.56,1214.58 1533.15,1215.78 1533.73,1217.19 1534.32,1215.39 1534.91,1212.85 1535.49,1211.44 1536.08,1209.93 1536.67,1210.26 1537.25,1209.08 1537.84,1209.59 1538.43,1212.82 1539.01,1212.56 1539.6,1212.63 1540.19,1212.55 1540.77,1214.34 1541.36,1215.92 1541.94,1215.82 1542.53,1212.93 1543.12,1214.26 1543.7,1217.09 1544.29,1219.66 1544.88,1219.62 1545.46,1220.82 1546.05,1224.52 1546.64,1222.75 1547.22,1223.58 1547.81,1220.42 1548.4,1216.91 1548.98,1214.01 1549.57,1212.52 1550.15,1212.65 1550.74,1212.82 1551.33,1210.32 1551.91,1209.1 1552.5,1211.26 1553.09,1210.24 1553.67,1212.78 1554.26,1212.93 1554.85,1213.19 1555.43,1216.4 1556.02,1216.29 1556.6,1219.29 1557.19,1220.58 1557.78,1220.44 1558.36,1218.72 1558.95,1219.96 1559.54,1222.44 1560.12,1223.22 1560.71,1222.69 1561.3,1220.9 1561.88,1223.16 1562.47,1222.83 1563.06,1222.5 1563.64,1219.36 1564.23,1220.39 1564.81,1218.85 1565.4,1215.84 1565.99,1214.21 1566.57,1211.3 1567.16,1214.04 1567.75,1215.42 1568.33,1216.92 1568.92,1217.98 1569.51,1219.32 1570.09,1217.66 1570.68,1217.62 1571.27,1217.39 1571.85,1215.82 1572.44,1214.14 1573.02,1213.8 1573.61,1216.75 1574.2,1216.49 1574.78,1215 1575.37,1219.19 1575.96,1221.63 1576.54,1221.21 1577.13,1223.37 1577.72,1225.89 1578.3,1226.87 1578.89,1229.11 1579.47,1227.06 1580.06,1226.31 1580.65,1226.91 1581.23,1227.69 1581.82,1228.05 1582.41,1227.36 1582.99,1226.73 1583.58,1226.06 1584.17,1228.02 1584.75,1225.92 1585.34,1225 1585.93,1223.11 1586.51,1224.08 1587.1,1219.54 1587.68,1217.71 1588.27,1215.93 1588.86,1217.4 1589.44,1217.34 1590.03,1217.29 1590.62,1218.23 1591.2,1216.73 1591.79,1215.34 1592.38,1214.11 1592.96,1212.74 1593.55,1214.59 1594.14,1214.37 1594.72,1211.72 1595.31,1210.5 1595.89,1207.98 1596.48,1206.68 1597.07,1204.3 1597.65,1203.14 1598.24,1200.91 1598.83,1200.43 1599.41,1199.69 1600,1193.46 1600.59,1198.99 1601.17,1198.43 1601.76,1200.6 1602.34,1203.89 1602.93,1206.09 1603.52,1208.16 1604.1,1209.72 1604.69,1211.55 1605.28,1211.64 1605.86,1210.44 1606.45,1211.85 1607.04,1211.91 1607.62,1212.2 1608.21,1211.1 1608.8,1209.97 1609.38,1211.8 1609.97,1213.38 1610.55,1214.83 1611.14,1216.13 1611.73,1216.26 1612.31,1216.33 1612.9,1216.3 1613.49,1216.32 1614.07,1217.67 1614.66,1219.16 1615.25,1219.09 1615.83,1217.39 1616.42,1215.78 1617.01,1213.06 1617.59,1212.96 1618.18,1212.66 1618.76,1212.47 1619.35,1212.31 1619.94,1209.49 1620.52,1209.86 1621.11,1214.41 1621.7,1214.52 1622.28,1208.86 1622.87,1209.45 1623.46,1209.66 1624.04,1208.36 1624.63,1204.4 1625.22,1206.17 1625.8,1206.59 1626.39,1205.69 1626.97,1205.95 1627.56,1206.47 1628.15,1206.85 1628.73,1210.59 1629.32,1212.47 1629.91,1212.69 1630.49,1213.97 1631.08,1212.61 1631.67,1212.53 1632.25,1209.83 1632.84,1210.18 1633.42,1207.65 1634.01,1207.99 1634.6,1208.45 1635.18,1208.78 1635.77,1212.39 1636.36,1211.01 1636.94,1211.48 1637.53,1212.9 1638.12,1215.86 1638.7,1213.3 1639.29,1210.7 1639.88,1209.66 1640.46,1211.51 1641.05,1210.3 1641.63,1210.47 1642.22,1211.99 1642.81,1212.17 1643.39,1212.23 1643.98,1215.5 1644.57,1216.83 1645.15,1218.24 1645.74,1218.71 1646.33,1215.65 1646.91,1217.19 1647.5,1215.66 1648.09,1215.69 1648.67,1215.87 1649.26,1215.58 1649.84,1215.43 1650.43,1215.28 1651.02,1213.98 1651.6,1214.15 1652.19,1216.99 1652.78,1218.24 1653.36,1219.33 1653.95,1220.35 1654.54,1221.56 1655.12,1222.73 1655.71,1220.8 1656.29,1218.89 1656.88,1220.92 1657.47,1220.88 1658.05,1220.49 1658.64,1221.65 1659.23,1222.46 1659.81,1220.74 1660.4,1219.21 1660.99,1220.01 1661.57,1225.17 1662.16,1224.66 1662.75,1225.45 1663.33,1223.47 1663.92,1217.32 1664.5,1214.5 1665.09,1211.62 1665.68,1211.77 1666.26,1211.84 1666.85,1211.88 1667.44,1211.97 1668.02,1212.24 1668.61,1212.18 1669.2,1213.68 1669.78,1211.09 1670.37,1211.31 1670.96,1215.39 1671.54,1216.77 1672.13,1215.34 1672.71,1220.81 1673.3,1218.88 1673.89,1218.84 1674.47,1218.57 1675.06,1219.76 1675.65,1213.67 1676.23,1213.54 1676.82,1214.62 1677.41,1214.56 1677.99,1217.32 1678.58,1218.4 1679.17,1219.55 1679.75,1215.04 1680.34,1217.79 1680.92,1217.31 1681.51,1213.2 1682.1,1214.79 1682.68,1210.54 1683.27,1209.31 1683.86,1206.73 1684.44,1208.65 1685.03,1210.51 1685.62,1212.32 1686.2,1215.12 1686.79,1212.61 1687.37,1209.83 1687.96,1209.96 1688.55,1203.28 1689.13,1206.66 1689.72,1207.02 1690.31,1204.34 1690.89,1203.46 1691.48,1202.7 1692.07,1207.55 1692.65,1209.49 1693.24,1208.23 1693.83,1205.77 1694.41,1209.07 1695,1209.46 1695.58,1211.34 1696.17,1211.35 1696.76,1211.52 1697.34,1211.83 1697.93,1212.14 1698.52,1213.79 1699.1,1214.08 1699.69,1214.47 1700.28,1214.56 1700.86,1214.96 1701.45,1215.02 1702.04,1211.8 1702.62,1211.88 1703.21,1210.68 1703.79,1207.83 1704.38,1208.43 1704.97,1207.42 1705.55,1207.87 1706.14,1208.1 1706.73,1207 1707.31,1206.34 1707.9,1207.89 1708.49,1208.36 1709.07,1207.57 1709.66,1208 1710.24,1206.8 1710.83,1211.51 1711.42,1210.07 1712,1208.95 1712.59,1207.65 1713.18,1211.01 1713.76,1210.08 1714.35,1210.35 1714.94,1209.08 1715.52,1209.17 1716.11,1212.14 1716.7,1217.73 1717.28,1216.27 1717.87,1215.03 1718.45,1219.53 1719.04,1216.43 1719.63,1217.71 1720.21,1217.33 1720.8,1217.29 1721.39,1217.14 1721.97,1217.13 1722.56,1216.82 1723.15,1216.51 1723.73,1219.23 1724.32,1222.8 1724.91,1226.23 1725.49,1224.14 1726.08,1223.38 1726.66,1224.36 1727.25,1224.88 1727.84,1227.17 1728.42,1226.49 1729.01,1226.12 1729.6,1225.56 1730.18,1223.76 1730.77,1221.7 1731.36,1218.76 1731.94,1217.42 1732.53,1214.42 1733.11,1217.17 1733.7,1218.62 1734.29,1221.66 1734.87,1222.82 1735.46,1219.76 1736.05,1222.35 1736.63,1224.49 1737.22,1225.6 1737.81,1225.14 1738.39,1223.16 1738.98,1224.16 1739.57,1223.45 1740.15,1227.12 1740.74,1226.52 1741.32,1230.06 1741.91,1226.44 1742.5,1222.79 1743.08,1220.87 1743.67,1221.88 1744.26,1220.34 1744.84,1220.03 1745.43,1219.63 1746.02,1219.47 1746.6,1214.79 1747.19,1210.33 1747.78,1206.61 1748.36,1207.13 1748.95,1207.28 1749.53,1207.91 1750.12,1208.1 1750.71,1207.17 1751.29,1207.7 1751.88,1209.39 1752.47,1208.21 1753.05,1207.09 1753.64,1208.87 1754.23,1207.79 1754.81,1205.43 1755.4,1206.29 1755.99,1206.8 1756.57,1210.3 1757.16,1213.14 1757.74,1213.28 1758.33,1212.12 1758.92,1213.79 1759.5,1211.08 1760.09,1211.41 1760.68,1214.44 1761.26,1217.14 1761.85,1216.86 1762.44,1215.48 1763.02,1213.75 1763.61,1212.73 1764.19,1216.9 1764.78,1216.43 1765.37,1216.71 1765.95,1218.01 1766.54,1217.91 1767.13,1217.52 1767.71,1217.47 1768.3,1217.56 1768.89,1217.4 1769.47,1220.26 1770.06,1220.26 1770.65,1220.11 1771.23,1221.22 1771.82,1219.31 1772.4,1220.68 1772.99,1221.53 1773.58,1215.42 1774.16,1213.91 1774.75,1215.25 1775.34,1216.59 1775.92,1213.75 1776.51,1213.9 1777.1,1215.51 1777.68,1218.28 1778.27,1218.3 1778.86,1215.18 1779.44,1218.19 1780.03,1218.3 1780.61,1215.46 1781.2,1212.76 1781.79,1215.68 1782.37,1215.65 1782.96,1218.47 1783.55,1219.27 1784.13,1218.92 1784.72,1217.1 1785.31,1216.88 1785.89,1218.04 1786.48,1216.76 1787.06,1218.12 1787.65,1218.89 1788.24,1218.63 1788.82,1216.64 1789.41,1217.83 1790,1217.76 1790.58,1222.97 1791.17,1220.97 1791.76,1220.89 1792.34,1222.06 1792.93,1222.87 1793.52,1223.84 1794.1,1217.55 1794.69,1215.86 1795.27,1217 1795.86,1215.42 1796.45,1215.49 1797.03,1213.7 1797.62,1213.71 1798.21,1213.78 1798.79,1212.27 1799.38,1210.96 1799.97,1211.33 1800.55,1208.75 1801.14,1207.98 1801.73,1205.64 1802.31,1208.88 1802.9,1210.53 1803.48,1212.11 1804.07,1212.44 1804.66,1207.79 1805.24,1209.7 1805.83,1209.91 1806.42,1210.25 1807,1207.25 1807.59,1207.61 1808.18,1208.08 1808.76,1209.87 1809.35,1211.58 1809.94,1211.78 1810.52,1213.28 1811.11,1211.69 1811.69,1211.67 1812.28,1214.71 1812.87,1214.84 1813.45,1213.45 1814.04,1213.39 1814.63,1213.74 1815.21,1215.28 1815.8,1212.31 1816.39,1212.67 1816.97,1212.82 1817.56,1213.1 1818.14,1210.25 1818.73,1212.01 1819.32,1207.73 1819.9,1207.02 1820.49,1208.93 1821.08,1212.05 1821.66,1212.29 1822.25,1211.13 1822.84,1211.35 1823.42,1213.23 1824.01,1213.55 1824.6,1213.65 1825.18,1214.18 1825.77,1214.37 1826.35,1220.17 1826.94,1221.03 1827.53,1217.9 1828.11,1219.17 1828.7,1219.21 1829.29,1219.21 1829.87,1216.18 1830.46,1217.57 1831.05,1214.61 1831.63,1214.66 1832.22,1214.53 1832.81,1214.73 1833.39,1216.12 1833.98,1214.91 1834.56,1213.49 1835.15,1212.04 1835.74,1212.58 1836.32,1214.42 1836.91,1216.04 1837.5,1211.65 1838.08,1211.89 1838.67,1213.45 1839.26,1210.92 1839.84,1212.45 1840.43,1212.49 1841.01,1209.43 1841.6,1211.13 1842.19,1212.62 1842.77,1213.98 1843.36,1212.65 1843.95,1212.49 1844.53,1212.68 1845.12,1209.78 1845.71,1210.17 1846.29,1211.78 1846.88,1213.32 1847.47,1214.94 1848.05,1219.14 1848.64,1219.05 1849.22,1218.47 1849.81,1215.42 1850.4,1216.96 1850.98,1218.28 1851.57,1219.36 1852.16,1219.1 1852.74,1217.23 1853.33,1218.82 1853.92,1216.99 1854.5,1215.47 1855.09,1216.88 1855.68,1218.39 1856.26,1220.93 1856.85,1222.07 1857.43,1224.32 1858.02,1222.25 1858.61,1221.77 1859.19,1219.98 1859.78,1219.81 1860.37,1216.89 1860.95,1216.44 1861.54,1217.39 1862.13,1217.35 1862.71,1218.69 1863.3,1221.76 1863.88,1222.89 1864.47,1219.53 1865.06,1220.87 1865.64,1222.05 1866.23,1223.03 1866.82,1223.96 1867.4,1219.64 1867.99,1219.62 1868.58,1219.25 1869.16,1214.71 1869.75,1216.2 1870.34,1216.12 1870.92,1214.82 1871.51,1214.75 1872.09,1211.75 1872.68,1212.09 1873.27,1209.35 1873.85,1207.93 1874.44,1208.02 1875.03,1209.96 1875.61,1211.64 1876.2,1210.36 1876.79,1213.3 1877.37,1216.22 1877.96,1215.27 1878.55,1214.95 1879.13,1216.36 1879.72,1217.42 1880.3,1219.98 1880.89,1221.02 1881.48,1220.66 1882.06,1221.77 1882.65,1221.58 1883.24,1218.56 1883.82,1218.4 1884.41,1216.52 1885,1217.79 1885.58,1214.76 1886.17,1213.57 1886.76,1216.52 1887.34,1217.86 1887.93,1217.57 1888.51,1211.71 1889.1,1211.79 1889.69,1214.46 1890.27,1214.32 1890.86,1213.1 1891.45,1209.04 1892.03,1209.16 1892.62,1206.65 1893.21,1202.7 1893.79,1203.52 1894.38,1204.14 1894.96,1206.28 1895.55,1214.04 1896.14,1215.85 1896.72,1215.72 1897.31,1217.09 1897.9,1213.99 1898.48,1212.64 1899.07,1215.27 1899.66,1212.37 1900.24,1213.94 1900.83,1211.27 1901.42,1211.57 1902,1213.23 1902.59,1214.87 1903.17,1215.11 1903.76,1213.16 1904.35,1213.21 1904.93,1214.9 1905.52,1213.22 1906.11,1214.79 1906.69,1217.44 1907.28,1217.6 1907.87,1220.29 1908.45,1222.95 1909.04,1221.2 1909.63,1219.41 1910.21,1217.82 1910.8,1216.09 1911.38,1215.94 1911.97,1214.39 1912.56,1214.26 1913.14,1214.69 1913.73,1217.54 1914.32,1215.93 1914.9,1213.57 1915.49,1210.81 1916.08,1213.68 1916.66,1213.72 1917.25,1210.8 1917.83,1211.19 1918.42,1210.24 1919.01,1209.24 1919.59,1209.65 1920.18,1211.43 1920.77,1213.3 1921.35,1211.79 1921.94,1211.91 1922.53,1211.99 1923.11,1211.99 1923.7,1210.82 1924.29,1212 1924.87,1210.78 1925.46,1214.12 1926.04,1212.43 1926.63,1210.95 1927.22,1213.95 1927.8,1220.93 1928.39,1222.11 1928.98,1221.77 1929.56,1223.2 1930.15,1224.48 1930.74,1224.03 1931.32,1223.68 1931.91,1221.7 1932.5,1221.62 1933.08,1221.51 1933.67,1219.65 1934.25,1218.13 1934.84,1215.12 1935.43,1213.66 1936.01,1216.5 1936.6,1216.52 1937.19,1215.19 1937.77,1215.35 1938.36,1216.71 1938.95,1218.16 1939.53,1217.74 1940.12,1217.33 1940.71,1218.21 1941.29,1216.63 1941.88,1216.09 1942.46,1214.84 1943.05,1213.53 1943.64,1213.53 1944.22,1213.62 1944.81,1213.78 1945.4,1214.91 1945.98,1212.1 1946.57,1207.93 1947.16,1209.65 1947.74,1209.74 1948.33,1208.66 1948.91,1208.85 1949.5,1210.57 1950.09,1209.37 1950.67,1210.81 1951.26,1213.99 1951.85,1214.15 1952.43,1211.33 1953.02,1214.4 1953.61,1211.71 1954.19,1210.2 1954.78,1210.44 1955.37,1207.88 1955.95,1209.75 1956.54,1208.42 1957.12,1212.82 1957.71,1213.14 1958.3,1214.47 1958.88,1214.64 1959.47,1216.26 1960.06,1214.74 1960.64,1213.14 1961.23,1214.65 1961.82,1214.51 1962.4,1215.9 1962.99,1211.76 1963.58,1209.24 1964.16,1212.5 1964.75,1211.3 1965.33,1209.85 1965.92,1212.81 1966.51,1211.71 1967.09,1211.95 1967.68,1210.68 1968.27,1212.55 1968.85,1212.66 1969.44,1216.86 1970.03,1218.31 1970.61,1215.17 1971.2,1212.29 1971.78,1210.87 1972.37,1210.76 1972.96,1212.42 1973.54,1211.08 1974.13,1208.51 1974.72,1208.8 1975.3,1209.23 1975.89,1208.03 1976.48,1206.82 1977.06,1207.38 1977.65,1207.54 1978.24,1208.04 1978.82,1207.96 1979.41,1208.2 1979.99,1208.64 1980.58,1210.34 1981.17,1209.25 1981.75,1210.61 1982.34,1210.81 1982.93,1209.3 1983.51,1209.85 1984.1,1213.08 1984.69,1216.97 1985.27,1216.91 1985.86,1215.5 1986.45,1214.04 1987.03,1213.93 1987.62,1214.1 1988.2,1214.13 1988.79,1214.29 1989.38,1212.63 1989.96,1214.37 1990.55,1214.38 1991.14,1213 1991.72,1213.19 1992.31,1214.97 1992.9,1213.72 1993.48,1212.64 1994.07,1212.87 1994.65,1214.14 1995.24,1217.24 1995.83,1217.06 1996.41,1215.67 1997,1217.07 1997.59,1215.51 1998.17,1216.86 1998.76,1213.96 1999.35,1214.02 1999.93,1215.68 2000.52,1212.75 2001.11,1212.68 2001.69,1211.62 2002.28,1213.28 2002.86,1214.68 2003.45,1214.47 2004.04,1215.68 2004.62,1215.55 2005.21,1216.97 2005.8,1218.08 2006.38,1217.87 2006.97,1216.14 2007.56,1217.37 2008.14,1215.84 2008.73,1214.37 2009.32,1212.85 2009.9,1214.05 2010.49,1211.01 2011.07,1212.62 2011.66,1214.23 2012.25,1213.96 2012.83,1214.03 2013.42,1214.13 2014.01,1212.85 2014.59,1210.17 2015.18,1211.98 2015.77,1213.55 2016.35,1210.8 2016.94,1210.91 2017.53,1213.76 2018.11,1212.33 2018.7,1210.95 2019.28,1209.73 2019.87,1208.5 2020.46,1207.42 2021.04,1207.7 2021.63,1209.6 2022.22,1211.27 2022.8,1215.38 2023.39,1214 2023.98,1212.69 2024.56,1213 2025.15,1214.56 2025.73,1216.09 2026.32,1214.33 2026.91,1214.27 2027.49,1215.84 2028.08,1212.98 2028.67,1208.62 2029.25,1208.98 2029.84,1209.05 2030.43,1209.57 2031.01,1208.35 2031.6,1211.5 2032.19,1211.82 2032.77,1214.68 2033.36,1211.82 2033.94,1210.22 2034.53,1210.36 2035.12,1209.12 2035.7,1209.11 2036.29,1207.88 2036.88,1209.6 2037.46,1211.29 2038.05,1215.81 2038.64,1214.02 2039.22,1214.02 2039.81,1211.07 2040.4,1211.24 2040.98,1212.85 2041.57,1214.46 2042.15,1214.73 2042.74,1214.8 2043.33,1215.13 2043.91,1216.65 2044.5,1216.38 2045.09,1216.41 2045.67,1214.82 2046.26,1214.76 2046.85,1215.93 2047.43,1217.37 2048.02,1217.19 2048.6,1219.66 2049.19,1219.51 2049.78,1219.38 2050.36,1220.31 2050.95,1221.68 2051.54,1224.34 2052.12,1222.59 2052.71,1217.97 2053.3,1217.58 2053.88,1214.28 2054.47,1212.93 2055.06,1211.29 2055.64,1206.95 2056.23,1207.2 2056.81,1213.63 2057.4,1214.98 2057.99,1214.95 2058.57,1216.35 2059.16,1214.75 2059.75,1214.72 2060.33,1213.43 2060.92,1216.39 2061.51,1216.26 2062.09,1218.93 2062.68,1218.43 2063.27,1216.84 2063.85,1218.1 2064.44,1217.82 2065.02,1220.48 2065.61,1218.57 2066.2,1221.15 2066.78,1220.93 2067.37,1220.74 2067.96,1220.46 2068.54,1221.39 2069.13,1219.32 2069.72,1222.81 2070.3,1224.92 2070.89,1223 2071.48,1223.94 2072.06,1223.45 2072.65,1221.56 2073.23,1223 2073.82,1222.35 2074.41,1220.46 2074.99,1220.06 2075.58,1219.74 2076.17,1221.02 2076.75,1223.61 2077.34,1221.57 2077.93,1221.34 2078.51,1219.66 2079.1,1217.99 2079.68,1220.37 2080.27,1215.79 2080.86,1213.02 2081.44,1213.19 2082.03,1216.1 2082.62,1214.72 2083.2,1214.58 2083.79,1211.69 2084.38,1212.93 2084.96,1213.06 2085.55,1211.69 2086.14,1214.8 2086.72,1212.2 2087.31,1210.91 2087.89,1209.43 2088.48,1210.81 2089.07,1210.77 2089.65,1210.7 2090.24,1210.82 2090.83,1209.66 2091.41,1209.79 2092,1208.69 2092.59,1210.46 2093.17,1209.39 2093.76,1209.56 2094.35,1207.28 2094.93,1209.05 2095.52,1210.72 2096.1,1211.1 2096.69,1212.74 2097.28,1212.81 2097.86,1214.3 2098.45,1211.27 2099.04,1213.03 2099.62,1211.84 2100.21,1213.44 2100.8,1213.56 2101.38,1209.45 2101.97,1211.42 2102.55,1214.11 2103.14,1212.5 2103.73,1213.96 2104.31,1213.87 2104.9,1213.98 2105.49,1214.07 2106.07,1215.81 2106.66,1215.6 2107.25,1215.09 2107.83,1213.58 2108.42,1216.48 2109.01,1214.75 2109.59,1214.57 2110.18,1214.24 2110.76,1217.06 2111.35,1218.33 2111.94,1216.99 2112.52,1216.65 2113.11,1214.89 2113.7,1214.62 2114.28,1214.77 2114.87,1210.56 2115.46,1209.33 2116.04,1209.57 2116.63,1209.76 2117.22,1211.29 2117.8,1212.98 2118.39,1210.07 2118.97,1211.57 2119.56,1211.72 2120.15,1212.02 2120.73,1212.13 2121.32,1213.93 2121.91,1213.85 2122.49,1214.1 2123.08,1212.93 2123.67,1213.07 2124.25,1213.19 2124.84,1211.94 2125.42,1212.18 2126.01,1210.85 2126.6,1213.85 2127.18,1212.76 2127.77,1208.66 2128.36,1210.43 2128.94,1209.19 2129.53,1209.67 2130.12,1208.68 2130.7,1212.16 2131.29,1213.61 2131.88,1212.35 2132.46,1213.96 2133.05,1212.7 2133.63,1207.12 2134.22,1207.62 2134.81,1209.77 2135.39,1210.14 2135.98,1209.09 2136.57,1210.77 2137.15,1209.68 2137.74,1212.54 2138.33,1210.01 2138.91,1210.38 2139.5,1210.97 2140.09,1209.91 2140.67,1211.92 2141.26,1214.87 2141.84,1213.4 2142.43,1213.49 2143.02,1212.06 2143.6,1211.01 2144.19,1213.88 2144.78,1213.83 2145.36,1213.83 2145.95,1214.01 2146.54,1211.34 2147.12,1209.85 2147.71,1211.5 2148.3,1211.89 2148.88,1210.5 2149.47,1210.64 2150.05,1213.64 2150.64,1213.57 2151.23,1212.4 2151.81,1212.54 2152.4,1215.42 2152.99,1212.76 2153.57,1214.19 2154.16,1217.06 2154.75,1218.48 2155.33,1218.43 2155.92,1220.05 2156.5,1224.02 2157.09,1222.18 2157.68,1220.65 2158.26,1221.9 \"/>\n<path clip-path=\"url(#clip262)\" d=\"M986.025 1215.1 L986.612 1215.1 L987.198 1215.1 L987.785 1215.1 L988.371 1215.1 L988.957 1215.1 L989.544 1215.1 L990.13 1215.1 L990.717 1215.1 L991.303 1215.1 L991.889 1215.1 L992.476 1215.1 L993.062 1215.1 L993.649 1215.1 L994.235 1215.1 L994.822 1215.1 L995.408 1215.1 L995.994 1215.1 L996.581 1215.1 L997.167 1215.1 L997.754 1215.1 L998.34 1215.1 L998.926 1215.1 L999.513 1215.1 L1000.1 1215.1 L1000.69 1215.1 L1001.27 1215.1 L1001.86 1215.1 L1002.44 1215.1 L1003.03 1215.1 L1003.62 1215.1 L1004.2 1215.1 L1004.79 1215.1 L1005.38 1215.1 L1005.96 1215.1 L1006.55 1215.1 L1007.14 1215.1 L1007.72 1215.1 L1008.31 1215.1 L1008.9 1215.1 L1009.48 1215.1 L1010.07 1215.1 L1010.65 1215.1 L1011.24 1215.1 L1011.83 1215.1 L1012.41 1215.1 L1013 1215.1 L1013.59 1215.1 L1014.17 1215.1 L1014.76 1215.1 L1015.35 1215.1 L1015.93 1215.1 L1016.52 1215.1 L1017.11 1215.1 L1017.69 1215.1 L1018.28 1215.1 L1018.86 1215.1 L1019.45 1215.1 L1020.04 1215.1 L1020.62 1215.1 L1021.21 1215.1 L1021.8 1215.1 L1022.38 1215.1 L1022.97 1215.1 L1023.56 1215.1 L1024.14 1215.1 L1024.73 1215.1 L1025.32 1215.1 L1025.9 1215.1 L1026.49 1215.1 L1027.07 1215.1 L1027.66 1215.1 L1028.25 1215.1 L1028.83 1215.1 L1029.42 1215.1 L1030.01 1215.1 L1030.59 1215.1 L1031.18 1215.1 L1031.77 1215.1 L1032.35 1215.1 L1032.94 1215.1 L1033.52 1215.1 L1034.11 1215.1 L1034.7 1215.1 L1035.28 1215.1 L1035.87 1215.1 L1036.46 1215.1 L1037.04 1215.1 L1037.63 1215.1 L1038.22 1215.1 L1038.8 1215.1 L1039.39 1215.1 L1039.98 1215.1 L1040.56 1215.1 L1041.15 1215.1 L1041.73 1215.1 L1042.32 1215.1 L1042.91 1215.1 L1043.49 1215.1 L1044.08 1215.1 L1044.67 1215.1 L1045.25 1215.1 L1045.84 1215.1 L1046.43 1215.1 L1047.01 1215.1 L1047.6 1215.1 L1048.19 1215.1 L1048.77 1215.1 L1049.36 1215.1 L1049.94 1215.1 L1050.53 1215.1 L1051.12 1215.1 L1051.7 1215.1 L1052.29 1215.1 L1052.88 1215.1 L1053.46 1215.1 L1054.05 1215.1 L1054.64 1215.1 L1055.22 1215.1 L1055.81 1215.1 L1056.39 1215.1 L1056.98 1215.1 L1057.57 1215.1 L1058.15 1215.1 L1058.74 1215.1 L1059.33 1215.1 L1059.91 1215.1 L1060.5 1215.1 L1061.09 1215.1 L1061.67 1215.1 L1062.26 1215.1 L1062.85 1215.1 L1063.43 1215.1 L1064.02 1215.1 L1064.6 1215.1 L1065.19 1215.1 L1065.78 1215.1 L1066.36 1215.1 L1066.95 1215.1 L1067.54 1215.1 L1068.12 1215.1 L1068.71 1215.1 L1069.3 1215.1 L1069.88 1215.1 L1070.47 1215.1 L1071.06 1215.1 L1071.64 1215.1 L1072.23 1215.1 L1072.81 1215.1 L1073.4 1215.1 L1073.99 1215.1 L1074.57 1215.1 L1075.16 1215.1 L1075.75 1215.1 L1076.33 1215.1 L1076.92 1215.1 L1077.51 1215.1 L1078.09 1215.1 L1078.68 1215.1 L1079.26 1215.1 L1079.85 1215.1 L1080.44 1215.1 L1081.02 1215.1 L1081.61 1215.1 L1082.2 1215.1 L1082.78 1215.1 L1083.37 1215.1 L1083.96 1215.1 L1084.54 1215.1 L1085.13 1215.1 L1085.72 1215.1 L1086.3 1215.1 L1086.89 1215.1 L1087.47 1215.1 L1088.06 1215.1 L1088.65 1215.1 L1089.23 1215.1 L1089.82 1215.1 L1090.41 1215.1 L1090.99 1215.1 L1091.58 1215.1 L1092.17 1215.1 L1092.75 1215.1 L1093.34 1215.1 L1093.93 1215.1 L1094.51 1215.1 L1095.1 1215.1 L1095.68 1215.1 L1096.27 1215.1 L1096.86 1215.1 L1097.44 1215.1 L1098.03 1215.1 L1098.62 1215.1 L1099.2 1215.1 L1099.79 1215.1 L1100.38 1215.1 L1100.96 1215.1 L1101.55 1215.1 L1102.14 1215.1 L1102.72 1215.1 L1103.31 1215.1 L1103.89 1215.1 L1104.48 1215.1 L1105.07 1215.1 L1105.65 1215.1 L1106.24 1215.1 L1106.83 1215.1 L1107.41 1215.1 L1108 1215.1 L1108.59 1215.1 L1109.17 1215.1 L1109.76 1215.1 L1110.34 1215.1 L1110.93 1215.1 L1111.52 1215.1 L1112.1 1215.1 L1112.69 1215.1 L1113.28 1215.1 L1113.86 1215.1 L1114.45 1215.1 L1115.04 1215.1 L1115.62 1215.1 L1116.21 1215.1 L1116.8 1215.1 L1117.38 1215.1 L1117.97 1215.1 L1118.55 1215.1 L1119.14 1215.1 L1119.73 1215.1 L1120.31 1215.1 L1120.9 1215.1 L1121.49 1215.1 L1122.07 1215.1 L1122.66 1215.1 L1123.25 1215.1 L1123.83 1215.1 L1124.42 1215.1 L1125.01 1215.1 L1125.59 1215.1 L1126.18 1215.1 L1126.76 1215.1 L1127.35 1215.1 L1127.94 1215.1 L1128.52 1215.1 L1129.11 1215.1 L1129.7 1215.1 L1130.28 1215.1 L1130.87 1215.1 L1131.46 1215.1 L1132.04 1215.1 L1132.63 1215.1 L1133.21 1215.1 L1133.8 1215.1 L1134.39 1215.1 L1134.97 1215.1 L1135.56 1215.1 L1136.15 1215.1 L1136.73 1215.1 L1137.32 1215.1 L1137.91 1215.1 L1138.49 1215.1 L1139.08 1215.1 L1139.67 1215.1 L1140.25 1215.1 L1140.84 1215.1 L1141.42 1215.1 L1142.01 1215.1 L1142.6 1215.1 L1143.18 1215.1 L1143.77 1215.1 L1144.36 1215.1 L1144.94 1215.1 L1145.53 1215.1 L1146.12 1215.1 L1146.7 1215.1 L1147.29 1215.1 L1147.88 1215.1 L1148.46 1215.1 L1149.05 1215.1 L1149.63 1215.1 L1150.22 1215.1 L1150.81 1215.1 L1151.39 1215.1 L1151.98 1215.1 L1152.57 1215.1 L1153.15 1215.1 L1153.74 1215.1 L1154.33 1215.1 L1154.91 1215.1 L1155.5 1215.1 L1156.09 1215.1 L1156.67 1215.1 L1157.26 1215.1 L1157.84 1215.1 L1158.43 1215.1 L1159.02 1215.1 L1159.6 1215.1 L1160.19 1215.1 L1160.78 1215.1 L1161.36 1215.1 L1161.95 1215.1 L1162.54 1215.1 L1163.12 1215.1 L1163.71 1215.1 L1164.29 1215.1 L1164.88 1215.1 L1165.47 1215.1 L1166.05 1215.1 L1166.64 1215.1 L1167.23 1215.1 L1167.81 1215.1 L1168.4 1215.1 L1168.99 1215.1 L1169.57 1215.1 L1170.16 1215.1 L1170.75 1215.1 L1171.33 1215.1 L1171.92 1215.1 L1172.5 1215.1 L1173.09 1215.1 L1173.68 1215.1 L1174.26 1215.1 L1174.85 1215.1 L1175.44 1215.1 L1176.02 1215.1 L1176.61 1215.1 L1177.2 1215.1 L1177.78 1215.1 L1178.37 1215.1 L1178.96 1215.1 L1179.54 1215.1 L1180.13 1215.1 L1180.71 1215.1 L1181.3 1215.1 L1181.89 1215.1 L1182.47 1215.1 L1183.06 1215.1 L1183.65 1215.1 L1184.23 1215.1 L1184.82 1215.1 L1185.41 1215.1 L1185.99 1215.1 L1186.58 1215.1 L1187.16 1215.1 L1187.75 1215.1 L1188.34 1215.1 L1188.92 1215.1 L1189.51 1215.1 L1190.1 1215.1 L1190.68 1215.1 L1191.27 1215.1 L1191.86 1215.1 L1192.44 1215.1 L1193.03 1215.1 L1193.62 1215.1 L1194.2 1215.1 L1194.79 1215.1 L1195.37 1215.1 L1195.96 1215.1 L1196.55 1215.1 L1197.13 1215.1 L1197.72 1215.1 L1198.31 1215.1 L1198.89 1215.1 L1199.48 1215.1 L1200.07 1215.1 L1200.65 1215.1 L1201.24 1215.1 L1201.83 1215.1 L1202.41 1215.1 L1203 1215.1 L1203.58 1215.1 L1204.17 1215.1 L1204.76 1215.1 L1205.34 1215.1 L1205.93 1215.1 L1206.52 1215.1 L1207.1 1215.1 L1207.69 1215.1 L1208.28 1215.1 L1208.86 1215.1 L1209.45 1215.1 L1210.03 1215.1 L1210.62 1215.1 L1211.21 1215.1 L1211.79 1215.1 L1212.38 1215.1 L1212.97 1215.1 L1213.55 1215.1 L1214.14 1215.1 L1214.73 1215.1 L1215.31 1215.1 L1215.9 1215.1 L1216.49 1215.1 L1217.07 1215.1 L1217.66 1215.1 L1218.24 1215.1 L1218.83 1215.1 L1219.42 1215.1 L1220 1215.1 L1220.59 1215.1 L1221.18 1215.1 L1221.76 1215.1 L1222.35 1215.1 L1222.94 1215.1 L1223.52 1215.1 L1224.11 1215.1 L1224.7 1215.1 L1225.28 1215.1 L1225.87 1215.1 L1226.45 1215.1 L1227.04 1215.1 L1227.63 1215.1 L1228.21 1215.1 L1228.8 1215.1 L1229.39 1215.1 L1229.97 1215.1 L1230.56 1215.1 L1231.15 1215.1 L1231.73 1215.1 L1232.32 1215.1 L1232.91 1215.1 L1233.49 1215.1 L1234.08 1215.1 L1234.66 1215.1 L1235.25 1215.1 L1235.84 1215.1 L1236.42 1215.1 L1237.01 1215.1 L1237.6 1215.1 L1238.18 1215.1 L1238.77 1215.1 L1239.36 1215.1 L1239.94 1215.1 L1240.53 1215.1 L1241.11 1215.1 L1241.7 1215.1 L1242.29 1215.1 L1242.87 1215.1 L1243.46 1215.1 L1244.05 1215.1 L1244.63 1215.1 L1245.22 1215.1 L1245.81 1215.1 L1246.39 1215.1 L1246.98 1215.1 L1247.57 1215.1 L1248.15 1215.1 L1248.74 1215.1 L1249.32 1215.1 L1249.91 1215.1 L1250.5 1215.1 L1251.08 1215.1 L1251.67 1215.1 L1252.26 1215.1 L1252.84 1215.1 L1253.43 1215.1 L1254.02 1215.1 L1254.6 1215.1 L1255.19 1215.1 L1255.78 1215.1 L1256.36 1215.1 L1256.95 1215.1 L1257.53 1215.1 L1258.12 1215.1 L1258.71 1215.1 L1259.29 1215.1 L1259.88 1215.1 L1260.47 1215.1 L1261.05 1215.1 L1261.64 1215.1 L1262.23 1215.1 L1262.81 1215.1 L1263.4 1215.1 L1263.98 1215.1 L1264.57 1215.1 L1265.16 1215.1 L1265.74 1215.1 L1266.33 1215.1 L1266.92 1215.1 L1267.5 1215.1 L1268.09 1215.1 L1268.68 1215.1 L1269.26 1215.1 L1269.85 1215.1 L1270.44 1215.1 L1271.02 1215.1 L1271.61 1215.1 L1272.19 1215.1 L1272.78 1215.1 L1273.37 1215.1 L1273.95 1215.1 L1274.54 1215.1 L1275.13 1215.1 L1275.71 1215.1 L1276.3 1215.1 L1276.89 1215.1 L1277.47 1215.1 L1278.06 1215.1 L1278.65 1215.1 L1279.23 1215.1 L1279.82 1215.1 L1280.4 1215.1 L1280.99 1215.1 L1281.58 1215.1 L1282.16 1215.1 L1282.75 1215.1 L1283.34 1215.1 L1283.92 1215.1 L1284.51 1215.1 L1285.1 1215.1 L1285.68 1215.1 L1286.27 1215.1 L1286.86 1215.1 L1287.44 1215.1 L1288.03 1215.1 L1288.61 1215.1 L1289.2 1215.1 L1289.79 1215.1 L1290.37 1215.1 L1290.96 1215.1 L1291.55 1215.1 L1292.13 1215.1 L1292.72 1215.1 L1293.31 1215.1 L1293.89 1215.1 L1294.48 1215.1 L1295.06 1215.1 L1295.65 1215.1 L1296.24 1215.1 L1296.82 1215.1 L1297.41 1215.1 L1298 1215.1 L1298.58 1215.1 L1299.17 1215.1 L1299.76 1215.1 L1300.34 1215.1 L1300.93 1215.1 L1301.52 1215.1 L1302.1 1215.1 L1302.69 1215.1 L1303.27 1215.1 L1303.86 1215.1 L1304.45 1215.1 L1305.03 1215.1 L1305.62 1215.1 L1306.21 1215.1 L1306.79 1215.1 L1307.38 1215.1 L1307.97 1215.1 L1308.55 1215.1 L1309.14 1215.1 L1309.73 1215.1 L1310.31 1215.1 L1310.9 1215.1 L1311.48 1215.1 L1312.07 1215.1 L1312.66 1215.1 L1313.24 1215.1 L1313.83 1215.1 L1314.42 1215.1 L1315 1215.1 L1315.59 1215.1 L1316.18 1215.1 L1316.76 1215.1 L1317.35 1215.1 L1317.93 1215.1 L1318.52 1215.1 L1319.11 1215.1 L1319.69 1215.1 L1320.28 1215.1 L1320.87 1215.1 L1321.45 1215.1 L1322.04 1215.1 L1322.63 1215.1 L1323.21 1215.1 L1323.8 1215.1 L1324.39 1215.1 L1324.97 1215.1 L1325.56 1215.1 L1326.14 1215.1 L1326.73 1215.1 L1327.32 1215.1 L1327.9 1215.1 L1328.49 1215.1 L1329.08 1215.1 L1329.66 1215.1 L1330.25 1215.1 L1330.84 1215.1 L1331.42 1215.1 L1332.01 1215.1 L1332.6 1215.1 L1333.18 1215.1 L1333.77 1215.1 L1334.35 1215.1 L1334.94 1215.1 L1335.53 1215.1 L1336.11 1215.1 L1336.7 1215.1 L1337.29 1215.1 L1337.87 1215.1 L1338.46 1215.1 L1339.05 1215.1 L1339.63 1215.1 L1340.22 1215.1 L1340.8 1215.1 L1341.39 1215.1 L1341.98 1215.1 L1342.56 1215.1 L1343.15 1215.1 L1343.74 1215.1 L1344.32 1215.1 L1344.91 1215.1 L1345.5 1215.1 L1346.08 1215.1 L1346.67 1215.1 L1347.26 1215.1 L1347.84 1215.1 L1348.43 1215.1 L1349.01 1215.1 L1349.6 1215.1 L1350.19 1215.1 L1350.77 1215.1 L1351.36 1215.1 L1351.95 1215.1 L1352.53 1215.1 L1353.12 1215.1 L1353.71 1215.1 L1354.29 1215.1 L1354.88 1215.1 L1355.47 1215.1 L1356.05 1215.1 L1356.64 1215.1 L1357.22 1215.1 L1357.81 1215.1 L1358.4 1215.1 L1358.98 1215.1 L1359.57 1215.1 L1360.16 1215.1 L1360.74 1215.1 L1361.33 1215.1 L1361.92 1215.1 L1362.5 1215.1 L1363.09 1215.1 L1363.68 1215.1 L1364.26 1215.1 L1364.85 1215.1 L1365.43 1215.1 L1366.02 1215.1 L1366.61 1215.1 L1367.19 1215.1 L1367.78 1215.1 L1368.37 1215.1 L1368.95 1215.1 L1369.54 1215.1 L1370.13 1215.1 L1370.71 1215.1 L1371.3 1215.1 L1371.88 1215.1 L1372.47 1215.1 L1373.06 1215.1 L1373.64 1215.1 L1374.23 1215.1 L1374.82 1215.1 L1375.4 1215.1 L1375.99 1215.1 L1376.58 1215.1 L1377.16 1215.1 L1377.75 1215.1 L1378.34 1215.1 L1378.92 1215.1 L1379.51 1215.1 L1380.09 1215.1 L1380.68 1215.1 L1381.27 1215.1 L1381.85 1215.1 L1382.44 1215.1 L1383.03 1215.1 L1383.61 1215.1 L1384.2 1215.1 L1384.79 1215.1 L1385.37 1215.1 L1385.96 1215.1 L1386.55 1215.1 L1387.13 1215.1 L1387.72 1215.1 L1388.3 1215.1 L1388.89 1215.1 L1389.48 1215.1 L1390.06 1215.1 L1390.65 1215.1 L1391.24 1215.1 L1391.82 1215.1 L1392.41 1215.1 L1393 1215.1 L1393.58 1215.1 L1394.17 1215.1 L1394.75 1215.1 L1395.34 1215.1 L1395.93 1215.1 L1396.51 1215.1 L1397.1 1215.1 L1397.69 1215.1 L1398.27 1215.1 L1398.86 1215.1 L1399.45 1215.1 L1400.03 1215.1 L1400.62 1215.1 L1401.21 1215.1 L1401.79 1215.1 L1402.38 1215.1 L1402.96 1215.1 L1403.55 1215.1 L1404.14 1215.1 L1404.72 1215.1 L1405.31 1215.1 L1405.9 1215.1 L1406.48 1215.1 L1407.07 1215.1 L1407.66 1215.1 L1408.24 1215.1 L1408.83 1215.1 L1409.42 1215.1 L1410 1215.1 L1410.59 1215.1 L1411.17 1215.1 L1411.76 1215.1 L1412.35 1215.1 L1412.93 1215.1 L1413.52 1215.1 L1414.11 1215.1 L1414.69 1215.1 L1415.28 1215.1 L1415.87 1215.1 L1416.45 1215.1 L1417.04 1215.1 L1417.63 1215.1 L1418.21 1215.1 L1418.8 1215.1 L1419.38 1215.1 L1419.97 1215.1 L1420.56 1215.1 L1421.14 1215.1 L1421.73 1215.1 L1422.32 1215.1 L1422.9 1215.1 L1423.49 1215.1 L1424.08 1215.1 L1424.66 1215.1 L1425.25 1215.1 L1425.83 1215.1 L1426.42 1215.1 L1427.01 1215.1 L1427.59 1215.1 L1428.18 1215.1 L1428.77 1215.1 L1429.35 1215.1 L1429.94 1215.1 L1430.53 1215.1 L1431.11 1215.1 L1431.7 1215.1 L1432.29 1215.1 L1432.87 1215.1 L1433.46 1215.1 L1434.04 1215.1 L1434.63 1215.1 L1435.22 1215.1 L1435.8 1215.1 L1436.39 1215.1 L1436.98 1215.1 L1437.56 1215.1 L1438.15 1215.1 L1438.74 1215.1 L1439.32 1215.1 L1439.91 1215.1 L1440.5 1215.1 L1441.08 1215.1 L1441.67 1215.1 L1442.25 1215.1 L1442.84 1215.1 L1443.43 1215.1 L1444.01 1215.1 L1444.6 1215.1 L1445.19 1215.1 L1445.77 1215.1 L1446.36 1215.1 L1446.95 1215.1 L1447.53 1215.1 L1448.12 1215.1 L1448.7 1215.1 L1449.29 1215.1 L1449.88 1215.1 L1450.46 1215.1 L1451.05 1215.1 L1451.64 1215.1 L1452.22 1215.1 L1452.81 1215.1 L1453.4 1215.1 L1453.98 1215.1 L1454.57 1215.1 L1455.16 1215.1 L1455.74 1215.1 L1456.33 1215.1 L1456.91 1215.1 L1457.5 1215.1 L1458.09 1215.1 L1458.67 1215.1 L1459.26 1215.1 L1459.85 1215.1 L1460.43 1215.1 L1461.02 1215.1 L1461.61 1215.1 L1462.19 1215.1 L1462.78 1215.1 L1463.37 1215.1 L1463.95 1215.1 L1464.54 1215.1 L1465.12 1215.1 L1465.71 1215.1 L1466.3 1215.1 L1466.88 1215.1 L1467.47 1215.1 L1468.06 1215.1 L1468.64 1215.1 L1469.23 1215.1 L1469.82 1215.1 L1470.4 1215.1 L1470.99 1215.1 L1471.57 1215.1 L1472.16 1215.1 L1472.75 1215.1 L1473.33 1215.1 L1473.92 1215.1 L1474.51 1215.1 L1475.09 1215.1 L1475.68 1215.1 L1476.27 1215.1 L1476.85 1215.1 L1477.44 1215.1 L1478.03 1215.1 L1478.61 1215.1 L1479.2 1215.1 L1479.78 1215.1 L1480.37 1215.1 L1480.96 1215.1 L1481.54 1215.1 L1482.13 1215.1 L1482.72 1215.1 L1483.3 1215.1 L1483.89 1215.1 L1484.48 1215.1 L1485.06 1215.1 L1485.65 1215.1 L1486.24 1215.1 L1486.82 1215.1 L1487.41 1215.1 L1487.99 1215.1 L1488.58 1215.1 L1489.17 1215.1 L1489.75 1215.1 L1490.34 1215.1 L1490.93 1215.1 L1491.51 1215.1 L1492.1 1215.1 L1492.69 1215.1 L1493.27 1215.1 L1493.86 1215.1 L1494.45 1215.1 L1495.03 1215.1 L1495.62 1215.1 L1496.2 1215.1 L1496.79 1215.1 L1497.38 1215.1 L1497.96 1215.1 L1498.55 1215.1 L1499.14 1215.1 L1499.72 1215.1 L1500.31 1215.1 L1500.9 1215.1 L1501.48 1215.1 L1502.07 1215.1 L1502.65 1215.1 L1503.24 1215.1 L1503.83 1215.1 L1504.41 1215.1 L1505 1215.1 L1505.59 1215.1 L1506.17 1215.1 L1506.76 1215.1 L1507.35 1215.1 L1507.93 1215.1 L1508.52 1215.1 L1509.11 1215.1 L1509.69 1215.1 L1510.28 1215.1 L1510.86 1215.1 L1511.45 1215.1 L1512.04 1215.1 L1512.62 1215.1 L1513.21 1215.1 L1513.8 1215.1 L1514.38 1215.1 L1514.97 1215.1 L1515.56 1215.1 L1516.14 1215.1 L1516.73 1215.1 L1517.32 1215.1 L1517.9 1215.1 L1518.49 1215.1 L1519.07 1215.1 L1519.66 1215.1 L1520.25 1215.1 L1520.83 1215.1 L1521.42 1215.1 L1522.01 1215.1 L1522.59 1215.1 L1523.18 1215.1 L1523.77 1215.1 L1524.35 1215.1 L1524.94 1215.1 L1525.52 1215.1 L1526.11 1215.1 L1526.7 1215.1 L1527.28 1215.1 L1527.87 1215.1 L1528.46 1215.1 L1529.04 1215.1 L1529.63 1215.1 L1530.22 1215.1 L1530.8 1215.1 L1531.39 1215.1 L1531.98 1215.1 L1532.56 1215.1 L1533.15 1215.1 L1533.73 1215.1 L1534.32 1215.1 L1534.91 1215.1 L1535.49 1215.1 L1536.08 1215.1 L1536.67 1215.1 L1537.25 1215.1 L1537.84 1215.1 L1538.43 1215.1 L1539.01 1215.1 L1539.6 1215.1 L1540.19 1215.1 L1540.77 1215.1 L1541.36 1215.1 L1541.94 1215.1 L1542.53 1215.1 L1543.12 1215.1 L1543.7 1215.1 L1544.29 1215.1 L1544.88 1215.1 L1545.46 1215.1 L1546.05 1215.1 L1546.64 1215.1 L1547.22 1215.1 L1547.81 1215.1 L1548.4 1215.1 L1548.98 1215.1 L1549.57 1215.1 L1550.15 1215.1 L1550.74 1215.1 L1551.33 1215.1 L1551.91 1215.1 L1552.5 1215.1 L1553.09 1215.1 L1553.67 1215.1 L1554.26 1215.1 L1554.85 1215.1 L1555.43 1215.1 L1556.02 1215.1 L1556.6 1215.1 L1557.19 1215.1 L1557.78 1215.1 L1558.36 1215.1 L1558.95 1215.1 L1559.54 1215.1 L1560.12 1215.1 L1560.71 1215.1 L1561.3 1215.1 L1561.88 1215.1 L1562.47 1215.1 L1563.06 1215.1 L1563.64 1215.1 L1564.23 1215.1 L1564.81 1215.1 L1565.4 1215.1 L1565.99 1215.1 L1566.57 1215.1 L1567.16 1215.1 L1567.75 1215.1 L1568.33 1215.1 L1568.92 1215.1 L1569.51 1215.1 L1570.09 1215.1 L1570.68 1215.1 L1571.27 1215.1 L1571.85 1215.1 L1572.44 1215.1 L1573.02 1215.1 L1573.61 1215.1 L1574.2 1215.1 L1574.78 1215.1 L1575.37 1215.1 L1575.96 1215.1 L1576.54 1215.1 L1577.13 1215.1 L1577.72 1215.1 L1578.3 1215.1 L1578.89 1215.1 L1579.47 1215.1 L1580.06 1215.1 L1580.65 1215.1 L1581.23 1215.1 L1581.82 1215.1 L1582.41 1215.1 L1582.99 1215.1 L1583.58 1215.1 L1584.17 1215.1 L1584.75 1215.1 L1585.34 1215.1 L1585.93 1215.1 L1586.51 1215.1 L1587.1 1215.1 L1587.68 1215.1 L1588.27 1215.1 L1588.86 1215.1 L1589.44 1215.1 L1590.03 1215.1 L1590.62 1215.1 L1591.2 1215.1 L1591.79 1215.1 L1592.38 1215.1 L1592.96 1215.1 L1593.55 1215.1 L1594.14 1215.1 L1594.72 1215.1 L1595.31 1215.1 L1595.89 1215.1 L1596.48 1215.1 L1597.07 1215.1 L1597.65 1215.1 L1598.24 1215.1 L1598.83 1215.1 L1599.41 1215.1 L1600 1215.1 L1600.59 1215.1 L1601.17 1215.1 L1601.76 1215.1 L1602.34 1215.1 L1602.93 1215.1 L1603.52 1215.1 L1604.1 1215.1 L1604.69 1215.1 L1605.28 1215.1 L1605.86 1215.1 L1606.45 1215.1 L1607.04 1215.1 L1607.62 1215.1 L1608.21 1215.1 L1608.8 1215.1 L1609.38 1215.1 L1609.97 1215.1 L1610.55 1215.1 L1611.14 1215.1 L1611.73 1215.1 L1612.31 1215.1 L1612.9 1215.1 L1613.49 1215.1 L1614.07 1215.1 L1614.66 1215.1 L1615.25 1215.1 L1615.83 1215.1 L1616.42 1215.1 L1617.01 1215.1 L1617.59 1215.1 L1618.18 1215.1 L1618.76 1215.1 L1619.35 1215.1 L1619.94 1215.1 L1620.52 1215.1 L1621.11 1215.1 L1621.7 1215.1 L1622.28 1215.1 L1622.87 1215.1 L1623.46 1215.1 L1624.04 1215.1 L1624.63 1215.1 L1625.22 1215.1 L1625.8 1215.1 L1626.39 1215.1 L1626.97 1215.1 L1627.56 1215.1 L1628.15 1215.1 L1628.73 1215.1 L1629.32 1215.1 L1629.91 1215.1 L1630.49 1215.1 L1631.08 1215.1 L1631.67 1215.1 L1632.25 1215.1 L1632.84 1215.1 L1633.42 1215.1 L1634.01 1215.1 L1634.6 1215.1 L1635.18 1215.1 L1635.77 1215.1 L1636.36 1215.1 L1636.94 1215.1 L1637.53 1215.1 L1638.12 1215.1 L1638.7 1215.1 L1639.29 1215.1 L1639.88 1215.1 L1640.46 1215.1 L1641.05 1215.1 L1641.63 1215.1 L1642.22 1215.1 L1642.81 1215.1 L1643.39 1215.1 L1643.98 1215.1 L1644.57 1215.1 L1645.15 1215.1 L1645.74 1215.1 L1646.33 1215.1 L1646.91 1215.1 L1647.5 1215.1 L1648.09 1215.1 L1648.67 1215.1 L1649.26 1215.1 L1649.84 1215.1 L1650.43 1215.1 L1651.02 1215.1 L1651.6 1215.1 L1652.19 1215.1 L1652.78 1215.1 L1653.36 1215.1 L1653.95 1215.1 L1654.54 1215.1 L1655.12 1215.1 L1655.71 1215.1 L1656.29 1215.1 L1656.88 1215.1 L1657.47 1215.1 L1658.05 1215.1 L1658.64 1215.1 L1659.23 1215.1 L1659.81 1215.1 L1660.4 1215.1 L1660.99 1215.1 L1661.57 1215.1 L1662.16 1215.1 L1662.75 1215.1 L1663.33 1215.1 L1663.92 1215.1 L1664.5 1215.1 L1665.09 1215.1 L1665.68 1215.1 L1666.26 1215.1 L1666.85 1215.1 L1667.44 1215.1 L1668.02 1215.1 L1668.61 1215.1 L1669.2 1215.1 L1669.78 1215.1 L1670.37 1215.1 L1670.96 1215.1 L1671.54 1215.1 L1672.13 1215.1 L1672.71 1215.1 L1673.3 1215.1 L1673.89 1215.1 L1674.47 1215.1 L1675.06 1215.1 L1675.65 1215.1 L1676.23 1215.1 L1676.82 1215.1 L1677.41 1215.1 L1677.99 1215.1 L1678.58 1215.1 L1679.17 1215.1 L1679.75 1215.1 L1680.34 1215.1 L1680.92 1215.1 L1681.51 1215.1 L1682.1 1215.1 L1682.68 1215.1 L1683.27 1215.1 L1683.86 1215.1 L1684.44 1215.1 L1685.03 1215.1 L1685.62 1215.1 L1686.2 1215.1 L1686.79 1215.1 L1687.37 1215.1 L1687.96 1215.1 L1688.55 1215.1 L1689.13 1215.1 L1689.72 1215.1 L1690.31 1215.1 L1690.89 1215.1 L1691.48 1215.1 L1692.07 1215.1 L1692.65 1215.1 L1693.24 1215.1 L1693.83 1215.1 L1694.41 1215.1 L1695 1215.1 L1695.58 1215.1 L1696.17 1215.1 L1696.76 1215.1 L1697.34 1215.1 L1697.93 1215.1 L1698.52 1215.1 L1699.1 1215.1 L1699.69 1215.1 L1700.28 1215.1 L1700.86 1215.1 L1701.45 1215.1 L1702.04 1215.1 L1702.62 1215.1 L1703.21 1215.1 L1703.79 1215.1 L1704.38 1215.1 L1704.97 1215.1 L1705.55 1215.1 L1706.14 1215.1 L1706.73 1215.1 L1707.31 1215.1 L1707.9 1215.1 L1708.49 1215.1 L1709.07 1215.1 L1709.66 1215.1 L1710.24 1215.1 L1710.83 1215.1 L1711.42 1215.1 L1712 1215.1 L1712.59 1215.1 L1713.18 1215.1 L1713.76 1215.1 L1714.35 1215.1 L1714.94 1215.1 L1715.52 1215.1 L1716.11 1215.1 L1716.7 1215.1 L1717.28 1215.1 L1717.87 1215.1 L1718.45 1215.1 L1719.04 1215.1 L1719.63 1215.1 L1720.21 1215.1 L1720.8 1215.1 L1721.39 1215.1 L1721.97 1215.1 L1722.56 1215.1 L1723.15 1215.1 L1723.73 1215.1 L1724.32 1215.1 L1724.91 1215.1 L1725.49 1215.1 L1726.08 1215.1 L1726.66 1215.1 L1727.25 1215.1 L1727.84 1215.1 L1728.42 1215.1 L1729.01 1215.1 L1729.6 1215.1 L1730.18 1215.1 L1730.77 1215.1 L1731.36 1215.1 L1731.94 1215.1 L1732.53 1215.1 L1733.11 1215.1 L1733.7 1215.1 L1734.29 1215.1 L1734.87 1215.1 L1735.46 1215.1 L1736.05 1215.1 L1736.63 1215.1 L1737.22 1215.1 L1737.81 1215.1 L1738.39 1215.1 L1738.98 1215.1 L1739.57 1215.1 L1740.15 1215.1 L1740.74 1215.1 L1741.32 1215.1 L1741.91 1215.1 L1742.5 1215.1 L1743.08 1215.1 L1743.67 1215.1 L1744.26 1215.1 L1744.84 1215.1 L1745.43 1215.1 L1746.02 1215.1 L1746.6 1215.1 L1747.19 1215.1 L1747.78 1215.1 L1748.36 1215.1 L1748.95 1215.1 L1749.53 1215.1 L1750.12 1215.1 L1750.71 1215.1 L1751.29 1215.1 L1751.88 1215.1 L1752.47 1215.1 L1753.05 1215.1 L1753.64 1215.1 L1754.23 1215.1 L1754.81 1215.1 L1755.4 1215.1 L1755.99 1215.1 L1756.57 1215.1 L1757.16 1215.1 L1757.74 1215.1 L1758.33 1215.1 L1758.92 1215.1 L1759.5 1215.1 L1760.09 1215.1 L1760.68 1215.1 L1761.26 1215.1 L1761.85 1215.1 L1762.44 1215.1 L1763.02 1215.1 L1763.61 1215.1 L1764.19 1215.1 L1764.78 1215.1 L1765.37 1215.1 L1765.95 1215.1 L1766.54 1215.1 L1767.13 1215.1 L1767.71 1215.1 L1768.3 1215.1 L1768.89 1215.1 L1769.47 1215.1 L1770.06 1215.1 L1770.65 1215.1 L1771.23 1215.1 L1771.82 1215.1 L1772.4 1215.1 L1772.99 1215.1 L1773.58 1215.1 L1774.16 1215.1 L1774.75 1215.1 L1775.34 1215.1 L1775.92 1215.1 L1776.51 1215.1 L1777.1 1215.1 L1777.68 1215.1 L1778.27 1215.1 L1778.86 1215.1 L1779.44 1215.1 L1780.03 1215.1 L1780.61 1215.1 L1781.2 1215.1 L1781.79 1215.1 L1782.37 1215.1 L1782.96 1215.1 L1783.55 1215.1 L1784.13 1215.1 L1784.72 1215.1 L1785.31 1215.1 L1785.89 1215.1 L1786.48 1215.1 L1787.06 1215.1 L1787.65 1215.1 L1788.24 1215.1 L1788.82 1215.1 L1789.41 1215.1 L1790 1215.1 L1790.58 1215.1 L1791.17 1215.1 L1791.76 1215.1 L1792.34 1215.1 L1792.93 1215.1 L1793.52 1215.1 L1794.1 1215.1 L1794.69 1215.1 L1795.27 1215.1 L1795.86 1215.1 L1796.45 1215.1 L1797.03 1215.1 L1797.62 1215.1 L1798.21 1215.1 L1798.79 1215.1 L1799.38 1215.1 L1799.97 1215.1 L1800.55 1215.1 L1801.14 1215.1 L1801.73 1215.1 L1802.31 1215.1 L1802.9 1215.1 L1803.48 1215.1 L1804.07 1215.1 L1804.66 1215.1 L1805.24 1215.1 L1805.83 1215.1 L1806.42 1215.1 L1807 1215.1 L1807.59 1215.1 L1808.18 1215.1 L1808.76 1215.1 L1809.35 1215.1 L1809.94 1215.1 L1810.52 1215.1 L1811.11 1215.1 L1811.69 1215.1 L1812.28 1215.1 L1812.87 1215.1 L1813.45 1215.1 L1814.04 1215.1 L1814.63 1215.1 L1815.21 1215.1 L1815.8 1215.1 L1816.39 1215.1 L1816.97 1215.1 L1817.56 1215.1 L1818.14 1215.1 L1818.73 1215.1 L1819.32 1215.1 L1819.9 1215.1 L1820.49 1215.1 L1821.08 1215.1 L1821.66 1215.1 L1822.25 1215.1 L1822.84 1215.1 L1823.42 1215.1 L1824.01 1215.1 L1824.6 1215.1 L1825.18 1215.1 L1825.77 1215.1 L1826.35 1215.1 L1826.94 1215.1 L1827.53 1215.1 L1828.11 1215.1 L1828.7 1215.1 L1829.29 1215.1 L1829.87 1215.1 L1830.46 1215.1 L1831.05 1215.1 L1831.63 1215.1 L1832.22 1215.1 L1832.81 1215.1 L1833.39 1215.1 L1833.98 1215.1 L1834.56 1215.1 L1835.15 1215.1 L1835.74 1215.1 L1836.32 1215.1 L1836.91 1215.1 L1837.5 1215.1 L1838.08 1215.1 L1838.67 1215.1 L1839.26 1215.1 L1839.84 1215.1 L1840.43 1215.1 L1841.01 1215.1 L1841.6 1215.1 L1842.19 1215.1 L1842.77 1215.1 L1843.36 1215.1 L1843.95 1215.1 L1844.53 1215.1 L1845.12 1215.1 L1845.71 1215.1 L1846.29 1215.1 L1846.88 1215.1 L1847.47 1215.1 L1848.05 1215.1 L1848.64 1215.1 L1849.22 1215.1 L1849.81 1215.1 L1850.4 1215.1 L1850.98 1215.1 L1851.57 1215.1 L1852.16 1215.1 L1852.74 1215.1 L1853.33 1215.1 L1853.92 1215.1 L1854.5 1215.1 L1855.09 1215.1 L1855.68 1215.1 L1856.26 1215.1 L1856.85 1215.1 L1857.43 1215.1 L1858.02 1215.1 L1858.61 1215.1 L1859.19 1215.1 L1859.78 1215.1 L1860.37 1215.1 L1860.95 1215.1 L1861.54 1215.1 L1862.13 1215.1 L1862.71 1215.1 L1863.3 1215.1 L1863.88 1215.1 L1864.47 1215.1 L1865.06 1215.1 L1865.64 1215.1 L1866.23 1215.1 L1866.82 1215.1 L1867.4 1215.1 L1867.99 1215.1 L1868.58 1215.1 L1869.16 1215.1 L1869.75 1215.1 L1870.34 1215.1 L1870.92 1215.1 L1871.51 1215.1 L1872.09 1215.1 L1872.68 1215.1 L1873.27 1215.1 L1873.85 1215.1 L1874.44 1215.1 L1875.03 1215.1 L1875.61 1215.1 L1876.2 1215.1 L1876.79 1215.1 L1877.37 1215.1 L1877.96 1215.1 L1878.55 1215.1 L1879.13 1215.1 L1879.72 1215.1 L1880.3 1215.1 L1880.89 1215.1 L1881.48 1215.1 L1882.06 1215.1 L1882.65 1215.1 L1883.24 1215.1 L1883.82 1215.1 L1884.41 1215.1 L1885 1215.1 L1885.58 1215.1 L1886.17 1215.1 L1886.76 1215.1 L1887.34 1215.1 L1887.93 1215.1 L1888.51 1215.1 L1889.1 1215.1 L1889.69 1215.1 L1890.27 1215.1 L1890.86 1215.1 L1891.45 1215.1 L1892.03 1215.1 L1892.62 1215.1 L1893.21 1215.1 L1893.79 1215.1 L1894.38 1215.1 L1894.96 1215.1 L1895.55 1215.1 L1896.14 1215.1 L1896.72 1215.1 L1897.31 1215.1 L1897.9 1215.1 L1898.48 1215.1 L1899.07 1215.1 L1899.66 1215.1 L1900.24 1215.1 L1900.83 1215.1 L1901.42 1215.1 L1902 1215.1 L1902.59 1215.1 L1903.17 1215.1 L1903.76 1215.1 L1904.35 1215.1 L1904.93 1215.1 L1905.52 1215.1 L1906.11 1215.1 L1906.69 1215.1 L1907.28 1215.1 L1907.87 1215.1 L1908.45 1215.1 L1909.04 1215.1 L1909.63 1215.1 L1910.21 1215.1 L1910.8 1215.1 L1911.38 1215.1 L1911.97 1215.1 L1912.56 1215.1 L1913.14 1215.1 L1913.73 1215.1 L1914.32 1215.1 L1914.9 1215.1 L1915.49 1215.1 L1916.08 1215.1 L1916.66 1215.1 L1917.25 1215.1 L1917.83 1215.1 L1918.42 1215.1 L1919.01 1215.1 L1919.59 1215.1 L1920.18 1215.1 L1920.77 1215.1 L1921.35 1215.1 L1921.94 1215.1 L1922.53 1215.1 L1923.11 1215.1 L1923.7 1215.1 L1924.29 1215.1 L1924.87 1215.1 L1925.46 1215.1 L1926.04 1215.1 L1926.63 1215.1 L1927.22 1215.1 L1927.8 1215.1 L1928.39 1215.1 L1928.98 1215.1 L1929.56 1215.1 L1930.15 1215.1 L1930.74 1215.1 L1931.32 1215.1 L1931.91 1215.1 L1932.5 1215.1 L1933.08 1215.1 L1933.67 1215.1 L1934.25 1215.1 L1934.84 1215.1 L1935.43 1215.1 L1936.01 1215.1 L1936.6 1215.1 L1937.19 1215.1 L1937.77 1215.1 L1938.36 1215.1 L1938.95 1215.1 L1939.53 1215.1 L1940.12 1215.1 L1940.71 1215.1 L1941.29 1215.1 L1941.88 1215.1 L1942.46 1215.1 L1943.05 1215.1 L1943.64 1215.1 L1944.22 1215.1 L1944.81 1215.1 L1945.4 1215.1 L1945.98 1215.1 L1946.57 1215.1 L1947.16 1215.1 L1947.74 1215.1 L1948.33 1215.1 L1948.91 1215.1 L1949.5 1215.1 L1950.09 1215.1 L1950.67 1215.1 L1951.26 1215.1 L1951.85 1215.1 L1952.43 1215.1 L1953.02 1215.1 L1953.61 1215.1 L1954.19 1215.1 L1954.78 1215.1 L1955.37 1215.1 L1955.95 1215.1 L1956.54 1215.1 L1957.12 1215.1 L1957.71 1215.1 L1958.3 1215.1 L1958.88 1215.1 L1959.47 1215.1 L1960.06 1215.1 L1960.64 1215.1 L1961.23 1215.1 L1961.82 1215.1 L1962.4 1215.1 L1962.99 1215.1 L1963.58 1215.1 L1964.16 1215.1 L1964.75 1215.1 L1965.33 1215.1 L1965.92 1215.1 L1966.51 1215.1 L1967.09 1215.1 L1967.68 1215.1 L1968.27 1215.1 L1968.85 1215.1 L1969.44 1215.1 L1970.03 1215.1 L1970.61 1215.1 L1971.2 1215.1 L1971.78 1215.1 L1972.37 1215.1 L1972.96 1215.1 L1973.54 1215.1 L1974.13 1215.1 L1974.72 1215.1 L1975.3 1215.1 L1975.89 1215.1 L1976.48 1215.1 L1977.06 1215.1 L1977.65 1215.1 L1978.24 1215.1 L1978.82 1215.1 L1979.41 1215.1 L1979.99 1215.1 L1980.58 1215.1 L1981.17 1215.1 L1981.75 1215.1 L1982.34 1215.1 L1982.93 1215.1 L1983.51 1215.1 L1984.1 1215.1 L1984.69 1215.1 L1985.27 1215.1 L1985.86 1215.1 L1986.45 1215.1 L1987.03 1215.1 L1987.62 1215.1 L1988.2 1215.1 L1988.79 1215.1 L1989.38 1215.1 L1989.96 1215.1 L1990.55 1215.1 L1991.14 1215.1 L1991.72 1215.1 L1992.31 1215.1 L1992.9 1215.1 L1993.48 1215.1 L1994.07 1215.1 L1994.65 1215.1 L1995.24 1215.1 L1995.83 1215.1 L1996.41 1215.1 L1997 1215.1 L1997.59 1215.1 L1998.17 1215.1 L1998.76 1215.1 L1999.35 1215.1 L1999.93 1215.1 L2000.52 1215.1 L2001.11 1215.1 L2001.69 1215.1 L2002.28 1215.1 L2002.86 1215.1 L2003.45 1215.1 L2004.04 1215.1 L2004.62 1215.1 L2005.21 1215.1 L2005.8 1215.1 L2006.38 1215.1 L2006.97 1215.1 L2007.56 1215.1 L2008.14 1215.1 L2008.73 1215.1 L2009.32 1215.1 L2009.9 1215.1 L2010.49 1215.1 L2011.07 1215.1 L2011.66 1215.1 L2012.25 1215.1 L2012.83 1215.1 L2013.42 1215.1 L2014.01 1215.1 L2014.59 1215.1 L2015.18 1215.1 L2015.77 1215.1 L2016.35 1215.1 L2016.94 1215.1 L2017.53 1215.1 L2018.11 1215.1 L2018.7 1215.1 L2019.28 1215.1 L2019.87 1215.1 L2020.46 1215.1 L2021.04 1215.1 L2021.63 1215.1 L2022.22 1215.1 L2022.8 1215.1 L2023.39 1215.1 L2023.98 1215.1 L2024.56 1215.1 L2025.15 1215.1 L2025.73 1215.1 L2026.32 1215.1 L2026.91 1215.1 L2027.49 1215.1 L2028.08 1215.1 L2028.67 1215.1 L2029.25 1215.1 L2029.84 1215.1 L2030.43 1215.1 L2031.01 1215.1 L2031.6 1215.1 L2032.19 1215.1 L2032.77 1215.1 L2033.36 1215.1 L2033.94 1215.1 L2034.53 1215.1 L2035.12 1215.1 L2035.7 1215.1 L2036.29 1215.1 L2036.88 1215.1 L2037.46 1215.1 L2038.05 1215.1 L2038.64 1215.1 L2039.22 1215.1 L2039.81 1215.1 L2040.4 1215.1 L2040.98 1215.1 L2041.57 1215.1 L2042.15 1215.1 L2042.74 1215.1 L2043.33 1215.1 L2043.91 1215.1 L2044.5 1215.1 L2045.09 1215.1 L2045.67 1215.1 L2046.26 1215.1 L2046.85 1215.1 L2047.43 1215.1 L2048.02 1215.1 L2048.6 1215.1 L2049.19 1215.1 L2049.78 1215.1 L2050.36 1215.1 L2050.95 1215.1 L2051.54 1215.1 L2052.12 1215.1 L2052.71 1215.1 L2053.3 1215.1 L2053.88 1215.1 L2054.47 1215.1 L2055.06 1215.1 L2055.64 1215.1 L2056.23 1215.1 L2056.81 1215.1 L2057.4 1215.1 L2057.99 1215.1 L2058.57 1215.1 L2059.16 1215.1 L2059.75 1215.1 L2060.33 1215.1 L2060.92 1215.1 L2061.51 1215.1 L2062.09 1215.1 L2062.68 1215.1 L2063.27 1215.1 L2063.85 1215.1 L2064.44 1215.1 L2065.02 1215.1 L2065.61 1215.1 L2066.2 1215.1 L2066.78 1215.1 L2067.37 1215.1 L2067.96 1215.1 L2068.54 1215.1 L2069.13 1215.1 L2069.72 1215.1 L2070.3 1215.1 L2070.89 1215.1 L2071.48 1215.1 L2072.06 1215.1 L2072.65 1215.1 L2073.23 1215.1 L2073.82 1215.1 L2074.41 1215.1 L2074.99 1215.1 L2075.58 1215.1 L2076.17 1215.1 L2076.75 1215.1 L2077.34 1215.1 L2077.93 1215.1 L2078.51 1215.1 L2079.1 1215.1 L2079.68 1215.1 L2080.27 1215.1 L2080.86 1215.1 L2081.44 1215.1 L2082.03 1215.1 L2082.62 1215.1 L2083.2 1215.1 L2083.79 1215.1 L2084.38 1215.1 L2084.96 1215.1 L2085.55 1215.1 L2086.14 1215.1 L2086.72 1215.1 L2087.31 1215.1 L2087.89 1215.1 L2088.48 1215.1 L2089.07 1215.1 L2089.65 1215.1 L2090.24 1215.1 L2090.83 1215.1 L2091.41 1215.1 L2092 1215.1 L2092.59 1215.1 L2093.17 1215.1 L2093.76 1215.1 L2094.35 1215.1 L2094.93 1215.1 L2095.52 1215.1 L2096.1 1215.1 L2096.69 1215.1 L2097.28 1215.1 L2097.86 1215.1 L2098.45 1215.1 L2099.04 1215.1 L2099.62 1215.1 L2100.21 1215.1 L2100.8 1215.1 L2101.38 1215.1 L2101.97 1215.1 L2102.55 1215.1 L2103.14 1215.1 L2103.73 1215.1 L2104.31 1215.1 L2104.9 1215.1 L2105.49 1215.1 L2106.07 1215.1 L2106.66 1215.1 L2107.25 1215.1 L2107.83 1215.1 L2108.42 1215.1 L2109.01 1215.1 L2109.59 1215.1 L2110.18 1215.1 L2110.76 1215.1 L2111.35 1215.1 L2111.94 1215.1 L2112.52 1215.1 L2113.11 1215.1 L2113.7 1215.1 L2114.28 1215.1 L2114.87 1215.1 L2115.46 1215.1 L2116.04 1215.1 L2116.63 1215.1 L2117.22 1215.1 L2117.8 1215.1 L2118.39 1215.1 L2118.97 1215.1 L2119.56 1215.1 L2120.15 1215.1 L2120.73 1215.1 L2121.32 1215.1 L2121.91 1215.1 L2122.49 1215.1 L2123.08 1215.1 L2123.67 1215.1 L2124.25 1215.1 L2124.84 1215.1 L2125.42 1215.1 L2126.01 1215.1 L2126.6 1215.1 L2127.18 1215.1 L2127.77 1215.1 L2128.36 1215.1 L2128.94 1215.1 L2129.53 1215.1 L2130.12 1215.1 L2130.7 1215.1 L2131.29 1215.1 L2131.88 1215.1 L2132.46 1215.1 L2133.05 1215.1 L2133.63 1215.1 L2134.22 1215.1 L2134.81 1215.1 L2135.39 1215.1 L2135.98 1215.1 L2136.57 1215.1 L2137.15 1215.1 L2137.74 1215.1 L2138.33 1215.1 L2138.91 1215.1 L2139.5 1215.1 L2140.09 1215.1 L2140.67 1215.1 L2141.26 1215.1 L2141.84 1215.1 L2142.43 1215.1 L2143.02 1215.1 L2143.6 1215.1 L2144.19 1215.1 L2144.78 1215.1 L2145.36 1215.1 L2145.95 1215.1 L2146.54 1215.1 L2147.12 1215.1 L2147.71 1215.1 L2148.3 1215.1 L2148.88 1215.1 L2149.47 1215.1 L2150.05 1215.1 L2150.64 1215.1 L2151.23 1215.1 L2151.81 1215.1 L2152.4 1215.1 L2152.99 1215.1 L2153.57 1215.1 L2154.16 1215.1 L2154.75 1215.1 L2155.33 1215.1 L2155.92 1215.1 L2156.5 1215.1 L2157.09 1215.1 L2157.68 1215.1 L2158.26 1215.1 L2158.26 1214.42 L2157.68 1214.42 L2157.09 1214.42 L2156.5 1214.42 L2155.92 1214.42 L2155.33 1214.42 L2154.75 1214.42 L2154.16 1214.42 L2153.57 1214.42 L2152.99 1214.42 L2152.4 1214.42 L2151.81 1214.42 L2151.23 1214.42 L2150.64 1214.42 L2150.05 1214.42 L2149.47 1214.42 L2148.88 1214.42 L2148.3 1214.42 L2147.71 1214.42 L2147.12 1214.42 L2146.54 1214.42 L2145.95 1214.42 L2145.36 1214.42 L2144.78 1214.42 L2144.19 1214.42 L2143.6 1214.42 L2143.02 1214.42 L2142.43 1214.42 L2141.84 1214.42 L2141.26 1214.42 L2140.67 1214.42 L2140.09 1214.42 L2139.5 1214.42 L2138.91 1214.42 L2138.33 1214.42 L2137.74 1214.42 L2137.15 1214.42 L2136.57 1214.42 L2135.98 1214.42 L2135.39 1214.42 L2134.81 1214.42 L2134.22 1214.42 L2133.63 1214.42 L2133.05 1214.42 L2132.46 1214.42 L2131.88 1214.42 L2131.29 1214.42 L2130.7 1214.42 L2130.12 1214.42 L2129.53 1214.42 L2128.94 1214.42 L2128.36 1214.42 L2127.77 1214.42 L2127.18 1214.42 L2126.6 1214.42 L2126.01 1214.42 L2125.42 1214.42 L2124.84 1214.42 L2124.25 1214.42 L2123.67 1214.42 L2123.08 1214.42 L2122.49 1214.42 L2121.91 1214.42 L2121.32 1214.42 L2120.73 1214.42 L2120.15 1214.42 L2119.56 1214.42 L2118.97 1214.42 L2118.39 1214.42 L2117.8 1214.42 L2117.22 1214.42 L2116.63 1214.42 L2116.04 1214.42 L2115.46 1214.42 L2114.87 1214.42 L2114.28 1214.42 L2113.7 1214.42 L2113.11 1214.42 L2112.52 1214.42 L2111.94 1214.42 L2111.35 1214.42 L2110.76 1214.42 L2110.18 1214.42 L2109.59 1214.42 L2109.01 1214.42 L2108.42 1214.42 L2107.83 1214.42 L2107.25 1214.42 L2106.66 1214.42 L2106.07 1214.42 L2105.49 1214.42 L2104.9 1214.42 L2104.31 1214.42 L2103.73 1214.42 L2103.14 1214.42 L2102.55 1214.42 L2101.97 1214.42 L2101.38 1214.42 L2100.8 1214.42 L2100.21 1214.42 L2099.62 1214.42 L2099.04 1214.42 L2098.45 1214.42 L2097.86 1214.42 L2097.28 1214.42 L2096.69 1214.42 L2096.1 1214.42 L2095.52 1214.42 L2094.93 1214.42 L2094.35 1214.42 L2093.76 1214.42 L2093.17 1214.42 L2092.59 1214.42 L2092 1214.42 L2091.41 1214.42 L2090.83 1214.42 L2090.24 1214.42 L2089.65 1214.42 L2089.07 1214.42 L2088.48 1214.42 L2087.89 1214.42 L2087.31 1214.42 L2086.72 1214.42 L2086.14 1214.42 L2085.55 1214.42 L2084.96 1214.42 L2084.38 1214.42 L2083.79 1214.42 L2083.2 1214.42 L2082.62 1214.42 L2082.03 1214.42 L2081.44 1214.42 L2080.86 1214.42 L2080.27 1214.42 L2079.68 1214.42 L2079.1 1214.42 L2078.51 1214.42 L2077.93 1214.42 L2077.34 1214.42 L2076.75 1214.42 L2076.17 1214.42 L2075.58 1214.42 L2074.99 1214.42 L2074.41 1214.42 L2073.82 1214.42 L2073.23 1214.42 L2072.65 1214.42 L2072.06 1214.42 L2071.48 1214.42 L2070.89 1214.42 L2070.3 1214.42 L2069.72 1214.42 L2069.13 1214.42 L2068.54 1214.42 L2067.96 1214.42 L2067.37 1214.42 L2066.78 1214.42 L2066.2 1214.42 L2065.61 1214.42 L2065.02 1214.42 L2064.44 1214.42 L2063.85 1214.42 L2063.27 1214.42 L2062.68 1214.42 L2062.09 1214.42 L2061.51 1214.42 L2060.92 1214.42 L2060.33 1214.42 L2059.75 1214.42 L2059.16 1214.42 L2058.57 1214.42 L2057.99 1214.42 L2057.4 1214.42 L2056.81 1214.42 L2056.23 1214.42 L2055.64 1214.42 L2055.06 1214.42 L2054.47 1214.42 L2053.88 1214.42 L2053.3 1214.42 L2052.71 1214.42 L2052.12 1214.42 L2051.54 1214.42 L2050.95 1214.42 L2050.36 1214.42 L2049.78 1214.42 L2049.19 1214.42 L2048.6 1214.42 L2048.02 1214.42 L2047.43 1214.42 L2046.85 1214.42 L2046.26 1214.42 L2045.67 1214.42 L2045.09 1214.42 L2044.5 1214.42 L2043.91 1214.42 L2043.33 1214.42 L2042.74 1214.42 L2042.15 1214.42 L2041.57 1214.42 L2040.98 1214.42 L2040.4 1214.42 L2039.81 1214.42 L2039.22 1214.42 L2038.64 1214.42 L2038.05 1214.42 L2037.46 1214.42 L2036.88 1214.42 L2036.29 1214.42 L2035.7 1214.42 L2035.12 1214.42 L2034.53 1214.42 L2033.94 1214.42 L2033.36 1214.42 L2032.77 1214.42 L2032.19 1214.42 L2031.6 1214.42 L2031.01 1214.42 L2030.43 1214.42 L2029.84 1214.42 L2029.25 1214.42 L2028.67 1214.42 L2028.08 1214.42 L2027.49 1214.42 L2026.91 1214.42 L2026.32 1214.42 L2025.73 1214.42 L2025.15 1214.42 L2024.56 1214.42 L2023.98 1214.42 L2023.39 1214.42 L2022.8 1214.42 L2022.22 1214.42 L2021.63 1214.42 L2021.04 1214.42 L2020.46 1214.42 L2019.87 1214.42 L2019.28 1214.42 L2018.7 1214.42 L2018.11 1214.42 L2017.53 1214.42 L2016.94 1214.42 L2016.35 1214.42 L2015.77 1214.42 L2015.18 1214.42 L2014.59 1214.42 L2014.01 1214.42 L2013.42 1214.42 L2012.83 1214.42 L2012.25 1214.42 L2011.66 1214.42 L2011.07 1214.42 L2010.49 1214.42 L2009.9 1214.42 L2009.32 1214.42 L2008.73 1214.42 L2008.14 1214.42 L2007.56 1214.42 L2006.97 1214.42 L2006.38 1214.42 L2005.8 1214.42 L2005.21 1214.42 L2004.62 1214.42 L2004.04 1214.42 L2003.45 1214.42 L2002.86 1214.42 L2002.28 1214.42 L2001.69 1214.42 L2001.11 1214.42 L2000.52 1214.42 L1999.93 1214.42 L1999.35 1214.42 L1998.76 1214.42 L1998.17 1214.42 L1997.59 1214.42 L1997 1214.42 L1996.41 1214.42 L1995.83 1214.42 L1995.24 1214.42 L1994.65 1214.42 L1994.07 1214.42 L1993.48 1214.42 L1992.9 1214.42 L1992.31 1214.42 L1991.72 1214.42 L1991.14 1214.42 L1990.55 1214.42 L1989.96 1214.42 L1989.38 1214.42 L1988.79 1214.42 L1988.2 1214.42 L1987.62 1214.42 L1987.03 1214.42 L1986.45 1214.42 L1985.86 1214.42 L1985.27 1214.42 L1984.69 1214.42 L1984.1 1214.42 L1983.51 1214.42 L1982.93 1214.42 L1982.34 1214.42 L1981.75 1214.42 L1981.17 1214.42 L1980.58 1214.42 L1979.99 1214.42 L1979.41 1214.42 L1978.82 1214.42 L1978.24 1214.42 L1977.65 1214.42 L1977.06 1214.42 L1976.48 1214.42 L1975.89 1214.42 L1975.3 1214.42 L1974.72 1214.42 L1974.13 1214.42 L1973.54 1214.42 L1972.96 1214.42 L1972.37 1214.42 L1971.78 1214.42 L1971.2 1214.42 L1970.61 1214.42 L1970.03 1214.42 L1969.44 1214.42 L1968.85 1214.42 L1968.27 1214.42 L1967.68 1214.42 L1967.09 1214.42 L1966.51 1214.42 L1965.92 1214.42 L1965.33 1214.42 L1964.75 1214.42 L1964.16 1214.42 L1963.58 1214.42 L1962.99 1214.42 L1962.4 1214.42 L1961.82 1214.42 L1961.23 1214.42 L1960.64 1214.42 L1960.06 1214.42 L1959.47 1214.42 L1958.88 1214.42 L1958.3 1214.42 L1957.71 1214.42 L1957.12 1214.42 L1956.54 1214.42 L1955.95 1214.42 L1955.37 1214.42 L1954.78 1214.42 L1954.19 1214.42 L1953.61 1214.42 L1953.02 1214.42 L1952.43 1214.42 L1951.85 1214.42 L1951.26 1214.42 L1950.67 1214.42 L1950.09 1214.42 L1949.5 1214.42 L1948.91 1214.42 L1948.33 1214.42 L1947.74 1214.42 L1947.16 1214.42 L1946.57 1214.42 L1945.98 1214.42 L1945.4 1214.42 L1944.81 1214.42 L1944.22 1214.42 L1943.64 1214.42 L1943.05 1214.42 L1942.46 1214.42 L1941.88 1214.42 L1941.29 1214.42 L1940.71 1214.42 L1940.12 1214.42 L1939.53 1214.42 L1938.95 1214.42 L1938.36 1214.42 L1937.77 1214.42 L1937.19 1214.42 L1936.6 1214.42 L1936.01 1214.42 L1935.43 1214.42 L1934.84 1214.42 L1934.25 1214.42 L1933.67 1214.42 L1933.08 1214.42 L1932.5 1214.42 L1931.91 1214.42 L1931.32 1214.42 L1930.74 1214.42 L1930.15 1214.42 L1929.56 1214.42 L1928.98 1214.42 L1928.39 1214.42 L1927.8 1214.42 L1927.22 1214.42 L1926.63 1214.42 L1926.04 1214.42 L1925.46 1214.42 L1924.87 1214.42 L1924.29 1214.42 L1923.7 1214.42 L1923.11 1214.42 L1922.53 1214.42 L1921.94 1214.42 L1921.35 1214.42 L1920.77 1214.42 L1920.18 1214.42 L1919.59 1214.42 L1919.01 1214.42 L1918.42 1214.42 L1917.83 1214.42 L1917.25 1214.42 L1916.66 1214.42 L1916.08 1214.42 L1915.49 1214.42 L1914.9 1214.42 L1914.32 1214.42 L1913.73 1214.42 L1913.14 1214.42 L1912.56 1214.42 L1911.97 1214.42 L1911.38 1214.42 L1910.8 1214.42 L1910.21 1214.42 L1909.63 1214.42 L1909.04 1214.42 L1908.45 1214.42 L1907.87 1214.42 L1907.28 1214.42 L1906.69 1214.42 L1906.11 1214.42 L1905.52 1214.42 L1904.93 1214.42 L1904.35 1214.42 L1903.76 1214.42 L1903.17 1214.42 L1902.59 1214.42 L1902 1214.42 L1901.42 1214.42 L1900.83 1214.42 L1900.24 1214.42 L1899.66 1214.42 L1899.07 1214.42 L1898.48 1214.42 L1897.9 1214.42 L1897.31 1214.42 L1896.72 1214.42 L1896.14 1214.42 L1895.55 1214.42 L1894.96 1214.42 L1894.38 1214.42 L1893.79 1214.42 L1893.21 1214.42 L1892.62 1214.42 L1892.03 1214.42 L1891.45 1214.42 L1890.86 1214.42 L1890.27 1214.42 L1889.69 1214.42 L1889.1 1214.42 L1888.51 1214.42 L1887.93 1214.42 L1887.34 1214.42 L1886.76 1214.42 L1886.17 1214.42 L1885.58 1214.42 L1885 1214.42 L1884.41 1214.42 L1883.82 1214.42 L1883.24 1214.42 L1882.65 1214.42 L1882.06 1214.42 L1881.48 1214.42 L1880.89 1214.42 L1880.3 1214.42 L1879.72 1214.42 L1879.13 1214.42 L1878.55 1214.42 L1877.96 1214.42 L1877.37 1214.42 L1876.79 1214.42 L1876.2 1214.42 L1875.61 1214.42 L1875.03 1214.42 L1874.44 1214.42 L1873.85 1214.42 L1873.27 1214.42 L1872.68 1214.42 L1872.09 1214.42 L1871.51 1214.42 L1870.92 1214.42 L1870.34 1214.42 L1869.75 1214.42 L1869.16 1214.42 L1868.58 1214.42 L1867.99 1214.42 L1867.4 1214.42 L1866.82 1214.42 L1866.23 1214.42 L1865.64 1214.42 L1865.06 1214.42 L1864.47 1214.42 L1863.88 1214.42 L1863.3 1214.42 L1862.71 1214.42 L1862.13 1214.42 L1861.54 1214.42 L1860.95 1214.42 L1860.37 1214.42 L1859.78 1214.42 L1859.19 1214.42 L1858.61 1214.42 L1858.02 1214.42 L1857.43 1214.42 L1856.85 1214.42 L1856.26 1214.42 L1855.68 1214.42 L1855.09 1214.42 L1854.5 1214.42 L1853.92 1214.42 L1853.33 1214.42 L1852.74 1214.42 L1852.16 1214.42 L1851.57 1214.42 L1850.98 1214.42 L1850.4 1214.42 L1849.81 1214.42 L1849.22 1214.42 L1848.64 1214.42 L1848.05 1214.42 L1847.47 1214.42 L1846.88 1214.42 L1846.29 1214.42 L1845.71 1214.42 L1845.12 1214.42 L1844.53 1214.42 L1843.95 1214.42 L1843.36 1214.42 L1842.77 1214.42 L1842.19 1214.42 L1841.6 1214.42 L1841.01 1214.42 L1840.43 1214.42 L1839.84 1214.42 L1839.26 1214.42 L1838.67 1214.42 L1838.08 1214.42 L1837.5 1214.42 L1836.91 1214.42 L1836.32 1214.42 L1835.74 1214.42 L1835.15 1214.42 L1834.56 1214.42 L1833.98 1214.42 L1833.39 1214.42 L1832.81 1214.42 L1832.22 1214.42 L1831.63 1214.42 L1831.05 1214.42 L1830.46 1214.42 L1829.87 1214.42 L1829.29 1214.42 L1828.7 1214.42 L1828.11 1214.42 L1827.53 1214.42 L1826.94 1214.42 L1826.35 1214.42 L1825.77 1214.42 L1825.18 1214.42 L1824.6 1214.42 L1824.01 1214.42 L1823.42 1214.42 L1822.84 1214.42 L1822.25 1214.42 L1821.66 1214.42 L1821.08 1214.42 L1820.49 1214.42 L1819.9 1214.42 L1819.32 1214.42 L1818.73 1214.42 L1818.14 1214.42 L1817.56 1214.42 L1816.97 1214.42 L1816.39 1214.42 L1815.8 1214.42 L1815.21 1214.42 L1814.63 1214.42 L1814.04 1214.42 L1813.45 1214.42 L1812.87 1214.42 L1812.28 1214.42 L1811.69 1214.42 L1811.11 1214.42 L1810.52 1214.42 L1809.94 1214.42 L1809.35 1214.42 L1808.76 1214.42 L1808.18 1214.42 L1807.59 1214.42 L1807 1214.42 L1806.42 1214.42 L1805.83 1214.42 L1805.24 1214.42 L1804.66 1214.42 L1804.07 1214.42 L1803.48 1214.42 L1802.9 1214.42 L1802.31 1214.42 L1801.73 1214.42 L1801.14 1214.42 L1800.55 1214.42 L1799.97 1214.42 L1799.38 1214.42 L1798.79 1214.42 L1798.21 1214.42 L1797.62 1214.42 L1797.03 1214.42 L1796.45 1214.42 L1795.86 1214.42 L1795.27 1214.42 L1794.69 1214.42 L1794.1 1214.42 L1793.52 1214.42 L1792.93 1214.42 L1792.34 1214.42 L1791.76 1214.42 L1791.17 1214.42 L1790.58 1214.42 L1790 1214.42 L1789.41 1214.42 L1788.82 1214.42 L1788.24 1214.42 L1787.65 1214.42 L1787.06 1214.42 L1786.48 1214.42 L1785.89 1214.42 L1785.31 1214.42 L1784.72 1214.42 L1784.13 1214.42 L1783.55 1214.42 L1782.96 1214.42 L1782.37 1214.42 L1781.79 1214.42 L1781.2 1214.42 L1780.61 1214.42 L1780.03 1214.42 L1779.44 1214.42 L1778.86 1214.42 L1778.27 1214.42 L1777.68 1214.42 L1777.1 1214.42 L1776.51 1214.42 L1775.92 1214.42 L1775.34 1214.42 L1774.75 1214.42 L1774.16 1214.42 L1773.58 1214.42 L1772.99 1214.42 L1772.4 1214.42 L1771.82 1214.42 L1771.23 1214.42 L1770.65 1214.42 L1770.06 1214.42 L1769.47 1214.42 L1768.89 1214.42 L1768.3 1214.42 L1767.71 1214.42 L1767.13 1214.42 L1766.54 1214.42 L1765.95 1214.42 L1765.37 1214.42 L1764.78 1214.42 L1764.19 1214.42 L1763.61 1214.42 L1763.02 1214.42 L1762.44 1214.42 L1761.85 1214.42 L1761.26 1214.42 L1760.68 1214.42 L1760.09 1214.42 L1759.5 1214.42 L1758.92 1214.42 L1758.33 1214.42 L1757.74 1214.42 L1757.16 1214.42 L1756.57 1214.42 L1755.99 1214.42 L1755.4 1214.42 L1754.81 1214.42 L1754.23 1214.42 L1753.64 1214.42 L1753.05 1214.42 L1752.47 1214.42 L1751.88 1214.42 L1751.29 1214.42 L1750.71 1214.42 L1750.12 1214.42 L1749.53 1214.42 L1748.95 1214.42 L1748.36 1214.42 L1747.78 1214.42 L1747.19 1214.42 L1746.6 1214.42 L1746.02 1214.42 L1745.43 1214.42 L1744.84 1214.42 L1744.26 1214.42 L1743.67 1214.42 L1743.08 1214.42 L1742.5 1214.42 L1741.91 1214.42 L1741.32 1214.42 L1740.74 1214.42 L1740.15 1214.42 L1739.57 1214.42 L1738.98 1214.42 L1738.39 1214.42 L1737.81 1214.42 L1737.22 1214.42 L1736.63 1214.42 L1736.05 1214.42 L1735.46 1214.42 L1734.87 1214.42 L1734.29 1214.42 L1733.7 1214.42 L1733.11 1214.42 L1732.53 1214.42 L1731.94 1214.42 L1731.36 1214.42 L1730.77 1214.42 L1730.18 1214.42 L1729.6 1214.42 L1729.01 1214.42 L1728.42 1214.42 L1727.84 1214.42 L1727.25 1214.42 L1726.66 1214.42 L1726.08 1214.42 L1725.49 1214.42 L1724.91 1214.42 L1724.32 1214.42 L1723.73 1214.42 L1723.15 1214.42 L1722.56 1214.42 L1721.97 1214.42 L1721.39 1214.42 L1720.8 1214.42 L1720.21 1214.42 L1719.63 1214.42 L1719.04 1214.42 L1718.45 1214.42 L1717.87 1214.42 L1717.28 1214.42 L1716.7 1214.42 L1716.11 1214.42 L1715.52 1214.42 L1714.94 1214.42 L1714.35 1214.42 L1713.76 1214.42 L1713.18 1214.42 L1712.59 1214.42 L1712 1214.42 L1711.42 1214.42 L1710.83 1214.42 L1710.24 1214.42 L1709.66 1214.42 L1709.07 1214.42 L1708.49 1214.42 L1707.9 1214.42 L1707.31 1214.42 L1706.73 1214.42 L1706.14 1214.42 L1705.55 1214.42 L1704.97 1214.42 L1704.38 1214.42 L1703.79 1214.42 L1703.21 1214.42 L1702.62 1214.42 L1702.04 1214.42 L1701.45 1214.42 L1700.86 1214.42 L1700.28 1214.42 L1699.69 1214.42 L1699.1 1214.42 L1698.52 1214.42 L1697.93 1214.42 L1697.34 1214.42 L1696.76 1214.42 L1696.17 1214.42 L1695.58 1214.42 L1695 1214.42 L1694.41 1214.42 L1693.83 1214.42 L1693.24 1214.42 L1692.65 1214.42 L1692.07 1214.42 L1691.48 1214.42 L1690.89 1214.42 L1690.31 1214.42 L1689.72 1214.42 L1689.13 1214.42 L1688.55 1214.42 L1687.96 1214.42 L1687.37 1214.42 L1686.79 1214.42 L1686.2 1214.42 L1685.62 1214.42 L1685.03 1214.42 L1684.44 1214.42 L1683.86 1214.42 L1683.27 1214.42 L1682.68 1214.42 L1682.1 1214.42 L1681.51 1214.42 L1680.92 1214.42 L1680.34 1214.42 L1679.75 1214.42 L1679.17 1214.42 L1678.58 1214.42 L1677.99 1214.42 L1677.41 1214.42 L1676.82 1214.42 L1676.23 1214.42 L1675.65 1214.42 L1675.06 1214.42 L1674.47 1214.42 L1673.89 1214.42 L1673.3 1214.42 L1672.71 1214.42 L1672.13 1214.42 L1671.54 1214.42 L1670.96 1214.42 L1670.37 1214.42 L1669.78 1214.42 L1669.2 1214.42 L1668.61 1214.42 L1668.02 1214.42 L1667.44 1214.42 L1666.85 1214.42 L1666.26 1214.42 L1665.68 1214.42 L1665.09 1214.42 L1664.5 1214.42 L1663.92 1214.42 L1663.33 1214.42 L1662.75 1214.42 L1662.16 1214.42 L1661.57 1214.42 L1660.99 1214.42 L1660.4 1214.42 L1659.81 1214.42 L1659.23 1214.42 L1658.64 1214.42 L1658.05 1214.42 L1657.47 1214.42 L1656.88 1214.42 L1656.29 1214.42 L1655.71 1214.42 L1655.12 1214.42 L1654.54 1214.42 L1653.95 1214.42 L1653.36 1214.42 L1652.78 1214.42 L1652.19 1214.42 L1651.6 1214.42 L1651.02 1214.42 L1650.43 1214.42 L1649.84 1214.42 L1649.26 1214.42 L1648.67 1214.42 L1648.09 1214.42 L1647.5 1214.42 L1646.91 1214.42 L1646.33 1214.42 L1645.74 1214.42 L1645.15 1214.42 L1644.57 1214.42 L1643.98 1214.42 L1643.39 1214.42 L1642.81 1214.42 L1642.22 1214.42 L1641.63 1214.42 L1641.05 1214.42 L1640.46 1214.42 L1639.88 1214.42 L1639.29 1214.42 L1638.7 1214.42 L1638.12 1214.42 L1637.53 1214.42 L1636.94 1214.42 L1636.36 1214.42 L1635.77 1214.42 L1635.18 1214.42 L1634.6 1214.42 L1634.01 1214.42 L1633.42 1214.42 L1632.84 1214.42 L1632.25 1214.42 L1631.67 1214.42 L1631.08 1214.42 L1630.49 1214.42 L1629.91 1214.42 L1629.32 1214.42 L1628.73 1214.42 L1628.15 1214.42 L1627.56 1214.42 L1626.97 1214.42 L1626.39 1214.42 L1625.8 1214.42 L1625.22 1214.42 L1624.63 1214.42 L1624.04 1214.42 L1623.46 1214.42 L1622.87 1214.42 L1622.28 1214.42 L1621.7 1214.42 L1621.11 1214.42 L1620.52 1214.42 L1619.94 1214.42 L1619.35 1214.42 L1618.76 1214.42 L1618.18 1214.42 L1617.59 1214.42 L1617.01 1214.42 L1616.42 1214.42 L1615.83 1214.42 L1615.25 1214.42 L1614.66 1214.42 L1614.07 1214.42 L1613.49 1214.42 L1612.9 1214.42 L1612.31 1214.42 L1611.73 1214.42 L1611.14 1214.42 L1610.55 1214.42 L1609.97 1214.42 L1609.38 1214.42 L1608.8 1214.42 L1608.21 1214.42 L1607.62 1214.42 L1607.04 1214.42 L1606.45 1214.42 L1605.86 1214.42 L1605.28 1214.42 L1604.69 1214.42 L1604.1 1214.42 L1603.52 1214.42 L1602.93 1214.42 L1602.34 1214.42 L1601.76 1214.42 L1601.17 1214.42 L1600.59 1214.42 L1600 1214.42 L1599.41 1214.42 L1598.83 1214.42 L1598.24 1214.42 L1597.65 1214.42 L1597.07 1214.42 L1596.48 1214.42 L1595.89 1214.42 L1595.31 1214.42 L1594.72 1214.42 L1594.14 1214.42 L1593.55 1214.42 L1592.96 1214.42 L1592.38 1214.42 L1591.79 1214.42 L1591.2 1214.42 L1590.62 1214.42 L1590.03 1214.42 L1589.44 1214.42 L1588.86 1214.42 L1588.27 1214.42 L1587.68 1214.42 L1587.1 1214.42 L1586.51 1214.42 L1585.93 1214.42 L1585.34 1214.42 L1584.75 1214.42 L1584.17 1214.42 L1583.58 1214.42 L1582.99 1214.42 L1582.41 1214.42 L1581.82 1214.42 L1581.23 1214.42 L1580.65 1214.42 L1580.06 1214.42 L1579.47 1214.42 L1578.89 1214.42 L1578.3 1214.42 L1577.72 1214.42 L1577.13 1214.42 L1576.54 1214.42 L1575.96 1214.42 L1575.37 1214.42 L1574.78 1214.42 L1574.2 1214.42 L1573.61 1214.42 L1573.02 1214.42 L1572.44 1214.42 L1571.85 1214.42 L1571.27 1214.42 L1570.68 1214.42 L1570.09 1214.42 L1569.51 1214.42 L1568.92 1214.42 L1568.33 1214.42 L1567.75 1214.42 L1567.16 1214.42 L1566.57 1214.42 L1565.99 1214.42 L1565.4 1214.42 L1564.81 1214.42 L1564.23 1214.42 L1563.64 1214.42 L1563.06 1214.42 L1562.47 1214.42 L1561.88 1214.42 L1561.3 1214.42 L1560.71 1214.42 L1560.12 1214.42 L1559.54 1214.42 L1558.95 1214.42 L1558.36 1214.42 L1557.78 1214.42 L1557.19 1214.42 L1556.6 1214.42 L1556.02 1214.42 L1555.43 1214.42 L1554.85 1214.42 L1554.26 1214.42 L1553.67 1214.42 L1553.09 1214.42 L1552.5 1214.42 L1551.91 1214.42 L1551.33 1214.42 L1550.74 1214.42 L1550.15 1214.42 L1549.57 1214.42 L1548.98 1214.42 L1548.4 1214.42 L1547.81 1214.42 L1547.22 1214.42 L1546.64 1214.42 L1546.05 1214.42 L1545.46 1214.42 L1544.88 1214.42 L1544.29 1214.42 L1543.7 1214.42 L1543.12 1214.42 L1542.53 1214.42 L1541.94 1214.42 L1541.36 1214.42 L1540.77 1214.42 L1540.19 1214.42 L1539.6 1214.42 L1539.01 1214.42 L1538.43 1214.42 L1537.84 1214.42 L1537.25 1214.42 L1536.67 1214.42 L1536.08 1214.42 L1535.49 1214.42 L1534.91 1214.42 L1534.32 1214.42 L1533.73 1214.42 L1533.15 1214.42 L1532.56 1214.42 L1531.98 1214.42 L1531.39 1214.42 L1530.8 1214.42 L1530.22 1214.42 L1529.63 1214.42 L1529.04 1214.42 L1528.46 1214.42 L1527.87 1214.42 L1527.28 1214.42 L1526.7 1214.42 L1526.11 1214.42 L1525.52 1214.42 L1524.94 1214.42 L1524.35 1214.42 L1523.77 1214.42 L1523.18 1214.42 L1522.59 1214.42 L1522.01 1214.42 L1521.42 1214.42 L1520.83 1214.42 L1520.25 1214.42 L1519.66 1214.42 L1519.07 1214.42 L1518.49 1214.42 L1517.9 1214.42 L1517.32 1214.42 L1516.73 1214.42 L1516.14 1214.42 L1515.56 1214.42 L1514.97 1214.42 L1514.38 1214.42 L1513.8 1214.42 L1513.21 1214.42 L1512.62 1214.42 L1512.04 1214.42 L1511.45 1214.42 L1510.86 1214.42 L1510.28 1214.42 L1509.69 1214.42 L1509.11 1214.42 L1508.52 1214.42 L1507.93 1214.42 L1507.35 1214.42 L1506.76 1214.42 L1506.17 1214.42 L1505.59 1214.42 L1505 1214.42 L1504.41 1214.42 L1503.83 1214.42 L1503.24 1214.42 L1502.65 1214.42 L1502.07 1214.42 L1501.48 1214.42 L1500.9 1214.42 L1500.31 1214.42 L1499.72 1214.42 L1499.14 1214.42 L1498.55 1214.42 L1497.96 1214.42 L1497.38 1214.42 L1496.79 1214.42 L1496.2 1214.42 L1495.62 1214.42 L1495.03 1214.42 L1494.45 1214.42 L1493.86 1214.42 L1493.27 1214.42 L1492.69 1214.42 L1492.1 1214.42 L1491.51 1214.42 L1490.93 1214.42 L1490.34 1214.42 L1489.75 1214.42 L1489.17 1214.42 L1488.58 1214.42 L1487.99 1214.42 L1487.41 1214.42 L1486.82 1214.42 L1486.24 1214.42 L1485.65 1214.42 L1485.06 1214.42 L1484.48 1214.42 L1483.89 1214.42 L1483.3 1214.42 L1482.72 1214.42 L1482.13 1214.42 L1481.54 1214.42 L1480.96 1214.42 L1480.37 1214.42 L1479.78 1214.42 L1479.2 1214.42 L1478.61 1214.42 L1478.03 1214.42 L1477.44 1214.42 L1476.85 1214.42 L1476.27 1214.42 L1475.68 1214.42 L1475.09 1214.42 L1474.51 1214.42 L1473.92 1214.42 L1473.33 1214.42 L1472.75 1214.42 L1472.16 1214.42 L1471.57 1214.42 L1470.99 1214.42 L1470.4 1214.42 L1469.82 1214.42 L1469.23 1214.42 L1468.64 1214.42 L1468.06 1214.42 L1467.47 1214.42 L1466.88 1214.42 L1466.3 1214.42 L1465.71 1214.42 L1465.12 1214.42 L1464.54 1214.42 L1463.95 1214.42 L1463.37 1214.42 L1462.78 1214.42 L1462.19 1214.42 L1461.61 1214.42 L1461.02 1214.42 L1460.43 1214.42 L1459.85 1214.42 L1459.26 1214.42 L1458.67 1214.42 L1458.09 1214.42 L1457.5 1214.42 L1456.91 1214.42 L1456.33 1214.42 L1455.74 1214.42 L1455.16 1214.42 L1454.57 1214.42 L1453.98 1214.42 L1453.4 1214.42 L1452.81 1214.42 L1452.22 1214.42 L1451.64 1214.42 L1451.05 1214.42 L1450.46 1214.42 L1449.88 1214.42 L1449.29 1214.42 L1448.7 1214.42 L1448.12 1214.42 L1447.53 1214.42 L1446.95 1214.42 L1446.36 1214.42 L1445.77 1214.42 L1445.19 1214.42 L1444.6 1214.42 L1444.01 1214.42 L1443.43 1214.42 L1442.84 1214.42 L1442.25 1214.42 L1441.67 1214.42 L1441.08 1214.42 L1440.5 1214.42 L1439.91 1214.42 L1439.32 1214.42 L1438.74 1214.42 L1438.15 1214.42 L1437.56 1214.42 L1436.98 1214.42 L1436.39 1214.42 L1435.8 1214.42 L1435.22 1214.42 L1434.63 1214.42 L1434.04 1214.42 L1433.46 1214.42 L1432.87 1214.42 L1432.29 1214.42 L1431.7 1214.42 L1431.11 1214.42 L1430.53 1214.42 L1429.94 1214.42 L1429.35 1214.42 L1428.77 1214.42 L1428.18 1214.42 L1427.59 1214.42 L1427.01 1214.42 L1426.42 1214.42 L1425.83 1214.42 L1425.25 1214.42 L1424.66 1214.42 L1424.08 1214.42 L1423.49 1214.42 L1422.9 1214.42 L1422.32 1214.42 L1421.73 1214.42 L1421.14 1214.42 L1420.56 1214.42 L1419.97 1214.42 L1419.38 1214.42 L1418.8 1214.42 L1418.21 1214.42 L1417.63 1214.42 L1417.04 1214.42 L1416.45 1214.42 L1415.87 1214.42 L1415.28 1214.42 L1414.69 1214.42 L1414.11 1214.42 L1413.52 1214.42 L1412.93 1214.42 L1412.35 1214.42 L1411.76 1214.42 L1411.17 1214.42 L1410.59 1214.42 L1410 1214.42 L1409.42 1214.42 L1408.83 1214.42 L1408.24 1214.42 L1407.66 1214.42 L1407.07 1214.42 L1406.48 1214.42 L1405.9 1214.42 L1405.31 1214.42 L1404.72 1214.42 L1404.14 1214.42 L1403.55 1214.42 L1402.96 1214.42 L1402.38 1214.42 L1401.79 1214.42 L1401.21 1214.42 L1400.62 1214.42 L1400.03 1214.42 L1399.45 1214.42 L1398.86 1214.42 L1398.27 1214.42 L1397.69 1214.42 L1397.1 1214.42 L1396.51 1214.42 L1395.93 1214.42 L1395.34 1214.42 L1394.75 1214.42 L1394.17 1214.42 L1393.58 1214.42 L1393 1214.42 L1392.41 1214.42 L1391.82 1214.42 L1391.24 1214.42 L1390.65 1214.42 L1390.06 1214.42 L1389.48 1214.42 L1388.89 1214.42 L1388.3 1214.42 L1387.72 1214.42 L1387.13 1214.42 L1386.55 1214.42 L1385.96 1214.42 L1385.37 1214.42 L1384.79 1214.42 L1384.2 1214.42 L1383.61 1214.42 L1383.03 1214.42 L1382.44 1214.42 L1381.85 1214.42 L1381.27 1214.42 L1380.68 1214.42 L1380.09 1214.42 L1379.51 1214.42 L1378.92 1214.42 L1378.34 1214.42 L1377.75 1214.42 L1377.16 1214.42 L1376.58 1214.42 L1375.99 1214.42 L1375.4 1214.42 L1374.82 1214.42 L1374.23 1214.42 L1373.64 1214.42 L1373.06 1214.42 L1372.47 1214.42 L1371.88 1214.42 L1371.3 1214.42 L1370.71 1214.42 L1370.13 1214.42 L1369.54 1214.42 L1368.95 1214.42 L1368.37 1214.42 L1367.78 1214.42 L1367.19 1214.42 L1366.61 1214.42 L1366.02 1214.42 L1365.43 1214.42 L1364.85 1214.42 L1364.26 1214.42 L1363.68 1214.42 L1363.09 1214.42 L1362.5 1214.42 L1361.92 1214.42 L1361.33 1214.42 L1360.74 1214.42 L1360.16 1214.42 L1359.57 1214.42 L1358.98 1214.42 L1358.4 1214.42 L1357.81 1214.42 L1357.22 1214.42 L1356.64 1214.42 L1356.05 1214.42 L1355.47 1214.42 L1354.88 1214.42 L1354.29 1214.42 L1353.71 1214.42 L1353.12 1214.42 L1352.53 1214.42 L1351.95 1214.42 L1351.36 1214.42 L1350.77 1214.42 L1350.19 1214.42 L1349.6 1214.42 L1349.01 1214.42 L1348.43 1214.42 L1347.84 1214.42 L1347.26 1214.42 L1346.67 1214.42 L1346.08 1214.42 L1345.5 1214.42 L1344.91 1214.42 L1344.32 1214.42 L1343.74 1214.42 L1343.15 1214.42 L1342.56 1214.42 L1341.98 1214.42 L1341.39 1214.42 L1340.8 1214.42 L1340.22 1214.42 L1339.63 1214.42 L1339.05 1214.42 L1338.46 1214.42 L1337.87 1214.42 L1337.29 1214.42 L1336.7 1214.42 L1336.11 1214.42 L1335.53 1214.42 L1334.94 1214.42 L1334.35 1214.42 L1333.77 1214.42 L1333.18 1214.42 L1332.6 1214.42 L1332.01 1214.42 L1331.42 1214.42 L1330.84 1214.42 L1330.25 1214.42 L1329.66 1214.42 L1329.08 1214.42 L1328.49 1214.42 L1327.9 1214.42 L1327.32 1214.42 L1326.73 1214.42 L1326.14 1214.42 L1325.56 1214.42 L1324.97 1214.42 L1324.39 1214.42 L1323.8 1214.42 L1323.21 1214.42 L1322.63 1214.42 L1322.04 1214.42 L1321.45 1214.42 L1320.87 1214.42 L1320.28 1214.42 L1319.69 1214.42 L1319.11 1214.42 L1318.52 1214.42 L1317.93 1214.42 L1317.35 1214.42 L1316.76 1214.42 L1316.18 1214.42 L1315.59 1214.42 L1315 1214.42 L1314.42 1214.42 L1313.83 1214.42 L1313.24 1214.42 L1312.66 1214.42 L1312.07 1214.42 L1311.48 1214.42 L1310.9 1214.42 L1310.31 1214.42 L1309.73 1214.42 L1309.14 1214.42 L1308.55 1214.42 L1307.97 1214.42 L1307.38 1214.42 L1306.79 1214.42 L1306.21 1214.42 L1305.62 1214.42 L1305.03 1214.42 L1304.45 1214.42 L1303.86 1214.42 L1303.27 1214.42 L1302.69 1214.42 L1302.1 1214.42 L1301.52 1214.42 L1300.93 1214.42 L1300.34 1214.42 L1299.76 1214.42 L1299.17 1214.42 L1298.58 1214.42 L1298 1214.42 L1297.41 1214.42 L1296.82 1214.42 L1296.24 1214.42 L1295.65 1214.42 L1295.06 1214.42 L1294.48 1214.42 L1293.89 1214.42 L1293.31 1214.42 L1292.72 1214.42 L1292.13 1214.42 L1291.55 1214.42 L1290.96 1214.42 L1290.37 1214.42 L1289.79 1214.42 L1289.2 1214.42 L1288.61 1214.42 L1288.03 1214.42 L1287.44 1214.42 L1286.86 1214.42 L1286.27 1214.42 L1285.68 1214.42 L1285.1 1214.42 L1284.51 1214.42 L1283.92 1214.42 L1283.34 1214.42 L1282.75 1214.42 L1282.16 1214.42 L1281.58 1214.42 L1280.99 1214.42 L1280.4 1214.42 L1279.82 1214.42 L1279.23 1214.42 L1278.65 1214.42 L1278.06 1214.42 L1277.47 1214.42 L1276.89 1214.42 L1276.3 1214.42 L1275.71 1214.42 L1275.13 1214.42 L1274.54 1214.42 L1273.95 1214.42 L1273.37 1214.42 L1272.78 1214.42 L1272.19 1214.42 L1271.61 1214.42 L1271.02 1214.42 L1270.44 1214.42 L1269.85 1214.42 L1269.26 1214.42 L1268.68 1214.42 L1268.09 1214.42 L1267.5 1214.42 L1266.92 1214.42 L1266.33 1214.42 L1265.74 1214.42 L1265.16 1214.42 L1264.57 1214.42 L1263.98 1214.42 L1263.4 1214.42 L1262.81 1214.42 L1262.23 1214.42 L1261.64 1214.42 L1261.05 1214.42 L1260.47 1214.42 L1259.88 1214.42 L1259.29 1214.42 L1258.71 1214.42 L1258.12 1214.42 L1257.53 1214.42 L1256.95 1214.42 L1256.36 1214.42 L1255.78 1214.42 L1255.19 1214.42 L1254.6 1214.42 L1254.02 1214.42 L1253.43 1214.42 L1252.84 1214.42 L1252.26 1214.42 L1251.67 1214.42 L1251.08 1214.42 L1250.5 1214.42 L1249.91 1214.42 L1249.32 1214.42 L1248.74 1214.42 L1248.15 1214.42 L1247.57 1214.42 L1246.98 1214.42 L1246.39 1214.42 L1245.81 1214.42 L1245.22 1214.42 L1244.63 1214.42 L1244.05 1214.42 L1243.46 1214.42 L1242.87 1214.42 L1242.29 1214.42 L1241.7 1214.42 L1241.11 1214.42 L1240.53 1214.42 L1239.94 1214.42 L1239.36 1214.42 L1238.77 1214.42 L1238.18 1214.42 L1237.6 1214.42 L1237.01 1214.42 L1236.42 1214.42 L1235.84 1214.42 L1235.25 1214.42 L1234.66 1214.42 L1234.08 1214.42 L1233.49 1214.42 L1232.91 1214.42 L1232.32 1214.42 L1231.73 1214.42 L1231.15 1214.42 L1230.56 1214.42 L1229.97 1214.42 L1229.39 1214.42 L1228.8 1214.42 L1228.21 1214.42 L1227.63 1214.42 L1227.04 1214.42 L1226.45 1214.42 L1225.87 1214.42 L1225.28 1214.42 L1224.7 1214.42 L1224.11 1214.42 L1223.52 1214.42 L1222.94 1214.42 L1222.35 1214.42 L1221.76 1214.42 L1221.18 1214.42 L1220.59 1214.42 L1220 1214.42 L1219.42 1214.42 L1218.83 1214.42 L1218.24 1214.42 L1217.66 1214.42 L1217.07 1214.42 L1216.49 1214.42 L1215.9 1214.42 L1215.31 1214.42 L1214.73 1214.42 L1214.14 1214.42 L1213.55 1214.42 L1212.97 1214.42 L1212.38 1214.42 L1211.79 1214.42 L1211.21 1214.42 L1210.62 1214.42 L1210.03 1214.42 L1209.45 1214.42 L1208.86 1214.42 L1208.28 1214.42 L1207.69 1214.42 L1207.1 1214.42 L1206.52 1214.42 L1205.93 1214.42 L1205.34 1214.42 L1204.76 1214.42 L1204.17 1214.42 L1203.58 1214.42 L1203 1214.42 L1202.41 1214.42 L1201.83 1214.42 L1201.24 1214.42 L1200.65 1214.42 L1200.07 1214.42 L1199.48 1214.42 L1198.89 1214.42 L1198.31 1214.42 L1197.72 1214.42 L1197.13 1214.42 L1196.55 1214.42 L1195.96 1214.42 L1195.37 1214.42 L1194.79 1214.42 L1194.2 1214.42 L1193.62 1214.42 L1193.03 1214.42 L1192.44 1214.42 L1191.86 1214.42 L1191.27 1214.42 L1190.68 1214.42 L1190.1 1214.42 L1189.51 1214.42 L1188.92 1214.42 L1188.34 1214.42 L1187.75 1214.42 L1187.16 1214.42 L1186.58 1214.42 L1185.99 1214.42 L1185.41 1214.42 L1184.82 1214.42 L1184.23 1214.42 L1183.65 1214.42 L1183.06 1214.42 L1182.47 1214.42 L1181.89 1214.42 L1181.3 1214.42 L1180.71 1214.42 L1180.13 1214.42 L1179.54 1214.42 L1178.96 1214.42 L1178.37 1214.42 L1177.78 1214.42 L1177.2 1214.42 L1176.61 1214.42 L1176.02 1214.42 L1175.44 1214.42 L1174.85 1214.42 L1174.26 1214.42 L1173.68 1214.42 L1173.09 1214.42 L1172.5 1214.42 L1171.92 1214.42 L1171.33 1214.42 L1170.75 1214.42 L1170.16 1214.42 L1169.57 1214.42 L1168.99 1214.42 L1168.4 1214.42 L1167.81 1214.42 L1167.23 1214.42 L1166.64 1214.42 L1166.05 1214.42 L1165.47 1214.42 L1164.88 1214.42 L1164.29 1214.42 L1163.71 1214.42 L1163.12 1214.42 L1162.54 1214.42 L1161.95 1214.42 L1161.36 1214.42 L1160.78 1214.42 L1160.19 1214.42 L1159.6 1214.42 L1159.02 1214.42 L1158.43 1214.42 L1157.84 1214.42 L1157.26 1214.42 L1156.67 1214.42 L1156.09 1214.42 L1155.5 1214.42 L1154.91 1214.42 L1154.33 1214.42 L1153.74 1214.42 L1153.15 1214.42 L1152.57 1214.42 L1151.98 1214.42 L1151.39 1214.42 L1150.81 1214.42 L1150.22 1214.42 L1149.63 1214.42 L1149.05 1214.42 L1148.46 1214.42 L1147.88 1214.42 L1147.29 1214.42 L1146.7 1214.42 L1146.12 1214.42 L1145.53 1214.42 L1144.94 1214.42 L1144.36 1214.42 L1143.77 1214.42 L1143.18 1214.42 L1142.6 1214.42 L1142.01 1214.42 L1141.42 1214.42 L1140.84 1214.42 L1140.25 1214.42 L1139.67 1214.42 L1139.08 1214.42 L1138.49 1214.42 L1137.91 1214.42 L1137.32 1214.42 L1136.73 1214.42 L1136.15 1214.42 L1135.56 1214.42 L1134.97 1214.42 L1134.39 1214.42 L1133.8 1214.42 L1133.21 1214.42 L1132.63 1214.42 L1132.04 1214.42 L1131.46 1214.42 L1130.87 1214.42 L1130.28 1214.42 L1129.7 1214.42 L1129.11 1214.42 L1128.52 1214.42 L1127.94 1214.42 L1127.35 1214.42 L1126.76 1214.42 L1126.18 1214.42 L1125.59 1214.42 L1125.01 1214.42 L1124.42 1214.42 L1123.83 1214.42 L1123.25 1214.42 L1122.66 1214.42 L1122.07 1214.42 L1121.49 1214.42 L1120.9 1214.42 L1120.31 1214.42 L1119.73 1214.42 L1119.14 1214.42 L1118.55 1214.42 L1117.97 1214.42 L1117.38 1214.42 L1116.8 1214.42 L1116.21 1214.42 L1115.62 1214.42 L1115.04 1214.42 L1114.45 1214.42 L1113.86 1214.42 L1113.28 1214.42 L1112.69 1214.42 L1112.1 1214.42 L1111.52 1214.42 L1110.93 1214.42 L1110.34 1214.42 L1109.76 1214.42 L1109.17 1214.42 L1108.59 1214.42 L1108 1214.42 L1107.41 1214.42 L1106.83 1214.42 L1106.24 1214.42 L1105.65 1214.42 L1105.07 1214.42 L1104.48 1214.42 L1103.89 1214.42 L1103.31 1214.42 L1102.72 1214.42 L1102.14 1214.42 L1101.55 1214.42 L1100.96 1214.42 L1100.38 1214.42 L1099.79 1214.42 L1099.2 1214.42 L1098.62 1214.42 L1098.03 1214.42 L1097.44 1214.42 L1096.86 1214.42 L1096.27 1214.42 L1095.68 1214.42 L1095.1 1214.42 L1094.51 1214.42 L1093.93 1214.42 L1093.34 1214.42 L1092.75 1214.42 L1092.17 1214.42 L1091.58 1214.42 L1090.99 1214.42 L1090.41 1214.42 L1089.82 1214.42 L1089.23 1214.42 L1088.65 1214.42 L1088.06 1214.42 L1087.47 1214.42 L1086.89 1214.42 L1086.3 1214.42 L1085.72 1214.42 L1085.13 1214.42 L1084.54 1214.42 L1083.96 1214.42 L1083.37 1214.42 L1082.78 1214.42 L1082.2 1214.42 L1081.61 1214.42 L1081.02 1214.42 L1080.44 1214.42 L1079.85 1214.42 L1079.26 1214.42 L1078.68 1214.42 L1078.09 1214.42 L1077.51 1214.42 L1076.92 1214.42 L1076.33 1214.42 L1075.75 1214.42 L1075.16 1214.42 L1074.57 1214.42 L1073.99 1214.42 L1073.4 1214.42 L1072.81 1214.42 L1072.23 1214.42 L1071.64 1214.42 L1071.06 1214.42 L1070.47 1214.42 L1069.88 1214.42 L1069.3 1214.42 L1068.71 1214.42 L1068.12 1214.42 L1067.54 1214.42 L1066.95 1214.42 L1066.36 1214.42 L1065.78 1214.42 L1065.19 1214.42 L1064.6 1214.42 L1064.02 1214.42 L1063.43 1214.42 L1062.85 1214.42 L1062.26 1214.42 L1061.67 1214.42 L1061.09 1214.42 L1060.5 1214.42 L1059.91 1214.42 L1059.33 1214.42 L1058.74 1214.42 L1058.15 1214.42 L1057.57 1214.42 L1056.98 1214.42 L1056.39 1214.42 L1055.81 1214.42 L1055.22 1214.42 L1054.64 1214.42 L1054.05 1214.42 L1053.46 1214.42 L1052.88 1214.42 L1052.29 1214.42 L1051.7 1214.42 L1051.12 1214.42 L1050.53 1214.42 L1049.94 1214.42 L1049.36 1214.42 L1048.77 1214.42 L1048.19 1214.42 L1047.6 1214.42 L1047.01 1214.42 L1046.43 1214.42 L1045.84 1214.42 L1045.25 1214.42 L1044.67 1214.42 L1044.08 1214.42 L1043.49 1214.42 L1042.91 1214.42 L1042.32 1214.42 L1041.73 1214.42 L1041.15 1214.42 L1040.56 1214.42 L1039.98 1214.42 L1039.39 1214.42 L1038.8 1214.42 L1038.22 1214.42 L1037.63 1214.42 L1037.04 1214.42 L1036.46 1214.42 L1035.87 1214.42 L1035.28 1214.42 L1034.7 1214.42 L1034.11 1214.42 L1033.52 1214.42 L1032.94 1214.42 L1032.35 1214.42 L1031.77 1214.42 L1031.18 1214.42 L1030.59 1214.42 L1030.01 1214.42 L1029.42 1214.42 L1028.83 1214.42 L1028.25 1214.42 L1027.66 1214.42 L1027.07 1214.42 L1026.49 1214.42 L1025.9 1214.42 L1025.32 1214.42 L1024.73 1214.42 L1024.14 1214.42 L1023.56 1214.42 L1022.97 1214.42 L1022.38 1214.42 L1021.8 1214.42 L1021.21 1214.42 L1020.62 1214.42 L1020.04 1214.42 L1019.45 1214.42 L1018.86 1214.42 L1018.28 1214.42 L1017.69 1214.42 L1017.11 1214.42 L1016.52 1214.42 L1015.93 1214.42 L1015.35 1214.42 L1014.76 1214.42 L1014.17 1214.42 L1013.59 1214.42 L1013 1214.42 L1012.41 1214.42 L1011.83 1214.42 L1011.24 1214.42 L1010.65 1214.42 L1010.07 1214.42 L1009.48 1214.42 L1008.9 1214.42 L1008.31 1214.42 L1007.72 1214.42 L1007.14 1214.42 L1006.55 1214.42 L1005.96 1214.42 L1005.38 1214.42 L1004.79 1214.42 L1004.2 1214.42 L1003.62 1214.42 L1003.03 1214.42 L1002.44 1214.42 L1001.86 1214.42 L1001.27 1214.42 L1000.69 1214.42 L1000.1 1214.42 L999.513 1214.42 L998.926 1214.42 L998.34 1214.42 L997.754 1214.42 L997.167 1214.42 L996.581 1214.42 L995.994 1214.42 L995.408 1214.42 L994.822 1214.42 L994.235 1214.42 L993.649 1214.42 L993.062 1214.42 L992.476 1214.42 L991.889 1214.42 L991.303 1214.42 L990.717 1214.42 L990.13 1214.42 L989.544 1214.42 L988.957 1214.42 L988.371 1214.42 L987.785 1214.42 L987.198 1214.42 L986.612 1214.42 L986.025 1214.42  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.76 986.612,1214.76 987.198,1214.76 987.785,1214.76 988.371,1214.76 988.957,1214.76 989.544,1214.76 990.13,1214.76 990.717,1214.76 991.303,1214.76 991.889,1214.76 992.476,1214.76 993.062,1214.76 993.649,1214.76 994.235,1214.76 994.822,1214.76 995.408,1214.76 995.994,1214.76 996.581,1214.76 997.167,1214.76 997.754,1214.76 998.34,1214.76 998.926,1214.76 999.513,1214.76 1000.1,1214.76 1000.69,1214.76 1001.27,1214.76 1001.86,1214.76 1002.44,1214.76 1003.03,1214.76 1003.62,1214.76 1004.2,1214.76 1004.79,1214.76 1005.38,1214.76 1005.96,1214.76 1006.55,1214.76 1007.14,1214.76 1007.72,1214.76 1008.31,1214.76 1008.9,1214.76 1009.48,1214.76 1010.07,1214.76 1010.65,1214.76 1011.24,1214.76 1011.83,1214.76 1012.41,1214.76 1013,1214.76 1013.59,1214.76 1014.17,1214.76 1014.76,1214.76 1015.35,1214.76 1015.93,1214.76 1016.52,1214.76 1017.11,1214.76 1017.69,1214.76 1018.28,1214.76 1018.86,1214.76 1019.45,1214.76 1020.04,1214.76 1020.62,1214.76 1021.21,1214.76 1021.8,1214.76 1022.38,1214.76 1022.97,1214.76 1023.56,1214.76 1024.14,1214.76 1024.73,1214.76 1025.32,1214.76 1025.9,1214.76 1026.49,1214.76 1027.07,1214.76 1027.66,1214.76 1028.25,1214.76 1028.83,1214.76 1029.42,1214.76 1030.01,1214.76 1030.59,1214.76 1031.18,1214.76 1031.77,1214.76 1032.35,1214.76 1032.94,1214.76 1033.52,1214.76 1034.11,1214.76 1034.7,1214.76 1035.28,1214.76 1035.87,1214.76 1036.46,1214.76 1037.04,1214.76 1037.63,1214.76 1038.22,1214.76 1038.8,1214.76 1039.39,1214.76 1039.98,1214.76 1040.56,1214.76 1041.15,1214.76 1041.73,1214.76 1042.32,1214.76 1042.91,1214.76 1043.49,1214.76 1044.08,1214.76 1044.67,1214.76 1045.25,1214.76 1045.84,1214.76 1046.43,1214.76 1047.01,1214.76 1047.6,1214.76 1048.19,1214.76 1048.77,1214.76 1049.36,1214.76 1049.94,1214.76 1050.53,1214.76 1051.12,1214.76 1051.7,1214.76 1052.29,1214.76 1052.88,1214.76 1053.46,1214.76 1054.05,1214.76 1054.64,1214.76 1055.22,1214.76 1055.81,1214.76 1056.39,1214.76 1056.98,1214.76 1057.57,1214.76 1058.15,1214.76 1058.74,1214.76 1059.33,1214.76 1059.91,1214.76 1060.5,1214.76 1061.09,1214.76 1061.67,1214.76 1062.26,1214.76 1062.85,1214.76 1063.43,1214.76 1064.02,1214.76 1064.6,1214.76 1065.19,1214.76 1065.78,1214.76 1066.36,1214.76 1066.95,1214.76 1067.54,1214.76 1068.12,1214.76 1068.71,1214.76 1069.3,1214.76 1069.88,1214.76 1070.47,1214.76 1071.06,1214.76 1071.64,1214.76 1072.23,1214.76 1072.81,1214.76 1073.4,1214.76 1073.99,1214.76 1074.57,1214.76 1075.16,1214.76 1075.75,1214.76 1076.33,1214.76 1076.92,1214.76 1077.51,1214.76 1078.09,1214.76 1078.68,1214.76 1079.26,1214.76 1079.85,1214.76 1080.44,1214.76 1081.02,1214.76 1081.61,1214.76 1082.2,1214.76 1082.78,1214.76 1083.37,1214.76 1083.96,1214.76 1084.54,1214.76 1085.13,1214.76 1085.72,1214.76 1086.3,1214.76 1086.89,1214.76 1087.47,1214.76 1088.06,1214.76 1088.65,1214.76 1089.23,1214.76 1089.82,1214.76 1090.41,1214.76 1090.99,1214.76 1091.58,1214.76 1092.17,1214.76 1092.75,1214.76 1093.34,1214.76 1093.93,1214.76 1094.51,1214.76 1095.1,1214.76 1095.68,1214.76 1096.27,1214.76 1096.86,1214.76 1097.44,1214.76 1098.03,1214.76 1098.62,1214.76 1099.2,1214.76 1099.79,1214.76 1100.38,1214.76 1100.96,1214.76 1101.55,1214.76 1102.14,1214.76 1102.72,1214.76 1103.31,1214.76 1103.89,1214.76 1104.48,1214.76 1105.07,1214.76 1105.65,1214.76 1106.24,1214.76 1106.83,1214.76 1107.41,1214.76 1108,1214.76 1108.59,1214.76 1109.17,1214.76 1109.76,1214.76 1110.34,1214.76 1110.93,1214.76 1111.52,1214.76 1112.1,1214.76 1112.69,1214.76 1113.28,1214.76 1113.86,1214.76 1114.45,1214.76 1115.04,1214.76 1115.62,1214.76 1116.21,1214.76 1116.8,1214.76 1117.38,1214.76 1117.97,1214.76 1118.55,1214.76 1119.14,1214.76 1119.73,1214.76 1120.31,1214.76 1120.9,1214.76 1121.49,1214.76 1122.07,1214.76 1122.66,1214.76 1123.25,1214.76 1123.83,1214.76 1124.42,1214.76 1125.01,1214.76 1125.59,1214.76 1126.18,1214.76 1126.76,1214.76 1127.35,1214.76 1127.94,1214.76 1128.52,1214.76 1129.11,1214.76 1129.7,1214.76 1130.28,1214.76 1130.87,1214.76 1131.46,1214.76 1132.04,1214.76 1132.63,1214.76 1133.21,1214.76 1133.8,1214.76 1134.39,1214.76 1134.97,1214.76 1135.56,1214.76 1136.15,1214.76 1136.73,1214.76 1137.32,1214.76 1137.91,1214.76 1138.49,1214.76 1139.08,1214.76 1139.67,1214.76 1140.25,1214.76 1140.84,1214.76 1141.42,1214.76 1142.01,1214.76 1142.6,1214.76 1143.18,1214.76 1143.77,1214.76 1144.36,1214.76 1144.94,1214.76 1145.53,1214.76 1146.12,1214.76 1146.7,1214.76 1147.29,1214.76 1147.88,1214.76 1148.46,1214.76 1149.05,1214.76 1149.63,1214.76 1150.22,1214.76 1150.81,1214.76 1151.39,1214.76 1151.98,1214.76 1152.57,1214.76 1153.15,1214.76 1153.74,1214.76 1154.33,1214.76 1154.91,1214.76 1155.5,1214.76 1156.09,1214.76 1156.67,1214.76 1157.26,1214.76 1157.84,1214.76 1158.43,1214.76 1159.02,1214.76 1159.6,1214.76 1160.19,1214.76 1160.78,1214.76 1161.36,1214.76 1161.95,1214.76 1162.54,1214.76 1163.12,1214.76 1163.71,1214.76 1164.29,1214.76 1164.88,1214.76 1165.47,1214.76 1166.05,1214.76 1166.64,1214.76 1167.23,1214.76 1167.81,1214.76 1168.4,1214.76 1168.99,1214.76 1169.57,1214.76 1170.16,1214.76 1170.75,1214.76 1171.33,1214.76 1171.92,1214.76 1172.5,1214.76 1173.09,1214.76 1173.68,1214.76 1174.26,1214.76 1174.85,1214.76 1175.44,1214.76 1176.02,1214.76 1176.61,1214.76 1177.2,1214.76 1177.78,1214.76 1178.37,1214.76 1178.96,1214.76 1179.54,1214.76 1180.13,1214.76 1180.71,1214.76 1181.3,1214.76 1181.89,1214.76 1182.47,1214.76 1183.06,1214.76 1183.65,1214.76 1184.23,1214.76 1184.82,1214.76 1185.41,1214.76 1185.99,1214.76 1186.58,1214.76 1187.16,1214.76 1187.75,1214.76 1188.34,1214.76 1188.92,1214.76 1189.51,1214.76 1190.1,1214.76 1190.68,1214.76 1191.27,1214.76 1191.86,1214.76 1192.44,1214.76 1193.03,1214.76 1193.62,1214.76 1194.2,1214.76 1194.79,1214.76 1195.37,1214.76 1195.96,1214.76 1196.55,1214.76 1197.13,1214.76 1197.72,1214.76 1198.31,1214.76 1198.89,1214.76 1199.48,1214.76 1200.07,1214.76 1200.65,1214.76 1201.24,1214.76 1201.83,1214.76 1202.41,1214.76 1203,1214.76 1203.58,1214.76 1204.17,1214.76 1204.76,1214.76 1205.34,1214.76 1205.93,1214.76 1206.52,1214.76 1207.1,1214.76 1207.69,1214.76 1208.28,1214.76 1208.86,1214.76 1209.45,1214.76 1210.03,1214.76 1210.62,1214.76 1211.21,1214.76 1211.79,1214.76 1212.38,1214.76 1212.97,1214.76 1213.55,1214.76 1214.14,1214.76 1214.73,1214.76 1215.31,1214.76 1215.9,1214.76 1216.49,1214.76 1217.07,1214.76 1217.66,1214.76 1218.24,1214.76 1218.83,1214.76 1219.42,1214.76 1220,1214.76 1220.59,1214.76 1221.18,1214.76 1221.76,1214.76 1222.35,1214.76 1222.94,1214.76 1223.52,1214.76 1224.11,1214.76 1224.7,1214.76 1225.28,1214.76 1225.87,1214.76 1226.45,1214.76 1227.04,1214.76 1227.63,1214.76 1228.21,1214.76 1228.8,1214.76 1229.39,1214.76 1229.97,1214.76 1230.56,1214.76 1231.15,1214.76 1231.73,1214.76 1232.32,1214.76 1232.91,1214.76 1233.49,1214.76 1234.08,1214.76 1234.66,1214.76 1235.25,1214.76 1235.84,1214.76 1236.42,1214.76 1237.01,1214.76 1237.6,1214.76 1238.18,1214.76 1238.77,1214.76 1239.36,1214.76 1239.94,1214.76 1240.53,1214.76 1241.11,1214.76 1241.7,1214.76 1242.29,1214.76 1242.87,1214.76 1243.46,1214.76 1244.05,1214.76 1244.63,1214.76 1245.22,1214.76 1245.81,1214.76 1246.39,1214.76 1246.98,1214.76 1247.57,1214.76 1248.15,1214.76 1248.74,1214.76 1249.32,1214.76 1249.91,1214.76 1250.5,1214.76 1251.08,1214.76 1251.67,1214.76 1252.26,1214.76 1252.84,1214.76 1253.43,1214.76 1254.02,1214.76 1254.6,1214.76 1255.19,1214.76 1255.78,1214.76 1256.36,1214.76 1256.95,1214.76 1257.53,1214.76 1258.12,1214.76 1258.71,1214.76 1259.29,1214.76 1259.88,1214.76 1260.47,1214.76 1261.05,1214.76 1261.64,1214.76 1262.23,1214.76 1262.81,1214.76 1263.4,1214.76 1263.98,1214.76 1264.57,1214.76 1265.16,1214.76 1265.74,1214.76 1266.33,1214.76 1266.92,1214.76 1267.5,1214.76 1268.09,1214.76 1268.68,1214.76 1269.26,1214.76 1269.85,1214.76 1270.44,1214.76 1271.02,1214.76 1271.61,1214.76 1272.19,1214.76 1272.78,1214.76 1273.37,1214.76 1273.95,1214.76 1274.54,1214.76 1275.13,1214.76 1275.71,1214.76 1276.3,1214.76 1276.89,1214.76 1277.47,1214.76 1278.06,1214.76 1278.65,1214.76 1279.23,1214.76 1279.82,1214.76 1280.4,1214.76 1280.99,1214.76 1281.58,1214.76 1282.16,1214.76 1282.75,1214.76 1283.34,1214.76 1283.92,1214.76 1284.51,1214.76 1285.1,1214.76 1285.68,1214.76 1286.27,1214.76 1286.86,1214.76 1287.44,1214.76 1288.03,1214.76 1288.61,1214.76 1289.2,1214.76 1289.79,1214.76 1290.37,1214.76 1290.96,1214.76 1291.55,1214.76 1292.13,1214.76 1292.72,1214.76 1293.31,1214.76 1293.89,1214.76 1294.48,1214.76 1295.06,1214.76 1295.65,1214.76 1296.24,1214.76 1296.82,1214.76 1297.41,1214.76 1298,1214.76 1298.58,1214.76 1299.17,1214.76 1299.76,1214.76 1300.34,1214.76 1300.93,1214.76 1301.52,1214.76 1302.1,1214.76 1302.69,1214.76 1303.27,1214.76 1303.86,1214.76 1304.45,1214.76 1305.03,1214.76 1305.62,1214.76 1306.21,1214.76 1306.79,1214.76 1307.38,1214.76 1307.97,1214.76 1308.55,1214.76 1309.14,1214.76 1309.73,1214.76 1310.31,1214.76 1310.9,1214.76 1311.48,1214.76 1312.07,1214.76 1312.66,1214.76 1313.24,1214.76 1313.83,1214.76 1314.42,1214.76 1315,1214.76 1315.59,1214.76 1316.18,1214.76 1316.76,1214.76 1317.35,1214.76 1317.93,1214.76 1318.52,1214.76 1319.11,1214.76 1319.69,1214.76 1320.28,1214.76 1320.87,1214.76 1321.45,1214.76 1322.04,1214.76 1322.63,1214.76 1323.21,1214.76 1323.8,1214.76 1324.39,1214.76 1324.97,1214.76 1325.56,1214.76 1326.14,1214.76 1326.73,1214.76 1327.32,1214.76 1327.9,1214.76 1328.49,1214.76 1329.08,1214.76 1329.66,1214.76 1330.25,1214.76 1330.84,1214.76 1331.42,1214.76 1332.01,1214.76 1332.6,1214.76 1333.18,1214.76 1333.77,1214.76 1334.35,1214.76 1334.94,1214.76 1335.53,1214.76 1336.11,1214.76 1336.7,1214.76 1337.29,1214.76 1337.87,1214.76 1338.46,1214.76 1339.05,1214.76 1339.63,1214.76 1340.22,1214.76 1340.8,1214.76 1341.39,1214.76 1341.98,1214.76 1342.56,1214.76 1343.15,1214.76 1343.74,1214.76 1344.32,1214.76 1344.91,1214.76 1345.5,1214.76 1346.08,1214.76 1346.67,1214.76 1347.26,1214.76 1347.84,1214.76 1348.43,1214.76 1349.01,1214.76 1349.6,1214.76 1350.19,1214.76 1350.77,1214.76 1351.36,1214.76 1351.95,1214.76 1352.53,1214.76 1353.12,1214.76 1353.71,1214.76 1354.29,1214.76 1354.88,1214.76 1355.47,1214.76 1356.05,1214.76 1356.64,1214.76 1357.22,1214.76 1357.81,1214.76 1358.4,1214.76 1358.98,1214.76 1359.57,1214.76 1360.16,1214.76 1360.74,1214.76 1361.33,1214.76 1361.92,1214.76 1362.5,1214.76 1363.09,1214.76 1363.68,1214.76 1364.26,1214.76 1364.85,1214.76 1365.43,1214.76 1366.02,1214.76 1366.61,1214.76 1367.19,1214.76 1367.78,1214.76 1368.37,1214.76 1368.95,1214.76 1369.54,1214.76 1370.13,1214.76 1370.71,1214.76 1371.3,1214.76 1371.88,1214.76 1372.47,1214.76 1373.06,1214.76 1373.64,1214.76 1374.23,1214.76 1374.82,1214.76 1375.4,1214.76 1375.99,1214.76 1376.58,1214.76 1377.16,1214.76 1377.75,1214.76 1378.34,1214.76 1378.92,1214.76 1379.51,1214.76 1380.09,1214.76 1380.68,1214.76 1381.27,1214.76 1381.85,1214.76 1382.44,1214.76 1383.03,1214.76 1383.61,1214.76 1384.2,1214.76 1384.79,1214.76 1385.37,1214.76 1385.96,1214.76 1386.55,1214.76 1387.13,1214.76 1387.72,1214.76 1388.3,1214.76 1388.89,1214.76 1389.48,1214.76 1390.06,1214.76 1390.65,1214.76 1391.24,1214.76 1391.82,1214.76 1392.41,1214.76 1393,1214.76 1393.58,1214.76 1394.17,1214.76 1394.75,1214.76 1395.34,1214.76 1395.93,1214.76 1396.51,1214.76 1397.1,1214.76 1397.69,1214.76 1398.27,1214.76 1398.86,1214.76 1399.45,1214.76 1400.03,1214.76 1400.62,1214.76 1401.21,1214.76 1401.79,1214.76 1402.38,1214.76 1402.96,1214.76 1403.55,1214.76 1404.14,1214.76 1404.72,1214.76 1405.31,1214.76 1405.9,1214.76 1406.48,1214.76 1407.07,1214.76 1407.66,1214.76 1408.24,1214.76 1408.83,1214.76 1409.42,1214.76 1410,1214.76 1410.59,1214.76 1411.17,1214.76 1411.76,1214.76 1412.35,1214.76 1412.93,1214.76 1413.52,1214.76 1414.11,1214.76 1414.69,1214.76 1415.28,1214.76 1415.87,1214.76 1416.45,1214.76 1417.04,1214.76 1417.63,1214.76 1418.21,1214.76 1418.8,1214.76 1419.38,1214.76 1419.97,1214.76 1420.56,1214.76 1421.14,1214.76 1421.73,1214.76 1422.32,1214.76 1422.9,1214.76 1423.49,1214.76 1424.08,1214.76 1424.66,1214.76 1425.25,1214.76 1425.83,1214.76 1426.42,1214.76 1427.01,1214.76 1427.59,1214.76 1428.18,1214.76 1428.77,1214.76 1429.35,1214.76 1429.94,1214.76 1430.53,1214.76 1431.11,1214.76 1431.7,1214.76 1432.29,1214.76 1432.87,1214.76 1433.46,1214.76 1434.04,1214.76 1434.63,1214.76 1435.22,1214.76 1435.8,1214.76 1436.39,1214.76 1436.98,1214.76 1437.56,1214.76 1438.15,1214.76 1438.74,1214.76 1439.32,1214.76 1439.91,1214.76 1440.5,1214.76 1441.08,1214.76 1441.67,1214.76 1442.25,1214.76 1442.84,1214.76 1443.43,1214.76 1444.01,1214.76 1444.6,1214.76 1445.19,1214.76 1445.77,1214.76 1446.36,1214.76 1446.95,1214.76 1447.53,1214.76 1448.12,1214.76 1448.7,1214.76 1449.29,1214.76 1449.88,1214.76 1450.46,1214.76 1451.05,1214.76 1451.64,1214.76 1452.22,1214.76 1452.81,1214.76 1453.4,1214.76 1453.98,1214.76 1454.57,1214.76 1455.16,1214.76 1455.74,1214.76 1456.33,1214.76 1456.91,1214.76 1457.5,1214.76 1458.09,1214.76 1458.67,1214.76 1459.26,1214.76 1459.85,1214.76 1460.43,1214.76 1461.02,1214.76 1461.61,1214.76 1462.19,1214.76 1462.78,1214.76 1463.37,1214.76 1463.95,1214.76 1464.54,1214.76 1465.12,1214.76 1465.71,1214.76 1466.3,1214.76 1466.88,1214.76 1467.47,1214.76 1468.06,1214.76 1468.64,1214.76 1469.23,1214.76 1469.82,1214.76 1470.4,1214.76 1470.99,1214.76 1471.57,1214.76 1472.16,1214.76 1472.75,1214.76 1473.33,1214.76 1473.92,1214.76 1474.51,1214.76 1475.09,1214.76 1475.68,1214.76 1476.27,1214.76 1476.85,1214.76 1477.44,1214.76 1478.03,1214.76 1478.61,1214.76 1479.2,1214.76 1479.78,1214.76 1480.37,1214.76 1480.96,1214.76 1481.54,1214.76 1482.13,1214.76 1482.72,1214.76 1483.3,1214.76 1483.89,1214.76 1484.48,1214.76 1485.06,1214.76 1485.65,1214.76 1486.24,1214.76 1486.82,1214.76 1487.41,1214.76 1487.99,1214.76 1488.58,1214.76 1489.17,1214.76 1489.75,1214.76 1490.34,1214.76 1490.93,1214.76 1491.51,1214.76 1492.1,1214.76 1492.69,1214.76 1493.27,1214.76 1493.86,1214.76 1494.45,1214.76 1495.03,1214.76 1495.62,1214.76 1496.2,1214.76 1496.79,1214.76 1497.38,1214.76 1497.96,1214.76 1498.55,1214.76 1499.14,1214.76 1499.72,1214.76 1500.31,1214.76 1500.9,1214.76 1501.48,1214.76 1502.07,1214.76 1502.65,1214.76 1503.24,1214.76 1503.83,1214.76 1504.41,1214.76 1505,1214.76 1505.59,1214.76 1506.17,1214.76 1506.76,1214.76 1507.35,1214.76 1507.93,1214.76 1508.52,1214.76 1509.11,1214.76 1509.69,1214.76 1510.28,1214.76 1510.86,1214.76 1511.45,1214.76 1512.04,1214.76 1512.62,1214.76 1513.21,1214.76 1513.8,1214.76 1514.38,1214.76 1514.97,1214.76 1515.56,1214.76 1516.14,1214.76 1516.73,1214.76 1517.32,1214.76 1517.9,1214.76 1518.49,1214.76 1519.07,1214.76 1519.66,1214.76 1520.25,1214.76 1520.83,1214.76 1521.42,1214.76 1522.01,1214.76 1522.59,1214.76 1523.18,1214.76 1523.77,1214.76 1524.35,1214.76 1524.94,1214.76 1525.52,1214.76 1526.11,1214.76 1526.7,1214.76 1527.28,1214.76 1527.87,1214.76 1528.46,1214.76 1529.04,1214.76 1529.63,1214.76 1530.22,1214.76 1530.8,1214.76 1531.39,1214.76 1531.98,1214.76 1532.56,1214.76 1533.15,1214.76 1533.73,1214.76 1534.32,1214.76 1534.91,1214.76 1535.49,1214.76 1536.08,1214.76 1536.67,1214.76 1537.25,1214.76 1537.84,1214.76 1538.43,1214.76 1539.01,1214.76 1539.6,1214.76 1540.19,1214.76 1540.77,1214.76 1541.36,1214.76 1541.94,1214.76 1542.53,1214.76 1543.12,1214.76 1543.7,1214.76 1544.29,1214.76 1544.88,1214.76 1545.46,1214.76 1546.05,1214.76 1546.64,1214.76 1547.22,1214.76 1547.81,1214.76 1548.4,1214.76 1548.98,1214.76 1549.57,1214.76 1550.15,1214.76 1550.74,1214.76 1551.33,1214.76 1551.91,1214.76 1552.5,1214.76 1553.09,1214.76 1553.67,1214.76 1554.26,1214.76 1554.85,1214.76 1555.43,1214.76 1556.02,1214.76 1556.6,1214.76 1557.19,1214.76 1557.78,1214.76 1558.36,1214.76 1558.95,1214.76 1559.54,1214.76 1560.12,1214.76 1560.71,1214.76 1561.3,1214.76 1561.88,1214.76 1562.47,1214.76 1563.06,1214.76 1563.64,1214.76 1564.23,1214.76 1564.81,1214.76 1565.4,1214.76 1565.99,1214.76 1566.57,1214.76 1567.16,1214.76 1567.75,1214.76 1568.33,1214.76 1568.92,1214.76 1569.51,1214.76 1570.09,1214.76 1570.68,1214.76 1571.27,1214.76 1571.85,1214.76 1572.44,1214.76 1573.02,1214.76 1573.61,1214.76 1574.2,1214.76 1574.78,1214.76 1575.37,1214.76 1575.96,1214.76 1576.54,1214.76 1577.13,1214.76 1577.72,1214.76 1578.3,1214.76 1578.89,1214.76 1579.47,1214.76 1580.06,1214.76 1580.65,1214.76 1581.23,1214.76 1581.82,1214.76 1582.41,1214.76 1582.99,1214.76 1583.58,1214.76 1584.17,1214.76 1584.75,1214.76 1585.34,1214.76 1585.93,1214.76 1586.51,1214.76 1587.1,1214.76 1587.68,1214.76 1588.27,1214.76 1588.86,1214.76 1589.44,1214.76 1590.03,1214.76 1590.62,1214.76 1591.2,1214.76 1591.79,1214.76 1592.38,1214.76 1592.96,1214.76 1593.55,1214.76 1594.14,1214.76 1594.72,1214.76 1595.31,1214.76 1595.89,1214.76 1596.48,1214.76 1597.07,1214.76 1597.65,1214.76 1598.24,1214.76 1598.83,1214.76 1599.41,1214.76 1600,1214.76 1600.59,1214.76 1601.17,1214.76 1601.76,1214.76 1602.34,1214.76 1602.93,1214.76 1603.52,1214.76 1604.1,1214.76 1604.69,1214.76 1605.28,1214.76 1605.86,1214.76 1606.45,1214.76 1607.04,1214.76 1607.62,1214.76 1608.21,1214.76 1608.8,1214.76 1609.38,1214.76 1609.97,1214.76 1610.55,1214.76 1611.14,1214.76 1611.73,1214.76 1612.31,1214.76 1612.9,1214.76 1613.49,1214.76 1614.07,1214.76 1614.66,1214.76 1615.25,1214.76 1615.83,1214.76 1616.42,1214.76 1617.01,1214.76 1617.59,1214.76 1618.18,1214.76 1618.76,1214.76 1619.35,1214.76 1619.94,1214.76 1620.52,1214.76 1621.11,1214.76 1621.7,1214.76 1622.28,1214.76 1622.87,1214.76 1623.46,1214.76 1624.04,1214.76 1624.63,1214.76 1625.22,1214.76 1625.8,1214.76 1626.39,1214.76 1626.97,1214.76 1627.56,1214.76 1628.15,1214.76 1628.73,1214.76 1629.32,1214.76 1629.91,1214.76 1630.49,1214.76 1631.08,1214.76 1631.67,1214.76 1632.25,1214.76 1632.84,1214.76 1633.42,1214.76 1634.01,1214.76 1634.6,1214.76 1635.18,1214.76 1635.77,1214.76 1636.36,1214.76 1636.94,1214.76 1637.53,1214.76 1638.12,1214.76 1638.7,1214.76 1639.29,1214.76 1639.88,1214.76 1640.46,1214.76 1641.05,1214.76 1641.63,1214.76 1642.22,1214.76 1642.81,1214.76 1643.39,1214.76 1643.98,1214.76 1644.57,1214.76 1645.15,1214.76 1645.74,1214.76 1646.33,1214.76 1646.91,1214.76 1647.5,1214.76 1648.09,1214.76 1648.67,1214.76 1649.26,1214.76 1649.84,1214.76 1650.43,1214.76 1651.02,1214.76 1651.6,1214.76 1652.19,1214.76 1652.78,1214.76 1653.36,1214.76 1653.95,1214.76 1654.54,1214.76 1655.12,1214.76 1655.71,1214.76 1656.29,1214.76 1656.88,1214.76 1657.47,1214.76 1658.05,1214.76 1658.64,1214.76 1659.23,1214.76 1659.81,1214.76 1660.4,1214.76 1660.99,1214.76 1661.57,1214.76 1662.16,1214.76 1662.75,1214.76 1663.33,1214.76 1663.92,1214.76 1664.5,1214.76 1665.09,1214.76 1665.68,1214.76 1666.26,1214.76 1666.85,1214.76 1667.44,1214.76 1668.02,1214.76 1668.61,1214.76 1669.2,1214.76 1669.78,1214.76 1670.37,1214.76 1670.96,1214.76 1671.54,1214.76 1672.13,1214.76 1672.71,1214.76 1673.3,1214.76 1673.89,1214.76 1674.47,1214.76 1675.06,1214.76 1675.65,1214.76 1676.23,1214.76 1676.82,1214.76 1677.41,1214.76 1677.99,1214.76 1678.58,1214.76 1679.17,1214.76 1679.75,1214.76 1680.34,1214.76 1680.92,1214.76 1681.51,1214.76 1682.1,1214.76 1682.68,1214.76 1683.27,1214.76 1683.86,1214.76 1684.44,1214.76 1685.03,1214.76 1685.62,1214.76 1686.2,1214.76 1686.79,1214.76 1687.37,1214.76 1687.96,1214.76 1688.55,1214.76 1689.13,1214.76 1689.72,1214.76 1690.31,1214.76 1690.89,1214.76 1691.48,1214.76 1692.07,1214.76 1692.65,1214.76 1693.24,1214.76 1693.83,1214.76 1694.41,1214.76 1695,1214.76 1695.58,1214.76 1696.17,1214.76 1696.76,1214.76 1697.34,1214.76 1697.93,1214.76 1698.52,1214.76 1699.1,1214.76 1699.69,1214.76 1700.28,1214.76 1700.86,1214.76 1701.45,1214.76 1702.04,1214.76 1702.62,1214.76 1703.21,1214.76 1703.79,1214.76 1704.38,1214.76 1704.97,1214.76 1705.55,1214.76 1706.14,1214.76 1706.73,1214.76 1707.31,1214.76 1707.9,1214.76 1708.49,1214.76 1709.07,1214.76 1709.66,1214.76 1710.24,1214.76 1710.83,1214.76 1711.42,1214.76 1712,1214.76 1712.59,1214.76 1713.18,1214.76 1713.76,1214.76 1714.35,1214.76 1714.94,1214.76 1715.52,1214.76 1716.11,1214.76 1716.7,1214.76 1717.28,1214.76 1717.87,1214.76 1718.45,1214.76 1719.04,1214.76 1719.63,1214.76 1720.21,1214.76 1720.8,1214.76 1721.39,1214.76 1721.97,1214.76 1722.56,1214.76 1723.15,1214.76 1723.73,1214.76 1724.32,1214.76 1724.91,1214.76 1725.49,1214.76 1726.08,1214.76 1726.66,1214.76 1727.25,1214.76 1727.84,1214.76 1728.42,1214.76 1729.01,1214.76 1729.6,1214.76 1730.18,1214.76 1730.77,1214.76 1731.36,1214.76 1731.94,1214.76 1732.53,1214.76 1733.11,1214.76 1733.7,1214.76 1734.29,1214.76 1734.87,1214.76 1735.46,1214.76 1736.05,1214.76 1736.63,1214.76 1737.22,1214.76 1737.81,1214.76 1738.39,1214.76 1738.98,1214.76 1739.57,1214.76 1740.15,1214.76 1740.74,1214.76 1741.32,1214.76 1741.91,1214.76 1742.5,1214.76 1743.08,1214.76 1743.67,1214.76 1744.26,1214.76 1744.84,1214.76 1745.43,1214.76 1746.02,1214.76 1746.6,1214.76 1747.19,1214.76 1747.78,1214.76 1748.36,1214.76 1748.95,1214.76 1749.53,1214.76 1750.12,1214.76 1750.71,1214.76 1751.29,1214.76 1751.88,1214.76 1752.47,1214.76 1753.05,1214.76 1753.64,1214.76 1754.23,1214.76 1754.81,1214.76 1755.4,1214.76 1755.99,1214.76 1756.57,1214.76 1757.16,1214.76 1757.74,1214.76 1758.33,1214.76 1758.92,1214.76 1759.5,1214.76 1760.09,1214.76 1760.68,1214.76 1761.26,1214.76 1761.85,1214.76 1762.44,1214.76 1763.02,1214.76 1763.61,1214.76 1764.19,1214.76 1764.78,1214.76 1765.37,1214.76 1765.95,1214.76 1766.54,1214.76 1767.13,1214.76 1767.71,1214.76 1768.3,1214.76 1768.89,1214.76 1769.47,1214.76 1770.06,1214.76 1770.65,1214.76 1771.23,1214.76 1771.82,1214.76 1772.4,1214.76 1772.99,1214.76 1773.58,1214.76 1774.16,1214.76 1774.75,1214.76 1775.34,1214.76 1775.92,1214.76 1776.51,1214.76 1777.1,1214.76 1777.68,1214.76 1778.27,1214.76 1778.86,1214.76 1779.44,1214.76 1780.03,1214.76 1780.61,1214.76 1781.2,1214.76 1781.79,1214.76 1782.37,1214.76 1782.96,1214.76 1783.55,1214.76 1784.13,1214.76 1784.72,1214.76 1785.31,1214.76 1785.89,1214.76 1786.48,1214.76 1787.06,1214.76 1787.65,1214.76 1788.24,1214.76 1788.82,1214.76 1789.41,1214.76 1790,1214.76 1790.58,1214.76 1791.17,1214.76 1791.76,1214.76 1792.34,1214.76 1792.93,1214.76 1793.52,1214.76 1794.1,1214.76 1794.69,1214.76 1795.27,1214.76 1795.86,1214.76 1796.45,1214.76 1797.03,1214.76 1797.62,1214.76 1798.21,1214.76 1798.79,1214.76 1799.38,1214.76 1799.97,1214.76 1800.55,1214.76 1801.14,1214.76 1801.73,1214.76 1802.31,1214.76 1802.9,1214.76 1803.48,1214.76 1804.07,1214.76 1804.66,1214.76 1805.24,1214.76 1805.83,1214.76 1806.42,1214.76 1807,1214.76 1807.59,1214.76 1808.18,1214.76 1808.76,1214.76 1809.35,1214.76 1809.94,1214.76 1810.52,1214.76 1811.11,1214.76 1811.69,1214.76 1812.28,1214.76 1812.87,1214.76 1813.45,1214.76 1814.04,1214.76 1814.63,1214.76 1815.21,1214.76 1815.8,1214.76 1816.39,1214.76 1816.97,1214.76 1817.56,1214.76 1818.14,1214.76 1818.73,1214.76 1819.32,1214.76 1819.9,1214.76 1820.49,1214.76 1821.08,1214.76 1821.66,1214.76 1822.25,1214.76 1822.84,1214.76 1823.42,1214.76 1824.01,1214.76 1824.6,1214.76 1825.18,1214.76 1825.77,1214.76 1826.35,1214.76 1826.94,1214.76 1827.53,1214.76 1828.11,1214.76 1828.7,1214.76 1829.29,1214.76 1829.87,1214.76 1830.46,1214.76 1831.05,1214.76 1831.63,1214.76 1832.22,1214.76 1832.81,1214.76 1833.39,1214.76 1833.98,1214.76 1834.56,1214.76 1835.15,1214.76 1835.74,1214.76 1836.32,1214.76 1836.91,1214.76 1837.5,1214.76 1838.08,1214.76 1838.67,1214.76 1839.26,1214.76 1839.84,1214.76 1840.43,1214.76 1841.01,1214.76 1841.6,1214.76 1842.19,1214.76 1842.77,1214.76 1843.36,1214.76 1843.95,1214.76 1844.53,1214.76 1845.12,1214.76 1845.71,1214.76 1846.29,1214.76 1846.88,1214.76 1847.47,1214.76 1848.05,1214.76 1848.64,1214.76 1849.22,1214.76 1849.81,1214.76 1850.4,1214.76 1850.98,1214.76 1851.57,1214.76 1852.16,1214.76 1852.74,1214.76 1853.33,1214.76 1853.92,1214.76 1854.5,1214.76 1855.09,1214.76 1855.68,1214.76 1856.26,1214.76 1856.85,1214.76 1857.43,1214.76 1858.02,1214.76 1858.61,1214.76 1859.19,1214.76 1859.78,1214.76 1860.37,1214.76 1860.95,1214.76 1861.54,1214.76 1862.13,1214.76 1862.71,1214.76 1863.3,1214.76 1863.88,1214.76 1864.47,1214.76 1865.06,1214.76 1865.64,1214.76 1866.23,1214.76 1866.82,1214.76 1867.4,1214.76 1867.99,1214.76 1868.58,1214.76 1869.16,1214.76 1869.75,1214.76 1870.34,1214.76 1870.92,1214.76 1871.51,1214.76 1872.09,1214.76 1872.68,1214.76 1873.27,1214.76 1873.85,1214.76 1874.44,1214.76 1875.03,1214.76 1875.61,1214.76 1876.2,1214.76 1876.79,1214.76 1877.37,1214.76 1877.96,1214.76 1878.55,1214.76 1879.13,1214.76 1879.72,1214.76 1880.3,1214.76 1880.89,1214.76 1881.48,1214.76 1882.06,1214.76 1882.65,1214.76 1883.24,1214.76 1883.82,1214.76 1884.41,1214.76 1885,1214.76 1885.58,1214.76 1886.17,1214.76 1886.76,1214.76 1887.34,1214.76 1887.93,1214.76 1888.51,1214.76 1889.1,1214.76 1889.69,1214.76 1890.27,1214.76 1890.86,1214.76 1891.45,1214.76 1892.03,1214.76 1892.62,1214.76 1893.21,1214.76 1893.79,1214.76 1894.38,1214.76 1894.96,1214.76 1895.55,1214.76 1896.14,1214.76 1896.72,1214.76 1897.31,1214.76 1897.9,1214.76 1898.48,1214.76 1899.07,1214.76 1899.66,1214.76 1900.24,1214.76 1900.83,1214.76 1901.42,1214.76 1902,1214.76 1902.59,1214.76 1903.17,1214.76 1903.76,1214.76 1904.35,1214.76 1904.93,1214.76 1905.52,1214.76 1906.11,1214.76 1906.69,1214.76 1907.28,1214.76 1907.87,1214.76 1908.45,1214.76 1909.04,1214.76 1909.63,1214.76 1910.21,1214.76 1910.8,1214.76 1911.38,1214.76 1911.97,1214.76 1912.56,1214.76 1913.14,1214.76 1913.73,1214.76 1914.32,1214.76 1914.9,1214.76 1915.49,1214.76 1916.08,1214.76 1916.66,1214.76 1917.25,1214.76 1917.83,1214.76 1918.42,1214.76 1919.01,1214.76 1919.59,1214.76 1920.18,1214.76 1920.77,1214.76 1921.35,1214.76 1921.94,1214.76 1922.53,1214.76 1923.11,1214.76 1923.7,1214.76 1924.29,1214.76 1924.87,1214.76 1925.46,1214.76 1926.04,1214.76 1926.63,1214.76 1927.22,1214.76 1927.8,1214.76 1928.39,1214.76 1928.98,1214.76 1929.56,1214.76 1930.15,1214.76 1930.74,1214.76 1931.32,1214.76 1931.91,1214.76 1932.5,1214.76 1933.08,1214.76 1933.67,1214.76 1934.25,1214.76 1934.84,1214.76 1935.43,1214.76 1936.01,1214.76 1936.6,1214.76 1937.19,1214.76 1937.77,1214.76 1938.36,1214.76 1938.95,1214.76 1939.53,1214.76 1940.12,1214.76 1940.71,1214.76 1941.29,1214.76 1941.88,1214.76 1942.46,1214.76 1943.05,1214.76 1943.64,1214.76 1944.22,1214.76 1944.81,1214.76 1945.4,1214.76 1945.98,1214.76 1946.57,1214.76 1947.16,1214.76 1947.74,1214.76 1948.33,1214.76 1948.91,1214.76 1949.5,1214.76 1950.09,1214.76 1950.67,1214.76 1951.26,1214.76 1951.85,1214.76 1952.43,1214.76 1953.02,1214.76 1953.61,1214.76 1954.19,1214.76 1954.78,1214.76 1955.37,1214.76 1955.95,1214.76 1956.54,1214.76 1957.12,1214.76 1957.71,1214.76 1958.3,1214.76 1958.88,1214.76 1959.47,1214.76 1960.06,1214.76 1960.64,1214.76 1961.23,1214.76 1961.82,1214.76 1962.4,1214.76 1962.99,1214.76 1963.58,1214.76 1964.16,1214.76 1964.75,1214.76 1965.33,1214.76 1965.92,1214.76 1966.51,1214.76 1967.09,1214.76 1967.68,1214.76 1968.27,1214.76 1968.85,1214.76 1969.44,1214.76 1970.03,1214.76 1970.61,1214.76 1971.2,1214.76 1971.78,1214.76 1972.37,1214.76 1972.96,1214.76 1973.54,1214.76 1974.13,1214.76 1974.72,1214.76 1975.3,1214.76 1975.89,1214.76 1976.48,1214.76 1977.06,1214.76 1977.65,1214.76 1978.24,1214.76 1978.82,1214.76 1979.41,1214.76 1979.99,1214.76 1980.58,1214.76 1981.17,1214.76 1981.75,1214.76 1982.34,1214.76 1982.93,1214.76 1983.51,1214.76 1984.1,1214.76 1984.69,1214.76 1985.27,1214.76 1985.86,1214.76 1986.45,1214.76 1987.03,1214.76 1987.62,1214.76 1988.2,1214.76 1988.79,1214.76 1989.38,1214.76 1989.96,1214.76 1990.55,1214.76 1991.14,1214.76 1991.72,1214.76 1992.31,1214.76 1992.9,1214.76 1993.48,1214.76 1994.07,1214.76 1994.65,1214.76 1995.24,1214.76 1995.83,1214.76 1996.41,1214.76 1997,1214.76 1997.59,1214.76 1998.17,1214.76 1998.76,1214.76 1999.35,1214.76 1999.93,1214.76 2000.52,1214.76 2001.11,1214.76 2001.69,1214.76 2002.28,1214.76 2002.86,1214.76 2003.45,1214.76 2004.04,1214.76 2004.62,1214.76 2005.21,1214.76 2005.8,1214.76 2006.38,1214.76 2006.97,1214.76 2007.56,1214.76 2008.14,1214.76 2008.73,1214.76 2009.32,1214.76 2009.9,1214.76 2010.49,1214.76 2011.07,1214.76 2011.66,1214.76 2012.25,1214.76 2012.83,1214.76 2013.42,1214.76 2014.01,1214.76 2014.59,1214.76 2015.18,1214.76 2015.77,1214.76 2016.35,1214.76 2016.94,1214.76 2017.53,1214.76 2018.11,1214.76 2018.7,1214.76 2019.28,1214.76 2019.87,1214.76 2020.46,1214.76 2021.04,1214.76 2021.63,1214.76 2022.22,1214.76 2022.8,1214.76 2023.39,1214.76 2023.98,1214.76 2024.56,1214.76 2025.15,1214.76 2025.73,1214.76 2026.32,1214.76 2026.91,1214.76 2027.49,1214.76 2028.08,1214.76 2028.67,1214.76 2029.25,1214.76 2029.84,1214.76 2030.43,1214.76 2031.01,1214.76 2031.6,1214.76 2032.19,1214.76 2032.77,1214.76 2033.36,1214.76 2033.94,1214.76 2034.53,1214.76 2035.12,1214.76 2035.7,1214.76 2036.29,1214.76 2036.88,1214.76 2037.46,1214.76 2038.05,1214.76 2038.64,1214.76 2039.22,1214.76 2039.81,1214.76 2040.4,1214.76 2040.98,1214.76 2041.57,1214.76 2042.15,1214.76 2042.74,1214.76 2043.33,1214.76 2043.91,1214.76 2044.5,1214.76 2045.09,1214.76 2045.67,1214.76 2046.26,1214.76 2046.85,1214.76 2047.43,1214.76 2048.02,1214.76 2048.6,1214.76 2049.19,1214.76 2049.78,1214.76 2050.36,1214.76 2050.95,1214.76 2051.54,1214.76 2052.12,1214.76 2052.71,1214.76 2053.3,1214.76 2053.88,1214.76 2054.47,1214.76 2055.06,1214.76 2055.64,1214.76 2056.23,1214.76 2056.81,1214.76 2057.4,1214.76 2057.99,1214.76 2058.57,1214.76 2059.16,1214.76 2059.75,1214.76 2060.33,1214.76 2060.92,1214.76 2061.51,1214.76 2062.09,1214.76 2062.68,1214.76 2063.27,1214.76 2063.85,1214.76 2064.44,1214.76 2065.02,1214.76 2065.61,1214.76 2066.2,1214.76 2066.78,1214.76 2067.37,1214.76 2067.96,1214.76 2068.54,1214.76 2069.13,1214.76 2069.72,1214.76 2070.3,1214.76 2070.89,1214.76 2071.48,1214.76 2072.06,1214.76 2072.65,1214.76 2073.23,1214.76 2073.82,1214.76 2074.41,1214.76 2074.99,1214.76 2075.58,1214.76 2076.17,1214.76 2076.75,1214.76 2077.34,1214.76 2077.93,1214.76 2078.51,1214.76 2079.1,1214.76 2079.68,1214.76 2080.27,1214.76 2080.86,1214.76 2081.44,1214.76 2082.03,1214.76 2082.62,1214.76 2083.2,1214.76 2083.79,1214.76 2084.38,1214.76 2084.96,1214.76 2085.55,1214.76 2086.14,1214.76 2086.72,1214.76 2087.31,1214.76 2087.89,1214.76 2088.48,1214.76 2089.07,1214.76 2089.65,1214.76 2090.24,1214.76 2090.83,1214.76 2091.41,1214.76 2092,1214.76 2092.59,1214.76 2093.17,1214.76 2093.76,1214.76 2094.35,1214.76 2094.93,1214.76 2095.52,1214.76 2096.1,1214.76 2096.69,1214.76 2097.28,1214.76 2097.86,1214.76 2098.45,1214.76 2099.04,1214.76 2099.62,1214.76 2100.21,1214.76 2100.8,1214.76 2101.38,1214.76 2101.97,1214.76 2102.55,1214.76 2103.14,1214.76 2103.73,1214.76 2104.31,1214.76 2104.9,1214.76 2105.49,1214.76 2106.07,1214.76 2106.66,1214.76 2107.25,1214.76 2107.83,1214.76 2108.42,1214.76 2109.01,1214.76 2109.59,1214.76 2110.18,1214.76 2110.76,1214.76 2111.35,1214.76 2111.94,1214.76 2112.52,1214.76 2113.11,1214.76 2113.7,1214.76 2114.28,1214.76 2114.87,1214.76 2115.46,1214.76 2116.04,1214.76 2116.63,1214.76 2117.22,1214.76 2117.8,1214.76 2118.39,1214.76 2118.97,1214.76 2119.56,1214.76 2120.15,1214.76 2120.73,1214.76 2121.32,1214.76 2121.91,1214.76 2122.49,1214.76 2123.08,1214.76 2123.67,1214.76 2124.25,1214.76 2124.84,1214.76 2125.42,1214.76 2126.01,1214.76 2126.6,1214.76 2127.18,1214.76 2127.77,1214.76 2128.36,1214.76 2128.94,1214.76 2129.53,1214.76 2130.12,1214.76 2130.7,1214.76 2131.29,1214.76 2131.88,1214.76 2132.46,1214.76 2133.05,1214.76 2133.63,1214.76 2134.22,1214.76 2134.81,1214.76 2135.39,1214.76 2135.98,1214.76 2136.57,1214.76 2137.15,1214.76 2137.74,1214.76 2138.33,1214.76 2138.91,1214.76 2139.5,1214.76 2140.09,1214.76 2140.67,1214.76 2141.26,1214.76 2141.84,1214.76 2142.43,1214.76 2143.02,1214.76 2143.6,1214.76 2144.19,1214.76 2144.78,1214.76 2145.36,1214.76 2145.95,1214.76 2146.54,1214.76 2147.12,1214.76 2147.71,1214.76 2148.3,1214.76 2148.88,1214.76 2149.47,1214.76 2150.05,1214.76 2150.64,1214.76 2151.23,1214.76 2151.81,1214.76 2152.4,1214.76 2152.99,1214.76 2153.57,1214.76 2154.16,1214.76 2154.75,1214.76 2155.33,1214.76 2155.92,1214.76 2156.5,1214.76 2157.09,1214.76 2157.68,1214.76 2158.26,1214.76 \"/>\n<path clip-path=\"url(#clip262)\" d=\"M986.025 1214.71 L986.612 1214.71 L987.198 1214.71 L987.785 1214.71 L988.371 1214.71 L988.957 1214.71 L989.544 1214.71 L990.13 1214.71 L990.717 1214.71 L991.303 1214.71 L991.889 1214.71 L992.476 1214.71 L993.062 1214.71 L993.649 1214.71 L994.235 1214.71 L994.822 1214.71 L995.408 1214.71 L995.994 1214.71 L996.581 1214.71 L997.167 1214.71 L997.754 1214.71 L998.34 1214.71 L998.926 1214.71 L999.513 1214.71 L1000.1 1214.71 L1000.69 1214.71 L1001.27 1214.71 L1001.86 1214.71 L1002.44 1214.71 L1003.03 1214.71 L1003.62 1214.71 L1004.2 1214.71 L1004.79 1214.71 L1005.38 1214.71 L1005.96 1214.71 L1006.55 1214.71 L1007.14 1214.71 L1007.72 1214.71 L1008.31 1214.71 L1008.9 1214.71 L1009.48 1214.71 L1010.07 1214.71 L1010.65 1214.71 L1011.24 1214.71 L1011.83 1214.71 L1012.41 1214.71 L1013 1214.71 L1013.59 1214.71 L1014.17 1214.71 L1014.76 1214.71 L1015.35 1214.71 L1015.93 1214.71 L1016.52 1214.71 L1017.11 1214.71 L1017.69 1214.71 L1018.28 1214.71 L1018.86 1214.71 L1019.45 1214.71 L1020.04 1214.71 L1020.62 1214.71 L1021.21 1214.71 L1021.8 1214.71 L1022.38 1214.71 L1022.97 1214.71 L1023.56 1214.71 L1024.14 1214.71 L1024.73 1214.71 L1025.32 1214.71 L1025.9 1214.71 L1026.49 1214.71 L1027.07 1214.71 L1027.66 1214.71 L1028.25 1214.71 L1028.83 1214.71 L1029.42 1214.71 L1030.01 1214.71 L1030.59 1214.71 L1031.18 1214.71 L1031.77 1214.71 L1032.35 1214.71 L1032.94 1214.71 L1033.52 1214.71 L1034.11 1214.71 L1034.7 1214.71 L1035.28 1214.71 L1035.87 1214.71 L1036.46 1214.71 L1037.04 1214.71 L1037.63 1214.71 L1038.22 1214.71 L1038.8 1214.71 L1039.39 1214.71 L1039.98 1214.71 L1040.56 1214.71 L1041.15 1214.71 L1041.73 1214.71 L1042.32 1214.71 L1042.91 1214.71 L1043.49 1214.71 L1044.08 1214.71 L1044.67 1214.71 L1045.25 1214.71 L1045.84 1214.71 L1046.43 1214.71 L1047.01 1214.71 L1047.6 1214.71 L1048.19 1214.71 L1048.77 1214.71 L1049.36 1214.71 L1049.94 1214.71 L1050.53 1214.71 L1051.12 1214.71 L1051.7 1214.71 L1052.29 1214.71 L1052.88 1214.71 L1053.46 1214.71 L1054.05 1214.71 L1054.64 1214.71 L1055.22 1214.71 L1055.81 1214.71 L1056.39 1214.71 L1056.98 1214.71 L1057.57 1214.71 L1058.15 1214.71 L1058.74 1214.71 L1059.33 1214.71 L1059.91 1214.71 L1060.5 1214.71 L1061.09 1214.71 L1061.67 1214.71 L1062.26 1214.71 L1062.85 1214.71 L1063.43 1214.71 L1064.02 1214.71 L1064.6 1214.71 L1065.19 1214.71 L1065.78 1214.71 L1066.36 1214.71 L1066.95 1214.71 L1067.54 1214.71 L1068.12 1214.71 L1068.71 1214.71 L1069.3 1214.71 L1069.88 1214.71 L1070.47 1214.71 L1071.06 1214.71 L1071.64 1214.71 L1072.23 1214.71 L1072.81 1214.71 L1073.4 1214.71 L1073.99 1214.71 L1074.57 1214.71 L1075.16 1214.71 L1075.75 1214.71 L1076.33 1214.71 L1076.92 1214.71 L1077.51 1214.71 L1078.09 1214.71 L1078.68 1214.71 L1079.26 1214.71 L1079.85 1214.71 L1080.44 1214.71 L1081.02 1214.71 L1081.61 1214.71 L1082.2 1214.71 L1082.78 1214.71 L1083.37 1214.71 L1083.96 1214.71 L1084.54 1214.71 L1085.13 1214.71 L1085.72 1214.71 L1086.3 1214.71 L1086.89 1214.71 L1087.47 1214.71 L1088.06 1214.71 L1088.65 1214.71 L1089.23 1214.71 L1089.82 1214.71 L1090.41 1214.71 L1090.99 1214.71 L1091.58 1214.71 L1092.17 1214.71 L1092.75 1214.71 L1093.34 1214.71 L1093.93 1214.71 L1094.51 1214.71 L1095.1 1214.71 L1095.68 1214.71 L1096.27 1214.71 L1096.86 1214.71 L1097.44 1214.71 L1098.03 1214.71 L1098.62 1214.71 L1099.2 1214.71 L1099.79 1214.71 L1100.38 1214.71 L1100.96 1214.71 L1101.55 1214.71 L1102.14 1214.71 L1102.72 1214.71 L1103.31 1214.71 L1103.89 1214.71 L1104.48 1214.71 L1105.07 1214.71 L1105.65 1214.71 L1106.24 1214.71 L1106.83 1214.71 L1107.41 1214.71 L1108 1214.71 L1108.59 1214.71 L1109.17 1214.71 L1109.76 1214.71 L1110.34 1214.71 L1110.93 1214.71 L1111.52 1214.71 L1112.1 1214.71 L1112.69 1214.71 L1113.28 1214.71 L1113.86 1214.71 L1114.45 1214.71 L1115.04 1214.71 L1115.62 1214.71 L1116.21 1214.71 L1116.8 1214.71 L1117.38 1214.71 L1117.97 1214.71 L1118.55 1214.71 L1119.14 1214.71 L1119.73 1214.71 L1120.31 1214.71 L1120.9 1214.71 L1121.49 1214.71 L1122.07 1214.71 L1122.66 1214.71 L1123.25 1214.71 L1123.83 1214.71 L1124.42 1214.71 L1125.01 1214.71 L1125.59 1214.71 L1126.18 1214.71 L1126.76 1214.71 L1127.35 1214.71 L1127.94 1214.71 L1128.52 1214.71 L1129.11 1214.71 L1129.7 1214.71 L1130.28 1214.71 L1130.87 1214.71 L1131.46 1214.71 L1132.04 1214.71 L1132.63 1214.71 L1133.21 1214.71 L1133.8 1214.71 L1134.39 1214.71 L1134.97 1214.71 L1135.56 1214.71 L1136.15 1214.71 L1136.73 1214.71 L1137.32 1214.71 L1137.91 1214.71 L1138.49 1214.71 L1139.08 1214.71 L1139.67 1214.71 L1140.25 1214.71 L1140.84 1214.71 L1141.42 1214.71 L1142.01 1214.71 L1142.6 1214.71 L1143.18 1214.71 L1143.77 1214.71 L1144.36 1214.71 L1144.94 1214.71 L1145.53 1214.71 L1146.12 1214.71 L1146.7 1214.71 L1147.29 1214.71 L1147.88 1214.71 L1148.46 1214.71 L1149.05 1214.71 L1149.63 1214.71 L1150.22 1214.71 L1150.81 1214.71 L1151.39 1214.71 L1151.98 1214.71 L1152.57 1214.71 L1153.15 1214.71 L1153.74 1214.71 L1154.33 1214.71 L1154.91 1214.71 L1155.5 1214.71 L1156.09 1214.71 L1156.67 1214.71 L1157.26 1214.71 L1157.84 1214.71 L1158.43 1214.71 L1159.02 1214.71 L1159.6 1214.71 L1160.19 1214.71 L1160.78 1214.71 L1161.36 1214.71 L1161.95 1214.71 L1162.54 1214.71 L1163.12 1214.71 L1163.71 1214.71 L1164.29 1214.71 L1164.88 1214.71 L1165.47 1214.71 L1166.05 1214.71 L1166.64 1214.71 L1167.23 1214.71 L1167.81 1214.71 L1168.4 1214.71 L1168.99 1214.71 L1169.57 1214.71 L1170.16 1214.71 L1170.75 1214.71 L1171.33 1214.71 L1171.92 1214.71 L1172.5 1214.71 L1173.09 1214.71 L1173.68 1214.71 L1174.26 1214.71 L1174.85 1214.71 L1175.44 1214.71 L1176.02 1214.71 L1176.61 1214.71 L1177.2 1214.71 L1177.78 1214.71 L1178.37 1214.71 L1178.96 1214.71 L1179.54 1214.71 L1180.13 1214.71 L1180.71 1214.71 L1181.3 1214.71 L1181.89 1214.71 L1182.47 1214.71 L1183.06 1214.71 L1183.65 1214.71 L1184.23 1214.71 L1184.82 1214.71 L1185.41 1214.71 L1185.99 1214.71 L1186.58 1214.71 L1187.16 1214.71 L1187.75 1214.71 L1188.34 1214.71 L1188.92 1214.71 L1189.51 1214.71 L1190.1 1214.71 L1190.68 1214.71 L1191.27 1214.71 L1191.86 1214.71 L1192.44 1214.71 L1193.03 1214.71 L1193.62 1214.71 L1194.2 1214.71 L1194.79 1214.71 L1195.37 1214.71 L1195.96 1214.71 L1196.55 1214.71 L1197.13 1214.71 L1197.72 1214.71 L1198.31 1214.71 L1198.89 1214.71 L1199.48 1214.71 L1200.07 1214.71 L1200.65 1214.71 L1201.24 1214.71 L1201.83 1214.71 L1202.41 1214.71 L1203 1214.71 L1203.58 1214.71 L1204.17 1214.71 L1204.76 1214.71 L1205.34 1214.71 L1205.93 1214.71 L1206.52 1214.71 L1207.1 1214.71 L1207.69 1214.71 L1208.28 1214.71 L1208.86 1214.71 L1209.45 1214.71 L1210.03 1214.71 L1210.62 1214.71 L1211.21 1214.71 L1211.79 1214.71 L1212.38 1214.71 L1212.97 1214.71 L1213.55 1214.71 L1214.14 1214.71 L1214.73 1214.71 L1215.31 1214.71 L1215.9 1214.71 L1216.49 1214.71 L1217.07 1214.71 L1217.66 1214.71 L1218.24 1214.71 L1218.83 1214.71 L1219.42 1214.71 L1220 1214.71 L1220.59 1214.71 L1221.18 1214.71 L1221.76 1214.71 L1222.35 1214.71 L1222.94 1214.71 L1223.52 1214.71 L1224.11 1214.71 L1224.7 1214.71 L1225.28 1214.71 L1225.87 1214.71 L1226.45 1214.71 L1227.04 1214.71 L1227.63 1214.71 L1228.21 1214.71 L1228.8 1214.71 L1229.39 1214.71 L1229.97 1214.71 L1230.56 1214.71 L1231.15 1214.71 L1231.73 1214.71 L1232.32 1214.71 L1232.91 1214.71 L1233.49 1214.71 L1234.08 1214.71 L1234.66 1214.71 L1235.25 1214.71 L1235.84 1214.71 L1236.42 1214.71 L1237.01 1214.71 L1237.6 1214.71 L1238.18 1214.71 L1238.77 1214.71 L1239.36 1214.71 L1239.94 1214.71 L1240.53 1214.71 L1241.11 1214.71 L1241.7 1214.71 L1242.29 1214.71 L1242.87 1214.71 L1243.46 1214.71 L1244.05 1214.71 L1244.63 1214.71 L1245.22 1214.71 L1245.81 1214.71 L1246.39 1214.71 L1246.98 1214.71 L1247.57 1214.71 L1248.15 1214.71 L1248.74 1214.71 L1249.32 1214.71 L1249.91 1214.71 L1250.5 1214.71 L1251.08 1214.71 L1251.67 1214.71 L1252.26 1214.71 L1252.84 1214.71 L1253.43 1214.71 L1254.02 1214.71 L1254.6 1214.71 L1255.19 1214.71 L1255.78 1214.71 L1256.36 1214.71 L1256.95 1214.71 L1257.53 1214.71 L1258.12 1214.71 L1258.71 1214.71 L1259.29 1214.71 L1259.88 1214.71 L1260.47 1214.71 L1261.05 1214.71 L1261.64 1214.71 L1262.23 1214.71 L1262.81 1214.71 L1263.4 1214.71 L1263.98 1214.71 L1264.57 1214.71 L1265.16 1214.71 L1265.74 1214.71 L1266.33 1214.71 L1266.92 1214.71 L1267.5 1214.71 L1268.09 1214.71 L1268.68 1214.71 L1269.26 1214.71 L1269.85 1214.71 L1270.44 1214.71 L1271.02 1214.71 L1271.61 1214.71 L1272.19 1214.71 L1272.78 1214.71 L1273.37 1214.71 L1273.95 1214.71 L1274.54 1214.71 L1275.13 1214.71 L1275.71 1214.71 L1276.3 1214.71 L1276.89 1214.71 L1277.47 1214.71 L1278.06 1214.71 L1278.65 1214.71 L1279.23 1214.71 L1279.82 1214.71 L1280.4 1214.71 L1280.99 1214.71 L1281.58 1214.71 L1282.16 1214.71 L1282.75 1214.71 L1283.34 1214.71 L1283.92 1214.71 L1284.51 1214.71 L1285.1 1214.71 L1285.68 1214.71 L1286.27 1214.71 L1286.86 1214.71 L1287.44 1214.71 L1288.03 1214.71 L1288.61 1214.71 L1289.2 1214.71 L1289.79 1214.71 L1290.37 1214.71 L1290.96 1214.71 L1291.55 1214.71 L1292.13 1214.71 L1292.72 1214.71 L1293.31 1214.71 L1293.89 1214.71 L1294.48 1214.71 L1295.06 1214.71 L1295.65 1214.71 L1296.24 1214.71 L1296.82 1214.71 L1297.41 1214.71 L1298 1214.71 L1298.58 1214.71 L1299.17 1214.71 L1299.76 1214.71 L1300.34 1214.71 L1300.93 1214.71 L1301.52 1214.71 L1302.1 1214.71 L1302.69 1214.71 L1303.27 1214.71 L1303.86 1214.71 L1304.45 1214.71 L1305.03 1214.71 L1305.62 1214.71 L1306.21 1214.71 L1306.79 1214.71 L1307.38 1214.71 L1307.97 1214.71 L1308.55 1214.71 L1309.14 1214.71 L1309.73 1214.71 L1310.31 1214.71 L1310.9 1214.71 L1311.48 1214.71 L1312.07 1214.71 L1312.66 1214.71 L1313.24 1214.71 L1313.83 1214.71 L1314.42 1214.71 L1315 1214.71 L1315.59 1214.71 L1316.18 1214.71 L1316.76 1214.71 L1317.35 1214.71 L1317.93 1214.71 L1318.52 1214.71 L1319.11 1214.71 L1319.69 1214.71 L1320.28 1214.71 L1320.87 1214.71 L1321.45 1214.71 L1322.04 1214.71 L1322.63 1214.71 L1323.21 1214.71 L1323.8 1214.71 L1324.39 1214.71 L1324.97 1214.71 L1325.56 1214.71 L1326.14 1214.71 L1326.73 1214.71 L1327.32 1214.71 L1327.9 1214.71 L1328.49 1214.71 L1329.08 1214.71 L1329.66 1214.71 L1330.25 1214.71 L1330.84 1214.71 L1331.42 1214.71 L1332.01 1214.71 L1332.6 1214.71 L1333.18 1214.71 L1333.77 1214.71 L1334.35 1214.71 L1334.94 1214.71 L1335.53 1214.71 L1336.11 1214.71 L1336.7 1214.71 L1337.29 1214.71 L1337.87 1214.71 L1338.46 1214.71 L1339.05 1214.71 L1339.63 1214.71 L1340.22 1214.71 L1340.8 1214.71 L1341.39 1214.71 L1341.98 1214.71 L1342.56 1214.71 L1343.15 1214.71 L1343.74 1214.71 L1344.32 1214.71 L1344.91 1214.71 L1345.5 1214.71 L1346.08 1214.71 L1346.67 1214.71 L1347.26 1214.71 L1347.84 1214.71 L1348.43 1214.71 L1349.01 1214.71 L1349.6 1214.71 L1350.19 1214.71 L1350.77 1214.71 L1351.36 1214.71 L1351.95 1214.71 L1352.53 1214.71 L1353.12 1214.71 L1353.71 1214.71 L1354.29 1214.71 L1354.88 1214.71 L1355.47 1214.71 L1356.05 1214.71 L1356.64 1214.71 L1357.22 1214.71 L1357.81 1214.71 L1358.4 1214.71 L1358.98 1214.71 L1359.57 1214.71 L1360.16 1214.71 L1360.74 1214.71 L1361.33 1214.71 L1361.92 1214.71 L1362.5 1214.71 L1363.09 1214.71 L1363.68 1214.71 L1364.26 1214.71 L1364.85 1214.71 L1365.43 1214.71 L1366.02 1214.71 L1366.61 1214.71 L1367.19 1214.71 L1367.78 1214.71 L1368.37 1214.71 L1368.95 1214.71 L1369.54 1214.71 L1370.13 1214.71 L1370.71 1214.71 L1371.3 1214.71 L1371.88 1214.71 L1372.47 1214.71 L1373.06 1214.71 L1373.64 1214.71 L1374.23 1214.71 L1374.82 1214.71 L1375.4 1214.71 L1375.99 1214.71 L1376.58 1214.71 L1377.16 1214.71 L1377.75 1214.71 L1378.34 1214.71 L1378.92 1214.71 L1379.51 1214.71 L1380.09 1214.71 L1380.68 1214.71 L1381.27 1214.71 L1381.85 1214.71 L1382.44 1214.71 L1383.03 1214.71 L1383.61 1214.71 L1384.2 1214.71 L1384.79 1214.71 L1385.37 1214.71 L1385.96 1214.71 L1386.55 1214.71 L1387.13 1214.71 L1387.72 1214.71 L1388.3 1214.71 L1388.89 1214.71 L1389.48 1214.71 L1390.06 1214.71 L1390.65 1214.71 L1391.24 1214.71 L1391.82 1214.71 L1392.41 1214.71 L1393 1214.71 L1393.58 1214.71 L1394.17 1214.71 L1394.75 1214.71 L1395.34 1214.71 L1395.93 1214.71 L1396.51 1214.71 L1397.1 1214.71 L1397.69 1214.71 L1398.27 1214.71 L1398.86 1214.71 L1399.45 1214.71 L1400.03 1214.71 L1400.62 1214.71 L1401.21 1214.71 L1401.79 1214.71 L1402.38 1214.71 L1402.96 1214.71 L1403.55 1214.71 L1404.14 1214.71 L1404.72 1214.71 L1405.31 1214.71 L1405.9 1214.71 L1406.48 1214.71 L1407.07 1214.71 L1407.66 1214.71 L1408.24 1214.71 L1408.83 1214.71 L1409.42 1214.71 L1410 1214.71 L1410.59 1214.71 L1411.17 1214.71 L1411.76 1214.71 L1412.35 1214.71 L1412.93 1214.71 L1413.52 1214.71 L1414.11 1214.71 L1414.69 1214.71 L1415.28 1214.71 L1415.87 1214.71 L1416.45 1214.71 L1417.04 1214.71 L1417.63 1214.71 L1418.21 1214.71 L1418.8 1214.71 L1419.38 1214.71 L1419.97 1214.71 L1420.56 1214.71 L1421.14 1214.71 L1421.73 1214.71 L1422.32 1214.71 L1422.9 1214.71 L1423.49 1214.71 L1424.08 1214.71 L1424.66 1214.71 L1425.25 1214.71 L1425.83 1214.71 L1426.42 1214.71 L1427.01 1214.71 L1427.59 1214.71 L1428.18 1214.71 L1428.77 1214.71 L1429.35 1214.71 L1429.94 1214.71 L1430.53 1214.71 L1431.11 1214.71 L1431.7 1214.71 L1432.29 1214.71 L1432.87 1214.71 L1433.46 1214.71 L1434.04 1214.71 L1434.63 1214.71 L1435.22 1214.71 L1435.8 1214.71 L1436.39 1214.71 L1436.98 1214.71 L1437.56 1214.71 L1438.15 1214.71 L1438.74 1214.71 L1439.32 1214.71 L1439.91 1214.71 L1440.5 1214.71 L1441.08 1214.71 L1441.67 1214.71 L1442.25 1214.71 L1442.84 1214.71 L1443.43 1214.71 L1444.01 1214.71 L1444.6 1214.71 L1445.19 1214.71 L1445.77 1214.71 L1446.36 1214.71 L1446.95 1214.71 L1447.53 1214.71 L1448.12 1214.71 L1448.7 1214.71 L1449.29 1214.71 L1449.88 1214.71 L1450.46 1214.71 L1451.05 1214.71 L1451.64 1214.71 L1452.22 1214.71 L1452.81 1214.71 L1453.4 1214.71 L1453.98 1214.71 L1454.57 1214.71 L1455.16 1214.71 L1455.74 1214.71 L1456.33 1214.71 L1456.91 1214.71 L1457.5 1214.71 L1458.09 1214.71 L1458.67 1214.71 L1459.26 1214.71 L1459.85 1214.71 L1460.43 1214.71 L1461.02 1214.71 L1461.61 1214.71 L1462.19 1214.71 L1462.78 1214.71 L1463.37 1214.71 L1463.95 1214.71 L1464.54 1214.71 L1465.12 1214.71 L1465.71 1214.71 L1466.3 1214.71 L1466.88 1214.71 L1467.47 1214.71 L1468.06 1214.71 L1468.64 1214.71 L1469.23 1214.71 L1469.82 1214.71 L1470.4 1214.71 L1470.99 1214.71 L1471.57 1214.71 L1472.16 1214.71 L1472.75 1214.71 L1473.33 1214.71 L1473.92 1214.71 L1474.51 1214.71 L1475.09 1214.71 L1475.68 1214.71 L1476.27 1214.71 L1476.85 1214.71 L1477.44 1214.71 L1478.03 1214.71 L1478.61 1214.71 L1479.2 1214.71 L1479.78 1214.71 L1480.37 1214.71 L1480.96 1214.71 L1481.54 1214.71 L1482.13 1214.71 L1482.72 1214.71 L1483.3 1214.71 L1483.89 1214.71 L1484.48 1214.71 L1485.06 1214.71 L1485.65 1214.71 L1486.24 1214.71 L1486.82 1214.71 L1487.41 1214.71 L1487.99 1214.71 L1488.58 1214.71 L1489.17 1214.71 L1489.75 1214.71 L1490.34 1214.71 L1490.93 1214.71 L1491.51 1214.71 L1492.1 1214.71 L1492.69 1214.71 L1493.27 1214.71 L1493.86 1214.71 L1494.45 1214.71 L1495.03 1214.71 L1495.62 1214.71 L1496.2 1214.71 L1496.79 1214.71 L1497.38 1214.71 L1497.96 1214.71 L1498.55 1214.71 L1499.14 1214.71 L1499.72 1214.71 L1500.31 1214.71 L1500.9 1214.71 L1501.48 1214.71 L1502.07 1214.71 L1502.65 1214.71 L1503.24 1214.71 L1503.83 1214.71 L1504.41 1214.71 L1505 1214.71 L1505.59 1214.71 L1506.17 1214.71 L1506.76 1214.71 L1507.35 1214.71 L1507.93 1214.71 L1508.52 1214.71 L1509.11 1214.71 L1509.69 1214.71 L1510.28 1214.71 L1510.86 1214.71 L1511.45 1214.71 L1512.04 1214.71 L1512.62 1214.71 L1513.21 1214.71 L1513.8 1214.71 L1514.38 1214.71 L1514.97 1214.71 L1515.56 1214.71 L1516.14 1214.71 L1516.73 1214.71 L1517.32 1214.71 L1517.9 1214.71 L1518.49 1214.71 L1519.07 1214.71 L1519.66 1214.71 L1520.25 1214.71 L1520.83 1214.71 L1521.42 1214.71 L1522.01 1214.71 L1522.59 1214.71 L1523.18 1214.71 L1523.77 1214.71 L1524.35 1214.71 L1524.94 1214.71 L1525.52 1214.71 L1526.11 1214.71 L1526.7 1214.71 L1527.28 1214.71 L1527.87 1214.71 L1528.46 1214.71 L1529.04 1214.71 L1529.63 1214.71 L1530.22 1214.71 L1530.8 1214.71 L1531.39 1214.71 L1531.98 1214.71 L1532.56 1214.71 L1533.15 1214.71 L1533.73 1214.71 L1534.32 1214.71 L1534.91 1214.71 L1535.49 1214.71 L1536.08 1214.71 L1536.67 1214.71 L1537.25 1214.71 L1537.84 1214.71 L1538.43 1214.71 L1539.01 1214.71 L1539.6 1214.71 L1540.19 1214.71 L1540.77 1214.71 L1541.36 1214.71 L1541.94 1214.71 L1542.53 1214.71 L1543.12 1214.71 L1543.7 1214.71 L1544.29 1214.71 L1544.88 1214.71 L1545.46 1214.71 L1546.05 1214.71 L1546.64 1214.71 L1547.22 1214.71 L1547.81 1214.71 L1548.4 1214.71 L1548.98 1214.71 L1549.57 1214.71 L1550.15 1214.71 L1550.74 1214.71 L1551.33 1214.71 L1551.91 1214.71 L1552.5 1214.71 L1553.09 1214.71 L1553.67 1214.71 L1554.26 1214.71 L1554.85 1214.71 L1555.43 1214.71 L1556.02 1214.71 L1556.6 1214.71 L1557.19 1214.71 L1557.78 1214.71 L1558.36 1214.71 L1558.95 1214.71 L1559.54 1214.71 L1560.12 1214.71 L1560.71 1214.71 L1561.3 1214.71 L1561.88 1214.71 L1562.47 1214.71 L1563.06 1214.71 L1563.64 1214.71 L1564.23 1214.71 L1564.81 1214.71 L1565.4 1214.71 L1565.99 1214.71 L1566.57 1214.71 L1567.16 1214.71 L1567.75 1214.71 L1568.33 1214.71 L1568.92 1214.71 L1569.51 1214.71 L1570.09 1214.71 L1570.68 1214.71 L1571.27 1214.71 L1571.85 1214.71 L1572.44 1214.71 L1573.02 1214.71 L1573.61 1214.71 L1574.2 1214.71 L1574.78 1214.71 L1575.37 1214.71 L1575.96 1214.71 L1576.54 1214.71 L1577.13 1214.71 L1577.72 1214.71 L1578.3 1214.71 L1578.89 1214.71 L1579.47 1214.71 L1580.06 1214.71 L1580.65 1214.71 L1581.23 1214.71 L1581.82 1214.71 L1582.41 1214.71 L1582.99 1214.71 L1583.58 1214.71 L1584.17 1214.71 L1584.75 1214.71 L1585.34 1214.71 L1585.93 1214.71 L1586.51 1214.71 L1587.1 1214.71 L1587.68 1214.71 L1588.27 1214.71 L1588.86 1214.71 L1589.44 1214.71 L1590.03 1214.71 L1590.62 1214.71 L1591.2 1214.71 L1591.79 1214.71 L1592.38 1214.71 L1592.96 1214.71 L1593.55 1214.71 L1594.14 1214.71 L1594.72 1214.71 L1595.31 1214.71 L1595.89 1214.71 L1596.48 1214.71 L1597.07 1214.71 L1597.65 1214.71 L1598.24 1214.71 L1598.83 1214.71 L1599.41 1214.71 L1600 1214.71 L1600.59 1214.71 L1601.17 1214.71 L1601.76 1214.71 L1602.34 1214.71 L1602.93 1214.71 L1603.52 1214.71 L1604.1 1214.71 L1604.69 1214.71 L1605.28 1214.71 L1605.86 1214.71 L1606.45 1214.71 L1607.04 1214.71 L1607.62 1214.71 L1608.21 1214.71 L1608.8 1214.71 L1609.38 1214.71 L1609.97 1214.71 L1610.55 1214.71 L1611.14 1214.71 L1611.73 1214.71 L1612.31 1214.71 L1612.9 1214.71 L1613.49 1214.71 L1614.07 1214.71 L1614.66 1214.71 L1615.25 1214.71 L1615.83 1214.71 L1616.42 1214.71 L1617.01 1214.71 L1617.59 1214.71 L1618.18 1214.71 L1618.76 1214.71 L1619.35 1214.71 L1619.94 1214.71 L1620.52 1214.71 L1621.11 1214.71 L1621.7 1214.71 L1622.28 1214.71 L1622.87 1214.71 L1623.46 1214.71 L1624.04 1214.71 L1624.63 1214.71 L1625.22 1214.71 L1625.8 1214.71 L1626.39 1214.71 L1626.97 1214.71 L1627.56 1214.71 L1628.15 1214.71 L1628.73 1214.71 L1629.32 1214.71 L1629.91 1214.71 L1630.49 1214.71 L1631.08 1214.71 L1631.67 1214.71 L1632.25 1214.71 L1632.84 1214.71 L1633.42 1214.71 L1634.01 1214.71 L1634.6 1214.71 L1635.18 1214.71 L1635.77 1214.71 L1636.36 1214.71 L1636.94 1214.71 L1637.53 1214.71 L1638.12 1214.71 L1638.7 1214.71 L1639.29 1214.71 L1639.88 1214.71 L1640.46 1214.71 L1641.05 1214.71 L1641.63 1214.71 L1642.22 1214.71 L1642.81 1214.71 L1643.39 1214.71 L1643.98 1214.71 L1644.57 1214.71 L1645.15 1214.71 L1645.74 1214.71 L1646.33 1214.71 L1646.91 1214.71 L1647.5 1214.71 L1648.09 1214.71 L1648.67 1214.71 L1649.26 1214.71 L1649.84 1214.71 L1650.43 1214.71 L1651.02 1214.71 L1651.6 1214.71 L1652.19 1214.71 L1652.78 1214.71 L1653.36 1214.71 L1653.95 1214.71 L1654.54 1214.71 L1655.12 1214.71 L1655.71 1214.71 L1656.29 1214.71 L1656.88 1214.71 L1657.47 1214.71 L1658.05 1214.71 L1658.64 1214.71 L1659.23 1214.71 L1659.81 1214.71 L1660.4 1214.71 L1660.99 1214.71 L1661.57 1214.71 L1662.16 1214.71 L1662.75 1214.71 L1663.33 1214.71 L1663.92 1214.71 L1664.5 1214.71 L1665.09 1214.71 L1665.68 1214.71 L1666.26 1214.71 L1666.85 1214.71 L1667.44 1214.71 L1668.02 1214.71 L1668.61 1214.71 L1669.2 1214.71 L1669.78 1214.71 L1670.37 1214.71 L1670.96 1214.71 L1671.54 1214.71 L1672.13 1214.71 L1672.71 1214.71 L1673.3 1214.71 L1673.89 1214.71 L1674.47 1214.71 L1675.06 1214.71 L1675.65 1214.71 L1676.23 1214.71 L1676.82 1214.71 L1677.41 1214.71 L1677.99 1214.71 L1678.58 1214.71 L1679.17 1214.71 L1679.75 1214.71 L1680.34 1214.71 L1680.92 1214.71 L1681.51 1214.71 L1682.1 1214.71 L1682.68 1214.71 L1683.27 1214.71 L1683.86 1214.71 L1684.44 1214.71 L1685.03 1214.71 L1685.62 1214.71 L1686.2 1214.71 L1686.79 1214.71 L1687.37 1214.71 L1687.96 1214.71 L1688.55 1214.71 L1689.13 1214.71 L1689.72 1214.71 L1690.31 1214.71 L1690.89 1214.71 L1691.48 1214.71 L1692.07 1214.71 L1692.65 1214.71 L1693.24 1214.71 L1693.83 1214.71 L1694.41 1214.71 L1695 1214.71 L1695.58 1214.71 L1696.17 1214.71 L1696.76 1214.71 L1697.34 1214.71 L1697.93 1214.71 L1698.52 1214.71 L1699.1 1214.71 L1699.69 1214.71 L1700.28 1214.71 L1700.86 1214.71 L1701.45 1214.71 L1702.04 1214.71 L1702.62 1214.71 L1703.21 1214.71 L1703.79 1214.71 L1704.38 1214.71 L1704.97 1214.71 L1705.55 1214.71 L1706.14 1214.71 L1706.73 1214.71 L1707.31 1214.71 L1707.9 1214.71 L1708.49 1214.71 L1709.07 1214.71 L1709.66 1214.71 L1710.24 1214.71 L1710.83 1214.71 L1711.42 1214.71 L1712 1214.71 L1712.59 1214.71 L1713.18 1214.71 L1713.76 1214.71 L1714.35 1214.71 L1714.94 1214.71 L1715.52 1214.71 L1716.11 1214.71 L1716.7 1214.71 L1717.28 1214.71 L1717.87 1214.71 L1718.45 1214.71 L1719.04 1214.71 L1719.63 1214.71 L1720.21 1214.71 L1720.8 1214.71 L1721.39 1214.71 L1721.97 1214.71 L1722.56 1214.71 L1723.15 1214.71 L1723.73 1214.71 L1724.32 1214.71 L1724.91 1214.71 L1725.49 1214.71 L1726.08 1214.71 L1726.66 1214.71 L1727.25 1214.71 L1727.84 1214.71 L1728.42 1214.71 L1729.01 1214.71 L1729.6 1214.71 L1730.18 1214.71 L1730.77 1214.71 L1731.36 1214.71 L1731.94 1214.71 L1732.53 1214.71 L1733.11 1214.71 L1733.7 1214.71 L1734.29 1214.71 L1734.87 1214.71 L1735.46 1214.71 L1736.05 1214.71 L1736.63 1214.71 L1737.22 1214.71 L1737.81 1214.71 L1738.39 1214.71 L1738.98 1214.71 L1739.57 1214.71 L1740.15 1214.71 L1740.74 1214.71 L1741.32 1214.71 L1741.91 1214.71 L1742.5 1214.71 L1743.08 1214.71 L1743.67 1214.71 L1744.26 1214.71 L1744.84 1214.71 L1745.43 1214.71 L1746.02 1214.71 L1746.6 1214.71 L1747.19 1214.71 L1747.78 1214.71 L1748.36 1214.71 L1748.95 1214.71 L1749.53 1214.71 L1750.12 1214.71 L1750.71 1214.71 L1751.29 1214.71 L1751.88 1214.71 L1752.47 1214.71 L1753.05 1214.71 L1753.64 1214.71 L1754.23 1214.71 L1754.81 1214.71 L1755.4 1214.71 L1755.99 1214.71 L1756.57 1214.71 L1757.16 1214.71 L1757.74 1214.71 L1758.33 1214.71 L1758.92 1214.71 L1759.5 1214.71 L1760.09 1214.71 L1760.68 1214.71 L1761.26 1214.71 L1761.85 1214.71 L1762.44 1214.71 L1763.02 1214.71 L1763.61 1214.71 L1764.19 1214.71 L1764.78 1214.71 L1765.37 1214.71 L1765.95 1214.71 L1766.54 1214.71 L1767.13 1214.71 L1767.71 1214.71 L1768.3 1214.71 L1768.89 1214.71 L1769.47 1214.71 L1770.06 1214.71 L1770.65 1214.71 L1771.23 1214.71 L1771.82 1214.71 L1772.4 1214.71 L1772.99 1214.71 L1773.58 1214.71 L1774.16 1214.71 L1774.75 1214.71 L1775.34 1214.71 L1775.92 1214.71 L1776.51 1214.71 L1777.1 1214.71 L1777.68 1214.71 L1778.27 1214.71 L1778.86 1214.71 L1779.44 1214.71 L1780.03 1214.71 L1780.61 1214.71 L1781.2 1214.71 L1781.79 1214.71 L1782.37 1214.71 L1782.96 1214.71 L1783.55 1214.71 L1784.13 1214.71 L1784.72 1214.71 L1785.31 1214.71 L1785.89 1214.71 L1786.48 1214.71 L1787.06 1214.71 L1787.65 1214.71 L1788.24 1214.71 L1788.82 1214.71 L1789.41 1214.71 L1790 1214.71 L1790.58 1214.71 L1791.17 1214.71 L1791.76 1214.71 L1792.34 1214.71 L1792.93 1214.71 L1793.52 1214.71 L1794.1 1214.71 L1794.69 1214.71 L1795.27 1214.71 L1795.86 1214.71 L1796.45 1214.71 L1797.03 1214.71 L1797.62 1214.71 L1798.21 1214.71 L1798.79 1214.71 L1799.38 1214.71 L1799.97 1214.71 L1800.55 1214.71 L1801.14 1214.71 L1801.73 1214.71 L1802.31 1214.71 L1802.9 1214.71 L1803.48 1214.71 L1804.07 1214.71 L1804.66 1214.71 L1805.24 1214.71 L1805.83 1214.71 L1806.42 1214.71 L1807 1214.71 L1807.59 1214.71 L1808.18 1214.71 L1808.76 1214.71 L1809.35 1214.71 L1809.94 1214.71 L1810.52 1214.71 L1811.11 1214.71 L1811.69 1214.71 L1812.28 1214.71 L1812.87 1214.71 L1813.45 1214.71 L1814.04 1214.71 L1814.63 1214.71 L1815.21 1214.71 L1815.8 1214.71 L1816.39 1214.71 L1816.97 1214.71 L1817.56 1214.71 L1818.14 1214.71 L1818.73 1214.71 L1819.32 1214.71 L1819.9 1214.71 L1820.49 1214.71 L1821.08 1214.71 L1821.66 1214.71 L1822.25 1214.71 L1822.84 1214.71 L1823.42 1214.71 L1824.01 1214.71 L1824.6 1214.71 L1825.18 1214.71 L1825.77 1214.71 L1826.35 1214.71 L1826.94 1214.71 L1827.53 1214.71 L1828.11 1214.71 L1828.7 1214.71 L1829.29 1214.71 L1829.87 1214.71 L1830.46 1214.71 L1831.05 1214.71 L1831.63 1214.71 L1832.22 1214.71 L1832.81 1214.71 L1833.39 1214.71 L1833.98 1214.71 L1834.56 1214.71 L1835.15 1214.71 L1835.74 1214.71 L1836.32 1214.71 L1836.91 1214.71 L1837.5 1214.71 L1838.08 1214.71 L1838.67 1214.71 L1839.26 1214.71 L1839.84 1214.71 L1840.43 1214.71 L1841.01 1214.71 L1841.6 1214.71 L1842.19 1214.71 L1842.77 1214.71 L1843.36 1214.71 L1843.95 1214.71 L1844.53 1214.71 L1845.12 1214.71 L1845.71 1214.71 L1846.29 1214.71 L1846.88 1214.71 L1847.47 1214.71 L1848.05 1214.71 L1848.64 1214.71 L1849.22 1214.71 L1849.81 1214.71 L1850.4 1214.71 L1850.98 1214.71 L1851.57 1214.71 L1852.16 1214.71 L1852.74 1214.71 L1853.33 1214.71 L1853.92 1214.71 L1854.5 1214.71 L1855.09 1214.71 L1855.68 1214.71 L1856.26 1214.71 L1856.85 1214.71 L1857.43 1214.71 L1858.02 1214.71 L1858.61 1214.71 L1859.19 1214.71 L1859.78 1214.71 L1860.37 1214.71 L1860.95 1214.71 L1861.54 1214.71 L1862.13 1214.71 L1862.71 1214.71 L1863.3 1214.71 L1863.88 1214.71 L1864.47 1214.71 L1865.06 1214.71 L1865.64 1214.71 L1866.23 1214.71 L1866.82 1214.71 L1867.4 1214.71 L1867.99 1214.71 L1868.58 1214.71 L1869.16 1214.71 L1869.75 1214.71 L1870.34 1214.71 L1870.92 1214.71 L1871.51 1214.71 L1872.09 1214.71 L1872.68 1214.71 L1873.27 1214.71 L1873.85 1214.71 L1874.44 1214.71 L1875.03 1214.71 L1875.61 1214.71 L1876.2 1214.71 L1876.79 1214.71 L1877.37 1214.71 L1877.96 1214.71 L1878.55 1214.71 L1879.13 1214.71 L1879.72 1214.71 L1880.3 1214.71 L1880.89 1214.71 L1881.48 1214.71 L1882.06 1214.71 L1882.65 1214.71 L1883.24 1214.71 L1883.82 1214.71 L1884.41 1214.71 L1885 1214.71 L1885.58 1214.71 L1886.17 1214.71 L1886.76 1214.71 L1887.34 1214.71 L1887.93 1214.71 L1888.51 1214.71 L1889.1 1214.71 L1889.69 1214.71 L1890.27 1214.71 L1890.86 1214.71 L1891.45 1214.71 L1892.03 1214.71 L1892.62 1214.71 L1893.21 1214.71 L1893.79 1214.71 L1894.38 1214.71 L1894.96 1214.71 L1895.55 1214.71 L1896.14 1214.71 L1896.72 1214.71 L1897.31 1214.71 L1897.9 1214.71 L1898.48 1214.71 L1899.07 1214.71 L1899.66 1214.71 L1900.24 1214.71 L1900.83 1214.71 L1901.42 1214.71 L1902 1214.71 L1902.59 1214.71 L1903.17 1214.71 L1903.76 1214.71 L1904.35 1214.71 L1904.93 1214.71 L1905.52 1214.71 L1906.11 1214.71 L1906.69 1214.71 L1907.28 1214.71 L1907.87 1214.71 L1908.45 1214.71 L1909.04 1214.71 L1909.63 1214.71 L1910.21 1214.71 L1910.8 1214.71 L1911.38 1214.71 L1911.97 1214.71 L1912.56 1214.71 L1913.14 1214.71 L1913.73 1214.71 L1914.32 1214.71 L1914.9 1214.71 L1915.49 1214.71 L1916.08 1214.71 L1916.66 1214.71 L1917.25 1214.71 L1917.83 1214.71 L1918.42 1214.71 L1919.01 1214.71 L1919.59 1214.71 L1920.18 1214.71 L1920.77 1214.71 L1921.35 1214.71 L1921.94 1214.71 L1922.53 1214.71 L1923.11 1214.71 L1923.7 1214.71 L1924.29 1214.71 L1924.87 1214.71 L1925.46 1214.71 L1926.04 1214.71 L1926.63 1214.71 L1927.22 1214.71 L1927.8 1214.71 L1928.39 1214.71 L1928.98 1214.71 L1929.56 1214.71 L1930.15 1214.71 L1930.74 1214.71 L1931.32 1214.71 L1931.91 1214.71 L1932.5 1214.71 L1933.08 1214.71 L1933.67 1214.71 L1934.25 1214.71 L1934.84 1214.71 L1935.43 1214.71 L1936.01 1214.71 L1936.6 1214.71 L1937.19 1214.71 L1937.77 1214.71 L1938.36 1214.71 L1938.95 1214.71 L1939.53 1214.71 L1940.12 1214.71 L1940.71 1214.71 L1941.29 1214.71 L1941.88 1214.71 L1942.46 1214.71 L1943.05 1214.71 L1943.64 1214.71 L1944.22 1214.71 L1944.81 1214.71 L1945.4 1214.71 L1945.98 1214.71 L1946.57 1214.71 L1947.16 1214.71 L1947.74 1214.71 L1948.33 1214.71 L1948.91 1214.71 L1949.5 1214.71 L1950.09 1214.71 L1950.67 1214.71 L1951.26 1214.71 L1951.85 1214.71 L1952.43 1214.71 L1953.02 1214.71 L1953.61 1214.71 L1954.19 1214.71 L1954.78 1214.71 L1955.37 1214.71 L1955.95 1214.71 L1956.54 1214.71 L1957.12 1214.71 L1957.71 1214.71 L1958.3 1214.71 L1958.88 1214.71 L1959.47 1214.71 L1960.06 1214.71 L1960.64 1214.71 L1961.23 1214.71 L1961.82 1214.71 L1962.4 1214.71 L1962.99 1214.71 L1963.58 1214.71 L1964.16 1214.71 L1964.75 1214.71 L1965.33 1214.71 L1965.92 1214.71 L1966.51 1214.71 L1967.09 1214.71 L1967.68 1214.71 L1968.27 1214.71 L1968.85 1214.71 L1969.44 1214.71 L1970.03 1214.71 L1970.61 1214.71 L1971.2 1214.71 L1971.78 1214.71 L1972.37 1214.71 L1972.96 1214.71 L1973.54 1214.71 L1974.13 1214.71 L1974.72 1214.71 L1975.3 1214.71 L1975.89 1214.71 L1976.48 1214.71 L1977.06 1214.71 L1977.65 1214.71 L1978.24 1214.71 L1978.82 1214.71 L1979.41 1214.71 L1979.99 1214.71 L1980.58 1214.71 L1981.17 1214.71 L1981.75 1214.71 L1982.34 1214.71 L1982.93 1214.71 L1983.51 1214.71 L1984.1 1214.71 L1984.69 1214.71 L1985.27 1214.71 L1985.86 1214.71 L1986.45 1214.71 L1987.03 1214.71 L1987.62 1214.71 L1988.2 1214.71 L1988.79 1214.71 L1989.38 1214.71 L1989.96 1214.71 L1990.55 1214.71 L1991.14 1214.71 L1991.72 1214.71 L1992.31 1214.71 L1992.9 1214.71 L1993.48 1214.71 L1994.07 1214.71 L1994.65 1214.71 L1995.24 1214.71 L1995.83 1214.71 L1996.41 1214.71 L1997 1214.71 L1997.59 1214.71 L1998.17 1214.71 L1998.76 1214.71 L1999.35 1214.71 L1999.93 1214.71 L2000.52 1214.71 L2001.11 1214.71 L2001.69 1214.71 L2002.28 1214.71 L2002.86 1214.71 L2003.45 1214.71 L2004.04 1214.71 L2004.62 1214.71 L2005.21 1214.71 L2005.8 1214.71 L2006.38 1214.71 L2006.97 1214.71 L2007.56 1214.71 L2008.14 1214.71 L2008.73 1214.71 L2009.32 1214.71 L2009.9 1214.71 L2010.49 1214.71 L2011.07 1214.71 L2011.66 1214.71 L2012.25 1214.71 L2012.83 1214.71 L2013.42 1214.71 L2014.01 1214.71 L2014.59 1214.71 L2015.18 1214.71 L2015.77 1214.71 L2016.35 1214.71 L2016.94 1214.71 L2017.53 1214.71 L2018.11 1214.71 L2018.7 1214.71 L2019.28 1214.71 L2019.87 1214.71 L2020.46 1214.71 L2021.04 1214.71 L2021.63 1214.71 L2022.22 1214.71 L2022.8 1214.71 L2023.39 1214.71 L2023.98 1214.71 L2024.56 1214.71 L2025.15 1214.71 L2025.73 1214.71 L2026.32 1214.71 L2026.91 1214.71 L2027.49 1214.71 L2028.08 1214.71 L2028.67 1214.71 L2029.25 1214.71 L2029.84 1214.71 L2030.43 1214.71 L2031.01 1214.71 L2031.6 1214.71 L2032.19 1214.71 L2032.77 1214.71 L2033.36 1214.71 L2033.94 1214.71 L2034.53 1214.71 L2035.12 1214.71 L2035.7 1214.71 L2036.29 1214.71 L2036.88 1214.71 L2037.46 1214.71 L2038.05 1214.71 L2038.64 1214.71 L2039.22 1214.71 L2039.81 1214.71 L2040.4 1214.71 L2040.98 1214.71 L2041.57 1214.71 L2042.15 1214.71 L2042.74 1214.71 L2043.33 1214.71 L2043.91 1214.71 L2044.5 1214.71 L2045.09 1214.71 L2045.67 1214.71 L2046.26 1214.71 L2046.85 1214.71 L2047.43 1214.71 L2048.02 1214.71 L2048.6 1214.71 L2049.19 1214.71 L2049.78 1214.71 L2050.36 1214.71 L2050.95 1214.71 L2051.54 1214.71 L2052.12 1214.71 L2052.71 1214.71 L2053.3 1214.71 L2053.88 1214.71 L2054.47 1214.71 L2055.06 1214.71 L2055.64 1214.71 L2056.23 1214.71 L2056.81 1214.71 L2057.4 1214.71 L2057.99 1214.71 L2058.57 1214.71 L2059.16 1214.71 L2059.75 1214.71 L2060.33 1214.71 L2060.92 1214.71 L2061.51 1214.71 L2062.09 1214.71 L2062.68 1214.71 L2063.27 1214.71 L2063.85 1214.71 L2064.44 1214.71 L2065.02 1214.71 L2065.61 1214.71 L2066.2 1214.71 L2066.78 1214.71 L2067.37 1214.71 L2067.96 1214.71 L2068.54 1214.71 L2069.13 1214.71 L2069.72 1214.71 L2070.3 1214.71 L2070.89 1214.71 L2071.48 1214.71 L2072.06 1214.71 L2072.65 1214.71 L2073.23 1214.71 L2073.82 1214.71 L2074.41 1214.71 L2074.99 1214.71 L2075.58 1214.71 L2076.17 1214.71 L2076.75 1214.71 L2077.34 1214.71 L2077.93 1214.71 L2078.51 1214.71 L2079.1 1214.71 L2079.68 1214.71 L2080.27 1214.71 L2080.86 1214.71 L2081.44 1214.71 L2082.03 1214.71 L2082.62 1214.71 L2083.2 1214.71 L2083.79 1214.71 L2084.38 1214.71 L2084.96 1214.71 L2085.55 1214.71 L2086.14 1214.71 L2086.72 1214.71 L2087.31 1214.71 L2087.89 1214.71 L2088.48 1214.71 L2089.07 1214.71 L2089.65 1214.71 L2090.24 1214.71 L2090.83 1214.71 L2091.41 1214.71 L2092 1214.71 L2092.59 1214.71 L2093.17 1214.71 L2093.76 1214.71 L2094.35 1214.71 L2094.93 1214.71 L2095.52 1214.71 L2096.1 1214.71 L2096.69 1214.71 L2097.28 1214.71 L2097.86 1214.71 L2098.45 1214.71 L2099.04 1214.71 L2099.62 1214.71 L2100.21 1214.71 L2100.8 1214.71 L2101.38 1214.71 L2101.97 1214.71 L2102.55 1214.71 L2103.14 1214.71 L2103.73 1214.71 L2104.31 1214.71 L2104.9 1214.71 L2105.49 1214.71 L2106.07 1214.71 L2106.66 1214.71 L2107.25 1214.71 L2107.83 1214.71 L2108.42 1214.71 L2109.01 1214.71 L2109.59 1214.71 L2110.18 1214.71 L2110.76 1214.71 L2111.35 1214.71 L2111.94 1214.71 L2112.52 1214.71 L2113.11 1214.71 L2113.7 1214.71 L2114.28 1214.71 L2114.87 1214.71 L2115.46 1214.71 L2116.04 1214.71 L2116.63 1214.71 L2117.22 1214.71 L2117.8 1214.71 L2118.39 1214.71 L2118.97 1214.71 L2119.56 1214.71 L2120.15 1214.71 L2120.73 1214.71 L2121.32 1214.71 L2121.91 1214.71 L2122.49 1214.71 L2123.08 1214.71 L2123.67 1214.71 L2124.25 1214.71 L2124.84 1214.71 L2125.42 1214.71 L2126.01 1214.71 L2126.6 1214.71 L2127.18 1214.71 L2127.77 1214.71 L2128.36 1214.71 L2128.94 1214.71 L2129.53 1214.71 L2130.12 1214.71 L2130.7 1214.71 L2131.29 1214.71 L2131.88 1214.71 L2132.46 1214.71 L2133.05 1214.71 L2133.63 1214.71 L2134.22 1214.71 L2134.81 1214.71 L2135.39 1214.71 L2135.98 1214.71 L2136.57 1214.71 L2137.15 1214.71 L2137.74 1214.71 L2138.33 1214.71 L2138.91 1214.71 L2139.5 1214.71 L2140.09 1214.71 L2140.67 1214.71 L2141.26 1214.71 L2141.84 1214.71 L2142.43 1214.71 L2143.02 1214.71 L2143.6 1214.71 L2144.19 1214.71 L2144.78 1214.71 L2145.36 1214.71 L2145.95 1214.71 L2146.54 1214.71 L2147.12 1214.71 L2147.71 1214.71 L2148.3 1214.71 L2148.88 1214.71 L2149.47 1214.71 L2150.05 1214.71 L2150.64 1214.71 L2151.23 1214.71 L2151.81 1214.71 L2152.4 1214.71 L2152.99 1214.71 L2153.57 1214.71 L2154.16 1214.71 L2154.75 1214.71 L2155.33 1214.71 L2155.92 1214.71 L2156.5 1214.71 L2157.09 1214.71 L2157.68 1214.71 L2158.26 1214.71 L2158.26 1214.49 L2157.68 1214.49 L2157.09 1214.49 L2156.5 1214.49 L2155.92 1214.49 L2155.33 1214.49 L2154.75 1214.49 L2154.16 1214.49 L2153.57 1214.49 L2152.99 1214.49 L2152.4 1214.49 L2151.81 1214.49 L2151.23 1214.49 L2150.64 1214.49 L2150.05 1214.49 L2149.47 1214.49 L2148.88 1214.49 L2148.3 1214.49 L2147.71 1214.49 L2147.12 1214.49 L2146.54 1214.49 L2145.95 1214.49 L2145.36 1214.49 L2144.78 1214.49 L2144.19 1214.49 L2143.6 1214.49 L2143.02 1214.49 L2142.43 1214.49 L2141.84 1214.49 L2141.26 1214.49 L2140.67 1214.49 L2140.09 1214.49 L2139.5 1214.49 L2138.91 1214.49 L2138.33 1214.49 L2137.74 1214.49 L2137.15 1214.49 L2136.57 1214.49 L2135.98 1214.49 L2135.39 1214.49 L2134.81 1214.49 L2134.22 1214.49 L2133.63 1214.49 L2133.05 1214.49 L2132.46 1214.49 L2131.88 1214.49 L2131.29 1214.49 L2130.7 1214.49 L2130.12 1214.49 L2129.53 1214.49 L2128.94 1214.49 L2128.36 1214.49 L2127.77 1214.49 L2127.18 1214.49 L2126.6 1214.49 L2126.01 1214.49 L2125.42 1214.49 L2124.84 1214.49 L2124.25 1214.49 L2123.67 1214.49 L2123.08 1214.49 L2122.49 1214.49 L2121.91 1214.49 L2121.32 1214.49 L2120.73 1214.49 L2120.15 1214.49 L2119.56 1214.49 L2118.97 1214.49 L2118.39 1214.49 L2117.8 1214.49 L2117.22 1214.49 L2116.63 1214.49 L2116.04 1214.49 L2115.46 1214.49 L2114.87 1214.49 L2114.28 1214.49 L2113.7 1214.49 L2113.11 1214.49 L2112.52 1214.49 L2111.94 1214.49 L2111.35 1214.49 L2110.76 1214.49 L2110.18 1214.49 L2109.59 1214.49 L2109.01 1214.49 L2108.42 1214.49 L2107.83 1214.49 L2107.25 1214.49 L2106.66 1214.49 L2106.07 1214.49 L2105.49 1214.49 L2104.9 1214.49 L2104.31 1214.49 L2103.73 1214.49 L2103.14 1214.49 L2102.55 1214.49 L2101.97 1214.49 L2101.38 1214.49 L2100.8 1214.49 L2100.21 1214.49 L2099.62 1214.49 L2099.04 1214.49 L2098.45 1214.49 L2097.86 1214.49 L2097.28 1214.49 L2096.69 1214.49 L2096.1 1214.49 L2095.52 1214.49 L2094.93 1214.49 L2094.35 1214.49 L2093.76 1214.49 L2093.17 1214.49 L2092.59 1214.49 L2092 1214.49 L2091.41 1214.49 L2090.83 1214.49 L2090.24 1214.49 L2089.65 1214.49 L2089.07 1214.49 L2088.48 1214.49 L2087.89 1214.49 L2087.31 1214.49 L2086.72 1214.49 L2086.14 1214.49 L2085.55 1214.49 L2084.96 1214.49 L2084.38 1214.49 L2083.79 1214.49 L2083.2 1214.49 L2082.62 1214.49 L2082.03 1214.49 L2081.44 1214.49 L2080.86 1214.49 L2080.27 1214.49 L2079.68 1214.49 L2079.1 1214.49 L2078.51 1214.49 L2077.93 1214.49 L2077.34 1214.49 L2076.75 1214.49 L2076.17 1214.49 L2075.58 1214.49 L2074.99 1214.49 L2074.41 1214.49 L2073.82 1214.49 L2073.23 1214.49 L2072.65 1214.49 L2072.06 1214.49 L2071.48 1214.49 L2070.89 1214.49 L2070.3 1214.49 L2069.72 1214.49 L2069.13 1214.49 L2068.54 1214.49 L2067.96 1214.49 L2067.37 1214.49 L2066.78 1214.49 L2066.2 1214.49 L2065.61 1214.49 L2065.02 1214.49 L2064.44 1214.49 L2063.85 1214.49 L2063.27 1214.49 L2062.68 1214.49 L2062.09 1214.49 L2061.51 1214.49 L2060.92 1214.49 L2060.33 1214.49 L2059.75 1214.49 L2059.16 1214.49 L2058.57 1214.49 L2057.99 1214.49 L2057.4 1214.49 L2056.81 1214.49 L2056.23 1214.49 L2055.64 1214.49 L2055.06 1214.49 L2054.47 1214.49 L2053.88 1214.49 L2053.3 1214.49 L2052.71 1214.49 L2052.12 1214.49 L2051.54 1214.49 L2050.95 1214.49 L2050.36 1214.49 L2049.78 1214.49 L2049.19 1214.49 L2048.6 1214.49 L2048.02 1214.49 L2047.43 1214.49 L2046.85 1214.49 L2046.26 1214.49 L2045.67 1214.49 L2045.09 1214.49 L2044.5 1214.49 L2043.91 1214.49 L2043.33 1214.49 L2042.74 1214.49 L2042.15 1214.49 L2041.57 1214.49 L2040.98 1214.49 L2040.4 1214.49 L2039.81 1214.49 L2039.22 1214.49 L2038.64 1214.49 L2038.05 1214.49 L2037.46 1214.49 L2036.88 1214.49 L2036.29 1214.49 L2035.7 1214.49 L2035.12 1214.49 L2034.53 1214.49 L2033.94 1214.49 L2033.36 1214.49 L2032.77 1214.49 L2032.19 1214.49 L2031.6 1214.49 L2031.01 1214.49 L2030.43 1214.49 L2029.84 1214.49 L2029.25 1214.49 L2028.67 1214.49 L2028.08 1214.49 L2027.49 1214.49 L2026.91 1214.49 L2026.32 1214.49 L2025.73 1214.49 L2025.15 1214.49 L2024.56 1214.49 L2023.98 1214.49 L2023.39 1214.49 L2022.8 1214.49 L2022.22 1214.49 L2021.63 1214.49 L2021.04 1214.49 L2020.46 1214.49 L2019.87 1214.49 L2019.28 1214.49 L2018.7 1214.49 L2018.11 1214.49 L2017.53 1214.49 L2016.94 1214.49 L2016.35 1214.49 L2015.77 1214.49 L2015.18 1214.49 L2014.59 1214.49 L2014.01 1214.49 L2013.42 1214.49 L2012.83 1214.49 L2012.25 1214.49 L2011.66 1214.49 L2011.07 1214.49 L2010.49 1214.49 L2009.9 1214.49 L2009.32 1214.49 L2008.73 1214.49 L2008.14 1214.49 L2007.56 1214.49 L2006.97 1214.49 L2006.38 1214.49 L2005.8 1214.49 L2005.21 1214.49 L2004.62 1214.49 L2004.04 1214.49 L2003.45 1214.49 L2002.86 1214.49 L2002.28 1214.49 L2001.69 1214.49 L2001.11 1214.49 L2000.52 1214.49 L1999.93 1214.49 L1999.35 1214.49 L1998.76 1214.49 L1998.17 1214.49 L1997.59 1214.49 L1997 1214.49 L1996.41 1214.49 L1995.83 1214.49 L1995.24 1214.49 L1994.65 1214.49 L1994.07 1214.49 L1993.48 1214.49 L1992.9 1214.49 L1992.31 1214.49 L1991.72 1214.49 L1991.14 1214.49 L1990.55 1214.49 L1989.96 1214.49 L1989.38 1214.49 L1988.79 1214.49 L1988.2 1214.49 L1987.62 1214.49 L1987.03 1214.49 L1986.45 1214.49 L1985.86 1214.49 L1985.27 1214.49 L1984.69 1214.49 L1984.1 1214.49 L1983.51 1214.49 L1982.93 1214.49 L1982.34 1214.49 L1981.75 1214.49 L1981.17 1214.49 L1980.58 1214.49 L1979.99 1214.49 L1979.41 1214.49 L1978.82 1214.49 L1978.24 1214.49 L1977.65 1214.49 L1977.06 1214.49 L1976.48 1214.49 L1975.89 1214.49 L1975.3 1214.49 L1974.72 1214.49 L1974.13 1214.49 L1973.54 1214.49 L1972.96 1214.49 L1972.37 1214.49 L1971.78 1214.49 L1971.2 1214.49 L1970.61 1214.49 L1970.03 1214.49 L1969.44 1214.49 L1968.85 1214.49 L1968.27 1214.49 L1967.68 1214.49 L1967.09 1214.49 L1966.51 1214.49 L1965.92 1214.49 L1965.33 1214.49 L1964.75 1214.49 L1964.16 1214.49 L1963.58 1214.49 L1962.99 1214.49 L1962.4 1214.49 L1961.82 1214.49 L1961.23 1214.49 L1960.64 1214.49 L1960.06 1214.49 L1959.47 1214.49 L1958.88 1214.49 L1958.3 1214.49 L1957.71 1214.49 L1957.12 1214.49 L1956.54 1214.49 L1955.95 1214.49 L1955.37 1214.49 L1954.78 1214.49 L1954.19 1214.49 L1953.61 1214.49 L1953.02 1214.49 L1952.43 1214.49 L1951.85 1214.49 L1951.26 1214.49 L1950.67 1214.49 L1950.09 1214.49 L1949.5 1214.49 L1948.91 1214.49 L1948.33 1214.49 L1947.74 1214.49 L1947.16 1214.49 L1946.57 1214.49 L1945.98 1214.49 L1945.4 1214.49 L1944.81 1214.49 L1944.22 1214.49 L1943.64 1214.49 L1943.05 1214.49 L1942.46 1214.49 L1941.88 1214.49 L1941.29 1214.49 L1940.71 1214.49 L1940.12 1214.49 L1939.53 1214.49 L1938.95 1214.49 L1938.36 1214.49 L1937.77 1214.49 L1937.19 1214.49 L1936.6 1214.49 L1936.01 1214.49 L1935.43 1214.49 L1934.84 1214.49 L1934.25 1214.49 L1933.67 1214.49 L1933.08 1214.49 L1932.5 1214.49 L1931.91 1214.49 L1931.32 1214.49 L1930.74 1214.49 L1930.15 1214.49 L1929.56 1214.49 L1928.98 1214.49 L1928.39 1214.49 L1927.8 1214.49 L1927.22 1214.49 L1926.63 1214.49 L1926.04 1214.49 L1925.46 1214.49 L1924.87 1214.49 L1924.29 1214.49 L1923.7 1214.49 L1923.11 1214.49 L1922.53 1214.49 L1921.94 1214.49 L1921.35 1214.49 L1920.77 1214.49 L1920.18 1214.49 L1919.59 1214.49 L1919.01 1214.49 L1918.42 1214.49 L1917.83 1214.49 L1917.25 1214.49 L1916.66 1214.49 L1916.08 1214.49 L1915.49 1214.49 L1914.9 1214.49 L1914.32 1214.49 L1913.73 1214.49 L1913.14 1214.49 L1912.56 1214.49 L1911.97 1214.49 L1911.38 1214.49 L1910.8 1214.49 L1910.21 1214.49 L1909.63 1214.49 L1909.04 1214.49 L1908.45 1214.49 L1907.87 1214.49 L1907.28 1214.49 L1906.69 1214.49 L1906.11 1214.49 L1905.52 1214.49 L1904.93 1214.49 L1904.35 1214.49 L1903.76 1214.49 L1903.17 1214.49 L1902.59 1214.49 L1902 1214.49 L1901.42 1214.49 L1900.83 1214.49 L1900.24 1214.49 L1899.66 1214.49 L1899.07 1214.49 L1898.48 1214.49 L1897.9 1214.49 L1897.31 1214.49 L1896.72 1214.49 L1896.14 1214.49 L1895.55 1214.49 L1894.96 1214.49 L1894.38 1214.49 L1893.79 1214.49 L1893.21 1214.49 L1892.62 1214.49 L1892.03 1214.49 L1891.45 1214.49 L1890.86 1214.49 L1890.27 1214.49 L1889.69 1214.49 L1889.1 1214.49 L1888.51 1214.49 L1887.93 1214.49 L1887.34 1214.49 L1886.76 1214.49 L1886.17 1214.49 L1885.58 1214.49 L1885 1214.49 L1884.41 1214.49 L1883.82 1214.49 L1883.24 1214.49 L1882.65 1214.49 L1882.06 1214.49 L1881.48 1214.49 L1880.89 1214.49 L1880.3 1214.49 L1879.72 1214.49 L1879.13 1214.49 L1878.55 1214.49 L1877.96 1214.49 L1877.37 1214.49 L1876.79 1214.49 L1876.2 1214.49 L1875.61 1214.49 L1875.03 1214.49 L1874.44 1214.49 L1873.85 1214.49 L1873.27 1214.49 L1872.68 1214.49 L1872.09 1214.49 L1871.51 1214.49 L1870.92 1214.49 L1870.34 1214.49 L1869.75 1214.49 L1869.16 1214.49 L1868.58 1214.49 L1867.99 1214.49 L1867.4 1214.49 L1866.82 1214.49 L1866.23 1214.49 L1865.64 1214.49 L1865.06 1214.49 L1864.47 1214.49 L1863.88 1214.49 L1863.3 1214.49 L1862.71 1214.49 L1862.13 1214.49 L1861.54 1214.49 L1860.95 1214.49 L1860.37 1214.49 L1859.78 1214.49 L1859.19 1214.49 L1858.61 1214.49 L1858.02 1214.49 L1857.43 1214.49 L1856.85 1214.49 L1856.26 1214.49 L1855.68 1214.49 L1855.09 1214.49 L1854.5 1214.49 L1853.92 1214.49 L1853.33 1214.49 L1852.74 1214.49 L1852.16 1214.49 L1851.57 1214.49 L1850.98 1214.49 L1850.4 1214.49 L1849.81 1214.49 L1849.22 1214.49 L1848.64 1214.49 L1848.05 1214.49 L1847.47 1214.49 L1846.88 1214.49 L1846.29 1214.49 L1845.71 1214.49 L1845.12 1214.49 L1844.53 1214.49 L1843.95 1214.49 L1843.36 1214.49 L1842.77 1214.49 L1842.19 1214.49 L1841.6 1214.49 L1841.01 1214.49 L1840.43 1214.49 L1839.84 1214.49 L1839.26 1214.49 L1838.67 1214.49 L1838.08 1214.49 L1837.5 1214.49 L1836.91 1214.49 L1836.32 1214.49 L1835.74 1214.49 L1835.15 1214.49 L1834.56 1214.49 L1833.98 1214.49 L1833.39 1214.49 L1832.81 1214.49 L1832.22 1214.49 L1831.63 1214.49 L1831.05 1214.49 L1830.46 1214.49 L1829.87 1214.49 L1829.29 1214.49 L1828.7 1214.49 L1828.11 1214.49 L1827.53 1214.49 L1826.94 1214.49 L1826.35 1214.49 L1825.77 1214.49 L1825.18 1214.49 L1824.6 1214.49 L1824.01 1214.49 L1823.42 1214.49 L1822.84 1214.49 L1822.25 1214.49 L1821.66 1214.49 L1821.08 1214.49 L1820.49 1214.49 L1819.9 1214.49 L1819.32 1214.49 L1818.73 1214.49 L1818.14 1214.49 L1817.56 1214.49 L1816.97 1214.49 L1816.39 1214.49 L1815.8 1214.49 L1815.21 1214.49 L1814.63 1214.49 L1814.04 1214.49 L1813.45 1214.49 L1812.87 1214.49 L1812.28 1214.49 L1811.69 1214.49 L1811.11 1214.49 L1810.52 1214.49 L1809.94 1214.49 L1809.35 1214.49 L1808.76 1214.49 L1808.18 1214.49 L1807.59 1214.49 L1807 1214.49 L1806.42 1214.49 L1805.83 1214.49 L1805.24 1214.49 L1804.66 1214.49 L1804.07 1214.49 L1803.48 1214.49 L1802.9 1214.49 L1802.31 1214.49 L1801.73 1214.49 L1801.14 1214.49 L1800.55 1214.49 L1799.97 1214.49 L1799.38 1214.49 L1798.79 1214.49 L1798.21 1214.49 L1797.62 1214.49 L1797.03 1214.49 L1796.45 1214.49 L1795.86 1214.49 L1795.27 1214.49 L1794.69 1214.49 L1794.1 1214.49 L1793.52 1214.49 L1792.93 1214.49 L1792.34 1214.49 L1791.76 1214.49 L1791.17 1214.49 L1790.58 1214.49 L1790 1214.49 L1789.41 1214.49 L1788.82 1214.49 L1788.24 1214.49 L1787.65 1214.49 L1787.06 1214.49 L1786.48 1214.49 L1785.89 1214.49 L1785.31 1214.49 L1784.72 1214.49 L1784.13 1214.49 L1783.55 1214.49 L1782.96 1214.49 L1782.37 1214.49 L1781.79 1214.49 L1781.2 1214.49 L1780.61 1214.49 L1780.03 1214.49 L1779.44 1214.49 L1778.86 1214.49 L1778.27 1214.49 L1777.68 1214.49 L1777.1 1214.49 L1776.51 1214.49 L1775.92 1214.49 L1775.34 1214.49 L1774.75 1214.49 L1774.16 1214.49 L1773.58 1214.49 L1772.99 1214.49 L1772.4 1214.49 L1771.82 1214.49 L1771.23 1214.49 L1770.65 1214.49 L1770.06 1214.49 L1769.47 1214.49 L1768.89 1214.49 L1768.3 1214.49 L1767.71 1214.49 L1767.13 1214.49 L1766.54 1214.49 L1765.95 1214.49 L1765.37 1214.49 L1764.78 1214.49 L1764.19 1214.49 L1763.61 1214.49 L1763.02 1214.49 L1762.44 1214.49 L1761.85 1214.49 L1761.26 1214.49 L1760.68 1214.49 L1760.09 1214.49 L1759.5 1214.49 L1758.92 1214.49 L1758.33 1214.49 L1757.74 1214.49 L1757.16 1214.49 L1756.57 1214.49 L1755.99 1214.49 L1755.4 1214.49 L1754.81 1214.49 L1754.23 1214.49 L1753.64 1214.49 L1753.05 1214.49 L1752.47 1214.49 L1751.88 1214.49 L1751.29 1214.49 L1750.71 1214.49 L1750.12 1214.49 L1749.53 1214.49 L1748.95 1214.49 L1748.36 1214.49 L1747.78 1214.49 L1747.19 1214.49 L1746.6 1214.49 L1746.02 1214.49 L1745.43 1214.49 L1744.84 1214.49 L1744.26 1214.49 L1743.67 1214.49 L1743.08 1214.49 L1742.5 1214.49 L1741.91 1214.49 L1741.32 1214.49 L1740.74 1214.49 L1740.15 1214.49 L1739.57 1214.49 L1738.98 1214.49 L1738.39 1214.49 L1737.81 1214.49 L1737.22 1214.49 L1736.63 1214.49 L1736.05 1214.49 L1735.46 1214.49 L1734.87 1214.49 L1734.29 1214.49 L1733.7 1214.49 L1733.11 1214.49 L1732.53 1214.49 L1731.94 1214.49 L1731.36 1214.49 L1730.77 1214.49 L1730.18 1214.49 L1729.6 1214.49 L1729.01 1214.49 L1728.42 1214.49 L1727.84 1214.49 L1727.25 1214.49 L1726.66 1214.49 L1726.08 1214.49 L1725.49 1214.49 L1724.91 1214.49 L1724.32 1214.49 L1723.73 1214.49 L1723.15 1214.49 L1722.56 1214.49 L1721.97 1214.49 L1721.39 1214.49 L1720.8 1214.49 L1720.21 1214.49 L1719.63 1214.49 L1719.04 1214.49 L1718.45 1214.49 L1717.87 1214.49 L1717.28 1214.49 L1716.7 1214.49 L1716.11 1214.49 L1715.52 1214.49 L1714.94 1214.49 L1714.35 1214.49 L1713.76 1214.49 L1713.18 1214.49 L1712.59 1214.49 L1712 1214.49 L1711.42 1214.49 L1710.83 1214.49 L1710.24 1214.49 L1709.66 1214.49 L1709.07 1214.49 L1708.49 1214.49 L1707.9 1214.49 L1707.31 1214.49 L1706.73 1214.49 L1706.14 1214.49 L1705.55 1214.49 L1704.97 1214.49 L1704.38 1214.49 L1703.79 1214.49 L1703.21 1214.49 L1702.62 1214.49 L1702.04 1214.49 L1701.45 1214.49 L1700.86 1214.49 L1700.28 1214.49 L1699.69 1214.49 L1699.1 1214.49 L1698.52 1214.49 L1697.93 1214.49 L1697.34 1214.49 L1696.76 1214.49 L1696.17 1214.49 L1695.58 1214.49 L1695 1214.49 L1694.41 1214.49 L1693.83 1214.49 L1693.24 1214.49 L1692.65 1214.49 L1692.07 1214.49 L1691.48 1214.49 L1690.89 1214.49 L1690.31 1214.49 L1689.72 1214.49 L1689.13 1214.49 L1688.55 1214.49 L1687.96 1214.49 L1687.37 1214.49 L1686.79 1214.49 L1686.2 1214.49 L1685.62 1214.49 L1685.03 1214.49 L1684.44 1214.49 L1683.86 1214.49 L1683.27 1214.49 L1682.68 1214.49 L1682.1 1214.49 L1681.51 1214.49 L1680.92 1214.49 L1680.34 1214.49 L1679.75 1214.49 L1679.17 1214.49 L1678.58 1214.49 L1677.99 1214.49 L1677.41 1214.49 L1676.82 1214.49 L1676.23 1214.49 L1675.65 1214.49 L1675.06 1214.49 L1674.47 1214.49 L1673.89 1214.49 L1673.3 1214.49 L1672.71 1214.49 L1672.13 1214.49 L1671.54 1214.49 L1670.96 1214.49 L1670.37 1214.49 L1669.78 1214.49 L1669.2 1214.49 L1668.61 1214.49 L1668.02 1214.49 L1667.44 1214.49 L1666.85 1214.49 L1666.26 1214.49 L1665.68 1214.49 L1665.09 1214.49 L1664.5 1214.49 L1663.92 1214.49 L1663.33 1214.49 L1662.75 1214.49 L1662.16 1214.49 L1661.57 1214.49 L1660.99 1214.49 L1660.4 1214.49 L1659.81 1214.49 L1659.23 1214.49 L1658.64 1214.49 L1658.05 1214.49 L1657.47 1214.49 L1656.88 1214.49 L1656.29 1214.49 L1655.71 1214.49 L1655.12 1214.49 L1654.54 1214.49 L1653.95 1214.49 L1653.36 1214.49 L1652.78 1214.49 L1652.19 1214.49 L1651.6 1214.49 L1651.02 1214.49 L1650.43 1214.49 L1649.84 1214.49 L1649.26 1214.49 L1648.67 1214.49 L1648.09 1214.49 L1647.5 1214.49 L1646.91 1214.49 L1646.33 1214.49 L1645.74 1214.49 L1645.15 1214.49 L1644.57 1214.49 L1643.98 1214.49 L1643.39 1214.49 L1642.81 1214.49 L1642.22 1214.49 L1641.63 1214.49 L1641.05 1214.49 L1640.46 1214.49 L1639.88 1214.49 L1639.29 1214.49 L1638.7 1214.49 L1638.12 1214.49 L1637.53 1214.49 L1636.94 1214.49 L1636.36 1214.49 L1635.77 1214.49 L1635.18 1214.49 L1634.6 1214.49 L1634.01 1214.49 L1633.42 1214.49 L1632.84 1214.49 L1632.25 1214.49 L1631.67 1214.49 L1631.08 1214.49 L1630.49 1214.49 L1629.91 1214.49 L1629.32 1214.49 L1628.73 1214.49 L1628.15 1214.49 L1627.56 1214.49 L1626.97 1214.49 L1626.39 1214.49 L1625.8 1214.49 L1625.22 1214.49 L1624.63 1214.49 L1624.04 1214.49 L1623.46 1214.49 L1622.87 1214.49 L1622.28 1214.49 L1621.7 1214.49 L1621.11 1214.49 L1620.52 1214.49 L1619.94 1214.49 L1619.35 1214.49 L1618.76 1214.49 L1618.18 1214.49 L1617.59 1214.49 L1617.01 1214.49 L1616.42 1214.49 L1615.83 1214.49 L1615.25 1214.49 L1614.66 1214.49 L1614.07 1214.49 L1613.49 1214.49 L1612.9 1214.49 L1612.31 1214.49 L1611.73 1214.49 L1611.14 1214.49 L1610.55 1214.49 L1609.97 1214.49 L1609.38 1214.49 L1608.8 1214.49 L1608.21 1214.49 L1607.62 1214.49 L1607.04 1214.49 L1606.45 1214.49 L1605.86 1214.49 L1605.28 1214.49 L1604.69 1214.49 L1604.1 1214.49 L1603.52 1214.49 L1602.93 1214.49 L1602.34 1214.49 L1601.76 1214.49 L1601.17 1214.49 L1600.59 1214.49 L1600 1214.49 L1599.41 1214.49 L1598.83 1214.49 L1598.24 1214.49 L1597.65 1214.49 L1597.07 1214.49 L1596.48 1214.49 L1595.89 1214.49 L1595.31 1214.49 L1594.72 1214.49 L1594.14 1214.49 L1593.55 1214.49 L1592.96 1214.49 L1592.38 1214.49 L1591.79 1214.49 L1591.2 1214.49 L1590.62 1214.49 L1590.03 1214.49 L1589.44 1214.49 L1588.86 1214.49 L1588.27 1214.49 L1587.68 1214.49 L1587.1 1214.49 L1586.51 1214.49 L1585.93 1214.49 L1585.34 1214.49 L1584.75 1214.49 L1584.17 1214.49 L1583.58 1214.49 L1582.99 1214.49 L1582.41 1214.49 L1581.82 1214.49 L1581.23 1214.49 L1580.65 1214.49 L1580.06 1214.49 L1579.47 1214.49 L1578.89 1214.49 L1578.3 1214.49 L1577.72 1214.49 L1577.13 1214.49 L1576.54 1214.49 L1575.96 1214.49 L1575.37 1214.49 L1574.78 1214.49 L1574.2 1214.49 L1573.61 1214.49 L1573.02 1214.49 L1572.44 1214.49 L1571.85 1214.49 L1571.27 1214.49 L1570.68 1214.49 L1570.09 1214.49 L1569.51 1214.49 L1568.92 1214.49 L1568.33 1214.49 L1567.75 1214.49 L1567.16 1214.49 L1566.57 1214.49 L1565.99 1214.49 L1565.4 1214.49 L1564.81 1214.49 L1564.23 1214.49 L1563.64 1214.49 L1563.06 1214.49 L1562.47 1214.49 L1561.88 1214.49 L1561.3 1214.49 L1560.71 1214.49 L1560.12 1214.49 L1559.54 1214.49 L1558.95 1214.49 L1558.36 1214.49 L1557.78 1214.49 L1557.19 1214.49 L1556.6 1214.49 L1556.02 1214.49 L1555.43 1214.49 L1554.85 1214.49 L1554.26 1214.49 L1553.67 1214.49 L1553.09 1214.49 L1552.5 1214.49 L1551.91 1214.49 L1551.33 1214.49 L1550.74 1214.49 L1550.15 1214.49 L1549.57 1214.49 L1548.98 1214.49 L1548.4 1214.49 L1547.81 1214.49 L1547.22 1214.49 L1546.64 1214.49 L1546.05 1214.49 L1545.46 1214.49 L1544.88 1214.49 L1544.29 1214.49 L1543.7 1214.49 L1543.12 1214.49 L1542.53 1214.49 L1541.94 1214.49 L1541.36 1214.49 L1540.77 1214.49 L1540.19 1214.49 L1539.6 1214.49 L1539.01 1214.49 L1538.43 1214.49 L1537.84 1214.49 L1537.25 1214.49 L1536.67 1214.49 L1536.08 1214.49 L1535.49 1214.49 L1534.91 1214.49 L1534.32 1214.49 L1533.73 1214.49 L1533.15 1214.49 L1532.56 1214.49 L1531.98 1214.49 L1531.39 1214.49 L1530.8 1214.49 L1530.22 1214.49 L1529.63 1214.49 L1529.04 1214.49 L1528.46 1214.49 L1527.87 1214.49 L1527.28 1214.49 L1526.7 1214.49 L1526.11 1214.49 L1525.52 1214.49 L1524.94 1214.49 L1524.35 1214.49 L1523.77 1214.49 L1523.18 1214.49 L1522.59 1214.49 L1522.01 1214.49 L1521.42 1214.49 L1520.83 1214.49 L1520.25 1214.49 L1519.66 1214.49 L1519.07 1214.49 L1518.49 1214.49 L1517.9 1214.49 L1517.32 1214.49 L1516.73 1214.49 L1516.14 1214.49 L1515.56 1214.49 L1514.97 1214.49 L1514.38 1214.49 L1513.8 1214.49 L1513.21 1214.49 L1512.62 1214.49 L1512.04 1214.49 L1511.45 1214.49 L1510.86 1214.49 L1510.28 1214.49 L1509.69 1214.49 L1509.11 1214.49 L1508.52 1214.49 L1507.93 1214.49 L1507.35 1214.49 L1506.76 1214.49 L1506.17 1214.49 L1505.59 1214.49 L1505 1214.49 L1504.41 1214.49 L1503.83 1214.49 L1503.24 1214.49 L1502.65 1214.49 L1502.07 1214.49 L1501.48 1214.49 L1500.9 1214.49 L1500.31 1214.49 L1499.72 1214.49 L1499.14 1214.49 L1498.55 1214.49 L1497.96 1214.49 L1497.38 1214.49 L1496.79 1214.49 L1496.2 1214.49 L1495.62 1214.49 L1495.03 1214.49 L1494.45 1214.49 L1493.86 1214.49 L1493.27 1214.49 L1492.69 1214.49 L1492.1 1214.49 L1491.51 1214.49 L1490.93 1214.49 L1490.34 1214.49 L1489.75 1214.49 L1489.17 1214.49 L1488.58 1214.49 L1487.99 1214.49 L1487.41 1214.49 L1486.82 1214.49 L1486.24 1214.49 L1485.65 1214.49 L1485.06 1214.49 L1484.48 1214.49 L1483.89 1214.49 L1483.3 1214.49 L1482.72 1214.49 L1482.13 1214.49 L1481.54 1214.49 L1480.96 1214.49 L1480.37 1214.49 L1479.78 1214.49 L1479.2 1214.49 L1478.61 1214.49 L1478.03 1214.49 L1477.44 1214.49 L1476.85 1214.49 L1476.27 1214.49 L1475.68 1214.49 L1475.09 1214.49 L1474.51 1214.49 L1473.92 1214.49 L1473.33 1214.49 L1472.75 1214.49 L1472.16 1214.49 L1471.57 1214.49 L1470.99 1214.49 L1470.4 1214.49 L1469.82 1214.49 L1469.23 1214.49 L1468.64 1214.49 L1468.06 1214.49 L1467.47 1214.49 L1466.88 1214.49 L1466.3 1214.49 L1465.71 1214.49 L1465.12 1214.49 L1464.54 1214.49 L1463.95 1214.49 L1463.37 1214.49 L1462.78 1214.49 L1462.19 1214.49 L1461.61 1214.49 L1461.02 1214.49 L1460.43 1214.49 L1459.85 1214.49 L1459.26 1214.49 L1458.67 1214.49 L1458.09 1214.49 L1457.5 1214.49 L1456.91 1214.49 L1456.33 1214.49 L1455.74 1214.49 L1455.16 1214.49 L1454.57 1214.49 L1453.98 1214.49 L1453.4 1214.49 L1452.81 1214.49 L1452.22 1214.49 L1451.64 1214.49 L1451.05 1214.49 L1450.46 1214.49 L1449.88 1214.49 L1449.29 1214.49 L1448.7 1214.49 L1448.12 1214.49 L1447.53 1214.49 L1446.95 1214.49 L1446.36 1214.49 L1445.77 1214.49 L1445.19 1214.49 L1444.6 1214.49 L1444.01 1214.49 L1443.43 1214.49 L1442.84 1214.49 L1442.25 1214.49 L1441.67 1214.49 L1441.08 1214.49 L1440.5 1214.49 L1439.91 1214.49 L1439.32 1214.49 L1438.74 1214.49 L1438.15 1214.49 L1437.56 1214.49 L1436.98 1214.49 L1436.39 1214.49 L1435.8 1214.49 L1435.22 1214.49 L1434.63 1214.49 L1434.04 1214.49 L1433.46 1214.49 L1432.87 1214.49 L1432.29 1214.49 L1431.7 1214.49 L1431.11 1214.49 L1430.53 1214.49 L1429.94 1214.49 L1429.35 1214.49 L1428.77 1214.49 L1428.18 1214.49 L1427.59 1214.49 L1427.01 1214.49 L1426.42 1214.49 L1425.83 1214.49 L1425.25 1214.49 L1424.66 1214.49 L1424.08 1214.49 L1423.49 1214.49 L1422.9 1214.49 L1422.32 1214.49 L1421.73 1214.49 L1421.14 1214.49 L1420.56 1214.49 L1419.97 1214.49 L1419.38 1214.49 L1418.8 1214.49 L1418.21 1214.49 L1417.63 1214.49 L1417.04 1214.49 L1416.45 1214.49 L1415.87 1214.49 L1415.28 1214.49 L1414.69 1214.49 L1414.11 1214.49 L1413.52 1214.49 L1412.93 1214.49 L1412.35 1214.49 L1411.76 1214.49 L1411.17 1214.49 L1410.59 1214.49 L1410 1214.49 L1409.42 1214.49 L1408.83 1214.49 L1408.24 1214.49 L1407.66 1214.49 L1407.07 1214.49 L1406.48 1214.49 L1405.9 1214.49 L1405.31 1214.49 L1404.72 1214.49 L1404.14 1214.49 L1403.55 1214.49 L1402.96 1214.49 L1402.38 1214.49 L1401.79 1214.49 L1401.21 1214.49 L1400.62 1214.49 L1400.03 1214.49 L1399.45 1214.49 L1398.86 1214.49 L1398.27 1214.49 L1397.69 1214.49 L1397.1 1214.49 L1396.51 1214.49 L1395.93 1214.49 L1395.34 1214.49 L1394.75 1214.49 L1394.17 1214.49 L1393.58 1214.49 L1393 1214.49 L1392.41 1214.49 L1391.82 1214.49 L1391.24 1214.49 L1390.65 1214.49 L1390.06 1214.49 L1389.48 1214.49 L1388.89 1214.49 L1388.3 1214.49 L1387.72 1214.49 L1387.13 1214.49 L1386.55 1214.49 L1385.96 1214.49 L1385.37 1214.49 L1384.79 1214.49 L1384.2 1214.49 L1383.61 1214.49 L1383.03 1214.49 L1382.44 1214.49 L1381.85 1214.49 L1381.27 1214.49 L1380.68 1214.49 L1380.09 1214.49 L1379.51 1214.49 L1378.92 1214.49 L1378.34 1214.49 L1377.75 1214.49 L1377.16 1214.49 L1376.58 1214.49 L1375.99 1214.49 L1375.4 1214.49 L1374.82 1214.49 L1374.23 1214.49 L1373.64 1214.49 L1373.06 1214.49 L1372.47 1214.49 L1371.88 1214.49 L1371.3 1214.49 L1370.71 1214.49 L1370.13 1214.49 L1369.54 1214.49 L1368.95 1214.49 L1368.37 1214.49 L1367.78 1214.49 L1367.19 1214.49 L1366.61 1214.49 L1366.02 1214.49 L1365.43 1214.49 L1364.85 1214.49 L1364.26 1214.49 L1363.68 1214.49 L1363.09 1214.49 L1362.5 1214.49 L1361.92 1214.49 L1361.33 1214.49 L1360.74 1214.49 L1360.16 1214.49 L1359.57 1214.49 L1358.98 1214.49 L1358.4 1214.49 L1357.81 1214.49 L1357.22 1214.49 L1356.64 1214.49 L1356.05 1214.49 L1355.47 1214.49 L1354.88 1214.49 L1354.29 1214.49 L1353.71 1214.49 L1353.12 1214.49 L1352.53 1214.49 L1351.95 1214.49 L1351.36 1214.49 L1350.77 1214.49 L1350.19 1214.49 L1349.6 1214.49 L1349.01 1214.49 L1348.43 1214.49 L1347.84 1214.49 L1347.26 1214.49 L1346.67 1214.49 L1346.08 1214.49 L1345.5 1214.49 L1344.91 1214.49 L1344.32 1214.49 L1343.74 1214.49 L1343.15 1214.49 L1342.56 1214.49 L1341.98 1214.49 L1341.39 1214.49 L1340.8 1214.49 L1340.22 1214.49 L1339.63 1214.49 L1339.05 1214.49 L1338.46 1214.49 L1337.87 1214.49 L1337.29 1214.49 L1336.7 1214.49 L1336.11 1214.49 L1335.53 1214.49 L1334.94 1214.49 L1334.35 1214.49 L1333.77 1214.49 L1333.18 1214.49 L1332.6 1214.49 L1332.01 1214.49 L1331.42 1214.49 L1330.84 1214.49 L1330.25 1214.49 L1329.66 1214.49 L1329.08 1214.49 L1328.49 1214.49 L1327.9 1214.49 L1327.32 1214.49 L1326.73 1214.49 L1326.14 1214.49 L1325.56 1214.49 L1324.97 1214.49 L1324.39 1214.49 L1323.8 1214.49 L1323.21 1214.49 L1322.63 1214.49 L1322.04 1214.49 L1321.45 1214.49 L1320.87 1214.49 L1320.28 1214.49 L1319.69 1214.49 L1319.11 1214.49 L1318.52 1214.49 L1317.93 1214.49 L1317.35 1214.49 L1316.76 1214.49 L1316.18 1214.49 L1315.59 1214.49 L1315 1214.49 L1314.42 1214.49 L1313.83 1214.49 L1313.24 1214.49 L1312.66 1214.49 L1312.07 1214.49 L1311.48 1214.49 L1310.9 1214.49 L1310.31 1214.49 L1309.73 1214.49 L1309.14 1214.49 L1308.55 1214.49 L1307.97 1214.49 L1307.38 1214.49 L1306.79 1214.49 L1306.21 1214.49 L1305.62 1214.49 L1305.03 1214.49 L1304.45 1214.49 L1303.86 1214.49 L1303.27 1214.49 L1302.69 1214.49 L1302.1 1214.49 L1301.52 1214.49 L1300.93 1214.49 L1300.34 1214.49 L1299.76 1214.49 L1299.17 1214.49 L1298.58 1214.49 L1298 1214.49 L1297.41 1214.49 L1296.82 1214.49 L1296.24 1214.49 L1295.65 1214.49 L1295.06 1214.49 L1294.48 1214.49 L1293.89 1214.49 L1293.31 1214.49 L1292.72 1214.49 L1292.13 1214.49 L1291.55 1214.49 L1290.96 1214.49 L1290.37 1214.49 L1289.79 1214.49 L1289.2 1214.49 L1288.61 1214.49 L1288.03 1214.49 L1287.44 1214.49 L1286.86 1214.49 L1286.27 1214.49 L1285.68 1214.49 L1285.1 1214.49 L1284.51 1214.49 L1283.92 1214.49 L1283.34 1214.49 L1282.75 1214.49 L1282.16 1214.49 L1281.58 1214.49 L1280.99 1214.49 L1280.4 1214.49 L1279.82 1214.49 L1279.23 1214.49 L1278.65 1214.49 L1278.06 1214.49 L1277.47 1214.49 L1276.89 1214.49 L1276.3 1214.49 L1275.71 1214.49 L1275.13 1214.49 L1274.54 1214.49 L1273.95 1214.49 L1273.37 1214.49 L1272.78 1214.49 L1272.19 1214.49 L1271.61 1214.49 L1271.02 1214.49 L1270.44 1214.49 L1269.85 1214.49 L1269.26 1214.49 L1268.68 1214.49 L1268.09 1214.49 L1267.5 1214.49 L1266.92 1214.49 L1266.33 1214.49 L1265.74 1214.49 L1265.16 1214.49 L1264.57 1214.49 L1263.98 1214.49 L1263.4 1214.49 L1262.81 1214.49 L1262.23 1214.49 L1261.64 1214.49 L1261.05 1214.49 L1260.47 1214.49 L1259.88 1214.49 L1259.29 1214.49 L1258.71 1214.49 L1258.12 1214.49 L1257.53 1214.49 L1256.95 1214.49 L1256.36 1214.49 L1255.78 1214.49 L1255.19 1214.49 L1254.6 1214.49 L1254.02 1214.49 L1253.43 1214.49 L1252.84 1214.49 L1252.26 1214.49 L1251.67 1214.49 L1251.08 1214.49 L1250.5 1214.49 L1249.91 1214.49 L1249.32 1214.49 L1248.74 1214.49 L1248.15 1214.49 L1247.57 1214.49 L1246.98 1214.49 L1246.39 1214.49 L1245.81 1214.49 L1245.22 1214.49 L1244.63 1214.49 L1244.05 1214.49 L1243.46 1214.49 L1242.87 1214.49 L1242.29 1214.49 L1241.7 1214.49 L1241.11 1214.49 L1240.53 1214.49 L1239.94 1214.49 L1239.36 1214.49 L1238.77 1214.49 L1238.18 1214.49 L1237.6 1214.49 L1237.01 1214.49 L1236.42 1214.49 L1235.84 1214.49 L1235.25 1214.49 L1234.66 1214.49 L1234.08 1214.49 L1233.49 1214.49 L1232.91 1214.49 L1232.32 1214.49 L1231.73 1214.49 L1231.15 1214.49 L1230.56 1214.49 L1229.97 1214.49 L1229.39 1214.49 L1228.8 1214.49 L1228.21 1214.49 L1227.63 1214.49 L1227.04 1214.49 L1226.45 1214.49 L1225.87 1214.49 L1225.28 1214.49 L1224.7 1214.49 L1224.11 1214.49 L1223.52 1214.49 L1222.94 1214.49 L1222.35 1214.49 L1221.76 1214.49 L1221.18 1214.49 L1220.59 1214.49 L1220 1214.49 L1219.42 1214.49 L1218.83 1214.49 L1218.24 1214.49 L1217.66 1214.49 L1217.07 1214.49 L1216.49 1214.49 L1215.9 1214.49 L1215.31 1214.49 L1214.73 1214.49 L1214.14 1214.49 L1213.55 1214.49 L1212.97 1214.49 L1212.38 1214.49 L1211.79 1214.49 L1211.21 1214.49 L1210.62 1214.49 L1210.03 1214.49 L1209.45 1214.49 L1208.86 1214.49 L1208.28 1214.49 L1207.69 1214.49 L1207.1 1214.49 L1206.52 1214.49 L1205.93 1214.49 L1205.34 1214.49 L1204.76 1214.49 L1204.17 1214.49 L1203.58 1214.49 L1203 1214.49 L1202.41 1214.49 L1201.83 1214.49 L1201.24 1214.49 L1200.65 1214.49 L1200.07 1214.49 L1199.48 1214.49 L1198.89 1214.49 L1198.31 1214.49 L1197.72 1214.49 L1197.13 1214.49 L1196.55 1214.49 L1195.96 1214.49 L1195.37 1214.49 L1194.79 1214.49 L1194.2 1214.49 L1193.62 1214.49 L1193.03 1214.49 L1192.44 1214.49 L1191.86 1214.49 L1191.27 1214.49 L1190.68 1214.49 L1190.1 1214.49 L1189.51 1214.49 L1188.92 1214.49 L1188.34 1214.49 L1187.75 1214.49 L1187.16 1214.49 L1186.58 1214.49 L1185.99 1214.49 L1185.41 1214.49 L1184.82 1214.49 L1184.23 1214.49 L1183.65 1214.49 L1183.06 1214.49 L1182.47 1214.49 L1181.89 1214.49 L1181.3 1214.49 L1180.71 1214.49 L1180.13 1214.49 L1179.54 1214.49 L1178.96 1214.49 L1178.37 1214.49 L1177.78 1214.49 L1177.2 1214.49 L1176.61 1214.49 L1176.02 1214.49 L1175.44 1214.49 L1174.85 1214.49 L1174.26 1214.49 L1173.68 1214.49 L1173.09 1214.49 L1172.5 1214.49 L1171.92 1214.49 L1171.33 1214.49 L1170.75 1214.49 L1170.16 1214.49 L1169.57 1214.49 L1168.99 1214.49 L1168.4 1214.49 L1167.81 1214.49 L1167.23 1214.49 L1166.64 1214.49 L1166.05 1214.49 L1165.47 1214.49 L1164.88 1214.49 L1164.29 1214.49 L1163.71 1214.49 L1163.12 1214.49 L1162.54 1214.49 L1161.95 1214.49 L1161.36 1214.49 L1160.78 1214.49 L1160.19 1214.49 L1159.6 1214.49 L1159.02 1214.49 L1158.43 1214.49 L1157.84 1214.49 L1157.26 1214.49 L1156.67 1214.49 L1156.09 1214.49 L1155.5 1214.49 L1154.91 1214.49 L1154.33 1214.49 L1153.74 1214.49 L1153.15 1214.49 L1152.57 1214.49 L1151.98 1214.49 L1151.39 1214.49 L1150.81 1214.49 L1150.22 1214.49 L1149.63 1214.49 L1149.05 1214.49 L1148.46 1214.49 L1147.88 1214.49 L1147.29 1214.49 L1146.7 1214.49 L1146.12 1214.49 L1145.53 1214.49 L1144.94 1214.49 L1144.36 1214.49 L1143.77 1214.49 L1143.18 1214.49 L1142.6 1214.49 L1142.01 1214.49 L1141.42 1214.49 L1140.84 1214.49 L1140.25 1214.49 L1139.67 1214.49 L1139.08 1214.49 L1138.49 1214.49 L1137.91 1214.49 L1137.32 1214.49 L1136.73 1214.49 L1136.15 1214.49 L1135.56 1214.49 L1134.97 1214.49 L1134.39 1214.49 L1133.8 1214.49 L1133.21 1214.49 L1132.63 1214.49 L1132.04 1214.49 L1131.46 1214.49 L1130.87 1214.49 L1130.28 1214.49 L1129.7 1214.49 L1129.11 1214.49 L1128.52 1214.49 L1127.94 1214.49 L1127.35 1214.49 L1126.76 1214.49 L1126.18 1214.49 L1125.59 1214.49 L1125.01 1214.49 L1124.42 1214.49 L1123.83 1214.49 L1123.25 1214.49 L1122.66 1214.49 L1122.07 1214.49 L1121.49 1214.49 L1120.9 1214.49 L1120.31 1214.49 L1119.73 1214.49 L1119.14 1214.49 L1118.55 1214.49 L1117.97 1214.49 L1117.38 1214.49 L1116.8 1214.49 L1116.21 1214.49 L1115.62 1214.49 L1115.04 1214.49 L1114.45 1214.49 L1113.86 1214.49 L1113.28 1214.49 L1112.69 1214.49 L1112.1 1214.49 L1111.52 1214.49 L1110.93 1214.49 L1110.34 1214.49 L1109.76 1214.49 L1109.17 1214.49 L1108.59 1214.49 L1108 1214.49 L1107.41 1214.49 L1106.83 1214.49 L1106.24 1214.49 L1105.65 1214.49 L1105.07 1214.49 L1104.48 1214.49 L1103.89 1214.49 L1103.31 1214.49 L1102.72 1214.49 L1102.14 1214.49 L1101.55 1214.49 L1100.96 1214.49 L1100.38 1214.49 L1099.79 1214.49 L1099.2 1214.49 L1098.62 1214.49 L1098.03 1214.49 L1097.44 1214.49 L1096.86 1214.49 L1096.27 1214.49 L1095.68 1214.49 L1095.1 1214.49 L1094.51 1214.49 L1093.93 1214.49 L1093.34 1214.49 L1092.75 1214.49 L1092.17 1214.49 L1091.58 1214.49 L1090.99 1214.49 L1090.41 1214.49 L1089.82 1214.49 L1089.23 1214.49 L1088.65 1214.49 L1088.06 1214.49 L1087.47 1214.49 L1086.89 1214.49 L1086.3 1214.49 L1085.72 1214.49 L1085.13 1214.49 L1084.54 1214.49 L1083.96 1214.49 L1083.37 1214.49 L1082.78 1214.49 L1082.2 1214.49 L1081.61 1214.49 L1081.02 1214.49 L1080.44 1214.49 L1079.85 1214.49 L1079.26 1214.49 L1078.68 1214.49 L1078.09 1214.49 L1077.51 1214.49 L1076.92 1214.49 L1076.33 1214.49 L1075.75 1214.49 L1075.16 1214.49 L1074.57 1214.49 L1073.99 1214.49 L1073.4 1214.49 L1072.81 1214.49 L1072.23 1214.49 L1071.64 1214.49 L1071.06 1214.49 L1070.47 1214.49 L1069.88 1214.49 L1069.3 1214.49 L1068.71 1214.49 L1068.12 1214.49 L1067.54 1214.49 L1066.95 1214.49 L1066.36 1214.49 L1065.78 1214.49 L1065.19 1214.49 L1064.6 1214.49 L1064.02 1214.49 L1063.43 1214.49 L1062.85 1214.49 L1062.26 1214.49 L1061.67 1214.49 L1061.09 1214.49 L1060.5 1214.49 L1059.91 1214.49 L1059.33 1214.49 L1058.74 1214.49 L1058.15 1214.49 L1057.57 1214.49 L1056.98 1214.49 L1056.39 1214.49 L1055.81 1214.49 L1055.22 1214.49 L1054.64 1214.49 L1054.05 1214.49 L1053.46 1214.49 L1052.88 1214.49 L1052.29 1214.49 L1051.7 1214.49 L1051.12 1214.49 L1050.53 1214.49 L1049.94 1214.49 L1049.36 1214.49 L1048.77 1214.49 L1048.19 1214.49 L1047.6 1214.49 L1047.01 1214.49 L1046.43 1214.49 L1045.84 1214.49 L1045.25 1214.49 L1044.67 1214.49 L1044.08 1214.49 L1043.49 1214.49 L1042.91 1214.49 L1042.32 1214.49 L1041.73 1214.49 L1041.15 1214.49 L1040.56 1214.49 L1039.98 1214.49 L1039.39 1214.49 L1038.8 1214.49 L1038.22 1214.49 L1037.63 1214.49 L1037.04 1214.49 L1036.46 1214.49 L1035.87 1214.49 L1035.28 1214.49 L1034.7 1214.49 L1034.11 1214.49 L1033.52 1214.49 L1032.94 1214.49 L1032.35 1214.49 L1031.77 1214.49 L1031.18 1214.49 L1030.59 1214.49 L1030.01 1214.49 L1029.42 1214.49 L1028.83 1214.49 L1028.25 1214.49 L1027.66 1214.49 L1027.07 1214.49 L1026.49 1214.49 L1025.9 1214.49 L1025.32 1214.49 L1024.73 1214.49 L1024.14 1214.49 L1023.56 1214.49 L1022.97 1214.49 L1022.38 1214.49 L1021.8 1214.49 L1021.21 1214.49 L1020.62 1214.49 L1020.04 1214.49 L1019.45 1214.49 L1018.86 1214.49 L1018.28 1214.49 L1017.69 1214.49 L1017.11 1214.49 L1016.52 1214.49 L1015.93 1214.49 L1015.35 1214.49 L1014.76 1214.49 L1014.17 1214.49 L1013.59 1214.49 L1013 1214.49 L1012.41 1214.49 L1011.83 1214.49 L1011.24 1214.49 L1010.65 1214.49 L1010.07 1214.49 L1009.48 1214.49 L1008.9 1214.49 L1008.31 1214.49 L1007.72 1214.49 L1007.14 1214.49 L1006.55 1214.49 L1005.96 1214.49 L1005.38 1214.49 L1004.79 1214.49 L1004.2 1214.49 L1003.62 1214.49 L1003.03 1214.49 L1002.44 1214.49 L1001.86 1214.49 L1001.27 1214.49 L1000.69 1214.49 L1000.1 1214.49 L999.513 1214.49 L998.926 1214.49 L998.34 1214.49 L997.754 1214.49 L997.167 1214.49 L996.581 1214.49 L995.994 1214.49 L995.408 1214.49 L994.822 1214.49 L994.235 1214.49 L993.649 1214.49 L993.062 1214.49 L992.476 1214.49 L991.889 1214.49 L991.303 1214.49 L990.717 1214.49 L990.13 1214.49 L989.544 1214.49 L988.957 1214.49 L988.371 1214.49 L987.785 1214.49 L987.198 1214.49 L986.612 1214.49 L986.025 1214.49  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.6 986.612,1214.6 987.198,1214.6 987.785,1214.6 988.371,1214.6 988.957,1214.6 989.544,1214.6 990.13,1214.6 990.717,1214.6 991.303,1214.6 991.889,1214.6 992.476,1214.6 993.062,1214.6 993.649,1214.6 994.235,1214.6 994.822,1214.6 995.408,1214.6 995.994,1214.6 996.581,1214.6 997.167,1214.6 997.754,1214.6 998.34,1214.6 998.926,1214.6 999.513,1214.6 1000.1,1214.6 1000.69,1214.6 1001.27,1214.6 1001.86,1214.6 1002.44,1214.6 1003.03,1214.6 1003.62,1214.6 1004.2,1214.6 1004.79,1214.6 1005.38,1214.6 1005.96,1214.6 1006.55,1214.6 1007.14,1214.6 1007.72,1214.6 1008.31,1214.6 1008.9,1214.6 1009.48,1214.6 1010.07,1214.6 1010.65,1214.6 1011.24,1214.6 1011.83,1214.6 1012.41,1214.6 1013,1214.6 1013.59,1214.6 1014.17,1214.6 1014.76,1214.6 1015.35,1214.6 1015.93,1214.6 1016.52,1214.6 1017.11,1214.6 1017.69,1214.6 1018.28,1214.6 1018.86,1214.6 1019.45,1214.6 1020.04,1214.6 1020.62,1214.6 1021.21,1214.6 1021.8,1214.6 1022.38,1214.6 1022.97,1214.6 1023.56,1214.6 1024.14,1214.6 1024.73,1214.6 1025.32,1214.6 1025.9,1214.6 1026.49,1214.6 1027.07,1214.6 1027.66,1214.6 1028.25,1214.6 1028.83,1214.6 1029.42,1214.6 1030.01,1214.6 1030.59,1214.6 1031.18,1214.6 1031.77,1214.6 1032.35,1214.6 1032.94,1214.6 1033.52,1214.6 1034.11,1214.6 1034.7,1214.6 1035.28,1214.6 1035.87,1214.6 1036.46,1214.6 1037.04,1214.6 1037.63,1214.6 1038.22,1214.6 1038.8,1214.6 1039.39,1214.6 1039.98,1214.6 1040.56,1214.6 1041.15,1214.6 1041.73,1214.6 1042.32,1214.6 1042.91,1214.6 1043.49,1214.6 1044.08,1214.6 1044.67,1214.6 1045.25,1214.6 1045.84,1214.6 1046.43,1214.6 1047.01,1214.6 1047.6,1214.6 1048.19,1214.6 1048.77,1214.6 1049.36,1214.6 1049.94,1214.6 1050.53,1214.6 1051.12,1214.6 1051.7,1214.6 1052.29,1214.6 1052.88,1214.6 1053.46,1214.6 1054.05,1214.6 1054.64,1214.6 1055.22,1214.6 1055.81,1214.6 1056.39,1214.6 1056.98,1214.6 1057.57,1214.6 1058.15,1214.6 1058.74,1214.6 1059.33,1214.6 1059.91,1214.6 1060.5,1214.6 1061.09,1214.6 1061.67,1214.6 1062.26,1214.6 1062.85,1214.6 1063.43,1214.6 1064.02,1214.6 1064.6,1214.6 1065.19,1214.6 1065.78,1214.6 1066.36,1214.6 1066.95,1214.6 1067.54,1214.6 1068.12,1214.6 1068.71,1214.6 1069.3,1214.6 1069.88,1214.6 1070.47,1214.6 1071.06,1214.6 1071.64,1214.6 1072.23,1214.6 1072.81,1214.6 1073.4,1214.6 1073.99,1214.6 1074.57,1214.6 1075.16,1214.6 1075.75,1214.6 1076.33,1214.6 1076.92,1214.6 1077.51,1214.6 1078.09,1214.6 1078.68,1214.6 1079.26,1214.6 1079.85,1214.6 1080.44,1214.6 1081.02,1214.6 1081.61,1214.6 1082.2,1214.6 1082.78,1214.6 1083.37,1214.6 1083.96,1214.6 1084.54,1214.6 1085.13,1214.6 1085.72,1214.6 1086.3,1214.6 1086.89,1214.6 1087.47,1214.6 1088.06,1214.6 1088.65,1214.6 1089.23,1214.6 1089.82,1214.6 1090.41,1214.6 1090.99,1214.6 1091.58,1214.6 1092.17,1214.6 1092.75,1214.6 1093.34,1214.6 1093.93,1214.6 1094.51,1214.6 1095.1,1214.6 1095.68,1214.6 1096.27,1214.6 1096.86,1214.6 1097.44,1214.6 1098.03,1214.6 1098.62,1214.6 1099.2,1214.6 1099.79,1214.6 1100.38,1214.6 1100.96,1214.6 1101.55,1214.6 1102.14,1214.6 1102.72,1214.6 1103.31,1214.6 1103.89,1214.6 1104.48,1214.6 1105.07,1214.6 1105.65,1214.6 1106.24,1214.6 1106.83,1214.6 1107.41,1214.6 1108,1214.6 1108.59,1214.6 1109.17,1214.6 1109.76,1214.6 1110.34,1214.6 1110.93,1214.6 1111.52,1214.6 1112.1,1214.6 1112.69,1214.6 1113.28,1214.6 1113.86,1214.6 1114.45,1214.6 1115.04,1214.6 1115.62,1214.6 1116.21,1214.6 1116.8,1214.6 1117.38,1214.6 1117.97,1214.6 1118.55,1214.6 1119.14,1214.6 1119.73,1214.6 1120.31,1214.6 1120.9,1214.6 1121.49,1214.6 1122.07,1214.6 1122.66,1214.6 1123.25,1214.6 1123.83,1214.6 1124.42,1214.6 1125.01,1214.6 1125.59,1214.6 1126.18,1214.6 1126.76,1214.6 1127.35,1214.6 1127.94,1214.6 1128.52,1214.6 1129.11,1214.6 1129.7,1214.6 1130.28,1214.6 1130.87,1214.6 1131.46,1214.6 1132.04,1214.6 1132.63,1214.6 1133.21,1214.6 1133.8,1214.6 1134.39,1214.6 1134.97,1214.6 1135.56,1214.6 1136.15,1214.6 1136.73,1214.6 1137.32,1214.6 1137.91,1214.6 1138.49,1214.6 1139.08,1214.6 1139.67,1214.6 1140.25,1214.6 1140.84,1214.6 1141.42,1214.6 1142.01,1214.6 1142.6,1214.6 1143.18,1214.6 1143.77,1214.6 1144.36,1214.6 1144.94,1214.6 1145.53,1214.6 1146.12,1214.6 1146.7,1214.6 1147.29,1214.6 1147.88,1214.6 1148.46,1214.6 1149.05,1214.6 1149.63,1214.6 1150.22,1214.6 1150.81,1214.6 1151.39,1214.6 1151.98,1214.6 1152.57,1214.6 1153.15,1214.6 1153.74,1214.6 1154.33,1214.6 1154.91,1214.6 1155.5,1214.6 1156.09,1214.6 1156.67,1214.6 1157.26,1214.6 1157.84,1214.6 1158.43,1214.6 1159.02,1214.6 1159.6,1214.6 1160.19,1214.6 1160.78,1214.6 1161.36,1214.6 1161.95,1214.6 1162.54,1214.6 1163.12,1214.6 1163.71,1214.6 1164.29,1214.6 1164.88,1214.6 1165.47,1214.6 1166.05,1214.6 1166.64,1214.6 1167.23,1214.6 1167.81,1214.6 1168.4,1214.6 1168.99,1214.6 1169.57,1214.6 1170.16,1214.6 1170.75,1214.6 1171.33,1214.6 1171.92,1214.6 1172.5,1214.6 1173.09,1214.6 1173.68,1214.6 1174.26,1214.6 1174.85,1214.6 1175.44,1214.6 1176.02,1214.6 1176.61,1214.6 1177.2,1214.6 1177.78,1214.6 1178.37,1214.6 1178.96,1214.6 1179.54,1214.6 1180.13,1214.6 1180.71,1214.6 1181.3,1214.6 1181.89,1214.6 1182.47,1214.6 1183.06,1214.6 1183.65,1214.6 1184.23,1214.6 1184.82,1214.6 1185.41,1214.6 1185.99,1214.6 1186.58,1214.6 1187.16,1214.6 1187.75,1214.6 1188.34,1214.6 1188.92,1214.6 1189.51,1214.6 1190.1,1214.6 1190.68,1214.6 1191.27,1214.6 1191.86,1214.6 1192.44,1214.6 1193.03,1214.6 1193.62,1214.6 1194.2,1214.6 1194.79,1214.6 1195.37,1214.6 1195.96,1214.6 1196.55,1214.6 1197.13,1214.6 1197.72,1214.6 1198.31,1214.6 1198.89,1214.6 1199.48,1214.6 1200.07,1214.6 1200.65,1214.6 1201.24,1214.6 1201.83,1214.6 1202.41,1214.6 1203,1214.6 1203.58,1214.6 1204.17,1214.6 1204.76,1214.6 1205.34,1214.6 1205.93,1214.6 1206.52,1214.6 1207.1,1214.6 1207.69,1214.6 1208.28,1214.6 1208.86,1214.6 1209.45,1214.6 1210.03,1214.6 1210.62,1214.6 1211.21,1214.6 1211.79,1214.6 1212.38,1214.6 1212.97,1214.6 1213.55,1214.6 1214.14,1214.6 1214.73,1214.6 1215.31,1214.6 1215.9,1214.6 1216.49,1214.6 1217.07,1214.6 1217.66,1214.6 1218.24,1214.6 1218.83,1214.6 1219.42,1214.6 1220,1214.6 1220.59,1214.6 1221.18,1214.6 1221.76,1214.6 1222.35,1214.6 1222.94,1214.6 1223.52,1214.6 1224.11,1214.6 1224.7,1214.6 1225.28,1214.6 1225.87,1214.6 1226.45,1214.6 1227.04,1214.6 1227.63,1214.6 1228.21,1214.6 1228.8,1214.6 1229.39,1214.6 1229.97,1214.6 1230.56,1214.6 1231.15,1214.6 1231.73,1214.6 1232.32,1214.6 1232.91,1214.6 1233.49,1214.6 1234.08,1214.6 1234.66,1214.6 1235.25,1214.6 1235.84,1214.6 1236.42,1214.6 1237.01,1214.6 1237.6,1214.6 1238.18,1214.6 1238.77,1214.6 1239.36,1214.6 1239.94,1214.6 1240.53,1214.6 1241.11,1214.6 1241.7,1214.6 1242.29,1214.6 1242.87,1214.6 1243.46,1214.6 1244.05,1214.6 1244.63,1214.6 1245.22,1214.6 1245.81,1214.6 1246.39,1214.6 1246.98,1214.6 1247.57,1214.6 1248.15,1214.6 1248.74,1214.6 1249.32,1214.6 1249.91,1214.6 1250.5,1214.6 1251.08,1214.6 1251.67,1214.6 1252.26,1214.6 1252.84,1214.6 1253.43,1214.6 1254.02,1214.6 1254.6,1214.6 1255.19,1214.6 1255.78,1214.6 1256.36,1214.6 1256.95,1214.6 1257.53,1214.6 1258.12,1214.6 1258.71,1214.6 1259.29,1214.6 1259.88,1214.6 1260.47,1214.6 1261.05,1214.6 1261.64,1214.6 1262.23,1214.6 1262.81,1214.6 1263.4,1214.6 1263.98,1214.6 1264.57,1214.6 1265.16,1214.6 1265.74,1214.6 1266.33,1214.6 1266.92,1214.6 1267.5,1214.6 1268.09,1214.6 1268.68,1214.6 1269.26,1214.6 1269.85,1214.6 1270.44,1214.6 1271.02,1214.6 1271.61,1214.6 1272.19,1214.6 1272.78,1214.6 1273.37,1214.6 1273.95,1214.6 1274.54,1214.6 1275.13,1214.6 1275.71,1214.6 1276.3,1214.6 1276.89,1214.6 1277.47,1214.6 1278.06,1214.6 1278.65,1214.6 1279.23,1214.6 1279.82,1214.6 1280.4,1214.6 1280.99,1214.6 1281.58,1214.6 1282.16,1214.6 1282.75,1214.6 1283.34,1214.6 1283.92,1214.6 1284.51,1214.6 1285.1,1214.6 1285.68,1214.6 1286.27,1214.6 1286.86,1214.6 1287.44,1214.6 1288.03,1214.6 1288.61,1214.6 1289.2,1214.6 1289.79,1214.6 1290.37,1214.6 1290.96,1214.6 1291.55,1214.6 1292.13,1214.6 1292.72,1214.6 1293.31,1214.6 1293.89,1214.6 1294.48,1214.6 1295.06,1214.6 1295.65,1214.6 1296.24,1214.6 1296.82,1214.6 1297.41,1214.6 1298,1214.6 1298.58,1214.6 1299.17,1214.6 1299.76,1214.6 1300.34,1214.6 1300.93,1214.6 1301.52,1214.6 1302.1,1214.6 1302.69,1214.6 1303.27,1214.6 1303.86,1214.6 1304.45,1214.6 1305.03,1214.6 1305.62,1214.6 1306.21,1214.6 1306.79,1214.6 1307.38,1214.6 1307.97,1214.6 1308.55,1214.6 1309.14,1214.6 1309.73,1214.6 1310.31,1214.6 1310.9,1214.6 1311.48,1214.6 1312.07,1214.6 1312.66,1214.6 1313.24,1214.6 1313.83,1214.6 1314.42,1214.6 1315,1214.6 1315.59,1214.6 1316.18,1214.6 1316.76,1214.6 1317.35,1214.6 1317.93,1214.6 1318.52,1214.6 1319.11,1214.6 1319.69,1214.6 1320.28,1214.6 1320.87,1214.6 1321.45,1214.6 1322.04,1214.6 1322.63,1214.6 1323.21,1214.6 1323.8,1214.6 1324.39,1214.6 1324.97,1214.6 1325.56,1214.6 1326.14,1214.6 1326.73,1214.6 1327.32,1214.6 1327.9,1214.6 1328.49,1214.6 1329.08,1214.6 1329.66,1214.6 1330.25,1214.6 1330.84,1214.6 1331.42,1214.6 1332.01,1214.6 1332.6,1214.6 1333.18,1214.6 1333.77,1214.6 1334.35,1214.6 1334.94,1214.6 1335.53,1214.6 1336.11,1214.6 1336.7,1214.6 1337.29,1214.6 1337.87,1214.6 1338.46,1214.6 1339.05,1214.6 1339.63,1214.6 1340.22,1214.6 1340.8,1214.6 1341.39,1214.6 1341.98,1214.6 1342.56,1214.6 1343.15,1214.6 1343.74,1214.6 1344.32,1214.6 1344.91,1214.6 1345.5,1214.6 1346.08,1214.6 1346.67,1214.6 1347.26,1214.6 1347.84,1214.6 1348.43,1214.6 1349.01,1214.6 1349.6,1214.6 1350.19,1214.6 1350.77,1214.6 1351.36,1214.6 1351.95,1214.6 1352.53,1214.6 1353.12,1214.6 1353.71,1214.6 1354.29,1214.6 1354.88,1214.6 1355.47,1214.6 1356.05,1214.6 1356.64,1214.6 1357.22,1214.6 1357.81,1214.6 1358.4,1214.6 1358.98,1214.6 1359.57,1214.6 1360.16,1214.6 1360.74,1214.6 1361.33,1214.6 1361.92,1214.6 1362.5,1214.6 1363.09,1214.6 1363.68,1214.6 1364.26,1214.6 1364.85,1214.6 1365.43,1214.6 1366.02,1214.6 1366.61,1214.6 1367.19,1214.6 1367.78,1214.6 1368.37,1214.6 1368.95,1214.6 1369.54,1214.6 1370.13,1214.6 1370.71,1214.6 1371.3,1214.6 1371.88,1214.6 1372.47,1214.6 1373.06,1214.6 1373.64,1214.6 1374.23,1214.6 1374.82,1214.6 1375.4,1214.6 1375.99,1214.6 1376.58,1214.6 1377.16,1214.6 1377.75,1214.6 1378.34,1214.6 1378.92,1214.6 1379.51,1214.6 1380.09,1214.6 1380.68,1214.6 1381.27,1214.6 1381.85,1214.6 1382.44,1214.6 1383.03,1214.6 1383.61,1214.6 1384.2,1214.6 1384.79,1214.6 1385.37,1214.6 1385.96,1214.6 1386.55,1214.6 1387.13,1214.6 1387.72,1214.6 1388.3,1214.6 1388.89,1214.6 1389.48,1214.6 1390.06,1214.6 1390.65,1214.6 1391.24,1214.6 1391.82,1214.6 1392.41,1214.6 1393,1214.6 1393.58,1214.6 1394.17,1214.6 1394.75,1214.6 1395.34,1214.6 1395.93,1214.6 1396.51,1214.6 1397.1,1214.6 1397.69,1214.6 1398.27,1214.6 1398.86,1214.6 1399.45,1214.6 1400.03,1214.6 1400.62,1214.6 1401.21,1214.6 1401.79,1214.6 1402.38,1214.6 1402.96,1214.6 1403.55,1214.6 1404.14,1214.6 1404.72,1214.6 1405.31,1214.6 1405.9,1214.6 1406.48,1214.6 1407.07,1214.6 1407.66,1214.6 1408.24,1214.6 1408.83,1214.6 1409.42,1214.6 1410,1214.6 1410.59,1214.6 1411.17,1214.6 1411.76,1214.6 1412.35,1214.6 1412.93,1214.6 1413.52,1214.6 1414.11,1214.6 1414.69,1214.6 1415.28,1214.6 1415.87,1214.6 1416.45,1214.6 1417.04,1214.6 1417.63,1214.6 1418.21,1214.6 1418.8,1214.6 1419.38,1214.6 1419.97,1214.6 1420.56,1214.6 1421.14,1214.6 1421.73,1214.6 1422.32,1214.6 1422.9,1214.6 1423.49,1214.6 1424.08,1214.6 1424.66,1214.6 1425.25,1214.6 1425.83,1214.6 1426.42,1214.6 1427.01,1214.6 1427.59,1214.6 1428.18,1214.6 1428.77,1214.6 1429.35,1214.6 1429.94,1214.6 1430.53,1214.6 1431.11,1214.6 1431.7,1214.6 1432.29,1214.6 1432.87,1214.6 1433.46,1214.6 1434.04,1214.6 1434.63,1214.6 1435.22,1214.6 1435.8,1214.6 1436.39,1214.6 1436.98,1214.6 1437.56,1214.6 1438.15,1214.6 1438.74,1214.6 1439.32,1214.6 1439.91,1214.6 1440.5,1214.6 1441.08,1214.6 1441.67,1214.6 1442.25,1214.6 1442.84,1214.6 1443.43,1214.6 1444.01,1214.6 1444.6,1214.6 1445.19,1214.6 1445.77,1214.6 1446.36,1214.6 1446.95,1214.6 1447.53,1214.6 1448.12,1214.6 1448.7,1214.6 1449.29,1214.6 1449.88,1214.6 1450.46,1214.6 1451.05,1214.6 1451.64,1214.6 1452.22,1214.6 1452.81,1214.6 1453.4,1214.6 1453.98,1214.6 1454.57,1214.6 1455.16,1214.6 1455.74,1214.6 1456.33,1214.6 1456.91,1214.6 1457.5,1214.6 1458.09,1214.6 1458.67,1214.6 1459.26,1214.6 1459.85,1214.6 1460.43,1214.6 1461.02,1214.6 1461.61,1214.6 1462.19,1214.6 1462.78,1214.6 1463.37,1214.6 1463.95,1214.6 1464.54,1214.6 1465.12,1214.6 1465.71,1214.6 1466.3,1214.6 1466.88,1214.6 1467.47,1214.6 1468.06,1214.6 1468.64,1214.6 1469.23,1214.6 1469.82,1214.6 1470.4,1214.6 1470.99,1214.6 1471.57,1214.6 1472.16,1214.6 1472.75,1214.6 1473.33,1214.6 1473.92,1214.6 1474.51,1214.6 1475.09,1214.6 1475.68,1214.6 1476.27,1214.6 1476.85,1214.6 1477.44,1214.6 1478.03,1214.6 1478.61,1214.6 1479.2,1214.6 1479.78,1214.6 1480.37,1214.6 1480.96,1214.6 1481.54,1214.6 1482.13,1214.6 1482.72,1214.6 1483.3,1214.6 1483.89,1214.6 1484.48,1214.6 1485.06,1214.6 1485.65,1214.6 1486.24,1214.6 1486.82,1214.6 1487.41,1214.6 1487.99,1214.6 1488.58,1214.6 1489.17,1214.6 1489.75,1214.6 1490.34,1214.6 1490.93,1214.6 1491.51,1214.6 1492.1,1214.6 1492.69,1214.6 1493.27,1214.6 1493.86,1214.6 1494.45,1214.6 1495.03,1214.6 1495.62,1214.6 1496.2,1214.6 1496.79,1214.6 1497.38,1214.6 1497.96,1214.6 1498.55,1214.6 1499.14,1214.6 1499.72,1214.6 1500.31,1214.6 1500.9,1214.6 1501.48,1214.6 1502.07,1214.6 1502.65,1214.6 1503.24,1214.6 1503.83,1214.6 1504.41,1214.6 1505,1214.6 1505.59,1214.6 1506.17,1214.6 1506.76,1214.6 1507.35,1214.6 1507.93,1214.6 1508.52,1214.6 1509.11,1214.6 1509.69,1214.6 1510.28,1214.6 1510.86,1214.6 1511.45,1214.6 1512.04,1214.6 1512.62,1214.6 1513.21,1214.6 1513.8,1214.6 1514.38,1214.6 1514.97,1214.6 1515.56,1214.6 1516.14,1214.6 1516.73,1214.6 1517.32,1214.6 1517.9,1214.6 1518.49,1214.6 1519.07,1214.6 1519.66,1214.6 1520.25,1214.6 1520.83,1214.6 1521.42,1214.6 1522.01,1214.6 1522.59,1214.6 1523.18,1214.6 1523.77,1214.6 1524.35,1214.6 1524.94,1214.6 1525.52,1214.6 1526.11,1214.6 1526.7,1214.6 1527.28,1214.6 1527.87,1214.6 1528.46,1214.6 1529.04,1214.6 1529.63,1214.6 1530.22,1214.6 1530.8,1214.6 1531.39,1214.6 1531.98,1214.6 1532.56,1214.6 1533.15,1214.6 1533.73,1214.6 1534.32,1214.6 1534.91,1214.6 1535.49,1214.6 1536.08,1214.6 1536.67,1214.6 1537.25,1214.6 1537.84,1214.6 1538.43,1214.6 1539.01,1214.6 1539.6,1214.6 1540.19,1214.6 1540.77,1214.6 1541.36,1214.6 1541.94,1214.6 1542.53,1214.6 1543.12,1214.6 1543.7,1214.6 1544.29,1214.6 1544.88,1214.6 1545.46,1214.6 1546.05,1214.6 1546.64,1214.6 1547.22,1214.6 1547.81,1214.6 1548.4,1214.6 1548.98,1214.6 1549.57,1214.6 1550.15,1214.6 1550.74,1214.6 1551.33,1214.6 1551.91,1214.6 1552.5,1214.6 1553.09,1214.6 1553.67,1214.6 1554.26,1214.6 1554.85,1214.6 1555.43,1214.6 1556.02,1214.6 1556.6,1214.6 1557.19,1214.6 1557.78,1214.6 1558.36,1214.6 1558.95,1214.6 1559.54,1214.6 1560.12,1214.6 1560.71,1214.6 1561.3,1214.6 1561.88,1214.6 1562.47,1214.6 1563.06,1214.6 1563.64,1214.6 1564.23,1214.6 1564.81,1214.6 1565.4,1214.6 1565.99,1214.6 1566.57,1214.6 1567.16,1214.6 1567.75,1214.6 1568.33,1214.6 1568.92,1214.6 1569.51,1214.6 1570.09,1214.6 1570.68,1214.6 1571.27,1214.6 1571.85,1214.6 1572.44,1214.6 1573.02,1214.6 1573.61,1214.6 1574.2,1214.6 1574.78,1214.6 1575.37,1214.6 1575.96,1214.6 1576.54,1214.6 1577.13,1214.6 1577.72,1214.6 1578.3,1214.6 1578.89,1214.6 1579.47,1214.6 1580.06,1214.6 1580.65,1214.6 1581.23,1214.6 1581.82,1214.6 1582.41,1214.6 1582.99,1214.6 1583.58,1214.6 1584.17,1214.6 1584.75,1214.6 1585.34,1214.6 1585.93,1214.6 1586.51,1214.6 1587.1,1214.6 1587.68,1214.6 1588.27,1214.6 1588.86,1214.6 1589.44,1214.6 1590.03,1214.6 1590.62,1214.6 1591.2,1214.6 1591.79,1214.6 1592.38,1214.6 1592.96,1214.6 1593.55,1214.6 1594.14,1214.6 1594.72,1214.6 1595.31,1214.6 1595.89,1214.6 1596.48,1214.6 1597.07,1214.6 1597.65,1214.6 1598.24,1214.6 1598.83,1214.6 1599.41,1214.6 1600,1214.6 1600.59,1214.6 1601.17,1214.6 1601.76,1214.6 1602.34,1214.6 1602.93,1214.6 1603.52,1214.6 1604.1,1214.6 1604.69,1214.6 1605.28,1214.6 1605.86,1214.6 1606.45,1214.6 1607.04,1214.6 1607.62,1214.6 1608.21,1214.6 1608.8,1214.6 1609.38,1214.6 1609.97,1214.6 1610.55,1214.6 1611.14,1214.6 1611.73,1214.6 1612.31,1214.6 1612.9,1214.6 1613.49,1214.6 1614.07,1214.6 1614.66,1214.6 1615.25,1214.6 1615.83,1214.6 1616.42,1214.6 1617.01,1214.6 1617.59,1214.6 1618.18,1214.6 1618.76,1214.6 1619.35,1214.6 1619.94,1214.6 1620.52,1214.6 1621.11,1214.6 1621.7,1214.6 1622.28,1214.6 1622.87,1214.6 1623.46,1214.6 1624.04,1214.6 1624.63,1214.6 1625.22,1214.6 1625.8,1214.6 1626.39,1214.6 1626.97,1214.6 1627.56,1214.6 1628.15,1214.6 1628.73,1214.6 1629.32,1214.6 1629.91,1214.6 1630.49,1214.6 1631.08,1214.6 1631.67,1214.6 1632.25,1214.6 1632.84,1214.6 1633.42,1214.6 1634.01,1214.6 1634.6,1214.6 1635.18,1214.6 1635.77,1214.6 1636.36,1214.6 1636.94,1214.6 1637.53,1214.6 1638.12,1214.6 1638.7,1214.6 1639.29,1214.6 1639.88,1214.6 1640.46,1214.6 1641.05,1214.6 1641.63,1214.6 1642.22,1214.6 1642.81,1214.6 1643.39,1214.6 1643.98,1214.6 1644.57,1214.6 1645.15,1214.6 1645.74,1214.6 1646.33,1214.6 1646.91,1214.6 1647.5,1214.6 1648.09,1214.6 1648.67,1214.6 1649.26,1214.6 1649.84,1214.6 1650.43,1214.6 1651.02,1214.6 1651.6,1214.6 1652.19,1214.6 1652.78,1214.6 1653.36,1214.6 1653.95,1214.6 1654.54,1214.6 1655.12,1214.6 1655.71,1214.6 1656.29,1214.6 1656.88,1214.6 1657.47,1214.6 1658.05,1214.6 1658.64,1214.6 1659.23,1214.6 1659.81,1214.6 1660.4,1214.6 1660.99,1214.6 1661.57,1214.6 1662.16,1214.6 1662.75,1214.6 1663.33,1214.6 1663.92,1214.6 1664.5,1214.6 1665.09,1214.6 1665.68,1214.6 1666.26,1214.6 1666.85,1214.6 1667.44,1214.6 1668.02,1214.6 1668.61,1214.6 1669.2,1214.6 1669.78,1214.6 1670.37,1214.6 1670.96,1214.6 1671.54,1214.6 1672.13,1214.6 1672.71,1214.6 1673.3,1214.6 1673.89,1214.6 1674.47,1214.6 1675.06,1214.6 1675.65,1214.6 1676.23,1214.6 1676.82,1214.6 1677.41,1214.6 1677.99,1214.6 1678.58,1214.6 1679.17,1214.6 1679.75,1214.6 1680.34,1214.6 1680.92,1214.6 1681.51,1214.6 1682.1,1214.6 1682.68,1214.6 1683.27,1214.6 1683.86,1214.6 1684.44,1214.6 1685.03,1214.6 1685.62,1214.6 1686.2,1214.6 1686.79,1214.6 1687.37,1214.6 1687.96,1214.6 1688.55,1214.6 1689.13,1214.6 1689.72,1214.6 1690.31,1214.6 1690.89,1214.6 1691.48,1214.6 1692.07,1214.6 1692.65,1214.6 1693.24,1214.6 1693.83,1214.6 1694.41,1214.6 1695,1214.6 1695.58,1214.6 1696.17,1214.6 1696.76,1214.6 1697.34,1214.6 1697.93,1214.6 1698.52,1214.6 1699.1,1214.6 1699.69,1214.6 1700.28,1214.6 1700.86,1214.6 1701.45,1214.6 1702.04,1214.6 1702.62,1214.6 1703.21,1214.6 1703.79,1214.6 1704.38,1214.6 1704.97,1214.6 1705.55,1214.6 1706.14,1214.6 1706.73,1214.6 1707.31,1214.6 1707.9,1214.6 1708.49,1214.6 1709.07,1214.6 1709.66,1214.6 1710.24,1214.6 1710.83,1214.6 1711.42,1214.6 1712,1214.6 1712.59,1214.6 1713.18,1214.6 1713.76,1214.6 1714.35,1214.6 1714.94,1214.6 1715.52,1214.6 1716.11,1214.6 1716.7,1214.6 1717.28,1214.6 1717.87,1214.6 1718.45,1214.6 1719.04,1214.6 1719.63,1214.6 1720.21,1214.6 1720.8,1214.6 1721.39,1214.6 1721.97,1214.6 1722.56,1214.6 1723.15,1214.6 1723.73,1214.6 1724.32,1214.6 1724.91,1214.6 1725.49,1214.6 1726.08,1214.6 1726.66,1214.6 1727.25,1214.6 1727.84,1214.6 1728.42,1214.6 1729.01,1214.6 1729.6,1214.6 1730.18,1214.6 1730.77,1214.6 1731.36,1214.6 1731.94,1214.6 1732.53,1214.6 1733.11,1214.6 1733.7,1214.6 1734.29,1214.6 1734.87,1214.6 1735.46,1214.6 1736.05,1214.6 1736.63,1214.6 1737.22,1214.6 1737.81,1214.6 1738.39,1214.6 1738.98,1214.6 1739.57,1214.6 1740.15,1214.6 1740.74,1214.6 1741.32,1214.6 1741.91,1214.6 1742.5,1214.6 1743.08,1214.6 1743.67,1214.6 1744.26,1214.6 1744.84,1214.6 1745.43,1214.6 1746.02,1214.6 1746.6,1214.6 1747.19,1214.6 1747.78,1214.6 1748.36,1214.6 1748.95,1214.6 1749.53,1214.6 1750.12,1214.6 1750.71,1214.6 1751.29,1214.6 1751.88,1214.6 1752.47,1214.6 1753.05,1214.6 1753.64,1214.6 1754.23,1214.6 1754.81,1214.6 1755.4,1214.6 1755.99,1214.6 1756.57,1214.6 1757.16,1214.6 1757.74,1214.6 1758.33,1214.6 1758.92,1214.6 1759.5,1214.6 1760.09,1214.6 1760.68,1214.6 1761.26,1214.6 1761.85,1214.6 1762.44,1214.6 1763.02,1214.6 1763.61,1214.6 1764.19,1214.6 1764.78,1214.6 1765.37,1214.6 1765.95,1214.6 1766.54,1214.6 1767.13,1214.6 1767.71,1214.6 1768.3,1214.6 1768.89,1214.6 1769.47,1214.6 1770.06,1214.6 1770.65,1214.6 1771.23,1214.6 1771.82,1214.6 1772.4,1214.6 1772.99,1214.6 1773.58,1214.6 1774.16,1214.6 1774.75,1214.6 1775.34,1214.6 1775.92,1214.6 1776.51,1214.6 1777.1,1214.6 1777.68,1214.6 1778.27,1214.6 1778.86,1214.6 1779.44,1214.6 1780.03,1214.6 1780.61,1214.6 1781.2,1214.6 1781.79,1214.6 1782.37,1214.6 1782.96,1214.6 1783.55,1214.6 1784.13,1214.6 1784.72,1214.6 1785.31,1214.6 1785.89,1214.6 1786.48,1214.6 1787.06,1214.6 1787.65,1214.6 1788.24,1214.6 1788.82,1214.6 1789.41,1214.6 1790,1214.6 1790.58,1214.6 1791.17,1214.6 1791.76,1214.6 1792.34,1214.6 1792.93,1214.6 1793.52,1214.6 1794.1,1214.6 1794.69,1214.6 1795.27,1214.6 1795.86,1214.6 1796.45,1214.6 1797.03,1214.6 1797.62,1214.6 1798.21,1214.6 1798.79,1214.6 1799.38,1214.6 1799.97,1214.6 1800.55,1214.6 1801.14,1214.6 1801.73,1214.6 1802.31,1214.6 1802.9,1214.6 1803.48,1214.6 1804.07,1214.6 1804.66,1214.6 1805.24,1214.6 1805.83,1214.6 1806.42,1214.6 1807,1214.6 1807.59,1214.6 1808.18,1214.6 1808.76,1214.6 1809.35,1214.6 1809.94,1214.6 1810.52,1214.6 1811.11,1214.6 1811.69,1214.6 1812.28,1214.6 1812.87,1214.6 1813.45,1214.6 1814.04,1214.6 1814.63,1214.6 1815.21,1214.6 1815.8,1214.6 1816.39,1214.6 1816.97,1214.6 1817.56,1214.6 1818.14,1214.6 1818.73,1214.6 1819.32,1214.6 1819.9,1214.6 1820.49,1214.6 1821.08,1214.6 1821.66,1214.6 1822.25,1214.6 1822.84,1214.6 1823.42,1214.6 1824.01,1214.6 1824.6,1214.6 1825.18,1214.6 1825.77,1214.6 1826.35,1214.6 1826.94,1214.6 1827.53,1214.6 1828.11,1214.6 1828.7,1214.6 1829.29,1214.6 1829.87,1214.6 1830.46,1214.6 1831.05,1214.6 1831.63,1214.6 1832.22,1214.6 1832.81,1214.6 1833.39,1214.6 1833.98,1214.6 1834.56,1214.6 1835.15,1214.6 1835.74,1214.6 1836.32,1214.6 1836.91,1214.6 1837.5,1214.6 1838.08,1214.6 1838.67,1214.6 1839.26,1214.6 1839.84,1214.6 1840.43,1214.6 1841.01,1214.6 1841.6,1214.6 1842.19,1214.6 1842.77,1214.6 1843.36,1214.6 1843.95,1214.6 1844.53,1214.6 1845.12,1214.6 1845.71,1214.6 1846.29,1214.6 1846.88,1214.6 1847.47,1214.6 1848.05,1214.6 1848.64,1214.6 1849.22,1214.6 1849.81,1214.6 1850.4,1214.6 1850.98,1214.6 1851.57,1214.6 1852.16,1214.6 1852.74,1214.6 1853.33,1214.6 1853.92,1214.6 1854.5,1214.6 1855.09,1214.6 1855.68,1214.6 1856.26,1214.6 1856.85,1214.6 1857.43,1214.6 1858.02,1214.6 1858.61,1214.6 1859.19,1214.6 1859.78,1214.6 1860.37,1214.6 1860.95,1214.6 1861.54,1214.6 1862.13,1214.6 1862.71,1214.6 1863.3,1214.6 1863.88,1214.6 1864.47,1214.6 1865.06,1214.6 1865.64,1214.6 1866.23,1214.6 1866.82,1214.6 1867.4,1214.6 1867.99,1214.6 1868.58,1214.6 1869.16,1214.6 1869.75,1214.6 1870.34,1214.6 1870.92,1214.6 1871.51,1214.6 1872.09,1214.6 1872.68,1214.6 1873.27,1214.6 1873.85,1214.6 1874.44,1214.6 1875.03,1214.6 1875.61,1214.6 1876.2,1214.6 1876.79,1214.6 1877.37,1214.6 1877.96,1214.6 1878.55,1214.6 1879.13,1214.6 1879.72,1214.6 1880.3,1214.6 1880.89,1214.6 1881.48,1214.6 1882.06,1214.6 1882.65,1214.6 1883.24,1214.6 1883.82,1214.6 1884.41,1214.6 1885,1214.6 1885.58,1214.6 1886.17,1214.6 1886.76,1214.6 1887.34,1214.6 1887.93,1214.6 1888.51,1214.6 1889.1,1214.6 1889.69,1214.6 1890.27,1214.6 1890.86,1214.6 1891.45,1214.6 1892.03,1214.6 1892.62,1214.6 1893.21,1214.6 1893.79,1214.6 1894.38,1214.6 1894.96,1214.6 1895.55,1214.6 1896.14,1214.6 1896.72,1214.6 1897.31,1214.6 1897.9,1214.6 1898.48,1214.6 1899.07,1214.6 1899.66,1214.6 1900.24,1214.6 1900.83,1214.6 1901.42,1214.6 1902,1214.6 1902.59,1214.6 1903.17,1214.6 1903.76,1214.6 1904.35,1214.6 1904.93,1214.6 1905.52,1214.6 1906.11,1214.6 1906.69,1214.6 1907.28,1214.6 1907.87,1214.6 1908.45,1214.6 1909.04,1214.6 1909.63,1214.6 1910.21,1214.6 1910.8,1214.6 1911.38,1214.6 1911.97,1214.6 1912.56,1214.6 1913.14,1214.6 1913.73,1214.6 1914.32,1214.6 1914.9,1214.6 1915.49,1214.6 1916.08,1214.6 1916.66,1214.6 1917.25,1214.6 1917.83,1214.6 1918.42,1214.6 1919.01,1214.6 1919.59,1214.6 1920.18,1214.6 1920.77,1214.6 1921.35,1214.6 1921.94,1214.6 1922.53,1214.6 1923.11,1214.6 1923.7,1214.6 1924.29,1214.6 1924.87,1214.6 1925.46,1214.6 1926.04,1214.6 1926.63,1214.6 1927.22,1214.6 1927.8,1214.6 1928.39,1214.6 1928.98,1214.6 1929.56,1214.6 1930.15,1214.6 1930.74,1214.6 1931.32,1214.6 1931.91,1214.6 1932.5,1214.6 1933.08,1214.6 1933.67,1214.6 1934.25,1214.6 1934.84,1214.6 1935.43,1214.6 1936.01,1214.6 1936.6,1214.6 1937.19,1214.6 1937.77,1214.6 1938.36,1214.6 1938.95,1214.6 1939.53,1214.6 1940.12,1214.6 1940.71,1214.6 1941.29,1214.6 1941.88,1214.6 1942.46,1214.6 1943.05,1214.6 1943.64,1214.6 1944.22,1214.6 1944.81,1214.6 1945.4,1214.6 1945.98,1214.6 1946.57,1214.6 1947.16,1214.6 1947.74,1214.6 1948.33,1214.6 1948.91,1214.6 1949.5,1214.6 1950.09,1214.6 1950.67,1214.6 1951.26,1214.6 1951.85,1214.6 1952.43,1214.6 1953.02,1214.6 1953.61,1214.6 1954.19,1214.6 1954.78,1214.6 1955.37,1214.6 1955.95,1214.6 1956.54,1214.6 1957.12,1214.6 1957.71,1214.6 1958.3,1214.6 1958.88,1214.6 1959.47,1214.6 1960.06,1214.6 1960.64,1214.6 1961.23,1214.6 1961.82,1214.6 1962.4,1214.6 1962.99,1214.6 1963.58,1214.6 1964.16,1214.6 1964.75,1214.6 1965.33,1214.6 1965.92,1214.6 1966.51,1214.6 1967.09,1214.6 1967.68,1214.6 1968.27,1214.6 1968.85,1214.6 1969.44,1214.6 1970.03,1214.6 1970.61,1214.6 1971.2,1214.6 1971.78,1214.6 1972.37,1214.6 1972.96,1214.6 1973.54,1214.6 1974.13,1214.6 1974.72,1214.6 1975.3,1214.6 1975.89,1214.6 1976.48,1214.6 1977.06,1214.6 1977.65,1214.6 1978.24,1214.6 1978.82,1214.6 1979.41,1214.6 1979.99,1214.6 1980.58,1214.6 1981.17,1214.6 1981.75,1214.6 1982.34,1214.6 1982.93,1214.6 1983.51,1214.6 1984.1,1214.6 1984.69,1214.6 1985.27,1214.6 1985.86,1214.6 1986.45,1214.6 1987.03,1214.6 1987.62,1214.6 1988.2,1214.6 1988.79,1214.6 1989.38,1214.6 1989.96,1214.6 1990.55,1214.6 1991.14,1214.6 1991.72,1214.6 1992.31,1214.6 1992.9,1214.6 1993.48,1214.6 1994.07,1214.6 1994.65,1214.6 1995.24,1214.6 1995.83,1214.6 1996.41,1214.6 1997,1214.6 1997.59,1214.6 1998.17,1214.6 1998.76,1214.6 1999.35,1214.6 1999.93,1214.6 2000.52,1214.6 2001.11,1214.6 2001.69,1214.6 2002.28,1214.6 2002.86,1214.6 2003.45,1214.6 2004.04,1214.6 2004.62,1214.6 2005.21,1214.6 2005.8,1214.6 2006.38,1214.6 2006.97,1214.6 2007.56,1214.6 2008.14,1214.6 2008.73,1214.6 2009.32,1214.6 2009.9,1214.6 2010.49,1214.6 2011.07,1214.6 2011.66,1214.6 2012.25,1214.6 2012.83,1214.6 2013.42,1214.6 2014.01,1214.6 2014.59,1214.6 2015.18,1214.6 2015.77,1214.6 2016.35,1214.6 2016.94,1214.6 2017.53,1214.6 2018.11,1214.6 2018.7,1214.6 2019.28,1214.6 2019.87,1214.6 2020.46,1214.6 2021.04,1214.6 2021.63,1214.6 2022.22,1214.6 2022.8,1214.6 2023.39,1214.6 2023.98,1214.6 2024.56,1214.6 2025.15,1214.6 2025.73,1214.6 2026.32,1214.6 2026.91,1214.6 2027.49,1214.6 2028.08,1214.6 2028.67,1214.6 2029.25,1214.6 2029.84,1214.6 2030.43,1214.6 2031.01,1214.6 2031.6,1214.6 2032.19,1214.6 2032.77,1214.6 2033.36,1214.6 2033.94,1214.6 2034.53,1214.6 2035.12,1214.6 2035.7,1214.6 2036.29,1214.6 2036.88,1214.6 2037.46,1214.6 2038.05,1214.6 2038.64,1214.6 2039.22,1214.6 2039.81,1214.6 2040.4,1214.6 2040.98,1214.6 2041.57,1214.6 2042.15,1214.6 2042.74,1214.6 2043.33,1214.6 2043.91,1214.6 2044.5,1214.6 2045.09,1214.6 2045.67,1214.6 2046.26,1214.6 2046.85,1214.6 2047.43,1214.6 2048.02,1214.6 2048.6,1214.6 2049.19,1214.6 2049.78,1214.6 2050.36,1214.6 2050.95,1214.6 2051.54,1214.6 2052.12,1214.6 2052.71,1214.6 2053.3,1214.6 2053.88,1214.6 2054.47,1214.6 2055.06,1214.6 2055.64,1214.6 2056.23,1214.6 2056.81,1214.6 2057.4,1214.6 2057.99,1214.6 2058.57,1214.6 2059.16,1214.6 2059.75,1214.6 2060.33,1214.6 2060.92,1214.6 2061.51,1214.6 2062.09,1214.6 2062.68,1214.6 2063.27,1214.6 2063.85,1214.6 2064.44,1214.6 2065.02,1214.6 2065.61,1214.6 2066.2,1214.6 2066.78,1214.6 2067.37,1214.6 2067.96,1214.6 2068.54,1214.6 2069.13,1214.6 2069.72,1214.6 2070.3,1214.6 2070.89,1214.6 2071.48,1214.6 2072.06,1214.6 2072.65,1214.6 2073.23,1214.6 2073.82,1214.6 2074.41,1214.6 2074.99,1214.6 2075.58,1214.6 2076.17,1214.6 2076.75,1214.6 2077.34,1214.6 2077.93,1214.6 2078.51,1214.6 2079.1,1214.6 2079.68,1214.6 2080.27,1214.6 2080.86,1214.6 2081.44,1214.6 2082.03,1214.6 2082.62,1214.6 2083.2,1214.6 2083.79,1214.6 2084.38,1214.6 2084.96,1214.6 2085.55,1214.6 2086.14,1214.6 2086.72,1214.6 2087.31,1214.6 2087.89,1214.6 2088.48,1214.6 2089.07,1214.6 2089.65,1214.6 2090.24,1214.6 2090.83,1214.6 2091.41,1214.6 2092,1214.6 2092.59,1214.6 2093.17,1214.6 2093.76,1214.6 2094.35,1214.6 2094.93,1214.6 2095.52,1214.6 2096.1,1214.6 2096.69,1214.6 2097.28,1214.6 2097.86,1214.6 2098.45,1214.6 2099.04,1214.6 2099.62,1214.6 2100.21,1214.6 2100.8,1214.6 2101.38,1214.6 2101.97,1214.6 2102.55,1214.6 2103.14,1214.6 2103.73,1214.6 2104.31,1214.6 2104.9,1214.6 2105.49,1214.6 2106.07,1214.6 2106.66,1214.6 2107.25,1214.6 2107.83,1214.6 2108.42,1214.6 2109.01,1214.6 2109.59,1214.6 2110.18,1214.6 2110.76,1214.6 2111.35,1214.6 2111.94,1214.6 2112.52,1214.6 2113.11,1214.6 2113.7,1214.6 2114.28,1214.6 2114.87,1214.6 2115.46,1214.6 2116.04,1214.6 2116.63,1214.6 2117.22,1214.6 2117.8,1214.6 2118.39,1214.6 2118.97,1214.6 2119.56,1214.6 2120.15,1214.6 2120.73,1214.6 2121.32,1214.6 2121.91,1214.6 2122.49,1214.6 2123.08,1214.6 2123.67,1214.6 2124.25,1214.6 2124.84,1214.6 2125.42,1214.6 2126.01,1214.6 2126.6,1214.6 2127.18,1214.6 2127.77,1214.6 2128.36,1214.6 2128.94,1214.6 2129.53,1214.6 2130.12,1214.6 2130.7,1214.6 2131.29,1214.6 2131.88,1214.6 2132.46,1214.6 2133.05,1214.6 2133.63,1214.6 2134.22,1214.6 2134.81,1214.6 2135.39,1214.6 2135.98,1214.6 2136.57,1214.6 2137.15,1214.6 2137.74,1214.6 2138.33,1214.6 2138.91,1214.6 2139.5,1214.6 2140.09,1214.6 2140.67,1214.6 2141.26,1214.6 2141.84,1214.6 2142.43,1214.6 2143.02,1214.6 2143.6,1214.6 2144.19,1214.6 2144.78,1214.6 2145.36,1214.6 2145.95,1214.6 2146.54,1214.6 2147.12,1214.6 2147.71,1214.6 2148.3,1214.6 2148.88,1214.6 2149.47,1214.6 2150.05,1214.6 2150.64,1214.6 2151.23,1214.6 2151.81,1214.6 2152.4,1214.6 2152.99,1214.6 2153.57,1214.6 2154.16,1214.6 2154.75,1214.6 2155.33,1214.6 2155.92,1214.6 2156.5,1214.6 2157.09,1214.6 2157.68,1214.6 2158.26,1214.6 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.36,1195.17 1398.85,899.083 \"/>\n<polyline clip-path=\"url(#clip262)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.41 985.439,1195.17 2158.26,1195.17 2158.26,1233.41 985.439,1233.41 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip263\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip260)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip260)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip260)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip263)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2783.03 162.673,-3957.02 163.232,-5081.22 163.792,-4785.61 164.351,-5810.7 164.91,-6724.62 165.469,-7538.93 166.029,-7192.03 166.588,-7919.11 167.147,-8577.61 167.706,-9171.97 168.266,-8825.21 168.825,-8544.75 169.384,-9047.58 169.943,-9481.36 170.503,-9882.63 171.062,-10206 171.621,-10508.2 172.18,-10224.9 172.74,-10475 173.299,-10683.8 173.858,-10408.1 174.417,-10160.3 174.977,-9932.24 175.536,-10085.6 176.095,-10210.9 176.655,-9962.29 177.214,-9750.75 177.773,-9544.5 178.332,-9616.15 178.892,-9659.62 179.451,-9685.4 180.01,-9704 180.569,-9703.37 181.129,-9664.97 181.688,-9632.82 182.247,-9579.93 182.806,-9505.08 183.366,-9264.07 183.925,-9191.69 184.484,-9106.61 185.043,-8871.56 185.603,-8793.25 186.162,-8196.39 186.721,-8117.76 187.28,-8020.11 187.84,-7812.74 188.399,-7514.58 188.958,-7320.37 189.517,-7036.46 190.077,-6855 190.636,-6758.95 191.195,-6666.66 191.754,-6407.6 192.314,-6161.58 192.873,-5992.79 193.432,-5752.21 193.991,-5589.19 194.551,-5367.83 195.11,-5095.04 195.669,-4948.79 196.228,-4694.4 196.788,-4506.78 197.347,-4380.92 197.906,-4307.93 198.465,-4227.86 199.025,-4104.72 199.584,-3931.34 200.143,-3812.68 200.702,-3603.52 201.262,-3446.7 201.821,-3377.12 202.38,-3224.64 202.939,-3154.94 203.499,-3011.67 204.058,-2799.17 204.617,-2665.88 205.176,-2568.63 205.736,-2506.44 206.295,-2409.91 206.854,-2215.72 207.413,-2100.35 207.973,-2048.43 208.532,-1965 209.091,-1885.67 209.65,-1747.42 210.21,-1673.61 210.769,-1517.33 211.328,-1444.92 211.887,-1347.46 212.447,-1279.52 213.006,-1131.46 213.565,-1097.2 214.124,-1035.26 214.684,-1003.81 215.243,-970.951 215.802,-859.198 216.361,-830.793 216.921,-724.814 217.48,-647.18 218.039,-572.826 218.598,-497.218 219.158,-474.64 219.717,-337.257 220.276,-321.544 220.835,-285.31 221.395,-223.742 221.954,-203.912 222.513,-146.319 223.072,-64.8685 223.632,-56.2553 224.191,-21.8326 224.75,-4.51376 225.309,72.2016 225.869,145.695 226.428,174.568 226.987,202.928 227.546,208.673 228.106,237.934 228.665,283.919 229.224,311.118 229.783,339.162 230.343,345.786 230.902,348.035 231.461,332.939 232.02,365.459 232.58,375.248 233.139,420.311 233.698,424.273 234.257,469.151 234.817,475.356 235.376,481.171 235.935,545.509 236.494,571.658 237.054,556.633 237.613,580.244 238.172,656.715 238.731,696.371 239.291,698.793 239.85,713.669 240.409,788.361 240.968,784.643 241.528,797.754 242.087,814.309 242.646,846.201 243.205,841.119 243.765,857.993 244.324,853.058 244.883,846.102 245.442,844.028 246.002,930.813 246.561,921.378 247.12,951.528 247.679,925.044 248.239,899.583 248.798,910.535 249.357,905.171 249.916,933.894 250.476,945.972 251.035,954.764 251.594,962.303 252.153,940.02 252.713,958.74 253.272,952.75 253.831,1035.13 254.39,1045.25 254.95,1067.15 255.509,1055.51 256.068,1043.41 256.627,1051.66 257.187,1039.78 257.746,1061.86 258.305,1052.56 258.864,1059.96 259.424,1048.69 259.983,1058.52 260.542,1018.1 261.101,1008.65 261.661,1037.55 262.22,1025.91 262.779,1018.27 263.338,1027.76 263.898,1018.7 264.457,1045.03 265.016,1069.23 265.575,1094.7 266.135,1086.11 266.694,1092.65 267.253,1084.22 267.812,1093.34 268.372,1063.86 268.931,1087.34 269.49,1080.66 270.049,1072.72 270.609,1061.17 271.168,1050.12 271.727,1046.15 272.286,1053.07 272.846,995.214 273.405,989.735 273.964,971.107 274.523,952.712 275.083,967.7 275.642,1015.48 276.201,991.037 276.76,972.365 277.32,989.785 277.879,1032.76 278.438,1040.79 278.997,1065.05 279.557,1056.6 280.116,1030.95 280.675,1042.48 281.234,1035.52 281.794,993.47 282.353,973.721 282.912,969.191 283.471,1016.52 284.031,1013.87 284.59,974.968 285.149,984.858 285.708,934.033 286.268,947.768 286.827,943.653 287.386,957.563 287.945,958.949 288.505,991.286 289.064,987.536 289.623,968.765 290.182,951.477 290.742,949.235 291.301,980.902 291.86,978.535 292.419,957.164 292.979,984.036 293.538,994.686 294.097,972.605 294.656,972.626 295.216,971.432 295.775,970.483 296.334,983.389 296.893,978.335 297.453,972.718 298.012,903.981 298.571,920.914 299.13,938.548 299.69,985.451 300.249,998.304 300.808,995.359 301.368,1026.05 301.927,1050.82 302.486,1039.93 303.045,1031.89 303.605,1013.82 304.164,1009.3 304.723,985.487 305.282,997.087 305.842,990.77 306.401,952.157 306.96,981.917 307.519,994.05 308.079,1021.99 308.638,997.823 309.197,992.011 309.756,973.088 310.316,953.863 310.875,950.71 311.434,949.279 311.993,990.155 312.553,1014.81 313.112,1009.32 313.671,985.365 314.23,1043.54 314.79,1049.08 315.349,1055.26 315.908,1027.31 316.467,1017.65 317.027,1011.28 317.586,1000.98 318.145,996.716 318.704,992.098 319.264,968.408 319.823,960.266 320.382,955.174 320.941,931.941 321.501,910.691 322.06,922.017 322.619,888.654 323.178,889.573 323.738,905.344 324.297,881.203 324.856,912.294 325.415,910.244 325.975,904.952 326.534,916.32 327.093,882.337 327.652,879.954 328.212,878.032 328.771,875.832 329.33,856.462 329.889,874.184 330.449,873.89 331.008,921.405 331.567,868.704 332.126,851.333 332.686,866.733 333.245,834.571 333.804,832.445 334.363,846.077 334.923,863.601 335.482,878.974 336.041,894.812 336.6,959.47 337.16,1002.4 337.719,963.845 338.278,972.017 338.837,977.722 339.397,984.083 339.956,963.277 340.515,939.26 341.074,933.821 341.634,926.169 342.193,955.385 342.752,961.705 343.311,1005.31 343.871,1010.85 344.43,1003.21 344.989,963.897 345.548,961.665 346.108,955.071 346.667,930.382 347.226,943.31 347.785,889.584 348.345,867.173 348.904,882.244 349.463,880.189 350.022,862.711 350.582,874.141 351.141,838.425 351.7,869.061 352.259,882.4 352.819,896.394 353.378,893.332 353.937,888.051 354.496,850.513 355.056,849.176 355.615,851.809 356.174,894.703 356.733,857.651 357.293,854.645 357.852,836.032 358.411,834.941 358.97,831.107 359.53,816.318 360.089,819.13 360.648,815.733 361.207,831.256 361.767,846.855 362.326,860.928 362.885,823.302 363.444,807.338 364.004,838.656 364.563,804.893 365.122,802.778 365.681,817.982 366.241,833.049 366.8,816.67 367.359,865.877 367.918,847.253 368.478,862.161 369.037,862.137 369.596,858.61 370.155,852.044 370.715,864.687 371.274,847.034 371.833,844.404 372.392,842.138 372.952,841.166 373.511,840.08 374.07,792.363 374.629,775.47 375.189,794.712 375.748,795.256 376.307,794.879 376.866,775.067 377.426,808.694 377.985,789.173 378.544,789.646 379.103,819.073 379.663,801.871 380.222,802.573 380.781,788.067 381.34,805.323 381.9,789.503 382.459,821.459 383.018,818.18 383.577,800.525 384.137,784.584 384.696,753.469 385.255,774.131 385.814,773.494 386.374,776.361 386.933,792.856 387.492,777.936 388.051,777.54 388.611,775.932 389.17,808.683 389.729,808.455 390.288,821.371 390.848,833.903 391.407,831.713 391.966,809.763 392.525,809.738 393.085,821.388 393.644,787.411 394.203,800.095 394.762,820.407 395.322,815.183 395.881,780.461 396.44,765.408 396.999,832.323 397.559,847.078 398.118,877.945 398.677,871.17 399.236,866.611 399.796,859.911 400.355,838.029 400.914,834.847 401.473,815.602 402.033,813.689 402.592,814.048 403.151,825.885 403.71,825.695 404.27,823.093 404.829,849.052 405.388,842.242 405.947,853.61 406.507,867.542 407.066,859.118 407.625,903.357 408.184,881.602 408.744,879.072 409.303,855.2 409.862,850.244 410.421,907.841 410.981,898.708 411.54,891.692 412.099,900.021 412.658,893.615 413.218,901.015 413.777,880.288 414.336,889.329 414.895,864.337 415.455,841.329 416.014,855.728 416.573,869.508 417.132,836.406 417.692,850.031 418.251,826.845 418.81,841.786 419.369,837.231 419.929,800.666 420.488,812.973 421.047,792.328 421.606,794.277 422.166,807.122 422.725,820.64 423.284,849.563 423.843,823.182 424.403,800.116 424.962,799.526 425.521,812.793 426.08,825.41 426.64,833.266 427.199,847.645 427.758,824.061 428.318,832.351 428.877,830.116 429.436,859.936 429.995,834.811 430.555,846.99 431.114,838.085 431.673,849.03 432.232,827.301 432.792,790.809 433.351,805.868 433.91,769.95 434.469,787.252 435.029,770.366 435.588,736.812 436.147,767.145 436.706,767.43 437.266,766.861 437.825,780.829 438.384,779.207 438.943,780.597 439.503,825.449 440.062,834.329 440.621,845.579 441.18,844.111 441.74,823.19 442.299,817.326 442.858,845.831 443.417,825.312 443.977,793.038 444.536,726.261 445.095,722.893 445.654,708.126 446.214,725.765 446.773,696.511 447.332,763.247 447.891,778.248 448.451,792.231 449.01,775.654 449.569,756.826 450.128,738.778 450.688,735.635 451.247,738.985 451.806,755.104 452.365,725.062 452.925,726.582 453.484,756.148 454.043,753.684 454.602,735.629 455.162,752.402 455.721,733.835 456.28,736.767 456.839,767.469 457.399,749.266 457.958,746.618 458.517,742.069 459.076,727.929 459.636,712.195 460.195,714.039 460.754,717.381 461.313,731.086 461.873,749.861 462.432,780.84 462.991,744.577 463.55,694.944 464.11,699.263 464.669,719.948 465.228,659.172 465.787,661.558 466.347,666.875 466.906,669.583 467.465,676.099 468.024,712.574 468.584,730.847 469.143,716.285 469.702,718.712 470.261,720.154 470.821,687.884 471.38,675.151 471.939,677.691 472.498,680.542 473.058,666.835 473.617,668.444 474.176,672.675 474.735,628.114 475.295,633.63 475.854,654.907 476.413,676.211 476.972,698.92 477.532,701.151 478.091,688.411 478.65,673.528 479.209,675.922 479.769,661.396 480.328,678.649 480.887,682.281 481.446,687.382 482.006,704.954 482.565,707.944 483.124,710.147 483.683,758.521 484.243,740.136 484.802,739.939 485.361,752.042 485.92,786.803 486.48,788.296 487.039,754.168 487.598,754.749 488.157,751.859 488.717,714.375 489.276,715.962 489.835,714.456 490.394,729.534 490.954,745.211 491.513,745.314 492.072,745.112 492.631,759.561 493.191,807.906 493.75,753.602 494.309,801.626 494.868,813.87 495.428,824.647 495.987,835.611 496.546,845.196 497.105,821.81 497.665,850.148 498.224,829.741 498.783,870.439 499.342,863.841 499.902,856.739 500.461,850.417 501.02,808.993 501.579,789.604 502.139,769.79 502.698,767.419 503.257,735.069 503.816,736.455 504.376,716.504 504.935,714.971 505.494,716.917 506.053,700.044 506.613,700.715 507.172,685.818 507.731,701.004 508.29,688.57 508.85,684.262 509.409,700.368 509.968,700.799 510.527,700.727 511.087,684.665 511.646,715.972 512.205,703.895 512.764,707.03 513.324,726.085 513.883,739.871 514.442,755.82 515.001,735.678 515.561,722.765 516.12,717.369 516.679,701.433 517.238,706.602 517.798,706.998 518.357,692.1 518.916,713.403 519.475,711.846 520.035,726.995 520.594,726.527 521.153,713.203 521.712,682.708 522.272,670.28 522.831,654.361 523.39,642.184 523.949,662.524 524.509,660.567 525.068,647.519 525.627,634.505 526.186,658.199 526.746,647.185 527.305,651.13 527.864,653.531 528.423,656.145 528.983,676.895 529.542,645.887 530.101,648.302 530.66,651.755 531.22,672.482 531.779,675.492 532.338,713.968 532.897,666.435 533.457,718.372 534.016,700.266 534.575,670.598 535.134,621.328 535.694,643.122 536.253,632.187 536.812,669.944 537.371,705.334 537.931,674.265 538.49,677.237 539.049,695.205 539.608,728.621 540.168,711.14 540.727,726.594 541.286,727.664 541.845,744.873 542.405,738.342 542.964,753.192 543.523,783.828 544.082,781.402 544.642,830.983 545.201,810.955 545.76,771.669 546.319,770.86 546.879,750.406 547.438,750.277 547.997,750.028 548.556,749.065 549.116,749.508 549.675,810.759 550.234,791.721 550.793,788.493 551.353,805.939 551.912,784.787 552.471,748.825 553.031,745.461 553.59,760.76 554.149,791.265 554.708,756.835 555.268,722.333 555.827,740.25 556.386,738.914 556.945,774.834 557.505,789.943 558.064,803.435 558.623,783.253 559.182,797.009 559.742,806.98 560.301,794.268 560.86,787.618 561.419,751.164 561.979,751.706 562.538,767.063 563.097,796.927 563.656,809.046 564.216,803.321 564.775,781.544 565.334,828.468 565.893,809.39 566.453,789.051 567.012,802.505 567.571,811.055 568.13,807.214 568.69,788.144 569.249,784.475 569.808,786.695 570.367,797.669 570.927,797.939 571.486,794.343 572.045,789.733 572.604,766.283 573.164,778.91 573.723,743.847 574.282,694.299 574.841,709.838 575.401,680.116 575.96,699.151 576.519,696.872 577.078,700.343 577.638,680.767 578.197,680.321 578.756,681.143 579.315,699.035 579.875,717.088 580.434,730.915 580.993,713.76 581.552,711.741 582.112,695.654 582.671,745.383 583.23,760.714 583.789,774.5 584.349,768.495 584.908,752.745 585.467,779.389 586.026,804.818 586.586,784.18 587.145,780.266 587.704,743.548 588.263,730.361 588.823,730.186 589.382,731.765 589.941,696.572 590.5,698.254 591.06,701.124 591.619,719.116 592.178,755.152 592.737,754.061 593.297,766.67 593.856,779.462 594.415,809.937 594.974,803.794 595.534,802.884 596.093,781.386 596.652,794.419 597.211,755.458 597.771,737.011 598.33,737.378 598.889,736.029 599.448,703.66 600.008,703.404 600.567,721.972 601.126,754.64 601.685,751.7 602.245,730.962 602.804,778.53 603.363,773.787 603.922,818.6 604.482,828.742 605.041,851.812 605.6,859.261 606.159,867.125 606.719,827.159 607.278,771.036 607.837,764.577 608.396,777.365 608.956,791.256 609.515,753.268 610.074,782.697 610.633,793.238 611.193,786.376 611.752,765.722 612.311,745.771 612.87,740.975 613.43,768.359 613.989,798.803 614.548,795.461 615.107,754.3 615.667,765.904 616.226,729.672 616.785,698.943 617.344,730.564 617.904,727.903 618.463,710.102 619.022,678.488 619.581,649.893 620.141,638.112 620.7,641.321 621.259,660.939 621.818,681.968 622.378,666.604 622.937,666.887 623.496,669.853 624.055,671.046 624.615,655.979 625.174,671.021 625.733,654.99 626.292,656.082 626.852,675.778 627.411,711.011 627.97,747.668 628.529,795.137 629.089,789.616 629.648,833.442 630.207,810.012 630.766,800.973 631.326,780.26 631.885,762.012 632.444,774.74 633.003,772.244 633.563,755.866 634.122,752.025 634.681,734.552 635.24,701.599 635.8,718.639 636.359,696.639 636.918,727.762 637.477,695.613 638.037,700.022 638.596,699.714 639.155,682.029 639.714,665.861 640.274,715.337 640.833,714.03 641.392,700.108 641.951,631.646 642.511,655.672 643.07,643.075 643.629,632.456 644.188,606.933 644.748,613.07 645.307,632.564 645.866,621.052 646.425,655.482 646.985,674.129 647.544,678.986 648.103,648.292 648.662,633.619 649.222,654.924 649.781,622.845 650.34,627.434 650.899,629.259 651.459,613.75 652.018,635.372 652.577,638.912 653.136,641.297 653.696,659.974 654.255,677.496 654.814,673.872 655.373,691.332 655.933,692.619 656.492,676.736 657.051,692.433 657.61,665.622 658.17,667.842 658.729,637.532 659.288,644.176 659.847,645.228 660.407,680.774 660.966,697.642 661.525,695.576 662.084,679.797 662.644,701.231 663.203,700.913 663.762,700.845 664.321,718.85 664.881,735.889 665.44,716.571 665.999,713.16 666.558,663.507 667.118,666.048 667.677,682.678 668.236,683.538 668.795,685.363 669.355,688.62 669.914,687.541 670.473,671.342 671.032,658.556 671.592,665.186 672.151,635.789 672.71,639.665 673.269,643.163 673.829,626.991 674.388,647.732 674.947,651.307 675.506,652.929 676.066,686.445 676.625,670.555 677.184,655.878 677.743,688.811 678.303,704.514 678.862,703.395 679.421,670.153 679.981,671.955 680.54,660.341 681.099,644.921 681.658,650.405 682.218,650.123 682.777,654.013 683.336,611.656 683.895,651.515 684.455,687.543 685.014,703.268 685.573,675.446 686.132,675.797 686.692,693.777 687.251,713.853 687.81,715.753 688.369,683.66 688.929,685.609 689.488,687.113 690.047,690.563 690.606,725.517 691.166,707.695 691.725,691.879 692.284,706.811 692.843,723.436 693.403,738.496 693.962,719.09 694.521,688.439 695.08,686.879 695.64,717.632 696.199,715.574 696.758,733.631 697.317,732.136 697.877,743.936 698.436,709.532 698.995,691.711 699.554,675.521 700.114,691.502 700.673,735.831 701.232,747.195 701.791,760.686 702.351,741.832 702.91,735.437 703.469,732.681 704.028,714.192 704.588,711.993 705.147,661.578 705.706,664.596 706.265,694.407 706.825,712.306 707.384,693.395 707.943,721.671 708.502,718.992 709.062,720.032 709.621,734.407 710.18,731.759 710.739,717.105 711.299,716.327 711.858,714.735 712.417,711.805 712.976,679.734 713.536,689.676 714.095,658.576 714.654,629.421 715.213,651.58 715.773,658.037 716.332,660.74 716.891,665.403 717.45,667.427 718.01,737.323 718.569,735.135 719.128,716.613 719.687,734.564 720.247,729.936 720.806,756.834 721.365,739.469 721.924,704.99 722.484,703.689 723.043,719.204 723.602,732.786 724.161,713.11 724.721,695.358 725.28,707.927 725.839,708.332 726.398,705.648 726.958,718.828 727.517,718.85 728.076,685.089 728.635,669.095 729.195,670.518 729.754,689.595 730.313,723.025 730.872,721.515 731.432,736.491 731.991,734.962 732.55,730.785 733.109,757.967 733.669,736.951 734.228,734.103 734.787,713.991 735.346,727.561 735.906,711.828 736.465,660.875 737.024,662.869 737.583,630.051 738.143,602.325 738.702,657.452 739.261,692.497 739.82,694.236 740.38,692.444 740.939,679.08 741.498,678.847 742.057,682.035 742.617,700.852 743.176,703.193 743.735,687.269 744.294,673.379 744.854,673.854 745.413,695.181 745.972,676.04 746.531,659.609 747.091,647.245 747.65,669.252 748.209,658.177 748.768,658.987 749.328,659.741 749.887,644.188 750.446,664.063 751.005,695.941 751.565,698.139 752.124,680.215 752.683,666.63 753.242,650.766 753.802,672.312 754.361,658.701 754.92,679.649 755.479,679.349 756.039,694.328 756.598,729.233 757.157,745.224 757.716,728.555 758.276,709.634 758.835,695.968 759.394,697.394 759.953,679.329 760.513,694.693 761.072,675.574 761.631,677.068 762.19,677.042 762.75,696.546 763.309,695.318 763.868,698.679 764.427,681.517 764.987,680.911 765.546,679.147 766.105,714.572 766.664,730.433 767.224,710.722 767.783,711.539 768.342,722.743 768.901,706.354 769.461,671.592 770.02,654.849 770.579,656.893 771.138,655.865 771.698,607.045 772.257,640.55 772.816,680.229 773.375,679.074 773.935,697.139 774.494,696.736 775.053,680.721 775.612,692.026 776.172,707.105 776.731,721.362 777.29,703.372 777.849,716.095 778.409,734.06 778.968,734.574 779.527,703.14 780.086,718.256 780.646,715.454 781.205,731.931 781.764,715.623 782.323,767.134 782.883,759.842 783.442,753.161 784.001,764.011 784.56,757.817 785.12,719.417 785.679,699.673 786.238,716.046 786.797,712.204 787.357,692.574 787.916,707.511 788.475,770.834 789.034,753.292 789.594,781.224 790.153,777.193 790.712,758.963 791.271,755.357 791.831,716.918 792.39,703.167 792.949,718.785 793.508,720.374 794.068,713.623 794.627,713.22 795.186,744.823 795.745,758.081 796.305,754.21 796.864,748.022 797.423,764.586 797.982,726.717 798.542,759.635 799.101,770.08 799.66,764.989 800.219,708.625 800.779,677.357 801.338,647.782 801.897,648.15 802.456,667.06 803.016,700.755 803.575,668.928 804.134,672.518 804.693,722.193 805.253,735.473 805.812,651.097 806.371,632.814 806.931,620.879 807.49,624.085 808.049,689.628 808.608,701.951 809.168,702.504 809.727,685.224 810.286,686.593 810.845,703.026 811.405,701.113 811.964,729.641 812.523,678.445 813.082,698.034 813.642,699.052 814.201,699.293 814.76,682.414 815.319,667.013 815.879,679.728 816.438,663.207 816.997,647.968 817.556,602.553 818.116,626.22 818.675,630.235 819.234,632.968 819.793,648.716 820.353,663.116 820.912,679.695 821.471,681.958 822.03,682.903 822.59,680.463 823.149,664.943 823.708,680.322 824.267,663.89 824.827,619.814 825.386,609.103 825.945,599.567 826.504,588.531 827.064,577.58 827.623,584.561 828.182,590.498 828.741,599.669 829.301,622.483 829.86,644.2 830.419,613.154 830.978,649.812 831.538,637.7 832.097,627.551 832.656,646.247 833.215,650.834 833.775,670.37 834.334,668.663 834.893,685.15 835.452,686.841 836.012,689.178 836.571,685.691 837.13,668.749 837.689,686.321 838.249,688.349 838.808,689.723 839.367,689.13 839.926,704.014 840.486,717.383 841.045,764.229 841.604,726.588 842.163,726.429 842.723,692.973 843.282,756.145 843.841,767.242 844.4,777.621 844.96,757.12 845.519,738.575 846.078,738.826 846.637,750.763 847.197,732.866 847.756,732.283 848.315,728.74 848.874,724.206 849.434,739.113 849.993,770.312 850.552,766.134 851.111,763.821 851.671,757.702 852.23,755.26 852.789,751.609 853.348,746.037 853.908,727.83 854.467,709.529 855.026,726.551 855.585,697.112 856.145,681.358 856.704,667.667 857.263,669.755 857.822,672.341 858.382,671.311 858.941,688.224 859.5,656.087 860.059,677.231 860.619,659.033 861.178,678.285 861.737,676.818 862.296,661.841 862.856,660.967 863.415,646.861 863.974,680.784 864.533,713.993 865.093,756.622 865.652,720.773 866.211,732.474 866.77,729.181 867.33,706.306 867.889,688.873 868.448,690.504 869.007,673.059 869.567,675.12 870.126,707.126 870.685,741.128 871.244,753.207 871.804,783.888 872.363,747.096 872.922,791.218 873.481,803.009 874.041,798.52 874.6,794.015 875.159,786.958 875.718,764.705 876.278,742.246 876.837,720.596 877.396,700.369 877.955,697.787 878.515,714.234 879.074,682.511 879.633,648.974 880.192,648.746 880.752,651.484 881.311,637.221 881.87,624.893 882.429,614.976 882.989,604.133 883.548,588.786 884.107,580.879 884.666,605.439 885.226,628.459 885.785,581.627 886.344,586.474 886.903,579.422 887.463,573.666 888.022,563.627 888.581,519.612 889.14,543.899 889.7,566.809 890.259,539.545 890.818,580.669 891.377,600.272 891.937,617.599 892.496,622.493 893.055,623.845 893.614,608.202 894.174,575.774 894.733,582.675 895.292,570.836 895.851,578.434 896.411,583.903 896.97,572.645 897.529,581.29 898.088,586.396 898.648,627.803 899.207,629.456 899.766,643.263 900.325,631.787 900.885,633.381 901.444,685.941 902.003,687.294 902.562,685.249 903.122,682.92 903.681,650.949 904.24,652.503 904.799,639.813 905.359,642.354 905.918,660.172 906.477,647.962 907.036,649.871 907.596,654.913 908.155,673.647 908.714,658.286 909.273,675.572 909.833,676.887 910.392,681.865 910.951,680.703 911.51,681.574 912.07,695.92 912.629,694.457 913.188,697.126 913.747,697.718 914.307,682.033 914.866,695.46 915.425,711.294 915.984,711.461 916.544,710.778 917.103,693.505 917.662,661.04 918.221,661.164 918.781,633.122 919.34,636.39 919.899,651.501 920.458,651.698 921.018,670.602 921.577,656.955 922.136,643.426 922.695,628.386 923.255,614.978 923.814,604.541 924.373,611.595 924.932,615.889 925.492,620.025 926.051,643.47 926.61,642.928 927.169,678.586 927.729,698.517 928.288,700.374 928.847,716.579 929.406,730.687 929.966,731.468 930.525,726.471 931.084,724.865 931.644,723.294 932.203,707.835 932.762,771.193 933.321,734.38 933.881,763.876 934.44,773.44 934.999,784.332 935.558,796.582 936.118,835.902 936.677,829.252 937.236,770.634 937.795,782.706 938.355,777.205 938.914,773.007 939.473,783.842 940.032,794.467 940.592,804.952 941.151,764.055 941.71,761.104 942.269,756.036 942.829,737.658 943.388,734.234 943.947,716.489 944.506,715.24 945.066,713.851 945.625,709.737 946.184,707.489 946.743,690.894 947.303,724.153 947.862,753.606 948.421,733.193 948.98,746.278 949.54,730.93 950.099,741.052 950.658,739.042 951.217,722.606 951.777,724.464 952.336,736.831 952.895,734.58 953.454,729.17 954.014,725.984 954.573,741.903 955.132,738.926 955.691,736.315 956.251,733.658 956.81,746.81 957.369,730.364 957.928,740.48 958.488,721.936 959.047,687.896 959.606,705.702 960.165,707.382 960.725,688.947 961.284,669.273 961.843,653.834 962.402,670.241 962.962,692.754 963.521,663.947 964.08,644.486 964.639,632.085 965.199,649.171 965.758,636.413 966.317,576.935 966.876,597.534 967.436,601.699 967.995,640.229 968.554,669.616 969.113,684.379 969.673,649.273 970.232,652.366 970.791,640.269 971.35,643.603 971.91,659.66 972.469,672.264 973.028,656.115 973.587,693.221 974.147,694.762 974.706,728.13 975.265,727.176 975.824,708.573 976.384,690.627 976.943,722.146 977.502,737.747 978.061,736.178 978.621,733.645 979.18,730.212 979.739,712.241 980.298,742.58 980.858,722.945 981.417,735.174 981.976,729.706 982.535,740.325 983.095,721.75 983.654,696.87 984.213,710.427 984.772,724.276 985.332,690.084 985.891,671.42 986.45,654.44 987.009,636.435 987.569,636.773 988.128,656.662 988.687,645.026 989.246,665.163 989.806,648.711 990.365,652.003 990.924,652.808 991.483,658.127 992.043,644.096 992.602,661.223 993.161,663.969 993.72,663.4 994.28,633.363 994.839,620.347 995.398,639.481 995.957,643.145 996.517,647.455 997.076,652.733 997.635,669.409 998.194,719.455 998.754,752.866 999.313,732.967 999.872,683.808 1000.43,671.928 1000.99,674.379 1001.55,687.778 1002.11,673.593 1002.67,725.186 1003.23,704.528 1003.79,701.482 1004.35,716.523 1004.91,701.936 1005.46,687.544 1006.02,672.545 1006.58,674.074 1007.14,660.377 1007.7,646.72 1008.26,635.046 1008.82,634.888 1009.38,651.09 1009.94,652.866 1010.5,673.018 1011.06,690.36 1011.62,722.709 1012.18,721.584 1012.73,719.575 1013.29,749.531 1013.85,712.31 1014.41,707.864 1014.97,687.992 1015.53,687.917 1016.09,687.957 1016.65,687.468 1017.21,707.062 1017.77,688.834 1018.33,689.363 1018.89,687.692 1019.45,674.114 1020.01,656.916 1020.56,642.801 1021.12,632.688 1021.68,635.616 1022.24,654.771 1022.8,654.129 1023.36,641.272 1023.92,663.605 1024.48,714.504 1025.04,726.654 1025.6,738.331 1026.16,736.102 1026.72,749.114 1027.28,746.96 1027.83,741.883 1028.39,737.714 1028.95,731.899 1029.51,762.045 1030.07,741.656 1030.63,735.74 1031.19,751.086 1031.75,748.094 1032.31,743.273 1032.87,756.254 1033.43,723.829 1033.99,707.711 1034.55,707.377 1035.1,707.882 1035.66,722.363 1036.22,705.117 1036.78,718.444 1037.34,717.297 1037.9,718.078 1038.46,716.991 1039.02,730.395 1039.58,727.858 1040.14,735.845 1040.7,750.739 1041.26,762.457 1041.82,793.21 1042.38,786.204 1042.93,778.758 1043.49,794.475 1044.05,821.292 1044.61,802.656 1045.17,783.475 1045.73,779.117 1046.29,773.563 1046.85,751.7 1047.41,768.133 1047.97,776.387 1048.53,756.7 1049.09,767.901 1049.65,779.673 1050.2,745.625 1050.76,724.044 1051.32,741.217 1051.88,705.545 1052.44,720.897 1053,685.962 1053.56,722.822 1054.12,719.631 1054.68,703.333 1055.24,705.359 1055.8,706.152 1056.36,707.734 1056.92,709.558 1057.48,740.81 1058.03,722.134 1058.59,735.789 1059.15,730.463 1059.71,725.484 1060.27,722.796 1060.83,734.55 1061.39,718.894 1061.95,721.695 1062.51,688.281 1063.07,702.392 1063.63,638.237 1064.19,608.641 1064.75,598.803 1065.3,557.694 1065.86,565.087 1066.42,606.328 1066.98,593.518 1067.54,597.925 1068.1,599.474 1068.66,639.927 1069.22,621.767 1069.78,595.353 1070.34,584.289 1070.9,588.499 1071.46,595.311 1072.02,600.789 1072.57,619.781 1073.13,658.932 1073.69,658.596 1074.25,674.37 1074.81,644.459 1075.37,679.176 1075.93,680.465 1076.49,677.045 1077.05,694.591 1077.61,726.763 1078.17,757.066 1078.73,753.047 1079.29,749.194 1079.85,744.284 1080.4,743.428 1080.96,724.063 1081.52,740.454 1082.08,740.328 1082.64,737.212 1083.2,716.013 1083.76,746.248 1084.32,741.262 1084.88,738.095 1085.44,670.879 1086,652.756 1086.56,670.111 1087.12,654.076 1087.67,623.455 1088.23,613.087 1088.79,634.222 1089.35,653.214 1089.91,703.983 1090.47,721.355 1091.03,688.799 1091.59,686.931 1092.15,686.476 1092.71,683.955 1093.27,666.349 1093.83,663.896 1094.39,645.333 1094.94,678.303 1095.5,695.51 1096.06,712.45 1096.62,729.362 1097.18,679.149 1097.74,664.105 1098.3,633.945 1098.86,589.265 1099.42,606.894 1099.98,612.113 1100.54,599.594 1101.1,590.759 1101.66,626.443 1102.22,597.042 1102.77,587.498 1103.33,572.153 1103.89,560.27 1104.45,596.726 1105.01,619.175 1105.57,640.29 1106.13,645.007 1106.69,647.064 1107.25,647.722 1107.81,680.251 1108.37,683.92 1108.93,718.984 1109.49,736.798 1110.04,733.224 1110.6,749.072 1111.16,712.941 1111.72,693.979 1112.28,692.858 1112.84,688.121 1113.4,702.71 1113.96,719.101 1114.52,702.794 1115.08,721.56 1115.64,719.301 1116.2,718.114 1116.76,699.393 1117.31,715.45 1117.87,714.431 1118.43,676.366 1118.99,678.08 1119.55,615.993 1120.11,589.449 1120.67,560.404 1121.23,598.283 1121.79,569.192 1122.35,559.832 1122.91,549.87 1123.47,543.297 1124.03,581.886 1124.59,631.652 1125.14,620.01 1125.7,640.046 1126.26,657.121 1126.82,657.846 1127.38,676.272 1127.94,678.934 1128.5,697.734 1129.06,729.593 1129.62,726.147 1130.18,722.044 1130.74,736.252 1131.3,732.305 1131.86,700.95 1132.41,716.337 1132.97,701.448 1133.53,715.663 1134.09,699.002 1134.65,679.41 1135.21,662.11 1135.77,649.84 1136.33,651.318 1136.89,664.262 1137.45,649.827 1138.01,650.522 1138.57,650.165 1139.13,634.412 1139.68,651.176 1140.24,622.4 1140.8,628.612 1141.36,613.038 1141.92,616.843 1142.48,636.398 1143.04,658.649 1143.6,644.685 1144.16,665.322 1144.72,665.954 1145.28,686.138 1145.84,683.211 1146.4,682.8 1146.96,669.316 1147.51,640.303 1148.07,658.699 1148.63,662.767 1149.19,695.831 1149.75,729.047 1150.31,727.832 1150.87,708.839 1151.43,721.647 1151.99,705.672 1152.55,685.95 1153.11,703.543 1153.67,703.542 1154.23,639.23 1154.78,642.195 1155.34,691.802 1155.9,690.386 1156.46,690.051 1157.02,675.638 1157.58,692.707 1158.14,693.133 1158.7,694.034 1159.26,674.176 1159.82,691.706 1160.38,689.623 1160.94,706.858 1161.5,719.595 1162.05,702.274 1162.61,723.467 1163.17,721.965 1163.73,735.758 1164.29,766.017 1164.85,757.688 1165.41,709.555 1165.97,691.847 1166.53,692.777 1167.09,690.195 1167.65,689.211 1168.21,674.005 1168.77,689.882 1169.33,673.46 1169.88,674.442 1170.44,659.662 1171,692.326 1171.56,692.932 1172.12,674.711 1172.68,677.475 1173.24,681.03 1173.8,697.404 1174.36,695.755 1174.92,673.964 1175.48,687.394 1176.04,701.534 1176.6,684.98 1177.15,669.883 1177.71,653.049 1178.27,718.888 1178.83,712.814 1179.39,691.658 1179.95,689.124 1180.51,687.997 1181.07,700.551 1181.63,714.175 1182.19,713.529 1182.75,696.994 1183.31,648.83 1183.87,648.087 1184.43,666.475 1184.98,671.102 1185.54,686.901 1186.1,739.025 1186.66,721.033 1187.22,688.804 1187.78,704.926 1188.34,734.707 1188.9,700.615 1189.46,666.704 1190.02,615.599 1190.58,665.317 1191.14,666.97 1191.7,650.336 1192.25,650.892 1192.81,606.555 1193.37,626.304 1193.93,630.416 1194.49,649.011 1195.05,617.647 1195.61,635.829 1196.17,636.283 1196.73,656.632 1197.29,661.513 1197.85,676.167 1198.41,696.532 1198.97,698.274 1199.52,713.921 1200.08,743.245 1200.64,738.196 1201.2,732.907 1201.76,730.614 1202.32,712.31 1202.88,760.073 1203.44,723.621 1204,691.402 1204.56,674.372 1205.12,705.028 1205.68,718.762 1206.24,703.355 1206.8,657.141 1207.35,689.949 1207.91,721.333 1208.47,719.542 1209.03,719.575 1209.59,702.398 1210.15,698.672 1210.71,698.849 1211.27,697.513 1211.83,696.082 1212.39,746.868 1212.95,760.209 1213.51,772.107 1214.07,784.277 1214.62,808.852 1215.18,800.669 1215.74,793.792 1216.3,771.757 1216.86,767.08 1217.42,776.81 1217.98,803.124 1218.54,796.066 1219.1,787.931 1219.66,798.582 1220.22,762.048 1220.78,772.976 1221.34,739.936 1221.89,702.986 1222.45,718.366 1223.01,749.735 1223.57,746.21 1224.13,726.704 1224.69,709.947 1225.25,691.948 1225.81,689.668 1226.37,656.576 1226.93,641.073 1227.49,657.125 1228.05,636.666 1228.61,655.53 1229.17,656.547 1229.72,656.145 1230.28,655.662 1230.84,675.6 1231.4,629.611 1231.96,650.459 1232.52,649.403 1233.08,650.378 1233.64,621.122 1234.2,622.128 1234.76,642.847 1235.32,661.993 1235.88,692.5 1236.44,659.645 1236.99,628.521 1237.55,616.913 1238.11,653.369 1238.67,622.697 1239.23,623.593 1239.79,643.427 1240.35,647.336 1240.91,667.06 1241.47,683.862 1242.03,697.579 1242.59,713.673 1243.15,693.084 1243.71,664.139 1244.26,647.98 1244.82,630.695 1245.38,634.511 1245.94,620.993 1246.5,626.815 1247.06,663.79 1247.62,660.782 1248.18,661.536 1248.74,660.701 1249.3,681.15 1249.86,699.192 1250.42,698.061 1250.98,665 1251.54,680.217 1252.09,712.508 1252.65,741.948 1253.21,741.439 1253.77,755.157 1254.33,797.462 1254.89,777.19 1255.45,786.737 1256.01,750.647 1256.57,710.484 1257.13,677.36 1257.69,660.273 1258.25,661.847 1258.81,663.752 1259.36,635.168 1259.92,621.193 1260.48,645.952 1261.04,634.236 1261.6,663.272 1262.16,664.961 1262.72,667.926 1263.28,704.611 1263.84,703.415 1264.4,737.658 1264.96,752.449 1265.52,750.872 1266.08,731.23 1266.63,745.318 1267.19,773.714 1267.75,782.635 1268.31,776.55 1268.87,756.065 1269.43,781.971 1269.99,778.155 1270.55,774.411 1271.11,738.466 1271.67,750.223 1272.23,732.685 1272.79,698.268 1273.35,679.587 1273.91,646.364 1274.46,677.643 1275.02,693.412 1275.58,710.613 1276.14,722.719 1276.7,737.992 1277.26,719.05 1277.82,718.567 1278.38,715.987 1278.94,698.003 1279.5,678.798 1280.06,674.919 1280.62,708.659 1281.18,705.684 1281.73,688.655 1282.29,736.512 1282.85,764.388 1283.41,759.621 1283.97,784.352 1284.53,813.08 1285.09,824.274 1285.65,849.888 1286.21,826.473 1286.77,817.977 1287.33,824.73 1287.89,833.74 1288.45,837.84 1289,829.905 1289.56,822.674 1290.12,815.046 1290.68,837.489 1291.24,813.513 1291.8,802.987 1292.36,781.342 1292.92,792.439 1293.48,740.55 1294.04,719.609 1294.6,699.306 1295.16,716.081 1295.72,715.387 1296.28,714.787 1296.83,725.599 1297.39,708.479 1297.95,692.606 1298.51,678.518 1299.07,662.857 1299.63,683.958 1300.19,681.498 1300.75,651.193 1301.31,637.201 1301.87,608.461 1302.43,593.55 1302.99,566.372 1303.55,553.133 1304.1,527.593 1304.66,522.137 1305.22,513.704 1305.78,442.516 1306.34,505.683 1306.9,499.302 1307.46,524.054 1308.02,561.644 1308.58,586.892 1309.14,610.465 1309.7,628.371 1310.26,649.203 1310.82,650.262 1311.38,636.578 1311.93,652.696 1312.49,653.323 1313.05,656.674 1313.61,644.153 1314.17,631.179 1314.73,652.097 1315.29,670.195 1315.85,686.719 1316.41,701.631 1316.97,703.07 1317.53,703.885 1318.09,703.504 1318.65,703.79 1319.2,719.187 1319.76,736.189 1320.32,735.367 1320.88,716.002 1321.44,697.592 1322,666.553 1322.56,665.346 1323.12,661.883 1323.68,659.771 1324.24,657.979 1324.8,625.736 1325.36,629.953 1325.92,681.978 1326.47,683.138 1327.03,618.474 1327.59,625.24 1328.15,627.652 1328.71,612.801 1329.27,567.475 1329.83,587.773 1330.39,592.575 1330.95,582.237 1331.51,585.292 1332.07,591.183 1332.63,595.506 1333.19,638.299 1333.75,659.698 1334.3,662.318 1334.86,676.948 1335.42,661.3 1335.98,660.479 1336.54,629.531 1337.1,633.615 1337.66,604.709 1338.22,608.531 1338.78,613.77 1339.34,617.578 1339.9,658.879 1340.46,643.113 1341.02,648.465 1341.57,664.724 1342.13,698.536 1342.69,669.229 1343.25,639.553 1343.81,627.635 1344.37,648.805 1344.93,634.923 1345.49,636.935 1346.05,654.263 1346.61,656.344 1347.17,656.965 1347.73,694.406 1348.29,709.59 1348.84,725.651 1349.4,731.047 1349.96,696.085 1350.52,713.683 1351.08,696.2 1351.64,696.516 1352.2,698.578 1352.76,695.29 1353.32,693.61 1353.88,691.885 1354.44,677.025 1355,678.949 1355.56,711.436 1356.12,725.687 1356.67,738.121 1357.23,749.779 1357.79,763.591 1358.35,776.958 1358.91,754.913 1359.47,733.18 1360.03,756.324 1360.59,755.809 1361.15,751.454 1361.71,764.679 1362.27,773.966 1362.83,754.253 1363.39,736.729 1363.94,745.882 1364.5,804.881 1365.06,799.088 1365.62,808.136 1366.18,785.413 1366.74,715.132 1367.3,682.97 1367.86,650.074 1368.42,651.762 1368.98,652.568 1369.54,652.956 1370.1,654.071 1370.66,657.147 1371.21,656.395 1371.77,673.616 1372.33,643.931 1372.89,646.456 1373.45,693.128 1374.01,708.899 1374.57,692.573 1375.13,755.046 1375.69,732.97 1376.25,732.56 1376.81,729.486 1377.37,743.057 1377.93,673.48 1378.49,671.985 1379.04,684.336 1379.6,683.676 1380.16,715.181 1380.72,727.52 1381.28,740.611 1381.84,689.109 1382.4,720.563 1382.96,715.017 1383.52,668.146 1384.08,686.265 1384.64,637.703 1385.2,623.679 1385.76,594.169 1386.31,616.116 1386.87,637.402 1387.43,658.009 1387.99,690.034 1388.55,661.344 1389.11,629.562 1389.67,631.119 1390.23,554.717 1390.79,593.34 1391.35,597.433 1391.91,566.826 1392.47,556.818 1393.03,548.042 1393.58,603.497 1394.14,625.704 1394.7,611.284 1395.26,583.209 1395.82,620.884 1396.38,625.328 1396.94,646.818 1397.5,646.961 1398.06,648.934 1398.62,652.434 1399.18,655.954 1399.74,674.88 1400.3,678.169 1400.86,682.569 1401.41,683.654 1401.97,688.265 1402.53,688.867 1403.09,652.133 1403.65,652.96 1404.21,639.341 1404.77,606.778 1405.33,613.527 1405.89,602.089 1406.45,607.166 1407.01,609.775 1407.57,597.237 1408.13,589.671 1408.68,607.368 1409.24,612.777 1409.8,603.748 1410.36,608.653 1410.92,594.908 1411.48,648.785 1412.04,632.329 1412.6,619.563 1413.16,604.634 1413.72,643.022 1414.28,632.414 1414.84,635.471 1415.4,621.036 1415.95,622.075 1416.51,655.94 1417.07,719.876 1417.63,703.162 1418.19,689.017 1418.75,740.389 1419.31,704.957 1419.87,719.662 1420.43,715.341 1420.99,714.886 1421.55,713.128 1422.11,713.024 1422.67,709.464 1423.23,705.976 1423.78,736.977 1424.34,777.865 1424.9,816.99 1425.46,793.124 1426.02,784.384 1426.58,795.6 1427.14,801.633 1427.7,827.721 1428.26,819.986 1428.82,815.739 1429.38,809.388 1429.94,788.734 1430.5,765.26 1431.05,731.689 1431.61,716.317 1432.17,681.992 1432.73,713.412 1433.29,730.077 1433.85,764.811 1434.41,778.038 1434.97,743.063 1435.53,772.665 1436.09,797.136 1436.65,809.827 1437.21,804.594 1437.77,781.915 1438.33,793.325 1438.88,785.283 1439.44,827.201 1440,820.274 1440.56,860.814 1441.12,819.353 1441.68,777.658 1442.24,755.728 1442.8,767.24 1443.36,749.667 1443.92,746.153 1444.48,741.56 1445.04,739.799 1445.6,686.275 1446.15,635.289 1446.71,592.833 1447.27,598.729 1447.83,600.468 1448.39,607.687 1448.95,609.782 1449.51,599.141 1450.07,605.236 1450.63,624.514 1451.19,611.062 1451.75,598.217 1452.31,618.636 1452.87,606.244 1453.42,579.311 1453.98,589.091 1454.54,594.929 1455.1,634.947 1455.66,667.388 1456.22,669.06 1456.78,655.781 1457.34,674.874 1457.9,643.912 1458.46,647.637 1459.02,682.274 1459.58,713.169 1460.14,709.89 1460.7,694.145 1461.25,674.35 1461.81,662.754 1462.37,710.367 1462.93,705.059 1463.49,708.162 1464.05,723.067 1464.61,721.979 1465.17,717.468 1465.73,716.847 1466.29,717.928 1466.85,716.061 1467.41,748.746 1467.97,748.806 1468.52,747.048 1469.08,759.709 1469.64,737.891 1470.2,753.557 1470.76,763.319 1471.32,693.445 1471.88,676.169 1472.44,691.514 1473,706.867 1473.56,674.416 1474.12,676.148 1474.68,694.504 1475.24,726.205 1475.79,726.364 1476.35,690.761 1476.91,725.105 1477.47,726.374 1478.03,693.969 1478.59,663.115 1479.15,696.435 1479.71,696.112 1480.27,728.306 1480.83,737.42 1481.39,733.421 1481.95,712.663 1482.51,710.164 1483.07,723.413 1483.62,708.802 1484.18,724.277 1484.74,733.117 1485.3,730.119 1485.86,707.367 1486.42,720.995 1486.98,720.175 1487.54,779.78 1488.1,756.928 1488.66,756.008 1489.22,769.363 1489.78,778.606 1490.34,789.736 1490.89,717.833 1491.45,698.447 1492.01,711.571 1492.57,693.44 1493.13,694.271 1493.69,673.77 1494.25,673.957 1494.81,674.676 1495.37,657.462 1495.93,642.526 1496.49,646.71 1497.05,617.238 1497.61,608.466 1498.16,581.66 1498.72,618.708 1499.28,637.638 1499.84,655.645 1500.4,659.426 1500.96,606.242 1501.52,628.077 1502.08,630.546 1502.64,634.376 1503.2,600.104 1503.76,604.212 1504.32,609.587 1504.88,630.038 1505.44,649.54 1505.99,651.84 1506.55,668.971 1507.11,650.813 1507.67,650.602 1508.23,685.346 1508.79,686.795 1509.35,670.965 1509.91,670.292 1510.47,674.282 1511.03,691.921 1511.59,657.891 1512.15,662.083 1512.71,663.807 1513.26,667.01 1513.82,634.354 1514.38,654.519 1514.94,605.538 1515.5,597.437 1516.06,619.3 1516.62,654.989 1517.18,657.748 1517.74,644.476 1518.3,646.95 1518.86,668.436 1519.42,672.067 1519.98,673.243 1520.53,679.285 1521.09,681.434 1521.65,747.727 1522.21,757.621 1522.77,721.822 1523.33,736.358 1523.89,736.82 1524.45,736.824 1525.01,702.188 1525.57,718.021 1526.13,684.161 1526.69,684.76 1527.25,683.337 1527.81,685.616 1528.36,701.49 1528.92,687.677 1529.48,671.434 1530.04,654.802 1530.6,661.018 1531.16,682.008 1531.72,700.584 1532.28,650.423 1532.84,653.15 1533.4,670.928 1533.96,642.012 1534.52,659.545 1535.08,659.956 1535.63,624.993 1536.19,644.466 1536.75,661.473 1537.31,677.021 1537.87,661.848 1538.43,659.971 1538.99,662.148 1539.55,629.055 1540.11,633.424 1540.67,651.812 1541.23,669.435 1541.79,687.999 1542.35,735.934 1542.9,734.902 1543.46,728.377 1544.02,693.442 1544.58,711.1 1545.14,726.197 1545.7,738.531 1546.26,735.497 1546.82,714.168 1547.38,732.361 1547.94,711.362 1548.5,693.987 1549.06,710.178 1549.62,727.442 1550.18,756.455 1550.73,769.444 1551.29,795.163 1551.85,771.49 1552.41,766.068 1552.97,745.577 1553.53,743.628 1554.09,710.271 1554.65,705.125 1555.21,716.02 1555.77,715.536 1556.33,730.79 1556.89,765.958 1557.45,778.849 1558,740.384 1558.56,755.746 1559.12,769.291 1559.68,780.388 1560.24,791.01 1560.8,741.65 1561.36,741.417 1561.92,737.259 1562.48,685.365 1563.04,702.364 1563.6,701.507 1564.16,686.634 1564.72,685.797 1565.28,651.565 1565.83,655.435 1566.39,624.139 1566.95,607.854 1567.51,608.925 1568.07,631.048 1568.63,650.228 1569.19,635.602 1569.75,669.218 1570.31,702.575 1570.87,691.763 1571.43,688.13 1571.99,704.242 1572.55,716.299 1573.1,745.589 1573.66,757.461 1574.22,753.377 1574.78,765.996 1575.34,763.847 1575.9,729.351 1576.46,727.531 1577.02,706.04 1577.58,720.6 1578.14,685.929 1578.7,672.336 1579.26,706.033 1579.82,721.307 1580.37,717.997 1580.93,651.069 1581.49,651.938 1582.05,682.476 1582.61,680.94 1583.17,666.927 1583.73,620.603 1584.29,621.969 1584.85,593.238 1585.41,548.101 1585.97,557.494 1586.53,564.562 1587.09,589.001 1587.65,677.643 1588.2,698.409 1588.76,696.882 1589.32,712.593 1589.88,677.1 1590.44,661.673 1591,691.712 1591.56,658.632 1592.12,676.578 1592.68,645.992 1593.24,649.414 1593.8,668.465 1594.36,687.147 1594.92,689.877 1595.47,667.627 1596.03,668.216 1596.59,687.492 1597.15,668.3 1597.71,686.221 1598.27,716.587 1598.83,718.422 1599.39,749.172 1599.95,779.579 1600.51,759.526 1601.07,739.082 1601.63,720.913 1602.19,701.157 1602.74,699.447 1603.3,681.645 1603.86,680.173 1604.42,685.108 1604.98,717.652 1605.54,699.305 1606.1,672.313 1606.66,640.757 1607.22,673.561 1607.78,674.043 1608.34,640.618 1608.9,645.091 1609.46,634.257 1610.02,622.833 1610.57,627.473 1611.13,647.895 1611.69,669.293 1612.25,651.986 1612.81,653.357 1613.37,654.279 1613.93,654.276 1614.49,640.937 1615.05,654.39 1615.61,640.416 1616.17,678.616 1616.73,659.313 1617.29,642.386 1617.84,676.617 1618.4,756.461 1618.96,769.867 1619.52,766.067 1620.08,782.417 1620.64,796.984 1621.2,791.913 1621.76,787.842 1622.32,765.205 1622.88,764.345 1623.44,763.115 1624,741.817 1624.56,724.409 1625.11,690.06 1625.67,673.304 1626.23,705.867 1626.79,706.056 1627.35,690.866 1627.91,692.656 1628.47,708.163 1629.03,724.733 1629.59,719.971 1630.15,715.239 1630.71,725.365 1631.27,707.248 1631.83,701.1 1632.39,686.881 1632.94,671.875 1633.5,671.831 1634.06,672.875 1634.62,674.735 1635.18,687.688 1635.74,655.523 1636.3,607.844 1636.86,627.483 1637.42,628.525 1637.98,616.169 1638.54,618.372 1639.1,637.993 1639.66,624.334 1640.21,640.825 1640.77,677.116 1641.33,678.967 1641.89,646.692 1642.45,681.758 1643.01,651.087 1643.57,633.792 1644.13,636.546 1644.69,607.32 1645.25,628.619 1645.81,613.456 1646.37,663.701 1646.93,667.353 1647.48,682.56 1648.04,684.545 1648.6,703.094 1649.16,685.722 1649.72,667.466 1650.28,684.629 1650.84,683.099 1651.4,698.974 1651.96,651.601 1652.52,622.837 1653.08,660.041 1653.64,646.432 1654.2,629.832 1654.76,663.686 1655.31,651.014 1655.87,653.828 1656.43,639.328 1656.99,660.71 1657.55,661.901 1658.11,709.88 1658.67,726.513 1659.23,690.618 1659.79,657.695 1660.35,641.435 1660.91,640.166 1661.47,659.14 1662.03,643.838 1662.58,614.459 1663.14,617.764 1663.7,622.698 1664.26,608.99 1664.82,595.163 1665.38,601.604 1665.94,603.464 1666.5,609.16 1667.06,608.192 1667.62,610.978 1668.18,616.012 1668.74,635.406 1669.3,622.997 1669.85,638.545 1670.41,640.746 1670.97,623.579 1671.53,629.821 1672.09,666.703 1672.65,711.231 1673.21,710.467 1673.77,694.368 1674.33,677.708 1674.89,676.446 1675.45,678.434 1676.01,678.766 1676.57,680.576 1677.13,661.617 1677.68,681.491 1678.24,681.531 1678.8,665.858 1679.36,668.027 1679.92,688.349 1680.48,674.059 1681.04,661.641 1681.6,664.289 1682.16,678.8 1682.72,714.238 1683.28,712.202 1683.84,696.372 1684.4,712.276 1684.95,694.479 1685.51,709.88 1686.07,676.837 1686.63,677.491 1687.19,696.385 1687.75,662.914 1688.31,662.124 1688.87,650.063 1689.43,668.96 1689.99,685.018 1690.55,682.559 1691.11,696.4 1691.67,694.947 1692.23,711.128 1692.78,723.89 1693.34,721.459 1693.9,701.692 1694.46,715.778 1695.02,698.306 1695.58,681.523 1696.14,664.079 1696.7,677.754 1697.26,643.123 1697.82,661.513 1698.38,679.875 1698.94,676.791 1699.5,677.605 1700.05,678.75 1700.61,664.12 1701.17,633.423 1701.73,654.112 1702.29,672.095 1702.85,640.65 1703.41,641.888 1703.97,674.528 1704.53,658.097 1705.09,642.416 1705.65,628.413 1706.21,614.368 1706.77,602.049 1707.32,605.214 1707.88,626.99 1708.44,646.043 1709,693.059 1709.56,677.193 1710.12,662.315 1710.68,665.778 1711.24,683.648 1711.8,701.073 1712.36,681.062 1712.92,680.325 1713.48,698.269 1714.04,665.535 1714.6,615.756 1715.15,619.896 1715.71,620.632 1716.27,626.575 1716.83,612.685 1717.39,648.692 1717.95,652.287 1718.51,685.046 1719.07,652.341 1719.63,634.07 1720.19,635.68 1720.75,621.429 1721.31,621.322 1721.87,607.293 1722.42,626.92 1722.98,646.314 1723.54,697.965 1724.1,677.476 1724.66,677.454 1725.22,643.707 1725.78,645.688 1726.34,664.043 1726.9,682.549 1727.46,685.626 1728.02,686.35 1728.58,690.164 1729.14,707.565 1729.69,704.47 1730.25,704.801 1730.81,686.627 1731.37,685.892 1731.93,699.271 1732.49,715.697 1733.05,713.745 1733.61,741.88 1734.17,740.177 1734.73,738.673 1735.29,749.367 1735.85,765.033 1736.41,795.401 1736.97,775.373 1737.52,722.602 1738.08,718.16 1738.64,680.485 1739.2,664.992 1739.76,646.218 1740.32,596.636 1740.88,599.542 1741.44,672.993 1742,688.455 1742.56,688.122 1743.12,704.103 1743.68,685.755 1744.24,685.455 1744.79,670.732 1745.35,704.531 1745.91,703.072 1746.47,733.541 1747.03,727.914 1747.59,709.644 1748.15,724.137 1748.71,720.923 1749.27,751.253 1749.83,729.522 1750.39,758.94 1750.95,756.392 1751.51,754.318 1752.06,751.088 1752.62,761.661 1753.18,738.041 1753.74,777.95 1754.3,802.092 1754.86,780.12 1755.42,790.789 1755.98,785.191 1756.54,763.606 1757.1,780.052 1757.66,772.7 1758.22,751.101 1758.78,746.505 1759.34,742.878 1759.89,757.436 1760.45,787.037 1761.01,763.71 1761.57,761.089 1762.13,741.871 1762.69,722.888 1763.25,750.073 1763.81,697.707 1764.37,666.02 1764.93,667.936 1765.49,701.278 1766.05,685.509 1766.61,683.86 1767.16,650.827 1767.72,664.954 1768.28,666.475 1768.84,650.791 1769.4,686.418 1769.96,656.613 1770.52,641.914 1771.08,625.022 1771.64,640.836 1772.2,640.278 1772.76,639.494 1773.32,640.932 1773.88,627.585 1774.43,629.148 1774.99,616.562 1775.55,636.809 1776.11,624.527 1776.67,626.492 1777.23,600.45 1777.79,620.627 1778.35,639.719 1778.91,644.06 1779.47,662.891 1780.03,663.613 1780.59,680.642 1781.15,646.077 1781.71,666.122 1782.26,652.6 1782.82,670.816 1783.38,672.215 1783.94,625.218 1784.5,647.756 1785.06,678.552 1785.62,660.091 1786.18,676.826 1786.74,675.766 1787.3,676.988 1787.86,677.996 1788.42,697.905 1788.98,695.539 1789.53,689.704 1790.09,672.45 1790.65,705.546 1791.21,685.782 1791.77,683.763 1792.33,679.983 1792.89,712.238 1793.45,726.671 1794.01,711.373 1794.57,707.569 1795.13,687.372 1795.69,684.362 1796.25,686.066 1796.8,637.894 1797.36,623.832 1797.92,626.65 1798.48,628.766 1799.04,646.286 1799.6,665.565 1800.16,632.272 1800.72,649.445 1801.28,651.164 1801.84,654.612 1802.4,655.888 1802.96,676.477 1803.52,675.504 1804.08,678.417 1804.63,665.022 1805.19,666.589 1805.75,668.02 1806.31,653.731 1806.87,656.412 1807.43,641.22 1807.99,675.5 1808.55,663.092 1809.11,616.155 1809.67,636.438 1810.23,622.254 1810.79,627.722 1811.35,616.422 1811.9,656.228 1812.46,672.798 1813.02,658.413 1813.58,676.791 1814.14,662.363 1814.7,598.642 1815.26,604.321 1815.82,628.847 1816.38,633.141 1816.94,621.129 1817.5,640.292 1818.06,627.886 1818.62,660.54 1819.18,631.622 1819.73,635.884 1820.29,642.569 1820.85,630.554 1821.41,653.439 1821.97,687.136 1822.53,670.415 1823.09,671.412 1823.65,655.04 1824.21,643.051 1824.77,675.92 1825.33,675.32 1825.89,675.341 1826.45,677.384 1827,646.867 1827.56,629.802 1828.12,648.706 1828.68,653.147 1829.24,637.257 1829.8,638.814 1830.36,673.164 1830.92,672.348 1831.48,658.931 1832.04,660.528 1832.6,693.474 1833.16,663.019 1833.72,679.379 1834.27,712.162 1834.83,728.441 1835.39,727.88 1835.95,746.335 1836.51,791.765 1837.07,770.701 1837.63,753.205 1838.19,767.517 \"/>\n<path clip-path=\"url(#clip263)\" d=\"M720.247 689.857 L720.806 689.857 L721.365 689.857 L721.924 689.857 L722.484 689.857 L723.043 689.857 L723.602 689.857 L724.161 689.857 L724.721 689.857 L725.28 689.857 L725.839 689.857 L726.398 689.857 L726.958 689.857 L727.517 689.857 L728.076 689.857 L728.635 689.857 L729.195 689.857 L729.754 689.857 L730.313 689.857 L730.872 689.857 L731.432 689.857 L731.991 689.857 L732.55 689.857 L733.109 689.857 L733.669 689.857 L734.228 689.857 L734.787 689.857 L735.346 689.857 L735.906 689.857 L736.465 689.857 L737.024 689.857 L737.583 689.857 L738.143 689.857 L738.702 689.857 L739.261 689.857 L739.82 689.857 L740.38 689.857 L740.939 689.857 L741.498 689.857 L742.057 689.857 L742.617 689.857 L743.176 689.857 L743.735 689.857 L744.294 689.857 L744.854 689.857 L745.413 689.857 L745.972 689.857 L746.531 689.857 L747.091 689.857 L747.65 689.857 L748.209 689.857 L748.768 689.857 L749.328 689.857 L749.887 689.857 L750.446 689.857 L751.005 689.857 L751.565 689.857 L752.124 689.857 L752.683 689.857 L753.242 689.857 L753.802 689.857 L754.361 689.857 L754.92 689.857 L755.479 689.857 L756.039 689.857 L756.598 689.857 L757.157 689.857 L757.716 689.857 L758.276 689.857 L758.835 689.857 L759.394 689.857 L759.953 689.857 L760.513 689.857 L761.072 689.857 L761.631 689.857 L762.19 689.857 L762.75 689.857 L763.309 689.857 L763.868 689.857 L764.427 689.857 L764.987 689.857 L765.546 689.857 L766.105 689.857 L766.664 689.857 L767.224 689.857 L767.783 689.857 L768.342 689.857 L768.901 689.857 L769.461 689.857 L770.02 689.857 L770.579 689.857 L771.138 689.857 L771.698 689.857 L772.257 689.857 L772.816 689.857 L773.375 689.857 L773.935 689.857 L774.494 689.857 L775.053 689.857 L775.612 689.857 L776.172 689.857 L776.731 689.857 L777.29 689.857 L777.849 689.857 L778.409 689.857 L778.968 689.857 L779.527 689.857 L780.086 689.857 L780.646 689.857 L781.205 689.857 L781.764 689.857 L782.323 689.857 L782.883 689.857 L783.442 689.857 L784.001 689.857 L784.56 689.857 L785.12 689.857 L785.679 689.857 L786.238 689.857 L786.797 689.857 L787.357 689.857 L787.916 689.857 L788.475 689.857 L789.034 689.857 L789.594 689.857 L790.153 689.857 L790.712 689.857 L791.271 689.857 L791.831 689.857 L792.39 689.857 L792.949 689.857 L793.508 689.857 L794.068 689.857 L794.627 689.857 L795.186 689.857 L795.745 689.857 L796.305 689.857 L796.864 689.857 L797.423 689.857 L797.982 689.857 L798.542 689.857 L799.101 689.857 L799.66 689.857 L800.219 689.857 L800.779 689.857 L801.338 689.857 L801.897 689.857 L802.456 689.857 L803.016 689.857 L803.575 689.857 L804.134 689.857 L804.693 689.857 L805.253 689.857 L805.812 689.857 L806.371 689.857 L806.931 689.857 L807.49 689.857 L808.049 689.857 L808.608 689.857 L809.168 689.857 L809.727 689.857 L810.286 689.857 L810.845 689.857 L811.405 689.857 L811.964 689.857 L812.523 689.857 L813.082 689.857 L813.642 689.857 L814.201 689.857 L814.76 689.857 L815.319 689.857 L815.879 689.857 L816.438 689.857 L816.997 689.857 L817.556 689.857 L818.116 689.857 L818.675 689.857 L819.234 689.857 L819.793 689.857 L820.353 689.857 L820.912 689.857 L821.471 689.857 L822.03 689.857 L822.59 689.857 L823.149 689.857 L823.708 689.857 L824.267 689.857 L824.827 689.857 L825.386 689.857 L825.945 689.857 L826.504 689.857 L827.064 689.857 L827.623 689.857 L828.182 689.857 L828.741 689.857 L829.301 689.857 L829.86 689.857 L830.419 689.857 L830.978 689.857 L831.538 689.857 L832.097 689.857 L832.656 689.857 L833.215 689.857 L833.775 689.857 L834.334 689.857 L834.893 689.857 L835.452 689.857 L836.012 689.857 L836.571 689.857 L837.13 689.857 L837.689 689.857 L838.249 689.857 L838.808 689.857 L839.367 689.857 L839.926 689.857 L840.486 689.857 L841.045 689.857 L841.604 689.857 L842.163 689.857 L842.723 689.857 L843.282 689.857 L843.841 689.857 L844.4 689.857 L844.96 689.857 L845.519 689.857 L846.078 689.857 L846.637 689.857 L847.197 689.857 L847.756 689.857 L848.315 689.857 L848.874 689.857 L849.434 689.857 L849.993 689.857 L850.552 689.857 L851.111 689.857 L851.671 689.857 L852.23 689.857 L852.789 689.857 L853.348 689.857 L853.908 689.857 L854.467 689.857 L855.026 689.857 L855.585 689.857 L856.145 689.857 L856.704 689.857 L857.263 689.857 L857.822 689.857 L858.382 689.857 L858.941 689.857 L859.5 689.857 L860.059 689.857 L860.619 689.857 L861.178 689.857 L861.737 689.857 L862.296 689.857 L862.856 689.857 L863.415 689.857 L863.974 689.857 L864.533 689.857 L865.093 689.857 L865.652 689.857 L866.211 689.857 L866.77 689.857 L867.33 689.857 L867.889 689.857 L868.448 689.857 L869.007 689.857 L869.567 689.857 L870.126 689.857 L870.685 689.857 L871.244 689.857 L871.804 689.857 L872.363 689.857 L872.922 689.857 L873.481 689.857 L874.041 689.857 L874.6 689.857 L875.159 689.857 L875.718 689.857 L876.278 689.857 L876.837 689.857 L877.396 689.857 L877.955 689.857 L878.515 689.857 L879.074 689.857 L879.633 689.857 L880.192 689.857 L880.752 689.857 L881.311 689.857 L881.87 689.857 L882.429 689.857 L882.989 689.857 L883.548 689.857 L884.107 689.857 L884.666 689.857 L885.226 689.857 L885.785 689.857 L886.344 689.857 L886.903 689.857 L887.463 689.857 L888.022 689.857 L888.581 689.857 L889.14 689.857 L889.7 689.857 L890.259 689.857 L890.818 689.857 L891.377 689.857 L891.937 689.857 L892.496 689.857 L893.055 689.857 L893.614 689.857 L894.174 689.857 L894.733 689.857 L895.292 689.857 L895.851 689.857 L896.411 689.857 L896.97 689.857 L897.529 689.857 L898.088 689.857 L898.648 689.857 L899.207 689.857 L899.766 689.857 L900.325 689.857 L900.885 689.857 L901.444 689.857 L902.003 689.857 L902.562 689.857 L903.122 689.857 L903.681 689.857 L904.24 689.857 L904.799 689.857 L905.359 689.857 L905.918 689.857 L906.477 689.857 L907.036 689.857 L907.596 689.857 L908.155 689.857 L908.714 689.857 L909.273 689.857 L909.833 689.857 L910.392 689.857 L910.951 689.857 L911.51 689.857 L912.07 689.857 L912.629 689.857 L913.188 689.857 L913.747 689.857 L914.307 689.857 L914.866 689.857 L915.425 689.857 L915.984 689.857 L916.544 689.857 L917.103 689.857 L917.662 689.857 L918.221 689.857 L918.781 689.857 L919.34 689.857 L919.899 689.857 L920.458 689.857 L921.018 689.857 L921.577 689.857 L922.136 689.857 L922.695 689.857 L923.255 689.857 L923.814 689.857 L924.373 689.857 L924.932 689.857 L925.492 689.857 L926.051 689.857 L926.61 689.857 L927.169 689.857 L927.729 689.857 L928.288 689.857 L928.847 689.857 L929.406 689.857 L929.966 689.857 L930.525 689.857 L931.084 689.857 L931.644 689.857 L932.203 689.857 L932.762 689.857 L933.321 689.857 L933.881 689.857 L934.44 689.857 L934.999 689.857 L935.558 689.857 L936.118 689.857 L936.677 689.857 L937.236 689.857 L937.795 689.857 L938.355 689.857 L938.914 689.857 L939.473 689.857 L940.032 689.857 L940.592 689.857 L941.151 689.857 L941.71 689.857 L942.269 689.857 L942.829 689.857 L943.388 689.857 L943.947 689.857 L944.506 689.857 L945.066 689.857 L945.625 689.857 L946.184 689.857 L946.743 689.857 L947.303 689.857 L947.862 689.857 L948.421 689.857 L948.98 689.857 L949.54 689.857 L950.099 689.857 L950.658 689.857 L951.217 689.857 L951.777 689.857 L952.336 689.857 L952.895 689.857 L953.454 689.857 L954.014 689.857 L954.573 689.857 L955.132 689.857 L955.691 689.857 L956.251 689.857 L956.81 689.857 L957.369 689.857 L957.928 689.857 L958.488 689.857 L959.047 689.857 L959.606 689.857 L960.165 689.857 L960.725 689.857 L961.284 689.857 L961.843 689.857 L962.402 689.857 L962.962 689.857 L963.521 689.857 L964.08 689.857 L964.639 689.857 L965.199 689.857 L965.758 689.857 L966.317 689.857 L966.876 689.857 L967.436 689.857 L967.995 689.857 L968.554 689.857 L969.113 689.857 L969.673 689.857 L970.232 689.857 L970.791 689.857 L971.35 689.857 L971.91 689.857 L972.469 689.857 L973.028 689.857 L973.587 689.857 L974.147 689.857 L974.706 689.857 L975.265 689.857 L975.824 689.857 L976.384 689.857 L976.943 689.857 L977.502 689.857 L978.061 689.857 L978.621 689.857 L979.18 689.857 L979.739 689.857 L980.298 689.857 L980.858 689.857 L981.417 689.857 L981.976 689.857 L982.535 689.857 L983.095 689.857 L983.654 689.857 L984.213 689.857 L984.772 689.857 L985.332 689.857 L985.891 689.857 L986.45 689.857 L987.009 689.857 L987.569 689.857 L988.128 689.857 L988.687 689.857 L989.246 689.857 L989.806 689.857 L990.365 689.857 L990.924 689.857 L991.483 689.857 L992.043 689.857 L992.602 689.857 L993.161 689.857 L993.72 689.857 L994.28 689.857 L994.839 689.857 L995.398 689.857 L995.957 689.857 L996.517 689.857 L997.076 689.857 L997.635 689.857 L998.194 689.857 L998.754 689.857 L999.313 689.857 L999.872 689.857 L1000.43 689.857 L1000.99 689.857 L1001.55 689.857 L1002.11 689.857 L1002.67 689.857 L1003.23 689.857 L1003.79 689.857 L1004.35 689.857 L1004.91 689.857 L1005.46 689.857 L1006.02 689.857 L1006.58 689.857 L1007.14 689.857 L1007.7 689.857 L1008.26 689.857 L1008.82 689.857 L1009.38 689.857 L1009.94 689.857 L1010.5 689.857 L1011.06 689.857 L1011.62 689.857 L1012.18 689.857 L1012.73 689.857 L1013.29 689.857 L1013.85 689.857 L1014.41 689.857 L1014.97 689.857 L1015.53 689.857 L1016.09 689.857 L1016.65 689.857 L1017.21 689.857 L1017.77 689.857 L1018.33 689.857 L1018.89 689.857 L1019.45 689.857 L1020.01 689.857 L1020.56 689.857 L1021.12 689.857 L1021.68 689.857 L1022.24 689.857 L1022.8 689.857 L1023.36 689.857 L1023.92 689.857 L1024.48 689.857 L1025.04 689.857 L1025.6 689.857 L1026.16 689.857 L1026.72 689.857 L1027.28 689.857 L1027.83 689.857 L1028.39 689.857 L1028.95 689.857 L1029.51 689.857 L1030.07 689.857 L1030.63 689.857 L1031.19 689.857 L1031.75 689.857 L1032.31 689.857 L1032.87 689.857 L1033.43 689.857 L1033.99 689.857 L1034.55 689.857 L1035.1 689.857 L1035.66 689.857 L1036.22 689.857 L1036.78 689.857 L1037.34 689.857 L1037.9 689.857 L1038.46 689.857 L1039.02 689.857 L1039.58 689.857 L1040.14 689.857 L1040.7 689.857 L1041.26 689.857 L1041.82 689.857 L1042.38 689.857 L1042.93 689.857 L1043.49 689.857 L1044.05 689.857 L1044.61 689.857 L1045.17 689.857 L1045.73 689.857 L1046.29 689.857 L1046.85 689.857 L1047.41 689.857 L1047.97 689.857 L1048.53 689.857 L1049.09 689.857 L1049.65 689.857 L1050.2 689.857 L1050.76 689.857 L1051.32 689.857 L1051.88 689.857 L1052.44 689.857 L1053 689.857 L1053.56 689.857 L1054.12 689.857 L1054.68 689.857 L1055.24 689.857 L1055.8 689.857 L1056.36 689.857 L1056.92 689.857 L1057.48 689.857 L1058.03 689.857 L1058.59 689.857 L1059.15 689.857 L1059.71 689.857 L1060.27 689.857 L1060.83 689.857 L1061.39 689.857 L1061.95 689.857 L1062.51 689.857 L1063.07 689.857 L1063.63 689.857 L1064.19 689.857 L1064.75 689.857 L1065.3 689.857 L1065.86 689.857 L1066.42 689.857 L1066.98 689.857 L1067.54 689.857 L1068.1 689.857 L1068.66 689.857 L1069.22 689.857 L1069.78 689.857 L1070.34 689.857 L1070.9 689.857 L1071.46 689.857 L1072.02 689.857 L1072.57 689.857 L1073.13 689.857 L1073.69 689.857 L1074.25 689.857 L1074.81 689.857 L1075.37 689.857 L1075.93 689.857 L1076.49 689.857 L1077.05 689.857 L1077.61 689.857 L1078.17 689.857 L1078.73 689.857 L1079.29 689.857 L1079.85 689.857 L1080.4 689.857 L1080.96 689.857 L1081.52 689.857 L1082.08 689.857 L1082.64 689.857 L1083.2 689.857 L1083.76 689.857 L1084.32 689.857 L1084.88 689.857 L1085.44 689.857 L1086 689.857 L1086.56 689.857 L1087.12 689.857 L1087.67 689.857 L1088.23 689.857 L1088.79 689.857 L1089.35 689.857 L1089.91 689.857 L1090.47 689.857 L1091.03 689.857 L1091.59 689.857 L1092.15 689.857 L1092.71 689.857 L1093.27 689.857 L1093.83 689.857 L1094.39 689.857 L1094.94 689.857 L1095.5 689.857 L1096.06 689.857 L1096.62 689.857 L1097.18 689.857 L1097.74 689.857 L1098.3 689.857 L1098.86 689.857 L1099.42 689.857 L1099.98 689.857 L1100.54 689.857 L1101.1 689.857 L1101.66 689.857 L1102.22 689.857 L1102.77 689.857 L1103.33 689.857 L1103.89 689.857 L1104.45 689.857 L1105.01 689.857 L1105.57 689.857 L1106.13 689.857 L1106.69 689.857 L1107.25 689.857 L1107.81 689.857 L1108.37 689.857 L1108.93 689.857 L1109.49 689.857 L1110.04 689.857 L1110.6 689.857 L1111.16 689.857 L1111.72 689.857 L1112.28 689.857 L1112.84 689.857 L1113.4 689.857 L1113.96 689.857 L1114.52 689.857 L1115.08 689.857 L1115.64 689.857 L1116.2 689.857 L1116.76 689.857 L1117.31 689.857 L1117.87 689.857 L1118.43 689.857 L1118.99 689.857 L1119.55 689.857 L1120.11 689.857 L1120.67 689.857 L1121.23 689.857 L1121.79 689.857 L1122.35 689.857 L1122.91 689.857 L1123.47 689.857 L1124.03 689.857 L1124.59 689.857 L1125.14 689.857 L1125.7 689.857 L1126.26 689.857 L1126.82 689.857 L1127.38 689.857 L1127.94 689.857 L1128.5 689.857 L1129.06 689.857 L1129.62 689.857 L1130.18 689.857 L1130.74 689.857 L1131.3 689.857 L1131.86 689.857 L1132.41 689.857 L1132.97 689.857 L1133.53 689.857 L1134.09 689.857 L1134.65 689.857 L1135.21 689.857 L1135.77 689.857 L1136.33 689.857 L1136.89 689.857 L1137.45 689.857 L1138.01 689.857 L1138.57 689.857 L1139.13 689.857 L1139.68 689.857 L1140.24 689.857 L1140.8 689.857 L1141.36 689.857 L1141.92 689.857 L1142.48 689.857 L1143.04 689.857 L1143.6 689.857 L1144.16 689.857 L1144.72 689.857 L1145.28 689.857 L1145.84 689.857 L1146.4 689.857 L1146.96 689.857 L1147.51 689.857 L1148.07 689.857 L1148.63 689.857 L1149.19 689.857 L1149.75 689.857 L1150.31 689.857 L1150.87 689.857 L1151.43 689.857 L1151.99 689.857 L1152.55 689.857 L1153.11 689.857 L1153.67 689.857 L1154.23 689.857 L1154.78 689.857 L1155.34 689.857 L1155.9 689.857 L1156.46 689.857 L1157.02 689.857 L1157.58 689.857 L1158.14 689.857 L1158.7 689.857 L1159.26 689.857 L1159.82 689.857 L1160.38 689.857 L1160.94 689.857 L1161.5 689.857 L1162.05 689.857 L1162.61 689.857 L1163.17 689.857 L1163.73 689.857 L1164.29 689.857 L1164.85 689.857 L1165.41 689.857 L1165.97 689.857 L1166.53 689.857 L1167.09 689.857 L1167.65 689.857 L1168.21 689.857 L1168.77 689.857 L1169.33 689.857 L1169.88 689.857 L1170.44 689.857 L1171 689.857 L1171.56 689.857 L1172.12 689.857 L1172.68 689.857 L1173.24 689.857 L1173.8 689.857 L1174.36 689.857 L1174.92 689.857 L1175.48 689.857 L1176.04 689.857 L1176.6 689.857 L1177.15 689.857 L1177.71 689.857 L1178.27 689.857 L1178.83 689.857 L1179.39 689.857 L1179.95 689.857 L1180.51 689.857 L1181.07 689.857 L1181.63 689.857 L1182.19 689.857 L1182.75 689.857 L1183.31 689.857 L1183.87 689.857 L1184.43 689.857 L1184.98 689.857 L1185.54 689.857 L1186.1 689.857 L1186.66 689.857 L1187.22 689.857 L1187.78 689.857 L1188.34 689.857 L1188.9 689.857 L1189.46 689.857 L1190.02 689.857 L1190.58 689.857 L1191.14 689.857 L1191.7 689.857 L1192.25 689.857 L1192.81 689.857 L1193.37 689.857 L1193.93 689.857 L1194.49 689.857 L1195.05 689.857 L1195.61 689.857 L1196.17 689.857 L1196.73 689.857 L1197.29 689.857 L1197.85 689.857 L1198.41 689.857 L1198.97 689.857 L1199.52 689.857 L1200.08 689.857 L1200.64 689.857 L1201.2 689.857 L1201.76 689.857 L1202.32 689.857 L1202.88 689.857 L1203.44 689.857 L1204 689.857 L1204.56 689.857 L1205.12 689.857 L1205.68 689.857 L1206.24 689.857 L1206.8 689.857 L1207.35 689.857 L1207.91 689.857 L1208.47 689.857 L1209.03 689.857 L1209.59 689.857 L1210.15 689.857 L1210.71 689.857 L1211.27 689.857 L1211.83 689.857 L1212.39 689.857 L1212.95 689.857 L1213.51 689.857 L1214.07 689.857 L1214.62 689.857 L1215.18 689.857 L1215.74 689.857 L1216.3 689.857 L1216.86 689.857 L1217.42 689.857 L1217.98 689.857 L1218.54 689.857 L1219.1 689.857 L1219.66 689.857 L1220.22 689.857 L1220.78 689.857 L1221.34 689.857 L1221.89 689.857 L1222.45 689.857 L1223.01 689.857 L1223.57 689.857 L1224.13 689.857 L1224.69 689.857 L1225.25 689.857 L1225.81 689.857 L1226.37 689.857 L1226.93 689.857 L1227.49 689.857 L1228.05 689.857 L1228.61 689.857 L1229.17 689.857 L1229.72 689.857 L1230.28 689.857 L1230.84 689.857 L1231.4 689.857 L1231.96 689.857 L1232.52 689.857 L1233.08 689.857 L1233.64 689.857 L1234.2 689.857 L1234.76 689.857 L1235.32 689.857 L1235.88 689.857 L1236.44 689.857 L1236.99 689.857 L1237.55 689.857 L1238.11 689.857 L1238.67 689.857 L1239.23 689.857 L1239.79 689.857 L1240.35 689.857 L1240.91 689.857 L1241.47 689.857 L1242.03 689.857 L1242.59 689.857 L1243.15 689.857 L1243.71 689.857 L1244.26 689.857 L1244.82 689.857 L1245.38 689.857 L1245.94 689.857 L1246.5 689.857 L1247.06 689.857 L1247.62 689.857 L1248.18 689.857 L1248.74 689.857 L1249.3 689.857 L1249.86 689.857 L1250.42 689.857 L1250.98 689.857 L1251.54 689.857 L1252.09 689.857 L1252.65 689.857 L1253.21 689.857 L1253.77 689.857 L1254.33 689.857 L1254.89 689.857 L1255.45 689.857 L1256.01 689.857 L1256.57 689.857 L1257.13 689.857 L1257.69 689.857 L1258.25 689.857 L1258.81 689.857 L1259.36 689.857 L1259.92 689.857 L1260.48 689.857 L1261.04 689.857 L1261.6 689.857 L1262.16 689.857 L1262.72 689.857 L1263.28 689.857 L1263.84 689.857 L1264.4 689.857 L1264.96 689.857 L1265.52 689.857 L1266.08 689.857 L1266.63 689.857 L1267.19 689.857 L1267.75 689.857 L1268.31 689.857 L1268.87 689.857 L1269.43 689.857 L1269.99 689.857 L1270.55 689.857 L1271.11 689.857 L1271.67 689.857 L1272.23 689.857 L1272.79 689.857 L1273.35 689.857 L1273.91 689.857 L1274.46 689.857 L1275.02 689.857 L1275.58 689.857 L1276.14 689.857 L1276.7 689.857 L1277.26 689.857 L1277.82 689.857 L1278.38 689.857 L1278.94 689.857 L1279.5 689.857 L1280.06 689.857 L1280.62 689.857 L1281.18 689.857 L1281.73 689.857 L1282.29 689.857 L1282.85 689.857 L1283.41 689.857 L1283.97 689.857 L1284.53 689.857 L1285.09 689.857 L1285.65 689.857 L1286.21 689.857 L1286.77 689.857 L1287.33 689.857 L1287.89 689.857 L1288.45 689.857 L1289 689.857 L1289.56 689.857 L1290.12 689.857 L1290.68 689.857 L1291.24 689.857 L1291.8 689.857 L1292.36 689.857 L1292.92 689.857 L1293.48 689.857 L1294.04 689.857 L1294.6 689.857 L1295.16 689.857 L1295.72 689.857 L1296.28 689.857 L1296.83 689.857 L1297.39 689.857 L1297.95 689.857 L1298.51 689.857 L1299.07 689.857 L1299.63 689.857 L1300.19 689.857 L1300.75 689.857 L1301.31 689.857 L1301.87 689.857 L1302.43 689.857 L1302.99 689.857 L1303.55 689.857 L1304.1 689.857 L1304.66 689.857 L1305.22 689.857 L1305.78 689.857 L1306.34 689.857 L1306.9 689.857 L1307.46 689.857 L1308.02 689.857 L1308.58 689.857 L1309.14 689.857 L1309.7 689.857 L1310.26 689.857 L1310.82 689.857 L1311.38 689.857 L1311.93 689.857 L1312.49 689.857 L1313.05 689.857 L1313.61 689.857 L1314.17 689.857 L1314.73 689.857 L1315.29 689.857 L1315.85 689.857 L1316.41 689.857 L1316.97 689.857 L1317.53 689.857 L1318.09 689.857 L1318.65 689.857 L1319.2 689.857 L1319.76 689.857 L1320.32 689.857 L1320.88 689.857 L1321.44 689.857 L1322 689.857 L1322.56 689.857 L1323.12 689.857 L1323.68 689.857 L1324.24 689.857 L1324.8 689.857 L1325.36 689.857 L1325.92 689.857 L1326.47 689.857 L1327.03 689.857 L1327.59 689.857 L1328.15 689.857 L1328.71 689.857 L1329.27 689.857 L1329.83 689.857 L1330.39 689.857 L1330.95 689.857 L1331.51 689.857 L1332.07 689.857 L1332.63 689.857 L1333.19 689.857 L1333.75 689.857 L1334.3 689.857 L1334.86 689.857 L1335.42 689.857 L1335.98 689.857 L1336.54 689.857 L1337.1 689.857 L1337.66 689.857 L1338.22 689.857 L1338.78 689.857 L1339.34 689.857 L1339.9 689.857 L1340.46 689.857 L1341.02 689.857 L1341.57 689.857 L1342.13 689.857 L1342.69 689.857 L1343.25 689.857 L1343.81 689.857 L1344.37 689.857 L1344.93 689.857 L1345.49 689.857 L1346.05 689.857 L1346.61 689.857 L1347.17 689.857 L1347.73 689.857 L1348.29 689.857 L1348.84 689.857 L1349.4 689.857 L1349.96 689.857 L1350.52 689.857 L1351.08 689.857 L1351.64 689.857 L1352.2 689.857 L1352.76 689.857 L1353.32 689.857 L1353.88 689.857 L1354.44 689.857 L1355 689.857 L1355.56 689.857 L1356.12 689.857 L1356.67 689.857 L1357.23 689.857 L1357.79 689.857 L1358.35 689.857 L1358.91 689.857 L1359.47 689.857 L1360.03 689.857 L1360.59 689.857 L1361.15 689.857 L1361.71 689.857 L1362.27 689.857 L1362.83 689.857 L1363.39 689.857 L1363.94 689.857 L1364.5 689.857 L1365.06 689.857 L1365.62 689.857 L1366.18 689.857 L1366.74 689.857 L1367.3 689.857 L1367.86 689.857 L1368.42 689.857 L1368.98 689.857 L1369.54 689.857 L1370.1 689.857 L1370.66 689.857 L1371.21 689.857 L1371.77 689.857 L1372.33 689.857 L1372.89 689.857 L1373.45 689.857 L1374.01 689.857 L1374.57 689.857 L1375.13 689.857 L1375.69 689.857 L1376.25 689.857 L1376.81 689.857 L1377.37 689.857 L1377.93 689.857 L1378.49 689.857 L1379.04 689.857 L1379.6 689.857 L1380.16 689.857 L1380.72 689.857 L1381.28 689.857 L1381.84 689.857 L1382.4 689.857 L1382.96 689.857 L1383.52 689.857 L1384.08 689.857 L1384.64 689.857 L1385.2 689.857 L1385.76 689.857 L1386.31 689.857 L1386.87 689.857 L1387.43 689.857 L1387.99 689.857 L1388.55 689.857 L1389.11 689.857 L1389.67 689.857 L1390.23 689.857 L1390.79 689.857 L1391.35 689.857 L1391.91 689.857 L1392.47 689.857 L1393.03 689.857 L1393.58 689.857 L1394.14 689.857 L1394.7 689.857 L1395.26 689.857 L1395.82 689.857 L1396.38 689.857 L1396.94 689.857 L1397.5 689.857 L1398.06 689.857 L1398.62 689.857 L1399.18 689.857 L1399.74 689.857 L1400.3 689.857 L1400.86 689.857 L1401.41 689.857 L1401.97 689.857 L1402.53 689.857 L1403.09 689.857 L1403.65 689.857 L1404.21 689.857 L1404.77 689.857 L1405.33 689.857 L1405.89 689.857 L1406.45 689.857 L1407.01 689.857 L1407.57 689.857 L1408.13 689.857 L1408.68 689.857 L1409.24 689.857 L1409.8 689.857 L1410.36 689.857 L1410.92 689.857 L1411.48 689.857 L1412.04 689.857 L1412.6 689.857 L1413.16 689.857 L1413.72 689.857 L1414.28 689.857 L1414.84 689.857 L1415.4 689.857 L1415.95 689.857 L1416.51 689.857 L1417.07 689.857 L1417.63 689.857 L1418.19 689.857 L1418.75 689.857 L1419.31 689.857 L1419.87 689.857 L1420.43 689.857 L1420.99 689.857 L1421.55 689.857 L1422.11 689.857 L1422.67 689.857 L1423.23 689.857 L1423.78 689.857 L1424.34 689.857 L1424.9 689.857 L1425.46 689.857 L1426.02 689.857 L1426.58 689.857 L1427.14 689.857 L1427.7 689.857 L1428.26 689.857 L1428.82 689.857 L1429.38 689.857 L1429.94 689.857 L1430.5 689.857 L1431.05 689.857 L1431.61 689.857 L1432.17 689.857 L1432.73 689.857 L1433.29 689.857 L1433.85 689.857 L1434.41 689.857 L1434.97 689.857 L1435.53 689.857 L1436.09 689.857 L1436.65 689.857 L1437.21 689.857 L1437.77 689.857 L1438.33 689.857 L1438.88 689.857 L1439.44 689.857 L1440 689.857 L1440.56 689.857 L1441.12 689.857 L1441.68 689.857 L1442.24 689.857 L1442.8 689.857 L1443.36 689.857 L1443.92 689.857 L1444.48 689.857 L1445.04 689.857 L1445.6 689.857 L1446.15 689.857 L1446.71 689.857 L1447.27 689.857 L1447.83 689.857 L1448.39 689.857 L1448.95 689.857 L1449.51 689.857 L1450.07 689.857 L1450.63 689.857 L1451.19 689.857 L1451.75 689.857 L1452.31 689.857 L1452.87 689.857 L1453.42 689.857 L1453.98 689.857 L1454.54 689.857 L1455.1 689.857 L1455.66 689.857 L1456.22 689.857 L1456.78 689.857 L1457.34 689.857 L1457.9 689.857 L1458.46 689.857 L1459.02 689.857 L1459.58 689.857 L1460.14 689.857 L1460.7 689.857 L1461.25 689.857 L1461.81 689.857 L1462.37 689.857 L1462.93 689.857 L1463.49 689.857 L1464.05 689.857 L1464.61 689.857 L1465.17 689.857 L1465.73 689.857 L1466.29 689.857 L1466.85 689.857 L1467.41 689.857 L1467.97 689.857 L1468.52 689.857 L1469.08 689.857 L1469.64 689.857 L1470.2 689.857 L1470.76 689.857 L1471.32 689.857 L1471.88 689.857 L1472.44 689.857 L1473 689.857 L1473.56 689.857 L1474.12 689.857 L1474.68 689.857 L1475.24 689.857 L1475.79 689.857 L1476.35 689.857 L1476.91 689.857 L1477.47 689.857 L1478.03 689.857 L1478.59 689.857 L1479.15 689.857 L1479.71 689.857 L1480.27 689.857 L1480.83 689.857 L1481.39 689.857 L1481.95 689.857 L1482.51 689.857 L1483.07 689.857 L1483.62 689.857 L1484.18 689.857 L1484.74 689.857 L1485.3 689.857 L1485.86 689.857 L1486.42 689.857 L1486.98 689.857 L1487.54 689.857 L1488.1 689.857 L1488.66 689.857 L1489.22 689.857 L1489.78 689.857 L1490.34 689.857 L1490.89 689.857 L1491.45 689.857 L1492.01 689.857 L1492.57 689.857 L1493.13 689.857 L1493.69 689.857 L1494.25 689.857 L1494.81 689.857 L1495.37 689.857 L1495.93 689.857 L1496.49 689.857 L1497.05 689.857 L1497.61 689.857 L1498.16 689.857 L1498.72 689.857 L1499.28 689.857 L1499.84 689.857 L1500.4 689.857 L1500.96 689.857 L1501.52 689.857 L1502.08 689.857 L1502.64 689.857 L1503.2 689.857 L1503.76 689.857 L1504.32 689.857 L1504.88 689.857 L1505.44 689.857 L1505.99 689.857 L1506.55 689.857 L1507.11 689.857 L1507.67 689.857 L1508.23 689.857 L1508.79 689.857 L1509.35 689.857 L1509.91 689.857 L1510.47 689.857 L1511.03 689.857 L1511.59 689.857 L1512.15 689.857 L1512.71 689.857 L1513.26 689.857 L1513.82 689.857 L1514.38 689.857 L1514.94 689.857 L1515.5 689.857 L1516.06 689.857 L1516.62 689.857 L1517.18 689.857 L1517.74 689.857 L1518.3 689.857 L1518.86 689.857 L1519.42 689.857 L1519.98 689.857 L1520.53 689.857 L1521.09 689.857 L1521.65 689.857 L1522.21 689.857 L1522.77 689.857 L1523.33 689.857 L1523.89 689.857 L1524.45 689.857 L1525.01 689.857 L1525.57 689.857 L1526.13 689.857 L1526.69 689.857 L1527.25 689.857 L1527.81 689.857 L1528.36 689.857 L1528.92 689.857 L1529.48 689.857 L1530.04 689.857 L1530.6 689.857 L1531.16 689.857 L1531.72 689.857 L1532.28 689.857 L1532.84 689.857 L1533.4 689.857 L1533.96 689.857 L1534.52 689.857 L1535.08 689.857 L1535.63 689.857 L1536.19 689.857 L1536.75 689.857 L1537.31 689.857 L1537.87 689.857 L1538.43 689.857 L1538.99 689.857 L1539.55 689.857 L1540.11 689.857 L1540.67 689.857 L1541.23 689.857 L1541.79 689.857 L1542.35 689.857 L1542.9 689.857 L1543.46 689.857 L1544.02 689.857 L1544.58 689.857 L1545.14 689.857 L1545.7 689.857 L1546.26 689.857 L1546.82 689.857 L1547.38 689.857 L1547.94 689.857 L1548.5 689.857 L1549.06 689.857 L1549.62 689.857 L1550.18 689.857 L1550.73 689.857 L1551.29 689.857 L1551.85 689.857 L1552.41 689.857 L1552.97 689.857 L1553.53 689.857 L1554.09 689.857 L1554.65 689.857 L1555.21 689.857 L1555.77 689.857 L1556.33 689.857 L1556.89 689.857 L1557.45 689.857 L1558 689.857 L1558.56 689.857 L1559.12 689.857 L1559.68 689.857 L1560.24 689.857 L1560.8 689.857 L1561.36 689.857 L1561.92 689.857 L1562.48 689.857 L1563.04 689.857 L1563.6 689.857 L1564.16 689.857 L1564.72 689.857 L1565.28 689.857 L1565.83 689.857 L1566.39 689.857 L1566.95 689.857 L1567.51 689.857 L1568.07 689.857 L1568.63 689.857 L1569.19 689.857 L1569.75 689.857 L1570.31 689.857 L1570.87 689.857 L1571.43 689.857 L1571.99 689.857 L1572.55 689.857 L1573.1 689.857 L1573.66 689.857 L1574.22 689.857 L1574.78 689.857 L1575.34 689.857 L1575.9 689.857 L1576.46 689.857 L1577.02 689.857 L1577.58 689.857 L1578.14 689.857 L1578.7 689.857 L1579.26 689.857 L1579.82 689.857 L1580.37 689.857 L1580.93 689.857 L1581.49 689.857 L1582.05 689.857 L1582.61 689.857 L1583.17 689.857 L1583.73 689.857 L1584.29 689.857 L1584.85 689.857 L1585.41 689.857 L1585.97 689.857 L1586.53 689.857 L1587.09 689.857 L1587.65 689.857 L1588.2 689.857 L1588.76 689.857 L1589.32 689.857 L1589.88 689.857 L1590.44 689.857 L1591 689.857 L1591.56 689.857 L1592.12 689.857 L1592.68 689.857 L1593.24 689.857 L1593.8 689.857 L1594.36 689.857 L1594.92 689.857 L1595.47 689.857 L1596.03 689.857 L1596.59 689.857 L1597.15 689.857 L1597.71 689.857 L1598.27 689.857 L1598.83 689.857 L1599.39 689.857 L1599.95 689.857 L1600.51 689.857 L1601.07 689.857 L1601.63 689.857 L1602.19 689.857 L1602.74 689.857 L1603.3 689.857 L1603.86 689.857 L1604.42 689.857 L1604.98 689.857 L1605.54 689.857 L1606.1 689.857 L1606.66 689.857 L1607.22 689.857 L1607.78 689.857 L1608.34 689.857 L1608.9 689.857 L1609.46 689.857 L1610.02 689.857 L1610.57 689.857 L1611.13 689.857 L1611.69 689.857 L1612.25 689.857 L1612.81 689.857 L1613.37 689.857 L1613.93 689.857 L1614.49 689.857 L1615.05 689.857 L1615.61 689.857 L1616.17 689.857 L1616.73 689.857 L1617.29 689.857 L1617.84 689.857 L1618.4 689.857 L1618.96 689.857 L1619.52 689.857 L1620.08 689.857 L1620.64 689.857 L1621.2 689.857 L1621.76 689.857 L1622.32 689.857 L1622.88 689.857 L1623.44 689.857 L1624 689.857 L1624.56 689.857 L1625.11 689.857 L1625.67 689.857 L1626.23 689.857 L1626.79 689.857 L1627.35 689.857 L1627.91 689.857 L1628.47 689.857 L1629.03 689.857 L1629.59 689.857 L1630.15 689.857 L1630.71 689.857 L1631.27 689.857 L1631.83 689.857 L1632.39 689.857 L1632.94 689.857 L1633.5 689.857 L1634.06 689.857 L1634.62 689.857 L1635.18 689.857 L1635.74 689.857 L1636.3 689.857 L1636.86 689.857 L1637.42 689.857 L1637.98 689.857 L1638.54 689.857 L1639.1 689.857 L1639.66 689.857 L1640.21 689.857 L1640.77 689.857 L1641.33 689.857 L1641.89 689.857 L1642.45 689.857 L1643.01 689.857 L1643.57 689.857 L1644.13 689.857 L1644.69 689.857 L1645.25 689.857 L1645.81 689.857 L1646.37 689.857 L1646.93 689.857 L1647.48 689.857 L1648.04 689.857 L1648.6 689.857 L1649.16 689.857 L1649.72 689.857 L1650.28 689.857 L1650.84 689.857 L1651.4 689.857 L1651.96 689.857 L1652.52 689.857 L1653.08 689.857 L1653.64 689.857 L1654.2 689.857 L1654.76 689.857 L1655.31 689.857 L1655.87 689.857 L1656.43 689.857 L1656.99 689.857 L1657.55 689.857 L1658.11 689.857 L1658.67 689.857 L1659.23 689.857 L1659.79 689.857 L1660.35 689.857 L1660.91 689.857 L1661.47 689.857 L1662.03 689.857 L1662.58 689.857 L1663.14 689.857 L1663.7 689.857 L1664.26 689.857 L1664.82 689.857 L1665.38 689.857 L1665.94 689.857 L1666.5 689.857 L1667.06 689.857 L1667.62 689.857 L1668.18 689.857 L1668.74 689.857 L1669.3 689.857 L1669.85 689.857 L1670.41 689.857 L1670.97 689.857 L1671.53 689.857 L1672.09 689.857 L1672.65 689.857 L1673.21 689.857 L1673.77 689.857 L1674.33 689.857 L1674.89 689.857 L1675.45 689.857 L1676.01 689.857 L1676.57 689.857 L1677.13 689.857 L1677.68 689.857 L1678.24 689.857 L1678.8 689.857 L1679.36 689.857 L1679.92 689.857 L1680.48 689.857 L1681.04 689.857 L1681.6 689.857 L1682.16 689.857 L1682.72 689.857 L1683.28 689.857 L1683.84 689.857 L1684.4 689.857 L1684.95 689.857 L1685.51 689.857 L1686.07 689.857 L1686.63 689.857 L1687.19 689.857 L1687.75 689.857 L1688.31 689.857 L1688.87 689.857 L1689.43 689.857 L1689.99 689.857 L1690.55 689.857 L1691.11 689.857 L1691.67 689.857 L1692.23 689.857 L1692.78 689.857 L1693.34 689.857 L1693.9 689.857 L1694.46 689.857 L1695.02 689.857 L1695.58 689.857 L1696.14 689.857 L1696.7 689.857 L1697.26 689.857 L1697.82 689.857 L1698.38 689.857 L1698.94 689.857 L1699.5 689.857 L1700.05 689.857 L1700.61 689.857 L1701.17 689.857 L1701.73 689.857 L1702.29 689.857 L1702.85 689.857 L1703.41 689.857 L1703.97 689.857 L1704.53 689.857 L1705.09 689.857 L1705.65 689.857 L1706.21 689.857 L1706.77 689.857 L1707.32 689.857 L1707.88 689.857 L1708.44 689.857 L1709 689.857 L1709.56 689.857 L1710.12 689.857 L1710.68 689.857 L1711.24 689.857 L1711.8 689.857 L1712.36 689.857 L1712.92 689.857 L1713.48 689.857 L1714.04 689.857 L1714.6 689.857 L1715.15 689.857 L1715.71 689.857 L1716.27 689.857 L1716.83 689.857 L1717.39 689.857 L1717.95 689.857 L1718.51 689.857 L1719.07 689.857 L1719.63 689.857 L1720.19 689.857 L1720.75 689.857 L1721.31 689.857 L1721.87 689.857 L1722.42 689.857 L1722.98 689.857 L1723.54 689.857 L1724.1 689.857 L1724.66 689.857 L1725.22 689.857 L1725.78 689.857 L1726.34 689.857 L1726.9 689.857 L1727.46 689.857 L1728.02 689.857 L1728.58 689.857 L1729.14 689.857 L1729.69 689.857 L1730.25 689.857 L1730.81 689.857 L1731.37 689.857 L1731.93 689.857 L1732.49 689.857 L1733.05 689.857 L1733.61 689.857 L1734.17 689.857 L1734.73 689.857 L1735.29 689.857 L1735.85 689.857 L1736.41 689.857 L1736.97 689.857 L1737.52 689.857 L1738.08 689.857 L1738.64 689.857 L1739.2 689.857 L1739.76 689.857 L1740.32 689.857 L1740.88 689.857 L1741.44 689.857 L1742 689.857 L1742.56 689.857 L1743.12 689.857 L1743.68 689.857 L1744.24 689.857 L1744.79 689.857 L1745.35 689.857 L1745.91 689.857 L1746.47 689.857 L1747.03 689.857 L1747.59 689.857 L1748.15 689.857 L1748.71 689.857 L1749.27 689.857 L1749.83 689.857 L1750.39 689.857 L1750.95 689.857 L1751.51 689.857 L1752.06 689.857 L1752.62 689.857 L1753.18 689.857 L1753.74 689.857 L1754.3 689.857 L1754.86 689.857 L1755.42 689.857 L1755.98 689.857 L1756.54 689.857 L1757.1 689.857 L1757.66 689.857 L1758.22 689.857 L1758.78 689.857 L1759.34 689.857 L1759.89 689.857 L1760.45 689.857 L1761.01 689.857 L1761.57 689.857 L1762.13 689.857 L1762.69 689.857 L1763.25 689.857 L1763.81 689.857 L1764.37 689.857 L1764.93 689.857 L1765.49 689.857 L1766.05 689.857 L1766.61 689.857 L1767.16 689.857 L1767.72 689.857 L1768.28 689.857 L1768.84 689.857 L1769.4 689.857 L1769.96 689.857 L1770.52 689.857 L1771.08 689.857 L1771.64 689.857 L1772.2 689.857 L1772.76 689.857 L1773.32 689.857 L1773.88 689.857 L1774.43 689.857 L1774.99 689.857 L1775.55 689.857 L1776.11 689.857 L1776.67 689.857 L1777.23 689.857 L1777.79 689.857 L1778.35 689.857 L1778.91 689.857 L1779.47 689.857 L1780.03 689.857 L1780.59 689.857 L1781.15 689.857 L1781.71 689.857 L1782.26 689.857 L1782.82 689.857 L1783.38 689.857 L1783.94 689.857 L1784.5 689.857 L1785.06 689.857 L1785.62 689.857 L1786.18 689.857 L1786.74 689.857 L1787.3 689.857 L1787.86 689.857 L1788.42 689.857 L1788.98 689.857 L1789.53 689.857 L1790.09 689.857 L1790.65 689.857 L1791.21 689.857 L1791.77 689.857 L1792.33 689.857 L1792.89 689.857 L1793.45 689.857 L1794.01 689.857 L1794.57 689.857 L1795.13 689.857 L1795.69 689.857 L1796.25 689.857 L1796.8 689.857 L1797.36 689.857 L1797.92 689.857 L1798.48 689.857 L1799.04 689.857 L1799.6 689.857 L1800.16 689.857 L1800.72 689.857 L1801.28 689.857 L1801.84 689.857 L1802.4 689.857 L1802.96 689.857 L1803.52 689.857 L1804.08 689.857 L1804.63 689.857 L1805.19 689.857 L1805.75 689.857 L1806.31 689.857 L1806.87 689.857 L1807.43 689.857 L1807.99 689.857 L1808.55 689.857 L1809.11 689.857 L1809.67 689.857 L1810.23 689.857 L1810.79 689.857 L1811.35 689.857 L1811.9 689.857 L1812.46 689.857 L1813.02 689.857 L1813.58 689.857 L1814.14 689.857 L1814.7 689.857 L1815.26 689.857 L1815.82 689.857 L1816.38 689.857 L1816.94 689.857 L1817.5 689.857 L1818.06 689.857 L1818.62 689.857 L1819.18 689.857 L1819.73 689.857 L1820.29 689.857 L1820.85 689.857 L1821.41 689.857 L1821.97 689.857 L1822.53 689.857 L1823.09 689.857 L1823.65 689.857 L1824.21 689.857 L1824.77 689.857 L1825.33 689.857 L1825.89 689.857 L1826.45 689.857 L1827 689.857 L1827.56 689.857 L1828.12 689.857 L1828.68 689.857 L1829.24 689.857 L1829.8 689.857 L1830.36 689.857 L1830.92 689.857 L1831.48 689.857 L1832.04 689.857 L1832.6 689.857 L1833.16 689.857 L1833.72 689.857 L1834.27 689.857 L1834.83 689.857 L1835.39 689.857 L1835.95 689.857 L1836.51 689.857 L1837.07 689.857 L1837.63 689.857 L1838.19 689.857 L1838.19 682.061 L1837.63 682.061 L1837.07 682.061 L1836.51 682.061 L1835.95 682.061 L1835.39 682.061 L1834.83 682.061 L1834.27 682.061 L1833.72 682.061 L1833.16 682.061 L1832.6 682.061 L1832.04 682.061 L1831.48 682.061 L1830.92 682.061 L1830.36 682.061 L1829.8 682.061 L1829.24 682.061 L1828.68 682.061 L1828.12 682.061 L1827.56 682.061 L1827 682.061 L1826.45 682.061 L1825.89 682.061 L1825.33 682.061 L1824.77 682.061 L1824.21 682.061 L1823.65 682.061 L1823.09 682.061 L1822.53 682.061 L1821.97 682.061 L1821.41 682.061 L1820.85 682.061 L1820.29 682.061 L1819.73 682.061 L1819.18 682.061 L1818.62 682.061 L1818.06 682.061 L1817.5 682.061 L1816.94 682.061 L1816.38 682.061 L1815.82 682.061 L1815.26 682.061 L1814.7 682.061 L1814.14 682.061 L1813.58 682.061 L1813.02 682.061 L1812.46 682.061 L1811.9 682.061 L1811.35 682.061 L1810.79 682.061 L1810.23 682.061 L1809.67 682.061 L1809.11 682.061 L1808.55 682.061 L1807.99 682.061 L1807.43 682.061 L1806.87 682.061 L1806.31 682.061 L1805.75 682.061 L1805.19 682.061 L1804.63 682.061 L1804.08 682.061 L1803.52 682.061 L1802.96 682.061 L1802.4 682.061 L1801.84 682.061 L1801.28 682.061 L1800.72 682.061 L1800.16 682.061 L1799.6 682.061 L1799.04 682.061 L1798.48 682.061 L1797.92 682.061 L1797.36 682.061 L1796.8 682.061 L1796.25 682.061 L1795.69 682.061 L1795.13 682.061 L1794.57 682.061 L1794.01 682.061 L1793.45 682.061 L1792.89 682.061 L1792.33 682.061 L1791.77 682.061 L1791.21 682.061 L1790.65 682.061 L1790.09 682.061 L1789.53 682.061 L1788.98 682.061 L1788.42 682.061 L1787.86 682.061 L1787.3 682.061 L1786.74 682.061 L1786.18 682.061 L1785.62 682.061 L1785.06 682.061 L1784.5 682.061 L1783.94 682.061 L1783.38 682.061 L1782.82 682.061 L1782.26 682.061 L1781.71 682.061 L1781.15 682.061 L1780.59 682.061 L1780.03 682.061 L1779.47 682.061 L1778.91 682.061 L1778.35 682.061 L1777.79 682.061 L1777.23 682.061 L1776.67 682.061 L1776.11 682.061 L1775.55 682.061 L1774.99 682.061 L1774.43 682.061 L1773.88 682.061 L1773.32 682.061 L1772.76 682.061 L1772.2 682.061 L1771.64 682.061 L1771.08 682.061 L1770.52 682.061 L1769.96 682.061 L1769.4 682.061 L1768.84 682.061 L1768.28 682.061 L1767.72 682.061 L1767.16 682.061 L1766.61 682.061 L1766.05 682.061 L1765.49 682.061 L1764.93 682.061 L1764.37 682.061 L1763.81 682.061 L1763.25 682.061 L1762.69 682.061 L1762.13 682.061 L1761.57 682.061 L1761.01 682.061 L1760.45 682.061 L1759.89 682.061 L1759.34 682.061 L1758.78 682.061 L1758.22 682.061 L1757.66 682.061 L1757.1 682.061 L1756.54 682.061 L1755.98 682.061 L1755.42 682.061 L1754.86 682.061 L1754.3 682.061 L1753.74 682.061 L1753.18 682.061 L1752.62 682.061 L1752.06 682.061 L1751.51 682.061 L1750.95 682.061 L1750.39 682.061 L1749.83 682.061 L1749.27 682.061 L1748.71 682.061 L1748.15 682.061 L1747.59 682.061 L1747.03 682.061 L1746.47 682.061 L1745.91 682.061 L1745.35 682.061 L1744.79 682.061 L1744.24 682.061 L1743.68 682.061 L1743.12 682.061 L1742.56 682.061 L1742 682.061 L1741.44 682.061 L1740.88 682.061 L1740.32 682.061 L1739.76 682.061 L1739.2 682.061 L1738.64 682.061 L1738.08 682.061 L1737.52 682.061 L1736.97 682.061 L1736.41 682.061 L1735.85 682.061 L1735.29 682.061 L1734.73 682.061 L1734.17 682.061 L1733.61 682.061 L1733.05 682.061 L1732.49 682.061 L1731.93 682.061 L1731.37 682.061 L1730.81 682.061 L1730.25 682.061 L1729.69 682.061 L1729.14 682.061 L1728.58 682.061 L1728.02 682.061 L1727.46 682.061 L1726.9 682.061 L1726.34 682.061 L1725.78 682.061 L1725.22 682.061 L1724.66 682.061 L1724.1 682.061 L1723.54 682.061 L1722.98 682.061 L1722.42 682.061 L1721.87 682.061 L1721.31 682.061 L1720.75 682.061 L1720.19 682.061 L1719.63 682.061 L1719.07 682.061 L1718.51 682.061 L1717.95 682.061 L1717.39 682.061 L1716.83 682.061 L1716.27 682.061 L1715.71 682.061 L1715.15 682.061 L1714.6 682.061 L1714.04 682.061 L1713.48 682.061 L1712.92 682.061 L1712.36 682.061 L1711.8 682.061 L1711.24 682.061 L1710.68 682.061 L1710.12 682.061 L1709.56 682.061 L1709 682.061 L1708.44 682.061 L1707.88 682.061 L1707.32 682.061 L1706.77 682.061 L1706.21 682.061 L1705.65 682.061 L1705.09 682.061 L1704.53 682.061 L1703.97 682.061 L1703.41 682.061 L1702.85 682.061 L1702.29 682.061 L1701.73 682.061 L1701.17 682.061 L1700.61 682.061 L1700.05 682.061 L1699.5 682.061 L1698.94 682.061 L1698.38 682.061 L1697.82 682.061 L1697.26 682.061 L1696.7 682.061 L1696.14 682.061 L1695.58 682.061 L1695.02 682.061 L1694.46 682.061 L1693.9 682.061 L1693.34 682.061 L1692.78 682.061 L1692.23 682.061 L1691.67 682.061 L1691.11 682.061 L1690.55 682.061 L1689.99 682.061 L1689.43 682.061 L1688.87 682.061 L1688.31 682.061 L1687.75 682.061 L1687.19 682.061 L1686.63 682.061 L1686.07 682.061 L1685.51 682.061 L1684.95 682.061 L1684.4 682.061 L1683.84 682.061 L1683.28 682.061 L1682.72 682.061 L1682.16 682.061 L1681.6 682.061 L1681.04 682.061 L1680.48 682.061 L1679.92 682.061 L1679.36 682.061 L1678.8 682.061 L1678.24 682.061 L1677.68 682.061 L1677.13 682.061 L1676.57 682.061 L1676.01 682.061 L1675.45 682.061 L1674.89 682.061 L1674.33 682.061 L1673.77 682.061 L1673.21 682.061 L1672.65 682.061 L1672.09 682.061 L1671.53 682.061 L1670.97 682.061 L1670.41 682.061 L1669.85 682.061 L1669.3 682.061 L1668.74 682.061 L1668.18 682.061 L1667.62 682.061 L1667.06 682.061 L1666.5 682.061 L1665.94 682.061 L1665.38 682.061 L1664.82 682.061 L1664.26 682.061 L1663.7 682.061 L1663.14 682.061 L1662.58 682.061 L1662.03 682.061 L1661.47 682.061 L1660.91 682.061 L1660.35 682.061 L1659.79 682.061 L1659.23 682.061 L1658.67 682.061 L1658.11 682.061 L1657.55 682.061 L1656.99 682.061 L1656.43 682.061 L1655.87 682.061 L1655.31 682.061 L1654.76 682.061 L1654.2 682.061 L1653.64 682.061 L1653.08 682.061 L1652.52 682.061 L1651.96 682.061 L1651.4 682.061 L1650.84 682.061 L1650.28 682.061 L1649.72 682.061 L1649.16 682.061 L1648.6 682.061 L1648.04 682.061 L1647.48 682.061 L1646.93 682.061 L1646.37 682.061 L1645.81 682.061 L1645.25 682.061 L1644.69 682.061 L1644.13 682.061 L1643.57 682.061 L1643.01 682.061 L1642.45 682.061 L1641.89 682.061 L1641.33 682.061 L1640.77 682.061 L1640.21 682.061 L1639.66 682.061 L1639.1 682.061 L1638.54 682.061 L1637.98 682.061 L1637.42 682.061 L1636.86 682.061 L1636.3 682.061 L1635.74 682.061 L1635.18 682.061 L1634.62 682.061 L1634.06 682.061 L1633.5 682.061 L1632.94 682.061 L1632.39 682.061 L1631.83 682.061 L1631.27 682.061 L1630.71 682.061 L1630.15 682.061 L1629.59 682.061 L1629.03 682.061 L1628.47 682.061 L1627.91 682.061 L1627.35 682.061 L1626.79 682.061 L1626.23 682.061 L1625.67 682.061 L1625.11 682.061 L1624.56 682.061 L1624 682.061 L1623.44 682.061 L1622.88 682.061 L1622.32 682.061 L1621.76 682.061 L1621.2 682.061 L1620.64 682.061 L1620.08 682.061 L1619.52 682.061 L1618.96 682.061 L1618.4 682.061 L1617.84 682.061 L1617.29 682.061 L1616.73 682.061 L1616.17 682.061 L1615.61 682.061 L1615.05 682.061 L1614.49 682.061 L1613.93 682.061 L1613.37 682.061 L1612.81 682.061 L1612.25 682.061 L1611.69 682.061 L1611.13 682.061 L1610.57 682.061 L1610.02 682.061 L1609.46 682.061 L1608.9 682.061 L1608.34 682.061 L1607.78 682.061 L1607.22 682.061 L1606.66 682.061 L1606.1 682.061 L1605.54 682.061 L1604.98 682.061 L1604.42 682.061 L1603.86 682.061 L1603.3 682.061 L1602.74 682.061 L1602.19 682.061 L1601.63 682.061 L1601.07 682.061 L1600.51 682.061 L1599.95 682.061 L1599.39 682.061 L1598.83 682.061 L1598.27 682.061 L1597.71 682.061 L1597.15 682.061 L1596.59 682.061 L1596.03 682.061 L1595.47 682.061 L1594.92 682.061 L1594.36 682.061 L1593.8 682.061 L1593.24 682.061 L1592.68 682.061 L1592.12 682.061 L1591.56 682.061 L1591 682.061 L1590.44 682.061 L1589.88 682.061 L1589.32 682.061 L1588.76 682.061 L1588.2 682.061 L1587.65 682.061 L1587.09 682.061 L1586.53 682.061 L1585.97 682.061 L1585.41 682.061 L1584.85 682.061 L1584.29 682.061 L1583.73 682.061 L1583.17 682.061 L1582.61 682.061 L1582.05 682.061 L1581.49 682.061 L1580.93 682.061 L1580.37 682.061 L1579.82 682.061 L1579.26 682.061 L1578.7 682.061 L1578.14 682.061 L1577.58 682.061 L1577.02 682.061 L1576.46 682.061 L1575.9 682.061 L1575.34 682.061 L1574.78 682.061 L1574.22 682.061 L1573.66 682.061 L1573.1 682.061 L1572.55 682.061 L1571.99 682.061 L1571.43 682.061 L1570.87 682.061 L1570.31 682.061 L1569.75 682.061 L1569.19 682.061 L1568.63 682.061 L1568.07 682.061 L1567.51 682.061 L1566.95 682.061 L1566.39 682.061 L1565.83 682.061 L1565.28 682.061 L1564.72 682.061 L1564.16 682.061 L1563.6 682.061 L1563.04 682.061 L1562.48 682.061 L1561.92 682.061 L1561.36 682.061 L1560.8 682.061 L1560.24 682.061 L1559.68 682.061 L1559.12 682.061 L1558.56 682.061 L1558 682.061 L1557.45 682.061 L1556.89 682.061 L1556.33 682.061 L1555.77 682.061 L1555.21 682.061 L1554.65 682.061 L1554.09 682.061 L1553.53 682.061 L1552.97 682.061 L1552.41 682.061 L1551.85 682.061 L1551.29 682.061 L1550.73 682.061 L1550.18 682.061 L1549.62 682.061 L1549.06 682.061 L1548.5 682.061 L1547.94 682.061 L1547.38 682.061 L1546.82 682.061 L1546.26 682.061 L1545.7 682.061 L1545.14 682.061 L1544.58 682.061 L1544.02 682.061 L1543.46 682.061 L1542.9 682.061 L1542.35 682.061 L1541.79 682.061 L1541.23 682.061 L1540.67 682.061 L1540.11 682.061 L1539.55 682.061 L1538.99 682.061 L1538.43 682.061 L1537.87 682.061 L1537.31 682.061 L1536.75 682.061 L1536.19 682.061 L1535.63 682.061 L1535.08 682.061 L1534.52 682.061 L1533.96 682.061 L1533.4 682.061 L1532.84 682.061 L1532.28 682.061 L1531.72 682.061 L1531.16 682.061 L1530.6 682.061 L1530.04 682.061 L1529.48 682.061 L1528.92 682.061 L1528.36 682.061 L1527.81 682.061 L1527.25 682.061 L1526.69 682.061 L1526.13 682.061 L1525.57 682.061 L1525.01 682.061 L1524.45 682.061 L1523.89 682.061 L1523.33 682.061 L1522.77 682.061 L1522.21 682.061 L1521.65 682.061 L1521.09 682.061 L1520.53 682.061 L1519.98 682.061 L1519.42 682.061 L1518.86 682.061 L1518.3 682.061 L1517.74 682.061 L1517.18 682.061 L1516.62 682.061 L1516.06 682.061 L1515.5 682.061 L1514.94 682.061 L1514.38 682.061 L1513.82 682.061 L1513.26 682.061 L1512.71 682.061 L1512.15 682.061 L1511.59 682.061 L1511.03 682.061 L1510.47 682.061 L1509.91 682.061 L1509.35 682.061 L1508.79 682.061 L1508.23 682.061 L1507.67 682.061 L1507.11 682.061 L1506.55 682.061 L1505.99 682.061 L1505.44 682.061 L1504.88 682.061 L1504.32 682.061 L1503.76 682.061 L1503.2 682.061 L1502.64 682.061 L1502.08 682.061 L1501.52 682.061 L1500.96 682.061 L1500.4 682.061 L1499.84 682.061 L1499.28 682.061 L1498.72 682.061 L1498.16 682.061 L1497.61 682.061 L1497.05 682.061 L1496.49 682.061 L1495.93 682.061 L1495.37 682.061 L1494.81 682.061 L1494.25 682.061 L1493.69 682.061 L1493.13 682.061 L1492.57 682.061 L1492.01 682.061 L1491.45 682.061 L1490.89 682.061 L1490.34 682.061 L1489.78 682.061 L1489.22 682.061 L1488.66 682.061 L1488.1 682.061 L1487.54 682.061 L1486.98 682.061 L1486.42 682.061 L1485.86 682.061 L1485.3 682.061 L1484.74 682.061 L1484.18 682.061 L1483.62 682.061 L1483.07 682.061 L1482.51 682.061 L1481.95 682.061 L1481.39 682.061 L1480.83 682.061 L1480.27 682.061 L1479.71 682.061 L1479.15 682.061 L1478.59 682.061 L1478.03 682.061 L1477.47 682.061 L1476.91 682.061 L1476.35 682.061 L1475.79 682.061 L1475.24 682.061 L1474.68 682.061 L1474.12 682.061 L1473.56 682.061 L1473 682.061 L1472.44 682.061 L1471.88 682.061 L1471.32 682.061 L1470.76 682.061 L1470.2 682.061 L1469.64 682.061 L1469.08 682.061 L1468.52 682.061 L1467.97 682.061 L1467.41 682.061 L1466.85 682.061 L1466.29 682.061 L1465.73 682.061 L1465.17 682.061 L1464.61 682.061 L1464.05 682.061 L1463.49 682.061 L1462.93 682.061 L1462.37 682.061 L1461.81 682.061 L1461.25 682.061 L1460.7 682.061 L1460.14 682.061 L1459.58 682.061 L1459.02 682.061 L1458.46 682.061 L1457.9 682.061 L1457.34 682.061 L1456.78 682.061 L1456.22 682.061 L1455.66 682.061 L1455.1 682.061 L1454.54 682.061 L1453.98 682.061 L1453.42 682.061 L1452.87 682.061 L1452.31 682.061 L1451.75 682.061 L1451.19 682.061 L1450.63 682.061 L1450.07 682.061 L1449.51 682.061 L1448.95 682.061 L1448.39 682.061 L1447.83 682.061 L1447.27 682.061 L1446.71 682.061 L1446.15 682.061 L1445.6 682.061 L1445.04 682.061 L1444.48 682.061 L1443.92 682.061 L1443.36 682.061 L1442.8 682.061 L1442.24 682.061 L1441.68 682.061 L1441.12 682.061 L1440.56 682.061 L1440 682.061 L1439.44 682.061 L1438.88 682.061 L1438.33 682.061 L1437.77 682.061 L1437.21 682.061 L1436.65 682.061 L1436.09 682.061 L1435.53 682.061 L1434.97 682.061 L1434.41 682.061 L1433.85 682.061 L1433.29 682.061 L1432.73 682.061 L1432.17 682.061 L1431.61 682.061 L1431.05 682.061 L1430.5 682.061 L1429.94 682.061 L1429.38 682.061 L1428.82 682.061 L1428.26 682.061 L1427.7 682.061 L1427.14 682.061 L1426.58 682.061 L1426.02 682.061 L1425.46 682.061 L1424.9 682.061 L1424.34 682.061 L1423.78 682.061 L1423.23 682.061 L1422.67 682.061 L1422.11 682.061 L1421.55 682.061 L1420.99 682.061 L1420.43 682.061 L1419.87 682.061 L1419.31 682.061 L1418.75 682.061 L1418.19 682.061 L1417.63 682.061 L1417.07 682.061 L1416.51 682.061 L1415.95 682.061 L1415.4 682.061 L1414.84 682.061 L1414.28 682.061 L1413.72 682.061 L1413.16 682.061 L1412.6 682.061 L1412.04 682.061 L1411.48 682.061 L1410.92 682.061 L1410.36 682.061 L1409.8 682.061 L1409.24 682.061 L1408.68 682.061 L1408.13 682.061 L1407.57 682.061 L1407.01 682.061 L1406.45 682.061 L1405.89 682.061 L1405.33 682.061 L1404.77 682.061 L1404.21 682.061 L1403.65 682.061 L1403.09 682.061 L1402.53 682.061 L1401.97 682.061 L1401.41 682.061 L1400.86 682.061 L1400.3 682.061 L1399.74 682.061 L1399.18 682.061 L1398.62 682.061 L1398.06 682.061 L1397.5 682.061 L1396.94 682.061 L1396.38 682.061 L1395.82 682.061 L1395.26 682.061 L1394.7 682.061 L1394.14 682.061 L1393.58 682.061 L1393.03 682.061 L1392.47 682.061 L1391.91 682.061 L1391.35 682.061 L1390.79 682.061 L1390.23 682.061 L1389.67 682.061 L1389.11 682.061 L1388.55 682.061 L1387.99 682.061 L1387.43 682.061 L1386.87 682.061 L1386.31 682.061 L1385.76 682.061 L1385.2 682.061 L1384.64 682.061 L1384.08 682.061 L1383.52 682.061 L1382.96 682.061 L1382.4 682.061 L1381.84 682.061 L1381.28 682.061 L1380.72 682.061 L1380.16 682.061 L1379.6 682.061 L1379.04 682.061 L1378.49 682.061 L1377.93 682.061 L1377.37 682.061 L1376.81 682.061 L1376.25 682.061 L1375.69 682.061 L1375.13 682.061 L1374.57 682.061 L1374.01 682.061 L1373.45 682.061 L1372.89 682.061 L1372.33 682.061 L1371.77 682.061 L1371.21 682.061 L1370.66 682.061 L1370.1 682.061 L1369.54 682.061 L1368.98 682.061 L1368.42 682.061 L1367.86 682.061 L1367.3 682.061 L1366.74 682.061 L1366.18 682.061 L1365.62 682.061 L1365.06 682.061 L1364.5 682.061 L1363.94 682.061 L1363.39 682.061 L1362.83 682.061 L1362.27 682.061 L1361.71 682.061 L1361.15 682.061 L1360.59 682.061 L1360.03 682.061 L1359.47 682.061 L1358.91 682.061 L1358.35 682.061 L1357.79 682.061 L1357.23 682.061 L1356.67 682.061 L1356.12 682.061 L1355.56 682.061 L1355 682.061 L1354.44 682.061 L1353.88 682.061 L1353.32 682.061 L1352.76 682.061 L1352.2 682.061 L1351.64 682.061 L1351.08 682.061 L1350.52 682.061 L1349.96 682.061 L1349.4 682.061 L1348.84 682.061 L1348.29 682.061 L1347.73 682.061 L1347.17 682.061 L1346.61 682.061 L1346.05 682.061 L1345.49 682.061 L1344.93 682.061 L1344.37 682.061 L1343.81 682.061 L1343.25 682.061 L1342.69 682.061 L1342.13 682.061 L1341.57 682.061 L1341.02 682.061 L1340.46 682.061 L1339.9 682.061 L1339.34 682.061 L1338.78 682.061 L1338.22 682.061 L1337.66 682.061 L1337.1 682.061 L1336.54 682.061 L1335.98 682.061 L1335.42 682.061 L1334.86 682.061 L1334.3 682.061 L1333.75 682.061 L1333.19 682.061 L1332.63 682.061 L1332.07 682.061 L1331.51 682.061 L1330.95 682.061 L1330.39 682.061 L1329.83 682.061 L1329.27 682.061 L1328.71 682.061 L1328.15 682.061 L1327.59 682.061 L1327.03 682.061 L1326.47 682.061 L1325.92 682.061 L1325.36 682.061 L1324.8 682.061 L1324.24 682.061 L1323.68 682.061 L1323.12 682.061 L1322.56 682.061 L1322 682.061 L1321.44 682.061 L1320.88 682.061 L1320.32 682.061 L1319.76 682.061 L1319.2 682.061 L1318.65 682.061 L1318.09 682.061 L1317.53 682.061 L1316.97 682.061 L1316.41 682.061 L1315.85 682.061 L1315.29 682.061 L1314.73 682.061 L1314.17 682.061 L1313.61 682.061 L1313.05 682.061 L1312.49 682.061 L1311.93 682.061 L1311.38 682.061 L1310.82 682.061 L1310.26 682.061 L1309.7 682.061 L1309.14 682.061 L1308.58 682.061 L1308.02 682.061 L1307.46 682.061 L1306.9 682.061 L1306.34 682.061 L1305.78 682.061 L1305.22 682.061 L1304.66 682.061 L1304.1 682.061 L1303.55 682.061 L1302.99 682.061 L1302.43 682.061 L1301.87 682.061 L1301.31 682.061 L1300.75 682.061 L1300.19 682.061 L1299.63 682.061 L1299.07 682.061 L1298.51 682.061 L1297.95 682.061 L1297.39 682.061 L1296.83 682.061 L1296.28 682.061 L1295.72 682.061 L1295.16 682.061 L1294.6 682.061 L1294.04 682.061 L1293.48 682.061 L1292.92 682.061 L1292.36 682.061 L1291.8 682.061 L1291.24 682.061 L1290.68 682.061 L1290.12 682.061 L1289.56 682.061 L1289 682.061 L1288.45 682.061 L1287.89 682.061 L1287.33 682.061 L1286.77 682.061 L1286.21 682.061 L1285.65 682.061 L1285.09 682.061 L1284.53 682.061 L1283.97 682.061 L1283.41 682.061 L1282.85 682.061 L1282.29 682.061 L1281.73 682.061 L1281.18 682.061 L1280.62 682.061 L1280.06 682.061 L1279.5 682.061 L1278.94 682.061 L1278.38 682.061 L1277.82 682.061 L1277.26 682.061 L1276.7 682.061 L1276.14 682.061 L1275.58 682.061 L1275.02 682.061 L1274.46 682.061 L1273.91 682.061 L1273.35 682.061 L1272.79 682.061 L1272.23 682.061 L1271.67 682.061 L1271.11 682.061 L1270.55 682.061 L1269.99 682.061 L1269.43 682.061 L1268.87 682.061 L1268.31 682.061 L1267.75 682.061 L1267.19 682.061 L1266.63 682.061 L1266.08 682.061 L1265.52 682.061 L1264.96 682.061 L1264.4 682.061 L1263.84 682.061 L1263.28 682.061 L1262.72 682.061 L1262.16 682.061 L1261.6 682.061 L1261.04 682.061 L1260.48 682.061 L1259.92 682.061 L1259.36 682.061 L1258.81 682.061 L1258.25 682.061 L1257.69 682.061 L1257.13 682.061 L1256.57 682.061 L1256.01 682.061 L1255.45 682.061 L1254.89 682.061 L1254.33 682.061 L1253.77 682.061 L1253.21 682.061 L1252.65 682.061 L1252.09 682.061 L1251.54 682.061 L1250.98 682.061 L1250.42 682.061 L1249.86 682.061 L1249.3 682.061 L1248.74 682.061 L1248.18 682.061 L1247.62 682.061 L1247.06 682.061 L1246.5 682.061 L1245.94 682.061 L1245.38 682.061 L1244.82 682.061 L1244.26 682.061 L1243.71 682.061 L1243.15 682.061 L1242.59 682.061 L1242.03 682.061 L1241.47 682.061 L1240.91 682.061 L1240.35 682.061 L1239.79 682.061 L1239.23 682.061 L1238.67 682.061 L1238.11 682.061 L1237.55 682.061 L1236.99 682.061 L1236.44 682.061 L1235.88 682.061 L1235.32 682.061 L1234.76 682.061 L1234.2 682.061 L1233.64 682.061 L1233.08 682.061 L1232.52 682.061 L1231.96 682.061 L1231.4 682.061 L1230.84 682.061 L1230.28 682.061 L1229.72 682.061 L1229.17 682.061 L1228.61 682.061 L1228.05 682.061 L1227.49 682.061 L1226.93 682.061 L1226.37 682.061 L1225.81 682.061 L1225.25 682.061 L1224.69 682.061 L1224.13 682.061 L1223.57 682.061 L1223.01 682.061 L1222.45 682.061 L1221.89 682.061 L1221.34 682.061 L1220.78 682.061 L1220.22 682.061 L1219.66 682.061 L1219.1 682.061 L1218.54 682.061 L1217.98 682.061 L1217.42 682.061 L1216.86 682.061 L1216.3 682.061 L1215.74 682.061 L1215.18 682.061 L1214.62 682.061 L1214.07 682.061 L1213.51 682.061 L1212.95 682.061 L1212.39 682.061 L1211.83 682.061 L1211.27 682.061 L1210.71 682.061 L1210.15 682.061 L1209.59 682.061 L1209.03 682.061 L1208.47 682.061 L1207.91 682.061 L1207.35 682.061 L1206.8 682.061 L1206.24 682.061 L1205.68 682.061 L1205.12 682.061 L1204.56 682.061 L1204 682.061 L1203.44 682.061 L1202.88 682.061 L1202.32 682.061 L1201.76 682.061 L1201.2 682.061 L1200.64 682.061 L1200.08 682.061 L1199.52 682.061 L1198.97 682.061 L1198.41 682.061 L1197.85 682.061 L1197.29 682.061 L1196.73 682.061 L1196.17 682.061 L1195.61 682.061 L1195.05 682.061 L1194.49 682.061 L1193.93 682.061 L1193.37 682.061 L1192.81 682.061 L1192.25 682.061 L1191.7 682.061 L1191.14 682.061 L1190.58 682.061 L1190.02 682.061 L1189.46 682.061 L1188.9 682.061 L1188.34 682.061 L1187.78 682.061 L1187.22 682.061 L1186.66 682.061 L1186.1 682.061 L1185.54 682.061 L1184.98 682.061 L1184.43 682.061 L1183.87 682.061 L1183.31 682.061 L1182.75 682.061 L1182.19 682.061 L1181.63 682.061 L1181.07 682.061 L1180.51 682.061 L1179.95 682.061 L1179.39 682.061 L1178.83 682.061 L1178.27 682.061 L1177.71 682.061 L1177.15 682.061 L1176.6 682.061 L1176.04 682.061 L1175.48 682.061 L1174.92 682.061 L1174.36 682.061 L1173.8 682.061 L1173.24 682.061 L1172.68 682.061 L1172.12 682.061 L1171.56 682.061 L1171 682.061 L1170.44 682.061 L1169.88 682.061 L1169.33 682.061 L1168.77 682.061 L1168.21 682.061 L1167.65 682.061 L1167.09 682.061 L1166.53 682.061 L1165.97 682.061 L1165.41 682.061 L1164.85 682.061 L1164.29 682.061 L1163.73 682.061 L1163.17 682.061 L1162.61 682.061 L1162.05 682.061 L1161.5 682.061 L1160.94 682.061 L1160.38 682.061 L1159.82 682.061 L1159.26 682.061 L1158.7 682.061 L1158.14 682.061 L1157.58 682.061 L1157.02 682.061 L1156.46 682.061 L1155.9 682.061 L1155.34 682.061 L1154.78 682.061 L1154.23 682.061 L1153.67 682.061 L1153.11 682.061 L1152.55 682.061 L1151.99 682.061 L1151.43 682.061 L1150.87 682.061 L1150.31 682.061 L1149.75 682.061 L1149.19 682.061 L1148.63 682.061 L1148.07 682.061 L1147.51 682.061 L1146.96 682.061 L1146.4 682.061 L1145.84 682.061 L1145.28 682.061 L1144.72 682.061 L1144.16 682.061 L1143.6 682.061 L1143.04 682.061 L1142.48 682.061 L1141.92 682.061 L1141.36 682.061 L1140.8 682.061 L1140.24 682.061 L1139.68 682.061 L1139.13 682.061 L1138.57 682.061 L1138.01 682.061 L1137.45 682.061 L1136.89 682.061 L1136.33 682.061 L1135.77 682.061 L1135.21 682.061 L1134.65 682.061 L1134.09 682.061 L1133.53 682.061 L1132.97 682.061 L1132.41 682.061 L1131.86 682.061 L1131.3 682.061 L1130.74 682.061 L1130.18 682.061 L1129.62 682.061 L1129.06 682.061 L1128.5 682.061 L1127.94 682.061 L1127.38 682.061 L1126.82 682.061 L1126.26 682.061 L1125.7 682.061 L1125.14 682.061 L1124.59 682.061 L1124.03 682.061 L1123.47 682.061 L1122.91 682.061 L1122.35 682.061 L1121.79 682.061 L1121.23 682.061 L1120.67 682.061 L1120.11 682.061 L1119.55 682.061 L1118.99 682.061 L1118.43 682.061 L1117.87 682.061 L1117.31 682.061 L1116.76 682.061 L1116.2 682.061 L1115.64 682.061 L1115.08 682.061 L1114.52 682.061 L1113.96 682.061 L1113.4 682.061 L1112.84 682.061 L1112.28 682.061 L1111.72 682.061 L1111.16 682.061 L1110.6 682.061 L1110.04 682.061 L1109.49 682.061 L1108.93 682.061 L1108.37 682.061 L1107.81 682.061 L1107.25 682.061 L1106.69 682.061 L1106.13 682.061 L1105.57 682.061 L1105.01 682.061 L1104.45 682.061 L1103.89 682.061 L1103.33 682.061 L1102.77 682.061 L1102.22 682.061 L1101.66 682.061 L1101.1 682.061 L1100.54 682.061 L1099.98 682.061 L1099.42 682.061 L1098.86 682.061 L1098.3 682.061 L1097.74 682.061 L1097.18 682.061 L1096.62 682.061 L1096.06 682.061 L1095.5 682.061 L1094.94 682.061 L1094.39 682.061 L1093.83 682.061 L1093.27 682.061 L1092.71 682.061 L1092.15 682.061 L1091.59 682.061 L1091.03 682.061 L1090.47 682.061 L1089.91 682.061 L1089.35 682.061 L1088.79 682.061 L1088.23 682.061 L1087.67 682.061 L1087.12 682.061 L1086.56 682.061 L1086 682.061 L1085.44 682.061 L1084.88 682.061 L1084.32 682.061 L1083.76 682.061 L1083.2 682.061 L1082.64 682.061 L1082.08 682.061 L1081.52 682.061 L1080.96 682.061 L1080.4 682.061 L1079.85 682.061 L1079.29 682.061 L1078.73 682.061 L1078.17 682.061 L1077.61 682.061 L1077.05 682.061 L1076.49 682.061 L1075.93 682.061 L1075.37 682.061 L1074.81 682.061 L1074.25 682.061 L1073.69 682.061 L1073.13 682.061 L1072.57 682.061 L1072.02 682.061 L1071.46 682.061 L1070.9 682.061 L1070.34 682.061 L1069.78 682.061 L1069.22 682.061 L1068.66 682.061 L1068.1 682.061 L1067.54 682.061 L1066.98 682.061 L1066.42 682.061 L1065.86 682.061 L1065.3 682.061 L1064.75 682.061 L1064.19 682.061 L1063.63 682.061 L1063.07 682.061 L1062.51 682.061 L1061.95 682.061 L1061.39 682.061 L1060.83 682.061 L1060.27 682.061 L1059.71 682.061 L1059.15 682.061 L1058.59 682.061 L1058.03 682.061 L1057.48 682.061 L1056.92 682.061 L1056.36 682.061 L1055.8 682.061 L1055.24 682.061 L1054.68 682.061 L1054.12 682.061 L1053.56 682.061 L1053 682.061 L1052.44 682.061 L1051.88 682.061 L1051.32 682.061 L1050.76 682.061 L1050.2 682.061 L1049.65 682.061 L1049.09 682.061 L1048.53 682.061 L1047.97 682.061 L1047.41 682.061 L1046.85 682.061 L1046.29 682.061 L1045.73 682.061 L1045.17 682.061 L1044.61 682.061 L1044.05 682.061 L1043.49 682.061 L1042.93 682.061 L1042.38 682.061 L1041.82 682.061 L1041.26 682.061 L1040.7 682.061 L1040.14 682.061 L1039.58 682.061 L1039.02 682.061 L1038.46 682.061 L1037.9 682.061 L1037.34 682.061 L1036.78 682.061 L1036.22 682.061 L1035.66 682.061 L1035.1 682.061 L1034.55 682.061 L1033.99 682.061 L1033.43 682.061 L1032.87 682.061 L1032.31 682.061 L1031.75 682.061 L1031.19 682.061 L1030.63 682.061 L1030.07 682.061 L1029.51 682.061 L1028.95 682.061 L1028.39 682.061 L1027.83 682.061 L1027.28 682.061 L1026.72 682.061 L1026.16 682.061 L1025.6 682.061 L1025.04 682.061 L1024.48 682.061 L1023.92 682.061 L1023.36 682.061 L1022.8 682.061 L1022.24 682.061 L1021.68 682.061 L1021.12 682.061 L1020.56 682.061 L1020.01 682.061 L1019.45 682.061 L1018.89 682.061 L1018.33 682.061 L1017.77 682.061 L1017.21 682.061 L1016.65 682.061 L1016.09 682.061 L1015.53 682.061 L1014.97 682.061 L1014.41 682.061 L1013.85 682.061 L1013.29 682.061 L1012.73 682.061 L1012.18 682.061 L1011.62 682.061 L1011.06 682.061 L1010.5 682.061 L1009.94 682.061 L1009.38 682.061 L1008.82 682.061 L1008.26 682.061 L1007.7 682.061 L1007.14 682.061 L1006.58 682.061 L1006.02 682.061 L1005.46 682.061 L1004.91 682.061 L1004.35 682.061 L1003.79 682.061 L1003.23 682.061 L1002.67 682.061 L1002.11 682.061 L1001.55 682.061 L1000.99 682.061 L1000.43 682.061 L999.872 682.061 L999.313 682.061 L998.754 682.061 L998.194 682.061 L997.635 682.061 L997.076 682.061 L996.517 682.061 L995.957 682.061 L995.398 682.061 L994.839 682.061 L994.28 682.061 L993.72 682.061 L993.161 682.061 L992.602 682.061 L992.043 682.061 L991.483 682.061 L990.924 682.061 L990.365 682.061 L989.806 682.061 L989.246 682.061 L988.687 682.061 L988.128 682.061 L987.569 682.061 L987.009 682.061 L986.45 682.061 L985.891 682.061 L985.332 682.061 L984.772 682.061 L984.213 682.061 L983.654 682.061 L983.095 682.061 L982.535 682.061 L981.976 682.061 L981.417 682.061 L980.858 682.061 L980.298 682.061 L979.739 682.061 L979.18 682.061 L978.621 682.061 L978.061 682.061 L977.502 682.061 L976.943 682.061 L976.384 682.061 L975.824 682.061 L975.265 682.061 L974.706 682.061 L974.147 682.061 L973.587 682.061 L973.028 682.061 L972.469 682.061 L971.91 682.061 L971.35 682.061 L970.791 682.061 L970.232 682.061 L969.673 682.061 L969.113 682.061 L968.554 682.061 L967.995 682.061 L967.436 682.061 L966.876 682.061 L966.317 682.061 L965.758 682.061 L965.199 682.061 L964.639 682.061 L964.08 682.061 L963.521 682.061 L962.962 682.061 L962.402 682.061 L961.843 682.061 L961.284 682.061 L960.725 682.061 L960.165 682.061 L959.606 682.061 L959.047 682.061 L958.488 682.061 L957.928 682.061 L957.369 682.061 L956.81 682.061 L956.251 682.061 L955.691 682.061 L955.132 682.061 L954.573 682.061 L954.014 682.061 L953.454 682.061 L952.895 682.061 L952.336 682.061 L951.777 682.061 L951.217 682.061 L950.658 682.061 L950.099 682.061 L949.54 682.061 L948.98 682.061 L948.421 682.061 L947.862 682.061 L947.303 682.061 L946.743 682.061 L946.184 682.061 L945.625 682.061 L945.066 682.061 L944.506 682.061 L943.947 682.061 L943.388 682.061 L942.829 682.061 L942.269 682.061 L941.71 682.061 L941.151 682.061 L940.592 682.061 L940.032 682.061 L939.473 682.061 L938.914 682.061 L938.355 682.061 L937.795 682.061 L937.236 682.061 L936.677 682.061 L936.118 682.061 L935.558 682.061 L934.999 682.061 L934.44 682.061 L933.881 682.061 L933.321 682.061 L932.762 682.061 L932.203 682.061 L931.644 682.061 L931.084 682.061 L930.525 682.061 L929.966 682.061 L929.406 682.061 L928.847 682.061 L928.288 682.061 L927.729 682.061 L927.169 682.061 L926.61 682.061 L926.051 682.061 L925.492 682.061 L924.932 682.061 L924.373 682.061 L923.814 682.061 L923.255 682.061 L922.695 682.061 L922.136 682.061 L921.577 682.061 L921.018 682.061 L920.458 682.061 L919.899 682.061 L919.34 682.061 L918.781 682.061 L918.221 682.061 L917.662 682.061 L917.103 682.061 L916.544 682.061 L915.984 682.061 L915.425 682.061 L914.866 682.061 L914.307 682.061 L913.747 682.061 L913.188 682.061 L912.629 682.061 L912.07 682.061 L911.51 682.061 L910.951 682.061 L910.392 682.061 L909.833 682.061 L909.273 682.061 L908.714 682.061 L908.155 682.061 L907.596 682.061 L907.036 682.061 L906.477 682.061 L905.918 682.061 L905.359 682.061 L904.799 682.061 L904.24 682.061 L903.681 682.061 L903.122 682.061 L902.562 682.061 L902.003 682.061 L901.444 682.061 L900.885 682.061 L900.325 682.061 L899.766 682.061 L899.207 682.061 L898.648 682.061 L898.088 682.061 L897.529 682.061 L896.97 682.061 L896.411 682.061 L895.851 682.061 L895.292 682.061 L894.733 682.061 L894.174 682.061 L893.614 682.061 L893.055 682.061 L892.496 682.061 L891.937 682.061 L891.377 682.061 L890.818 682.061 L890.259 682.061 L889.7 682.061 L889.14 682.061 L888.581 682.061 L888.022 682.061 L887.463 682.061 L886.903 682.061 L886.344 682.061 L885.785 682.061 L885.226 682.061 L884.666 682.061 L884.107 682.061 L883.548 682.061 L882.989 682.061 L882.429 682.061 L881.87 682.061 L881.311 682.061 L880.752 682.061 L880.192 682.061 L879.633 682.061 L879.074 682.061 L878.515 682.061 L877.955 682.061 L877.396 682.061 L876.837 682.061 L876.278 682.061 L875.718 682.061 L875.159 682.061 L874.6 682.061 L874.041 682.061 L873.481 682.061 L872.922 682.061 L872.363 682.061 L871.804 682.061 L871.244 682.061 L870.685 682.061 L870.126 682.061 L869.567 682.061 L869.007 682.061 L868.448 682.061 L867.889 682.061 L867.33 682.061 L866.77 682.061 L866.211 682.061 L865.652 682.061 L865.093 682.061 L864.533 682.061 L863.974 682.061 L863.415 682.061 L862.856 682.061 L862.296 682.061 L861.737 682.061 L861.178 682.061 L860.619 682.061 L860.059 682.061 L859.5 682.061 L858.941 682.061 L858.382 682.061 L857.822 682.061 L857.263 682.061 L856.704 682.061 L856.145 682.061 L855.585 682.061 L855.026 682.061 L854.467 682.061 L853.908 682.061 L853.348 682.061 L852.789 682.061 L852.23 682.061 L851.671 682.061 L851.111 682.061 L850.552 682.061 L849.993 682.061 L849.434 682.061 L848.874 682.061 L848.315 682.061 L847.756 682.061 L847.197 682.061 L846.637 682.061 L846.078 682.061 L845.519 682.061 L844.96 682.061 L844.4 682.061 L843.841 682.061 L843.282 682.061 L842.723 682.061 L842.163 682.061 L841.604 682.061 L841.045 682.061 L840.486 682.061 L839.926 682.061 L839.367 682.061 L838.808 682.061 L838.249 682.061 L837.689 682.061 L837.13 682.061 L836.571 682.061 L836.012 682.061 L835.452 682.061 L834.893 682.061 L834.334 682.061 L833.775 682.061 L833.215 682.061 L832.656 682.061 L832.097 682.061 L831.538 682.061 L830.978 682.061 L830.419 682.061 L829.86 682.061 L829.301 682.061 L828.741 682.061 L828.182 682.061 L827.623 682.061 L827.064 682.061 L826.504 682.061 L825.945 682.061 L825.386 682.061 L824.827 682.061 L824.267 682.061 L823.708 682.061 L823.149 682.061 L822.59 682.061 L822.03 682.061 L821.471 682.061 L820.912 682.061 L820.353 682.061 L819.793 682.061 L819.234 682.061 L818.675 682.061 L818.116 682.061 L817.556 682.061 L816.997 682.061 L816.438 682.061 L815.879 682.061 L815.319 682.061 L814.76 682.061 L814.201 682.061 L813.642 682.061 L813.082 682.061 L812.523 682.061 L811.964 682.061 L811.405 682.061 L810.845 682.061 L810.286 682.061 L809.727 682.061 L809.168 682.061 L808.608 682.061 L808.049 682.061 L807.49 682.061 L806.931 682.061 L806.371 682.061 L805.812 682.061 L805.253 682.061 L804.693 682.061 L804.134 682.061 L803.575 682.061 L803.016 682.061 L802.456 682.061 L801.897 682.061 L801.338 682.061 L800.779 682.061 L800.219 682.061 L799.66 682.061 L799.101 682.061 L798.542 682.061 L797.982 682.061 L797.423 682.061 L796.864 682.061 L796.305 682.061 L795.745 682.061 L795.186 682.061 L794.627 682.061 L794.068 682.061 L793.508 682.061 L792.949 682.061 L792.39 682.061 L791.831 682.061 L791.271 682.061 L790.712 682.061 L790.153 682.061 L789.594 682.061 L789.034 682.061 L788.475 682.061 L787.916 682.061 L787.357 682.061 L786.797 682.061 L786.238 682.061 L785.679 682.061 L785.12 682.061 L784.56 682.061 L784.001 682.061 L783.442 682.061 L782.883 682.061 L782.323 682.061 L781.764 682.061 L781.205 682.061 L780.646 682.061 L780.086 682.061 L779.527 682.061 L778.968 682.061 L778.409 682.061 L777.849 682.061 L777.29 682.061 L776.731 682.061 L776.172 682.061 L775.612 682.061 L775.053 682.061 L774.494 682.061 L773.935 682.061 L773.375 682.061 L772.816 682.061 L772.257 682.061 L771.698 682.061 L771.138 682.061 L770.579 682.061 L770.02 682.061 L769.461 682.061 L768.901 682.061 L768.342 682.061 L767.783 682.061 L767.224 682.061 L766.664 682.061 L766.105 682.061 L765.546 682.061 L764.987 682.061 L764.427 682.061 L763.868 682.061 L763.309 682.061 L762.75 682.061 L762.19 682.061 L761.631 682.061 L761.072 682.061 L760.513 682.061 L759.953 682.061 L759.394 682.061 L758.835 682.061 L758.276 682.061 L757.716 682.061 L757.157 682.061 L756.598 682.061 L756.039 682.061 L755.479 682.061 L754.92 682.061 L754.361 682.061 L753.802 682.061 L753.242 682.061 L752.683 682.061 L752.124 682.061 L751.565 682.061 L751.005 682.061 L750.446 682.061 L749.887 682.061 L749.328 682.061 L748.768 682.061 L748.209 682.061 L747.65 682.061 L747.091 682.061 L746.531 682.061 L745.972 682.061 L745.413 682.061 L744.854 682.061 L744.294 682.061 L743.735 682.061 L743.176 682.061 L742.617 682.061 L742.057 682.061 L741.498 682.061 L740.939 682.061 L740.38 682.061 L739.82 682.061 L739.261 682.061 L738.702 682.061 L738.143 682.061 L737.583 682.061 L737.024 682.061 L736.465 682.061 L735.906 682.061 L735.346 682.061 L734.787 682.061 L734.228 682.061 L733.669 682.061 L733.109 682.061 L732.55 682.061 L731.991 682.061 L731.432 682.061 L730.872 682.061 L730.313 682.061 L729.754 682.061 L729.195 682.061 L728.635 682.061 L728.076 682.061 L727.517 682.061 L726.958 682.061 L726.398 682.061 L725.839 682.061 L725.28 682.061 L724.721 682.061 L724.161 682.061 L723.602 682.061 L723.043 682.061 L722.484 682.061 L721.924 682.061 L721.365 682.061 L720.806 682.061 L720.247 682.061  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.959 720.806,685.959 721.365,685.959 721.924,685.959 722.484,685.959 723.043,685.959 723.602,685.959 724.161,685.959 724.721,685.959 725.28,685.959 725.839,685.959 726.398,685.959 726.958,685.959 727.517,685.959 728.076,685.959 728.635,685.959 729.195,685.959 729.754,685.959 730.313,685.959 730.872,685.959 731.432,685.959 731.991,685.959 732.55,685.959 733.109,685.959 733.669,685.959 734.228,685.959 734.787,685.959 735.346,685.959 735.906,685.959 736.465,685.959 737.024,685.959 737.583,685.959 738.143,685.959 738.702,685.959 739.261,685.959 739.82,685.959 740.38,685.959 740.939,685.959 741.498,685.959 742.057,685.959 742.617,685.959 743.176,685.959 743.735,685.959 744.294,685.959 744.854,685.959 745.413,685.959 745.972,685.959 746.531,685.959 747.091,685.959 747.65,685.959 748.209,685.959 748.768,685.959 749.328,685.959 749.887,685.959 750.446,685.959 751.005,685.959 751.565,685.959 752.124,685.959 752.683,685.959 753.242,685.959 753.802,685.959 754.361,685.959 754.92,685.959 755.479,685.959 756.039,685.959 756.598,685.959 757.157,685.959 757.716,685.959 758.276,685.959 758.835,685.959 759.394,685.959 759.953,685.959 760.513,685.959 761.072,685.959 761.631,685.959 762.19,685.959 762.75,685.959 763.309,685.959 763.868,685.959 764.427,685.959 764.987,685.959 765.546,685.959 766.105,685.959 766.664,685.959 767.224,685.959 767.783,685.959 768.342,685.959 768.901,685.959 769.461,685.959 770.02,685.959 770.579,685.959 771.138,685.959 771.698,685.959 772.257,685.959 772.816,685.959 773.375,685.959 773.935,685.959 774.494,685.959 775.053,685.959 775.612,685.959 776.172,685.959 776.731,685.959 777.29,685.959 777.849,685.959 778.409,685.959 778.968,685.959 779.527,685.959 780.086,685.959 780.646,685.959 781.205,685.959 781.764,685.959 782.323,685.959 782.883,685.959 783.442,685.959 784.001,685.959 784.56,685.959 785.12,685.959 785.679,685.959 786.238,685.959 786.797,685.959 787.357,685.959 787.916,685.959 788.475,685.959 789.034,685.959 789.594,685.959 790.153,685.959 790.712,685.959 791.271,685.959 791.831,685.959 792.39,685.959 792.949,685.959 793.508,685.959 794.068,685.959 794.627,685.959 795.186,685.959 795.745,685.959 796.305,685.959 796.864,685.959 797.423,685.959 797.982,685.959 798.542,685.959 799.101,685.959 799.66,685.959 800.219,685.959 800.779,685.959 801.338,685.959 801.897,685.959 802.456,685.959 803.016,685.959 803.575,685.959 804.134,685.959 804.693,685.959 805.253,685.959 805.812,685.959 806.371,685.959 806.931,685.959 807.49,685.959 808.049,685.959 808.608,685.959 809.168,685.959 809.727,685.959 810.286,685.959 810.845,685.959 811.405,685.959 811.964,685.959 812.523,685.959 813.082,685.959 813.642,685.959 814.201,685.959 814.76,685.959 815.319,685.959 815.879,685.959 816.438,685.959 816.997,685.959 817.556,685.959 818.116,685.959 818.675,685.959 819.234,685.959 819.793,685.959 820.353,685.959 820.912,685.959 821.471,685.959 822.03,685.959 822.59,685.959 823.149,685.959 823.708,685.959 824.267,685.959 824.827,685.959 825.386,685.959 825.945,685.959 826.504,685.959 827.064,685.959 827.623,685.959 828.182,685.959 828.741,685.959 829.301,685.959 829.86,685.959 830.419,685.959 830.978,685.959 831.538,685.959 832.097,685.959 832.656,685.959 833.215,685.959 833.775,685.959 834.334,685.959 834.893,685.959 835.452,685.959 836.012,685.959 836.571,685.959 837.13,685.959 837.689,685.959 838.249,685.959 838.808,685.959 839.367,685.959 839.926,685.959 840.486,685.959 841.045,685.959 841.604,685.959 842.163,685.959 842.723,685.959 843.282,685.959 843.841,685.959 844.4,685.959 844.96,685.959 845.519,685.959 846.078,685.959 846.637,685.959 847.197,685.959 847.756,685.959 848.315,685.959 848.874,685.959 849.434,685.959 849.993,685.959 850.552,685.959 851.111,685.959 851.671,685.959 852.23,685.959 852.789,685.959 853.348,685.959 853.908,685.959 854.467,685.959 855.026,685.959 855.585,685.959 856.145,685.959 856.704,685.959 857.263,685.959 857.822,685.959 858.382,685.959 858.941,685.959 859.5,685.959 860.059,685.959 860.619,685.959 861.178,685.959 861.737,685.959 862.296,685.959 862.856,685.959 863.415,685.959 863.974,685.959 864.533,685.959 865.093,685.959 865.652,685.959 866.211,685.959 866.77,685.959 867.33,685.959 867.889,685.959 868.448,685.959 869.007,685.959 869.567,685.959 870.126,685.959 870.685,685.959 871.244,685.959 871.804,685.959 872.363,685.959 872.922,685.959 873.481,685.959 874.041,685.959 874.6,685.959 875.159,685.959 875.718,685.959 876.278,685.959 876.837,685.959 877.396,685.959 877.955,685.959 878.515,685.959 879.074,685.959 879.633,685.959 880.192,685.959 880.752,685.959 881.311,685.959 881.87,685.959 882.429,685.959 882.989,685.959 883.548,685.959 884.107,685.959 884.666,685.959 885.226,685.959 885.785,685.959 886.344,685.959 886.903,685.959 887.463,685.959 888.022,685.959 888.581,685.959 889.14,685.959 889.7,685.959 890.259,685.959 890.818,685.959 891.377,685.959 891.937,685.959 892.496,685.959 893.055,685.959 893.614,685.959 894.174,685.959 894.733,685.959 895.292,685.959 895.851,685.959 896.411,685.959 896.97,685.959 897.529,685.959 898.088,685.959 898.648,685.959 899.207,685.959 899.766,685.959 900.325,685.959 900.885,685.959 901.444,685.959 902.003,685.959 902.562,685.959 903.122,685.959 903.681,685.959 904.24,685.959 904.799,685.959 905.359,685.959 905.918,685.959 906.477,685.959 907.036,685.959 907.596,685.959 908.155,685.959 908.714,685.959 909.273,685.959 909.833,685.959 910.392,685.959 910.951,685.959 911.51,685.959 912.07,685.959 912.629,685.959 913.188,685.959 913.747,685.959 914.307,685.959 914.866,685.959 915.425,685.959 915.984,685.959 916.544,685.959 917.103,685.959 917.662,685.959 918.221,685.959 918.781,685.959 919.34,685.959 919.899,685.959 920.458,685.959 921.018,685.959 921.577,685.959 922.136,685.959 922.695,685.959 923.255,685.959 923.814,685.959 924.373,685.959 924.932,685.959 925.492,685.959 926.051,685.959 926.61,685.959 927.169,685.959 927.729,685.959 928.288,685.959 928.847,685.959 929.406,685.959 929.966,685.959 930.525,685.959 931.084,685.959 931.644,685.959 932.203,685.959 932.762,685.959 933.321,685.959 933.881,685.959 934.44,685.959 934.999,685.959 935.558,685.959 936.118,685.959 936.677,685.959 937.236,685.959 937.795,685.959 938.355,685.959 938.914,685.959 939.473,685.959 940.032,685.959 940.592,685.959 941.151,685.959 941.71,685.959 942.269,685.959 942.829,685.959 943.388,685.959 943.947,685.959 944.506,685.959 945.066,685.959 945.625,685.959 946.184,685.959 946.743,685.959 947.303,685.959 947.862,685.959 948.421,685.959 948.98,685.959 949.54,685.959 950.099,685.959 950.658,685.959 951.217,685.959 951.777,685.959 952.336,685.959 952.895,685.959 953.454,685.959 954.014,685.959 954.573,685.959 955.132,685.959 955.691,685.959 956.251,685.959 956.81,685.959 957.369,685.959 957.928,685.959 958.488,685.959 959.047,685.959 959.606,685.959 960.165,685.959 960.725,685.959 961.284,685.959 961.843,685.959 962.402,685.959 962.962,685.959 963.521,685.959 964.08,685.959 964.639,685.959 965.199,685.959 965.758,685.959 966.317,685.959 966.876,685.959 967.436,685.959 967.995,685.959 968.554,685.959 969.113,685.959 969.673,685.959 970.232,685.959 970.791,685.959 971.35,685.959 971.91,685.959 972.469,685.959 973.028,685.959 973.587,685.959 974.147,685.959 974.706,685.959 975.265,685.959 975.824,685.959 976.384,685.959 976.943,685.959 977.502,685.959 978.061,685.959 978.621,685.959 979.18,685.959 979.739,685.959 980.298,685.959 980.858,685.959 981.417,685.959 981.976,685.959 982.535,685.959 983.095,685.959 983.654,685.959 984.213,685.959 984.772,685.959 985.332,685.959 985.891,685.959 986.45,685.959 987.009,685.959 987.569,685.959 988.128,685.959 988.687,685.959 989.246,685.959 989.806,685.959 990.365,685.959 990.924,685.959 991.483,685.959 992.043,685.959 992.602,685.959 993.161,685.959 993.72,685.959 994.28,685.959 994.839,685.959 995.398,685.959 995.957,685.959 996.517,685.959 997.076,685.959 997.635,685.959 998.194,685.959 998.754,685.959 999.313,685.959 999.872,685.959 1000.43,685.959 1000.99,685.959 1001.55,685.959 1002.11,685.959 1002.67,685.959 1003.23,685.959 1003.79,685.959 1004.35,685.959 1004.91,685.959 1005.46,685.959 1006.02,685.959 1006.58,685.959 1007.14,685.959 1007.7,685.959 1008.26,685.959 1008.82,685.959 1009.38,685.959 1009.94,685.959 1010.5,685.959 1011.06,685.959 1011.62,685.959 1012.18,685.959 1012.73,685.959 1013.29,685.959 1013.85,685.959 1014.41,685.959 1014.97,685.959 1015.53,685.959 1016.09,685.959 1016.65,685.959 1017.21,685.959 1017.77,685.959 1018.33,685.959 1018.89,685.959 1019.45,685.959 1020.01,685.959 1020.56,685.959 1021.12,685.959 1021.68,685.959 1022.24,685.959 1022.8,685.959 1023.36,685.959 1023.92,685.959 1024.48,685.959 1025.04,685.959 1025.6,685.959 1026.16,685.959 1026.72,685.959 1027.28,685.959 1027.83,685.959 1028.39,685.959 1028.95,685.959 1029.51,685.959 1030.07,685.959 1030.63,685.959 1031.19,685.959 1031.75,685.959 1032.31,685.959 1032.87,685.959 1033.43,685.959 1033.99,685.959 1034.55,685.959 1035.1,685.959 1035.66,685.959 1036.22,685.959 1036.78,685.959 1037.34,685.959 1037.9,685.959 1038.46,685.959 1039.02,685.959 1039.58,685.959 1040.14,685.959 1040.7,685.959 1041.26,685.959 1041.82,685.959 1042.38,685.959 1042.93,685.959 1043.49,685.959 1044.05,685.959 1044.61,685.959 1045.17,685.959 1045.73,685.959 1046.29,685.959 1046.85,685.959 1047.41,685.959 1047.97,685.959 1048.53,685.959 1049.09,685.959 1049.65,685.959 1050.2,685.959 1050.76,685.959 1051.32,685.959 1051.88,685.959 1052.44,685.959 1053,685.959 1053.56,685.959 1054.12,685.959 1054.68,685.959 1055.24,685.959 1055.8,685.959 1056.36,685.959 1056.92,685.959 1057.48,685.959 1058.03,685.959 1058.59,685.959 1059.15,685.959 1059.71,685.959 1060.27,685.959 1060.83,685.959 1061.39,685.959 1061.95,685.959 1062.51,685.959 1063.07,685.959 1063.63,685.959 1064.19,685.959 1064.75,685.959 1065.3,685.959 1065.86,685.959 1066.42,685.959 1066.98,685.959 1067.54,685.959 1068.1,685.959 1068.66,685.959 1069.22,685.959 1069.78,685.959 1070.34,685.959 1070.9,685.959 1071.46,685.959 1072.02,685.959 1072.57,685.959 1073.13,685.959 1073.69,685.959 1074.25,685.959 1074.81,685.959 1075.37,685.959 1075.93,685.959 1076.49,685.959 1077.05,685.959 1077.61,685.959 1078.17,685.959 1078.73,685.959 1079.29,685.959 1079.85,685.959 1080.4,685.959 1080.96,685.959 1081.52,685.959 1082.08,685.959 1082.64,685.959 1083.2,685.959 1083.76,685.959 1084.32,685.959 1084.88,685.959 1085.44,685.959 1086,685.959 1086.56,685.959 1087.12,685.959 1087.67,685.959 1088.23,685.959 1088.79,685.959 1089.35,685.959 1089.91,685.959 1090.47,685.959 1091.03,685.959 1091.59,685.959 1092.15,685.959 1092.71,685.959 1093.27,685.959 1093.83,685.959 1094.39,685.959 1094.94,685.959 1095.5,685.959 1096.06,685.959 1096.62,685.959 1097.18,685.959 1097.74,685.959 1098.3,685.959 1098.86,685.959 1099.42,685.959 1099.98,685.959 1100.54,685.959 1101.1,685.959 1101.66,685.959 1102.22,685.959 1102.77,685.959 1103.33,685.959 1103.89,685.959 1104.45,685.959 1105.01,685.959 1105.57,685.959 1106.13,685.959 1106.69,685.959 1107.25,685.959 1107.81,685.959 1108.37,685.959 1108.93,685.959 1109.49,685.959 1110.04,685.959 1110.6,685.959 1111.16,685.959 1111.72,685.959 1112.28,685.959 1112.84,685.959 1113.4,685.959 1113.96,685.959 1114.52,685.959 1115.08,685.959 1115.64,685.959 1116.2,685.959 1116.76,685.959 1117.31,685.959 1117.87,685.959 1118.43,685.959 1118.99,685.959 1119.55,685.959 1120.11,685.959 1120.67,685.959 1121.23,685.959 1121.79,685.959 1122.35,685.959 1122.91,685.959 1123.47,685.959 1124.03,685.959 1124.59,685.959 1125.14,685.959 1125.7,685.959 1126.26,685.959 1126.82,685.959 1127.38,685.959 1127.94,685.959 1128.5,685.959 1129.06,685.959 1129.62,685.959 1130.18,685.959 1130.74,685.959 1131.3,685.959 1131.86,685.959 1132.41,685.959 1132.97,685.959 1133.53,685.959 1134.09,685.959 1134.65,685.959 1135.21,685.959 1135.77,685.959 1136.33,685.959 1136.89,685.959 1137.45,685.959 1138.01,685.959 1138.57,685.959 1139.13,685.959 1139.68,685.959 1140.24,685.959 1140.8,685.959 1141.36,685.959 1141.92,685.959 1142.48,685.959 1143.04,685.959 1143.6,685.959 1144.16,685.959 1144.72,685.959 1145.28,685.959 1145.84,685.959 1146.4,685.959 1146.96,685.959 1147.51,685.959 1148.07,685.959 1148.63,685.959 1149.19,685.959 1149.75,685.959 1150.31,685.959 1150.87,685.959 1151.43,685.959 1151.99,685.959 1152.55,685.959 1153.11,685.959 1153.67,685.959 1154.23,685.959 1154.78,685.959 1155.34,685.959 1155.9,685.959 1156.46,685.959 1157.02,685.959 1157.58,685.959 1158.14,685.959 1158.7,685.959 1159.26,685.959 1159.82,685.959 1160.38,685.959 1160.94,685.959 1161.5,685.959 1162.05,685.959 1162.61,685.959 1163.17,685.959 1163.73,685.959 1164.29,685.959 1164.85,685.959 1165.41,685.959 1165.97,685.959 1166.53,685.959 1167.09,685.959 1167.65,685.959 1168.21,685.959 1168.77,685.959 1169.33,685.959 1169.88,685.959 1170.44,685.959 1171,685.959 1171.56,685.959 1172.12,685.959 1172.68,685.959 1173.24,685.959 1173.8,685.959 1174.36,685.959 1174.92,685.959 1175.48,685.959 1176.04,685.959 1176.6,685.959 1177.15,685.959 1177.71,685.959 1178.27,685.959 1178.83,685.959 1179.39,685.959 1179.95,685.959 1180.51,685.959 1181.07,685.959 1181.63,685.959 1182.19,685.959 1182.75,685.959 1183.31,685.959 1183.87,685.959 1184.43,685.959 1184.98,685.959 1185.54,685.959 1186.1,685.959 1186.66,685.959 1187.22,685.959 1187.78,685.959 1188.34,685.959 1188.9,685.959 1189.46,685.959 1190.02,685.959 1190.58,685.959 1191.14,685.959 1191.7,685.959 1192.25,685.959 1192.81,685.959 1193.37,685.959 1193.93,685.959 1194.49,685.959 1195.05,685.959 1195.61,685.959 1196.17,685.959 1196.73,685.959 1197.29,685.959 1197.85,685.959 1198.41,685.959 1198.97,685.959 1199.52,685.959 1200.08,685.959 1200.64,685.959 1201.2,685.959 1201.76,685.959 1202.32,685.959 1202.88,685.959 1203.44,685.959 1204,685.959 1204.56,685.959 1205.12,685.959 1205.68,685.959 1206.24,685.959 1206.8,685.959 1207.35,685.959 1207.91,685.959 1208.47,685.959 1209.03,685.959 1209.59,685.959 1210.15,685.959 1210.71,685.959 1211.27,685.959 1211.83,685.959 1212.39,685.959 1212.95,685.959 1213.51,685.959 1214.07,685.959 1214.62,685.959 1215.18,685.959 1215.74,685.959 1216.3,685.959 1216.86,685.959 1217.42,685.959 1217.98,685.959 1218.54,685.959 1219.1,685.959 1219.66,685.959 1220.22,685.959 1220.78,685.959 1221.34,685.959 1221.89,685.959 1222.45,685.959 1223.01,685.959 1223.57,685.959 1224.13,685.959 1224.69,685.959 1225.25,685.959 1225.81,685.959 1226.37,685.959 1226.93,685.959 1227.49,685.959 1228.05,685.959 1228.61,685.959 1229.17,685.959 1229.72,685.959 1230.28,685.959 1230.84,685.959 1231.4,685.959 1231.96,685.959 1232.52,685.959 1233.08,685.959 1233.64,685.959 1234.2,685.959 1234.76,685.959 1235.32,685.959 1235.88,685.959 1236.44,685.959 1236.99,685.959 1237.55,685.959 1238.11,685.959 1238.67,685.959 1239.23,685.959 1239.79,685.959 1240.35,685.959 1240.91,685.959 1241.47,685.959 1242.03,685.959 1242.59,685.959 1243.15,685.959 1243.71,685.959 1244.26,685.959 1244.82,685.959 1245.38,685.959 1245.94,685.959 1246.5,685.959 1247.06,685.959 1247.62,685.959 1248.18,685.959 1248.74,685.959 1249.3,685.959 1249.86,685.959 1250.42,685.959 1250.98,685.959 1251.54,685.959 1252.09,685.959 1252.65,685.959 1253.21,685.959 1253.77,685.959 1254.33,685.959 1254.89,685.959 1255.45,685.959 1256.01,685.959 1256.57,685.959 1257.13,685.959 1257.69,685.959 1258.25,685.959 1258.81,685.959 1259.36,685.959 1259.92,685.959 1260.48,685.959 1261.04,685.959 1261.6,685.959 1262.16,685.959 1262.72,685.959 1263.28,685.959 1263.84,685.959 1264.4,685.959 1264.96,685.959 1265.52,685.959 1266.08,685.959 1266.63,685.959 1267.19,685.959 1267.75,685.959 1268.31,685.959 1268.87,685.959 1269.43,685.959 1269.99,685.959 1270.55,685.959 1271.11,685.959 1271.67,685.959 1272.23,685.959 1272.79,685.959 1273.35,685.959 1273.91,685.959 1274.46,685.959 1275.02,685.959 1275.58,685.959 1276.14,685.959 1276.7,685.959 1277.26,685.959 1277.82,685.959 1278.38,685.959 1278.94,685.959 1279.5,685.959 1280.06,685.959 1280.62,685.959 1281.18,685.959 1281.73,685.959 1282.29,685.959 1282.85,685.959 1283.41,685.959 1283.97,685.959 1284.53,685.959 1285.09,685.959 1285.65,685.959 1286.21,685.959 1286.77,685.959 1287.33,685.959 1287.89,685.959 1288.45,685.959 1289,685.959 1289.56,685.959 1290.12,685.959 1290.68,685.959 1291.24,685.959 1291.8,685.959 1292.36,685.959 1292.92,685.959 1293.48,685.959 1294.04,685.959 1294.6,685.959 1295.16,685.959 1295.72,685.959 1296.28,685.959 1296.83,685.959 1297.39,685.959 1297.95,685.959 1298.51,685.959 1299.07,685.959 1299.63,685.959 1300.19,685.959 1300.75,685.959 1301.31,685.959 1301.87,685.959 1302.43,685.959 1302.99,685.959 1303.55,685.959 1304.1,685.959 1304.66,685.959 1305.22,685.959 1305.78,685.959 1306.34,685.959 1306.9,685.959 1307.46,685.959 1308.02,685.959 1308.58,685.959 1309.14,685.959 1309.7,685.959 1310.26,685.959 1310.82,685.959 1311.38,685.959 1311.93,685.959 1312.49,685.959 1313.05,685.959 1313.61,685.959 1314.17,685.959 1314.73,685.959 1315.29,685.959 1315.85,685.959 1316.41,685.959 1316.97,685.959 1317.53,685.959 1318.09,685.959 1318.65,685.959 1319.2,685.959 1319.76,685.959 1320.32,685.959 1320.88,685.959 1321.44,685.959 1322,685.959 1322.56,685.959 1323.12,685.959 1323.68,685.959 1324.24,685.959 1324.8,685.959 1325.36,685.959 1325.92,685.959 1326.47,685.959 1327.03,685.959 1327.59,685.959 1328.15,685.959 1328.71,685.959 1329.27,685.959 1329.83,685.959 1330.39,685.959 1330.95,685.959 1331.51,685.959 1332.07,685.959 1332.63,685.959 1333.19,685.959 1333.75,685.959 1334.3,685.959 1334.86,685.959 1335.42,685.959 1335.98,685.959 1336.54,685.959 1337.1,685.959 1337.66,685.959 1338.22,685.959 1338.78,685.959 1339.34,685.959 1339.9,685.959 1340.46,685.959 1341.02,685.959 1341.57,685.959 1342.13,685.959 1342.69,685.959 1343.25,685.959 1343.81,685.959 1344.37,685.959 1344.93,685.959 1345.49,685.959 1346.05,685.959 1346.61,685.959 1347.17,685.959 1347.73,685.959 1348.29,685.959 1348.84,685.959 1349.4,685.959 1349.96,685.959 1350.52,685.959 1351.08,685.959 1351.64,685.959 1352.2,685.959 1352.76,685.959 1353.32,685.959 1353.88,685.959 1354.44,685.959 1355,685.959 1355.56,685.959 1356.12,685.959 1356.67,685.959 1357.23,685.959 1357.79,685.959 1358.35,685.959 1358.91,685.959 1359.47,685.959 1360.03,685.959 1360.59,685.959 1361.15,685.959 1361.71,685.959 1362.27,685.959 1362.83,685.959 1363.39,685.959 1363.94,685.959 1364.5,685.959 1365.06,685.959 1365.62,685.959 1366.18,685.959 1366.74,685.959 1367.3,685.959 1367.86,685.959 1368.42,685.959 1368.98,685.959 1369.54,685.959 1370.1,685.959 1370.66,685.959 1371.21,685.959 1371.77,685.959 1372.33,685.959 1372.89,685.959 1373.45,685.959 1374.01,685.959 1374.57,685.959 1375.13,685.959 1375.69,685.959 1376.25,685.959 1376.81,685.959 1377.37,685.959 1377.93,685.959 1378.49,685.959 1379.04,685.959 1379.6,685.959 1380.16,685.959 1380.72,685.959 1381.28,685.959 1381.84,685.959 1382.4,685.959 1382.96,685.959 1383.52,685.959 1384.08,685.959 1384.64,685.959 1385.2,685.959 1385.76,685.959 1386.31,685.959 1386.87,685.959 1387.43,685.959 1387.99,685.959 1388.55,685.959 1389.11,685.959 1389.67,685.959 1390.23,685.959 1390.79,685.959 1391.35,685.959 1391.91,685.959 1392.47,685.959 1393.03,685.959 1393.58,685.959 1394.14,685.959 1394.7,685.959 1395.26,685.959 1395.82,685.959 1396.38,685.959 1396.94,685.959 1397.5,685.959 1398.06,685.959 1398.62,685.959 1399.18,685.959 1399.74,685.959 1400.3,685.959 1400.86,685.959 1401.41,685.959 1401.97,685.959 1402.53,685.959 1403.09,685.959 1403.65,685.959 1404.21,685.959 1404.77,685.959 1405.33,685.959 1405.89,685.959 1406.45,685.959 1407.01,685.959 1407.57,685.959 1408.13,685.959 1408.68,685.959 1409.24,685.959 1409.8,685.959 1410.36,685.959 1410.92,685.959 1411.48,685.959 1412.04,685.959 1412.6,685.959 1413.16,685.959 1413.72,685.959 1414.28,685.959 1414.84,685.959 1415.4,685.959 1415.95,685.959 1416.51,685.959 1417.07,685.959 1417.63,685.959 1418.19,685.959 1418.75,685.959 1419.31,685.959 1419.87,685.959 1420.43,685.959 1420.99,685.959 1421.55,685.959 1422.11,685.959 1422.67,685.959 1423.23,685.959 1423.78,685.959 1424.34,685.959 1424.9,685.959 1425.46,685.959 1426.02,685.959 1426.58,685.959 1427.14,685.959 1427.7,685.959 1428.26,685.959 1428.82,685.959 1429.38,685.959 1429.94,685.959 1430.5,685.959 1431.05,685.959 1431.61,685.959 1432.17,685.959 1432.73,685.959 1433.29,685.959 1433.85,685.959 1434.41,685.959 1434.97,685.959 1435.53,685.959 1436.09,685.959 1436.65,685.959 1437.21,685.959 1437.77,685.959 1438.33,685.959 1438.88,685.959 1439.44,685.959 1440,685.959 1440.56,685.959 1441.12,685.959 1441.68,685.959 1442.24,685.959 1442.8,685.959 1443.36,685.959 1443.92,685.959 1444.48,685.959 1445.04,685.959 1445.6,685.959 1446.15,685.959 1446.71,685.959 1447.27,685.959 1447.83,685.959 1448.39,685.959 1448.95,685.959 1449.51,685.959 1450.07,685.959 1450.63,685.959 1451.19,685.959 1451.75,685.959 1452.31,685.959 1452.87,685.959 1453.42,685.959 1453.98,685.959 1454.54,685.959 1455.1,685.959 1455.66,685.959 1456.22,685.959 1456.78,685.959 1457.34,685.959 1457.9,685.959 1458.46,685.959 1459.02,685.959 1459.58,685.959 1460.14,685.959 1460.7,685.959 1461.25,685.959 1461.81,685.959 1462.37,685.959 1462.93,685.959 1463.49,685.959 1464.05,685.959 1464.61,685.959 1465.17,685.959 1465.73,685.959 1466.29,685.959 1466.85,685.959 1467.41,685.959 1467.97,685.959 1468.52,685.959 1469.08,685.959 1469.64,685.959 1470.2,685.959 1470.76,685.959 1471.32,685.959 1471.88,685.959 1472.44,685.959 1473,685.959 1473.56,685.959 1474.12,685.959 1474.68,685.959 1475.24,685.959 1475.79,685.959 1476.35,685.959 1476.91,685.959 1477.47,685.959 1478.03,685.959 1478.59,685.959 1479.15,685.959 1479.71,685.959 1480.27,685.959 1480.83,685.959 1481.39,685.959 1481.95,685.959 1482.51,685.959 1483.07,685.959 1483.62,685.959 1484.18,685.959 1484.74,685.959 1485.3,685.959 1485.86,685.959 1486.42,685.959 1486.98,685.959 1487.54,685.959 1488.1,685.959 1488.66,685.959 1489.22,685.959 1489.78,685.959 1490.34,685.959 1490.89,685.959 1491.45,685.959 1492.01,685.959 1492.57,685.959 1493.13,685.959 1493.69,685.959 1494.25,685.959 1494.81,685.959 1495.37,685.959 1495.93,685.959 1496.49,685.959 1497.05,685.959 1497.61,685.959 1498.16,685.959 1498.72,685.959 1499.28,685.959 1499.84,685.959 1500.4,685.959 1500.96,685.959 1501.52,685.959 1502.08,685.959 1502.64,685.959 1503.2,685.959 1503.76,685.959 1504.32,685.959 1504.88,685.959 1505.44,685.959 1505.99,685.959 1506.55,685.959 1507.11,685.959 1507.67,685.959 1508.23,685.959 1508.79,685.959 1509.35,685.959 1509.91,685.959 1510.47,685.959 1511.03,685.959 1511.59,685.959 1512.15,685.959 1512.71,685.959 1513.26,685.959 1513.82,685.959 1514.38,685.959 1514.94,685.959 1515.5,685.959 1516.06,685.959 1516.62,685.959 1517.18,685.959 1517.74,685.959 1518.3,685.959 1518.86,685.959 1519.42,685.959 1519.98,685.959 1520.53,685.959 1521.09,685.959 1521.65,685.959 1522.21,685.959 1522.77,685.959 1523.33,685.959 1523.89,685.959 1524.45,685.959 1525.01,685.959 1525.57,685.959 1526.13,685.959 1526.69,685.959 1527.25,685.959 1527.81,685.959 1528.36,685.959 1528.92,685.959 1529.48,685.959 1530.04,685.959 1530.6,685.959 1531.16,685.959 1531.72,685.959 1532.28,685.959 1532.84,685.959 1533.4,685.959 1533.96,685.959 1534.52,685.959 1535.08,685.959 1535.63,685.959 1536.19,685.959 1536.75,685.959 1537.31,685.959 1537.87,685.959 1538.43,685.959 1538.99,685.959 1539.55,685.959 1540.11,685.959 1540.67,685.959 1541.23,685.959 1541.79,685.959 1542.35,685.959 1542.9,685.959 1543.46,685.959 1544.02,685.959 1544.58,685.959 1545.14,685.959 1545.7,685.959 1546.26,685.959 1546.82,685.959 1547.38,685.959 1547.94,685.959 1548.5,685.959 1549.06,685.959 1549.62,685.959 1550.18,685.959 1550.73,685.959 1551.29,685.959 1551.85,685.959 1552.41,685.959 1552.97,685.959 1553.53,685.959 1554.09,685.959 1554.65,685.959 1555.21,685.959 1555.77,685.959 1556.33,685.959 1556.89,685.959 1557.45,685.959 1558,685.959 1558.56,685.959 1559.12,685.959 1559.68,685.959 1560.24,685.959 1560.8,685.959 1561.36,685.959 1561.92,685.959 1562.48,685.959 1563.04,685.959 1563.6,685.959 1564.16,685.959 1564.72,685.959 1565.28,685.959 1565.83,685.959 1566.39,685.959 1566.95,685.959 1567.51,685.959 1568.07,685.959 1568.63,685.959 1569.19,685.959 1569.75,685.959 1570.31,685.959 1570.87,685.959 1571.43,685.959 1571.99,685.959 1572.55,685.959 1573.1,685.959 1573.66,685.959 1574.22,685.959 1574.78,685.959 1575.34,685.959 1575.9,685.959 1576.46,685.959 1577.02,685.959 1577.58,685.959 1578.14,685.959 1578.7,685.959 1579.26,685.959 1579.82,685.959 1580.37,685.959 1580.93,685.959 1581.49,685.959 1582.05,685.959 1582.61,685.959 1583.17,685.959 1583.73,685.959 1584.29,685.959 1584.85,685.959 1585.41,685.959 1585.97,685.959 1586.53,685.959 1587.09,685.959 1587.65,685.959 1588.2,685.959 1588.76,685.959 1589.32,685.959 1589.88,685.959 1590.44,685.959 1591,685.959 1591.56,685.959 1592.12,685.959 1592.68,685.959 1593.24,685.959 1593.8,685.959 1594.36,685.959 1594.92,685.959 1595.47,685.959 1596.03,685.959 1596.59,685.959 1597.15,685.959 1597.71,685.959 1598.27,685.959 1598.83,685.959 1599.39,685.959 1599.95,685.959 1600.51,685.959 1601.07,685.959 1601.63,685.959 1602.19,685.959 1602.74,685.959 1603.3,685.959 1603.86,685.959 1604.42,685.959 1604.98,685.959 1605.54,685.959 1606.1,685.959 1606.66,685.959 1607.22,685.959 1607.78,685.959 1608.34,685.959 1608.9,685.959 1609.46,685.959 1610.02,685.959 1610.57,685.959 1611.13,685.959 1611.69,685.959 1612.25,685.959 1612.81,685.959 1613.37,685.959 1613.93,685.959 1614.49,685.959 1615.05,685.959 1615.61,685.959 1616.17,685.959 1616.73,685.959 1617.29,685.959 1617.84,685.959 1618.4,685.959 1618.96,685.959 1619.52,685.959 1620.08,685.959 1620.64,685.959 1621.2,685.959 1621.76,685.959 1622.32,685.959 1622.88,685.959 1623.44,685.959 1624,685.959 1624.56,685.959 1625.11,685.959 1625.67,685.959 1626.23,685.959 1626.79,685.959 1627.35,685.959 1627.91,685.959 1628.47,685.959 1629.03,685.959 1629.59,685.959 1630.15,685.959 1630.71,685.959 1631.27,685.959 1631.83,685.959 1632.39,685.959 1632.94,685.959 1633.5,685.959 1634.06,685.959 1634.62,685.959 1635.18,685.959 1635.74,685.959 1636.3,685.959 1636.86,685.959 1637.42,685.959 1637.98,685.959 1638.54,685.959 1639.1,685.959 1639.66,685.959 1640.21,685.959 1640.77,685.959 1641.33,685.959 1641.89,685.959 1642.45,685.959 1643.01,685.959 1643.57,685.959 1644.13,685.959 1644.69,685.959 1645.25,685.959 1645.81,685.959 1646.37,685.959 1646.93,685.959 1647.48,685.959 1648.04,685.959 1648.6,685.959 1649.16,685.959 1649.72,685.959 1650.28,685.959 1650.84,685.959 1651.4,685.959 1651.96,685.959 1652.52,685.959 1653.08,685.959 1653.64,685.959 1654.2,685.959 1654.76,685.959 1655.31,685.959 1655.87,685.959 1656.43,685.959 1656.99,685.959 1657.55,685.959 1658.11,685.959 1658.67,685.959 1659.23,685.959 1659.79,685.959 1660.35,685.959 1660.91,685.959 1661.47,685.959 1662.03,685.959 1662.58,685.959 1663.14,685.959 1663.7,685.959 1664.26,685.959 1664.82,685.959 1665.38,685.959 1665.94,685.959 1666.5,685.959 1667.06,685.959 1667.62,685.959 1668.18,685.959 1668.74,685.959 1669.3,685.959 1669.85,685.959 1670.41,685.959 1670.97,685.959 1671.53,685.959 1672.09,685.959 1672.65,685.959 1673.21,685.959 1673.77,685.959 1674.33,685.959 1674.89,685.959 1675.45,685.959 1676.01,685.959 1676.57,685.959 1677.13,685.959 1677.68,685.959 1678.24,685.959 1678.8,685.959 1679.36,685.959 1679.92,685.959 1680.48,685.959 1681.04,685.959 1681.6,685.959 1682.16,685.959 1682.72,685.959 1683.28,685.959 1683.84,685.959 1684.4,685.959 1684.95,685.959 1685.51,685.959 1686.07,685.959 1686.63,685.959 1687.19,685.959 1687.75,685.959 1688.31,685.959 1688.87,685.959 1689.43,685.959 1689.99,685.959 1690.55,685.959 1691.11,685.959 1691.67,685.959 1692.23,685.959 1692.78,685.959 1693.34,685.959 1693.9,685.959 1694.46,685.959 1695.02,685.959 1695.58,685.959 1696.14,685.959 1696.7,685.959 1697.26,685.959 1697.82,685.959 1698.38,685.959 1698.94,685.959 1699.5,685.959 1700.05,685.959 1700.61,685.959 1701.17,685.959 1701.73,685.959 1702.29,685.959 1702.85,685.959 1703.41,685.959 1703.97,685.959 1704.53,685.959 1705.09,685.959 1705.65,685.959 1706.21,685.959 1706.77,685.959 1707.32,685.959 1707.88,685.959 1708.44,685.959 1709,685.959 1709.56,685.959 1710.12,685.959 1710.68,685.959 1711.24,685.959 1711.8,685.959 1712.36,685.959 1712.92,685.959 1713.48,685.959 1714.04,685.959 1714.6,685.959 1715.15,685.959 1715.71,685.959 1716.27,685.959 1716.83,685.959 1717.39,685.959 1717.95,685.959 1718.51,685.959 1719.07,685.959 1719.63,685.959 1720.19,685.959 1720.75,685.959 1721.31,685.959 1721.87,685.959 1722.42,685.959 1722.98,685.959 1723.54,685.959 1724.1,685.959 1724.66,685.959 1725.22,685.959 1725.78,685.959 1726.34,685.959 1726.9,685.959 1727.46,685.959 1728.02,685.959 1728.58,685.959 1729.14,685.959 1729.69,685.959 1730.25,685.959 1730.81,685.959 1731.37,685.959 1731.93,685.959 1732.49,685.959 1733.05,685.959 1733.61,685.959 1734.17,685.959 1734.73,685.959 1735.29,685.959 1735.85,685.959 1736.41,685.959 1736.97,685.959 1737.52,685.959 1738.08,685.959 1738.64,685.959 1739.2,685.959 1739.76,685.959 1740.32,685.959 1740.88,685.959 1741.44,685.959 1742,685.959 1742.56,685.959 1743.12,685.959 1743.68,685.959 1744.24,685.959 1744.79,685.959 1745.35,685.959 1745.91,685.959 1746.47,685.959 1747.03,685.959 1747.59,685.959 1748.15,685.959 1748.71,685.959 1749.27,685.959 1749.83,685.959 1750.39,685.959 1750.95,685.959 1751.51,685.959 1752.06,685.959 1752.62,685.959 1753.18,685.959 1753.74,685.959 1754.3,685.959 1754.86,685.959 1755.42,685.959 1755.98,685.959 1756.54,685.959 1757.1,685.959 1757.66,685.959 1758.22,685.959 1758.78,685.959 1759.34,685.959 1759.89,685.959 1760.45,685.959 1761.01,685.959 1761.57,685.959 1762.13,685.959 1762.69,685.959 1763.25,685.959 1763.81,685.959 1764.37,685.959 1764.93,685.959 1765.49,685.959 1766.05,685.959 1766.61,685.959 1767.16,685.959 1767.72,685.959 1768.28,685.959 1768.84,685.959 1769.4,685.959 1769.96,685.959 1770.52,685.959 1771.08,685.959 1771.64,685.959 1772.2,685.959 1772.76,685.959 1773.32,685.959 1773.88,685.959 1774.43,685.959 1774.99,685.959 1775.55,685.959 1776.11,685.959 1776.67,685.959 1777.23,685.959 1777.79,685.959 1778.35,685.959 1778.91,685.959 1779.47,685.959 1780.03,685.959 1780.59,685.959 1781.15,685.959 1781.71,685.959 1782.26,685.959 1782.82,685.959 1783.38,685.959 1783.94,685.959 1784.5,685.959 1785.06,685.959 1785.62,685.959 1786.18,685.959 1786.74,685.959 1787.3,685.959 1787.86,685.959 1788.42,685.959 1788.98,685.959 1789.53,685.959 1790.09,685.959 1790.65,685.959 1791.21,685.959 1791.77,685.959 1792.33,685.959 1792.89,685.959 1793.45,685.959 1794.01,685.959 1794.57,685.959 1795.13,685.959 1795.69,685.959 1796.25,685.959 1796.8,685.959 1797.36,685.959 1797.92,685.959 1798.48,685.959 1799.04,685.959 1799.6,685.959 1800.16,685.959 1800.72,685.959 1801.28,685.959 1801.84,685.959 1802.4,685.959 1802.96,685.959 1803.52,685.959 1804.08,685.959 1804.63,685.959 1805.19,685.959 1805.75,685.959 1806.31,685.959 1806.87,685.959 1807.43,685.959 1807.99,685.959 1808.55,685.959 1809.11,685.959 1809.67,685.959 1810.23,685.959 1810.79,685.959 1811.35,685.959 1811.9,685.959 1812.46,685.959 1813.02,685.959 1813.58,685.959 1814.14,685.959 1814.7,685.959 1815.26,685.959 1815.82,685.959 1816.38,685.959 1816.94,685.959 1817.5,685.959 1818.06,685.959 1818.62,685.959 1819.18,685.959 1819.73,685.959 1820.29,685.959 1820.85,685.959 1821.41,685.959 1821.97,685.959 1822.53,685.959 1823.09,685.959 1823.65,685.959 1824.21,685.959 1824.77,685.959 1825.33,685.959 1825.89,685.959 1826.45,685.959 1827,685.959 1827.56,685.959 1828.12,685.959 1828.68,685.959 1829.24,685.959 1829.8,685.959 1830.36,685.959 1830.92,685.959 1831.48,685.959 1832.04,685.959 1832.6,685.959 1833.16,685.959 1833.72,685.959 1834.27,685.959 1834.83,685.959 1835.39,685.959 1835.95,685.959 1836.51,685.959 1837.07,685.959 1837.63,685.959 1838.19,685.959 \"/>\n<path clip-path=\"url(#clip263)\" d=\"M720.247 685.323 L720.806 685.323 L721.365 685.323 L721.924 685.323 L722.484 685.323 L723.043 685.323 L723.602 685.323 L724.161 685.323 L724.721 685.323 L725.28 685.323 L725.839 685.323 L726.398 685.323 L726.958 685.323 L727.517 685.323 L728.076 685.323 L728.635 685.323 L729.195 685.323 L729.754 685.323 L730.313 685.323 L730.872 685.323 L731.432 685.323 L731.991 685.323 L732.55 685.323 L733.109 685.323 L733.669 685.323 L734.228 685.323 L734.787 685.323 L735.346 685.323 L735.906 685.323 L736.465 685.323 L737.024 685.323 L737.583 685.323 L738.143 685.323 L738.702 685.323 L739.261 685.323 L739.82 685.323 L740.38 685.323 L740.939 685.323 L741.498 685.323 L742.057 685.323 L742.617 685.323 L743.176 685.323 L743.735 685.323 L744.294 685.323 L744.854 685.323 L745.413 685.323 L745.972 685.323 L746.531 685.323 L747.091 685.323 L747.65 685.323 L748.209 685.323 L748.768 685.323 L749.328 685.323 L749.887 685.323 L750.446 685.323 L751.005 685.323 L751.565 685.323 L752.124 685.323 L752.683 685.323 L753.242 685.323 L753.802 685.323 L754.361 685.323 L754.92 685.323 L755.479 685.323 L756.039 685.323 L756.598 685.323 L757.157 685.323 L757.716 685.323 L758.276 685.323 L758.835 685.323 L759.394 685.323 L759.953 685.323 L760.513 685.323 L761.072 685.323 L761.631 685.323 L762.19 685.323 L762.75 685.323 L763.309 685.323 L763.868 685.323 L764.427 685.323 L764.987 685.323 L765.546 685.323 L766.105 685.323 L766.664 685.323 L767.224 685.323 L767.783 685.323 L768.342 685.323 L768.901 685.323 L769.461 685.323 L770.02 685.323 L770.579 685.323 L771.138 685.323 L771.698 685.323 L772.257 685.323 L772.816 685.323 L773.375 685.323 L773.935 685.323 L774.494 685.323 L775.053 685.323 L775.612 685.323 L776.172 685.323 L776.731 685.323 L777.29 685.323 L777.849 685.323 L778.409 685.323 L778.968 685.323 L779.527 685.323 L780.086 685.323 L780.646 685.323 L781.205 685.323 L781.764 685.323 L782.323 685.323 L782.883 685.323 L783.442 685.323 L784.001 685.323 L784.56 685.323 L785.12 685.323 L785.679 685.323 L786.238 685.323 L786.797 685.323 L787.357 685.323 L787.916 685.323 L788.475 685.323 L789.034 685.323 L789.594 685.323 L790.153 685.323 L790.712 685.323 L791.271 685.323 L791.831 685.323 L792.39 685.323 L792.949 685.323 L793.508 685.323 L794.068 685.323 L794.627 685.323 L795.186 685.323 L795.745 685.323 L796.305 685.323 L796.864 685.323 L797.423 685.323 L797.982 685.323 L798.542 685.323 L799.101 685.323 L799.66 685.323 L800.219 685.323 L800.779 685.323 L801.338 685.323 L801.897 685.323 L802.456 685.323 L803.016 685.323 L803.575 685.323 L804.134 685.323 L804.693 685.323 L805.253 685.323 L805.812 685.323 L806.371 685.323 L806.931 685.323 L807.49 685.323 L808.049 685.323 L808.608 685.323 L809.168 685.323 L809.727 685.323 L810.286 685.323 L810.845 685.323 L811.405 685.323 L811.964 685.323 L812.523 685.323 L813.082 685.323 L813.642 685.323 L814.201 685.323 L814.76 685.323 L815.319 685.323 L815.879 685.323 L816.438 685.323 L816.997 685.323 L817.556 685.323 L818.116 685.323 L818.675 685.323 L819.234 685.323 L819.793 685.323 L820.353 685.323 L820.912 685.323 L821.471 685.323 L822.03 685.323 L822.59 685.323 L823.149 685.323 L823.708 685.323 L824.267 685.323 L824.827 685.323 L825.386 685.323 L825.945 685.323 L826.504 685.323 L827.064 685.323 L827.623 685.323 L828.182 685.323 L828.741 685.323 L829.301 685.323 L829.86 685.323 L830.419 685.323 L830.978 685.323 L831.538 685.323 L832.097 685.323 L832.656 685.323 L833.215 685.323 L833.775 685.323 L834.334 685.323 L834.893 685.323 L835.452 685.323 L836.012 685.323 L836.571 685.323 L837.13 685.323 L837.689 685.323 L838.249 685.323 L838.808 685.323 L839.367 685.323 L839.926 685.323 L840.486 685.323 L841.045 685.323 L841.604 685.323 L842.163 685.323 L842.723 685.323 L843.282 685.323 L843.841 685.323 L844.4 685.323 L844.96 685.323 L845.519 685.323 L846.078 685.323 L846.637 685.323 L847.197 685.323 L847.756 685.323 L848.315 685.323 L848.874 685.323 L849.434 685.323 L849.993 685.323 L850.552 685.323 L851.111 685.323 L851.671 685.323 L852.23 685.323 L852.789 685.323 L853.348 685.323 L853.908 685.323 L854.467 685.323 L855.026 685.323 L855.585 685.323 L856.145 685.323 L856.704 685.323 L857.263 685.323 L857.822 685.323 L858.382 685.323 L858.941 685.323 L859.5 685.323 L860.059 685.323 L860.619 685.323 L861.178 685.323 L861.737 685.323 L862.296 685.323 L862.856 685.323 L863.415 685.323 L863.974 685.323 L864.533 685.323 L865.093 685.323 L865.652 685.323 L866.211 685.323 L866.77 685.323 L867.33 685.323 L867.889 685.323 L868.448 685.323 L869.007 685.323 L869.567 685.323 L870.126 685.323 L870.685 685.323 L871.244 685.323 L871.804 685.323 L872.363 685.323 L872.922 685.323 L873.481 685.323 L874.041 685.323 L874.6 685.323 L875.159 685.323 L875.718 685.323 L876.278 685.323 L876.837 685.323 L877.396 685.323 L877.955 685.323 L878.515 685.323 L879.074 685.323 L879.633 685.323 L880.192 685.323 L880.752 685.323 L881.311 685.323 L881.87 685.323 L882.429 685.323 L882.989 685.323 L883.548 685.323 L884.107 685.323 L884.666 685.323 L885.226 685.323 L885.785 685.323 L886.344 685.323 L886.903 685.323 L887.463 685.323 L888.022 685.323 L888.581 685.323 L889.14 685.323 L889.7 685.323 L890.259 685.323 L890.818 685.323 L891.377 685.323 L891.937 685.323 L892.496 685.323 L893.055 685.323 L893.614 685.323 L894.174 685.323 L894.733 685.323 L895.292 685.323 L895.851 685.323 L896.411 685.323 L896.97 685.323 L897.529 685.323 L898.088 685.323 L898.648 685.323 L899.207 685.323 L899.766 685.323 L900.325 685.323 L900.885 685.323 L901.444 685.323 L902.003 685.323 L902.562 685.323 L903.122 685.323 L903.681 685.323 L904.24 685.323 L904.799 685.323 L905.359 685.323 L905.918 685.323 L906.477 685.323 L907.036 685.323 L907.596 685.323 L908.155 685.323 L908.714 685.323 L909.273 685.323 L909.833 685.323 L910.392 685.323 L910.951 685.323 L911.51 685.323 L912.07 685.323 L912.629 685.323 L913.188 685.323 L913.747 685.323 L914.307 685.323 L914.866 685.323 L915.425 685.323 L915.984 685.323 L916.544 685.323 L917.103 685.323 L917.662 685.323 L918.221 685.323 L918.781 685.323 L919.34 685.323 L919.899 685.323 L920.458 685.323 L921.018 685.323 L921.577 685.323 L922.136 685.323 L922.695 685.323 L923.255 685.323 L923.814 685.323 L924.373 685.323 L924.932 685.323 L925.492 685.323 L926.051 685.323 L926.61 685.323 L927.169 685.323 L927.729 685.323 L928.288 685.323 L928.847 685.323 L929.406 685.323 L929.966 685.323 L930.525 685.323 L931.084 685.323 L931.644 685.323 L932.203 685.323 L932.762 685.323 L933.321 685.323 L933.881 685.323 L934.44 685.323 L934.999 685.323 L935.558 685.323 L936.118 685.323 L936.677 685.323 L937.236 685.323 L937.795 685.323 L938.355 685.323 L938.914 685.323 L939.473 685.323 L940.032 685.323 L940.592 685.323 L941.151 685.323 L941.71 685.323 L942.269 685.323 L942.829 685.323 L943.388 685.323 L943.947 685.323 L944.506 685.323 L945.066 685.323 L945.625 685.323 L946.184 685.323 L946.743 685.323 L947.303 685.323 L947.862 685.323 L948.421 685.323 L948.98 685.323 L949.54 685.323 L950.099 685.323 L950.658 685.323 L951.217 685.323 L951.777 685.323 L952.336 685.323 L952.895 685.323 L953.454 685.323 L954.014 685.323 L954.573 685.323 L955.132 685.323 L955.691 685.323 L956.251 685.323 L956.81 685.323 L957.369 685.323 L957.928 685.323 L958.488 685.323 L959.047 685.323 L959.606 685.323 L960.165 685.323 L960.725 685.323 L961.284 685.323 L961.843 685.323 L962.402 685.323 L962.962 685.323 L963.521 685.323 L964.08 685.323 L964.639 685.323 L965.199 685.323 L965.758 685.323 L966.317 685.323 L966.876 685.323 L967.436 685.323 L967.995 685.323 L968.554 685.323 L969.113 685.323 L969.673 685.323 L970.232 685.323 L970.791 685.323 L971.35 685.323 L971.91 685.323 L972.469 685.323 L973.028 685.323 L973.587 685.323 L974.147 685.323 L974.706 685.323 L975.265 685.323 L975.824 685.323 L976.384 685.323 L976.943 685.323 L977.502 685.323 L978.061 685.323 L978.621 685.323 L979.18 685.323 L979.739 685.323 L980.298 685.323 L980.858 685.323 L981.417 685.323 L981.976 685.323 L982.535 685.323 L983.095 685.323 L983.654 685.323 L984.213 685.323 L984.772 685.323 L985.332 685.323 L985.891 685.323 L986.45 685.323 L987.009 685.323 L987.569 685.323 L988.128 685.323 L988.687 685.323 L989.246 685.323 L989.806 685.323 L990.365 685.323 L990.924 685.323 L991.483 685.323 L992.043 685.323 L992.602 685.323 L993.161 685.323 L993.72 685.323 L994.28 685.323 L994.839 685.323 L995.398 685.323 L995.957 685.323 L996.517 685.323 L997.076 685.323 L997.635 685.323 L998.194 685.323 L998.754 685.323 L999.313 685.323 L999.872 685.323 L1000.43 685.323 L1000.99 685.323 L1001.55 685.323 L1002.11 685.323 L1002.67 685.323 L1003.23 685.323 L1003.79 685.323 L1004.35 685.323 L1004.91 685.323 L1005.46 685.323 L1006.02 685.323 L1006.58 685.323 L1007.14 685.323 L1007.7 685.323 L1008.26 685.323 L1008.82 685.323 L1009.38 685.323 L1009.94 685.323 L1010.5 685.323 L1011.06 685.323 L1011.62 685.323 L1012.18 685.323 L1012.73 685.323 L1013.29 685.323 L1013.85 685.323 L1014.41 685.323 L1014.97 685.323 L1015.53 685.323 L1016.09 685.323 L1016.65 685.323 L1017.21 685.323 L1017.77 685.323 L1018.33 685.323 L1018.89 685.323 L1019.45 685.323 L1020.01 685.323 L1020.56 685.323 L1021.12 685.323 L1021.68 685.323 L1022.24 685.323 L1022.8 685.323 L1023.36 685.323 L1023.92 685.323 L1024.48 685.323 L1025.04 685.323 L1025.6 685.323 L1026.16 685.323 L1026.72 685.323 L1027.28 685.323 L1027.83 685.323 L1028.39 685.323 L1028.95 685.323 L1029.51 685.323 L1030.07 685.323 L1030.63 685.323 L1031.19 685.323 L1031.75 685.323 L1032.31 685.323 L1032.87 685.323 L1033.43 685.323 L1033.99 685.323 L1034.55 685.323 L1035.1 685.323 L1035.66 685.323 L1036.22 685.323 L1036.78 685.323 L1037.34 685.323 L1037.9 685.323 L1038.46 685.323 L1039.02 685.323 L1039.58 685.323 L1040.14 685.323 L1040.7 685.323 L1041.26 685.323 L1041.82 685.323 L1042.38 685.323 L1042.93 685.323 L1043.49 685.323 L1044.05 685.323 L1044.61 685.323 L1045.17 685.323 L1045.73 685.323 L1046.29 685.323 L1046.85 685.323 L1047.41 685.323 L1047.97 685.323 L1048.53 685.323 L1049.09 685.323 L1049.65 685.323 L1050.2 685.323 L1050.76 685.323 L1051.32 685.323 L1051.88 685.323 L1052.44 685.323 L1053 685.323 L1053.56 685.323 L1054.12 685.323 L1054.68 685.323 L1055.24 685.323 L1055.8 685.323 L1056.36 685.323 L1056.92 685.323 L1057.48 685.323 L1058.03 685.323 L1058.59 685.323 L1059.15 685.323 L1059.71 685.323 L1060.27 685.323 L1060.83 685.323 L1061.39 685.323 L1061.95 685.323 L1062.51 685.323 L1063.07 685.323 L1063.63 685.323 L1064.19 685.323 L1064.75 685.323 L1065.3 685.323 L1065.86 685.323 L1066.42 685.323 L1066.98 685.323 L1067.54 685.323 L1068.1 685.323 L1068.66 685.323 L1069.22 685.323 L1069.78 685.323 L1070.34 685.323 L1070.9 685.323 L1071.46 685.323 L1072.02 685.323 L1072.57 685.323 L1073.13 685.323 L1073.69 685.323 L1074.25 685.323 L1074.81 685.323 L1075.37 685.323 L1075.93 685.323 L1076.49 685.323 L1077.05 685.323 L1077.61 685.323 L1078.17 685.323 L1078.73 685.323 L1079.29 685.323 L1079.85 685.323 L1080.4 685.323 L1080.96 685.323 L1081.52 685.323 L1082.08 685.323 L1082.64 685.323 L1083.2 685.323 L1083.76 685.323 L1084.32 685.323 L1084.88 685.323 L1085.44 685.323 L1086 685.323 L1086.56 685.323 L1087.12 685.323 L1087.67 685.323 L1088.23 685.323 L1088.79 685.323 L1089.35 685.323 L1089.91 685.323 L1090.47 685.323 L1091.03 685.323 L1091.59 685.323 L1092.15 685.323 L1092.71 685.323 L1093.27 685.323 L1093.83 685.323 L1094.39 685.323 L1094.94 685.323 L1095.5 685.323 L1096.06 685.323 L1096.62 685.323 L1097.18 685.323 L1097.74 685.323 L1098.3 685.323 L1098.86 685.323 L1099.42 685.323 L1099.98 685.323 L1100.54 685.323 L1101.1 685.323 L1101.66 685.323 L1102.22 685.323 L1102.77 685.323 L1103.33 685.323 L1103.89 685.323 L1104.45 685.323 L1105.01 685.323 L1105.57 685.323 L1106.13 685.323 L1106.69 685.323 L1107.25 685.323 L1107.81 685.323 L1108.37 685.323 L1108.93 685.323 L1109.49 685.323 L1110.04 685.323 L1110.6 685.323 L1111.16 685.323 L1111.72 685.323 L1112.28 685.323 L1112.84 685.323 L1113.4 685.323 L1113.96 685.323 L1114.52 685.323 L1115.08 685.323 L1115.64 685.323 L1116.2 685.323 L1116.76 685.323 L1117.31 685.323 L1117.87 685.323 L1118.43 685.323 L1118.99 685.323 L1119.55 685.323 L1120.11 685.323 L1120.67 685.323 L1121.23 685.323 L1121.79 685.323 L1122.35 685.323 L1122.91 685.323 L1123.47 685.323 L1124.03 685.323 L1124.59 685.323 L1125.14 685.323 L1125.7 685.323 L1126.26 685.323 L1126.82 685.323 L1127.38 685.323 L1127.94 685.323 L1128.5 685.323 L1129.06 685.323 L1129.62 685.323 L1130.18 685.323 L1130.74 685.323 L1131.3 685.323 L1131.86 685.323 L1132.41 685.323 L1132.97 685.323 L1133.53 685.323 L1134.09 685.323 L1134.65 685.323 L1135.21 685.323 L1135.77 685.323 L1136.33 685.323 L1136.89 685.323 L1137.45 685.323 L1138.01 685.323 L1138.57 685.323 L1139.13 685.323 L1139.68 685.323 L1140.24 685.323 L1140.8 685.323 L1141.36 685.323 L1141.92 685.323 L1142.48 685.323 L1143.04 685.323 L1143.6 685.323 L1144.16 685.323 L1144.72 685.323 L1145.28 685.323 L1145.84 685.323 L1146.4 685.323 L1146.96 685.323 L1147.51 685.323 L1148.07 685.323 L1148.63 685.323 L1149.19 685.323 L1149.75 685.323 L1150.31 685.323 L1150.87 685.323 L1151.43 685.323 L1151.99 685.323 L1152.55 685.323 L1153.11 685.323 L1153.67 685.323 L1154.23 685.323 L1154.78 685.323 L1155.34 685.323 L1155.9 685.323 L1156.46 685.323 L1157.02 685.323 L1157.58 685.323 L1158.14 685.323 L1158.7 685.323 L1159.26 685.323 L1159.82 685.323 L1160.38 685.323 L1160.94 685.323 L1161.5 685.323 L1162.05 685.323 L1162.61 685.323 L1163.17 685.323 L1163.73 685.323 L1164.29 685.323 L1164.85 685.323 L1165.41 685.323 L1165.97 685.323 L1166.53 685.323 L1167.09 685.323 L1167.65 685.323 L1168.21 685.323 L1168.77 685.323 L1169.33 685.323 L1169.88 685.323 L1170.44 685.323 L1171 685.323 L1171.56 685.323 L1172.12 685.323 L1172.68 685.323 L1173.24 685.323 L1173.8 685.323 L1174.36 685.323 L1174.92 685.323 L1175.48 685.323 L1176.04 685.323 L1176.6 685.323 L1177.15 685.323 L1177.71 685.323 L1178.27 685.323 L1178.83 685.323 L1179.39 685.323 L1179.95 685.323 L1180.51 685.323 L1181.07 685.323 L1181.63 685.323 L1182.19 685.323 L1182.75 685.323 L1183.31 685.323 L1183.87 685.323 L1184.43 685.323 L1184.98 685.323 L1185.54 685.323 L1186.1 685.323 L1186.66 685.323 L1187.22 685.323 L1187.78 685.323 L1188.34 685.323 L1188.9 685.323 L1189.46 685.323 L1190.02 685.323 L1190.58 685.323 L1191.14 685.323 L1191.7 685.323 L1192.25 685.323 L1192.81 685.323 L1193.37 685.323 L1193.93 685.323 L1194.49 685.323 L1195.05 685.323 L1195.61 685.323 L1196.17 685.323 L1196.73 685.323 L1197.29 685.323 L1197.85 685.323 L1198.41 685.323 L1198.97 685.323 L1199.52 685.323 L1200.08 685.323 L1200.64 685.323 L1201.2 685.323 L1201.76 685.323 L1202.32 685.323 L1202.88 685.323 L1203.44 685.323 L1204 685.323 L1204.56 685.323 L1205.12 685.323 L1205.68 685.323 L1206.24 685.323 L1206.8 685.323 L1207.35 685.323 L1207.91 685.323 L1208.47 685.323 L1209.03 685.323 L1209.59 685.323 L1210.15 685.323 L1210.71 685.323 L1211.27 685.323 L1211.83 685.323 L1212.39 685.323 L1212.95 685.323 L1213.51 685.323 L1214.07 685.323 L1214.62 685.323 L1215.18 685.323 L1215.74 685.323 L1216.3 685.323 L1216.86 685.323 L1217.42 685.323 L1217.98 685.323 L1218.54 685.323 L1219.1 685.323 L1219.66 685.323 L1220.22 685.323 L1220.78 685.323 L1221.34 685.323 L1221.89 685.323 L1222.45 685.323 L1223.01 685.323 L1223.57 685.323 L1224.13 685.323 L1224.69 685.323 L1225.25 685.323 L1225.81 685.323 L1226.37 685.323 L1226.93 685.323 L1227.49 685.323 L1228.05 685.323 L1228.61 685.323 L1229.17 685.323 L1229.72 685.323 L1230.28 685.323 L1230.84 685.323 L1231.4 685.323 L1231.96 685.323 L1232.52 685.323 L1233.08 685.323 L1233.64 685.323 L1234.2 685.323 L1234.76 685.323 L1235.32 685.323 L1235.88 685.323 L1236.44 685.323 L1236.99 685.323 L1237.55 685.323 L1238.11 685.323 L1238.67 685.323 L1239.23 685.323 L1239.79 685.323 L1240.35 685.323 L1240.91 685.323 L1241.47 685.323 L1242.03 685.323 L1242.59 685.323 L1243.15 685.323 L1243.71 685.323 L1244.26 685.323 L1244.82 685.323 L1245.38 685.323 L1245.94 685.323 L1246.5 685.323 L1247.06 685.323 L1247.62 685.323 L1248.18 685.323 L1248.74 685.323 L1249.3 685.323 L1249.86 685.323 L1250.42 685.323 L1250.98 685.323 L1251.54 685.323 L1252.09 685.323 L1252.65 685.323 L1253.21 685.323 L1253.77 685.323 L1254.33 685.323 L1254.89 685.323 L1255.45 685.323 L1256.01 685.323 L1256.57 685.323 L1257.13 685.323 L1257.69 685.323 L1258.25 685.323 L1258.81 685.323 L1259.36 685.323 L1259.92 685.323 L1260.48 685.323 L1261.04 685.323 L1261.6 685.323 L1262.16 685.323 L1262.72 685.323 L1263.28 685.323 L1263.84 685.323 L1264.4 685.323 L1264.96 685.323 L1265.52 685.323 L1266.08 685.323 L1266.63 685.323 L1267.19 685.323 L1267.75 685.323 L1268.31 685.323 L1268.87 685.323 L1269.43 685.323 L1269.99 685.323 L1270.55 685.323 L1271.11 685.323 L1271.67 685.323 L1272.23 685.323 L1272.79 685.323 L1273.35 685.323 L1273.91 685.323 L1274.46 685.323 L1275.02 685.323 L1275.58 685.323 L1276.14 685.323 L1276.7 685.323 L1277.26 685.323 L1277.82 685.323 L1278.38 685.323 L1278.94 685.323 L1279.5 685.323 L1280.06 685.323 L1280.62 685.323 L1281.18 685.323 L1281.73 685.323 L1282.29 685.323 L1282.85 685.323 L1283.41 685.323 L1283.97 685.323 L1284.53 685.323 L1285.09 685.323 L1285.65 685.323 L1286.21 685.323 L1286.77 685.323 L1287.33 685.323 L1287.89 685.323 L1288.45 685.323 L1289 685.323 L1289.56 685.323 L1290.12 685.323 L1290.68 685.323 L1291.24 685.323 L1291.8 685.323 L1292.36 685.323 L1292.92 685.323 L1293.48 685.323 L1294.04 685.323 L1294.6 685.323 L1295.16 685.323 L1295.72 685.323 L1296.28 685.323 L1296.83 685.323 L1297.39 685.323 L1297.95 685.323 L1298.51 685.323 L1299.07 685.323 L1299.63 685.323 L1300.19 685.323 L1300.75 685.323 L1301.31 685.323 L1301.87 685.323 L1302.43 685.323 L1302.99 685.323 L1303.55 685.323 L1304.1 685.323 L1304.66 685.323 L1305.22 685.323 L1305.78 685.323 L1306.34 685.323 L1306.9 685.323 L1307.46 685.323 L1308.02 685.323 L1308.58 685.323 L1309.14 685.323 L1309.7 685.323 L1310.26 685.323 L1310.82 685.323 L1311.38 685.323 L1311.93 685.323 L1312.49 685.323 L1313.05 685.323 L1313.61 685.323 L1314.17 685.323 L1314.73 685.323 L1315.29 685.323 L1315.85 685.323 L1316.41 685.323 L1316.97 685.323 L1317.53 685.323 L1318.09 685.323 L1318.65 685.323 L1319.2 685.323 L1319.76 685.323 L1320.32 685.323 L1320.88 685.323 L1321.44 685.323 L1322 685.323 L1322.56 685.323 L1323.12 685.323 L1323.68 685.323 L1324.24 685.323 L1324.8 685.323 L1325.36 685.323 L1325.92 685.323 L1326.47 685.323 L1327.03 685.323 L1327.59 685.323 L1328.15 685.323 L1328.71 685.323 L1329.27 685.323 L1329.83 685.323 L1330.39 685.323 L1330.95 685.323 L1331.51 685.323 L1332.07 685.323 L1332.63 685.323 L1333.19 685.323 L1333.75 685.323 L1334.3 685.323 L1334.86 685.323 L1335.42 685.323 L1335.98 685.323 L1336.54 685.323 L1337.1 685.323 L1337.66 685.323 L1338.22 685.323 L1338.78 685.323 L1339.34 685.323 L1339.9 685.323 L1340.46 685.323 L1341.02 685.323 L1341.57 685.323 L1342.13 685.323 L1342.69 685.323 L1343.25 685.323 L1343.81 685.323 L1344.37 685.323 L1344.93 685.323 L1345.49 685.323 L1346.05 685.323 L1346.61 685.323 L1347.17 685.323 L1347.73 685.323 L1348.29 685.323 L1348.84 685.323 L1349.4 685.323 L1349.96 685.323 L1350.52 685.323 L1351.08 685.323 L1351.64 685.323 L1352.2 685.323 L1352.76 685.323 L1353.32 685.323 L1353.88 685.323 L1354.44 685.323 L1355 685.323 L1355.56 685.323 L1356.12 685.323 L1356.67 685.323 L1357.23 685.323 L1357.79 685.323 L1358.35 685.323 L1358.91 685.323 L1359.47 685.323 L1360.03 685.323 L1360.59 685.323 L1361.15 685.323 L1361.71 685.323 L1362.27 685.323 L1362.83 685.323 L1363.39 685.323 L1363.94 685.323 L1364.5 685.323 L1365.06 685.323 L1365.62 685.323 L1366.18 685.323 L1366.74 685.323 L1367.3 685.323 L1367.86 685.323 L1368.42 685.323 L1368.98 685.323 L1369.54 685.323 L1370.1 685.323 L1370.66 685.323 L1371.21 685.323 L1371.77 685.323 L1372.33 685.323 L1372.89 685.323 L1373.45 685.323 L1374.01 685.323 L1374.57 685.323 L1375.13 685.323 L1375.69 685.323 L1376.25 685.323 L1376.81 685.323 L1377.37 685.323 L1377.93 685.323 L1378.49 685.323 L1379.04 685.323 L1379.6 685.323 L1380.16 685.323 L1380.72 685.323 L1381.28 685.323 L1381.84 685.323 L1382.4 685.323 L1382.96 685.323 L1383.52 685.323 L1384.08 685.323 L1384.64 685.323 L1385.2 685.323 L1385.76 685.323 L1386.31 685.323 L1386.87 685.323 L1387.43 685.323 L1387.99 685.323 L1388.55 685.323 L1389.11 685.323 L1389.67 685.323 L1390.23 685.323 L1390.79 685.323 L1391.35 685.323 L1391.91 685.323 L1392.47 685.323 L1393.03 685.323 L1393.58 685.323 L1394.14 685.323 L1394.7 685.323 L1395.26 685.323 L1395.82 685.323 L1396.38 685.323 L1396.94 685.323 L1397.5 685.323 L1398.06 685.323 L1398.62 685.323 L1399.18 685.323 L1399.74 685.323 L1400.3 685.323 L1400.86 685.323 L1401.41 685.323 L1401.97 685.323 L1402.53 685.323 L1403.09 685.323 L1403.65 685.323 L1404.21 685.323 L1404.77 685.323 L1405.33 685.323 L1405.89 685.323 L1406.45 685.323 L1407.01 685.323 L1407.57 685.323 L1408.13 685.323 L1408.68 685.323 L1409.24 685.323 L1409.8 685.323 L1410.36 685.323 L1410.92 685.323 L1411.48 685.323 L1412.04 685.323 L1412.6 685.323 L1413.16 685.323 L1413.72 685.323 L1414.28 685.323 L1414.84 685.323 L1415.4 685.323 L1415.95 685.323 L1416.51 685.323 L1417.07 685.323 L1417.63 685.323 L1418.19 685.323 L1418.75 685.323 L1419.31 685.323 L1419.87 685.323 L1420.43 685.323 L1420.99 685.323 L1421.55 685.323 L1422.11 685.323 L1422.67 685.323 L1423.23 685.323 L1423.78 685.323 L1424.34 685.323 L1424.9 685.323 L1425.46 685.323 L1426.02 685.323 L1426.58 685.323 L1427.14 685.323 L1427.7 685.323 L1428.26 685.323 L1428.82 685.323 L1429.38 685.323 L1429.94 685.323 L1430.5 685.323 L1431.05 685.323 L1431.61 685.323 L1432.17 685.323 L1432.73 685.323 L1433.29 685.323 L1433.85 685.323 L1434.41 685.323 L1434.97 685.323 L1435.53 685.323 L1436.09 685.323 L1436.65 685.323 L1437.21 685.323 L1437.77 685.323 L1438.33 685.323 L1438.88 685.323 L1439.44 685.323 L1440 685.323 L1440.56 685.323 L1441.12 685.323 L1441.68 685.323 L1442.24 685.323 L1442.8 685.323 L1443.36 685.323 L1443.92 685.323 L1444.48 685.323 L1445.04 685.323 L1445.6 685.323 L1446.15 685.323 L1446.71 685.323 L1447.27 685.323 L1447.83 685.323 L1448.39 685.323 L1448.95 685.323 L1449.51 685.323 L1450.07 685.323 L1450.63 685.323 L1451.19 685.323 L1451.75 685.323 L1452.31 685.323 L1452.87 685.323 L1453.42 685.323 L1453.98 685.323 L1454.54 685.323 L1455.1 685.323 L1455.66 685.323 L1456.22 685.323 L1456.78 685.323 L1457.34 685.323 L1457.9 685.323 L1458.46 685.323 L1459.02 685.323 L1459.58 685.323 L1460.14 685.323 L1460.7 685.323 L1461.25 685.323 L1461.81 685.323 L1462.37 685.323 L1462.93 685.323 L1463.49 685.323 L1464.05 685.323 L1464.61 685.323 L1465.17 685.323 L1465.73 685.323 L1466.29 685.323 L1466.85 685.323 L1467.41 685.323 L1467.97 685.323 L1468.52 685.323 L1469.08 685.323 L1469.64 685.323 L1470.2 685.323 L1470.76 685.323 L1471.32 685.323 L1471.88 685.323 L1472.44 685.323 L1473 685.323 L1473.56 685.323 L1474.12 685.323 L1474.68 685.323 L1475.24 685.323 L1475.79 685.323 L1476.35 685.323 L1476.91 685.323 L1477.47 685.323 L1478.03 685.323 L1478.59 685.323 L1479.15 685.323 L1479.71 685.323 L1480.27 685.323 L1480.83 685.323 L1481.39 685.323 L1481.95 685.323 L1482.51 685.323 L1483.07 685.323 L1483.62 685.323 L1484.18 685.323 L1484.74 685.323 L1485.3 685.323 L1485.86 685.323 L1486.42 685.323 L1486.98 685.323 L1487.54 685.323 L1488.1 685.323 L1488.66 685.323 L1489.22 685.323 L1489.78 685.323 L1490.34 685.323 L1490.89 685.323 L1491.45 685.323 L1492.01 685.323 L1492.57 685.323 L1493.13 685.323 L1493.69 685.323 L1494.25 685.323 L1494.81 685.323 L1495.37 685.323 L1495.93 685.323 L1496.49 685.323 L1497.05 685.323 L1497.61 685.323 L1498.16 685.323 L1498.72 685.323 L1499.28 685.323 L1499.84 685.323 L1500.4 685.323 L1500.96 685.323 L1501.52 685.323 L1502.08 685.323 L1502.64 685.323 L1503.2 685.323 L1503.76 685.323 L1504.32 685.323 L1504.88 685.323 L1505.44 685.323 L1505.99 685.323 L1506.55 685.323 L1507.11 685.323 L1507.67 685.323 L1508.23 685.323 L1508.79 685.323 L1509.35 685.323 L1509.91 685.323 L1510.47 685.323 L1511.03 685.323 L1511.59 685.323 L1512.15 685.323 L1512.71 685.323 L1513.26 685.323 L1513.82 685.323 L1514.38 685.323 L1514.94 685.323 L1515.5 685.323 L1516.06 685.323 L1516.62 685.323 L1517.18 685.323 L1517.74 685.323 L1518.3 685.323 L1518.86 685.323 L1519.42 685.323 L1519.98 685.323 L1520.53 685.323 L1521.09 685.323 L1521.65 685.323 L1522.21 685.323 L1522.77 685.323 L1523.33 685.323 L1523.89 685.323 L1524.45 685.323 L1525.01 685.323 L1525.57 685.323 L1526.13 685.323 L1526.69 685.323 L1527.25 685.323 L1527.81 685.323 L1528.36 685.323 L1528.92 685.323 L1529.48 685.323 L1530.04 685.323 L1530.6 685.323 L1531.16 685.323 L1531.72 685.323 L1532.28 685.323 L1532.84 685.323 L1533.4 685.323 L1533.96 685.323 L1534.52 685.323 L1535.08 685.323 L1535.63 685.323 L1536.19 685.323 L1536.75 685.323 L1537.31 685.323 L1537.87 685.323 L1538.43 685.323 L1538.99 685.323 L1539.55 685.323 L1540.11 685.323 L1540.67 685.323 L1541.23 685.323 L1541.79 685.323 L1542.35 685.323 L1542.9 685.323 L1543.46 685.323 L1544.02 685.323 L1544.58 685.323 L1545.14 685.323 L1545.7 685.323 L1546.26 685.323 L1546.82 685.323 L1547.38 685.323 L1547.94 685.323 L1548.5 685.323 L1549.06 685.323 L1549.62 685.323 L1550.18 685.323 L1550.73 685.323 L1551.29 685.323 L1551.85 685.323 L1552.41 685.323 L1552.97 685.323 L1553.53 685.323 L1554.09 685.323 L1554.65 685.323 L1555.21 685.323 L1555.77 685.323 L1556.33 685.323 L1556.89 685.323 L1557.45 685.323 L1558 685.323 L1558.56 685.323 L1559.12 685.323 L1559.68 685.323 L1560.24 685.323 L1560.8 685.323 L1561.36 685.323 L1561.92 685.323 L1562.48 685.323 L1563.04 685.323 L1563.6 685.323 L1564.16 685.323 L1564.72 685.323 L1565.28 685.323 L1565.83 685.323 L1566.39 685.323 L1566.95 685.323 L1567.51 685.323 L1568.07 685.323 L1568.63 685.323 L1569.19 685.323 L1569.75 685.323 L1570.31 685.323 L1570.87 685.323 L1571.43 685.323 L1571.99 685.323 L1572.55 685.323 L1573.1 685.323 L1573.66 685.323 L1574.22 685.323 L1574.78 685.323 L1575.34 685.323 L1575.9 685.323 L1576.46 685.323 L1577.02 685.323 L1577.58 685.323 L1578.14 685.323 L1578.7 685.323 L1579.26 685.323 L1579.82 685.323 L1580.37 685.323 L1580.93 685.323 L1581.49 685.323 L1582.05 685.323 L1582.61 685.323 L1583.17 685.323 L1583.73 685.323 L1584.29 685.323 L1584.85 685.323 L1585.41 685.323 L1585.97 685.323 L1586.53 685.323 L1587.09 685.323 L1587.65 685.323 L1588.2 685.323 L1588.76 685.323 L1589.32 685.323 L1589.88 685.323 L1590.44 685.323 L1591 685.323 L1591.56 685.323 L1592.12 685.323 L1592.68 685.323 L1593.24 685.323 L1593.8 685.323 L1594.36 685.323 L1594.92 685.323 L1595.47 685.323 L1596.03 685.323 L1596.59 685.323 L1597.15 685.323 L1597.71 685.323 L1598.27 685.323 L1598.83 685.323 L1599.39 685.323 L1599.95 685.323 L1600.51 685.323 L1601.07 685.323 L1601.63 685.323 L1602.19 685.323 L1602.74 685.323 L1603.3 685.323 L1603.86 685.323 L1604.42 685.323 L1604.98 685.323 L1605.54 685.323 L1606.1 685.323 L1606.66 685.323 L1607.22 685.323 L1607.78 685.323 L1608.34 685.323 L1608.9 685.323 L1609.46 685.323 L1610.02 685.323 L1610.57 685.323 L1611.13 685.323 L1611.69 685.323 L1612.25 685.323 L1612.81 685.323 L1613.37 685.323 L1613.93 685.323 L1614.49 685.323 L1615.05 685.323 L1615.61 685.323 L1616.17 685.323 L1616.73 685.323 L1617.29 685.323 L1617.84 685.323 L1618.4 685.323 L1618.96 685.323 L1619.52 685.323 L1620.08 685.323 L1620.64 685.323 L1621.2 685.323 L1621.76 685.323 L1622.32 685.323 L1622.88 685.323 L1623.44 685.323 L1624 685.323 L1624.56 685.323 L1625.11 685.323 L1625.67 685.323 L1626.23 685.323 L1626.79 685.323 L1627.35 685.323 L1627.91 685.323 L1628.47 685.323 L1629.03 685.323 L1629.59 685.323 L1630.15 685.323 L1630.71 685.323 L1631.27 685.323 L1631.83 685.323 L1632.39 685.323 L1632.94 685.323 L1633.5 685.323 L1634.06 685.323 L1634.62 685.323 L1635.18 685.323 L1635.74 685.323 L1636.3 685.323 L1636.86 685.323 L1637.42 685.323 L1637.98 685.323 L1638.54 685.323 L1639.1 685.323 L1639.66 685.323 L1640.21 685.323 L1640.77 685.323 L1641.33 685.323 L1641.89 685.323 L1642.45 685.323 L1643.01 685.323 L1643.57 685.323 L1644.13 685.323 L1644.69 685.323 L1645.25 685.323 L1645.81 685.323 L1646.37 685.323 L1646.93 685.323 L1647.48 685.323 L1648.04 685.323 L1648.6 685.323 L1649.16 685.323 L1649.72 685.323 L1650.28 685.323 L1650.84 685.323 L1651.4 685.323 L1651.96 685.323 L1652.52 685.323 L1653.08 685.323 L1653.64 685.323 L1654.2 685.323 L1654.76 685.323 L1655.31 685.323 L1655.87 685.323 L1656.43 685.323 L1656.99 685.323 L1657.55 685.323 L1658.11 685.323 L1658.67 685.323 L1659.23 685.323 L1659.79 685.323 L1660.35 685.323 L1660.91 685.323 L1661.47 685.323 L1662.03 685.323 L1662.58 685.323 L1663.14 685.323 L1663.7 685.323 L1664.26 685.323 L1664.82 685.323 L1665.38 685.323 L1665.94 685.323 L1666.5 685.323 L1667.06 685.323 L1667.62 685.323 L1668.18 685.323 L1668.74 685.323 L1669.3 685.323 L1669.85 685.323 L1670.41 685.323 L1670.97 685.323 L1671.53 685.323 L1672.09 685.323 L1672.65 685.323 L1673.21 685.323 L1673.77 685.323 L1674.33 685.323 L1674.89 685.323 L1675.45 685.323 L1676.01 685.323 L1676.57 685.323 L1677.13 685.323 L1677.68 685.323 L1678.24 685.323 L1678.8 685.323 L1679.36 685.323 L1679.92 685.323 L1680.48 685.323 L1681.04 685.323 L1681.6 685.323 L1682.16 685.323 L1682.72 685.323 L1683.28 685.323 L1683.84 685.323 L1684.4 685.323 L1684.95 685.323 L1685.51 685.323 L1686.07 685.323 L1686.63 685.323 L1687.19 685.323 L1687.75 685.323 L1688.31 685.323 L1688.87 685.323 L1689.43 685.323 L1689.99 685.323 L1690.55 685.323 L1691.11 685.323 L1691.67 685.323 L1692.23 685.323 L1692.78 685.323 L1693.34 685.323 L1693.9 685.323 L1694.46 685.323 L1695.02 685.323 L1695.58 685.323 L1696.14 685.323 L1696.7 685.323 L1697.26 685.323 L1697.82 685.323 L1698.38 685.323 L1698.94 685.323 L1699.5 685.323 L1700.05 685.323 L1700.61 685.323 L1701.17 685.323 L1701.73 685.323 L1702.29 685.323 L1702.85 685.323 L1703.41 685.323 L1703.97 685.323 L1704.53 685.323 L1705.09 685.323 L1705.65 685.323 L1706.21 685.323 L1706.77 685.323 L1707.32 685.323 L1707.88 685.323 L1708.44 685.323 L1709 685.323 L1709.56 685.323 L1710.12 685.323 L1710.68 685.323 L1711.24 685.323 L1711.8 685.323 L1712.36 685.323 L1712.92 685.323 L1713.48 685.323 L1714.04 685.323 L1714.6 685.323 L1715.15 685.323 L1715.71 685.323 L1716.27 685.323 L1716.83 685.323 L1717.39 685.323 L1717.95 685.323 L1718.51 685.323 L1719.07 685.323 L1719.63 685.323 L1720.19 685.323 L1720.75 685.323 L1721.31 685.323 L1721.87 685.323 L1722.42 685.323 L1722.98 685.323 L1723.54 685.323 L1724.1 685.323 L1724.66 685.323 L1725.22 685.323 L1725.78 685.323 L1726.34 685.323 L1726.9 685.323 L1727.46 685.323 L1728.02 685.323 L1728.58 685.323 L1729.14 685.323 L1729.69 685.323 L1730.25 685.323 L1730.81 685.323 L1731.37 685.323 L1731.93 685.323 L1732.49 685.323 L1733.05 685.323 L1733.61 685.323 L1734.17 685.323 L1734.73 685.323 L1735.29 685.323 L1735.85 685.323 L1736.41 685.323 L1736.97 685.323 L1737.52 685.323 L1738.08 685.323 L1738.64 685.323 L1739.2 685.323 L1739.76 685.323 L1740.32 685.323 L1740.88 685.323 L1741.44 685.323 L1742 685.323 L1742.56 685.323 L1743.12 685.323 L1743.68 685.323 L1744.24 685.323 L1744.79 685.323 L1745.35 685.323 L1745.91 685.323 L1746.47 685.323 L1747.03 685.323 L1747.59 685.323 L1748.15 685.323 L1748.71 685.323 L1749.27 685.323 L1749.83 685.323 L1750.39 685.323 L1750.95 685.323 L1751.51 685.323 L1752.06 685.323 L1752.62 685.323 L1753.18 685.323 L1753.74 685.323 L1754.3 685.323 L1754.86 685.323 L1755.42 685.323 L1755.98 685.323 L1756.54 685.323 L1757.1 685.323 L1757.66 685.323 L1758.22 685.323 L1758.78 685.323 L1759.34 685.323 L1759.89 685.323 L1760.45 685.323 L1761.01 685.323 L1761.57 685.323 L1762.13 685.323 L1762.69 685.323 L1763.25 685.323 L1763.81 685.323 L1764.37 685.323 L1764.93 685.323 L1765.49 685.323 L1766.05 685.323 L1766.61 685.323 L1767.16 685.323 L1767.72 685.323 L1768.28 685.323 L1768.84 685.323 L1769.4 685.323 L1769.96 685.323 L1770.52 685.323 L1771.08 685.323 L1771.64 685.323 L1772.2 685.323 L1772.76 685.323 L1773.32 685.323 L1773.88 685.323 L1774.43 685.323 L1774.99 685.323 L1775.55 685.323 L1776.11 685.323 L1776.67 685.323 L1777.23 685.323 L1777.79 685.323 L1778.35 685.323 L1778.91 685.323 L1779.47 685.323 L1780.03 685.323 L1780.59 685.323 L1781.15 685.323 L1781.71 685.323 L1782.26 685.323 L1782.82 685.323 L1783.38 685.323 L1783.94 685.323 L1784.5 685.323 L1785.06 685.323 L1785.62 685.323 L1786.18 685.323 L1786.74 685.323 L1787.3 685.323 L1787.86 685.323 L1788.42 685.323 L1788.98 685.323 L1789.53 685.323 L1790.09 685.323 L1790.65 685.323 L1791.21 685.323 L1791.77 685.323 L1792.33 685.323 L1792.89 685.323 L1793.45 685.323 L1794.01 685.323 L1794.57 685.323 L1795.13 685.323 L1795.69 685.323 L1796.25 685.323 L1796.8 685.323 L1797.36 685.323 L1797.92 685.323 L1798.48 685.323 L1799.04 685.323 L1799.6 685.323 L1800.16 685.323 L1800.72 685.323 L1801.28 685.323 L1801.84 685.323 L1802.4 685.323 L1802.96 685.323 L1803.52 685.323 L1804.08 685.323 L1804.63 685.323 L1805.19 685.323 L1805.75 685.323 L1806.31 685.323 L1806.87 685.323 L1807.43 685.323 L1807.99 685.323 L1808.55 685.323 L1809.11 685.323 L1809.67 685.323 L1810.23 685.323 L1810.79 685.323 L1811.35 685.323 L1811.9 685.323 L1812.46 685.323 L1813.02 685.323 L1813.58 685.323 L1814.14 685.323 L1814.7 685.323 L1815.26 685.323 L1815.82 685.323 L1816.38 685.323 L1816.94 685.323 L1817.5 685.323 L1818.06 685.323 L1818.62 685.323 L1819.18 685.323 L1819.73 685.323 L1820.29 685.323 L1820.85 685.323 L1821.41 685.323 L1821.97 685.323 L1822.53 685.323 L1823.09 685.323 L1823.65 685.323 L1824.21 685.323 L1824.77 685.323 L1825.33 685.323 L1825.89 685.323 L1826.45 685.323 L1827 685.323 L1827.56 685.323 L1828.12 685.323 L1828.68 685.323 L1829.24 685.323 L1829.8 685.323 L1830.36 685.323 L1830.92 685.323 L1831.48 685.323 L1832.04 685.323 L1832.6 685.323 L1833.16 685.323 L1833.72 685.323 L1834.27 685.323 L1834.83 685.323 L1835.39 685.323 L1835.95 685.323 L1836.51 685.323 L1837.07 685.323 L1837.63 685.323 L1838.19 685.323 L1838.19 682.884 L1837.63 682.884 L1837.07 682.884 L1836.51 682.884 L1835.95 682.884 L1835.39 682.884 L1834.83 682.884 L1834.27 682.884 L1833.72 682.884 L1833.16 682.884 L1832.6 682.884 L1832.04 682.884 L1831.48 682.884 L1830.92 682.884 L1830.36 682.884 L1829.8 682.884 L1829.24 682.884 L1828.68 682.884 L1828.12 682.884 L1827.56 682.884 L1827 682.884 L1826.45 682.884 L1825.89 682.884 L1825.33 682.884 L1824.77 682.884 L1824.21 682.884 L1823.65 682.884 L1823.09 682.884 L1822.53 682.884 L1821.97 682.884 L1821.41 682.884 L1820.85 682.884 L1820.29 682.884 L1819.73 682.884 L1819.18 682.884 L1818.62 682.884 L1818.06 682.884 L1817.5 682.884 L1816.94 682.884 L1816.38 682.884 L1815.82 682.884 L1815.26 682.884 L1814.7 682.884 L1814.14 682.884 L1813.58 682.884 L1813.02 682.884 L1812.46 682.884 L1811.9 682.884 L1811.35 682.884 L1810.79 682.884 L1810.23 682.884 L1809.67 682.884 L1809.11 682.884 L1808.55 682.884 L1807.99 682.884 L1807.43 682.884 L1806.87 682.884 L1806.31 682.884 L1805.75 682.884 L1805.19 682.884 L1804.63 682.884 L1804.08 682.884 L1803.52 682.884 L1802.96 682.884 L1802.4 682.884 L1801.84 682.884 L1801.28 682.884 L1800.72 682.884 L1800.16 682.884 L1799.6 682.884 L1799.04 682.884 L1798.48 682.884 L1797.92 682.884 L1797.36 682.884 L1796.8 682.884 L1796.25 682.884 L1795.69 682.884 L1795.13 682.884 L1794.57 682.884 L1794.01 682.884 L1793.45 682.884 L1792.89 682.884 L1792.33 682.884 L1791.77 682.884 L1791.21 682.884 L1790.65 682.884 L1790.09 682.884 L1789.53 682.884 L1788.98 682.884 L1788.42 682.884 L1787.86 682.884 L1787.3 682.884 L1786.74 682.884 L1786.18 682.884 L1785.62 682.884 L1785.06 682.884 L1784.5 682.884 L1783.94 682.884 L1783.38 682.884 L1782.82 682.884 L1782.26 682.884 L1781.71 682.884 L1781.15 682.884 L1780.59 682.884 L1780.03 682.884 L1779.47 682.884 L1778.91 682.884 L1778.35 682.884 L1777.79 682.884 L1777.23 682.884 L1776.67 682.884 L1776.11 682.884 L1775.55 682.884 L1774.99 682.884 L1774.43 682.884 L1773.88 682.884 L1773.32 682.884 L1772.76 682.884 L1772.2 682.884 L1771.64 682.884 L1771.08 682.884 L1770.52 682.884 L1769.96 682.884 L1769.4 682.884 L1768.84 682.884 L1768.28 682.884 L1767.72 682.884 L1767.16 682.884 L1766.61 682.884 L1766.05 682.884 L1765.49 682.884 L1764.93 682.884 L1764.37 682.884 L1763.81 682.884 L1763.25 682.884 L1762.69 682.884 L1762.13 682.884 L1761.57 682.884 L1761.01 682.884 L1760.45 682.884 L1759.89 682.884 L1759.34 682.884 L1758.78 682.884 L1758.22 682.884 L1757.66 682.884 L1757.1 682.884 L1756.54 682.884 L1755.98 682.884 L1755.42 682.884 L1754.86 682.884 L1754.3 682.884 L1753.74 682.884 L1753.18 682.884 L1752.62 682.884 L1752.06 682.884 L1751.51 682.884 L1750.95 682.884 L1750.39 682.884 L1749.83 682.884 L1749.27 682.884 L1748.71 682.884 L1748.15 682.884 L1747.59 682.884 L1747.03 682.884 L1746.47 682.884 L1745.91 682.884 L1745.35 682.884 L1744.79 682.884 L1744.24 682.884 L1743.68 682.884 L1743.12 682.884 L1742.56 682.884 L1742 682.884 L1741.44 682.884 L1740.88 682.884 L1740.32 682.884 L1739.76 682.884 L1739.2 682.884 L1738.64 682.884 L1738.08 682.884 L1737.52 682.884 L1736.97 682.884 L1736.41 682.884 L1735.85 682.884 L1735.29 682.884 L1734.73 682.884 L1734.17 682.884 L1733.61 682.884 L1733.05 682.884 L1732.49 682.884 L1731.93 682.884 L1731.37 682.884 L1730.81 682.884 L1730.25 682.884 L1729.69 682.884 L1729.14 682.884 L1728.58 682.884 L1728.02 682.884 L1727.46 682.884 L1726.9 682.884 L1726.34 682.884 L1725.78 682.884 L1725.22 682.884 L1724.66 682.884 L1724.1 682.884 L1723.54 682.884 L1722.98 682.884 L1722.42 682.884 L1721.87 682.884 L1721.31 682.884 L1720.75 682.884 L1720.19 682.884 L1719.63 682.884 L1719.07 682.884 L1718.51 682.884 L1717.95 682.884 L1717.39 682.884 L1716.83 682.884 L1716.27 682.884 L1715.71 682.884 L1715.15 682.884 L1714.6 682.884 L1714.04 682.884 L1713.48 682.884 L1712.92 682.884 L1712.36 682.884 L1711.8 682.884 L1711.24 682.884 L1710.68 682.884 L1710.12 682.884 L1709.56 682.884 L1709 682.884 L1708.44 682.884 L1707.88 682.884 L1707.32 682.884 L1706.77 682.884 L1706.21 682.884 L1705.65 682.884 L1705.09 682.884 L1704.53 682.884 L1703.97 682.884 L1703.41 682.884 L1702.85 682.884 L1702.29 682.884 L1701.73 682.884 L1701.17 682.884 L1700.61 682.884 L1700.05 682.884 L1699.5 682.884 L1698.94 682.884 L1698.38 682.884 L1697.82 682.884 L1697.26 682.884 L1696.7 682.884 L1696.14 682.884 L1695.58 682.884 L1695.02 682.884 L1694.46 682.884 L1693.9 682.884 L1693.34 682.884 L1692.78 682.884 L1692.23 682.884 L1691.67 682.884 L1691.11 682.884 L1690.55 682.884 L1689.99 682.884 L1689.43 682.884 L1688.87 682.884 L1688.31 682.884 L1687.75 682.884 L1687.19 682.884 L1686.63 682.884 L1686.07 682.884 L1685.51 682.884 L1684.95 682.884 L1684.4 682.884 L1683.84 682.884 L1683.28 682.884 L1682.72 682.884 L1682.16 682.884 L1681.6 682.884 L1681.04 682.884 L1680.48 682.884 L1679.92 682.884 L1679.36 682.884 L1678.8 682.884 L1678.24 682.884 L1677.68 682.884 L1677.13 682.884 L1676.57 682.884 L1676.01 682.884 L1675.45 682.884 L1674.89 682.884 L1674.33 682.884 L1673.77 682.884 L1673.21 682.884 L1672.65 682.884 L1672.09 682.884 L1671.53 682.884 L1670.97 682.884 L1670.41 682.884 L1669.85 682.884 L1669.3 682.884 L1668.74 682.884 L1668.18 682.884 L1667.62 682.884 L1667.06 682.884 L1666.5 682.884 L1665.94 682.884 L1665.38 682.884 L1664.82 682.884 L1664.26 682.884 L1663.7 682.884 L1663.14 682.884 L1662.58 682.884 L1662.03 682.884 L1661.47 682.884 L1660.91 682.884 L1660.35 682.884 L1659.79 682.884 L1659.23 682.884 L1658.67 682.884 L1658.11 682.884 L1657.55 682.884 L1656.99 682.884 L1656.43 682.884 L1655.87 682.884 L1655.31 682.884 L1654.76 682.884 L1654.2 682.884 L1653.64 682.884 L1653.08 682.884 L1652.52 682.884 L1651.96 682.884 L1651.4 682.884 L1650.84 682.884 L1650.28 682.884 L1649.72 682.884 L1649.16 682.884 L1648.6 682.884 L1648.04 682.884 L1647.48 682.884 L1646.93 682.884 L1646.37 682.884 L1645.81 682.884 L1645.25 682.884 L1644.69 682.884 L1644.13 682.884 L1643.57 682.884 L1643.01 682.884 L1642.45 682.884 L1641.89 682.884 L1641.33 682.884 L1640.77 682.884 L1640.21 682.884 L1639.66 682.884 L1639.1 682.884 L1638.54 682.884 L1637.98 682.884 L1637.42 682.884 L1636.86 682.884 L1636.3 682.884 L1635.74 682.884 L1635.18 682.884 L1634.62 682.884 L1634.06 682.884 L1633.5 682.884 L1632.94 682.884 L1632.39 682.884 L1631.83 682.884 L1631.27 682.884 L1630.71 682.884 L1630.15 682.884 L1629.59 682.884 L1629.03 682.884 L1628.47 682.884 L1627.91 682.884 L1627.35 682.884 L1626.79 682.884 L1626.23 682.884 L1625.67 682.884 L1625.11 682.884 L1624.56 682.884 L1624 682.884 L1623.44 682.884 L1622.88 682.884 L1622.32 682.884 L1621.76 682.884 L1621.2 682.884 L1620.64 682.884 L1620.08 682.884 L1619.52 682.884 L1618.96 682.884 L1618.4 682.884 L1617.84 682.884 L1617.29 682.884 L1616.73 682.884 L1616.17 682.884 L1615.61 682.884 L1615.05 682.884 L1614.49 682.884 L1613.93 682.884 L1613.37 682.884 L1612.81 682.884 L1612.25 682.884 L1611.69 682.884 L1611.13 682.884 L1610.57 682.884 L1610.02 682.884 L1609.46 682.884 L1608.9 682.884 L1608.34 682.884 L1607.78 682.884 L1607.22 682.884 L1606.66 682.884 L1606.1 682.884 L1605.54 682.884 L1604.98 682.884 L1604.42 682.884 L1603.86 682.884 L1603.3 682.884 L1602.74 682.884 L1602.19 682.884 L1601.63 682.884 L1601.07 682.884 L1600.51 682.884 L1599.95 682.884 L1599.39 682.884 L1598.83 682.884 L1598.27 682.884 L1597.71 682.884 L1597.15 682.884 L1596.59 682.884 L1596.03 682.884 L1595.47 682.884 L1594.92 682.884 L1594.36 682.884 L1593.8 682.884 L1593.24 682.884 L1592.68 682.884 L1592.12 682.884 L1591.56 682.884 L1591 682.884 L1590.44 682.884 L1589.88 682.884 L1589.32 682.884 L1588.76 682.884 L1588.2 682.884 L1587.65 682.884 L1587.09 682.884 L1586.53 682.884 L1585.97 682.884 L1585.41 682.884 L1584.85 682.884 L1584.29 682.884 L1583.73 682.884 L1583.17 682.884 L1582.61 682.884 L1582.05 682.884 L1581.49 682.884 L1580.93 682.884 L1580.37 682.884 L1579.82 682.884 L1579.26 682.884 L1578.7 682.884 L1578.14 682.884 L1577.58 682.884 L1577.02 682.884 L1576.46 682.884 L1575.9 682.884 L1575.34 682.884 L1574.78 682.884 L1574.22 682.884 L1573.66 682.884 L1573.1 682.884 L1572.55 682.884 L1571.99 682.884 L1571.43 682.884 L1570.87 682.884 L1570.31 682.884 L1569.75 682.884 L1569.19 682.884 L1568.63 682.884 L1568.07 682.884 L1567.51 682.884 L1566.95 682.884 L1566.39 682.884 L1565.83 682.884 L1565.28 682.884 L1564.72 682.884 L1564.16 682.884 L1563.6 682.884 L1563.04 682.884 L1562.48 682.884 L1561.92 682.884 L1561.36 682.884 L1560.8 682.884 L1560.24 682.884 L1559.68 682.884 L1559.12 682.884 L1558.56 682.884 L1558 682.884 L1557.45 682.884 L1556.89 682.884 L1556.33 682.884 L1555.77 682.884 L1555.21 682.884 L1554.65 682.884 L1554.09 682.884 L1553.53 682.884 L1552.97 682.884 L1552.41 682.884 L1551.85 682.884 L1551.29 682.884 L1550.73 682.884 L1550.18 682.884 L1549.62 682.884 L1549.06 682.884 L1548.5 682.884 L1547.94 682.884 L1547.38 682.884 L1546.82 682.884 L1546.26 682.884 L1545.7 682.884 L1545.14 682.884 L1544.58 682.884 L1544.02 682.884 L1543.46 682.884 L1542.9 682.884 L1542.35 682.884 L1541.79 682.884 L1541.23 682.884 L1540.67 682.884 L1540.11 682.884 L1539.55 682.884 L1538.99 682.884 L1538.43 682.884 L1537.87 682.884 L1537.31 682.884 L1536.75 682.884 L1536.19 682.884 L1535.63 682.884 L1535.08 682.884 L1534.52 682.884 L1533.96 682.884 L1533.4 682.884 L1532.84 682.884 L1532.28 682.884 L1531.72 682.884 L1531.16 682.884 L1530.6 682.884 L1530.04 682.884 L1529.48 682.884 L1528.92 682.884 L1528.36 682.884 L1527.81 682.884 L1527.25 682.884 L1526.69 682.884 L1526.13 682.884 L1525.57 682.884 L1525.01 682.884 L1524.45 682.884 L1523.89 682.884 L1523.33 682.884 L1522.77 682.884 L1522.21 682.884 L1521.65 682.884 L1521.09 682.884 L1520.53 682.884 L1519.98 682.884 L1519.42 682.884 L1518.86 682.884 L1518.3 682.884 L1517.74 682.884 L1517.18 682.884 L1516.62 682.884 L1516.06 682.884 L1515.5 682.884 L1514.94 682.884 L1514.38 682.884 L1513.82 682.884 L1513.26 682.884 L1512.71 682.884 L1512.15 682.884 L1511.59 682.884 L1511.03 682.884 L1510.47 682.884 L1509.91 682.884 L1509.35 682.884 L1508.79 682.884 L1508.23 682.884 L1507.67 682.884 L1507.11 682.884 L1506.55 682.884 L1505.99 682.884 L1505.44 682.884 L1504.88 682.884 L1504.32 682.884 L1503.76 682.884 L1503.2 682.884 L1502.64 682.884 L1502.08 682.884 L1501.52 682.884 L1500.96 682.884 L1500.4 682.884 L1499.84 682.884 L1499.28 682.884 L1498.72 682.884 L1498.16 682.884 L1497.61 682.884 L1497.05 682.884 L1496.49 682.884 L1495.93 682.884 L1495.37 682.884 L1494.81 682.884 L1494.25 682.884 L1493.69 682.884 L1493.13 682.884 L1492.57 682.884 L1492.01 682.884 L1491.45 682.884 L1490.89 682.884 L1490.34 682.884 L1489.78 682.884 L1489.22 682.884 L1488.66 682.884 L1488.1 682.884 L1487.54 682.884 L1486.98 682.884 L1486.42 682.884 L1485.86 682.884 L1485.3 682.884 L1484.74 682.884 L1484.18 682.884 L1483.62 682.884 L1483.07 682.884 L1482.51 682.884 L1481.95 682.884 L1481.39 682.884 L1480.83 682.884 L1480.27 682.884 L1479.71 682.884 L1479.15 682.884 L1478.59 682.884 L1478.03 682.884 L1477.47 682.884 L1476.91 682.884 L1476.35 682.884 L1475.79 682.884 L1475.24 682.884 L1474.68 682.884 L1474.12 682.884 L1473.56 682.884 L1473 682.884 L1472.44 682.884 L1471.88 682.884 L1471.32 682.884 L1470.76 682.884 L1470.2 682.884 L1469.64 682.884 L1469.08 682.884 L1468.52 682.884 L1467.97 682.884 L1467.41 682.884 L1466.85 682.884 L1466.29 682.884 L1465.73 682.884 L1465.17 682.884 L1464.61 682.884 L1464.05 682.884 L1463.49 682.884 L1462.93 682.884 L1462.37 682.884 L1461.81 682.884 L1461.25 682.884 L1460.7 682.884 L1460.14 682.884 L1459.58 682.884 L1459.02 682.884 L1458.46 682.884 L1457.9 682.884 L1457.34 682.884 L1456.78 682.884 L1456.22 682.884 L1455.66 682.884 L1455.1 682.884 L1454.54 682.884 L1453.98 682.884 L1453.42 682.884 L1452.87 682.884 L1452.31 682.884 L1451.75 682.884 L1451.19 682.884 L1450.63 682.884 L1450.07 682.884 L1449.51 682.884 L1448.95 682.884 L1448.39 682.884 L1447.83 682.884 L1447.27 682.884 L1446.71 682.884 L1446.15 682.884 L1445.6 682.884 L1445.04 682.884 L1444.48 682.884 L1443.92 682.884 L1443.36 682.884 L1442.8 682.884 L1442.24 682.884 L1441.68 682.884 L1441.12 682.884 L1440.56 682.884 L1440 682.884 L1439.44 682.884 L1438.88 682.884 L1438.33 682.884 L1437.77 682.884 L1437.21 682.884 L1436.65 682.884 L1436.09 682.884 L1435.53 682.884 L1434.97 682.884 L1434.41 682.884 L1433.85 682.884 L1433.29 682.884 L1432.73 682.884 L1432.17 682.884 L1431.61 682.884 L1431.05 682.884 L1430.5 682.884 L1429.94 682.884 L1429.38 682.884 L1428.82 682.884 L1428.26 682.884 L1427.7 682.884 L1427.14 682.884 L1426.58 682.884 L1426.02 682.884 L1425.46 682.884 L1424.9 682.884 L1424.34 682.884 L1423.78 682.884 L1423.23 682.884 L1422.67 682.884 L1422.11 682.884 L1421.55 682.884 L1420.99 682.884 L1420.43 682.884 L1419.87 682.884 L1419.31 682.884 L1418.75 682.884 L1418.19 682.884 L1417.63 682.884 L1417.07 682.884 L1416.51 682.884 L1415.95 682.884 L1415.4 682.884 L1414.84 682.884 L1414.28 682.884 L1413.72 682.884 L1413.16 682.884 L1412.6 682.884 L1412.04 682.884 L1411.48 682.884 L1410.92 682.884 L1410.36 682.884 L1409.8 682.884 L1409.24 682.884 L1408.68 682.884 L1408.13 682.884 L1407.57 682.884 L1407.01 682.884 L1406.45 682.884 L1405.89 682.884 L1405.33 682.884 L1404.77 682.884 L1404.21 682.884 L1403.65 682.884 L1403.09 682.884 L1402.53 682.884 L1401.97 682.884 L1401.41 682.884 L1400.86 682.884 L1400.3 682.884 L1399.74 682.884 L1399.18 682.884 L1398.62 682.884 L1398.06 682.884 L1397.5 682.884 L1396.94 682.884 L1396.38 682.884 L1395.82 682.884 L1395.26 682.884 L1394.7 682.884 L1394.14 682.884 L1393.58 682.884 L1393.03 682.884 L1392.47 682.884 L1391.91 682.884 L1391.35 682.884 L1390.79 682.884 L1390.23 682.884 L1389.67 682.884 L1389.11 682.884 L1388.55 682.884 L1387.99 682.884 L1387.43 682.884 L1386.87 682.884 L1386.31 682.884 L1385.76 682.884 L1385.2 682.884 L1384.64 682.884 L1384.08 682.884 L1383.52 682.884 L1382.96 682.884 L1382.4 682.884 L1381.84 682.884 L1381.28 682.884 L1380.72 682.884 L1380.16 682.884 L1379.6 682.884 L1379.04 682.884 L1378.49 682.884 L1377.93 682.884 L1377.37 682.884 L1376.81 682.884 L1376.25 682.884 L1375.69 682.884 L1375.13 682.884 L1374.57 682.884 L1374.01 682.884 L1373.45 682.884 L1372.89 682.884 L1372.33 682.884 L1371.77 682.884 L1371.21 682.884 L1370.66 682.884 L1370.1 682.884 L1369.54 682.884 L1368.98 682.884 L1368.42 682.884 L1367.86 682.884 L1367.3 682.884 L1366.74 682.884 L1366.18 682.884 L1365.62 682.884 L1365.06 682.884 L1364.5 682.884 L1363.94 682.884 L1363.39 682.884 L1362.83 682.884 L1362.27 682.884 L1361.71 682.884 L1361.15 682.884 L1360.59 682.884 L1360.03 682.884 L1359.47 682.884 L1358.91 682.884 L1358.35 682.884 L1357.79 682.884 L1357.23 682.884 L1356.67 682.884 L1356.12 682.884 L1355.56 682.884 L1355 682.884 L1354.44 682.884 L1353.88 682.884 L1353.32 682.884 L1352.76 682.884 L1352.2 682.884 L1351.64 682.884 L1351.08 682.884 L1350.52 682.884 L1349.96 682.884 L1349.4 682.884 L1348.84 682.884 L1348.29 682.884 L1347.73 682.884 L1347.17 682.884 L1346.61 682.884 L1346.05 682.884 L1345.49 682.884 L1344.93 682.884 L1344.37 682.884 L1343.81 682.884 L1343.25 682.884 L1342.69 682.884 L1342.13 682.884 L1341.57 682.884 L1341.02 682.884 L1340.46 682.884 L1339.9 682.884 L1339.34 682.884 L1338.78 682.884 L1338.22 682.884 L1337.66 682.884 L1337.1 682.884 L1336.54 682.884 L1335.98 682.884 L1335.42 682.884 L1334.86 682.884 L1334.3 682.884 L1333.75 682.884 L1333.19 682.884 L1332.63 682.884 L1332.07 682.884 L1331.51 682.884 L1330.95 682.884 L1330.39 682.884 L1329.83 682.884 L1329.27 682.884 L1328.71 682.884 L1328.15 682.884 L1327.59 682.884 L1327.03 682.884 L1326.47 682.884 L1325.92 682.884 L1325.36 682.884 L1324.8 682.884 L1324.24 682.884 L1323.68 682.884 L1323.12 682.884 L1322.56 682.884 L1322 682.884 L1321.44 682.884 L1320.88 682.884 L1320.32 682.884 L1319.76 682.884 L1319.2 682.884 L1318.65 682.884 L1318.09 682.884 L1317.53 682.884 L1316.97 682.884 L1316.41 682.884 L1315.85 682.884 L1315.29 682.884 L1314.73 682.884 L1314.17 682.884 L1313.61 682.884 L1313.05 682.884 L1312.49 682.884 L1311.93 682.884 L1311.38 682.884 L1310.82 682.884 L1310.26 682.884 L1309.7 682.884 L1309.14 682.884 L1308.58 682.884 L1308.02 682.884 L1307.46 682.884 L1306.9 682.884 L1306.34 682.884 L1305.78 682.884 L1305.22 682.884 L1304.66 682.884 L1304.1 682.884 L1303.55 682.884 L1302.99 682.884 L1302.43 682.884 L1301.87 682.884 L1301.31 682.884 L1300.75 682.884 L1300.19 682.884 L1299.63 682.884 L1299.07 682.884 L1298.51 682.884 L1297.95 682.884 L1297.39 682.884 L1296.83 682.884 L1296.28 682.884 L1295.72 682.884 L1295.16 682.884 L1294.6 682.884 L1294.04 682.884 L1293.48 682.884 L1292.92 682.884 L1292.36 682.884 L1291.8 682.884 L1291.24 682.884 L1290.68 682.884 L1290.12 682.884 L1289.56 682.884 L1289 682.884 L1288.45 682.884 L1287.89 682.884 L1287.33 682.884 L1286.77 682.884 L1286.21 682.884 L1285.65 682.884 L1285.09 682.884 L1284.53 682.884 L1283.97 682.884 L1283.41 682.884 L1282.85 682.884 L1282.29 682.884 L1281.73 682.884 L1281.18 682.884 L1280.62 682.884 L1280.06 682.884 L1279.5 682.884 L1278.94 682.884 L1278.38 682.884 L1277.82 682.884 L1277.26 682.884 L1276.7 682.884 L1276.14 682.884 L1275.58 682.884 L1275.02 682.884 L1274.46 682.884 L1273.91 682.884 L1273.35 682.884 L1272.79 682.884 L1272.23 682.884 L1271.67 682.884 L1271.11 682.884 L1270.55 682.884 L1269.99 682.884 L1269.43 682.884 L1268.87 682.884 L1268.31 682.884 L1267.75 682.884 L1267.19 682.884 L1266.63 682.884 L1266.08 682.884 L1265.52 682.884 L1264.96 682.884 L1264.4 682.884 L1263.84 682.884 L1263.28 682.884 L1262.72 682.884 L1262.16 682.884 L1261.6 682.884 L1261.04 682.884 L1260.48 682.884 L1259.92 682.884 L1259.36 682.884 L1258.81 682.884 L1258.25 682.884 L1257.69 682.884 L1257.13 682.884 L1256.57 682.884 L1256.01 682.884 L1255.45 682.884 L1254.89 682.884 L1254.33 682.884 L1253.77 682.884 L1253.21 682.884 L1252.65 682.884 L1252.09 682.884 L1251.54 682.884 L1250.98 682.884 L1250.42 682.884 L1249.86 682.884 L1249.3 682.884 L1248.74 682.884 L1248.18 682.884 L1247.62 682.884 L1247.06 682.884 L1246.5 682.884 L1245.94 682.884 L1245.38 682.884 L1244.82 682.884 L1244.26 682.884 L1243.71 682.884 L1243.15 682.884 L1242.59 682.884 L1242.03 682.884 L1241.47 682.884 L1240.91 682.884 L1240.35 682.884 L1239.79 682.884 L1239.23 682.884 L1238.67 682.884 L1238.11 682.884 L1237.55 682.884 L1236.99 682.884 L1236.44 682.884 L1235.88 682.884 L1235.32 682.884 L1234.76 682.884 L1234.2 682.884 L1233.64 682.884 L1233.08 682.884 L1232.52 682.884 L1231.96 682.884 L1231.4 682.884 L1230.84 682.884 L1230.28 682.884 L1229.72 682.884 L1229.17 682.884 L1228.61 682.884 L1228.05 682.884 L1227.49 682.884 L1226.93 682.884 L1226.37 682.884 L1225.81 682.884 L1225.25 682.884 L1224.69 682.884 L1224.13 682.884 L1223.57 682.884 L1223.01 682.884 L1222.45 682.884 L1221.89 682.884 L1221.34 682.884 L1220.78 682.884 L1220.22 682.884 L1219.66 682.884 L1219.1 682.884 L1218.54 682.884 L1217.98 682.884 L1217.42 682.884 L1216.86 682.884 L1216.3 682.884 L1215.74 682.884 L1215.18 682.884 L1214.62 682.884 L1214.07 682.884 L1213.51 682.884 L1212.95 682.884 L1212.39 682.884 L1211.83 682.884 L1211.27 682.884 L1210.71 682.884 L1210.15 682.884 L1209.59 682.884 L1209.03 682.884 L1208.47 682.884 L1207.91 682.884 L1207.35 682.884 L1206.8 682.884 L1206.24 682.884 L1205.68 682.884 L1205.12 682.884 L1204.56 682.884 L1204 682.884 L1203.44 682.884 L1202.88 682.884 L1202.32 682.884 L1201.76 682.884 L1201.2 682.884 L1200.64 682.884 L1200.08 682.884 L1199.52 682.884 L1198.97 682.884 L1198.41 682.884 L1197.85 682.884 L1197.29 682.884 L1196.73 682.884 L1196.17 682.884 L1195.61 682.884 L1195.05 682.884 L1194.49 682.884 L1193.93 682.884 L1193.37 682.884 L1192.81 682.884 L1192.25 682.884 L1191.7 682.884 L1191.14 682.884 L1190.58 682.884 L1190.02 682.884 L1189.46 682.884 L1188.9 682.884 L1188.34 682.884 L1187.78 682.884 L1187.22 682.884 L1186.66 682.884 L1186.1 682.884 L1185.54 682.884 L1184.98 682.884 L1184.43 682.884 L1183.87 682.884 L1183.31 682.884 L1182.75 682.884 L1182.19 682.884 L1181.63 682.884 L1181.07 682.884 L1180.51 682.884 L1179.95 682.884 L1179.39 682.884 L1178.83 682.884 L1178.27 682.884 L1177.71 682.884 L1177.15 682.884 L1176.6 682.884 L1176.04 682.884 L1175.48 682.884 L1174.92 682.884 L1174.36 682.884 L1173.8 682.884 L1173.24 682.884 L1172.68 682.884 L1172.12 682.884 L1171.56 682.884 L1171 682.884 L1170.44 682.884 L1169.88 682.884 L1169.33 682.884 L1168.77 682.884 L1168.21 682.884 L1167.65 682.884 L1167.09 682.884 L1166.53 682.884 L1165.97 682.884 L1165.41 682.884 L1164.85 682.884 L1164.29 682.884 L1163.73 682.884 L1163.17 682.884 L1162.61 682.884 L1162.05 682.884 L1161.5 682.884 L1160.94 682.884 L1160.38 682.884 L1159.82 682.884 L1159.26 682.884 L1158.7 682.884 L1158.14 682.884 L1157.58 682.884 L1157.02 682.884 L1156.46 682.884 L1155.9 682.884 L1155.34 682.884 L1154.78 682.884 L1154.23 682.884 L1153.67 682.884 L1153.11 682.884 L1152.55 682.884 L1151.99 682.884 L1151.43 682.884 L1150.87 682.884 L1150.31 682.884 L1149.75 682.884 L1149.19 682.884 L1148.63 682.884 L1148.07 682.884 L1147.51 682.884 L1146.96 682.884 L1146.4 682.884 L1145.84 682.884 L1145.28 682.884 L1144.72 682.884 L1144.16 682.884 L1143.6 682.884 L1143.04 682.884 L1142.48 682.884 L1141.92 682.884 L1141.36 682.884 L1140.8 682.884 L1140.24 682.884 L1139.68 682.884 L1139.13 682.884 L1138.57 682.884 L1138.01 682.884 L1137.45 682.884 L1136.89 682.884 L1136.33 682.884 L1135.77 682.884 L1135.21 682.884 L1134.65 682.884 L1134.09 682.884 L1133.53 682.884 L1132.97 682.884 L1132.41 682.884 L1131.86 682.884 L1131.3 682.884 L1130.74 682.884 L1130.18 682.884 L1129.62 682.884 L1129.06 682.884 L1128.5 682.884 L1127.94 682.884 L1127.38 682.884 L1126.82 682.884 L1126.26 682.884 L1125.7 682.884 L1125.14 682.884 L1124.59 682.884 L1124.03 682.884 L1123.47 682.884 L1122.91 682.884 L1122.35 682.884 L1121.79 682.884 L1121.23 682.884 L1120.67 682.884 L1120.11 682.884 L1119.55 682.884 L1118.99 682.884 L1118.43 682.884 L1117.87 682.884 L1117.31 682.884 L1116.76 682.884 L1116.2 682.884 L1115.64 682.884 L1115.08 682.884 L1114.52 682.884 L1113.96 682.884 L1113.4 682.884 L1112.84 682.884 L1112.28 682.884 L1111.72 682.884 L1111.16 682.884 L1110.6 682.884 L1110.04 682.884 L1109.49 682.884 L1108.93 682.884 L1108.37 682.884 L1107.81 682.884 L1107.25 682.884 L1106.69 682.884 L1106.13 682.884 L1105.57 682.884 L1105.01 682.884 L1104.45 682.884 L1103.89 682.884 L1103.33 682.884 L1102.77 682.884 L1102.22 682.884 L1101.66 682.884 L1101.1 682.884 L1100.54 682.884 L1099.98 682.884 L1099.42 682.884 L1098.86 682.884 L1098.3 682.884 L1097.74 682.884 L1097.18 682.884 L1096.62 682.884 L1096.06 682.884 L1095.5 682.884 L1094.94 682.884 L1094.39 682.884 L1093.83 682.884 L1093.27 682.884 L1092.71 682.884 L1092.15 682.884 L1091.59 682.884 L1091.03 682.884 L1090.47 682.884 L1089.91 682.884 L1089.35 682.884 L1088.79 682.884 L1088.23 682.884 L1087.67 682.884 L1087.12 682.884 L1086.56 682.884 L1086 682.884 L1085.44 682.884 L1084.88 682.884 L1084.32 682.884 L1083.76 682.884 L1083.2 682.884 L1082.64 682.884 L1082.08 682.884 L1081.52 682.884 L1080.96 682.884 L1080.4 682.884 L1079.85 682.884 L1079.29 682.884 L1078.73 682.884 L1078.17 682.884 L1077.61 682.884 L1077.05 682.884 L1076.49 682.884 L1075.93 682.884 L1075.37 682.884 L1074.81 682.884 L1074.25 682.884 L1073.69 682.884 L1073.13 682.884 L1072.57 682.884 L1072.02 682.884 L1071.46 682.884 L1070.9 682.884 L1070.34 682.884 L1069.78 682.884 L1069.22 682.884 L1068.66 682.884 L1068.1 682.884 L1067.54 682.884 L1066.98 682.884 L1066.42 682.884 L1065.86 682.884 L1065.3 682.884 L1064.75 682.884 L1064.19 682.884 L1063.63 682.884 L1063.07 682.884 L1062.51 682.884 L1061.95 682.884 L1061.39 682.884 L1060.83 682.884 L1060.27 682.884 L1059.71 682.884 L1059.15 682.884 L1058.59 682.884 L1058.03 682.884 L1057.48 682.884 L1056.92 682.884 L1056.36 682.884 L1055.8 682.884 L1055.24 682.884 L1054.68 682.884 L1054.12 682.884 L1053.56 682.884 L1053 682.884 L1052.44 682.884 L1051.88 682.884 L1051.32 682.884 L1050.76 682.884 L1050.2 682.884 L1049.65 682.884 L1049.09 682.884 L1048.53 682.884 L1047.97 682.884 L1047.41 682.884 L1046.85 682.884 L1046.29 682.884 L1045.73 682.884 L1045.17 682.884 L1044.61 682.884 L1044.05 682.884 L1043.49 682.884 L1042.93 682.884 L1042.38 682.884 L1041.82 682.884 L1041.26 682.884 L1040.7 682.884 L1040.14 682.884 L1039.58 682.884 L1039.02 682.884 L1038.46 682.884 L1037.9 682.884 L1037.34 682.884 L1036.78 682.884 L1036.22 682.884 L1035.66 682.884 L1035.1 682.884 L1034.55 682.884 L1033.99 682.884 L1033.43 682.884 L1032.87 682.884 L1032.31 682.884 L1031.75 682.884 L1031.19 682.884 L1030.63 682.884 L1030.07 682.884 L1029.51 682.884 L1028.95 682.884 L1028.39 682.884 L1027.83 682.884 L1027.28 682.884 L1026.72 682.884 L1026.16 682.884 L1025.6 682.884 L1025.04 682.884 L1024.48 682.884 L1023.92 682.884 L1023.36 682.884 L1022.8 682.884 L1022.24 682.884 L1021.68 682.884 L1021.12 682.884 L1020.56 682.884 L1020.01 682.884 L1019.45 682.884 L1018.89 682.884 L1018.33 682.884 L1017.77 682.884 L1017.21 682.884 L1016.65 682.884 L1016.09 682.884 L1015.53 682.884 L1014.97 682.884 L1014.41 682.884 L1013.85 682.884 L1013.29 682.884 L1012.73 682.884 L1012.18 682.884 L1011.62 682.884 L1011.06 682.884 L1010.5 682.884 L1009.94 682.884 L1009.38 682.884 L1008.82 682.884 L1008.26 682.884 L1007.7 682.884 L1007.14 682.884 L1006.58 682.884 L1006.02 682.884 L1005.46 682.884 L1004.91 682.884 L1004.35 682.884 L1003.79 682.884 L1003.23 682.884 L1002.67 682.884 L1002.11 682.884 L1001.55 682.884 L1000.99 682.884 L1000.43 682.884 L999.872 682.884 L999.313 682.884 L998.754 682.884 L998.194 682.884 L997.635 682.884 L997.076 682.884 L996.517 682.884 L995.957 682.884 L995.398 682.884 L994.839 682.884 L994.28 682.884 L993.72 682.884 L993.161 682.884 L992.602 682.884 L992.043 682.884 L991.483 682.884 L990.924 682.884 L990.365 682.884 L989.806 682.884 L989.246 682.884 L988.687 682.884 L988.128 682.884 L987.569 682.884 L987.009 682.884 L986.45 682.884 L985.891 682.884 L985.332 682.884 L984.772 682.884 L984.213 682.884 L983.654 682.884 L983.095 682.884 L982.535 682.884 L981.976 682.884 L981.417 682.884 L980.858 682.884 L980.298 682.884 L979.739 682.884 L979.18 682.884 L978.621 682.884 L978.061 682.884 L977.502 682.884 L976.943 682.884 L976.384 682.884 L975.824 682.884 L975.265 682.884 L974.706 682.884 L974.147 682.884 L973.587 682.884 L973.028 682.884 L972.469 682.884 L971.91 682.884 L971.35 682.884 L970.791 682.884 L970.232 682.884 L969.673 682.884 L969.113 682.884 L968.554 682.884 L967.995 682.884 L967.436 682.884 L966.876 682.884 L966.317 682.884 L965.758 682.884 L965.199 682.884 L964.639 682.884 L964.08 682.884 L963.521 682.884 L962.962 682.884 L962.402 682.884 L961.843 682.884 L961.284 682.884 L960.725 682.884 L960.165 682.884 L959.606 682.884 L959.047 682.884 L958.488 682.884 L957.928 682.884 L957.369 682.884 L956.81 682.884 L956.251 682.884 L955.691 682.884 L955.132 682.884 L954.573 682.884 L954.014 682.884 L953.454 682.884 L952.895 682.884 L952.336 682.884 L951.777 682.884 L951.217 682.884 L950.658 682.884 L950.099 682.884 L949.54 682.884 L948.98 682.884 L948.421 682.884 L947.862 682.884 L947.303 682.884 L946.743 682.884 L946.184 682.884 L945.625 682.884 L945.066 682.884 L944.506 682.884 L943.947 682.884 L943.388 682.884 L942.829 682.884 L942.269 682.884 L941.71 682.884 L941.151 682.884 L940.592 682.884 L940.032 682.884 L939.473 682.884 L938.914 682.884 L938.355 682.884 L937.795 682.884 L937.236 682.884 L936.677 682.884 L936.118 682.884 L935.558 682.884 L934.999 682.884 L934.44 682.884 L933.881 682.884 L933.321 682.884 L932.762 682.884 L932.203 682.884 L931.644 682.884 L931.084 682.884 L930.525 682.884 L929.966 682.884 L929.406 682.884 L928.847 682.884 L928.288 682.884 L927.729 682.884 L927.169 682.884 L926.61 682.884 L926.051 682.884 L925.492 682.884 L924.932 682.884 L924.373 682.884 L923.814 682.884 L923.255 682.884 L922.695 682.884 L922.136 682.884 L921.577 682.884 L921.018 682.884 L920.458 682.884 L919.899 682.884 L919.34 682.884 L918.781 682.884 L918.221 682.884 L917.662 682.884 L917.103 682.884 L916.544 682.884 L915.984 682.884 L915.425 682.884 L914.866 682.884 L914.307 682.884 L913.747 682.884 L913.188 682.884 L912.629 682.884 L912.07 682.884 L911.51 682.884 L910.951 682.884 L910.392 682.884 L909.833 682.884 L909.273 682.884 L908.714 682.884 L908.155 682.884 L907.596 682.884 L907.036 682.884 L906.477 682.884 L905.918 682.884 L905.359 682.884 L904.799 682.884 L904.24 682.884 L903.681 682.884 L903.122 682.884 L902.562 682.884 L902.003 682.884 L901.444 682.884 L900.885 682.884 L900.325 682.884 L899.766 682.884 L899.207 682.884 L898.648 682.884 L898.088 682.884 L897.529 682.884 L896.97 682.884 L896.411 682.884 L895.851 682.884 L895.292 682.884 L894.733 682.884 L894.174 682.884 L893.614 682.884 L893.055 682.884 L892.496 682.884 L891.937 682.884 L891.377 682.884 L890.818 682.884 L890.259 682.884 L889.7 682.884 L889.14 682.884 L888.581 682.884 L888.022 682.884 L887.463 682.884 L886.903 682.884 L886.344 682.884 L885.785 682.884 L885.226 682.884 L884.666 682.884 L884.107 682.884 L883.548 682.884 L882.989 682.884 L882.429 682.884 L881.87 682.884 L881.311 682.884 L880.752 682.884 L880.192 682.884 L879.633 682.884 L879.074 682.884 L878.515 682.884 L877.955 682.884 L877.396 682.884 L876.837 682.884 L876.278 682.884 L875.718 682.884 L875.159 682.884 L874.6 682.884 L874.041 682.884 L873.481 682.884 L872.922 682.884 L872.363 682.884 L871.804 682.884 L871.244 682.884 L870.685 682.884 L870.126 682.884 L869.567 682.884 L869.007 682.884 L868.448 682.884 L867.889 682.884 L867.33 682.884 L866.77 682.884 L866.211 682.884 L865.652 682.884 L865.093 682.884 L864.533 682.884 L863.974 682.884 L863.415 682.884 L862.856 682.884 L862.296 682.884 L861.737 682.884 L861.178 682.884 L860.619 682.884 L860.059 682.884 L859.5 682.884 L858.941 682.884 L858.382 682.884 L857.822 682.884 L857.263 682.884 L856.704 682.884 L856.145 682.884 L855.585 682.884 L855.026 682.884 L854.467 682.884 L853.908 682.884 L853.348 682.884 L852.789 682.884 L852.23 682.884 L851.671 682.884 L851.111 682.884 L850.552 682.884 L849.993 682.884 L849.434 682.884 L848.874 682.884 L848.315 682.884 L847.756 682.884 L847.197 682.884 L846.637 682.884 L846.078 682.884 L845.519 682.884 L844.96 682.884 L844.4 682.884 L843.841 682.884 L843.282 682.884 L842.723 682.884 L842.163 682.884 L841.604 682.884 L841.045 682.884 L840.486 682.884 L839.926 682.884 L839.367 682.884 L838.808 682.884 L838.249 682.884 L837.689 682.884 L837.13 682.884 L836.571 682.884 L836.012 682.884 L835.452 682.884 L834.893 682.884 L834.334 682.884 L833.775 682.884 L833.215 682.884 L832.656 682.884 L832.097 682.884 L831.538 682.884 L830.978 682.884 L830.419 682.884 L829.86 682.884 L829.301 682.884 L828.741 682.884 L828.182 682.884 L827.623 682.884 L827.064 682.884 L826.504 682.884 L825.945 682.884 L825.386 682.884 L824.827 682.884 L824.267 682.884 L823.708 682.884 L823.149 682.884 L822.59 682.884 L822.03 682.884 L821.471 682.884 L820.912 682.884 L820.353 682.884 L819.793 682.884 L819.234 682.884 L818.675 682.884 L818.116 682.884 L817.556 682.884 L816.997 682.884 L816.438 682.884 L815.879 682.884 L815.319 682.884 L814.76 682.884 L814.201 682.884 L813.642 682.884 L813.082 682.884 L812.523 682.884 L811.964 682.884 L811.405 682.884 L810.845 682.884 L810.286 682.884 L809.727 682.884 L809.168 682.884 L808.608 682.884 L808.049 682.884 L807.49 682.884 L806.931 682.884 L806.371 682.884 L805.812 682.884 L805.253 682.884 L804.693 682.884 L804.134 682.884 L803.575 682.884 L803.016 682.884 L802.456 682.884 L801.897 682.884 L801.338 682.884 L800.779 682.884 L800.219 682.884 L799.66 682.884 L799.101 682.884 L798.542 682.884 L797.982 682.884 L797.423 682.884 L796.864 682.884 L796.305 682.884 L795.745 682.884 L795.186 682.884 L794.627 682.884 L794.068 682.884 L793.508 682.884 L792.949 682.884 L792.39 682.884 L791.831 682.884 L791.271 682.884 L790.712 682.884 L790.153 682.884 L789.594 682.884 L789.034 682.884 L788.475 682.884 L787.916 682.884 L787.357 682.884 L786.797 682.884 L786.238 682.884 L785.679 682.884 L785.12 682.884 L784.56 682.884 L784.001 682.884 L783.442 682.884 L782.883 682.884 L782.323 682.884 L781.764 682.884 L781.205 682.884 L780.646 682.884 L780.086 682.884 L779.527 682.884 L778.968 682.884 L778.409 682.884 L777.849 682.884 L777.29 682.884 L776.731 682.884 L776.172 682.884 L775.612 682.884 L775.053 682.884 L774.494 682.884 L773.935 682.884 L773.375 682.884 L772.816 682.884 L772.257 682.884 L771.698 682.884 L771.138 682.884 L770.579 682.884 L770.02 682.884 L769.461 682.884 L768.901 682.884 L768.342 682.884 L767.783 682.884 L767.224 682.884 L766.664 682.884 L766.105 682.884 L765.546 682.884 L764.987 682.884 L764.427 682.884 L763.868 682.884 L763.309 682.884 L762.75 682.884 L762.19 682.884 L761.631 682.884 L761.072 682.884 L760.513 682.884 L759.953 682.884 L759.394 682.884 L758.835 682.884 L758.276 682.884 L757.716 682.884 L757.157 682.884 L756.598 682.884 L756.039 682.884 L755.479 682.884 L754.92 682.884 L754.361 682.884 L753.802 682.884 L753.242 682.884 L752.683 682.884 L752.124 682.884 L751.565 682.884 L751.005 682.884 L750.446 682.884 L749.887 682.884 L749.328 682.884 L748.768 682.884 L748.209 682.884 L747.65 682.884 L747.091 682.884 L746.531 682.884 L745.972 682.884 L745.413 682.884 L744.854 682.884 L744.294 682.884 L743.735 682.884 L743.176 682.884 L742.617 682.884 L742.057 682.884 L741.498 682.884 L740.939 682.884 L740.38 682.884 L739.82 682.884 L739.261 682.884 L738.702 682.884 L738.143 682.884 L737.583 682.884 L737.024 682.884 L736.465 682.884 L735.906 682.884 L735.346 682.884 L734.787 682.884 L734.228 682.884 L733.669 682.884 L733.109 682.884 L732.55 682.884 L731.991 682.884 L731.432 682.884 L730.872 682.884 L730.313 682.884 L729.754 682.884 L729.195 682.884 L728.635 682.884 L728.076 682.884 L727.517 682.884 L726.958 682.884 L726.398 682.884 L725.839 682.884 L725.28 682.884 L724.721 682.884 L724.161 682.884 L723.602 682.884 L723.043 682.884 L722.484 682.884 L721.924 682.884 L721.365 682.884 L720.806 682.884 L720.247 682.884  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip263)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.051 720.806,684.051 721.365,684.051 721.924,684.051 722.484,684.051 723.043,684.051 723.602,684.051 724.161,684.051 724.721,684.051 725.28,684.051 725.839,684.051 726.398,684.051 726.958,684.051 727.517,684.051 728.076,684.051 728.635,684.051 729.195,684.051 729.754,684.051 730.313,684.051 730.872,684.051 731.432,684.051 731.991,684.051 732.55,684.051 733.109,684.051 733.669,684.051 734.228,684.051 734.787,684.051 735.346,684.051 735.906,684.051 736.465,684.051 737.024,684.051 737.583,684.051 738.143,684.051 738.702,684.051 739.261,684.051 739.82,684.051 740.38,684.051 740.939,684.051 741.498,684.051 742.057,684.051 742.617,684.051 743.176,684.051 743.735,684.051 744.294,684.051 744.854,684.051 745.413,684.051 745.972,684.051 746.531,684.051 747.091,684.051 747.65,684.051 748.209,684.051 748.768,684.051 749.328,684.051 749.887,684.051 750.446,684.051 751.005,684.051 751.565,684.051 752.124,684.051 752.683,684.051 753.242,684.051 753.802,684.051 754.361,684.051 754.92,684.051 755.479,684.051 756.039,684.051 756.598,684.051 757.157,684.051 757.716,684.051 758.276,684.051 758.835,684.051 759.394,684.051 759.953,684.051 760.513,684.051 761.072,684.051 761.631,684.051 762.19,684.051 762.75,684.051 763.309,684.051 763.868,684.051 764.427,684.051 764.987,684.051 765.546,684.051 766.105,684.051 766.664,684.051 767.224,684.051 767.783,684.051 768.342,684.051 768.901,684.051 769.461,684.051 770.02,684.051 770.579,684.051 771.138,684.051 771.698,684.051 772.257,684.051 772.816,684.051 773.375,684.051 773.935,684.051 774.494,684.051 775.053,684.051 775.612,684.051 776.172,684.051 776.731,684.051 777.29,684.051 777.849,684.051 778.409,684.051 778.968,684.051 779.527,684.051 780.086,684.051 780.646,684.051 781.205,684.051 781.764,684.051 782.323,684.051 782.883,684.051 783.442,684.051 784.001,684.051 784.56,684.051 785.12,684.051 785.679,684.051 786.238,684.051 786.797,684.051 787.357,684.051 787.916,684.051 788.475,684.051 789.034,684.051 789.594,684.051 790.153,684.051 790.712,684.051 791.271,684.051 791.831,684.051 792.39,684.051 792.949,684.051 793.508,684.051 794.068,684.051 794.627,684.051 795.186,684.051 795.745,684.051 796.305,684.051 796.864,684.051 797.423,684.051 797.982,684.051 798.542,684.051 799.101,684.051 799.66,684.051 800.219,684.051 800.779,684.051 801.338,684.051 801.897,684.051 802.456,684.051 803.016,684.051 803.575,684.051 804.134,684.051 804.693,684.051 805.253,684.051 805.812,684.051 806.371,684.051 806.931,684.051 807.49,684.051 808.049,684.051 808.608,684.051 809.168,684.051 809.727,684.051 810.286,684.051 810.845,684.051 811.405,684.051 811.964,684.051 812.523,684.051 813.082,684.051 813.642,684.051 814.201,684.051 814.76,684.051 815.319,684.051 815.879,684.051 816.438,684.051 816.997,684.051 817.556,684.051 818.116,684.051 818.675,684.051 819.234,684.051 819.793,684.051 820.353,684.051 820.912,684.051 821.471,684.051 822.03,684.051 822.59,684.051 823.149,684.051 823.708,684.051 824.267,684.051 824.827,684.051 825.386,684.051 825.945,684.051 826.504,684.051 827.064,684.051 827.623,684.051 828.182,684.051 828.741,684.051 829.301,684.051 829.86,684.051 830.419,684.051 830.978,684.051 831.538,684.051 832.097,684.051 832.656,684.051 833.215,684.051 833.775,684.051 834.334,684.051 834.893,684.051 835.452,684.051 836.012,684.051 836.571,684.051 837.13,684.051 837.689,684.051 838.249,684.051 838.808,684.051 839.367,684.051 839.926,684.051 840.486,684.051 841.045,684.051 841.604,684.051 842.163,684.051 842.723,684.051 843.282,684.051 843.841,684.051 844.4,684.051 844.96,684.051 845.519,684.051 846.078,684.051 846.637,684.051 847.197,684.051 847.756,684.051 848.315,684.051 848.874,684.051 849.434,684.051 849.993,684.051 850.552,684.051 851.111,684.051 851.671,684.051 852.23,684.051 852.789,684.051 853.348,684.051 853.908,684.051 854.467,684.051 855.026,684.051 855.585,684.051 856.145,684.051 856.704,684.051 857.263,684.051 857.822,684.051 858.382,684.051 858.941,684.051 859.5,684.051 860.059,684.051 860.619,684.051 861.178,684.051 861.737,684.051 862.296,684.051 862.856,684.051 863.415,684.051 863.974,684.051 864.533,684.051 865.093,684.051 865.652,684.051 866.211,684.051 866.77,684.051 867.33,684.051 867.889,684.051 868.448,684.051 869.007,684.051 869.567,684.051 870.126,684.051 870.685,684.051 871.244,684.051 871.804,684.051 872.363,684.051 872.922,684.051 873.481,684.051 874.041,684.051 874.6,684.051 875.159,684.051 875.718,684.051 876.278,684.051 876.837,684.051 877.396,684.051 877.955,684.051 878.515,684.051 879.074,684.051 879.633,684.051 880.192,684.051 880.752,684.051 881.311,684.051 881.87,684.051 882.429,684.051 882.989,684.051 883.548,684.051 884.107,684.051 884.666,684.051 885.226,684.051 885.785,684.051 886.344,684.051 886.903,684.051 887.463,684.051 888.022,684.051 888.581,684.051 889.14,684.051 889.7,684.051 890.259,684.051 890.818,684.051 891.377,684.051 891.937,684.051 892.496,684.051 893.055,684.051 893.614,684.051 894.174,684.051 894.733,684.051 895.292,684.051 895.851,684.051 896.411,684.051 896.97,684.051 897.529,684.051 898.088,684.051 898.648,684.051 899.207,684.051 899.766,684.051 900.325,684.051 900.885,684.051 901.444,684.051 902.003,684.051 902.562,684.051 903.122,684.051 903.681,684.051 904.24,684.051 904.799,684.051 905.359,684.051 905.918,684.051 906.477,684.051 907.036,684.051 907.596,684.051 908.155,684.051 908.714,684.051 909.273,684.051 909.833,684.051 910.392,684.051 910.951,684.051 911.51,684.051 912.07,684.051 912.629,684.051 913.188,684.051 913.747,684.051 914.307,684.051 914.866,684.051 915.425,684.051 915.984,684.051 916.544,684.051 917.103,684.051 917.662,684.051 918.221,684.051 918.781,684.051 919.34,684.051 919.899,684.051 920.458,684.051 921.018,684.051 921.577,684.051 922.136,684.051 922.695,684.051 923.255,684.051 923.814,684.051 924.373,684.051 924.932,684.051 925.492,684.051 926.051,684.051 926.61,684.051 927.169,684.051 927.729,684.051 928.288,684.051 928.847,684.051 929.406,684.051 929.966,684.051 930.525,684.051 931.084,684.051 931.644,684.051 932.203,684.051 932.762,684.051 933.321,684.051 933.881,684.051 934.44,684.051 934.999,684.051 935.558,684.051 936.118,684.051 936.677,684.051 937.236,684.051 937.795,684.051 938.355,684.051 938.914,684.051 939.473,684.051 940.032,684.051 940.592,684.051 941.151,684.051 941.71,684.051 942.269,684.051 942.829,684.051 943.388,684.051 943.947,684.051 944.506,684.051 945.066,684.051 945.625,684.051 946.184,684.051 946.743,684.051 947.303,684.051 947.862,684.051 948.421,684.051 948.98,684.051 949.54,684.051 950.099,684.051 950.658,684.051 951.217,684.051 951.777,684.051 952.336,684.051 952.895,684.051 953.454,684.051 954.014,684.051 954.573,684.051 955.132,684.051 955.691,684.051 956.251,684.051 956.81,684.051 957.369,684.051 957.928,684.051 958.488,684.051 959.047,684.051 959.606,684.051 960.165,684.051 960.725,684.051 961.284,684.051 961.843,684.051 962.402,684.051 962.962,684.051 963.521,684.051 964.08,684.051 964.639,684.051 965.199,684.051 965.758,684.051 966.317,684.051 966.876,684.051 967.436,684.051 967.995,684.051 968.554,684.051 969.113,684.051 969.673,684.051 970.232,684.051 970.791,684.051 971.35,684.051 971.91,684.051 972.469,684.051 973.028,684.051 973.587,684.051 974.147,684.051 974.706,684.051 975.265,684.051 975.824,684.051 976.384,684.051 976.943,684.051 977.502,684.051 978.061,684.051 978.621,684.051 979.18,684.051 979.739,684.051 980.298,684.051 980.858,684.051 981.417,684.051 981.976,684.051 982.535,684.051 983.095,684.051 983.654,684.051 984.213,684.051 984.772,684.051 985.332,684.051 985.891,684.051 986.45,684.051 987.009,684.051 987.569,684.051 988.128,684.051 988.687,684.051 989.246,684.051 989.806,684.051 990.365,684.051 990.924,684.051 991.483,684.051 992.043,684.051 992.602,684.051 993.161,684.051 993.72,684.051 994.28,684.051 994.839,684.051 995.398,684.051 995.957,684.051 996.517,684.051 997.076,684.051 997.635,684.051 998.194,684.051 998.754,684.051 999.313,684.051 999.872,684.051 1000.43,684.051 1000.99,684.051 1001.55,684.051 1002.11,684.051 1002.67,684.051 1003.23,684.051 1003.79,684.051 1004.35,684.051 1004.91,684.051 1005.46,684.051 1006.02,684.051 1006.58,684.051 1007.14,684.051 1007.7,684.051 1008.26,684.051 1008.82,684.051 1009.38,684.051 1009.94,684.051 1010.5,684.051 1011.06,684.051 1011.62,684.051 1012.18,684.051 1012.73,684.051 1013.29,684.051 1013.85,684.051 1014.41,684.051 1014.97,684.051 1015.53,684.051 1016.09,684.051 1016.65,684.051 1017.21,684.051 1017.77,684.051 1018.33,684.051 1018.89,684.051 1019.45,684.051 1020.01,684.051 1020.56,684.051 1021.12,684.051 1021.68,684.051 1022.24,684.051 1022.8,684.051 1023.36,684.051 1023.92,684.051 1024.48,684.051 1025.04,684.051 1025.6,684.051 1026.16,684.051 1026.72,684.051 1027.28,684.051 1027.83,684.051 1028.39,684.051 1028.95,684.051 1029.51,684.051 1030.07,684.051 1030.63,684.051 1031.19,684.051 1031.75,684.051 1032.31,684.051 1032.87,684.051 1033.43,684.051 1033.99,684.051 1034.55,684.051 1035.1,684.051 1035.66,684.051 1036.22,684.051 1036.78,684.051 1037.34,684.051 1037.9,684.051 1038.46,684.051 1039.02,684.051 1039.58,684.051 1040.14,684.051 1040.7,684.051 1041.26,684.051 1041.82,684.051 1042.38,684.051 1042.93,684.051 1043.49,684.051 1044.05,684.051 1044.61,684.051 1045.17,684.051 1045.73,684.051 1046.29,684.051 1046.85,684.051 1047.41,684.051 1047.97,684.051 1048.53,684.051 1049.09,684.051 1049.65,684.051 1050.2,684.051 1050.76,684.051 1051.32,684.051 1051.88,684.051 1052.44,684.051 1053,684.051 1053.56,684.051 1054.12,684.051 1054.68,684.051 1055.24,684.051 1055.8,684.051 1056.36,684.051 1056.92,684.051 1057.48,684.051 1058.03,684.051 1058.59,684.051 1059.15,684.051 1059.71,684.051 1060.27,684.051 1060.83,684.051 1061.39,684.051 1061.95,684.051 1062.51,684.051 1063.07,684.051 1063.63,684.051 1064.19,684.051 1064.75,684.051 1065.3,684.051 1065.86,684.051 1066.42,684.051 1066.98,684.051 1067.54,684.051 1068.1,684.051 1068.66,684.051 1069.22,684.051 1069.78,684.051 1070.34,684.051 1070.9,684.051 1071.46,684.051 1072.02,684.051 1072.57,684.051 1073.13,684.051 1073.69,684.051 1074.25,684.051 1074.81,684.051 1075.37,684.051 1075.93,684.051 1076.49,684.051 1077.05,684.051 1077.61,684.051 1078.17,684.051 1078.73,684.051 1079.29,684.051 1079.85,684.051 1080.4,684.051 1080.96,684.051 1081.52,684.051 1082.08,684.051 1082.64,684.051 1083.2,684.051 1083.76,684.051 1084.32,684.051 1084.88,684.051 1085.44,684.051 1086,684.051 1086.56,684.051 1087.12,684.051 1087.67,684.051 1088.23,684.051 1088.79,684.051 1089.35,684.051 1089.91,684.051 1090.47,684.051 1091.03,684.051 1091.59,684.051 1092.15,684.051 1092.71,684.051 1093.27,684.051 1093.83,684.051 1094.39,684.051 1094.94,684.051 1095.5,684.051 1096.06,684.051 1096.62,684.051 1097.18,684.051 1097.74,684.051 1098.3,684.051 1098.86,684.051 1099.42,684.051 1099.98,684.051 1100.54,684.051 1101.1,684.051 1101.66,684.051 1102.22,684.051 1102.77,684.051 1103.33,684.051 1103.89,684.051 1104.45,684.051 1105.01,684.051 1105.57,684.051 1106.13,684.051 1106.69,684.051 1107.25,684.051 1107.81,684.051 1108.37,684.051 1108.93,684.051 1109.49,684.051 1110.04,684.051 1110.6,684.051 1111.16,684.051 1111.72,684.051 1112.28,684.051 1112.84,684.051 1113.4,684.051 1113.96,684.051 1114.52,684.051 1115.08,684.051 1115.64,684.051 1116.2,684.051 1116.76,684.051 1117.31,684.051 1117.87,684.051 1118.43,684.051 1118.99,684.051 1119.55,684.051 1120.11,684.051 1120.67,684.051 1121.23,684.051 1121.79,684.051 1122.35,684.051 1122.91,684.051 1123.47,684.051 1124.03,684.051 1124.59,684.051 1125.14,684.051 1125.7,684.051 1126.26,684.051 1126.82,684.051 1127.38,684.051 1127.94,684.051 1128.5,684.051 1129.06,684.051 1129.62,684.051 1130.18,684.051 1130.74,684.051 1131.3,684.051 1131.86,684.051 1132.41,684.051 1132.97,684.051 1133.53,684.051 1134.09,684.051 1134.65,684.051 1135.21,684.051 1135.77,684.051 1136.33,684.051 1136.89,684.051 1137.45,684.051 1138.01,684.051 1138.57,684.051 1139.13,684.051 1139.68,684.051 1140.24,684.051 1140.8,684.051 1141.36,684.051 1141.92,684.051 1142.48,684.051 1143.04,684.051 1143.6,684.051 1144.16,684.051 1144.72,684.051 1145.28,684.051 1145.84,684.051 1146.4,684.051 1146.96,684.051 1147.51,684.051 1148.07,684.051 1148.63,684.051 1149.19,684.051 1149.75,684.051 1150.31,684.051 1150.87,684.051 1151.43,684.051 1151.99,684.051 1152.55,684.051 1153.11,684.051 1153.67,684.051 1154.23,684.051 1154.78,684.051 1155.34,684.051 1155.9,684.051 1156.46,684.051 1157.02,684.051 1157.58,684.051 1158.14,684.051 1158.7,684.051 1159.26,684.051 1159.82,684.051 1160.38,684.051 1160.94,684.051 1161.5,684.051 1162.05,684.051 1162.61,684.051 1163.17,684.051 1163.73,684.051 1164.29,684.051 1164.85,684.051 1165.41,684.051 1165.97,684.051 1166.53,684.051 1167.09,684.051 1167.65,684.051 1168.21,684.051 1168.77,684.051 1169.33,684.051 1169.88,684.051 1170.44,684.051 1171,684.051 1171.56,684.051 1172.12,684.051 1172.68,684.051 1173.24,684.051 1173.8,684.051 1174.36,684.051 1174.92,684.051 1175.48,684.051 1176.04,684.051 1176.6,684.051 1177.15,684.051 1177.71,684.051 1178.27,684.051 1178.83,684.051 1179.39,684.051 1179.95,684.051 1180.51,684.051 1181.07,684.051 1181.63,684.051 1182.19,684.051 1182.75,684.051 1183.31,684.051 1183.87,684.051 1184.43,684.051 1184.98,684.051 1185.54,684.051 1186.1,684.051 1186.66,684.051 1187.22,684.051 1187.78,684.051 1188.34,684.051 1188.9,684.051 1189.46,684.051 1190.02,684.051 1190.58,684.051 1191.14,684.051 1191.7,684.051 1192.25,684.051 1192.81,684.051 1193.37,684.051 1193.93,684.051 1194.49,684.051 1195.05,684.051 1195.61,684.051 1196.17,684.051 1196.73,684.051 1197.29,684.051 1197.85,684.051 1198.41,684.051 1198.97,684.051 1199.52,684.051 1200.08,684.051 1200.64,684.051 1201.2,684.051 1201.76,684.051 1202.32,684.051 1202.88,684.051 1203.44,684.051 1204,684.051 1204.56,684.051 1205.12,684.051 1205.68,684.051 1206.24,684.051 1206.8,684.051 1207.35,684.051 1207.91,684.051 1208.47,684.051 1209.03,684.051 1209.59,684.051 1210.15,684.051 1210.71,684.051 1211.27,684.051 1211.83,684.051 1212.39,684.051 1212.95,684.051 1213.51,684.051 1214.07,684.051 1214.62,684.051 1215.18,684.051 1215.74,684.051 1216.3,684.051 1216.86,684.051 1217.42,684.051 1217.98,684.051 1218.54,684.051 1219.1,684.051 1219.66,684.051 1220.22,684.051 1220.78,684.051 1221.34,684.051 1221.89,684.051 1222.45,684.051 1223.01,684.051 1223.57,684.051 1224.13,684.051 1224.69,684.051 1225.25,684.051 1225.81,684.051 1226.37,684.051 1226.93,684.051 1227.49,684.051 1228.05,684.051 1228.61,684.051 1229.17,684.051 1229.72,684.051 1230.28,684.051 1230.84,684.051 1231.4,684.051 1231.96,684.051 1232.52,684.051 1233.08,684.051 1233.64,684.051 1234.2,684.051 1234.76,684.051 1235.32,684.051 1235.88,684.051 1236.44,684.051 1236.99,684.051 1237.55,684.051 1238.11,684.051 1238.67,684.051 1239.23,684.051 1239.79,684.051 1240.35,684.051 1240.91,684.051 1241.47,684.051 1242.03,684.051 1242.59,684.051 1243.15,684.051 1243.71,684.051 1244.26,684.051 1244.82,684.051 1245.38,684.051 1245.94,684.051 1246.5,684.051 1247.06,684.051 1247.62,684.051 1248.18,684.051 1248.74,684.051 1249.3,684.051 1249.86,684.051 1250.42,684.051 1250.98,684.051 1251.54,684.051 1252.09,684.051 1252.65,684.051 1253.21,684.051 1253.77,684.051 1254.33,684.051 1254.89,684.051 1255.45,684.051 1256.01,684.051 1256.57,684.051 1257.13,684.051 1257.69,684.051 1258.25,684.051 1258.81,684.051 1259.36,684.051 1259.92,684.051 1260.48,684.051 1261.04,684.051 1261.6,684.051 1262.16,684.051 1262.72,684.051 1263.28,684.051 1263.84,684.051 1264.4,684.051 1264.96,684.051 1265.52,684.051 1266.08,684.051 1266.63,684.051 1267.19,684.051 1267.75,684.051 1268.31,684.051 1268.87,684.051 1269.43,684.051 1269.99,684.051 1270.55,684.051 1271.11,684.051 1271.67,684.051 1272.23,684.051 1272.79,684.051 1273.35,684.051 1273.91,684.051 1274.46,684.051 1275.02,684.051 1275.58,684.051 1276.14,684.051 1276.7,684.051 1277.26,684.051 1277.82,684.051 1278.38,684.051 1278.94,684.051 1279.5,684.051 1280.06,684.051 1280.62,684.051 1281.18,684.051 1281.73,684.051 1282.29,684.051 1282.85,684.051 1283.41,684.051 1283.97,684.051 1284.53,684.051 1285.09,684.051 1285.65,684.051 1286.21,684.051 1286.77,684.051 1287.33,684.051 1287.89,684.051 1288.45,684.051 1289,684.051 1289.56,684.051 1290.12,684.051 1290.68,684.051 1291.24,684.051 1291.8,684.051 1292.36,684.051 1292.92,684.051 1293.48,684.051 1294.04,684.051 1294.6,684.051 1295.16,684.051 1295.72,684.051 1296.28,684.051 1296.83,684.051 1297.39,684.051 1297.95,684.051 1298.51,684.051 1299.07,684.051 1299.63,684.051 1300.19,684.051 1300.75,684.051 1301.31,684.051 1301.87,684.051 1302.43,684.051 1302.99,684.051 1303.55,684.051 1304.1,684.051 1304.66,684.051 1305.22,684.051 1305.78,684.051 1306.34,684.051 1306.9,684.051 1307.46,684.051 1308.02,684.051 1308.58,684.051 1309.14,684.051 1309.7,684.051 1310.26,684.051 1310.82,684.051 1311.38,684.051 1311.93,684.051 1312.49,684.051 1313.05,684.051 1313.61,684.051 1314.17,684.051 1314.73,684.051 1315.29,684.051 1315.85,684.051 1316.41,684.051 1316.97,684.051 1317.53,684.051 1318.09,684.051 1318.65,684.051 1319.2,684.051 1319.76,684.051 1320.32,684.051 1320.88,684.051 1321.44,684.051 1322,684.051 1322.56,684.051 1323.12,684.051 1323.68,684.051 1324.24,684.051 1324.8,684.051 1325.36,684.051 1325.92,684.051 1326.47,684.051 1327.03,684.051 1327.59,684.051 1328.15,684.051 1328.71,684.051 1329.27,684.051 1329.83,684.051 1330.39,684.051 1330.95,684.051 1331.51,684.051 1332.07,684.051 1332.63,684.051 1333.19,684.051 1333.75,684.051 1334.3,684.051 1334.86,684.051 1335.42,684.051 1335.98,684.051 1336.54,684.051 1337.1,684.051 1337.66,684.051 1338.22,684.051 1338.78,684.051 1339.34,684.051 1339.9,684.051 1340.46,684.051 1341.02,684.051 1341.57,684.051 1342.13,684.051 1342.69,684.051 1343.25,684.051 1343.81,684.051 1344.37,684.051 1344.93,684.051 1345.49,684.051 1346.05,684.051 1346.61,684.051 1347.17,684.051 1347.73,684.051 1348.29,684.051 1348.84,684.051 1349.4,684.051 1349.96,684.051 1350.52,684.051 1351.08,684.051 1351.64,684.051 1352.2,684.051 1352.76,684.051 1353.32,684.051 1353.88,684.051 1354.44,684.051 1355,684.051 1355.56,684.051 1356.12,684.051 1356.67,684.051 1357.23,684.051 1357.79,684.051 1358.35,684.051 1358.91,684.051 1359.47,684.051 1360.03,684.051 1360.59,684.051 1361.15,684.051 1361.71,684.051 1362.27,684.051 1362.83,684.051 1363.39,684.051 1363.94,684.051 1364.5,684.051 1365.06,684.051 1365.62,684.051 1366.18,684.051 1366.74,684.051 1367.3,684.051 1367.86,684.051 1368.42,684.051 1368.98,684.051 1369.54,684.051 1370.1,684.051 1370.66,684.051 1371.21,684.051 1371.77,684.051 1372.33,684.051 1372.89,684.051 1373.45,684.051 1374.01,684.051 1374.57,684.051 1375.13,684.051 1375.69,684.051 1376.25,684.051 1376.81,684.051 1377.37,684.051 1377.93,684.051 1378.49,684.051 1379.04,684.051 1379.6,684.051 1380.16,684.051 1380.72,684.051 1381.28,684.051 1381.84,684.051 1382.4,684.051 1382.96,684.051 1383.52,684.051 1384.08,684.051 1384.64,684.051 1385.2,684.051 1385.76,684.051 1386.31,684.051 1386.87,684.051 1387.43,684.051 1387.99,684.051 1388.55,684.051 1389.11,684.051 1389.67,684.051 1390.23,684.051 1390.79,684.051 1391.35,684.051 1391.91,684.051 1392.47,684.051 1393.03,684.051 1393.58,684.051 1394.14,684.051 1394.7,684.051 1395.26,684.051 1395.82,684.051 1396.38,684.051 1396.94,684.051 1397.5,684.051 1398.06,684.051 1398.62,684.051 1399.18,684.051 1399.74,684.051 1400.3,684.051 1400.86,684.051 1401.41,684.051 1401.97,684.051 1402.53,684.051 1403.09,684.051 1403.65,684.051 1404.21,684.051 1404.77,684.051 1405.33,684.051 1405.89,684.051 1406.45,684.051 1407.01,684.051 1407.57,684.051 1408.13,684.051 1408.68,684.051 1409.24,684.051 1409.8,684.051 1410.36,684.051 1410.92,684.051 1411.48,684.051 1412.04,684.051 1412.6,684.051 1413.16,684.051 1413.72,684.051 1414.28,684.051 1414.84,684.051 1415.4,684.051 1415.95,684.051 1416.51,684.051 1417.07,684.051 1417.63,684.051 1418.19,684.051 1418.75,684.051 1419.31,684.051 1419.87,684.051 1420.43,684.051 1420.99,684.051 1421.55,684.051 1422.11,684.051 1422.67,684.051 1423.23,684.051 1423.78,684.051 1424.34,684.051 1424.9,684.051 1425.46,684.051 1426.02,684.051 1426.58,684.051 1427.14,684.051 1427.7,684.051 1428.26,684.051 1428.82,684.051 1429.38,684.051 1429.94,684.051 1430.5,684.051 1431.05,684.051 1431.61,684.051 1432.17,684.051 1432.73,684.051 1433.29,684.051 1433.85,684.051 1434.41,684.051 1434.97,684.051 1435.53,684.051 1436.09,684.051 1436.65,684.051 1437.21,684.051 1437.77,684.051 1438.33,684.051 1438.88,684.051 1439.44,684.051 1440,684.051 1440.56,684.051 1441.12,684.051 1441.68,684.051 1442.24,684.051 1442.8,684.051 1443.36,684.051 1443.92,684.051 1444.48,684.051 1445.04,684.051 1445.6,684.051 1446.15,684.051 1446.71,684.051 1447.27,684.051 1447.83,684.051 1448.39,684.051 1448.95,684.051 1449.51,684.051 1450.07,684.051 1450.63,684.051 1451.19,684.051 1451.75,684.051 1452.31,684.051 1452.87,684.051 1453.42,684.051 1453.98,684.051 1454.54,684.051 1455.1,684.051 1455.66,684.051 1456.22,684.051 1456.78,684.051 1457.34,684.051 1457.9,684.051 1458.46,684.051 1459.02,684.051 1459.58,684.051 1460.14,684.051 1460.7,684.051 1461.25,684.051 1461.81,684.051 1462.37,684.051 1462.93,684.051 1463.49,684.051 1464.05,684.051 1464.61,684.051 1465.17,684.051 1465.73,684.051 1466.29,684.051 1466.85,684.051 1467.41,684.051 1467.97,684.051 1468.52,684.051 1469.08,684.051 1469.64,684.051 1470.2,684.051 1470.76,684.051 1471.32,684.051 1471.88,684.051 1472.44,684.051 1473,684.051 1473.56,684.051 1474.12,684.051 1474.68,684.051 1475.24,684.051 1475.79,684.051 1476.35,684.051 1476.91,684.051 1477.47,684.051 1478.03,684.051 1478.59,684.051 1479.15,684.051 1479.71,684.051 1480.27,684.051 1480.83,684.051 1481.39,684.051 1481.95,684.051 1482.51,684.051 1483.07,684.051 1483.62,684.051 1484.18,684.051 1484.74,684.051 1485.3,684.051 1485.86,684.051 1486.42,684.051 1486.98,684.051 1487.54,684.051 1488.1,684.051 1488.66,684.051 1489.22,684.051 1489.78,684.051 1490.34,684.051 1490.89,684.051 1491.45,684.051 1492.01,684.051 1492.57,684.051 1493.13,684.051 1493.69,684.051 1494.25,684.051 1494.81,684.051 1495.37,684.051 1495.93,684.051 1496.49,684.051 1497.05,684.051 1497.61,684.051 1498.16,684.051 1498.72,684.051 1499.28,684.051 1499.84,684.051 1500.4,684.051 1500.96,684.051 1501.52,684.051 1502.08,684.051 1502.64,684.051 1503.2,684.051 1503.76,684.051 1504.32,684.051 1504.88,684.051 1505.44,684.051 1505.99,684.051 1506.55,684.051 1507.11,684.051 1507.67,684.051 1508.23,684.051 1508.79,684.051 1509.35,684.051 1509.91,684.051 1510.47,684.051 1511.03,684.051 1511.59,684.051 1512.15,684.051 1512.71,684.051 1513.26,684.051 1513.82,684.051 1514.38,684.051 1514.94,684.051 1515.5,684.051 1516.06,684.051 1516.62,684.051 1517.18,684.051 1517.74,684.051 1518.3,684.051 1518.86,684.051 1519.42,684.051 1519.98,684.051 1520.53,684.051 1521.09,684.051 1521.65,684.051 1522.21,684.051 1522.77,684.051 1523.33,684.051 1523.89,684.051 1524.45,684.051 1525.01,684.051 1525.57,684.051 1526.13,684.051 1526.69,684.051 1527.25,684.051 1527.81,684.051 1528.36,684.051 1528.92,684.051 1529.48,684.051 1530.04,684.051 1530.6,684.051 1531.16,684.051 1531.72,684.051 1532.28,684.051 1532.84,684.051 1533.4,684.051 1533.96,684.051 1534.52,684.051 1535.08,684.051 1535.63,684.051 1536.19,684.051 1536.75,684.051 1537.31,684.051 1537.87,684.051 1538.43,684.051 1538.99,684.051 1539.55,684.051 1540.11,684.051 1540.67,684.051 1541.23,684.051 1541.79,684.051 1542.35,684.051 1542.9,684.051 1543.46,684.051 1544.02,684.051 1544.58,684.051 1545.14,684.051 1545.7,684.051 1546.26,684.051 1546.82,684.051 1547.38,684.051 1547.94,684.051 1548.5,684.051 1549.06,684.051 1549.62,684.051 1550.18,684.051 1550.73,684.051 1551.29,684.051 1551.85,684.051 1552.41,684.051 1552.97,684.051 1553.53,684.051 1554.09,684.051 1554.65,684.051 1555.21,684.051 1555.77,684.051 1556.33,684.051 1556.89,684.051 1557.45,684.051 1558,684.051 1558.56,684.051 1559.12,684.051 1559.68,684.051 1560.24,684.051 1560.8,684.051 1561.36,684.051 1561.92,684.051 1562.48,684.051 1563.04,684.051 1563.6,684.051 1564.16,684.051 1564.72,684.051 1565.28,684.051 1565.83,684.051 1566.39,684.051 1566.95,684.051 1567.51,684.051 1568.07,684.051 1568.63,684.051 1569.19,684.051 1569.75,684.051 1570.31,684.051 1570.87,684.051 1571.43,684.051 1571.99,684.051 1572.55,684.051 1573.1,684.051 1573.66,684.051 1574.22,684.051 1574.78,684.051 1575.34,684.051 1575.9,684.051 1576.46,684.051 1577.02,684.051 1577.58,684.051 1578.14,684.051 1578.7,684.051 1579.26,684.051 1579.82,684.051 1580.37,684.051 1580.93,684.051 1581.49,684.051 1582.05,684.051 1582.61,684.051 1583.17,684.051 1583.73,684.051 1584.29,684.051 1584.85,684.051 1585.41,684.051 1585.97,684.051 1586.53,684.051 1587.09,684.051 1587.65,684.051 1588.2,684.051 1588.76,684.051 1589.32,684.051 1589.88,684.051 1590.44,684.051 1591,684.051 1591.56,684.051 1592.12,684.051 1592.68,684.051 1593.24,684.051 1593.8,684.051 1594.36,684.051 1594.92,684.051 1595.47,684.051 1596.03,684.051 1596.59,684.051 1597.15,684.051 1597.71,684.051 1598.27,684.051 1598.83,684.051 1599.39,684.051 1599.95,684.051 1600.51,684.051 1601.07,684.051 1601.63,684.051 1602.19,684.051 1602.74,684.051 1603.3,684.051 1603.86,684.051 1604.42,684.051 1604.98,684.051 1605.54,684.051 1606.1,684.051 1606.66,684.051 1607.22,684.051 1607.78,684.051 1608.34,684.051 1608.9,684.051 1609.46,684.051 1610.02,684.051 1610.57,684.051 1611.13,684.051 1611.69,684.051 1612.25,684.051 1612.81,684.051 1613.37,684.051 1613.93,684.051 1614.49,684.051 1615.05,684.051 1615.61,684.051 1616.17,684.051 1616.73,684.051 1617.29,684.051 1617.84,684.051 1618.4,684.051 1618.96,684.051 1619.52,684.051 1620.08,684.051 1620.64,684.051 1621.2,684.051 1621.76,684.051 1622.32,684.051 1622.88,684.051 1623.44,684.051 1624,684.051 1624.56,684.051 1625.11,684.051 1625.67,684.051 1626.23,684.051 1626.79,684.051 1627.35,684.051 1627.91,684.051 1628.47,684.051 1629.03,684.051 1629.59,684.051 1630.15,684.051 1630.71,684.051 1631.27,684.051 1631.83,684.051 1632.39,684.051 1632.94,684.051 1633.5,684.051 1634.06,684.051 1634.62,684.051 1635.18,684.051 1635.74,684.051 1636.3,684.051 1636.86,684.051 1637.42,684.051 1637.98,684.051 1638.54,684.051 1639.1,684.051 1639.66,684.051 1640.21,684.051 1640.77,684.051 1641.33,684.051 1641.89,684.051 1642.45,684.051 1643.01,684.051 1643.57,684.051 1644.13,684.051 1644.69,684.051 1645.25,684.051 1645.81,684.051 1646.37,684.051 1646.93,684.051 1647.48,684.051 1648.04,684.051 1648.6,684.051 1649.16,684.051 1649.72,684.051 1650.28,684.051 1650.84,684.051 1651.4,684.051 1651.96,684.051 1652.52,684.051 1653.08,684.051 1653.64,684.051 1654.2,684.051 1654.76,684.051 1655.31,684.051 1655.87,684.051 1656.43,684.051 1656.99,684.051 1657.55,684.051 1658.11,684.051 1658.67,684.051 1659.23,684.051 1659.79,684.051 1660.35,684.051 1660.91,684.051 1661.47,684.051 1662.03,684.051 1662.58,684.051 1663.14,684.051 1663.7,684.051 1664.26,684.051 1664.82,684.051 1665.38,684.051 1665.94,684.051 1666.5,684.051 1667.06,684.051 1667.62,684.051 1668.18,684.051 1668.74,684.051 1669.3,684.051 1669.85,684.051 1670.41,684.051 1670.97,684.051 1671.53,684.051 1672.09,684.051 1672.65,684.051 1673.21,684.051 1673.77,684.051 1674.33,684.051 1674.89,684.051 1675.45,684.051 1676.01,684.051 1676.57,684.051 1677.13,684.051 1677.68,684.051 1678.24,684.051 1678.8,684.051 1679.36,684.051 1679.92,684.051 1680.48,684.051 1681.04,684.051 1681.6,684.051 1682.16,684.051 1682.72,684.051 1683.28,684.051 1683.84,684.051 1684.4,684.051 1684.95,684.051 1685.51,684.051 1686.07,684.051 1686.63,684.051 1687.19,684.051 1687.75,684.051 1688.31,684.051 1688.87,684.051 1689.43,684.051 1689.99,684.051 1690.55,684.051 1691.11,684.051 1691.67,684.051 1692.23,684.051 1692.78,684.051 1693.34,684.051 1693.9,684.051 1694.46,684.051 1695.02,684.051 1695.58,684.051 1696.14,684.051 1696.7,684.051 1697.26,684.051 1697.82,684.051 1698.38,684.051 1698.94,684.051 1699.5,684.051 1700.05,684.051 1700.61,684.051 1701.17,684.051 1701.73,684.051 1702.29,684.051 1702.85,684.051 1703.41,684.051 1703.97,684.051 1704.53,684.051 1705.09,684.051 1705.65,684.051 1706.21,684.051 1706.77,684.051 1707.32,684.051 1707.88,684.051 1708.44,684.051 1709,684.051 1709.56,684.051 1710.12,684.051 1710.68,684.051 1711.24,684.051 1711.8,684.051 1712.36,684.051 1712.92,684.051 1713.48,684.051 1714.04,684.051 1714.6,684.051 1715.15,684.051 1715.71,684.051 1716.27,684.051 1716.83,684.051 1717.39,684.051 1717.95,684.051 1718.51,684.051 1719.07,684.051 1719.63,684.051 1720.19,684.051 1720.75,684.051 1721.31,684.051 1721.87,684.051 1722.42,684.051 1722.98,684.051 1723.54,684.051 1724.1,684.051 1724.66,684.051 1725.22,684.051 1725.78,684.051 1726.34,684.051 1726.9,684.051 1727.46,684.051 1728.02,684.051 1728.58,684.051 1729.14,684.051 1729.69,684.051 1730.25,684.051 1730.81,684.051 1731.37,684.051 1731.93,684.051 1732.49,684.051 1733.05,684.051 1733.61,684.051 1734.17,684.051 1734.73,684.051 1735.29,684.051 1735.85,684.051 1736.41,684.051 1736.97,684.051 1737.52,684.051 1738.08,684.051 1738.64,684.051 1739.2,684.051 1739.76,684.051 1740.32,684.051 1740.88,684.051 1741.44,684.051 1742,684.051 1742.56,684.051 1743.12,684.051 1743.68,684.051 1744.24,684.051 1744.79,684.051 1745.35,684.051 1745.91,684.051 1746.47,684.051 1747.03,684.051 1747.59,684.051 1748.15,684.051 1748.71,684.051 1749.27,684.051 1749.83,684.051 1750.39,684.051 1750.95,684.051 1751.51,684.051 1752.06,684.051 1752.62,684.051 1753.18,684.051 1753.74,684.051 1754.3,684.051 1754.86,684.051 1755.42,684.051 1755.98,684.051 1756.54,684.051 1757.1,684.051 1757.66,684.051 1758.22,684.051 1758.78,684.051 1759.34,684.051 1759.89,684.051 1760.45,684.051 1761.01,684.051 1761.57,684.051 1762.13,684.051 1762.69,684.051 1763.25,684.051 1763.81,684.051 1764.37,684.051 1764.93,684.051 1765.49,684.051 1766.05,684.051 1766.61,684.051 1767.16,684.051 1767.72,684.051 1768.28,684.051 1768.84,684.051 1769.4,684.051 1769.96,684.051 1770.52,684.051 1771.08,684.051 1771.64,684.051 1772.2,684.051 1772.76,684.051 1773.32,684.051 1773.88,684.051 1774.43,684.051 1774.99,684.051 1775.55,684.051 1776.11,684.051 1776.67,684.051 1777.23,684.051 1777.79,684.051 1778.35,684.051 1778.91,684.051 1779.47,684.051 1780.03,684.051 1780.59,684.051 1781.15,684.051 1781.71,684.051 1782.26,684.051 1782.82,684.051 1783.38,684.051 1783.94,684.051 1784.5,684.051 1785.06,684.051 1785.62,684.051 1786.18,684.051 1786.74,684.051 1787.3,684.051 1787.86,684.051 1788.42,684.051 1788.98,684.051 1789.53,684.051 1790.09,684.051 1790.65,684.051 1791.21,684.051 1791.77,684.051 1792.33,684.051 1792.89,684.051 1793.45,684.051 1794.01,684.051 1794.57,684.051 1795.13,684.051 1795.69,684.051 1796.25,684.051 1796.8,684.051 1797.36,684.051 1797.92,684.051 1798.48,684.051 1799.04,684.051 1799.6,684.051 1800.16,684.051 1800.72,684.051 1801.28,684.051 1801.84,684.051 1802.4,684.051 1802.96,684.051 1803.52,684.051 1804.08,684.051 1804.63,684.051 1805.19,684.051 1805.75,684.051 1806.31,684.051 1806.87,684.051 1807.43,684.051 1807.99,684.051 1808.55,684.051 1809.11,684.051 1809.67,684.051 1810.23,684.051 1810.79,684.051 1811.35,684.051 1811.9,684.051 1812.46,684.051 1813.02,684.051 1813.58,684.051 1814.14,684.051 1814.7,684.051 1815.26,684.051 1815.82,684.051 1816.38,684.051 1816.94,684.051 1817.5,684.051 1818.06,684.051 1818.62,684.051 1819.18,684.051 1819.73,684.051 1820.29,684.051 1820.85,684.051 1821.41,684.051 1821.97,684.051 1822.53,684.051 1823.09,684.051 1823.65,684.051 1824.21,684.051 1824.77,684.051 1825.33,684.051 1825.89,684.051 1826.45,684.051 1827,684.051 1827.56,684.051 1828.12,684.051 1828.68,684.051 1829.24,684.051 1829.8,684.051 1830.36,684.051 1830.92,684.051 1831.48,684.051 1832.04,684.051 1832.6,684.051 1833.16,684.051 1833.72,684.051 1834.27,684.051 1834.83,684.051 1835.39,684.051 1835.95,684.051 1836.51,684.051 1837.07,684.051 1837.63,684.051 1838.19,684.051 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027038056298895 ± 0.019623161418636213\nProjected Energy: -4.017434575355358 ± (0.006399918246264846, 0.0058790611515799895)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.21786</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.5096e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">3.3393e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.5589e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.507e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.053e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3846e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.3631242916133672\n -0.759019192277087\n  0.13584182219622853\n  0.15789998694607732\n  0.876711441178152\n  1.5305929970973313\n  1.5835732611867321\n  3.072870330325868\n  3.1256726539518276\n  4.8621072215621775\n  6.260694850380592\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^8, cutoff, filter, max_depth, stop_after, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Without this argument, the order is random and may change between invocations of the function! Any additional keyword arguments are passed on to Base.sort!.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
